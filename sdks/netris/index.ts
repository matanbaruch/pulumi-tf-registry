// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { AcltwozeroArgs, AcltwozeroState } from "./acltwozero";
export type Acltwozero = import("./acltwozero").Acltwozero;
export const Acltwozero: typeof import("./acltwozero").Acltwozero = null as any;
utilities.lazyLoad(exports, ["Acltwozero"], () => require("./acltwozero"));

export { AllocationArgs, AllocationState } from "./allocation";
export type Allocation = import("./allocation").Allocation;
export const Allocation: typeof import("./allocation").Allocation = null as any;
utilities.lazyLoad(exports, ["Allocation"], () => require("./allocation"));

export { BgpArgs, BgpState } from "./bgp";
export type Bgp = import("./bgp").Bgp;
export const Bgp: typeof import("./bgp").Bgp = null as any;
utilities.lazyLoad(exports, ["Bgp"], () => require("./bgp"));

export { BgpObjectArgs, BgpObjectState } from "./bgpObject";
export type BgpObject = import("./bgpObject").BgpObject;
export const BgpObject: typeof import("./bgpObject").BgpObject = null as any;
utilities.lazyLoad(exports, ["BgpObject"], () => require("./bgpObject"));

export { ControllerArgs, ControllerState } from "./controller";
export type Controller = import("./controller").Controller;
export const Controller: typeof import("./controller").Controller = null as any;
utilities.lazyLoad(exports, ["Controller"], () => require("./controller"));

export { DhcpOptionSetArgs, DhcpOptionSetState } from "./dhcpOptionSet";
export type DhcpOptionSet = import("./dhcpOptionSet").DhcpOptionSet;
export const DhcpOptionSet: typeof import("./dhcpOptionSet").DhcpOptionSet = null as any;
utilities.lazyLoad(exports, ["DhcpOptionSet"], () => require("./dhcpOptionSet"));

export { GetBgpObjectArgs, GetBgpObjectResult, GetBgpObjectOutputArgs } from "./getBgpObject";
export const getBgpObject: typeof import("./getBgpObject").getBgpObject = null as any;
export const getBgpObjectOutput: typeof import("./getBgpObject").getBgpObjectOutput = null as any;
utilities.lazyLoad(exports, ["getBgpObject","getBgpObjectOutput"], () => require("./getBgpObject"));

export { GetDhcpOptionSetArgs, GetDhcpOptionSetResult, GetDhcpOptionSetOutputArgs } from "./getDhcpOptionSet";
export const getDhcpOptionSet: typeof import("./getDhcpOptionSet").getDhcpOptionSet = null as any;
export const getDhcpOptionSetOutput: typeof import("./getDhcpOptionSet").getDhcpOptionSetOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpOptionSet","getDhcpOptionSetOutput"], () => require("./getDhcpOptionSet"));

export { GetInventoryProfileArgs, GetInventoryProfileResult, GetInventoryProfileOutputArgs } from "./getInventoryProfile";
export const getInventoryProfile: typeof import("./getInventoryProfile").getInventoryProfile = null as any;
export const getInventoryProfileOutput: typeof import("./getInventoryProfile").getInventoryProfileOutput = null as any;
utilities.lazyLoad(exports, ["getInventoryProfile","getInventoryProfileOutput"], () => require("./getInventoryProfile"));

export { GetLagArgs, GetLagResult, GetLagOutputArgs } from "./getLag";
export const getLag: typeof import("./getLag").getLag = null as any;
export const getLagOutput: typeof import("./getLag").getLagOutput = null as any;
utilities.lazyLoad(exports, ["getLag","getLagOutput"], () => require("./getLag"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetPortArgs, GetPortResult, GetPortOutputArgs } from "./getPort";
export const getPort: typeof import("./getPort").getPort = null as any;
export const getPortOutput: typeof import("./getPort").getPortOutput = null as any;
utilities.lazyLoad(exports, ["getPort","getPortOutput"], () => require("./getPort"));

export { GetRoutemapArgs, GetRoutemapResult, GetRoutemapOutputArgs } from "./getRoutemap";
export const getRoutemap: typeof import("./getRoutemap").getRoutemap = null as any;
export const getRoutemapOutput: typeof import("./getRoutemap").getRoutemapOutput = null as any;
utilities.lazyLoad(exports, ["getRoutemap","getRoutemapOutput"], () => require("./getRoutemap"));

export { GetSiteArgs, GetSiteResult, GetSiteOutputArgs } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetVnetArgs, GetVnetResult, GetVnetOutputArgs } from "./getVnet";
export const getVnet: typeof import("./getVnet").getVnet = null as any;
export const getVnetOutput: typeof import("./getVnet").getVnetOutput = null as any;
utilities.lazyLoad(exports, ["getVnet","getVnetOutput"], () => require("./getVnet"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { InventoryProfileArgs, InventoryProfileState } from "./inventoryProfile";
export type InventoryProfile = import("./inventoryProfile").InventoryProfile;
export const InventoryProfile: typeof import("./inventoryProfile").InventoryProfile = null as any;
utilities.lazyLoad(exports, ["InventoryProfile"], () => require("./inventoryProfile"));

export { L4lbArgs, L4lbState } from "./l4lb";
export type L4lb = import("./l4lb").L4lb;
export const L4lb: typeof import("./l4lb").L4lb = null as any;
utilities.lazyLoad(exports, ["L4lb"], () => require("./l4lb"));

export { LagArgs, LagState } from "./lag";
export type Lag = import("./lag").Lag;
export const Lag: typeof import("./lag").Lag = null as any;
utilities.lazyLoad(exports, ["Lag"], () => require("./lag"));

export { LinkArgs, LinkState } from "./link";
export type Link = import("./link").Link;
export const Link: typeof import("./link").Link = null as any;
utilities.lazyLoad(exports, ["Link"], () => require("./link"));

export { NatArgs, NatState } from "./nat";
export type Nat = import("./nat").Nat;
export const Nat: typeof import("./nat").Nat = null as any;
utilities.lazyLoad(exports, ["Nat"], () => require("./nat"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { PermissionGroupArgs, PermissionGroupState } from "./permissionGroup";
export type PermissionGroup = import("./permissionGroup").PermissionGroup;
export const PermissionGroup: typeof import("./permissionGroup").PermissionGroup = null as any;
utilities.lazyLoad(exports, ["PermissionGroup"], () => require("./permissionGroup"));

export { PortArgs, PortState } from "./port";
export type Port = import("./port").Port;
export const Port: typeof import("./port").Port = null as any;
utilities.lazyLoad(exports, ["Port"], () => require("./port"));

export { PortgroupArgs, PortgroupState } from "./portgroup";
export type Portgroup = import("./portgroup").Portgroup;
export const Portgroup: typeof import("./portgroup").Portgroup = null as any;
utilities.lazyLoad(exports, ["Portgroup"], () => require("./portgroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RohArgs, RohState } from "./roh";
export type Roh = import("./roh").Roh;
export const Roh: typeof import("./roh").Roh = null as any;
utilities.lazyLoad(exports, ["Roh"], () => require("./roh"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RoutemapArgs, RoutemapState } from "./routemap";
export type Routemap = import("./routemap").Routemap;
export const Routemap: typeof import("./routemap").Routemap = null as any;
utilities.lazyLoad(exports, ["Routemap"], () => require("./routemap"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerclusterArgs, ServerclusterState } from "./servercluster";
export type Servercluster = import("./servercluster").Servercluster;
export const Servercluster: typeof import("./servercluster").Servercluster = null as any;
utilities.lazyLoad(exports, ["Servercluster"], () => require("./servercluster"));

export { ServerclustertemplateArgs, ServerclustertemplateState } from "./serverclustertemplate";
export type Serverclustertemplate = import("./serverclustertemplate").Serverclustertemplate;
export const Serverclustertemplate: typeof import("./serverclustertemplate").Serverclustertemplate = null as any;
utilities.lazyLoad(exports, ["Serverclustertemplate"], () => require("./serverclustertemplate"));

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { SoftgateArgs, SoftgateState } from "./softgate";
export type Softgate = import("./softgate").Softgate;
export const Softgate: typeof import("./softgate").Softgate = null as any;
utilities.lazyLoad(exports, ["Softgate"], () => require("./softgate"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SwitchArgs, SwitchState } from "./switch";
export type Switch = import("./switch").Switch;
export const Switch: typeof import("./switch").Switch = null as any;
utilities.lazyLoad(exports, ["Switch"], () => require("./switch"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserRoleArgs, UserRoleState } from "./userRole";
export type UserRole = import("./userRole").UserRole;
export const UserRole: typeof import("./userRole").UserRole = null as any;
utilities.lazyLoad(exports, ["UserRole"], () => require("./userRole"));

export { VnetArgs, VnetState } from "./vnet";
export type Vnet = import("./vnet").Vnet;
export const Vnet: typeof import("./vnet").Vnet = null as any;
utilities.lazyLoad(exports, ["Vnet"], () => require("./vnet"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netris:index/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "netris:index/acltwozero:Acltwozero":
                return new Acltwozero(name, <any>undefined, { urn })
            case "netris:index/allocation:Allocation":
                return new Allocation(name, <any>undefined, { urn })
            case "netris:index/bgp:Bgp":
                return new Bgp(name, <any>undefined, { urn })
            case "netris:index/bgpObject:BgpObject":
                return new BgpObject(name, <any>undefined, { urn })
            case "netris:index/controller:Controller":
                return new Controller(name, <any>undefined, { urn })
            case "netris:index/dhcpOptionSet:DhcpOptionSet":
                return new DhcpOptionSet(name, <any>undefined, { urn })
            case "netris:index/inventoryProfile:InventoryProfile":
                return new InventoryProfile(name, <any>undefined, { urn })
            case "netris:index/l4lb:L4lb":
                return new L4lb(name, <any>undefined, { urn })
            case "netris:index/lag:Lag":
                return new Lag(name, <any>undefined, { urn })
            case "netris:index/link:Link":
                return new Link(name, <any>undefined, { urn })
            case "netris:index/nat:Nat":
                return new Nat(name, <any>undefined, { urn })
            case "netris:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "netris:index/permissionGroup:PermissionGroup":
                return new PermissionGroup(name, <any>undefined, { urn })
            case "netris:index/port:Port":
                return new Port(name, <any>undefined, { urn })
            case "netris:index/portgroup:Portgroup":
                return new Portgroup(name, <any>undefined, { urn })
            case "netris:index/roh:Roh":
                return new Roh(name, <any>undefined, { urn })
            case "netris:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "netris:index/routemap:Routemap":
                return new Routemap(name, <any>undefined, { urn })
            case "netris:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "netris:index/servercluster:Servercluster":
                return new Servercluster(name, <any>undefined, { urn })
            case "netris:index/serverclustertemplate:Serverclustertemplate":
                return new Serverclustertemplate(name, <any>undefined, { urn })
            case "netris:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "netris:index/softgate:Softgate":
                return new Softgate(name, <any>undefined, { urn })
            case "netris:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "netris:index/switch:Switch":
                return new Switch(name, <any>undefined, { urn })
            case "netris:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "netris:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "netris:index/userRole:UserRole":
                return new UserRole(name, <any>undefined, { urn })
            case "netris:index/vnet:Vnet":
                return new Vnet(name, <any>undefined, { urn })
            case "netris:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netris", "index/acl", _module)
pulumi.runtime.registerResourceModule("netris", "index/acltwozero", _module)
pulumi.runtime.registerResourceModule("netris", "index/allocation", _module)
pulumi.runtime.registerResourceModule("netris", "index/bgp", _module)
pulumi.runtime.registerResourceModule("netris", "index/bgpObject", _module)
pulumi.runtime.registerResourceModule("netris", "index/controller", _module)
pulumi.runtime.registerResourceModule("netris", "index/dhcpOptionSet", _module)
pulumi.runtime.registerResourceModule("netris", "index/inventoryProfile", _module)
pulumi.runtime.registerResourceModule("netris", "index/l4lb", _module)
pulumi.runtime.registerResourceModule("netris", "index/lag", _module)
pulumi.runtime.registerResourceModule("netris", "index/link", _module)
pulumi.runtime.registerResourceModule("netris", "index/nat", _module)
pulumi.runtime.registerResourceModule("netris", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("netris", "index/permissionGroup", _module)
pulumi.runtime.registerResourceModule("netris", "index/port", _module)
pulumi.runtime.registerResourceModule("netris", "index/portgroup", _module)
pulumi.runtime.registerResourceModule("netris", "index/roh", _module)
pulumi.runtime.registerResourceModule("netris", "index/route", _module)
pulumi.runtime.registerResourceModule("netris", "index/routemap", _module)
pulumi.runtime.registerResourceModule("netris", "index/server", _module)
pulumi.runtime.registerResourceModule("netris", "index/servercluster", _module)
pulumi.runtime.registerResourceModule("netris", "index/serverclustertemplate", _module)
pulumi.runtime.registerResourceModule("netris", "index/site", _module)
pulumi.runtime.registerResourceModule("netris", "index/softgate", _module)
pulumi.runtime.registerResourceModule("netris", "index/subnet", _module)
pulumi.runtime.registerResourceModule("netris", "index/switch", _module)
pulumi.runtime.registerResourceModule("netris", "index/tenant", _module)
pulumi.runtime.registerResourceModule("netris", "index/user", _module)
pulumi.runtime.registerResourceModule("netris", "index/userRole", _module)
pulumi.runtime.registerResourceModule("netris", "index/vnet", _module)
pulumi.runtime.registerResourceModule("netris", "index/vpc", _module)
pulumi.runtime.registerResourcePackage("netris", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netris") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
