// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Company the user works for. Usually useful for multi-tenant systems where the company provides Netris Controller access
     * to customers.
     */
    public readonly company!: pulumi.Output<string | undefined>;
    /**
     * The email address of the user. Also used for system notifications and for password retrieval.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * Send copies of email notifications to this address.
     */
    public readonly emailcc!: pulumi.Output<string | undefined>;
    /**
     * Full Name of the user.
     */
    public readonly fullname!: pulumi.Output<string | undefined>;
    /**
     * Name of Permission Group. User permissions for viewing and editing parts of the Netris Controller. (if User Role is not
     * used).
     */
    public readonly pgroup!: pulumi.Output<string | undefined>;
    /**
     * User’s phone number.
     */
    public readonly phone!: pulumi.Output<string | undefined>;
    /**
     * Position within the company.
     */
    public readonly position!: pulumi.Output<string | undefined>;
    /**
     * List of tenants. (if User Role is not used).
     */
    public readonly tenants!: pulumi.Output<outputs.UserTenant[] | undefined>;
    /**
     * Unique username.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Name of User Role. When using a User Role object to define RBAC (role-based access control), `pgroup` and `tenants`
     * fields will be ignoring.
     */
    public readonly userrole!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["company"] = state ? state.company : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["emailcc"] = state ? state.emailcc : undefined;
            resourceInputs["fullname"] = state ? state.fullname : undefined;
            resourceInputs["pgroup"] = state ? state.pgroup : undefined;
            resourceInputs["phone"] = state ? state.phone : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["tenants"] = state ? state.tenants : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["userrole"] = state ? state.userrole : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            if ((!args || args.userrole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userrole'");
            }
            resourceInputs["company"] = args ? args.company : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["emailcc"] = args ? args.emailcc : undefined;
            resourceInputs["fullname"] = args ? args.fullname : undefined;
            resourceInputs["pgroup"] = args ? args.pgroup : undefined;
            resourceInputs["phone"] = args ? args.phone : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["tenants"] = args ? args.tenants : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["userrole"] = args ? args.userrole : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Company the user works for. Usually useful for multi-tenant systems where the company provides Netris Controller access
     * to customers.
     */
    company?: pulumi.Input<string>;
    /**
     * The email address of the user. Also used for system notifications and for password retrieval.
     */
    email?: pulumi.Input<string>;
    /**
     * Send copies of email notifications to this address.
     */
    emailcc?: pulumi.Input<string>;
    /**
     * Full Name of the user.
     */
    fullname?: pulumi.Input<string>;
    /**
     * Name of Permission Group. User permissions for viewing and editing parts of the Netris Controller. (if User Role is not
     * used).
     */
    pgroup?: pulumi.Input<string>;
    /**
     * User’s phone number.
     */
    phone?: pulumi.Input<string>;
    /**
     * Position within the company.
     */
    position?: pulumi.Input<string>;
    /**
     * List of tenants. (if User Role is not used).
     */
    tenants?: pulumi.Input<pulumi.Input<inputs.UserTenant>[]>;
    /**
     * Unique username.
     */
    username?: pulumi.Input<string>;
    /**
     * Name of User Role. When using a User Role object to define RBAC (role-based access control), `pgroup` and `tenants`
     * fields will be ignoring.
     */
    userrole?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Company the user works for. Usually useful for multi-tenant systems where the company provides Netris Controller access
     * to customers.
     */
    company?: pulumi.Input<string>;
    /**
     * The email address of the user. Also used for system notifications and for password retrieval.
     */
    email: pulumi.Input<string>;
    /**
     * Send copies of email notifications to this address.
     */
    emailcc?: pulumi.Input<string>;
    /**
     * Full Name of the user.
     */
    fullname?: pulumi.Input<string>;
    /**
     * Name of Permission Group. User permissions for viewing and editing parts of the Netris Controller. (if User Role is not
     * used).
     */
    pgroup?: pulumi.Input<string>;
    /**
     * User’s phone number.
     */
    phone?: pulumi.Input<string>;
    /**
     * Position within the company.
     */
    position?: pulumi.Input<string>;
    /**
     * List of tenants. (if User Role is not used).
     */
    tenants?: pulumi.Input<pulumi.Input<inputs.UserTenant>[]>;
    /**
     * Unique username.
     */
    username: pulumi.Input<string>;
    /**
     * Name of User Role. When using a User Role object to define RBAC (role-based access control), `pgroup` and `tenants`
     * fields will be ignoring.
     */
    userrole: pulumi.Input<string>;
}
