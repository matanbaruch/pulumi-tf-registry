// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    /**
     * Description of route
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Hardware ID where to apply this route. It is typically used for Null routes. If not set, Netris will automatically
     * decide where to apply
     */
    public readonly hwids!: pulumi.Output<number[] | undefined>;
    /**
     * Traffic destined to the Prefix will be routed towards the Next-Hop. Note that static routes will be injected only on
     * units that have the Next-Hop as a connected network
     */
    public readonly nexthop!: pulumi.Output<string>;
    /**
     * Route destination to match
     */
    public readonly prefix!: pulumi.Output<string>;
    /**
     * The site ID where the current route belongs
     */
    public readonly siteid!: pulumi.Output<number>;
    /**
     * Administrative state of the route. Possible values: `enabled` or `disabled`. Default value is `enabled`
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * ID of VPC. If not specified, the route will be created in the VPC marked as a default.
     */
    public readonly vpcid!: pulumi.Output<number | undefined>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hwids"] = state ? state.hwids : undefined;
            resourceInputs["nexthop"] = state ? state.nexthop : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["siteid"] = state ? state.siteid : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vpcid"] = state ? state.vpcid : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.nexthop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nexthop'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            if ((!args || args.siteid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteid'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hwids"] = args ? args.hwids : undefined;
            resourceInputs["nexthop"] = args ? args.nexthop : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["siteid"] = args ? args.siteid : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["vpcid"] = args ? args.vpcid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    /**
     * Description of route
     */
    description?: pulumi.Input<string>;
    /**
     * Hardware ID where to apply this route. It is typically used for Null routes. If not set, Netris will automatically
     * decide where to apply
     */
    hwids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Traffic destined to the Prefix will be routed towards the Next-Hop. Note that static routes will be injected only on
     * units that have the Next-Hop as a connected network
     */
    nexthop?: pulumi.Input<string>;
    /**
     * Route destination to match
     */
    prefix?: pulumi.Input<string>;
    /**
     * The site ID where the current route belongs
     */
    siteid?: pulumi.Input<number>;
    /**
     * Administrative state of the route. Possible values: `enabled` or `disabled`. Default value is `enabled`
     */
    state?: pulumi.Input<string>;
    /**
     * ID of VPC. If not specified, the route will be created in the VPC marked as a default.
     */
    vpcid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    /**
     * Description of route
     */
    description?: pulumi.Input<string>;
    /**
     * Hardware ID where to apply this route. It is typically used for Null routes. If not set, Netris will automatically
     * decide where to apply
     */
    hwids?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Traffic destined to the Prefix will be routed towards the Next-Hop. Note that static routes will be injected only on
     * units that have the Next-Hop as a connected network
     */
    nexthop: pulumi.Input<string>;
    /**
     * Route destination to match
     */
    prefix: pulumi.Input<string>;
    /**
     * The site ID where the current route belongs
     */
    siteid: pulumi.Input<number>;
    /**
     * Administrative state of the route. Possible values: `enabled` or `disabled`. Default value is `enabled`
     */
    state?: pulumi.Input<string>;
    /**
     * ID of VPC. If not specified, the route will be created in the VPC marked as a default.
     */
    vpcid?: pulumi.Input<number>;
}
