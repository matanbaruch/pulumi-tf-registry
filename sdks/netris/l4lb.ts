// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class L4lb extends pulumi.CustomResource {
    /**
     * Get an existing L4lb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: L4lbState, opts?: pulumi.CustomResourceOptions): L4lb {
        return new L4lb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/l4lb:L4lb';

    /**
     * Returns true if the given object is an instance of L4lb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is L4lb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === L4lb.__pulumiType;
    }

    /**
     * List of backends. Valid value is `ip`:`port` Example `["192.0.2.100:443", "192.0.2.101:443"]`
     */
    public readonly backends!: pulumi.Output<string[] | undefined>;
    /**
     * A health check determines whether instances in the target pool are healthy. If protocol == `udp` then check.type should
     * be `none`
     */
    public readonly check!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * L4LB frontend IP. If not specified, will be assigned automatically from subnets with relevant purpose.
     */
    public readonly frontend!: pulumi.Output<string | undefined>;
    /**
     * The name of the resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * L4LB frontend port to be exposed
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Protocol. Possible values: `tcp` or `udp`
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The site ID. Resources defined in the selected site will be permitted to be used as backed entries for this L4 Load
     * Balancer service.
     */
    public readonly siteid!: pulumi.Output<number | undefined>;
    /**
     * Administrative status. Possible values: `active` or `disable`. Default value is `active`
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * ID of tenant. Users of this tenant will be permitted to edit this unit.
     */
    public readonly tenantid!: pulumi.Output<number | undefined>;

    /**
     * Create a L4lb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: L4lbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: L4lbArgs | L4lbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as L4lbState | undefined;
            resourceInputs["backends"] = state ? state.backends : undefined;
            resourceInputs["check"] = state ? state.check : undefined;
            resourceInputs["frontend"] = state ? state.frontend : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["siteid"] = state ? state.siteid : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tenantid"] = state ? state.tenantid : undefined;
        } else {
            const args = argsOrState as L4lbArgs | undefined;
            resourceInputs["backends"] = args ? args.backends : undefined;
            resourceInputs["check"] = args ? args.check : undefined;
            resourceInputs["frontend"] = args ? args.frontend : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["siteid"] = args ? args.siteid : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tenantid"] = args ? args.tenantid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(L4lb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering L4lb resources.
 */
export interface L4lbState {
    /**
     * List of backends. Valid value is `ip`:`port` Example `["192.0.2.100:443", "192.0.2.101:443"]`
     */
    backends?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A health check determines whether instances in the target pool are healthy. If protocol == `udp` then check.type should
     * be `none`
     */
    check?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * L4LB frontend IP. If not specified, will be assigned automatically from subnets with relevant purpose.
     */
    frontend?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * L4LB frontend port to be exposed
     */
    port?: pulumi.Input<number>;
    /**
     * Protocol. Possible values: `tcp` or `udp`
     */
    protocol?: pulumi.Input<string>;
    /**
     * The site ID. Resources defined in the selected site will be permitted to be used as backed entries for this L4 Load
     * Balancer service.
     */
    siteid?: pulumi.Input<number>;
    /**
     * Administrative status. Possible values: `active` or `disable`. Default value is `active`
     */
    state?: pulumi.Input<string>;
    /**
     * ID of tenant. Users of this tenant will be permitted to edit this unit.
     */
    tenantid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a L4lb resource.
 */
export interface L4lbArgs {
    /**
     * List of backends. Valid value is `ip`:`port` Example `["192.0.2.100:443", "192.0.2.101:443"]`
     */
    backends?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A health check determines whether instances in the target pool are healthy. If protocol == `udp` then check.type should
     * be `none`
     */
    check?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * L4LB frontend IP. If not specified, will be assigned automatically from subnets with relevant purpose.
     */
    frontend?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * L4LB frontend port to be exposed
     */
    port?: pulumi.Input<number>;
    /**
     * Protocol. Possible values: `tcp` or `udp`
     */
    protocol?: pulumi.Input<string>;
    /**
     * The site ID. Resources defined in the selected site will be permitted to be used as backed entries for this L4 Load
     * Balancer service.
     */
    siteid?: pulumi.Input<number>;
    /**
     * Administrative status. Possible values: `active` or `disable`. Default value is `active`
     */
    state?: pulumi.Input<string>;
    /**
     * ID of tenant. Users of this tenant will be permitted to edit this unit.
     */
    tenantid?: pulumi.Input<number>;
}
