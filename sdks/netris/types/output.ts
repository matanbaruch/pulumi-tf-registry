// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AcltwozeroPublisher {
    /**
     * List of Instances ID (ROH)
     */
    instanceids?: number[];
    /**
     * List of LB VIPs ID
     */
    lbvips?: number[];
    /**
     * List with prefixes
     */
    prefixes?: string[];
    /**
     * The block of protocol configurations
     */
    protocols?: outputs.AcltwozeroPublisherProtocol[];
}

export interface AcltwozeroPublisherProtocol {
    /**
     * Custom name for the current protocol
     */
    name?: string;
    /**
     * Port number. Example `80`. Or protocol number when protocol == `ip`
     */
    port?: string;
    /**
     * ID of Port Group. Use instead of port key
     */
    portgroupid?: number;
    /**
     * Valid protocol. Possible values: `ip`, `tcp`, `udp`, `icmp`, `all`
     */
    protocol?: string;
}

export interface AcltwozeroSubscriber {
    /**
     * List of Instances ID (ROH)
     */
    instanceids?: number[];
    /**
     * List of prefixes
     */
    prefixes?: outputs.AcltwozeroSubscriberPrefix[];
}

export interface AcltwozeroSubscriberPrefix {
    /**
     * Optional comment
     */
    comment?: string;
    /**
     * Valid prefix
     */
    prefix: string;
}

export interface DhcpOptionSetCustomoption {
    /**
     * Option code
     */
    code: number;
    /**
     * Value type
     */
    type: string;
    /**
     * Value of option
     */
    value: string;
}

export interface DhcpOptionSetStandardtoption {
    /**
     * Option code
     */
    code: number;
    /**
     * Value of option
     */
    value: string;
}

export interface GetDhcpOptionSetCustomoption {
    /**
     * Option code
     */
    code: number;
    /**
     * Value type
     */
    type: string;
    /**
     * Value of option
     */
    value: string;
}

export interface GetDhcpOptionSetStandardtoption {
    /**
     * Option code
     */
    code: number;
    /**
     * Value of option
     */
    value: string;
}

export interface GetInventoryProfileCustomrule {
    /**
     * Custom rule's description.
     */
    description?: string;
    /**
     * Destination port. 1-65535, or empty for any.
     */
    dstport: string;
    /**
     * Protocol.
     */
    protocol: string;
    /**
     * Source Subnet.
     */
    sourcesubnet: string;
    /**
     * Source port. 1-65535, or empty for any.
     */
    srcport: string;
}

export interface GetVnetSite {
    /**
     * Block of gateways.
     */
    gateways?: outputs.GetVnetSiteGateway[];
    /**
     * The site ID. Ports from these sites will be allowed to participate in the V-Net.
     */
    id: number;
    /**
     * Block of ports
     */
    ports?: outputs.GetVnetSitePort[];
}

export interface GetVnetSiteGateway {
    /**
     * The address will be serving as anycast default gateway for selected subnet.
     */
    prefix: string;
    vlanid?: string;
}

export interface GetVnetSitePort {
    /**
     * Switch port name.
     */
    name?: string;
    /**
     * VLAN tag for current port.
     */
    vlanid?: string;
}

export interface GetVpcGuesttenantid {
    /**
     * The ID of a guest tenant who is authorized to add/remove services to the VPC but not allowed to manage other parameters of it.
     */
    id: number;
}

export interface InventoryProfileCustomrule {
    /**
     * Custom rule's description.
     */
    description?: string;
    /**
     * Destination port. 1-65535, or empty for any.
     */
    dstport: string;
    /**
     * Protocol. Valid value is `udp`, `tcp` or `any`.
     */
    protocol: string;
    /**
     * Source Subnet. Example `10.0.0.0/8`
     */
    sourcesubnet: string;
    /**
     * Source port. 1-65535, or empty for any.
     */
    srcport: string;
}

export interface InventoryProfileFabricsetting {
    /**
     * Optimize BGP Overlay for leaf-spine topology. When checked, overlay BGP updates will be optimized for large scale. Each leaf switch (based on name) will form its overlay BGP sessions only with two spine switches (with the lowest IDs). Otherwise, Overlay BGP sessions will be configured on p2p links alongside underlay.
     */
    optimisebgpoverlay?: boolean;
    /**
     * When checked, BGP underlay sessions will be configured using p2p IPv4 addresses configured on link objects in the Netris controller. Otherwise, BGP unnumbered method is used and p2p ipv6 link-local addresses are used for BGP sessions.
     */
    unnumberedbgpunderlay?: boolean;
}

export interface InventoryProfileGpuclustersetting {
    /**
     * Minimize prefix updates over BGP Overlay for L3VPN p2p links in rail-optimized topology and IP addressing schemes.
     */
    aggregatel3vpnprefix?: boolean;
    /**
     * Enable ASIC monitoring: Histograms and Telemetry Snapshots.
     */
    asicmonitoring?: boolean;
    /**
     * Enable Zero Touch RoCE Congestion Control.
     */
    congestioncontrol?: boolean;
    /**
     * Optimize for RDMA over Converged Ethernet.
     */
    qosandroce?: boolean;
    /**
     * Enable Adaptive Routing for RoCE.
     */
    roceadaptiverouting?: boolean;
}

export interface RoutemapSequence {
    actions?: outputs.RoutemapSequenceAction[];
    /**
     * Current black free description
     */
    description?: string;
    /**
     * Block of Rules for route matching.
     */
    matches?: outputs.RoutemapSequenceMatch[];
    /**
     * Permit or deny the routes which match below all match clauses within the current sequence. Possible values: `permit` or `deny`
     */
    policy: string;
}

export interface RoutemapSequenceAction {
    /**
     * The attribute to be manipulated. Possible values: `as_path`, `community`, `large_community`, `ipv4_next_hop`, `ipv6_next_hop`, `local_preference`, `med`, `origin`, `route_tag`, `weight`
     */
    parameter?: string;
    /**
     * Define whether to manipulate a particular BGP attribute or go to another sequence. Possible values: `set`, `goto`, `next`
     */
    type: string;
    /**
     * New attribute value
     */
    value?: string;
}

export interface RoutemapSequenceMatch {
    /**
     * The ID of bgp object. Only for types: `as_path`, `community`, `extended_community`, `large_community`, `ipv4_prefix_list`, `ipv4_next_hop`, `route_source`, `ipv6_prefix_list`
     */
    objectid?: number;
    /**
     * Type of the object to match: `as_path`, `community`, `extended_community`, `large_community`, `ipv4_prefix_list`, `ipv4_next_hop`, `route_source`, `ipv6_prefix_list`, `ipv6_next_hop`, `local_preference`, `med`, `origin`, `route_tag`
     */
    type: string;
    /**
     * Value of the object. Only for types: `ipv6_next_hop`, `local_preference`, `med`, `origin`, `route_tag`. Possible value for type `origin` is: `egp`, `incomplete`, `igp`
     */
    value?: string;
}

export interface SiteSwitchfabricprovider {
    equinixmetals?: outputs.SiteSwitchfabricproviderEquinixmetal[];
    phoenixnapbmcs?: outputs.SiteSwitchfabricproviderPhoenixnapbmc[];
}

export interface SiteSwitchfabricproviderEquinixmetal {
    location: string;
    projectapikey: string;
    projectid: string;
}

export interface SiteSwitchfabricproviderPhoenixnapbmc {
    clientid: string;
    clientsecret: string;
    location: string;
}

export interface UserTenant {
    /**
     * Edit access for tenant
     */
    edit?: boolean;
    /**
     * Tenant ID (-1 menas 'All tenants')
     */
    id: number;
}

export interface VnetSite {
    /**
     * Block of gateways
     */
    gateways?: outputs.VnetSiteGateway[];
    /**
     * The site ID. Ports from these sites will be allowed to participate in the V-Net. (Multi-site vnet would require backbone connectivity between sites).
     */
    id: number;
    /**
     * Block of interfaces
     */
    interfaces?: outputs.VnetSiteInterface[];
    /**
     * Block of ports
     */
    ports?: outputs.VnetSitePort[];
}

export interface VnetSiteGateway {
    dhcp?: string;
    dhcpendip: string;
    dhcpoptionsetid: number;
    dhcpstartip: string;
    /**
     * The address will be serving as anycast default gateway for selected subnet. Example: `203.0.113.1/25`
     */
    prefix: string;
    vlanid?: string;
}

export interface VnetSiteInterface {
    /**
     * LAG mode. Allows for active-standby dual-homing, assuming LAG configuration on the remote end. Valid value is `on` or `off`. Default value is `off`.
     *
     * @deprecated Deprecated
     */
    lacp?: string;
    /**
     * Switch port name. Example: `swp5@my-sw01`
     */
    name?: string;
    /**
     * Only when global 'vlanid' is specified
     */
    untagged?: string;
    /**
     * VLAN tag for current port. If vlanid is not set - means port untagged
     */
    vlanid?: string;
}

export interface VnetSitePort {
    /**
     * LAG mode. Allows for active-standby dual-homing, assuming LAG configuration on the remote end. Valid value is `on` or `off`. Default value is `off`.
     *
     * @deprecated Deprecated
     */
    lacp?: string;
    /**
     * Switch port name. Example: `swp5@my-sw01`
     */
    name?: string;
    /**
     * Only when global 'vlanid' is specified
     */
    untagged?: string;
    /**
     * VLAN tag for current port. If vlanid is not set - means port untagged
     */
    vlanid?: string;
}

export interface VpcGuesttenantid {
    /**
     * The ID of a guest tenant who is authorized to add/remove services to the VPC but not allowed to manage other parameters of it.
     */
    id: number;
}

