// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVnet(args: GetVnetArgs, opts?: pulumi.InvokeOptions): Promise<GetVnetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netris:index/getVnet:getVnet", {
        "id": args.id,
        "name": args.name,
        "sites": args.sites,
        "state": args.state,
        "tenantid": args.tenantid,
        "vpcid": args.vpcid,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVnet.
 */
export interface GetVnetArgs {
    id?: string;
    name: string;
    sites?: inputs.GetVnetSite[];
    state?: string;
    tenantid?: number;
    vpcid?: number;
}

/**
 * A collection of values returned by getVnet.
 */
export interface GetVnetResult {
    readonly id: string;
    readonly name: string;
    readonly sites?: outputs.GetVnetSite[];
    readonly state: string;
    readonly tenantid: number;
    readonly vpcid?: number;
}
export function getVnetOutput(args: GetVnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVnetResult> {
    return pulumi.output(args).apply((a: any) => getVnet(a, opts))
}

/**
 * A collection of arguments for invoking getVnet.
 */
export interface GetVnetOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    sites?: pulumi.Input<pulumi.Input<inputs.GetVnetSiteArgs>[]>;
    state?: pulumi.Input<string>;
    tenantid?: pulumi.Input<number>;
    vpcid?: pulumi.Input<number>;
}
