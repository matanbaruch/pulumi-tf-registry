// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Port extends pulumi.CustomResource {
    /**
     * Get an existing Port resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortState, opts?: pulumi.CustomResourceOptions): Port {
        return new Port(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/port:Port';

    /**
     * Returns true if the given object is an instance of Port.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Port {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Port.__pulumiType;
    }

    /**
     * Toggle auto negotiation. Possible values: `default`, `on`, `off`. Default value is `default`
     */
    public readonly autoneg!: pulumi.Output<string | undefined>;
    /**
     * Toggle breakout. Possible values: `off`, `4x10`, `4x25`, `4x100`, `manual`. Default value is `off`
     */
    public readonly breakout!: pulumi.Output<string | undefined>;
    /**
     * Port desired description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Port extension configurations.
     */
    public readonly extension!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * MTU must be integer between 68 and 9216. Default value is `9000`
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Port's exact name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Toggle interface speed, make sure that current switch supports the configured speed. Possibe values: `auto`, `1g`,
     * `10g`, `25g`, `40g`, `50g`, `100g`, `200g`, `400g`. Default value is `auto`
     */
    public readonly speed!: pulumi.Output<string | undefined>;
    /**
     * The switch ID to whom this port belongs
     */
    public readonly switchid!: pulumi.Output<number>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage port
     */
    public readonly tenantid!: pulumi.Output<number>;

    /**
     * Create a Port resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortArgs | PortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortState | undefined;
            resourceInputs["autoneg"] = state ? state.autoneg : undefined;
            resourceInputs["breakout"] = state ? state.breakout : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extension"] = state ? state.extension : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["switchid"] = state ? state.switchid : undefined;
            resourceInputs["tenantid"] = state ? state.tenantid : undefined;
        } else {
            const args = argsOrState as PortArgs | undefined;
            if ((!args || args.switchid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switchid'");
            }
            if ((!args || args.tenantid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantid'");
            }
            resourceInputs["autoneg"] = args ? args.autoneg : undefined;
            resourceInputs["breakout"] = args ? args.breakout : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extension"] = args ? args.extension : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["switchid"] = args ? args.switchid : undefined;
            resourceInputs["tenantid"] = args ? args.tenantid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Port.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Port resources.
 */
export interface PortState {
    /**
     * Toggle auto negotiation. Possible values: `default`, `on`, `off`. Default value is `default`
     */
    autoneg?: pulumi.Input<string>;
    /**
     * Toggle breakout. Possible values: `off`, `4x10`, `4x25`, `4x100`, `manual`. Default value is `off`
     */
    breakout?: pulumi.Input<string>;
    /**
     * Port desired description
     */
    description?: pulumi.Input<string>;
    /**
     * Port extension configurations.
     */
    extension?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * MTU must be integer between 68 and 9216. Default value is `9000`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Port's exact name
     */
    name?: pulumi.Input<string>;
    /**
     * Toggle interface speed, make sure that current switch supports the configured speed. Possibe values: `auto`, `1g`,
     * `10g`, `25g`, `40g`, `50g`, `100g`, `200g`, `400g`. Default value is `auto`
     */
    speed?: pulumi.Input<string>;
    /**
     * The switch ID to whom this port belongs
     */
    switchid?: pulumi.Input<number>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage port
     */
    tenantid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Port resource.
 */
export interface PortArgs {
    /**
     * Toggle auto negotiation. Possible values: `default`, `on`, `off`. Default value is `default`
     */
    autoneg?: pulumi.Input<string>;
    /**
     * Toggle breakout. Possible values: `off`, `4x10`, `4x25`, `4x100`, `manual`. Default value is `off`
     */
    breakout?: pulumi.Input<string>;
    /**
     * Port desired description
     */
    description?: pulumi.Input<string>;
    /**
     * Port extension configurations.
     */
    extension?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * MTU must be integer between 68 and 9216. Default value is `9000`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Port's exact name
     */
    name?: pulumi.Input<string>;
    /**
     * Toggle interface speed, make sure that current switch supports the configured speed. Possibe values: `auto`, `1g`,
     * `10g`, `25g`, `40g`, `50g`, `100g`, `200g`, `400g`. Default value is `auto`
     */
    speed?: pulumi.Input<string>;
    /**
     * The switch ID to whom this port belongs
     */
    switchid: pulumi.Input<number>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage port
     */
    tenantid: pulumi.Input<number>;
}
