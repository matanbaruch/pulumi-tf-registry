// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDhcpOptionSet(args: GetDhcpOptionSetArgs, opts?: pulumi.InvokeOptions): Promise<GetDhcpOptionSetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("netris:index/getDhcpOptionSet:getDhcpOptionSet", {
        "customoptions": args.customoptions,
        "description": args.description,
        "dnsservers": args.dnsservers,
        "domainsearch": args.domainsearch,
        "id": args.id,
        "leasetime": args.leasetime,
        "name": args.name,
        "ntpservers": args.ntpservers,
        "standardtoptions": args.standardtoptions,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDhcpOptionSet.
 */
export interface GetDhcpOptionSetArgs {
    customoptions?: inputs.GetDhcpOptionSetCustomoption[];
    description?: string;
    dnsservers?: string[];
    domainsearch?: string;
    id?: string;
    leasetime?: number;
    name: string;
    ntpservers?: string[];
    standardtoptions?: inputs.GetDhcpOptionSetStandardtoption[];
}

/**
 * A collection of values returned by getDhcpOptionSet.
 */
export interface GetDhcpOptionSetResult {
    readonly customoptions?: outputs.GetDhcpOptionSetCustomoption[];
    readonly description?: string;
    readonly dnsservers?: string[];
    readonly domainsearch?: string;
    readonly id: string;
    readonly leasetime?: number;
    readonly name: string;
    readonly ntpservers?: string[];
    readonly standardtoptions?: outputs.GetDhcpOptionSetStandardtoption[];
}
export function getDhcpOptionSetOutput(args: GetDhcpOptionSetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDhcpOptionSetResult> {
    return pulumi.output(args).apply((a: any) => getDhcpOptionSet(a, opts))
}

/**
 * A collection of arguments for invoking getDhcpOptionSet.
 */
export interface GetDhcpOptionSetOutputArgs {
    customoptions?: pulumi.Input<pulumi.Input<inputs.GetDhcpOptionSetCustomoptionArgs>[]>;
    description?: pulumi.Input<string>;
    dnsservers?: pulumi.Input<pulumi.Input<string>[]>;
    domainsearch?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    leasetime?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    ntpservers?: pulumi.Input<pulumi.Input<string>[]>;
    standardtoptions?: pulumi.Input<pulumi.Input<inputs.GetDhcpOptionSetStandardtoptionArgs>[]>;
}
