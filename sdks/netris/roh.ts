// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Roh extends pulumi.CustomResource {
    /**
     * Get an existing Roh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RohState, opts?: pulumi.CustomResourceOptions): Roh {
        return new Roh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netris:index/roh:Roh';

    /**
     * Returns true if the given object is an instance of Roh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Roh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Roh.__pulumiType;
    }

    /**
     * List of anycast IP addresses
     */
    public readonly anycastips!: pulumi.Output<string[]>;
    /**
     * List of additional prefixes that the ROH server may advertise. Only when type == `hypervisor`
     */
    public readonly inboundprefixlists!: pulumi.Output<string[] | undefined>;
    /**
     * Instance name. If type == `hypervisor` the name must be the same as the hypervisor's hostname
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of physical switch ports
     */
    public readonly ports!: pulumi.Output<string[]>;
    /**
     * Possible values: `inherit`, `default`, `default_agg`, `full_table`. Default value is `inherit`. Detailed documentation
     * about routing profiles is available [here](https://www.netris.ai/docs/en/stable/roh.html#adding-roh-hosts)
     */
    public readonly routingprofile!: pulumi.Output<string | undefined>;
    /**
     * The site ID where the current ROH instance belongs
     */
    public readonly siteid!: pulumi.Output<number>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage instance
     */
    public readonly tenantid!: pulumi.Output<number>;
    /**
     * Possible values: `physical` or `hypervisor` Physical Server, for all servers forming a BGP adjacency directly with the
     * switch fabric. Hypervisor, for using the hypervisor as an interim router. Proxmox is currently the only supported
     * hypervisor.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * List of IPv4 addresses for the loopback interface.
     */
    public readonly unicastips!: pulumi.Output<string[]>;

    /**
     * Create a Roh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RohArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RohArgs | RohState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RohState | undefined;
            resourceInputs["anycastips"] = state ? state.anycastips : undefined;
            resourceInputs["inboundprefixlists"] = state ? state.inboundprefixlists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["routingprofile"] = state ? state.routingprofile : undefined;
            resourceInputs["siteid"] = state ? state.siteid : undefined;
            resourceInputs["tenantid"] = state ? state.tenantid : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["unicastips"] = state ? state.unicastips : undefined;
        } else {
            const args = argsOrState as RohArgs | undefined;
            if ((!args || args.anycastips === undefined) && !opts.urn) {
                throw new Error("Missing required property 'anycastips'");
            }
            if ((!args || args.ports === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ports'");
            }
            if ((!args || args.siteid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteid'");
            }
            if ((!args || args.tenantid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantid'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.unicastips === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unicastips'");
            }
            resourceInputs["anycastips"] = args ? args.anycastips : undefined;
            resourceInputs["inboundprefixlists"] = args ? args.inboundprefixlists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["routingprofile"] = args ? args.routingprofile : undefined;
            resourceInputs["siteid"] = args ? args.siteid : undefined;
            resourceInputs["tenantid"] = args ? args.tenantid : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["unicastips"] = args ? args.unicastips : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Roh.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Roh resources.
 */
export interface RohState {
    /**
     * List of anycast IP addresses
     */
    anycastips?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of additional prefixes that the ROH server may advertise. Only when type == `hypervisor`
     */
    inboundprefixlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Instance name. If type == `hypervisor` the name must be the same as the hypervisor's hostname
     */
    name?: pulumi.Input<string>;
    /**
     * List of physical switch ports
     */
    ports?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Possible values: `inherit`, `default`, `default_agg`, `full_table`. Default value is `inherit`. Detailed documentation
     * about routing profiles is available [here](https://www.netris.ai/docs/en/stable/roh.html#adding-roh-hosts)
     */
    routingprofile?: pulumi.Input<string>;
    /**
     * The site ID where the current ROH instance belongs
     */
    siteid?: pulumi.Input<number>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage instance
     */
    tenantid?: pulumi.Input<number>;
    /**
     * Possible values: `physical` or `hypervisor` Physical Server, for all servers forming a BGP adjacency directly with the
     * switch fabric. Hypervisor, for using the hypervisor as an interim router. Proxmox is currently the only supported
     * hypervisor.
     */
    type?: pulumi.Input<string>;
    /**
     * List of IPv4 addresses for the loopback interface.
     */
    unicastips?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Roh resource.
 */
export interface RohArgs {
    /**
     * List of anycast IP addresses
     */
    anycastips: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of additional prefixes that the ROH server may advertise. Only when type == `hypervisor`
     */
    inboundprefixlists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Instance name. If type == `hypervisor` the name must be the same as the hypervisor's hostname
     */
    name?: pulumi.Input<string>;
    /**
     * List of physical switch ports
     */
    ports: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Possible values: `inherit`, `default`, `default_agg`, `full_table`. Default value is `inherit`. Detailed documentation
     * about routing profiles is available [here](https://www.netris.ai/docs/en/stable/roh.html#adding-roh-hosts)
     */
    routingprofile?: pulumi.Input<string>;
    /**
     * The site ID where the current ROH instance belongs
     */
    siteid: pulumi.Input<number>;
    /**
     * ID of tenant. Users of this tenant will be permitted to manage instance
     */
    tenantid: pulumi.Input<number>;
    /**
     * Possible values: `physical` or `hypervisor` Physical Server, for all servers forming a BGP adjacency directly with the
     * switch fabric. Hypervisor, for using the hypervisor as an interim router. Proxmox is currently the only supported
     * hypervisor.
     */
    type: pulumi.Input<string>;
    /**
     * List of IPv4 addresses for the loopback interface.
     */
    unicastips: pulumi.Input<pulumi.Input<string>[]>;
}
