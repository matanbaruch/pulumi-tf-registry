// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DbServiceClonedFromInfo {
    availabilityMachine: pulumi.Input<string>;
    availabilityMachineId: pulumi.Input<string>;
    maximumRecoverability: pulumi.Input<boolean>;
    pitrTime: pulumi.Input<string>;
    snapshotId: pulumi.Input<string>;
    snapshotName: pulumi.Input<string>;
    snapshotTime: pulumi.Input<string>;
    tessellService: pulumi.Input<string>;
    tessellServiceId: pulumi.Input<string>;
}

export interface DbServiceContextInfo {
    description: pulumi.Input<string>;
    subStatus: pulumi.Input<string>;
}

export interface DbServiceCreds {
    /**
     * DB Service's master password
     */
    masterPassword: pulumi.Input<string>;
    /**
     * DB Service's master username
     */
    masterUser: pulumi.Input<string>;
}

export interface DbServiceDatabase {
    /**
     * If a database is created as a clone from some other DB Service's database, this section describes the original database details
     */
    clonedFromInfos?: pulumi.Input<pulumi.Input<inputs.DbServiceDatabaseClonedFromInfo>[]>;
    connectStrings?: pulumi.Input<pulumi.Input<inputs.DbServiceDatabaseConnectString>[]>;
    databaseConfiguration?: pulumi.Input<inputs.DbServiceDatabaseDatabaseConfiguration>;
    /**
     * Database name
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Timestamp when the entity was created
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * Database description
     */
    description?: pulumi.Input<string>;
    /**
     * Database Engine Type
     */
    engineType?: pulumi.Input<string>;
    /**
     * Tessell generated UUID for the database
     */
    id?: pulumi.Input<string>;
    /**
     * Required while creating a clone. It specifies the Id of the source database from which the clone is being created.
     */
    sourceDatabaseId?: pulumi.Input<string>;
    /**
     * Database status
     */
    status?: pulumi.Input<string>;
    /**
     * Database created from Tessell platform
     */
    tessellCreated?: pulumi.Input<boolean>;
    /**
     * Associated DB Service ID
     */
    tessellServiceId?: pulumi.Input<string>;
}

export interface DbServiceDatabaseClonedFromInfo {
    databaseId: pulumi.Input<string>;
}

export interface DbServiceDatabaseConnectString {
    connectDescriptor: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    masterUser: pulumi.Input<string>;
    servicePort: pulumi.Input<string>;
}

export interface DbServiceDatabaseDatabaseConfiguration {
    milvusConfig?: pulumi.Input<inputs.DbServiceDatabaseDatabaseConfigurationMilvusConfig>;
    mongodbConfig?: pulumi.Input<inputs.DbServiceDatabaseDatabaseConfigurationMongodbConfig>;
    mysqlConfig?: pulumi.Input<inputs.DbServiceDatabaseDatabaseConfigurationMysqlConfig>;
    oracleConfig?: pulumi.Input<inputs.DbServiceDatabaseDatabaseConfigurationOracleConfig>;
    postgresqlConfig?: pulumi.Input<inputs.DbServiceDatabaseDatabaseConfigurationPostgresqlConfig>;
    sqlServerConfig?: pulumi.Input<inputs.DbServiceDatabaseDatabaseConfigurationSqlServerConfig>;
}

export interface DbServiceDatabaseDatabaseConfigurationMilvusConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceDatabaseDatabaseConfigurationMongodbConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceDatabaseDatabaseConfigurationMysqlConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceDatabaseDatabaseConfigurationOracleConfig {
    /**
     * The options profile for the database
     */
    optionsProfile?: pulumi.Input<string>;
    /**
     * The parameter profile id for the database
     */
    parameterProfileId?: pulumi.Input<string>;
    /**
     * Username for the oracle database
     */
    username?: pulumi.Input<string>;
}

export interface DbServiceDatabaseDatabaseConfigurationPostgresqlConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceDatabaseDatabaseConfigurationSqlServerConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceDeleteScheduleDeletionConfig {
    /**
     * If specified as true, the associated Availability Machine (snapshots, sanitized-snapshots, logs) would be retained
     */
    retainAvailabilityMachine?: pulumi.Input<boolean>;
}

export interface DbServiceDeletionConfig {
    /**
     * If specified as true, the associated Availability Machine (snapshots, sanitized-snapshots, logs) would be retained
     */
    retainAvailabilityMachine?: pulumi.Input<boolean>;
}

export interface DbServiceDeletionSchedule {
    deleteAt: pulumi.Input<string>;
    deletionConfigs: pulumi.Input<pulumi.Input<inputs.DbServiceDeletionScheduleDeletionConfig>[]>;
    id: pulumi.Input<string>;
}

export interface DbServiceDeletionScheduleDeletionConfig {
    retainAvailabilityMachine: pulumi.Input<boolean>;
}

export interface DbServiceEngineConfiguration {
    apacheKafkaConfig?: pulumi.Input<inputs.DbServiceEngineConfigurationApacheKafkaConfig>;
    milvusConfig?: pulumi.Input<inputs.DbServiceEngineConfigurationMilvusConfig>;
    mongodbConfig?: pulumi.Input<inputs.DbServiceEngineConfigurationMongodbConfig>;
    mysqlConfig?: pulumi.Input<inputs.DbServiceEngineConfigurationMysqlConfig>;
    oracleConfig?: pulumi.Input<inputs.DbServiceEngineConfigurationOracleConfig>;
    postScriptInfo?: pulumi.Input<inputs.DbServiceEngineConfigurationPostScriptInfo>;
    postgresqlConfig?: pulumi.Input<inputs.DbServiceEngineConfigurationPostgresqlConfig>;
    preScriptInfo?: pulumi.Input<inputs.DbServiceEngineConfigurationPreScriptInfo>;
    sqlServerConfig?: pulumi.Input<inputs.DbServiceEngineConfigurationSqlServerConfig>;
}

export interface DbServiceEngineConfigurationApacheKafkaConfig {
    /**
     * The parameter profile id for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceEngineConfigurationMilvusConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceEngineConfigurationMongodbConfig {
    /**
     * The MongoDB Cluster name
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceEngineConfigurationMysqlConfig {
    /**
     * Active Directory Domain ID
     */
    adDomainId?: pulumi.Input<string>;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceEngineConfigurationOracleConfig {
    /**
     * The character-set for the database
     */
    characterSet?: pulumi.Input<string>;
    /**
     * To explicitly enable archive mode, when PITR is disabled
     */
    enableArchiveMode?: pulumi.Input<boolean>;
    /**
     * Specify whether the DB Service is multi-tenant.
     */
    multiTenant?: pulumi.Input<boolean>;
    /**
     * The national-character-set for the database
     */
    nationalCharacterSet?: pulumi.Input<string>;
    /**
     * The options profile for the database
     */
    optionsProfile?: pulumi.Input<string>;
    /**
     * The parameter profile id for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceEngineConfigurationPostScriptInfo {
    /**
     * The Tessell Script ID
     */
    scriptId?: pulumi.Input<string>;
    /**
     * The Tessell Script version
     */
    scriptVersion?: pulumi.Input<string>;
}

export interface DbServiceEngineConfigurationPostgresqlConfig {
    /**
     * Active Directory Domain ID
     */
    adDomainId?: pulumi.Input<string>;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
    proxyPort?: pulumi.Input<number>;
}

export interface DbServiceEngineConfigurationPreScriptInfo {
    /**
     * The Tessell Script ID
     */
    scriptId?: pulumi.Input<string>;
    /**
     * The Tessell Script version
     */
    scriptVersion?: pulumi.Input<string>;
}

export interface DbServiceEngineConfigurationSqlServerConfig {
    /**
     * Active Directory Domain ID
     */
    adDomainId?: pulumi.Input<string>;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: pulumi.Input<string>;
}

export interface DbServiceInfrastructure {
    /**
     * Size in GB. This is maintained for backward compatibility and would be deprecated soon.
     */
    additionalStorage?: pulumi.Input<number>;
    /**
     * The availability-zone in which the DB Service is provisioned
     */
    availabilityZone?: pulumi.Input<string>;
    awsInfraConfig?: pulumi.Input<inputs.DbServiceInfrastructureAwsInfraConfig>;
    /**
     * The cloud-type in which the DB Service is provisioned (ex. aws, azure)
     */
    cloud?: pulumi.Input<string>;
    cloudAvailabilities?: pulumi.Input<pulumi.Input<inputs.DbServiceInfrastructureCloudAvailability>[]>;
    /**
     * If not specified, it will be autogenerated
     */
    computeNamePrefix?: pulumi.Input<string>;
    /**
     * The compute-type to be used for provisioning the DB Service
     */
    computeType?: pulumi.Input<string>;
    computes?: pulumi.Input<pulumi.Input<inputs.DbServiceInfrastructureCompute>[]>;
    /**
     * Specify if the computes should be shared across DB Services
     */
    enableComputeSharing?: pulumi.Input<boolean>;
    enableEncryption?: pulumi.Input<boolean>;
    /**
     * The encryption key name which is used to encrypt the data at rest
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * IOPS requested for the DB Service
     */
    iops?: pulumi.Input<number>;
    /**
     * Specify whether the DB service uses multiple data disks
     */
    multiDisk?: pulumi.Input<boolean>;
    /**
     * The region in which the DB Service provisioned
     */
    region?: pulumi.Input<string>;
    /**
     * The storage (in bytes) that has been provisioned for the DB Service
     */
    storage?: pulumi.Input<number>;
    /**
     * throughput requested for the DB Service
     */
    throughput?: pulumi.Input<number>;
    /**
     * The timezone detail
     */
    timezone?: pulumi.Input<string>;
    /**
     * The VPC to be used for provisioning the DB Service
     */
    vpc?: pulumi.Input<string>;
}

export interface DbServiceInfrastructureAwsInfraConfig {
    awsCpuOptions?: pulumi.Input<inputs.DbServiceInfrastructureAwsInfraConfigAwsCpuOptions>;
}

export interface DbServiceInfrastructureAwsInfraConfigAwsCpuOptions {
    /**
     * Number of vcpus for aws cpu options
     */
    vcpus?: pulumi.Input<number>;
}

export interface DbServiceInfrastructureCloudAvailability {
    cloud: pulumi.Input<string>;
    regions: pulumi.Input<pulumi.Input<inputs.DbServiceInfrastructureCloudAvailabilityRegion>[]>;
}

export interface DbServiceInfrastructureCloudAvailabilityRegion {
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    region: pulumi.Input<string>;
}

export interface DbServiceInfrastructureCompute {
    /**
     * The availability-zone in which the compute is to be provisioned
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specify the compute resource if it has to be shared
     */
    computeId?: pulumi.Input<string>;
    /**
     * The compute-type to be used for provisioning the compute resource
     */
    computeType?: pulumi.Input<string>;
    /**
     * The region in which the compute is to be provisioned
     */
    region?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    /**
     * The timezone detail
     */
    timezone?: pulumi.Input<string>;
    /**
     * The VPC to be used for provisioning the compute resource
     */
    vpc?: pulumi.Input<string>;
}

export interface DbServiceInstance {
    /**
     * DB Service Instance's cloud availability zone
     */
    availabilityZone?: pulumi.Input<string>;
    awsInfraConfigs?: pulumi.Input<pulumi.Input<inputs.DbServiceInstanceAwsInfraConfig>[]>;
    /**
     * DB Service Instance's cloud type
     */
    cloud?: pulumi.Input<string>;
    /**
     * The associated compute identifier
     */
    computeId?: pulumi.Input<string>;
    /**
     * The associated compute name
     */
    computeName?: pulumi.Input<string>;
    /**
     * The compute used for creation of the Tessell Service Instance
     */
    computeType?: pulumi.Input<string>;
    connectStrings?: pulumi.Input<pulumi.Input<inputs.DbServiceInstanceConnectString>[]>;
    dataVolumeIops?: pulumi.Input<number>;
    /**
     * Timestamp when the entity was created
     */
    dateCreated?: pulumi.Input<string>;
    enablePerfInsights?: pulumi.Input<boolean>;
    /**
     * The encryption key name which is used to encrypt the data at rest
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * Tessell generated UUID for the DB Service Instance
     */
    id?: pulumi.Input<string>;
    /**
     * The instance groupd Id
     */
    instanceGroupId?: pulumi.Input<string>;
    /**
     * Name of the instance group
     */
    instanceGroupName: pulumi.Input<string>;
    /**
     * Timestamp when the service instance was last started at
     */
    lastStartedAt?: pulumi.Input<string>;
    /**
     * Timestamp when the Service Instance was last stopped at
     */
    lastStoppedAt?: pulumi.Input<string>;
    monitoringConfigs?: pulumi.Input<pulumi.Input<inputs.DbServiceInstanceMonitoringConfig>[]>;
    /**
     * Name of the DB Service Instance
     */
    name: pulumi.Input<string>;
    parameterProfiles?: pulumi.Input<pulumi.Input<inputs.DbServiceInstanceParameterProfile>[]>;
    /**
     * DB Service Instance's cloud region
     */
    region: pulumi.Input<string>;
    /**
     * DB Service instance role
     */
    role: pulumi.Input<string>;
    /**
     * Software Image to be used to create the instance
     */
    softwareImage?: pulumi.Input<string>;
    /**
     * Software Image Version to be used to create the instance
     */
    softwareImageVersion?: pulumi.Input<string>;
    /**
     * DB Service instance status
     */
    status?: pulumi.Input<string>;
    /**
     * The storage (in bytes) that has been provisioned for the DB Service instance.
     */
    storage?: pulumi.Input<number>;
    /**
     * DB Service Instance's associated DB Service id
     */
    tessellServiceId?: pulumi.Input<string>;
    /**
     * Throughput requested for this DB Service instance
     */
    throughput?: pulumi.Input<number>;
    /**
     * DB Service instance type
     */
    type?: pulumi.Input<string>;
    /**
     * The updates that are in progress for this resource
     */
    updatesInProgresses?: pulumi.Input<pulumi.Input<inputs.DbServiceInstanceUpdatesInProgress>[]>;
    /**
     * The VPC used for creation of the DB Service Instance
     */
    vpc: pulumi.Input<string>;
}

export interface DbServiceInstanceAwsInfraConfig {
    awsCpuOptions?: pulumi.Input<pulumi.Input<inputs.DbServiceInstanceAwsInfraConfigAwsCpuOption>[]>;
}

export interface DbServiceInstanceAwsInfraConfigAwsCpuOption {
    /**
     * Number of vcpus for aws cpu options
     */
    vcpus?: pulumi.Input<number>;
}

export interface DbServiceInstanceConnectString {
    connectDescriptor: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    masterUser: pulumi.Input<string>;
    servicePort: pulumi.Input<string>;
}

export interface DbServiceInstanceMonitoringConfig {
    perfInsights: pulumi.Input<pulumi.Input<inputs.DbServiceInstanceMonitoringConfigPerfInsight>[]>;
}

export interface DbServiceInstanceMonitoringConfigPerfInsight {
    monitoringDeploymentId: pulumi.Input<string>;
    perfInsightsEnabled: pulumi.Input<boolean>;
}

export interface DbServiceInstanceParameterProfile {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    status: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface DbServiceInstanceUpdatesInProgress {
    referenceId: pulumi.Input<string>;
    submittedAt: pulumi.Input<string>;
    updateInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updateType: pulumi.Input<string>;
}

export interface DbServiceIntegrationsConfig {
    integrations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DbServiceMaintenanceWindow {
    day: pulumi.Input<string>;
    /**
     * The duration during which the maintenance window will be allowed to trigger
     */
    duration: pulumi.Input<number>;
    /**
     * Time value in (hh:mm) format. ex. '02:00'
     */
    time: pulumi.Input<string>;
}

export interface DbServiceServiceConnectivity {
    /**
     * The list of allowed ipv4 addresses that can connect to the DB Service
     */
    allowedIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The CA certificate ID associated with the DB Service
     */
    caCertId?: pulumi.Input<string>;
    /**
     * The Genie endpoint to connect to your DB service.
     */
    computesConnectivities?: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityComputesConnectivity>[]>;
    /**
     * The list of connect strings for the DB Service
     */
    connectStrings?: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityConnectString>[]>;
    /**
     * DNS Prefix associated with the DB Service
     */
    dnsPrefix?: pulumi.Input<string>;
    /**
     * Specify whether to enable public access to the DB Service, default false
     */
    enablePublicAccess?: pulumi.Input<boolean>;
    /**
     * Specify whether to enable SSL to the DB Service, default false
     */
    enableSsl?: pulumi.Input<boolean>;
    /**
     * The interface endpoint or Gateway Load Balancer endpoint to connect to your DB service.
     */
    privateLinks?: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityPrivateLink>[]>;
    /**
     * The connection port for the DB Service
     */
    servicePort?: pulumi.Input<number>;
    /**
     * DB Service connectivity update-in-progress details
     */
    updateInProgressInfos?: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityUpdateInProgressInfo>[]>;
}

export interface DbServiceServiceConnectivityComputesConnectivity {
    computeResourceId: pulumi.Input<string>;
    portAccessConfigs: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityComputesConnectivityPortAccessConfig>[]>;
}

export interface DbServiceServiceConnectivityComputesConnectivityPortAccessConfig {
    allowedIpAddresses: pulumi.Input<pulumi.Input<string>[]>;
    enablePublicAccess: pulumi.Input<boolean>;
    port: pulumi.Input<number>;
}

export interface DbServiceServiceConnectivityConnectString {
    connectDescriptor: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    masterUser: pulumi.Input<string>;
    servicePort: pulumi.Input<number>;
    type: pulumi.Input<string>;
    usageType: pulumi.Input<string>;
}

export interface DbServiceServiceConnectivityPrivateLink {
    clientAzureSubscriptionIds: pulumi.Input<pulumi.Input<string>[]>;
    endpointServiceName: pulumi.Input<string>;
    privateLinkServiceAlias: pulumi.Input<string>;
    servicePrincipals: pulumi.Input<pulumi.Input<string>[]>;
    status: pulumi.Input<string>;
}

export interface DbServiceServiceConnectivityUpdateInProgressInfo {
    allowedIpAddresses: pulumi.Input<pulumi.Input<string>[]>;
    computesConnectivities: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity>[]>;
    dnsPrefix: pulumi.Input<string>;
    enablePublicAccess: pulumi.Input<boolean>;
    privateLinks: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityUpdateInProgressInfoPrivateLink>[]>;
}

export interface DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity {
    computeResourceId: pulumi.Input<string>;
    portAccessConfigs: pulumi.Input<pulumi.Input<inputs.DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig>[]>;
}

export interface DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig {
    allowedIpAddresses: pulumi.Input<pulumi.Input<string>[]>;
    enablePublicAccess: pulumi.Input<boolean>;
    port: pulumi.Input<number>;
}

export interface DbServiceServiceConnectivityUpdateInProgressInfoPrivateLink {
    clientAzureSubscriptionIds: pulumi.Input<pulumi.Input<string>[]>;
    servicePrincipals: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DbServiceSharedWith {
    users?: pulumi.Input<pulumi.Input<inputs.DbServiceSharedWithUser>[]>;
}

export interface DbServiceSharedWithUser {
    emailId?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
}

export interface DbServiceSnapshotConfiguration {
    /**
     * The schedule at which full backups would be triggered
     */
    fullBackupSchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationFullBackupSchedule>;
    /**
     * Schedule Information
     */
    schedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationSchedule>;
    /**
     * The snapshot SLA for the DB Service. If not specified, a default SLA would be associated with the DB Service
     */
    sla?: pulumi.Input<string>;
    snapshotWindow?: pulumi.Input<inputs.DbServiceSnapshotConfigurationSnapshotWindow>;
}

export interface DbServiceSnapshotConfigurationFullBackupSchedule {
    weeklySchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationFullBackupScheduleWeeklySchedule>;
}

export interface DbServiceSnapshotConfigurationFullBackupScheduleWeeklySchedule {
    /**
     * Days in a week to retain weekly backups for
     */
    days?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DbServiceSnapshotConfigurationSchedule {
    /**
     * Clock time format value in hour and minute.
     */
    backupStartTime?: pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleBackupStartTime>;
    dailySchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleDailySchedule>;
    /**
     * Definition for taking month specific schedule.
     */
    monthlySchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleMonthlySchedule>;
    weeklySchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleWeeklySchedule>;
    yearlySchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleYearlySchedule>;
}

export interface DbServiceSnapshotConfigurationScheduleBackupStartTime {
    hour?: pulumi.Input<number>;
    minute?: pulumi.Input<number>;
}

export interface DbServiceSnapshotConfigurationScheduleDailySchedule {
    /**
     * The number of backups to be captured per day.
     */
    backupsPerDay?: pulumi.Input<number>;
}

export interface DbServiceSnapshotConfigurationScheduleMonthlySchedule {
    commonSchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleMonthlyScheduleCommonSchedule>;
}

export interface DbServiceSnapshotConfigurationScheduleMonthlyScheduleCommonSchedule {
    /**
     * Dates in a month to retain monthly backups
     */
    dates?: pulumi.Input<pulumi.Input<number>[]>;
    lastDayOfMonth?: pulumi.Input<boolean>;
}

export interface DbServiceSnapshotConfigurationScheduleWeeklySchedule {
    /**
     * Days in a week to retain weekly backups for
     */
    days?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DbServiceSnapshotConfigurationScheduleYearlySchedule {
    commonSchedule?: pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleYearlyScheduleCommonSchedule>;
    monthSpecificSchedules?: pulumi.Input<pulumi.Input<inputs.DbServiceSnapshotConfigurationScheduleYearlyScheduleMonthSpecificSchedule>[]>;
}

export interface DbServiceSnapshotConfigurationScheduleYearlyScheduleCommonSchedule {
    /**
     * Dates in a month to retain monthly backups
     */
    dates?: pulumi.Input<pulumi.Input<number>[]>;
    lastDayOfMonth?: pulumi.Input<boolean>;
    months?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DbServiceSnapshotConfigurationScheduleYearlyScheduleMonthSpecificSchedule {
    dates: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Name of a month
     */
    month: pulumi.Input<string>;
}

export interface DbServiceSnapshotConfigurationSnapshotWindow {
    /**
     * Time value in (hh:mm) format. ex. '02:00'. Deprecated, please use backupStartTime in schedule.
     */
    time?: pulumi.Input<string>;
}

export interface DbServiceStartStopScheduleMetadata {
    scheduleCounter: pulumi.Input<number>;
}

export interface DbServiceStartStopScheduleScheduleInfo {
    /**
     * One time start/stop schedule details for the DB Service
     */
    oneTime?: pulumi.Input<inputs.DbServiceStartStopScheduleScheduleInfoOneTime>;
    /**
     * Recurring start/stop schedule details for the DB Service tessell service
     */
    recurring?: pulumi.Input<inputs.DbServiceStartStopScheduleScheduleInfoRecurring>;
}

export interface DbServiceStartStopScheduleScheduleInfoOneTime {
    /**
     * Time at which the DB Service should be started at
     */
    dbServiceStartAt?: pulumi.Input<string>;
    /**
     * Time at which the DB Service should be stopped at
     */
    dbServiceStopAt?: pulumi.Input<string>;
}

export interface DbServiceStartStopScheduleScheduleInfoRecurring {
    /**
     * Whether the given schedule is a daily schedule i.e. a schedule which is executed daily
     */
    dailySchedule?: pulumi.Input<boolean>;
    /**
     * Time at which the DB Service should be started at
     */
    dbServiceStartAt?: pulumi.Input<string>;
    /**
     * Time at which the DB Service should be stopped at
     */
    dbServiceStopAt?: pulumi.Input<string>;
    /**
     * Schedule expiry details for recurring start/stop schedule for the DB Service
     */
    scheduleExpiry?: pulumi.Input<inputs.DbServiceStartStopScheduleScheduleInfoRecurringScheduleExpiry>;
    /**
     * Date from which the given recurring schedule would be applicable from
     */
    scheduleStartDate?: pulumi.Input<string>;
    /**
     * Weekly recurring start/stop schedule details for the DB Service
     */
    weeklySchedule?: pulumi.Input<inputs.DbServiceStartStopScheduleScheduleInfoRecurringWeeklySchedule>;
}

export interface DbServiceStartStopScheduleScheduleInfoRecurringScheduleExpiry {
    /**
     * Number of occurrences which the schedule would not be applicable
     */
    afterOccurrences?: pulumi.Input<number>;
    /**
     * If set to True, the schedule will be applicable forever
     */
    never?: pulumi.Input<boolean>;
    /**
     * Date after which the schedule would not be applicable
     */
    on?: pulumi.Input<string>;
}

export interface DbServiceStartStopScheduleScheduleInfoRecurringWeeklySchedule {
    /**
     * Days of the week on which the recurring start/stop schedule would be applicable for the DB Service
     */
    days?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DbServiceTag {
    /**
     * Case sensitive, tag name
     */
    name?: pulumi.Input<string>;
    /**
     * Case sensitive, tag value
     */
    value?: pulumi.Input<string>;
}

export interface DbServiceTimeouts {
    create?: pulumi.Input<string>;
}

export interface DbServiceUpcomingScheduledAction {
    deletes: pulumi.Input<pulumi.Input<inputs.DbServiceUpcomingScheduledActionDelete>[]>;
    patches: pulumi.Input<pulumi.Input<inputs.DbServiceUpcomingScheduledActionPatch>[]>;
    startStops: pulumi.Input<pulumi.Input<inputs.DbServiceUpcomingScheduledActionStartStop>[]>;
}

export interface DbServiceUpcomingScheduledActionDelete {
    at: pulumi.Input<string>;
}

export interface DbServiceUpcomingScheduledActionPatch {
    at: pulumi.Input<string>;
    message: pulumi.Input<string>;
}

export interface DbServiceUpcomingScheduledActionStartStop {
    action: pulumi.Input<string>;
    at: pulumi.Input<string>;
}

export interface DbServiceUpdatesInProgress {
    referenceId: pulumi.Input<string>;
    submittedAt: pulumi.Input<string>;
    updateInfo: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updateType: pulumi.Input<string>;
}

export interface DbSnapshotAvailabilityConfig {
    availabilityConfiguredManually: pulumi.Input<boolean>;
    cloudAvailabilityConfigs: pulumi.Input<pulumi.Input<inputs.DbSnapshotAvailabilityConfigCloudAvailabilityConfig>[]>;
    dapId: pulumi.Input<string>;
}

export interface DbSnapshotAvailabilityConfigCloudAvailabilityConfig {
    cloud: pulumi.Input<string>;
    regions: pulumi.Input<pulumi.Input<inputs.DbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion>[]>;
}

export interface DbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion {
    region: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface DbSnapshotCloudAvailability {
    cloud: pulumi.Input<string>;
    regions: pulumi.Input<pulumi.Input<inputs.DbSnapshotCloudAvailabilityRegion>[]>;
}

export interface DbSnapshotCloudAvailabilityRegion {
    region: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface DbSnapshotDatabase {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
    status: pulumi.Input<string>;
}

export interface DbSnapshotSharedWith {
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

