// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DbServiceClonedFromInfo {
    availabilityMachine: string;
    availabilityMachineId: string;
    maximumRecoverability: boolean;
    pitrTime: string;
    snapshotId: string;
    snapshotName: string;
    snapshotTime: string;
    tessellService: string;
    tessellServiceId: string;
}

export interface DbServiceContextInfo {
    description: string;
    subStatus: string;
}

export interface DbServiceCreds {
    /**
     * DB Service's master password
     */
    masterPassword: string;
    /**
     * DB Service's master username
     */
    masterUser: string;
}

export interface DbServiceDatabase {
    /**
     * If a database is created as a clone from some other DB Service's database, this section describes the original database details
     */
    clonedFromInfos: outputs.DbServiceDatabaseClonedFromInfo[];
    connectStrings: outputs.DbServiceDatabaseConnectString[];
    databaseConfiguration?: outputs.DbServiceDatabaseDatabaseConfiguration;
    /**
     * Database name
     */
    databaseName: string;
    /**
     * Timestamp when the entity was created
     */
    dateCreated: string;
    /**
     * Database description
     */
    description?: string;
    /**
     * Database Engine Type
     */
    engineType: string;
    /**
     * Tessell generated UUID for the database
     */
    id: string;
    /**
     * Required while creating a clone. It specifies the Id of the source database from which the clone is being created.
     */
    sourceDatabaseId?: string;
    /**
     * Database status
     */
    status: string;
    /**
     * Database created from Tessell platform
     */
    tessellCreated: boolean;
    /**
     * Associated DB Service ID
     */
    tessellServiceId: string;
}

export interface DbServiceDatabaseClonedFromInfo {
    databaseId: string;
}

export interface DbServiceDatabaseConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: string;
}

export interface DbServiceDatabaseDatabaseConfiguration {
    milvusConfig?: outputs.DbServiceDatabaseDatabaseConfigurationMilvusConfig;
    mongodbConfig?: outputs.DbServiceDatabaseDatabaseConfigurationMongodbConfig;
    mysqlConfig?: outputs.DbServiceDatabaseDatabaseConfigurationMysqlConfig;
    oracleConfig?: outputs.DbServiceDatabaseDatabaseConfigurationOracleConfig;
    postgresqlConfig?: outputs.DbServiceDatabaseDatabaseConfigurationPostgresqlConfig;
    sqlServerConfig?: outputs.DbServiceDatabaseDatabaseConfigurationSqlServerConfig;
}

export interface DbServiceDatabaseDatabaseConfigurationMilvusConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceDatabaseDatabaseConfigurationMongodbConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceDatabaseDatabaseConfigurationMysqlConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceDatabaseDatabaseConfigurationOracleConfig {
    /**
     * The options profile for the database
     */
    optionsProfile?: string;
    /**
     * The parameter profile id for the database
     */
    parameterProfileId?: string;
    /**
     * Username for the oracle database
     */
    username?: string;
}

export interface DbServiceDatabaseDatabaseConfigurationPostgresqlConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceDatabaseDatabaseConfigurationSqlServerConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceDeleteScheduleDeletionConfig {
    /**
     * If specified as true, the associated Availability Machine (snapshots, sanitized-snapshots, logs) would be retained
     */
    retainAvailabilityMachine?: boolean;
}

export interface DbServiceDeletionConfig {
    /**
     * If specified as true, the associated Availability Machine (snapshots, sanitized-snapshots, logs) would be retained
     */
    retainAvailabilityMachine?: boolean;
}

export interface DbServiceDeletionSchedule {
    deleteAt: string;
    deletionConfigs: outputs.DbServiceDeletionScheduleDeletionConfig[];
    id: string;
}

export interface DbServiceDeletionScheduleDeletionConfig {
    retainAvailabilityMachine: boolean;
}

export interface DbServiceEngineConfiguration {
    apacheKafkaConfig?: outputs.DbServiceEngineConfigurationApacheKafkaConfig;
    milvusConfig?: outputs.DbServiceEngineConfigurationMilvusConfig;
    mongodbConfig?: outputs.DbServiceEngineConfigurationMongodbConfig;
    mysqlConfig?: outputs.DbServiceEngineConfigurationMysqlConfig;
    oracleConfig?: outputs.DbServiceEngineConfigurationOracleConfig;
    postScriptInfo?: outputs.DbServiceEngineConfigurationPostScriptInfo;
    postgresqlConfig?: outputs.DbServiceEngineConfigurationPostgresqlConfig;
    preScriptInfo?: outputs.DbServiceEngineConfigurationPreScriptInfo;
    sqlServerConfig?: outputs.DbServiceEngineConfigurationSqlServerConfig;
}

export interface DbServiceEngineConfigurationApacheKafkaConfig {
    /**
     * The parameter profile id for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceEngineConfigurationMilvusConfig {
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceEngineConfigurationMongodbConfig {
    /**
     * The MongoDB Cluster name
     */
    clusterName?: string;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceEngineConfigurationMysqlConfig {
    /**
     * Active Directory Domain ID
     */
    adDomainId?: string;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceEngineConfigurationOracleConfig {
    /**
     * The character-set for the database
     */
    characterSet?: string;
    /**
     * To explicitly enable archive mode, when PITR is disabled
     */
    enableArchiveMode?: boolean;
    /**
     * Specify whether the DB Service is multi-tenant.
     */
    multiTenant?: boolean;
    /**
     * The national-character-set for the database
     */
    nationalCharacterSet?: string;
    /**
     * The options profile for the database
     */
    optionsProfile?: string;
    /**
     * The parameter profile id for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceEngineConfigurationPostScriptInfo {
    /**
     * The Tessell Script ID
     */
    scriptId?: string;
    /**
     * The Tessell Script version
     */
    scriptVersion?: string;
}

export interface DbServiceEngineConfigurationPostgresqlConfig {
    /**
     * Active Directory Domain ID
     */
    adDomainId?: string;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
    proxyPort?: number;
}

export interface DbServiceEngineConfigurationPreScriptInfo {
    /**
     * The Tessell Script ID
     */
    scriptId?: string;
    /**
     * The Tessell Script version
     */
    scriptVersion?: string;
}

export interface DbServiceEngineConfigurationSqlServerConfig {
    /**
     * Active Directory Domain ID
     */
    adDomainId?: string;
    /**
     * The parameter profile ID for the database
     */
    parameterProfileId?: string;
}

export interface DbServiceInfrastructure {
    /**
     * Size in GB. This is maintained for backward compatibility and would be deprecated soon.
     */
    additionalStorage?: number;
    /**
     * The availability-zone in which the DB Service is provisioned
     */
    availabilityZone: string;
    awsInfraConfig?: outputs.DbServiceInfrastructureAwsInfraConfig;
    /**
     * The cloud-type in which the DB Service is provisioned (ex. aws, azure)
     */
    cloud?: string;
    cloudAvailabilities: outputs.DbServiceInfrastructureCloudAvailability[];
    /**
     * If not specified, it will be autogenerated
     */
    computeNamePrefix?: string;
    /**
     * The compute-type to be used for provisioning the DB Service
     */
    computeType: string;
    computes?: outputs.DbServiceInfrastructureCompute[];
    /**
     * Specify if the computes should be shared across DB Services
     */
    enableComputeSharing?: boolean;
    enableEncryption?: boolean;
    /**
     * The encryption key name which is used to encrypt the data at rest
     */
    encryptionKey?: string;
    /**
     * IOPS requested for the DB Service
     */
    iops?: number;
    /**
     * Specify whether the DB service uses multiple data disks
     */
    multiDisk: boolean;
    /**
     * The region in which the DB Service provisioned
     */
    region: string;
    /**
     * The storage (in bytes) that has been provisioned for the DB Service
     */
    storage: number;
    /**
     * throughput requested for the DB Service
     */
    throughput?: number;
    /**
     * The timezone detail
     */
    timezone?: string;
    /**
     * The VPC to be used for provisioning the DB Service
     */
    vpc: string;
}

export interface DbServiceInfrastructureAwsInfraConfig {
    awsCpuOptions?: outputs.DbServiceInfrastructureAwsInfraConfigAwsCpuOptions;
}

export interface DbServiceInfrastructureAwsInfraConfigAwsCpuOptions {
    /**
     * Number of vcpus for aws cpu options
     */
    vcpus?: number;
}

export interface DbServiceInfrastructureCloudAvailability {
    cloud: string;
    regions: outputs.DbServiceInfrastructureCloudAvailabilityRegion[];
}

export interface DbServiceInfrastructureCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface DbServiceInfrastructureCompute {
    /**
     * The availability-zone in which the compute is to be provisioned
     */
    availabilityZone?: string;
    /**
     * Specify the compute resource if it has to be shared
     */
    computeId?: string;
    /**
     * The compute-type to be used for provisioning the compute resource
     */
    computeType?: string;
    /**
     * The region in which the compute is to be provisioned
     */
    region?: string;
    role?: string;
    /**
     * The timezone detail
     */
    timezone?: string;
    /**
     * The VPC to be used for provisioning the compute resource
     */
    vpc?: string;
}

export interface DbServiceInstance {
    /**
     * DB Service Instance's cloud availability zone
     */
    availabilityZone: string;
    awsInfraConfigs?: outputs.DbServiceInstanceAwsInfraConfig[];
    /**
     * DB Service Instance's cloud type
     */
    cloud: string;
    /**
     * The associated compute identifier
     */
    computeId: string;
    /**
     * The associated compute name
     */
    computeName: string;
    /**
     * The compute used for creation of the Tessell Service Instance
     */
    computeType?: string;
    connectStrings: outputs.DbServiceInstanceConnectString[];
    dataVolumeIops?: number;
    /**
     * Timestamp when the entity was created
     */
    dateCreated: string;
    enablePerfInsights?: boolean;
    /**
     * The encryption key name which is used to encrypt the data at rest
     */
    encryptionKey?: string;
    /**
     * Tessell generated UUID for the DB Service Instance
     */
    id: string;
    /**
     * The instance groupd Id
     */
    instanceGroupId: string;
    /**
     * Name of the instance group
     */
    instanceGroupName: string;
    /**
     * Timestamp when the service instance was last started at
     */
    lastStartedAt: string;
    /**
     * Timestamp when the Service Instance was last stopped at
     */
    lastStoppedAt: string;
    monitoringConfigs: outputs.DbServiceInstanceMonitoringConfig[];
    /**
     * Name of the DB Service Instance
     */
    name: string;
    parameterProfiles: outputs.DbServiceInstanceParameterProfile[];
    /**
     * DB Service Instance's cloud region
     */
    region: string;
    /**
     * DB Service instance role
     */
    role: string;
    /**
     * Software Image to be used to create the instance
     */
    softwareImage: string;
    /**
     * Software Image Version to be used to create the instance
     */
    softwareImageVersion: string;
    /**
     * DB Service instance status
     */
    status: string;
    /**
     * The storage (in bytes) that has been provisioned for the DB Service instance.
     */
    storage: number;
    /**
     * DB Service Instance's associated DB Service id
     */
    tessellServiceId: string;
    /**
     * Throughput requested for this DB Service instance
     */
    throughput?: number;
    /**
     * DB Service instance type
     */
    type: string;
    /**
     * The updates that are in progress for this resource
     */
    updatesInProgresses: outputs.DbServiceInstanceUpdatesInProgress[];
    /**
     * The VPC used for creation of the DB Service Instance
     */
    vpc: string;
}

export interface DbServiceInstanceAwsInfraConfig {
    awsCpuOptions?: outputs.DbServiceInstanceAwsInfraConfigAwsCpuOption[];
}

export interface DbServiceInstanceAwsInfraConfigAwsCpuOption {
    /**
     * Number of vcpus for aws cpu options
     */
    vcpus: number;
}

export interface DbServiceInstanceConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: string;
}

export interface DbServiceInstanceMonitoringConfig {
    perfInsights: outputs.DbServiceInstanceMonitoringConfigPerfInsight[];
}

export interface DbServiceInstanceMonitoringConfigPerfInsight {
    monitoringDeploymentId: string;
    perfInsightsEnabled: boolean;
}

export interface DbServiceInstanceParameterProfile {
    id: string;
    name: string;
    status: string;
    version: string;
}

export interface DbServiceInstanceUpdatesInProgress {
    referenceId: string;
    submittedAt: string;
    updateInfo: {[key: string]: string};
    updateType: string;
}

export interface DbServiceIntegrationsConfig {
    integrations?: string[];
}

export interface DbServiceMaintenanceWindow {
    day: string;
    /**
     * The duration during which the maintenance window will be allowed to trigger
     */
    duration: number;
    /**
     * Time value in (hh:mm) format. ex. '02:00'
     */
    time: string;
}

export interface DbServiceServiceConnectivity {
    /**
     * The list of allowed ipv4 addresses that can connect to the DB Service
     */
    allowedIpAddresses?: string[];
    /**
     * The CA certificate ID associated with the DB Service
     */
    caCertId: string;
    /**
     * The Genie endpoint to connect to your DB service.
     */
    computesConnectivities: outputs.DbServiceServiceConnectivityComputesConnectivity[];
    /**
     * The list of connect strings for the DB Service
     */
    connectStrings: outputs.DbServiceServiceConnectivityConnectString[];
    /**
     * DNS Prefix associated with the DB Service
     */
    dnsPrefix?: string;
    /**
     * Specify whether to enable public access to the DB Service, default false
     */
    enablePublicAccess?: boolean;
    /**
     * Specify whether to enable SSL to the DB Service, default false
     */
    enableSsl?: boolean;
    /**
     * The interface endpoint or Gateway Load Balancer endpoint to connect to your DB service.
     */
    privateLinks: outputs.DbServiceServiceConnectivityPrivateLink[];
    /**
     * The connection port for the DB Service
     */
    servicePort?: number;
    /**
     * DB Service connectivity update-in-progress details
     */
    updateInProgressInfos: outputs.DbServiceServiceConnectivityUpdateInProgressInfo[];
}

export interface DbServiceServiceConnectivityComputesConnectivity {
    computeResourceId: string;
    portAccessConfigs: outputs.DbServiceServiceConnectivityComputesConnectivityPortAccessConfig[];
}

export interface DbServiceServiceConnectivityComputesConnectivityPortAccessConfig {
    allowedIpAddresses: string[];
    enablePublicAccess: boolean;
    port: number;
}

export interface DbServiceServiceConnectivityConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: number;
    type: string;
    usageType: string;
}

export interface DbServiceServiceConnectivityPrivateLink {
    clientAzureSubscriptionIds: string[];
    endpointServiceName: string;
    privateLinkServiceAlias: string;
    servicePrincipals: string[];
    status: string;
}

export interface DbServiceServiceConnectivityUpdateInProgressInfo {
    allowedIpAddresses: string[];
    computesConnectivities: outputs.DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity[];
    dnsPrefix: string;
    enablePublicAccess: boolean;
    privateLinks: outputs.DbServiceServiceConnectivityUpdateInProgressInfoPrivateLink[];
}

export interface DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity {
    computeResourceId: string;
    portAccessConfigs: outputs.DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig[];
}

export interface DbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig {
    allowedIpAddresses: string[];
    enablePublicAccess: boolean;
    port: number;
}

export interface DbServiceServiceConnectivityUpdateInProgressInfoPrivateLink {
    clientAzureSubscriptionIds: string[];
    servicePrincipals: string[];
}

export interface DbServiceSharedWith {
    users?: outputs.DbServiceSharedWithUser[];
}

export interface DbServiceSharedWithUser {
    emailId?: string;
    role?: string;
}

export interface DbServiceSnapshotConfiguration {
    /**
     * The schedule at which full backups would be triggered
     */
    fullBackupSchedule?: outputs.DbServiceSnapshotConfigurationFullBackupSchedule;
    /**
     * Schedule Information
     */
    schedule?: outputs.DbServiceSnapshotConfigurationSchedule;
    /**
     * The snapshot SLA for the DB Service. If not specified, a default SLA would be associated with the DB Service
     */
    sla?: string;
    snapshotWindow?: outputs.DbServiceSnapshotConfigurationSnapshotWindow;
}

export interface DbServiceSnapshotConfigurationFullBackupSchedule {
    weeklySchedule?: outputs.DbServiceSnapshotConfigurationFullBackupScheduleWeeklySchedule;
}

export interface DbServiceSnapshotConfigurationFullBackupScheduleWeeklySchedule {
    /**
     * Days in a week to retain weekly backups for
     */
    days?: string[];
}

export interface DbServiceSnapshotConfigurationSchedule {
    /**
     * Clock time format value in hour and minute.
     */
    backupStartTime?: outputs.DbServiceSnapshotConfigurationScheduleBackupStartTime;
    dailySchedule?: outputs.DbServiceSnapshotConfigurationScheduleDailySchedule;
    /**
     * Definition for taking month specific schedule.
     */
    monthlySchedule?: outputs.DbServiceSnapshotConfigurationScheduleMonthlySchedule;
    weeklySchedule?: outputs.DbServiceSnapshotConfigurationScheduleWeeklySchedule;
    yearlySchedule?: outputs.DbServiceSnapshotConfigurationScheduleYearlySchedule;
}

export interface DbServiceSnapshotConfigurationScheduleBackupStartTime {
    hour?: number;
    minute?: number;
}

export interface DbServiceSnapshotConfigurationScheduleDailySchedule {
    /**
     * The number of backups to be captured per day.
     */
    backupsPerDay?: number;
}

export interface DbServiceSnapshotConfigurationScheduleMonthlySchedule {
    commonSchedule?: outputs.DbServiceSnapshotConfigurationScheduleMonthlyScheduleCommonSchedule;
}

export interface DbServiceSnapshotConfigurationScheduleMonthlyScheduleCommonSchedule {
    /**
     * Dates in a month to retain monthly backups
     */
    dates?: number[];
    lastDayOfMonth?: boolean;
}

export interface DbServiceSnapshotConfigurationScheduleWeeklySchedule {
    /**
     * Days in a week to retain weekly backups for
     */
    days?: string[];
}

export interface DbServiceSnapshotConfigurationScheduleYearlySchedule {
    commonSchedule?: outputs.DbServiceSnapshotConfigurationScheduleYearlyScheduleCommonSchedule;
    monthSpecificSchedules?: outputs.DbServiceSnapshotConfigurationScheduleYearlyScheduleMonthSpecificSchedule[];
}

export interface DbServiceSnapshotConfigurationScheduleYearlyScheduleCommonSchedule {
    /**
     * Dates in a month to retain monthly backups
     */
    dates?: number[];
    lastDayOfMonth?: boolean;
    months?: string[];
}

export interface DbServiceSnapshotConfigurationScheduleYearlyScheduleMonthSpecificSchedule {
    dates: number[];
    /**
     * Name of a month
     */
    month: string;
}

export interface DbServiceSnapshotConfigurationSnapshotWindow {
    /**
     * Time value in (hh:mm) format. ex. '02:00'. Deprecated, please use backupStartTime in schedule.
     */
    time?: string;
}

export interface DbServiceStartStopScheduleMetadata {
    scheduleCounter: number;
}

export interface DbServiceStartStopScheduleScheduleInfo {
    /**
     * One time start/stop schedule details for the DB Service
     */
    oneTime?: outputs.DbServiceStartStopScheduleScheduleInfoOneTime;
    /**
     * Recurring start/stop schedule details for the DB Service tessell service
     */
    recurring?: outputs.DbServiceStartStopScheduleScheduleInfoRecurring;
}

export interface DbServiceStartStopScheduleScheduleInfoOneTime {
    /**
     * Time at which the DB Service should be started at
     */
    dbServiceStartAt?: string;
    /**
     * Time at which the DB Service should be stopped at
     */
    dbServiceStopAt?: string;
}

export interface DbServiceStartStopScheduleScheduleInfoRecurring {
    /**
     * Whether the given schedule is a daily schedule i.e. a schedule which is executed daily
     */
    dailySchedule?: boolean;
    /**
     * Time at which the DB Service should be started at
     */
    dbServiceStartAt?: string;
    /**
     * Time at which the DB Service should be stopped at
     */
    dbServiceStopAt?: string;
    /**
     * Schedule expiry details for recurring start/stop schedule for the DB Service
     */
    scheduleExpiry?: outputs.DbServiceStartStopScheduleScheduleInfoRecurringScheduleExpiry;
    /**
     * Date from which the given recurring schedule would be applicable from
     */
    scheduleStartDate?: string;
    /**
     * Weekly recurring start/stop schedule details for the DB Service
     */
    weeklySchedule?: outputs.DbServiceStartStopScheduleScheduleInfoRecurringWeeklySchedule;
}

export interface DbServiceStartStopScheduleScheduleInfoRecurringScheduleExpiry {
    /**
     * Number of occurrences which the schedule would not be applicable
     */
    afterOccurrences?: number;
    /**
     * If set to True, the schedule will be applicable forever
     */
    never?: boolean;
    /**
     * Date after which the schedule would not be applicable
     */
    on?: string;
}

export interface DbServiceStartStopScheduleScheduleInfoRecurringWeeklySchedule {
    /**
     * Days of the week on which the recurring start/stop schedule would be applicable for the DB Service
     */
    days?: string[];
}

export interface DbServiceTag {
    /**
     * Case sensitive, tag name
     */
    name?: string;
    /**
     * Case sensitive, tag value
     */
    value?: string;
}

export interface DbServiceTimeouts {
    create?: string;
}

export interface DbServiceUpcomingScheduledAction {
    deletes: outputs.DbServiceUpcomingScheduledActionDelete[];
    patches: outputs.DbServiceUpcomingScheduledActionPatch[];
    startStops: outputs.DbServiceUpcomingScheduledActionStartStop[];
}

export interface DbServiceUpcomingScheduledActionDelete {
    at: string;
}

export interface DbServiceUpcomingScheduledActionPatch {
    at: string;
    message: string;
}

export interface DbServiceUpcomingScheduledActionStartStop {
    action: string;
    at: string;
}

export interface DbServiceUpdatesInProgress {
    referenceId: string;
    submittedAt: string;
    updateInfo: {[key: string]: string};
    updateType: string;
}

export interface DbSnapshotAvailabilityConfig {
    availabilityConfiguredManually: boolean;
    cloudAvailabilityConfigs: outputs.DbSnapshotAvailabilityConfigCloudAvailabilityConfig[];
    dapId: string;
}

export interface DbSnapshotAvailabilityConfigCloudAvailabilityConfig {
    cloud: string;
    regions: outputs.DbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion[];
}

export interface DbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion {
    region: string;
    status: string;
}

export interface DbSnapshotCloudAvailability {
    cloud: string;
    regions: outputs.DbSnapshotCloudAvailabilityRegion[];
}

export interface DbSnapshotCloudAvailabilityRegion {
    region: string;
    status: string;
}

export interface DbSnapshotDatabase {
    id: string;
    name: string;
    status: string;
}

export interface DbSnapshotSharedWith {
    users?: string[];
}

export interface GetAvailabilityMachineBackupDownloadConfig {
    allowBackupDownloads: boolean;
    allowBackupDownloadsForAllUsers: boolean;
}

export interface GetAvailabilityMachineClone {
    cloneInfo: {[key: string]: string};
    cloudAvailabilities: outputs.GetAvailabilityMachineCloneCloudAvailability[];
    computeType: string;
    dateCreated: string;
    id: string;
    name: string;
    owner: string;
    status: string;
    subscription: string;
}

export interface GetAvailabilityMachineCloneCloudAvailability {
    cloud: string;
    regions: outputs.GetAvailabilityMachineCloneCloudAvailabilityRegion[];
}

export interface GetAvailabilityMachineCloneCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetAvailabilityMachineCloudAvailability {
    cloud: string;
    regions: outputs.GetAvailabilityMachineCloudAvailabilityRegion[];
}

export interface GetAvailabilityMachineCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetAvailabilityMachineDap {
    availabilityMachineId: string;
    cloudAvailabilities: outputs.GetAvailabilityMachineDapCloudAvailability[];
    contentInfos: outputs.GetAvailabilityMachineDapContentInfo[];
    contentType: string;
    dataAccessConfigs: outputs.GetAvailabilityMachineDapDataAccessConfig[];
    dateCreated: string;
    dateModified: string;
    engineType: string;
    id: string;
    loggedInUserRole: string;
    name: string;
    owner: string;
    serviceName: string;
    sharedWiths: outputs.GetAvailabilityMachineDapSharedWith[];
    status: string;
    tessellServiceId: string;
}

export interface GetAvailabilityMachineDapCloudAvailability {
    cloud: string;
    regions: outputs.GetAvailabilityMachineDapCloudAvailabilityRegion[];
}

export interface GetAvailabilityMachineDapCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetAvailabilityMachineDapContentInfo {
    asIsContents: outputs.GetAvailabilityMachineDapContentInfoAsIsContent[];
    backupContents: outputs.GetAvailabilityMachineDapContentInfoBackupContent[];
    sanitizedContents: outputs.GetAvailabilityMachineDapContentInfoSanitizedContent[];
}

export interface GetAvailabilityMachineDapContentInfoAsIsContent {
    automated: boolean;
    manuals: outputs.GetAvailabilityMachineDapContentInfoAsIsContentManual[];
}

export interface GetAvailabilityMachineDapContentInfoAsIsContentManual {
    creationTime: string;
    id: string;
    name: string;
    sharedAt: string;
}

export interface GetAvailabilityMachineDapContentInfoBackupContent {
    automated: boolean;
    manuals: outputs.GetAvailabilityMachineDapContentInfoBackupContentManual[];
}

export interface GetAvailabilityMachineDapContentInfoBackupContentManual {
    creationTime: string;
    id: string;
    name: string;
    sharedAt: string;
}

export interface GetAvailabilityMachineDapContentInfoSanitizedContent {
    automateds: outputs.GetAvailabilityMachineDapContentInfoSanitizedContentAutomated[];
    manuals: outputs.GetAvailabilityMachineDapContentInfoSanitizedContentManual[];
}

export interface GetAvailabilityMachineDapContentInfoSanitizedContentAutomated {
    sanitizationScheduleId: string;
}

export interface GetAvailabilityMachineDapContentInfoSanitizedContentManual {
    creationTime: string;
    id: string;
    name: string;
    sharedAt: string;
}

export interface GetAvailabilityMachineDapDataAccessConfig {
    dailyBackups: number;
    pitr: number;
}

export interface GetAvailabilityMachineDapSharedWith {
    users: outputs.GetAvailabilityMachineDapSharedWithUser[];
}

export interface GetAvailabilityMachineDapSharedWithUser {
    emailId: string;
    role: string;
}

export interface GetAvailabilityMachineRpoSla {
    availabilityMachine: string;
    availabilityMachineId: string;
    rpoSlaStatus: string;
    schedules: outputs.GetAvailabilityMachineRpoSlaSchedule[];
    sla: string;
    slaRetentionInfos: outputs.GetAvailabilityMachineRpoSlaSlaRetentionInfo[];
    topologies: outputs.GetAvailabilityMachineRpoSlaTopology[];
}

export interface GetAvailabilityMachineRpoSlaSchedule {
    backupStartTimes: outputs.GetAvailabilityMachineRpoSlaScheduleBackupStartTime[];
    dailySchedules: outputs.GetAvailabilityMachineRpoSlaScheduleDailySchedule[];
    monthlySchedules: outputs.GetAvailabilityMachineRpoSlaScheduleMonthlySchedule[];
    weeklySchedules: outputs.GetAvailabilityMachineRpoSlaScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetAvailabilityMachineRpoSlaScheduleYearlySchedule[];
}

export interface GetAvailabilityMachineRpoSlaScheduleBackupStartTime {
    hour: number;
    minute: number;
}

export interface GetAvailabilityMachineRpoSlaScheduleDailySchedule {
    backupsPerDay: number;
}

export interface GetAvailabilityMachineRpoSlaScheduleMonthlySchedule {
    commonSchedules: outputs.GetAvailabilityMachineRpoSlaScheduleMonthlyScheduleCommonSchedule[];
}

export interface GetAvailabilityMachineRpoSlaScheduleMonthlyScheduleCommonSchedule {
    dates: number[];
    lastDayOfMonth: boolean;
}

export interface GetAvailabilityMachineRpoSlaScheduleWeeklySchedule {
    days: string[];
}

export interface GetAvailabilityMachineRpoSlaScheduleYearlySchedule {
    commonSchedules: outputs.GetAvailabilityMachineRpoSlaScheduleYearlyScheduleCommonSchedule[];
    monthSpecificSchedules: outputs.GetAvailabilityMachineRpoSlaScheduleYearlyScheduleMonthSpecificSchedule[];
}

export interface GetAvailabilityMachineRpoSlaScheduleYearlyScheduleCommonSchedule {
    dates: number[];
    lastDayOfMonth: boolean;
    months: string[];
}

export interface GetAvailabilityMachineRpoSlaScheduleYearlyScheduleMonthSpecificSchedule {
    dates: number[];
    month: string;
}

export interface GetAvailabilityMachineRpoSlaSlaRetentionInfo {
    daily: number;
    monthly: number;
    pitr: number;
    weekly: number;
    yearly: number;
}

export interface GetAvailabilityMachineRpoSlaTopology {
    availabilityZones: string[];
    cloudType: string;
    region: string;
    type: string;
}

export interface GetAvailabilityMachineSharedWith {
    users: outputs.GetAvailabilityMachineSharedWithUser[];
}

export interface GetAvailabilityMachineSharedWithUser {
    emailId: string;
    role: string;
}

export interface GetAvailabilityMachinesAvailabilityMachine {
    backupDownloadConfigs: outputs.GetAvailabilityMachinesAvailabilityMachineBackupDownloadConfig[];
    clones: outputs.GetAvailabilityMachinesAvailabilityMachineClone[];
    cloudAvailabilities: outputs.GetAvailabilityMachinesAvailabilityMachineCloudAvailability[];
    daps: outputs.GetAvailabilityMachinesAvailabilityMachineDap[];
    dataIngestionStatus: string;
    dateCreated: string;
    dateModified: string;
    engineType: string;
    id: string;
    loggedInUserRole: string;
    owner: string;
    rpoSlas: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSla[];
    serviceName: string;
    sharedWiths: outputs.GetAvailabilityMachinesAvailabilityMachineSharedWith[];
    subscription: string;
    tenant: string;
    tessellServiceId: string;
    tsm: boolean;
    userId: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineBackupDownloadConfig {
    allowBackupDownloads: boolean;
    allowBackupDownloadsForAllUsers: boolean;
}

export interface GetAvailabilityMachinesAvailabilityMachineClone {
    cloneInfo: {[key: string]: string};
    cloudAvailabilities: outputs.GetAvailabilityMachinesAvailabilityMachineCloneCloudAvailability[];
    computeType: string;
    dateCreated: string;
    id: string;
    name: string;
    owner: string;
    status: string;
    subscription: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineCloneCloudAvailability {
    cloud: string;
    regions: outputs.GetAvailabilityMachinesAvailabilityMachineCloneCloudAvailabilityRegion[];
}

export interface GetAvailabilityMachinesAvailabilityMachineCloneCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineCloudAvailability {
    cloud: string;
    regions: outputs.GetAvailabilityMachinesAvailabilityMachineCloudAvailabilityRegion[];
}

export interface GetAvailabilityMachinesAvailabilityMachineCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineDap {
    availabilityMachineId: string;
    cloudAvailabilities: outputs.GetAvailabilityMachinesAvailabilityMachineDapCloudAvailability[];
    contentInfos: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfo[];
    contentType: string;
    dataAccessConfigs: outputs.GetAvailabilityMachinesAvailabilityMachineDapDataAccessConfig[];
    dateCreated: string;
    dateModified: string;
    engineType: string;
    id: string;
    loggedInUserRole: string;
    name: string;
    owner: string;
    serviceName: string;
    sharedWiths: outputs.GetAvailabilityMachinesAvailabilityMachineDapSharedWith[];
    status: string;
    tessellServiceId: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineDapCloudAvailability {
    cloud: string;
    regions: outputs.GetAvailabilityMachinesAvailabilityMachineDapCloudAvailabilityRegion[];
}

export interface GetAvailabilityMachinesAvailabilityMachineDapCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfo {
    asIsContents: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfoAsIsContent[];
    backupContents: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfoBackupContent[];
    sanitizedContents: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfoSanitizedContent[];
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfoAsIsContent {
    automated: boolean;
    manuals: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfoAsIsContentManual[];
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfoAsIsContentManual {
    creationTime: string;
    id: string;
    name: string;
    sharedAt: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfoBackupContent {
    automated: boolean;
    manuals: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfoBackupContentManual[];
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfoBackupContentManual {
    creationTime: string;
    id: string;
    name: string;
    sharedAt: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfoSanitizedContent {
    automateds: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfoSanitizedContentAutomated[];
    manuals: outputs.GetAvailabilityMachinesAvailabilityMachineDapContentInfoSanitizedContentManual[];
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfoSanitizedContentAutomated {
    sanitizationScheduleId: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineDapContentInfoSanitizedContentManual {
    creationTime: string;
    id: string;
    name: string;
    sharedAt: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineDapDataAccessConfig {
    dailyBackups: number;
    pitr: number;
}

export interface GetAvailabilityMachinesAvailabilityMachineDapSharedWith {
    users: outputs.GetAvailabilityMachinesAvailabilityMachineDapSharedWithUser[];
}

export interface GetAvailabilityMachinesAvailabilityMachineDapSharedWithUser {
    emailId: string;
    role: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSla {
    availabilityMachine: string;
    availabilityMachineId: string;
    rpoSlaStatus: string;
    schedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaSchedule[];
    sla: string;
    slaRetentionInfos: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaSlaRetentionInfo[];
    topologies: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaTopology[];
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaSchedule {
    backupStartTimes: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleBackupStartTime[];
    dailySchedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleDailySchedule[];
    monthlySchedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleMonthlySchedule[];
    weeklySchedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleWeeklySchedule[];
    yearlySchedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleYearlySchedule[];
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleBackupStartTime {
    hour: number;
    minute: number;
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleDailySchedule {
    backupsPerDay: number;
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleMonthlySchedule {
    commonSchedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleMonthlyScheduleCommonSchedule[];
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleMonthlyScheduleCommonSchedule {
    dates: number[];
    lastDayOfMonth: boolean;
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleWeeklySchedule {
    days: string[];
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleYearlySchedule {
    commonSchedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleYearlyScheduleCommonSchedule[];
    monthSpecificSchedules: outputs.GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleYearlyScheduleMonthSpecificSchedule[];
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleYearlyScheduleCommonSchedule {
    dates: number[];
    lastDayOfMonth: boolean;
    months: string[];
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaScheduleYearlyScheduleMonthSpecificSchedule {
    dates: number[];
    month: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaSlaRetentionInfo {
    daily: number;
    monthly: number;
    pitr: number;
    weekly: number;
    yearly: number;
}

export interface GetAvailabilityMachinesAvailabilityMachineRpoSlaTopology {
    availabilityZones: string[];
    cloudType: string;
    region: string;
    type: string;
}

export interface GetAvailabilityMachinesAvailabilityMachineSharedWith {
    users: outputs.GetAvailabilityMachinesAvailabilityMachineSharedWithUser[];
}

export interface GetAvailabilityMachinesAvailabilityMachineSharedWithUser {
    emailId: string;
    role: string;
}

export interface GetDataflixCatalogPitrCatalog {
    cloud: string;
    regions: outputs.GetDataflixCatalogPitrCatalogRegion[];
}

export interface GetDataflixCatalogPitrCatalogRegion {
    region: string;
    timeRanges: outputs.GetDataflixCatalogPitrCatalogRegionTimeRange[];
}

export interface GetDataflixCatalogPitrCatalogRegionTimeRange {
    fromTime: string;
    sharedWiths: outputs.GetDataflixCatalogPitrCatalogRegionTimeRangeSharedWith[];
    toTime: string;
}

export interface GetDataflixCatalogPitrCatalogRegionTimeRangeSharedWith {
    users: string[];
}

export interface GetDataflixCatalogSnapshotCatalog {
    backupStatus: string;
    cloudAvailabilities: outputs.GetDataflixCatalogSnapshotCatalogCloudAvailability[];
    databases: outputs.GetDataflixCatalogSnapshotCatalogDatabase[];
    description: string;
    id: string;
    manual: boolean;
    name: string;
    sharedWiths: outputs.GetDataflixCatalogSnapshotCatalogSharedWith[];
    size: number;
    snapshotTime: string;
    status: string;
}

export interface GetDataflixCatalogSnapshotCatalogCloudAvailability {
    cloud: string;
    regions: outputs.GetDataflixCatalogSnapshotCatalogCloudAvailabilityRegion[];
}

export interface GetDataflixCatalogSnapshotCatalogCloudAvailabilityRegion {
    region: string;
    status: string;
}

export interface GetDataflixCatalogSnapshotCatalogDatabase {
    id: string;
    name: string;
    status: string;
}

export interface GetDataflixCatalogSnapshotCatalogSharedWith {
    users: string[];
}

export interface GetDataflixCloudAvailability {
    cloud: string;
    regions: outputs.GetDataflixCloudAvailabilityRegion[];
}

export interface GetDataflixCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetDataflixSharedWith {
    users: string[];
}

export interface GetDataflixesDataflix {
    availabilityMachineId: string;
    cloudAvailabilities: outputs.GetDataflixesDataflixCloudAvailability[];
    engineType: string;
    owner: string;
    serviceName: string;
    sharedWiths: outputs.GetDataflixesDataflixSharedWith[];
    tessellServiceId: string;
    tsm: boolean;
}

export interface GetDataflixesDataflixCloudAvailability {
    cloud: string;
    regions: outputs.GetDataflixesDataflixCloudAvailabilityRegion[];
}

export interface GetDataflixesDataflixCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetDataflixesDataflixSharedWith {
    users: string[];
}

export interface GetDbBackupsDbBackup {
    availabilityConfigs: outputs.GetDbBackupsDbBackupAvailabilityConfig[];
    backupInfos: outputs.GetDbBackupsDbBackupBackupInfo[];
    backupTime: string;
    cloudAvailabilities: outputs.GetDbBackupsDbBackupCloudAvailability[];
    databases: outputs.GetDbBackupsDbBackupDatabase[];
    downloadUrlStatus: string;
    id: string;
    manual: boolean;
    name: string;
    sharedWiths: outputs.GetDbBackupsDbBackupSharedWith[];
    size: number;
    status: string;
}

export interface GetDbBackupsDbBackupAvailabilityConfig {
    availabilityConfiguredManually: boolean;
    cloudAvailabilityConfigs: outputs.GetDbBackupsDbBackupAvailabilityConfigCloudAvailabilityConfig[];
    dapId: string;
}

export interface GetDbBackupsDbBackupAvailabilityConfigCloudAvailabilityConfig {
    cloud: string;
    regions: outputs.GetDbBackupsDbBackupAvailabilityConfigCloudAvailabilityConfigRegion[];
}

export interface GetDbBackupsDbBackupAvailabilityConfigCloudAvailabilityConfigRegion {
    region: string;
    status: string;
}

export interface GetDbBackupsDbBackupBackupInfo {
    snapshotName: string;
    snapshotTime: string;
    sourceSnapshotId: string;
}

export interface GetDbBackupsDbBackupCloudAvailability {
    cloud: string;
    regions: outputs.GetDbBackupsDbBackupCloudAvailabilityRegion[];
}

export interface GetDbBackupsDbBackupCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetDbBackupsDbBackupDatabase {
    id: string;
    name: string;
    status: string;
}

export interface GetDbBackupsDbBackupSharedWith {
    users: outputs.GetDbBackupsDbBackupSharedWithUser[];
}

export interface GetDbBackupsDbBackupSharedWithUser {
    downloadUrlStatus: string;
    expiryConfigs: outputs.GetDbBackupsDbBackupSharedWithUserExpiryConfig[];
    userEmail: string;
}

export interface GetDbBackupsDbBackupSharedWithUserExpiryConfig {
    expireAt: string;
}

export interface GetDbParameterProfilesDbParameterProfile {
    dateCreated: string;
    dateModified: string;
    dbVersion: string;
    description: string;
    driverInfos: outputs.GetDbParameterProfilesDbParameterProfileDriverInfo[];
    engineType: string;
    factoryParameterId: string;
    id: string;
    loggedInUserRole: string;
    maturityStatus: string;
    metadatas: outputs.GetDbParameterProfilesDbParameterProfileMetadata[];
    name: string;
    oob: boolean;
    owner: string;
    parameters: outputs.GetDbParameterProfilesDbParameterProfileParameter[];
    sharedWiths: outputs.GetDbParameterProfilesDbParameterProfileSharedWith[];
    status: string;
    tenantId: string;
    userId: string;
    versionId: string;
}

export interface GetDbParameterProfilesDbParameterProfileDriverInfo {
    data: {[key: string]: string};
}

export interface GetDbParameterProfilesDbParameterProfileMetadata {
    data: {[key: string]: string};
}

export interface GetDbParameterProfilesDbParameterProfileParameter {
    allowedValues: string;
    applyType: string;
    dataType: string;
    defaultValue: string;
    isFormulaType: boolean;
    isModified: boolean;
    name: string;
    value: string;
}

export interface GetDbParameterProfilesDbParameterProfileSharedWith {
    users: outputs.GetDbParameterProfilesDbParameterProfileSharedWithUser[];
}

export interface GetDbParameterProfilesDbParameterProfileSharedWithUser {
    emailId: string;
    role: string;
}

export interface GetDbServiceClonedFromInfo {
    availabilityMachine: string;
    availabilityMachineId: string;
    maximumRecoverability: boolean;
    pitrTime: string;
    snapshotId: string;
    snapshotName: string;
    snapshotTime: string;
    tessellService: string;
    tessellServiceId: string;
}

export interface GetDbServiceContextInfo {
    description: string;
    subStatus: string;
}

export interface GetDbServiceDatabase {
    clonedFromInfos: outputs.GetDbServiceDatabaseClonedFromInfo[];
    connectStrings: outputs.GetDbServiceDatabaseConnectString[];
    databaseConfigurations: outputs.GetDbServiceDatabaseDatabaseConfiguration[];
    databaseName: string;
    dateCreated: string;
    description: string;
    engineType: string;
    id: string;
    status: string;
    tessellCreated: boolean;
    tessellServiceId: string;
}

export interface GetDbServiceDatabaseClonedFromInfo {
    databaseId: string;
}

export interface GetDbServiceDatabaseConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: string;
}

export interface GetDbServiceDatabaseDatabaseConfiguration {
    milvusConfigs: outputs.GetDbServiceDatabaseDatabaseConfigurationMilvusConfig[];
    mongodbConfigs: outputs.GetDbServiceDatabaseDatabaseConfigurationMongodbConfig[];
    mysqlConfigs: outputs.GetDbServiceDatabaseDatabaseConfigurationMysqlConfig[];
    oracleConfigs: outputs.GetDbServiceDatabaseDatabaseConfigurationOracleConfig[];
    postgresqlConfigs: outputs.GetDbServiceDatabaseDatabaseConfigurationPostgresqlConfig[];
    sqlServerConfigs: outputs.GetDbServiceDatabaseDatabaseConfigurationSqlServerConfig[];
}

export interface GetDbServiceDatabaseDatabaseConfigurationMilvusConfig {
    parameterProfileId: string;
}

export interface GetDbServiceDatabaseDatabaseConfigurationMongodbConfig {
    parameterProfileId: string;
}

export interface GetDbServiceDatabaseDatabaseConfigurationMysqlConfig {
    parameterProfileId: string;
}

export interface GetDbServiceDatabaseDatabaseConfigurationOracleConfig {
    optionsProfile: string;
    parameterProfileId: string;
    username: string;
}

export interface GetDbServiceDatabaseDatabaseConfigurationPostgresqlConfig {
    parameterProfileId: string;
}

export interface GetDbServiceDatabaseDatabaseConfigurationSqlServerConfig {
    parameterProfileId: string;
}

export interface GetDbServiceDeleteScheduleDeletionConfig {
    retainAvailabilityMachine: boolean;
}

export interface GetDbServiceDeletionConfig {
    retainAvailabilityMachine: boolean;
}

export interface GetDbServiceDeletionSchedule {
    deleteAt: string;
    deletionConfigs: outputs.GetDbServiceDeletionScheduleDeletionConfig[];
    id: string;
}

export interface GetDbServiceDeletionScheduleDeletionConfig {
    retainAvailabilityMachine: boolean;
}

export interface GetDbServiceEngineConfiguration {
    apacheKafkaConfigs: outputs.GetDbServiceEngineConfigurationApacheKafkaConfig[];
    milvusConfigs: outputs.GetDbServiceEngineConfigurationMilvusConfig[];
    mongodbConfigs: outputs.GetDbServiceEngineConfigurationMongodbConfig[];
    mysqlConfigs: outputs.GetDbServiceEngineConfigurationMysqlConfig[];
    oracleConfigs: outputs.GetDbServiceEngineConfigurationOracleConfig[];
    postScriptInfos: outputs.GetDbServiceEngineConfigurationPostScriptInfo[];
    postgresqlConfigs: outputs.GetDbServiceEngineConfigurationPostgresqlConfig[];
    preScriptInfos: outputs.GetDbServiceEngineConfigurationPreScriptInfo[];
    sqlServerConfigs: outputs.GetDbServiceEngineConfigurationSqlServerConfig[];
}

export interface GetDbServiceEngineConfigurationApacheKafkaConfig {
    parameterProfileId: string;
}

export interface GetDbServiceEngineConfigurationMilvusConfig {
    parameterProfileId: string;
}

export interface GetDbServiceEngineConfigurationMongodbConfig {
    clusterName: string;
    parameterProfileId: string;
}

export interface GetDbServiceEngineConfigurationMysqlConfig {
    adDomainId: string;
    parameterProfileId: string;
}

export interface GetDbServiceEngineConfigurationOracleConfig {
    characterSet: string;
    enableArchiveMode: boolean;
    multiTenant: boolean;
    nationalCharacterSet: string;
    optionsProfile: string;
    parameterProfileId: string;
}

export interface GetDbServiceEngineConfigurationPostScriptInfo {
    scriptId: string;
    scriptVersion: string;
}

export interface GetDbServiceEngineConfigurationPostgresqlConfig {
    adDomainId: string;
    parameterProfileId: string;
    proxyPort: number;
}

export interface GetDbServiceEngineConfigurationPreScriptInfo {
    scriptId: string;
    scriptVersion: string;
}

export interface GetDbServiceEngineConfigurationSqlServerConfig {
    adDomainId: string;
    parameterProfileId: string;
}

export interface GetDbServiceInfrastructure {
    additionalStorage: number;
    availabilityZone: string;
    awsInfraConfigs: outputs.GetDbServiceInfrastructureAwsInfraConfig[];
    cloud: string;
    cloudAvailabilities: outputs.GetDbServiceInfrastructureCloudAvailability[];
    computeType: string;
    enableComputeSharing: boolean;
    enableEncryption: boolean;
    encryptionKey: string;
    iops: number;
    multiDisk: boolean;
    region: string;
    storage: number;
    throughput: number;
    timezone: string;
    vpc: string;
}

export interface GetDbServiceInfrastructureAwsInfraConfig {
    awsCpuOptions: outputs.GetDbServiceInfrastructureAwsInfraConfigAwsCpuOption[];
}

export interface GetDbServiceInfrastructureAwsInfraConfigAwsCpuOption {
    vcpus: number;
}

export interface GetDbServiceInfrastructureCloudAvailability {
    cloud: string;
    regions: outputs.GetDbServiceInfrastructureCloudAvailabilityRegion[];
}

export interface GetDbServiceInfrastructureCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetDbServiceInstance {
    availabilityZone: string;
    awsInfraConfigs: outputs.GetDbServiceInstanceAwsInfraConfig[];
    cloud: string;
    computeId: string;
    computeName: string;
    computeType: string;
    connectStrings: outputs.GetDbServiceInstanceConnectString[];
    dataVolumeIops: number;
    dateCreated: string;
    enablePerfInsights: boolean;
    encryptionKey: string;
    id: string;
    instanceGroupId: string;
    instanceGroupName: string;
    lastStartedAt: string;
    lastStoppedAt: string;
    monitoringConfigs: outputs.GetDbServiceInstanceMonitoringConfig[];
    name: string;
    parameterProfiles: outputs.GetDbServiceInstanceParameterProfile[];
    region: string;
    role: string;
    softwareImage: string;
    softwareImageVersion: string;
    status: string;
    storage: number;
    tessellServiceId: string;
    throughput: number;
    type: string;
    updatesInProgresses: outputs.GetDbServiceInstanceUpdatesInProgress[];
    vpc: string;
}

export interface GetDbServiceInstanceAwsInfraConfig {
    awsCpuOptions: outputs.GetDbServiceInstanceAwsInfraConfigAwsCpuOption[];
}

export interface GetDbServiceInstanceAwsInfraConfigAwsCpuOption {
    vcpus: number;
}

export interface GetDbServiceInstanceConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: string;
}

export interface GetDbServiceInstanceMonitoringConfig {
    perfInsights: outputs.GetDbServiceInstanceMonitoringConfigPerfInsight[];
}

export interface GetDbServiceInstanceMonitoringConfigPerfInsight {
    monitoringDeploymentId: string;
    perfInsightsEnabled: boolean;
}

export interface GetDbServiceInstanceParameterProfile {
    id: string;
    name: string;
    status: string;
    version: string;
}

export interface GetDbServiceInstanceUpdatesInProgress {
    referenceId: string;
    submittedAt: string;
    updateInfo: {[key: string]: string};
    updateType: string;
}

export interface GetDbServiceIntegrationsConfig {
    integrations: string[];
}

export interface GetDbServiceMaintenanceWindow {
    day: string;
    duration: number;
    time: string;
}

export interface GetDbServiceServiceConnectivity {
    allowedIpAddresses: string[];
    caCertId: string;
    computesConnectivities: outputs.GetDbServiceServiceConnectivityComputesConnectivity[];
    connectStrings: outputs.GetDbServiceServiceConnectivityConnectString[];
    dnsPrefix: string;
    enablePublicAccess: boolean;
    enableSsl: boolean;
    privateLinks: outputs.GetDbServiceServiceConnectivityPrivateLink[];
    servicePort: number;
    updateInProgressInfos: outputs.GetDbServiceServiceConnectivityUpdateInProgressInfo[];
}

export interface GetDbServiceServiceConnectivityComputesConnectivity {
    computeResourceId: string;
    portAccessConfigs: outputs.GetDbServiceServiceConnectivityComputesConnectivityPortAccessConfig[];
}

export interface GetDbServiceServiceConnectivityComputesConnectivityPortAccessConfig {
    allowedIpAddresses: string[];
    enablePublicAccess: boolean;
    port: number;
}

export interface GetDbServiceServiceConnectivityConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: number;
    type: string;
    usageType: string;
}

export interface GetDbServiceServiceConnectivityPrivateLink {
    clientAzureSubscriptionIds: string[];
    endpointServiceName: string;
    privateLinkServiceAlias: string;
    servicePrincipals: string[];
    status: string;
}

export interface GetDbServiceServiceConnectivityUpdateInProgressInfo {
    allowedIpAddresses: string[];
    computesConnectivities: outputs.GetDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity[];
    dnsPrefix: string;
    enablePublicAccess: boolean;
    privateLinks: outputs.GetDbServiceServiceConnectivityUpdateInProgressInfoPrivateLink[];
}

export interface GetDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity {
    computeResourceId: string;
    portAccessConfigs: outputs.GetDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig[];
}

export interface GetDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig {
    allowedIpAddresses: string[];
    enablePublicAccess: boolean;
    port: number;
}

export interface GetDbServiceServiceConnectivityUpdateInProgressInfoPrivateLink {
    clientAzureSubscriptionIds: string[];
    servicePrincipals: string[];
}

export interface GetDbServiceSharedWith {
    users: outputs.GetDbServiceSharedWithUser[];
}

export interface GetDbServiceSharedWithUser {
    emailId: string;
    role: string;
}

export interface GetDbServiceStartStopScheduleMetadata {
    scheduleCounter: number;
}

export interface GetDbServiceStartStopScheduleScheduleInfo {
    oneTimes: outputs.GetDbServiceStartStopScheduleScheduleInfoOneTime[];
    recurrings: outputs.GetDbServiceStartStopScheduleScheduleInfoRecurring[];
}

export interface GetDbServiceStartStopScheduleScheduleInfoOneTime {
    dbServiceStartAt: string;
    dbServiceStopAt: string;
}

export interface GetDbServiceStartStopScheduleScheduleInfoRecurring {
    dailySchedule: boolean;
    dbServiceStartAt: string;
    dbServiceStopAt: string;
    scheduleExpiries: outputs.GetDbServiceStartStopScheduleScheduleInfoRecurringScheduleExpiry[];
    scheduleStartDate: string;
    weeklySchedules: outputs.GetDbServiceStartStopScheduleScheduleInfoRecurringWeeklySchedule[];
}

export interface GetDbServiceStartStopScheduleScheduleInfoRecurringScheduleExpiry {
    afterOccurrences: number;
    never: boolean;
    on: string;
}

export interface GetDbServiceStartStopScheduleScheduleInfoRecurringWeeklySchedule {
    days: string[];
}

export interface GetDbServiceTag {
    name: string;
    value: string;
}

export interface GetDbServiceUpcomingScheduledAction {
    deletes: outputs.GetDbServiceUpcomingScheduledActionDelete[];
    patches: outputs.GetDbServiceUpcomingScheduledActionPatch[];
    startStops: outputs.GetDbServiceUpcomingScheduledActionStartStop[];
}

export interface GetDbServiceUpcomingScheduledActionDelete {
    at: string;
}

export interface GetDbServiceUpcomingScheduledActionPatch {
    at: string;
    message: string;
}

export interface GetDbServiceUpcomingScheduledActionStartStop {
    action: string;
    at: string;
}

export interface GetDbServiceUpdatesInProgress {
    referenceId: string;
    submittedAt: string;
    updateInfo: {[key: string]: string};
    updateType: string;
}

export interface GetDbServicesDbService {
    autoMinorVersionUpdate: boolean;
    availabilityMachineId: string;
    clonedFromInfos: outputs.GetDbServicesDbServiceClonedFromInfo[];
    contextInfos: outputs.GetDbServicesDbServiceContextInfo[];
    databases: outputs.GetDbServicesDbServiceDatabase[];
    dateCreated: string;
    deletionConfigs: outputs.GetDbServicesDbServiceDeletionConfig[];
    deletionSchedules: outputs.GetDbServicesDbServiceDeletionSchedule[];
    description: string;
    edition: string;
    enableDeletionProtection: boolean;
    enableStopProtection: boolean;
    engineConfigurations: outputs.GetDbServicesDbServiceEngineConfiguration[];
    engineType: string;
    id: string;
    infrastructures: outputs.GetDbServicesDbServiceInfrastructure[];
    instances: outputs.GetDbServicesDbServiceInstance[];
    integrationsConfigs: outputs.GetDbServicesDbServiceIntegrationsConfig[];
    licenseType: string;
    loggedInUserRole: string;
    maintenanceWindows: outputs.GetDbServicesDbServiceMaintenanceWindow[];
    name: string;
    numOfInstances: number;
    owner: string;
    serviceConnectivities: outputs.GetDbServicesDbServiceServiceConnectivity[];
    sharedWiths: outputs.GetDbServicesDbServiceSharedWith[];
    softwareImage: string;
    softwareImageVersion: string;
    softwareImageVersionFamily: string;
    startedAt: string;
    status: string;
    stoppedAt: string;
    subscription: string;
    tags: outputs.GetDbServicesDbServiceTag[];
    tenantId: string;
    tessellGenieStatus: string;
    topology: string;
    upcomingScheduledActions: outputs.GetDbServicesDbServiceUpcomingScheduledAction[];
    updatesInProgresses: outputs.GetDbServicesDbServiceUpdatesInProgress[];
}

export interface GetDbServicesDbServiceClonedFromInfo {
    availabilityMachine: string;
    availabilityMachineId: string;
    maximumRecoverability: boolean;
    pitrTime: string;
    snapshotId: string;
    snapshotName: string;
    snapshotTime: string;
    tessellService: string;
    tessellServiceId: string;
}

export interface GetDbServicesDbServiceContextInfo {
    description: string;
    subStatus: string;
}

export interface GetDbServicesDbServiceDatabase {
    clonedFromInfos: outputs.GetDbServicesDbServiceDatabaseClonedFromInfo[];
    connectStrings: outputs.GetDbServicesDbServiceDatabaseConnectString[];
    databaseConfigurations: outputs.GetDbServicesDbServiceDatabaseDatabaseConfiguration[];
    databaseName: string;
    dateCreated: string;
    description: string;
    engineType: string;
    id: string;
    status: string;
    tessellCreated: boolean;
    tessellServiceId: string;
}

export interface GetDbServicesDbServiceDatabaseClonedFromInfo {
    databaseId: string;
}

export interface GetDbServicesDbServiceDatabaseConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: string;
}

export interface GetDbServicesDbServiceDatabaseDatabaseConfiguration {
    milvusConfigs: outputs.GetDbServicesDbServiceDatabaseDatabaseConfigurationMilvusConfig[];
    mongodbConfigs: outputs.GetDbServicesDbServiceDatabaseDatabaseConfigurationMongodbConfig[];
    mysqlConfigs: outputs.GetDbServicesDbServiceDatabaseDatabaseConfigurationMysqlConfig[];
    oracleConfigs: outputs.GetDbServicesDbServiceDatabaseDatabaseConfigurationOracleConfig[];
    postgresqlConfigs: outputs.GetDbServicesDbServiceDatabaseDatabaseConfigurationPostgresqlConfig[];
    sqlServerConfigs: outputs.GetDbServicesDbServiceDatabaseDatabaseConfigurationSqlServerConfig[];
}

export interface GetDbServicesDbServiceDatabaseDatabaseConfigurationMilvusConfig {
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceDatabaseDatabaseConfigurationMongodbConfig {
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceDatabaseDatabaseConfigurationMysqlConfig {
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceDatabaseDatabaseConfigurationOracleConfig {
    optionsProfile: string;
    parameterProfileId: string;
    username: string;
}

export interface GetDbServicesDbServiceDatabaseDatabaseConfigurationPostgresqlConfig {
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceDatabaseDatabaseConfigurationSqlServerConfig {
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceDeletionConfig {
    retainAvailabilityMachine: boolean;
}

export interface GetDbServicesDbServiceDeletionSchedule {
    deleteAt: string;
    deletionConfigs: outputs.GetDbServicesDbServiceDeletionScheduleDeletionConfig[];
    id: string;
}

export interface GetDbServicesDbServiceDeletionScheduleDeletionConfig {
    retainAvailabilityMachine: boolean;
}

export interface GetDbServicesDbServiceEngineConfiguration {
    apacheKafkaConfigs: outputs.GetDbServicesDbServiceEngineConfigurationApacheKafkaConfig[];
    milvusConfigs: outputs.GetDbServicesDbServiceEngineConfigurationMilvusConfig[];
    mongodbConfigs: outputs.GetDbServicesDbServiceEngineConfigurationMongodbConfig[];
    mysqlConfigs: outputs.GetDbServicesDbServiceEngineConfigurationMysqlConfig[];
    oracleConfigs: outputs.GetDbServicesDbServiceEngineConfigurationOracleConfig[];
    postScriptInfos: outputs.GetDbServicesDbServiceEngineConfigurationPostScriptInfo[];
    postgresqlConfigs: outputs.GetDbServicesDbServiceEngineConfigurationPostgresqlConfig[];
    preScriptInfos: outputs.GetDbServicesDbServiceEngineConfigurationPreScriptInfo[];
    sqlServerConfigs: outputs.GetDbServicesDbServiceEngineConfigurationSqlServerConfig[];
}

export interface GetDbServicesDbServiceEngineConfigurationApacheKafkaConfig {
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceEngineConfigurationMilvusConfig {
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceEngineConfigurationMongodbConfig {
    clusterName: string;
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceEngineConfigurationMysqlConfig {
    adDomainId: string;
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceEngineConfigurationOracleConfig {
    characterSet: string;
    enableArchiveMode: boolean;
    multiTenant: boolean;
    nationalCharacterSet: string;
    optionsProfile: string;
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceEngineConfigurationPostScriptInfo {
    scriptId: string;
    scriptVersion: string;
}

export interface GetDbServicesDbServiceEngineConfigurationPostgresqlConfig {
    adDomainId: string;
    parameterProfileId: string;
    proxyPort: number;
}

export interface GetDbServicesDbServiceEngineConfigurationPreScriptInfo {
    scriptId: string;
    scriptVersion: string;
}

export interface GetDbServicesDbServiceEngineConfigurationSqlServerConfig {
    adDomainId: string;
    parameterProfileId: string;
}

export interface GetDbServicesDbServiceInfrastructure {
    additionalStorage: number;
    availabilityZone: string;
    awsInfraConfigs: outputs.GetDbServicesDbServiceInfrastructureAwsInfraConfig[];
    cloud: string;
    cloudAvailabilities: outputs.GetDbServicesDbServiceInfrastructureCloudAvailability[];
    computeType: string;
    enableComputeSharing: boolean;
    enableEncryption: boolean;
    encryptionKey: string;
    iops: number;
    multiDisk: boolean;
    region: string;
    storage: number;
    throughput: number;
    timezone: string;
    vpc: string;
}

export interface GetDbServicesDbServiceInfrastructureAwsInfraConfig {
    awsCpuOptions: outputs.GetDbServicesDbServiceInfrastructureAwsInfraConfigAwsCpuOption[];
}

export interface GetDbServicesDbServiceInfrastructureAwsInfraConfigAwsCpuOption {
    vcpus: number;
}

export interface GetDbServicesDbServiceInfrastructureCloudAvailability {
    cloud: string;
    regions: outputs.GetDbServicesDbServiceInfrastructureCloudAvailabilityRegion[];
}

export interface GetDbServicesDbServiceInfrastructureCloudAvailabilityRegion {
    availabilityZones: string[];
    region: string;
}

export interface GetDbServicesDbServiceInstance {
    availabilityZone: string;
    awsInfraConfigs: outputs.GetDbServicesDbServiceInstanceAwsInfraConfig[];
    cloud: string;
    computeId: string;
    computeName: string;
    computeType: string;
    connectStrings: outputs.GetDbServicesDbServiceInstanceConnectString[];
    dataVolumeIops: number;
    dateCreated: string;
    enablePerfInsights: boolean;
    encryptionKey: string;
    id: string;
    instanceGroupId: string;
    instanceGroupName: string;
    lastStartedAt: string;
    lastStoppedAt: string;
    monitoringConfigs: outputs.GetDbServicesDbServiceInstanceMonitoringConfig[];
    name: string;
    parameterProfiles: outputs.GetDbServicesDbServiceInstanceParameterProfile[];
    region: string;
    role: string;
    softwareImage: string;
    softwareImageVersion: string;
    status: string;
    storage: number;
    tessellServiceId: string;
    throughput: number;
    type: string;
    updatesInProgresses: outputs.GetDbServicesDbServiceInstanceUpdatesInProgress[];
    vpc: string;
}

export interface GetDbServicesDbServiceInstanceAwsInfraConfig {
    awsCpuOptions: outputs.GetDbServicesDbServiceInstanceAwsInfraConfigAwsCpuOption[];
}

export interface GetDbServicesDbServiceInstanceAwsInfraConfigAwsCpuOption {
    vcpus: number;
}

export interface GetDbServicesDbServiceInstanceConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: string;
}

export interface GetDbServicesDbServiceInstanceMonitoringConfig {
    perfInsights: outputs.GetDbServicesDbServiceInstanceMonitoringConfigPerfInsight[];
}

export interface GetDbServicesDbServiceInstanceMonitoringConfigPerfInsight {
    monitoringDeploymentId: string;
    perfInsightsEnabled: boolean;
}

export interface GetDbServicesDbServiceInstanceParameterProfile {
    id: string;
    name: string;
    status: string;
    version: string;
}

export interface GetDbServicesDbServiceInstanceUpdatesInProgress {
    referenceId: string;
    submittedAt: string;
    updateInfo: {[key: string]: string};
    updateType: string;
}

export interface GetDbServicesDbServiceIntegrationsConfig {
    integrations: string[];
}

export interface GetDbServicesDbServiceMaintenanceWindow {
    day: string;
    duration: number;
    time: string;
}

export interface GetDbServicesDbServiceServiceConnectivity {
    allowedIpAddresses: string[];
    caCertId: string;
    computesConnectivities: outputs.GetDbServicesDbServiceServiceConnectivityComputesConnectivity[];
    connectStrings: outputs.GetDbServicesDbServiceServiceConnectivityConnectString[];
    dnsPrefix: string;
    enablePublicAccess: boolean;
    enableSsl: boolean;
    privateLinks: outputs.GetDbServicesDbServiceServiceConnectivityPrivateLink[];
    servicePort: number;
    updateInProgressInfos: outputs.GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfo[];
}

export interface GetDbServicesDbServiceServiceConnectivityComputesConnectivity {
    computeResourceId: string;
    portAccessConfigs: outputs.GetDbServicesDbServiceServiceConnectivityComputesConnectivityPortAccessConfig[];
}

export interface GetDbServicesDbServiceServiceConnectivityComputesConnectivityPortAccessConfig {
    allowedIpAddresses: string[];
    enablePublicAccess: boolean;
    port: number;
}

export interface GetDbServicesDbServiceServiceConnectivityConnectString {
    connectDescriptor: string;
    endpoint: string;
    masterUser: string;
    servicePort: number;
    type: string;
    usageType: string;
}

export interface GetDbServicesDbServiceServiceConnectivityPrivateLink {
    clientAzureSubscriptionIds: string[];
    endpointServiceName: string;
    privateLinkServiceAlias: string;
    servicePrincipals: string[];
    status: string;
}

export interface GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfo {
    allowedIpAddresses: string[];
    computesConnectivities: outputs.GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity[];
    dnsPrefix: string;
    enablePublicAccess: boolean;
    privateLinks: outputs.GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfoPrivateLink[];
}

export interface GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivity {
    computeResourceId: string;
    portAccessConfigs: outputs.GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig[];
}

export interface GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfoComputesConnectivityPortAccessConfig {
    allowedIpAddresses: string[];
    enablePublicAccess: boolean;
    port: number;
}

export interface GetDbServicesDbServiceServiceConnectivityUpdateInProgressInfoPrivateLink {
    clientAzureSubscriptionIds: string[];
    servicePrincipals: string[];
}

export interface GetDbServicesDbServiceSharedWith {
    users: outputs.GetDbServicesDbServiceSharedWithUser[];
}

export interface GetDbServicesDbServiceSharedWithUser {
    emailId: string;
    role: string;
}

export interface GetDbServicesDbServiceTag {
    name: string;
    value: string;
}

export interface GetDbServicesDbServiceUpcomingScheduledAction {
    deletes: outputs.GetDbServicesDbServiceUpcomingScheduledActionDelete[];
    patches: outputs.GetDbServicesDbServiceUpcomingScheduledActionPatch[];
    startStops: outputs.GetDbServicesDbServiceUpcomingScheduledActionStartStop[];
}

export interface GetDbServicesDbServiceUpcomingScheduledActionDelete {
    at: string;
}

export interface GetDbServicesDbServiceUpcomingScheduledActionPatch {
    at: string;
    message: string;
}

export interface GetDbServicesDbServiceUpcomingScheduledActionStartStop {
    action: string;
    at: string;
}

export interface GetDbServicesDbServiceUpdatesInProgress {
    referenceId: string;
    submittedAt: string;
    updateInfo: {[key: string]: string};
    updateType: string;
}

export interface GetDbSnapshotAvailabilityConfig {
    availabilityConfiguredManually: boolean;
    cloudAvailabilityConfigs: outputs.GetDbSnapshotAvailabilityConfigCloudAvailabilityConfig[];
    dapId: string;
}

export interface GetDbSnapshotAvailabilityConfigCloudAvailabilityConfig {
    cloud: string;
    regions: outputs.GetDbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion[];
}

export interface GetDbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion {
    region: string;
    status: string;
}

export interface GetDbSnapshotCloudAvailability {
    cloud: string;
    regions: outputs.GetDbSnapshotCloudAvailabilityRegion[];
}

export interface GetDbSnapshotCloudAvailabilityRegion {
    region: string;
    status: string;
}

export interface GetDbSnapshotDatabase {
    id: string;
    name: string;
    status: string;
}

export interface GetDbSnapshotSharedWith {
    users: string[];
}

export interface GetDbSnapshotsDbSnapshot {
    availabilityConfigs: outputs.GetDbSnapshotsDbSnapshotAvailabilityConfig[];
    backupStatus: string;
    cloudAvailabilities: outputs.GetDbSnapshotsDbSnapshotCloudAvailability[];
    databases: outputs.GetDbSnapshotsDbSnapshotDatabase[];
    description: string;
    id: string;
    manual: boolean;
    name: string;
    sharedWiths: outputs.GetDbSnapshotsDbSnapshotSharedWith[];
    size: number;
    snapshotTime: string;
    status: string;
}

export interface GetDbSnapshotsDbSnapshotAvailabilityConfig {
    availabilityConfiguredManually: boolean;
    cloudAvailabilityConfigs: outputs.GetDbSnapshotsDbSnapshotAvailabilityConfigCloudAvailabilityConfig[];
    dapId: string;
}

export interface GetDbSnapshotsDbSnapshotAvailabilityConfigCloudAvailabilityConfig {
    cloud: string;
    regions: outputs.GetDbSnapshotsDbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion[];
}

export interface GetDbSnapshotsDbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion {
    region: string;
    status: string;
}

export interface GetDbSnapshotsDbSnapshotCloudAvailability {
    cloud: string;
    regions: outputs.GetDbSnapshotsDbSnapshotCloudAvailabilityRegion[];
}

export interface GetDbSnapshotsDbSnapshotCloudAvailabilityRegion {
    region: string;
    status: string;
}

export interface GetDbSnapshotsDbSnapshotDatabase {
    id: string;
    name: string;
    status: string;
}

export interface GetDbSnapshotsDbSnapshotSharedWith {
    users: string[];
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshot {
    availabilityConfigs: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotAvailabilityConfig[];
    backupStatus: string;
    cloudAvailabilities: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotCloudAvailability[];
    databases: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotDatabase[];
    id: string;
    manual: boolean;
    name: string;
    sanitizationInfos: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotSanitizationInfo[];
    sharedWiths: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotSharedWith[];
    size: number;
    snapshotTime: string;
    status: string;
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotAvailabilityConfig {
    availabilityConfiguredManually: boolean;
    cloudAvailabilityConfigs: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotAvailabilityConfigCloudAvailabilityConfig[];
    dapId: string;
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotAvailabilityConfigCloudAvailabilityConfig {
    cloud: string;
    regions: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion[];
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotAvailabilityConfigCloudAvailabilityConfigRegion {
    region: string;
    status: string;
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotCloudAvailability {
    cloud: string;
    regions: outputs.GetSanitizedDbSnapshotsSanitizedDbSnapshotCloudAvailabilityRegion[];
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotCloudAvailabilityRegion {
    region: string;
    status: string;
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotDatabase {
    id: string;
    name: string;
    status: string;
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotSanitizationInfo {
    sanitizationSchedule: string;
    sanitizationScheduleId: string;
    sanitizationScript: string;
    sanitizationScriptId: string;
    scriptVersion: string;
    sourceSnapshotId: string;
}

export interface GetSanitizedDbSnapshotsSanitizedDbSnapshotSharedWith {
    users: string[];
}

