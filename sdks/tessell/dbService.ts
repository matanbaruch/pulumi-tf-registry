// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbService extends pulumi.CustomResource {
    /**
     * Get an existing DbService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbServiceState, opts?: pulumi.CustomResourceOptions): DbService {
        return new DbService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tessell:index/dbService:DbService';

    /**
     * Returns true if the given object is an instance of DbService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbService.__pulumiType;
    }

    /**
     * Specify whether to automatically update minor version for DB Service
     */
    public readonly autoMinorVersionUpdate!: pulumi.Output<boolean | undefined>;
    /**
     * Associated Availability Machine Id
     */
    public /*out*/ readonly availabilityMachineId!: pulumi.Output<string>;
    /**
     * For any operation on this resource, block the flow until the action has completed successfully
     */
    public readonly blockUntilComplete!: pulumi.Output<boolean | undefined>;
    /**
     * If the DB Service is created as a clone from some other DB Service, this section describes the parent DB Service and
     * cloning details
     */
    public /*out*/ readonly clonedFromInfos!: pulumi.Output<outputs.DbServiceClonedFromInfo[]>;
    /**
     * Provide more context of DB Service state
     */
    public /*out*/ readonly contextInfos!: pulumi.Output<outputs.DbServiceContextInfo[]>;
    /**
     * DB Service's credential details
     */
    public readonly creds!: pulumi.Output<outputs.DbServiceCreds>;
    /**
     * Databases that are part of this DB Service
     */
    public readonly databases!: pulumi.Output<outputs.DbServiceDatabase[] | undefined>;
    /**
     * Timestamp when the DB Service was created at
     */
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    /**
     * If the DB Service is to be deleted, this config would be honoured if no preference is provided during deleting the
     * service
     */
    public readonly deletionConfig!: pulumi.Output<outputs.DbServiceDeletionConfig | undefined>;
    /**
     * Details of the deletion schedule on a DB Service
     */
    public /*out*/ readonly deletionSchedules!: pulumi.Output<outputs.DbServiceDeletionSchedule[]>;
    /**
     * DB Service's description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly edition!: pulumi.Output<string | undefined>;
    /**
     * Specify whether to enable deletion protection for the DB Service
     */
    public readonly enableDeletionProtection!: pulumi.Output<boolean | undefined>;
    /**
     * This field specifies whether to enable stop protection for the DB Service. If this is enabled, the stop for the DB
     * Service would be disallowed until this setting is disabled.
     */
    public readonly enableStopProtection!: pulumi.Output<boolean | undefined>;
    /**
     * This field details the DB Service engine configuration details like - parameter profile, or options profile (if
     * applicable) are used to configure the DB Service.
     */
    public readonly engineConfiguration!: pulumi.Output<outputs.DbServiceEngineConfiguration>;
    public readonly engineType!: pulumi.Output<string>;
    /**
     * If provided, invoke the DB Service start/stop API
     */
    public readonly expectedStatus!: pulumi.Output<string | undefined>;
    /**
     * This field contains DB Service's infrastructure related information, like, where the service is hosted - cloud, region;
     * what compute shape, or network is is configured with.
     */
    public readonly infrastructure!: pulumi.Output<outputs.DbServiceInfrastructure>;
    /**
     * Instances associated with this DB Service
     */
    public readonly instances!: pulumi.Output<outputs.DbServiceInstance[] | undefined>;
    /**
     * Integrations to be enabled for the DB Service
     */
    public readonly integrationsConfig!: pulumi.Output<outputs.DbServiceIntegrationsConfig | undefined>;
    /**
     * DB Service License Type
     */
    public /*out*/ readonly licenseType!: pulumi.Output<string>;
    /**
     * Access role for the currently logged in user
     */
    public /*out*/ readonly loggedInUserRole!: pulumi.Output<string>;
    /**
     * This field details the DB Service maintenance related details.
     */
    public readonly maintenanceWindow!: pulumi.Output<outputs.DbServiceMaintenanceWindow | undefined>;
    /**
     * Name of the DB Service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of instance (nodes) to be created for the DB Service. This is a required input for Apache Kafka. For all other
     * engines, this input would be ignored even if specified.
     */
    public /*out*/ readonly numOfInstances!: pulumi.Output<number>;
    /**
     * DB Service owner email address
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Id of the parent AvailabilityMachine, required when creating a clone
     */
    public readonly parentAvailabilityMachineId!: pulumi.Output<string | undefined>;
    /**
     * PITR Timestamp, using which the clone is to be created
     */
    public readonly pitr!: pulumi.Output<string | undefined>;
    /**
     * DB Service's connectivity information
     */
    public readonly serviceConnectivity!: pulumi.Output<outputs.DbServiceServiceConnectivity>;
    /**
     * Tessell Entity ACL Sharing Info
     */
    public readonly sharedWith!: pulumi.Output<outputs.DbServiceSharedWith | undefined>;
    /**
     * DB Service's snapshot retention configurations. If not specified, the default recommended retention configurations would
     * be applied.
     */
    public readonly snapshotConfiguration!: pulumi.Output<outputs.DbServiceSnapshotConfiguration | undefined>;
    /**
     * Tessell service snapshot Id, using which the clone is to be created
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * Software Image to be used to create the DB Service
     */
    public readonly softwareImage!: pulumi.Output<string>;
    /**
     * Software Image Version to be used to create the DB Service
     */
    public readonly softwareImageVersion!: pulumi.Output<string>;
    /**
     * Software Image Family DB Service belongs to
     */
    public /*out*/ readonly softwareImageVersionFamily!: pulumi.Output<string>;
    /**
     * Timestamp when the DB Service was last started at
     */
    public /*out*/ readonly startedAt!: pulumi.Output<string>;
    /**
     * The current status of the DB Service
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Timestamp when the DB Service was last stopped at
     */
    public /*out*/ readonly stoppedAt!: pulumi.Output<string>;
    /**
     * Tessell Subscription in which the DB Service is to be created
     */
    public readonly subscription!: pulumi.Output<string>;
    /**
     * The tags to be associated with the DB Service
     */
    public readonly tags!: pulumi.Output<outputs.DbServiceTag[] | undefined>;
    /**
     * The tenant-id for the DB Service
     */
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * DB Service's Genie status
     */
    public /*out*/ readonly tessellGenieStatus!: pulumi.Output<string>;
    /**
     * If block_until_complete is true, how long it should block for. (In seconds)
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DbServiceTimeouts | undefined>;
    public readonly topology!: pulumi.Output<string>;
    public /*out*/ readonly upcomingScheduledActions!: pulumi.Output<outputs.DbServiceUpcomingScheduledAction[]>;
    /**
     * The updates that are in progress for this resource
     */
    public /*out*/ readonly updatesInProgresses!: pulumi.Output<outputs.DbServiceUpdatesInProgress[]>;

    /**
     * Create a DbService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbServiceArgs | DbServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbServiceState | undefined;
            resourceInputs["autoMinorVersionUpdate"] = state ? state.autoMinorVersionUpdate : undefined;
            resourceInputs["availabilityMachineId"] = state ? state.availabilityMachineId : undefined;
            resourceInputs["blockUntilComplete"] = state ? state.blockUntilComplete : undefined;
            resourceInputs["clonedFromInfos"] = state ? state.clonedFromInfos : undefined;
            resourceInputs["contextInfos"] = state ? state.contextInfos : undefined;
            resourceInputs["creds"] = state ? state.creds : undefined;
            resourceInputs["databases"] = state ? state.databases : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["deletionConfig"] = state ? state.deletionConfig : undefined;
            resourceInputs["deletionSchedules"] = state ? state.deletionSchedules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["enableDeletionProtection"] = state ? state.enableDeletionProtection : undefined;
            resourceInputs["enableStopProtection"] = state ? state.enableStopProtection : undefined;
            resourceInputs["engineConfiguration"] = state ? state.engineConfiguration : undefined;
            resourceInputs["engineType"] = state ? state.engineType : undefined;
            resourceInputs["expectedStatus"] = state ? state.expectedStatus : undefined;
            resourceInputs["infrastructure"] = state ? state.infrastructure : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["integrationsConfig"] = state ? state.integrationsConfig : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["loggedInUserRole"] = state ? state.loggedInUserRole : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numOfInstances"] = state ? state.numOfInstances : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["parentAvailabilityMachineId"] = state ? state.parentAvailabilityMachineId : undefined;
            resourceInputs["pitr"] = state ? state.pitr : undefined;
            resourceInputs["serviceConnectivity"] = state ? state.serviceConnectivity : undefined;
            resourceInputs["sharedWith"] = state ? state.sharedWith : undefined;
            resourceInputs["snapshotConfiguration"] = state ? state.snapshotConfiguration : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["softwareImage"] = state ? state.softwareImage : undefined;
            resourceInputs["softwareImageVersion"] = state ? state.softwareImageVersion : undefined;
            resourceInputs["softwareImageVersionFamily"] = state ? state.softwareImageVersionFamily : undefined;
            resourceInputs["startedAt"] = state ? state.startedAt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stoppedAt"] = state ? state.stoppedAt : undefined;
            resourceInputs["subscription"] = state ? state.subscription : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["tessellGenieStatus"] = state ? state.tessellGenieStatus : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topology"] = state ? state.topology : undefined;
            resourceInputs["upcomingScheduledActions"] = state ? state.upcomingScheduledActions : undefined;
            resourceInputs["updatesInProgresses"] = state ? state.updatesInProgresses : undefined;
        } else {
            const args = argsOrState as DbServiceArgs | undefined;
            if ((!args || args.creds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'creds'");
            }
            if ((!args || args.engineConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineConfiguration'");
            }
            if ((!args || args.engineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineType'");
            }
            if ((!args || args.infrastructure === undefined) && !opts.urn) {
                throw new Error("Missing required property 'infrastructure'");
            }
            if ((!args || args.serviceConnectivity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceConnectivity'");
            }
            if ((!args || args.softwareImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'softwareImage'");
            }
            if ((!args || args.softwareImageVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'softwareImageVersion'");
            }
            if ((!args || args.subscription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscription'");
            }
            if ((!args || args.topology === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topology'");
            }
            resourceInputs["autoMinorVersionUpdate"] = args ? args.autoMinorVersionUpdate : undefined;
            resourceInputs["blockUntilComplete"] = args ? args.blockUntilComplete : undefined;
            resourceInputs["creds"] = args ? args.creds : undefined;
            resourceInputs["databases"] = args ? args.databases : undefined;
            resourceInputs["deletionConfig"] = args ? args.deletionConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["enableDeletionProtection"] = args ? args.enableDeletionProtection : undefined;
            resourceInputs["enableStopProtection"] = args ? args.enableStopProtection : undefined;
            resourceInputs["engineConfiguration"] = args ? args.engineConfiguration : undefined;
            resourceInputs["engineType"] = args ? args.engineType : undefined;
            resourceInputs["expectedStatus"] = args ? args.expectedStatus : undefined;
            resourceInputs["infrastructure"] = args ? args.infrastructure : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["integrationsConfig"] = args ? args.integrationsConfig : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentAvailabilityMachineId"] = args ? args.parentAvailabilityMachineId : undefined;
            resourceInputs["pitr"] = args ? args.pitr : undefined;
            resourceInputs["serviceConnectivity"] = args ? args.serviceConnectivity : undefined;
            resourceInputs["sharedWith"] = args ? args.sharedWith : undefined;
            resourceInputs["snapshotConfiguration"] = args ? args.snapshotConfiguration : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["softwareImage"] = args ? args.softwareImage : undefined;
            resourceInputs["softwareImageVersion"] = args ? args.softwareImageVersion : undefined;
            resourceInputs["subscription"] = args ? args.subscription : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topology"] = args ? args.topology : undefined;
            resourceInputs["availabilityMachineId"] = undefined /*out*/;
            resourceInputs["clonedFromInfos"] = undefined /*out*/;
            resourceInputs["contextInfos"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["deletionSchedules"] = undefined /*out*/;
            resourceInputs["licenseType"] = undefined /*out*/;
            resourceInputs["loggedInUserRole"] = undefined /*out*/;
            resourceInputs["numOfInstances"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["softwareImageVersionFamily"] = undefined /*out*/;
            resourceInputs["startedAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["stoppedAt"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["tessellGenieStatus"] = undefined /*out*/;
            resourceInputs["upcomingScheduledActions"] = undefined /*out*/;
            resourceInputs["updatesInProgresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbService resources.
 */
export interface DbServiceState {
    /**
     * Specify whether to automatically update minor version for DB Service
     */
    autoMinorVersionUpdate?: pulumi.Input<boolean>;
    /**
     * Associated Availability Machine Id
     */
    availabilityMachineId?: pulumi.Input<string>;
    /**
     * For any operation on this resource, block the flow until the action has completed successfully
     */
    blockUntilComplete?: pulumi.Input<boolean>;
    /**
     * If the DB Service is created as a clone from some other DB Service, this section describes the parent DB Service and
     * cloning details
     */
    clonedFromInfos?: pulumi.Input<pulumi.Input<inputs.DbServiceClonedFromInfo>[]>;
    /**
     * Provide more context of DB Service state
     */
    contextInfos?: pulumi.Input<pulumi.Input<inputs.DbServiceContextInfo>[]>;
    /**
     * DB Service's credential details
     */
    creds?: pulumi.Input<inputs.DbServiceCreds>;
    /**
     * Databases that are part of this DB Service
     */
    databases?: pulumi.Input<pulumi.Input<inputs.DbServiceDatabase>[]>;
    /**
     * Timestamp when the DB Service was created at
     */
    dateCreated?: pulumi.Input<string>;
    /**
     * If the DB Service is to be deleted, this config would be honoured if no preference is provided during deleting the
     * service
     */
    deletionConfig?: pulumi.Input<inputs.DbServiceDeletionConfig>;
    /**
     * Details of the deletion schedule on a DB Service
     */
    deletionSchedules?: pulumi.Input<pulumi.Input<inputs.DbServiceDeletionSchedule>[]>;
    /**
     * DB Service's description
     */
    description?: pulumi.Input<string>;
    edition?: pulumi.Input<string>;
    /**
     * Specify whether to enable deletion protection for the DB Service
     */
    enableDeletionProtection?: pulumi.Input<boolean>;
    /**
     * This field specifies whether to enable stop protection for the DB Service. If this is enabled, the stop for the DB
     * Service would be disallowed until this setting is disabled.
     */
    enableStopProtection?: pulumi.Input<boolean>;
    /**
     * This field details the DB Service engine configuration details like - parameter profile, or options profile (if
     * applicable) are used to configure the DB Service.
     */
    engineConfiguration?: pulumi.Input<inputs.DbServiceEngineConfiguration>;
    engineType?: pulumi.Input<string>;
    /**
     * If provided, invoke the DB Service start/stop API
     */
    expectedStatus?: pulumi.Input<string>;
    /**
     * This field contains DB Service's infrastructure related information, like, where the service is hosted - cloud, region;
     * what compute shape, or network is is configured with.
     */
    infrastructure?: pulumi.Input<inputs.DbServiceInfrastructure>;
    /**
     * Instances associated with this DB Service
     */
    instances?: pulumi.Input<pulumi.Input<inputs.DbServiceInstance>[]>;
    /**
     * Integrations to be enabled for the DB Service
     */
    integrationsConfig?: pulumi.Input<inputs.DbServiceIntegrationsConfig>;
    /**
     * DB Service License Type
     */
    licenseType?: pulumi.Input<string>;
    /**
     * Access role for the currently logged in user
     */
    loggedInUserRole?: pulumi.Input<string>;
    /**
     * This field details the DB Service maintenance related details.
     */
    maintenanceWindow?: pulumi.Input<inputs.DbServiceMaintenanceWindow>;
    /**
     * Name of the DB Service
     */
    name?: pulumi.Input<string>;
    /**
     * Number of instance (nodes) to be created for the DB Service. This is a required input for Apache Kafka. For all other
     * engines, this input would be ignored even if specified.
     */
    numOfInstances?: pulumi.Input<number>;
    /**
     * DB Service owner email address
     */
    owner?: pulumi.Input<string>;
    /**
     * Id of the parent AvailabilityMachine, required when creating a clone
     */
    parentAvailabilityMachineId?: pulumi.Input<string>;
    /**
     * PITR Timestamp, using which the clone is to be created
     */
    pitr?: pulumi.Input<string>;
    /**
     * DB Service's connectivity information
     */
    serviceConnectivity?: pulumi.Input<inputs.DbServiceServiceConnectivity>;
    /**
     * Tessell Entity ACL Sharing Info
     */
    sharedWith?: pulumi.Input<inputs.DbServiceSharedWith>;
    /**
     * DB Service's snapshot retention configurations. If not specified, the default recommended retention configurations would
     * be applied.
     */
    snapshotConfiguration?: pulumi.Input<inputs.DbServiceSnapshotConfiguration>;
    /**
     * Tessell service snapshot Id, using which the clone is to be created
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Software Image to be used to create the DB Service
     */
    softwareImage?: pulumi.Input<string>;
    /**
     * Software Image Version to be used to create the DB Service
     */
    softwareImageVersion?: pulumi.Input<string>;
    /**
     * Software Image Family DB Service belongs to
     */
    softwareImageVersionFamily?: pulumi.Input<string>;
    /**
     * Timestamp when the DB Service was last started at
     */
    startedAt?: pulumi.Input<string>;
    /**
     * The current status of the DB Service
     */
    status?: pulumi.Input<string>;
    /**
     * Timestamp when the DB Service was last stopped at
     */
    stoppedAt?: pulumi.Input<string>;
    /**
     * Tessell Subscription in which the DB Service is to be created
     */
    subscription?: pulumi.Input<string>;
    /**
     * The tags to be associated with the DB Service
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DbServiceTag>[]>;
    /**
     * The tenant-id for the DB Service
     */
    tenantId?: pulumi.Input<string>;
    /**
     * DB Service's Genie status
     */
    tessellGenieStatus?: pulumi.Input<string>;
    /**
     * If block_until_complete is true, how long it should block for. (In seconds)
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DbServiceTimeouts>;
    topology?: pulumi.Input<string>;
    upcomingScheduledActions?: pulumi.Input<pulumi.Input<inputs.DbServiceUpcomingScheduledAction>[]>;
    /**
     * The updates that are in progress for this resource
     */
    updatesInProgresses?: pulumi.Input<pulumi.Input<inputs.DbServiceUpdatesInProgress>[]>;
}

/**
 * The set of arguments for constructing a DbService resource.
 */
export interface DbServiceArgs {
    /**
     * Specify whether to automatically update minor version for DB Service
     */
    autoMinorVersionUpdate?: pulumi.Input<boolean>;
    /**
     * For any operation on this resource, block the flow until the action has completed successfully
     */
    blockUntilComplete?: pulumi.Input<boolean>;
    /**
     * DB Service's credential details
     */
    creds: pulumi.Input<inputs.DbServiceCreds>;
    /**
     * Databases that are part of this DB Service
     */
    databases?: pulumi.Input<pulumi.Input<inputs.DbServiceDatabase>[]>;
    /**
     * If the DB Service is to be deleted, this config would be honoured if no preference is provided during deleting the
     * service
     */
    deletionConfig?: pulumi.Input<inputs.DbServiceDeletionConfig>;
    /**
     * DB Service's description
     */
    description?: pulumi.Input<string>;
    edition?: pulumi.Input<string>;
    /**
     * Specify whether to enable deletion protection for the DB Service
     */
    enableDeletionProtection?: pulumi.Input<boolean>;
    /**
     * This field specifies whether to enable stop protection for the DB Service. If this is enabled, the stop for the DB
     * Service would be disallowed until this setting is disabled.
     */
    enableStopProtection?: pulumi.Input<boolean>;
    /**
     * This field details the DB Service engine configuration details like - parameter profile, or options profile (if
     * applicable) are used to configure the DB Service.
     */
    engineConfiguration: pulumi.Input<inputs.DbServiceEngineConfiguration>;
    engineType: pulumi.Input<string>;
    /**
     * If provided, invoke the DB Service start/stop API
     */
    expectedStatus?: pulumi.Input<string>;
    /**
     * This field contains DB Service's infrastructure related information, like, where the service is hosted - cloud, region;
     * what compute shape, or network is is configured with.
     */
    infrastructure: pulumi.Input<inputs.DbServiceInfrastructure>;
    /**
     * Instances associated with this DB Service
     */
    instances?: pulumi.Input<pulumi.Input<inputs.DbServiceInstance>[]>;
    /**
     * Integrations to be enabled for the DB Service
     */
    integrationsConfig?: pulumi.Input<inputs.DbServiceIntegrationsConfig>;
    /**
     * This field details the DB Service maintenance related details.
     */
    maintenanceWindow?: pulumi.Input<inputs.DbServiceMaintenanceWindow>;
    /**
     * Name of the DB Service
     */
    name?: pulumi.Input<string>;
    /**
     * Id of the parent AvailabilityMachine, required when creating a clone
     */
    parentAvailabilityMachineId?: pulumi.Input<string>;
    /**
     * PITR Timestamp, using which the clone is to be created
     */
    pitr?: pulumi.Input<string>;
    /**
     * DB Service's connectivity information
     */
    serviceConnectivity: pulumi.Input<inputs.DbServiceServiceConnectivity>;
    /**
     * Tessell Entity ACL Sharing Info
     */
    sharedWith?: pulumi.Input<inputs.DbServiceSharedWith>;
    /**
     * DB Service's snapshot retention configurations. If not specified, the default recommended retention configurations would
     * be applied.
     */
    snapshotConfiguration?: pulumi.Input<inputs.DbServiceSnapshotConfiguration>;
    /**
     * Tessell service snapshot Id, using which the clone is to be created
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Software Image to be used to create the DB Service
     */
    softwareImage: pulumi.Input<string>;
    /**
     * Software Image Version to be used to create the DB Service
     */
    softwareImageVersion: pulumi.Input<string>;
    /**
     * Tessell Subscription in which the DB Service is to be created
     */
    subscription: pulumi.Input<string>;
    /**
     * The tags to be associated with the DB Service
     */
    tags?: pulumi.Input<pulumi.Input<inputs.DbServiceTag>[]>;
    /**
     * If block_until_complete is true, how long it should block for. (In seconds)
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DbServiceTimeouts>;
    topology: pulumi.Input<string>;
}
