// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing DbSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbSnapshotState, opts?: pulumi.CustomResourceOptions): DbSnapshot {
        return new DbSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tessell:index/dbSnapshot:DbSnapshot';

    /**
     * Returns true if the given object is an instance of DbSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbSnapshot.__pulumiType;
    }

    /**
     * The config information for cloud and region availability for this snapshot
     */
    public /*out*/ readonly availabilityConfigs!: pulumi.Output<outputs.DbSnapshotAvailabilityConfig[]>;
    /**
     * Id of the parent AvailabilityMachine, required when creating a clone
     */
    public readonly availabilityMachineId!: pulumi.Output<string | undefined>;
    public readonly backupStatus!: pulumi.Output<string | undefined>;
    /**
     * For any operation on this resource, block the flow until the action has completed successfully
     */
    public readonly blockUntilComplete!: pulumi.Output<boolean | undefined>;
    /**
     * The cloud and region information where this snapshot has been made available at
     */
    public /*out*/ readonly cloudAvailabilities!: pulumi.Output<outputs.DbSnapshotCloudAvailability[]>;
    /**
     * The databases that are captured as part of this snapshot
     */
    public /*out*/ readonly databases!: pulumi.Output<outputs.DbSnapshotDatabase[]>;
    /**
     * Description of the snapshot
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether this snapshot is captured as per manual user request or per automated schedule
     */
    public /*out*/ readonly manual!: pulumi.Output<boolean>;
    /**
     * Name of the snapshot
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Tessell Entity ACL Sharing Summary Info
     */
    public readonly sharedWith!: pulumi.Output<outputs.DbSnapshotSharedWith | undefined>;
    /**
     * Size of this snapshot (in bytes)
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Capture time of the snapshot
     */
    public /*out*/ readonly snapshotTime!: pulumi.Output<string>;
    /**
     * Database Backup Status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * If block_until_complete is true, how long it should block for. (In seconds)
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a DbSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DbSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbSnapshotArgs | DbSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbSnapshotState | undefined;
            resourceInputs["availabilityConfigs"] = state ? state.availabilityConfigs : undefined;
            resourceInputs["availabilityMachineId"] = state ? state.availabilityMachineId : undefined;
            resourceInputs["backupStatus"] = state ? state.backupStatus : undefined;
            resourceInputs["blockUntilComplete"] = state ? state.blockUntilComplete : undefined;
            resourceInputs["cloudAvailabilities"] = state ? state.cloudAvailabilities : undefined;
            resourceInputs["databases"] = state ? state.databases : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["manual"] = state ? state.manual : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sharedWith"] = state ? state.sharedWith : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotTime"] = state ? state.snapshotTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as DbSnapshotArgs | undefined;
            resourceInputs["availabilityMachineId"] = args ? args.availabilityMachineId : undefined;
            resourceInputs["backupStatus"] = args ? args.backupStatus : undefined;
            resourceInputs["blockUntilComplete"] = args ? args.blockUntilComplete : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sharedWith"] = args ? args.sharedWith : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["availabilityConfigs"] = undefined /*out*/;
            resourceInputs["cloudAvailabilities"] = undefined /*out*/;
            resourceInputs["databases"] = undefined /*out*/;
            resourceInputs["manual"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["snapshotTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbSnapshot resources.
 */
export interface DbSnapshotState {
    /**
     * The config information for cloud and region availability for this snapshot
     */
    availabilityConfigs?: pulumi.Input<pulumi.Input<inputs.DbSnapshotAvailabilityConfig>[]>;
    /**
     * Id of the parent AvailabilityMachine, required when creating a clone
     */
    availabilityMachineId?: pulumi.Input<string>;
    backupStatus?: pulumi.Input<string>;
    /**
     * For any operation on this resource, block the flow until the action has completed successfully
     */
    blockUntilComplete?: pulumi.Input<boolean>;
    /**
     * The cloud and region information where this snapshot has been made available at
     */
    cloudAvailabilities?: pulumi.Input<pulumi.Input<inputs.DbSnapshotCloudAvailability>[]>;
    /**
     * The databases that are captured as part of this snapshot
     */
    databases?: pulumi.Input<pulumi.Input<inputs.DbSnapshotDatabase>[]>;
    /**
     * Description of the snapshot
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether this snapshot is captured as per manual user request or per automated schedule
     */
    manual?: pulumi.Input<boolean>;
    /**
     * Name of the snapshot
     */
    name?: pulumi.Input<string>;
    /**
     * Tessell Entity ACL Sharing Summary Info
     */
    sharedWith?: pulumi.Input<inputs.DbSnapshotSharedWith>;
    /**
     * Size of this snapshot (in bytes)
     */
    size?: pulumi.Input<number>;
    /**
     * Capture time of the snapshot
     */
    snapshotTime?: pulumi.Input<string>;
    /**
     * Database Backup Status
     */
    status?: pulumi.Input<string>;
    /**
     * If block_until_complete is true, how long it should block for. (In seconds)
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DbSnapshot resource.
 */
export interface DbSnapshotArgs {
    /**
     * Id of the parent AvailabilityMachine, required when creating a clone
     */
    availabilityMachineId?: pulumi.Input<string>;
    backupStatus?: pulumi.Input<string>;
    /**
     * For any operation on this resource, block the flow until the action has completed successfully
     */
    blockUntilComplete?: pulumi.Input<boolean>;
    /**
     * Description of the snapshot
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the snapshot
     */
    name?: pulumi.Input<string>;
    /**
     * Tessell Entity ACL Sharing Summary Info
     */
    sharedWith?: pulumi.Input<inputs.DbSnapshotSharedWith>;
    /**
     * If block_until_complete is true, how long it should block for. (In seconds)
     */
    timeout?: pulumi.Input<number>;
}
