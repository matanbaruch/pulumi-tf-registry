// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DbServiceArgs, DbServiceState } from "./dbService";
export type DbService = import("./dbService").DbService;
export const DbService: typeof import("./dbService").DbService = null as any;
utilities.lazyLoad(exports, ["DbService"], () => require("./dbService"));

export { DbServiceDeleteScheduleArgs, DbServiceDeleteScheduleState } from "./dbServiceDeleteSchedule";
export type DbServiceDeleteSchedule = import("./dbServiceDeleteSchedule").DbServiceDeleteSchedule;
export const DbServiceDeleteSchedule: typeof import("./dbServiceDeleteSchedule").DbServiceDeleteSchedule = null as any;
utilities.lazyLoad(exports, ["DbServiceDeleteSchedule"], () => require("./dbServiceDeleteSchedule"));

export { DbServiceStartStopScheduleArgs, DbServiceStartStopScheduleState } from "./dbServiceStartStopSchedule";
export type DbServiceStartStopSchedule = import("./dbServiceStartStopSchedule").DbServiceStartStopSchedule;
export const DbServiceStartStopSchedule: typeof import("./dbServiceStartStopSchedule").DbServiceStartStopSchedule = null as any;
utilities.lazyLoad(exports, ["DbServiceStartStopSchedule"], () => require("./dbServiceStartStopSchedule"));

export { DbSnapshotArgs, DbSnapshotState } from "./dbSnapshot";
export type DbSnapshot = import("./dbSnapshot").DbSnapshot;
export const DbSnapshot: typeof import("./dbSnapshot").DbSnapshot = null as any;
utilities.lazyLoad(exports, ["DbSnapshot"], () => require("./dbSnapshot"));

export { GetAvailabilityMachineArgs, GetAvailabilityMachineResult, GetAvailabilityMachineOutputArgs } from "./getAvailabilityMachine";
export const getAvailabilityMachine: typeof import("./getAvailabilityMachine").getAvailabilityMachine = null as any;
export const getAvailabilityMachineOutput: typeof import("./getAvailabilityMachine").getAvailabilityMachineOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityMachine","getAvailabilityMachineOutput"], () => require("./getAvailabilityMachine"));

export { GetAvailabilityMachinesArgs, GetAvailabilityMachinesResult, GetAvailabilityMachinesOutputArgs } from "./getAvailabilityMachines";
export const getAvailabilityMachines: typeof import("./getAvailabilityMachines").getAvailabilityMachines = null as any;
export const getAvailabilityMachinesOutput: typeof import("./getAvailabilityMachines").getAvailabilityMachinesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityMachines","getAvailabilityMachinesOutput"], () => require("./getAvailabilityMachines"));

export { GetDataflixArgs, GetDataflixResult, GetDataflixOutputArgs } from "./getDataflix";
export const getDataflix: typeof import("./getDataflix").getDataflix = null as any;
export const getDataflixOutput: typeof import("./getDataflix").getDataflixOutput = null as any;
utilities.lazyLoad(exports, ["getDataflix","getDataflixOutput"], () => require("./getDataflix"));

export { GetDataflixCatalogArgs, GetDataflixCatalogResult, GetDataflixCatalogOutputArgs } from "./getDataflixCatalog";
export const getDataflixCatalog: typeof import("./getDataflixCatalog").getDataflixCatalog = null as any;
export const getDataflixCatalogOutput: typeof import("./getDataflixCatalog").getDataflixCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getDataflixCatalog","getDataflixCatalogOutput"], () => require("./getDataflixCatalog"));

export { GetDataflixesArgs, GetDataflixesResult, GetDataflixesOutputArgs } from "./getDataflixes";
export const getDataflixes: typeof import("./getDataflixes").getDataflixes = null as any;
export const getDataflixesOutput: typeof import("./getDataflixes").getDataflixesOutput = null as any;
utilities.lazyLoad(exports, ["getDataflixes","getDataflixesOutput"], () => require("./getDataflixes"));

export { GetDbBackupsArgs, GetDbBackupsResult, GetDbBackupsOutputArgs } from "./getDbBackups";
export const getDbBackups: typeof import("./getDbBackups").getDbBackups = null as any;
export const getDbBackupsOutput: typeof import("./getDbBackups").getDbBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getDbBackups","getDbBackupsOutput"], () => require("./getDbBackups"));

export { GetDbParameterProfilesArgs, GetDbParameterProfilesResult, GetDbParameterProfilesOutputArgs } from "./getDbParameterProfiles";
export const getDbParameterProfiles: typeof import("./getDbParameterProfiles").getDbParameterProfiles = null as any;
export const getDbParameterProfilesOutput: typeof import("./getDbParameterProfiles").getDbParameterProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDbParameterProfiles","getDbParameterProfilesOutput"], () => require("./getDbParameterProfiles"));

export { GetDbServiceArgs, GetDbServiceResult, GetDbServiceOutputArgs } from "./getDbService";
export const getDbService: typeof import("./getDbService").getDbService = null as any;
export const getDbServiceOutput: typeof import("./getDbService").getDbServiceOutput = null as any;
utilities.lazyLoad(exports, ["getDbService","getDbServiceOutput"], () => require("./getDbService"));

export { GetDbServiceDeleteScheduleArgs, GetDbServiceDeleteScheduleResult, GetDbServiceDeleteScheduleOutputArgs } from "./getDbServiceDeleteSchedule";
export const getDbServiceDeleteSchedule: typeof import("./getDbServiceDeleteSchedule").getDbServiceDeleteSchedule = null as any;
export const getDbServiceDeleteScheduleOutput: typeof import("./getDbServiceDeleteSchedule").getDbServiceDeleteScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getDbServiceDeleteSchedule","getDbServiceDeleteScheduleOutput"], () => require("./getDbServiceDeleteSchedule"));

export { GetDbServiceStartStopScheduleArgs, GetDbServiceStartStopScheduleResult, GetDbServiceStartStopScheduleOutputArgs } from "./getDbServiceStartStopSchedule";
export const getDbServiceStartStopSchedule: typeof import("./getDbServiceStartStopSchedule").getDbServiceStartStopSchedule = null as any;
export const getDbServiceStartStopScheduleOutput: typeof import("./getDbServiceStartStopSchedule").getDbServiceStartStopScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getDbServiceStartStopSchedule","getDbServiceStartStopScheduleOutput"], () => require("./getDbServiceStartStopSchedule"));

export { GetDbServicesArgs, GetDbServicesResult, GetDbServicesOutputArgs } from "./getDbServices";
export const getDbServices: typeof import("./getDbServices").getDbServices = null as any;
export const getDbServicesOutput: typeof import("./getDbServices").getDbServicesOutput = null as any;
utilities.lazyLoad(exports, ["getDbServices","getDbServicesOutput"], () => require("./getDbServices"));

export { GetDbSnapshotArgs, GetDbSnapshotResult, GetDbSnapshotOutputArgs } from "./getDbSnapshot";
export const getDbSnapshot: typeof import("./getDbSnapshot").getDbSnapshot = null as any;
export const getDbSnapshotOutput: typeof import("./getDbSnapshot").getDbSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getDbSnapshot","getDbSnapshotOutput"], () => require("./getDbSnapshot"));

export { GetDbSnapshotsArgs, GetDbSnapshotsResult, GetDbSnapshotsOutputArgs } from "./getDbSnapshots";
export const getDbSnapshots: typeof import("./getDbSnapshots").getDbSnapshots = null as any;
export const getDbSnapshotsOutput: typeof import("./getDbSnapshots").getDbSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getDbSnapshots","getDbSnapshotsOutput"], () => require("./getDbSnapshots"));

export { GetSanitizedDbSnapshotsArgs, GetSanitizedDbSnapshotsResult, GetSanitizedDbSnapshotsOutputArgs } from "./getSanitizedDbSnapshots";
export const getSanitizedDbSnapshots: typeof import("./getSanitizedDbSnapshots").getSanitizedDbSnapshots = null as any;
export const getSanitizedDbSnapshotsOutput: typeof import("./getSanitizedDbSnapshots").getSanitizedDbSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getSanitizedDbSnapshots","getSanitizedDbSnapshotsOutput"], () => require("./getSanitizedDbSnapshots"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tessell:index/dbService:DbService":
                return new DbService(name, <any>undefined, { urn })
            case "tessell:index/dbServiceDeleteSchedule:DbServiceDeleteSchedule":
                return new DbServiceDeleteSchedule(name, <any>undefined, { urn })
            case "tessell:index/dbServiceStartStopSchedule:DbServiceStartStopSchedule":
                return new DbServiceStartStopSchedule(name, <any>undefined, { urn })
            case "tessell:index/dbSnapshot:DbSnapshot":
                return new DbSnapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tessell", "index/dbService", _module)
pulumi.runtime.registerResourceModule("tessell", "index/dbServiceDeleteSchedule", _module)
pulumi.runtime.registerResourceModule("tessell", "index/dbServiceStartStopSchedule", _module)
pulumi.runtime.registerResourceModule("tessell", "index/dbSnapshot", _module)
pulumi.runtime.registerResourcePackage("tessell", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tessell") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
