// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDbService(args: GetDbServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetDbServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tessell:index/getDbService:getDbService", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDbService.
 */
export interface GetDbServiceArgs {
    id: string;
}

/**
 * A collection of values returned by getDbService.
 */
export interface GetDbServiceResult {
    readonly autoMinorVersionUpdate: boolean;
    readonly availabilityMachineId: string;
    readonly clonedFromInfos: outputs.GetDbServiceClonedFromInfo[];
    readonly contextInfos: outputs.GetDbServiceContextInfo[];
    readonly databases: outputs.GetDbServiceDatabase[];
    readonly dateCreated: string;
    readonly deletionConfigs: outputs.GetDbServiceDeletionConfig[];
    readonly deletionSchedules: outputs.GetDbServiceDeletionSchedule[];
    readonly description: string;
    readonly edition: string;
    readonly enableDeletionProtection: boolean;
    readonly enableStopProtection: boolean;
    readonly engineConfigurations: outputs.GetDbServiceEngineConfiguration[];
    readonly engineType: string;
    readonly id: string;
    readonly infrastructures: outputs.GetDbServiceInfrastructure[];
    readonly instances: outputs.GetDbServiceInstance[];
    readonly integrationsConfigs: outputs.GetDbServiceIntegrationsConfig[];
    readonly licenseType: string;
    readonly loggedInUserRole: string;
    readonly maintenanceWindows: outputs.GetDbServiceMaintenanceWindow[];
    readonly name: string;
    readonly numOfInstances: number;
    readonly owner: string;
    readonly serviceConnectivities: outputs.GetDbServiceServiceConnectivity[];
    readonly sharedWiths: outputs.GetDbServiceSharedWith[];
    readonly softwareImage: string;
    readonly softwareImageVersion: string;
    readonly softwareImageVersionFamily: string;
    readonly startedAt: string;
    readonly status: string;
    readonly stoppedAt: string;
    readonly subscription: string;
    readonly tags: outputs.GetDbServiceTag[];
    readonly tenantId: string;
    readonly tessellGenieStatus: string;
    readonly topology: string;
    readonly upcomingScheduledActions: outputs.GetDbServiceUpcomingScheduledAction[];
    readonly updatesInProgresses: outputs.GetDbServiceUpdatesInProgress[];
}
export function getDbServiceOutput(args: GetDbServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDbServiceResult> {
    return pulumi.output(args).apply((a: any) => getDbService(a, opts))
}

/**
 * A collection of arguments for invoking getDbService.
 */
export interface GetDbServiceOutputArgs {
    id: pulumi.Input<string>;
}
