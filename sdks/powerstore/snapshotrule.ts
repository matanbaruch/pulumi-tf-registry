// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Snapshotrule extends pulumi.CustomResource {
    /**
     * Get an existing Snapshotrule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotruleState, opts?: pulumi.CustomResourceOptions): Snapshotrule {
        return new Snapshotrule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerstore:index/snapshotrule:Snapshotrule';

    /**
     * Returns true if the given object is an instance of Snapshotrule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshotrule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshotrule.__pulumiType;
    }

    /**
     * The days of the week when the snapshot rule should be applied.
     */
    public readonly daysOfWeeks!: pulumi.Output<string[]>;
    /**
     * Specify whether all snapshots previously created by this snapshot rule should also be deleted when this rule is removed.
     */
    public readonly deleteSnaps!: pulumi.Output<boolean | undefined>;
    /**
     * The Desired snapshot retention period in hours to retain snapshots for this time period.
     */
    public readonly desiredRetention!: pulumi.Output<number>;
    /**
     * The interval between snapshots taken by a snapshot rule.
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * Indicates whether this snapshot rule can be modified.
     */
    public readonly isReadOnly!: pulumi.Output<boolean>;
    /**
     * Indicates whether this is a replica of a snapshot rule on a remote system.
     */
    public /*out*/ readonly isReplica!: pulumi.Output<boolean>;
    /**
     * The entity that owns and manages the instance.
     */
    public /*out*/ readonly managedBy!: pulumi.Output<string>;
    /**
     * The unique id of the managing entity.
     */
    public /*out*/ readonly managedById!: pulumi.Output<string>;
    /**
     * The name of the snapshot rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The NAS filesystem snapshot access method for snapshot rule.
     */
    public readonly nasAccessType!: pulumi.Output<string>;
    /**
     * The time of the day to take a daily snapshot, with format hh:mm.
     */
    public readonly timeOfDay!: pulumi.Output<string>;
    /**
     * The time zone identifier for applying the time zone to the time_of_day for a snapshot rule.
     */
    public readonly timezone!: pulumi.Output<string>;

    /**
     * Create a Snapshotrule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotruleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotruleArgs | SnapshotruleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotruleState | undefined;
            resourceInputs["daysOfWeeks"] = state ? state.daysOfWeeks : undefined;
            resourceInputs["deleteSnaps"] = state ? state.deleteSnaps : undefined;
            resourceInputs["desiredRetention"] = state ? state.desiredRetention : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["isReadOnly"] = state ? state.isReadOnly : undefined;
            resourceInputs["isReplica"] = state ? state.isReplica : undefined;
            resourceInputs["managedBy"] = state ? state.managedBy : undefined;
            resourceInputs["managedById"] = state ? state.managedById : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nasAccessType"] = state ? state.nasAccessType : undefined;
            resourceInputs["timeOfDay"] = state ? state.timeOfDay : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
        } else {
            const args = argsOrState as SnapshotruleArgs | undefined;
            if ((!args || args.desiredRetention === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredRetention'");
            }
            resourceInputs["daysOfWeeks"] = args ? args.daysOfWeeks : undefined;
            resourceInputs["deleteSnaps"] = args ? args.deleteSnaps : undefined;
            resourceInputs["desiredRetention"] = args ? args.desiredRetention : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["isReadOnly"] = args ? args.isReadOnly : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nasAccessType"] = args ? args.nasAccessType : undefined;
            resourceInputs["timeOfDay"] = args ? args.timeOfDay : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["isReplica"] = undefined /*out*/;
            resourceInputs["managedBy"] = undefined /*out*/;
            resourceInputs["managedById"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshotrule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Snapshotrule resources.
 */
export interface SnapshotruleState {
    /**
     * The days of the week when the snapshot rule should be applied.
     */
    daysOfWeeks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify whether all snapshots previously created by this snapshot rule should also be deleted when this rule is removed.
     */
    deleteSnaps?: pulumi.Input<boolean>;
    /**
     * The Desired snapshot retention period in hours to retain snapshots for this time period.
     */
    desiredRetention?: pulumi.Input<number>;
    /**
     * The interval between snapshots taken by a snapshot rule.
     */
    interval?: pulumi.Input<string>;
    /**
     * Indicates whether this snapshot rule can be modified.
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * Indicates whether this is a replica of a snapshot rule on a remote system.
     */
    isReplica?: pulumi.Input<boolean>;
    /**
     * The entity that owns and manages the instance.
     */
    managedBy?: pulumi.Input<string>;
    /**
     * The unique id of the managing entity.
     */
    managedById?: pulumi.Input<string>;
    /**
     * The name of the snapshot rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The NAS filesystem snapshot access method for snapshot rule.
     */
    nasAccessType?: pulumi.Input<string>;
    /**
     * The time of the day to take a daily snapshot, with format hh:mm.
     */
    timeOfDay?: pulumi.Input<string>;
    /**
     * The time zone identifier for applying the time zone to the time_of_day for a snapshot rule.
     */
    timezone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshotrule resource.
 */
export interface SnapshotruleArgs {
    /**
     * The days of the week when the snapshot rule should be applied.
     */
    daysOfWeeks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify whether all snapshots previously created by this snapshot rule should also be deleted when this rule is removed.
     */
    deleteSnaps?: pulumi.Input<boolean>;
    /**
     * The Desired snapshot retention period in hours to retain snapshots for this time period.
     */
    desiredRetention: pulumi.Input<number>;
    /**
     * The interval between snapshots taken by a snapshot rule.
     */
    interval?: pulumi.Input<string>;
    /**
     * Indicates whether this snapshot rule can be modified.
     */
    isReadOnly?: pulumi.Input<boolean>;
    /**
     * The name of the snapshot rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The NAS filesystem snapshot access method for snapshot rule.
     */
    nasAccessType?: pulumi.Input<string>;
    /**
     * The time of the day to take a daily snapshot, with format hh:mm.
     */
    timeOfDay?: pulumi.Input<string>;
    /**
     * The time zone identifier for applying the time zone to the time_of_day for a snapshot rule.
     */
    timezone?: pulumi.Input<string>;
}
