// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Volumegroup extends pulumi.CustomResource {
    /**
     * Get an existing Volumegroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumegroupState, opts?: pulumi.CustomResourceOptions): Volumegroup {
        return new Volumegroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerstore:index/volumegroup:Volumegroup';

    /**
     * Returns true if the given object is an instance of Volumegroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volumegroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volumegroup.__pulumiType;
    }

    /**
     * Description for the volume group.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Determines whether snapshot sets of the group will be write order consistent.
     */
    public readonly isWriteOrderConsistent!: pulumi.Output<boolean>;
    /**
     * Name of the volume group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unique identifier of the protection policy assigned to the volume group. Conflicts with `protection_policy_name`.
     */
    public readonly protectionPolicyId!: pulumi.Output<string>;
    /**
     * Unique name of the protection policy assigned to the volume group. Conflicts with `protection_policy_id`.
     */
    public readonly protectionPolicyName!: pulumi.Output<string | undefined>;
    /**
     * A list of identifiers of existing volumes that should be added to the volume group. Conflicts with `volume_names`.
     */
    public readonly volumeIds!: pulumi.Output<string[]>;
    /**
     * A list of names of existing volumes that should be added to the volume group. Conflicts with `volume_ids`.
     */
    public readonly volumeNames!: pulumi.Output<string[]>;

    /**
     * Create a Volumegroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VolumegroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumegroupArgs | VolumegroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumegroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isWriteOrderConsistent"] = state ? state.isWriteOrderConsistent : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protectionPolicyId"] = state ? state.protectionPolicyId : undefined;
            resourceInputs["protectionPolicyName"] = state ? state.protectionPolicyName : undefined;
            resourceInputs["volumeIds"] = state ? state.volumeIds : undefined;
            resourceInputs["volumeNames"] = state ? state.volumeNames : undefined;
        } else {
            const args = argsOrState as VolumegroupArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isWriteOrderConsistent"] = args ? args.isWriteOrderConsistent : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protectionPolicyId"] = args ? args.protectionPolicyId : undefined;
            resourceInputs["protectionPolicyName"] = args ? args.protectionPolicyName : undefined;
            resourceInputs["volumeIds"] = args ? args.volumeIds : undefined;
            resourceInputs["volumeNames"] = args ? args.volumeNames : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volumegroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Volumegroup resources.
 */
export interface VolumegroupState {
    /**
     * Description for the volume group.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether snapshot sets of the group will be write order consistent.
     */
    isWriteOrderConsistent?: pulumi.Input<boolean>;
    /**
     * Name of the volume group.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the protection policy assigned to the volume group. Conflicts with `protection_policy_name`.
     */
    protectionPolicyId?: pulumi.Input<string>;
    /**
     * Unique name of the protection policy assigned to the volume group. Conflicts with `protection_policy_id`.
     */
    protectionPolicyName?: pulumi.Input<string>;
    /**
     * A list of identifiers of existing volumes that should be added to the volume group. Conflicts with `volume_names`.
     */
    volumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of names of existing volumes that should be added to the volume group. Conflicts with `volume_ids`.
     */
    volumeNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Volumegroup resource.
 */
export interface VolumegroupArgs {
    /**
     * Description for the volume group.
     */
    description?: pulumi.Input<string>;
    /**
     * Determines whether snapshot sets of the group will be write order consistent.
     */
    isWriteOrderConsistent?: pulumi.Input<boolean>;
    /**
     * Name of the volume group.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique identifier of the protection policy assigned to the volume group. Conflicts with `protection_policy_name`.
     */
    protectionPolicyId?: pulumi.Input<string>;
    /**
     * Unique name of the protection policy assigned to the volume group. Conflicts with `protection_policy_id`.
     */
    protectionPolicyName?: pulumi.Input<string>;
    /**
     * A list of identifiers of existing volumes that should be added to the volume group. Conflicts with `volume_names`.
     */
    volumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of names of existing volumes that should be added to the volume group. Conflicts with `volume_ids`.
     */
    volumeNames?: pulumi.Input<pulumi.Input<string>[]>;
}
