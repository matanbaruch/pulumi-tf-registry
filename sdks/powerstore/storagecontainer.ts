// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Storagecontainer extends pulumi.CustomResource {
    /**
     * Get an existing Storagecontainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StoragecontainerState, opts?: pulumi.CustomResourceOptions): Storagecontainer {
        return new Storagecontainer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerstore:index/storagecontainer:Storagecontainer';

    /**
     * Returns true if the given object is an instance of Storagecontainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Storagecontainer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Storagecontainer.__pulumiType;
    }

    /**
     * The percentage of the quota that can be consumed before an alert is raised
     */
    public readonly highWaterMark!: pulumi.Output<number>;
    /**
     * Name for the storage container. This should be unique across all storage containers in the cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The total number of bytes that can be provisioned/reserved against this storage container. A value of 0 means there is
     * no limit.
     */
    public readonly quota!: pulumi.Output<number>;
    /**
     * The storage protocol of Storage Container. eg: SCSI, NVMe
     */
    public readonly storageProtocol!: pulumi.Output<string>;

    /**
     * Create a Storagecontainer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StoragecontainerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StoragecontainerArgs | StoragecontainerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StoragecontainerState | undefined;
            resourceInputs["highWaterMark"] = state ? state.highWaterMark : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
            resourceInputs["storageProtocol"] = state ? state.storageProtocol : undefined;
        } else {
            const args = argsOrState as StoragecontainerArgs | undefined;
            resourceInputs["highWaterMark"] = args ? args.highWaterMark : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["storageProtocol"] = args ? args.storageProtocol : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Storagecontainer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Storagecontainer resources.
 */
export interface StoragecontainerState {
    /**
     * The percentage of the quota that can be consumed before an alert is raised
     */
    highWaterMark?: pulumi.Input<number>;
    /**
     * Name for the storage container. This should be unique across all storage containers in the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The total number of bytes that can be provisioned/reserved against this storage container. A value of 0 means there is
     * no limit.
     */
    quota?: pulumi.Input<number>;
    /**
     * The storage protocol of Storage Container. eg: SCSI, NVMe
     */
    storageProtocol?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Storagecontainer resource.
 */
export interface StoragecontainerArgs {
    /**
     * The percentage of the quota that can be consumed before an alert is raised
     */
    highWaterMark?: pulumi.Input<number>;
    /**
     * Name for the storage container. This should be unique across all storage containers in the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The total number of bytes that can be provisioned/reserved against this storage container. A value of 0 means there is
     * no limit.
     */
    quota?: pulumi.Input<number>;
    /**
     * The storage protocol of Storage Container. eg: SCSI, NVMe
     */
    storageProtocol?: pulumi.Input<string>;
}
