// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetHostArgs, GetHostResult, GetHostOutputArgs } from "./getHost";
export const getHost: typeof import("./getHost").getHost = null as any;
export const getHostOutput: typeof import("./getHost").getHostOutput = null as any;
utilities.lazyLoad(exports, ["getHost","getHostOutput"], () => require("./getHost"));

export { GetHostgroupArgs, GetHostgroupResult, GetHostgroupOutputArgs } from "./getHostgroup";
export const getHostgroup: typeof import("./getHostgroup").getHostgroup = null as any;
export const getHostgroupOutput: typeof import("./getHostgroup").getHostgroupOutput = null as any;
utilities.lazyLoad(exports, ["getHostgroup","getHostgroupOutput"], () => require("./getHostgroup"));

export { GetProtectionpolicyArgs, GetProtectionpolicyResult, GetProtectionpolicyOutputArgs } from "./getProtectionpolicy";
export const getProtectionpolicy: typeof import("./getProtectionpolicy").getProtectionpolicy = null as any;
export const getProtectionpolicyOutput: typeof import("./getProtectionpolicy").getProtectionpolicyOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionpolicy","getProtectionpolicyOutput"], () => require("./getProtectionpolicy"));

export { GetSnapshotruleArgs, GetSnapshotruleResult, GetSnapshotruleOutputArgs } from "./getSnapshotrule";
export const getSnapshotrule: typeof import("./getSnapshotrule").getSnapshotrule = null as any;
export const getSnapshotruleOutput: typeof import("./getSnapshotrule").getSnapshotruleOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotrule","getSnapshotruleOutput"], () => require("./getSnapshotrule"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { GetVolumeSnapshotArgs, GetVolumeSnapshotResult, GetVolumeSnapshotOutputArgs } from "./getVolumeSnapshot";
export const getVolumeSnapshot: typeof import("./getVolumeSnapshot").getVolumeSnapshot = null as any;
export const getVolumeSnapshotOutput: typeof import("./getVolumeSnapshot").getVolumeSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getVolumeSnapshot","getVolumeSnapshotOutput"], () => require("./getVolumeSnapshot"));

export { GetVolumegroupArgs, GetVolumegroupResult, GetVolumegroupOutputArgs } from "./getVolumegroup";
export const getVolumegroup: typeof import("./getVolumegroup").getVolumegroup = null as any;
export const getVolumegroupOutput: typeof import("./getVolumegroup").getVolumegroupOutput = null as any;
utilities.lazyLoad(exports, ["getVolumegroup","getVolumegroupOutput"], () => require("./getVolumegroup"));

export { GetVolumegroupSnapshotArgs, GetVolumegroupSnapshotResult, GetVolumegroupSnapshotOutputArgs } from "./getVolumegroupSnapshot";
export const getVolumegroupSnapshot: typeof import("./getVolumegroupSnapshot").getVolumegroupSnapshot = null as any;
export const getVolumegroupSnapshotOutput: typeof import("./getVolumegroupSnapshot").getVolumegroupSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getVolumegroupSnapshot","getVolumegroupSnapshotOutput"], () => require("./getVolumegroupSnapshot"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostgroupArgs, HostgroupState } from "./hostgroup";
export type Hostgroup = import("./hostgroup").Hostgroup;
export const Hostgroup: typeof import("./hostgroup").Hostgroup = null as any;
utilities.lazyLoad(exports, ["Hostgroup"], () => require("./hostgroup"));

export { ProtectionpolicyArgs, ProtectionpolicyState } from "./protectionpolicy";
export type Protectionpolicy = import("./protectionpolicy").Protectionpolicy;
export const Protectionpolicy: typeof import("./protectionpolicy").Protectionpolicy = null as any;
utilities.lazyLoad(exports, ["Protectionpolicy"], () => require("./protectionpolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SnapshotruleArgs, SnapshotruleState } from "./snapshotrule";
export type Snapshotrule = import("./snapshotrule").Snapshotrule;
export const Snapshotrule: typeof import("./snapshotrule").Snapshotrule = null as any;
utilities.lazyLoad(exports, ["Snapshotrule"], () => require("./snapshotrule"));

export { StoragecontainerArgs, StoragecontainerState } from "./storagecontainer";
export type Storagecontainer = import("./storagecontainer").Storagecontainer;
export const Storagecontainer: typeof import("./storagecontainer").Storagecontainer = null as any;
utilities.lazyLoad(exports, ["Storagecontainer"], () => require("./storagecontainer"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumeSnapshotArgs, VolumeSnapshotState } from "./volumeSnapshot";
export type VolumeSnapshot = import("./volumeSnapshot").VolumeSnapshot;
export const VolumeSnapshot: typeof import("./volumeSnapshot").VolumeSnapshot = null as any;
utilities.lazyLoad(exports, ["VolumeSnapshot"], () => require("./volumeSnapshot"));

export { VolumegroupArgs, VolumegroupState } from "./volumegroup";
export type Volumegroup = import("./volumegroup").Volumegroup;
export const Volumegroup: typeof import("./volumegroup").Volumegroup = null as any;
utilities.lazyLoad(exports, ["Volumegroup"], () => require("./volumegroup"));

export { VolumegroupSnapshotArgs, VolumegroupSnapshotState } from "./volumegroupSnapshot";
export type VolumegroupSnapshot = import("./volumegroupSnapshot").VolumegroupSnapshot;
export const VolumegroupSnapshot: typeof import("./volumegroupSnapshot").VolumegroupSnapshot = null as any;
utilities.lazyLoad(exports, ["VolumegroupSnapshot"], () => require("./volumegroupSnapshot"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "powerstore:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "powerstore:index/hostgroup:Hostgroup":
                return new Hostgroup(name, <any>undefined, { urn })
            case "powerstore:index/protectionpolicy:Protectionpolicy":
                return new Protectionpolicy(name, <any>undefined, { urn })
            case "powerstore:index/snapshotrule:Snapshotrule":
                return new Snapshotrule(name, <any>undefined, { urn })
            case "powerstore:index/storagecontainer:Storagecontainer":
                return new Storagecontainer(name, <any>undefined, { urn })
            case "powerstore:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "powerstore:index/volumeSnapshot:VolumeSnapshot":
                return new VolumeSnapshot(name, <any>undefined, { urn })
            case "powerstore:index/volumegroup:Volumegroup":
                return new Volumegroup(name, <any>undefined, { urn })
            case "powerstore:index/volumegroupSnapshot:VolumegroupSnapshot":
                return new VolumegroupSnapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("powerstore", "index/host", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/hostgroup", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/protectionpolicy", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/snapshotrule", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/storagecontainer", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/volume", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/volumeSnapshot", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/volumegroup", _module)
pulumi.runtime.registerResourceModule("powerstore", "index/volumegroupSnapshot", _module)
pulumi.runtime.registerResourcePackage("powerstore", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:powerstore") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
