// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetHostHost {
    /**
     * Description of the host.
     */
    description: string;
    /**
     * Connectivity type for hosts.
     */
    hostConnectivity: string;
    /**
     * Localized message string corresponding to host connectivity.
     */
    hostConnectivityL10n: string;
    /**
     * Associated host group, if host is part of host group.
     */
    hostGroupId: string;
    /**
     * Virtual volume mapping details.
     */
    hostVirtualVolumeMappings: outputs.GetHostHostHostVirtualVolumeMapping[];
    /**
     * The ID of the host.
     */
    id: string;
    /**
     * Details about an import host system.
     */
    importHostSystem: outputs.GetHostHostImportHostSystem;
    /**
     * Initiator instance.
     */
    initiators: outputs.GetHostHostInitiator[];
    /**
     * Details about a configured host or host group attached to a volume.
     */
    mappedHosts: outputs.GetHostHostMappedHost[];
    /**
     * Name of the host.
     */
    name: string;
    /**
     * Operating system of the host.
     */
    osType: string;
    /**
     * Localized message string corresponding to OS type.
     */
    osTypeL10n: string;
    /**
     * Type of hosts.
     */
    type: string;
    /**
     * Localized message string corresponding to type
     */
    typeL10n: string;
    /**
     * List of the vsphere hosts that are associated with this host.
     */
    vsphereHosts: outputs.GetHostHostVsphereHost[];
}

export interface GetHostHostHostVirtualVolumeMapping {
    /**
     * Unique identifier of a host attached to a virtual volume.
     */
    hostId: string;
    /**
     * Unique identifier of a mapping between a host and a virtual volume.
     */
    id: string;
    /**
     * Unique identifier of the virtual volume to which the host is attached.
     */
    virtualVolumeId: string;
}

export interface GetHostHostImportHostSystem {
    agentAddress: string;
    id: string;
}

export interface GetHostHostInitiator {
    /**
     * Username for CHAP authentication.
     */
    chapMutualUsername: string;
    /**
     * Username for CHAP authentication.
     */
    chapSingleUsername: string;
    /**
     * The port name, one of: IQN, WWN, or NQN..
     */
    portName: string;
    /**
     * Protocol type of the host initiator.
     */
    portType: string;
}

export interface GetHostHostMappedHost {
    /**
     * Unique identifier of a host attached to a volume.
     */
    hostId: string;
    /**
     * Unique identifier of a mapping between a host and a volume.
     */
    id: string;
    /**
     * Unique identifier of the volume to which the host is attached.
     */
    volumeId: string;
}

export interface GetHostHostVsphereHost {
    /**
     * Unique identifier of the vsphere_host instance.
     */
    id: string;
    /**
     * User-assigned name of the ESXi host in vCenter.
     */
    name: string;
}

export interface GetHostgroupHostGroup {
    /**
     * Host group description.
     */
    description: string;
    /**
     * Connectivity type for hosts and host groups.
     */
    hostConnectivity: string;
    /**
     * Localized message string corresponding to host_connectivity
     */
    hostConnectivityL10n: string;
    /**
     * Virtual volume mapping details.
     */
    hostVirtualVolumeMappings: outputs.GetHostgroupHostGroupHostVirtualVolumeMapping[];
    /**
     * Properties of a host.
     */
    hosts: outputs.GetHostgroupHostGroupHost[];
    /**
     * Unique identifier of the host group.
     */
    id: string;
    /**
     * Details about a configured host or host group attached to a volume.
     */
    mappedHostGroups: outputs.GetHostgroupHostGroupMappedHostGroup[];
    /**
     * Host group name.
     */
    name: string;
}

export interface GetHostgroupHostGroupHost {
    /**
     * A description for the host.
     */
    description: string;
    /**
     * Unique identifier of the host.
     */
    id: string;
    /**
     * The host name.
     */
    name: string;
}

export interface GetHostgroupHostGroupHostVirtualVolumeMapping {
    /**
     * Unique identifier of a host attached to a volume.
     */
    hostId: string;
    /**
     * Unique identifier of a mapping between a host and a virtual volume.
     */
    id: string;
    /**
     * Unique identifier of the virtual volume to which the host is attached.
     */
    virtualVolumeId: string;
    /**
     * Name of the virtual volume to which the host is attached.
     */
    virtualVolumeName: string;
}

export interface GetHostgroupHostGroupMappedHostGroup {
    /**
     * Unique identifier of a host attached to a volume.
     */
    hostId: string;
    /**
     * Unique identifier of a mapping between a host and a volume.
     */
    id: string;
    /**
     * Unique identifier of the volume to which the host is attached.
     */
    volumeId: string;
    /**
     * Name of the volume to which the host is attached.
     */
    volumeName: string;
}

export interface GetProtectionpolicyPolicy {
    /**
     * Protection policy description.
     */
    description: string;
    /**
     * Specifies the virtual volumes associated with a protection policy.
     */
    fileSystems: outputs.GetProtectionpolicyPolicyFileSystem[];
    /**
     * Unique identifier of the protection policy.
     */
    id: string;
    /**
     * Indicates whether this protection policy can be modified.
     */
    isReadOnly: boolean;
    /**
     * Indicates if this is a replica of a protection policy on a remote system
     */
    isReplica: boolean;
    /**
     * Entity that owns and manages this instance.
     */
    managedBy: string;
    /**
     * Unique identifier of the managing entity based on the value of the managed_by property
     */
    managedById: string;
    /**
     * Localized message string corresponding to managed_by
     */
    managedByL10n: string;
    /**
     * Protection policy name.
     */
    name: string;
    /**
     * Specifies the performance rule associated with a protection policy.
     */
    performanceRules: outputs.GetProtectionpolicyPolicyPerformanceRule[];
    /**
     * Specifies the replication rule associated with a protection policy.
     */
    replicationRules: outputs.GetProtectionpolicyPolicyReplicationRule[];
    /**
     * Specifies the snapshot rule associated with a protection policy.
     */
    snapshotRules: outputs.GetProtectionpolicyPolicySnapshotRule[];
    /**
     * Type of the protection policy.
     */
    type: string;
    /**
     * Localized message string corresponding to type
     */
    typeL10n: string;
    /**
     * Specifies the virtual machines associated with a protection policy.
     */
    virtualMachines: outputs.GetProtectionpolicyPolicyVirtualMachine[];
    /**
     * Specifies the volume group associated with a protection policy.
     */
    volumeGroups: outputs.GetProtectionpolicyPolicyVolumeGroup[];
    /**
     * Specifies the volumes associated with a protection policy.
     */
    volumes: outputs.GetProtectionpolicyPolicyVolume[];
}

export interface GetProtectionpolicyPolicyFileSystem {
    /**
     * Description of the file system.
     */
    description: string;
    /**
     * Unique identifier of the file system.
     */
    id: string;
    /**
     * Name of the file system.
     */
    name: string;
}

export interface GetProtectionpolicyPolicyPerformanceRule {
    /**
     * Unique identifier representing a performance rule.
     */
    id: string;
    /**
     * The I/O priority for quality of service rules.
     */
    ioPriority: string;
    /**
     * Name of the performance rule.
     */
    name: string;
}

export interface GetProtectionpolicyPolicyReplicationRule {
    /**
     * Unique identifier of the replication rule.
     */
    id: string;
    /**
     * Name of the replication rule.
     */
    name: string;
}

export interface GetProtectionpolicyPolicySnapshotRule {
    /**
     * Unique identifier of the snapshot rule.
     */
    id: string;
    /**
     * Snapshot rule name.
     */
    name: string;
}

export interface GetProtectionpolicyPolicyVirtualMachine {
    /**
     * The unique identifier of the virtual machine.
     */
    id: string;
    /**
     * UUID instance of the VM in vCenter.
     */
    instanceUuid: string;
    /**
     * User-assigned name of the VM in vCenter.
     */
    name: string;
}

export interface GetProtectionpolicyPolicyVolume {
    /**
     * Description of the volume.
     */
    description: string;
    /**
     * Unique identifier of the volume instance.
     */
    id: string;
    /**
     * The name of the volume
     */
    name: string;
}

export interface GetProtectionpolicyPolicyVolumeGroup {
    /**
     * Description for the volume group.
     */
    description: string;
    /**
     * The unique identifier of the volume group.
     */
    id: string;
    /**
     * Name of the volume group.
     */
    name: string;
}

export interface GetSnapshotruleSnapshotRule {
    /**
     * Localized message array corresponding to days_of_week
     */
    daysOfWeekL10ns: string[];
    /**
     * The days of the week when the snapshot rule should be applied.
     */
    daysOfWeeks: string[];
    /**
     * The Desired snapshot retention period in hours to retain snapshots for this time period.
     */
    desiredRetention: number;
    /**
     * The ID of the snapshot rule.
     */
    id: string;
    /**
     * The interval of the snapshot rule.
     */
    interval: string;
    /**
     * Localized message string corresponding to interval
     */
    intervalL10n: string;
    /**
     * Indicates whether this snapshot rule can be modified.
     */
    isReadOnly: boolean;
    /**
     * Indicates whether this is a replica of a snapshot rule on a remote system.
     */
    isReplica: boolean;
    /**
     * The entity that owns and manages the instance.
     */
    managedBy: string;
    /**
     * The unique id of the managing entity.
     */
    managedById: string;
    /**
     * Localized message string corresponding to managed_by.
     */
    managedByL10n: string;
    /**
     * Name of the snapshot rule.
     */
    name: string;
    /**
     * The NAS filesystem snapshot access method for snapshot rule.
     */
    nasAccessType: string;
    /**
     * Localized message string corresponding to nas_access_type.
     */
    nasAccessTypeL10n: string;
    /**
     * List of the protection policies that are associated with the snapshot_rule..
     */
    policies: outputs.GetSnapshotruleSnapshotRulePolicy[];
    /**
     * The time of the day to take a daily snapshot, with format hh:mm.
     */
    timeOfDay: string;
    /**
     * The time zone identifier for applying the time zone to the time_of_day for a snapshot rule.
     */
    timezone: string;
    /**
     * Localized message string corresponding to timezone.
     */
    timezoneL10n: string;
}

export interface GetSnapshotruleSnapshotRulePolicy {
    /**
     * Description of the protection policy.
     */
    description: string;
    /**
     * Unique identifier of the protection policy.
     */
    id: string;
    /**
     * Name of the protection policy.
     */
    name: string;
}

export interface GetVolumeSnapshotVolume {
    /**
     * The app type of the volume.
     */
    appType: string;
    /**
     * Localized message string corresponding to app type
     */
    appTypeL10n: string;
    /**
     * The app type other of the volume.
     */
    appTypeOther: string;
    /**
     * Specifies the Appliance associated for a volume.
     */
    appliance: outputs.GetVolumeSnapshotVolumeAppliance;
    /**
     * Unique identifier of the appliance on which the volume is provisioned.
     */
    applianceId: string;
    /**
     * The Capacity Unit corresponding to the size.
     */
    capacityUnit: string;
    /**
     * The creation timestamp of the volume.
     */
    creationTimestamp: string;
    /**
     * Specifies the Datastores for a volume.
     */
    datastores: outputs.GetVolumeSnapshotVolumeDatastore[];
    /**
     * The description of the volume snapshot.
     */
    description: string;
    /**
     * The host group id of the volume.
     */
    hostGroupId: string;
    /**
     * The host id of the volume.
     */
    hostId: string;
    /**
     * The ID of the volume snapshot.
     */
    id: string;
    /**
     * Indicates whether the volume is available to host
     */
    isHostAccessAvailable: boolean;
    /**
     * Indicates whether this volume is a replication destination.
     */
    isReplicationDestination: boolean;
    /**
     * Specifies the LocationHistory for a volume.
     */
    locationHistories: outputs.GetVolumeSnapshotVolumeLocationHistory[];
    /**
     * The current amount of data written to the volume
     */
    logicalUnitNumber: number;
    /**
     * Current amount of data used by the volume.
     */
    logicalUsed: number;
    /**
     * Specifies the MappedVolumes associated with a volume.
     */
    mappedVolumes: outputs.GetVolumeSnapshotVolumeMappedVolume[];
    /**
     * Unique identifier of the replication session assigned to the volume
     */
    metroReplicationSessionId: string;
    /**
     * Specifies the MigrationSession associated for a volume.
     */
    migrationSession: outputs.GetVolumeSnapshotVolumeMigrationSession;
    /**
     * Unique identifier of the migration session assigned to the volume
     */
    migrationSessionId: string;
    /**
     * Name of the volume snapshot.
     */
    name: string;
    /**
     * The nguid of the volume.
     */
    nguid: string;
    /**
     * The node affinity of the volume.
     */
    nodeAffinity: string;
    /**
     * Localized message string corresponding to node affinity
     */
    nodeAffinityL10n: string;
    /**
     * The nsid of the volume.
     */
    nsid: number;
    /**
     * The performance policy assigned to the volume snapshot.
     */
    performancePolicyId: string;
    /**
     * Specifies the ProtectionData associated with a volume.
     */
    protectionData: outputs.GetVolumeSnapshotVolumeProtectionData;
    /**
     * Specifies the protection policy associated for a volume.
     */
    protectionPolicy: outputs.GetVolumeSnapshotVolumeProtectionPolicy;
    /**
     * The protection policy assigned to the volume.
     */
    protectionPolicyId: string;
    /**
     * The size of the volume.
     */
    size: number;
    /**
     * The state of the volume.
     */
    state: string;
    /**
     * Localized message string corresponding to state
     */
    stateL10n: string;
    /**
     * The type of the volume.
     */
    type: string;
    /**
     * Localized message string corresponding to type
     */
    typeL10n: string;
    /**
     * The volume group id of the volume.
     */
    volumeGroupId: string;
    /**
     * Specifies the VolumeGroup for a volume.
     */
    volumeGroups: outputs.GetVolumeSnapshotVolumeVolumeGroup[];
    /**
     * The wwn of the volume.
     */
    wwn: string;
}

export interface GetVolumeSnapshotVolumeAppliance {
    id: string;
    name: string;
    serviceTag: string;
}

export interface GetVolumeSnapshotVolumeDatastore {
    /**
     * Unique identifier of the datastore instance.
     */
    id: string;
    /**
     * UUID instance of the datastore in vCenter.
     */
    instanceUuid: string;
    /**
     * User-assigned name of the datastore in vCenter.
     */
    name: string;
}

export interface GetVolumeSnapshotVolumeLocationHistory {
    /**
     * Unique identifier of the appliance from which the volume was relocated.
     */
    fromApplianceId: string;
    /**
     * Time when the storage resource location changed.
     */
    migratedOn: string;
    /**
     * Unique identifier of the appliance to which the volume was relocated.
     */
    toApplianceId: string;
}

export interface GetVolumeSnapshotVolumeMappedVolume {
    /**
     * Unique identifier of a mapping between a host and a volume.
     */
    id: string;
}

export interface GetVolumeSnapshotVolumeMigrationSession {
    id: string;
    name: string;
}

export interface GetVolumeSnapshotVolumeProtectionData {
    creatorType: string;
    expirationTimestamp: string;
    sourceId: string;
}

export interface GetVolumeSnapshotVolumeProtectionPolicy {
    description: string;
    id: string;
    name: string;
}

export interface GetVolumeSnapshotVolumeVolumeGroup {
    /**
     * Description for the volume group.
     */
    description: string;
    /**
     * Unique identifier of the volume group.
     */
    id: string;
    /**
     * Name of the volume group.
     */
    name: string;
}

export interface GetVolumeVolume {
    /**
     * The app type of the volume.
     */
    appType: string;
    /**
     * Localized message string corresponding to app type
     */
    appTypeL10n: string;
    /**
     * The app type other of the volume.
     */
    appTypeOther: string;
    /**
     * Specifies the Appliance associated for a volume.
     */
    appliance: outputs.GetVolumeVolumeAppliance;
    /**
     * Unique identifier of the appliance on which the volume is provisioned.
     */
    applianceId: string;
    /**
     * The Capacity Unit corresponding to the size.
     */
    capacityUnit: string;
    /**
     * The creation timestamp of the volume.
     */
    creationTimestamp: string;
    /**
     * Specifies the Datastores for a volume.
     */
    datastores: outputs.GetVolumeVolumeDatastore[];
    /**
     * The description of the volume.
     */
    description: string;
    /**
     * The host group id of the volume.
     */
    hostGroupId: string;
    /**
     * The host id of the volume.
     */
    hostId: string;
    /**
     * The ID of the volume.
     */
    id: string;
    /**
     * Indicates whether the volume is available to host
     */
    isHostAccessAvailable: boolean;
    /**
     * Indicates whether this volume is a replication destination.
     */
    isReplicationDestination: boolean;
    /**
     * Specifies the LocationHistory for a volume.
     */
    locationHistories: outputs.GetVolumeVolumeLocationHistory[];
    /**
     * The current amount of data written to the volume
     */
    logicalUnitNumber: number;
    /**
     * Current amount of data used by the volume.
     */
    logicalUsed: number;
    /**
     * Specifies the MappedVolumes associated with a volume.
     */
    mappedVolumes: outputs.GetVolumeVolumeMappedVolume[];
    /**
     * Unique identifier of the replication session assigned to the volume
     */
    metroReplicationSessionId: string;
    /**
     * Specifies the MigrationSession associated for a volume.
     */
    migrationSession: outputs.GetVolumeVolumeMigrationSession;
    /**
     * Unique identifier of the migration session assigned to the volume
     */
    migrationSessionId: string;
    /**
     * Name of the volume.
     */
    name: string;
    /**
     * The nguid of the volume.
     */
    nguid: string;
    /**
     * The node affinity of the volume.
     */
    nodeAffinity: string;
    /**
     * Localized message string corresponding to node affinity
     */
    nodeAffinityL10n: string;
    /**
     * The nsid of the volume.
     */
    nsid: number;
    /**
     * The performance policy assigned to the volume.
     */
    performancePolicyId: string;
    /**
     * Specifies the ProtectionData associated with a volume.
     */
    protectionData: outputs.GetVolumeVolumeProtectionData;
    /**
     * Specifies the protection policy associated for a volume.
     */
    protectionPolicy: outputs.GetVolumeVolumeProtectionPolicy;
    /**
     * The protection policy assigned to the volume.
     */
    protectionPolicyId: string;
    /**
     * The size of the volume.
     */
    size: number;
    /**
     * The state of the volume.
     */
    state: string;
    /**
     * Localized message string corresponding to state
     */
    stateL10n: string;
    /**
     * The type of the volume.
     */
    type: string;
    /**
     * Localized message string corresponding to type
     */
    typeL10n: string;
    /**
     * The volume group id of the volume.
     */
    volumeGroupId: string;
    /**
     * Specifies the VolumeGroup for a volume.
     */
    volumeGroups: outputs.GetVolumeVolumeVolumeGroup[];
    /**
     * The wwn of the volume.
     */
    wwn: string;
}

export interface GetVolumeVolumeAppliance {
    id: string;
    name: string;
    serviceTag: string;
}

export interface GetVolumeVolumeDatastore {
    /**
     * Unique identifier of the datastore instance.
     */
    id: string;
    /**
     * UUID instance of the datastore in vCenter.
     */
    instanceUuid: string;
    /**
     * User-assigned name of the datastore in vCenter.
     */
    name: string;
}

export interface GetVolumeVolumeLocationHistory {
    /**
     * Unique identifier of the appliance from which the volume was relocated.
     */
    fromApplianceId: string;
    /**
     * Time when the storage resource location changed.
     */
    migratedOn: string;
    /**
     * Unique identifier of the appliance to which the volume was relocated.
     */
    toApplianceId: string;
}

export interface GetVolumeVolumeMappedVolume {
    /**
     * Unique identifier of a mapping between a host and a volume.
     */
    id: string;
}

export interface GetVolumeVolumeMigrationSession {
    id: string;
    name: string;
}

export interface GetVolumeVolumeProtectionData {
    creatorType: string;
    expirationTimestamp: string;
    sourceId: string;
}

export interface GetVolumeVolumeProtectionPolicy {
    description: string;
    id: string;
    name: string;
}

export interface GetVolumeVolumeVolumeGroup {
    /**
     * Description for the volume group.
     */
    description: string;
    /**
     * Unique identifier of the volume group.
     */
    id: string;
    /**
     * Name of the volume group.
     */
    name: string;
}

export interface GetVolumegroupSnapshotVolumeGroup {
    /**
     * The time at which the volume group was created.
     */
    creationTimestamp: string;
    /**
     * Volume group snapshot description.
     */
    description: string;
    /**
     * Unique identifier of the volume group snapshot.
     */
    id: string;
    /**
     * Indicates whether the volume group is being imported.
     */
    isImporting: boolean;
    /**
     * This is a derived field that is set internally.
     */
    isProtectable: boolean;
    /**
     * Indicates whether this volume group is a replication destination.
     */
    isReplicationDestination: boolean;
    /**
     * For a primary or a clone volume group, this property determines whether snapshot sets of the group will be write order consistent.
     */
    isWriteOrderConsistent: boolean;
    /**
     * Storage resource location history.
     */
    locationHistories: outputs.GetVolumegroupSnapshotVolumeGroupLocationHistory[];
    /**
     * Properties of a migration session.
     */
    migrationSession: outputs.GetVolumegroupSnapshotVolumeGroupMigrationSession;
    /**
     * Unique identifier of the migration session assigned to the volume group when it is part of a migration activity.
     */
    migrationSessionId: string;
    /**
     * Volume group snapshot name.
     */
    name: string;
    /**
     * This is set during creation, and determines resource balancer recommendations.
     */
    placementRule: string;
    /**
     * Specifies the ProtectionData associated with a volume group.
     */
    protectionData: outputs.GetVolumegroupSnapshotVolumeGroupProtectionData;
    /**
     * Specifies the Protection Policy associated with a volume group.
     */
    protectionPolicy: outputs.GetVolumegroupSnapshotVolumeGroupProtectionPolicy;
    /**
     * Unique identifier of the protection policy assigned to the volume group.
     */
    protectionPolicyId: string;
    /**
     * Type of volume.
     */
    type: string;
    /**
     * Localized message string corresponding to type
     */
    typeL10n: string;
    /**
     * List of the volumes that are associated with this volume_group.
     */
    volumes: outputs.GetVolumegroupSnapshotVolumeGroupVolume[];
}

export interface GetVolumegroupSnapshotVolumeGroupLocationHistory {
    /**
     * Unique identifier of the appliance from which the volume was relocated.
     */
    fromApplianceId: string;
    /**
     * Unique identifier of the appliance to which the volume was relocated.
     */
    toApplianceId: string;
}

export interface GetVolumegroupSnapshotVolumeGroupMigrationSession {
    id: string;
    name: string;
}

export interface GetVolumegroupSnapshotVolumeGroupProtectionData {
    creatorType: string;
    expirationTimestamp: string;
    sourceId: string;
}

export interface GetVolumegroupSnapshotVolumeGroupProtectionPolicy {
    description: string;
    id: string;
    name: string;
}

export interface GetVolumegroupSnapshotVolumeGroupVolume {
    /**
     * Description of the volume.
     */
    description: string;
    /**
     * Unique identifier of the volume instance.
     */
    id: string;
    /**
     * Name of the volume.
     */
    name: string;
}

export interface GetVolumegroupVolumeGroup {
    /**
     * The time at which the volume group was created.
     */
    creationTimestamp: string;
    /**
     * Volume group description.
     */
    description: string;
    /**
     * Unique identifier of the volume group.
     */
    id: string;
    /**
     * Indicates whether the volume group is being imported.
     */
    isImporting: boolean;
    /**
     * This is a derived field that is set internally.
     */
    isProtectable: boolean;
    /**
     * Indicates whether this volume group is a replication destination.
     */
    isReplicationDestination: boolean;
    /**
     * For a primary or a clone volume group, this property determines whether snapshot sets of the group will be write order consistent.
     */
    isWriteOrderConsistent: boolean;
    /**
     * Storage resource location history.
     */
    locationHistories: outputs.GetVolumegroupVolumeGroupLocationHistory[];
    /**
     * Properties of a migration session.
     */
    migrationSession: outputs.GetVolumegroupVolumeGroupMigrationSession;
    /**
     * Unique identifier of the migration session assigned to the volume group when it is part of a migration activity.
     */
    migrationSessionId: string;
    /**
     * Volume group name.
     */
    name: string;
    /**
     * This is set during creation, and determines resource balancer recommendations.
     */
    placementRule: string;
    /**
     * Specifies the ProtectionData associated with a volume group.
     */
    protectionData: outputs.GetVolumegroupVolumeGroupProtectionData;
    /**
     * Specifies the Protection Policy associated with a volume group.
     */
    protectionPolicy: outputs.GetVolumegroupVolumeGroupProtectionPolicy;
    /**
     * Unique identifier of the protection policy assigned to the volume group.
     */
    protectionPolicyId: string;
    /**
     * Type of volume.
     */
    type: string;
    /**
     * Localized message string corresponding to type
     */
    typeL10n: string;
    /**
     * List of the volumes that are associated with this volume_group.
     */
    volumes: outputs.GetVolumegroupVolumeGroupVolume[];
}

export interface GetVolumegroupVolumeGroupLocationHistory {
    /**
     * Unique identifier of the appliance from which the volume was relocated.
     */
    fromApplianceId: string;
    /**
     * Unique identifier of the appliance to which the volume was relocated.
     */
    toApplianceId: string;
}

export interface GetVolumegroupVolumeGroupMigrationSession {
    id: string;
    name: string;
}

export interface GetVolumegroupVolumeGroupProtectionData {
    creatorType: string;
    expirationTimestamp: string;
    sourceId: string;
}

export interface GetVolumegroupVolumeGroupProtectionPolicy {
    description: string;
    id: string;
    name: string;
}

export interface GetVolumegroupVolumeGroupVolume {
    /**
     * Description of the volume.
     */
    description: string;
    /**
     * Unique identifier of the volume instance.
     */
    id: string;
    /**
     * Name of the volume.
     */
    name: string;
}

export interface HostInitiator {
    /**
     * Password for CHAP authentication. This value must be 12 to 64 UTF-8 characters. This password cannot be queried. CHAP password is required when the cluster CHAP mode is mutual authentication.
     */
    chapMutualPassword?: string;
    /**
     * Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is mutual authentication.
     */
    chapMutualUsername?: string;
    /**
     * Password for CHAP authentication. This value must be 12 to 64 UTF-8 characters. This password cannot be queried. CHAP password is required when the cluster CHAP mode is single authentication.
     */
    chapSinglePassword?: string;
    /**
     * Username for CHAP authentication. This value must be 1 to 64 UTF-8 characters. CHAP username is required when the cluster CHAP mode is single authentication.
     */
    chapSingleUsername?: string;
    /**
     * IQN name aka address or NQN name for NVMEoF port types.
     */
    portName: string;
    /**
     * Protocol type of the host initiator.
     */
    portType: string;
}

