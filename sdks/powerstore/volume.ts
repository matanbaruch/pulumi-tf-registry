// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerstore:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The app type of the volume.
     */
    public readonly appType!: pulumi.Output<string>;
    /**
     * The app type other of the volume.
     */
    public readonly appTypeOther!: pulumi.Output<string>;
    /**
     * The appliance_id of the volume.
     */
    public readonly applianceId!: pulumi.Output<string>;
    /**
     * The appliance name of the volume.
     */
    public readonly applianceName!: pulumi.Output<string | undefined>;
    /**
     * The Capacity Unit corresponding to the size.
     */
    public readonly capacityUnit!: pulumi.Output<string>;
    /**
     * The creation_timestamp of the volume.
     */
    public /*out*/ readonly creationTimestamp!: pulumi.Output<string>;
    /**
     * The description of the volume.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The host group id of the volume.
     */
    public readonly hostGroupId!: pulumi.Output<string>;
    /**
     * The host group name of the volume.
     */
    public readonly hostGroupName!: pulumi.Output<string | undefined>;
    /**
     * The host id of the volume.
     */
    public readonly hostId!: pulumi.Output<string>;
    /**
     * The host name of the volume.
     */
    public readonly hostName!: pulumi.Output<string | undefined>;
    /**
     * The is_replication_destination of the volume.
     */
    public /*out*/ readonly isReplicationDestination!: pulumi.Output<boolean>;
    /**
     * The current amount of data written to the volume.
     */
    public readonly logicalUnitNumber!: pulumi.Output<number>;
    /**
     * Current amount of data used by the volume.
     */
    public /*out*/ readonly logicalUsed!: pulumi.Output<number>;
    /**
     * The minimum size of the volume.
     */
    public readonly minSize!: pulumi.Output<number | undefined>;
    /**
     * The name of the volume.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The nguid of the volume.
     */
    public /*out*/ readonly nguid!: pulumi.Output<string>;
    /**
     * The node_affinity of the volume.
     */
    public /*out*/ readonly nodeAffinity!: pulumi.Output<string>;
    /**
     * The nsid of the volume.
     */
    public /*out*/ readonly nsid!: pulumi.Output<number>;
    /**
     * The performance_policy_id of the volume.
     */
    public readonly performancePolicyId!: pulumi.Output<string>;
    /**
     * The protection_policy_id of the volume.
     */
    public readonly protectionPolicyId!: pulumi.Output<string>;
    /**
     * The protection policy name of the volume.
     */
    public readonly protectionPolicyName!: pulumi.Output<string | undefined>;
    /**
     * The sector size of the volume.
     */
    public readonly sectorSize!: pulumi.Output<number>;
    /**
     * The size of the volume.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The state of the volume.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The type of the volume.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The volume group id of the volume.
     */
    public readonly volumeGroupId!: pulumi.Output<string>;
    /**
     * The volume group name of the volume.
     */
    public readonly volumeGroupName!: pulumi.Output<string | undefined>;
    /**
     * The wwn of the volume.
     */
    public /*out*/ readonly wwn!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["appType"] = state ? state.appType : undefined;
            resourceInputs["appTypeOther"] = state ? state.appTypeOther : undefined;
            resourceInputs["applianceId"] = state ? state.applianceId : undefined;
            resourceInputs["applianceName"] = state ? state.applianceName : undefined;
            resourceInputs["capacityUnit"] = state ? state.capacityUnit : undefined;
            resourceInputs["creationTimestamp"] = state ? state.creationTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostGroupId"] = state ? state.hostGroupId : undefined;
            resourceInputs["hostGroupName"] = state ? state.hostGroupName : undefined;
            resourceInputs["hostId"] = state ? state.hostId : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["isReplicationDestination"] = state ? state.isReplicationDestination : undefined;
            resourceInputs["logicalUnitNumber"] = state ? state.logicalUnitNumber : undefined;
            resourceInputs["logicalUsed"] = state ? state.logicalUsed : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nguid"] = state ? state.nguid : undefined;
            resourceInputs["nodeAffinity"] = state ? state.nodeAffinity : undefined;
            resourceInputs["nsid"] = state ? state.nsid : undefined;
            resourceInputs["performancePolicyId"] = state ? state.performancePolicyId : undefined;
            resourceInputs["protectionPolicyId"] = state ? state.protectionPolicyId : undefined;
            resourceInputs["protectionPolicyName"] = state ? state.protectionPolicyName : undefined;
            resourceInputs["sectorSize"] = state ? state.sectorSize : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["volumeGroupId"] = state ? state.volumeGroupId : undefined;
            resourceInputs["volumeGroupName"] = state ? state.volumeGroupName : undefined;
            resourceInputs["wwn"] = state ? state.wwn : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["appType"] = args ? args.appType : undefined;
            resourceInputs["appTypeOther"] = args ? args.appTypeOther : undefined;
            resourceInputs["applianceId"] = args ? args.applianceId : undefined;
            resourceInputs["applianceName"] = args ? args.applianceName : undefined;
            resourceInputs["capacityUnit"] = args ? args.capacityUnit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hostGroupId"] = args ? args.hostGroupId : undefined;
            resourceInputs["hostGroupName"] = args ? args.hostGroupName : undefined;
            resourceInputs["hostId"] = args ? args.hostId : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["logicalUnitNumber"] = args ? args.logicalUnitNumber : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["performancePolicyId"] = args ? args.performancePolicyId : undefined;
            resourceInputs["protectionPolicyId"] = args ? args.protectionPolicyId : undefined;
            resourceInputs["protectionPolicyName"] = args ? args.protectionPolicyName : undefined;
            resourceInputs["sectorSize"] = args ? args.sectorSize : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["volumeGroupId"] = args ? args.volumeGroupId : undefined;
            resourceInputs["volumeGroupName"] = args ? args.volumeGroupName : undefined;
            resourceInputs["creationTimestamp"] = undefined /*out*/;
            resourceInputs["isReplicationDestination"] = undefined /*out*/;
            resourceInputs["logicalUsed"] = undefined /*out*/;
            resourceInputs["nguid"] = undefined /*out*/;
            resourceInputs["nodeAffinity"] = undefined /*out*/;
            resourceInputs["nsid"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["wwn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The app type of the volume.
     */
    appType?: pulumi.Input<string>;
    /**
     * The app type other of the volume.
     */
    appTypeOther?: pulumi.Input<string>;
    /**
     * The appliance_id of the volume.
     */
    applianceId?: pulumi.Input<string>;
    /**
     * The appliance name of the volume.
     */
    applianceName?: pulumi.Input<string>;
    /**
     * The Capacity Unit corresponding to the size.
     */
    capacityUnit?: pulumi.Input<string>;
    /**
     * The creation_timestamp of the volume.
     */
    creationTimestamp?: pulumi.Input<string>;
    /**
     * The description of the volume.
     */
    description?: pulumi.Input<string>;
    /**
     * The host group id of the volume.
     */
    hostGroupId?: pulumi.Input<string>;
    /**
     * The host group name of the volume.
     */
    hostGroupName?: pulumi.Input<string>;
    /**
     * The host id of the volume.
     */
    hostId?: pulumi.Input<string>;
    /**
     * The host name of the volume.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The is_replication_destination of the volume.
     */
    isReplicationDestination?: pulumi.Input<boolean>;
    /**
     * The current amount of data written to the volume.
     */
    logicalUnitNumber?: pulumi.Input<number>;
    /**
     * Current amount of data used by the volume.
     */
    logicalUsed?: pulumi.Input<number>;
    /**
     * The minimum size of the volume.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The nguid of the volume.
     */
    nguid?: pulumi.Input<string>;
    /**
     * The node_affinity of the volume.
     */
    nodeAffinity?: pulumi.Input<string>;
    /**
     * The nsid of the volume.
     */
    nsid?: pulumi.Input<number>;
    /**
     * The performance_policy_id of the volume.
     */
    performancePolicyId?: pulumi.Input<string>;
    /**
     * The protection_policy_id of the volume.
     */
    protectionPolicyId?: pulumi.Input<string>;
    /**
     * The protection policy name of the volume.
     */
    protectionPolicyName?: pulumi.Input<string>;
    /**
     * The sector size of the volume.
     */
    sectorSize?: pulumi.Input<number>;
    /**
     * The size of the volume.
     */
    size?: pulumi.Input<number>;
    /**
     * The state of the volume.
     */
    state?: pulumi.Input<string>;
    /**
     * The type of the volume.
     */
    type?: pulumi.Input<string>;
    /**
     * The volume group id of the volume.
     */
    volumeGroupId?: pulumi.Input<string>;
    /**
     * The volume group name of the volume.
     */
    volumeGroupName?: pulumi.Input<string>;
    /**
     * The wwn of the volume.
     */
    wwn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The app type of the volume.
     */
    appType?: pulumi.Input<string>;
    /**
     * The app type other of the volume.
     */
    appTypeOther?: pulumi.Input<string>;
    /**
     * The appliance_id of the volume.
     */
    applianceId?: pulumi.Input<string>;
    /**
     * The appliance name of the volume.
     */
    applianceName?: pulumi.Input<string>;
    /**
     * The Capacity Unit corresponding to the size.
     */
    capacityUnit?: pulumi.Input<string>;
    /**
     * The description of the volume.
     */
    description?: pulumi.Input<string>;
    /**
     * The host group id of the volume.
     */
    hostGroupId?: pulumi.Input<string>;
    /**
     * The host group name of the volume.
     */
    hostGroupName?: pulumi.Input<string>;
    /**
     * The host id of the volume.
     */
    hostId?: pulumi.Input<string>;
    /**
     * The host name of the volume.
     */
    hostName?: pulumi.Input<string>;
    /**
     * The current amount of data written to the volume.
     */
    logicalUnitNumber?: pulumi.Input<number>;
    /**
     * The minimum size of the volume.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The name of the volume.
     */
    name?: pulumi.Input<string>;
    /**
     * The performance_policy_id of the volume.
     */
    performancePolicyId?: pulumi.Input<string>;
    /**
     * The protection_policy_id of the volume.
     */
    protectionPolicyId?: pulumi.Input<string>;
    /**
     * The protection policy name of the volume.
     */
    protectionPolicyName?: pulumi.Input<string>;
    /**
     * The sector size of the volume.
     */
    sectorSize?: pulumi.Input<number>;
    /**
     * The size of the volume.
     */
    size: pulumi.Input<number>;
    /**
     * The volume group id of the volume.
     */
    volumeGroupId?: pulumi.Input<string>;
    /**
     * The volume group name of the volume.
     */
    volumeGroupName?: pulumi.Input<string>;
}
