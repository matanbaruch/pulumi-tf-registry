// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VolumegroupSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing VolumegroupSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumegroupSnapshotState, opts?: pulumi.CustomResourceOptions): VolumegroupSnapshot {
        return new VolumegroupSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'powerstore:index/volumegroupSnapshot:VolumegroupSnapshot';

    /**
     * Returns true if the given object is an instance of VolumegroupSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumegroupSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumegroupSnapshot.__pulumiType;
    }

    /**
     * Description of the volume group snapshot.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Expiration Timestamp of the volume group snapshot.Only UTC (+Z) format is allowed
     */
    public readonly expirationTimestamp!: pulumi.Output<string>;
    /**
     * Name of the volume group snapshot.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the volume group to take snapshot. Conflicts with `volume_group_name`. Cannot be updated.
     */
    public readonly volumeGroupId!: pulumi.Output<string>;
    /**
     * Name of the volume group to take snapshot. Conflicts with `volume_group_id`. Cannot be updated.
     */
    public readonly volumeGroupName!: pulumi.Output<string | undefined>;

    /**
     * Create a VolumegroupSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VolumegroupSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumegroupSnapshotArgs | VolumegroupSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumegroupSnapshotState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expirationTimestamp"] = state ? state.expirationTimestamp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["volumeGroupId"] = state ? state.volumeGroupId : undefined;
            resourceInputs["volumeGroupName"] = state ? state.volumeGroupName : undefined;
        } else {
            const args = argsOrState as VolumegroupSnapshotArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expirationTimestamp"] = args ? args.expirationTimestamp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["volumeGroupId"] = args ? args.volumeGroupId : undefined;
            resourceInputs["volumeGroupName"] = args ? args.volumeGroupName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumegroupSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VolumegroupSnapshot resources.
 */
export interface VolumegroupSnapshotState {
    /**
     * Description of the volume group snapshot.
     */
    description?: pulumi.Input<string>;
    /**
     * Expiration Timestamp of the volume group snapshot.Only UTC (+Z) format is allowed
     */
    expirationTimestamp?: pulumi.Input<string>;
    /**
     * Name of the volume group snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the volume group to take snapshot. Conflicts with `volume_group_name`. Cannot be updated.
     */
    volumeGroupId?: pulumi.Input<string>;
    /**
     * Name of the volume group to take snapshot. Conflicts with `volume_group_id`. Cannot be updated.
     */
    volumeGroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumegroupSnapshot resource.
 */
export interface VolumegroupSnapshotArgs {
    /**
     * Description of the volume group snapshot.
     */
    description?: pulumi.Input<string>;
    /**
     * Expiration Timestamp of the volume group snapshot.Only UTC (+Z) format is allowed
     */
    expirationTimestamp?: pulumi.Input<string>;
    /**
     * Name of the volume group snapshot.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the volume group to take snapshot. Conflicts with `volume_group_name`. Cannot be updated.
     */
    volumeGroupId?: pulumi.Input<string>;
    /**
     * Name of the volume group to take snapshot. Conflicts with `volume_group_id`. Cannot be updated.
     */
    volumeGroupName?: pulumi.Input<string>;
}
