// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInstance(args?: GetInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getInstance:getInstance", {
        "filters": args.filters,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInstance.
 */
export interface GetInstanceArgs {
    filters?: inputs.GetInstanceFilter[];
    id?: string;
}

/**
 * A collection of values returned by getInstance.
 */
export interface GetInstanceResult {
    readonly allowedBandwidth: number;
    readonly appId: number;
    readonly backups: string;
    readonly backupsSchedule: {[key: string]: string};
    readonly dateCreated: string;
    readonly disk: number;
    readonly features: string[];
    readonly filters?: outputs.GetInstanceFilter[];
    readonly firewallGroupId: string;
    readonly gatewayV4: string;
    readonly hostname: string;
    readonly id: string;
    readonly imageId: string;
    readonly internalIp: string;
    readonly kvm: string;
    readonly label: string;
    readonly location: string;
    readonly mainIp: string;
    readonly netmaskV4: string;
    readonly os: string;
    readonly osId: number;
    readonly plan: string;
    readonly powerStatus: string;
    readonly ram: number;
    readonly region: string;
    readonly serverStatus: string;
    readonly status: string;
    readonly tags: string[];
    readonly v6MainIp: string;
    readonly v6Network: string;
    readonly v6NetworkSize: number;
    readonly vcpuCount: number;
    readonly vpc2Ids: string[];
    readonly vpcIds: string[];
}
export function getInstanceOutput(args?: GetInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceResult> {
    return pulumi.output(args).apply((a: any) => getInstance(a, opts))
}

/**
 * A collection of arguments for invoking getInstance.
 */
export interface GetInstanceOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetInstanceFilterArgs>[]>;
    id?: pulumi.Input<string>;
}
