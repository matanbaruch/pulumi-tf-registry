// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vultr:index/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    public readonly activationEmail!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly allowedBandwidth!: pulumi.Output<number>;
    public readonly appId!: pulumi.Output<number>;
    public readonly appVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly backups!: pulumi.Output<string | undefined>;
    public readonly backupsSchedule!: pulumi.Output<outputs.InstanceBackupsSchedule | undefined>;
    public /*out*/ readonly dateCreated!: pulumi.Output<string>;
    public readonly ddosProtection!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly defaultPassword!: pulumi.Output<string>;
    /**
     * Don't set up a public IPv4 address when IPv6 is enabled. Will not do anything unless enable_ipv6 is also true.
     */
    public readonly disablePublicIpv4!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly disk!: pulumi.Output<number>;
    public readonly enableIpv6!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly features!: pulumi.Output<string[]>;
    public readonly firewallGroupId!: pulumi.Output<string>;
    public /*out*/ readonly gatewayV4!: pulumi.Output<string>;
    /**
     * The hostname of the instance. Updating the hostname will cause a force new. This behavior is in place to prevent
     * accidental reinstalls. Issuing an update to the hostname on UI or API issues a reinstall of the OS.
     */
    public readonly hostname!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string>;
    public /*out*/ readonly internalIp!: pulumi.Output<string>;
    public readonly isoId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly kvm!: pulumi.Output<string>;
    public readonly label!: pulumi.Output<string>;
    public /*out*/ readonly mainIp!: pulumi.Output<string>;
    public /*out*/ readonly netmaskV4!: pulumi.Output<string>;
    public /*out*/ readonly os!: pulumi.Output<string>;
    public readonly osId!: pulumi.Output<number>;
    public readonly plan!: pulumi.Output<string>;
    public /*out*/ readonly powerStatus!: pulumi.Output<string>;
    public /*out*/ readonly ram!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly reservedIpId!: pulumi.Output<string>;
    public readonly scriptId!: pulumi.Output<string>;
    public /*out*/ readonly serverStatus!: pulumi.Output<string>;
    public readonly snapshotId!: pulumi.Output<string>;
    public readonly sshKeyIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceTimeouts | undefined>;
    public readonly userData!: pulumi.Output<string>;
    public /*out*/ readonly v6MainIp!: pulumi.Output<string>;
    public /*out*/ readonly v6Network!: pulumi.Output<string>;
    public /*out*/ readonly v6NetworkSize!: pulumi.Output<number>;
    public /*out*/ readonly vcpuCount!: pulumi.Output<number>;
    public readonly vpc2Ids!: pulumi.Output<string[] | undefined>;
    public readonly vpcIds!: pulumi.Output<string[]>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["activationEmail"] = state ? state.activationEmail : undefined;
            resourceInputs["allowedBandwidth"] = state ? state.allowedBandwidth : undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["appVariables"] = state ? state.appVariables : undefined;
            resourceInputs["backups"] = state ? state.backups : undefined;
            resourceInputs["backupsSchedule"] = state ? state.backupsSchedule : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["ddosProtection"] = state ? state.ddosProtection : undefined;
            resourceInputs["defaultPassword"] = state ? state.defaultPassword : undefined;
            resourceInputs["disablePublicIpv4"] = state ? state.disablePublicIpv4 : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["firewallGroupId"] = state ? state.firewallGroupId : undefined;
            resourceInputs["gatewayV4"] = state ? state.gatewayV4 : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["internalIp"] = state ? state.internalIp : undefined;
            resourceInputs["isoId"] = state ? state.isoId : undefined;
            resourceInputs["kvm"] = state ? state.kvm : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["mainIp"] = state ? state.mainIp : undefined;
            resourceInputs["netmaskV4"] = state ? state.netmaskV4 : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["osId"] = state ? state.osId : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["powerStatus"] = state ? state.powerStatus : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["reservedIpId"] = state ? state.reservedIpId : undefined;
            resourceInputs["scriptId"] = state ? state.scriptId : undefined;
            resourceInputs["serverStatus"] = state ? state.serverStatus : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["sshKeyIds"] = state ? state.sshKeyIds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["v6MainIp"] = state ? state.v6MainIp : undefined;
            resourceInputs["v6Network"] = state ? state.v6Network : undefined;
            resourceInputs["v6NetworkSize"] = state ? state.v6NetworkSize : undefined;
            resourceInputs["vcpuCount"] = state ? state.vcpuCount : undefined;
            resourceInputs["vpc2Ids"] = state ? state.vpc2Ids : undefined;
            resourceInputs["vpcIds"] = state ? state.vpcIds : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["activationEmail"] = args ? args.activationEmail : undefined;
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["appVariables"] = args ? args.appVariables : undefined;
            resourceInputs["backups"] = args ? args.backups : undefined;
            resourceInputs["backupsSchedule"] = args ? args.backupsSchedule : undefined;
            resourceInputs["ddosProtection"] = args ? args.ddosProtection : undefined;
            resourceInputs["disablePublicIpv4"] = args ? args.disablePublicIpv4 : undefined;
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["firewallGroupId"] = args ? args.firewallGroupId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["isoId"] = args ? args.isoId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["osId"] = args ? args.osId : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["reservedIpId"] = args ? args.reservedIpId : undefined;
            resourceInputs["scriptId"] = args ? args.scriptId : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["sshKeyIds"] = args ? args.sshKeyIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["vpc2Ids"] = args ? args.vpc2Ids : undefined;
            resourceInputs["vpcIds"] = args ? args.vpcIds : undefined;
            resourceInputs["allowedBandwidth"] = undefined /*out*/;
            resourceInputs["dateCreated"] = undefined /*out*/;
            resourceInputs["defaultPassword"] = undefined /*out*/;
            resourceInputs["disk"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["gatewayV4"] = undefined /*out*/;
            resourceInputs["internalIp"] = undefined /*out*/;
            resourceInputs["kvm"] = undefined /*out*/;
            resourceInputs["mainIp"] = undefined /*out*/;
            resourceInputs["netmaskV4"] = undefined /*out*/;
            resourceInputs["os"] = undefined /*out*/;
            resourceInputs["powerStatus"] = undefined /*out*/;
            resourceInputs["ram"] = undefined /*out*/;
            resourceInputs["serverStatus"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["v6MainIp"] = undefined /*out*/;
            resourceInputs["v6Network"] = undefined /*out*/;
            resourceInputs["v6NetworkSize"] = undefined /*out*/;
            resourceInputs["vcpuCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["defaultPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    activationEmail?: pulumi.Input<boolean>;
    allowedBandwidth?: pulumi.Input<number>;
    appId?: pulumi.Input<number>;
    appVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    backups?: pulumi.Input<string>;
    backupsSchedule?: pulumi.Input<inputs.InstanceBackupsSchedule>;
    dateCreated?: pulumi.Input<string>;
    ddosProtection?: pulumi.Input<boolean>;
    defaultPassword?: pulumi.Input<string>;
    /**
     * Don't set up a public IPv4 address when IPv6 is enabled. Will not do anything unless enable_ipv6 is also true.
     */
    disablePublicIpv4?: pulumi.Input<boolean>;
    disk?: pulumi.Input<number>;
    enableIpv6?: pulumi.Input<boolean>;
    features?: pulumi.Input<pulumi.Input<string>[]>;
    firewallGroupId?: pulumi.Input<string>;
    gatewayV4?: pulumi.Input<string>;
    /**
     * The hostname of the instance. Updating the hostname will cause a force new. This behavior is in place to prevent
     * accidental reinstalls. Issuing an update to the hostname on UI or API issues a reinstall of the OS.
     */
    hostname?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    internalIp?: pulumi.Input<string>;
    isoId?: pulumi.Input<string>;
    kvm?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    mainIp?: pulumi.Input<string>;
    netmaskV4?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    osId?: pulumi.Input<number>;
    plan?: pulumi.Input<string>;
    powerStatus?: pulumi.Input<string>;
    ram?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    reservedIpId?: pulumi.Input<string>;
    scriptId?: pulumi.Input<string>;
    serverStatus?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    sshKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceTimeouts>;
    userData?: pulumi.Input<string>;
    v6MainIp?: pulumi.Input<string>;
    v6Network?: pulumi.Input<string>;
    v6NetworkSize?: pulumi.Input<number>;
    vcpuCount?: pulumi.Input<number>;
    vpc2Ids?: pulumi.Input<pulumi.Input<string>[]>;
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    activationEmail?: pulumi.Input<boolean>;
    appId?: pulumi.Input<number>;
    appVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    backups?: pulumi.Input<string>;
    backupsSchedule?: pulumi.Input<inputs.InstanceBackupsSchedule>;
    ddosProtection?: pulumi.Input<boolean>;
    /**
     * Don't set up a public IPv4 address when IPv6 is enabled. Will not do anything unless enable_ipv6 is also true.
     */
    disablePublicIpv4?: pulumi.Input<boolean>;
    enableIpv6?: pulumi.Input<boolean>;
    firewallGroupId?: pulumi.Input<string>;
    /**
     * The hostname of the instance. Updating the hostname will cause a force new. This behavior is in place to prevent
     * accidental reinstalls. Issuing an update to the hostname on UI or API issues a reinstall of the OS.
     */
    hostname?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    isoId?: pulumi.Input<string>;
    label?: pulumi.Input<string>;
    osId?: pulumi.Input<number>;
    plan: pulumi.Input<string>;
    region: pulumi.Input<string>;
    reservedIpId?: pulumi.Input<string>;
    scriptId?: pulumi.Input<string>;
    snapshotId?: pulumi.Input<string>;
    sshKeyIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceTimeouts>;
    userData?: pulumi.Input<string>;
    vpc2Ids?: pulumi.Input<pulumi.Input<string>[]>;
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}
