// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBlockStorage(args?: GetBlockStorageArgs, opts?: pulumi.InvokeOptions): Promise<GetBlockStorageResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vultr:index/getBlockStorage:getBlockStorage", {
        "filters": args.filters,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBlockStorage.
 */
export interface GetBlockStorageArgs {
    filters?: inputs.GetBlockStorageFilter[];
    id?: string;
}

/**
 * A collection of values returned by getBlockStorage.
 */
export interface GetBlockStorageResult {
    readonly attachedToInstance: string;
    readonly blockType: string;
    readonly cost: number;
    readonly dateCreated: string;
    readonly filters?: outputs.GetBlockStorageFilter[];
    readonly id: string;
    readonly label: string;
    readonly mountId: string;
    readonly region: string;
    readonly sizeGb: number;
    readonly status: string;
}
export function getBlockStorageOutput(args?: GetBlockStorageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBlockStorageResult> {
    return pulumi.output(args).apply((a: any) => getBlockStorage(a, opts))
}

/**
 * A collection of arguments for invoking getBlockStorage.
 */
export interface GetBlockStorageOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetBlockStorageFilterArgs>[]>;
    id?: pulumi.Input<string>;
}
