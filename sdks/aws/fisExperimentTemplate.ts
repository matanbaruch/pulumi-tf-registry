// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FisExperimentTemplate extends pulumi.CustomResource {
    /**
     * Get an existing FisExperimentTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FisExperimentTemplateState, opts?: pulumi.CustomResourceOptions): FisExperimentTemplate {
        return new FisExperimentTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/fisExperimentTemplate:FisExperimentTemplate';

    /**
     * Returns true if the given object is an instance of FisExperimentTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FisExperimentTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FisExperimentTemplate.__pulumiType;
    }

    public readonly actions!: pulumi.Output<outputs.FisExperimentTemplateAction[]>;
    public readonly description!: pulumi.Output<string>;
    public readonly experimentOptions!: pulumi.Output<outputs.FisExperimentTemplateExperimentOptions | undefined>;
    public readonly logConfiguration!: pulumi.Output<outputs.FisExperimentTemplateLogConfiguration | undefined>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly stopConditions!: pulumi.Output<outputs.FisExperimentTemplateStopCondition[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly targets!: pulumi.Output<outputs.FisExperimentTemplateTarget[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.FisExperimentTemplateTimeouts | undefined>;

    /**
     * Create a FisExperimentTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FisExperimentTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FisExperimentTemplateArgs | FisExperimentTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FisExperimentTemplateState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["experimentOptions"] = state ? state.experimentOptions : undefined;
            resourceInputs["logConfiguration"] = state ? state.logConfiguration : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["stopConditions"] = state ? state.stopConditions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FisExperimentTemplateArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.stopConditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stopConditions'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["experimentOptions"] = args ? args.experimentOptions : undefined;
            resourceInputs["logConfiguration"] = args ? args.logConfiguration : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["stopConditions"] = args ? args.stopConditions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FisExperimentTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FisExperimentTemplate resources.
 */
export interface FisExperimentTemplateState {
    actions?: pulumi.Input<pulumi.Input<inputs.FisExperimentTemplateAction>[]>;
    description?: pulumi.Input<string>;
    experimentOptions?: pulumi.Input<inputs.FisExperimentTemplateExperimentOptions>;
    logConfiguration?: pulumi.Input<inputs.FisExperimentTemplateLogConfiguration>;
    roleArn?: pulumi.Input<string>;
    stopConditions?: pulumi.Input<pulumi.Input<inputs.FisExperimentTemplateStopCondition>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targets?: pulumi.Input<pulumi.Input<inputs.FisExperimentTemplateTarget>[]>;
    timeouts?: pulumi.Input<inputs.FisExperimentTemplateTimeouts>;
}

/**
 * The set of arguments for constructing a FisExperimentTemplate resource.
 */
export interface FisExperimentTemplateArgs {
    actions: pulumi.Input<pulumi.Input<inputs.FisExperimentTemplateAction>[]>;
    description: pulumi.Input<string>;
    experimentOptions?: pulumi.Input<inputs.FisExperimentTemplateExperimentOptions>;
    logConfiguration?: pulumi.Input<inputs.FisExperimentTemplateLogConfiguration>;
    roleArn: pulumi.Input<string>;
    stopConditions: pulumi.Input<pulumi.Input<inputs.FisExperimentTemplateStopCondition>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targets?: pulumi.Input<pulumi.Input<inputs.FisExperimentTemplateTarget>[]>;
    timeouts?: pulumi.Input<inputs.FisExperimentTemplateTimeouts>;
}
