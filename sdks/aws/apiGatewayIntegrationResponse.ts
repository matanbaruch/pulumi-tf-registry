// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApiGatewayIntegrationResponse extends pulumi.CustomResource {
    /**
     * Get an existing ApiGatewayIntegrationResponse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGatewayIntegrationResponseState, opts?: pulumi.CustomResourceOptions): ApiGatewayIntegrationResponse {
        return new ApiGatewayIntegrationResponse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/apiGatewayIntegrationResponse:ApiGatewayIntegrationResponse';

    /**
     * Returns true if the given object is an instance of ApiGatewayIntegrationResponse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGatewayIntegrationResponse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGatewayIntegrationResponse.__pulumiType;
    }

    public readonly contentHandling!: pulumi.Output<string | undefined>;
    public readonly httpMethod!: pulumi.Output<string>;
    public readonly resourceId!: pulumi.Output<string>;
    public readonly responseParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly responseTemplates!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly restApiId!: pulumi.Output<string>;
    public readonly selectionPattern!: pulumi.Output<string | undefined>;
    public readonly statusCode!: pulumi.Output<string>;

    /**
     * Create a ApiGatewayIntegrationResponse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGatewayIntegrationResponseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGatewayIntegrationResponseArgs | ApiGatewayIntegrationResponseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGatewayIntegrationResponseState | undefined;
            resourceInputs["contentHandling"] = state ? state.contentHandling : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["responseParameters"] = state ? state.responseParameters : undefined;
            resourceInputs["responseTemplates"] = state ? state.responseTemplates : undefined;
            resourceInputs["restApiId"] = state ? state.restApiId : undefined;
            resourceInputs["selectionPattern"] = state ? state.selectionPattern : undefined;
            resourceInputs["statusCode"] = state ? state.statusCode : undefined;
        } else {
            const args = argsOrState as ApiGatewayIntegrationResponseArgs | undefined;
            if ((!args || args.httpMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpMethod'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.restApiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restApiId'");
            }
            if ((!args || args.statusCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statusCode'");
            }
            resourceInputs["contentHandling"] = args ? args.contentHandling : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["responseParameters"] = args ? args.responseParameters : undefined;
            resourceInputs["responseTemplates"] = args ? args.responseTemplates : undefined;
            resourceInputs["restApiId"] = args ? args.restApiId : undefined;
            resourceInputs["selectionPattern"] = args ? args.selectionPattern : undefined;
            resourceInputs["statusCode"] = args ? args.statusCode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGatewayIntegrationResponse.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiGatewayIntegrationResponse resources.
 */
export interface ApiGatewayIntegrationResponseState {
    contentHandling?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    responseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    responseTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    restApiId?: pulumi.Input<string>;
    selectionPattern?: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiGatewayIntegrationResponse resource.
 */
export interface ApiGatewayIntegrationResponseArgs {
    contentHandling?: pulumi.Input<string>;
    httpMethod: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
    responseParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    responseTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    restApiId: pulumi.Input<string>;
    selectionPattern?: pulumi.Input<string>;
    statusCode: pulumi.Input<string>;
}
