// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lexv2modelsSlotType extends pulumi.CustomResource {
    /**
     * Get an existing Lexv2modelsSlotType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Lexv2modelsSlotTypeState, opts?: pulumi.CustomResourceOptions): Lexv2modelsSlotType {
        return new Lexv2modelsSlotType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lexv2modelsSlotType:Lexv2modelsSlotType';

    /**
     * Returns true if the given object is an instance of Lexv2modelsSlotType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lexv2modelsSlotType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lexv2modelsSlotType.__pulumiType;
    }

    public readonly botId!: pulumi.Output<string>;
    public readonly botVersion!: pulumi.Output<string>;
    public readonly compositeSlotTypeSettings!: pulumi.Output<outputs.Lexv2modelsSlotTypeCompositeSlotTypeSetting[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly externalSourceSettings!: pulumi.Output<outputs.Lexv2modelsSlotTypeExternalSourceSetting[] | undefined>;
    public readonly localeId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentSlotTypeSignature!: pulumi.Output<string | undefined>;
    public /*out*/ readonly slotTypeId!: pulumi.Output<string>;
    public readonly slotTypeValues!: pulumi.Output<outputs.Lexv2modelsSlotTypeSlotTypeValue[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.Lexv2modelsSlotTypeTimeouts | undefined>;
    public readonly valueSelectionSettings!: pulumi.Output<outputs.Lexv2modelsSlotTypeValueSelectionSetting[] | undefined>;

    /**
     * Create a Lexv2modelsSlotType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Lexv2modelsSlotTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Lexv2modelsSlotTypeArgs | Lexv2modelsSlotTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Lexv2modelsSlotTypeState | undefined;
            resourceInputs["botId"] = state ? state.botId : undefined;
            resourceInputs["botVersion"] = state ? state.botVersion : undefined;
            resourceInputs["compositeSlotTypeSettings"] = state ? state.compositeSlotTypeSettings : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalSourceSettings"] = state ? state.externalSourceSettings : undefined;
            resourceInputs["localeId"] = state ? state.localeId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentSlotTypeSignature"] = state ? state.parentSlotTypeSignature : undefined;
            resourceInputs["slotTypeId"] = state ? state.slotTypeId : undefined;
            resourceInputs["slotTypeValues"] = state ? state.slotTypeValues : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueSelectionSettings"] = state ? state.valueSelectionSettings : undefined;
        } else {
            const args = argsOrState as Lexv2modelsSlotTypeArgs | undefined;
            if ((!args || args.botId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botId'");
            }
            if ((!args || args.botVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'botVersion'");
            }
            if ((!args || args.localeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localeId'");
            }
            resourceInputs["botId"] = args ? args.botId : undefined;
            resourceInputs["botVersion"] = args ? args.botVersion : undefined;
            resourceInputs["compositeSlotTypeSettings"] = args ? args.compositeSlotTypeSettings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalSourceSettings"] = args ? args.externalSourceSettings : undefined;
            resourceInputs["localeId"] = args ? args.localeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentSlotTypeSignature"] = args ? args.parentSlotTypeSignature : undefined;
            resourceInputs["slotTypeValues"] = args ? args.slotTypeValues : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valueSelectionSettings"] = args ? args.valueSelectionSettings : undefined;
            resourceInputs["slotTypeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lexv2modelsSlotType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lexv2modelsSlotType resources.
 */
export interface Lexv2modelsSlotTypeState {
    botId?: pulumi.Input<string>;
    botVersion?: pulumi.Input<string>;
    compositeSlotTypeSettings?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeCompositeSlotTypeSetting>[]>;
    description?: pulumi.Input<string>;
    externalSourceSettings?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeExternalSourceSetting>[]>;
    localeId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentSlotTypeSignature?: pulumi.Input<string>;
    slotTypeId?: pulumi.Input<string>;
    slotTypeValues?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeSlotTypeValue>[]>;
    timeouts?: pulumi.Input<inputs.Lexv2modelsSlotTypeTimeouts>;
    valueSelectionSettings?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeValueSelectionSetting>[]>;
}

/**
 * The set of arguments for constructing a Lexv2modelsSlotType resource.
 */
export interface Lexv2modelsSlotTypeArgs {
    botId: pulumi.Input<string>;
    botVersion: pulumi.Input<string>;
    compositeSlotTypeSettings?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeCompositeSlotTypeSetting>[]>;
    description?: pulumi.Input<string>;
    externalSourceSettings?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeExternalSourceSetting>[]>;
    localeId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentSlotTypeSignature?: pulumi.Input<string>;
    slotTypeValues?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeSlotTypeValue>[]>;
    timeouts?: pulumi.Input<inputs.Lexv2modelsSlotTypeTimeouts>;
    valueSelectionSettings?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsSlotTypeValueSelectionSetting>[]>;
}
