// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DocdbelasticCluster extends pulumi.CustomResource {
    /**
     * Get an existing DocdbelasticCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DocdbelasticClusterState, opts?: pulumi.CustomResourceOptions): DocdbelasticCluster {
        return new DocdbelasticCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/docdbelasticCluster:DocdbelasticCluster';

    /**
     * Returns true if the given object is an instance of DocdbelasticCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DocdbelasticCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DocdbelasticCluster.__pulumiType;
    }

    public readonly adminUserName!: pulumi.Output<string>;
    public readonly adminUserPassword!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authType!: pulumi.Output<string>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly preferredMaintenanceWindow!: pulumi.Output<string>;
    public readonly shardCapacity!: pulumi.Output<number>;
    public readonly shardCount!: pulumi.Output<number>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.DocdbelasticClusterTimeouts | undefined>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a DocdbelasticCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DocdbelasticClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DocdbelasticClusterArgs | DocdbelasticClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DocdbelasticClusterState | undefined;
            resourceInputs["adminUserName"] = state ? state.adminUserName : undefined;
            resourceInputs["adminUserPassword"] = state ? state.adminUserPassword : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            resourceInputs["shardCapacity"] = state ? state.shardCapacity : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as DocdbelasticClusterArgs | undefined;
            if ((!args || args.adminUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUserName'");
            }
            if ((!args || args.adminUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUserPassword'");
            }
            if ((!args || args.authType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if ((!args || args.shardCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCapacity'");
            }
            if ((!args || args.shardCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCount'");
            }
            resourceInputs["adminUserName"] = args ? args.adminUserName : undefined;
            resourceInputs["adminUserPassword"] = args?.adminUserPassword ? pulumi.secret(args.adminUserPassword) : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            resourceInputs["shardCapacity"] = args ? args.shardCapacity : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminUserPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DocdbelasticCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DocdbelasticCluster resources.
 */
export interface DocdbelasticClusterState {
    adminUserName?: pulumi.Input<string>;
    adminUserPassword?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    authType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    shardCapacity?: pulumi.Input<number>;
    shardCount?: pulumi.Input<number>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DocdbelasticClusterTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DocdbelasticCluster resource.
 */
export interface DocdbelasticClusterArgs {
    adminUserName: pulumi.Input<string>;
    adminUserPassword: pulumi.Input<string>;
    authType: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    shardCapacity: pulumi.Input<number>;
    shardCount: pulumi.Input<number>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DocdbelasticClusterTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
