// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KinesisAnalyticsApplication extends pulumi.CustomResource {
    /**
     * Get an existing KinesisAnalyticsApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KinesisAnalyticsApplicationState, opts?: pulumi.CustomResourceOptions): KinesisAnalyticsApplication {
        return new KinesisAnalyticsApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/kinesisAnalyticsApplication:KinesisAnalyticsApplication';

    /**
     * Returns true if the given object is an instance of KinesisAnalyticsApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KinesisAnalyticsApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KinesisAnalyticsApplication.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cloudwatchLoggingOptions!: pulumi.Output<outputs.KinesisAnalyticsApplicationCloudwatchLoggingOptions | undefined>;
    public readonly code!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createTimestamp!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly inputs!: pulumi.Output<outputs.KinesisAnalyticsApplicationInputs | undefined>;
    public /*out*/ readonly lastUpdateTimestamp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly outputs!: pulumi.Output<outputs.KinesisAnalyticsApplicationOutput[] | undefined>;
    public readonly referenceDataSources!: pulumi.Output<outputs.KinesisAnalyticsApplicationReferenceDataSources | undefined>;
    public readonly startApplication!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a KinesisAnalyticsApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KinesisAnalyticsApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KinesisAnalyticsApplicationArgs | KinesisAnalyticsApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KinesisAnalyticsApplicationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudwatchLoggingOptions"] = state ? state.cloudwatchLoggingOptions : undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["createTimestamp"] = state ? state.createTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["lastUpdateTimestamp"] = state ? state.lastUpdateTimestamp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["referenceDataSources"] = state ? state.referenceDataSources : undefined;
            resourceInputs["startApplication"] = state ? state.startApplication : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as KinesisAnalyticsApplicationArgs | undefined;
            resourceInputs["cloudwatchLoggingOptions"] = args ? args.cloudwatchLoggingOptions : undefined;
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["referenceDataSources"] = args ? args.referenceDataSources : undefined;
            resourceInputs["startApplication"] = args ? args.startApplication : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTimestamp"] = undefined /*out*/;
            resourceInputs["lastUpdateTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KinesisAnalyticsApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KinesisAnalyticsApplication resources.
 */
export interface KinesisAnalyticsApplicationState {
    arn?: pulumi.Input<string>;
    cloudwatchLoggingOptions?: pulumi.Input<inputs.KinesisAnalyticsApplicationCloudwatchLoggingOptions>;
    code?: pulumi.Input<string>;
    createTimestamp?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    inputs?: pulumi.Input<inputs.KinesisAnalyticsApplicationInputs>;
    lastUpdateTimestamp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    outputs?: pulumi.Input<pulumi.Input<inputs.KinesisAnalyticsApplicationOutput>[]>;
    referenceDataSources?: pulumi.Input<inputs.KinesisAnalyticsApplicationReferenceDataSources>;
    startApplication?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KinesisAnalyticsApplication resource.
 */
export interface KinesisAnalyticsApplicationArgs {
    cloudwatchLoggingOptions?: pulumi.Input<inputs.KinesisAnalyticsApplicationCloudwatchLoggingOptions>;
    code?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    inputs?: pulumi.Input<inputs.KinesisAnalyticsApplicationInputs>;
    name?: pulumi.Input<string>;
    outputs?: pulumi.Input<pulumi.Input<inputs.KinesisAnalyticsApplicationOutput>[]>;
    referenceDataSources?: pulumi.Input<inputs.KinesisAnalyticsApplicationReferenceDataSources>;
    startApplication?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
