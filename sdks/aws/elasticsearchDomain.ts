// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticsearchDomain extends pulumi.CustomResource {
    /**
     * Get an existing ElasticsearchDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticsearchDomainState, opts?: pulumi.CustomResourceOptions): ElasticsearchDomain {
        return new ElasticsearchDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/elasticsearchDomain:ElasticsearchDomain';

    /**
     * Returns true if the given object is an instance of ElasticsearchDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticsearchDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticsearchDomain.__pulumiType;
    }

    public readonly accessPolicies!: pulumi.Output<string>;
    public readonly advancedOptions!: pulumi.Output<{[key: string]: string}>;
    public readonly advancedSecurityOptions!: pulumi.Output<outputs.ElasticsearchDomainAdvancedSecurityOptions | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoTuneOptions!: pulumi.Output<outputs.ElasticsearchDomainAutoTuneOptions | undefined>;
    public readonly clusterConfig!: pulumi.Output<outputs.ElasticsearchDomainClusterConfig | undefined>;
    public readonly cognitoOptions!: pulumi.Output<outputs.ElasticsearchDomainCognitoOptions | undefined>;
    public readonly domainEndpointOptions!: pulumi.Output<outputs.ElasticsearchDomainDomainEndpointOptions | undefined>;
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly ebsOptions!: pulumi.Output<outputs.ElasticsearchDomainEbsOptions | undefined>;
    public readonly elasticsearchVersion!: pulumi.Output<string | undefined>;
    public readonly encryptAtRest!: pulumi.Output<outputs.ElasticsearchDomainEncryptAtRest | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public /*out*/ readonly kibanaEndpoint!: pulumi.Output<string>;
    public readonly logPublishingOptions!: pulumi.Output<outputs.ElasticsearchDomainLogPublishingOption[] | undefined>;
    public readonly nodeToNodeEncryption!: pulumi.Output<outputs.ElasticsearchDomainNodeToNodeEncryption | undefined>;
    public readonly snapshotOptions!: pulumi.Output<outputs.ElasticsearchDomainSnapshotOptions | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.ElasticsearchDomainTimeouts | undefined>;
    public readonly vpcOptions!: pulumi.Output<outputs.ElasticsearchDomainVpcOptions | undefined>;

    /**
     * Create a ElasticsearchDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticsearchDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticsearchDomainArgs | ElasticsearchDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticsearchDomainState | undefined;
            resourceInputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            resourceInputs["advancedOptions"] = state ? state.advancedOptions : undefined;
            resourceInputs["advancedSecurityOptions"] = state ? state.advancedSecurityOptions : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoTuneOptions"] = state ? state.autoTuneOptions : undefined;
            resourceInputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            resourceInputs["cognitoOptions"] = state ? state.cognitoOptions : undefined;
            resourceInputs["domainEndpointOptions"] = state ? state.domainEndpointOptions : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["ebsOptions"] = state ? state.ebsOptions : undefined;
            resourceInputs["elasticsearchVersion"] = state ? state.elasticsearchVersion : undefined;
            resourceInputs["encryptAtRest"] = state ? state.encryptAtRest : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["kibanaEndpoint"] = state ? state.kibanaEndpoint : undefined;
            resourceInputs["logPublishingOptions"] = state ? state.logPublishingOptions : undefined;
            resourceInputs["nodeToNodeEncryption"] = state ? state.nodeToNodeEncryption : undefined;
            resourceInputs["snapshotOptions"] = state ? state.snapshotOptions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcOptions"] = state ? state.vpcOptions : undefined;
        } else {
            const args = argsOrState as ElasticsearchDomainArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            resourceInputs["advancedOptions"] = args ? args.advancedOptions : undefined;
            resourceInputs["advancedSecurityOptions"] = args ? args.advancedSecurityOptions : undefined;
            resourceInputs["autoTuneOptions"] = args ? args.autoTuneOptions : undefined;
            resourceInputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            resourceInputs["cognitoOptions"] = args ? args.cognitoOptions : undefined;
            resourceInputs["domainEndpointOptions"] = args ? args.domainEndpointOptions : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["ebsOptions"] = args ? args.ebsOptions : undefined;
            resourceInputs["elasticsearchVersion"] = args ? args.elasticsearchVersion : undefined;
            resourceInputs["encryptAtRest"] = args ? args.encryptAtRest : undefined;
            resourceInputs["logPublishingOptions"] = args ? args.logPublishingOptions : undefined;
            resourceInputs["nodeToNodeEncryption"] = args ? args.nodeToNodeEncryption : undefined;
            resourceInputs["snapshotOptions"] = args ? args.snapshotOptions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcOptions"] = args ? args.vpcOptions : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["kibanaEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticsearchDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticsearchDomain resources.
 */
export interface ElasticsearchDomainState {
    accessPolicies?: pulumi.Input<string>;
    advancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    advancedSecurityOptions?: pulumi.Input<inputs.ElasticsearchDomainAdvancedSecurityOptions>;
    arn?: pulumi.Input<string>;
    autoTuneOptions?: pulumi.Input<inputs.ElasticsearchDomainAutoTuneOptions>;
    clusterConfig?: pulumi.Input<inputs.ElasticsearchDomainClusterConfig>;
    cognitoOptions?: pulumi.Input<inputs.ElasticsearchDomainCognitoOptions>;
    domainEndpointOptions?: pulumi.Input<inputs.ElasticsearchDomainDomainEndpointOptions>;
    domainId?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    ebsOptions?: pulumi.Input<inputs.ElasticsearchDomainEbsOptions>;
    elasticsearchVersion?: pulumi.Input<string>;
    encryptAtRest?: pulumi.Input<inputs.ElasticsearchDomainEncryptAtRest>;
    endpoint?: pulumi.Input<string>;
    kibanaEndpoint?: pulumi.Input<string>;
    logPublishingOptions?: pulumi.Input<pulumi.Input<inputs.ElasticsearchDomainLogPublishingOption>[]>;
    nodeToNodeEncryption?: pulumi.Input<inputs.ElasticsearchDomainNodeToNodeEncryption>;
    snapshotOptions?: pulumi.Input<inputs.ElasticsearchDomainSnapshotOptions>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticsearchDomainTimeouts>;
    vpcOptions?: pulumi.Input<inputs.ElasticsearchDomainVpcOptions>;
}

/**
 * The set of arguments for constructing a ElasticsearchDomain resource.
 */
export interface ElasticsearchDomainArgs {
    accessPolicies?: pulumi.Input<string>;
    advancedOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    advancedSecurityOptions?: pulumi.Input<inputs.ElasticsearchDomainAdvancedSecurityOptions>;
    autoTuneOptions?: pulumi.Input<inputs.ElasticsearchDomainAutoTuneOptions>;
    clusterConfig?: pulumi.Input<inputs.ElasticsearchDomainClusterConfig>;
    cognitoOptions?: pulumi.Input<inputs.ElasticsearchDomainCognitoOptions>;
    domainEndpointOptions?: pulumi.Input<inputs.ElasticsearchDomainDomainEndpointOptions>;
    domainName: pulumi.Input<string>;
    ebsOptions?: pulumi.Input<inputs.ElasticsearchDomainEbsOptions>;
    elasticsearchVersion?: pulumi.Input<string>;
    encryptAtRest?: pulumi.Input<inputs.ElasticsearchDomainEncryptAtRest>;
    logPublishingOptions?: pulumi.Input<pulumi.Input<inputs.ElasticsearchDomainLogPublishingOption>[]>;
    nodeToNodeEncryption?: pulumi.Input<inputs.ElasticsearchDomainNodeToNodeEncryption>;
    snapshotOptions?: pulumi.Input<inputs.ElasticsearchDomainSnapshotOptions>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticsearchDomainTimeouts>;
    vpcOptions?: pulumi.Input<inputs.ElasticsearchDomainVpcOptions>;
}
