// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class QuicksightDataSet extends pulumi.CustomResource {
    /**
     * Get an existing QuicksightDataSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuicksightDataSetState, opts?: pulumi.CustomResourceOptions): QuicksightDataSet {
        return new QuicksightDataSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/quicksightDataSet:QuicksightDataSet';

    /**
     * Returns true if the given object is an instance of QuicksightDataSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuicksightDataSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuicksightDataSet.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly awsAccountId!: pulumi.Output<string>;
    public readonly columnGroups!: pulumi.Output<outputs.QuicksightDataSetColumnGroup[] | undefined>;
    public readonly columnLevelPermissionRules!: pulumi.Output<outputs.QuicksightDataSetColumnLevelPermissionRule[] | undefined>;
    public readonly dataSetId!: pulumi.Output<string>;
    public readonly dataSetUsageConfiguration!: pulumi.Output<outputs.QuicksightDataSetDataSetUsageConfiguration | undefined>;
    public readonly fieldFolders!: pulumi.Output<outputs.QuicksightDataSetFieldFolder[] | undefined>;
    public readonly importMode!: pulumi.Output<string>;
    public readonly logicalTableMaps!: pulumi.Output<outputs.QuicksightDataSetLogicalTableMap[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly outputColumns!: pulumi.Output<outputs.QuicksightDataSetOutputColumn[]>;
    public readonly permissions!: pulumi.Output<outputs.QuicksightDataSetPermission[] | undefined>;
    public readonly physicalTableMaps!: pulumi.Output<outputs.QuicksightDataSetPhysicalTableMap[] | undefined>;
    public readonly refreshProperties!: pulumi.Output<outputs.QuicksightDataSetRefreshProperties | undefined>;
    public readonly rowLevelPermissionDataSet!: pulumi.Output<outputs.QuicksightDataSetRowLevelPermissionDataSet | undefined>;
    public readonly rowLevelPermissionTagConfiguration!: pulumi.Output<outputs.QuicksightDataSetRowLevelPermissionTagConfiguration | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a QuicksightDataSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuicksightDataSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuicksightDataSetArgs | QuicksightDataSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuicksightDataSetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["columnGroups"] = state ? state.columnGroups : undefined;
            resourceInputs["columnLevelPermissionRules"] = state ? state.columnLevelPermissionRules : undefined;
            resourceInputs["dataSetId"] = state ? state.dataSetId : undefined;
            resourceInputs["dataSetUsageConfiguration"] = state ? state.dataSetUsageConfiguration : undefined;
            resourceInputs["fieldFolders"] = state ? state.fieldFolders : undefined;
            resourceInputs["importMode"] = state ? state.importMode : undefined;
            resourceInputs["logicalTableMaps"] = state ? state.logicalTableMaps : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputColumns"] = state ? state.outputColumns : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["physicalTableMaps"] = state ? state.physicalTableMaps : undefined;
            resourceInputs["refreshProperties"] = state ? state.refreshProperties : undefined;
            resourceInputs["rowLevelPermissionDataSet"] = state ? state.rowLevelPermissionDataSet : undefined;
            resourceInputs["rowLevelPermissionTagConfiguration"] = state ? state.rowLevelPermissionTagConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as QuicksightDataSetArgs | undefined;
            if ((!args || args.dataSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSetId'");
            }
            if ((!args || args.importMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importMode'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["columnGroups"] = args ? args.columnGroups : undefined;
            resourceInputs["columnLevelPermissionRules"] = args ? args.columnLevelPermissionRules : undefined;
            resourceInputs["dataSetId"] = args ? args.dataSetId : undefined;
            resourceInputs["dataSetUsageConfiguration"] = args ? args.dataSetUsageConfiguration : undefined;
            resourceInputs["fieldFolders"] = args ? args.fieldFolders : undefined;
            resourceInputs["importMode"] = args ? args.importMode : undefined;
            resourceInputs["logicalTableMaps"] = args ? args.logicalTableMaps : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["physicalTableMaps"] = args ? args.physicalTableMaps : undefined;
            resourceInputs["refreshProperties"] = args ? args.refreshProperties : undefined;
            resourceInputs["rowLevelPermissionDataSet"] = args ? args.rowLevelPermissionDataSet : undefined;
            resourceInputs["rowLevelPermissionTagConfiguration"] = args ? args.rowLevelPermissionTagConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["outputColumns"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuicksightDataSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuicksightDataSet resources.
 */
export interface QuicksightDataSetState {
    arn?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    columnGroups?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnGroup>[]>;
    columnLevelPermissionRules?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnLevelPermissionRule>[]>;
    dataSetId?: pulumi.Input<string>;
    dataSetUsageConfiguration?: pulumi.Input<inputs.QuicksightDataSetDataSetUsageConfiguration>;
    fieldFolders?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetFieldFolder>[]>;
    importMode?: pulumi.Input<string>;
    logicalTableMaps?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetLogicalTableMap>[]>;
    name?: pulumi.Input<string>;
    outputColumns?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetOutputColumn>[]>;
    permissions?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetPermission>[]>;
    physicalTableMaps?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetPhysicalTableMap>[]>;
    refreshProperties?: pulumi.Input<inputs.QuicksightDataSetRefreshProperties>;
    rowLevelPermissionDataSet?: pulumi.Input<inputs.QuicksightDataSetRowLevelPermissionDataSet>;
    rowLevelPermissionTagConfiguration?: pulumi.Input<inputs.QuicksightDataSetRowLevelPermissionTagConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a QuicksightDataSet resource.
 */
export interface QuicksightDataSetArgs {
    awsAccountId?: pulumi.Input<string>;
    columnGroups?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnGroup>[]>;
    columnLevelPermissionRules?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetColumnLevelPermissionRule>[]>;
    dataSetId: pulumi.Input<string>;
    dataSetUsageConfiguration?: pulumi.Input<inputs.QuicksightDataSetDataSetUsageConfiguration>;
    fieldFolders?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetFieldFolder>[]>;
    importMode: pulumi.Input<string>;
    logicalTableMaps?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetLogicalTableMap>[]>;
    name?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetPermission>[]>;
    physicalTableMaps?: pulumi.Input<pulumi.Input<inputs.QuicksightDataSetPhysicalTableMap>[]>;
    refreshProperties?: pulumi.Input<inputs.QuicksightDataSetRefreshProperties>;
    rowLevelPermissionDataSet?: pulumi.Input<inputs.QuicksightDataSetRowLevelPermissionDataSet>;
    rowLevelPermissionTagConfiguration?: pulumi.Input<inputs.QuicksightDataSetRowLevelPermissionTagConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
