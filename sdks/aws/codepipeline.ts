// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Codepipeline extends pulumi.CustomResource {
    /**
     * Get an existing Codepipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodepipelineState, opts?: pulumi.CustomResourceOptions): Codepipeline {
        return new Codepipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/codepipeline:Codepipeline';

    /**
     * Returns true if the given object is an instance of Codepipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Codepipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Codepipeline.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly artifactStores!: pulumi.Output<outputs.CodepipelineArtifactStore[]>;
    public readonly executionMode!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pipelineType!: pulumi.Output<string | undefined>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly stages!: pulumi.Output<outputs.CodepipelineStage[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly triggers!: pulumi.Output<outputs.CodepipelineTrigger[] | undefined>;
    public readonly variables!: pulumi.Output<outputs.CodepipelineVariable[] | undefined>;

    /**
     * Create a Codepipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodepipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodepipelineArgs | CodepipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodepipelineState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["artifactStores"] = state ? state.artifactStores : undefined;
            resourceInputs["executionMode"] = state ? state.executionMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pipelineType"] = state ? state.pipelineType : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["stages"] = state ? state.stages : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as CodepipelineArgs | undefined;
            if ((!args || args.artifactStores === undefined) && !opts.urn) {
                throw new Error("Missing required property 'artifactStores'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.stages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stages'");
            }
            resourceInputs["artifactStores"] = args ? args.artifactStores : undefined;
            resourceInputs["executionMode"] = args ? args.executionMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pipelineType"] = args ? args.pipelineType : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["stages"] = args ? args.stages : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Codepipeline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Codepipeline resources.
 */
export interface CodepipelineState {
    arn?: pulumi.Input<string>;
    artifactStores?: pulumi.Input<pulumi.Input<inputs.CodepipelineArtifactStore>[]>;
    executionMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pipelineType?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    stages?: pulumi.Input<pulumi.Input<inputs.CodepipelineStage>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    triggers?: pulumi.Input<pulumi.Input<inputs.CodepipelineTrigger>[]>;
    variables?: pulumi.Input<pulumi.Input<inputs.CodepipelineVariable>[]>;
}

/**
 * The set of arguments for constructing a Codepipeline resource.
 */
export interface CodepipelineArgs {
    artifactStores: pulumi.Input<pulumi.Input<inputs.CodepipelineArtifactStore>[]>;
    executionMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pipelineType?: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    stages: pulumi.Input<pulumi.Input<inputs.CodepipelineStage>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    triggers?: pulumi.Input<pulumi.Input<inputs.CodepipelineTrigger>[]>;
    variables?: pulumi.Input<pulumi.Input<inputs.CodepipelineVariable>[]>;
}
