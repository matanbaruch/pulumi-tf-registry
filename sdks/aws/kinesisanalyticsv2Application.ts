// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Kinesisanalyticsv2Application extends pulumi.CustomResource {
    /**
     * Get an existing Kinesisanalyticsv2Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Kinesisanalyticsv2ApplicationState, opts?: pulumi.CustomResourceOptions): Kinesisanalyticsv2Application {
        return new Kinesisanalyticsv2Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/kinesisanalyticsv2Application:Kinesisanalyticsv2Application';

    /**
     * Returns true if the given object is an instance of Kinesisanalyticsv2Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Kinesisanalyticsv2Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Kinesisanalyticsv2Application.__pulumiType;
    }

    public readonly applicationConfiguration!: pulumi.Output<outputs.Kinesisanalyticsv2ApplicationApplicationConfiguration | undefined>;
    public readonly applicationMode!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cloudwatchLoggingOptions!: pulumi.Output<outputs.Kinesisanalyticsv2ApplicationCloudwatchLoggingOptions | undefined>;
    public /*out*/ readonly createTimestamp!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly forceStop!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lastUpdateTimestamp!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly runtimeEnvironment!: pulumi.Output<string>;
    public readonly serviceExecutionRole!: pulumi.Output<string>;
    public readonly startApplication!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.Kinesisanalyticsv2ApplicationTimeouts | undefined>;
    public /*out*/ readonly versionId!: pulumi.Output<number>;

    /**
     * Create a Kinesisanalyticsv2Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Kinesisanalyticsv2ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Kinesisanalyticsv2ApplicationArgs | Kinesisanalyticsv2ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Kinesisanalyticsv2ApplicationState | undefined;
            resourceInputs["applicationConfiguration"] = state ? state.applicationConfiguration : undefined;
            resourceInputs["applicationMode"] = state ? state.applicationMode : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudwatchLoggingOptions"] = state ? state.cloudwatchLoggingOptions : undefined;
            resourceInputs["createTimestamp"] = state ? state.createTimestamp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["forceStop"] = state ? state.forceStop : undefined;
            resourceInputs["lastUpdateTimestamp"] = state ? state.lastUpdateTimestamp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["runtimeEnvironment"] = state ? state.runtimeEnvironment : undefined;
            resourceInputs["serviceExecutionRole"] = state ? state.serviceExecutionRole : undefined;
            resourceInputs["startApplication"] = state ? state.startApplication : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as Kinesisanalyticsv2ApplicationArgs | undefined;
            if ((!args || args.runtimeEnvironment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeEnvironment'");
            }
            if ((!args || args.serviceExecutionRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceExecutionRole'");
            }
            resourceInputs["applicationConfiguration"] = args ? args.applicationConfiguration : undefined;
            resourceInputs["applicationMode"] = args ? args.applicationMode : undefined;
            resourceInputs["cloudwatchLoggingOptions"] = args ? args.cloudwatchLoggingOptions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["forceStop"] = args ? args.forceStop : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["runtimeEnvironment"] = args ? args.runtimeEnvironment : undefined;
            resourceInputs["serviceExecutionRole"] = args ? args.serviceExecutionRole : undefined;
            resourceInputs["startApplication"] = args ? args.startApplication : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTimestamp"] = undefined /*out*/;
            resourceInputs["lastUpdateTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Kinesisanalyticsv2Application.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Kinesisanalyticsv2Application resources.
 */
export interface Kinesisanalyticsv2ApplicationState {
    applicationConfiguration?: pulumi.Input<inputs.Kinesisanalyticsv2ApplicationApplicationConfiguration>;
    applicationMode?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    cloudwatchLoggingOptions?: pulumi.Input<inputs.Kinesisanalyticsv2ApplicationCloudwatchLoggingOptions>;
    createTimestamp?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    forceStop?: pulumi.Input<boolean>;
    lastUpdateTimestamp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    runtimeEnvironment?: pulumi.Input<string>;
    serviceExecutionRole?: pulumi.Input<string>;
    startApplication?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Kinesisanalyticsv2ApplicationTimeouts>;
    versionId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Kinesisanalyticsv2Application resource.
 */
export interface Kinesisanalyticsv2ApplicationArgs {
    applicationConfiguration?: pulumi.Input<inputs.Kinesisanalyticsv2ApplicationApplicationConfiguration>;
    applicationMode?: pulumi.Input<string>;
    cloudwatchLoggingOptions?: pulumi.Input<inputs.Kinesisanalyticsv2ApplicationCloudwatchLoggingOptions>;
    description?: pulumi.Input<string>;
    forceStop?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    runtimeEnvironment: pulumi.Input<string>;
    serviceExecutionRole: pulumi.Input<string>;
    startApplication?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Kinesisanalyticsv2ApplicationTimeouts>;
}
