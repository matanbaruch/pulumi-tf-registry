// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LambdaFunction extends pulumi.CustomResource {
    /**
     * Get an existing LambdaFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LambdaFunctionState, opts?: pulumi.CustomResourceOptions): LambdaFunction {
        return new LambdaFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lambdaFunction:LambdaFunction';

    /**
     * Returns true if the given object is an instance of LambdaFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LambdaFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LambdaFunction.__pulumiType;
    }

    public readonly architectures!: pulumi.Output<string[]>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly codeSha256!: pulumi.Output<string>;
    public readonly codeSigningConfigArn!: pulumi.Output<string | undefined>;
    public readonly deadLetterConfig!: pulumi.Output<outputs.LambdaFunctionDeadLetterConfig | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly environment!: pulumi.Output<outputs.LambdaFunctionEnvironment | undefined>;
    public readonly ephemeralStorage!: pulumi.Output<outputs.LambdaFunctionEphemeralStorage | undefined>;
    public readonly fileSystemConfig!: pulumi.Output<outputs.LambdaFunctionFileSystemConfig | undefined>;
    public readonly filename!: pulumi.Output<string | undefined>;
    public readonly functionName!: pulumi.Output<string>;
    public readonly handler!: pulumi.Output<string | undefined>;
    public readonly imageConfig!: pulumi.Output<outputs.LambdaFunctionImageConfig | undefined>;
    public readonly imageUri!: pulumi.Output<string | undefined>;
    public /*out*/ readonly invokeArn!: pulumi.Output<string>;
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    public readonly layers!: pulumi.Output<string[] | undefined>;
    public readonly loggingConfig!: pulumi.Output<outputs.LambdaFunctionLoggingConfig | undefined>;
    public readonly memorySize!: pulumi.Output<number | undefined>;
    public readonly packageType!: pulumi.Output<string | undefined>;
    public readonly publish!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly qualifiedArn!: pulumi.Output<string>;
    public /*out*/ readonly qualifiedInvokeArn!: pulumi.Output<string>;
    public readonly replaceSecurityGroupsOnDestroy!: pulumi.Output<boolean | undefined>;
    public readonly replacementSecurityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly reservedConcurrentExecutions!: pulumi.Output<number | undefined>;
    public readonly role!: pulumi.Output<string>;
    public readonly runtime!: pulumi.Output<string | undefined>;
    public readonly s3Bucket!: pulumi.Output<string | undefined>;
    public readonly s3Key!: pulumi.Output<string | undefined>;
    public readonly s3ObjectVersion!: pulumi.Output<string | undefined>;
    public /*out*/ readonly signingJobArn!: pulumi.Output<string>;
    public /*out*/ readonly signingProfileVersionArn!: pulumi.Output<string>;
    public readonly skipDestroy!: pulumi.Output<boolean | undefined>;
    public readonly snapStart!: pulumi.Output<outputs.LambdaFunctionSnapStart | undefined>;
    public readonly sourceCodeHash!: pulumi.Output<string>;
    public /*out*/ readonly sourceCodeSize!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LambdaFunctionTimeouts | undefined>;
    public readonly tracingConfig!: pulumi.Output<outputs.LambdaFunctionTracingConfig | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly vpcConfig!: pulumi.Output<outputs.LambdaFunctionVpcConfig | undefined>;

    /**
     * Create a LambdaFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LambdaFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LambdaFunctionArgs | LambdaFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LambdaFunctionState | undefined;
            resourceInputs["architectures"] = state ? state.architectures : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["codeSha256"] = state ? state.codeSha256 : undefined;
            resourceInputs["codeSigningConfigArn"] = state ? state.codeSigningConfigArn : undefined;
            resourceInputs["deadLetterConfig"] = state ? state.deadLetterConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["ephemeralStorage"] = state ? state.ephemeralStorage : undefined;
            resourceInputs["fileSystemConfig"] = state ? state.fileSystemConfig : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["imageConfig"] = state ? state.imageConfig : undefined;
            resourceInputs["imageUri"] = state ? state.imageUri : undefined;
            resourceInputs["invokeArn"] = state ? state.invokeArn : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["layers"] = state ? state.layers : undefined;
            resourceInputs["loggingConfig"] = state ? state.loggingConfig : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["packageType"] = state ? state.packageType : undefined;
            resourceInputs["publish"] = state ? state.publish : undefined;
            resourceInputs["qualifiedArn"] = state ? state.qualifiedArn : undefined;
            resourceInputs["qualifiedInvokeArn"] = state ? state.qualifiedInvokeArn : undefined;
            resourceInputs["replaceSecurityGroupsOnDestroy"] = state ? state.replaceSecurityGroupsOnDestroy : undefined;
            resourceInputs["replacementSecurityGroupIds"] = state ? state.replacementSecurityGroupIds : undefined;
            resourceInputs["reservedConcurrentExecutions"] = state ? state.reservedConcurrentExecutions : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["s3Bucket"] = state ? state.s3Bucket : undefined;
            resourceInputs["s3Key"] = state ? state.s3Key : undefined;
            resourceInputs["s3ObjectVersion"] = state ? state.s3ObjectVersion : undefined;
            resourceInputs["signingJobArn"] = state ? state.signingJobArn : undefined;
            resourceInputs["signingProfileVersionArn"] = state ? state.signingProfileVersionArn : undefined;
            resourceInputs["skipDestroy"] = state ? state.skipDestroy : undefined;
            resourceInputs["snapStart"] = state ? state.snapStart : undefined;
            resourceInputs["sourceCodeHash"] = state ? state.sourceCodeHash : undefined;
            resourceInputs["sourceCodeSize"] = state ? state.sourceCodeSize : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tracingConfig"] = state ? state.tracingConfig : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as LambdaFunctionArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["architectures"] = args ? args.architectures : undefined;
            resourceInputs["codeSigningConfigArn"] = args ? args.codeSigningConfigArn : undefined;
            resourceInputs["deadLetterConfig"] = args ? args.deadLetterConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["ephemeralStorage"] = args ? args.ephemeralStorage : undefined;
            resourceInputs["fileSystemConfig"] = args ? args.fileSystemConfig : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["imageConfig"] = args ? args.imageConfig : undefined;
            resourceInputs["imageUri"] = args ? args.imageUri : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["layers"] = args ? args.layers : undefined;
            resourceInputs["loggingConfig"] = args ? args.loggingConfig : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["packageType"] = args ? args.packageType : undefined;
            resourceInputs["publish"] = args ? args.publish : undefined;
            resourceInputs["replaceSecurityGroupsOnDestroy"] = args ? args.replaceSecurityGroupsOnDestroy : undefined;
            resourceInputs["replacementSecurityGroupIds"] = args ? args.replacementSecurityGroupIds : undefined;
            resourceInputs["reservedConcurrentExecutions"] = args ? args.reservedConcurrentExecutions : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["s3Bucket"] = args ? args.s3Bucket : undefined;
            resourceInputs["s3Key"] = args ? args.s3Key : undefined;
            resourceInputs["s3ObjectVersion"] = args ? args.s3ObjectVersion : undefined;
            resourceInputs["skipDestroy"] = args ? args.skipDestroy : undefined;
            resourceInputs["snapStart"] = args ? args.snapStart : undefined;
            resourceInputs["sourceCodeHash"] = args ? args.sourceCodeHash : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tracingConfig"] = args ? args.tracingConfig : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["codeSha256"] = undefined /*out*/;
            resourceInputs["invokeArn"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["qualifiedArn"] = undefined /*out*/;
            resourceInputs["qualifiedInvokeArn"] = undefined /*out*/;
            resourceInputs["signingJobArn"] = undefined /*out*/;
            resourceInputs["signingProfileVersionArn"] = undefined /*out*/;
            resourceInputs["sourceCodeSize"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LambdaFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LambdaFunction resources.
 */
export interface LambdaFunctionState {
    architectures?: pulumi.Input<pulumi.Input<string>[]>;
    arn?: pulumi.Input<string>;
    codeSha256?: pulumi.Input<string>;
    codeSigningConfigArn?: pulumi.Input<string>;
    deadLetterConfig?: pulumi.Input<inputs.LambdaFunctionDeadLetterConfig>;
    description?: pulumi.Input<string>;
    environment?: pulumi.Input<inputs.LambdaFunctionEnvironment>;
    ephemeralStorage?: pulumi.Input<inputs.LambdaFunctionEphemeralStorage>;
    fileSystemConfig?: pulumi.Input<inputs.LambdaFunctionFileSystemConfig>;
    filename?: pulumi.Input<string>;
    functionName?: pulumi.Input<string>;
    handler?: pulumi.Input<string>;
    imageConfig?: pulumi.Input<inputs.LambdaFunctionImageConfig>;
    imageUri?: pulumi.Input<string>;
    invokeArn?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    lastModified?: pulumi.Input<string>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    loggingConfig?: pulumi.Input<inputs.LambdaFunctionLoggingConfig>;
    memorySize?: pulumi.Input<number>;
    packageType?: pulumi.Input<string>;
    publish?: pulumi.Input<boolean>;
    qualifiedArn?: pulumi.Input<string>;
    qualifiedInvokeArn?: pulumi.Input<string>;
    replaceSecurityGroupsOnDestroy?: pulumi.Input<boolean>;
    replacementSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    reservedConcurrentExecutions?: pulumi.Input<number>;
    role?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    s3Bucket?: pulumi.Input<string>;
    s3Key?: pulumi.Input<string>;
    s3ObjectVersion?: pulumi.Input<string>;
    signingJobArn?: pulumi.Input<string>;
    signingProfileVersionArn?: pulumi.Input<string>;
    skipDestroy?: pulumi.Input<boolean>;
    snapStart?: pulumi.Input<inputs.LambdaFunctionSnapStart>;
    sourceCodeHash?: pulumi.Input<string>;
    sourceCodeSize?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LambdaFunctionTimeouts>;
    tracingConfig?: pulumi.Input<inputs.LambdaFunctionTracingConfig>;
    version?: pulumi.Input<string>;
    vpcConfig?: pulumi.Input<inputs.LambdaFunctionVpcConfig>;
}

/**
 * The set of arguments for constructing a LambdaFunction resource.
 */
export interface LambdaFunctionArgs {
    architectures?: pulumi.Input<pulumi.Input<string>[]>;
    codeSigningConfigArn?: pulumi.Input<string>;
    deadLetterConfig?: pulumi.Input<inputs.LambdaFunctionDeadLetterConfig>;
    description?: pulumi.Input<string>;
    environment?: pulumi.Input<inputs.LambdaFunctionEnvironment>;
    ephemeralStorage?: pulumi.Input<inputs.LambdaFunctionEphemeralStorage>;
    fileSystemConfig?: pulumi.Input<inputs.LambdaFunctionFileSystemConfig>;
    filename?: pulumi.Input<string>;
    functionName: pulumi.Input<string>;
    handler?: pulumi.Input<string>;
    imageConfig?: pulumi.Input<inputs.LambdaFunctionImageConfig>;
    imageUri?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    layers?: pulumi.Input<pulumi.Input<string>[]>;
    loggingConfig?: pulumi.Input<inputs.LambdaFunctionLoggingConfig>;
    memorySize?: pulumi.Input<number>;
    packageType?: pulumi.Input<string>;
    publish?: pulumi.Input<boolean>;
    replaceSecurityGroupsOnDestroy?: pulumi.Input<boolean>;
    replacementSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    reservedConcurrentExecutions?: pulumi.Input<number>;
    role: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    s3Bucket?: pulumi.Input<string>;
    s3Key?: pulumi.Input<string>;
    s3ObjectVersion?: pulumi.Input<string>;
    skipDestroy?: pulumi.Input<boolean>;
    snapStart?: pulumi.Input<inputs.LambdaFunctionSnapStart>;
    sourceCodeHash?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LambdaFunctionTimeouts>;
    tracingConfig?: pulumi.Input<inputs.LambdaFunctionTracingConfig>;
    vpcConfig?: pulumi.Input<inputs.LambdaFunctionVpcConfig>;
}
