// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedshiftserverlessSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftserverlessSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftserverlessSnapshotState, opts?: pulumi.CustomResourceOptions): RedshiftserverlessSnapshot {
        return new RedshiftserverlessSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftserverlessSnapshot:RedshiftserverlessSnapshot';

    /**
     * Returns true if the given object is an instance of RedshiftserverlessSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftserverlessSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftserverlessSnapshot.__pulumiType;
    }

    public /*out*/ readonly accountsWithProvisionedRestoreAccesses!: pulumi.Output<string[]>;
    public /*out*/ readonly accountsWithRestoreAccesses!: pulumi.Output<string[]>;
    public /*out*/ readonly adminUsername!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly kmsKeyId!: pulumi.Output<string>;
    public /*out*/ readonly namespaceArn!: pulumi.Output<string>;
    public readonly namespaceName!: pulumi.Output<string>;
    public /*out*/ readonly ownerAccount!: pulumi.Output<string>;
    public readonly retentionPeriod!: pulumi.Output<number | undefined>;
    public readonly snapshotName!: pulumi.Output<string>;

    /**
     * Create a RedshiftserverlessSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftserverlessSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftserverlessSnapshotArgs | RedshiftserverlessSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftserverlessSnapshotState | undefined;
            resourceInputs["accountsWithProvisionedRestoreAccesses"] = state ? state.accountsWithProvisionedRestoreAccesses : undefined;
            resourceInputs["accountsWithRestoreAccesses"] = state ? state.accountsWithRestoreAccesses : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["namespaceArn"] = state ? state.namespaceArn : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["ownerAccount"] = state ? state.ownerAccount : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
        } else {
            const args = argsOrState as RedshiftserverlessSnapshotArgs | undefined;
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.snapshotName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snapshotName'");
            }
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["accountsWithProvisionedRestoreAccesses"] = undefined /*out*/;
            resourceInputs["accountsWithRestoreAccesses"] = undefined /*out*/;
            resourceInputs["adminUsername"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["kmsKeyId"] = undefined /*out*/;
            resourceInputs["namespaceArn"] = undefined /*out*/;
            resourceInputs["ownerAccount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftserverlessSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftserverlessSnapshot resources.
 */
export interface RedshiftserverlessSnapshotState {
    accountsWithProvisionedRestoreAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    accountsWithRestoreAccesses?: pulumi.Input<pulumi.Input<string>[]>;
    adminUsername?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    namespaceArn?: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    ownerAccount?: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
    snapshotName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedshiftserverlessSnapshot resource.
 */
export interface RedshiftserverlessSnapshotArgs {
    namespaceName: pulumi.Input<string>;
    retentionPeriod?: pulumi.Input<number>;
    snapshotName: pulumi.Input<string>;
}
