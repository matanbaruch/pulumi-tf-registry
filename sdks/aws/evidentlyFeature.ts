// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EvidentlyFeature extends pulumi.CustomResource {
    /**
     * Get an existing EvidentlyFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EvidentlyFeatureState, opts?: pulumi.CustomResourceOptions): EvidentlyFeature {
        return new EvidentlyFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/evidentlyFeature:EvidentlyFeature';

    /**
     * Returns true if the given object is an instance of EvidentlyFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EvidentlyFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EvidentlyFeature.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly defaultVariation!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly entityOverrides!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly evaluationRules!: pulumi.Output<outputs.EvidentlyFeatureEvaluationRule[]>;
    public readonly evaluationStrategy!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.EvidentlyFeatureTimeouts | undefined>;
    public /*out*/ readonly valueType!: pulumi.Output<string>;
    public readonly variations!: pulumi.Output<outputs.EvidentlyFeatureVariation[]>;

    /**
     * Create a EvidentlyFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EvidentlyFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EvidentlyFeatureArgs | EvidentlyFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EvidentlyFeatureState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["defaultVariation"] = state ? state.defaultVariation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entityOverrides"] = state ? state.entityOverrides : undefined;
            resourceInputs["evaluationRules"] = state ? state.evaluationRules : undefined;
            resourceInputs["evaluationStrategy"] = state ? state.evaluationStrategy : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueType"] = state ? state.valueType : undefined;
            resourceInputs["variations"] = state ? state.variations : undefined;
        } else {
            const args = argsOrState as EvidentlyFeatureArgs | undefined;
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.variations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variations'");
            }
            resourceInputs["defaultVariation"] = args ? args.defaultVariation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entityOverrides"] = args ? args.entityOverrides : undefined;
            resourceInputs["evaluationStrategy"] = args ? args.evaluationStrategy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["variations"] = args ? args.variations : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["evaluationRules"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["valueType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EvidentlyFeature.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EvidentlyFeature resources.
 */
export interface EvidentlyFeatureState {
    arn?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    defaultVariation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    entityOverrides?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    evaluationRules?: pulumi.Input<pulumi.Input<inputs.EvidentlyFeatureEvaluationRule>[]>;
    evaluationStrategy?: pulumi.Input<string>;
    lastUpdatedTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EvidentlyFeatureTimeouts>;
    valueType?: pulumi.Input<string>;
    variations?: pulumi.Input<pulumi.Input<inputs.EvidentlyFeatureVariation>[]>;
}

/**
 * The set of arguments for constructing a EvidentlyFeature resource.
 */
export interface EvidentlyFeatureArgs {
    defaultVariation?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    entityOverrides?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    evaluationStrategy?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EvidentlyFeatureTimeouts>;
    variations: pulumi.Input<pulumi.Input<inputs.EvidentlyFeatureVariation>[]>;
}
