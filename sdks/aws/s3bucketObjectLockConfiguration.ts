// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3BucketObjectLockConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing S3BucketObjectLockConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketObjectLockConfigurationState, opts?: pulumi.CustomResourceOptions): S3BucketObjectLockConfiguration {
        return new S3BucketObjectLockConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/s3BucketObjectLockConfiguration:S3BucketObjectLockConfiguration';

    /**
     * Returns true if the given object is an instance of S3BucketObjectLockConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3BucketObjectLockConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3BucketObjectLockConfiguration.__pulumiType;
    }

    public readonly bucket!: pulumi.Output<string>;
    public readonly expectedBucketOwner!: pulumi.Output<string | undefined>;
    public readonly objectLockEnabled!: pulumi.Output<string | undefined>;
    public readonly rule!: pulumi.Output<outputs.S3BucketObjectLockConfigurationRule | undefined>;
    public readonly token!: pulumi.Output<string | undefined>;

    /**
     * Create a S3BucketObjectLockConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3BucketObjectLockConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketObjectLockConfigurationArgs | S3BucketObjectLockConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketObjectLockConfigurationState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = state ? state.expectedBucketOwner : undefined;
            resourceInputs["objectLockEnabled"] = state ? state.objectLockEnabled : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as S3BucketObjectLockConfigurationArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["expectedBucketOwner"] = args ? args.expectedBucketOwner : undefined;
            resourceInputs["objectLockEnabled"] = args ? args.objectLockEnabled : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(S3BucketObjectLockConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3BucketObjectLockConfiguration resources.
 */
export interface S3BucketObjectLockConfigurationState {
    bucket?: pulumi.Input<string>;
    expectedBucketOwner?: pulumi.Input<string>;
    objectLockEnabled?: pulumi.Input<string>;
    rule?: pulumi.Input<inputs.S3BucketObjectLockConfigurationRule>;
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3BucketObjectLockConfiguration resource.
 */
export interface S3BucketObjectLockConfigurationArgs {
    bucket: pulumi.Input<string>;
    expectedBucketOwner?: pulumi.Input<string>;
    objectLockEnabled?: pulumi.Input<string>;
    rule?: pulumi.Input<inputs.S3BucketObjectLockConfigurationRule>;
    token?: pulumi.Input<string>;
}
