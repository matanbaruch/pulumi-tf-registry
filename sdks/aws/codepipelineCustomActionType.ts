// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodepipelineCustomActionType extends pulumi.CustomResource {
    /**
     * Get an existing CodepipelineCustomActionType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodepipelineCustomActionTypeState, opts?: pulumi.CustomResourceOptions): CodepipelineCustomActionType {
        return new CodepipelineCustomActionType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/codepipelineCustomActionType:CodepipelineCustomActionType';

    /**
     * Returns true if the given object is an instance of CodepipelineCustomActionType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodepipelineCustomActionType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodepipelineCustomActionType.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly category!: pulumi.Output<string>;
    public readonly configurationProperties!: pulumi.Output<outputs.CodepipelineCustomActionTypeConfigurationProperty[] | undefined>;
    public readonly inputArtifactDetails!: pulumi.Output<outputs.CodepipelineCustomActionTypeInputArtifactDetails>;
    public readonly outputArtifactDetails!: pulumi.Output<outputs.CodepipelineCustomActionTypeOutputArtifactDetails>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public readonly providerName!: pulumi.Output<string>;
    public readonly settings!: pulumi.Output<outputs.CodepipelineCustomActionTypeSettings | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a CodepipelineCustomActionType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodepipelineCustomActionTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodepipelineCustomActionTypeArgs | CodepipelineCustomActionTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodepipelineCustomActionTypeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["configurationProperties"] = state ? state.configurationProperties : undefined;
            resourceInputs["inputArtifactDetails"] = state ? state.inputArtifactDetails : undefined;
            resourceInputs["outputArtifactDetails"] = state ? state.outputArtifactDetails : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CodepipelineCustomActionTypeArgs | undefined;
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.inputArtifactDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputArtifactDetails'");
            }
            if ((!args || args.outputArtifactDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputArtifactDetails'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["configurationProperties"] = args ? args.configurationProperties : undefined;
            resourceInputs["inputArtifactDetails"] = args ? args.inputArtifactDetails : undefined;
            resourceInputs["outputArtifactDetails"] = args ? args.outputArtifactDetails : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodepipelineCustomActionType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodepipelineCustomActionType resources.
 */
export interface CodepipelineCustomActionTypeState {
    arn?: pulumi.Input<string>;
    category?: pulumi.Input<string>;
    configurationProperties?: pulumi.Input<pulumi.Input<inputs.CodepipelineCustomActionTypeConfigurationProperty>[]>;
    inputArtifactDetails?: pulumi.Input<inputs.CodepipelineCustomActionTypeInputArtifactDetails>;
    outputArtifactDetails?: pulumi.Input<inputs.CodepipelineCustomActionTypeOutputArtifactDetails>;
    owner?: pulumi.Input<string>;
    providerName?: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.CodepipelineCustomActionTypeSettings>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CodepipelineCustomActionType resource.
 */
export interface CodepipelineCustomActionTypeArgs {
    category: pulumi.Input<string>;
    configurationProperties?: pulumi.Input<pulumi.Input<inputs.CodepipelineCustomActionTypeConfigurationProperty>[]>;
    inputArtifactDetails: pulumi.Input<inputs.CodepipelineCustomActionTypeInputArtifactDetails>;
    outputArtifactDetails: pulumi.Input<inputs.CodepipelineCustomActionTypeOutputArtifactDetails>;
    providerName: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.CodepipelineCustomActionTypeSettings>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    version: pulumi.Input<string>;
}
