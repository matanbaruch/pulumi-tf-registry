// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class QuicksightUser extends pulumi.CustomResource {
    /**
     * Get an existing QuicksightUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuicksightUserState, opts?: pulumi.CustomResourceOptions): QuicksightUser {
        return new QuicksightUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/quicksightUser:QuicksightUser';

    /**
     * Returns true if the given object is an instance of QuicksightUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuicksightUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuicksightUser.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly awsAccountId!: pulumi.Output<string>;
    public readonly email!: pulumi.Output<string>;
    public readonly iamArn!: pulumi.Output<string | undefined>;
    public readonly identityType!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly sessionName!: pulumi.Output<string | undefined>;
    public readonly userName!: pulumi.Output<string | undefined>;
    public readonly userRole!: pulumi.Output<string>;

    /**
     * Create a QuicksightUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuicksightUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuicksightUserArgs | QuicksightUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuicksightUserState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["iamArn"] = state ? state.iamArn : undefined;
            resourceInputs["identityType"] = state ? state.identityType : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["sessionName"] = state ? state.sessionName : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userRole"] = state ? state.userRole : undefined;
        } else {
            const args = argsOrState as QuicksightUserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.identityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityType'");
            }
            if ((!args || args.userRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userRole'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["iamArn"] = args ? args.iamArn : undefined;
            resourceInputs["identityType"] = args ? args.identityType : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["sessionName"] = args ? args.sessionName : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userRole"] = args ? args.userRole : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuicksightUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuicksightUser resources.
 */
export interface QuicksightUserState {
    arn?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    iamArn?: pulumi.Input<string>;
    identityType?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    sessionName?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    userRole?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QuicksightUser resource.
 */
export interface QuicksightUserArgs {
    awsAccountId?: pulumi.Input<string>;
    email: pulumi.Input<string>;
    iamArn?: pulumi.Input<string>;
    identityType: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    sessionName?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    userRole: pulumi.Input<string>;
}
