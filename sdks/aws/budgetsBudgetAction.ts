// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BudgetsBudgetAction extends pulumi.CustomResource {
    /**
     * Get an existing BudgetsBudgetAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BudgetsBudgetActionState, opts?: pulumi.CustomResourceOptions): BudgetsBudgetAction {
        return new BudgetsBudgetAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/budgetsBudgetAction:BudgetsBudgetAction';

    /**
     * Returns true if the given object is an instance of BudgetsBudgetAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BudgetsBudgetAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BudgetsBudgetAction.__pulumiType;
    }

    public readonly accountId!: pulumi.Output<string>;
    public /*out*/ readonly actionId!: pulumi.Output<string>;
    public readonly actionThreshold!: pulumi.Output<outputs.BudgetsBudgetActionActionThreshold>;
    public readonly actionType!: pulumi.Output<string>;
    public readonly approvalModel!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly budgetName!: pulumi.Output<string>;
    public readonly definition!: pulumi.Output<outputs.BudgetsBudgetActionDefinition>;
    public readonly executionRoleArn!: pulumi.Output<string>;
    public readonly notificationType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subscribers!: pulumi.Output<outputs.BudgetsBudgetActionSubscriber[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.BudgetsBudgetActionTimeouts | undefined>;

    /**
     * Create a BudgetsBudgetAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BudgetsBudgetActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BudgetsBudgetActionArgs | BudgetsBudgetActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BudgetsBudgetActionState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["actionId"] = state ? state.actionId : undefined;
            resourceInputs["actionThreshold"] = state ? state.actionThreshold : undefined;
            resourceInputs["actionType"] = state ? state.actionType : undefined;
            resourceInputs["approvalModel"] = state ? state.approvalModel : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["budgetName"] = state ? state.budgetName : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["notificationType"] = state ? state.notificationType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subscribers"] = state ? state.subscribers : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as BudgetsBudgetActionArgs | undefined;
            if ((!args || args.actionThreshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionThreshold'");
            }
            if ((!args || args.actionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionType'");
            }
            if ((!args || args.approvalModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'approvalModel'");
            }
            if ((!args || args.budgetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'budgetName'");
            }
            if ((!args || args.definition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            if ((!args || args.executionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            if ((!args || args.notificationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationType'");
            }
            if ((!args || args.subscribers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscribers'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["actionThreshold"] = args ? args.actionThreshold : undefined;
            resourceInputs["actionType"] = args ? args.actionType : undefined;
            resourceInputs["approvalModel"] = args ? args.approvalModel : undefined;
            resourceInputs["budgetName"] = args ? args.budgetName : undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["notificationType"] = args ? args.notificationType : undefined;
            resourceInputs["subscribers"] = args ? args.subscribers : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["actionId"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BudgetsBudgetAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BudgetsBudgetAction resources.
 */
export interface BudgetsBudgetActionState {
    accountId?: pulumi.Input<string>;
    actionId?: pulumi.Input<string>;
    actionThreshold?: pulumi.Input<inputs.BudgetsBudgetActionActionThreshold>;
    actionType?: pulumi.Input<string>;
    approvalModel?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    budgetName?: pulumi.Input<string>;
    definition?: pulumi.Input<inputs.BudgetsBudgetActionDefinition>;
    executionRoleArn?: pulumi.Input<string>;
    notificationType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subscribers?: pulumi.Input<pulumi.Input<inputs.BudgetsBudgetActionSubscriber>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BudgetsBudgetActionTimeouts>;
}

/**
 * The set of arguments for constructing a BudgetsBudgetAction resource.
 */
export interface BudgetsBudgetActionArgs {
    accountId?: pulumi.Input<string>;
    actionThreshold: pulumi.Input<inputs.BudgetsBudgetActionActionThreshold>;
    actionType: pulumi.Input<string>;
    approvalModel: pulumi.Input<string>;
    budgetName: pulumi.Input<string>;
    definition: pulumi.Input<inputs.BudgetsBudgetActionDefinition>;
    executionRoleArn: pulumi.Input<string>;
    notificationType: pulumi.Input<string>;
    subscribers: pulumi.Input<pulumi.Input<inputs.BudgetsBudgetActionSubscriber>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BudgetsBudgetActionTimeouts>;
}
