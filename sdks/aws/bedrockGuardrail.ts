// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BedrockGuardrail extends pulumi.CustomResource {
    /**
     * Get an existing BedrockGuardrail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BedrockGuardrailState, opts?: pulumi.CustomResourceOptions): BedrockGuardrail {
        return new BedrockGuardrail(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/bedrockGuardrail:BedrockGuardrail';

    /**
     * Returns true if the given object is an instance of BedrockGuardrail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BedrockGuardrail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BedrockGuardrail.__pulumiType;
    }

    public readonly blockedInputMessaging!: pulumi.Output<string>;
    public readonly blockedOutputsMessaging!: pulumi.Output<string>;
    public readonly contentPolicyConfigs!: pulumi.Output<outputs.BedrockGuardrailContentPolicyConfig[] | undefined>;
    public readonly contextualGroundingPolicyConfigs!: pulumi.Output<outputs.BedrockGuardrailContextualGroundingPolicyConfig[] | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly guardrailArn!: pulumi.Output<string>;
    public /*out*/ readonly guardrailId!: pulumi.Output<string>;
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly sensitiveInformationPolicyConfigs!: pulumi.Output<outputs.BedrockGuardrailSensitiveInformationPolicyConfig[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.BedrockGuardrailTimeouts | undefined>;
    public readonly topicPolicyConfigs!: pulumi.Output<outputs.BedrockGuardrailTopicPolicyConfig[] | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly wordPolicyConfigs!: pulumi.Output<outputs.BedrockGuardrailWordPolicyConfig[] | undefined>;

    /**
     * Create a BedrockGuardrail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BedrockGuardrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BedrockGuardrailArgs | BedrockGuardrailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BedrockGuardrailState | undefined;
            resourceInputs["blockedInputMessaging"] = state ? state.blockedInputMessaging : undefined;
            resourceInputs["blockedOutputsMessaging"] = state ? state.blockedOutputsMessaging : undefined;
            resourceInputs["contentPolicyConfigs"] = state ? state.contentPolicyConfigs : undefined;
            resourceInputs["contextualGroundingPolicyConfigs"] = state ? state.contextualGroundingPolicyConfigs : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["guardrailArn"] = state ? state.guardrailArn : undefined;
            resourceInputs["guardrailId"] = state ? state.guardrailId : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sensitiveInformationPolicyConfigs"] = state ? state.sensitiveInformationPolicyConfigs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topicPolicyConfigs"] = state ? state.topicPolicyConfigs : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["wordPolicyConfigs"] = state ? state.wordPolicyConfigs : undefined;
        } else {
            const args = argsOrState as BedrockGuardrailArgs | undefined;
            if ((!args || args.blockedInputMessaging === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockedInputMessaging'");
            }
            if ((!args || args.blockedOutputsMessaging === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockedOutputsMessaging'");
            }
            resourceInputs["blockedInputMessaging"] = args ? args.blockedInputMessaging : undefined;
            resourceInputs["blockedOutputsMessaging"] = args ? args.blockedOutputsMessaging : undefined;
            resourceInputs["contentPolicyConfigs"] = args ? args.contentPolicyConfigs : undefined;
            resourceInputs["contextualGroundingPolicyConfigs"] = args ? args.contextualGroundingPolicyConfigs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sensitiveInformationPolicyConfigs"] = args ? args.sensitiveInformationPolicyConfigs : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topicPolicyConfigs"] = args ? args.topicPolicyConfigs : undefined;
            resourceInputs["wordPolicyConfigs"] = args ? args.wordPolicyConfigs : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["guardrailArn"] = undefined /*out*/;
            resourceInputs["guardrailId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BedrockGuardrail.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BedrockGuardrail resources.
 */
export interface BedrockGuardrailState {
    blockedInputMessaging?: pulumi.Input<string>;
    blockedOutputsMessaging?: pulumi.Input<string>;
    contentPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailContentPolicyConfig>[]>;
    contextualGroundingPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailContextualGroundingPolicyConfig>[]>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    guardrailArn?: pulumi.Input<string>;
    guardrailId?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sensitiveInformationPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailSensitiveInformationPolicyConfig>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BedrockGuardrailTimeouts>;
    topicPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailTopicPolicyConfig>[]>;
    version?: pulumi.Input<string>;
    wordPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailWordPolicyConfig>[]>;
}

/**
 * The set of arguments for constructing a BedrockGuardrail resource.
 */
export interface BedrockGuardrailArgs {
    blockedInputMessaging: pulumi.Input<string>;
    blockedOutputsMessaging: pulumi.Input<string>;
    contentPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailContentPolicyConfig>[]>;
    contextualGroundingPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailContextualGroundingPolicyConfig>[]>;
    description?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    sensitiveInformationPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailSensitiveInformationPolicyConfig>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.BedrockGuardrailTimeouts>;
    topicPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailTopicPolicyConfig>[]>;
    wordPolicyConfigs?: pulumi.Input<pulumi.Input<inputs.BedrockGuardrailWordPolicyConfig>[]>;
}
