// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedshiftSnapshotCopy extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftSnapshotCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftSnapshotCopyState, opts?: pulumi.CustomResourceOptions): RedshiftSnapshotCopy {
        return new RedshiftSnapshotCopy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftSnapshotCopy:RedshiftSnapshotCopy';

    /**
     * Returns true if the given object is an instance of RedshiftSnapshotCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftSnapshotCopy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftSnapshotCopy.__pulumiType;
    }

    public readonly clusterIdentifier!: pulumi.Output<string>;
    public readonly destinationRegion!: pulumi.Output<string>;
    public readonly manualSnapshotRetentionPeriod!: pulumi.Output<number>;
    public readonly retentionPeriod!: pulumi.Output<number>;
    public readonly snapshotCopyGrantName!: pulumi.Output<string | undefined>;

    /**
     * Create a RedshiftSnapshotCopy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftSnapshotCopyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftSnapshotCopyArgs | RedshiftSnapshotCopyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftSnapshotCopyState | undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["destinationRegion"] = state ? state.destinationRegion : undefined;
            resourceInputs["manualSnapshotRetentionPeriod"] = state ? state.manualSnapshotRetentionPeriod : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["snapshotCopyGrantName"] = state ? state.snapshotCopyGrantName : undefined;
        } else {
            const args = argsOrState as RedshiftSnapshotCopyArgs | undefined;
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if ((!args || args.destinationRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationRegion'");
            }
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["destinationRegion"] = args ? args.destinationRegion : undefined;
            resourceInputs["manualSnapshotRetentionPeriod"] = args ? args.manualSnapshotRetentionPeriod : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["snapshotCopyGrantName"] = args ? args.snapshotCopyGrantName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftSnapshotCopy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftSnapshotCopy resources.
 */
export interface RedshiftSnapshotCopyState {
    clusterIdentifier?: pulumi.Input<string>;
    destinationRegion?: pulumi.Input<string>;
    manualSnapshotRetentionPeriod?: pulumi.Input<number>;
    retentionPeriod?: pulumi.Input<number>;
    snapshotCopyGrantName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedshiftSnapshotCopy resource.
 */
export interface RedshiftSnapshotCopyArgs {
    clusterIdentifier: pulumi.Input<string>;
    destinationRegion: pulumi.Input<string>;
    manualSnapshotRetentionPeriod?: pulumi.Input<number>;
    retentionPeriod?: pulumi.Input<number>;
    snapshotCopyGrantName?: pulumi.Input<string>;
}
