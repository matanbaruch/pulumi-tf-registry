// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2ClientVpnRoute extends pulumi.CustomResource {
    /**
     * Get an existing Ec2ClientVpnRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2ClientVpnRouteState, opts?: pulumi.CustomResourceOptions): Ec2ClientVpnRoute {
        return new Ec2ClientVpnRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ec2ClientVpnRoute:Ec2ClientVpnRoute';

    /**
     * Returns true if the given object is an instance of Ec2ClientVpnRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2ClientVpnRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2ClientVpnRoute.__pulumiType;
    }

    public readonly clientVpnEndpointId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    public /*out*/ readonly origin!: pulumi.Output<string>;
    public readonly targetVpcSubnetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.Ec2ClientVpnRouteTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Ec2ClientVpnRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2ClientVpnRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2ClientVpnRouteArgs | Ec2ClientVpnRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2ClientVpnRouteState | undefined;
            resourceInputs["clientVpnEndpointId"] = state ? state.clientVpnEndpointId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["targetVpcSubnetId"] = state ? state.targetVpcSubnetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as Ec2ClientVpnRouteArgs | undefined;
            if ((!args || args.clientVpnEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientVpnEndpointId'");
            }
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.targetVpcSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetVpcSubnetId'");
            }
            resourceInputs["clientVpnEndpointId"] = args ? args.clientVpnEndpointId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["targetVpcSubnetId"] = args ? args.targetVpcSubnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["origin"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2ClientVpnRoute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2ClientVpnRoute resources.
 */
export interface Ec2ClientVpnRouteState {
    clientVpnEndpointId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationCidrBlock?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    targetVpcSubnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Ec2ClientVpnRouteTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2ClientVpnRoute resource.
 */
export interface Ec2ClientVpnRouteArgs {
    clientVpnEndpointId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationCidrBlock: pulumi.Input<string>;
    targetVpcSubnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Ec2ClientVpnRouteTimeouts>;
}
