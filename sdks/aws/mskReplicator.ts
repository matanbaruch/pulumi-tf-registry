// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MskReplicator extends pulumi.CustomResource {
    /**
     * Get an existing MskReplicator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MskReplicatorState, opts?: pulumi.CustomResourceOptions): MskReplicator {
        return new MskReplicator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/mskReplicator:MskReplicator';

    /**
     * Returns true if the given object is an instance of MskReplicator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MskReplicator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MskReplicator.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly currentVersion!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly kafkaClusters!: pulumi.Output<outputs.MskReplicatorKafkaCluster[]>;
    public readonly replicationInfoList!: pulumi.Output<outputs.MskReplicatorReplicationInfoList>;
    public readonly replicatorName!: pulumi.Output<string>;
    public readonly serviceExecutionRoleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.MskReplicatorTimeouts | undefined>;

    /**
     * Create a MskReplicator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MskReplicatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MskReplicatorArgs | MskReplicatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MskReplicatorState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["currentVersion"] = state ? state.currentVersion : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kafkaClusters"] = state ? state.kafkaClusters : undefined;
            resourceInputs["replicationInfoList"] = state ? state.replicationInfoList : undefined;
            resourceInputs["replicatorName"] = state ? state.replicatorName : undefined;
            resourceInputs["serviceExecutionRoleArn"] = state ? state.serviceExecutionRoleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as MskReplicatorArgs | undefined;
            if ((!args || args.kafkaClusters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaClusters'");
            }
            if ((!args || args.replicationInfoList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationInfoList'");
            }
            if ((!args || args.replicatorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicatorName'");
            }
            if ((!args || args.serviceExecutionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceExecutionRoleArn'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kafkaClusters"] = args ? args.kafkaClusters : undefined;
            resourceInputs["replicationInfoList"] = args ? args.replicationInfoList : undefined;
            resourceInputs["replicatorName"] = args ? args.replicatorName : undefined;
            resourceInputs["serviceExecutionRoleArn"] = args ? args.serviceExecutionRoleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["currentVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MskReplicator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MskReplicator resources.
 */
export interface MskReplicatorState {
    arn?: pulumi.Input<string>;
    currentVersion?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    kafkaClusters?: pulumi.Input<pulumi.Input<inputs.MskReplicatorKafkaCluster>[]>;
    replicationInfoList?: pulumi.Input<inputs.MskReplicatorReplicationInfoList>;
    replicatorName?: pulumi.Input<string>;
    serviceExecutionRoleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MskReplicatorTimeouts>;
}

/**
 * The set of arguments for constructing a MskReplicator resource.
 */
export interface MskReplicatorArgs {
    description?: pulumi.Input<string>;
    kafkaClusters: pulumi.Input<pulumi.Input<inputs.MskReplicatorKafkaCluster>[]>;
    replicationInfoList: pulumi.Input<inputs.MskReplicatorReplicationInfoList>;
    replicatorName: pulumi.Input<string>;
    serviceExecutionRoleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.MskReplicatorTimeouts>;
}
