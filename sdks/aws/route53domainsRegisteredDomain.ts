// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Route53domainsRegisteredDomain extends pulumi.CustomResource {
    /**
     * Get an existing Route53domainsRegisteredDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Route53domainsRegisteredDomainState, opts?: pulumi.CustomResourceOptions): Route53domainsRegisteredDomain {
        return new Route53domainsRegisteredDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/route53domainsRegisteredDomain:Route53domainsRegisteredDomain';

    /**
     * Returns true if the given object is an instance of Route53domainsRegisteredDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route53domainsRegisteredDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route53domainsRegisteredDomain.__pulumiType;
    }

    public /*out*/ readonly abuseContactEmail!: pulumi.Output<string>;
    public /*out*/ readonly abuseContactPhone!: pulumi.Output<string>;
    public readonly adminContact!: pulumi.Output<outputs.Route53domainsRegisteredDomainAdminContact | undefined>;
    public readonly adminPrivacy!: pulumi.Output<boolean | undefined>;
    public readonly autoRenew!: pulumi.Output<boolean | undefined>;
    public readonly billingContact!: pulumi.Output<outputs.Route53domainsRegisteredDomainBillingContact | undefined>;
    public readonly billingPrivacy!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    public readonly nameServers!: pulumi.Output<outputs.Route53domainsRegisteredDomainNameServer[] | undefined>;
    public readonly registrantContact!: pulumi.Output<outputs.Route53domainsRegisteredDomainRegistrantContact | undefined>;
    public readonly registrantPrivacy!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly registrarName!: pulumi.Output<string>;
    public /*out*/ readonly registrarUrl!: pulumi.Output<string>;
    public /*out*/ readonly reseller!: pulumi.Output<string>;
    public /*out*/ readonly statusLists!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly techContact!: pulumi.Output<outputs.Route53domainsRegisteredDomainTechContact | undefined>;
    public readonly techPrivacy!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.Route53domainsRegisteredDomainTimeouts | undefined>;
    public readonly transferLock!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly updatedDate!: pulumi.Output<string>;
    public /*out*/ readonly whoisServer!: pulumi.Output<string>;

    /**
     * Create a Route53domainsRegisteredDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Route53domainsRegisteredDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Route53domainsRegisteredDomainArgs | Route53domainsRegisteredDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Route53domainsRegisteredDomainState | undefined;
            resourceInputs["abuseContactEmail"] = state ? state.abuseContactEmail : undefined;
            resourceInputs["abuseContactPhone"] = state ? state.abuseContactPhone : undefined;
            resourceInputs["adminContact"] = state ? state.adminContact : undefined;
            resourceInputs["adminPrivacy"] = state ? state.adminPrivacy : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["billingContact"] = state ? state.billingContact : undefined;
            resourceInputs["billingPrivacy"] = state ? state.billingPrivacy : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["nameServers"] = state ? state.nameServers : undefined;
            resourceInputs["registrantContact"] = state ? state.registrantContact : undefined;
            resourceInputs["registrantPrivacy"] = state ? state.registrantPrivacy : undefined;
            resourceInputs["registrarName"] = state ? state.registrarName : undefined;
            resourceInputs["registrarUrl"] = state ? state.registrarUrl : undefined;
            resourceInputs["reseller"] = state ? state.reseller : undefined;
            resourceInputs["statusLists"] = state ? state.statusLists : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["techContact"] = state ? state.techContact : undefined;
            resourceInputs["techPrivacy"] = state ? state.techPrivacy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["transferLock"] = state ? state.transferLock : undefined;
            resourceInputs["updatedDate"] = state ? state.updatedDate : undefined;
            resourceInputs["whoisServer"] = state ? state.whoisServer : undefined;
        } else {
            const args = argsOrState as Route53domainsRegisteredDomainArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            resourceInputs["adminContact"] = args ? args.adminContact : undefined;
            resourceInputs["adminPrivacy"] = args ? args.adminPrivacy : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["billingContact"] = args ? args.billingContact : undefined;
            resourceInputs["billingPrivacy"] = args ? args.billingPrivacy : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["nameServers"] = args ? args.nameServers : undefined;
            resourceInputs["registrantContact"] = args ? args.registrantContact : undefined;
            resourceInputs["registrantPrivacy"] = args ? args.registrantPrivacy : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["techContact"] = args ? args.techContact : undefined;
            resourceInputs["techPrivacy"] = args ? args.techPrivacy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["transferLock"] = args ? args.transferLock : undefined;
            resourceInputs["abuseContactEmail"] = undefined /*out*/;
            resourceInputs["abuseContactPhone"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["registrarName"] = undefined /*out*/;
            resourceInputs["registrarUrl"] = undefined /*out*/;
            resourceInputs["reseller"] = undefined /*out*/;
            resourceInputs["statusLists"] = undefined /*out*/;
            resourceInputs["updatedDate"] = undefined /*out*/;
            resourceInputs["whoisServer"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route53domainsRegisteredDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route53domainsRegisteredDomain resources.
 */
export interface Route53domainsRegisteredDomainState {
    abuseContactEmail?: pulumi.Input<string>;
    abuseContactPhone?: pulumi.Input<string>;
    adminContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainAdminContact>;
    adminPrivacy?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<boolean>;
    billingContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainBillingContact>;
    billingPrivacy?: pulumi.Input<boolean>;
    creationDate?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    expirationDate?: pulumi.Input<string>;
    nameServers?: pulumi.Input<pulumi.Input<inputs.Route53domainsRegisteredDomainNameServer>[]>;
    registrantContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainRegistrantContact>;
    registrantPrivacy?: pulumi.Input<boolean>;
    registrarName?: pulumi.Input<string>;
    registrarUrl?: pulumi.Input<string>;
    reseller?: pulumi.Input<string>;
    statusLists?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    techContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainTechContact>;
    techPrivacy?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.Route53domainsRegisteredDomainTimeouts>;
    transferLock?: pulumi.Input<boolean>;
    updatedDate?: pulumi.Input<string>;
    whoisServer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route53domainsRegisteredDomain resource.
 */
export interface Route53domainsRegisteredDomainArgs {
    adminContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainAdminContact>;
    adminPrivacy?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<boolean>;
    billingContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainBillingContact>;
    billingPrivacy?: pulumi.Input<boolean>;
    domainName: pulumi.Input<string>;
    nameServers?: pulumi.Input<pulumi.Input<inputs.Route53domainsRegisteredDomainNameServer>[]>;
    registrantContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainRegistrantContact>;
    registrantPrivacy?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    techContact?: pulumi.Input<inputs.Route53domainsRegisteredDomainTechContact>;
    techPrivacy?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.Route53domainsRegisteredDomainTimeouts>;
    transferLock?: pulumi.Input<boolean>;
}
