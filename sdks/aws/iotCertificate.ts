// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IotCertificate extends pulumi.CustomResource {
    /**
     * Get an existing IotCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotCertificateState, opts?: pulumi.CustomResourceOptions): IotCertificate {
        return new IotCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/iotCertificate:IotCertificate';

    /**
     * Returns true if the given object is an instance of IotCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotCertificate.__pulumiType;
    }

    public readonly active!: pulumi.Output<boolean>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly caCertificateId!: pulumi.Output<string>;
    public readonly caPem!: pulumi.Output<string | undefined>;
    public readonly certificatePem!: pulumi.Output<string>;
    public readonly csr!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;

    /**
     * Create a IotCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotCertificateArgs | IotCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotCertificateState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["caPem"] = state ? state.caPem : undefined;
            resourceInputs["certificatePem"] = state ? state.certificatePem : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as IotCertificateArgs | undefined;
            if ((!args || args.active === undefined) && !opts.urn) {
                throw new Error("Missing required property 'active'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["caPem"] = args?.caPem ? pulumi.secret(args.caPem) : undefined;
            resourceInputs["certificatePem"] = args?.certificatePem ? pulumi.secret(args.certificatePem) : undefined;
            resourceInputs["csr"] = args ? args.csr : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["caCertificateId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["caPem", "certificatePem", "privateKey", "publicKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IotCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotCertificate resources.
 */
export interface IotCertificateState {
    active?: pulumi.Input<boolean>;
    arn?: pulumi.Input<string>;
    caCertificateId?: pulumi.Input<string>;
    caPem?: pulumi.Input<string>;
    certificatePem?: pulumi.Input<string>;
    csr?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IotCertificate resource.
 */
export interface IotCertificateArgs {
    active: pulumi.Input<boolean>;
    caPem?: pulumi.Input<string>;
    certificatePem?: pulumi.Input<string>;
    csr?: pulumi.Input<string>;
}
