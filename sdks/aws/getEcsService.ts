// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEcsService(args: GetEcsServiceArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsServiceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEcsService:getEcsService", {
        "clusterArn": args.clusterArn,
        "id": args.id,
        "serviceName": args.serviceName,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsService.
 */
export interface GetEcsServiceArgs {
    clusterArn: string;
    id?: string;
    serviceName: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getEcsService.
 */
export interface GetEcsServiceResult {
    readonly arn: string;
    readonly clusterArn: string;
    readonly desiredCount: number;
    readonly id: string;
    readonly launchType: string;
    readonly schedulingStrategy: string;
    readonly serviceName: string;
    readonly tags: {[key: string]: string};
    readonly taskDefinition: string;
}
export function getEcsServiceOutput(args: GetEcsServiceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsServiceResult> {
    return pulumi.output(args).apply((a: any) => getEcsService(a, opts))
}

/**
 * A collection of arguments for invoking getEcsService.
 */
export interface GetEcsServiceOutputArgs {
    clusterArn: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
