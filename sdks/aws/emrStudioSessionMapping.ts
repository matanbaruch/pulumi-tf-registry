// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EmrStudioSessionMapping extends pulumi.CustomResource {
    /**
     * Get an existing EmrStudioSessionMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EmrStudioSessionMappingState, opts?: pulumi.CustomResourceOptions): EmrStudioSessionMapping {
        return new EmrStudioSessionMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/emrStudioSessionMapping:EmrStudioSessionMapping';

    /**
     * Returns true if the given object is an instance of EmrStudioSessionMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EmrStudioSessionMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EmrStudioSessionMapping.__pulumiType;
    }

    public readonly identityId!: pulumi.Output<string>;
    public readonly identityName!: pulumi.Output<string>;
    public readonly identityType!: pulumi.Output<string>;
    public readonly sessionPolicyArn!: pulumi.Output<string>;
    public readonly studioId!: pulumi.Output<string>;

    /**
     * Create a EmrStudioSessionMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EmrStudioSessionMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EmrStudioSessionMappingArgs | EmrStudioSessionMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EmrStudioSessionMappingState | undefined;
            resourceInputs["identityId"] = state ? state.identityId : undefined;
            resourceInputs["identityName"] = state ? state.identityName : undefined;
            resourceInputs["identityType"] = state ? state.identityType : undefined;
            resourceInputs["sessionPolicyArn"] = state ? state.sessionPolicyArn : undefined;
            resourceInputs["studioId"] = state ? state.studioId : undefined;
        } else {
            const args = argsOrState as EmrStudioSessionMappingArgs | undefined;
            if ((!args || args.identityType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityType'");
            }
            if ((!args || args.sessionPolicyArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionPolicyArn'");
            }
            if ((!args || args.studioId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'studioId'");
            }
            resourceInputs["identityId"] = args ? args.identityId : undefined;
            resourceInputs["identityName"] = args ? args.identityName : undefined;
            resourceInputs["identityType"] = args ? args.identityType : undefined;
            resourceInputs["sessionPolicyArn"] = args ? args.sessionPolicyArn : undefined;
            resourceInputs["studioId"] = args ? args.studioId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EmrStudioSessionMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EmrStudioSessionMapping resources.
 */
export interface EmrStudioSessionMappingState {
    identityId?: pulumi.Input<string>;
    identityName?: pulumi.Input<string>;
    identityType?: pulumi.Input<string>;
    sessionPolicyArn?: pulumi.Input<string>;
    studioId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EmrStudioSessionMapping resource.
 */
export interface EmrStudioSessionMappingArgs {
    identityId?: pulumi.Input<string>;
    identityName?: pulumi.Input<string>;
    identityType: pulumi.Input<string>;
    sessionPolicyArn: pulumi.Input<string>;
    studioId: pulumi.Input<string>;
}
