// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RekognitionStreamProcessor extends pulumi.CustomResource {
    /**
     * Get an existing RekognitionStreamProcessor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RekognitionStreamProcessorState, opts?: pulumi.CustomResourceOptions): RekognitionStreamProcessor {
        return new RekognitionStreamProcessor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/rekognitionStreamProcessor:RekognitionStreamProcessor';

    /**
     * Returns true if the given object is an instance of RekognitionStreamProcessor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RekognitionStreamProcessor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RekognitionStreamProcessor.__pulumiType;
    }

    /**
     * Shows whether you are sharing data with Rekognition to improve model performance.
     */
    public readonly dataSharingPreferences!: pulumi.Output<outputs.RekognitionStreamProcessorDataSharingPreference[] | undefined>;
    /**
     * Information about the source streaming video.
     */
    public readonly inputs!: pulumi.Output<outputs.RekognitionStreamProcessorInput[] | undefined>;
    /**
     * The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of
     * your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * An identifier you assign to the stream processor.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and
     * completion status of a video analysis operation.
     */
    public readonly notificationChannels!: pulumi.Output<outputs.RekognitionStreamProcessorNotificationChannel[] | undefined>;
    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results.
     */
    public readonly outputs!: pulumi.Output<outputs.RekognitionStreamProcessorOutput[] | undefined>;
    public readonly regionsOfInterests!: pulumi.Output<outputs.RekognitionStreamProcessorRegionsOfInterest[] | undefined>;
    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Input parameters used in a streaming video analyzed by a stream processor.
     */
    public readonly settings!: pulumi.Output<outputs.RekognitionStreamProcessorSetting[] | undefined>;
    public /*out*/ readonly streamProcessorArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.RekognitionStreamProcessorTimeouts | undefined>;

    /**
     * Create a RekognitionStreamProcessor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RekognitionStreamProcessorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RekognitionStreamProcessorArgs | RekognitionStreamProcessorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RekognitionStreamProcessorState | undefined;
            resourceInputs["dataSharingPreferences"] = state ? state.dataSharingPreferences : undefined;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationChannels"] = state ? state.notificationChannels : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["regionsOfInterests"] = state ? state.regionsOfInterests : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["streamProcessorArn"] = state ? state.streamProcessorArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RekognitionStreamProcessorArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["dataSharingPreferences"] = args ? args.dataSharingPreferences : undefined;
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationChannels"] = args ? args.notificationChannels : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["regionsOfInterests"] = args ? args.regionsOfInterests : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["streamProcessorArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RekognitionStreamProcessor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RekognitionStreamProcessor resources.
 */
export interface RekognitionStreamProcessorState {
    /**
     * Shows whether you are sharing data with Rekognition to improve model performance.
     */
    dataSharingPreferences?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorDataSharingPreference>[]>;
    /**
     * Information about the source streaming video.
     */
    inputs?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorInput>[]>;
    /**
     * The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of
     * your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * An identifier you assign to the stream processor.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and
     * completion status of a video analysis operation.
     */
    notificationChannels?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorNotificationChannel>[]>;
    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorOutput>[]>;
    regionsOfInterests?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorRegionsOfInterest>[]>;
    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Input parameters used in a streaming video analyzed by a stream processor.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorSetting>[]>;
    streamProcessorArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RekognitionStreamProcessorTimeouts>;
}

/**
 * The set of arguments for constructing a RekognitionStreamProcessor resource.
 */
export interface RekognitionStreamProcessorArgs {
    /**
     * Shows whether you are sharing data with Rekognition to improve model performance.
     */
    dataSharingPreferences?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorDataSharingPreference>[]>;
    /**
     * Information about the source streaming video.
     */
    inputs?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorInput>[]>;
    /**
     * The identifier for your AWS Key Management Service key (AWS KMS key). You can supply the Amazon Resource Name (ARN) of
     * your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * An identifier you assign to the stream processor.
     */
    name?: pulumi.Input<string>;
    /**
     * The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and
     * completion status of a video analysis operation.
     */
    notificationChannels?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorNotificationChannel>[]>;
    /**
     * Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorOutput>[]>;
    regionsOfInterests?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorRegionsOfInterest>[]>;
    /**
     * The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor.
     */
    roleArn: pulumi.Input<string>;
    /**
     * Input parameters used in a streaming video analyzed by a stream processor.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.RekognitionStreamProcessorSetting>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RekognitionStreamProcessorTimeouts>;
}
