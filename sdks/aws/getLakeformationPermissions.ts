// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLakeformationPermissions(args: GetLakeformationPermissionsArgs, opts?: pulumi.InvokeOptions): Promise<GetLakeformationPermissionsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getLakeformationPermissions:getLakeformationPermissions", {
        "catalogId": args.catalogId,
        "catalogResource": args.catalogResource,
        "dataCellsFilter": args.dataCellsFilter,
        "dataLocation": args.dataLocation,
        "database": args.database,
        "id": args.id,
        "lfTag": args.lfTag,
        "lfTagPolicy": args.lfTagPolicy,
        "principal": args.principal,
        "table": args.table,
        "tableWithColumns": args.tableWithColumns,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLakeformationPermissions.
 */
export interface GetLakeformationPermissionsArgs {
    catalogId?: string;
    catalogResource?: boolean;
    dataCellsFilter?: inputs.GetLakeformationPermissionsDataCellsFilter;
    dataLocation?: inputs.GetLakeformationPermissionsDataLocation;
    database?: inputs.GetLakeformationPermissionsDatabase;
    id?: string;
    lfTag?: inputs.GetLakeformationPermissionsLfTag;
    lfTagPolicy?: inputs.GetLakeformationPermissionsLfTagPolicy;
    principal: string;
    table?: inputs.GetLakeformationPermissionsTable;
    tableWithColumns?: inputs.GetLakeformationPermissionsTableWithColumns;
}

/**
 * A collection of values returned by getLakeformationPermissions.
 */
export interface GetLakeformationPermissionsResult {
    readonly catalogId?: string;
    readonly catalogResource?: boolean;
    readonly dataCellsFilter?: outputs.GetLakeformationPermissionsDataCellsFilter;
    readonly dataLocation?: outputs.GetLakeformationPermissionsDataLocation;
    readonly database?: outputs.GetLakeformationPermissionsDatabase;
    readonly id: string;
    readonly lfTag?: outputs.GetLakeformationPermissionsLfTag;
    readonly lfTagPolicy?: outputs.GetLakeformationPermissionsLfTagPolicy;
    readonly permissions: string[];
    readonly permissionsWithGrantOptions: string[];
    readonly principal: string;
    readonly table?: outputs.GetLakeformationPermissionsTable;
    readonly tableWithColumns?: outputs.GetLakeformationPermissionsTableWithColumns;
}
export function getLakeformationPermissionsOutput(args: GetLakeformationPermissionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLakeformationPermissionsResult> {
    return pulumi.output(args).apply((a: any) => getLakeformationPermissions(a, opts))
}

/**
 * A collection of arguments for invoking getLakeformationPermissions.
 */
export interface GetLakeformationPermissionsOutputArgs {
    catalogId?: pulumi.Input<string>;
    catalogResource?: pulumi.Input<boolean>;
    dataCellsFilter?: pulumi.Input<inputs.GetLakeformationPermissionsDataCellsFilterArgs>;
    dataLocation?: pulumi.Input<inputs.GetLakeformationPermissionsDataLocationArgs>;
    database?: pulumi.Input<inputs.GetLakeformationPermissionsDatabaseArgs>;
    id?: pulumi.Input<string>;
    lfTag?: pulumi.Input<inputs.GetLakeformationPermissionsLfTagArgs>;
    lfTagPolicy?: pulumi.Input<inputs.GetLakeformationPermissionsLfTagPolicyArgs>;
    principal: pulumi.Input<string>;
    table?: pulumi.Input<inputs.GetLakeformationPermissionsTableArgs>;
    tableWithColumns?: pulumi.Input<inputs.GetLakeformationPermissionsTableWithColumnsArgs>;
}
