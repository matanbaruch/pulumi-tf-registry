// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessanalyzerAnalyzerArgs, AccessanalyzerAnalyzerState } from "./accessanalyzerAnalyzer";
export type AccessanalyzerAnalyzer = import("./accessanalyzerAnalyzer").AccessanalyzerAnalyzer;
export const AccessanalyzerAnalyzer: typeof import("./accessanalyzerAnalyzer").AccessanalyzerAnalyzer = null as any;
utilities.lazyLoad(exports, ["AccessanalyzerAnalyzer"], () => require("./accessanalyzerAnalyzer"));

export { AccessanalyzerArchiveRuleArgs, AccessanalyzerArchiveRuleState } from "./accessanalyzerArchiveRule";
export type AccessanalyzerArchiveRule = import("./accessanalyzerArchiveRule").AccessanalyzerArchiveRule;
export const AccessanalyzerArchiveRule: typeof import("./accessanalyzerArchiveRule").AccessanalyzerArchiveRule = null as any;
utilities.lazyLoad(exports, ["AccessanalyzerArchiveRule"], () => require("./accessanalyzerArchiveRule"));

export { AccountAlternateContactArgs, AccountAlternateContactState } from "./accountAlternateContact";
export type AccountAlternateContact = import("./accountAlternateContact").AccountAlternateContact;
export const AccountAlternateContact: typeof import("./accountAlternateContact").AccountAlternateContact = null as any;
utilities.lazyLoad(exports, ["AccountAlternateContact"], () => require("./accountAlternateContact"));

export { AccountPrimaryContactArgs, AccountPrimaryContactState } from "./accountPrimaryContact";
export type AccountPrimaryContact = import("./accountPrimaryContact").AccountPrimaryContact;
export const AccountPrimaryContact: typeof import("./accountPrimaryContact").AccountPrimaryContact = null as any;
utilities.lazyLoad(exports, ["AccountPrimaryContact"], () => require("./accountPrimaryContact"));

export { AccountRegionArgs, AccountRegionState } from "./accountRegion";
export type AccountRegion = import("./accountRegion").AccountRegion;
export const AccountRegion: typeof import("./accountRegion").AccountRegion = null as any;
utilities.lazyLoad(exports, ["AccountRegion"], () => require("./accountRegion"));

export { AcmCertificateArgs, AcmCertificateState } from "./acmCertificate";
export type AcmCertificate = import("./acmCertificate").AcmCertificate;
export const AcmCertificate: typeof import("./acmCertificate").AcmCertificate = null as any;
utilities.lazyLoad(exports, ["AcmCertificate"], () => require("./acmCertificate"));

export { AcmCertificateValidationArgs, AcmCertificateValidationState } from "./acmCertificateValidation";
export type AcmCertificateValidation = import("./acmCertificateValidation").AcmCertificateValidation;
export const AcmCertificateValidation: typeof import("./acmCertificateValidation").AcmCertificateValidation = null as any;
utilities.lazyLoad(exports, ["AcmCertificateValidation"], () => require("./acmCertificateValidation"));

export { AcmpcaCertificateArgs, AcmpcaCertificateState } from "./acmpcaCertificate";
export type AcmpcaCertificate = import("./acmpcaCertificate").AcmpcaCertificate;
export const AcmpcaCertificate: typeof import("./acmpcaCertificate").AcmpcaCertificate = null as any;
utilities.lazyLoad(exports, ["AcmpcaCertificate"], () => require("./acmpcaCertificate"));

export { AcmpcaCertificateAuthorityArgs, AcmpcaCertificateAuthorityState } from "./acmpcaCertificateAuthority";
export type AcmpcaCertificateAuthority = import("./acmpcaCertificateAuthority").AcmpcaCertificateAuthority;
export const AcmpcaCertificateAuthority: typeof import("./acmpcaCertificateAuthority").AcmpcaCertificateAuthority = null as any;
utilities.lazyLoad(exports, ["AcmpcaCertificateAuthority"], () => require("./acmpcaCertificateAuthority"));

export { AcmpcaCertificateAuthorityCertificateArgs, AcmpcaCertificateAuthorityCertificateState } from "./acmpcaCertificateAuthorityCertificate";
export type AcmpcaCertificateAuthorityCertificate = import("./acmpcaCertificateAuthorityCertificate").AcmpcaCertificateAuthorityCertificate;
export const AcmpcaCertificateAuthorityCertificate: typeof import("./acmpcaCertificateAuthorityCertificate").AcmpcaCertificateAuthorityCertificate = null as any;
utilities.lazyLoad(exports, ["AcmpcaCertificateAuthorityCertificate"], () => require("./acmpcaCertificateAuthorityCertificate"));

export { AcmpcaPermissionArgs, AcmpcaPermissionState } from "./acmpcaPermission";
export type AcmpcaPermission = import("./acmpcaPermission").AcmpcaPermission;
export const AcmpcaPermission: typeof import("./acmpcaPermission").AcmpcaPermission = null as any;
utilities.lazyLoad(exports, ["AcmpcaPermission"], () => require("./acmpcaPermission"));

export { AcmpcaPolicyArgs, AcmpcaPolicyState } from "./acmpcaPolicy";
export type AcmpcaPolicy = import("./acmpcaPolicy").AcmpcaPolicy;
export const AcmpcaPolicy: typeof import("./acmpcaPolicy").AcmpcaPolicy = null as any;
utilities.lazyLoad(exports, ["AcmpcaPolicy"], () => require("./acmpcaPolicy"));

export { AlbArgs, AlbState } from "./alb";
export type Alb = import("./alb").Alb;
export const Alb: typeof import("./alb").Alb = null as any;
utilities.lazyLoad(exports, ["Alb"], () => require("./alb"));

export { AlbListenerArgs, AlbListenerState } from "./albListener";
export type AlbListener = import("./albListener").AlbListener;
export const AlbListener: typeof import("./albListener").AlbListener = null as any;
utilities.lazyLoad(exports, ["AlbListener"], () => require("./albListener"));

export { AlbListenerCertificateArgs, AlbListenerCertificateState } from "./albListenerCertificate";
export type AlbListenerCertificate = import("./albListenerCertificate").AlbListenerCertificate;
export const AlbListenerCertificate: typeof import("./albListenerCertificate").AlbListenerCertificate = null as any;
utilities.lazyLoad(exports, ["AlbListenerCertificate"], () => require("./albListenerCertificate"));

export { AlbListenerRuleArgs, AlbListenerRuleState } from "./albListenerRule";
export type AlbListenerRule = import("./albListenerRule").AlbListenerRule;
export const AlbListenerRule: typeof import("./albListenerRule").AlbListenerRule = null as any;
utilities.lazyLoad(exports, ["AlbListenerRule"], () => require("./albListenerRule"));

export { AlbTargetGroupArgs, AlbTargetGroupState } from "./albTargetGroup";
export type AlbTargetGroup = import("./albTargetGroup").AlbTargetGroup;
export const AlbTargetGroup: typeof import("./albTargetGroup").AlbTargetGroup = null as any;
utilities.lazyLoad(exports, ["AlbTargetGroup"], () => require("./albTargetGroup"));

export { AlbTargetGroupAttachmentArgs, AlbTargetGroupAttachmentState } from "./albTargetGroupAttachment";
export type AlbTargetGroupAttachment = import("./albTargetGroupAttachment").AlbTargetGroupAttachment;
export const AlbTargetGroupAttachment: typeof import("./albTargetGroupAttachment").AlbTargetGroupAttachment = null as any;
utilities.lazyLoad(exports, ["AlbTargetGroupAttachment"], () => require("./albTargetGroupAttachment"));

export { AmiArgs, AmiState } from "./ami";
export type Ami = import("./ami").Ami;
export const Ami: typeof import("./ami").Ami = null as any;
utilities.lazyLoad(exports, ["Ami"], () => require("./ami"));

export { AmiCopyArgs, AmiCopyState } from "./amiCopy";
export type AmiCopy = import("./amiCopy").AmiCopy;
export const AmiCopy: typeof import("./amiCopy").AmiCopy = null as any;
utilities.lazyLoad(exports, ["AmiCopy"], () => require("./amiCopy"));

export { AmiFromInstanceArgs, AmiFromInstanceState } from "./amiFromInstance";
export type AmiFromInstance = import("./amiFromInstance").AmiFromInstance;
export const AmiFromInstance: typeof import("./amiFromInstance").AmiFromInstance = null as any;
utilities.lazyLoad(exports, ["AmiFromInstance"], () => require("./amiFromInstance"));

export { AmiLaunchPermissionArgs, AmiLaunchPermissionState } from "./amiLaunchPermission";
export type AmiLaunchPermission = import("./amiLaunchPermission").AmiLaunchPermission;
export const AmiLaunchPermission: typeof import("./amiLaunchPermission").AmiLaunchPermission = null as any;
utilities.lazyLoad(exports, ["AmiLaunchPermission"], () => require("./amiLaunchPermission"));

export { AmplifyAppArgs, AmplifyAppState } from "./amplifyApp";
export type AmplifyApp = import("./amplifyApp").AmplifyApp;
export const AmplifyApp: typeof import("./amplifyApp").AmplifyApp = null as any;
utilities.lazyLoad(exports, ["AmplifyApp"], () => require("./amplifyApp"));

export { AmplifyBackendEnvironmentArgs, AmplifyBackendEnvironmentState } from "./amplifyBackendEnvironment";
export type AmplifyBackendEnvironment = import("./amplifyBackendEnvironment").AmplifyBackendEnvironment;
export const AmplifyBackendEnvironment: typeof import("./amplifyBackendEnvironment").AmplifyBackendEnvironment = null as any;
utilities.lazyLoad(exports, ["AmplifyBackendEnvironment"], () => require("./amplifyBackendEnvironment"));

export { AmplifyBranchArgs, AmplifyBranchState } from "./amplifyBranch";
export type AmplifyBranch = import("./amplifyBranch").AmplifyBranch;
export const AmplifyBranch: typeof import("./amplifyBranch").AmplifyBranch = null as any;
utilities.lazyLoad(exports, ["AmplifyBranch"], () => require("./amplifyBranch"));

export { AmplifyDomainAssociationArgs, AmplifyDomainAssociationState } from "./amplifyDomainAssociation";
export type AmplifyDomainAssociation = import("./amplifyDomainAssociation").AmplifyDomainAssociation;
export const AmplifyDomainAssociation: typeof import("./amplifyDomainAssociation").AmplifyDomainAssociation = null as any;
utilities.lazyLoad(exports, ["AmplifyDomainAssociation"], () => require("./amplifyDomainAssociation"));

export { AmplifyWebhookArgs, AmplifyWebhookState } from "./amplifyWebhook";
export type AmplifyWebhook = import("./amplifyWebhook").AmplifyWebhook;
export const AmplifyWebhook: typeof import("./amplifyWebhook").AmplifyWebhook = null as any;
utilities.lazyLoad(exports, ["AmplifyWebhook"], () => require("./amplifyWebhook"));

export { ApiGatewayAccountArgs, ApiGatewayAccountState } from "./apiGatewayAccount";
export type ApiGatewayAccount = import("./apiGatewayAccount").ApiGatewayAccount;
export const ApiGatewayAccount: typeof import("./apiGatewayAccount").ApiGatewayAccount = null as any;
utilities.lazyLoad(exports, ["ApiGatewayAccount"], () => require("./apiGatewayAccount"));

export { ApiGatewayApiKeyArgs, ApiGatewayApiKeyState } from "./apiGatewayApiKey";
export type ApiGatewayApiKey = import("./apiGatewayApiKey").ApiGatewayApiKey;
export const ApiGatewayApiKey: typeof import("./apiGatewayApiKey").ApiGatewayApiKey = null as any;
utilities.lazyLoad(exports, ["ApiGatewayApiKey"], () => require("./apiGatewayApiKey"));

export { ApiGatewayAuthorizerArgs, ApiGatewayAuthorizerState } from "./apiGatewayAuthorizer";
export type ApiGatewayAuthorizer = import("./apiGatewayAuthorizer").ApiGatewayAuthorizer;
export const ApiGatewayAuthorizer: typeof import("./apiGatewayAuthorizer").ApiGatewayAuthorizer = null as any;
utilities.lazyLoad(exports, ["ApiGatewayAuthorizer"], () => require("./apiGatewayAuthorizer"));

export { ApiGatewayBasePathMappingArgs, ApiGatewayBasePathMappingState } from "./apiGatewayBasePathMapping";
export type ApiGatewayBasePathMapping = import("./apiGatewayBasePathMapping").ApiGatewayBasePathMapping;
export const ApiGatewayBasePathMapping: typeof import("./apiGatewayBasePathMapping").ApiGatewayBasePathMapping = null as any;
utilities.lazyLoad(exports, ["ApiGatewayBasePathMapping"], () => require("./apiGatewayBasePathMapping"));

export { ApiGatewayClientCertificateArgs, ApiGatewayClientCertificateState } from "./apiGatewayClientCertificate";
export type ApiGatewayClientCertificate = import("./apiGatewayClientCertificate").ApiGatewayClientCertificate;
export const ApiGatewayClientCertificate: typeof import("./apiGatewayClientCertificate").ApiGatewayClientCertificate = null as any;
utilities.lazyLoad(exports, ["ApiGatewayClientCertificate"], () => require("./apiGatewayClientCertificate"));

export { ApiGatewayDeploymentArgs, ApiGatewayDeploymentState } from "./apiGatewayDeployment";
export type ApiGatewayDeployment = import("./apiGatewayDeployment").ApiGatewayDeployment;
export const ApiGatewayDeployment: typeof import("./apiGatewayDeployment").ApiGatewayDeployment = null as any;
utilities.lazyLoad(exports, ["ApiGatewayDeployment"], () => require("./apiGatewayDeployment"));

export { ApiGatewayDocumentationPartArgs, ApiGatewayDocumentationPartState } from "./apiGatewayDocumentationPart";
export type ApiGatewayDocumentationPart = import("./apiGatewayDocumentationPart").ApiGatewayDocumentationPart;
export const ApiGatewayDocumentationPart: typeof import("./apiGatewayDocumentationPart").ApiGatewayDocumentationPart = null as any;
utilities.lazyLoad(exports, ["ApiGatewayDocumentationPart"], () => require("./apiGatewayDocumentationPart"));

export { ApiGatewayDocumentationVersionArgs, ApiGatewayDocumentationVersionState } from "./apiGatewayDocumentationVersion";
export type ApiGatewayDocumentationVersion = import("./apiGatewayDocumentationVersion").ApiGatewayDocumentationVersion;
export const ApiGatewayDocumentationVersion: typeof import("./apiGatewayDocumentationVersion").ApiGatewayDocumentationVersion = null as any;
utilities.lazyLoad(exports, ["ApiGatewayDocumentationVersion"], () => require("./apiGatewayDocumentationVersion"));

export { ApiGatewayDomainNameArgs, ApiGatewayDomainNameState } from "./apiGatewayDomainName";
export type ApiGatewayDomainName = import("./apiGatewayDomainName").ApiGatewayDomainName;
export const ApiGatewayDomainName: typeof import("./apiGatewayDomainName").ApiGatewayDomainName = null as any;
utilities.lazyLoad(exports, ["ApiGatewayDomainName"], () => require("./apiGatewayDomainName"));

export { ApiGatewayGatewayResponseArgs, ApiGatewayGatewayResponseState } from "./apiGatewayGatewayResponse";
export type ApiGatewayGatewayResponse = import("./apiGatewayGatewayResponse").ApiGatewayGatewayResponse;
export const ApiGatewayGatewayResponse: typeof import("./apiGatewayGatewayResponse").ApiGatewayGatewayResponse = null as any;
utilities.lazyLoad(exports, ["ApiGatewayGatewayResponse"], () => require("./apiGatewayGatewayResponse"));

export { ApiGatewayIntegrationArgs, ApiGatewayIntegrationState } from "./apiGatewayIntegration";
export type ApiGatewayIntegration = import("./apiGatewayIntegration").ApiGatewayIntegration;
export const ApiGatewayIntegration: typeof import("./apiGatewayIntegration").ApiGatewayIntegration = null as any;
utilities.lazyLoad(exports, ["ApiGatewayIntegration"], () => require("./apiGatewayIntegration"));

export { ApiGatewayIntegrationResponseArgs, ApiGatewayIntegrationResponseState } from "./apiGatewayIntegrationResponse";
export type ApiGatewayIntegrationResponse = import("./apiGatewayIntegrationResponse").ApiGatewayIntegrationResponse;
export const ApiGatewayIntegrationResponse: typeof import("./apiGatewayIntegrationResponse").ApiGatewayIntegrationResponse = null as any;
utilities.lazyLoad(exports, ["ApiGatewayIntegrationResponse"], () => require("./apiGatewayIntegrationResponse"));

export { ApiGatewayMethodArgs, ApiGatewayMethodState } from "./apiGatewayMethod";
export type ApiGatewayMethod = import("./apiGatewayMethod").ApiGatewayMethod;
export const ApiGatewayMethod: typeof import("./apiGatewayMethod").ApiGatewayMethod = null as any;
utilities.lazyLoad(exports, ["ApiGatewayMethod"], () => require("./apiGatewayMethod"));

export { ApiGatewayMethodResponseArgs, ApiGatewayMethodResponseState } from "./apiGatewayMethodResponse";
export type ApiGatewayMethodResponse = import("./apiGatewayMethodResponse").ApiGatewayMethodResponse;
export const ApiGatewayMethodResponse: typeof import("./apiGatewayMethodResponse").ApiGatewayMethodResponse = null as any;
utilities.lazyLoad(exports, ["ApiGatewayMethodResponse"], () => require("./apiGatewayMethodResponse"));

export { ApiGatewayMethodSettingsArgs, ApiGatewayMethodSettingsState } from "./apiGatewayMethodSettings";
export type ApiGatewayMethodSettings = import("./apiGatewayMethodSettings").ApiGatewayMethodSettings;
export const ApiGatewayMethodSettings: typeof import("./apiGatewayMethodSettings").ApiGatewayMethodSettings = null as any;
utilities.lazyLoad(exports, ["ApiGatewayMethodSettings"], () => require("./apiGatewayMethodSettings"));

export { ApiGatewayModelArgs, ApiGatewayModelState } from "./apiGatewayModel";
export type ApiGatewayModel = import("./apiGatewayModel").ApiGatewayModel;
export const ApiGatewayModel: typeof import("./apiGatewayModel").ApiGatewayModel = null as any;
utilities.lazyLoad(exports, ["ApiGatewayModel"], () => require("./apiGatewayModel"));

export { ApiGatewayRequestValidatorArgs, ApiGatewayRequestValidatorState } from "./apiGatewayRequestValidator";
export type ApiGatewayRequestValidator = import("./apiGatewayRequestValidator").ApiGatewayRequestValidator;
export const ApiGatewayRequestValidator: typeof import("./apiGatewayRequestValidator").ApiGatewayRequestValidator = null as any;
utilities.lazyLoad(exports, ["ApiGatewayRequestValidator"], () => require("./apiGatewayRequestValidator"));

export { ApiGatewayResourceArgs, ApiGatewayResourceState } from "./apiGatewayResource";
export type ApiGatewayResource = import("./apiGatewayResource").ApiGatewayResource;
export const ApiGatewayResource: typeof import("./apiGatewayResource").ApiGatewayResource = null as any;
utilities.lazyLoad(exports, ["ApiGatewayResource"], () => require("./apiGatewayResource"));

export { ApiGatewayRestApiArgs, ApiGatewayRestApiState } from "./apiGatewayRestApi";
export type ApiGatewayRestApi = import("./apiGatewayRestApi").ApiGatewayRestApi;
export const ApiGatewayRestApi: typeof import("./apiGatewayRestApi").ApiGatewayRestApi = null as any;
utilities.lazyLoad(exports, ["ApiGatewayRestApi"], () => require("./apiGatewayRestApi"));

export { ApiGatewayRestApiPolicyArgs, ApiGatewayRestApiPolicyState } from "./apiGatewayRestApiPolicy";
export type ApiGatewayRestApiPolicy = import("./apiGatewayRestApiPolicy").ApiGatewayRestApiPolicy;
export const ApiGatewayRestApiPolicy: typeof import("./apiGatewayRestApiPolicy").ApiGatewayRestApiPolicy = null as any;
utilities.lazyLoad(exports, ["ApiGatewayRestApiPolicy"], () => require("./apiGatewayRestApiPolicy"));

export { ApiGatewayStageArgs, ApiGatewayStageState } from "./apiGatewayStage";
export type ApiGatewayStage = import("./apiGatewayStage").ApiGatewayStage;
export const ApiGatewayStage: typeof import("./apiGatewayStage").ApiGatewayStage = null as any;
utilities.lazyLoad(exports, ["ApiGatewayStage"], () => require("./apiGatewayStage"));

export { ApiGatewayUsagePlanArgs, ApiGatewayUsagePlanState } from "./apiGatewayUsagePlan";
export type ApiGatewayUsagePlan = import("./apiGatewayUsagePlan").ApiGatewayUsagePlan;
export const ApiGatewayUsagePlan: typeof import("./apiGatewayUsagePlan").ApiGatewayUsagePlan = null as any;
utilities.lazyLoad(exports, ["ApiGatewayUsagePlan"], () => require("./apiGatewayUsagePlan"));

export { ApiGatewayUsagePlanKeyArgs, ApiGatewayUsagePlanKeyState } from "./apiGatewayUsagePlanKey";
export type ApiGatewayUsagePlanKey = import("./apiGatewayUsagePlanKey").ApiGatewayUsagePlanKey;
export const ApiGatewayUsagePlanKey: typeof import("./apiGatewayUsagePlanKey").ApiGatewayUsagePlanKey = null as any;
utilities.lazyLoad(exports, ["ApiGatewayUsagePlanKey"], () => require("./apiGatewayUsagePlanKey"));

export { ApiGatewayVpcLinkArgs, ApiGatewayVpcLinkState } from "./apiGatewayVpcLink";
export type ApiGatewayVpcLink = import("./apiGatewayVpcLink").ApiGatewayVpcLink;
export const ApiGatewayVpcLink: typeof import("./apiGatewayVpcLink").ApiGatewayVpcLink = null as any;
utilities.lazyLoad(exports, ["ApiGatewayVpcLink"], () => require("./apiGatewayVpcLink"));

export { Apigatewayv2ApiArgs, Apigatewayv2ApiState } from "./apigatewayv2Api";
export type Apigatewayv2Api = import("./apigatewayv2Api").Apigatewayv2Api;
export const Apigatewayv2Api: typeof import("./apigatewayv2Api").Apigatewayv2Api = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Api"], () => require("./apigatewayv2Api"));

export { Apigatewayv2ApiMappingArgs, Apigatewayv2ApiMappingState } from "./apigatewayv2ApiMapping";
export type Apigatewayv2ApiMapping = import("./apigatewayv2ApiMapping").Apigatewayv2ApiMapping;
export const Apigatewayv2ApiMapping: typeof import("./apigatewayv2ApiMapping").Apigatewayv2ApiMapping = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2ApiMapping"], () => require("./apigatewayv2ApiMapping"));

export { Apigatewayv2AuthorizerArgs, Apigatewayv2AuthorizerState } from "./apigatewayv2Authorizer";
export type Apigatewayv2Authorizer = import("./apigatewayv2Authorizer").Apigatewayv2Authorizer;
export const Apigatewayv2Authorizer: typeof import("./apigatewayv2Authorizer").Apigatewayv2Authorizer = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Authorizer"], () => require("./apigatewayv2Authorizer"));

export { Apigatewayv2DeploymentArgs, Apigatewayv2DeploymentState } from "./apigatewayv2Deployment";
export type Apigatewayv2Deployment = import("./apigatewayv2Deployment").Apigatewayv2Deployment;
export const Apigatewayv2Deployment: typeof import("./apigatewayv2Deployment").Apigatewayv2Deployment = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Deployment"], () => require("./apigatewayv2Deployment"));

export { Apigatewayv2DomainNameArgs, Apigatewayv2DomainNameState } from "./apigatewayv2DomainName";
export type Apigatewayv2DomainName = import("./apigatewayv2DomainName").Apigatewayv2DomainName;
export const Apigatewayv2DomainName: typeof import("./apigatewayv2DomainName").Apigatewayv2DomainName = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2DomainName"], () => require("./apigatewayv2DomainName"));

export { Apigatewayv2IntegrationArgs, Apigatewayv2IntegrationState } from "./apigatewayv2Integration";
export type Apigatewayv2Integration = import("./apigatewayv2Integration").Apigatewayv2Integration;
export const Apigatewayv2Integration: typeof import("./apigatewayv2Integration").Apigatewayv2Integration = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Integration"], () => require("./apigatewayv2Integration"));

export { Apigatewayv2IntegrationResponseArgs, Apigatewayv2IntegrationResponseState } from "./apigatewayv2IntegrationResponse";
export type Apigatewayv2IntegrationResponse = import("./apigatewayv2IntegrationResponse").Apigatewayv2IntegrationResponse;
export const Apigatewayv2IntegrationResponse: typeof import("./apigatewayv2IntegrationResponse").Apigatewayv2IntegrationResponse = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2IntegrationResponse"], () => require("./apigatewayv2IntegrationResponse"));

export { Apigatewayv2ModelArgs, Apigatewayv2ModelState } from "./apigatewayv2Model";
export type Apigatewayv2Model = import("./apigatewayv2Model").Apigatewayv2Model;
export const Apigatewayv2Model: typeof import("./apigatewayv2Model").Apigatewayv2Model = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Model"], () => require("./apigatewayv2Model"));

export { Apigatewayv2RouteArgs, Apigatewayv2RouteState } from "./apigatewayv2Route";
export type Apigatewayv2Route = import("./apigatewayv2Route").Apigatewayv2Route;
export const Apigatewayv2Route: typeof import("./apigatewayv2Route").Apigatewayv2Route = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Route"], () => require("./apigatewayv2Route"));

export { Apigatewayv2RouteResponseArgs, Apigatewayv2RouteResponseState } from "./apigatewayv2RouteResponse";
export type Apigatewayv2RouteResponse = import("./apigatewayv2RouteResponse").Apigatewayv2RouteResponse;
export const Apigatewayv2RouteResponse: typeof import("./apigatewayv2RouteResponse").Apigatewayv2RouteResponse = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2RouteResponse"], () => require("./apigatewayv2RouteResponse"));

export { Apigatewayv2StageArgs, Apigatewayv2StageState } from "./apigatewayv2Stage";
export type Apigatewayv2Stage = import("./apigatewayv2Stage").Apigatewayv2Stage;
export const Apigatewayv2Stage: typeof import("./apigatewayv2Stage").Apigatewayv2Stage = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2Stage"], () => require("./apigatewayv2Stage"));

export { Apigatewayv2VpcLinkArgs, Apigatewayv2VpcLinkState } from "./apigatewayv2VpcLink";
export type Apigatewayv2VpcLink = import("./apigatewayv2VpcLink").Apigatewayv2VpcLink;
export const Apigatewayv2VpcLink: typeof import("./apigatewayv2VpcLink").Apigatewayv2VpcLink = null as any;
utilities.lazyLoad(exports, ["Apigatewayv2VpcLink"], () => require("./apigatewayv2VpcLink"));

export { AppCookieStickinessPolicyArgs, AppCookieStickinessPolicyState } from "./appCookieStickinessPolicy";
export type AppCookieStickinessPolicy = import("./appCookieStickinessPolicy").AppCookieStickinessPolicy;
export const AppCookieStickinessPolicy: typeof import("./appCookieStickinessPolicy").AppCookieStickinessPolicy = null as any;
utilities.lazyLoad(exports, ["AppCookieStickinessPolicy"], () => require("./appCookieStickinessPolicy"));

export { AppautoscalingPolicyArgs, AppautoscalingPolicyState } from "./appautoscalingPolicy";
export type AppautoscalingPolicy = import("./appautoscalingPolicy").AppautoscalingPolicy;
export const AppautoscalingPolicy: typeof import("./appautoscalingPolicy").AppautoscalingPolicy = null as any;
utilities.lazyLoad(exports, ["AppautoscalingPolicy"], () => require("./appautoscalingPolicy"));

export { AppautoscalingScheduledActionArgs, AppautoscalingScheduledActionState } from "./appautoscalingScheduledAction";
export type AppautoscalingScheduledAction = import("./appautoscalingScheduledAction").AppautoscalingScheduledAction;
export const AppautoscalingScheduledAction: typeof import("./appautoscalingScheduledAction").AppautoscalingScheduledAction = null as any;
utilities.lazyLoad(exports, ["AppautoscalingScheduledAction"], () => require("./appautoscalingScheduledAction"));

export { AppautoscalingTargetArgs, AppautoscalingTargetState } from "./appautoscalingTarget";
export type AppautoscalingTarget = import("./appautoscalingTarget").AppautoscalingTarget;
export const AppautoscalingTarget: typeof import("./appautoscalingTarget").AppautoscalingTarget = null as any;
utilities.lazyLoad(exports, ["AppautoscalingTarget"], () => require("./appautoscalingTarget"));

export { AppconfigApplicationArgs, AppconfigApplicationState } from "./appconfigApplication";
export type AppconfigApplication = import("./appconfigApplication").AppconfigApplication;
export const AppconfigApplication: typeof import("./appconfigApplication").AppconfigApplication = null as any;
utilities.lazyLoad(exports, ["AppconfigApplication"], () => require("./appconfigApplication"));

export { AppconfigConfigurationProfileArgs, AppconfigConfigurationProfileState } from "./appconfigConfigurationProfile";
export type AppconfigConfigurationProfile = import("./appconfigConfigurationProfile").AppconfigConfigurationProfile;
export const AppconfigConfigurationProfile: typeof import("./appconfigConfigurationProfile").AppconfigConfigurationProfile = null as any;
utilities.lazyLoad(exports, ["AppconfigConfigurationProfile"], () => require("./appconfigConfigurationProfile"));

export { AppconfigDeploymentArgs, AppconfigDeploymentState } from "./appconfigDeployment";
export type AppconfigDeployment = import("./appconfigDeployment").AppconfigDeployment;
export const AppconfigDeployment: typeof import("./appconfigDeployment").AppconfigDeployment = null as any;
utilities.lazyLoad(exports, ["AppconfigDeployment"], () => require("./appconfigDeployment"));

export { AppconfigDeploymentStrategyArgs, AppconfigDeploymentStrategyState } from "./appconfigDeploymentStrategy";
export type AppconfigDeploymentStrategy = import("./appconfigDeploymentStrategy").AppconfigDeploymentStrategy;
export const AppconfigDeploymentStrategy: typeof import("./appconfigDeploymentStrategy").AppconfigDeploymentStrategy = null as any;
utilities.lazyLoad(exports, ["AppconfigDeploymentStrategy"], () => require("./appconfigDeploymentStrategy"));

export { AppconfigEnvironmentArgs, AppconfigEnvironmentState } from "./appconfigEnvironment";
export type AppconfigEnvironment = import("./appconfigEnvironment").AppconfigEnvironment;
export const AppconfigEnvironment: typeof import("./appconfigEnvironment").AppconfigEnvironment = null as any;
utilities.lazyLoad(exports, ["AppconfigEnvironment"], () => require("./appconfigEnvironment"));

export { AppconfigExtensionArgs, AppconfigExtensionState } from "./appconfigExtension";
export type AppconfigExtension = import("./appconfigExtension").AppconfigExtension;
export const AppconfigExtension: typeof import("./appconfigExtension").AppconfigExtension = null as any;
utilities.lazyLoad(exports, ["AppconfigExtension"], () => require("./appconfigExtension"));

export { AppconfigExtensionAssociationArgs, AppconfigExtensionAssociationState } from "./appconfigExtensionAssociation";
export type AppconfigExtensionAssociation = import("./appconfigExtensionAssociation").AppconfigExtensionAssociation;
export const AppconfigExtensionAssociation: typeof import("./appconfigExtensionAssociation").AppconfigExtensionAssociation = null as any;
utilities.lazyLoad(exports, ["AppconfigExtensionAssociation"], () => require("./appconfigExtensionAssociation"));

export { AppconfigHostedConfigurationVersionArgs, AppconfigHostedConfigurationVersionState } from "./appconfigHostedConfigurationVersion";
export type AppconfigHostedConfigurationVersion = import("./appconfigHostedConfigurationVersion").AppconfigHostedConfigurationVersion;
export const AppconfigHostedConfigurationVersion: typeof import("./appconfigHostedConfigurationVersion").AppconfigHostedConfigurationVersion = null as any;
utilities.lazyLoad(exports, ["AppconfigHostedConfigurationVersion"], () => require("./appconfigHostedConfigurationVersion"));

export { AppfabricAppAuthorizationArgs, AppfabricAppAuthorizationState } from "./appfabricAppAuthorization";
export type AppfabricAppAuthorization = import("./appfabricAppAuthorization").AppfabricAppAuthorization;
export const AppfabricAppAuthorization: typeof import("./appfabricAppAuthorization").AppfabricAppAuthorization = null as any;
utilities.lazyLoad(exports, ["AppfabricAppAuthorization"], () => require("./appfabricAppAuthorization"));

export { AppfabricAppAuthorizationConnectionArgs, AppfabricAppAuthorizationConnectionState } from "./appfabricAppAuthorizationConnection";
export type AppfabricAppAuthorizationConnection = import("./appfabricAppAuthorizationConnection").AppfabricAppAuthorizationConnection;
export const AppfabricAppAuthorizationConnection: typeof import("./appfabricAppAuthorizationConnection").AppfabricAppAuthorizationConnection = null as any;
utilities.lazyLoad(exports, ["AppfabricAppAuthorizationConnection"], () => require("./appfabricAppAuthorizationConnection"));

export { AppfabricAppBundleArgs, AppfabricAppBundleState } from "./appfabricAppBundle";
export type AppfabricAppBundle = import("./appfabricAppBundle").AppfabricAppBundle;
export const AppfabricAppBundle: typeof import("./appfabricAppBundle").AppfabricAppBundle = null as any;
utilities.lazyLoad(exports, ["AppfabricAppBundle"], () => require("./appfabricAppBundle"));

export { AppfabricIngestionArgs, AppfabricIngestionState } from "./appfabricIngestion";
export type AppfabricIngestion = import("./appfabricIngestion").AppfabricIngestion;
export const AppfabricIngestion: typeof import("./appfabricIngestion").AppfabricIngestion = null as any;
utilities.lazyLoad(exports, ["AppfabricIngestion"], () => require("./appfabricIngestion"));

export { AppfabricIngestionDestinationArgs, AppfabricIngestionDestinationState } from "./appfabricIngestionDestination";
export type AppfabricIngestionDestination = import("./appfabricIngestionDestination").AppfabricIngestionDestination;
export const AppfabricIngestionDestination: typeof import("./appfabricIngestionDestination").AppfabricIngestionDestination = null as any;
utilities.lazyLoad(exports, ["AppfabricIngestionDestination"], () => require("./appfabricIngestionDestination"));

export { AppflowConnectorProfileArgs, AppflowConnectorProfileState } from "./appflowConnectorProfile";
export type AppflowConnectorProfile = import("./appflowConnectorProfile").AppflowConnectorProfile;
export const AppflowConnectorProfile: typeof import("./appflowConnectorProfile").AppflowConnectorProfile = null as any;
utilities.lazyLoad(exports, ["AppflowConnectorProfile"], () => require("./appflowConnectorProfile"));

export { AppflowFlowArgs, AppflowFlowState } from "./appflowFlow";
export type AppflowFlow = import("./appflowFlow").AppflowFlow;
export const AppflowFlow: typeof import("./appflowFlow").AppflowFlow = null as any;
utilities.lazyLoad(exports, ["AppflowFlow"], () => require("./appflowFlow"));

export { AppintegrationsDataIntegrationArgs, AppintegrationsDataIntegrationState } from "./appintegrationsDataIntegration";
export type AppintegrationsDataIntegration = import("./appintegrationsDataIntegration").AppintegrationsDataIntegration;
export const AppintegrationsDataIntegration: typeof import("./appintegrationsDataIntegration").AppintegrationsDataIntegration = null as any;
utilities.lazyLoad(exports, ["AppintegrationsDataIntegration"], () => require("./appintegrationsDataIntegration"));

export { AppintegrationsEventIntegrationArgs, AppintegrationsEventIntegrationState } from "./appintegrationsEventIntegration";
export type AppintegrationsEventIntegration = import("./appintegrationsEventIntegration").AppintegrationsEventIntegration;
export const AppintegrationsEventIntegration: typeof import("./appintegrationsEventIntegration").AppintegrationsEventIntegration = null as any;
utilities.lazyLoad(exports, ["AppintegrationsEventIntegration"], () => require("./appintegrationsEventIntegration"));

export { ApplicationinsightsApplicationArgs, ApplicationinsightsApplicationState } from "./applicationinsightsApplication";
export type ApplicationinsightsApplication = import("./applicationinsightsApplication").ApplicationinsightsApplication;
export const ApplicationinsightsApplication: typeof import("./applicationinsightsApplication").ApplicationinsightsApplication = null as any;
utilities.lazyLoad(exports, ["ApplicationinsightsApplication"], () => require("./applicationinsightsApplication"));

export { AppmeshGatewayRouteArgs, AppmeshGatewayRouteState } from "./appmeshGatewayRoute";
export type AppmeshGatewayRoute = import("./appmeshGatewayRoute").AppmeshGatewayRoute;
export const AppmeshGatewayRoute: typeof import("./appmeshGatewayRoute").AppmeshGatewayRoute = null as any;
utilities.lazyLoad(exports, ["AppmeshGatewayRoute"], () => require("./appmeshGatewayRoute"));

export { AppmeshMeshArgs, AppmeshMeshState } from "./appmeshMesh";
export type AppmeshMesh = import("./appmeshMesh").AppmeshMesh;
export const AppmeshMesh: typeof import("./appmeshMesh").AppmeshMesh = null as any;
utilities.lazyLoad(exports, ["AppmeshMesh"], () => require("./appmeshMesh"));

export { AppmeshRouteArgs, AppmeshRouteState } from "./appmeshRoute";
export type AppmeshRoute = import("./appmeshRoute").AppmeshRoute;
export const AppmeshRoute: typeof import("./appmeshRoute").AppmeshRoute = null as any;
utilities.lazyLoad(exports, ["AppmeshRoute"], () => require("./appmeshRoute"));

export { AppmeshVirtualGatewayArgs, AppmeshVirtualGatewayState } from "./appmeshVirtualGateway";
export type AppmeshVirtualGateway = import("./appmeshVirtualGateway").AppmeshVirtualGateway;
export const AppmeshVirtualGateway: typeof import("./appmeshVirtualGateway").AppmeshVirtualGateway = null as any;
utilities.lazyLoad(exports, ["AppmeshVirtualGateway"], () => require("./appmeshVirtualGateway"));

export { AppmeshVirtualNodeArgs, AppmeshVirtualNodeState } from "./appmeshVirtualNode";
export type AppmeshVirtualNode = import("./appmeshVirtualNode").AppmeshVirtualNode;
export const AppmeshVirtualNode: typeof import("./appmeshVirtualNode").AppmeshVirtualNode = null as any;
utilities.lazyLoad(exports, ["AppmeshVirtualNode"], () => require("./appmeshVirtualNode"));

export { AppmeshVirtualRouterArgs, AppmeshVirtualRouterState } from "./appmeshVirtualRouter";
export type AppmeshVirtualRouter = import("./appmeshVirtualRouter").AppmeshVirtualRouter;
export const AppmeshVirtualRouter: typeof import("./appmeshVirtualRouter").AppmeshVirtualRouter = null as any;
utilities.lazyLoad(exports, ["AppmeshVirtualRouter"], () => require("./appmeshVirtualRouter"));

export { AppmeshVirtualServiceArgs, AppmeshVirtualServiceState } from "./appmeshVirtualService";
export type AppmeshVirtualService = import("./appmeshVirtualService").AppmeshVirtualService;
export const AppmeshVirtualService: typeof import("./appmeshVirtualService").AppmeshVirtualService = null as any;
utilities.lazyLoad(exports, ["AppmeshVirtualService"], () => require("./appmeshVirtualService"));

export { ApprunnerAutoScalingConfigurationVersionArgs, ApprunnerAutoScalingConfigurationVersionState } from "./apprunnerAutoScalingConfigurationVersion";
export type ApprunnerAutoScalingConfigurationVersion = import("./apprunnerAutoScalingConfigurationVersion").ApprunnerAutoScalingConfigurationVersion;
export const ApprunnerAutoScalingConfigurationVersion: typeof import("./apprunnerAutoScalingConfigurationVersion").ApprunnerAutoScalingConfigurationVersion = null as any;
utilities.lazyLoad(exports, ["ApprunnerAutoScalingConfigurationVersion"], () => require("./apprunnerAutoScalingConfigurationVersion"));

export { ApprunnerConnectionArgs, ApprunnerConnectionState } from "./apprunnerConnection";
export type ApprunnerConnection = import("./apprunnerConnection").ApprunnerConnection;
export const ApprunnerConnection: typeof import("./apprunnerConnection").ApprunnerConnection = null as any;
utilities.lazyLoad(exports, ["ApprunnerConnection"], () => require("./apprunnerConnection"));

export { ApprunnerCustomDomainAssociationArgs, ApprunnerCustomDomainAssociationState } from "./apprunnerCustomDomainAssociation";
export type ApprunnerCustomDomainAssociation = import("./apprunnerCustomDomainAssociation").ApprunnerCustomDomainAssociation;
export const ApprunnerCustomDomainAssociation: typeof import("./apprunnerCustomDomainAssociation").ApprunnerCustomDomainAssociation = null as any;
utilities.lazyLoad(exports, ["ApprunnerCustomDomainAssociation"], () => require("./apprunnerCustomDomainAssociation"));

export { ApprunnerDefaultAutoScalingConfigurationVersionArgs, ApprunnerDefaultAutoScalingConfigurationVersionState } from "./apprunnerDefaultAutoScalingConfigurationVersion";
export type ApprunnerDefaultAutoScalingConfigurationVersion = import("./apprunnerDefaultAutoScalingConfigurationVersion").ApprunnerDefaultAutoScalingConfigurationVersion;
export const ApprunnerDefaultAutoScalingConfigurationVersion: typeof import("./apprunnerDefaultAutoScalingConfigurationVersion").ApprunnerDefaultAutoScalingConfigurationVersion = null as any;
utilities.lazyLoad(exports, ["ApprunnerDefaultAutoScalingConfigurationVersion"], () => require("./apprunnerDefaultAutoScalingConfigurationVersion"));

export { ApprunnerDeploymentArgs, ApprunnerDeploymentState } from "./apprunnerDeployment";
export type ApprunnerDeployment = import("./apprunnerDeployment").ApprunnerDeployment;
export const ApprunnerDeployment: typeof import("./apprunnerDeployment").ApprunnerDeployment = null as any;
utilities.lazyLoad(exports, ["ApprunnerDeployment"], () => require("./apprunnerDeployment"));

export { ApprunnerObservabilityConfigurationArgs, ApprunnerObservabilityConfigurationState } from "./apprunnerObservabilityConfiguration";
export type ApprunnerObservabilityConfiguration = import("./apprunnerObservabilityConfiguration").ApprunnerObservabilityConfiguration;
export const ApprunnerObservabilityConfiguration: typeof import("./apprunnerObservabilityConfiguration").ApprunnerObservabilityConfiguration = null as any;
utilities.lazyLoad(exports, ["ApprunnerObservabilityConfiguration"], () => require("./apprunnerObservabilityConfiguration"));

export { ApprunnerServiceArgs, ApprunnerServiceState } from "./apprunnerService";
export type ApprunnerService = import("./apprunnerService").ApprunnerService;
export const ApprunnerService: typeof import("./apprunnerService").ApprunnerService = null as any;
utilities.lazyLoad(exports, ["ApprunnerService"], () => require("./apprunnerService"));

export { ApprunnerVpcConnectorArgs, ApprunnerVpcConnectorState } from "./apprunnerVpcConnector";
export type ApprunnerVpcConnector = import("./apprunnerVpcConnector").ApprunnerVpcConnector;
export const ApprunnerVpcConnector: typeof import("./apprunnerVpcConnector").ApprunnerVpcConnector = null as any;
utilities.lazyLoad(exports, ["ApprunnerVpcConnector"], () => require("./apprunnerVpcConnector"));

export { ApprunnerVpcIngressConnectionArgs, ApprunnerVpcIngressConnectionState } from "./apprunnerVpcIngressConnection";
export type ApprunnerVpcIngressConnection = import("./apprunnerVpcIngressConnection").ApprunnerVpcIngressConnection;
export const ApprunnerVpcIngressConnection: typeof import("./apprunnerVpcIngressConnection").ApprunnerVpcIngressConnection = null as any;
utilities.lazyLoad(exports, ["ApprunnerVpcIngressConnection"], () => require("./apprunnerVpcIngressConnection"));

export { AppstreamDirectoryConfigArgs, AppstreamDirectoryConfigState } from "./appstreamDirectoryConfig";
export type AppstreamDirectoryConfig = import("./appstreamDirectoryConfig").AppstreamDirectoryConfig;
export const AppstreamDirectoryConfig: typeof import("./appstreamDirectoryConfig").AppstreamDirectoryConfig = null as any;
utilities.lazyLoad(exports, ["AppstreamDirectoryConfig"], () => require("./appstreamDirectoryConfig"));

export { AppstreamFleetArgs, AppstreamFleetState } from "./appstreamFleet";
export type AppstreamFleet = import("./appstreamFleet").AppstreamFleet;
export const AppstreamFleet: typeof import("./appstreamFleet").AppstreamFleet = null as any;
utilities.lazyLoad(exports, ["AppstreamFleet"], () => require("./appstreamFleet"));

export { AppstreamFleetStackAssociationArgs, AppstreamFleetStackAssociationState } from "./appstreamFleetStackAssociation";
export type AppstreamFleetStackAssociation = import("./appstreamFleetStackAssociation").AppstreamFleetStackAssociation;
export const AppstreamFleetStackAssociation: typeof import("./appstreamFleetStackAssociation").AppstreamFleetStackAssociation = null as any;
utilities.lazyLoad(exports, ["AppstreamFleetStackAssociation"], () => require("./appstreamFleetStackAssociation"));

export { AppstreamImageBuilderArgs, AppstreamImageBuilderState } from "./appstreamImageBuilder";
export type AppstreamImageBuilder = import("./appstreamImageBuilder").AppstreamImageBuilder;
export const AppstreamImageBuilder: typeof import("./appstreamImageBuilder").AppstreamImageBuilder = null as any;
utilities.lazyLoad(exports, ["AppstreamImageBuilder"], () => require("./appstreamImageBuilder"));

export { AppstreamStackArgs, AppstreamStackState } from "./appstreamStack";
export type AppstreamStack = import("./appstreamStack").AppstreamStack;
export const AppstreamStack: typeof import("./appstreamStack").AppstreamStack = null as any;
utilities.lazyLoad(exports, ["AppstreamStack"], () => require("./appstreamStack"));

export { AppstreamUserArgs, AppstreamUserState } from "./appstreamUser";
export type AppstreamUser = import("./appstreamUser").AppstreamUser;
export const AppstreamUser: typeof import("./appstreamUser").AppstreamUser = null as any;
utilities.lazyLoad(exports, ["AppstreamUser"], () => require("./appstreamUser"));

export { AppstreamUserStackAssociationArgs, AppstreamUserStackAssociationState } from "./appstreamUserStackAssociation";
export type AppstreamUserStackAssociation = import("./appstreamUserStackAssociation").AppstreamUserStackAssociation;
export const AppstreamUserStackAssociation: typeof import("./appstreamUserStackAssociation").AppstreamUserStackAssociation = null as any;
utilities.lazyLoad(exports, ["AppstreamUserStackAssociation"], () => require("./appstreamUserStackAssociation"));

export { AppsyncApiCacheArgs, AppsyncApiCacheState } from "./appsyncApiCache";
export type AppsyncApiCache = import("./appsyncApiCache").AppsyncApiCache;
export const AppsyncApiCache: typeof import("./appsyncApiCache").AppsyncApiCache = null as any;
utilities.lazyLoad(exports, ["AppsyncApiCache"], () => require("./appsyncApiCache"));

export { AppsyncApiKeyArgs, AppsyncApiKeyState } from "./appsyncApiKey";
export type AppsyncApiKey = import("./appsyncApiKey").AppsyncApiKey;
export const AppsyncApiKey: typeof import("./appsyncApiKey").AppsyncApiKey = null as any;
utilities.lazyLoad(exports, ["AppsyncApiKey"], () => require("./appsyncApiKey"));

export { AppsyncDatasourceArgs, AppsyncDatasourceState } from "./appsyncDatasource";
export type AppsyncDatasource = import("./appsyncDatasource").AppsyncDatasource;
export const AppsyncDatasource: typeof import("./appsyncDatasource").AppsyncDatasource = null as any;
utilities.lazyLoad(exports, ["AppsyncDatasource"], () => require("./appsyncDatasource"));

export { AppsyncDomainNameArgs, AppsyncDomainNameState } from "./appsyncDomainName";
export type AppsyncDomainName = import("./appsyncDomainName").AppsyncDomainName;
export const AppsyncDomainName: typeof import("./appsyncDomainName").AppsyncDomainName = null as any;
utilities.lazyLoad(exports, ["AppsyncDomainName"], () => require("./appsyncDomainName"));

export { AppsyncDomainNameApiAssociationArgs, AppsyncDomainNameApiAssociationState } from "./appsyncDomainNameApiAssociation";
export type AppsyncDomainNameApiAssociation = import("./appsyncDomainNameApiAssociation").AppsyncDomainNameApiAssociation;
export const AppsyncDomainNameApiAssociation: typeof import("./appsyncDomainNameApiAssociation").AppsyncDomainNameApiAssociation = null as any;
utilities.lazyLoad(exports, ["AppsyncDomainNameApiAssociation"], () => require("./appsyncDomainNameApiAssociation"));

export { AppsyncFunctionArgs, AppsyncFunctionState } from "./appsyncFunction";
export type AppsyncFunction = import("./appsyncFunction").AppsyncFunction;
export const AppsyncFunction: typeof import("./appsyncFunction").AppsyncFunction = null as any;
utilities.lazyLoad(exports, ["AppsyncFunction"], () => require("./appsyncFunction"));

export { AppsyncGraphqlApiArgs, AppsyncGraphqlApiState } from "./appsyncGraphqlApi";
export type AppsyncGraphqlApi = import("./appsyncGraphqlApi").AppsyncGraphqlApi;
export const AppsyncGraphqlApi: typeof import("./appsyncGraphqlApi").AppsyncGraphqlApi = null as any;
utilities.lazyLoad(exports, ["AppsyncGraphqlApi"], () => require("./appsyncGraphqlApi"));

export { AppsyncResolverArgs, AppsyncResolverState } from "./appsyncResolver";
export type AppsyncResolver = import("./appsyncResolver").AppsyncResolver;
export const AppsyncResolver: typeof import("./appsyncResolver").AppsyncResolver = null as any;
utilities.lazyLoad(exports, ["AppsyncResolver"], () => require("./appsyncResolver"));

export { AppsyncTypeArgs, AppsyncTypeState } from "./appsyncType";
export type AppsyncType = import("./appsyncType").AppsyncType;
export const AppsyncType: typeof import("./appsyncType").AppsyncType = null as any;
utilities.lazyLoad(exports, ["AppsyncType"], () => require("./appsyncType"));

export { AthenaDataCatalogArgs, AthenaDataCatalogState } from "./athenaDataCatalog";
export type AthenaDataCatalog = import("./athenaDataCatalog").AthenaDataCatalog;
export const AthenaDataCatalog: typeof import("./athenaDataCatalog").AthenaDataCatalog = null as any;
utilities.lazyLoad(exports, ["AthenaDataCatalog"], () => require("./athenaDataCatalog"));

export { AthenaDatabaseArgs, AthenaDatabaseState } from "./athenaDatabase";
export type AthenaDatabase = import("./athenaDatabase").AthenaDatabase;
export const AthenaDatabase: typeof import("./athenaDatabase").AthenaDatabase = null as any;
utilities.lazyLoad(exports, ["AthenaDatabase"], () => require("./athenaDatabase"));

export { AthenaNamedQueryArgs, AthenaNamedQueryState } from "./athenaNamedQuery";
export type AthenaNamedQuery = import("./athenaNamedQuery").AthenaNamedQuery;
export const AthenaNamedQuery: typeof import("./athenaNamedQuery").AthenaNamedQuery = null as any;
utilities.lazyLoad(exports, ["AthenaNamedQuery"], () => require("./athenaNamedQuery"));

export { AthenaPreparedStatementArgs, AthenaPreparedStatementState } from "./athenaPreparedStatement";
export type AthenaPreparedStatement = import("./athenaPreparedStatement").AthenaPreparedStatement;
export const AthenaPreparedStatement: typeof import("./athenaPreparedStatement").AthenaPreparedStatement = null as any;
utilities.lazyLoad(exports, ["AthenaPreparedStatement"], () => require("./athenaPreparedStatement"));

export { AthenaWorkgroupArgs, AthenaWorkgroupState } from "./athenaWorkgroup";
export type AthenaWorkgroup = import("./athenaWorkgroup").AthenaWorkgroup;
export const AthenaWorkgroup: typeof import("./athenaWorkgroup").AthenaWorkgroup = null as any;
utilities.lazyLoad(exports, ["AthenaWorkgroup"], () => require("./athenaWorkgroup"));

export { AuditmanagerAccountRegistrationArgs, AuditmanagerAccountRegistrationState } from "./auditmanagerAccountRegistration";
export type AuditmanagerAccountRegistration = import("./auditmanagerAccountRegistration").AuditmanagerAccountRegistration;
export const AuditmanagerAccountRegistration: typeof import("./auditmanagerAccountRegistration").AuditmanagerAccountRegistration = null as any;
utilities.lazyLoad(exports, ["AuditmanagerAccountRegistration"], () => require("./auditmanagerAccountRegistration"));

export { AuditmanagerAssessmentArgs, AuditmanagerAssessmentState } from "./auditmanagerAssessment";
export type AuditmanagerAssessment = import("./auditmanagerAssessment").AuditmanagerAssessment;
export const AuditmanagerAssessment: typeof import("./auditmanagerAssessment").AuditmanagerAssessment = null as any;
utilities.lazyLoad(exports, ["AuditmanagerAssessment"], () => require("./auditmanagerAssessment"));

export { AuditmanagerAssessmentDelegationArgs, AuditmanagerAssessmentDelegationState } from "./auditmanagerAssessmentDelegation";
export type AuditmanagerAssessmentDelegation = import("./auditmanagerAssessmentDelegation").AuditmanagerAssessmentDelegation;
export const AuditmanagerAssessmentDelegation: typeof import("./auditmanagerAssessmentDelegation").AuditmanagerAssessmentDelegation = null as any;
utilities.lazyLoad(exports, ["AuditmanagerAssessmentDelegation"], () => require("./auditmanagerAssessmentDelegation"));

export { AuditmanagerAssessmentReportArgs, AuditmanagerAssessmentReportState } from "./auditmanagerAssessmentReport";
export type AuditmanagerAssessmentReport = import("./auditmanagerAssessmentReport").AuditmanagerAssessmentReport;
export const AuditmanagerAssessmentReport: typeof import("./auditmanagerAssessmentReport").AuditmanagerAssessmentReport = null as any;
utilities.lazyLoad(exports, ["AuditmanagerAssessmentReport"], () => require("./auditmanagerAssessmentReport"));

export { AuditmanagerControlArgs, AuditmanagerControlState } from "./auditmanagerControl";
export type AuditmanagerControl = import("./auditmanagerControl").AuditmanagerControl;
export const AuditmanagerControl: typeof import("./auditmanagerControl").AuditmanagerControl = null as any;
utilities.lazyLoad(exports, ["AuditmanagerControl"], () => require("./auditmanagerControl"));

export { AuditmanagerFrameworkArgs, AuditmanagerFrameworkState } from "./auditmanagerFramework";
export type AuditmanagerFramework = import("./auditmanagerFramework").AuditmanagerFramework;
export const AuditmanagerFramework: typeof import("./auditmanagerFramework").AuditmanagerFramework = null as any;
utilities.lazyLoad(exports, ["AuditmanagerFramework"], () => require("./auditmanagerFramework"));

export { AuditmanagerFrameworkShareArgs, AuditmanagerFrameworkShareState } from "./auditmanagerFrameworkShare";
export type AuditmanagerFrameworkShare = import("./auditmanagerFrameworkShare").AuditmanagerFrameworkShare;
export const AuditmanagerFrameworkShare: typeof import("./auditmanagerFrameworkShare").AuditmanagerFrameworkShare = null as any;
utilities.lazyLoad(exports, ["AuditmanagerFrameworkShare"], () => require("./auditmanagerFrameworkShare"));

export { AuditmanagerOrganizationAdminAccountRegistrationArgs, AuditmanagerOrganizationAdminAccountRegistrationState } from "./auditmanagerOrganizationAdminAccountRegistration";
export type AuditmanagerOrganizationAdminAccountRegistration = import("./auditmanagerOrganizationAdminAccountRegistration").AuditmanagerOrganizationAdminAccountRegistration;
export const AuditmanagerOrganizationAdminAccountRegistration: typeof import("./auditmanagerOrganizationAdminAccountRegistration").AuditmanagerOrganizationAdminAccountRegistration = null as any;
utilities.lazyLoad(exports, ["AuditmanagerOrganizationAdminAccountRegistration"], () => require("./auditmanagerOrganizationAdminAccountRegistration"));

export { AutoscalingAttachmentArgs, AutoscalingAttachmentState } from "./autoscalingAttachment";
export type AutoscalingAttachment = import("./autoscalingAttachment").AutoscalingAttachment;
export const AutoscalingAttachment: typeof import("./autoscalingAttachment").AutoscalingAttachment = null as any;
utilities.lazyLoad(exports, ["AutoscalingAttachment"], () => require("./autoscalingAttachment"));

export { AutoscalingGroupArgs, AutoscalingGroupState } from "./autoscalingGroup";
export type AutoscalingGroup = import("./autoscalingGroup").AutoscalingGroup;
export const AutoscalingGroup: typeof import("./autoscalingGroup").AutoscalingGroup = null as any;
utilities.lazyLoad(exports, ["AutoscalingGroup"], () => require("./autoscalingGroup"));

export { AutoscalingGroupTagArgs, AutoscalingGroupTagState } from "./autoscalingGroupTag";
export type AutoscalingGroupTag = import("./autoscalingGroupTag").AutoscalingGroupTag;
export const AutoscalingGroupTag: typeof import("./autoscalingGroupTag").AutoscalingGroupTag = null as any;
utilities.lazyLoad(exports, ["AutoscalingGroupTag"], () => require("./autoscalingGroupTag"));

export { AutoscalingLifecycleHookArgs, AutoscalingLifecycleHookState } from "./autoscalingLifecycleHook";
export type AutoscalingLifecycleHook = import("./autoscalingLifecycleHook").AutoscalingLifecycleHook;
export const AutoscalingLifecycleHook: typeof import("./autoscalingLifecycleHook").AutoscalingLifecycleHook = null as any;
utilities.lazyLoad(exports, ["AutoscalingLifecycleHook"], () => require("./autoscalingLifecycleHook"));

export { AutoscalingNotificationArgs, AutoscalingNotificationState } from "./autoscalingNotification";
export type AutoscalingNotification = import("./autoscalingNotification").AutoscalingNotification;
export const AutoscalingNotification: typeof import("./autoscalingNotification").AutoscalingNotification = null as any;
utilities.lazyLoad(exports, ["AutoscalingNotification"], () => require("./autoscalingNotification"));

export { AutoscalingPolicyArgs, AutoscalingPolicyState } from "./autoscalingPolicy";
export type AutoscalingPolicy = import("./autoscalingPolicy").AutoscalingPolicy;
export const AutoscalingPolicy: typeof import("./autoscalingPolicy").AutoscalingPolicy = null as any;
utilities.lazyLoad(exports, ["AutoscalingPolicy"], () => require("./autoscalingPolicy"));

export { AutoscalingScheduleArgs, AutoscalingScheduleState } from "./autoscalingSchedule";
export type AutoscalingSchedule = import("./autoscalingSchedule").AutoscalingSchedule;
export const AutoscalingSchedule: typeof import("./autoscalingSchedule").AutoscalingSchedule = null as any;
utilities.lazyLoad(exports, ["AutoscalingSchedule"], () => require("./autoscalingSchedule"));

export { AutoscalingTrafficSourceAttachmentArgs, AutoscalingTrafficSourceAttachmentState } from "./autoscalingTrafficSourceAttachment";
export type AutoscalingTrafficSourceAttachment = import("./autoscalingTrafficSourceAttachment").AutoscalingTrafficSourceAttachment;
export const AutoscalingTrafficSourceAttachment: typeof import("./autoscalingTrafficSourceAttachment").AutoscalingTrafficSourceAttachment = null as any;
utilities.lazyLoad(exports, ["AutoscalingTrafficSourceAttachment"], () => require("./autoscalingTrafficSourceAttachment"));

export { AutoscalingplansScalingPlanArgs, AutoscalingplansScalingPlanState } from "./autoscalingplansScalingPlan";
export type AutoscalingplansScalingPlan = import("./autoscalingplansScalingPlan").AutoscalingplansScalingPlan;
export const AutoscalingplansScalingPlan: typeof import("./autoscalingplansScalingPlan").AutoscalingplansScalingPlan = null as any;
utilities.lazyLoad(exports, ["AutoscalingplansScalingPlan"], () => require("./autoscalingplansScalingPlan"));

export { BackupFrameworkArgs, BackupFrameworkState } from "./backupFramework";
export type BackupFramework = import("./backupFramework").BackupFramework;
export const BackupFramework: typeof import("./backupFramework").BackupFramework = null as any;
utilities.lazyLoad(exports, ["BackupFramework"], () => require("./backupFramework"));

export { BackupGlobalSettingsArgs, BackupGlobalSettingsState } from "./backupGlobalSettings";
export type BackupGlobalSettings = import("./backupGlobalSettings").BackupGlobalSettings;
export const BackupGlobalSettings: typeof import("./backupGlobalSettings").BackupGlobalSettings = null as any;
utilities.lazyLoad(exports, ["BackupGlobalSettings"], () => require("./backupGlobalSettings"));

export { BackupPlanArgs, BackupPlanState } from "./backupPlan";
export type BackupPlan = import("./backupPlan").BackupPlan;
export const BackupPlan: typeof import("./backupPlan").BackupPlan = null as any;
utilities.lazyLoad(exports, ["BackupPlan"], () => require("./backupPlan"));

export { BackupRegionSettingsArgs, BackupRegionSettingsState } from "./backupRegionSettings";
export type BackupRegionSettings = import("./backupRegionSettings").BackupRegionSettings;
export const BackupRegionSettings: typeof import("./backupRegionSettings").BackupRegionSettings = null as any;
utilities.lazyLoad(exports, ["BackupRegionSettings"], () => require("./backupRegionSettings"));

export { BackupReportPlanArgs, BackupReportPlanState } from "./backupReportPlan";
export type BackupReportPlan = import("./backupReportPlan").BackupReportPlan;
export const BackupReportPlan: typeof import("./backupReportPlan").BackupReportPlan = null as any;
utilities.lazyLoad(exports, ["BackupReportPlan"], () => require("./backupReportPlan"));

export { BackupSelectionArgs, BackupSelectionState } from "./backupSelection";
export type BackupSelection = import("./backupSelection").BackupSelection;
export const BackupSelection: typeof import("./backupSelection").BackupSelection = null as any;
utilities.lazyLoad(exports, ["BackupSelection"], () => require("./backupSelection"));

export { BackupVaultArgs, BackupVaultState } from "./backupVault";
export type BackupVault = import("./backupVault").BackupVault;
export const BackupVault: typeof import("./backupVault").BackupVault = null as any;
utilities.lazyLoad(exports, ["BackupVault"], () => require("./backupVault"));

export { BackupVaultLockConfigurationArgs, BackupVaultLockConfigurationState } from "./backupVaultLockConfiguration";
export type BackupVaultLockConfiguration = import("./backupVaultLockConfiguration").BackupVaultLockConfiguration;
export const BackupVaultLockConfiguration: typeof import("./backupVaultLockConfiguration").BackupVaultLockConfiguration = null as any;
utilities.lazyLoad(exports, ["BackupVaultLockConfiguration"], () => require("./backupVaultLockConfiguration"));

export { BackupVaultNotificationsArgs, BackupVaultNotificationsState } from "./backupVaultNotifications";
export type BackupVaultNotifications = import("./backupVaultNotifications").BackupVaultNotifications;
export const BackupVaultNotifications: typeof import("./backupVaultNotifications").BackupVaultNotifications = null as any;
utilities.lazyLoad(exports, ["BackupVaultNotifications"], () => require("./backupVaultNotifications"));

export { BackupVaultPolicyArgs, BackupVaultPolicyState } from "./backupVaultPolicy";
export type BackupVaultPolicy = import("./backupVaultPolicy").BackupVaultPolicy;
export const BackupVaultPolicy: typeof import("./backupVaultPolicy").BackupVaultPolicy = null as any;
utilities.lazyLoad(exports, ["BackupVaultPolicy"], () => require("./backupVaultPolicy"));

export { BatchComputeEnvironmentArgs, BatchComputeEnvironmentState } from "./batchComputeEnvironment";
export type BatchComputeEnvironment = import("./batchComputeEnvironment").BatchComputeEnvironment;
export const BatchComputeEnvironment: typeof import("./batchComputeEnvironment").BatchComputeEnvironment = null as any;
utilities.lazyLoad(exports, ["BatchComputeEnvironment"], () => require("./batchComputeEnvironment"));

export { BatchJobDefinitionArgs, BatchJobDefinitionState } from "./batchJobDefinition";
export type BatchJobDefinition = import("./batchJobDefinition").BatchJobDefinition;
export const BatchJobDefinition: typeof import("./batchJobDefinition").BatchJobDefinition = null as any;
utilities.lazyLoad(exports, ["BatchJobDefinition"], () => require("./batchJobDefinition"));

export { BatchJobQueueArgs, BatchJobQueueState } from "./batchJobQueue";
export type BatchJobQueue = import("./batchJobQueue").BatchJobQueue;
export const BatchJobQueue: typeof import("./batchJobQueue").BatchJobQueue = null as any;
utilities.lazyLoad(exports, ["BatchJobQueue"], () => require("./batchJobQueue"));

export { BatchSchedulingPolicyArgs, BatchSchedulingPolicyState } from "./batchSchedulingPolicy";
export type BatchSchedulingPolicy = import("./batchSchedulingPolicy").BatchSchedulingPolicy;
export const BatchSchedulingPolicy: typeof import("./batchSchedulingPolicy").BatchSchedulingPolicy = null as any;
utilities.lazyLoad(exports, ["BatchSchedulingPolicy"], () => require("./batchSchedulingPolicy"));

export { BcmdataexportsExportArgs, BcmdataexportsExportState } from "./bcmdataexportsExport";
export type BcmdataexportsExport = import("./bcmdataexportsExport").BcmdataexportsExport;
export const BcmdataexportsExport: typeof import("./bcmdataexportsExport").BcmdataexportsExport = null as any;
utilities.lazyLoad(exports, ["BcmdataexportsExport"], () => require("./bcmdataexportsExport"));

export { BedrockCustomModelArgs, BedrockCustomModelState } from "./bedrockCustomModel";
export type BedrockCustomModel = import("./bedrockCustomModel").BedrockCustomModel;
export const BedrockCustomModel: typeof import("./bedrockCustomModel").BedrockCustomModel = null as any;
utilities.lazyLoad(exports, ["BedrockCustomModel"], () => require("./bedrockCustomModel"));

export { BedrockGuardrailArgs, BedrockGuardrailState } from "./bedrockGuardrail";
export type BedrockGuardrail = import("./bedrockGuardrail").BedrockGuardrail;
export const BedrockGuardrail: typeof import("./bedrockGuardrail").BedrockGuardrail = null as any;
utilities.lazyLoad(exports, ["BedrockGuardrail"], () => require("./bedrockGuardrail"));

export { BedrockModelInvocationLoggingConfigurationArgs, BedrockModelInvocationLoggingConfigurationState } from "./bedrockModelInvocationLoggingConfiguration";
export type BedrockModelInvocationLoggingConfiguration = import("./bedrockModelInvocationLoggingConfiguration").BedrockModelInvocationLoggingConfiguration;
export const BedrockModelInvocationLoggingConfiguration: typeof import("./bedrockModelInvocationLoggingConfiguration").BedrockModelInvocationLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["BedrockModelInvocationLoggingConfiguration"], () => require("./bedrockModelInvocationLoggingConfiguration"));

export { BedrockProvisionedModelThroughputArgs, BedrockProvisionedModelThroughputState } from "./bedrockProvisionedModelThroughput";
export type BedrockProvisionedModelThroughput = import("./bedrockProvisionedModelThroughput").BedrockProvisionedModelThroughput;
export const BedrockProvisionedModelThroughput: typeof import("./bedrockProvisionedModelThroughput").BedrockProvisionedModelThroughput = null as any;
utilities.lazyLoad(exports, ["BedrockProvisionedModelThroughput"], () => require("./bedrockProvisionedModelThroughput"));

export { BedrockagentAgentArgs, BedrockagentAgentState } from "./bedrockagentAgent";
export type BedrockagentAgent = import("./bedrockagentAgent").BedrockagentAgent;
export const BedrockagentAgent: typeof import("./bedrockagentAgent").BedrockagentAgent = null as any;
utilities.lazyLoad(exports, ["BedrockagentAgent"], () => require("./bedrockagentAgent"));

export { BedrockagentAgentActionGroupArgs, BedrockagentAgentActionGroupState } from "./bedrockagentAgentActionGroup";
export type BedrockagentAgentActionGroup = import("./bedrockagentAgentActionGroup").BedrockagentAgentActionGroup;
export const BedrockagentAgentActionGroup: typeof import("./bedrockagentAgentActionGroup").BedrockagentAgentActionGroup = null as any;
utilities.lazyLoad(exports, ["BedrockagentAgentActionGroup"], () => require("./bedrockagentAgentActionGroup"));

export { BedrockagentAgentAliasArgs, BedrockagentAgentAliasState } from "./bedrockagentAgentAlias";
export type BedrockagentAgentAlias = import("./bedrockagentAgentAlias").BedrockagentAgentAlias;
export const BedrockagentAgentAlias: typeof import("./bedrockagentAgentAlias").BedrockagentAgentAlias = null as any;
utilities.lazyLoad(exports, ["BedrockagentAgentAlias"], () => require("./bedrockagentAgentAlias"));

export { BedrockagentAgentKnowledgeBaseAssociationArgs, BedrockagentAgentKnowledgeBaseAssociationState } from "./bedrockagentAgentKnowledgeBaseAssociation";
export type BedrockagentAgentKnowledgeBaseAssociation = import("./bedrockagentAgentKnowledgeBaseAssociation").BedrockagentAgentKnowledgeBaseAssociation;
export const BedrockagentAgentKnowledgeBaseAssociation: typeof import("./bedrockagentAgentKnowledgeBaseAssociation").BedrockagentAgentKnowledgeBaseAssociation = null as any;
utilities.lazyLoad(exports, ["BedrockagentAgentKnowledgeBaseAssociation"], () => require("./bedrockagentAgentKnowledgeBaseAssociation"));

export { BedrockagentDataSourceArgs, BedrockagentDataSourceState } from "./bedrockagentDataSource";
export type BedrockagentDataSource = import("./bedrockagentDataSource").BedrockagentDataSource;
export const BedrockagentDataSource: typeof import("./bedrockagentDataSource").BedrockagentDataSource = null as any;
utilities.lazyLoad(exports, ["BedrockagentDataSource"], () => require("./bedrockagentDataSource"));

export { BedrockagentKnowledgeBaseArgs, BedrockagentKnowledgeBaseState } from "./bedrockagentKnowledgeBase";
export type BedrockagentKnowledgeBase = import("./bedrockagentKnowledgeBase").BedrockagentKnowledgeBase;
export const BedrockagentKnowledgeBase: typeof import("./bedrockagentKnowledgeBase").BedrockagentKnowledgeBase = null as any;
utilities.lazyLoad(exports, ["BedrockagentKnowledgeBase"], () => require("./bedrockagentKnowledgeBase"));

export { BudgetsBudgetArgs, BudgetsBudgetState } from "./budgetsBudget";
export type BudgetsBudget = import("./budgetsBudget").BudgetsBudget;
export const BudgetsBudget: typeof import("./budgetsBudget").BudgetsBudget = null as any;
utilities.lazyLoad(exports, ["BudgetsBudget"], () => require("./budgetsBudget"));

export { BudgetsBudgetActionArgs, BudgetsBudgetActionState } from "./budgetsBudgetAction";
export type BudgetsBudgetAction = import("./budgetsBudgetAction").BudgetsBudgetAction;
export const BudgetsBudgetAction: typeof import("./budgetsBudgetAction").BudgetsBudgetAction = null as any;
utilities.lazyLoad(exports, ["BudgetsBudgetAction"], () => require("./budgetsBudgetAction"));

export { CeAnomalyMonitorArgs, CeAnomalyMonitorState } from "./ceAnomalyMonitor";
export type CeAnomalyMonitor = import("./ceAnomalyMonitor").CeAnomalyMonitor;
export const CeAnomalyMonitor: typeof import("./ceAnomalyMonitor").CeAnomalyMonitor = null as any;
utilities.lazyLoad(exports, ["CeAnomalyMonitor"], () => require("./ceAnomalyMonitor"));

export { CeAnomalySubscriptionArgs, CeAnomalySubscriptionState } from "./ceAnomalySubscription";
export type CeAnomalySubscription = import("./ceAnomalySubscription").CeAnomalySubscription;
export const CeAnomalySubscription: typeof import("./ceAnomalySubscription").CeAnomalySubscription = null as any;
utilities.lazyLoad(exports, ["CeAnomalySubscription"], () => require("./ceAnomalySubscription"));

export { CeCostAllocationTagArgs, CeCostAllocationTagState } from "./ceCostAllocationTag";
export type CeCostAllocationTag = import("./ceCostAllocationTag").CeCostAllocationTag;
export const CeCostAllocationTag: typeof import("./ceCostAllocationTag").CeCostAllocationTag = null as any;
utilities.lazyLoad(exports, ["CeCostAllocationTag"], () => require("./ceCostAllocationTag"));

export { CeCostCategoryArgs, CeCostCategoryState } from "./ceCostCategory";
export type CeCostCategory = import("./ceCostCategory").CeCostCategory;
export const CeCostCategory: typeof import("./ceCostCategory").CeCostCategory = null as any;
utilities.lazyLoad(exports, ["CeCostCategory"], () => require("./ceCostCategory"));

export { ChatbotSlackChannelConfigurationArgs, ChatbotSlackChannelConfigurationState } from "./chatbotSlackChannelConfiguration";
export type ChatbotSlackChannelConfiguration = import("./chatbotSlackChannelConfiguration").ChatbotSlackChannelConfiguration;
export const ChatbotSlackChannelConfiguration: typeof import("./chatbotSlackChannelConfiguration").ChatbotSlackChannelConfiguration = null as any;
utilities.lazyLoad(exports, ["ChatbotSlackChannelConfiguration"], () => require("./chatbotSlackChannelConfiguration"));

export { ChatbotTeamsChannelConfigurationArgs, ChatbotTeamsChannelConfigurationState } from "./chatbotTeamsChannelConfiguration";
export type ChatbotTeamsChannelConfiguration = import("./chatbotTeamsChannelConfiguration").ChatbotTeamsChannelConfiguration;
export const ChatbotTeamsChannelConfiguration: typeof import("./chatbotTeamsChannelConfiguration").ChatbotTeamsChannelConfiguration = null as any;
utilities.lazyLoad(exports, ["ChatbotTeamsChannelConfiguration"], () => require("./chatbotTeamsChannelConfiguration"));

export { ChimeVoiceConnectorArgs, ChimeVoiceConnectorState } from "./chimeVoiceConnector";
export type ChimeVoiceConnector = import("./chimeVoiceConnector").ChimeVoiceConnector;
export const ChimeVoiceConnector: typeof import("./chimeVoiceConnector").ChimeVoiceConnector = null as any;
utilities.lazyLoad(exports, ["ChimeVoiceConnector"], () => require("./chimeVoiceConnector"));

export { ChimeVoiceConnectorGroupArgs, ChimeVoiceConnectorGroupState } from "./chimeVoiceConnectorGroup";
export type ChimeVoiceConnectorGroup = import("./chimeVoiceConnectorGroup").ChimeVoiceConnectorGroup;
export const ChimeVoiceConnectorGroup: typeof import("./chimeVoiceConnectorGroup").ChimeVoiceConnectorGroup = null as any;
utilities.lazyLoad(exports, ["ChimeVoiceConnectorGroup"], () => require("./chimeVoiceConnectorGroup"));

export { ChimeVoiceConnectorLoggingArgs, ChimeVoiceConnectorLoggingState } from "./chimeVoiceConnectorLogging";
export type ChimeVoiceConnectorLogging = import("./chimeVoiceConnectorLogging").ChimeVoiceConnectorLogging;
export const ChimeVoiceConnectorLogging: typeof import("./chimeVoiceConnectorLogging").ChimeVoiceConnectorLogging = null as any;
utilities.lazyLoad(exports, ["ChimeVoiceConnectorLogging"], () => require("./chimeVoiceConnectorLogging"));

export { ChimeVoiceConnectorOriginationArgs, ChimeVoiceConnectorOriginationState } from "./chimeVoiceConnectorOrigination";
export type ChimeVoiceConnectorOrigination = import("./chimeVoiceConnectorOrigination").ChimeVoiceConnectorOrigination;
export const ChimeVoiceConnectorOrigination: typeof import("./chimeVoiceConnectorOrigination").ChimeVoiceConnectorOrigination = null as any;
utilities.lazyLoad(exports, ["ChimeVoiceConnectorOrigination"], () => require("./chimeVoiceConnectorOrigination"));

export { ChimeVoiceConnectorStreamingArgs, ChimeVoiceConnectorStreamingState } from "./chimeVoiceConnectorStreaming";
export type ChimeVoiceConnectorStreaming = import("./chimeVoiceConnectorStreaming").ChimeVoiceConnectorStreaming;
export const ChimeVoiceConnectorStreaming: typeof import("./chimeVoiceConnectorStreaming").ChimeVoiceConnectorStreaming = null as any;
utilities.lazyLoad(exports, ["ChimeVoiceConnectorStreaming"], () => require("./chimeVoiceConnectorStreaming"));

export { ChimeVoiceConnectorTerminationArgs, ChimeVoiceConnectorTerminationState } from "./chimeVoiceConnectorTermination";
export type ChimeVoiceConnectorTermination = import("./chimeVoiceConnectorTermination").ChimeVoiceConnectorTermination;
export const ChimeVoiceConnectorTermination: typeof import("./chimeVoiceConnectorTermination").ChimeVoiceConnectorTermination = null as any;
utilities.lazyLoad(exports, ["ChimeVoiceConnectorTermination"], () => require("./chimeVoiceConnectorTermination"));

export { ChimeVoiceConnectorTerminationCredentialsArgs, ChimeVoiceConnectorTerminationCredentialsState } from "./chimeVoiceConnectorTerminationCredentials";
export type ChimeVoiceConnectorTerminationCredentials = import("./chimeVoiceConnectorTerminationCredentials").ChimeVoiceConnectorTerminationCredentials;
export const ChimeVoiceConnectorTerminationCredentials: typeof import("./chimeVoiceConnectorTerminationCredentials").ChimeVoiceConnectorTerminationCredentials = null as any;
utilities.lazyLoad(exports, ["ChimeVoiceConnectorTerminationCredentials"], () => require("./chimeVoiceConnectorTerminationCredentials"));

export { ChimesdkmediapipelinesMediaInsightsPipelineConfigurationArgs, ChimesdkmediapipelinesMediaInsightsPipelineConfigurationState } from "./chimesdkmediapipelinesMediaInsightsPipelineConfiguration";
export type ChimesdkmediapipelinesMediaInsightsPipelineConfiguration = import("./chimesdkmediapipelinesMediaInsightsPipelineConfiguration").ChimesdkmediapipelinesMediaInsightsPipelineConfiguration;
export const ChimesdkmediapipelinesMediaInsightsPipelineConfiguration: typeof import("./chimesdkmediapipelinesMediaInsightsPipelineConfiguration").ChimesdkmediapipelinesMediaInsightsPipelineConfiguration = null as any;
utilities.lazyLoad(exports, ["ChimesdkmediapipelinesMediaInsightsPipelineConfiguration"], () => require("./chimesdkmediapipelinesMediaInsightsPipelineConfiguration"));

export { ChimesdkvoiceGlobalSettingsArgs, ChimesdkvoiceGlobalSettingsState } from "./chimesdkvoiceGlobalSettings";
export type ChimesdkvoiceGlobalSettings = import("./chimesdkvoiceGlobalSettings").ChimesdkvoiceGlobalSettings;
export const ChimesdkvoiceGlobalSettings: typeof import("./chimesdkvoiceGlobalSettings").ChimesdkvoiceGlobalSettings = null as any;
utilities.lazyLoad(exports, ["ChimesdkvoiceGlobalSettings"], () => require("./chimesdkvoiceGlobalSettings"));

export { ChimesdkvoiceSipMediaApplicationArgs, ChimesdkvoiceSipMediaApplicationState } from "./chimesdkvoiceSipMediaApplication";
export type ChimesdkvoiceSipMediaApplication = import("./chimesdkvoiceSipMediaApplication").ChimesdkvoiceSipMediaApplication;
export const ChimesdkvoiceSipMediaApplication: typeof import("./chimesdkvoiceSipMediaApplication").ChimesdkvoiceSipMediaApplication = null as any;
utilities.lazyLoad(exports, ["ChimesdkvoiceSipMediaApplication"], () => require("./chimesdkvoiceSipMediaApplication"));

export { ChimesdkvoiceSipRuleArgs, ChimesdkvoiceSipRuleState } from "./chimesdkvoiceSipRule";
export type ChimesdkvoiceSipRule = import("./chimesdkvoiceSipRule").ChimesdkvoiceSipRule;
export const ChimesdkvoiceSipRule: typeof import("./chimesdkvoiceSipRule").ChimesdkvoiceSipRule = null as any;
utilities.lazyLoad(exports, ["ChimesdkvoiceSipRule"], () => require("./chimesdkvoiceSipRule"));

export { ChimesdkvoiceVoiceProfileDomainArgs, ChimesdkvoiceVoiceProfileDomainState } from "./chimesdkvoiceVoiceProfileDomain";
export type ChimesdkvoiceVoiceProfileDomain = import("./chimesdkvoiceVoiceProfileDomain").ChimesdkvoiceVoiceProfileDomain;
export const ChimesdkvoiceVoiceProfileDomain: typeof import("./chimesdkvoiceVoiceProfileDomain").ChimesdkvoiceVoiceProfileDomain = null as any;
utilities.lazyLoad(exports, ["ChimesdkvoiceVoiceProfileDomain"], () => require("./chimesdkvoiceVoiceProfileDomain"));

export { CleanroomsCollaborationArgs, CleanroomsCollaborationState } from "./cleanroomsCollaboration";
export type CleanroomsCollaboration = import("./cleanroomsCollaboration").CleanroomsCollaboration;
export const CleanroomsCollaboration: typeof import("./cleanroomsCollaboration").CleanroomsCollaboration = null as any;
utilities.lazyLoad(exports, ["CleanroomsCollaboration"], () => require("./cleanroomsCollaboration"));

export { CleanroomsConfiguredTableArgs, CleanroomsConfiguredTableState } from "./cleanroomsConfiguredTable";
export type CleanroomsConfiguredTable = import("./cleanroomsConfiguredTable").CleanroomsConfiguredTable;
export const CleanroomsConfiguredTable: typeof import("./cleanroomsConfiguredTable").CleanroomsConfiguredTable = null as any;
utilities.lazyLoad(exports, ["CleanroomsConfiguredTable"], () => require("./cleanroomsConfiguredTable"));

export { Cloud9EnvironmentEc2Args, Cloud9EnvironmentEc2State } from "./cloud9EnvironmentEc2";
export type Cloud9EnvironmentEc2 = import("./cloud9EnvironmentEc2").Cloud9EnvironmentEc2;
export const Cloud9EnvironmentEc2: typeof import("./cloud9EnvironmentEc2").Cloud9EnvironmentEc2 = null as any;
utilities.lazyLoad(exports, ["Cloud9EnvironmentEc2"], () => require("./cloud9EnvironmentEc2"));

export { Cloud9EnvironmentMembershipArgs, Cloud9EnvironmentMembershipState } from "./cloud9EnvironmentMembership";
export type Cloud9EnvironmentMembership = import("./cloud9EnvironmentMembership").Cloud9EnvironmentMembership;
export const Cloud9EnvironmentMembership: typeof import("./cloud9EnvironmentMembership").Cloud9EnvironmentMembership = null as any;
utilities.lazyLoad(exports, ["Cloud9EnvironmentMembership"], () => require("./cloud9EnvironmentMembership"));

export { CloudcontrolapiResourceArgs, CloudcontrolapiResourceState } from "./cloudcontrolapiResource";
export type CloudcontrolapiResource = import("./cloudcontrolapiResource").CloudcontrolapiResource;
export const CloudcontrolapiResource: typeof import("./cloudcontrolapiResource").CloudcontrolapiResource = null as any;
utilities.lazyLoad(exports, ["CloudcontrolapiResource"], () => require("./cloudcontrolapiResource"));

export { CloudformationStackArgs, CloudformationStackState } from "./cloudformationStack";
export type CloudformationStack = import("./cloudformationStack").CloudformationStack;
export const CloudformationStack: typeof import("./cloudformationStack").CloudformationStack = null as any;
utilities.lazyLoad(exports, ["CloudformationStack"], () => require("./cloudformationStack"));

export { CloudformationStackSetArgs, CloudformationStackSetState } from "./cloudformationStackSet";
export type CloudformationStackSet = import("./cloudformationStackSet").CloudformationStackSet;
export const CloudformationStackSet: typeof import("./cloudformationStackSet").CloudformationStackSet = null as any;
utilities.lazyLoad(exports, ["CloudformationStackSet"], () => require("./cloudformationStackSet"));

export { CloudformationStackSetInstanceArgs, CloudformationStackSetInstanceState } from "./cloudformationStackSetInstance";
export type CloudformationStackSetInstance = import("./cloudformationStackSetInstance").CloudformationStackSetInstance;
export const CloudformationStackSetInstance: typeof import("./cloudformationStackSetInstance").CloudformationStackSetInstance = null as any;
utilities.lazyLoad(exports, ["CloudformationStackSetInstance"], () => require("./cloudformationStackSetInstance"));

export { CloudformationTypeArgs, CloudformationTypeState } from "./cloudformationType";
export type CloudformationType = import("./cloudformationType").CloudformationType;
export const CloudformationType: typeof import("./cloudformationType").CloudformationType = null as any;
utilities.lazyLoad(exports, ["CloudformationType"], () => require("./cloudformationType"));

export { CloudfrontCachePolicyArgs, CloudfrontCachePolicyState } from "./cloudfrontCachePolicy";
export type CloudfrontCachePolicy = import("./cloudfrontCachePolicy").CloudfrontCachePolicy;
export const CloudfrontCachePolicy: typeof import("./cloudfrontCachePolicy").CloudfrontCachePolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontCachePolicy"], () => require("./cloudfrontCachePolicy"));

export { CloudfrontContinuousDeploymentPolicyArgs, CloudfrontContinuousDeploymentPolicyState } from "./cloudfrontContinuousDeploymentPolicy";
export type CloudfrontContinuousDeploymentPolicy = import("./cloudfrontContinuousDeploymentPolicy").CloudfrontContinuousDeploymentPolicy;
export const CloudfrontContinuousDeploymentPolicy: typeof import("./cloudfrontContinuousDeploymentPolicy").CloudfrontContinuousDeploymentPolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontContinuousDeploymentPolicy"], () => require("./cloudfrontContinuousDeploymentPolicy"));

export { CloudfrontDistributionArgs, CloudfrontDistributionState } from "./cloudfrontDistribution";
export type CloudfrontDistribution = import("./cloudfrontDistribution").CloudfrontDistribution;
export const CloudfrontDistribution: typeof import("./cloudfrontDistribution").CloudfrontDistribution = null as any;
utilities.lazyLoad(exports, ["CloudfrontDistribution"], () => require("./cloudfrontDistribution"));

export { CloudfrontFieldLevelEncryptionConfigArgs, CloudfrontFieldLevelEncryptionConfigState } from "./cloudfrontFieldLevelEncryptionConfig";
export type CloudfrontFieldLevelEncryptionConfig = import("./cloudfrontFieldLevelEncryptionConfig").CloudfrontFieldLevelEncryptionConfig;
export const CloudfrontFieldLevelEncryptionConfig: typeof import("./cloudfrontFieldLevelEncryptionConfig").CloudfrontFieldLevelEncryptionConfig = null as any;
utilities.lazyLoad(exports, ["CloudfrontFieldLevelEncryptionConfig"], () => require("./cloudfrontFieldLevelEncryptionConfig"));

export { CloudfrontFieldLevelEncryptionProfileArgs, CloudfrontFieldLevelEncryptionProfileState } from "./cloudfrontFieldLevelEncryptionProfile";
export type CloudfrontFieldLevelEncryptionProfile = import("./cloudfrontFieldLevelEncryptionProfile").CloudfrontFieldLevelEncryptionProfile;
export const CloudfrontFieldLevelEncryptionProfile: typeof import("./cloudfrontFieldLevelEncryptionProfile").CloudfrontFieldLevelEncryptionProfile = null as any;
utilities.lazyLoad(exports, ["CloudfrontFieldLevelEncryptionProfile"], () => require("./cloudfrontFieldLevelEncryptionProfile"));

export { CloudfrontFunctionArgs, CloudfrontFunctionState } from "./cloudfrontFunction";
export type CloudfrontFunction = import("./cloudfrontFunction").CloudfrontFunction;
export const CloudfrontFunction: typeof import("./cloudfrontFunction").CloudfrontFunction = null as any;
utilities.lazyLoad(exports, ["CloudfrontFunction"], () => require("./cloudfrontFunction"));

export { CloudfrontKeyGroupArgs, CloudfrontKeyGroupState } from "./cloudfrontKeyGroup";
export type CloudfrontKeyGroup = import("./cloudfrontKeyGroup").CloudfrontKeyGroup;
export const CloudfrontKeyGroup: typeof import("./cloudfrontKeyGroup").CloudfrontKeyGroup = null as any;
utilities.lazyLoad(exports, ["CloudfrontKeyGroup"], () => require("./cloudfrontKeyGroup"));

export { CloudfrontKeyValueStoreArgs, CloudfrontKeyValueStoreState } from "./cloudfrontKeyValueStore";
export type CloudfrontKeyValueStore = import("./cloudfrontKeyValueStore").CloudfrontKeyValueStore;
export const CloudfrontKeyValueStore: typeof import("./cloudfrontKeyValueStore").CloudfrontKeyValueStore = null as any;
utilities.lazyLoad(exports, ["CloudfrontKeyValueStore"], () => require("./cloudfrontKeyValueStore"));

export { CloudfrontMonitoringSubscriptionArgs, CloudfrontMonitoringSubscriptionState } from "./cloudfrontMonitoringSubscription";
export type CloudfrontMonitoringSubscription = import("./cloudfrontMonitoringSubscription").CloudfrontMonitoringSubscription;
export const CloudfrontMonitoringSubscription: typeof import("./cloudfrontMonitoringSubscription").CloudfrontMonitoringSubscription = null as any;
utilities.lazyLoad(exports, ["CloudfrontMonitoringSubscription"], () => require("./cloudfrontMonitoringSubscription"));

export { CloudfrontOriginAccessControlArgs, CloudfrontOriginAccessControlState } from "./cloudfrontOriginAccessControl";
export type CloudfrontOriginAccessControl = import("./cloudfrontOriginAccessControl").CloudfrontOriginAccessControl;
export const CloudfrontOriginAccessControl: typeof import("./cloudfrontOriginAccessControl").CloudfrontOriginAccessControl = null as any;
utilities.lazyLoad(exports, ["CloudfrontOriginAccessControl"], () => require("./cloudfrontOriginAccessControl"));

export { CloudfrontOriginAccessIdentityArgs, CloudfrontOriginAccessIdentityState } from "./cloudfrontOriginAccessIdentity";
export type CloudfrontOriginAccessIdentity = import("./cloudfrontOriginAccessIdentity").CloudfrontOriginAccessIdentity;
export const CloudfrontOriginAccessIdentity: typeof import("./cloudfrontOriginAccessIdentity").CloudfrontOriginAccessIdentity = null as any;
utilities.lazyLoad(exports, ["CloudfrontOriginAccessIdentity"], () => require("./cloudfrontOriginAccessIdentity"));

export { CloudfrontOriginRequestPolicyArgs, CloudfrontOriginRequestPolicyState } from "./cloudfrontOriginRequestPolicy";
export type CloudfrontOriginRequestPolicy = import("./cloudfrontOriginRequestPolicy").CloudfrontOriginRequestPolicy;
export const CloudfrontOriginRequestPolicy: typeof import("./cloudfrontOriginRequestPolicy").CloudfrontOriginRequestPolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontOriginRequestPolicy"], () => require("./cloudfrontOriginRequestPolicy"));

export { CloudfrontPublicKeyArgs, CloudfrontPublicKeyState } from "./cloudfrontPublicKey";
export type CloudfrontPublicKey = import("./cloudfrontPublicKey").CloudfrontPublicKey;
export const CloudfrontPublicKey: typeof import("./cloudfrontPublicKey").CloudfrontPublicKey = null as any;
utilities.lazyLoad(exports, ["CloudfrontPublicKey"], () => require("./cloudfrontPublicKey"));

export { CloudfrontRealtimeLogConfigArgs, CloudfrontRealtimeLogConfigState } from "./cloudfrontRealtimeLogConfig";
export type CloudfrontRealtimeLogConfig = import("./cloudfrontRealtimeLogConfig").CloudfrontRealtimeLogConfig;
export const CloudfrontRealtimeLogConfig: typeof import("./cloudfrontRealtimeLogConfig").CloudfrontRealtimeLogConfig = null as any;
utilities.lazyLoad(exports, ["CloudfrontRealtimeLogConfig"], () => require("./cloudfrontRealtimeLogConfig"));

export { CloudfrontResponseHeadersPolicyArgs, CloudfrontResponseHeadersPolicyState } from "./cloudfrontResponseHeadersPolicy";
export type CloudfrontResponseHeadersPolicy = import("./cloudfrontResponseHeadersPolicy").CloudfrontResponseHeadersPolicy;
export const CloudfrontResponseHeadersPolicy: typeof import("./cloudfrontResponseHeadersPolicy").CloudfrontResponseHeadersPolicy = null as any;
utilities.lazyLoad(exports, ["CloudfrontResponseHeadersPolicy"], () => require("./cloudfrontResponseHeadersPolicy"));

export { CloudfrontkeyvaluestoreKeyArgs, CloudfrontkeyvaluestoreKeyState } from "./cloudfrontkeyvaluestoreKey";
export type CloudfrontkeyvaluestoreKey = import("./cloudfrontkeyvaluestoreKey").CloudfrontkeyvaluestoreKey;
export const CloudfrontkeyvaluestoreKey: typeof import("./cloudfrontkeyvaluestoreKey").CloudfrontkeyvaluestoreKey = null as any;
utilities.lazyLoad(exports, ["CloudfrontkeyvaluestoreKey"], () => require("./cloudfrontkeyvaluestoreKey"));

export { CloudhsmV2ClusterArgs, CloudhsmV2ClusterState } from "./cloudhsmV2Cluster";
export type CloudhsmV2Cluster = import("./cloudhsmV2Cluster").CloudhsmV2Cluster;
export const CloudhsmV2Cluster: typeof import("./cloudhsmV2Cluster").CloudhsmV2Cluster = null as any;
utilities.lazyLoad(exports, ["CloudhsmV2Cluster"], () => require("./cloudhsmV2Cluster"));

export { CloudhsmV2HsmArgs, CloudhsmV2HsmState } from "./cloudhsmV2Hsm";
export type CloudhsmV2Hsm = import("./cloudhsmV2Hsm").CloudhsmV2Hsm;
export const CloudhsmV2Hsm: typeof import("./cloudhsmV2Hsm").CloudhsmV2Hsm = null as any;
utilities.lazyLoad(exports, ["CloudhsmV2Hsm"], () => require("./cloudhsmV2Hsm"));

export { CloudsearchDomainArgs, CloudsearchDomainState } from "./cloudsearchDomain";
export type CloudsearchDomain = import("./cloudsearchDomain").CloudsearchDomain;
export const CloudsearchDomain: typeof import("./cloudsearchDomain").CloudsearchDomain = null as any;
utilities.lazyLoad(exports, ["CloudsearchDomain"], () => require("./cloudsearchDomain"));

export { CloudsearchDomainServiceAccessPolicyArgs, CloudsearchDomainServiceAccessPolicyState } from "./cloudsearchDomainServiceAccessPolicy";
export type CloudsearchDomainServiceAccessPolicy = import("./cloudsearchDomainServiceAccessPolicy").CloudsearchDomainServiceAccessPolicy;
export const CloudsearchDomainServiceAccessPolicy: typeof import("./cloudsearchDomainServiceAccessPolicy").CloudsearchDomainServiceAccessPolicy = null as any;
utilities.lazyLoad(exports, ["CloudsearchDomainServiceAccessPolicy"], () => require("./cloudsearchDomainServiceAccessPolicy"));

export { CloudtrailArgs, CloudtrailState } from "./cloudtrail";
export type Cloudtrail = import("./cloudtrail").Cloudtrail;
export const Cloudtrail: typeof import("./cloudtrail").Cloudtrail = null as any;
utilities.lazyLoad(exports, ["Cloudtrail"], () => require("./cloudtrail"));

export { CloudtrailEventDataStoreArgs, CloudtrailEventDataStoreState } from "./cloudtrailEventDataStore";
export type CloudtrailEventDataStore = import("./cloudtrailEventDataStore").CloudtrailEventDataStore;
export const CloudtrailEventDataStore: typeof import("./cloudtrailEventDataStore").CloudtrailEventDataStore = null as any;
utilities.lazyLoad(exports, ["CloudtrailEventDataStore"], () => require("./cloudtrailEventDataStore"));

export { CloudtrailOrganizationDelegatedAdminAccountArgs, CloudtrailOrganizationDelegatedAdminAccountState } from "./cloudtrailOrganizationDelegatedAdminAccount";
export type CloudtrailOrganizationDelegatedAdminAccount = import("./cloudtrailOrganizationDelegatedAdminAccount").CloudtrailOrganizationDelegatedAdminAccount;
export const CloudtrailOrganizationDelegatedAdminAccount: typeof import("./cloudtrailOrganizationDelegatedAdminAccount").CloudtrailOrganizationDelegatedAdminAccount = null as any;
utilities.lazyLoad(exports, ["CloudtrailOrganizationDelegatedAdminAccount"], () => require("./cloudtrailOrganizationDelegatedAdminAccount"));

export { CloudwatchCompositeAlarmArgs, CloudwatchCompositeAlarmState } from "./cloudwatchCompositeAlarm";
export type CloudwatchCompositeAlarm = import("./cloudwatchCompositeAlarm").CloudwatchCompositeAlarm;
export const CloudwatchCompositeAlarm: typeof import("./cloudwatchCompositeAlarm").CloudwatchCompositeAlarm = null as any;
utilities.lazyLoad(exports, ["CloudwatchCompositeAlarm"], () => require("./cloudwatchCompositeAlarm"));

export { CloudwatchDashboardArgs, CloudwatchDashboardState } from "./cloudwatchDashboard";
export type CloudwatchDashboard = import("./cloudwatchDashboard").CloudwatchDashboard;
export const CloudwatchDashboard: typeof import("./cloudwatchDashboard").CloudwatchDashboard = null as any;
utilities.lazyLoad(exports, ["CloudwatchDashboard"], () => require("./cloudwatchDashboard"));

export { CloudwatchEventApiDestinationArgs, CloudwatchEventApiDestinationState } from "./cloudwatchEventApiDestination";
export type CloudwatchEventApiDestination = import("./cloudwatchEventApiDestination").CloudwatchEventApiDestination;
export const CloudwatchEventApiDestination: typeof import("./cloudwatchEventApiDestination").CloudwatchEventApiDestination = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventApiDestination"], () => require("./cloudwatchEventApiDestination"));

export { CloudwatchEventArchiveArgs, CloudwatchEventArchiveState } from "./cloudwatchEventArchive";
export type CloudwatchEventArchive = import("./cloudwatchEventArchive").CloudwatchEventArchive;
export const CloudwatchEventArchive: typeof import("./cloudwatchEventArchive").CloudwatchEventArchive = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventArchive"], () => require("./cloudwatchEventArchive"));

export { CloudwatchEventBusArgs, CloudwatchEventBusState } from "./cloudwatchEventBus";
export type CloudwatchEventBus = import("./cloudwatchEventBus").CloudwatchEventBus;
export const CloudwatchEventBus: typeof import("./cloudwatchEventBus").CloudwatchEventBus = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventBus"], () => require("./cloudwatchEventBus"));

export { CloudwatchEventBusPolicyArgs, CloudwatchEventBusPolicyState } from "./cloudwatchEventBusPolicy";
export type CloudwatchEventBusPolicy = import("./cloudwatchEventBusPolicy").CloudwatchEventBusPolicy;
export const CloudwatchEventBusPolicy: typeof import("./cloudwatchEventBusPolicy").CloudwatchEventBusPolicy = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventBusPolicy"], () => require("./cloudwatchEventBusPolicy"));

export { CloudwatchEventConnectionArgs, CloudwatchEventConnectionState } from "./cloudwatchEventConnection";
export type CloudwatchEventConnection = import("./cloudwatchEventConnection").CloudwatchEventConnection;
export const CloudwatchEventConnection: typeof import("./cloudwatchEventConnection").CloudwatchEventConnection = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventConnection"], () => require("./cloudwatchEventConnection"));

export { CloudwatchEventEndpointArgs, CloudwatchEventEndpointState } from "./cloudwatchEventEndpoint";
export type CloudwatchEventEndpoint = import("./cloudwatchEventEndpoint").CloudwatchEventEndpoint;
export const CloudwatchEventEndpoint: typeof import("./cloudwatchEventEndpoint").CloudwatchEventEndpoint = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventEndpoint"], () => require("./cloudwatchEventEndpoint"));

export { CloudwatchEventPermissionArgs, CloudwatchEventPermissionState } from "./cloudwatchEventPermission";
export type CloudwatchEventPermission = import("./cloudwatchEventPermission").CloudwatchEventPermission;
export const CloudwatchEventPermission: typeof import("./cloudwatchEventPermission").CloudwatchEventPermission = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventPermission"], () => require("./cloudwatchEventPermission"));

export { CloudwatchEventRuleArgs, CloudwatchEventRuleState } from "./cloudwatchEventRule";
export type CloudwatchEventRule = import("./cloudwatchEventRule").CloudwatchEventRule;
export const CloudwatchEventRule: typeof import("./cloudwatchEventRule").CloudwatchEventRule = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventRule"], () => require("./cloudwatchEventRule"));

export { CloudwatchEventTargetArgs, CloudwatchEventTargetState } from "./cloudwatchEventTarget";
export type CloudwatchEventTarget = import("./cloudwatchEventTarget").CloudwatchEventTarget;
export const CloudwatchEventTarget: typeof import("./cloudwatchEventTarget").CloudwatchEventTarget = null as any;
utilities.lazyLoad(exports, ["CloudwatchEventTarget"], () => require("./cloudwatchEventTarget"));

export { CloudwatchLogAccountPolicyArgs, CloudwatchLogAccountPolicyState } from "./cloudwatchLogAccountPolicy";
export type CloudwatchLogAccountPolicy = import("./cloudwatchLogAccountPolicy").CloudwatchLogAccountPolicy;
export const CloudwatchLogAccountPolicy: typeof import("./cloudwatchLogAccountPolicy").CloudwatchLogAccountPolicy = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogAccountPolicy"], () => require("./cloudwatchLogAccountPolicy"));

export { CloudwatchLogDataProtectionPolicyArgs, CloudwatchLogDataProtectionPolicyState } from "./cloudwatchLogDataProtectionPolicy";
export type CloudwatchLogDataProtectionPolicy = import("./cloudwatchLogDataProtectionPolicy").CloudwatchLogDataProtectionPolicy;
export const CloudwatchLogDataProtectionPolicy: typeof import("./cloudwatchLogDataProtectionPolicy").CloudwatchLogDataProtectionPolicy = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogDataProtectionPolicy"], () => require("./cloudwatchLogDataProtectionPolicy"));

export { CloudwatchLogDestinationArgs, CloudwatchLogDestinationState } from "./cloudwatchLogDestination";
export type CloudwatchLogDestination = import("./cloudwatchLogDestination").CloudwatchLogDestination;
export const CloudwatchLogDestination: typeof import("./cloudwatchLogDestination").CloudwatchLogDestination = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogDestination"], () => require("./cloudwatchLogDestination"));

export { CloudwatchLogDestinationPolicyArgs, CloudwatchLogDestinationPolicyState } from "./cloudwatchLogDestinationPolicy";
export type CloudwatchLogDestinationPolicy = import("./cloudwatchLogDestinationPolicy").CloudwatchLogDestinationPolicy;
export const CloudwatchLogDestinationPolicy: typeof import("./cloudwatchLogDestinationPolicy").CloudwatchLogDestinationPolicy = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogDestinationPolicy"], () => require("./cloudwatchLogDestinationPolicy"));

export { CloudwatchLogGroupArgs, CloudwatchLogGroupState } from "./cloudwatchLogGroup";
export type CloudwatchLogGroup = import("./cloudwatchLogGroup").CloudwatchLogGroup;
export const CloudwatchLogGroup: typeof import("./cloudwatchLogGroup").CloudwatchLogGroup = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogGroup"], () => require("./cloudwatchLogGroup"));

export { CloudwatchLogMetricFilterArgs, CloudwatchLogMetricFilterState } from "./cloudwatchLogMetricFilter";
export type CloudwatchLogMetricFilter = import("./cloudwatchLogMetricFilter").CloudwatchLogMetricFilter;
export const CloudwatchLogMetricFilter: typeof import("./cloudwatchLogMetricFilter").CloudwatchLogMetricFilter = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogMetricFilter"], () => require("./cloudwatchLogMetricFilter"));

export { CloudwatchLogResourcePolicyArgs, CloudwatchLogResourcePolicyState } from "./cloudwatchLogResourcePolicy";
export type CloudwatchLogResourcePolicy = import("./cloudwatchLogResourcePolicy").CloudwatchLogResourcePolicy;
export const CloudwatchLogResourcePolicy: typeof import("./cloudwatchLogResourcePolicy").CloudwatchLogResourcePolicy = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogResourcePolicy"], () => require("./cloudwatchLogResourcePolicy"));

export { CloudwatchLogStreamArgs, CloudwatchLogStreamState } from "./cloudwatchLogStream";
export type CloudwatchLogStream = import("./cloudwatchLogStream").CloudwatchLogStream;
export const CloudwatchLogStream: typeof import("./cloudwatchLogStream").CloudwatchLogStream = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogStream"], () => require("./cloudwatchLogStream"));

export { CloudwatchLogSubscriptionFilterArgs, CloudwatchLogSubscriptionFilterState } from "./cloudwatchLogSubscriptionFilter";
export type CloudwatchLogSubscriptionFilter = import("./cloudwatchLogSubscriptionFilter").CloudwatchLogSubscriptionFilter;
export const CloudwatchLogSubscriptionFilter: typeof import("./cloudwatchLogSubscriptionFilter").CloudwatchLogSubscriptionFilter = null as any;
utilities.lazyLoad(exports, ["CloudwatchLogSubscriptionFilter"], () => require("./cloudwatchLogSubscriptionFilter"));

export { CloudwatchMetricAlarmArgs, CloudwatchMetricAlarmState } from "./cloudwatchMetricAlarm";
export type CloudwatchMetricAlarm = import("./cloudwatchMetricAlarm").CloudwatchMetricAlarm;
export const CloudwatchMetricAlarm: typeof import("./cloudwatchMetricAlarm").CloudwatchMetricAlarm = null as any;
utilities.lazyLoad(exports, ["CloudwatchMetricAlarm"], () => require("./cloudwatchMetricAlarm"));

export { CloudwatchMetricStreamArgs, CloudwatchMetricStreamState } from "./cloudwatchMetricStream";
export type CloudwatchMetricStream = import("./cloudwatchMetricStream").CloudwatchMetricStream;
export const CloudwatchMetricStream: typeof import("./cloudwatchMetricStream").CloudwatchMetricStream = null as any;
utilities.lazyLoad(exports, ["CloudwatchMetricStream"], () => require("./cloudwatchMetricStream"));

export { CloudwatchQueryDefinitionArgs, CloudwatchQueryDefinitionState } from "./cloudwatchQueryDefinition";
export type CloudwatchQueryDefinition = import("./cloudwatchQueryDefinition").CloudwatchQueryDefinition;
export const CloudwatchQueryDefinition: typeof import("./cloudwatchQueryDefinition").CloudwatchQueryDefinition = null as any;
utilities.lazyLoad(exports, ["CloudwatchQueryDefinition"], () => require("./cloudwatchQueryDefinition"));

export { CodeartifactDomainArgs, CodeartifactDomainState } from "./codeartifactDomain";
export type CodeartifactDomain = import("./codeartifactDomain").CodeartifactDomain;
export const CodeartifactDomain: typeof import("./codeartifactDomain").CodeartifactDomain = null as any;
utilities.lazyLoad(exports, ["CodeartifactDomain"], () => require("./codeartifactDomain"));

export { CodeartifactDomainPermissionsPolicyArgs, CodeartifactDomainPermissionsPolicyState } from "./codeartifactDomainPermissionsPolicy";
export type CodeartifactDomainPermissionsPolicy = import("./codeartifactDomainPermissionsPolicy").CodeartifactDomainPermissionsPolicy;
export const CodeartifactDomainPermissionsPolicy: typeof import("./codeartifactDomainPermissionsPolicy").CodeartifactDomainPermissionsPolicy = null as any;
utilities.lazyLoad(exports, ["CodeartifactDomainPermissionsPolicy"], () => require("./codeartifactDomainPermissionsPolicy"));

export { CodeartifactRepositoryArgs, CodeartifactRepositoryState } from "./codeartifactRepository";
export type CodeartifactRepository = import("./codeartifactRepository").CodeartifactRepository;
export const CodeartifactRepository: typeof import("./codeartifactRepository").CodeartifactRepository = null as any;
utilities.lazyLoad(exports, ["CodeartifactRepository"], () => require("./codeartifactRepository"));

export { CodeartifactRepositoryPermissionsPolicyArgs, CodeartifactRepositoryPermissionsPolicyState } from "./codeartifactRepositoryPermissionsPolicy";
export type CodeartifactRepositoryPermissionsPolicy = import("./codeartifactRepositoryPermissionsPolicy").CodeartifactRepositoryPermissionsPolicy;
export const CodeartifactRepositoryPermissionsPolicy: typeof import("./codeartifactRepositoryPermissionsPolicy").CodeartifactRepositoryPermissionsPolicy = null as any;
utilities.lazyLoad(exports, ["CodeartifactRepositoryPermissionsPolicy"], () => require("./codeartifactRepositoryPermissionsPolicy"));

export { CodebuildProjectArgs, CodebuildProjectState } from "./codebuildProject";
export type CodebuildProject = import("./codebuildProject").CodebuildProject;
export const CodebuildProject: typeof import("./codebuildProject").CodebuildProject = null as any;
utilities.lazyLoad(exports, ["CodebuildProject"], () => require("./codebuildProject"));

export { CodebuildReportGroupArgs, CodebuildReportGroupState } from "./codebuildReportGroup";
export type CodebuildReportGroup = import("./codebuildReportGroup").CodebuildReportGroup;
export const CodebuildReportGroup: typeof import("./codebuildReportGroup").CodebuildReportGroup = null as any;
utilities.lazyLoad(exports, ["CodebuildReportGroup"], () => require("./codebuildReportGroup"));

export { CodebuildResourcePolicyArgs, CodebuildResourcePolicyState } from "./codebuildResourcePolicy";
export type CodebuildResourcePolicy = import("./codebuildResourcePolicy").CodebuildResourcePolicy;
export const CodebuildResourcePolicy: typeof import("./codebuildResourcePolicy").CodebuildResourcePolicy = null as any;
utilities.lazyLoad(exports, ["CodebuildResourcePolicy"], () => require("./codebuildResourcePolicy"));

export { CodebuildSourceCredentialArgs, CodebuildSourceCredentialState } from "./codebuildSourceCredential";
export type CodebuildSourceCredential = import("./codebuildSourceCredential").CodebuildSourceCredential;
export const CodebuildSourceCredential: typeof import("./codebuildSourceCredential").CodebuildSourceCredential = null as any;
utilities.lazyLoad(exports, ["CodebuildSourceCredential"], () => require("./codebuildSourceCredential"));

export { CodebuildWebhookArgs, CodebuildWebhookState } from "./codebuildWebhook";
export type CodebuildWebhook = import("./codebuildWebhook").CodebuildWebhook;
export const CodebuildWebhook: typeof import("./codebuildWebhook").CodebuildWebhook = null as any;
utilities.lazyLoad(exports, ["CodebuildWebhook"], () => require("./codebuildWebhook"));

export { CodecatalystDevEnvironmentArgs, CodecatalystDevEnvironmentState } from "./codecatalystDevEnvironment";
export type CodecatalystDevEnvironment = import("./codecatalystDevEnvironment").CodecatalystDevEnvironment;
export const CodecatalystDevEnvironment: typeof import("./codecatalystDevEnvironment").CodecatalystDevEnvironment = null as any;
utilities.lazyLoad(exports, ["CodecatalystDevEnvironment"], () => require("./codecatalystDevEnvironment"));

export { CodecatalystProjectArgs, CodecatalystProjectState } from "./codecatalystProject";
export type CodecatalystProject = import("./codecatalystProject").CodecatalystProject;
export const CodecatalystProject: typeof import("./codecatalystProject").CodecatalystProject = null as any;
utilities.lazyLoad(exports, ["CodecatalystProject"], () => require("./codecatalystProject"));

export { CodecatalystSourceRepositoryArgs, CodecatalystSourceRepositoryState } from "./codecatalystSourceRepository";
export type CodecatalystSourceRepository = import("./codecatalystSourceRepository").CodecatalystSourceRepository;
export const CodecatalystSourceRepository: typeof import("./codecatalystSourceRepository").CodecatalystSourceRepository = null as any;
utilities.lazyLoad(exports, ["CodecatalystSourceRepository"], () => require("./codecatalystSourceRepository"));

export { CodecommitApprovalRuleTemplateArgs, CodecommitApprovalRuleTemplateState } from "./codecommitApprovalRuleTemplate";
export type CodecommitApprovalRuleTemplate = import("./codecommitApprovalRuleTemplate").CodecommitApprovalRuleTemplate;
export const CodecommitApprovalRuleTemplate: typeof import("./codecommitApprovalRuleTemplate").CodecommitApprovalRuleTemplate = null as any;
utilities.lazyLoad(exports, ["CodecommitApprovalRuleTemplate"], () => require("./codecommitApprovalRuleTemplate"));

export { CodecommitApprovalRuleTemplateAssociationArgs, CodecommitApprovalRuleTemplateAssociationState } from "./codecommitApprovalRuleTemplateAssociation";
export type CodecommitApprovalRuleTemplateAssociation = import("./codecommitApprovalRuleTemplateAssociation").CodecommitApprovalRuleTemplateAssociation;
export const CodecommitApprovalRuleTemplateAssociation: typeof import("./codecommitApprovalRuleTemplateAssociation").CodecommitApprovalRuleTemplateAssociation = null as any;
utilities.lazyLoad(exports, ["CodecommitApprovalRuleTemplateAssociation"], () => require("./codecommitApprovalRuleTemplateAssociation"));

export { CodecommitRepositoryArgs, CodecommitRepositoryState } from "./codecommitRepository";
export type CodecommitRepository = import("./codecommitRepository").CodecommitRepository;
export const CodecommitRepository: typeof import("./codecommitRepository").CodecommitRepository = null as any;
utilities.lazyLoad(exports, ["CodecommitRepository"], () => require("./codecommitRepository"));

export { CodecommitTriggerArgs, CodecommitTriggerState } from "./codecommitTrigger";
export type CodecommitTrigger = import("./codecommitTrigger").CodecommitTrigger;
export const CodecommitTrigger: typeof import("./codecommitTrigger").CodecommitTrigger = null as any;
utilities.lazyLoad(exports, ["CodecommitTrigger"], () => require("./codecommitTrigger"));

export { CodedeployAppArgs, CodedeployAppState } from "./codedeployApp";
export type CodedeployApp = import("./codedeployApp").CodedeployApp;
export const CodedeployApp: typeof import("./codedeployApp").CodedeployApp = null as any;
utilities.lazyLoad(exports, ["CodedeployApp"], () => require("./codedeployApp"));

export { CodedeployDeploymentConfigArgs, CodedeployDeploymentConfigState } from "./codedeployDeploymentConfig";
export type CodedeployDeploymentConfig = import("./codedeployDeploymentConfig").CodedeployDeploymentConfig;
export const CodedeployDeploymentConfig: typeof import("./codedeployDeploymentConfig").CodedeployDeploymentConfig = null as any;
utilities.lazyLoad(exports, ["CodedeployDeploymentConfig"], () => require("./codedeployDeploymentConfig"));

export { CodedeployDeploymentGroupArgs, CodedeployDeploymentGroupState } from "./codedeployDeploymentGroup";
export type CodedeployDeploymentGroup = import("./codedeployDeploymentGroup").CodedeployDeploymentGroup;
export const CodedeployDeploymentGroup: typeof import("./codedeployDeploymentGroup").CodedeployDeploymentGroup = null as any;
utilities.lazyLoad(exports, ["CodedeployDeploymentGroup"], () => require("./codedeployDeploymentGroup"));

export { CodeguruprofilerProfilingGroupArgs, CodeguruprofilerProfilingGroupState } from "./codeguruprofilerProfilingGroup";
export type CodeguruprofilerProfilingGroup = import("./codeguruprofilerProfilingGroup").CodeguruprofilerProfilingGroup;
export const CodeguruprofilerProfilingGroup: typeof import("./codeguruprofilerProfilingGroup").CodeguruprofilerProfilingGroup = null as any;
utilities.lazyLoad(exports, ["CodeguruprofilerProfilingGroup"], () => require("./codeguruprofilerProfilingGroup"));

export { CodegurureviewerRepositoryAssociationArgs, CodegurureviewerRepositoryAssociationState } from "./codegurureviewerRepositoryAssociation";
export type CodegurureviewerRepositoryAssociation = import("./codegurureviewerRepositoryAssociation").CodegurureviewerRepositoryAssociation;
export const CodegurureviewerRepositoryAssociation: typeof import("./codegurureviewerRepositoryAssociation").CodegurureviewerRepositoryAssociation = null as any;
utilities.lazyLoad(exports, ["CodegurureviewerRepositoryAssociation"], () => require("./codegurureviewerRepositoryAssociation"));

export { CodepipelineArgs, CodepipelineState } from "./codepipeline";
export type Codepipeline = import("./codepipeline").Codepipeline;
export const Codepipeline: typeof import("./codepipeline").Codepipeline = null as any;
utilities.lazyLoad(exports, ["Codepipeline"], () => require("./codepipeline"));

export { CodepipelineCustomActionTypeArgs, CodepipelineCustomActionTypeState } from "./codepipelineCustomActionType";
export type CodepipelineCustomActionType = import("./codepipelineCustomActionType").CodepipelineCustomActionType;
export const CodepipelineCustomActionType: typeof import("./codepipelineCustomActionType").CodepipelineCustomActionType = null as any;
utilities.lazyLoad(exports, ["CodepipelineCustomActionType"], () => require("./codepipelineCustomActionType"));

export { CodepipelineWebhookArgs, CodepipelineWebhookState } from "./codepipelineWebhook";
export type CodepipelineWebhook = import("./codepipelineWebhook").CodepipelineWebhook;
export const CodepipelineWebhook: typeof import("./codepipelineWebhook").CodepipelineWebhook = null as any;
utilities.lazyLoad(exports, ["CodepipelineWebhook"], () => require("./codepipelineWebhook"));

export { CodestarconnectionsConnectionArgs, CodestarconnectionsConnectionState } from "./codestarconnectionsConnection";
export type CodestarconnectionsConnection = import("./codestarconnectionsConnection").CodestarconnectionsConnection;
export const CodestarconnectionsConnection: typeof import("./codestarconnectionsConnection").CodestarconnectionsConnection = null as any;
utilities.lazyLoad(exports, ["CodestarconnectionsConnection"], () => require("./codestarconnectionsConnection"));

export { CodestarconnectionsHostArgs, CodestarconnectionsHostState } from "./codestarconnectionsHost";
export type CodestarconnectionsHost = import("./codestarconnectionsHost").CodestarconnectionsHost;
export const CodestarconnectionsHost: typeof import("./codestarconnectionsHost").CodestarconnectionsHost = null as any;
utilities.lazyLoad(exports, ["CodestarconnectionsHost"], () => require("./codestarconnectionsHost"));

export { CodestarnotificationsNotificationRuleArgs, CodestarnotificationsNotificationRuleState } from "./codestarnotificationsNotificationRule";
export type CodestarnotificationsNotificationRule = import("./codestarnotificationsNotificationRule").CodestarnotificationsNotificationRule;
export const CodestarnotificationsNotificationRule: typeof import("./codestarnotificationsNotificationRule").CodestarnotificationsNotificationRule = null as any;
utilities.lazyLoad(exports, ["CodestarnotificationsNotificationRule"], () => require("./codestarnotificationsNotificationRule"));

export { CognitoIdentityPoolArgs, CognitoIdentityPoolState } from "./cognitoIdentityPool";
export type CognitoIdentityPool = import("./cognitoIdentityPool").CognitoIdentityPool;
export const CognitoIdentityPool: typeof import("./cognitoIdentityPool").CognitoIdentityPool = null as any;
utilities.lazyLoad(exports, ["CognitoIdentityPool"], () => require("./cognitoIdentityPool"));

export { CognitoIdentityPoolProviderPrincipalTagArgs, CognitoIdentityPoolProviderPrincipalTagState } from "./cognitoIdentityPoolProviderPrincipalTag";
export type CognitoIdentityPoolProviderPrincipalTag = import("./cognitoIdentityPoolProviderPrincipalTag").CognitoIdentityPoolProviderPrincipalTag;
export const CognitoIdentityPoolProviderPrincipalTag: typeof import("./cognitoIdentityPoolProviderPrincipalTag").CognitoIdentityPoolProviderPrincipalTag = null as any;
utilities.lazyLoad(exports, ["CognitoIdentityPoolProviderPrincipalTag"], () => require("./cognitoIdentityPoolProviderPrincipalTag"));

export { CognitoIdentityPoolRolesAttachmentArgs, CognitoIdentityPoolRolesAttachmentState } from "./cognitoIdentityPoolRolesAttachment";
export type CognitoIdentityPoolRolesAttachment = import("./cognitoIdentityPoolRolesAttachment").CognitoIdentityPoolRolesAttachment;
export const CognitoIdentityPoolRolesAttachment: typeof import("./cognitoIdentityPoolRolesAttachment").CognitoIdentityPoolRolesAttachment = null as any;
utilities.lazyLoad(exports, ["CognitoIdentityPoolRolesAttachment"], () => require("./cognitoIdentityPoolRolesAttachment"));

export { CognitoIdentityProviderArgs, CognitoIdentityProviderState } from "./cognitoIdentityProvider";
export type CognitoIdentityProvider = import("./cognitoIdentityProvider").CognitoIdentityProvider;
export const CognitoIdentityProvider: typeof import("./cognitoIdentityProvider").CognitoIdentityProvider = null as any;
utilities.lazyLoad(exports, ["CognitoIdentityProvider"], () => require("./cognitoIdentityProvider"));

export { CognitoManagedUserPoolClientArgs, CognitoManagedUserPoolClientState } from "./cognitoManagedUserPoolClient";
export type CognitoManagedUserPoolClient = import("./cognitoManagedUserPoolClient").CognitoManagedUserPoolClient;
export const CognitoManagedUserPoolClient: typeof import("./cognitoManagedUserPoolClient").CognitoManagedUserPoolClient = null as any;
utilities.lazyLoad(exports, ["CognitoManagedUserPoolClient"], () => require("./cognitoManagedUserPoolClient"));

export { CognitoResourceServerArgs, CognitoResourceServerState } from "./cognitoResourceServer";
export type CognitoResourceServer = import("./cognitoResourceServer").CognitoResourceServer;
export const CognitoResourceServer: typeof import("./cognitoResourceServer").CognitoResourceServer = null as any;
utilities.lazyLoad(exports, ["CognitoResourceServer"], () => require("./cognitoResourceServer"));

export { CognitoRiskConfigurationArgs, CognitoRiskConfigurationState } from "./cognitoRiskConfiguration";
export type CognitoRiskConfiguration = import("./cognitoRiskConfiguration").CognitoRiskConfiguration;
export const CognitoRiskConfiguration: typeof import("./cognitoRiskConfiguration").CognitoRiskConfiguration = null as any;
utilities.lazyLoad(exports, ["CognitoRiskConfiguration"], () => require("./cognitoRiskConfiguration"));

export { CognitoUserArgs, CognitoUserState } from "./cognitoUser";
export type CognitoUser = import("./cognitoUser").CognitoUser;
export const CognitoUser: typeof import("./cognitoUser").CognitoUser = null as any;
utilities.lazyLoad(exports, ["CognitoUser"], () => require("./cognitoUser"));

export { CognitoUserGroupArgs, CognitoUserGroupState } from "./cognitoUserGroup";
export type CognitoUserGroup = import("./cognitoUserGroup").CognitoUserGroup;
export const CognitoUserGroup: typeof import("./cognitoUserGroup").CognitoUserGroup = null as any;
utilities.lazyLoad(exports, ["CognitoUserGroup"], () => require("./cognitoUserGroup"));

export { CognitoUserInGroupArgs, CognitoUserInGroupState } from "./cognitoUserInGroup";
export type CognitoUserInGroup = import("./cognitoUserInGroup").CognitoUserInGroup;
export const CognitoUserInGroup: typeof import("./cognitoUserInGroup").CognitoUserInGroup = null as any;
utilities.lazyLoad(exports, ["CognitoUserInGroup"], () => require("./cognitoUserInGroup"));

export { CognitoUserPoolArgs, CognitoUserPoolState } from "./cognitoUserPool";
export type CognitoUserPool = import("./cognitoUserPool").CognitoUserPool;
export const CognitoUserPool: typeof import("./cognitoUserPool").CognitoUserPool = null as any;
utilities.lazyLoad(exports, ["CognitoUserPool"], () => require("./cognitoUserPool"));

export { CognitoUserPoolClientArgs, CognitoUserPoolClientState } from "./cognitoUserPoolClient";
export type CognitoUserPoolClient = import("./cognitoUserPoolClient").CognitoUserPoolClient;
export const CognitoUserPoolClient: typeof import("./cognitoUserPoolClient").CognitoUserPoolClient = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolClient"], () => require("./cognitoUserPoolClient"));

export { CognitoUserPoolDomainArgs, CognitoUserPoolDomainState } from "./cognitoUserPoolDomain";
export type CognitoUserPoolDomain = import("./cognitoUserPoolDomain").CognitoUserPoolDomain;
export const CognitoUserPoolDomain: typeof import("./cognitoUserPoolDomain").CognitoUserPoolDomain = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolDomain"], () => require("./cognitoUserPoolDomain"));

export { CognitoUserPoolUiCustomizationArgs, CognitoUserPoolUiCustomizationState } from "./cognitoUserPoolUiCustomization";
export type CognitoUserPoolUiCustomization = import("./cognitoUserPoolUiCustomization").CognitoUserPoolUiCustomization;
export const CognitoUserPoolUiCustomization: typeof import("./cognitoUserPoolUiCustomization").CognitoUserPoolUiCustomization = null as any;
utilities.lazyLoad(exports, ["CognitoUserPoolUiCustomization"], () => require("./cognitoUserPoolUiCustomization"));

export { ComprehendDocumentClassifierArgs, ComprehendDocumentClassifierState } from "./comprehendDocumentClassifier";
export type ComprehendDocumentClassifier = import("./comprehendDocumentClassifier").ComprehendDocumentClassifier;
export const ComprehendDocumentClassifier: typeof import("./comprehendDocumentClassifier").ComprehendDocumentClassifier = null as any;
utilities.lazyLoad(exports, ["ComprehendDocumentClassifier"], () => require("./comprehendDocumentClassifier"));

export { ComprehendEntityRecognizerArgs, ComprehendEntityRecognizerState } from "./comprehendEntityRecognizer";
export type ComprehendEntityRecognizer = import("./comprehendEntityRecognizer").ComprehendEntityRecognizer;
export const ComprehendEntityRecognizer: typeof import("./comprehendEntityRecognizer").ComprehendEntityRecognizer = null as any;
utilities.lazyLoad(exports, ["ComprehendEntityRecognizer"], () => require("./comprehendEntityRecognizer"));

export { ConfigAggregateAuthorizationArgs, ConfigAggregateAuthorizationState } from "./configAggregateAuthorization";
export type ConfigAggregateAuthorization = import("./configAggregateAuthorization").ConfigAggregateAuthorization;
export const ConfigAggregateAuthorization: typeof import("./configAggregateAuthorization").ConfigAggregateAuthorization = null as any;
utilities.lazyLoad(exports, ["ConfigAggregateAuthorization"], () => require("./configAggregateAuthorization"));

export { ConfigConfigRuleArgs, ConfigConfigRuleState } from "./configConfigRule";
export type ConfigConfigRule = import("./configConfigRule").ConfigConfigRule;
export const ConfigConfigRule: typeof import("./configConfigRule").ConfigConfigRule = null as any;
utilities.lazyLoad(exports, ["ConfigConfigRule"], () => require("./configConfigRule"));

export { ConfigConfigurationAggregatorArgs, ConfigConfigurationAggregatorState } from "./configConfigurationAggregator";
export type ConfigConfigurationAggregator = import("./configConfigurationAggregator").ConfigConfigurationAggregator;
export const ConfigConfigurationAggregator: typeof import("./configConfigurationAggregator").ConfigConfigurationAggregator = null as any;
utilities.lazyLoad(exports, ["ConfigConfigurationAggregator"], () => require("./configConfigurationAggregator"));

export { ConfigConfigurationRecorderArgs, ConfigConfigurationRecorderState } from "./configConfigurationRecorder";
export type ConfigConfigurationRecorder = import("./configConfigurationRecorder").ConfigConfigurationRecorder;
export const ConfigConfigurationRecorder: typeof import("./configConfigurationRecorder").ConfigConfigurationRecorder = null as any;
utilities.lazyLoad(exports, ["ConfigConfigurationRecorder"], () => require("./configConfigurationRecorder"));

export { ConfigConfigurationRecorderStatusArgs, ConfigConfigurationRecorderStatusState } from "./configConfigurationRecorderStatus";
export type ConfigConfigurationRecorderStatus = import("./configConfigurationRecorderStatus").ConfigConfigurationRecorderStatus;
export const ConfigConfigurationRecorderStatus: typeof import("./configConfigurationRecorderStatus").ConfigConfigurationRecorderStatus = null as any;
utilities.lazyLoad(exports, ["ConfigConfigurationRecorderStatus"], () => require("./configConfigurationRecorderStatus"));

export { ConfigConformancePackArgs, ConfigConformancePackState } from "./configConformancePack";
export type ConfigConformancePack = import("./configConformancePack").ConfigConformancePack;
export const ConfigConformancePack: typeof import("./configConformancePack").ConfigConformancePack = null as any;
utilities.lazyLoad(exports, ["ConfigConformancePack"], () => require("./configConformancePack"));

export { ConfigDeliveryChannelArgs, ConfigDeliveryChannelState } from "./configDeliveryChannel";
export type ConfigDeliveryChannel = import("./configDeliveryChannel").ConfigDeliveryChannel;
export const ConfigDeliveryChannel: typeof import("./configDeliveryChannel").ConfigDeliveryChannel = null as any;
utilities.lazyLoad(exports, ["ConfigDeliveryChannel"], () => require("./configDeliveryChannel"));

export { ConfigOrganizationConformancePackArgs, ConfigOrganizationConformancePackState } from "./configOrganizationConformancePack";
export type ConfigOrganizationConformancePack = import("./configOrganizationConformancePack").ConfigOrganizationConformancePack;
export const ConfigOrganizationConformancePack: typeof import("./configOrganizationConformancePack").ConfigOrganizationConformancePack = null as any;
utilities.lazyLoad(exports, ["ConfigOrganizationConformancePack"], () => require("./configOrganizationConformancePack"));

export { ConfigOrganizationCustomPolicyRuleArgs, ConfigOrganizationCustomPolicyRuleState } from "./configOrganizationCustomPolicyRule";
export type ConfigOrganizationCustomPolicyRule = import("./configOrganizationCustomPolicyRule").ConfigOrganizationCustomPolicyRule;
export const ConfigOrganizationCustomPolicyRule: typeof import("./configOrganizationCustomPolicyRule").ConfigOrganizationCustomPolicyRule = null as any;
utilities.lazyLoad(exports, ["ConfigOrganizationCustomPolicyRule"], () => require("./configOrganizationCustomPolicyRule"));

export { ConfigOrganizationCustomRuleArgs, ConfigOrganizationCustomRuleState } from "./configOrganizationCustomRule";
export type ConfigOrganizationCustomRule = import("./configOrganizationCustomRule").ConfigOrganizationCustomRule;
export const ConfigOrganizationCustomRule: typeof import("./configOrganizationCustomRule").ConfigOrganizationCustomRule = null as any;
utilities.lazyLoad(exports, ["ConfigOrganizationCustomRule"], () => require("./configOrganizationCustomRule"));

export { ConfigOrganizationManagedRuleArgs, ConfigOrganizationManagedRuleState } from "./configOrganizationManagedRule";
export type ConfigOrganizationManagedRule = import("./configOrganizationManagedRule").ConfigOrganizationManagedRule;
export const ConfigOrganizationManagedRule: typeof import("./configOrganizationManagedRule").ConfigOrganizationManagedRule = null as any;
utilities.lazyLoad(exports, ["ConfigOrganizationManagedRule"], () => require("./configOrganizationManagedRule"));

export { ConfigRemediationConfigurationArgs, ConfigRemediationConfigurationState } from "./configRemediationConfiguration";
export type ConfigRemediationConfiguration = import("./configRemediationConfiguration").ConfigRemediationConfiguration;
export const ConfigRemediationConfiguration: typeof import("./configRemediationConfiguration").ConfigRemediationConfiguration = null as any;
utilities.lazyLoad(exports, ["ConfigRemediationConfiguration"], () => require("./configRemediationConfiguration"));

export { ConfigRetentionConfigurationArgs, ConfigRetentionConfigurationState } from "./configRetentionConfiguration";
export type ConfigRetentionConfiguration = import("./configRetentionConfiguration").ConfigRetentionConfiguration;
export const ConfigRetentionConfiguration: typeof import("./configRetentionConfiguration").ConfigRetentionConfiguration = null as any;
utilities.lazyLoad(exports, ["ConfigRetentionConfiguration"], () => require("./configRetentionConfiguration"));

export { ConnectBotAssociationArgs, ConnectBotAssociationState } from "./connectBotAssociation";
export type ConnectBotAssociation = import("./connectBotAssociation").ConnectBotAssociation;
export const ConnectBotAssociation: typeof import("./connectBotAssociation").ConnectBotAssociation = null as any;
utilities.lazyLoad(exports, ["ConnectBotAssociation"], () => require("./connectBotAssociation"));

export { ConnectContactFlowArgs, ConnectContactFlowState } from "./connectContactFlow";
export type ConnectContactFlow = import("./connectContactFlow").ConnectContactFlow;
export const ConnectContactFlow: typeof import("./connectContactFlow").ConnectContactFlow = null as any;
utilities.lazyLoad(exports, ["ConnectContactFlow"], () => require("./connectContactFlow"));

export { ConnectContactFlowModuleArgs, ConnectContactFlowModuleState } from "./connectContactFlowModule";
export type ConnectContactFlowModule = import("./connectContactFlowModule").ConnectContactFlowModule;
export const ConnectContactFlowModule: typeof import("./connectContactFlowModule").ConnectContactFlowModule = null as any;
utilities.lazyLoad(exports, ["ConnectContactFlowModule"], () => require("./connectContactFlowModule"));

export { ConnectHoursOfOperationArgs, ConnectHoursOfOperationState } from "./connectHoursOfOperation";
export type ConnectHoursOfOperation = import("./connectHoursOfOperation").ConnectHoursOfOperation;
export const ConnectHoursOfOperation: typeof import("./connectHoursOfOperation").ConnectHoursOfOperation = null as any;
utilities.lazyLoad(exports, ["ConnectHoursOfOperation"], () => require("./connectHoursOfOperation"));

export { ConnectInstanceArgs, ConnectInstanceState } from "./connectInstance";
export type ConnectInstance = import("./connectInstance").ConnectInstance;
export const ConnectInstance: typeof import("./connectInstance").ConnectInstance = null as any;
utilities.lazyLoad(exports, ["ConnectInstance"], () => require("./connectInstance"));

export { ConnectInstanceStorageConfigArgs, ConnectInstanceStorageConfigState } from "./connectInstanceStorageConfig";
export type ConnectInstanceStorageConfig = import("./connectInstanceStorageConfig").ConnectInstanceStorageConfig;
export const ConnectInstanceStorageConfig: typeof import("./connectInstanceStorageConfig").ConnectInstanceStorageConfig = null as any;
utilities.lazyLoad(exports, ["ConnectInstanceStorageConfig"], () => require("./connectInstanceStorageConfig"));

export { ConnectLambdaFunctionAssociationArgs, ConnectLambdaFunctionAssociationState } from "./connectLambdaFunctionAssociation";
export type ConnectLambdaFunctionAssociation = import("./connectLambdaFunctionAssociation").ConnectLambdaFunctionAssociation;
export const ConnectLambdaFunctionAssociation: typeof import("./connectLambdaFunctionAssociation").ConnectLambdaFunctionAssociation = null as any;
utilities.lazyLoad(exports, ["ConnectLambdaFunctionAssociation"], () => require("./connectLambdaFunctionAssociation"));

export { ConnectPhoneNumberArgs, ConnectPhoneNumberState } from "./connectPhoneNumber";
export type ConnectPhoneNumber = import("./connectPhoneNumber").ConnectPhoneNumber;
export const ConnectPhoneNumber: typeof import("./connectPhoneNumber").ConnectPhoneNumber = null as any;
utilities.lazyLoad(exports, ["ConnectPhoneNumber"], () => require("./connectPhoneNumber"));

export { ConnectQueueArgs, ConnectQueueState } from "./connectQueue";
export type ConnectQueue = import("./connectQueue").ConnectQueue;
export const ConnectQueue: typeof import("./connectQueue").ConnectQueue = null as any;
utilities.lazyLoad(exports, ["ConnectQueue"], () => require("./connectQueue"));

export { ConnectQuickConnectArgs, ConnectQuickConnectState } from "./connectQuickConnect";
export type ConnectQuickConnect = import("./connectQuickConnect").ConnectQuickConnect;
export const ConnectQuickConnect: typeof import("./connectQuickConnect").ConnectQuickConnect = null as any;
utilities.lazyLoad(exports, ["ConnectQuickConnect"], () => require("./connectQuickConnect"));

export { ConnectRoutingProfileArgs, ConnectRoutingProfileState } from "./connectRoutingProfile";
export type ConnectRoutingProfile = import("./connectRoutingProfile").ConnectRoutingProfile;
export const ConnectRoutingProfile: typeof import("./connectRoutingProfile").ConnectRoutingProfile = null as any;
utilities.lazyLoad(exports, ["ConnectRoutingProfile"], () => require("./connectRoutingProfile"));

export { ConnectSecurityProfileArgs, ConnectSecurityProfileState } from "./connectSecurityProfile";
export type ConnectSecurityProfile = import("./connectSecurityProfile").ConnectSecurityProfile;
export const ConnectSecurityProfile: typeof import("./connectSecurityProfile").ConnectSecurityProfile = null as any;
utilities.lazyLoad(exports, ["ConnectSecurityProfile"], () => require("./connectSecurityProfile"));

export { ConnectUserArgs, ConnectUserState } from "./connectUser";
export type ConnectUser = import("./connectUser").ConnectUser;
export const ConnectUser: typeof import("./connectUser").ConnectUser = null as any;
utilities.lazyLoad(exports, ["ConnectUser"], () => require("./connectUser"));

export { ConnectUserHierarchyGroupArgs, ConnectUserHierarchyGroupState } from "./connectUserHierarchyGroup";
export type ConnectUserHierarchyGroup = import("./connectUserHierarchyGroup").ConnectUserHierarchyGroup;
export const ConnectUserHierarchyGroup: typeof import("./connectUserHierarchyGroup").ConnectUserHierarchyGroup = null as any;
utilities.lazyLoad(exports, ["ConnectUserHierarchyGroup"], () => require("./connectUserHierarchyGroup"));

export { ConnectUserHierarchyStructureArgs, ConnectUserHierarchyStructureState } from "./connectUserHierarchyStructure";
export type ConnectUserHierarchyStructure = import("./connectUserHierarchyStructure").ConnectUserHierarchyStructure;
export const ConnectUserHierarchyStructure: typeof import("./connectUserHierarchyStructure").ConnectUserHierarchyStructure = null as any;
utilities.lazyLoad(exports, ["ConnectUserHierarchyStructure"], () => require("./connectUserHierarchyStructure"));

export { ConnectVocabularyArgs, ConnectVocabularyState } from "./connectVocabulary";
export type ConnectVocabulary = import("./connectVocabulary").ConnectVocabulary;
export const ConnectVocabulary: typeof import("./connectVocabulary").ConnectVocabulary = null as any;
utilities.lazyLoad(exports, ["ConnectVocabulary"], () => require("./connectVocabulary"));

export { ControltowerControlArgs, ControltowerControlState } from "./controltowerControl";
export type ControltowerControl = import("./controltowerControl").ControltowerControl;
export const ControltowerControl: typeof import("./controltowerControl").ControltowerControl = null as any;
utilities.lazyLoad(exports, ["ControltowerControl"], () => require("./controltowerControl"));

export { ControltowerLandingZoneArgs, ControltowerLandingZoneState } from "./controltowerLandingZone";
export type ControltowerLandingZone = import("./controltowerLandingZone").ControltowerLandingZone;
export const ControltowerLandingZone: typeof import("./controltowerLandingZone").ControltowerLandingZone = null as any;
utilities.lazyLoad(exports, ["ControltowerLandingZone"], () => require("./controltowerLandingZone"));

export { CurReportDefinitionArgs, CurReportDefinitionState } from "./curReportDefinition";
export type CurReportDefinition = import("./curReportDefinition").CurReportDefinition;
export const CurReportDefinition: typeof import("./curReportDefinition").CurReportDefinition = null as any;
utilities.lazyLoad(exports, ["CurReportDefinition"], () => require("./curReportDefinition"));

export { CustomerGatewayArgs, CustomerGatewayState } from "./customerGateway";
export type CustomerGateway = import("./customerGateway").CustomerGateway;
export const CustomerGateway: typeof import("./customerGateway").CustomerGateway = null as any;
utilities.lazyLoad(exports, ["CustomerGateway"], () => require("./customerGateway"));

export { CustomerprofilesDomainArgs, CustomerprofilesDomainState } from "./customerprofilesDomain";
export type CustomerprofilesDomain = import("./customerprofilesDomain").CustomerprofilesDomain;
export const CustomerprofilesDomain: typeof import("./customerprofilesDomain").CustomerprofilesDomain = null as any;
utilities.lazyLoad(exports, ["CustomerprofilesDomain"], () => require("./customerprofilesDomain"));

export { CustomerprofilesProfileArgs, CustomerprofilesProfileState } from "./customerprofilesProfile";
export type CustomerprofilesProfile = import("./customerprofilesProfile").CustomerprofilesProfile;
export const CustomerprofilesProfile: typeof import("./customerprofilesProfile").CustomerprofilesProfile = null as any;
utilities.lazyLoad(exports, ["CustomerprofilesProfile"], () => require("./customerprofilesProfile"));

export { DataexchangeDataSetArgs, DataexchangeDataSetState } from "./dataexchangeDataSet";
export type DataexchangeDataSet = import("./dataexchangeDataSet").DataexchangeDataSet;
export const DataexchangeDataSet: typeof import("./dataexchangeDataSet").DataexchangeDataSet = null as any;
utilities.lazyLoad(exports, ["DataexchangeDataSet"], () => require("./dataexchangeDataSet"));

export { DataexchangeRevisionArgs, DataexchangeRevisionState } from "./dataexchangeRevision";
export type DataexchangeRevision = import("./dataexchangeRevision").DataexchangeRevision;
export const DataexchangeRevision: typeof import("./dataexchangeRevision").DataexchangeRevision = null as any;
utilities.lazyLoad(exports, ["DataexchangeRevision"], () => require("./dataexchangeRevision"));

export { DatapipelinePipelineArgs, DatapipelinePipelineState } from "./datapipelinePipeline";
export type DatapipelinePipeline = import("./datapipelinePipeline").DatapipelinePipeline;
export const DatapipelinePipeline: typeof import("./datapipelinePipeline").DatapipelinePipeline = null as any;
utilities.lazyLoad(exports, ["DatapipelinePipeline"], () => require("./datapipelinePipeline"));

export { DatapipelinePipelineDefinitionArgs, DatapipelinePipelineDefinitionState } from "./datapipelinePipelineDefinition";
export type DatapipelinePipelineDefinition = import("./datapipelinePipelineDefinition").DatapipelinePipelineDefinition;
export const DatapipelinePipelineDefinition: typeof import("./datapipelinePipelineDefinition").DatapipelinePipelineDefinition = null as any;
utilities.lazyLoad(exports, ["DatapipelinePipelineDefinition"], () => require("./datapipelinePipelineDefinition"));

export { DatasyncAgentArgs, DatasyncAgentState } from "./datasyncAgent";
export type DatasyncAgent = import("./datasyncAgent").DatasyncAgent;
export const DatasyncAgent: typeof import("./datasyncAgent").DatasyncAgent = null as any;
utilities.lazyLoad(exports, ["DatasyncAgent"], () => require("./datasyncAgent"));

export { DatasyncLocationAzureBlobArgs, DatasyncLocationAzureBlobState } from "./datasyncLocationAzureBlob";
export type DatasyncLocationAzureBlob = import("./datasyncLocationAzureBlob").DatasyncLocationAzureBlob;
export const DatasyncLocationAzureBlob: typeof import("./datasyncLocationAzureBlob").DatasyncLocationAzureBlob = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationAzureBlob"], () => require("./datasyncLocationAzureBlob"));

export { DatasyncLocationEfsArgs, DatasyncLocationEfsState } from "./datasyncLocationEfs";
export type DatasyncLocationEfs = import("./datasyncLocationEfs").DatasyncLocationEfs;
export const DatasyncLocationEfs: typeof import("./datasyncLocationEfs").DatasyncLocationEfs = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationEfs"], () => require("./datasyncLocationEfs"));

export { DatasyncLocationFsxLustreFileSystemArgs, DatasyncLocationFsxLustreFileSystemState } from "./datasyncLocationFsxLustreFileSystem";
export type DatasyncLocationFsxLustreFileSystem = import("./datasyncLocationFsxLustreFileSystem").DatasyncLocationFsxLustreFileSystem;
export const DatasyncLocationFsxLustreFileSystem: typeof import("./datasyncLocationFsxLustreFileSystem").DatasyncLocationFsxLustreFileSystem = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxLustreFileSystem"], () => require("./datasyncLocationFsxLustreFileSystem"));

export { DatasyncLocationFsxOntapFileSystemArgs, DatasyncLocationFsxOntapFileSystemState } from "./datasyncLocationFsxOntapFileSystem";
export type DatasyncLocationFsxOntapFileSystem = import("./datasyncLocationFsxOntapFileSystem").DatasyncLocationFsxOntapFileSystem;
export const DatasyncLocationFsxOntapFileSystem: typeof import("./datasyncLocationFsxOntapFileSystem").DatasyncLocationFsxOntapFileSystem = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxOntapFileSystem"], () => require("./datasyncLocationFsxOntapFileSystem"));

export { DatasyncLocationFsxOpenzfsFileSystemArgs, DatasyncLocationFsxOpenzfsFileSystemState } from "./datasyncLocationFsxOpenzfsFileSystem";
export type DatasyncLocationFsxOpenzfsFileSystem = import("./datasyncLocationFsxOpenzfsFileSystem").DatasyncLocationFsxOpenzfsFileSystem;
export const DatasyncLocationFsxOpenzfsFileSystem: typeof import("./datasyncLocationFsxOpenzfsFileSystem").DatasyncLocationFsxOpenzfsFileSystem = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxOpenzfsFileSystem"], () => require("./datasyncLocationFsxOpenzfsFileSystem"));

export { DatasyncLocationFsxWindowsFileSystemArgs, DatasyncLocationFsxWindowsFileSystemState } from "./datasyncLocationFsxWindowsFileSystem";
export type DatasyncLocationFsxWindowsFileSystem = import("./datasyncLocationFsxWindowsFileSystem").DatasyncLocationFsxWindowsFileSystem;
export const DatasyncLocationFsxWindowsFileSystem: typeof import("./datasyncLocationFsxWindowsFileSystem").DatasyncLocationFsxWindowsFileSystem = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationFsxWindowsFileSystem"], () => require("./datasyncLocationFsxWindowsFileSystem"));

export { DatasyncLocationHdfsArgs, DatasyncLocationHdfsState } from "./datasyncLocationHdfs";
export type DatasyncLocationHdfs = import("./datasyncLocationHdfs").DatasyncLocationHdfs;
export const DatasyncLocationHdfs: typeof import("./datasyncLocationHdfs").DatasyncLocationHdfs = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationHdfs"], () => require("./datasyncLocationHdfs"));

export { DatasyncLocationNfsArgs, DatasyncLocationNfsState } from "./datasyncLocationNfs";
export type DatasyncLocationNfs = import("./datasyncLocationNfs").DatasyncLocationNfs;
export const DatasyncLocationNfs: typeof import("./datasyncLocationNfs").DatasyncLocationNfs = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationNfs"], () => require("./datasyncLocationNfs"));

export { DatasyncLocationObjectStorageArgs, DatasyncLocationObjectStorageState } from "./datasyncLocationObjectStorage";
export type DatasyncLocationObjectStorage = import("./datasyncLocationObjectStorage").DatasyncLocationObjectStorage;
export const DatasyncLocationObjectStorage: typeof import("./datasyncLocationObjectStorage").DatasyncLocationObjectStorage = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationObjectStorage"], () => require("./datasyncLocationObjectStorage"));

export { DatasyncLocationS3Args, DatasyncLocationS3State } from "./datasyncLocationS3";
export type DatasyncLocationS3 = import("./datasyncLocationS3").DatasyncLocationS3;
export const DatasyncLocationS3: typeof import("./datasyncLocationS3").DatasyncLocationS3 = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationS3"], () => require("./datasyncLocationS3"));

export { DatasyncLocationSmbArgs, DatasyncLocationSmbState } from "./datasyncLocationSmb";
export type DatasyncLocationSmb = import("./datasyncLocationSmb").DatasyncLocationSmb;
export const DatasyncLocationSmb: typeof import("./datasyncLocationSmb").DatasyncLocationSmb = null as any;
utilities.lazyLoad(exports, ["DatasyncLocationSmb"], () => require("./datasyncLocationSmb"));

export { DatasyncTaskArgs, DatasyncTaskState } from "./datasyncTask";
export type DatasyncTask = import("./datasyncTask").DatasyncTask;
export const DatasyncTask: typeof import("./datasyncTask").DatasyncTask = null as any;
utilities.lazyLoad(exports, ["DatasyncTask"], () => require("./datasyncTask"));

export { DatazoneDomainArgs, DatazoneDomainState } from "./datazoneDomain";
export type DatazoneDomain = import("./datazoneDomain").DatazoneDomain;
export const DatazoneDomain: typeof import("./datazoneDomain").DatazoneDomain = null as any;
utilities.lazyLoad(exports, ["DatazoneDomain"], () => require("./datazoneDomain"));

export { DatazoneEnvironmentBlueprintConfigurationArgs, DatazoneEnvironmentBlueprintConfigurationState } from "./datazoneEnvironmentBlueprintConfiguration";
export type DatazoneEnvironmentBlueprintConfiguration = import("./datazoneEnvironmentBlueprintConfiguration").DatazoneEnvironmentBlueprintConfiguration;
export const DatazoneEnvironmentBlueprintConfiguration: typeof import("./datazoneEnvironmentBlueprintConfiguration").DatazoneEnvironmentBlueprintConfiguration = null as any;
utilities.lazyLoad(exports, ["DatazoneEnvironmentBlueprintConfiguration"], () => require("./datazoneEnvironmentBlueprintConfiguration"));

export { DatazoneEnvironmentProfileArgs, DatazoneEnvironmentProfileState } from "./datazoneEnvironmentProfile";
export type DatazoneEnvironmentProfile = import("./datazoneEnvironmentProfile").DatazoneEnvironmentProfile;
export const DatazoneEnvironmentProfile: typeof import("./datazoneEnvironmentProfile").DatazoneEnvironmentProfile = null as any;
utilities.lazyLoad(exports, ["DatazoneEnvironmentProfile"], () => require("./datazoneEnvironmentProfile"));

export { DatazoneFormTypeArgs, DatazoneFormTypeState } from "./datazoneFormType";
export type DatazoneFormType = import("./datazoneFormType").DatazoneFormType;
export const DatazoneFormType: typeof import("./datazoneFormType").DatazoneFormType = null as any;
utilities.lazyLoad(exports, ["DatazoneFormType"], () => require("./datazoneFormType"));

export { DatazoneGlossaryArgs, DatazoneGlossaryState } from "./datazoneGlossary";
export type DatazoneGlossary = import("./datazoneGlossary").DatazoneGlossary;
export const DatazoneGlossary: typeof import("./datazoneGlossary").DatazoneGlossary = null as any;
utilities.lazyLoad(exports, ["DatazoneGlossary"], () => require("./datazoneGlossary"));

export { DatazoneGlossaryTermArgs, DatazoneGlossaryTermState } from "./datazoneGlossaryTerm";
export type DatazoneGlossaryTerm = import("./datazoneGlossaryTerm").DatazoneGlossaryTerm;
export const DatazoneGlossaryTerm: typeof import("./datazoneGlossaryTerm").DatazoneGlossaryTerm = null as any;
utilities.lazyLoad(exports, ["DatazoneGlossaryTerm"], () => require("./datazoneGlossaryTerm"));

export { DatazoneProjectArgs, DatazoneProjectState } from "./datazoneProject";
export type DatazoneProject = import("./datazoneProject").DatazoneProject;
export const DatazoneProject: typeof import("./datazoneProject").DatazoneProject = null as any;
utilities.lazyLoad(exports, ["DatazoneProject"], () => require("./datazoneProject"));

export { DaxClusterArgs, DaxClusterState } from "./daxCluster";
export type DaxCluster = import("./daxCluster").DaxCluster;
export const DaxCluster: typeof import("./daxCluster").DaxCluster = null as any;
utilities.lazyLoad(exports, ["DaxCluster"], () => require("./daxCluster"));

export { DaxParameterGroupArgs, DaxParameterGroupState } from "./daxParameterGroup";
export type DaxParameterGroup = import("./daxParameterGroup").DaxParameterGroup;
export const DaxParameterGroup: typeof import("./daxParameterGroup").DaxParameterGroup = null as any;
utilities.lazyLoad(exports, ["DaxParameterGroup"], () => require("./daxParameterGroup"));

export { DaxSubnetGroupArgs, DaxSubnetGroupState } from "./daxSubnetGroup";
export type DaxSubnetGroup = import("./daxSubnetGroup").DaxSubnetGroup;
export const DaxSubnetGroup: typeof import("./daxSubnetGroup").DaxSubnetGroup = null as any;
utilities.lazyLoad(exports, ["DaxSubnetGroup"], () => require("./daxSubnetGroup"));

export { DbClusterSnapshotArgs, DbClusterSnapshotState } from "./dbClusterSnapshot";
export type DbClusterSnapshot = import("./dbClusterSnapshot").DbClusterSnapshot;
export const DbClusterSnapshot: typeof import("./dbClusterSnapshot").DbClusterSnapshot = null as any;
utilities.lazyLoad(exports, ["DbClusterSnapshot"], () => require("./dbClusterSnapshot"));

export { DbEventSubscriptionArgs, DbEventSubscriptionState } from "./dbEventSubscription";
export type DbEventSubscription = import("./dbEventSubscription").DbEventSubscription;
export const DbEventSubscription: typeof import("./dbEventSubscription").DbEventSubscription = null as any;
utilities.lazyLoad(exports, ["DbEventSubscription"], () => require("./dbEventSubscription"));

export { DbInstanceArgs, DbInstanceState } from "./dbInstance";
export type DbInstance = import("./dbInstance").DbInstance;
export const DbInstance: typeof import("./dbInstance").DbInstance = null as any;
utilities.lazyLoad(exports, ["DbInstance"], () => require("./dbInstance"));

export { DbInstanceAutomatedBackupsReplicationArgs, DbInstanceAutomatedBackupsReplicationState } from "./dbInstanceAutomatedBackupsReplication";
export type DbInstanceAutomatedBackupsReplication = import("./dbInstanceAutomatedBackupsReplication").DbInstanceAutomatedBackupsReplication;
export const DbInstanceAutomatedBackupsReplication: typeof import("./dbInstanceAutomatedBackupsReplication").DbInstanceAutomatedBackupsReplication = null as any;
utilities.lazyLoad(exports, ["DbInstanceAutomatedBackupsReplication"], () => require("./dbInstanceAutomatedBackupsReplication"));

export { DbInstanceRoleAssociationArgs, DbInstanceRoleAssociationState } from "./dbInstanceRoleAssociation";
export type DbInstanceRoleAssociation = import("./dbInstanceRoleAssociation").DbInstanceRoleAssociation;
export const DbInstanceRoleAssociation: typeof import("./dbInstanceRoleAssociation").DbInstanceRoleAssociation = null as any;
utilities.lazyLoad(exports, ["DbInstanceRoleAssociation"], () => require("./dbInstanceRoleAssociation"));

export { DbOptionGroupArgs, DbOptionGroupState } from "./dbOptionGroup";
export type DbOptionGroup = import("./dbOptionGroup").DbOptionGroup;
export const DbOptionGroup: typeof import("./dbOptionGroup").DbOptionGroup = null as any;
utilities.lazyLoad(exports, ["DbOptionGroup"], () => require("./dbOptionGroup"));

export { DbParameterGroupArgs, DbParameterGroupState } from "./dbParameterGroup";
export type DbParameterGroup = import("./dbParameterGroup").DbParameterGroup;
export const DbParameterGroup: typeof import("./dbParameterGroup").DbParameterGroup = null as any;
utilities.lazyLoad(exports, ["DbParameterGroup"], () => require("./dbParameterGroup"));

export { DbProxyArgs, DbProxyState } from "./dbProxy";
export type DbProxy = import("./dbProxy").DbProxy;
export const DbProxy: typeof import("./dbProxy").DbProxy = null as any;
utilities.lazyLoad(exports, ["DbProxy"], () => require("./dbProxy"));

export { DbProxyDefaultTargetGroupArgs, DbProxyDefaultTargetGroupState } from "./dbProxyDefaultTargetGroup";
export type DbProxyDefaultTargetGroup = import("./dbProxyDefaultTargetGroup").DbProxyDefaultTargetGroup;
export const DbProxyDefaultTargetGroup: typeof import("./dbProxyDefaultTargetGroup").DbProxyDefaultTargetGroup = null as any;
utilities.lazyLoad(exports, ["DbProxyDefaultTargetGroup"], () => require("./dbProxyDefaultTargetGroup"));

export { DbProxyEndpointArgs, DbProxyEndpointState } from "./dbProxyEndpoint";
export type DbProxyEndpoint = import("./dbProxyEndpoint").DbProxyEndpoint;
export const DbProxyEndpoint: typeof import("./dbProxyEndpoint").DbProxyEndpoint = null as any;
utilities.lazyLoad(exports, ["DbProxyEndpoint"], () => require("./dbProxyEndpoint"));

export { DbProxyTargetArgs, DbProxyTargetState } from "./dbProxyTarget";
export type DbProxyTarget = import("./dbProxyTarget").DbProxyTarget;
export const DbProxyTarget: typeof import("./dbProxyTarget").DbProxyTarget = null as any;
utilities.lazyLoad(exports, ["DbProxyTarget"], () => require("./dbProxyTarget"));

export { DbSnapshotArgs, DbSnapshotState } from "./dbSnapshot";
export type DbSnapshot = import("./dbSnapshot").DbSnapshot;
export const DbSnapshot: typeof import("./dbSnapshot").DbSnapshot = null as any;
utilities.lazyLoad(exports, ["DbSnapshot"], () => require("./dbSnapshot"));

export { DbSnapshotCopyArgs, DbSnapshotCopyState } from "./dbSnapshotCopy";
export type DbSnapshotCopy = import("./dbSnapshotCopy").DbSnapshotCopy;
export const DbSnapshotCopy: typeof import("./dbSnapshotCopy").DbSnapshotCopy = null as any;
utilities.lazyLoad(exports, ["DbSnapshotCopy"], () => require("./dbSnapshotCopy"));

export { DbSubnetGroupArgs, DbSubnetGroupState } from "./dbSubnetGroup";
export type DbSubnetGroup = import("./dbSubnetGroup").DbSubnetGroup;
export const DbSubnetGroup: typeof import("./dbSubnetGroup").DbSubnetGroup = null as any;
utilities.lazyLoad(exports, ["DbSubnetGroup"], () => require("./dbSubnetGroup"));

export { DefaultNetworkAclArgs, DefaultNetworkAclState } from "./defaultNetworkAcl";
export type DefaultNetworkAcl = import("./defaultNetworkAcl").DefaultNetworkAcl;
export const DefaultNetworkAcl: typeof import("./defaultNetworkAcl").DefaultNetworkAcl = null as any;
utilities.lazyLoad(exports, ["DefaultNetworkAcl"], () => require("./defaultNetworkAcl"));

export { DefaultRouteTableArgs, DefaultRouteTableState } from "./defaultRouteTable";
export type DefaultRouteTable = import("./defaultRouteTable").DefaultRouteTable;
export const DefaultRouteTable: typeof import("./defaultRouteTable").DefaultRouteTable = null as any;
utilities.lazyLoad(exports, ["DefaultRouteTable"], () => require("./defaultRouteTable"));

export { DefaultSecurityGroupArgs, DefaultSecurityGroupState } from "./defaultSecurityGroup";
export type DefaultSecurityGroup = import("./defaultSecurityGroup").DefaultSecurityGroup;
export const DefaultSecurityGroup: typeof import("./defaultSecurityGroup").DefaultSecurityGroup = null as any;
utilities.lazyLoad(exports, ["DefaultSecurityGroup"], () => require("./defaultSecurityGroup"));

export { DefaultSubnetArgs, DefaultSubnetState } from "./defaultSubnet";
export type DefaultSubnet = import("./defaultSubnet").DefaultSubnet;
export const DefaultSubnet: typeof import("./defaultSubnet").DefaultSubnet = null as any;
utilities.lazyLoad(exports, ["DefaultSubnet"], () => require("./defaultSubnet"));

export { DefaultVpcArgs, DefaultVpcState } from "./defaultVpc";
export type DefaultVpc = import("./defaultVpc").DefaultVpc;
export const DefaultVpc: typeof import("./defaultVpc").DefaultVpc = null as any;
utilities.lazyLoad(exports, ["DefaultVpc"], () => require("./defaultVpc"));

export { DefaultVpcDhcpOptionsArgs, DefaultVpcDhcpOptionsState } from "./defaultVpcDhcpOptions";
export type DefaultVpcDhcpOptions = import("./defaultVpcDhcpOptions").DefaultVpcDhcpOptions;
export const DefaultVpcDhcpOptions: typeof import("./defaultVpcDhcpOptions").DefaultVpcDhcpOptions = null as any;
utilities.lazyLoad(exports, ["DefaultVpcDhcpOptions"], () => require("./defaultVpcDhcpOptions"));

export { DetectiveGraphArgs, DetectiveGraphState } from "./detectiveGraph";
export type DetectiveGraph = import("./detectiveGraph").DetectiveGraph;
export const DetectiveGraph: typeof import("./detectiveGraph").DetectiveGraph = null as any;
utilities.lazyLoad(exports, ["DetectiveGraph"], () => require("./detectiveGraph"));

export { DetectiveInvitationAccepterArgs, DetectiveInvitationAccepterState } from "./detectiveInvitationAccepter";
export type DetectiveInvitationAccepter = import("./detectiveInvitationAccepter").DetectiveInvitationAccepter;
export const DetectiveInvitationAccepter: typeof import("./detectiveInvitationAccepter").DetectiveInvitationAccepter = null as any;
utilities.lazyLoad(exports, ["DetectiveInvitationAccepter"], () => require("./detectiveInvitationAccepter"));

export { DetectiveMemberArgs, DetectiveMemberState } from "./detectiveMember";
export type DetectiveMember = import("./detectiveMember").DetectiveMember;
export const DetectiveMember: typeof import("./detectiveMember").DetectiveMember = null as any;
utilities.lazyLoad(exports, ["DetectiveMember"], () => require("./detectiveMember"));

export { DetectiveOrganizationAdminAccountArgs, DetectiveOrganizationAdminAccountState } from "./detectiveOrganizationAdminAccount";
export type DetectiveOrganizationAdminAccount = import("./detectiveOrganizationAdminAccount").DetectiveOrganizationAdminAccount;
export const DetectiveOrganizationAdminAccount: typeof import("./detectiveOrganizationAdminAccount").DetectiveOrganizationAdminAccount = null as any;
utilities.lazyLoad(exports, ["DetectiveOrganizationAdminAccount"], () => require("./detectiveOrganizationAdminAccount"));

export { DetectiveOrganizationConfigurationArgs, DetectiveOrganizationConfigurationState } from "./detectiveOrganizationConfiguration";
export type DetectiveOrganizationConfiguration = import("./detectiveOrganizationConfiguration").DetectiveOrganizationConfiguration;
export const DetectiveOrganizationConfiguration: typeof import("./detectiveOrganizationConfiguration").DetectiveOrganizationConfiguration = null as any;
utilities.lazyLoad(exports, ["DetectiveOrganizationConfiguration"], () => require("./detectiveOrganizationConfiguration"));

export { DevicefarmDevicePoolArgs, DevicefarmDevicePoolState } from "./devicefarmDevicePool";
export type DevicefarmDevicePool = import("./devicefarmDevicePool").DevicefarmDevicePool;
export const DevicefarmDevicePool: typeof import("./devicefarmDevicePool").DevicefarmDevicePool = null as any;
utilities.lazyLoad(exports, ["DevicefarmDevicePool"], () => require("./devicefarmDevicePool"));

export { DevicefarmInstanceProfileArgs, DevicefarmInstanceProfileState } from "./devicefarmInstanceProfile";
export type DevicefarmInstanceProfile = import("./devicefarmInstanceProfile").DevicefarmInstanceProfile;
export const DevicefarmInstanceProfile: typeof import("./devicefarmInstanceProfile").DevicefarmInstanceProfile = null as any;
utilities.lazyLoad(exports, ["DevicefarmInstanceProfile"], () => require("./devicefarmInstanceProfile"));

export { DevicefarmNetworkProfileArgs, DevicefarmNetworkProfileState } from "./devicefarmNetworkProfile";
export type DevicefarmNetworkProfile = import("./devicefarmNetworkProfile").DevicefarmNetworkProfile;
export const DevicefarmNetworkProfile: typeof import("./devicefarmNetworkProfile").DevicefarmNetworkProfile = null as any;
utilities.lazyLoad(exports, ["DevicefarmNetworkProfile"], () => require("./devicefarmNetworkProfile"));

export { DevicefarmProjectArgs, DevicefarmProjectState } from "./devicefarmProject";
export type DevicefarmProject = import("./devicefarmProject").DevicefarmProject;
export const DevicefarmProject: typeof import("./devicefarmProject").DevicefarmProject = null as any;
utilities.lazyLoad(exports, ["DevicefarmProject"], () => require("./devicefarmProject"));

export { DevicefarmTestGridProjectArgs, DevicefarmTestGridProjectState } from "./devicefarmTestGridProject";
export type DevicefarmTestGridProject = import("./devicefarmTestGridProject").DevicefarmTestGridProject;
export const DevicefarmTestGridProject: typeof import("./devicefarmTestGridProject").DevicefarmTestGridProject = null as any;
utilities.lazyLoad(exports, ["DevicefarmTestGridProject"], () => require("./devicefarmTestGridProject"));

export { DevicefarmUploadArgs, DevicefarmUploadState } from "./devicefarmUpload";
export type DevicefarmUpload = import("./devicefarmUpload").DevicefarmUpload;
export const DevicefarmUpload: typeof import("./devicefarmUpload").DevicefarmUpload = null as any;
utilities.lazyLoad(exports, ["DevicefarmUpload"], () => require("./devicefarmUpload"));

export { DevopsguruEventSourcesConfigArgs, DevopsguruEventSourcesConfigState } from "./devopsguruEventSourcesConfig";
export type DevopsguruEventSourcesConfig = import("./devopsguruEventSourcesConfig").DevopsguruEventSourcesConfig;
export const DevopsguruEventSourcesConfig: typeof import("./devopsguruEventSourcesConfig").DevopsguruEventSourcesConfig = null as any;
utilities.lazyLoad(exports, ["DevopsguruEventSourcesConfig"], () => require("./devopsguruEventSourcesConfig"));

export { DevopsguruNotificationChannelArgs, DevopsguruNotificationChannelState } from "./devopsguruNotificationChannel";
export type DevopsguruNotificationChannel = import("./devopsguruNotificationChannel").DevopsguruNotificationChannel;
export const DevopsguruNotificationChannel: typeof import("./devopsguruNotificationChannel").DevopsguruNotificationChannel = null as any;
utilities.lazyLoad(exports, ["DevopsguruNotificationChannel"], () => require("./devopsguruNotificationChannel"));

export { DevopsguruResourceCollectionArgs, DevopsguruResourceCollectionState } from "./devopsguruResourceCollection";
export type DevopsguruResourceCollection = import("./devopsguruResourceCollection").DevopsguruResourceCollection;
export const DevopsguruResourceCollection: typeof import("./devopsguruResourceCollection").DevopsguruResourceCollection = null as any;
utilities.lazyLoad(exports, ["DevopsguruResourceCollection"], () => require("./devopsguruResourceCollection"));

export { DevopsguruServiceIntegrationArgs, DevopsguruServiceIntegrationState } from "./devopsguruServiceIntegration";
export type DevopsguruServiceIntegration = import("./devopsguruServiceIntegration").DevopsguruServiceIntegration;
export const DevopsguruServiceIntegration: typeof import("./devopsguruServiceIntegration").DevopsguruServiceIntegration = null as any;
utilities.lazyLoad(exports, ["DevopsguruServiceIntegration"], () => require("./devopsguruServiceIntegration"));

export { DirectoryServiceConditionalForwarderArgs, DirectoryServiceConditionalForwarderState } from "./directoryServiceConditionalForwarder";
export type DirectoryServiceConditionalForwarder = import("./directoryServiceConditionalForwarder").DirectoryServiceConditionalForwarder;
export const DirectoryServiceConditionalForwarder: typeof import("./directoryServiceConditionalForwarder").DirectoryServiceConditionalForwarder = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceConditionalForwarder"], () => require("./directoryServiceConditionalForwarder"));

export { DirectoryServiceDirectoryArgs, DirectoryServiceDirectoryState } from "./directoryServiceDirectory";
export type DirectoryServiceDirectory = import("./directoryServiceDirectory").DirectoryServiceDirectory;
export const DirectoryServiceDirectory: typeof import("./directoryServiceDirectory").DirectoryServiceDirectory = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceDirectory"], () => require("./directoryServiceDirectory"));

export { DirectoryServiceLogSubscriptionArgs, DirectoryServiceLogSubscriptionState } from "./directoryServiceLogSubscription";
export type DirectoryServiceLogSubscription = import("./directoryServiceLogSubscription").DirectoryServiceLogSubscription;
export const DirectoryServiceLogSubscription: typeof import("./directoryServiceLogSubscription").DirectoryServiceLogSubscription = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceLogSubscription"], () => require("./directoryServiceLogSubscription"));

export { DirectoryServiceRadiusSettingsArgs, DirectoryServiceRadiusSettingsState } from "./directoryServiceRadiusSettings";
export type DirectoryServiceRadiusSettings = import("./directoryServiceRadiusSettings").DirectoryServiceRadiusSettings;
export const DirectoryServiceRadiusSettings: typeof import("./directoryServiceRadiusSettings").DirectoryServiceRadiusSettings = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceRadiusSettings"], () => require("./directoryServiceRadiusSettings"));

export { DirectoryServiceRegionArgs, DirectoryServiceRegionState } from "./directoryServiceRegion";
export type DirectoryServiceRegion = import("./directoryServiceRegion").DirectoryServiceRegion;
export const DirectoryServiceRegion: typeof import("./directoryServiceRegion").DirectoryServiceRegion = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceRegion"], () => require("./directoryServiceRegion"));

export { DirectoryServiceSharedDirectoryArgs, DirectoryServiceSharedDirectoryState } from "./directoryServiceSharedDirectory";
export type DirectoryServiceSharedDirectory = import("./directoryServiceSharedDirectory").DirectoryServiceSharedDirectory;
export const DirectoryServiceSharedDirectory: typeof import("./directoryServiceSharedDirectory").DirectoryServiceSharedDirectory = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceSharedDirectory"], () => require("./directoryServiceSharedDirectory"));

export { DirectoryServiceSharedDirectoryAccepterArgs, DirectoryServiceSharedDirectoryAccepterState } from "./directoryServiceSharedDirectoryAccepter";
export type DirectoryServiceSharedDirectoryAccepter = import("./directoryServiceSharedDirectoryAccepter").DirectoryServiceSharedDirectoryAccepter;
export const DirectoryServiceSharedDirectoryAccepter: typeof import("./directoryServiceSharedDirectoryAccepter").DirectoryServiceSharedDirectoryAccepter = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceSharedDirectoryAccepter"], () => require("./directoryServiceSharedDirectoryAccepter"));

export { DirectoryServiceTrustArgs, DirectoryServiceTrustState } from "./directoryServiceTrust";
export type DirectoryServiceTrust = import("./directoryServiceTrust").DirectoryServiceTrust;
export const DirectoryServiceTrust: typeof import("./directoryServiceTrust").DirectoryServiceTrust = null as any;
utilities.lazyLoad(exports, ["DirectoryServiceTrust"], () => require("./directoryServiceTrust"));

export { DlmLifecyclePolicyArgs, DlmLifecyclePolicyState } from "./dlmLifecyclePolicy";
export type DlmLifecyclePolicy = import("./dlmLifecyclePolicy").DlmLifecyclePolicy;
export const DlmLifecyclePolicy: typeof import("./dlmLifecyclePolicy").DlmLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["DlmLifecyclePolicy"], () => require("./dlmLifecyclePolicy"));

export { DmsCertificateArgs, DmsCertificateState } from "./dmsCertificate";
export type DmsCertificate = import("./dmsCertificate").DmsCertificate;
export const DmsCertificate: typeof import("./dmsCertificate").DmsCertificate = null as any;
utilities.lazyLoad(exports, ["DmsCertificate"], () => require("./dmsCertificate"));

export { DmsEndpointArgs, DmsEndpointState } from "./dmsEndpoint";
export type DmsEndpoint = import("./dmsEndpoint").DmsEndpoint;
export const DmsEndpoint: typeof import("./dmsEndpoint").DmsEndpoint = null as any;
utilities.lazyLoad(exports, ["DmsEndpoint"], () => require("./dmsEndpoint"));

export { DmsEventSubscriptionArgs, DmsEventSubscriptionState } from "./dmsEventSubscription";
export type DmsEventSubscription = import("./dmsEventSubscription").DmsEventSubscription;
export const DmsEventSubscription: typeof import("./dmsEventSubscription").DmsEventSubscription = null as any;
utilities.lazyLoad(exports, ["DmsEventSubscription"], () => require("./dmsEventSubscription"));

export { DmsReplicationConfigArgs, DmsReplicationConfigState } from "./dmsReplicationConfig";
export type DmsReplicationConfig = import("./dmsReplicationConfig").DmsReplicationConfig;
export const DmsReplicationConfig: typeof import("./dmsReplicationConfig").DmsReplicationConfig = null as any;
utilities.lazyLoad(exports, ["DmsReplicationConfig"], () => require("./dmsReplicationConfig"));

export { DmsReplicationInstanceArgs, DmsReplicationInstanceState } from "./dmsReplicationInstance";
export type DmsReplicationInstance = import("./dmsReplicationInstance").DmsReplicationInstance;
export const DmsReplicationInstance: typeof import("./dmsReplicationInstance").DmsReplicationInstance = null as any;
utilities.lazyLoad(exports, ["DmsReplicationInstance"], () => require("./dmsReplicationInstance"));

export { DmsReplicationSubnetGroupArgs, DmsReplicationSubnetGroupState } from "./dmsReplicationSubnetGroup";
export type DmsReplicationSubnetGroup = import("./dmsReplicationSubnetGroup").DmsReplicationSubnetGroup;
export const DmsReplicationSubnetGroup: typeof import("./dmsReplicationSubnetGroup").DmsReplicationSubnetGroup = null as any;
utilities.lazyLoad(exports, ["DmsReplicationSubnetGroup"], () => require("./dmsReplicationSubnetGroup"));

export { DmsReplicationTaskArgs, DmsReplicationTaskState } from "./dmsReplicationTask";
export type DmsReplicationTask = import("./dmsReplicationTask").DmsReplicationTask;
export const DmsReplicationTask: typeof import("./dmsReplicationTask").DmsReplicationTask = null as any;
utilities.lazyLoad(exports, ["DmsReplicationTask"], () => require("./dmsReplicationTask"));

export { DmsS3EndpointArgs, DmsS3EndpointState } from "./dmsS3Endpoint";
export type DmsS3Endpoint = import("./dmsS3Endpoint").DmsS3Endpoint;
export const DmsS3Endpoint: typeof import("./dmsS3Endpoint").DmsS3Endpoint = null as any;
utilities.lazyLoad(exports, ["DmsS3Endpoint"], () => require("./dmsS3Endpoint"));

export { DocdbClusterArgs, DocdbClusterState } from "./docdbCluster";
export type DocdbCluster = import("./docdbCluster").DocdbCluster;
export const DocdbCluster: typeof import("./docdbCluster").DocdbCluster = null as any;
utilities.lazyLoad(exports, ["DocdbCluster"], () => require("./docdbCluster"));

export { DocdbClusterInstanceArgs, DocdbClusterInstanceState } from "./docdbClusterInstance";
export type DocdbClusterInstance = import("./docdbClusterInstance").DocdbClusterInstance;
export const DocdbClusterInstance: typeof import("./docdbClusterInstance").DocdbClusterInstance = null as any;
utilities.lazyLoad(exports, ["DocdbClusterInstance"], () => require("./docdbClusterInstance"));

export { DocdbClusterParameterGroupArgs, DocdbClusterParameterGroupState } from "./docdbClusterParameterGroup";
export type DocdbClusterParameterGroup = import("./docdbClusterParameterGroup").DocdbClusterParameterGroup;
export const DocdbClusterParameterGroup: typeof import("./docdbClusterParameterGroup").DocdbClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["DocdbClusterParameterGroup"], () => require("./docdbClusterParameterGroup"));

export { DocdbClusterSnapshotArgs, DocdbClusterSnapshotState } from "./docdbClusterSnapshot";
export type DocdbClusterSnapshot = import("./docdbClusterSnapshot").DocdbClusterSnapshot;
export const DocdbClusterSnapshot: typeof import("./docdbClusterSnapshot").DocdbClusterSnapshot = null as any;
utilities.lazyLoad(exports, ["DocdbClusterSnapshot"], () => require("./docdbClusterSnapshot"));

export { DocdbEventSubscriptionArgs, DocdbEventSubscriptionState } from "./docdbEventSubscription";
export type DocdbEventSubscription = import("./docdbEventSubscription").DocdbEventSubscription;
export const DocdbEventSubscription: typeof import("./docdbEventSubscription").DocdbEventSubscription = null as any;
utilities.lazyLoad(exports, ["DocdbEventSubscription"], () => require("./docdbEventSubscription"));

export { DocdbGlobalClusterArgs, DocdbGlobalClusterState } from "./docdbGlobalCluster";
export type DocdbGlobalCluster = import("./docdbGlobalCluster").DocdbGlobalCluster;
export const DocdbGlobalCluster: typeof import("./docdbGlobalCluster").DocdbGlobalCluster = null as any;
utilities.lazyLoad(exports, ["DocdbGlobalCluster"], () => require("./docdbGlobalCluster"));

export { DocdbSubnetGroupArgs, DocdbSubnetGroupState } from "./docdbSubnetGroup";
export type DocdbSubnetGroup = import("./docdbSubnetGroup").DocdbSubnetGroup;
export const DocdbSubnetGroup: typeof import("./docdbSubnetGroup").DocdbSubnetGroup = null as any;
utilities.lazyLoad(exports, ["DocdbSubnetGroup"], () => require("./docdbSubnetGroup"));

export { DocdbelasticClusterArgs, DocdbelasticClusterState } from "./docdbelasticCluster";
export type DocdbelasticCluster = import("./docdbelasticCluster").DocdbelasticCluster;
export const DocdbelasticCluster: typeof import("./docdbelasticCluster").DocdbelasticCluster = null as any;
utilities.lazyLoad(exports, ["DocdbelasticCluster"], () => require("./docdbelasticCluster"));

export { DrsReplicationConfigurationTemplateArgs, DrsReplicationConfigurationTemplateState } from "./drsReplicationConfigurationTemplate";
export type DrsReplicationConfigurationTemplate = import("./drsReplicationConfigurationTemplate").DrsReplicationConfigurationTemplate;
export const DrsReplicationConfigurationTemplate: typeof import("./drsReplicationConfigurationTemplate").DrsReplicationConfigurationTemplate = null as any;
utilities.lazyLoad(exports, ["DrsReplicationConfigurationTemplate"], () => require("./drsReplicationConfigurationTemplate"));

export { DxBgpPeerArgs, DxBgpPeerState } from "./dxBgpPeer";
export type DxBgpPeer = import("./dxBgpPeer").DxBgpPeer;
export const DxBgpPeer: typeof import("./dxBgpPeer").DxBgpPeer = null as any;
utilities.lazyLoad(exports, ["DxBgpPeer"], () => require("./dxBgpPeer"));

export { DxConnectionArgs, DxConnectionState } from "./dxConnection";
export type DxConnection = import("./dxConnection").DxConnection;
export const DxConnection: typeof import("./dxConnection").DxConnection = null as any;
utilities.lazyLoad(exports, ["DxConnection"], () => require("./dxConnection"));

export { DxConnectionAssociationArgs, DxConnectionAssociationState } from "./dxConnectionAssociation";
export type DxConnectionAssociation = import("./dxConnectionAssociation").DxConnectionAssociation;
export const DxConnectionAssociation: typeof import("./dxConnectionAssociation").DxConnectionAssociation = null as any;
utilities.lazyLoad(exports, ["DxConnectionAssociation"], () => require("./dxConnectionAssociation"));

export { DxConnectionConfirmationArgs, DxConnectionConfirmationState } from "./dxConnectionConfirmation";
export type DxConnectionConfirmation = import("./dxConnectionConfirmation").DxConnectionConfirmation;
export const DxConnectionConfirmation: typeof import("./dxConnectionConfirmation").DxConnectionConfirmation = null as any;
utilities.lazyLoad(exports, ["DxConnectionConfirmation"], () => require("./dxConnectionConfirmation"));

export { DxGatewayArgs, DxGatewayState } from "./dxGateway";
export type DxGateway = import("./dxGateway").DxGateway;
export const DxGateway: typeof import("./dxGateway").DxGateway = null as any;
utilities.lazyLoad(exports, ["DxGateway"], () => require("./dxGateway"));

export { DxGatewayAssociationArgs, DxGatewayAssociationState } from "./dxGatewayAssociation";
export type DxGatewayAssociation = import("./dxGatewayAssociation").DxGatewayAssociation;
export const DxGatewayAssociation: typeof import("./dxGatewayAssociation").DxGatewayAssociation = null as any;
utilities.lazyLoad(exports, ["DxGatewayAssociation"], () => require("./dxGatewayAssociation"));

export { DxGatewayAssociationProposalArgs, DxGatewayAssociationProposalState } from "./dxGatewayAssociationProposal";
export type DxGatewayAssociationProposal = import("./dxGatewayAssociationProposal").DxGatewayAssociationProposal;
export const DxGatewayAssociationProposal: typeof import("./dxGatewayAssociationProposal").DxGatewayAssociationProposal = null as any;
utilities.lazyLoad(exports, ["DxGatewayAssociationProposal"], () => require("./dxGatewayAssociationProposal"));

export { DxHostedConnectionArgs, DxHostedConnectionState } from "./dxHostedConnection";
export type DxHostedConnection = import("./dxHostedConnection").DxHostedConnection;
export const DxHostedConnection: typeof import("./dxHostedConnection").DxHostedConnection = null as any;
utilities.lazyLoad(exports, ["DxHostedConnection"], () => require("./dxHostedConnection"));

export { DxHostedPrivateVirtualInterfaceArgs, DxHostedPrivateVirtualInterfaceState } from "./dxHostedPrivateVirtualInterface";
export type DxHostedPrivateVirtualInterface = import("./dxHostedPrivateVirtualInterface").DxHostedPrivateVirtualInterface;
export const DxHostedPrivateVirtualInterface: typeof import("./dxHostedPrivateVirtualInterface").DxHostedPrivateVirtualInterface = null as any;
utilities.lazyLoad(exports, ["DxHostedPrivateVirtualInterface"], () => require("./dxHostedPrivateVirtualInterface"));

export { DxHostedPrivateVirtualInterfaceAccepterArgs, DxHostedPrivateVirtualInterfaceAccepterState } from "./dxHostedPrivateVirtualInterfaceAccepter";
export type DxHostedPrivateVirtualInterfaceAccepter = import("./dxHostedPrivateVirtualInterfaceAccepter").DxHostedPrivateVirtualInterfaceAccepter;
export const DxHostedPrivateVirtualInterfaceAccepter: typeof import("./dxHostedPrivateVirtualInterfaceAccepter").DxHostedPrivateVirtualInterfaceAccepter = null as any;
utilities.lazyLoad(exports, ["DxHostedPrivateVirtualInterfaceAccepter"], () => require("./dxHostedPrivateVirtualInterfaceAccepter"));

export { DxHostedPublicVirtualInterfaceArgs, DxHostedPublicVirtualInterfaceState } from "./dxHostedPublicVirtualInterface";
export type DxHostedPublicVirtualInterface = import("./dxHostedPublicVirtualInterface").DxHostedPublicVirtualInterface;
export const DxHostedPublicVirtualInterface: typeof import("./dxHostedPublicVirtualInterface").DxHostedPublicVirtualInterface = null as any;
utilities.lazyLoad(exports, ["DxHostedPublicVirtualInterface"], () => require("./dxHostedPublicVirtualInterface"));

export { DxHostedPublicVirtualInterfaceAccepterArgs, DxHostedPublicVirtualInterfaceAccepterState } from "./dxHostedPublicVirtualInterfaceAccepter";
export type DxHostedPublicVirtualInterfaceAccepter = import("./dxHostedPublicVirtualInterfaceAccepter").DxHostedPublicVirtualInterfaceAccepter;
export const DxHostedPublicVirtualInterfaceAccepter: typeof import("./dxHostedPublicVirtualInterfaceAccepter").DxHostedPublicVirtualInterfaceAccepter = null as any;
utilities.lazyLoad(exports, ["DxHostedPublicVirtualInterfaceAccepter"], () => require("./dxHostedPublicVirtualInterfaceAccepter"));

export { DxHostedTransitVirtualInterfaceArgs, DxHostedTransitVirtualInterfaceState } from "./dxHostedTransitVirtualInterface";
export type DxHostedTransitVirtualInterface = import("./dxHostedTransitVirtualInterface").DxHostedTransitVirtualInterface;
export const DxHostedTransitVirtualInterface: typeof import("./dxHostedTransitVirtualInterface").DxHostedTransitVirtualInterface = null as any;
utilities.lazyLoad(exports, ["DxHostedTransitVirtualInterface"], () => require("./dxHostedTransitVirtualInterface"));

export { DxHostedTransitVirtualInterfaceAccepterArgs, DxHostedTransitVirtualInterfaceAccepterState } from "./dxHostedTransitVirtualInterfaceAccepter";
export type DxHostedTransitVirtualInterfaceAccepter = import("./dxHostedTransitVirtualInterfaceAccepter").DxHostedTransitVirtualInterfaceAccepter;
export const DxHostedTransitVirtualInterfaceAccepter: typeof import("./dxHostedTransitVirtualInterfaceAccepter").DxHostedTransitVirtualInterfaceAccepter = null as any;
utilities.lazyLoad(exports, ["DxHostedTransitVirtualInterfaceAccepter"], () => require("./dxHostedTransitVirtualInterfaceAccepter"));

export { DxLagArgs, DxLagState } from "./dxLag";
export type DxLag = import("./dxLag").DxLag;
export const DxLag: typeof import("./dxLag").DxLag = null as any;
utilities.lazyLoad(exports, ["DxLag"], () => require("./dxLag"));

export { DxMacsecKeyAssociationArgs, DxMacsecKeyAssociationState } from "./dxMacsecKeyAssociation";
export type DxMacsecKeyAssociation = import("./dxMacsecKeyAssociation").DxMacsecKeyAssociation;
export const DxMacsecKeyAssociation: typeof import("./dxMacsecKeyAssociation").DxMacsecKeyAssociation = null as any;
utilities.lazyLoad(exports, ["DxMacsecKeyAssociation"], () => require("./dxMacsecKeyAssociation"));

export { DxPrivateVirtualInterfaceArgs, DxPrivateVirtualInterfaceState } from "./dxPrivateVirtualInterface";
export type DxPrivateVirtualInterface = import("./dxPrivateVirtualInterface").DxPrivateVirtualInterface;
export const DxPrivateVirtualInterface: typeof import("./dxPrivateVirtualInterface").DxPrivateVirtualInterface = null as any;
utilities.lazyLoad(exports, ["DxPrivateVirtualInterface"], () => require("./dxPrivateVirtualInterface"));

export { DxPublicVirtualInterfaceArgs, DxPublicVirtualInterfaceState } from "./dxPublicVirtualInterface";
export type DxPublicVirtualInterface = import("./dxPublicVirtualInterface").DxPublicVirtualInterface;
export const DxPublicVirtualInterface: typeof import("./dxPublicVirtualInterface").DxPublicVirtualInterface = null as any;
utilities.lazyLoad(exports, ["DxPublicVirtualInterface"], () => require("./dxPublicVirtualInterface"));

export { DxTransitVirtualInterfaceArgs, DxTransitVirtualInterfaceState } from "./dxTransitVirtualInterface";
export type DxTransitVirtualInterface = import("./dxTransitVirtualInterface").DxTransitVirtualInterface;
export const DxTransitVirtualInterface: typeof import("./dxTransitVirtualInterface").DxTransitVirtualInterface = null as any;
utilities.lazyLoad(exports, ["DxTransitVirtualInterface"], () => require("./dxTransitVirtualInterface"));

export { DynamodbContributorInsightsArgs, DynamodbContributorInsightsState } from "./dynamodbContributorInsights";
export type DynamodbContributorInsights = import("./dynamodbContributorInsights").DynamodbContributorInsights;
export const DynamodbContributorInsights: typeof import("./dynamodbContributorInsights").DynamodbContributorInsights = null as any;
utilities.lazyLoad(exports, ["DynamodbContributorInsights"], () => require("./dynamodbContributorInsights"));

export { DynamodbGlobalTableArgs, DynamodbGlobalTableState } from "./dynamodbGlobalTable";
export type DynamodbGlobalTable = import("./dynamodbGlobalTable").DynamodbGlobalTable;
export const DynamodbGlobalTable: typeof import("./dynamodbGlobalTable").DynamodbGlobalTable = null as any;
utilities.lazyLoad(exports, ["DynamodbGlobalTable"], () => require("./dynamodbGlobalTable"));

export { DynamodbKinesisStreamingDestinationArgs, DynamodbKinesisStreamingDestinationState } from "./dynamodbKinesisStreamingDestination";
export type DynamodbKinesisStreamingDestination = import("./dynamodbKinesisStreamingDestination").DynamodbKinesisStreamingDestination;
export const DynamodbKinesisStreamingDestination: typeof import("./dynamodbKinesisStreamingDestination").DynamodbKinesisStreamingDestination = null as any;
utilities.lazyLoad(exports, ["DynamodbKinesisStreamingDestination"], () => require("./dynamodbKinesisStreamingDestination"));

export { DynamodbResourcePolicyArgs, DynamodbResourcePolicyState } from "./dynamodbResourcePolicy";
export type DynamodbResourcePolicy = import("./dynamodbResourcePolicy").DynamodbResourcePolicy;
export const DynamodbResourcePolicy: typeof import("./dynamodbResourcePolicy").DynamodbResourcePolicy = null as any;
utilities.lazyLoad(exports, ["DynamodbResourcePolicy"], () => require("./dynamodbResourcePolicy"));

export { DynamodbTableArgs, DynamodbTableState } from "./dynamodbTable";
export type DynamodbTable = import("./dynamodbTable").DynamodbTable;
export const DynamodbTable: typeof import("./dynamodbTable").DynamodbTable = null as any;
utilities.lazyLoad(exports, ["DynamodbTable"], () => require("./dynamodbTable"));

export { DynamodbTableExportArgs, DynamodbTableExportState } from "./dynamodbTableExport";
export type DynamodbTableExport = import("./dynamodbTableExport").DynamodbTableExport;
export const DynamodbTableExport: typeof import("./dynamodbTableExport").DynamodbTableExport = null as any;
utilities.lazyLoad(exports, ["DynamodbTableExport"], () => require("./dynamodbTableExport"));

export { DynamodbTableItemArgs, DynamodbTableItemState } from "./dynamodbTableItem";
export type DynamodbTableItem = import("./dynamodbTableItem").DynamodbTableItem;
export const DynamodbTableItem: typeof import("./dynamodbTableItem").DynamodbTableItem = null as any;
utilities.lazyLoad(exports, ["DynamodbTableItem"], () => require("./dynamodbTableItem"));

export { DynamodbTableReplicaArgs, DynamodbTableReplicaState } from "./dynamodbTableReplica";
export type DynamodbTableReplica = import("./dynamodbTableReplica").DynamodbTableReplica;
export const DynamodbTableReplica: typeof import("./dynamodbTableReplica").DynamodbTableReplica = null as any;
utilities.lazyLoad(exports, ["DynamodbTableReplica"], () => require("./dynamodbTableReplica"));

export { DynamodbTagArgs, DynamodbTagState } from "./dynamodbTag";
export type DynamodbTag = import("./dynamodbTag").DynamodbTag;
export const DynamodbTag: typeof import("./dynamodbTag").DynamodbTag = null as any;
utilities.lazyLoad(exports, ["DynamodbTag"], () => require("./dynamodbTag"));

export { EbsDefaultKmsKeyArgs, EbsDefaultKmsKeyState } from "./ebsDefaultKmsKey";
export type EbsDefaultKmsKey = import("./ebsDefaultKmsKey").EbsDefaultKmsKey;
export const EbsDefaultKmsKey: typeof import("./ebsDefaultKmsKey").EbsDefaultKmsKey = null as any;
utilities.lazyLoad(exports, ["EbsDefaultKmsKey"], () => require("./ebsDefaultKmsKey"));

export { EbsEncryptionByDefaultArgs, EbsEncryptionByDefaultState } from "./ebsEncryptionByDefault";
export type EbsEncryptionByDefault = import("./ebsEncryptionByDefault").EbsEncryptionByDefault;
export const EbsEncryptionByDefault: typeof import("./ebsEncryptionByDefault").EbsEncryptionByDefault = null as any;
utilities.lazyLoad(exports, ["EbsEncryptionByDefault"], () => require("./ebsEncryptionByDefault"));

export { EbsFastSnapshotRestoreArgs, EbsFastSnapshotRestoreState } from "./ebsFastSnapshotRestore";
export type EbsFastSnapshotRestore = import("./ebsFastSnapshotRestore").EbsFastSnapshotRestore;
export const EbsFastSnapshotRestore: typeof import("./ebsFastSnapshotRestore").EbsFastSnapshotRestore = null as any;
utilities.lazyLoad(exports, ["EbsFastSnapshotRestore"], () => require("./ebsFastSnapshotRestore"));

export { EbsSnapshotArgs, EbsSnapshotState } from "./ebsSnapshot";
export type EbsSnapshot = import("./ebsSnapshot").EbsSnapshot;
export const EbsSnapshot: typeof import("./ebsSnapshot").EbsSnapshot = null as any;
utilities.lazyLoad(exports, ["EbsSnapshot"], () => require("./ebsSnapshot"));

export { EbsSnapshotBlockPublicAccessArgs, EbsSnapshotBlockPublicAccessState } from "./ebsSnapshotBlockPublicAccess";
export type EbsSnapshotBlockPublicAccess = import("./ebsSnapshotBlockPublicAccess").EbsSnapshotBlockPublicAccess;
export const EbsSnapshotBlockPublicAccess: typeof import("./ebsSnapshotBlockPublicAccess").EbsSnapshotBlockPublicAccess = null as any;
utilities.lazyLoad(exports, ["EbsSnapshotBlockPublicAccess"], () => require("./ebsSnapshotBlockPublicAccess"));

export { EbsSnapshotCopyArgs, EbsSnapshotCopyState } from "./ebsSnapshotCopy";
export type EbsSnapshotCopy = import("./ebsSnapshotCopy").EbsSnapshotCopy;
export const EbsSnapshotCopy: typeof import("./ebsSnapshotCopy").EbsSnapshotCopy = null as any;
utilities.lazyLoad(exports, ["EbsSnapshotCopy"], () => require("./ebsSnapshotCopy"));

export { EbsSnapshotImportArgs, EbsSnapshotImportState } from "./ebsSnapshotImport";
export type EbsSnapshotImport = import("./ebsSnapshotImport").EbsSnapshotImport;
export const EbsSnapshotImport: typeof import("./ebsSnapshotImport").EbsSnapshotImport = null as any;
utilities.lazyLoad(exports, ["EbsSnapshotImport"], () => require("./ebsSnapshotImport"));

export { EbsVolumeArgs, EbsVolumeState } from "./ebsVolume";
export type EbsVolume = import("./ebsVolume").EbsVolume;
export const EbsVolume: typeof import("./ebsVolume").EbsVolume = null as any;
utilities.lazyLoad(exports, ["EbsVolume"], () => require("./ebsVolume"));

export { Ec2AvailabilityZoneGroupArgs, Ec2AvailabilityZoneGroupState } from "./ec2AvailabilityZoneGroup";
export type Ec2AvailabilityZoneGroup = import("./ec2AvailabilityZoneGroup").Ec2AvailabilityZoneGroup;
export const Ec2AvailabilityZoneGroup: typeof import("./ec2AvailabilityZoneGroup").Ec2AvailabilityZoneGroup = null as any;
utilities.lazyLoad(exports, ["Ec2AvailabilityZoneGroup"], () => require("./ec2AvailabilityZoneGroup"));

export { Ec2CapacityBlockReservationArgs, Ec2CapacityBlockReservationState } from "./ec2CapacityBlockReservation";
export type Ec2CapacityBlockReservation = import("./ec2CapacityBlockReservation").Ec2CapacityBlockReservation;
export const Ec2CapacityBlockReservation: typeof import("./ec2CapacityBlockReservation").Ec2CapacityBlockReservation = null as any;
utilities.lazyLoad(exports, ["Ec2CapacityBlockReservation"], () => require("./ec2CapacityBlockReservation"));

export { Ec2CapacityReservationArgs, Ec2CapacityReservationState } from "./ec2CapacityReservation";
export type Ec2CapacityReservation = import("./ec2CapacityReservation").Ec2CapacityReservation;
export const Ec2CapacityReservation: typeof import("./ec2CapacityReservation").Ec2CapacityReservation = null as any;
utilities.lazyLoad(exports, ["Ec2CapacityReservation"], () => require("./ec2CapacityReservation"));

export { Ec2CarrierGatewayArgs, Ec2CarrierGatewayState } from "./ec2CarrierGateway";
export type Ec2CarrierGateway = import("./ec2CarrierGateway").Ec2CarrierGateway;
export const Ec2CarrierGateway: typeof import("./ec2CarrierGateway").Ec2CarrierGateway = null as any;
utilities.lazyLoad(exports, ["Ec2CarrierGateway"], () => require("./ec2CarrierGateway"));

export { Ec2ClientVpnAuthorizationRuleArgs, Ec2ClientVpnAuthorizationRuleState } from "./ec2ClientVpnAuthorizationRule";
export type Ec2ClientVpnAuthorizationRule = import("./ec2ClientVpnAuthorizationRule").Ec2ClientVpnAuthorizationRule;
export const Ec2ClientVpnAuthorizationRule: typeof import("./ec2ClientVpnAuthorizationRule").Ec2ClientVpnAuthorizationRule = null as any;
utilities.lazyLoad(exports, ["Ec2ClientVpnAuthorizationRule"], () => require("./ec2ClientVpnAuthorizationRule"));

export { Ec2ClientVpnEndpointArgs, Ec2ClientVpnEndpointState } from "./ec2ClientVpnEndpoint";
export type Ec2ClientVpnEndpoint = import("./ec2ClientVpnEndpoint").Ec2ClientVpnEndpoint;
export const Ec2ClientVpnEndpoint: typeof import("./ec2ClientVpnEndpoint").Ec2ClientVpnEndpoint = null as any;
utilities.lazyLoad(exports, ["Ec2ClientVpnEndpoint"], () => require("./ec2ClientVpnEndpoint"));

export { Ec2ClientVpnNetworkAssociationArgs, Ec2ClientVpnNetworkAssociationState } from "./ec2ClientVpnNetworkAssociation";
export type Ec2ClientVpnNetworkAssociation = import("./ec2ClientVpnNetworkAssociation").Ec2ClientVpnNetworkAssociation;
export const Ec2ClientVpnNetworkAssociation: typeof import("./ec2ClientVpnNetworkAssociation").Ec2ClientVpnNetworkAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2ClientVpnNetworkAssociation"], () => require("./ec2ClientVpnNetworkAssociation"));

export { Ec2ClientVpnRouteArgs, Ec2ClientVpnRouteState } from "./ec2ClientVpnRoute";
export type Ec2ClientVpnRoute = import("./ec2ClientVpnRoute").Ec2ClientVpnRoute;
export const Ec2ClientVpnRoute: typeof import("./ec2ClientVpnRoute").Ec2ClientVpnRoute = null as any;
utilities.lazyLoad(exports, ["Ec2ClientVpnRoute"], () => require("./ec2ClientVpnRoute"));

export { Ec2FleetArgs, Ec2FleetState } from "./ec2Fleet";
export type Ec2Fleet = import("./ec2Fleet").Ec2Fleet;
export const Ec2Fleet: typeof import("./ec2Fleet").Ec2Fleet = null as any;
utilities.lazyLoad(exports, ["Ec2Fleet"], () => require("./ec2Fleet"));

export { Ec2HostArgs, Ec2HostState } from "./ec2Host";
export type Ec2Host = import("./ec2Host").Ec2Host;
export const Ec2Host: typeof import("./ec2Host").Ec2Host = null as any;
utilities.lazyLoad(exports, ["Ec2Host"], () => require("./ec2Host"));

export { Ec2ImageBlockPublicAccessArgs, Ec2ImageBlockPublicAccessState } from "./ec2ImageBlockPublicAccess";
export type Ec2ImageBlockPublicAccess = import("./ec2ImageBlockPublicAccess").Ec2ImageBlockPublicAccess;
export const Ec2ImageBlockPublicAccess: typeof import("./ec2ImageBlockPublicAccess").Ec2ImageBlockPublicAccess = null as any;
utilities.lazyLoad(exports, ["Ec2ImageBlockPublicAccess"], () => require("./ec2ImageBlockPublicAccess"));

export { Ec2InstanceConnectEndpointArgs, Ec2InstanceConnectEndpointState } from "./ec2InstanceConnectEndpoint";
export type Ec2InstanceConnectEndpoint = import("./ec2InstanceConnectEndpoint").Ec2InstanceConnectEndpoint;
export const Ec2InstanceConnectEndpoint: typeof import("./ec2InstanceConnectEndpoint").Ec2InstanceConnectEndpoint = null as any;
utilities.lazyLoad(exports, ["Ec2InstanceConnectEndpoint"], () => require("./ec2InstanceConnectEndpoint"));

export { Ec2InstanceMetadataDefaultsArgs, Ec2InstanceMetadataDefaultsState } from "./ec2InstanceMetadataDefaults";
export type Ec2InstanceMetadataDefaults = import("./ec2InstanceMetadataDefaults").Ec2InstanceMetadataDefaults;
export const Ec2InstanceMetadataDefaults: typeof import("./ec2InstanceMetadataDefaults").Ec2InstanceMetadataDefaults = null as any;
utilities.lazyLoad(exports, ["Ec2InstanceMetadataDefaults"], () => require("./ec2InstanceMetadataDefaults"));

export { Ec2InstanceStateArgs, Ec2InstanceStateState } from "./ec2InstanceState";
export type Ec2InstanceState = import("./ec2InstanceState").Ec2InstanceState;
export const Ec2InstanceState: typeof import("./ec2InstanceState").Ec2InstanceState = null as any;
utilities.lazyLoad(exports, ["Ec2InstanceState"], () => require("./ec2InstanceState"));

export { Ec2LocalGatewayRouteArgs, Ec2LocalGatewayRouteState } from "./ec2LocalGatewayRoute";
export type Ec2LocalGatewayRoute = import("./ec2LocalGatewayRoute").Ec2LocalGatewayRoute;
export const Ec2LocalGatewayRoute: typeof import("./ec2LocalGatewayRoute").Ec2LocalGatewayRoute = null as any;
utilities.lazyLoad(exports, ["Ec2LocalGatewayRoute"], () => require("./ec2LocalGatewayRoute"));

export { Ec2LocalGatewayRouteTableVpcAssociationArgs, Ec2LocalGatewayRouteTableVpcAssociationState } from "./ec2LocalGatewayRouteTableVpcAssociation";
export type Ec2LocalGatewayRouteTableVpcAssociation = import("./ec2LocalGatewayRouteTableVpcAssociation").Ec2LocalGatewayRouteTableVpcAssociation;
export const Ec2LocalGatewayRouteTableVpcAssociation: typeof import("./ec2LocalGatewayRouteTableVpcAssociation").Ec2LocalGatewayRouteTableVpcAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2LocalGatewayRouteTableVpcAssociation"], () => require("./ec2LocalGatewayRouteTableVpcAssociation"));

export { Ec2ManagedPrefixListArgs, Ec2ManagedPrefixListState } from "./ec2ManagedPrefixList";
export type Ec2ManagedPrefixList = import("./ec2ManagedPrefixList").Ec2ManagedPrefixList;
export const Ec2ManagedPrefixList: typeof import("./ec2ManagedPrefixList").Ec2ManagedPrefixList = null as any;
utilities.lazyLoad(exports, ["Ec2ManagedPrefixList"], () => require("./ec2ManagedPrefixList"));

export { Ec2ManagedPrefixListEntryArgs, Ec2ManagedPrefixListEntryState } from "./ec2ManagedPrefixListEntry";
export type Ec2ManagedPrefixListEntry = import("./ec2ManagedPrefixListEntry").Ec2ManagedPrefixListEntry;
export const Ec2ManagedPrefixListEntry: typeof import("./ec2ManagedPrefixListEntry").Ec2ManagedPrefixListEntry = null as any;
utilities.lazyLoad(exports, ["Ec2ManagedPrefixListEntry"], () => require("./ec2ManagedPrefixListEntry"));

export { Ec2NetworkInsightsAnalysisArgs, Ec2NetworkInsightsAnalysisState } from "./ec2NetworkInsightsAnalysis";
export type Ec2NetworkInsightsAnalysis = import("./ec2NetworkInsightsAnalysis").Ec2NetworkInsightsAnalysis;
export const Ec2NetworkInsightsAnalysis: typeof import("./ec2NetworkInsightsAnalysis").Ec2NetworkInsightsAnalysis = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInsightsAnalysis"], () => require("./ec2NetworkInsightsAnalysis"));

export { Ec2NetworkInsightsPathArgs, Ec2NetworkInsightsPathState } from "./ec2NetworkInsightsPath";
export type Ec2NetworkInsightsPath = import("./ec2NetworkInsightsPath").Ec2NetworkInsightsPath;
export const Ec2NetworkInsightsPath: typeof import("./ec2NetworkInsightsPath").Ec2NetworkInsightsPath = null as any;
utilities.lazyLoad(exports, ["Ec2NetworkInsightsPath"], () => require("./ec2NetworkInsightsPath"));

export { Ec2SerialConsoleAccessArgs, Ec2SerialConsoleAccessState } from "./ec2SerialConsoleAccess";
export type Ec2SerialConsoleAccess = import("./ec2SerialConsoleAccess").Ec2SerialConsoleAccess;
export const Ec2SerialConsoleAccess: typeof import("./ec2SerialConsoleAccess").Ec2SerialConsoleAccess = null as any;
utilities.lazyLoad(exports, ["Ec2SerialConsoleAccess"], () => require("./ec2SerialConsoleAccess"));

export { Ec2SubnetCidrReservationArgs, Ec2SubnetCidrReservationState } from "./ec2SubnetCidrReservation";
export type Ec2SubnetCidrReservation = import("./ec2SubnetCidrReservation").Ec2SubnetCidrReservation;
export const Ec2SubnetCidrReservation: typeof import("./ec2SubnetCidrReservation").Ec2SubnetCidrReservation = null as any;
utilities.lazyLoad(exports, ["Ec2SubnetCidrReservation"], () => require("./ec2SubnetCidrReservation"));

export { Ec2TagArgs, Ec2TagState } from "./ec2Tag";
export type Ec2Tag = import("./ec2Tag").Ec2Tag;
export const Ec2Tag: typeof import("./ec2Tag").Ec2Tag = null as any;
utilities.lazyLoad(exports, ["Ec2Tag"], () => require("./ec2Tag"));

export { Ec2TrafficMirrorFilterArgs, Ec2TrafficMirrorFilterState } from "./ec2TrafficMirrorFilter";
export type Ec2TrafficMirrorFilter = import("./ec2TrafficMirrorFilter").Ec2TrafficMirrorFilter;
export const Ec2TrafficMirrorFilter: typeof import("./ec2TrafficMirrorFilter").Ec2TrafficMirrorFilter = null as any;
utilities.lazyLoad(exports, ["Ec2TrafficMirrorFilter"], () => require("./ec2TrafficMirrorFilter"));

export { Ec2TrafficMirrorFilterRuleArgs, Ec2TrafficMirrorFilterRuleState } from "./ec2TrafficMirrorFilterRule";
export type Ec2TrafficMirrorFilterRule = import("./ec2TrafficMirrorFilterRule").Ec2TrafficMirrorFilterRule;
export const Ec2TrafficMirrorFilterRule: typeof import("./ec2TrafficMirrorFilterRule").Ec2TrafficMirrorFilterRule = null as any;
utilities.lazyLoad(exports, ["Ec2TrafficMirrorFilterRule"], () => require("./ec2TrafficMirrorFilterRule"));

export { Ec2TrafficMirrorSessionArgs, Ec2TrafficMirrorSessionState } from "./ec2TrafficMirrorSession";
export type Ec2TrafficMirrorSession = import("./ec2TrafficMirrorSession").Ec2TrafficMirrorSession;
export const Ec2TrafficMirrorSession: typeof import("./ec2TrafficMirrorSession").Ec2TrafficMirrorSession = null as any;
utilities.lazyLoad(exports, ["Ec2TrafficMirrorSession"], () => require("./ec2TrafficMirrorSession"));

export { Ec2TrafficMirrorTargetArgs, Ec2TrafficMirrorTargetState } from "./ec2TrafficMirrorTarget";
export type Ec2TrafficMirrorTarget = import("./ec2TrafficMirrorTarget").Ec2TrafficMirrorTarget;
export const Ec2TrafficMirrorTarget: typeof import("./ec2TrafficMirrorTarget").Ec2TrafficMirrorTarget = null as any;
utilities.lazyLoad(exports, ["Ec2TrafficMirrorTarget"], () => require("./ec2TrafficMirrorTarget"));

export { Ec2TransitGatewayArgs, Ec2TransitGatewayState } from "./ec2TransitGateway";
export type Ec2TransitGateway = import("./ec2TransitGateway").Ec2TransitGateway;
export const Ec2TransitGateway: typeof import("./ec2TransitGateway").Ec2TransitGateway = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGateway"], () => require("./ec2TransitGateway"));

export { Ec2TransitGatewayConnectArgs, Ec2TransitGatewayConnectState } from "./ec2TransitGatewayConnect";
export type Ec2TransitGatewayConnect = import("./ec2TransitGatewayConnect").Ec2TransitGatewayConnect;
export const Ec2TransitGatewayConnect: typeof import("./ec2TransitGatewayConnect").Ec2TransitGatewayConnect = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayConnect"], () => require("./ec2TransitGatewayConnect"));

export { Ec2TransitGatewayConnectPeerArgs, Ec2TransitGatewayConnectPeerState } from "./ec2TransitGatewayConnectPeer";
export type Ec2TransitGatewayConnectPeer = import("./ec2TransitGatewayConnectPeer").Ec2TransitGatewayConnectPeer;
export const Ec2TransitGatewayConnectPeer: typeof import("./ec2TransitGatewayConnectPeer").Ec2TransitGatewayConnectPeer = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayConnectPeer"], () => require("./ec2TransitGatewayConnectPeer"));

export { Ec2TransitGatewayMulticastDomainArgs, Ec2TransitGatewayMulticastDomainState } from "./ec2TransitGatewayMulticastDomain";
export type Ec2TransitGatewayMulticastDomain = import("./ec2TransitGatewayMulticastDomain").Ec2TransitGatewayMulticastDomain;
export const Ec2TransitGatewayMulticastDomain: typeof import("./ec2TransitGatewayMulticastDomain").Ec2TransitGatewayMulticastDomain = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastDomain"], () => require("./ec2TransitGatewayMulticastDomain"));

export { Ec2TransitGatewayMulticastDomainAssociationArgs, Ec2TransitGatewayMulticastDomainAssociationState } from "./ec2TransitGatewayMulticastDomainAssociation";
export type Ec2TransitGatewayMulticastDomainAssociation = import("./ec2TransitGatewayMulticastDomainAssociation").Ec2TransitGatewayMulticastDomainAssociation;
export const Ec2TransitGatewayMulticastDomainAssociation: typeof import("./ec2TransitGatewayMulticastDomainAssociation").Ec2TransitGatewayMulticastDomainAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastDomainAssociation"], () => require("./ec2TransitGatewayMulticastDomainAssociation"));

export { Ec2TransitGatewayMulticastGroupMemberArgs, Ec2TransitGatewayMulticastGroupMemberState } from "./ec2TransitGatewayMulticastGroupMember";
export type Ec2TransitGatewayMulticastGroupMember = import("./ec2TransitGatewayMulticastGroupMember").Ec2TransitGatewayMulticastGroupMember;
export const Ec2TransitGatewayMulticastGroupMember: typeof import("./ec2TransitGatewayMulticastGroupMember").Ec2TransitGatewayMulticastGroupMember = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastGroupMember"], () => require("./ec2TransitGatewayMulticastGroupMember"));

export { Ec2TransitGatewayMulticastGroupSourceArgs, Ec2TransitGatewayMulticastGroupSourceState } from "./ec2TransitGatewayMulticastGroupSource";
export type Ec2TransitGatewayMulticastGroupSource = import("./ec2TransitGatewayMulticastGroupSource").Ec2TransitGatewayMulticastGroupSource;
export const Ec2TransitGatewayMulticastGroupSource: typeof import("./ec2TransitGatewayMulticastGroupSource").Ec2TransitGatewayMulticastGroupSource = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayMulticastGroupSource"], () => require("./ec2TransitGatewayMulticastGroupSource"));

export { Ec2TransitGatewayPeeringAttachmentArgs, Ec2TransitGatewayPeeringAttachmentState } from "./ec2TransitGatewayPeeringAttachment";
export type Ec2TransitGatewayPeeringAttachment = import("./ec2TransitGatewayPeeringAttachment").Ec2TransitGatewayPeeringAttachment;
export const Ec2TransitGatewayPeeringAttachment: typeof import("./ec2TransitGatewayPeeringAttachment").Ec2TransitGatewayPeeringAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayPeeringAttachment"], () => require("./ec2TransitGatewayPeeringAttachment"));

export { Ec2TransitGatewayPeeringAttachmentAccepterArgs, Ec2TransitGatewayPeeringAttachmentAccepterState } from "./ec2TransitGatewayPeeringAttachmentAccepter";
export type Ec2TransitGatewayPeeringAttachmentAccepter = import("./ec2TransitGatewayPeeringAttachmentAccepter").Ec2TransitGatewayPeeringAttachmentAccepter;
export const Ec2TransitGatewayPeeringAttachmentAccepter: typeof import("./ec2TransitGatewayPeeringAttachmentAccepter").Ec2TransitGatewayPeeringAttachmentAccepter = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayPeeringAttachmentAccepter"], () => require("./ec2TransitGatewayPeeringAttachmentAccepter"));

export { Ec2TransitGatewayPolicyTableArgs, Ec2TransitGatewayPolicyTableState } from "./ec2TransitGatewayPolicyTable";
export type Ec2TransitGatewayPolicyTable = import("./ec2TransitGatewayPolicyTable").Ec2TransitGatewayPolicyTable;
export const Ec2TransitGatewayPolicyTable: typeof import("./ec2TransitGatewayPolicyTable").Ec2TransitGatewayPolicyTable = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayPolicyTable"], () => require("./ec2TransitGatewayPolicyTable"));

export { Ec2TransitGatewayPolicyTableAssociationArgs, Ec2TransitGatewayPolicyTableAssociationState } from "./ec2TransitGatewayPolicyTableAssociation";
export type Ec2TransitGatewayPolicyTableAssociation = import("./ec2TransitGatewayPolicyTableAssociation").Ec2TransitGatewayPolicyTableAssociation;
export const Ec2TransitGatewayPolicyTableAssociation: typeof import("./ec2TransitGatewayPolicyTableAssociation").Ec2TransitGatewayPolicyTableAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayPolicyTableAssociation"], () => require("./ec2TransitGatewayPolicyTableAssociation"));

export { Ec2TransitGatewayPrefixListReferenceArgs, Ec2TransitGatewayPrefixListReferenceState } from "./ec2TransitGatewayPrefixListReference";
export type Ec2TransitGatewayPrefixListReference = import("./ec2TransitGatewayPrefixListReference").Ec2TransitGatewayPrefixListReference;
export const Ec2TransitGatewayPrefixListReference: typeof import("./ec2TransitGatewayPrefixListReference").Ec2TransitGatewayPrefixListReference = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayPrefixListReference"], () => require("./ec2TransitGatewayPrefixListReference"));

export { Ec2TransitGatewayRouteArgs, Ec2TransitGatewayRouteState } from "./ec2TransitGatewayRoute";
export type Ec2TransitGatewayRoute = import("./ec2TransitGatewayRoute").Ec2TransitGatewayRoute;
export const Ec2TransitGatewayRoute: typeof import("./ec2TransitGatewayRoute").Ec2TransitGatewayRoute = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRoute"], () => require("./ec2TransitGatewayRoute"));

export { Ec2TransitGatewayRouteTableArgs, Ec2TransitGatewayRouteTableState } from "./ec2TransitGatewayRouteTable";
export type Ec2TransitGatewayRouteTable = import("./ec2TransitGatewayRouteTable").Ec2TransitGatewayRouteTable;
export const Ec2TransitGatewayRouteTable: typeof import("./ec2TransitGatewayRouteTable").Ec2TransitGatewayRouteTable = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRouteTable"], () => require("./ec2TransitGatewayRouteTable"));

export { Ec2TransitGatewayRouteTableAssociationArgs, Ec2TransitGatewayRouteTableAssociationState } from "./ec2TransitGatewayRouteTableAssociation";
export type Ec2TransitGatewayRouteTableAssociation = import("./ec2TransitGatewayRouteTableAssociation").Ec2TransitGatewayRouteTableAssociation;
export const Ec2TransitGatewayRouteTableAssociation: typeof import("./ec2TransitGatewayRouteTableAssociation").Ec2TransitGatewayRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRouteTableAssociation"], () => require("./ec2TransitGatewayRouteTableAssociation"));

export { Ec2TransitGatewayRouteTablePropagationArgs, Ec2TransitGatewayRouteTablePropagationState } from "./ec2TransitGatewayRouteTablePropagation";
export type Ec2TransitGatewayRouteTablePropagation = import("./ec2TransitGatewayRouteTablePropagation").Ec2TransitGatewayRouteTablePropagation;
export const Ec2TransitGatewayRouteTablePropagation: typeof import("./ec2TransitGatewayRouteTablePropagation").Ec2TransitGatewayRouteTablePropagation = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayRouteTablePropagation"], () => require("./ec2TransitGatewayRouteTablePropagation"));

export { Ec2TransitGatewayVpcAttachmentArgs, Ec2TransitGatewayVpcAttachmentState } from "./ec2TransitGatewayVpcAttachment";
export type Ec2TransitGatewayVpcAttachment = import("./ec2TransitGatewayVpcAttachment").Ec2TransitGatewayVpcAttachment;
export const Ec2TransitGatewayVpcAttachment: typeof import("./ec2TransitGatewayVpcAttachment").Ec2TransitGatewayVpcAttachment = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayVpcAttachment"], () => require("./ec2TransitGatewayVpcAttachment"));

export { Ec2TransitGatewayVpcAttachmentAccepterArgs, Ec2TransitGatewayVpcAttachmentAccepterState } from "./ec2TransitGatewayVpcAttachmentAccepter";
export type Ec2TransitGatewayVpcAttachmentAccepter = import("./ec2TransitGatewayVpcAttachmentAccepter").Ec2TransitGatewayVpcAttachmentAccepter;
export const Ec2TransitGatewayVpcAttachmentAccepter: typeof import("./ec2TransitGatewayVpcAttachmentAccepter").Ec2TransitGatewayVpcAttachmentAccepter = null as any;
utilities.lazyLoad(exports, ["Ec2TransitGatewayVpcAttachmentAccepter"], () => require("./ec2TransitGatewayVpcAttachmentAccepter"));

export { EcrLifecyclePolicyArgs, EcrLifecyclePolicyState } from "./ecrLifecyclePolicy";
export type EcrLifecyclePolicy = import("./ecrLifecyclePolicy").EcrLifecyclePolicy;
export const EcrLifecyclePolicy: typeof import("./ecrLifecyclePolicy").EcrLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["EcrLifecyclePolicy"], () => require("./ecrLifecyclePolicy"));

export { EcrPullThroughCacheRuleArgs, EcrPullThroughCacheRuleState } from "./ecrPullThroughCacheRule";
export type EcrPullThroughCacheRule = import("./ecrPullThroughCacheRule").EcrPullThroughCacheRule;
export const EcrPullThroughCacheRule: typeof import("./ecrPullThroughCacheRule").EcrPullThroughCacheRule = null as any;
utilities.lazyLoad(exports, ["EcrPullThroughCacheRule"], () => require("./ecrPullThroughCacheRule"));

export { EcrRegistryPolicyArgs, EcrRegistryPolicyState } from "./ecrRegistryPolicy";
export type EcrRegistryPolicy = import("./ecrRegistryPolicy").EcrRegistryPolicy;
export const EcrRegistryPolicy: typeof import("./ecrRegistryPolicy").EcrRegistryPolicy = null as any;
utilities.lazyLoad(exports, ["EcrRegistryPolicy"], () => require("./ecrRegistryPolicy"));

export { EcrRegistryScanningConfigurationArgs, EcrRegistryScanningConfigurationState } from "./ecrRegistryScanningConfiguration";
export type EcrRegistryScanningConfiguration = import("./ecrRegistryScanningConfiguration").EcrRegistryScanningConfiguration;
export const EcrRegistryScanningConfiguration: typeof import("./ecrRegistryScanningConfiguration").EcrRegistryScanningConfiguration = null as any;
utilities.lazyLoad(exports, ["EcrRegistryScanningConfiguration"], () => require("./ecrRegistryScanningConfiguration"));

export { EcrReplicationConfigurationArgs, EcrReplicationConfigurationState } from "./ecrReplicationConfiguration";
export type EcrReplicationConfiguration = import("./ecrReplicationConfiguration").EcrReplicationConfiguration;
export const EcrReplicationConfiguration: typeof import("./ecrReplicationConfiguration").EcrReplicationConfiguration = null as any;
utilities.lazyLoad(exports, ["EcrReplicationConfiguration"], () => require("./ecrReplicationConfiguration"));

export { EcrRepositoryArgs, EcrRepositoryState } from "./ecrRepository";
export type EcrRepository = import("./ecrRepository").EcrRepository;
export const EcrRepository: typeof import("./ecrRepository").EcrRepository = null as any;
utilities.lazyLoad(exports, ["EcrRepository"], () => require("./ecrRepository"));

export { EcrRepositoryCreationTemplateArgs, EcrRepositoryCreationTemplateState } from "./ecrRepositoryCreationTemplate";
export type EcrRepositoryCreationTemplate = import("./ecrRepositoryCreationTemplate").EcrRepositoryCreationTemplate;
export const EcrRepositoryCreationTemplate: typeof import("./ecrRepositoryCreationTemplate").EcrRepositoryCreationTemplate = null as any;
utilities.lazyLoad(exports, ["EcrRepositoryCreationTemplate"], () => require("./ecrRepositoryCreationTemplate"));

export { EcrRepositoryPolicyArgs, EcrRepositoryPolicyState } from "./ecrRepositoryPolicy";
export type EcrRepositoryPolicy = import("./ecrRepositoryPolicy").EcrRepositoryPolicy;
export const EcrRepositoryPolicy: typeof import("./ecrRepositoryPolicy").EcrRepositoryPolicy = null as any;
utilities.lazyLoad(exports, ["EcrRepositoryPolicy"], () => require("./ecrRepositoryPolicy"));

export { EcrpublicRepositoryArgs, EcrpublicRepositoryState } from "./ecrpublicRepository";
export type EcrpublicRepository = import("./ecrpublicRepository").EcrpublicRepository;
export const EcrpublicRepository: typeof import("./ecrpublicRepository").EcrpublicRepository = null as any;
utilities.lazyLoad(exports, ["EcrpublicRepository"], () => require("./ecrpublicRepository"));

export { EcrpublicRepositoryPolicyArgs, EcrpublicRepositoryPolicyState } from "./ecrpublicRepositoryPolicy";
export type EcrpublicRepositoryPolicy = import("./ecrpublicRepositoryPolicy").EcrpublicRepositoryPolicy;
export const EcrpublicRepositoryPolicy: typeof import("./ecrpublicRepositoryPolicy").EcrpublicRepositoryPolicy = null as any;
utilities.lazyLoad(exports, ["EcrpublicRepositoryPolicy"], () => require("./ecrpublicRepositoryPolicy"));

export { EcsAccountSettingDefaultArgs, EcsAccountSettingDefaultState } from "./ecsAccountSettingDefault";
export type EcsAccountSettingDefault = import("./ecsAccountSettingDefault").EcsAccountSettingDefault;
export const EcsAccountSettingDefault: typeof import("./ecsAccountSettingDefault").EcsAccountSettingDefault = null as any;
utilities.lazyLoad(exports, ["EcsAccountSettingDefault"], () => require("./ecsAccountSettingDefault"));

export { EcsCapacityProviderArgs, EcsCapacityProviderState } from "./ecsCapacityProvider";
export type EcsCapacityProvider = import("./ecsCapacityProvider").EcsCapacityProvider;
export const EcsCapacityProvider: typeof import("./ecsCapacityProvider").EcsCapacityProvider = null as any;
utilities.lazyLoad(exports, ["EcsCapacityProvider"], () => require("./ecsCapacityProvider"));

export { EcsClusterArgs, EcsClusterState } from "./ecsCluster";
export type EcsCluster = import("./ecsCluster").EcsCluster;
export const EcsCluster: typeof import("./ecsCluster").EcsCluster = null as any;
utilities.lazyLoad(exports, ["EcsCluster"], () => require("./ecsCluster"));

export { EcsClusterCapacityProvidersArgs, EcsClusterCapacityProvidersState } from "./ecsClusterCapacityProviders";
export type EcsClusterCapacityProviders = import("./ecsClusterCapacityProviders").EcsClusterCapacityProviders;
export const EcsClusterCapacityProviders: typeof import("./ecsClusterCapacityProviders").EcsClusterCapacityProviders = null as any;
utilities.lazyLoad(exports, ["EcsClusterCapacityProviders"], () => require("./ecsClusterCapacityProviders"));

export { EcsServiceArgs, EcsServiceState } from "./ecsService";
export type EcsService = import("./ecsService").EcsService;
export const EcsService: typeof import("./ecsService").EcsService = null as any;
utilities.lazyLoad(exports, ["EcsService"], () => require("./ecsService"));

export { EcsTagArgs, EcsTagState } from "./ecsTag";
export type EcsTag = import("./ecsTag").EcsTag;
export const EcsTag: typeof import("./ecsTag").EcsTag = null as any;
utilities.lazyLoad(exports, ["EcsTag"], () => require("./ecsTag"));

export { EcsTaskDefinitionArgs, EcsTaskDefinitionState } from "./ecsTaskDefinition";
export type EcsTaskDefinition = import("./ecsTaskDefinition").EcsTaskDefinition;
export const EcsTaskDefinition: typeof import("./ecsTaskDefinition").EcsTaskDefinition = null as any;
utilities.lazyLoad(exports, ["EcsTaskDefinition"], () => require("./ecsTaskDefinition"));

export { EcsTaskSetArgs, EcsTaskSetState } from "./ecsTaskSet";
export type EcsTaskSet = import("./ecsTaskSet").EcsTaskSet;
export const EcsTaskSet: typeof import("./ecsTaskSet").EcsTaskSet = null as any;
utilities.lazyLoad(exports, ["EcsTaskSet"], () => require("./ecsTaskSet"));

export { EfsAccessPointArgs, EfsAccessPointState } from "./efsAccessPoint";
export type EfsAccessPoint = import("./efsAccessPoint").EfsAccessPoint;
export const EfsAccessPoint: typeof import("./efsAccessPoint").EfsAccessPoint = null as any;
utilities.lazyLoad(exports, ["EfsAccessPoint"], () => require("./efsAccessPoint"));

export { EfsBackupPolicyArgs, EfsBackupPolicyState } from "./efsBackupPolicy";
export type EfsBackupPolicy = import("./efsBackupPolicy").EfsBackupPolicy;
export const EfsBackupPolicy: typeof import("./efsBackupPolicy").EfsBackupPolicy = null as any;
utilities.lazyLoad(exports, ["EfsBackupPolicy"], () => require("./efsBackupPolicy"));

export { EfsFileSystemArgs, EfsFileSystemState } from "./efsFileSystem";
export type EfsFileSystem = import("./efsFileSystem").EfsFileSystem;
export const EfsFileSystem: typeof import("./efsFileSystem").EfsFileSystem = null as any;
utilities.lazyLoad(exports, ["EfsFileSystem"], () => require("./efsFileSystem"));

export { EfsFileSystemPolicyArgs, EfsFileSystemPolicyState } from "./efsFileSystemPolicy";
export type EfsFileSystemPolicy = import("./efsFileSystemPolicy").EfsFileSystemPolicy;
export const EfsFileSystemPolicy: typeof import("./efsFileSystemPolicy").EfsFileSystemPolicy = null as any;
utilities.lazyLoad(exports, ["EfsFileSystemPolicy"], () => require("./efsFileSystemPolicy"));

export { EfsMountTargetArgs, EfsMountTargetState } from "./efsMountTarget";
export type EfsMountTarget = import("./efsMountTarget").EfsMountTarget;
export const EfsMountTarget: typeof import("./efsMountTarget").EfsMountTarget = null as any;
utilities.lazyLoad(exports, ["EfsMountTarget"], () => require("./efsMountTarget"));

export { EfsReplicationConfigurationArgs, EfsReplicationConfigurationState } from "./efsReplicationConfiguration";
export type EfsReplicationConfiguration = import("./efsReplicationConfiguration").EfsReplicationConfiguration;
export const EfsReplicationConfiguration: typeof import("./efsReplicationConfiguration").EfsReplicationConfiguration = null as any;
utilities.lazyLoad(exports, ["EfsReplicationConfiguration"], () => require("./efsReplicationConfiguration"));

export { EgressOnlyInternetGatewayArgs, EgressOnlyInternetGatewayState } from "./egressOnlyInternetGateway";
export type EgressOnlyInternetGateway = import("./egressOnlyInternetGateway").EgressOnlyInternetGateway;
export const EgressOnlyInternetGateway: typeof import("./egressOnlyInternetGateway").EgressOnlyInternetGateway = null as any;
utilities.lazyLoad(exports, ["EgressOnlyInternetGateway"], () => require("./egressOnlyInternetGateway"));

export { EipArgs, EipState } from "./eip";
export type Eip = import("./eip").Eip;
export const Eip: typeof import("./eip").Eip = null as any;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));

export { EipAssociationArgs, EipAssociationState } from "./eipAssociation";
export type EipAssociation = import("./eipAssociation").EipAssociation;
export const EipAssociation: typeof import("./eipAssociation").EipAssociation = null as any;
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));

export { EipDomainNameArgs, EipDomainNameState } from "./eipDomainName";
export type EipDomainName = import("./eipDomainName").EipDomainName;
export const EipDomainName: typeof import("./eipDomainName").EipDomainName = null as any;
utilities.lazyLoad(exports, ["EipDomainName"], () => require("./eipDomainName"));

export { EksAccessEntryArgs, EksAccessEntryState } from "./eksAccessEntry";
export type EksAccessEntry = import("./eksAccessEntry").EksAccessEntry;
export const EksAccessEntry: typeof import("./eksAccessEntry").EksAccessEntry = null as any;
utilities.lazyLoad(exports, ["EksAccessEntry"], () => require("./eksAccessEntry"));

export { EksAccessPolicyAssociationArgs, EksAccessPolicyAssociationState } from "./eksAccessPolicyAssociation";
export type EksAccessPolicyAssociation = import("./eksAccessPolicyAssociation").EksAccessPolicyAssociation;
export const EksAccessPolicyAssociation: typeof import("./eksAccessPolicyAssociation").EksAccessPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["EksAccessPolicyAssociation"], () => require("./eksAccessPolicyAssociation"));

export { EksAddonArgs, EksAddonState } from "./eksAddon";
export type EksAddon = import("./eksAddon").EksAddon;
export const EksAddon: typeof import("./eksAddon").EksAddon = null as any;
utilities.lazyLoad(exports, ["EksAddon"], () => require("./eksAddon"));

export { EksClusterArgs, EksClusterState } from "./eksCluster";
export type EksCluster = import("./eksCluster").EksCluster;
export const EksCluster: typeof import("./eksCluster").EksCluster = null as any;
utilities.lazyLoad(exports, ["EksCluster"], () => require("./eksCluster"));

export { EksFargateProfileArgs, EksFargateProfileState } from "./eksFargateProfile";
export type EksFargateProfile = import("./eksFargateProfile").EksFargateProfile;
export const EksFargateProfile: typeof import("./eksFargateProfile").EksFargateProfile = null as any;
utilities.lazyLoad(exports, ["EksFargateProfile"], () => require("./eksFargateProfile"));

export { EksIdentityProviderConfigArgs, EksIdentityProviderConfigState } from "./eksIdentityProviderConfig";
export type EksIdentityProviderConfig = import("./eksIdentityProviderConfig").EksIdentityProviderConfig;
export const EksIdentityProviderConfig: typeof import("./eksIdentityProviderConfig").EksIdentityProviderConfig = null as any;
utilities.lazyLoad(exports, ["EksIdentityProviderConfig"], () => require("./eksIdentityProviderConfig"));

export { EksNodeGroupArgs, EksNodeGroupState } from "./eksNodeGroup";
export type EksNodeGroup = import("./eksNodeGroup").EksNodeGroup;
export const EksNodeGroup: typeof import("./eksNodeGroup").EksNodeGroup = null as any;
utilities.lazyLoad(exports, ["EksNodeGroup"], () => require("./eksNodeGroup"));

export { EksPodIdentityAssociationArgs, EksPodIdentityAssociationState } from "./eksPodIdentityAssociation";
export type EksPodIdentityAssociation = import("./eksPodIdentityAssociation").EksPodIdentityAssociation;
export const EksPodIdentityAssociation: typeof import("./eksPodIdentityAssociation").EksPodIdentityAssociation = null as any;
utilities.lazyLoad(exports, ["EksPodIdentityAssociation"], () => require("./eksPodIdentityAssociation"));

export { ElasticBeanstalkApplicationArgs, ElasticBeanstalkApplicationState } from "./elasticBeanstalkApplication";
export type ElasticBeanstalkApplication = import("./elasticBeanstalkApplication").ElasticBeanstalkApplication;
export const ElasticBeanstalkApplication: typeof import("./elasticBeanstalkApplication").ElasticBeanstalkApplication = null as any;
utilities.lazyLoad(exports, ["ElasticBeanstalkApplication"], () => require("./elasticBeanstalkApplication"));

export { ElasticBeanstalkApplicationVersionArgs, ElasticBeanstalkApplicationVersionState } from "./elasticBeanstalkApplicationVersion";
export type ElasticBeanstalkApplicationVersion = import("./elasticBeanstalkApplicationVersion").ElasticBeanstalkApplicationVersion;
export const ElasticBeanstalkApplicationVersion: typeof import("./elasticBeanstalkApplicationVersion").ElasticBeanstalkApplicationVersion = null as any;
utilities.lazyLoad(exports, ["ElasticBeanstalkApplicationVersion"], () => require("./elasticBeanstalkApplicationVersion"));

export { ElasticBeanstalkConfigurationTemplateArgs, ElasticBeanstalkConfigurationTemplateState } from "./elasticBeanstalkConfigurationTemplate";
export type ElasticBeanstalkConfigurationTemplate = import("./elasticBeanstalkConfigurationTemplate").ElasticBeanstalkConfigurationTemplate;
export const ElasticBeanstalkConfigurationTemplate: typeof import("./elasticBeanstalkConfigurationTemplate").ElasticBeanstalkConfigurationTemplate = null as any;
utilities.lazyLoad(exports, ["ElasticBeanstalkConfigurationTemplate"], () => require("./elasticBeanstalkConfigurationTemplate"));

export { ElasticBeanstalkEnvironmentArgs, ElasticBeanstalkEnvironmentState } from "./elasticBeanstalkEnvironment";
export type ElasticBeanstalkEnvironment = import("./elasticBeanstalkEnvironment").ElasticBeanstalkEnvironment;
export const ElasticBeanstalkEnvironment: typeof import("./elasticBeanstalkEnvironment").ElasticBeanstalkEnvironment = null as any;
utilities.lazyLoad(exports, ["ElasticBeanstalkEnvironment"], () => require("./elasticBeanstalkEnvironment"));

export { ElasticacheClusterArgs, ElasticacheClusterState } from "./elasticacheCluster";
export type ElasticacheCluster = import("./elasticacheCluster").ElasticacheCluster;
export const ElasticacheCluster: typeof import("./elasticacheCluster").ElasticacheCluster = null as any;
utilities.lazyLoad(exports, ["ElasticacheCluster"], () => require("./elasticacheCluster"));

export { ElasticacheGlobalReplicationGroupArgs, ElasticacheGlobalReplicationGroupState } from "./elasticacheGlobalReplicationGroup";
export type ElasticacheGlobalReplicationGroup = import("./elasticacheGlobalReplicationGroup").ElasticacheGlobalReplicationGroup;
export const ElasticacheGlobalReplicationGroup: typeof import("./elasticacheGlobalReplicationGroup").ElasticacheGlobalReplicationGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheGlobalReplicationGroup"], () => require("./elasticacheGlobalReplicationGroup"));

export { ElasticacheParameterGroupArgs, ElasticacheParameterGroupState } from "./elasticacheParameterGroup";
export type ElasticacheParameterGroup = import("./elasticacheParameterGroup").ElasticacheParameterGroup;
export const ElasticacheParameterGroup: typeof import("./elasticacheParameterGroup").ElasticacheParameterGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheParameterGroup"], () => require("./elasticacheParameterGroup"));

export { ElasticacheReplicationGroupArgs, ElasticacheReplicationGroupState } from "./elasticacheReplicationGroup";
export type ElasticacheReplicationGroup = import("./elasticacheReplicationGroup").ElasticacheReplicationGroup;
export const ElasticacheReplicationGroup: typeof import("./elasticacheReplicationGroup").ElasticacheReplicationGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheReplicationGroup"], () => require("./elasticacheReplicationGroup"));

export { ElasticacheServerlessCacheArgs, ElasticacheServerlessCacheState } from "./elasticacheServerlessCache";
export type ElasticacheServerlessCache = import("./elasticacheServerlessCache").ElasticacheServerlessCache;
export const ElasticacheServerlessCache: typeof import("./elasticacheServerlessCache").ElasticacheServerlessCache = null as any;
utilities.lazyLoad(exports, ["ElasticacheServerlessCache"], () => require("./elasticacheServerlessCache"));

export { ElasticacheSubnetGroupArgs, ElasticacheSubnetGroupState } from "./elasticacheSubnetGroup";
export type ElasticacheSubnetGroup = import("./elasticacheSubnetGroup").ElasticacheSubnetGroup;
export const ElasticacheSubnetGroup: typeof import("./elasticacheSubnetGroup").ElasticacheSubnetGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheSubnetGroup"], () => require("./elasticacheSubnetGroup"));

export { ElasticacheUserArgs, ElasticacheUserState } from "./elasticacheUser";
export type ElasticacheUser = import("./elasticacheUser").ElasticacheUser;
export const ElasticacheUser: typeof import("./elasticacheUser").ElasticacheUser = null as any;
utilities.lazyLoad(exports, ["ElasticacheUser"], () => require("./elasticacheUser"));

export { ElasticacheUserGroupArgs, ElasticacheUserGroupState } from "./elasticacheUserGroup";
export type ElasticacheUserGroup = import("./elasticacheUserGroup").ElasticacheUserGroup;
export const ElasticacheUserGroup: typeof import("./elasticacheUserGroup").ElasticacheUserGroup = null as any;
utilities.lazyLoad(exports, ["ElasticacheUserGroup"], () => require("./elasticacheUserGroup"));

export { ElasticacheUserGroupAssociationArgs, ElasticacheUserGroupAssociationState } from "./elasticacheUserGroupAssociation";
export type ElasticacheUserGroupAssociation = import("./elasticacheUserGroupAssociation").ElasticacheUserGroupAssociation;
export const ElasticacheUserGroupAssociation: typeof import("./elasticacheUserGroupAssociation").ElasticacheUserGroupAssociation = null as any;
utilities.lazyLoad(exports, ["ElasticacheUserGroupAssociation"], () => require("./elasticacheUserGroupAssociation"));

export { ElasticsearchDomainArgs, ElasticsearchDomainState } from "./elasticsearchDomain";
export type ElasticsearchDomain = import("./elasticsearchDomain").ElasticsearchDomain;
export const ElasticsearchDomain: typeof import("./elasticsearchDomain").ElasticsearchDomain = null as any;
utilities.lazyLoad(exports, ["ElasticsearchDomain"], () => require("./elasticsearchDomain"));

export { ElasticsearchDomainPolicyArgs, ElasticsearchDomainPolicyState } from "./elasticsearchDomainPolicy";
export type ElasticsearchDomainPolicy = import("./elasticsearchDomainPolicy").ElasticsearchDomainPolicy;
export const ElasticsearchDomainPolicy: typeof import("./elasticsearchDomainPolicy").ElasticsearchDomainPolicy = null as any;
utilities.lazyLoad(exports, ["ElasticsearchDomainPolicy"], () => require("./elasticsearchDomainPolicy"));

export { ElasticsearchDomainSamlOptionsArgs, ElasticsearchDomainSamlOptionsState } from "./elasticsearchDomainSamlOptions";
export type ElasticsearchDomainSamlOptions = import("./elasticsearchDomainSamlOptions").ElasticsearchDomainSamlOptions;
export const ElasticsearchDomainSamlOptions: typeof import("./elasticsearchDomainSamlOptions").ElasticsearchDomainSamlOptions = null as any;
utilities.lazyLoad(exports, ["ElasticsearchDomainSamlOptions"], () => require("./elasticsearchDomainSamlOptions"));

export { ElasticsearchVpcEndpointArgs, ElasticsearchVpcEndpointState } from "./elasticsearchVpcEndpoint";
export type ElasticsearchVpcEndpoint = import("./elasticsearchVpcEndpoint").ElasticsearchVpcEndpoint;
export const ElasticsearchVpcEndpoint: typeof import("./elasticsearchVpcEndpoint").ElasticsearchVpcEndpoint = null as any;
utilities.lazyLoad(exports, ["ElasticsearchVpcEndpoint"], () => require("./elasticsearchVpcEndpoint"));

export { ElastictranscoderPipelineArgs, ElastictranscoderPipelineState } from "./elastictranscoderPipeline";
export type ElastictranscoderPipeline = import("./elastictranscoderPipeline").ElastictranscoderPipeline;
export const ElastictranscoderPipeline: typeof import("./elastictranscoderPipeline").ElastictranscoderPipeline = null as any;
utilities.lazyLoad(exports, ["ElastictranscoderPipeline"], () => require("./elastictranscoderPipeline"));

export { ElastictranscoderPresetArgs, ElastictranscoderPresetState } from "./elastictranscoderPreset";
export type ElastictranscoderPreset = import("./elastictranscoderPreset").ElastictranscoderPreset;
export const ElastictranscoderPreset: typeof import("./elastictranscoderPreset").ElastictranscoderPreset = null as any;
utilities.lazyLoad(exports, ["ElastictranscoderPreset"], () => require("./elastictranscoderPreset"));

export { ElbArgs, ElbState } from "./elb";
export type Elb = import("./elb").Elb;
export const Elb: typeof import("./elb").Elb = null as any;
utilities.lazyLoad(exports, ["Elb"], () => require("./elb"));

export { ElbAttachmentArgs, ElbAttachmentState } from "./elbAttachment";
export type ElbAttachment = import("./elbAttachment").ElbAttachment;
export const ElbAttachment: typeof import("./elbAttachment").ElbAttachment = null as any;
utilities.lazyLoad(exports, ["ElbAttachment"], () => require("./elbAttachment"));

export { EmrBlockPublicAccessConfigurationArgs, EmrBlockPublicAccessConfigurationState } from "./emrBlockPublicAccessConfiguration";
export type EmrBlockPublicAccessConfiguration = import("./emrBlockPublicAccessConfiguration").EmrBlockPublicAccessConfiguration;
export const EmrBlockPublicAccessConfiguration: typeof import("./emrBlockPublicAccessConfiguration").EmrBlockPublicAccessConfiguration = null as any;
utilities.lazyLoad(exports, ["EmrBlockPublicAccessConfiguration"], () => require("./emrBlockPublicAccessConfiguration"));

export { EmrClusterArgs, EmrClusterState } from "./emrCluster";
export type EmrCluster = import("./emrCluster").EmrCluster;
export const EmrCluster: typeof import("./emrCluster").EmrCluster = null as any;
utilities.lazyLoad(exports, ["EmrCluster"], () => require("./emrCluster"));

export { EmrInstanceFleetArgs, EmrInstanceFleetState } from "./emrInstanceFleet";
export type EmrInstanceFleet = import("./emrInstanceFleet").EmrInstanceFleet;
export const EmrInstanceFleet: typeof import("./emrInstanceFleet").EmrInstanceFleet = null as any;
utilities.lazyLoad(exports, ["EmrInstanceFleet"], () => require("./emrInstanceFleet"));

export { EmrInstanceGroupArgs, EmrInstanceGroupState } from "./emrInstanceGroup";
export type EmrInstanceGroup = import("./emrInstanceGroup").EmrInstanceGroup;
export const EmrInstanceGroup: typeof import("./emrInstanceGroup").EmrInstanceGroup = null as any;
utilities.lazyLoad(exports, ["EmrInstanceGroup"], () => require("./emrInstanceGroup"));

export { EmrManagedScalingPolicyArgs, EmrManagedScalingPolicyState } from "./emrManagedScalingPolicy";
export type EmrManagedScalingPolicy = import("./emrManagedScalingPolicy").EmrManagedScalingPolicy;
export const EmrManagedScalingPolicy: typeof import("./emrManagedScalingPolicy").EmrManagedScalingPolicy = null as any;
utilities.lazyLoad(exports, ["EmrManagedScalingPolicy"], () => require("./emrManagedScalingPolicy"));

export { EmrSecurityConfigurationArgs, EmrSecurityConfigurationState } from "./emrSecurityConfiguration";
export type EmrSecurityConfiguration = import("./emrSecurityConfiguration").EmrSecurityConfiguration;
export const EmrSecurityConfiguration: typeof import("./emrSecurityConfiguration").EmrSecurityConfiguration = null as any;
utilities.lazyLoad(exports, ["EmrSecurityConfiguration"], () => require("./emrSecurityConfiguration"));

export { EmrStudioArgs, EmrStudioState } from "./emrStudio";
export type EmrStudio = import("./emrStudio").EmrStudio;
export const EmrStudio: typeof import("./emrStudio").EmrStudio = null as any;
utilities.lazyLoad(exports, ["EmrStudio"], () => require("./emrStudio"));

export { EmrStudioSessionMappingArgs, EmrStudioSessionMappingState } from "./emrStudioSessionMapping";
export type EmrStudioSessionMapping = import("./emrStudioSessionMapping").EmrStudioSessionMapping;
export const EmrStudioSessionMapping: typeof import("./emrStudioSessionMapping").EmrStudioSessionMapping = null as any;
utilities.lazyLoad(exports, ["EmrStudioSessionMapping"], () => require("./emrStudioSessionMapping"));

export { EmrcontainersJobTemplateArgs, EmrcontainersJobTemplateState } from "./emrcontainersJobTemplate";
export type EmrcontainersJobTemplate = import("./emrcontainersJobTemplate").EmrcontainersJobTemplate;
export const EmrcontainersJobTemplate: typeof import("./emrcontainersJobTemplate").EmrcontainersJobTemplate = null as any;
utilities.lazyLoad(exports, ["EmrcontainersJobTemplate"], () => require("./emrcontainersJobTemplate"));

export { EmrcontainersVirtualClusterArgs, EmrcontainersVirtualClusterState } from "./emrcontainersVirtualCluster";
export type EmrcontainersVirtualCluster = import("./emrcontainersVirtualCluster").EmrcontainersVirtualCluster;
export const EmrcontainersVirtualCluster: typeof import("./emrcontainersVirtualCluster").EmrcontainersVirtualCluster = null as any;
utilities.lazyLoad(exports, ["EmrcontainersVirtualCluster"], () => require("./emrcontainersVirtualCluster"));

export { EmrserverlessApplicationArgs, EmrserverlessApplicationState } from "./emrserverlessApplication";
export type EmrserverlessApplication = import("./emrserverlessApplication").EmrserverlessApplication;
export const EmrserverlessApplication: typeof import("./emrserverlessApplication").EmrserverlessApplication = null as any;
utilities.lazyLoad(exports, ["EmrserverlessApplication"], () => require("./emrserverlessApplication"));

export { EvidentlyFeatureArgs, EvidentlyFeatureState } from "./evidentlyFeature";
export type EvidentlyFeature = import("./evidentlyFeature").EvidentlyFeature;
export const EvidentlyFeature: typeof import("./evidentlyFeature").EvidentlyFeature = null as any;
utilities.lazyLoad(exports, ["EvidentlyFeature"], () => require("./evidentlyFeature"));

export { EvidentlyLaunchArgs, EvidentlyLaunchState } from "./evidentlyLaunch";
export type EvidentlyLaunch = import("./evidentlyLaunch").EvidentlyLaunch;
export const EvidentlyLaunch: typeof import("./evidentlyLaunch").EvidentlyLaunch = null as any;
utilities.lazyLoad(exports, ["EvidentlyLaunch"], () => require("./evidentlyLaunch"));

export { EvidentlyProjectArgs, EvidentlyProjectState } from "./evidentlyProject";
export type EvidentlyProject = import("./evidentlyProject").EvidentlyProject;
export const EvidentlyProject: typeof import("./evidentlyProject").EvidentlyProject = null as any;
utilities.lazyLoad(exports, ["EvidentlyProject"], () => require("./evidentlyProject"));

export { EvidentlySegmentArgs, EvidentlySegmentState } from "./evidentlySegment";
export type EvidentlySegment = import("./evidentlySegment").EvidentlySegment;
export const EvidentlySegment: typeof import("./evidentlySegment").EvidentlySegment = null as any;
utilities.lazyLoad(exports, ["EvidentlySegment"], () => require("./evidentlySegment"));

export { FinspaceKxClusterArgs, FinspaceKxClusterState } from "./finspaceKxCluster";
export type FinspaceKxCluster = import("./finspaceKxCluster").FinspaceKxCluster;
export const FinspaceKxCluster: typeof import("./finspaceKxCluster").FinspaceKxCluster = null as any;
utilities.lazyLoad(exports, ["FinspaceKxCluster"], () => require("./finspaceKxCluster"));

export { FinspaceKxDatabaseArgs, FinspaceKxDatabaseState } from "./finspaceKxDatabase";
export type FinspaceKxDatabase = import("./finspaceKxDatabase").FinspaceKxDatabase;
export const FinspaceKxDatabase: typeof import("./finspaceKxDatabase").FinspaceKxDatabase = null as any;
utilities.lazyLoad(exports, ["FinspaceKxDatabase"], () => require("./finspaceKxDatabase"));

export { FinspaceKxDataviewArgs, FinspaceKxDataviewState } from "./finspaceKxDataview";
export type FinspaceKxDataview = import("./finspaceKxDataview").FinspaceKxDataview;
export const FinspaceKxDataview: typeof import("./finspaceKxDataview").FinspaceKxDataview = null as any;
utilities.lazyLoad(exports, ["FinspaceKxDataview"], () => require("./finspaceKxDataview"));

export { FinspaceKxEnvironmentArgs, FinspaceKxEnvironmentState } from "./finspaceKxEnvironment";
export type FinspaceKxEnvironment = import("./finspaceKxEnvironment").FinspaceKxEnvironment;
export const FinspaceKxEnvironment: typeof import("./finspaceKxEnvironment").FinspaceKxEnvironment = null as any;
utilities.lazyLoad(exports, ["FinspaceKxEnvironment"], () => require("./finspaceKxEnvironment"));

export { FinspaceKxScalingGroupArgs, FinspaceKxScalingGroupState } from "./finspaceKxScalingGroup";
export type FinspaceKxScalingGroup = import("./finspaceKxScalingGroup").FinspaceKxScalingGroup;
export const FinspaceKxScalingGroup: typeof import("./finspaceKxScalingGroup").FinspaceKxScalingGroup = null as any;
utilities.lazyLoad(exports, ["FinspaceKxScalingGroup"], () => require("./finspaceKxScalingGroup"));

export { FinspaceKxUserArgs, FinspaceKxUserState } from "./finspaceKxUser";
export type FinspaceKxUser = import("./finspaceKxUser").FinspaceKxUser;
export const FinspaceKxUser: typeof import("./finspaceKxUser").FinspaceKxUser = null as any;
utilities.lazyLoad(exports, ["FinspaceKxUser"], () => require("./finspaceKxUser"));

export { FinspaceKxVolumeArgs, FinspaceKxVolumeState } from "./finspaceKxVolume";
export type FinspaceKxVolume = import("./finspaceKxVolume").FinspaceKxVolume;
export const FinspaceKxVolume: typeof import("./finspaceKxVolume").FinspaceKxVolume = null as any;
utilities.lazyLoad(exports, ["FinspaceKxVolume"], () => require("./finspaceKxVolume"));

export { FisExperimentTemplateArgs, FisExperimentTemplateState } from "./fisExperimentTemplate";
export type FisExperimentTemplate = import("./fisExperimentTemplate").FisExperimentTemplate;
export const FisExperimentTemplate: typeof import("./fisExperimentTemplate").FisExperimentTemplate = null as any;
utilities.lazyLoad(exports, ["FisExperimentTemplate"], () => require("./fisExperimentTemplate"));

export { FlowLogArgs, FlowLogState } from "./flowLog";
export type FlowLog = import("./flowLog").FlowLog;
export const FlowLog: typeof import("./flowLog").FlowLog = null as any;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));

export { FmsAdminAccountArgs, FmsAdminAccountState } from "./fmsAdminAccount";
export type FmsAdminAccount = import("./fmsAdminAccount").FmsAdminAccount;
export const FmsAdminAccount: typeof import("./fmsAdminAccount").FmsAdminAccount = null as any;
utilities.lazyLoad(exports, ["FmsAdminAccount"], () => require("./fmsAdminAccount"));

export { FmsPolicyArgs, FmsPolicyState } from "./fmsPolicy";
export type FmsPolicy = import("./fmsPolicy").FmsPolicy;
export const FmsPolicy: typeof import("./fmsPolicy").FmsPolicy = null as any;
utilities.lazyLoad(exports, ["FmsPolicy"], () => require("./fmsPolicy"));

export { FmsResourceSetArgs, FmsResourceSetState } from "./fmsResourceSet";
export type FmsResourceSet = import("./fmsResourceSet").FmsResourceSet;
export const FmsResourceSet: typeof import("./fmsResourceSet").FmsResourceSet = null as any;
utilities.lazyLoad(exports, ["FmsResourceSet"], () => require("./fmsResourceSet"));

export { FsxBackupArgs, FsxBackupState } from "./fsxBackup";
export type FsxBackup = import("./fsxBackup").FsxBackup;
export const FsxBackup: typeof import("./fsxBackup").FsxBackup = null as any;
utilities.lazyLoad(exports, ["FsxBackup"], () => require("./fsxBackup"));

export { FsxDataRepositoryAssociationArgs, FsxDataRepositoryAssociationState } from "./fsxDataRepositoryAssociation";
export type FsxDataRepositoryAssociation = import("./fsxDataRepositoryAssociation").FsxDataRepositoryAssociation;
export const FsxDataRepositoryAssociation: typeof import("./fsxDataRepositoryAssociation").FsxDataRepositoryAssociation = null as any;
utilities.lazyLoad(exports, ["FsxDataRepositoryAssociation"], () => require("./fsxDataRepositoryAssociation"));

export { FsxFileCacheArgs, FsxFileCacheState } from "./fsxFileCache";
export type FsxFileCache = import("./fsxFileCache").FsxFileCache;
export const FsxFileCache: typeof import("./fsxFileCache").FsxFileCache = null as any;
utilities.lazyLoad(exports, ["FsxFileCache"], () => require("./fsxFileCache"));

export { FsxLustreFileSystemArgs, FsxLustreFileSystemState } from "./fsxLustreFileSystem";
export type FsxLustreFileSystem = import("./fsxLustreFileSystem").FsxLustreFileSystem;
export const FsxLustreFileSystem: typeof import("./fsxLustreFileSystem").FsxLustreFileSystem = null as any;
utilities.lazyLoad(exports, ["FsxLustreFileSystem"], () => require("./fsxLustreFileSystem"));

export { FsxOntapFileSystemArgs, FsxOntapFileSystemState } from "./fsxOntapFileSystem";
export type FsxOntapFileSystem = import("./fsxOntapFileSystem").FsxOntapFileSystem;
export const FsxOntapFileSystem: typeof import("./fsxOntapFileSystem").FsxOntapFileSystem = null as any;
utilities.lazyLoad(exports, ["FsxOntapFileSystem"], () => require("./fsxOntapFileSystem"));

export { FsxOntapStorageVirtualMachineArgs, FsxOntapStorageVirtualMachineState } from "./fsxOntapStorageVirtualMachine";
export type FsxOntapStorageVirtualMachine = import("./fsxOntapStorageVirtualMachine").FsxOntapStorageVirtualMachine;
export const FsxOntapStorageVirtualMachine: typeof import("./fsxOntapStorageVirtualMachine").FsxOntapStorageVirtualMachine = null as any;
utilities.lazyLoad(exports, ["FsxOntapStorageVirtualMachine"], () => require("./fsxOntapStorageVirtualMachine"));

export { FsxOntapVolumeArgs, FsxOntapVolumeState } from "./fsxOntapVolume";
export type FsxOntapVolume = import("./fsxOntapVolume").FsxOntapVolume;
export const FsxOntapVolume: typeof import("./fsxOntapVolume").FsxOntapVolume = null as any;
utilities.lazyLoad(exports, ["FsxOntapVolume"], () => require("./fsxOntapVolume"));

export { FsxOpenzfsFileSystemArgs, FsxOpenzfsFileSystemState } from "./fsxOpenzfsFileSystem";
export type FsxOpenzfsFileSystem = import("./fsxOpenzfsFileSystem").FsxOpenzfsFileSystem;
export const FsxOpenzfsFileSystem: typeof import("./fsxOpenzfsFileSystem").FsxOpenzfsFileSystem = null as any;
utilities.lazyLoad(exports, ["FsxOpenzfsFileSystem"], () => require("./fsxOpenzfsFileSystem"));

export { FsxOpenzfsSnapshotArgs, FsxOpenzfsSnapshotState } from "./fsxOpenzfsSnapshot";
export type FsxOpenzfsSnapshot = import("./fsxOpenzfsSnapshot").FsxOpenzfsSnapshot;
export const FsxOpenzfsSnapshot: typeof import("./fsxOpenzfsSnapshot").FsxOpenzfsSnapshot = null as any;
utilities.lazyLoad(exports, ["FsxOpenzfsSnapshot"], () => require("./fsxOpenzfsSnapshot"));

export { FsxOpenzfsVolumeArgs, FsxOpenzfsVolumeState } from "./fsxOpenzfsVolume";
export type FsxOpenzfsVolume = import("./fsxOpenzfsVolume").FsxOpenzfsVolume;
export const FsxOpenzfsVolume: typeof import("./fsxOpenzfsVolume").FsxOpenzfsVolume = null as any;
utilities.lazyLoad(exports, ["FsxOpenzfsVolume"], () => require("./fsxOpenzfsVolume"));

export { FsxWindowsFileSystemArgs, FsxWindowsFileSystemState } from "./fsxWindowsFileSystem";
export type FsxWindowsFileSystem = import("./fsxWindowsFileSystem").FsxWindowsFileSystem;
export const FsxWindowsFileSystem: typeof import("./fsxWindowsFileSystem").FsxWindowsFileSystem = null as any;
utilities.lazyLoad(exports, ["FsxWindowsFileSystem"], () => require("./fsxWindowsFileSystem"));

export { GameliftAliasArgs, GameliftAliasState } from "./gameliftAlias";
export type GameliftAlias = import("./gameliftAlias").GameliftAlias;
export const GameliftAlias: typeof import("./gameliftAlias").GameliftAlias = null as any;
utilities.lazyLoad(exports, ["GameliftAlias"], () => require("./gameliftAlias"));

export { GameliftBuildArgs, GameliftBuildState } from "./gameliftBuild";
export type GameliftBuild = import("./gameliftBuild").GameliftBuild;
export const GameliftBuild: typeof import("./gameliftBuild").GameliftBuild = null as any;
utilities.lazyLoad(exports, ["GameliftBuild"], () => require("./gameliftBuild"));

export { GameliftFleetArgs, GameliftFleetState } from "./gameliftFleet";
export type GameliftFleet = import("./gameliftFleet").GameliftFleet;
export const GameliftFleet: typeof import("./gameliftFleet").GameliftFleet = null as any;
utilities.lazyLoad(exports, ["GameliftFleet"], () => require("./gameliftFleet"));

export { GameliftGameServerGroupArgs, GameliftGameServerGroupState } from "./gameliftGameServerGroup";
export type GameliftGameServerGroup = import("./gameliftGameServerGroup").GameliftGameServerGroup;
export const GameliftGameServerGroup: typeof import("./gameliftGameServerGroup").GameliftGameServerGroup = null as any;
utilities.lazyLoad(exports, ["GameliftGameServerGroup"], () => require("./gameliftGameServerGroup"));

export { GameliftGameSessionQueueArgs, GameliftGameSessionQueueState } from "./gameliftGameSessionQueue";
export type GameliftGameSessionQueue = import("./gameliftGameSessionQueue").GameliftGameSessionQueue;
export const GameliftGameSessionQueue: typeof import("./gameliftGameSessionQueue").GameliftGameSessionQueue = null as any;
utilities.lazyLoad(exports, ["GameliftGameSessionQueue"], () => require("./gameliftGameSessionQueue"));

export { GameliftScriptArgs, GameliftScriptState } from "./gameliftScript";
export type GameliftScript = import("./gameliftScript").GameliftScript;
export const GameliftScript: typeof import("./gameliftScript").GameliftScript = null as any;
utilities.lazyLoad(exports, ["GameliftScript"], () => require("./gameliftScript"));

export { GetAcmCertificateArgs, GetAcmCertificateResult, GetAcmCertificateOutputArgs } from "./getAcmCertificate";
export const getAcmCertificate: typeof import("./getAcmCertificate").getAcmCertificate = null as any;
export const getAcmCertificateOutput: typeof import("./getAcmCertificate").getAcmCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getAcmCertificate","getAcmCertificateOutput"], () => require("./getAcmCertificate"));

export { GetAcmpcaCertificateArgs, GetAcmpcaCertificateResult, GetAcmpcaCertificateOutputArgs } from "./getAcmpcaCertificate";
export const getAcmpcaCertificate: typeof import("./getAcmpcaCertificate").getAcmpcaCertificate = null as any;
export const getAcmpcaCertificateOutput: typeof import("./getAcmpcaCertificate").getAcmpcaCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getAcmpcaCertificate","getAcmpcaCertificateOutput"], () => require("./getAcmpcaCertificate"));

export { GetAcmpcaCertificateAuthorityArgs, GetAcmpcaCertificateAuthorityResult, GetAcmpcaCertificateAuthorityOutputArgs } from "./getAcmpcaCertificateAuthority";
export const getAcmpcaCertificateAuthority: typeof import("./getAcmpcaCertificateAuthority").getAcmpcaCertificateAuthority = null as any;
export const getAcmpcaCertificateAuthorityOutput: typeof import("./getAcmpcaCertificateAuthority").getAcmpcaCertificateAuthorityOutput = null as any;
utilities.lazyLoad(exports, ["getAcmpcaCertificateAuthority","getAcmpcaCertificateAuthorityOutput"], () => require("./getAcmpcaCertificateAuthority"));

export { GetAlbArgs, GetAlbResult, GetAlbOutputArgs } from "./getAlb";
export const getAlb: typeof import("./getAlb").getAlb = null as any;
export const getAlbOutput: typeof import("./getAlb").getAlbOutput = null as any;
utilities.lazyLoad(exports, ["getAlb","getAlbOutput"], () => require("./getAlb"));

export { GetAlbListenerArgs, GetAlbListenerResult, GetAlbListenerOutputArgs } from "./getAlbListener";
export const getAlbListener: typeof import("./getAlbListener").getAlbListener = null as any;
export const getAlbListenerOutput: typeof import("./getAlbListener").getAlbListenerOutput = null as any;
utilities.lazyLoad(exports, ["getAlbListener","getAlbListenerOutput"], () => require("./getAlbListener"));

export { GetAlbTargetGroupArgs, GetAlbTargetGroupResult, GetAlbTargetGroupOutputArgs } from "./getAlbTargetGroup";
export const getAlbTargetGroup: typeof import("./getAlbTargetGroup").getAlbTargetGroup = null as any;
export const getAlbTargetGroupOutput: typeof import("./getAlbTargetGroup").getAlbTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAlbTargetGroup","getAlbTargetGroupOutput"], () => require("./getAlbTargetGroup"));

export { GetAmiArgs, GetAmiResult, GetAmiOutputArgs } from "./getAmi";
export const getAmi: typeof import("./getAmi").getAmi = null as any;
export const getAmiOutput: typeof import("./getAmi").getAmiOutput = null as any;
utilities.lazyLoad(exports, ["getAmi","getAmiOutput"], () => require("./getAmi"));

export { GetAmiIdsArgs, GetAmiIdsResult, GetAmiIdsOutputArgs } from "./getAmiIds";
export const getAmiIds: typeof import("./getAmiIds").getAmiIds = null as any;
export const getAmiIdsOutput: typeof import("./getAmiIds").getAmiIdsOutput = null as any;
utilities.lazyLoad(exports, ["getAmiIds","getAmiIdsOutput"], () => require("./getAmiIds"));

export { GetApiGatewayApiKeyArgs, GetApiGatewayApiKeyResult, GetApiGatewayApiKeyOutputArgs } from "./getApiGatewayApiKey";
export const getApiGatewayApiKey: typeof import("./getApiGatewayApiKey").getApiGatewayApiKey = null as any;
export const getApiGatewayApiKeyOutput: typeof import("./getApiGatewayApiKey").getApiGatewayApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayApiKey","getApiGatewayApiKeyOutput"], () => require("./getApiGatewayApiKey"));

export { GetApiGatewayAuthorizerArgs, GetApiGatewayAuthorizerResult, GetApiGatewayAuthorizerOutputArgs } from "./getApiGatewayAuthorizer";
export const getApiGatewayAuthorizer: typeof import("./getApiGatewayAuthorizer").getApiGatewayAuthorizer = null as any;
export const getApiGatewayAuthorizerOutput: typeof import("./getApiGatewayAuthorizer").getApiGatewayAuthorizerOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayAuthorizer","getApiGatewayAuthorizerOutput"], () => require("./getApiGatewayAuthorizer"));

export { GetApiGatewayAuthorizersArgs, GetApiGatewayAuthorizersResult, GetApiGatewayAuthorizersOutputArgs } from "./getApiGatewayAuthorizers";
export const getApiGatewayAuthorizers: typeof import("./getApiGatewayAuthorizers").getApiGatewayAuthorizers = null as any;
export const getApiGatewayAuthorizersOutput: typeof import("./getApiGatewayAuthorizers").getApiGatewayAuthorizersOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayAuthorizers","getApiGatewayAuthorizersOutput"], () => require("./getApiGatewayAuthorizers"));

export { GetApiGatewayDomainNameArgs, GetApiGatewayDomainNameResult, GetApiGatewayDomainNameOutputArgs } from "./getApiGatewayDomainName";
export const getApiGatewayDomainName: typeof import("./getApiGatewayDomainName").getApiGatewayDomainName = null as any;
export const getApiGatewayDomainNameOutput: typeof import("./getApiGatewayDomainName").getApiGatewayDomainNameOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayDomainName","getApiGatewayDomainNameOutput"], () => require("./getApiGatewayDomainName"));

export { GetApiGatewayExportArgs, GetApiGatewayExportResult, GetApiGatewayExportOutputArgs } from "./getApiGatewayExport";
export const getApiGatewayExport: typeof import("./getApiGatewayExport").getApiGatewayExport = null as any;
export const getApiGatewayExportOutput: typeof import("./getApiGatewayExport").getApiGatewayExportOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayExport","getApiGatewayExportOutput"], () => require("./getApiGatewayExport"));

export { GetApiGatewayResourceArgs, GetApiGatewayResourceResult, GetApiGatewayResourceOutputArgs } from "./getApiGatewayResource";
export const getApiGatewayResource: typeof import("./getApiGatewayResource").getApiGatewayResource = null as any;
export const getApiGatewayResourceOutput: typeof import("./getApiGatewayResource").getApiGatewayResourceOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayResource","getApiGatewayResourceOutput"], () => require("./getApiGatewayResource"));

export { GetApiGatewayRestApiArgs, GetApiGatewayRestApiResult, GetApiGatewayRestApiOutputArgs } from "./getApiGatewayRestApi";
export const getApiGatewayRestApi: typeof import("./getApiGatewayRestApi").getApiGatewayRestApi = null as any;
export const getApiGatewayRestApiOutput: typeof import("./getApiGatewayRestApi").getApiGatewayRestApiOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayRestApi","getApiGatewayRestApiOutput"], () => require("./getApiGatewayRestApi"));

export { GetApiGatewaySdkArgs, GetApiGatewaySdkResult, GetApiGatewaySdkOutputArgs } from "./getApiGatewaySdk";
export const getApiGatewaySdk: typeof import("./getApiGatewaySdk").getApiGatewaySdk = null as any;
export const getApiGatewaySdkOutput: typeof import("./getApiGatewaySdk").getApiGatewaySdkOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewaySdk","getApiGatewaySdkOutput"], () => require("./getApiGatewaySdk"));

export { GetApiGatewayVpcLinkArgs, GetApiGatewayVpcLinkResult, GetApiGatewayVpcLinkOutputArgs } from "./getApiGatewayVpcLink";
export const getApiGatewayVpcLink: typeof import("./getApiGatewayVpcLink").getApiGatewayVpcLink = null as any;
export const getApiGatewayVpcLinkOutput: typeof import("./getApiGatewayVpcLink").getApiGatewayVpcLinkOutput = null as any;
utilities.lazyLoad(exports, ["getApiGatewayVpcLink","getApiGatewayVpcLinkOutput"], () => require("./getApiGatewayVpcLink"));

export { GetApigatewayv2ApiArgs, GetApigatewayv2ApiResult, GetApigatewayv2ApiOutputArgs } from "./getApigatewayv2Api";
export const getApigatewayv2Api: typeof import("./getApigatewayv2Api").getApigatewayv2Api = null as any;
export const getApigatewayv2ApiOutput: typeof import("./getApigatewayv2Api").getApigatewayv2ApiOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Api","getApigatewayv2ApiOutput"], () => require("./getApigatewayv2Api"));

export { GetApigatewayv2ApisArgs, GetApigatewayv2ApisResult, GetApigatewayv2ApisOutputArgs } from "./getApigatewayv2Apis";
export const getApigatewayv2Apis: typeof import("./getApigatewayv2Apis").getApigatewayv2Apis = null as any;
export const getApigatewayv2ApisOutput: typeof import("./getApigatewayv2Apis").getApigatewayv2ApisOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Apis","getApigatewayv2ApisOutput"], () => require("./getApigatewayv2Apis"));

export { GetApigatewayv2ExportArgs, GetApigatewayv2ExportResult, GetApigatewayv2ExportOutputArgs } from "./getApigatewayv2Export";
export const getApigatewayv2Export: typeof import("./getApigatewayv2Export").getApigatewayv2Export = null as any;
export const getApigatewayv2ExportOutput: typeof import("./getApigatewayv2Export").getApigatewayv2ExportOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2Export","getApigatewayv2ExportOutput"], () => require("./getApigatewayv2Export"));

export { GetApigatewayv2VpcLinkArgs, GetApigatewayv2VpcLinkResult, GetApigatewayv2VpcLinkOutputArgs } from "./getApigatewayv2VpcLink";
export const getApigatewayv2VpcLink: typeof import("./getApigatewayv2VpcLink").getApigatewayv2VpcLink = null as any;
export const getApigatewayv2VpcLinkOutput: typeof import("./getApigatewayv2VpcLink").getApigatewayv2VpcLinkOutput = null as any;
utilities.lazyLoad(exports, ["getApigatewayv2VpcLink","getApigatewayv2VpcLinkOutput"], () => require("./getApigatewayv2VpcLink"));

export { GetAppconfigConfigurationProfileArgs, GetAppconfigConfigurationProfileResult, GetAppconfigConfigurationProfileOutputArgs } from "./getAppconfigConfigurationProfile";
export const getAppconfigConfigurationProfile: typeof import("./getAppconfigConfigurationProfile").getAppconfigConfigurationProfile = null as any;
export const getAppconfigConfigurationProfileOutput: typeof import("./getAppconfigConfigurationProfile").getAppconfigConfigurationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigConfigurationProfile","getAppconfigConfigurationProfileOutput"], () => require("./getAppconfigConfigurationProfile"));

export { GetAppconfigConfigurationProfilesArgs, GetAppconfigConfigurationProfilesResult, GetAppconfigConfigurationProfilesOutputArgs } from "./getAppconfigConfigurationProfiles";
export const getAppconfigConfigurationProfiles: typeof import("./getAppconfigConfigurationProfiles").getAppconfigConfigurationProfiles = null as any;
export const getAppconfigConfigurationProfilesOutput: typeof import("./getAppconfigConfigurationProfiles").getAppconfigConfigurationProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigConfigurationProfiles","getAppconfigConfigurationProfilesOutput"], () => require("./getAppconfigConfigurationProfiles"));

export { GetAppconfigEnvironmentArgs, GetAppconfigEnvironmentResult, GetAppconfigEnvironmentOutputArgs } from "./getAppconfigEnvironment";
export const getAppconfigEnvironment: typeof import("./getAppconfigEnvironment").getAppconfigEnvironment = null as any;
export const getAppconfigEnvironmentOutput: typeof import("./getAppconfigEnvironment").getAppconfigEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigEnvironment","getAppconfigEnvironmentOutput"], () => require("./getAppconfigEnvironment"));

export { GetAppconfigEnvironmentsArgs, GetAppconfigEnvironmentsResult, GetAppconfigEnvironmentsOutputArgs } from "./getAppconfigEnvironments";
export const getAppconfigEnvironments: typeof import("./getAppconfigEnvironments").getAppconfigEnvironments = null as any;
export const getAppconfigEnvironmentsOutput: typeof import("./getAppconfigEnvironments").getAppconfigEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAppconfigEnvironments","getAppconfigEnvironmentsOutput"], () => require("./getAppconfigEnvironments"));

export { GetAppintegrationsEventIntegrationArgs, GetAppintegrationsEventIntegrationResult, GetAppintegrationsEventIntegrationOutputArgs } from "./getAppintegrationsEventIntegration";
export const getAppintegrationsEventIntegration: typeof import("./getAppintegrationsEventIntegration").getAppintegrationsEventIntegration = null as any;
export const getAppintegrationsEventIntegrationOutput: typeof import("./getAppintegrationsEventIntegration").getAppintegrationsEventIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getAppintegrationsEventIntegration","getAppintegrationsEventIntegrationOutput"], () => require("./getAppintegrationsEventIntegration"));

export { GetAppmeshGatewayRouteArgs, GetAppmeshGatewayRouteResult, GetAppmeshGatewayRouteOutputArgs } from "./getAppmeshGatewayRoute";
export const getAppmeshGatewayRoute: typeof import("./getAppmeshGatewayRoute").getAppmeshGatewayRoute = null as any;
export const getAppmeshGatewayRouteOutput: typeof import("./getAppmeshGatewayRoute").getAppmeshGatewayRouteOutput = null as any;
utilities.lazyLoad(exports, ["getAppmeshGatewayRoute","getAppmeshGatewayRouteOutput"], () => require("./getAppmeshGatewayRoute"));

export { GetAppmeshMeshArgs, GetAppmeshMeshResult, GetAppmeshMeshOutputArgs } from "./getAppmeshMesh";
export const getAppmeshMesh: typeof import("./getAppmeshMesh").getAppmeshMesh = null as any;
export const getAppmeshMeshOutput: typeof import("./getAppmeshMesh").getAppmeshMeshOutput = null as any;
utilities.lazyLoad(exports, ["getAppmeshMesh","getAppmeshMeshOutput"], () => require("./getAppmeshMesh"));

export { GetAppmeshRouteArgs, GetAppmeshRouteResult, GetAppmeshRouteOutputArgs } from "./getAppmeshRoute";
export const getAppmeshRoute: typeof import("./getAppmeshRoute").getAppmeshRoute = null as any;
export const getAppmeshRouteOutput: typeof import("./getAppmeshRoute").getAppmeshRouteOutput = null as any;
utilities.lazyLoad(exports, ["getAppmeshRoute","getAppmeshRouteOutput"], () => require("./getAppmeshRoute"));

export { GetAppmeshVirtualGatewayArgs, GetAppmeshVirtualGatewayResult, GetAppmeshVirtualGatewayOutputArgs } from "./getAppmeshVirtualGateway";
export const getAppmeshVirtualGateway: typeof import("./getAppmeshVirtualGateway").getAppmeshVirtualGateway = null as any;
export const getAppmeshVirtualGatewayOutput: typeof import("./getAppmeshVirtualGateway").getAppmeshVirtualGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getAppmeshVirtualGateway","getAppmeshVirtualGatewayOutput"], () => require("./getAppmeshVirtualGateway"));

export { GetAppmeshVirtualNodeArgs, GetAppmeshVirtualNodeResult, GetAppmeshVirtualNodeOutputArgs } from "./getAppmeshVirtualNode";
export const getAppmeshVirtualNode: typeof import("./getAppmeshVirtualNode").getAppmeshVirtualNode = null as any;
export const getAppmeshVirtualNodeOutput: typeof import("./getAppmeshVirtualNode").getAppmeshVirtualNodeOutput = null as any;
utilities.lazyLoad(exports, ["getAppmeshVirtualNode","getAppmeshVirtualNodeOutput"], () => require("./getAppmeshVirtualNode"));

export { GetAppmeshVirtualRouterArgs, GetAppmeshVirtualRouterResult, GetAppmeshVirtualRouterOutputArgs } from "./getAppmeshVirtualRouter";
export const getAppmeshVirtualRouter: typeof import("./getAppmeshVirtualRouter").getAppmeshVirtualRouter = null as any;
export const getAppmeshVirtualRouterOutput: typeof import("./getAppmeshVirtualRouter").getAppmeshVirtualRouterOutput = null as any;
utilities.lazyLoad(exports, ["getAppmeshVirtualRouter","getAppmeshVirtualRouterOutput"], () => require("./getAppmeshVirtualRouter"));

export { GetAppmeshVirtualServiceArgs, GetAppmeshVirtualServiceResult, GetAppmeshVirtualServiceOutputArgs } from "./getAppmeshVirtualService";
export const getAppmeshVirtualService: typeof import("./getAppmeshVirtualService").getAppmeshVirtualService = null as any;
export const getAppmeshVirtualServiceOutput: typeof import("./getAppmeshVirtualService").getAppmeshVirtualServiceOutput = null as any;
utilities.lazyLoad(exports, ["getAppmeshVirtualService","getAppmeshVirtualServiceOutput"], () => require("./getAppmeshVirtualService"));

export { GetApprunnerHostedZoneIdArgs, GetApprunnerHostedZoneIdResult, GetApprunnerHostedZoneIdOutputArgs } from "./getApprunnerHostedZoneId";
export const getApprunnerHostedZoneId: typeof import("./getApprunnerHostedZoneId").getApprunnerHostedZoneId = null as any;
export const getApprunnerHostedZoneIdOutput: typeof import("./getApprunnerHostedZoneId").getApprunnerHostedZoneIdOutput = null as any;
utilities.lazyLoad(exports, ["getApprunnerHostedZoneId","getApprunnerHostedZoneIdOutput"], () => require("./getApprunnerHostedZoneId"));

export { GetAppstreamImageArgs, GetAppstreamImageResult, GetAppstreamImageOutputArgs } from "./getAppstreamImage";
export const getAppstreamImage: typeof import("./getAppstreamImage").getAppstreamImage = null as any;
export const getAppstreamImageOutput: typeof import("./getAppstreamImage").getAppstreamImageOutput = null as any;
utilities.lazyLoad(exports, ["getAppstreamImage","getAppstreamImageOutput"], () => require("./getAppstreamImage"));

export { GetArnArgs, GetArnResult, GetArnOutputArgs } from "./getArn";
export const getArn: typeof import("./getArn").getArn = null as any;
export const getArnOutput: typeof import("./getArn").getArnOutput = null as any;
utilities.lazyLoad(exports, ["getArn","getArnOutput"], () => require("./getArn"));

export { GetAthenaNamedQueryArgs, GetAthenaNamedQueryResult, GetAthenaNamedQueryOutputArgs } from "./getAthenaNamedQuery";
export const getAthenaNamedQuery: typeof import("./getAthenaNamedQuery").getAthenaNamedQuery = null as any;
export const getAthenaNamedQueryOutput: typeof import("./getAthenaNamedQuery").getAthenaNamedQueryOutput = null as any;
utilities.lazyLoad(exports, ["getAthenaNamedQuery","getAthenaNamedQueryOutput"], () => require("./getAthenaNamedQuery"));

export { GetAuditmanagerControlArgs, GetAuditmanagerControlResult, GetAuditmanagerControlOutputArgs } from "./getAuditmanagerControl";
export const getAuditmanagerControl: typeof import("./getAuditmanagerControl").getAuditmanagerControl = null as any;
export const getAuditmanagerControlOutput: typeof import("./getAuditmanagerControl").getAuditmanagerControlOutput = null as any;
utilities.lazyLoad(exports, ["getAuditmanagerControl","getAuditmanagerControlOutput"], () => require("./getAuditmanagerControl"));

export { GetAuditmanagerFrameworkArgs, GetAuditmanagerFrameworkResult, GetAuditmanagerFrameworkOutputArgs } from "./getAuditmanagerFramework";
export const getAuditmanagerFramework: typeof import("./getAuditmanagerFramework").getAuditmanagerFramework = null as any;
export const getAuditmanagerFrameworkOutput: typeof import("./getAuditmanagerFramework").getAuditmanagerFrameworkOutput = null as any;
utilities.lazyLoad(exports, ["getAuditmanagerFramework","getAuditmanagerFrameworkOutput"], () => require("./getAuditmanagerFramework"));

export { GetAutoscalingGroupArgs, GetAutoscalingGroupResult, GetAutoscalingGroupOutputArgs } from "./getAutoscalingGroup";
export const getAutoscalingGroup: typeof import("./getAutoscalingGroup").getAutoscalingGroup = null as any;
export const getAutoscalingGroupOutput: typeof import("./getAutoscalingGroup").getAutoscalingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingGroup","getAutoscalingGroupOutput"], () => require("./getAutoscalingGroup"));

export { GetAutoscalingGroupsArgs, GetAutoscalingGroupsResult, GetAutoscalingGroupsOutputArgs } from "./getAutoscalingGroups";
export const getAutoscalingGroups: typeof import("./getAutoscalingGroups").getAutoscalingGroups = null as any;
export const getAutoscalingGroupsOutput: typeof import("./getAutoscalingGroups").getAutoscalingGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAutoscalingGroups","getAutoscalingGroupsOutput"], () => require("./getAutoscalingGroups"));

export { GetAvailabilityZoneArgs, GetAvailabilityZoneResult, GetAvailabilityZoneOutputArgs } from "./getAvailabilityZone";
export const getAvailabilityZone: typeof import("./getAvailabilityZone").getAvailabilityZone = null as any;
export const getAvailabilityZoneOutput: typeof import("./getAvailabilityZone").getAvailabilityZoneOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZone","getAvailabilityZoneOutput"], () => require("./getAvailabilityZone"));

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetBackupFrameworkArgs, GetBackupFrameworkResult, GetBackupFrameworkOutputArgs } from "./getBackupFramework";
export const getBackupFramework: typeof import("./getBackupFramework").getBackupFramework = null as any;
export const getBackupFrameworkOutput: typeof import("./getBackupFramework").getBackupFrameworkOutput = null as any;
utilities.lazyLoad(exports, ["getBackupFramework","getBackupFrameworkOutput"], () => require("./getBackupFramework"));

export { GetBackupPlanArgs, GetBackupPlanResult, GetBackupPlanOutputArgs } from "./getBackupPlan";
export const getBackupPlan: typeof import("./getBackupPlan").getBackupPlan = null as any;
export const getBackupPlanOutput: typeof import("./getBackupPlan").getBackupPlanOutput = null as any;
utilities.lazyLoad(exports, ["getBackupPlan","getBackupPlanOutput"], () => require("./getBackupPlan"));

export { GetBackupReportPlanArgs, GetBackupReportPlanResult, GetBackupReportPlanOutputArgs } from "./getBackupReportPlan";
export const getBackupReportPlan: typeof import("./getBackupReportPlan").getBackupReportPlan = null as any;
export const getBackupReportPlanOutput: typeof import("./getBackupReportPlan").getBackupReportPlanOutput = null as any;
utilities.lazyLoad(exports, ["getBackupReportPlan","getBackupReportPlanOutput"], () => require("./getBackupReportPlan"));

export { GetBackupSelectionArgs, GetBackupSelectionResult, GetBackupSelectionOutputArgs } from "./getBackupSelection";
export const getBackupSelection: typeof import("./getBackupSelection").getBackupSelection = null as any;
export const getBackupSelectionOutput: typeof import("./getBackupSelection").getBackupSelectionOutput = null as any;
utilities.lazyLoad(exports, ["getBackupSelection","getBackupSelectionOutput"], () => require("./getBackupSelection"));

export { GetBackupVaultArgs, GetBackupVaultResult, GetBackupVaultOutputArgs } from "./getBackupVault";
export const getBackupVault: typeof import("./getBackupVault").getBackupVault = null as any;
export const getBackupVaultOutput: typeof import("./getBackupVault").getBackupVaultOutput = null as any;
utilities.lazyLoad(exports, ["getBackupVault","getBackupVaultOutput"], () => require("./getBackupVault"));

export { GetBatchComputeEnvironmentArgs, GetBatchComputeEnvironmentResult, GetBatchComputeEnvironmentOutputArgs } from "./getBatchComputeEnvironment";
export const getBatchComputeEnvironment: typeof import("./getBatchComputeEnvironment").getBatchComputeEnvironment = null as any;
export const getBatchComputeEnvironmentOutput: typeof import("./getBatchComputeEnvironment").getBatchComputeEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getBatchComputeEnvironment","getBatchComputeEnvironmentOutput"], () => require("./getBatchComputeEnvironment"));

export { GetBatchJobDefinitionArgs, GetBatchJobDefinitionResult, GetBatchJobDefinitionOutputArgs } from "./getBatchJobDefinition";
export const getBatchJobDefinition: typeof import("./getBatchJobDefinition").getBatchJobDefinition = null as any;
export const getBatchJobDefinitionOutput: typeof import("./getBatchJobDefinition").getBatchJobDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getBatchJobDefinition","getBatchJobDefinitionOutput"], () => require("./getBatchJobDefinition"));

export { GetBatchJobQueueArgs, GetBatchJobQueueResult, GetBatchJobQueueOutputArgs } from "./getBatchJobQueue";
export const getBatchJobQueue: typeof import("./getBatchJobQueue").getBatchJobQueue = null as any;
export const getBatchJobQueueOutput: typeof import("./getBatchJobQueue").getBatchJobQueueOutput = null as any;
utilities.lazyLoad(exports, ["getBatchJobQueue","getBatchJobQueueOutput"], () => require("./getBatchJobQueue"));

export { GetBatchSchedulingPolicyArgs, GetBatchSchedulingPolicyResult, GetBatchSchedulingPolicyOutputArgs } from "./getBatchSchedulingPolicy";
export const getBatchSchedulingPolicy: typeof import("./getBatchSchedulingPolicy").getBatchSchedulingPolicy = null as any;
export const getBatchSchedulingPolicyOutput: typeof import("./getBatchSchedulingPolicy").getBatchSchedulingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBatchSchedulingPolicy","getBatchSchedulingPolicyOutput"], () => require("./getBatchSchedulingPolicy"));

export { GetBedrockCustomModelArgs, GetBedrockCustomModelResult, GetBedrockCustomModelOutputArgs } from "./getBedrockCustomModel";
export const getBedrockCustomModel: typeof import("./getBedrockCustomModel").getBedrockCustomModel = null as any;
export const getBedrockCustomModelOutput: typeof import("./getBedrockCustomModel").getBedrockCustomModelOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockCustomModel","getBedrockCustomModelOutput"], () => require("./getBedrockCustomModel"));

export { GetBedrockCustomModelsResult } from "./getBedrockCustomModels";
export const getBedrockCustomModels: typeof import("./getBedrockCustomModels").getBedrockCustomModels = null as any;
export const getBedrockCustomModelsOutput: typeof import("./getBedrockCustomModels").getBedrockCustomModelsOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockCustomModels","getBedrockCustomModelsOutput"], () => require("./getBedrockCustomModels"));

export { GetBedrockFoundationModelArgs, GetBedrockFoundationModelResult, GetBedrockFoundationModelOutputArgs } from "./getBedrockFoundationModel";
export const getBedrockFoundationModel: typeof import("./getBedrockFoundationModel").getBedrockFoundationModel = null as any;
export const getBedrockFoundationModelOutput: typeof import("./getBedrockFoundationModel").getBedrockFoundationModelOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockFoundationModel","getBedrockFoundationModelOutput"], () => require("./getBedrockFoundationModel"));

export { GetBedrockFoundationModelsArgs, GetBedrockFoundationModelsResult, GetBedrockFoundationModelsOutputArgs } from "./getBedrockFoundationModels";
export const getBedrockFoundationModels: typeof import("./getBedrockFoundationModels").getBedrockFoundationModels = null as any;
export const getBedrockFoundationModelsOutput: typeof import("./getBedrockFoundationModels").getBedrockFoundationModelsOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockFoundationModels","getBedrockFoundationModelsOutput"], () => require("./getBedrockFoundationModels"));

export { GetBedrockagentAgentVersionsArgs, GetBedrockagentAgentVersionsResult, GetBedrockagentAgentVersionsOutputArgs } from "./getBedrockagentAgentVersions";
export const getBedrockagentAgentVersions: typeof import("./getBedrockagentAgentVersions").getBedrockagentAgentVersions = null as any;
export const getBedrockagentAgentVersionsOutput: typeof import("./getBedrockagentAgentVersions").getBedrockagentAgentVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getBedrockagentAgentVersions","getBedrockagentAgentVersionsOutput"], () => require("./getBedrockagentAgentVersions"));

export { GetBillingServiceAccountArgs, GetBillingServiceAccountResult, GetBillingServiceAccountOutputArgs } from "./getBillingServiceAccount";
export const getBillingServiceAccount: typeof import("./getBillingServiceAccount").getBillingServiceAccount = null as any;
export const getBillingServiceAccountOutput: typeof import("./getBillingServiceAccount").getBillingServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getBillingServiceAccount","getBillingServiceAccountOutput"], () => require("./getBillingServiceAccount"));

export { GetBudgetsBudgetArgs, GetBudgetsBudgetResult, GetBudgetsBudgetOutputArgs } from "./getBudgetsBudget";
export const getBudgetsBudget: typeof import("./getBudgetsBudget").getBudgetsBudget = null as any;
export const getBudgetsBudgetOutput: typeof import("./getBudgetsBudget").getBudgetsBudgetOutput = null as any;
utilities.lazyLoad(exports, ["getBudgetsBudget","getBudgetsBudgetOutput"], () => require("./getBudgetsBudget"));

export { GetCallerIdentityArgs, GetCallerIdentityResult, GetCallerIdentityOutputArgs } from "./getCallerIdentity";
export const getCallerIdentity: typeof import("./getCallerIdentity").getCallerIdentity = null as any;
export const getCallerIdentityOutput: typeof import("./getCallerIdentity").getCallerIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getCallerIdentity","getCallerIdentityOutput"], () => require("./getCallerIdentity"));

export { GetCanonicalUserIdArgs, GetCanonicalUserIdResult, GetCanonicalUserIdOutputArgs } from "./getCanonicalUserId";
export const getCanonicalUserId: typeof import("./getCanonicalUserId").getCanonicalUserId = null as any;
export const getCanonicalUserIdOutput: typeof import("./getCanonicalUserId").getCanonicalUserIdOutput = null as any;
utilities.lazyLoad(exports, ["getCanonicalUserId","getCanonicalUserIdOutput"], () => require("./getCanonicalUserId"));

export { GetCeCostCategoryArgs, GetCeCostCategoryResult, GetCeCostCategoryOutputArgs } from "./getCeCostCategory";
export const getCeCostCategory: typeof import("./getCeCostCategory").getCeCostCategory = null as any;
export const getCeCostCategoryOutput: typeof import("./getCeCostCategory").getCeCostCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getCeCostCategory","getCeCostCategoryOutput"], () => require("./getCeCostCategory"));

export { GetCeTagsArgs, GetCeTagsResult, GetCeTagsOutputArgs } from "./getCeTags";
export const getCeTags: typeof import("./getCeTags").getCeTags = null as any;
export const getCeTagsOutput: typeof import("./getCeTags").getCeTagsOutput = null as any;
utilities.lazyLoad(exports, ["getCeTags","getCeTagsOutput"], () => require("./getCeTags"));

export { GetChatbotSlackWorkspaceArgs, GetChatbotSlackWorkspaceResult, GetChatbotSlackWorkspaceOutputArgs } from "./getChatbotSlackWorkspace";
export const getChatbotSlackWorkspace: typeof import("./getChatbotSlackWorkspace").getChatbotSlackWorkspace = null as any;
export const getChatbotSlackWorkspaceOutput: typeof import("./getChatbotSlackWorkspace").getChatbotSlackWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getChatbotSlackWorkspace","getChatbotSlackWorkspaceOutput"], () => require("./getChatbotSlackWorkspace"));

export { GetCloudcontrolapiResourceArgs, GetCloudcontrolapiResourceResult, GetCloudcontrolapiResourceOutputArgs } from "./getCloudcontrolapiResource";
export const getCloudcontrolapiResource: typeof import("./getCloudcontrolapiResource").getCloudcontrolapiResource = null as any;
export const getCloudcontrolapiResourceOutput: typeof import("./getCloudcontrolapiResource").getCloudcontrolapiResourceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudcontrolapiResource","getCloudcontrolapiResourceOutput"], () => require("./getCloudcontrolapiResource"));

export { GetCloudformationExportArgs, GetCloudformationExportResult, GetCloudformationExportOutputArgs } from "./getCloudformationExport";
export const getCloudformationExport: typeof import("./getCloudformationExport").getCloudformationExport = null as any;
export const getCloudformationExportOutput: typeof import("./getCloudformationExport").getCloudformationExportOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationExport","getCloudformationExportOutput"], () => require("./getCloudformationExport"));

export { GetCloudformationStackArgs, GetCloudformationStackResult, GetCloudformationStackOutputArgs } from "./getCloudformationStack";
export const getCloudformationStack: typeof import("./getCloudformationStack").getCloudformationStack = null as any;
export const getCloudformationStackOutput: typeof import("./getCloudformationStack").getCloudformationStackOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationStack","getCloudformationStackOutput"], () => require("./getCloudformationStack"));

export { GetCloudformationTypeArgs, GetCloudformationTypeResult, GetCloudformationTypeOutputArgs } from "./getCloudformationType";
export const getCloudformationType: typeof import("./getCloudformationType").getCloudformationType = null as any;
export const getCloudformationTypeOutput: typeof import("./getCloudformationType").getCloudformationTypeOutput = null as any;
utilities.lazyLoad(exports, ["getCloudformationType","getCloudformationTypeOutput"], () => require("./getCloudformationType"));

export { GetCloudfrontCachePolicyArgs, GetCloudfrontCachePolicyResult, GetCloudfrontCachePolicyOutputArgs } from "./getCloudfrontCachePolicy";
export const getCloudfrontCachePolicy: typeof import("./getCloudfrontCachePolicy").getCloudfrontCachePolicy = null as any;
export const getCloudfrontCachePolicyOutput: typeof import("./getCloudfrontCachePolicy").getCloudfrontCachePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontCachePolicy","getCloudfrontCachePolicyOutput"], () => require("./getCloudfrontCachePolicy"));

export { GetCloudfrontDistributionArgs, GetCloudfrontDistributionResult, GetCloudfrontDistributionOutputArgs } from "./getCloudfrontDistribution";
export const getCloudfrontDistribution: typeof import("./getCloudfrontDistribution").getCloudfrontDistribution = null as any;
export const getCloudfrontDistributionOutput: typeof import("./getCloudfrontDistribution").getCloudfrontDistributionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontDistribution","getCloudfrontDistributionOutput"], () => require("./getCloudfrontDistribution"));

export { GetCloudfrontFunctionArgs, GetCloudfrontFunctionResult, GetCloudfrontFunctionOutputArgs } from "./getCloudfrontFunction";
export const getCloudfrontFunction: typeof import("./getCloudfrontFunction").getCloudfrontFunction = null as any;
export const getCloudfrontFunctionOutput: typeof import("./getCloudfrontFunction").getCloudfrontFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontFunction","getCloudfrontFunctionOutput"], () => require("./getCloudfrontFunction"));

export { GetCloudfrontLogDeliveryCanonicalUserIdArgs, GetCloudfrontLogDeliveryCanonicalUserIdResult, GetCloudfrontLogDeliveryCanonicalUserIdOutputArgs } from "./getCloudfrontLogDeliveryCanonicalUserId";
export const getCloudfrontLogDeliveryCanonicalUserId: typeof import("./getCloudfrontLogDeliveryCanonicalUserId").getCloudfrontLogDeliveryCanonicalUserId = null as any;
export const getCloudfrontLogDeliveryCanonicalUserIdOutput: typeof import("./getCloudfrontLogDeliveryCanonicalUserId").getCloudfrontLogDeliveryCanonicalUserIdOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontLogDeliveryCanonicalUserId","getCloudfrontLogDeliveryCanonicalUserIdOutput"], () => require("./getCloudfrontLogDeliveryCanonicalUserId"));

export { GetCloudfrontOriginAccessControlArgs, GetCloudfrontOriginAccessControlResult, GetCloudfrontOriginAccessControlOutputArgs } from "./getCloudfrontOriginAccessControl";
export const getCloudfrontOriginAccessControl: typeof import("./getCloudfrontOriginAccessControl").getCloudfrontOriginAccessControl = null as any;
export const getCloudfrontOriginAccessControlOutput: typeof import("./getCloudfrontOriginAccessControl").getCloudfrontOriginAccessControlOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginAccessControl","getCloudfrontOriginAccessControlOutput"], () => require("./getCloudfrontOriginAccessControl"));

export { GetCloudfrontOriginAccessIdentitiesArgs, GetCloudfrontOriginAccessIdentitiesResult, GetCloudfrontOriginAccessIdentitiesOutputArgs } from "./getCloudfrontOriginAccessIdentities";
export const getCloudfrontOriginAccessIdentities: typeof import("./getCloudfrontOriginAccessIdentities").getCloudfrontOriginAccessIdentities = null as any;
export const getCloudfrontOriginAccessIdentitiesOutput: typeof import("./getCloudfrontOriginAccessIdentities").getCloudfrontOriginAccessIdentitiesOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginAccessIdentities","getCloudfrontOriginAccessIdentitiesOutput"], () => require("./getCloudfrontOriginAccessIdentities"));

export { GetCloudfrontOriginAccessIdentityArgs, GetCloudfrontOriginAccessIdentityResult, GetCloudfrontOriginAccessIdentityOutputArgs } from "./getCloudfrontOriginAccessIdentity";
export const getCloudfrontOriginAccessIdentity: typeof import("./getCloudfrontOriginAccessIdentity").getCloudfrontOriginAccessIdentity = null as any;
export const getCloudfrontOriginAccessIdentityOutput: typeof import("./getCloudfrontOriginAccessIdentity").getCloudfrontOriginAccessIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginAccessIdentity","getCloudfrontOriginAccessIdentityOutput"], () => require("./getCloudfrontOriginAccessIdentity"));

export { GetCloudfrontOriginRequestPolicyArgs, GetCloudfrontOriginRequestPolicyResult, GetCloudfrontOriginRequestPolicyOutputArgs } from "./getCloudfrontOriginRequestPolicy";
export const getCloudfrontOriginRequestPolicy: typeof import("./getCloudfrontOriginRequestPolicy").getCloudfrontOriginRequestPolicy = null as any;
export const getCloudfrontOriginRequestPolicyOutput: typeof import("./getCloudfrontOriginRequestPolicy").getCloudfrontOriginRequestPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontOriginRequestPolicy","getCloudfrontOriginRequestPolicyOutput"], () => require("./getCloudfrontOriginRequestPolicy"));

export { GetCloudfrontRealtimeLogConfigArgs, GetCloudfrontRealtimeLogConfigResult, GetCloudfrontRealtimeLogConfigOutputArgs } from "./getCloudfrontRealtimeLogConfig";
export const getCloudfrontRealtimeLogConfig: typeof import("./getCloudfrontRealtimeLogConfig").getCloudfrontRealtimeLogConfig = null as any;
export const getCloudfrontRealtimeLogConfigOutput: typeof import("./getCloudfrontRealtimeLogConfig").getCloudfrontRealtimeLogConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontRealtimeLogConfig","getCloudfrontRealtimeLogConfigOutput"], () => require("./getCloudfrontRealtimeLogConfig"));

export { GetCloudfrontResponseHeadersPolicyArgs, GetCloudfrontResponseHeadersPolicyResult, GetCloudfrontResponseHeadersPolicyOutputArgs } from "./getCloudfrontResponseHeadersPolicy";
export const getCloudfrontResponseHeadersPolicy: typeof import("./getCloudfrontResponseHeadersPolicy").getCloudfrontResponseHeadersPolicy = null as any;
export const getCloudfrontResponseHeadersPolicyOutput: typeof import("./getCloudfrontResponseHeadersPolicy").getCloudfrontResponseHeadersPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudfrontResponseHeadersPolicy","getCloudfrontResponseHeadersPolicyOutput"], () => require("./getCloudfrontResponseHeadersPolicy"));

export { GetCloudhsmV2ClusterArgs, GetCloudhsmV2ClusterResult, GetCloudhsmV2ClusterOutputArgs } from "./getCloudhsmV2Cluster";
export const getCloudhsmV2Cluster: typeof import("./getCloudhsmV2Cluster").getCloudhsmV2Cluster = null as any;
export const getCloudhsmV2ClusterOutput: typeof import("./getCloudhsmV2Cluster").getCloudhsmV2ClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCloudhsmV2Cluster","getCloudhsmV2ClusterOutput"], () => require("./getCloudhsmV2Cluster"));

export { GetCloudtrailServiceAccountArgs, GetCloudtrailServiceAccountResult, GetCloudtrailServiceAccountOutputArgs } from "./getCloudtrailServiceAccount";
export const getCloudtrailServiceAccount: typeof import("./getCloudtrailServiceAccount").getCloudtrailServiceAccount = null as any;
export const getCloudtrailServiceAccountOutput: typeof import("./getCloudtrailServiceAccount").getCloudtrailServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCloudtrailServiceAccount","getCloudtrailServiceAccountOutput"], () => require("./getCloudtrailServiceAccount"));

export { GetCloudwatchEventBusArgs, GetCloudwatchEventBusResult, GetCloudwatchEventBusOutputArgs } from "./getCloudwatchEventBus";
export const getCloudwatchEventBus: typeof import("./getCloudwatchEventBus").getCloudwatchEventBus = null as any;
export const getCloudwatchEventBusOutput: typeof import("./getCloudwatchEventBus").getCloudwatchEventBusOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchEventBus","getCloudwatchEventBusOutput"], () => require("./getCloudwatchEventBus"));

export { GetCloudwatchEventConnectionArgs, GetCloudwatchEventConnectionResult, GetCloudwatchEventConnectionOutputArgs } from "./getCloudwatchEventConnection";
export const getCloudwatchEventConnection: typeof import("./getCloudwatchEventConnection").getCloudwatchEventConnection = null as any;
export const getCloudwatchEventConnectionOutput: typeof import("./getCloudwatchEventConnection").getCloudwatchEventConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchEventConnection","getCloudwatchEventConnectionOutput"], () => require("./getCloudwatchEventConnection"));

export { GetCloudwatchEventSourceArgs, GetCloudwatchEventSourceResult, GetCloudwatchEventSourceOutputArgs } from "./getCloudwatchEventSource";
export const getCloudwatchEventSource: typeof import("./getCloudwatchEventSource").getCloudwatchEventSource = null as any;
export const getCloudwatchEventSourceOutput: typeof import("./getCloudwatchEventSource").getCloudwatchEventSourceOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchEventSource","getCloudwatchEventSourceOutput"], () => require("./getCloudwatchEventSource"));

export { GetCloudwatchLogDataProtectionPolicyDocumentArgs, GetCloudwatchLogDataProtectionPolicyDocumentResult, GetCloudwatchLogDataProtectionPolicyDocumentOutputArgs } from "./getCloudwatchLogDataProtectionPolicyDocument";
export const getCloudwatchLogDataProtectionPolicyDocument: typeof import("./getCloudwatchLogDataProtectionPolicyDocument").getCloudwatchLogDataProtectionPolicyDocument = null as any;
export const getCloudwatchLogDataProtectionPolicyDocumentOutput: typeof import("./getCloudwatchLogDataProtectionPolicyDocument").getCloudwatchLogDataProtectionPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchLogDataProtectionPolicyDocument","getCloudwatchLogDataProtectionPolicyDocumentOutput"], () => require("./getCloudwatchLogDataProtectionPolicyDocument"));

export { GetCloudwatchLogGroupArgs, GetCloudwatchLogGroupResult, GetCloudwatchLogGroupOutputArgs } from "./getCloudwatchLogGroup";
export const getCloudwatchLogGroup: typeof import("./getCloudwatchLogGroup").getCloudwatchLogGroup = null as any;
export const getCloudwatchLogGroupOutput: typeof import("./getCloudwatchLogGroup").getCloudwatchLogGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchLogGroup","getCloudwatchLogGroupOutput"], () => require("./getCloudwatchLogGroup"));

export { GetCloudwatchLogGroupsArgs, GetCloudwatchLogGroupsResult, GetCloudwatchLogGroupsOutputArgs } from "./getCloudwatchLogGroups";
export const getCloudwatchLogGroups: typeof import("./getCloudwatchLogGroups").getCloudwatchLogGroups = null as any;
export const getCloudwatchLogGroupsOutput: typeof import("./getCloudwatchLogGroups").getCloudwatchLogGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudwatchLogGroups","getCloudwatchLogGroupsOutput"], () => require("./getCloudwatchLogGroups"));

export { GetCodeartifactAuthorizationTokenArgs, GetCodeartifactAuthorizationTokenResult, GetCodeartifactAuthorizationTokenOutputArgs } from "./getCodeartifactAuthorizationToken";
export const getCodeartifactAuthorizationToken: typeof import("./getCodeartifactAuthorizationToken").getCodeartifactAuthorizationToken = null as any;
export const getCodeartifactAuthorizationTokenOutput: typeof import("./getCodeartifactAuthorizationToken").getCodeartifactAuthorizationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getCodeartifactAuthorizationToken","getCodeartifactAuthorizationTokenOutput"], () => require("./getCodeartifactAuthorizationToken"));

export { GetCodeartifactRepositoryEndpointArgs, GetCodeartifactRepositoryEndpointResult, GetCodeartifactRepositoryEndpointOutputArgs } from "./getCodeartifactRepositoryEndpoint";
export const getCodeartifactRepositoryEndpoint: typeof import("./getCodeartifactRepositoryEndpoint").getCodeartifactRepositoryEndpoint = null as any;
export const getCodeartifactRepositoryEndpointOutput: typeof import("./getCodeartifactRepositoryEndpoint").getCodeartifactRepositoryEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getCodeartifactRepositoryEndpoint","getCodeartifactRepositoryEndpointOutput"], () => require("./getCodeartifactRepositoryEndpoint"));

export { GetCodecatalystDevEnvironmentArgs, GetCodecatalystDevEnvironmentResult, GetCodecatalystDevEnvironmentOutputArgs } from "./getCodecatalystDevEnvironment";
export const getCodecatalystDevEnvironment: typeof import("./getCodecatalystDevEnvironment").getCodecatalystDevEnvironment = null as any;
export const getCodecatalystDevEnvironmentOutput: typeof import("./getCodecatalystDevEnvironment").getCodecatalystDevEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getCodecatalystDevEnvironment","getCodecatalystDevEnvironmentOutput"], () => require("./getCodecatalystDevEnvironment"));

export { GetCodecommitApprovalRuleTemplateArgs, GetCodecommitApprovalRuleTemplateResult, GetCodecommitApprovalRuleTemplateOutputArgs } from "./getCodecommitApprovalRuleTemplate";
export const getCodecommitApprovalRuleTemplate: typeof import("./getCodecommitApprovalRuleTemplate").getCodecommitApprovalRuleTemplate = null as any;
export const getCodecommitApprovalRuleTemplateOutput: typeof import("./getCodecommitApprovalRuleTemplate").getCodecommitApprovalRuleTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCodecommitApprovalRuleTemplate","getCodecommitApprovalRuleTemplateOutput"], () => require("./getCodecommitApprovalRuleTemplate"));

export { GetCodecommitRepositoryArgs, GetCodecommitRepositoryResult, GetCodecommitRepositoryOutputArgs } from "./getCodecommitRepository";
export const getCodecommitRepository: typeof import("./getCodecommitRepository").getCodecommitRepository = null as any;
export const getCodecommitRepositoryOutput: typeof import("./getCodecommitRepository").getCodecommitRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getCodecommitRepository","getCodecommitRepositoryOutput"], () => require("./getCodecommitRepository"));

export { GetCodeguruprofilerProfilingGroupArgs, GetCodeguruprofilerProfilingGroupResult, GetCodeguruprofilerProfilingGroupOutputArgs } from "./getCodeguruprofilerProfilingGroup";
export const getCodeguruprofilerProfilingGroup: typeof import("./getCodeguruprofilerProfilingGroup").getCodeguruprofilerProfilingGroup = null as any;
export const getCodeguruprofilerProfilingGroupOutput: typeof import("./getCodeguruprofilerProfilingGroup").getCodeguruprofilerProfilingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCodeguruprofilerProfilingGroup","getCodeguruprofilerProfilingGroupOutput"], () => require("./getCodeguruprofilerProfilingGroup"));

export { GetCodestarconnectionsConnectionArgs, GetCodestarconnectionsConnectionResult, GetCodestarconnectionsConnectionOutputArgs } from "./getCodestarconnectionsConnection";
export const getCodestarconnectionsConnection: typeof import("./getCodestarconnectionsConnection").getCodestarconnectionsConnection = null as any;
export const getCodestarconnectionsConnectionOutput: typeof import("./getCodestarconnectionsConnection").getCodestarconnectionsConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getCodestarconnectionsConnection","getCodestarconnectionsConnectionOutput"], () => require("./getCodestarconnectionsConnection"));

export { GetCognitoIdentityPoolArgs, GetCognitoIdentityPoolResult, GetCognitoIdentityPoolOutputArgs } from "./getCognitoIdentityPool";
export const getCognitoIdentityPool: typeof import("./getCognitoIdentityPool").getCognitoIdentityPool = null as any;
export const getCognitoIdentityPoolOutput: typeof import("./getCognitoIdentityPool").getCognitoIdentityPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoIdentityPool","getCognitoIdentityPoolOutput"], () => require("./getCognitoIdentityPool"));

export { GetCognitoUserGroupArgs, GetCognitoUserGroupResult, GetCognitoUserGroupOutputArgs } from "./getCognitoUserGroup";
export const getCognitoUserGroup: typeof import("./getCognitoUserGroup").getCognitoUserGroup = null as any;
export const getCognitoUserGroupOutput: typeof import("./getCognitoUserGroup").getCognitoUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserGroup","getCognitoUserGroupOutput"], () => require("./getCognitoUserGroup"));

export { GetCognitoUserGroupsArgs, GetCognitoUserGroupsResult, GetCognitoUserGroupsOutputArgs } from "./getCognitoUserGroups";
export const getCognitoUserGroups: typeof import("./getCognitoUserGroups").getCognitoUserGroups = null as any;
export const getCognitoUserGroupsOutput: typeof import("./getCognitoUserGroups").getCognitoUserGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserGroups","getCognitoUserGroupsOutput"], () => require("./getCognitoUserGroups"));

export { GetCognitoUserPoolArgs, GetCognitoUserPoolResult, GetCognitoUserPoolOutputArgs } from "./getCognitoUserPool";
export const getCognitoUserPool: typeof import("./getCognitoUserPool").getCognitoUserPool = null as any;
export const getCognitoUserPoolOutput: typeof import("./getCognitoUserPool").getCognitoUserPoolOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPool","getCognitoUserPoolOutput"], () => require("./getCognitoUserPool"));

export { GetCognitoUserPoolClientArgs, GetCognitoUserPoolClientResult, GetCognitoUserPoolClientOutputArgs } from "./getCognitoUserPoolClient";
export const getCognitoUserPoolClient: typeof import("./getCognitoUserPoolClient").getCognitoUserPoolClient = null as any;
export const getCognitoUserPoolClientOutput: typeof import("./getCognitoUserPoolClient").getCognitoUserPoolClientOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolClient","getCognitoUserPoolClientOutput"], () => require("./getCognitoUserPoolClient"));

export { GetCognitoUserPoolClientsArgs, GetCognitoUserPoolClientsResult, GetCognitoUserPoolClientsOutputArgs } from "./getCognitoUserPoolClients";
export const getCognitoUserPoolClients: typeof import("./getCognitoUserPoolClients").getCognitoUserPoolClients = null as any;
export const getCognitoUserPoolClientsOutput: typeof import("./getCognitoUserPoolClients").getCognitoUserPoolClientsOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolClients","getCognitoUserPoolClientsOutput"], () => require("./getCognitoUserPoolClients"));

export { GetCognitoUserPoolSigningCertificateArgs, GetCognitoUserPoolSigningCertificateResult, GetCognitoUserPoolSigningCertificateOutputArgs } from "./getCognitoUserPoolSigningCertificate";
export const getCognitoUserPoolSigningCertificate: typeof import("./getCognitoUserPoolSigningCertificate").getCognitoUserPoolSigningCertificate = null as any;
export const getCognitoUserPoolSigningCertificateOutput: typeof import("./getCognitoUserPoolSigningCertificate").getCognitoUserPoolSigningCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPoolSigningCertificate","getCognitoUserPoolSigningCertificateOutput"], () => require("./getCognitoUserPoolSigningCertificate"));

export { GetCognitoUserPoolsArgs, GetCognitoUserPoolsResult, GetCognitoUserPoolsOutputArgs } from "./getCognitoUserPools";
export const getCognitoUserPools: typeof import("./getCognitoUserPools").getCognitoUserPools = null as any;
export const getCognitoUserPoolsOutput: typeof import("./getCognitoUserPools").getCognitoUserPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getCognitoUserPools","getCognitoUserPoolsOutput"], () => require("./getCognitoUserPools"));

export { GetConnectBotAssociationArgs, GetConnectBotAssociationResult, GetConnectBotAssociationOutputArgs } from "./getConnectBotAssociation";
export const getConnectBotAssociation: typeof import("./getConnectBotAssociation").getConnectBotAssociation = null as any;
export const getConnectBotAssociationOutput: typeof import("./getConnectBotAssociation").getConnectBotAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getConnectBotAssociation","getConnectBotAssociationOutput"], () => require("./getConnectBotAssociation"));

export { GetConnectContactFlowArgs, GetConnectContactFlowResult, GetConnectContactFlowOutputArgs } from "./getConnectContactFlow";
export const getConnectContactFlow: typeof import("./getConnectContactFlow").getConnectContactFlow = null as any;
export const getConnectContactFlowOutput: typeof import("./getConnectContactFlow").getConnectContactFlowOutput = null as any;
utilities.lazyLoad(exports, ["getConnectContactFlow","getConnectContactFlowOutput"], () => require("./getConnectContactFlow"));

export { GetConnectContactFlowModuleArgs, GetConnectContactFlowModuleResult, GetConnectContactFlowModuleOutputArgs } from "./getConnectContactFlowModule";
export const getConnectContactFlowModule: typeof import("./getConnectContactFlowModule").getConnectContactFlowModule = null as any;
export const getConnectContactFlowModuleOutput: typeof import("./getConnectContactFlowModule").getConnectContactFlowModuleOutput = null as any;
utilities.lazyLoad(exports, ["getConnectContactFlowModule","getConnectContactFlowModuleOutput"], () => require("./getConnectContactFlowModule"));

export { GetConnectHoursOfOperationArgs, GetConnectHoursOfOperationResult, GetConnectHoursOfOperationOutputArgs } from "./getConnectHoursOfOperation";
export const getConnectHoursOfOperation: typeof import("./getConnectHoursOfOperation").getConnectHoursOfOperation = null as any;
export const getConnectHoursOfOperationOutput: typeof import("./getConnectHoursOfOperation").getConnectHoursOfOperationOutput = null as any;
utilities.lazyLoad(exports, ["getConnectHoursOfOperation","getConnectHoursOfOperationOutput"], () => require("./getConnectHoursOfOperation"));

export { GetConnectInstanceArgs, GetConnectInstanceResult, GetConnectInstanceOutputArgs } from "./getConnectInstance";
export const getConnectInstance: typeof import("./getConnectInstance").getConnectInstance = null as any;
export const getConnectInstanceOutput: typeof import("./getConnectInstance").getConnectInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getConnectInstance","getConnectInstanceOutput"], () => require("./getConnectInstance"));

export { GetConnectInstanceStorageConfigArgs, GetConnectInstanceStorageConfigResult, GetConnectInstanceStorageConfigOutputArgs } from "./getConnectInstanceStorageConfig";
export const getConnectInstanceStorageConfig: typeof import("./getConnectInstanceStorageConfig").getConnectInstanceStorageConfig = null as any;
export const getConnectInstanceStorageConfigOutput: typeof import("./getConnectInstanceStorageConfig").getConnectInstanceStorageConfigOutput = null as any;
utilities.lazyLoad(exports, ["getConnectInstanceStorageConfig","getConnectInstanceStorageConfigOutput"], () => require("./getConnectInstanceStorageConfig"));

export { GetConnectLambdaFunctionAssociationArgs, GetConnectLambdaFunctionAssociationResult, GetConnectLambdaFunctionAssociationOutputArgs } from "./getConnectLambdaFunctionAssociation";
export const getConnectLambdaFunctionAssociation: typeof import("./getConnectLambdaFunctionAssociation").getConnectLambdaFunctionAssociation = null as any;
export const getConnectLambdaFunctionAssociationOutput: typeof import("./getConnectLambdaFunctionAssociation").getConnectLambdaFunctionAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getConnectLambdaFunctionAssociation","getConnectLambdaFunctionAssociationOutput"], () => require("./getConnectLambdaFunctionAssociation"));

export { GetConnectPromptArgs, GetConnectPromptResult, GetConnectPromptOutputArgs } from "./getConnectPrompt";
export const getConnectPrompt: typeof import("./getConnectPrompt").getConnectPrompt = null as any;
export const getConnectPromptOutput: typeof import("./getConnectPrompt").getConnectPromptOutput = null as any;
utilities.lazyLoad(exports, ["getConnectPrompt","getConnectPromptOutput"], () => require("./getConnectPrompt"));

export { GetConnectQueueArgs, GetConnectQueueResult, GetConnectQueueOutputArgs } from "./getConnectQueue";
export const getConnectQueue: typeof import("./getConnectQueue").getConnectQueue = null as any;
export const getConnectQueueOutput: typeof import("./getConnectQueue").getConnectQueueOutput = null as any;
utilities.lazyLoad(exports, ["getConnectQueue","getConnectQueueOutput"], () => require("./getConnectQueue"));

export { GetConnectQuickConnectArgs, GetConnectQuickConnectResult, GetConnectQuickConnectOutputArgs } from "./getConnectQuickConnect";
export const getConnectQuickConnect: typeof import("./getConnectQuickConnect").getConnectQuickConnect = null as any;
export const getConnectQuickConnectOutput: typeof import("./getConnectQuickConnect").getConnectQuickConnectOutput = null as any;
utilities.lazyLoad(exports, ["getConnectQuickConnect","getConnectQuickConnectOutput"], () => require("./getConnectQuickConnect"));

export { GetConnectRoutingProfileArgs, GetConnectRoutingProfileResult, GetConnectRoutingProfileOutputArgs } from "./getConnectRoutingProfile";
export const getConnectRoutingProfile: typeof import("./getConnectRoutingProfile").getConnectRoutingProfile = null as any;
export const getConnectRoutingProfileOutput: typeof import("./getConnectRoutingProfile").getConnectRoutingProfileOutput = null as any;
utilities.lazyLoad(exports, ["getConnectRoutingProfile","getConnectRoutingProfileOutput"], () => require("./getConnectRoutingProfile"));

export { GetConnectSecurityProfileArgs, GetConnectSecurityProfileResult, GetConnectSecurityProfileOutputArgs } from "./getConnectSecurityProfile";
export const getConnectSecurityProfile: typeof import("./getConnectSecurityProfile").getConnectSecurityProfile = null as any;
export const getConnectSecurityProfileOutput: typeof import("./getConnectSecurityProfile").getConnectSecurityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getConnectSecurityProfile","getConnectSecurityProfileOutput"], () => require("./getConnectSecurityProfile"));

export { GetConnectUserArgs, GetConnectUserResult, GetConnectUserOutputArgs } from "./getConnectUser";
export const getConnectUser: typeof import("./getConnectUser").getConnectUser = null as any;
export const getConnectUserOutput: typeof import("./getConnectUser").getConnectUserOutput = null as any;
utilities.lazyLoad(exports, ["getConnectUser","getConnectUserOutput"], () => require("./getConnectUser"));

export { GetConnectUserHierarchyGroupArgs, GetConnectUserHierarchyGroupResult, GetConnectUserHierarchyGroupOutputArgs } from "./getConnectUserHierarchyGroup";
export const getConnectUserHierarchyGroup: typeof import("./getConnectUserHierarchyGroup").getConnectUserHierarchyGroup = null as any;
export const getConnectUserHierarchyGroupOutput: typeof import("./getConnectUserHierarchyGroup").getConnectUserHierarchyGroupOutput = null as any;
utilities.lazyLoad(exports, ["getConnectUserHierarchyGroup","getConnectUserHierarchyGroupOutput"], () => require("./getConnectUserHierarchyGroup"));

export { GetConnectUserHierarchyStructureArgs, GetConnectUserHierarchyStructureResult, GetConnectUserHierarchyStructureOutputArgs } from "./getConnectUserHierarchyStructure";
export const getConnectUserHierarchyStructure: typeof import("./getConnectUserHierarchyStructure").getConnectUserHierarchyStructure = null as any;
export const getConnectUserHierarchyStructureOutput: typeof import("./getConnectUserHierarchyStructure").getConnectUserHierarchyStructureOutput = null as any;
utilities.lazyLoad(exports, ["getConnectUserHierarchyStructure","getConnectUserHierarchyStructureOutput"], () => require("./getConnectUserHierarchyStructure"));

export { GetConnectVocabularyArgs, GetConnectVocabularyResult, GetConnectVocabularyOutputArgs } from "./getConnectVocabulary";
export const getConnectVocabulary: typeof import("./getConnectVocabulary").getConnectVocabulary = null as any;
export const getConnectVocabularyOutput: typeof import("./getConnectVocabulary").getConnectVocabularyOutput = null as any;
utilities.lazyLoad(exports, ["getConnectVocabulary","getConnectVocabularyOutput"], () => require("./getConnectVocabulary"));

export { GetControltowerControlsArgs, GetControltowerControlsResult, GetControltowerControlsOutputArgs } from "./getControltowerControls";
export const getControltowerControls: typeof import("./getControltowerControls").getControltowerControls = null as any;
export const getControltowerControlsOutput: typeof import("./getControltowerControls").getControltowerControlsOutput = null as any;
utilities.lazyLoad(exports, ["getControltowerControls","getControltowerControlsOutput"], () => require("./getControltowerControls"));

export { GetCurReportDefinitionArgs, GetCurReportDefinitionResult, GetCurReportDefinitionOutputArgs } from "./getCurReportDefinition";
export const getCurReportDefinition: typeof import("./getCurReportDefinition").getCurReportDefinition = null as any;
export const getCurReportDefinitionOutput: typeof import("./getCurReportDefinition").getCurReportDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCurReportDefinition","getCurReportDefinitionOutput"], () => require("./getCurReportDefinition"));

export { GetCustomerGatewayArgs, GetCustomerGatewayResult, GetCustomerGatewayOutputArgs } from "./getCustomerGateway";
export const getCustomerGateway: typeof import("./getCustomerGateway").getCustomerGateway = null as any;
export const getCustomerGatewayOutput: typeof import("./getCustomerGateway").getCustomerGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getCustomerGateway","getCustomerGatewayOutput"], () => require("./getCustomerGateway"));

export { GetDatapipelinePipelineArgs, GetDatapipelinePipelineResult, GetDatapipelinePipelineOutputArgs } from "./getDatapipelinePipeline";
export const getDatapipelinePipeline: typeof import("./getDatapipelinePipeline").getDatapipelinePipeline = null as any;
export const getDatapipelinePipelineOutput: typeof import("./getDatapipelinePipeline").getDatapipelinePipelineOutput = null as any;
utilities.lazyLoad(exports, ["getDatapipelinePipeline","getDatapipelinePipelineOutput"], () => require("./getDatapipelinePipeline"));

export { GetDatapipelinePipelineDefinitionArgs, GetDatapipelinePipelineDefinitionResult, GetDatapipelinePipelineDefinitionOutputArgs } from "./getDatapipelinePipelineDefinition";
export const getDatapipelinePipelineDefinition: typeof import("./getDatapipelinePipelineDefinition").getDatapipelinePipelineDefinition = null as any;
export const getDatapipelinePipelineDefinitionOutput: typeof import("./getDatapipelinePipelineDefinition").getDatapipelinePipelineDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getDatapipelinePipelineDefinition","getDatapipelinePipelineDefinitionOutput"], () => require("./getDatapipelinePipelineDefinition"));

export { GetDatazoneEnvironmentBlueprintArgs, GetDatazoneEnvironmentBlueprintResult, GetDatazoneEnvironmentBlueprintOutputArgs } from "./getDatazoneEnvironmentBlueprint";
export const getDatazoneEnvironmentBlueprint: typeof import("./getDatazoneEnvironmentBlueprint").getDatazoneEnvironmentBlueprint = null as any;
export const getDatazoneEnvironmentBlueprintOutput: typeof import("./getDatazoneEnvironmentBlueprint").getDatazoneEnvironmentBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getDatazoneEnvironmentBlueprint","getDatazoneEnvironmentBlueprintOutput"], () => require("./getDatazoneEnvironmentBlueprint"));

export { GetDbClusterSnapshotArgs, GetDbClusterSnapshotResult, GetDbClusterSnapshotOutputArgs } from "./getDbClusterSnapshot";
export const getDbClusterSnapshot: typeof import("./getDbClusterSnapshot").getDbClusterSnapshot = null as any;
export const getDbClusterSnapshotOutput: typeof import("./getDbClusterSnapshot").getDbClusterSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getDbClusterSnapshot","getDbClusterSnapshotOutput"], () => require("./getDbClusterSnapshot"));

export { GetDbEventCategoriesArgs, GetDbEventCategoriesResult, GetDbEventCategoriesOutputArgs } from "./getDbEventCategories";
export const getDbEventCategories: typeof import("./getDbEventCategories").getDbEventCategories = null as any;
export const getDbEventCategoriesOutput: typeof import("./getDbEventCategories").getDbEventCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getDbEventCategories","getDbEventCategoriesOutput"], () => require("./getDbEventCategories"));

export { GetDbInstanceArgs, GetDbInstanceResult, GetDbInstanceOutputArgs } from "./getDbInstance";
export const getDbInstance: typeof import("./getDbInstance").getDbInstance = null as any;
export const getDbInstanceOutput: typeof import("./getDbInstance").getDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstance","getDbInstanceOutput"], () => require("./getDbInstance"));

export { GetDbInstancesArgs, GetDbInstancesResult, GetDbInstancesOutputArgs } from "./getDbInstances";
export const getDbInstances: typeof import("./getDbInstances").getDbInstances = null as any;
export const getDbInstancesOutput: typeof import("./getDbInstances").getDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstances","getDbInstancesOutput"], () => require("./getDbInstances"));

export { GetDbParameterGroupArgs, GetDbParameterGroupResult, GetDbParameterGroupOutputArgs } from "./getDbParameterGroup";
export const getDbParameterGroup: typeof import("./getDbParameterGroup").getDbParameterGroup = null as any;
export const getDbParameterGroupOutput: typeof import("./getDbParameterGroup").getDbParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDbParameterGroup","getDbParameterGroupOutput"], () => require("./getDbParameterGroup"));

export { GetDbProxyArgs, GetDbProxyResult, GetDbProxyOutputArgs } from "./getDbProxy";
export const getDbProxy: typeof import("./getDbProxy").getDbProxy = null as any;
export const getDbProxyOutput: typeof import("./getDbProxy").getDbProxyOutput = null as any;
utilities.lazyLoad(exports, ["getDbProxy","getDbProxyOutput"], () => require("./getDbProxy"));

export { GetDbSnapshotArgs, GetDbSnapshotResult, GetDbSnapshotOutputArgs } from "./getDbSnapshot";
export const getDbSnapshot: typeof import("./getDbSnapshot").getDbSnapshot = null as any;
export const getDbSnapshotOutput: typeof import("./getDbSnapshot").getDbSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getDbSnapshot","getDbSnapshotOutput"], () => require("./getDbSnapshot"));

export { GetDbSubnetGroupArgs, GetDbSubnetGroupResult, GetDbSubnetGroupOutputArgs } from "./getDbSubnetGroup";
export const getDbSubnetGroup: typeof import("./getDbSubnetGroup").getDbSubnetGroup = null as any;
export const getDbSubnetGroupOutput: typeof import("./getDbSubnetGroup").getDbSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDbSubnetGroup","getDbSubnetGroupOutput"], () => require("./getDbSubnetGroup"));

export { GetDefaultTagsArgs, GetDefaultTagsResult, GetDefaultTagsOutputArgs } from "./getDefaultTags";
export const getDefaultTags: typeof import("./getDefaultTags").getDefaultTags = null as any;
export const getDefaultTagsOutput: typeof import("./getDefaultTags").getDefaultTagsOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultTags","getDefaultTagsOutput"], () => require("./getDefaultTags"));

export { GetDevopsguruNotificationChannelArgs, GetDevopsguruNotificationChannelResult, GetDevopsguruNotificationChannelOutputArgs } from "./getDevopsguruNotificationChannel";
export const getDevopsguruNotificationChannel: typeof import("./getDevopsguruNotificationChannel").getDevopsguruNotificationChannel = null as any;
export const getDevopsguruNotificationChannelOutput: typeof import("./getDevopsguruNotificationChannel").getDevopsguruNotificationChannelOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruNotificationChannel","getDevopsguruNotificationChannelOutput"], () => require("./getDevopsguruNotificationChannel"));

export { GetDevopsguruResourceCollectionArgs, GetDevopsguruResourceCollectionResult, GetDevopsguruResourceCollectionOutputArgs } from "./getDevopsguruResourceCollection";
export const getDevopsguruResourceCollection: typeof import("./getDevopsguruResourceCollection").getDevopsguruResourceCollection = null as any;
export const getDevopsguruResourceCollectionOutput: typeof import("./getDevopsguruResourceCollection").getDevopsguruResourceCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getDevopsguruResourceCollection","getDevopsguruResourceCollectionOutput"], () => require("./getDevopsguruResourceCollection"));

export { GetDirectoryServiceDirectoryArgs, GetDirectoryServiceDirectoryResult, GetDirectoryServiceDirectoryOutputArgs } from "./getDirectoryServiceDirectory";
export const getDirectoryServiceDirectory: typeof import("./getDirectoryServiceDirectory").getDirectoryServiceDirectory = null as any;
export const getDirectoryServiceDirectoryOutput: typeof import("./getDirectoryServiceDirectory").getDirectoryServiceDirectoryOutput = null as any;
utilities.lazyLoad(exports, ["getDirectoryServiceDirectory","getDirectoryServiceDirectoryOutput"], () => require("./getDirectoryServiceDirectory"));

export { GetDmsCertificateArgs, GetDmsCertificateResult, GetDmsCertificateOutputArgs } from "./getDmsCertificate";
export const getDmsCertificate: typeof import("./getDmsCertificate").getDmsCertificate = null as any;
export const getDmsCertificateOutput: typeof import("./getDmsCertificate").getDmsCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getDmsCertificate","getDmsCertificateOutput"], () => require("./getDmsCertificate"));

export { GetDmsEndpointArgs, GetDmsEndpointResult, GetDmsEndpointOutputArgs } from "./getDmsEndpoint";
export const getDmsEndpoint: typeof import("./getDmsEndpoint").getDmsEndpoint = null as any;
export const getDmsEndpointOutput: typeof import("./getDmsEndpoint").getDmsEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getDmsEndpoint","getDmsEndpointOutput"], () => require("./getDmsEndpoint"));

export { GetDmsReplicationInstanceArgs, GetDmsReplicationInstanceResult, GetDmsReplicationInstanceOutputArgs } from "./getDmsReplicationInstance";
export const getDmsReplicationInstance: typeof import("./getDmsReplicationInstance").getDmsReplicationInstance = null as any;
export const getDmsReplicationInstanceOutput: typeof import("./getDmsReplicationInstance").getDmsReplicationInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDmsReplicationInstance","getDmsReplicationInstanceOutput"], () => require("./getDmsReplicationInstance"));

export { GetDmsReplicationSubnetGroupArgs, GetDmsReplicationSubnetGroupResult, GetDmsReplicationSubnetGroupOutputArgs } from "./getDmsReplicationSubnetGroup";
export const getDmsReplicationSubnetGroup: typeof import("./getDmsReplicationSubnetGroup").getDmsReplicationSubnetGroup = null as any;
export const getDmsReplicationSubnetGroupOutput: typeof import("./getDmsReplicationSubnetGroup").getDmsReplicationSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getDmsReplicationSubnetGroup","getDmsReplicationSubnetGroupOutput"], () => require("./getDmsReplicationSubnetGroup"));

export { GetDmsReplicationTaskArgs, GetDmsReplicationTaskResult, GetDmsReplicationTaskOutputArgs } from "./getDmsReplicationTask";
export const getDmsReplicationTask: typeof import("./getDmsReplicationTask").getDmsReplicationTask = null as any;
export const getDmsReplicationTaskOutput: typeof import("./getDmsReplicationTask").getDmsReplicationTaskOutput = null as any;
utilities.lazyLoad(exports, ["getDmsReplicationTask","getDmsReplicationTaskOutput"], () => require("./getDmsReplicationTask"));

export { GetDocdbEngineVersionArgs, GetDocdbEngineVersionResult, GetDocdbEngineVersionOutputArgs } from "./getDocdbEngineVersion";
export const getDocdbEngineVersion: typeof import("./getDocdbEngineVersion").getDocdbEngineVersion = null as any;
export const getDocdbEngineVersionOutput: typeof import("./getDocdbEngineVersion").getDocdbEngineVersionOutput = null as any;
utilities.lazyLoad(exports, ["getDocdbEngineVersion","getDocdbEngineVersionOutput"], () => require("./getDocdbEngineVersion"));

export { GetDocdbOrderableDbInstanceArgs, GetDocdbOrderableDbInstanceResult, GetDocdbOrderableDbInstanceOutputArgs } from "./getDocdbOrderableDbInstance";
export const getDocdbOrderableDbInstance: typeof import("./getDocdbOrderableDbInstance").getDocdbOrderableDbInstance = null as any;
export const getDocdbOrderableDbInstanceOutput: typeof import("./getDocdbOrderableDbInstance").getDocdbOrderableDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDocdbOrderableDbInstance","getDocdbOrderableDbInstanceOutput"], () => require("./getDocdbOrderableDbInstance"));

export { GetDxConnectionArgs, GetDxConnectionResult, GetDxConnectionOutputArgs } from "./getDxConnection";
export const getDxConnection: typeof import("./getDxConnection").getDxConnection = null as any;
export const getDxConnectionOutput: typeof import("./getDxConnection").getDxConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getDxConnection","getDxConnectionOutput"], () => require("./getDxConnection"));

export { GetDxGatewayArgs, GetDxGatewayResult, GetDxGatewayOutputArgs } from "./getDxGateway";
export const getDxGateway: typeof import("./getDxGateway").getDxGateway = null as any;
export const getDxGatewayOutput: typeof import("./getDxGateway").getDxGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getDxGateway","getDxGatewayOutput"], () => require("./getDxGateway"));

export { GetDxLocationArgs, GetDxLocationResult, GetDxLocationOutputArgs } from "./getDxLocation";
export const getDxLocation: typeof import("./getDxLocation").getDxLocation = null as any;
export const getDxLocationOutput: typeof import("./getDxLocation").getDxLocationOutput = null as any;
utilities.lazyLoad(exports, ["getDxLocation","getDxLocationOutput"], () => require("./getDxLocation"));

export { GetDxLocationsArgs, GetDxLocationsResult, GetDxLocationsOutputArgs } from "./getDxLocations";
export const getDxLocations: typeof import("./getDxLocations").getDxLocations = null as any;
export const getDxLocationsOutput: typeof import("./getDxLocations").getDxLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getDxLocations","getDxLocationsOutput"], () => require("./getDxLocations"));

export { GetDxRouterConfigurationArgs, GetDxRouterConfigurationResult, GetDxRouterConfigurationOutputArgs } from "./getDxRouterConfiguration";
export const getDxRouterConfiguration: typeof import("./getDxRouterConfiguration").getDxRouterConfiguration = null as any;
export const getDxRouterConfigurationOutput: typeof import("./getDxRouterConfiguration").getDxRouterConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getDxRouterConfiguration","getDxRouterConfigurationOutput"], () => require("./getDxRouterConfiguration"));

export { GetDynamodbTableArgs, GetDynamodbTableResult, GetDynamodbTableOutputArgs } from "./getDynamodbTable";
export const getDynamodbTable: typeof import("./getDynamodbTable").getDynamodbTable = null as any;
export const getDynamodbTableOutput: typeof import("./getDynamodbTable").getDynamodbTableOutput = null as any;
utilities.lazyLoad(exports, ["getDynamodbTable","getDynamodbTableOutput"], () => require("./getDynamodbTable"));

export { GetDynamodbTableItemArgs, GetDynamodbTableItemResult, GetDynamodbTableItemOutputArgs } from "./getDynamodbTableItem";
export const getDynamodbTableItem: typeof import("./getDynamodbTableItem").getDynamodbTableItem = null as any;
export const getDynamodbTableItemOutput: typeof import("./getDynamodbTableItem").getDynamodbTableItemOutput = null as any;
utilities.lazyLoad(exports, ["getDynamodbTableItem","getDynamodbTableItemOutput"], () => require("./getDynamodbTableItem"));

export { GetEbsDefaultKmsKeyArgs, GetEbsDefaultKmsKeyResult, GetEbsDefaultKmsKeyOutputArgs } from "./getEbsDefaultKmsKey";
export const getEbsDefaultKmsKey: typeof import("./getEbsDefaultKmsKey").getEbsDefaultKmsKey = null as any;
export const getEbsDefaultKmsKeyOutput: typeof import("./getEbsDefaultKmsKey").getEbsDefaultKmsKeyOutput = null as any;
utilities.lazyLoad(exports, ["getEbsDefaultKmsKey","getEbsDefaultKmsKeyOutput"], () => require("./getEbsDefaultKmsKey"));

export { GetEbsEncryptionByDefaultArgs, GetEbsEncryptionByDefaultResult, GetEbsEncryptionByDefaultOutputArgs } from "./getEbsEncryptionByDefault";
export const getEbsEncryptionByDefault: typeof import("./getEbsEncryptionByDefault").getEbsEncryptionByDefault = null as any;
export const getEbsEncryptionByDefaultOutput: typeof import("./getEbsEncryptionByDefault").getEbsEncryptionByDefaultOutput = null as any;
utilities.lazyLoad(exports, ["getEbsEncryptionByDefault","getEbsEncryptionByDefaultOutput"], () => require("./getEbsEncryptionByDefault"));

export { GetEbsSnapshotArgs, GetEbsSnapshotResult, GetEbsSnapshotOutputArgs } from "./getEbsSnapshot";
export const getEbsSnapshot: typeof import("./getEbsSnapshot").getEbsSnapshot = null as any;
export const getEbsSnapshotOutput: typeof import("./getEbsSnapshot").getEbsSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getEbsSnapshot","getEbsSnapshotOutput"], () => require("./getEbsSnapshot"));

export { GetEbsSnapshotIdsArgs, GetEbsSnapshotIdsResult, GetEbsSnapshotIdsOutputArgs } from "./getEbsSnapshotIds";
export const getEbsSnapshotIds: typeof import("./getEbsSnapshotIds").getEbsSnapshotIds = null as any;
export const getEbsSnapshotIdsOutput: typeof import("./getEbsSnapshotIds").getEbsSnapshotIdsOutput = null as any;
utilities.lazyLoad(exports, ["getEbsSnapshotIds","getEbsSnapshotIdsOutput"], () => require("./getEbsSnapshotIds"));

export { GetEbsVolumeArgs, GetEbsVolumeResult, GetEbsVolumeOutputArgs } from "./getEbsVolume";
export const getEbsVolume: typeof import("./getEbsVolume").getEbsVolume = null as any;
export const getEbsVolumeOutput: typeof import("./getEbsVolume").getEbsVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getEbsVolume","getEbsVolumeOutput"], () => require("./getEbsVolume"));

export { GetEbsVolumesArgs, GetEbsVolumesResult, GetEbsVolumesOutputArgs } from "./getEbsVolumes";
export const getEbsVolumes: typeof import("./getEbsVolumes").getEbsVolumes = null as any;
export const getEbsVolumesOutput: typeof import("./getEbsVolumes").getEbsVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getEbsVolumes","getEbsVolumesOutput"], () => require("./getEbsVolumes"));

export { GetEc2CapacityBlockOfferingArgs, GetEc2CapacityBlockOfferingResult, GetEc2CapacityBlockOfferingOutputArgs } from "./getEc2CapacityBlockOffering";
export const getEc2CapacityBlockOffering: typeof import("./getEc2CapacityBlockOffering").getEc2CapacityBlockOffering = null as any;
export const getEc2CapacityBlockOfferingOutput: typeof import("./getEc2CapacityBlockOffering").getEc2CapacityBlockOfferingOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CapacityBlockOffering","getEc2CapacityBlockOfferingOutput"], () => require("./getEc2CapacityBlockOffering"));

export { GetEc2ClientVpnEndpointArgs, GetEc2ClientVpnEndpointResult, GetEc2ClientVpnEndpointOutputArgs } from "./getEc2ClientVpnEndpoint";
export const getEc2ClientVpnEndpoint: typeof import("./getEc2ClientVpnEndpoint").getEc2ClientVpnEndpoint = null as any;
export const getEc2ClientVpnEndpointOutput: typeof import("./getEc2ClientVpnEndpoint").getEc2ClientVpnEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEc2ClientVpnEndpoint","getEc2ClientVpnEndpointOutput"], () => require("./getEc2ClientVpnEndpoint"));

export { GetEc2CoipPoolArgs, GetEc2CoipPoolResult, GetEc2CoipPoolOutputArgs } from "./getEc2CoipPool";
export const getEc2CoipPool: typeof import("./getEc2CoipPool").getEc2CoipPool = null as any;
export const getEc2CoipPoolOutput: typeof import("./getEc2CoipPool").getEc2CoipPoolOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CoipPool","getEc2CoipPoolOutput"], () => require("./getEc2CoipPool"));

export { GetEc2CoipPoolsArgs, GetEc2CoipPoolsResult, GetEc2CoipPoolsOutputArgs } from "./getEc2CoipPools";
export const getEc2CoipPools: typeof import("./getEc2CoipPools").getEc2CoipPools = null as any;
export const getEc2CoipPoolsOutput: typeof import("./getEc2CoipPools").getEc2CoipPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2CoipPools","getEc2CoipPoolsOutput"], () => require("./getEc2CoipPools"));

export { GetEc2HostArgs, GetEc2HostResult, GetEc2HostOutputArgs } from "./getEc2Host";
export const getEc2Host: typeof import("./getEc2Host").getEc2Host = null as any;
export const getEc2HostOutput: typeof import("./getEc2Host").getEc2HostOutput = null as any;
utilities.lazyLoad(exports, ["getEc2Host","getEc2HostOutput"], () => require("./getEc2Host"));

export { GetEc2InstanceTypeArgs, GetEc2InstanceTypeResult, GetEc2InstanceTypeOutputArgs } from "./getEc2InstanceType";
export const getEc2InstanceType: typeof import("./getEc2InstanceType").getEc2InstanceType = null as any;
export const getEc2InstanceTypeOutput: typeof import("./getEc2InstanceType").getEc2InstanceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InstanceType","getEc2InstanceTypeOutput"], () => require("./getEc2InstanceType"));

export { GetEc2InstanceTypeOfferingArgs, GetEc2InstanceTypeOfferingResult, GetEc2InstanceTypeOfferingOutputArgs } from "./getEc2InstanceTypeOffering";
export const getEc2InstanceTypeOffering: typeof import("./getEc2InstanceTypeOffering").getEc2InstanceTypeOffering = null as any;
export const getEc2InstanceTypeOfferingOutput: typeof import("./getEc2InstanceTypeOffering").getEc2InstanceTypeOfferingOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InstanceTypeOffering","getEc2InstanceTypeOfferingOutput"], () => require("./getEc2InstanceTypeOffering"));

export { GetEc2InstanceTypeOfferingsArgs, GetEc2InstanceTypeOfferingsResult, GetEc2InstanceTypeOfferingsOutputArgs } from "./getEc2InstanceTypeOfferings";
export const getEc2InstanceTypeOfferings: typeof import("./getEc2InstanceTypeOfferings").getEc2InstanceTypeOfferings = null as any;
export const getEc2InstanceTypeOfferingsOutput: typeof import("./getEc2InstanceTypeOfferings").getEc2InstanceTypeOfferingsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InstanceTypeOfferings","getEc2InstanceTypeOfferingsOutput"], () => require("./getEc2InstanceTypeOfferings"));

export { GetEc2InstanceTypesArgs, GetEc2InstanceTypesResult, GetEc2InstanceTypesOutputArgs } from "./getEc2InstanceTypes";
export const getEc2InstanceTypes: typeof import("./getEc2InstanceTypes").getEc2InstanceTypes = null as any;
export const getEc2InstanceTypesOutput: typeof import("./getEc2InstanceTypes").getEc2InstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2InstanceTypes","getEc2InstanceTypesOutput"], () => require("./getEc2InstanceTypes"));

export { GetEc2LocalGatewayArgs, GetEc2LocalGatewayResult, GetEc2LocalGatewayOutputArgs } from "./getEc2LocalGateway";
export const getEc2LocalGateway: typeof import("./getEc2LocalGateway").getEc2LocalGateway = null as any;
export const getEc2LocalGatewayOutput: typeof import("./getEc2LocalGateway").getEc2LocalGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGateway","getEc2LocalGatewayOutput"], () => require("./getEc2LocalGateway"));

export { GetEc2LocalGatewayRouteTableArgs, GetEc2LocalGatewayRouteTableResult, GetEc2LocalGatewayRouteTableOutputArgs } from "./getEc2LocalGatewayRouteTable";
export const getEc2LocalGatewayRouteTable: typeof import("./getEc2LocalGatewayRouteTable").getEc2LocalGatewayRouteTable = null as any;
export const getEc2LocalGatewayRouteTableOutput: typeof import("./getEc2LocalGatewayRouteTable").getEc2LocalGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTable","getEc2LocalGatewayRouteTableOutput"], () => require("./getEc2LocalGatewayRouteTable"));

export { GetEc2LocalGatewayRouteTablesArgs, GetEc2LocalGatewayRouteTablesResult, GetEc2LocalGatewayRouteTablesOutputArgs } from "./getEc2LocalGatewayRouteTables";
export const getEc2LocalGatewayRouteTables: typeof import("./getEc2LocalGatewayRouteTables").getEc2LocalGatewayRouteTables = null as any;
export const getEc2LocalGatewayRouteTablesOutput: typeof import("./getEc2LocalGatewayRouteTables").getEc2LocalGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayRouteTables","getEc2LocalGatewayRouteTablesOutput"], () => require("./getEc2LocalGatewayRouteTables"));

export { GetEc2LocalGatewayVirtualInterfaceArgs, GetEc2LocalGatewayVirtualInterfaceResult, GetEc2LocalGatewayVirtualInterfaceOutputArgs } from "./getEc2LocalGatewayVirtualInterface";
export const getEc2LocalGatewayVirtualInterface: typeof import("./getEc2LocalGatewayVirtualInterface").getEc2LocalGatewayVirtualInterface = null as any;
export const getEc2LocalGatewayVirtualInterfaceOutput: typeof import("./getEc2LocalGatewayVirtualInterface").getEc2LocalGatewayVirtualInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayVirtualInterface","getEc2LocalGatewayVirtualInterfaceOutput"], () => require("./getEc2LocalGatewayVirtualInterface"));

export { GetEc2LocalGatewayVirtualInterfaceGroupArgs, GetEc2LocalGatewayVirtualInterfaceGroupResult, GetEc2LocalGatewayVirtualInterfaceGroupOutputArgs } from "./getEc2LocalGatewayVirtualInterfaceGroup";
export const getEc2LocalGatewayVirtualInterfaceGroup: typeof import("./getEc2LocalGatewayVirtualInterfaceGroup").getEc2LocalGatewayVirtualInterfaceGroup = null as any;
export const getEc2LocalGatewayVirtualInterfaceGroupOutput: typeof import("./getEc2LocalGatewayVirtualInterfaceGroup").getEc2LocalGatewayVirtualInterfaceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayVirtualInterfaceGroup","getEc2LocalGatewayVirtualInterfaceGroupOutput"], () => require("./getEc2LocalGatewayVirtualInterfaceGroup"));

export { GetEc2LocalGatewayVirtualInterfaceGroupsArgs, GetEc2LocalGatewayVirtualInterfaceGroupsResult, GetEc2LocalGatewayVirtualInterfaceGroupsOutputArgs } from "./getEc2LocalGatewayVirtualInterfaceGroups";
export const getEc2LocalGatewayVirtualInterfaceGroups: typeof import("./getEc2LocalGatewayVirtualInterfaceGroups").getEc2LocalGatewayVirtualInterfaceGroups = null as any;
export const getEc2LocalGatewayVirtualInterfaceGroupsOutput: typeof import("./getEc2LocalGatewayVirtualInterfaceGroups").getEc2LocalGatewayVirtualInterfaceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGatewayVirtualInterfaceGroups","getEc2LocalGatewayVirtualInterfaceGroupsOutput"], () => require("./getEc2LocalGatewayVirtualInterfaceGroups"));

export { GetEc2LocalGatewaysArgs, GetEc2LocalGatewaysResult, GetEc2LocalGatewaysOutputArgs } from "./getEc2LocalGateways";
export const getEc2LocalGateways: typeof import("./getEc2LocalGateways").getEc2LocalGateways = null as any;
export const getEc2LocalGatewaysOutput: typeof import("./getEc2LocalGateways").getEc2LocalGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getEc2LocalGateways","getEc2LocalGatewaysOutput"], () => require("./getEc2LocalGateways"));

export { GetEc2ManagedPrefixListArgs, GetEc2ManagedPrefixListResult, GetEc2ManagedPrefixListOutputArgs } from "./getEc2ManagedPrefixList";
export const getEc2ManagedPrefixList: typeof import("./getEc2ManagedPrefixList").getEc2ManagedPrefixList = null as any;
export const getEc2ManagedPrefixListOutput: typeof import("./getEc2ManagedPrefixList").getEc2ManagedPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getEc2ManagedPrefixList","getEc2ManagedPrefixListOutput"], () => require("./getEc2ManagedPrefixList"));

export { GetEc2ManagedPrefixListsArgs, GetEc2ManagedPrefixListsResult, GetEc2ManagedPrefixListsOutputArgs } from "./getEc2ManagedPrefixLists";
export const getEc2ManagedPrefixLists: typeof import("./getEc2ManagedPrefixLists").getEc2ManagedPrefixLists = null as any;
export const getEc2ManagedPrefixListsOutput: typeof import("./getEc2ManagedPrefixLists").getEc2ManagedPrefixListsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2ManagedPrefixLists","getEc2ManagedPrefixListsOutput"], () => require("./getEc2ManagedPrefixLists"));

export { GetEc2NetworkInsightsAnalysisArgs, GetEc2NetworkInsightsAnalysisResult, GetEc2NetworkInsightsAnalysisOutputArgs } from "./getEc2NetworkInsightsAnalysis";
export const getEc2NetworkInsightsAnalysis: typeof import("./getEc2NetworkInsightsAnalysis").getEc2NetworkInsightsAnalysis = null as any;
export const getEc2NetworkInsightsAnalysisOutput: typeof import("./getEc2NetworkInsightsAnalysis").getEc2NetworkInsightsAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsAnalysis","getEc2NetworkInsightsAnalysisOutput"], () => require("./getEc2NetworkInsightsAnalysis"));

export { GetEc2NetworkInsightsPathArgs, GetEc2NetworkInsightsPathResult, GetEc2NetworkInsightsPathOutputArgs } from "./getEc2NetworkInsightsPath";
export const getEc2NetworkInsightsPath: typeof import("./getEc2NetworkInsightsPath").getEc2NetworkInsightsPath = null as any;
export const getEc2NetworkInsightsPathOutput: typeof import("./getEc2NetworkInsightsPath").getEc2NetworkInsightsPathOutput = null as any;
utilities.lazyLoad(exports, ["getEc2NetworkInsightsPath","getEc2NetworkInsightsPathOutput"], () => require("./getEc2NetworkInsightsPath"));

export { GetEc2PublicIpv4PoolArgs, GetEc2PublicIpv4PoolResult, GetEc2PublicIpv4PoolOutputArgs } from "./getEc2PublicIpv4Pool";
export const getEc2PublicIpv4Pool: typeof import("./getEc2PublicIpv4Pool").getEc2PublicIpv4Pool = null as any;
export const getEc2PublicIpv4PoolOutput: typeof import("./getEc2PublicIpv4Pool").getEc2PublicIpv4PoolOutput = null as any;
utilities.lazyLoad(exports, ["getEc2PublicIpv4Pool","getEc2PublicIpv4PoolOutput"], () => require("./getEc2PublicIpv4Pool"));

export { GetEc2PublicIpv4PoolsArgs, GetEc2PublicIpv4PoolsResult, GetEc2PublicIpv4PoolsOutputArgs } from "./getEc2PublicIpv4Pools";
export const getEc2PublicIpv4Pools: typeof import("./getEc2PublicIpv4Pools").getEc2PublicIpv4Pools = null as any;
export const getEc2PublicIpv4PoolsOutput: typeof import("./getEc2PublicIpv4Pools").getEc2PublicIpv4PoolsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2PublicIpv4Pools","getEc2PublicIpv4PoolsOutput"], () => require("./getEc2PublicIpv4Pools"));

export { GetEc2SerialConsoleAccessArgs, GetEc2SerialConsoleAccessResult, GetEc2SerialConsoleAccessOutputArgs } from "./getEc2SerialConsoleAccess";
export const getEc2SerialConsoleAccess: typeof import("./getEc2SerialConsoleAccess").getEc2SerialConsoleAccess = null as any;
export const getEc2SerialConsoleAccessOutput: typeof import("./getEc2SerialConsoleAccess").getEc2SerialConsoleAccessOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SerialConsoleAccess","getEc2SerialConsoleAccessOutput"], () => require("./getEc2SerialConsoleAccess"));

export { GetEc2SpotPriceArgs, GetEc2SpotPriceResult, GetEc2SpotPriceOutputArgs } from "./getEc2SpotPrice";
export const getEc2SpotPrice: typeof import("./getEc2SpotPrice").getEc2SpotPrice = null as any;
export const getEc2SpotPriceOutput: typeof import("./getEc2SpotPrice").getEc2SpotPriceOutput = null as any;
utilities.lazyLoad(exports, ["getEc2SpotPrice","getEc2SpotPriceOutput"], () => require("./getEc2SpotPrice"));

export { GetEc2TransitGatewayArgs, GetEc2TransitGatewayResult, GetEc2TransitGatewayOutputArgs } from "./getEc2TransitGateway";
export const getEc2TransitGateway: typeof import("./getEc2TransitGateway").getEc2TransitGateway = null as any;
export const getEc2TransitGatewayOutput: typeof import("./getEc2TransitGateway").getEc2TransitGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGateway","getEc2TransitGatewayOutput"], () => require("./getEc2TransitGateway"));

export { GetEc2TransitGatewayAttachmentArgs, GetEc2TransitGatewayAttachmentResult, GetEc2TransitGatewayAttachmentOutputArgs } from "./getEc2TransitGatewayAttachment";
export const getEc2TransitGatewayAttachment: typeof import("./getEc2TransitGatewayAttachment").getEc2TransitGatewayAttachment = null as any;
export const getEc2TransitGatewayAttachmentOutput: typeof import("./getEc2TransitGatewayAttachment").getEc2TransitGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayAttachment","getEc2TransitGatewayAttachmentOutput"], () => require("./getEc2TransitGatewayAttachment"));

export { GetEc2TransitGatewayAttachmentsArgs, GetEc2TransitGatewayAttachmentsResult, GetEc2TransitGatewayAttachmentsOutputArgs } from "./getEc2TransitGatewayAttachments";
export const getEc2TransitGatewayAttachments: typeof import("./getEc2TransitGatewayAttachments").getEc2TransitGatewayAttachments = null as any;
export const getEc2TransitGatewayAttachmentsOutput: typeof import("./getEc2TransitGatewayAttachments").getEc2TransitGatewayAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayAttachments","getEc2TransitGatewayAttachmentsOutput"], () => require("./getEc2TransitGatewayAttachments"));

export { GetEc2TransitGatewayConnectArgs, GetEc2TransitGatewayConnectResult, GetEc2TransitGatewayConnectOutputArgs } from "./getEc2TransitGatewayConnect";
export const getEc2TransitGatewayConnect: typeof import("./getEc2TransitGatewayConnect").getEc2TransitGatewayConnect = null as any;
export const getEc2TransitGatewayConnectOutput: typeof import("./getEc2TransitGatewayConnect").getEc2TransitGatewayConnectOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayConnect","getEc2TransitGatewayConnectOutput"], () => require("./getEc2TransitGatewayConnect"));

export { GetEc2TransitGatewayConnectPeerArgs, GetEc2TransitGatewayConnectPeerResult, GetEc2TransitGatewayConnectPeerOutputArgs } from "./getEc2TransitGatewayConnectPeer";
export const getEc2TransitGatewayConnectPeer: typeof import("./getEc2TransitGatewayConnectPeer").getEc2TransitGatewayConnectPeer = null as any;
export const getEc2TransitGatewayConnectPeerOutput: typeof import("./getEc2TransitGatewayConnectPeer").getEc2TransitGatewayConnectPeerOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayConnectPeer","getEc2TransitGatewayConnectPeerOutput"], () => require("./getEc2TransitGatewayConnectPeer"));

export { GetEc2TransitGatewayDxGatewayAttachmentArgs, GetEc2TransitGatewayDxGatewayAttachmentResult, GetEc2TransitGatewayDxGatewayAttachmentOutputArgs } from "./getEc2TransitGatewayDxGatewayAttachment";
export const getEc2TransitGatewayDxGatewayAttachment: typeof import("./getEc2TransitGatewayDxGatewayAttachment").getEc2TransitGatewayDxGatewayAttachment = null as any;
export const getEc2TransitGatewayDxGatewayAttachmentOutput: typeof import("./getEc2TransitGatewayDxGatewayAttachment").getEc2TransitGatewayDxGatewayAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayDxGatewayAttachment","getEc2TransitGatewayDxGatewayAttachmentOutput"], () => require("./getEc2TransitGatewayDxGatewayAttachment"));

export { GetEc2TransitGatewayMulticastDomainArgs, GetEc2TransitGatewayMulticastDomainResult, GetEc2TransitGatewayMulticastDomainOutputArgs } from "./getEc2TransitGatewayMulticastDomain";
export const getEc2TransitGatewayMulticastDomain: typeof import("./getEc2TransitGatewayMulticastDomain").getEc2TransitGatewayMulticastDomain = null as any;
export const getEc2TransitGatewayMulticastDomainOutput: typeof import("./getEc2TransitGatewayMulticastDomain").getEc2TransitGatewayMulticastDomainOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayMulticastDomain","getEc2TransitGatewayMulticastDomainOutput"], () => require("./getEc2TransitGatewayMulticastDomain"));

export { GetEc2TransitGatewayPeeringAttachmentArgs, GetEc2TransitGatewayPeeringAttachmentResult, GetEc2TransitGatewayPeeringAttachmentOutputArgs } from "./getEc2TransitGatewayPeeringAttachment";
export const getEc2TransitGatewayPeeringAttachment: typeof import("./getEc2TransitGatewayPeeringAttachment").getEc2TransitGatewayPeeringAttachment = null as any;
export const getEc2TransitGatewayPeeringAttachmentOutput: typeof import("./getEc2TransitGatewayPeeringAttachment").getEc2TransitGatewayPeeringAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayPeeringAttachment","getEc2TransitGatewayPeeringAttachmentOutput"], () => require("./getEc2TransitGatewayPeeringAttachment"));

export { GetEc2TransitGatewayPeeringAttachmentsArgs, GetEc2TransitGatewayPeeringAttachmentsResult, GetEc2TransitGatewayPeeringAttachmentsOutputArgs } from "./getEc2TransitGatewayPeeringAttachments";
export const getEc2TransitGatewayPeeringAttachments: typeof import("./getEc2TransitGatewayPeeringAttachments").getEc2TransitGatewayPeeringAttachments = null as any;
export const getEc2TransitGatewayPeeringAttachmentsOutput: typeof import("./getEc2TransitGatewayPeeringAttachments").getEc2TransitGatewayPeeringAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayPeeringAttachments","getEc2TransitGatewayPeeringAttachmentsOutput"], () => require("./getEc2TransitGatewayPeeringAttachments"));

export { GetEc2TransitGatewayRouteTableArgs, GetEc2TransitGatewayRouteTableResult, GetEc2TransitGatewayRouteTableOutputArgs } from "./getEc2TransitGatewayRouteTable";
export const getEc2TransitGatewayRouteTable: typeof import("./getEc2TransitGatewayRouteTable").getEc2TransitGatewayRouteTable = null as any;
export const getEc2TransitGatewayRouteTableOutput: typeof import("./getEc2TransitGatewayRouteTable").getEc2TransitGatewayRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTable","getEc2TransitGatewayRouteTableOutput"], () => require("./getEc2TransitGatewayRouteTable"));

export { GetEc2TransitGatewayRouteTableAssociationsArgs, GetEc2TransitGatewayRouteTableAssociationsResult, GetEc2TransitGatewayRouteTableAssociationsOutputArgs } from "./getEc2TransitGatewayRouteTableAssociations";
export const getEc2TransitGatewayRouteTableAssociations: typeof import("./getEc2TransitGatewayRouteTableAssociations").getEc2TransitGatewayRouteTableAssociations = null as any;
export const getEc2TransitGatewayRouteTableAssociationsOutput: typeof import("./getEc2TransitGatewayRouteTableAssociations").getEc2TransitGatewayRouteTableAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTableAssociations","getEc2TransitGatewayRouteTableAssociationsOutput"], () => require("./getEc2TransitGatewayRouteTableAssociations"));

export { GetEc2TransitGatewayRouteTablePropagationsArgs, GetEc2TransitGatewayRouteTablePropagationsResult, GetEc2TransitGatewayRouteTablePropagationsOutputArgs } from "./getEc2TransitGatewayRouteTablePropagations";
export const getEc2TransitGatewayRouteTablePropagations: typeof import("./getEc2TransitGatewayRouteTablePropagations").getEc2TransitGatewayRouteTablePropagations = null as any;
export const getEc2TransitGatewayRouteTablePropagationsOutput: typeof import("./getEc2TransitGatewayRouteTablePropagations").getEc2TransitGatewayRouteTablePropagationsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTablePropagations","getEc2TransitGatewayRouteTablePropagationsOutput"], () => require("./getEc2TransitGatewayRouteTablePropagations"));

export { GetEc2TransitGatewayRouteTableRoutesArgs, GetEc2TransitGatewayRouteTableRoutesResult, GetEc2TransitGatewayRouteTableRoutesOutputArgs } from "./getEc2TransitGatewayRouteTableRoutes";
export const getEc2TransitGatewayRouteTableRoutes: typeof import("./getEc2TransitGatewayRouteTableRoutes").getEc2TransitGatewayRouteTableRoutes = null as any;
export const getEc2TransitGatewayRouteTableRoutesOutput: typeof import("./getEc2TransitGatewayRouteTableRoutes").getEc2TransitGatewayRouteTableRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTableRoutes","getEc2TransitGatewayRouteTableRoutesOutput"], () => require("./getEc2TransitGatewayRouteTableRoutes"));

export { GetEc2TransitGatewayRouteTablesArgs, GetEc2TransitGatewayRouteTablesResult, GetEc2TransitGatewayRouteTablesOutputArgs } from "./getEc2TransitGatewayRouteTables";
export const getEc2TransitGatewayRouteTables: typeof import("./getEc2TransitGatewayRouteTables").getEc2TransitGatewayRouteTables = null as any;
export const getEc2TransitGatewayRouteTablesOutput: typeof import("./getEc2TransitGatewayRouteTables").getEc2TransitGatewayRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayRouteTables","getEc2TransitGatewayRouteTablesOutput"], () => require("./getEc2TransitGatewayRouteTables"));

export { GetEc2TransitGatewayVpcAttachmentArgs, GetEc2TransitGatewayVpcAttachmentResult, GetEc2TransitGatewayVpcAttachmentOutputArgs } from "./getEc2TransitGatewayVpcAttachment";
export const getEc2TransitGatewayVpcAttachment: typeof import("./getEc2TransitGatewayVpcAttachment").getEc2TransitGatewayVpcAttachment = null as any;
export const getEc2TransitGatewayVpcAttachmentOutput: typeof import("./getEc2TransitGatewayVpcAttachment").getEc2TransitGatewayVpcAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayVpcAttachment","getEc2TransitGatewayVpcAttachmentOutput"], () => require("./getEc2TransitGatewayVpcAttachment"));

export { GetEc2TransitGatewayVpcAttachmentsArgs, GetEc2TransitGatewayVpcAttachmentsResult, GetEc2TransitGatewayVpcAttachmentsOutputArgs } from "./getEc2TransitGatewayVpcAttachments";
export const getEc2TransitGatewayVpcAttachments: typeof import("./getEc2TransitGatewayVpcAttachments").getEc2TransitGatewayVpcAttachments = null as any;
export const getEc2TransitGatewayVpcAttachmentsOutput: typeof import("./getEc2TransitGatewayVpcAttachments").getEc2TransitGatewayVpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayVpcAttachments","getEc2TransitGatewayVpcAttachmentsOutput"], () => require("./getEc2TransitGatewayVpcAttachments"));

export { GetEc2TransitGatewayVpnAttachmentArgs, GetEc2TransitGatewayVpnAttachmentResult, GetEc2TransitGatewayVpnAttachmentOutputArgs } from "./getEc2TransitGatewayVpnAttachment";
export const getEc2TransitGatewayVpnAttachment: typeof import("./getEc2TransitGatewayVpnAttachment").getEc2TransitGatewayVpnAttachment = null as any;
export const getEc2TransitGatewayVpnAttachmentOutput: typeof import("./getEc2TransitGatewayVpnAttachment").getEc2TransitGatewayVpnAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getEc2TransitGatewayVpnAttachment","getEc2TransitGatewayVpnAttachmentOutput"], () => require("./getEc2TransitGatewayVpnAttachment"));

export { GetEcrAuthorizationTokenArgs, GetEcrAuthorizationTokenResult, GetEcrAuthorizationTokenOutputArgs } from "./getEcrAuthorizationToken";
export const getEcrAuthorizationToken: typeof import("./getEcrAuthorizationToken").getEcrAuthorizationToken = null as any;
export const getEcrAuthorizationTokenOutput: typeof import("./getEcrAuthorizationToken").getEcrAuthorizationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getEcrAuthorizationToken","getEcrAuthorizationTokenOutput"], () => require("./getEcrAuthorizationToken"));

export { GetEcrImageArgs, GetEcrImageResult, GetEcrImageOutputArgs } from "./getEcrImage";
export const getEcrImage: typeof import("./getEcrImage").getEcrImage = null as any;
export const getEcrImageOutput: typeof import("./getEcrImage").getEcrImageOutput = null as any;
utilities.lazyLoad(exports, ["getEcrImage","getEcrImageOutput"], () => require("./getEcrImage"));

export { GetEcrLifecyclePolicyDocumentArgs, GetEcrLifecyclePolicyDocumentResult, GetEcrLifecyclePolicyDocumentOutputArgs } from "./getEcrLifecyclePolicyDocument";
export const getEcrLifecyclePolicyDocument: typeof import("./getEcrLifecyclePolicyDocument").getEcrLifecyclePolicyDocument = null as any;
export const getEcrLifecyclePolicyDocumentOutput: typeof import("./getEcrLifecyclePolicyDocument").getEcrLifecyclePolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getEcrLifecyclePolicyDocument","getEcrLifecyclePolicyDocumentOutput"], () => require("./getEcrLifecyclePolicyDocument"));

export { GetEcrPullThroughCacheRuleArgs, GetEcrPullThroughCacheRuleResult, GetEcrPullThroughCacheRuleOutputArgs } from "./getEcrPullThroughCacheRule";
export const getEcrPullThroughCacheRule: typeof import("./getEcrPullThroughCacheRule").getEcrPullThroughCacheRule = null as any;
export const getEcrPullThroughCacheRuleOutput: typeof import("./getEcrPullThroughCacheRule").getEcrPullThroughCacheRuleOutput = null as any;
utilities.lazyLoad(exports, ["getEcrPullThroughCacheRule","getEcrPullThroughCacheRuleOutput"], () => require("./getEcrPullThroughCacheRule"));

export { GetEcrRepositoriesResult } from "./getEcrRepositories";
export const getEcrRepositories: typeof import("./getEcrRepositories").getEcrRepositories = null as any;
export const getEcrRepositoriesOutput: typeof import("./getEcrRepositories").getEcrRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepositories","getEcrRepositoriesOutput"], () => require("./getEcrRepositories"));

export { GetEcrRepositoryArgs, GetEcrRepositoryResult, GetEcrRepositoryOutputArgs } from "./getEcrRepository";
export const getEcrRepository: typeof import("./getEcrRepository").getEcrRepository = null as any;
export const getEcrRepositoryOutput: typeof import("./getEcrRepository").getEcrRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepository","getEcrRepositoryOutput"], () => require("./getEcrRepository"));

export { GetEcrRepositoryCreationTemplateArgs, GetEcrRepositoryCreationTemplateResult, GetEcrRepositoryCreationTemplateOutputArgs } from "./getEcrRepositoryCreationTemplate";
export const getEcrRepositoryCreationTemplate: typeof import("./getEcrRepositoryCreationTemplate").getEcrRepositoryCreationTemplate = null as any;
export const getEcrRepositoryCreationTemplateOutput: typeof import("./getEcrRepositoryCreationTemplate").getEcrRepositoryCreationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEcrRepositoryCreationTemplate","getEcrRepositoryCreationTemplateOutput"], () => require("./getEcrRepositoryCreationTemplate"));

export { GetEcrpublicAuthorizationTokenArgs, GetEcrpublicAuthorizationTokenResult, GetEcrpublicAuthorizationTokenOutputArgs } from "./getEcrpublicAuthorizationToken";
export const getEcrpublicAuthorizationToken: typeof import("./getEcrpublicAuthorizationToken").getEcrpublicAuthorizationToken = null as any;
export const getEcrpublicAuthorizationTokenOutput: typeof import("./getEcrpublicAuthorizationToken").getEcrpublicAuthorizationTokenOutput = null as any;
utilities.lazyLoad(exports, ["getEcrpublicAuthorizationToken","getEcrpublicAuthorizationTokenOutput"], () => require("./getEcrpublicAuthorizationToken"));

export { GetEcsClusterArgs, GetEcsClusterResult, GetEcsClusterOutputArgs } from "./getEcsCluster";
export const getEcsCluster: typeof import("./getEcsCluster").getEcsCluster = null as any;
export const getEcsClusterOutput: typeof import("./getEcsCluster").getEcsClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEcsCluster","getEcsClusterOutput"], () => require("./getEcsCluster"));

export { GetEcsContainerDefinitionArgs, GetEcsContainerDefinitionResult, GetEcsContainerDefinitionOutputArgs } from "./getEcsContainerDefinition";
export const getEcsContainerDefinition: typeof import("./getEcsContainerDefinition").getEcsContainerDefinition = null as any;
export const getEcsContainerDefinitionOutput: typeof import("./getEcsContainerDefinition").getEcsContainerDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getEcsContainerDefinition","getEcsContainerDefinitionOutput"], () => require("./getEcsContainerDefinition"));

export { GetEcsServiceArgs, GetEcsServiceResult, GetEcsServiceOutputArgs } from "./getEcsService";
export const getEcsService: typeof import("./getEcsService").getEcsService = null as any;
export const getEcsServiceOutput: typeof import("./getEcsService").getEcsServiceOutput = null as any;
utilities.lazyLoad(exports, ["getEcsService","getEcsServiceOutput"], () => require("./getEcsService"));

export { GetEcsTaskDefinitionArgs, GetEcsTaskDefinitionResult, GetEcsTaskDefinitionOutputArgs } from "./getEcsTaskDefinition";
export const getEcsTaskDefinition: typeof import("./getEcsTaskDefinition").getEcsTaskDefinition = null as any;
export const getEcsTaskDefinitionOutput: typeof import("./getEcsTaskDefinition").getEcsTaskDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getEcsTaskDefinition","getEcsTaskDefinitionOutput"], () => require("./getEcsTaskDefinition"));

export { GetEcsTaskExecutionArgs, GetEcsTaskExecutionResult, GetEcsTaskExecutionOutputArgs } from "./getEcsTaskExecution";
export const getEcsTaskExecution: typeof import("./getEcsTaskExecution").getEcsTaskExecution = null as any;
export const getEcsTaskExecutionOutput: typeof import("./getEcsTaskExecution").getEcsTaskExecutionOutput = null as any;
utilities.lazyLoad(exports, ["getEcsTaskExecution","getEcsTaskExecutionOutput"], () => require("./getEcsTaskExecution"));

export { GetEfsAccessPointArgs, GetEfsAccessPointResult, GetEfsAccessPointOutputArgs } from "./getEfsAccessPoint";
export const getEfsAccessPoint: typeof import("./getEfsAccessPoint").getEfsAccessPoint = null as any;
export const getEfsAccessPointOutput: typeof import("./getEfsAccessPoint").getEfsAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getEfsAccessPoint","getEfsAccessPointOutput"], () => require("./getEfsAccessPoint"));

export { GetEfsAccessPointsArgs, GetEfsAccessPointsResult, GetEfsAccessPointsOutputArgs } from "./getEfsAccessPoints";
export const getEfsAccessPoints: typeof import("./getEfsAccessPoints").getEfsAccessPoints = null as any;
export const getEfsAccessPointsOutput: typeof import("./getEfsAccessPoints").getEfsAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getEfsAccessPoints","getEfsAccessPointsOutput"], () => require("./getEfsAccessPoints"));

export { GetEfsFileSystemArgs, GetEfsFileSystemResult, GetEfsFileSystemOutputArgs } from "./getEfsFileSystem";
export const getEfsFileSystem: typeof import("./getEfsFileSystem").getEfsFileSystem = null as any;
export const getEfsFileSystemOutput: typeof import("./getEfsFileSystem").getEfsFileSystemOutput = null as any;
utilities.lazyLoad(exports, ["getEfsFileSystem","getEfsFileSystemOutput"], () => require("./getEfsFileSystem"));

export { GetEfsMountTargetArgs, GetEfsMountTargetResult, GetEfsMountTargetOutputArgs } from "./getEfsMountTarget";
export const getEfsMountTarget: typeof import("./getEfsMountTarget").getEfsMountTarget = null as any;
export const getEfsMountTargetOutput: typeof import("./getEfsMountTarget").getEfsMountTargetOutput = null as any;
utilities.lazyLoad(exports, ["getEfsMountTarget","getEfsMountTargetOutput"], () => require("./getEfsMountTarget"));

export { GetEipArgs, GetEipResult, GetEipOutputArgs } from "./getEip";
export const getEip: typeof import("./getEip").getEip = null as any;
export const getEipOutput: typeof import("./getEip").getEipOutput = null as any;
utilities.lazyLoad(exports, ["getEip","getEipOutput"], () => require("./getEip"));

export { GetEipsArgs, GetEipsResult, GetEipsOutputArgs } from "./getEips";
export const getEips: typeof import("./getEips").getEips = null as any;
export const getEipsOutput: typeof import("./getEips").getEipsOutput = null as any;
utilities.lazyLoad(exports, ["getEips","getEipsOutput"], () => require("./getEips"));

export { GetEksAccessEntryArgs, GetEksAccessEntryResult, GetEksAccessEntryOutputArgs } from "./getEksAccessEntry";
export const getEksAccessEntry: typeof import("./getEksAccessEntry").getEksAccessEntry = null as any;
export const getEksAccessEntryOutput: typeof import("./getEksAccessEntry").getEksAccessEntryOutput = null as any;
utilities.lazyLoad(exports, ["getEksAccessEntry","getEksAccessEntryOutput"], () => require("./getEksAccessEntry"));

export { GetEksAddonArgs, GetEksAddonResult, GetEksAddonOutputArgs } from "./getEksAddon";
export const getEksAddon: typeof import("./getEksAddon").getEksAddon = null as any;
export const getEksAddonOutput: typeof import("./getEksAddon").getEksAddonOutput = null as any;
utilities.lazyLoad(exports, ["getEksAddon","getEksAddonOutput"], () => require("./getEksAddon"));

export { GetEksAddonVersionArgs, GetEksAddonVersionResult, GetEksAddonVersionOutputArgs } from "./getEksAddonVersion";
export const getEksAddonVersion: typeof import("./getEksAddonVersion").getEksAddonVersion = null as any;
export const getEksAddonVersionOutput: typeof import("./getEksAddonVersion").getEksAddonVersionOutput = null as any;
utilities.lazyLoad(exports, ["getEksAddonVersion","getEksAddonVersionOutput"], () => require("./getEksAddonVersion"));

export { GetEksClusterArgs, GetEksClusterResult, GetEksClusterOutputArgs } from "./getEksCluster";
export const getEksCluster: typeof import("./getEksCluster").getEksCluster = null as any;
export const getEksClusterOutput: typeof import("./getEksCluster").getEksClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEksCluster","getEksClusterOutput"], () => require("./getEksCluster"));

export { GetEksClusterAuthArgs, GetEksClusterAuthResult, GetEksClusterAuthOutputArgs } from "./getEksClusterAuth";
export const getEksClusterAuth: typeof import("./getEksClusterAuth").getEksClusterAuth = null as any;
export const getEksClusterAuthOutput: typeof import("./getEksClusterAuth").getEksClusterAuthOutput = null as any;
utilities.lazyLoad(exports, ["getEksClusterAuth","getEksClusterAuthOutput"], () => require("./getEksClusterAuth"));

export { GetEksClustersArgs, GetEksClustersResult, GetEksClustersOutputArgs } from "./getEksClusters";
export const getEksClusters: typeof import("./getEksClusters").getEksClusters = null as any;
export const getEksClustersOutput: typeof import("./getEksClusters").getEksClustersOutput = null as any;
utilities.lazyLoad(exports, ["getEksClusters","getEksClustersOutput"], () => require("./getEksClusters"));

export { GetEksNodeGroupArgs, GetEksNodeGroupResult, GetEksNodeGroupOutputArgs } from "./getEksNodeGroup";
export const getEksNodeGroup: typeof import("./getEksNodeGroup").getEksNodeGroup = null as any;
export const getEksNodeGroupOutput: typeof import("./getEksNodeGroup").getEksNodeGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEksNodeGroup","getEksNodeGroupOutput"], () => require("./getEksNodeGroup"));

export { GetEksNodeGroupsArgs, GetEksNodeGroupsResult, GetEksNodeGroupsOutputArgs } from "./getEksNodeGroups";
export const getEksNodeGroups: typeof import("./getEksNodeGroups").getEksNodeGroups = null as any;
export const getEksNodeGroupsOutput: typeof import("./getEksNodeGroups").getEksNodeGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getEksNodeGroups","getEksNodeGroupsOutput"], () => require("./getEksNodeGroups"));

export { GetElasticBeanstalkApplicationArgs, GetElasticBeanstalkApplicationResult, GetElasticBeanstalkApplicationOutputArgs } from "./getElasticBeanstalkApplication";
export const getElasticBeanstalkApplication: typeof import("./getElasticBeanstalkApplication").getElasticBeanstalkApplication = null as any;
export const getElasticBeanstalkApplicationOutput: typeof import("./getElasticBeanstalkApplication").getElasticBeanstalkApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getElasticBeanstalkApplication","getElasticBeanstalkApplicationOutput"], () => require("./getElasticBeanstalkApplication"));

export { GetElasticBeanstalkHostedZoneArgs, GetElasticBeanstalkHostedZoneResult, GetElasticBeanstalkHostedZoneOutputArgs } from "./getElasticBeanstalkHostedZone";
export const getElasticBeanstalkHostedZone: typeof import("./getElasticBeanstalkHostedZone").getElasticBeanstalkHostedZone = null as any;
export const getElasticBeanstalkHostedZoneOutput: typeof import("./getElasticBeanstalkHostedZone").getElasticBeanstalkHostedZoneOutput = null as any;
utilities.lazyLoad(exports, ["getElasticBeanstalkHostedZone","getElasticBeanstalkHostedZoneOutput"], () => require("./getElasticBeanstalkHostedZone"));

export { GetElasticBeanstalkSolutionStackArgs, GetElasticBeanstalkSolutionStackResult, GetElasticBeanstalkSolutionStackOutputArgs } from "./getElasticBeanstalkSolutionStack";
export const getElasticBeanstalkSolutionStack: typeof import("./getElasticBeanstalkSolutionStack").getElasticBeanstalkSolutionStack = null as any;
export const getElasticBeanstalkSolutionStackOutput: typeof import("./getElasticBeanstalkSolutionStack").getElasticBeanstalkSolutionStackOutput = null as any;
utilities.lazyLoad(exports, ["getElasticBeanstalkSolutionStack","getElasticBeanstalkSolutionStackOutput"], () => require("./getElasticBeanstalkSolutionStack"));

export { GetElasticacheClusterArgs, GetElasticacheClusterResult, GetElasticacheClusterOutputArgs } from "./getElasticacheCluster";
export const getElasticacheCluster: typeof import("./getElasticacheCluster").getElasticacheCluster = null as any;
export const getElasticacheClusterOutput: typeof import("./getElasticacheCluster").getElasticacheClusterOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheCluster","getElasticacheClusterOutput"], () => require("./getElasticacheCluster"));

export { GetElasticacheReplicationGroupArgs, GetElasticacheReplicationGroupResult, GetElasticacheReplicationGroupOutputArgs } from "./getElasticacheReplicationGroup";
export const getElasticacheReplicationGroup: typeof import("./getElasticacheReplicationGroup").getElasticacheReplicationGroup = null as any;
export const getElasticacheReplicationGroupOutput: typeof import("./getElasticacheReplicationGroup").getElasticacheReplicationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheReplicationGroup","getElasticacheReplicationGroupOutput"], () => require("./getElasticacheReplicationGroup"));

export { GetElasticacheSubnetGroupArgs, GetElasticacheSubnetGroupResult, GetElasticacheSubnetGroupOutputArgs } from "./getElasticacheSubnetGroup";
export const getElasticacheSubnetGroup: typeof import("./getElasticacheSubnetGroup").getElasticacheSubnetGroup = null as any;
export const getElasticacheSubnetGroupOutput: typeof import("./getElasticacheSubnetGroup").getElasticacheSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheSubnetGroup","getElasticacheSubnetGroupOutput"], () => require("./getElasticacheSubnetGroup"));

export { GetElasticacheUserArgs, GetElasticacheUserResult, GetElasticacheUserOutputArgs } from "./getElasticacheUser";
export const getElasticacheUser: typeof import("./getElasticacheUser").getElasticacheUser = null as any;
export const getElasticacheUserOutput: typeof import("./getElasticacheUser").getElasticacheUserOutput = null as any;
utilities.lazyLoad(exports, ["getElasticacheUser","getElasticacheUserOutput"], () => require("./getElasticacheUser"));

export { GetElasticsearchDomainArgs, GetElasticsearchDomainResult, GetElasticsearchDomainOutputArgs } from "./getElasticsearchDomain";
export const getElasticsearchDomain: typeof import("./getElasticsearchDomain").getElasticsearchDomain = null as any;
export const getElasticsearchDomainOutput: typeof import("./getElasticsearchDomain").getElasticsearchDomainOutput = null as any;
utilities.lazyLoad(exports, ["getElasticsearchDomain","getElasticsearchDomainOutput"], () => require("./getElasticsearchDomain"));

export { GetElbArgs, GetElbResult, GetElbOutputArgs } from "./getElb";
export const getElb: typeof import("./getElb").getElb = null as any;
export const getElbOutput: typeof import("./getElb").getElbOutput = null as any;
utilities.lazyLoad(exports, ["getElb","getElbOutput"], () => require("./getElb"));

export { GetElbHostedZoneIdArgs, GetElbHostedZoneIdResult, GetElbHostedZoneIdOutputArgs } from "./getElbHostedZoneId";
export const getElbHostedZoneId: typeof import("./getElbHostedZoneId").getElbHostedZoneId = null as any;
export const getElbHostedZoneIdOutput: typeof import("./getElbHostedZoneId").getElbHostedZoneIdOutput = null as any;
utilities.lazyLoad(exports, ["getElbHostedZoneId","getElbHostedZoneIdOutput"], () => require("./getElbHostedZoneId"));

export { GetElbServiceAccountArgs, GetElbServiceAccountResult, GetElbServiceAccountOutputArgs } from "./getElbServiceAccount";
export const getElbServiceAccount: typeof import("./getElbServiceAccount").getElbServiceAccount = null as any;
export const getElbServiceAccountOutput: typeof import("./getElbServiceAccount").getElbServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getElbServiceAccount","getElbServiceAccountOutput"], () => require("./getElbServiceAccount"));

export { GetEmrReleaseLabelsArgs, GetEmrReleaseLabelsResult, GetEmrReleaseLabelsOutputArgs } from "./getEmrReleaseLabels";
export const getEmrReleaseLabels: typeof import("./getEmrReleaseLabels").getEmrReleaseLabels = null as any;
export const getEmrReleaseLabelsOutput: typeof import("./getEmrReleaseLabels").getEmrReleaseLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getEmrReleaseLabels","getEmrReleaseLabelsOutput"], () => require("./getEmrReleaseLabels"));

export { GetEmrSupportedInstanceTypesArgs, GetEmrSupportedInstanceTypesResult, GetEmrSupportedInstanceTypesOutputArgs } from "./getEmrSupportedInstanceTypes";
export const getEmrSupportedInstanceTypes: typeof import("./getEmrSupportedInstanceTypes").getEmrSupportedInstanceTypes = null as any;
export const getEmrSupportedInstanceTypesOutput: typeof import("./getEmrSupportedInstanceTypes").getEmrSupportedInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getEmrSupportedInstanceTypes","getEmrSupportedInstanceTypesOutput"], () => require("./getEmrSupportedInstanceTypes"));

export { GetEmrcontainersVirtualClusterArgs, GetEmrcontainersVirtualClusterResult, GetEmrcontainersVirtualClusterOutputArgs } from "./getEmrcontainersVirtualCluster";
export const getEmrcontainersVirtualCluster: typeof import("./getEmrcontainersVirtualCluster").getEmrcontainersVirtualCluster = null as any;
export const getEmrcontainersVirtualClusterOutput: typeof import("./getEmrcontainersVirtualCluster").getEmrcontainersVirtualClusterOutput = null as any;
utilities.lazyLoad(exports, ["getEmrcontainersVirtualCluster","getEmrcontainersVirtualClusterOutput"], () => require("./getEmrcontainersVirtualCluster"));

export { GetFsxOntapFileSystemArgs, GetFsxOntapFileSystemResult, GetFsxOntapFileSystemOutputArgs } from "./getFsxOntapFileSystem";
export const getFsxOntapFileSystem: typeof import("./getFsxOntapFileSystem").getFsxOntapFileSystem = null as any;
export const getFsxOntapFileSystemOutput: typeof import("./getFsxOntapFileSystem").getFsxOntapFileSystemOutput = null as any;
utilities.lazyLoad(exports, ["getFsxOntapFileSystem","getFsxOntapFileSystemOutput"], () => require("./getFsxOntapFileSystem"));

export { GetFsxOntapStorageVirtualMachineArgs, GetFsxOntapStorageVirtualMachineResult, GetFsxOntapStorageVirtualMachineOutputArgs } from "./getFsxOntapStorageVirtualMachine";
export const getFsxOntapStorageVirtualMachine: typeof import("./getFsxOntapStorageVirtualMachine").getFsxOntapStorageVirtualMachine = null as any;
export const getFsxOntapStorageVirtualMachineOutput: typeof import("./getFsxOntapStorageVirtualMachine").getFsxOntapStorageVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getFsxOntapStorageVirtualMachine","getFsxOntapStorageVirtualMachineOutput"], () => require("./getFsxOntapStorageVirtualMachine"));

export { GetFsxOntapStorageVirtualMachinesArgs, GetFsxOntapStorageVirtualMachinesResult, GetFsxOntapStorageVirtualMachinesOutputArgs } from "./getFsxOntapStorageVirtualMachines";
export const getFsxOntapStorageVirtualMachines: typeof import("./getFsxOntapStorageVirtualMachines").getFsxOntapStorageVirtualMachines = null as any;
export const getFsxOntapStorageVirtualMachinesOutput: typeof import("./getFsxOntapStorageVirtualMachines").getFsxOntapStorageVirtualMachinesOutput = null as any;
utilities.lazyLoad(exports, ["getFsxOntapStorageVirtualMachines","getFsxOntapStorageVirtualMachinesOutput"], () => require("./getFsxOntapStorageVirtualMachines"));

export { GetFsxOpenzfsSnapshotArgs, GetFsxOpenzfsSnapshotResult, GetFsxOpenzfsSnapshotOutputArgs } from "./getFsxOpenzfsSnapshot";
export const getFsxOpenzfsSnapshot: typeof import("./getFsxOpenzfsSnapshot").getFsxOpenzfsSnapshot = null as any;
export const getFsxOpenzfsSnapshotOutput: typeof import("./getFsxOpenzfsSnapshot").getFsxOpenzfsSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getFsxOpenzfsSnapshot","getFsxOpenzfsSnapshotOutput"], () => require("./getFsxOpenzfsSnapshot"));

export { GetFsxWindowsFileSystemArgs, GetFsxWindowsFileSystemResult, GetFsxWindowsFileSystemOutputArgs } from "./getFsxWindowsFileSystem";
export const getFsxWindowsFileSystem: typeof import("./getFsxWindowsFileSystem").getFsxWindowsFileSystem = null as any;
export const getFsxWindowsFileSystemOutput: typeof import("./getFsxWindowsFileSystem").getFsxWindowsFileSystemOutput = null as any;
utilities.lazyLoad(exports, ["getFsxWindowsFileSystem","getFsxWindowsFileSystemOutput"], () => require("./getFsxWindowsFileSystem"));

export { GetGlobalacceleratorAcceleratorArgs, GetGlobalacceleratorAcceleratorResult, GetGlobalacceleratorAcceleratorOutputArgs } from "./getGlobalacceleratorAccelerator";
export const getGlobalacceleratorAccelerator: typeof import("./getGlobalacceleratorAccelerator").getGlobalacceleratorAccelerator = null as any;
export const getGlobalacceleratorAcceleratorOutput: typeof import("./getGlobalacceleratorAccelerator").getGlobalacceleratorAcceleratorOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorAccelerator","getGlobalacceleratorAcceleratorOutput"], () => require("./getGlobalacceleratorAccelerator"));

export { GetGlobalacceleratorCustomRoutingAcceleratorArgs, GetGlobalacceleratorCustomRoutingAcceleratorResult, GetGlobalacceleratorCustomRoutingAcceleratorOutputArgs } from "./getGlobalacceleratorCustomRoutingAccelerator";
export const getGlobalacceleratorCustomRoutingAccelerator: typeof import("./getGlobalacceleratorCustomRoutingAccelerator").getGlobalacceleratorCustomRoutingAccelerator = null as any;
export const getGlobalacceleratorCustomRoutingAcceleratorOutput: typeof import("./getGlobalacceleratorCustomRoutingAccelerator").getGlobalacceleratorCustomRoutingAcceleratorOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalacceleratorCustomRoutingAccelerator","getGlobalacceleratorCustomRoutingAcceleratorOutput"], () => require("./getGlobalacceleratorCustomRoutingAccelerator"));

export { GetGlueCatalogTableArgs, GetGlueCatalogTableResult, GetGlueCatalogTableOutputArgs } from "./getGlueCatalogTable";
export const getGlueCatalogTable: typeof import("./getGlueCatalogTable").getGlueCatalogTable = null as any;
export const getGlueCatalogTableOutput: typeof import("./getGlueCatalogTable").getGlueCatalogTableOutput = null as any;
utilities.lazyLoad(exports, ["getGlueCatalogTable","getGlueCatalogTableOutput"], () => require("./getGlueCatalogTable"));

export { GetGlueConnectionArgs, GetGlueConnectionResult, GetGlueConnectionOutputArgs } from "./getGlueConnection";
export const getGlueConnection: typeof import("./getGlueConnection").getGlueConnection = null as any;
export const getGlueConnectionOutput: typeof import("./getGlueConnection").getGlueConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getGlueConnection","getGlueConnectionOutput"], () => require("./getGlueConnection"));

export { GetGlueDataCatalogEncryptionSettingsArgs, GetGlueDataCatalogEncryptionSettingsResult, GetGlueDataCatalogEncryptionSettingsOutputArgs } from "./getGlueDataCatalogEncryptionSettings";
export const getGlueDataCatalogEncryptionSettings: typeof import("./getGlueDataCatalogEncryptionSettings").getGlueDataCatalogEncryptionSettings = null as any;
export const getGlueDataCatalogEncryptionSettingsOutput: typeof import("./getGlueDataCatalogEncryptionSettings").getGlueDataCatalogEncryptionSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getGlueDataCatalogEncryptionSettings","getGlueDataCatalogEncryptionSettingsOutput"], () => require("./getGlueDataCatalogEncryptionSettings"));

export { GetGlueScriptArgs, GetGlueScriptResult, GetGlueScriptOutputArgs } from "./getGlueScript";
export const getGlueScript: typeof import("./getGlueScript").getGlueScript = null as any;
export const getGlueScriptOutput: typeof import("./getGlueScript").getGlueScriptOutput = null as any;
utilities.lazyLoad(exports, ["getGlueScript","getGlueScriptOutput"], () => require("./getGlueScript"));

export { GetGrafanaWorkspaceArgs, GetGrafanaWorkspaceResult, GetGrafanaWorkspaceOutputArgs } from "./getGrafanaWorkspace";
export const getGrafanaWorkspace: typeof import("./getGrafanaWorkspace").getGrafanaWorkspace = null as any;
export const getGrafanaWorkspaceOutput: typeof import("./getGrafanaWorkspace").getGrafanaWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getGrafanaWorkspace","getGrafanaWorkspaceOutput"], () => require("./getGrafanaWorkspace"));

export { GetGuarddutyDetectorArgs, GetGuarddutyDetectorResult, GetGuarddutyDetectorOutputArgs } from "./getGuarddutyDetector";
export const getGuarddutyDetector: typeof import("./getGuarddutyDetector").getGuarddutyDetector = null as any;
export const getGuarddutyDetectorOutput: typeof import("./getGuarddutyDetector").getGuarddutyDetectorOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyDetector","getGuarddutyDetectorOutput"], () => require("./getGuarddutyDetector"));

export { GetGuarddutyFindingIdsArgs, GetGuarddutyFindingIdsResult, GetGuarddutyFindingIdsOutputArgs } from "./getGuarddutyFindingIds";
export const getGuarddutyFindingIds: typeof import("./getGuarddutyFindingIds").getGuarddutyFindingIds = null as any;
export const getGuarddutyFindingIdsOutput: typeof import("./getGuarddutyFindingIds").getGuarddutyFindingIdsOutput = null as any;
utilities.lazyLoad(exports, ["getGuarddutyFindingIds","getGuarddutyFindingIdsOutput"], () => require("./getGuarddutyFindingIds"));

export { GetIamAccessKeysArgs, GetIamAccessKeysResult, GetIamAccessKeysOutputArgs } from "./getIamAccessKeys";
export const getIamAccessKeys: typeof import("./getIamAccessKeys").getIamAccessKeys = null as any;
export const getIamAccessKeysOutput: typeof import("./getIamAccessKeys").getIamAccessKeysOutput = null as any;
utilities.lazyLoad(exports, ["getIamAccessKeys","getIamAccessKeysOutput"], () => require("./getIamAccessKeys"));

export { GetIamAccountAliasArgs, GetIamAccountAliasResult, GetIamAccountAliasOutputArgs } from "./getIamAccountAlias";
export const getIamAccountAlias: typeof import("./getIamAccountAlias").getIamAccountAlias = null as any;
export const getIamAccountAliasOutput: typeof import("./getIamAccountAlias").getIamAccountAliasOutput = null as any;
utilities.lazyLoad(exports, ["getIamAccountAlias","getIamAccountAliasOutput"], () => require("./getIamAccountAlias"));

export { GetIamGroupArgs, GetIamGroupResult, GetIamGroupOutputArgs } from "./getIamGroup";
export const getIamGroup: typeof import("./getIamGroup").getIamGroup = null as any;
export const getIamGroupOutput: typeof import("./getIamGroup").getIamGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroup","getIamGroupOutput"], () => require("./getIamGroup"));

export { GetIamInstanceProfileArgs, GetIamInstanceProfileResult, GetIamInstanceProfileOutputArgs } from "./getIamInstanceProfile";
export const getIamInstanceProfile: typeof import("./getIamInstanceProfile").getIamInstanceProfile = null as any;
export const getIamInstanceProfileOutput: typeof import("./getIamInstanceProfile").getIamInstanceProfileOutput = null as any;
utilities.lazyLoad(exports, ["getIamInstanceProfile","getIamInstanceProfileOutput"], () => require("./getIamInstanceProfile"));

export { GetIamInstanceProfilesArgs, GetIamInstanceProfilesResult, GetIamInstanceProfilesOutputArgs } from "./getIamInstanceProfiles";
export const getIamInstanceProfiles: typeof import("./getIamInstanceProfiles").getIamInstanceProfiles = null as any;
export const getIamInstanceProfilesOutput: typeof import("./getIamInstanceProfiles").getIamInstanceProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getIamInstanceProfiles","getIamInstanceProfilesOutput"], () => require("./getIamInstanceProfiles"));

export { GetIamOpenidConnectProviderArgs, GetIamOpenidConnectProviderResult, GetIamOpenidConnectProviderOutputArgs } from "./getIamOpenidConnectProvider";
export const getIamOpenidConnectProvider: typeof import("./getIamOpenidConnectProvider").getIamOpenidConnectProvider = null as any;
export const getIamOpenidConnectProviderOutput: typeof import("./getIamOpenidConnectProvider").getIamOpenidConnectProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIamOpenidConnectProvider","getIamOpenidConnectProviderOutput"], () => require("./getIamOpenidConnectProvider"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetIamPolicyDocumentArgs, GetIamPolicyDocumentResult, GetIamPolicyDocumentOutputArgs } from "./getIamPolicyDocument";
export const getIamPolicyDocument: typeof import("./getIamPolicyDocument").getIamPolicyDocument = null as any;
export const getIamPolicyDocumentOutput: typeof import("./getIamPolicyDocument").getIamPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicyDocument","getIamPolicyDocumentOutput"], () => require("./getIamPolicyDocument"));

export { GetIamPrincipalPolicySimulationArgs, GetIamPrincipalPolicySimulationResult, GetIamPrincipalPolicySimulationOutputArgs } from "./getIamPrincipalPolicySimulation";
export const getIamPrincipalPolicySimulation: typeof import("./getIamPrincipalPolicySimulation").getIamPrincipalPolicySimulation = null as any;
export const getIamPrincipalPolicySimulationOutput: typeof import("./getIamPrincipalPolicySimulation").getIamPrincipalPolicySimulationOutput = null as any;
utilities.lazyLoad(exports, ["getIamPrincipalPolicySimulation","getIamPrincipalPolicySimulationOutput"], () => require("./getIamPrincipalPolicySimulation"));

export { GetIamRoleArgs, GetIamRoleResult, GetIamRoleOutputArgs } from "./getIamRole";
export const getIamRole: typeof import("./getIamRole").getIamRole = null as any;
export const getIamRoleOutput: typeof import("./getIamRole").getIamRoleOutput = null as any;
utilities.lazyLoad(exports, ["getIamRole","getIamRoleOutput"], () => require("./getIamRole"));

export { GetIamRolesArgs, GetIamRolesResult, GetIamRolesOutputArgs } from "./getIamRoles";
export const getIamRoles: typeof import("./getIamRoles").getIamRoles = null as any;
export const getIamRolesOutput: typeof import("./getIamRoles").getIamRolesOutput = null as any;
utilities.lazyLoad(exports, ["getIamRoles","getIamRolesOutput"], () => require("./getIamRoles"));

export { GetIamSamlProviderArgs, GetIamSamlProviderResult, GetIamSamlProviderOutputArgs } from "./getIamSamlProvider";
export const getIamSamlProvider: typeof import("./getIamSamlProvider").getIamSamlProvider = null as any;
export const getIamSamlProviderOutput: typeof import("./getIamSamlProvider").getIamSamlProviderOutput = null as any;
utilities.lazyLoad(exports, ["getIamSamlProvider","getIamSamlProviderOutput"], () => require("./getIamSamlProvider"));

export { GetIamServerCertificateArgs, GetIamServerCertificateResult, GetIamServerCertificateOutputArgs } from "./getIamServerCertificate";
export const getIamServerCertificate: typeof import("./getIamServerCertificate").getIamServerCertificate = null as any;
export const getIamServerCertificateOutput: typeof import("./getIamServerCertificate").getIamServerCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIamServerCertificate","getIamServerCertificateOutput"], () => require("./getIamServerCertificate"));

export { GetIamSessionContextArgs, GetIamSessionContextResult, GetIamSessionContextOutputArgs } from "./getIamSessionContext";
export const getIamSessionContext: typeof import("./getIamSessionContext").getIamSessionContext = null as any;
export const getIamSessionContextOutput: typeof import("./getIamSessionContext").getIamSessionContextOutput = null as any;
utilities.lazyLoad(exports, ["getIamSessionContext","getIamSessionContextOutput"], () => require("./getIamSessionContext"));

export { GetIamUserArgs, GetIamUserResult, GetIamUserOutputArgs } from "./getIamUser";
export const getIamUser: typeof import("./getIamUser").getIamUser = null as any;
export const getIamUserOutput: typeof import("./getIamUser").getIamUserOutput = null as any;
utilities.lazyLoad(exports, ["getIamUser","getIamUserOutput"], () => require("./getIamUser"));

export { GetIamUserSshKeyArgs, GetIamUserSshKeyResult, GetIamUserSshKeyOutputArgs } from "./getIamUserSshKey";
export const getIamUserSshKey: typeof import("./getIamUserSshKey").getIamUserSshKey = null as any;
export const getIamUserSshKeyOutput: typeof import("./getIamUserSshKey").getIamUserSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIamUserSshKey","getIamUserSshKeyOutput"], () => require("./getIamUserSshKey"));

export { GetIamUsersArgs, GetIamUsersResult, GetIamUsersOutputArgs } from "./getIamUsers";
export const getIamUsers: typeof import("./getIamUsers").getIamUsers = null as any;
export const getIamUsersOutput: typeof import("./getIamUsers").getIamUsersOutput = null as any;
utilities.lazyLoad(exports, ["getIamUsers","getIamUsersOutput"], () => require("./getIamUsers"));

export { GetIdentitystoreGroupArgs, GetIdentitystoreGroupResult, GetIdentitystoreGroupOutputArgs } from "./getIdentitystoreGroup";
export const getIdentitystoreGroup: typeof import("./getIdentitystoreGroup").getIdentitystoreGroup = null as any;
export const getIdentitystoreGroupOutput: typeof import("./getIdentitystoreGroup").getIdentitystoreGroupOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitystoreGroup","getIdentitystoreGroupOutput"], () => require("./getIdentitystoreGroup"));

export { GetIdentitystoreGroupsArgs, GetIdentitystoreGroupsResult, GetIdentitystoreGroupsOutputArgs } from "./getIdentitystoreGroups";
export const getIdentitystoreGroups: typeof import("./getIdentitystoreGroups").getIdentitystoreGroups = null as any;
export const getIdentitystoreGroupsOutput: typeof import("./getIdentitystoreGroups").getIdentitystoreGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitystoreGroups","getIdentitystoreGroupsOutput"], () => require("./getIdentitystoreGroups"));

export { GetIdentitystoreUserArgs, GetIdentitystoreUserResult, GetIdentitystoreUserOutputArgs } from "./getIdentitystoreUser";
export const getIdentitystoreUser: typeof import("./getIdentitystoreUser").getIdentitystoreUser = null as any;
export const getIdentitystoreUserOutput: typeof import("./getIdentitystoreUser").getIdentitystoreUserOutput = null as any;
utilities.lazyLoad(exports, ["getIdentitystoreUser","getIdentitystoreUserOutput"], () => require("./getIdentitystoreUser"));

export { GetImagebuilderComponentArgs, GetImagebuilderComponentResult, GetImagebuilderComponentOutputArgs } from "./getImagebuilderComponent";
export const getImagebuilderComponent: typeof import("./getImagebuilderComponent").getImagebuilderComponent = null as any;
export const getImagebuilderComponentOutput: typeof import("./getImagebuilderComponent").getImagebuilderComponentOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderComponent","getImagebuilderComponentOutput"], () => require("./getImagebuilderComponent"));

export { GetImagebuilderComponentsArgs, GetImagebuilderComponentsResult, GetImagebuilderComponentsOutputArgs } from "./getImagebuilderComponents";
export const getImagebuilderComponents: typeof import("./getImagebuilderComponents").getImagebuilderComponents = null as any;
export const getImagebuilderComponentsOutput: typeof import("./getImagebuilderComponents").getImagebuilderComponentsOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderComponents","getImagebuilderComponentsOutput"], () => require("./getImagebuilderComponents"));

export { GetImagebuilderContainerRecipeArgs, GetImagebuilderContainerRecipeResult, GetImagebuilderContainerRecipeOutputArgs } from "./getImagebuilderContainerRecipe";
export const getImagebuilderContainerRecipe: typeof import("./getImagebuilderContainerRecipe").getImagebuilderContainerRecipe = null as any;
export const getImagebuilderContainerRecipeOutput: typeof import("./getImagebuilderContainerRecipe").getImagebuilderContainerRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderContainerRecipe","getImagebuilderContainerRecipeOutput"], () => require("./getImagebuilderContainerRecipe"));

export { GetImagebuilderContainerRecipesArgs, GetImagebuilderContainerRecipesResult, GetImagebuilderContainerRecipesOutputArgs } from "./getImagebuilderContainerRecipes";
export const getImagebuilderContainerRecipes: typeof import("./getImagebuilderContainerRecipes").getImagebuilderContainerRecipes = null as any;
export const getImagebuilderContainerRecipesOutput: typeof import("./getImagebuilderContainerRecipes").getImagebuilderContainerRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderContainerRecipes","getImagebuilderContainerRecipesOutput"], () => require("./getImagebuilderContainerRecipes"));

export { GetImagebuilderDistributionConfigurationArgs, GetImagebuilderDistributionConfigurationResult, GetImagebuilderDistributionConfigurationOutputArgs } from "./getImagebuilderDistributionConfiguration";
export const getImagebuilderDistributionConfiguration: typeof import("./getImagebuilderDistributionConfiguration").getImagebuilderDistributionConfiguration = null as any;
export const getImagebuilderDistributionConfigurationOutput: typeof import("./getImagebuilderDistributionConfiguration").getImagebuilderDistributionConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderDistributionConfiguration","getImagebuilderDistributionConfigurationOutput"], () => require("./getImagebuilderDistributionConfiguration"));

export { GetImagebuilderDistributionConfigurationsArgs, GetImagebuilderDistributionConfigurationsResult, GetImagebuilderDistributionConfigurationsOutputArgs } from "./getImagebuilderDistributionConfigurations";
export const getImagebuilderDistributionConfigurations: typeof import("./getImagebuilderDistributionConfigurations").getImagebuilderDistributionConfigurations = null as any;
export const getImagebuilderDistributionConfigurationsOutput: typeof import("./getImagebuilderDistributionConfigurations").getImagebuilderDistributionConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderDistributionConfigurations","getImagebuilderDistributionConfigurationsOutput"], () => require("./getImagebuilderDistributionConfigurations"));

export { GetImagebuilderImageArgs, GetImagebuilderImageResult, GetImagebuilderImageOutputArgs } from "./getImagebuilderImage";
export const getImagebuilderImage: typeof import("./getImagebuilderImage").getImagebuilderImage = null as any;
export const getImagebuilderImageOutput: typeof import("./getImagebuilderImage").getImagebuilderImageOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImage","getImagebuilderImageOutput"], () => require("./getImagebuilderImage"));

export { GetImagebuilderImagePipelineArgs, GetImagebuilderImagePipelineResult, GetImagebuilderImagePipelineOutputArgs } from "./getImagebuilderImagePipeline";
export const getImagebuilderImagePipeline: typeof import("./getImagebuilderImagePipeline").getImagebuilderImagePipeline = null as any;
export const getImagebuilderImagePipelineOutput: typeof import("./getImagebuilderImagePipeline").getImagebuilderImagePipelineOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImagePipeline","getImagebuilderImagePipelineOutput"], () => require("./getImagebuilderImagePipeline"));

export { GetImagebuilderImagePipelinesArgs, GetImagebuilderImagePipelinesResult, GetImagebuilderImagePipelinesOutputArgs } from "./getImagebuilderImagePipelines";
export const getImagebuilderImagePipelines: typeof import("./getImagebuilderImagePipelines").getImagebuilderImagePipelines = null as any;
export const getImagebuilderImagePipelinesOutput: typeof import("./getImagebuilderImagePipelines").getImagebuilderImagePipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImagePipelines","getImagebuilderImagePipelinesOutput"], () => require("./getImagebuilderImagePipelines"));

export { GetImagebuilderImageRecipeArgs, GetImagebuilderImageRecipeResult, GetImagebuilderImageRecipeOutputArgs } from "./getImagebuilderImageRecipe";
export const getImagebuilderImageRecipe: typeof import("./getImagebuilderImageRecipe").getImagebuilderImageRecipe = null as any;
export const getImagebuilderImageRecipeOutput: typeof import("./getImagebuilderImageRecipe").getImagebuilderImageRecipeOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImageRecipe","getImagebuilderImageRecipeOutput"], () => require("./getImagebuilderImageRecipe"));

export { GetImagebuilderImageRecipesArgs, GetImagebuilderImageRecipesResult, GetImagebuilderImageRecipesOutputArgs } from "./getImagebuilderImageRecipes";
export const getImagebuilderImageRecipes: typeof import("./getImagebuilderImageRecipes").getImagebuilderImageRecipes = null as any;
export const getImagebuilderImageRecipesOutput: typeof import("./getImagebuilderImageRecipes").getImagebuilderImageRecipesOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderImageRecipes","getImagebuilderImageRecipesOutput"], () => require("./getImagebuilderImageRecipes"));

export { GetImagebuilderInfrastructureConfigurationArgs, GetImagebuilderInfrastructureConfigurationResult, GetImagebuilderInfrastructureConfigurationOutputArgs } from "./getImagebuilderInfrastructureConfiguration";
export const getImagebuilderInfrastructureConfiguration: typeof import("./getImagebuilderInfrastructureConfiguration").getImagebuilderInfrastructureConfiguration = null as any;
export const getImagebuilderInfrastructureConfigurationOutput: typeof import("./getImagebuilderInfrastructureConfiguration").getImagebuilderInfrastructureConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderInfrastructureConfiguration","getImagebuilderInfrastructureConfigurationOutput"], () => require("./getImagebuilderInfrastructureConfiguration"));

export { GetImagebuilderInfrastructureConfigurationsArgs, GetImagebuilderInfrastructureConfigurationsResult, GetImagebuilderInfrastructureConfigurationsOutputArgs } from "./getImagebuilderInfrastructureConfigurations";
export const getImagebuilderInfrastructureConfigurations: typeof import("./getImagebuilderInfrastructureConfigurations").getImagebuilderInfrastructureConfigurations = null as any;
export const getImagebuilderInfrastructureConfigurationsOutput: typeof import("./getImagebuilderInfrastructureConfigurations").getImagebuilderInfrastructureConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getImagebuilderInfrastructureConfigurations","getImagebuilderInfrastructureConfigurationsOutput"], () => require("./getImagebuilderInfrastructureConfigurations"));

export { GetInspectorRulesPackagesArgs, GetInspectorRulesPackagesResult, GetInspectorRulesPackagesOutputArgs } from "./getInspectorRulesPackages";
export const getInspectorRulesPackages: typeof import("./getInspectorRulesPackages").getInspectorRulesPackages = null as any;
export const getInspectorRulesPackagesOutput: typeof import("./getInspectorRulesPackages").getInspectorRulesPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getInspectorRulesPackages","getInspectorRulesPackagesOutput"], () => require("./getInspectorRulesPackages"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetInternetGatewayArgs, GetInternetGatewayResult, GetInternetGatewayOutputArgs } from "./getInternetGateway";
export const getInternetGateway: typeof import("./getInternetGateway").getInternetGateway = null as any;
export const getInternetGatewayOutput: typeof import("./getInternetGateway").getInternetGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getInternetGateway","getInternetGatewayOutput"], () => require("./getInternetGateway"));

export { GetIotEndpointArgs, GetIotEndpointResult, GetIotEndpointOutputArgs } from "./getIotEndpoint";
export const getIotEndpoint: typeof import("./getIotEndpoint").getIotEndpoint = null as any;
export const getIotEndpointOutput: typeof import("./getIotEndpoint").getIotEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getIotEndpoint","getIotEndpointOutput"], () => require("./getIotEndpoint"));

export { GetIotRegistrationCodeArgs, GetIotRegistrationCodeResult, GetIotRegistrationCodeOutputArgs } from "./getIotRegistrationCode";
export const getIotRegistrationCode: typeof import("./getIotRegistrationCode").getIotRegistrationCode = null as any;
export const getIotRegistrationCodeOutput: typeof import("./getIotRegistrationCode").getIotRegistrationCodeOutput = null as any;
utilities.lazyLoad(exports, ["getIotRegistrationCode","getIotRegistrationCodeOutput"], () => require("./getIotRegistrationCode"));

export { GetIpRangesArgs, GetIpRangesResult, GetIpRangesOutputArgs } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));

export { GetIvsStreamKeyArgs, GetIvsStreamKeyResult, GetIvsStreamKeyOutputArgs } from "./getIvsStreamKey";
export const getIvsStreamKey: typeof import("./getIvsStreamKey").getIvsStreamKey = null as any;
export const getIvsStreamKeyOutput: typeof import("./getIvsStreamKey").getIvsStreamKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIvsStreamKey","getIvsStreamKeyOutput"], () => require("./getIvsStreamKey"));

export { GetKendraExperienceArgs, GetKendraExperienceResult, GetKendraExperienceOutputArgs } from "./getKendraExperience";
export const getKendraExperience: typeof import("./getKendraExperience").getKendraExperience = null as any;
export const getKendraExperienceOutput: typeof import("./getKendraExperience").getKendraExperienceOutput = null as any;
utilities.lazyLoad(exports, ["getKendraExperience","getKendraExperienceOutput"], () => require("./getKendraExperience"));

export { GetKendraFaqArgs, GetKendraFaqResult, GetKendraFaqOutputArgs } from "./getKendraFaq";
export const getKendraFaq: typeof import("./getKendraFaq").getKendraFaq = null as any;
export const getKendraFaqOutput: typeof import("./getKendraFaq").getKendraFaqOutput = null as any;
utilities.lazyLoad(exports, ["getKendraFaq","getKendraFaqOutput"], () => require("./getKendraFaq"));

export { GetKendraIndexArgs, GetKendraIndexResult, GetKendraIndexOutputArgs } from "./getKendraIndex";
export const getKendraIndex: typeof import("./getKendraIndex").getKendraIndex = null as any;
export const getKendraIndexOutput: typeof import("./getKendraIndex").getKendraIndexOutput = null as any;
utilities.lazyLoad(exports, ["getKendraIndex","getKendraIndexOutput"], () => require("./getKendraIndex"));

export { GetKendraQuerySuggestionsBlockListArgs, GetKendraQuerySuggestionsBlockListResult, GetKendraQuerySuggestionsBlockListOutputArgs } from "./getKendraQuerySuggestionsBlockList";
export const getKendraQuerySuggestionsBlockList: typeof import("./getKendraQuerySuggestionsBlockList").getKendraQuerySuggestionsBlockList = null as any;
export const getKendraQuerySuggestionsBlockListOutput: typeof import("./getKendraQuerySuggestionsBlockList").getKendraQuerySuggestionsBlockListOutput = null as any;
utilities.lazyLoad(exports, ["getKendraQuerySuggestionsBlockList","getKendraQuerySuggestionsBlockListOutput"], () => require("./getKendraQuerySuggestionsBlockList"));

export { GetKendraThesaurusArgs, GetKendraThesaurusResult, GetKendraThesaurusOutputArgs } from "./getKendraThesaurus";
export const getKendraThesaurus: typeof import("./getKendraThesaurus").getKendraThesaurus = null as any;
export const getKendraThesaurusOutput: typeof import("./getKendraThesaurus").getKendraThesaurusOutput = null as any;
utilities.lazyLoad(exports, ["getKendraThesaurus","getKendraThesaurusOutput"], () => require("./getKendraThesaurus"));

export { GetKeyPairArgs, GetKeyPairResult, GetKeyPairOutputArgs } from "./getKeyPair";
export const getKeyPair: typeof import("./getKeyPair").getKeyPair = null as any;
export const getKeyPairOutput: typeof import("./getKeyPair").getKeyPairOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPair","getKeyPairOutput"], () => require("./getKeyPair"));

export { GetKinesisFirehoseDeliveryStreamArgs, GetKinesisFirehoseDeliveryStreamResult, GetKinesisFirehoseDeliveryStreamOutputArgs } from "./getKinesisFirehoseDeliveryStream";
export const getKinesisFirehoseDeliveryStream: typeof import("./getKinesisFirehoseDeliveryStream").getKinesisFirehoseDeliveryStream = null as any;
export const getKinesisFirehoseDeliveryStreamOutput: typeof import("./getKinesisFirehoseDeliveryStream").getKinesisFirehoseDeliveryStreamOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisFirehoseDeliveryStream","getKinesisFirehoseDeliveryStreamOutput"], () => require("./getKinesisFirehoseDeliveryStream"));

export { GetKinesisStreamArgs, GetKinesisStreamResult, GetKinesisStreamOutputArgs } from "./getKinesisStream";
export const getKinesisStream: typeof import("./getKinesisStream").getKinesisStream = null as any;
export const getKinesisStreamOutput: typeof import("./getKinesisStream").getKinesisStreamOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisStream","getKinesisStreamOutput"], () => require("./getKinesisStream"));

export { GetKinesisStreamConsumerArgs, GetKinesisStreamConsumerResult, GetKinesisStreamConsumerOutputArgs } from "./getKinesisStreamConsumer";
export const getKinesisStreamConsumer: typeof import("./getKinesisStreamConsumer").getKinesisStreamConsumer = null as any;
export const getKinesisStreamConsumerOutput: typeof import("./getKinesisStreamConsumer").getKinesisStreamConsumerOutput = null as any;
utilities.lazyLoad(exports, ["getKinesisStreamConsumer","getKinesisStreamConsumerOutput"], () => require("./getKinesisStreamConsumer"));

export { GetKmsAliasArgs, GetKmsAliasResult, GetKmsAliasOutputArgs } from "./getKmsAlias";
export const getKmsAlias: typeof import("./getKmsAlias").getKmsAlias = null as any;
export const getKmsAliasOutput: typeof import("./getKmsAlias").getKmsAliasOutput = null as any;
utilities.lazyLoad(exports, ["getKmsAlias","getKmsAliasOutput"], () => require("./getKmsAlias"));

export { GetKmsCiphertextArgs, GetKmsCiphertextResult, GetKmsCiphertextOutputArgs } from "./getKmsCiphertext";
export const getKmsCiphertext: typeof import("./getKmsCiphertext").getKmsCiphertext = null as any;
export const getKmsCiphertextOutput: typeof import("./getKmsCiphertext").getKmsCiphertextOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCiphertext","getKmsCiphertextOutput"], () => require("./getKmsCiphertext"));

export { GetKmsCustomKeyStoreArgs, GetKmsCustomKeyStoreResult, GetKmsCustomKeyStoreOutputArgs } from "./getKmsCustomKeyStore";
export const getKmsCustomKeyStore: typeof import("./getKmsCustomKeyStore").getKmsCustomKeyStore = null as any;
export const getKmsCustomKeyStoreOutput: typeof import("./getKmsCustomKeyStore").getKmsCustomKeyStoreOutput = null as any;
utilities.lazyLoad(exports, ["getKmsCustomKeyStore","getKmsCustomKeyStoreOutput"], () => require("./getKmsCustomKeyStore"));

export { GetKmsKeyArgs, GetKmsKeyResult, GetKmsKeyOutputArgs } from "./getKmsKey";
export const getKmsKey: typeof import("./getKmsKey").getKmsKey = null as any;
export const getKmsKeyOutput: typeof import("./getKmsKey").getKmsKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsKey","getKmsKeyOutput"], () => require("./getKmsKey"));

export { GetKmsPublicKeyArgs, GetKmsPublicKeyResult, GetKmsPublicKeyOutputArgs } from "./getKmsPublicKey";
export const getKmsPublicKey: typeof import("./getKmsPublicKey").getKmsPublicKey = null as any;
export const getKmsPublicKeyOutput: typeof import("./getKmsPublicKey").getKmsPublicKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKmsPublicKey","getKmsPublicKeyOutput"], () => require("./getKmsPublicKey"));

export { GetKmsSecretArgs, GetKmsSecretResult, GetKmsSecretOutputArgs } from "./getKmsSecret";
export const getKmsSecret: typeof import("./getKmsSecret").getKmsSecret = null as any;
export const getKmsSecretOutput: typeof import("./getKmsSecret").getKmsSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSecret","getKmsSecretOutput"], () => require("./getKmsSecret"));

export { GetKmsSecretsArgs, GetKmsSecretsResult, GetKmsSecretsOutputArgs } from "./getKmsSecrets";
export const getKmsSecrets: typeof import("./getKmsSecrets").getKmsSecrets = null as any;
export const getKmsSecretsOutput: typeof import("./getKmsSecrets").getKmsSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getKmsSecrets","getKmsSecretsOutput"], () => require("./getKmsSecrets"));

export { GetLakeformationDataLakeSettingsArgs, GetLakeformationDataLakeSettingsResult, GetLakeformationDataLakeSettingsOutputArgs } from "./getLakeformationDataLakeSettings";
export const getLakeformationDataLakeSettings: typeof import("./getLakeformationDataLakeSettings").getLakeformationDataLakeSettings = null as any;
export const getLakeformationDataLakeSettingsOutput: typeof import("./getLakeformationDataLakeSettings").getLakeformationDataLakeSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationDataLakeSettings","getLakeformationDataLakeSettingsOutput"], () => require("./getLakeformationDataLakeSettings"));

export { GetLakeformationPermissionsArgs, GetLakeformationPermissionsResult, GetLakeformationPermissionsOutputArgs } from "./getLakeformationPermissions";
export const getLakeformationPermissions: typeof import("./getLakeformationPermissions").getLakeformationPermissions = null as any;
export const getLakeformationPermissionsOutput: typeof import("./getLakeformationPermissions").getLakeformationPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationPermissions","getLakeformationPermissionsOutput"], () => require("./getLakeformationPermissions"));

export { GetLakeformationResourceArgs, GetLakeformationResourceResult, GetLakeformationResourceOutputArgs } from "./getLakeformationResource";
export const getLakeformationResource: typeof import("./getLakeformationResource").getLakeformationResource = null as any;
export const getLakeformationResourceOutput: typeof import("./getLakeformationResource").getLakeformationResourceOutput = null as any;
utilities.lazyLoad(exports, ["getLakeformationResource","getLakeformationResourceOutput"], () => require("./getLakeformationResource"));

export { GetLambdaAliasArgs, GetLambdaAliasResult, GetLambdaAliasOutputArgs } from "./getLambdaAlias";
export const getLambdaAlias: typeof import("./getLambdaAlias").getLambdaAlias = null as any;
export const getLambdaAliasOutput: typeof import("./getLambdaAlias").getLambdaAliasOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaAlias","getLambdaAliasOutput"], () => require("./getLambdaAlias"));

export { GetLambdaCodeSigningConfigArgs, GetLambdaCodeSigningConfigResult, GetLambdaCodeSigningConfigOutputArgs } from "./getLambdaCodeSigningConfig";
export const getLambdaCodeSigningConfig: typeof import("./getLambdaCodeSigningConfig").getLambdaCodeSigningConfig = null as any;
export const getLambdaCodeSigningConfigOutput: typeof import("./getLambdaCodeSigningConfig").getLambdaCodeSigningConfigOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaCodeSigningConfig","getLambdaCodeSigningConfigOutput"], () => require("./getLambdaCodeSigningConfig"));

export { GetLambdaFunctionArgs, GetLambdaFunctionResult, GetLambdaFunctionOutputArgs } from "./getLambdaFunction";
export const getLambdaFunction: typeof import("./getLambdaFunction").getLambdaFunction = null as any;
export const getLambdaFunctionOutput: typeof import("./getLambdaFunction").getLambdaFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaFunction","getLambdaFunctionOutput"], () => require("./getLambdaFunction"));

export { GetLambdaFunctionUrlArgs, GetLambdaFunctionUrlResult, GetLambdaFunctionUrlOutputArgs } from "./getLambdaFunctionUrl";
export const getLambdaFunctionUrl: typeof import("./getLambdaFunctionUrl").getLambdaFunctionUrl = null as any;
export const getLambdaFunctionUrlOutput: typeof import("./getLambdaFunctionUrl").getLambdaFunctionUrlOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaFunctionUrl","getLambdaFunctionUrlOutput"], () => require("./getLambdaFunctionUrl"));

export { GetLambdaFunctionsArgs, GetLambdaFunctionsResult, GetLambdaFunctionsOutputArgs } from "./getLambdaFunctions";
export const getLambdaFunctions: typeof import("./getLambdaFunctions").getLambdaFunctions = null as any;
export const getLambdaFunctionsOutput: typeof import("./getLambdaFunctions").getLambdaFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaFunctions","getLambdaFunctionsOutput"], () => require("./getLambdaFunctions"));

export { GetLambdaInvocationArgs, GetLambdaInvocationResult, GetLambdaInvocationOutputArgs } from "./getLambdaInvocation";
export const getLambdaInvocation: typeof import("./getLambdaInvocation").getLambdaInvocation = null as any;
export const getLambdaInvocationOutput: typeof import("./getLambdaInvocation").getLambdaInvocationOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaInvocation","getLambdaInvocationOutput"], () => require("./getLambdaInvocation"));

export { GetLambdaLayerVersionArgs, GetLambdaLayerVersionResult, GetLambdaLayerVersionOutputArgs } from "./getLambdaLayerVersion";
export const getLambdaLayerVersion: typeof import("./getLambdaLayerVersion").getLambdaLayerVersion = null as any;
export const getLambdaLayerVersionOutput: typeof import("./getLambdaLayerVersion").getLambdaLayerVersionOutput = null as any;
utilities.lazyLoad(exports, ["getLambdaLayerVersion","getLambdaLayerVersionOutput"], () => require("./getLambdaLayerVersion"));

export { GetLaunchConfigurationArgs, GetLaunchConfigurationResult, GetLaunchConfigurationOutputArgs } from "./getLaunchConfiguration";
export const getLaunchConfiguration: typeof import("./getLaunchConfiguration").getLaunchConfiguration = null as any;
export const getLaunchConfigurationOutput: typeof import("./getLaunchConfiguration").getLaunchConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchConfiguration","getLaunchConfigurationOutput"], () => require("./getLaunchConfiguration"));

export { GetLaunchTemplateArgs, GetLaunchTemplateResult, GetLaunchTemplateOutputArgs } from "./getLaunchTemplate";
export const getLaunchTemplate: typeof import("./getLaunchTemplate").getLaunchTemplate = null as any;
export const getLaunchTemplateOutput: typeof import("./getLaunchTemplate").getLaunchTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchTemplate","getLaunchTemplateOutput"], () => require("./getLaunchTemplate"));

export { GetLbArgs, GetLbResult, GetLbOutputArgs } from "./getLb";
export const getLb: typeof import("./getLb").getLb = null as any;
export const getLbOutput: typeof import("./getLb").getLbOutput = null as any;
utilities.lazyLoad(exports, ["getLb","getLbOutput"], () => require("./getLb"));

export { GetLbHostedZoneIdArgs, GetLbHostedZoneIdResult, GetLbHostedZoneIdOutputArgs } from "./getLbHostedZoneId";
export const getLbHostedZoneId: typeof import("./getLbHostedZoneId").getLbHostedZoneId = null as any;
export const getLbHostedZoneIdOutput: typeof import("./getLbHostedZoneId").getLbHostedZoneIdOutput = null as any;
utilities.lazyLoad(exports, ["getLbHostedZoneId","getLbHostedZoneIdOutput"], () => require("./getLbHostedZoneId"));

export { GetLbListenerArgs, GetLbListenerResult, GetLbListenerOutputArgs } from "./getLbListener";
export const getLbListener: typeof import("./getLbListener").getLbListener = null as any;
export const getLbListenerOutput: typeof import("./getLbListener").getLbListenerOutput = null as any;
utilities.lazyLoad(exports, ["getLbListener","getLbListenerOutput"], () => require("./getLbListener"));

export { GetLbTargetGroupArgs, GetLbTargetGroupResult, GetLbTargetGroupOutputArgs } from "./getLbTargetGroup";
export const getLbTargetGroup: typeof import("./getLbTargetGroup").getLbTargetGroup = null as any;
export const getLbTargetGroupOutput: typeof import("./getLbTargetGroup").getLbTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLbTargetGroup","getLbTargetGroupOutput"], () => require("./getLbTargetGroup"));

export { GetLbTrustStoreArgs, GetLbTrustStoreResult, GetLbTrustStoreOutputArgs } from "./getLbTrustStore";
export const getLbTrustStore: typeof import("./getLbTrustStore").getLbTrustStore = null as any;
export const getLbTrustStoreOutput: typeof import("./getLbTrustStore").getLbTrustStoreOutput = null as any;
utilities.lazyLoad(exports, ["getLbTrustStore","getLbTrustStoreOutput"], () => require("./getLbTrustStore"));

export { GetLbsArgs, GetLbsResult, GetLbsOutputArgs } from "./getLbs";
export const getLbs: typeof import("./getLbs").getLbs = null as any;
export const getLbsOutput: typeof import("./getLbs").getLbsOutput = null as any;
utilities.lazyLoad(exports, ["getLbs","getLbsOutput"], () => require("./getLbs"));

export { GetLexBotArgs, GetLexBotResult, GetLexBotOutputArgs } from "./getLexBot";
export const getLexBot: typeof import("./getLexBot").getLexBot = null as any;
export const getLexBotOutput: typeof import("./getLexBot").getLexBotOutput = null as any;
utilities.lazyLoad(exports, ["getLexBot","getLexBotOutput"], () => require("./getLexBot"));

export { GetLexBotAliasArgs, GetLexBotAliasResult, GetLexBotAliasOutputArgs } from "./getLexBotAlias";
export const getLexBotAlias: typeof import("./getLexBotAlias").getLexBotAlias = null as any;
export const getLexBotAliasOutput: typeof import("./getLexBotAlias").getLexBotAliasOutput = null as any;
utilities.lazyLoad(exports, ["getLexBotAlias","getLexBotAliasOutput"], () => require("./getLexBotAlias"));

export { GetLexIntentArgs, GetLexIntentResult, GetLexIntentOutputArgs } from "./getLexIntent";
export const getLexIntent: typeof import("./getLexIntent").getLexIntent = null as any;
export const getLexIntentOutput: typeof import("./getLexIntent").getLexIntentOutput = null as any;
utilities.lazyLoad(exports, ["getLexIntent","getLexIntentOutput"], () => require("./getLexIntent"));

export { GetLexSlotTypeArgs, GetLexSlotTypeResult, GetLexSlotTypeOutputArgs } from "./getLexSlotType";
export const getLexSlotType: typeof import("./getLexSlotType").getLexSlotType = null as any;
export const getLexSlotTypeOutput: typeof import("./getLexSlotType").getLexSlotTypeOutput = null as any;
utilities.lazyLoad(exports, ["getLexSlotType","getLexSlotTypeOutput"], () => require("./getLexSlotType"));

export { GetLicensemanagerGrantsArgs, GetLicensemanagerGrantsResult, GetLicensemanagerGrantsOutputArgs } from "./getLicensemanagerGrants";
export const getLicensemanagerGrants: typeof import("./getLicensemanagerGrants").getLicensemanagerGrants = null as any;
export const getLicensemanagerGrantsOutput: typeof import("./getLicensemanagerGrants").getLicensemanagerGrantsOutput = null as any;
utilities.lazyLoad(exports, ["getLicensemanagerGrants","getLicensemanagerGrantsOutput"], () => require("./getLicensemanagerGrants"));

export { GetLicensemanagerReceivedLicenseArgs, GetLicensemanagerReceivedLicenseResult, GetLicensemanagerReceivedLicenseOutputArgs } from "./getLicensemanagerReceivedLicense";
export const getLicensemanagerReceivedLicense: typeof import("./getLicensemanagerReceivedLicense").getLicensemanagerReceivedLicense = null as any;
export const getLicensemanagerReceivedLicenseOutput: typeof import("./getLicensemanagerReceivedLicense").getLicensemanagerReceivedLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicensemanagerReceivedLicense","getLicensemanagerReceivedLicenseOutput"], () => require("./getLicensemanagerReceivedLicense"));

export { GetLicensemanagerReceivedLicensesArgs, GetLicensemanagerReceivedLicensesResult, GetLicensemanagerReceivedLicensesOutputArgs } from "./getLicensemanagerReceivedLicenses";
export const getLicensemanagerReceivedLicenses: typeof import("./getLicensemanagerReceivedLicenses").getLicensemanagerReceivedLicenses = null as any;
export const getLicensemanagerReceivedLicensesOutput: typeof import("./getLicensemanagerReceivedLicenses").getLicensemanagerReceivedLicensesOutput = null as any;
utilities.lazyLoad(exports, ["getLicensemanagerReceivedLicenses","getLicensemanagerReceivedLicensesOutput"], () => require("./getLicensemanagerReceivedLicenses"));

export { GetLocationGeofenceCollectionArgs, GetLocationGeofenceCollectionResult, GetLocationGeofenceCollectionOutputArgs } from "./getLocationGeofenceCollection";
export const getLocationGeofenceCollection: typeof import("./getLocationGeofenceCollection").getLocationGeofenceCollection = null as any;
export const getLocationGeofenceCollectionOutput: typeof import("./getLocationGeofenceCollection").getLocationGeofenceCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getLocationGeofenceCollection","getLocationGeofenceCollectionOutput"], () => require("./getLocationGeofenceCollection"));

export { GetLocationMapArgs, GetLocationMapResult, GetLocationMapOutputArgs } from "./getLocationMap";
export const getLocationMap: typeof import("./getLocationMap").getLocationMap = null as any;
export const getLocationMapOutput: typeof import("./getLocationMap").getLocationMapOutput = null as any;
utilities.lazyLoad(exports, ["getLocationMap","getLocationMapOutput"], () => require("./getLocationMap"));

export { GetLocationPlaceIndexArgs, GetLocationPlaceIndexResult, GetLocationPlaceIndexOutputArgs } from "./getLocationPlaceIndex";
export const getLocationPlaceIndex: typeof import("./getLocationPlaceIndex").getLocationPlaceIndex = null as any;
export const getLocationPlaceIndexOutput: typeof import("./getLocationPlaceIndex").getLocationPlaceIndexOutput = null as any;
utilities.lazyLoad(exports, ["getLocationPlaceIndex","getLocationPlaceIndexOutput"], () => require("./getLocationPlaceIndex"));

export { GetLocationRouteCalculatorArgs, GetLocationRouteCalculatorResult, GetLocationRouteCalculatorOutputArgs } from "./getLocationRouteCalculator";
export const getLocationRouteCalculator: typeof import("./getLocationRouteCalculator").getLocationRouteCalculator = null as any;
export const getLocationRouteCalculatorOutput: typeof import("./getLocationRouteCalculator").getLocationRouteCalculatorOutput = null as any;
utilities.lazyLoad(exports, ["getLocationRouteCalculator","getLocationRouteCalculatorOutput"], () => require("./getLocationRouteCalculator"));

export { GetLocationTrackerArgs, GetLocationTrackerResult, GetLocationTrackerOutputArgs } from "./getLocationTracker";
export const getLocationTracker: typeof import("./getLocationTracker").getLocationTracker = null as any;
export const getLocationTrackerOutput: typeof import("./getLocationTracker").getLocationTrackerOutput = null as any;
utilities.lazyLoad(exports, ["getLocationTracker","getLocationTrackerOutput"], () => require("./getLocationTracker"));

export { GetLocationTrackerAssociationArgs, GetLocationTrackerAssociationResult, GetLocationTrackerAssociationOutputArgs } from "./getLocationTrackerAssociation";
export const getLocationTrackerAssociation: typeof import("./getLocationTrackerAssociation").getLocationTrackerAssociation = null as any;
export const getLocationTrackerAssociationOutput: typeof import("./getLocationTrackerAssociation").getLocationTrackerAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getLocationTrackerAssociation","getLocationTrackerAssociationOutput"], () => require("./getLocationTrackerAssociation"));

export { GetLocationTrackerAssociationsArgs, GetLocationTrackerAssociationsResult, GetLocationTrackerAssociationsOutputArgs } from "./getLocationTrackerAssociations";
export const getLocationTrackerAssociations: typeof import("./getLocationTrackerAssociations").getLocationTrackerAssociations = null as any;
export const getLocationTrackerAssociationsOutput: typeof import("./getLocationTrackerAssociations").getLocationTrackerAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationTrackerAssociations","getLocationTrackerAssociationsOutput"], () => require("./getLocationTrackerAssociations"));

export { GetMediaConvertQueueArgs, GetMediaConvertQueueResult, GetMediaConvertQueueOutputArgs } from "./getMediaConvertQueue";
export const getMediaConvertQueue: typeof import("./getMediaConvertQueue").getMediaConvertQueue = null as any;
export const getMediaConvertQueueOutput: typeof import("./getMediaConvertQueue").getMediaConvertQueueOutput = null as any;
utilities.lazyLoad(exports, ["getMediaConvertQueue","getMediaConvertQueueOutput"], () => require("./getMediaConvertQueue"));

export { GetMedialiveInputArgs, GetMedialiveInputResult, GetMedialiveInputOutputArgs } from "./getMedialiveInput";
export const getMedialiveInput: typeof import("./getMedialiveInput").getMedialiveInput = null as any;
export const getMedialiveInputOutput: typeof import("./getMedialiveInput").getMedialiveInputOutput = null as any;
utilities.lazyLoad(exports, ["getMedialiveInput","getMedialiveInputOutput"], () => require("./getMedialiveInput"));

export { GetMemorydbAclArgs, GetMemorydbAclResult, GetMemorydbAclOutputArgs } from "./getMemorydbAcl";
export const getMemorydbAcl: typeof import("./getMemorydbAcl").getMemorydbAcl = null as any;
export const getMemorydbAclOutput: typeof import("./getMemorydbAcl").getMemorydbAclOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbAcl","getMemorydbAclOutput"], () => require("./getMemorydbAcl"));

export { GetMemorydbClusterArgs, GetMemorydbClusterResult, GetMemorydbClusterOutputArgs } from "./getMemorydbCluster";
export const getMemorydbCluster: typeof import("./getMemorydbCluster").getMemorydbCluster = null as any;
export const getMemorydbClusterOutput: typeof import("./getMemorydbCluster").getMemorydbClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbCluster","getMemorydbClusterOutput"], () => require("./getMemorydbCluster"));

export { GetMemorydbParameterGroupArgs, GetMemorydbParameterGroupResult, GetMemorydbParameterGroupOutputArgs } from "./getMemorydbParameterGroup";
export const getMemorydbParameterGroup: typeof import("./getMemorydbParameterGroup").getMemorydbParameterGroup = null as any;
export const getMemorydbParameterGroupOutput: typeof import("./getMemorydbParameterGroup").getMemorydbParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbParameterGroup","getMemorydbParameterGroupOutput"], () => require("./getMemorydbParameterGroup"));

export { GetMemorydbSnapshotArgs, GetMemorydbSnapshotResult, GetMemorydbSnapshotOutputArgs } from "./getMemorydbSnapshot";
export const getMemorydbSnapshot: typeof import("./getMemorydbSnapshot").getMemorydbSnapshot = null as any;
export const getMemorydbSnapshotOutput: typeof import("./getMemorydbSnapshot").getMemorydbSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbSnapshot","getMemorydbSnapshotOutput"], () => require("./getMemorydbSnapshot"));

export { GetMemorydbSubnetGroupArgs, GetMemorydbSubnetGroupResult, GetMemorydbSubnetGroupOutputArgs } from "./getMemorydbSubnetGroup";
export const getMemorydbSubnetGroup: typeof import("./getMemorydbSubnetGroup").getMemorydbSubnetGroup = null as any;
export const getMemorydbSubnetGroupOutput: typeof import("./getMemorydbSubnetGroup").getMemorydbSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbSubnetGroup","getMemorydbSubnetGroupOutput"], () => require("./getMemorydbSubnetGroup"));

export { GetMemorydbUserArgs, GetMemorydbUserResult, GetMemorydbUserOutputArgs } from "./getMemorydbUser";
export const getMemorydbUser: typeof import("./getMemorydbUser").getMemorydbUser = null as any;
export const getMemorydbUserOutput: typeof import("./getMemorydbUser").getMemorydbUserOutput = null as any;
utilities.lazyLoad(exports, ["getMemorydbUser","getMemorydbUserOutput"], () => require("./getMemorydbUser"));

export { GetMqBrokerArgs, GetMqBrokerResult, GetMqBrokerOutputArgs } from "./getMqBroker";
export const getMqBroker: typeof import("./getMqBroker").getMqBroker = null as any;
export const getMqBrokerOutput: typeof import("./getMqBroker").getMqBrokerOutput = null as any;
utilities.lazyLoad(exports, ["getMqBroker","getMqBrokerOutput"], () => require("./getMqBroker"));

export { GetMqBrokerEngineTypesArgs, GetMqBrokerEngineTypesResult, GetMqBrokerEngineTypesOutputArgs } from "./getMqBrokerEngineTypes";
export const getMqBrokerEngineTypes: typeof import("./getMqBrokerEngineTypes").getMqBrokerEngineTypes = null as any;
export const getMqBrokerEngineTypesOutput: typeof import("./getMqBrokerEngineTypes").getMqBrokerEngineTypesOutput = null as any;
utilities.lazyLoad(exports, ["getMqBrokerEngineTypes","getMqBrokerEngineTypesOutput"], () => require("./getMqBrokerEngineTypes"));

export { GetMqBrokerInstanceTypeOfferingsArgs, GetMqBrokerInstanceTypeOfferingsResult, GetMqBrokerInstanceTypeOfferingsOutputArgs } from "./getMqBrokerInstanceTypeOfferings";
export const getMqBrokerInstanceTypeOfferings: typeof import("./getMqBrokerInstanceTypeOfferings").getMqBrokerInstanceTypeOfferings = null as any;
export const getMqBrokerInstanceTypeOfferingsOutput: typeof import("./getMqBrokerInstanceTypeOfferings").getMqBrokerInstanceTypeOfferingsOutput = null as any;
utilities.lazyLoad(exports, ["getMqBrokerInstanceTypeOfferings","getMqBrokerInstanceTypeOfferingsOutput"], () => require("./getMqBrokerInstanceTypeOfferings"));

export { GetMskBootstrapBrokersArgs, GetMskBootstrapBrokersResult, GetMskBootstrapBrokersOutputArgs } from "./getMskBootstrapBrokers";
export const getMskBootstrapBrokers: typeof import("./getMskBootstrapBrokers").getMskBootstrapBrokers = null as any;
export const getMskBootstrapBrokersOutput: typeof import("./getMskBootstrapBrokers").getMskBootstrapBrokersOutput = null as any;
utilities.lazyLoad(exports, ["getMskBootstrapBrokers","getMskBootstrapBrokersOutput"], () => require("./getMskBootstrapBrokers"));

export { GetMskBrokerNodesArgs, GetMskBrokerNodesResult, GetMskBrokerNodesOutputArgs } from "./getMskBrokerNodes";
export const getMskBrokerNodes: typeof import("./getMskBrokerNodes").getMskBrokerNodes = null as any;
export const getMskBrokerNodesOutput: typeof import("./getMskBrokerNodes").getMskBrokerNodesOutput = null as any;
utilities.lazyLoad(exports, ["getMskBrokerNodes","getMskBrokerNodesOutput"], () => require("./getMskBrokerNodes"));

export { GetMskClusterArgs, GetMskClusterResult, GetMskClusterOutputArgs } from "./getMskCluster";
export const getMskCluster: typeof import("./getMskCluster").getMskCluster = null as any;
export const getMskClusterOutput: typeof import("./getMskCluster").getMskClusterOutput = null as any;
utilities.lazyLoad(exports, ["getMskCluster","getMskClusterOutput"], () => require("./getMskCluster"));

export { GetMskConfigurationArgs, GetMskConfigurationResult, GetMskConfigurationOutputArgs } from "./getMskConfiguration";
export const getMskConfiguration: typeof import("./getMskConfiguration").getMskConfiguration = null as any;
export const getMskConfigurationOutput: typeof import("./getMskConfiguration").getMskConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMskConfiguration","getMskConfigurationOutput"], () => require("./getMskConfiguration"));

export { GetMskKafkaVersionArgs, GetMskKafkaVersionResult, GetMskKafkaVersionOutputArgs } from "./getMskKafkaVersion";
export const getMskKafkaVersion: typeof import("./getMskKafkaVersion").getMskKafkaVersion = null as any;
export const getMskKafkaVersionOutput: typeof import("./getMskKafkaVersion").getMskKafkaVersionOutput = null as any;
utilities.lazyLoad(exports, ["getMskKafkaVersion","getMskKafkaVersionOutput"], () => require("./getMskKafkaVersion"));

export { GetMskVpcConnectionArgs, GetMskVpcConnectionResult, GetMskVpcConnectionOutputArgs } from "./getMskVpcConnection";
export const getMskVpcConnection: typeof import("./getMskVpcConnection").getMskVpcConnection = null as any;
export const getMskVpcConnectionOutput: typeof import("./getMskVpcConnection").getMskVpcConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getMskVpcConnection","getMskVpcConnectionOutput"], () => require("./getMskVpcConnection"));

export { GetMskconnectConnectorArgs, GetMskconnectConnectorResult, GetMskconnectConnectorOutputArgs } from "./getMskconnectConnector";
export const getMskconnectConnector: typeof import("./getMskconnectConnector").getMskconnectConnector = null as any;
export const getMskconnectConnectorOutput: typeof import("./getMskconnectConnector").getMskconnectConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getMskconnectConnector","getMskconnectConnectorOutput"], () => require("./getMskconnectConnector"));

export { GetMskconnectCustomPluginArgs, GetMskconnectCustomPluginResult, GetMskconnectCustomPluginOutputArgs } from "./getMskconnectCustomPlugin";
export const getMskconnectCustomPlugin: typeof import("./getMskconnectCustomPlugin").getMskconnectCustomPlugin = null as any;
export const getMskconnectCustomPluginOutput: typeof import("./getMskconnectCustomPlugin").getMskconnectCustomPluginOutput = null as any;
utilities.lazyLoad(exports, ["getMskconnectCustomPlugin","getMskconnectCustomPluginOutput"], () => require("./getMskconnectCustomPlugin"));

export { GetMskconnectWorkerConfigurationArgs, GetMskconnectWorkerConfigurationResult, GetMskconnectWorkerConfigurationOutputArgs } from "./getMskconnectWorkerConfiguration";
export const getMskconnectWorkerConfiguration: typeof import("./getMskconnectWorkerConfiguration").getMskconnectWorkerConfiguration = null as any;
export const getMskconnectWorkerConfigurationOutput: typeof import("./getMskconnectWorkerConfiguration").getMskconnectWorkerConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMskconnectWorkerConfiguration","getMskconnectWorkerConfigurationOutput"], () => require("./getMskconnectWorkerConfiguration"));

export { GetNatGatewayArgs, GetNatGatewayResult, GetNatGatewayOutputArgs } from "./getNatGateway";
export const getNatGateway: typeof import("./getNatGateway").getNatGateway = null as any;
export const getNatGatewayOutput: typeof import("./getNatGateway").getNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateway","getNatGatewayOutput"], () => require("./getNatGateway"));

export { GetNatGatewaysArgs, GetNatGatewaysResult, GetNatGatewaysOutputArgs } from "./getNatGateways";
export const getNatGateways: typeof import("./getNatGateways").getNatGateways = null as any;
export const getNatGatewaysOutput: typeof import("./getNatGateways").getNatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateways","getNatGatewaysOutput"], () => require("./getNatGateways"));

export { GetNeptuneEngineVersionArgs, GetNeptuneEngineVersionResult, GetNeptuneEngineVersionOutputArgs } from "./getNeptuneEngineVersion";
export const getNeptuneEngineVersion: typeof import("./getNeptuneEngineVersion").getNeptuneEngineVersion = null as any;
export const getNeptuneEngineVersionOutput: typeof import("./getNeptuneEngineVersion").getNeptuneEngineVersionOutput = null as any;
utilities.lazyLoad(exports, ["getNeptuneEngineVersion","getNeptuneEngineVersionOutput"], () => require("./getNeptuneEngineVersion"));

export { GetNeptuneOrderableDbInstanceArgs, GetNeptuneOrderableDbInstanceResult, GetNeptuneOrderableDbInstanceOutputArgs } from "./getNeptuneOrderableDbInstance";
export const getNeptuneOrderableDbInstance: typeof import("./getNeptuneOrderableDbInstance").getNeptuneOrderableDbInstance = null as any;
export const getNeptuneOrderableDbInstanceOutput: typeof import("./getNeptuneOrderableDbInstance").getNeptuneOrderableDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getNeptuneOrderableDbInstance","getNeptuneOrderableDbInstanceOutput"], () => require("./getNeptuneOrderableDbInstance"));

export { GetNetworkAclsArgs, GetNetworkAclsResult, GetNetworkAclsOutputArgs } from "./getNetworkAcls";
export const getNetworkAcls: typeof import("./getNetworkAcls").getNetworkAcls = null as any;
export const getNetworkAclsOutput: typeof import("./getNetworkAcls").getNetworkAclsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAcls","getNetworkAclsOutput"], () => require("./getNetworkAcls"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkInterfacesArgs, GetNetworkInterfacesResult, GetNetworkInterfacesOutputArgs } from "./getNetworkInterfaces";
export const getNetworkInterfaces: typeof import("./getNetworkInterfaces").getNetworkInterfaces = null as any;
export const getNetworkInterfacesOutput: typeof import("./getNetworkInterfaces").getNetworkInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaces","getNetworkInterfacesOutput"], () => require("./getNetworkInterfaces"));

export { GetNetworkfirewallFirewallArgs, GetNetworkfirewallFirewallResult, GetNetworkfirewallFirewallOutputArgs } from "./getNetworkfirewallFirewall";
export const getNetworkfirewallFirewall: typeof import("./getNetworkfirewallFirewall").getNetworkfirewallFirewall = null as any;
export const getNetworkfirewallFirewallOutput: typeof import("./getNetworkfirewallFirewall").getNetworkfirewallFirewallOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallFirewall","getNetworkfirewallFirewallOutput"], () => require("./getNetworkfirewallFirewall"));

export { GetNetworkfirewallFirewallPolicyArgs, GetNetworkfirewallFirewallPolicyResult, GetNetworkfirewallFirewallPolicyOutputArgs } from "./getNetworkfirewallFirewallPolicy";
export const getNetworkfirewallFirewallPolicy: typeof import("./getNetworkfirewallFirewallPolicy").getNetworkfirewallFirewallPolicy = null as any;
export const getNetworkfirewallFirewallPolicyOutput: typeof import("./getNetworkfirewallFirewallPolicy").getNetworkfirewallFirewallPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallFirewallPolicy","getNetworkfirewallFirewallPolicyOutput"], () => require("./getNetworkfirewallFirewallPolicy"));

export { GetNetworkfirewallResourcePolicyArgs, GetNetworkfirewallResourcePolicyResult, GetNetworkfirewallResourcePolicyOutputArgs } from "./getNetworkfirewallResourcePolicy";
export const getNetworkfirewallResourcePolicy: typeof import("./getNetworkfirewallResourcePolicy").getNetworkfirewallResourcePolicy = null as any;
export const getNetworkfirewallResourcePolicyOutput: typeof import("./getNetworkfirewallResourcePolicy").getNetworkfirewallResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkfirewallResourcePolicy","getNetworkfirewallResourcePolicyOutput"], () => require("./getNetworkfirewallResourcePolicy"));

export { GetNetworkmanagerConnectionArgs, GetNetworkmanagerConnectionResult, GetNetworkmanagerConnectionOutputArgs } from "./getNetworkmanagerConnection";
export const getNetworkmanagerConnection: typeof import("./getNetworkmanagerConnection").getNetworkmanagerConnection = null as any;
export const getNetworkmanagerConnectionOutput: typeof import("./getNetworkmanagerConnection").getNetworkmanagerConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerConnection","getNetworkmanagerConnectionOutput"], () => require("./getNetworkmanagerConnection"));

export { GetNetworkmanagerConnectionsArgs, GetNetworkmanagerConnectionsResult, GetNetworkmanagerConnectionsOutputArgs } from "./getNetworkmanagerConnections";
export const getNetworkmanagerConnections: typeof import("./getNetworkmanagerConnections").getNetworkmanagerConnections = null as any;
export const getNetworkmanagerConnectionsOutput: typeof import("./getNetworkmanagerConnections").getNetworkmanagerConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerConnections","getNetworkmanagerConnectionsOutput"], () => require("./getNetworkmanagerConnections"));

export { GetNetworkmanagerCoreNetworkPolicyDocumentArgs, GetNetworkmanagerCoreNetworkPolicyDocumentResult, GetNetworkmanagerCoreNetworkPolicyDocumentOutputArgs } from "./getNetworkmanagerCoreNetworkPolicyDocument";
export const getNetworkmanagerCoreNetworkPolicyDocument: typeof import("./getNetworkmanagerCoreNetworkPolicyDocument").getNetworkmanagerCoreNetworkPolicyDocument = null as any;
export const getNetworkmanagerCoreNetworkPolicyDocumentOutput: typeof import("./getNetworkmanagerCoreNetworkPolicyDocument").getNetworkmanagerCoreNetworkPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerCoreNetworkPolicyDocument","getNetworkmanagerCoreNetworkPolicyDocumentOutput"], () => require("./getNetworkmanagerCoreNetworkPolicyDocument"));

export { GetNetworkmanagerDeviceArgs, GetNetworkmanagerDeviceResult, GetNetworkmanagerDeviceOutputArgs } from "./getNetworkmanagerDevice";
export const getNetworkmanagerDevice: typeof import("./getNetworkmanagerDevice").getNetworkmanagerDevice = null as any;
export const getNetworkmanagerDeviceOutput: typeof import("./getNetworkmanagerDevice").getNetworkmanagerDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerDevice","getNetworkmanagerDeviceOutput"], () => require("./getNetworkmanagerDevice"));

export { GetNetworkmanagerDevicesArgs, GetNetworkmanagerDevicesResult, GetNetworkmanagerDevicesOutputArgs } from "./getNetworkmanagerDevices";
export const getNetworkmanagerDevices: typeof import("./getNetworkmanagerDevices").getNetworkmanagerDevices = null as any;
export const getNetworkmanagerDevicesOutput: typeof import("./getNetworkmanagerDevices").getNetworkmanagerDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerDevices","getNetworkmanagerDevicesOutput"], () => require("./getNetworkmanagerDevices"));

export { GetNetworkmanagerGlobalNetworkArgs, GetNetworkmanagerGlobalNetworkResult, GetNetworkmanagerGlobalNetworkOutputArgs } from "./getNetworkmanagerGlobalNetwork";
export const getNetworkmanagerGlobalNetwork: typeof import("./getNetworkmanagerGlobalNetwork").getNetworkmanagerGlobalNetwork = null as any;
export const getNetworkmanagerGlobalNetworkOutput: typeof import("./getNetworkmanagerGlobalNetwork").getNetworkmanagerGlobalNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerGlobalNetwork","getNetworkmanagerGlobalNetworkOutput"], () => require("./getNetworkmanagerGlobalNetwork"));

export { GetNetworkmanagerGlobalNetworksArgs, GetNetworkmanagerGlobalNetworksResult, GetNetworkmanagerGlobalNetworksOutputArgs } from "./getNetworkmanagerGlobalNetworks";
export const getNetworkmanagerGlobalNetworks: typeof import("./getNetworkmanagerGlobalNetworks").getNetworkmanagerGlobalNetworks = null as any;
export const getNetworkmanagerGlobalNetworksOutput: typeof import("./getNetworkmanagerGlobalNetworks").getNetworkmanagerGlobalNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerGlobalNetworks","getNetworkmanagerGlobalNetworksOutput"], () => require("./getNetworkmanagerGlobalNetworks"));

export { GetNetworkmanagerLinkArgs, GetNetworkmanagerLinkResult, GetNetworkmanagerLinkOutputArgs } from "./getNetworkmanagerLink";
export const getNetworkmanagerLink: typeof import("./getNetworkmanagerLink").getNetworkmanagerLink = null as any;
export const getNetworkmanagerLinkOutput: typeof import("./getNetworkmanagerLink").getNetworkmanagerLinkOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerLink","getNetworkmanagerLinkOutput"], () => require("./getNetworkmanagerLink"));

export { GetNetworkmanagerLinksArgs, GetNetworkmanagerLinksResult, GetNetworkmanagerLinksOutputArgs } from "./getNetworkmanagerLinks";
export const getNetworkmanagerLinks: typeof import("./getNetworkmanagerLinks").getNetworkmanagerLinks = null as any;
export const getNetworkmanagerLinksOutput: typeof import("./getNetworkmanagerLinks").getNetworkmanagerLinksOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerLinks","getNetworkmanagerLinksOutput"], () => require("./getNetworkmanagerLinks"));

export { GetNetworkmanagerSiteArgs, GetNetworkmanagerSiteResult, GetNetworkmanagerSiteOutputArgs } from "./getNetworkmanagerSite";
export const getNetworkmanagerSite: typeof import("./getNetworkmanagerSite").getNetworkmanagerSite = null as any;
export const getNetworkmanagerSiteOutput: typeof import("./getNetworkmanagerSite").getNetworkmanagerSiteOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerSite","getNetworkmanagerSiteOutput"], () => require("./getNetworkmanagerSite"));

export { GetNetworkmanagerSitesArgs, GetNetworkmanagerSitesResult, GetNetworkmanagerSitesOutputArgs } from "./getNetworkmanagerSites";
export const getNetworkmanagerSites: typeof import("./getNetworkmanagerSites").getNetworkmanagerSites = null as any;
export const getNetworkmanagerSitesOutput: typeof import("./getNetworkmanagerSites").getNetworkmanagerSitesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkmanagerSites","getNetworkmanagerSitesOutput"], () => require("./getNetworkmanagerSites"));

export { GetOamLinkArgs, GetOamLinkResult, GetOamLinkOutputArgs } from "./getOamLink";
export const getOamLink: typeof import("./getOamLink").getOamLink = null as any;
export const getOamLinkOutput: typeof import("./getOamLink").getOamLinkOutput = null as any;
utilities.lazyLoad(exports, ["getOamLink","getOamLinkOutput"], () => require("./getOamLink"));

export { GetOamLinksArgs, GetOamLinksResult, GetOamLinksOutputArgs } from "./getOamLinks";
export const getOamLinks: typeof import("./getOamLinks").getOamLinks = null as any;
export const getOamLinksOutput: typeof import("./getOamLinks").getOamLinksOutput = null as any;
utilities.lazyLoad(exports, ["getOamLinks","getOamLinksOutput"], () => require("./getOamLinks"));

export { GetOamSinkArgs, GetOamSinkResult, GetOamSinkOutputArgs } from "./getOamSink";
export const getOamSink: typeof import("./getOamSink").getOamSink = null as any;
export const getOamSinkOutput: typeof import("./getOamSink").getOamSinkOutput = null as any;
utilities.lazyLoad(exports, ["getOamSink","getOamSinkOutput"], () => require("./getOamSink"));

export { GetOamSinksArgs, GetOamSinksResult, GetOamSinksOutputArgs } from "./getOamSinks";
export const getOamSinks: typeof import("./getOamSinks").getOamSinks = null as any;
export const getOamSinksOutput: typeof import("./getOamSinks").getOamSinksOutput = null as any;
utilities.lazyLoad(exports, ["getOamSinks","getOamSinksOutput"], () => require("./getOamSinks"));

export { GetOpensearchDomainArgs, GetOpensearchDomainResult, GetOpensearchDomainOutputArgs } from "./getOpensearchDomain";
export const getOpensearchDomain: typeof import("./getOpensearchDomain").getOpensearchDomain = null as any;
export const getOpensearchDomainOutput: typeof import("./getOpensearchDomain").getOpensearchDomainOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchDomain","getOpensearchDomainOutput"], () => require("./getOpensearchDomain"));

export { GetOpensearchserverlessAccessPolicyArgs, GetOpensearchserverlessAccessPolicyResult, GetOpensearchserverlessAccessPolicyOutputArgs } from "./getOpensearchserverlessAccessPolicy";
export const getOpensearchserverlessAccessPolicy: typeof import("./getOpensearchserverlessAccessPolicy").getOpensearchserverlessAccessPolicy = null as any;
export const getOpensearchserverlessAccessPolicyOutput: typeof import("./getOpensearchserverlessAccessPolicy").getOpensearchserverlessAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessAccessPolicy","getOpensearchserverlessAccessPolicyOutput"], () => require("./getOpensearchserverlessAccessPolicy"));

export { GetOpensearchserverlessCollectionArgs, GetOpensearchserverlessCollectionResult, GetOpensearchserverlessCollectionOutputArgs } from "./getOpensearchserverlessCollection";
export const getOpensearchserverlessCollection: typeof import("./getOpensearchserverlessCollection").getOpensearchserverlessCollection = null as any;
export const getOpensearchserverlessCollectionOutput: typeof import("./getOpensearchserverlessCollection").getOpensearchserverlessCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessCollection","getOpensearchserverlessCollectionOutput"], () => require("./getOpensearchserverlessCollection"));

export { GetOpensearchserverlessLifecyclePolicyArgs, GetOpensearchserverlessLifecyclePolicyResult, GetOpensearchserverlessLifecyclePolicyOutputArgs } from "./getOpensearchserverlessLifecyclePolicy";
export const getOpensearchserverlessLifecyclePolicy: typeof import("./getOpensearchserverlessLifecyclePolicy").getOpensearchserverlessLifecyclePolicy = null as any;
export const getOpensearchserverlessLifecyclePolicyOutput: typeof import("./getOpensearchserverlessLifecyclePolicy").getOpensearchserverlessLifecyclePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessLifecyclePolicy","getOpensearchserverlessLifecyclePolicyOutput"], () => require("./getOpensearchserverlessLifecyclePolicy"));

export { GetOpensearchserverlessSecurityConfigArgs, GetOpensearchserverlessSecurityConfigResult, GetOpensearchserverlessSecurityConfigOutputArgs } from "./getOpensearchserverlessSecurityConfig";
export const getOpensearchserverlessSecurityConfig: typeof import("./getOpensearchserverlessSecurityConfig").getOpensearchserverlessSecurityConfig = null as any;
export const getOpensearchserverlessSecurityConfigOutput: typeof import("./getOpensearchserverlessSecurityConfig").getOpensearchserverlessSecurityConfigOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessSecurityConfig","getOpensearchserverlessSecurityConfigOutput"], () => require("./getOpensearchserverlessSecurityConfig"));

export { GetOpensearchserverlessSecurityPolicyArgs, GetOpensearchserverlessSecurityPolicyResult, GetOpensearchserverlessSecurityPolicyOutputArgs } from "./getOpensearchserverlessSecurityPolicy";
export const getOpensearchserverlessSecurityPolicy: typeof import("./getOpensearchserverlessSecurityPolicy").getOpensearchserverlessSecurityPolicy = null as any;
export const getOpensearchserverlessSecurityPolicyOutput: typeof import("./getOpensearchserverlessSecurityPolicy").getOpensearchserverlessSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessSecurityPolicy","getOpensearchserverlessSecurityPolicyOutput"], () => require("./getOpensearchserverlessSecurityPolicy"));

export { GetOpensearchserverlessVpcEndpointArgs, GetOpensearchserverlessVpcEndpointResult, GetOpensearchserverlessVpcEndpointOutputArgs } from "./getOpensearchserverlessVpcEndpoint";
export const getOpensearchserverlessVpcEndpoint: typeof import("./getOpensearchserverlessVpcEndpoint").getOpensearchserverlessVpcEndpoint = null as any;
export const getOpensearchserverlessVpcEndpointOutput: typeof import("./getOpensearchserverlessVpcEndpoint").getOpensearchserverlessVpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchserverlessVpcEndpoint","getOpensearchserverlessVpcEndpointOutput"], () => require("./getOpensearchserverlessVpcEndpoint"));

export { GetOrganizationsDelegatedAdministratorsArgs, GetOrganizationsDelegatedAdministratorsResult, GetOrganizationsDelegatedAdministratorsOutputArgs } from "./getOrganizationsDelegatedAdministrators";
export const getOrganizationsDelegatedAdministrators: typeof import("./getOrganizationsDelegatedAdministrators").getOrganizationsDelegatedAdministrators = null as any;
export const getOrganizationsDelegatedAdministratorsOutput: typeof import("./getOrganizationsDelegatedAdministrators").getOrganizationsDelegatedAdministratorsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsDelegatedAdministrators","getOrganizationsDelegatedAdministratorsOutput"], () => require("./getOrganizationsDelegatedAdministrators"));

export { GetOrganizationsDelegatedServicesArgs, GetOrganizationsDelegatedServicesResult, GetOrganizationsDelegatedServicesOutputArgs } from "./getOrganizationsDelegatedServices";
export const getOrganizationsDelegatedServices: typeof import("./getOrganizationsDelegatedServices").getOrganizationsDelegatedServices = null as any;
export const getOrganizationsDelegatedServicesOutput: typeof import("./getOrganizationsDelegatedServices").getOrganizationsDelegatedServicesOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsDelegatedServices","getOrganizationsDelegatedServicesOutput"], () => require("./getOrganizationsDelegatedServices"));

export { GetOrganizationsOrganizationArgs, GetOrganizationsOrganizationResult, GetOrganizationsOrganizationOutputArgs } from "./getOrganizationsOrganization";
export const getOrganizationsOrganization: typeof import("./getOrganizationsOrganization").getOrganizationsOrganization = null as any;
export const getOrganizationsOrganizationOutput: typeof import("./getOrganizationsOrganization").getOrganizationsOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganization","getOrganizationsOrganizationOutput"], () => require("./getOrganizationsOrganization"));

export { GetOrganizationsOrganizationalUnitArgs, GetOrganizationsOrganizationalUnitResult, GetOrganizationsOrganizationalUnitOutputArgs } from "./getOrganizationsOrganizationalUnit";
export const getOrganizationsOrganizationalUnit: typeof import("./getOrganizationsOrganizationalUnit").getOrganizationsOrganizationalUnit = null as any;
export const getOrganizationsOrganizationalUnitOutput: typeof import("./getOrganizationsOrganizationalUnit").getOrganizationsOrganizationalUnitOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganizationalUnit","getOrganizationsOrganizationalUnitOutput"], () => require("./getOrganizationsOrganizationalUnit"));

export { GetOrganizationsOrganizationalUnitChildAccountsArgs, GetOrganizationsOrganizationalUnitChildAccountsResult, GetOrganizationsOrganizationalUnitChildAccountsOutputArgs } from "./getOrganizationsOrganizationalUnitChildAccounts";
export const getOrganizationsOrganizationalUnitChildAccounts: typeof import("./getOrganizationsOrganizationalUnitChildAccounts").getOrganizationsOrganizationalUnitChildAccounts = null as any;
export const getOrganizationsOrganizationalUnitChildAccountsOutput: typeof import("./getOrganizationsOrganizationalUnitChildAccounts").getOrganizationsOrganizationalUnitChildAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganizationalUnitChildAccounts","getOrganizationsOrganizationalUnitChildAccountsOutput"], () => require("./getOrganizationsOrganizationalUnitChildAccounts"));

export { GetOrganizationsOrganizationalUnitDescendantAccountsArgs, GetOrganizationsOrganizationalUnitDescendantAccountsResult, GetOrganizationsOrganizationalUnitDescendantAccountsOutputArgs } from "./getOrganizationsOrganizationalUnitDescendantAccounts";
export const getOrganizationsOrganizationalUnitDescendantAccounts: typeof import("./getOrganizationsOrganizationalUnitDescendantAccounts").getOrganizationsOrganizationalUnitDescendantAccounts = null as any;
export const getOrganizationsOrganizationalUnitDescendantAccountsOutput: typeof import("./getOrganizationsOrganizationalUnitDescendantAccounts").getOrganizationsOrganizationalUnitDescendantAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganizationalUnitDescendantAccounts","getOrganizationsOrganizationalUnitDescendantAccountsOutput"], () => require("./getOrganizationsOrganizationalUnitDescendantAccounts"));

export { GetOrganizationsOrganizationalUnitsArgs, GetOrganizationsOrganizationalUnitsResult, GetOrganizationsOrganizationalUnitsOutputArgs } from "./getOrganizationsOrganizationalUnits";
export const getOrganizationsOrganizationalUnits: typeof import("./getOrganizationsOrganizationalUnits").getOrganizationsOrganizationalUnits = null as any;
export const getOrganizationsOrganizationalUnitsOutput: typeof import("./getOrganizationsOrganizationalUnits").getOrganizationsOrganizationalUnitsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsOrganizationalUnits","getOrganizationsOrganizationalUnitsOutput"], () => require("./getOrganizationsOrganizationalUnits"));

export { GetOrganizationsPoliciesArgs, GetOrganizationsPoliciesResult, GetOrganizationsPoliciesOutputArgs } from "./getOrganizationsPolicies";
export const getOrganizationsPolicies: typeof import("./getOrganizationsPolicies").getOrganizationsPolicies = null as any;
export const getOrganizationsPoliciesOutput: typeof import("./getOrganizationsPolicies").getOrganizationsPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsPolicies","getOrganizationsPoliciesOutput"], () => require("./getOrganizationsPolicies"));

export { GetOrganizationsPoliciesForTargetArgs, GetOrganizationsPoliciesForTargetResult, GetOrganizationsPoliciesForTargetOutputArgs } from "./getOrganizationsPoliciesForTarget";
export const getOrganizationsPoliciesForTarget: typeof import("./getOrganizationsPoliciesForTarget").getOrganizationsPoliciesForTarget = null as any;
export const getOrganizationsPoliciesForTargetOutput: typeof import("./getOrganizationsPoliciesForTarget").getOrganizationsPoliciesForTargetOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsPoliciesForTarget","getOrganizationsPoliciesForTargetOutput"], () => require("./getOrganizationsPoliciesForTarget"));

export { GetOrganizationsPolicyArgs, GetOrganizationsPolicyResult, GetOrganizationsPolicyOutputArgs } from "./getOrganizationsPolicy";
export const getOrganizationsPolicy: typeof import("./getOrganizationsPolicy").getOrganizationsPolicy = null as any;
export const getOrganizationsPolicyOutput: typeof import("./getOrganizationsPolicy").getOrganizationsPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsPolicy","getOrganizationsPolicyOutput"], () => require("./getOrganizationsPolicy"));

export { GetOrganizationsResourceTagsArgs, GetOrganizationsResourceTagsResult, GetOrganizationsResourceTagsOutputArgs } from "./getOrganizationsResourceTags";
export const getOrganizationsResourceTags: typeof import("./getOrganizationsResourceTags").getOrganizationsResourceTags = null as any;
export const getOrganizationsResourceTagsOutput: typeof import("./getOrganizationsResourceTags").getOrganizationsResourceTagsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationsResourceTags","getOrganizationsResourceTagsOutput"], () => require("./getOrganizationsResourceTags"));

export { GetOutpostsAssetArgs, GetOutpostsAssetResult, GetOutpostsAssetOutputArgs } from "./getOutpostsAsset";
export const getOutpostsAsset: typeof import("./getOutpostsAsset").getOutpostsAsset = null as any;
export const getOutpostsAssetOutput: typeof import("./getOutpostsAsset").getOutpostsAssetOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsAsset","getOutpostsAssetOutput"], () => require("./getOutpostsAsset"));

export { GetOutpostsAssetsArgs, GetOutpostsAssetsResult, GetOutpostsAssetsOutputArgs } from "./getOutpostsAssets";
export const getOutpostsAssets: typeof import("./getOutpostsAssets").getOutpostsAssets = null as any;
export const getOutpostsAssetsOutput: typeof import("./getOutpostsAssets").getOutpostsAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsAssets","getOutpostsAssetsOutput"], () => require("./getOutpostsAssets"));

export { GetOutpostsOutpostArgs, GetOutpostsOutpostResult, GetOutpostsOutpostOutputArgs } from "./getOutpostsOutpost";
export const getOutpostsOutpost: typeof import("./getOutpostsOutpost").getOutpostsOutpost = null as any;
export const getOutpostsOutpostOutput: typeof import("./getOutpostsOutpost").getOutpostsOutpostOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsOutpost","getOutpostsOutpostOutput"], () => require("./getOutpostsOutpost"));

export { GetOutpostsOutpostInstanceTypeArgs, GetOutpostsOutpostInstanceTypeResult, GetOutpostsOutpostInstanceTypeOutputArgs } from "./getOutpostsOutpostInstanceType";
export const getOutpostsOutpostInstanceType: typeof import("./getOutpostsOutpostInstanceType").getOutpostsOutpostInstanceType = null as any;
export const getOutpostsOutpostInstanceTypeOutput: typeof import("./getOutpostsOutpostInstanceType").getOutpostsOutpostInstanceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsOutpostInstanceType","getOutpostsOutpostInstanceTypeOutput"], () => require("./getOutpostsOutpostInstanceType"));

export { GetOutpostsOutpostInstanceTypesArgs, GetOutpostsOutpostInstanceTypesResult, GetOutpostsOutpostInstanceTypesOutputArgs } from "./getOutpostsOutpostInstanceTypes";
export const getOutpostsOutpostInstanceTypes: typeof import("./getOutpostsOutpostInstanceTypes").getOutpostsOutpostInstanceTypes = null as any;
export const getOutpostsOutpostInstanceTypesOutput: typeof import("./getOutpostsOutpostInstanceTypes").getOutpostsOutpostInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsOutpostInstanceTypes","getOutpostsOutpostInstanceTypesOutput"], () => require("./getOutpostsOutpostInstanceTypes"));

export { GetOutpostsOutpostsArgs, GetOutpostsOutpostsResult, GetOutpostsOutpostsOutputArgs } from "./getOutpostsOutposts";
export const getOutpostsOutposts: typeof import("./getOutpostsOutposts").getOutpostsOutposts = null as any;
export const getOutpostsOutpostsOutput: typeof import("./getOutpostsOutposts").getOutpostsOutpostsOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsOutposts","getOutpostsOutpostsOutput"], () => require("./getOutpostsOutposts"));

export { GetOutpostsSiteArgs, GetOutpostsSiteResult, GetOutpostsSiteOutputArgs } from "./getOutpostsSite";
export const getOutpostsSite: typeof import("./getOutpostsSite").getOutpostsSite = null as any;
export const getOutpostsSiteOutput: typeof import("./getOutpostsSite").getOutpostsSiteOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsSite","getOutpostsSiteOutput"], () => require("./getOutpostsSite"));

export { GetOutpostsSitesArgs, GetOutpostsSitesResult, GetOutpostsSitesOutputArgs } from "./getOutpostsSites";
export const getOutpostsSites: typeof import("./getOutpostsSites").getOutpostsSites = null as any;
export const getOutpostsSitesOutput: typeof import("./getOutpostsSites").getOutpostsSitesOutput = null as any;
utilities.lazyLoad(exports, ["getOutpostsSites","getOutpostsSitesOutput"], () => require("./getOutpostsSites"));

export { GetPartitionArgs, GetPartitionResult, GetPartitionOutputArgs } from "./getPartition";
export const getPartition: typeof import("./getPartition").getPartition = null as any;
export const getPartitionOutput: typeof import("./getPartition").getPartitionOutput = null as any;
utilities.lazyLoad(exports, ["getPartition","getPartitionOutput"], () => require("./getPartition"));

export { GetPollyVoicesArgs, GetPollyVoicesResult, GetPollyVoicesOutputArgs } from "./getPollyVoices";
export const getPollyVoices: typeof import("./getPollyVoices").getPollyVoices = null as any;
export const getPollyVoicesOutput: typeof import("./getPollyVoices").getPollyVoicesOutput = null as any;
utilities.lazyLoad(exports, ["getPollyVoices","getPollyVoicesOutput"], () => require("./getPollyVoices"));

export { GetPrefixListArgs, GetPrefixListResult, GetPrefixListOutputArgs } from "./getPrefixList";
export const getPrefixList: typeof import("./getPrefixList").getPrefixList = null as any;
export const getPrefixListOutput: typeof import("./getPrefixList").getPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPrefixList","getPrefixListOutput"], () => require("./getPrefixList"));

export { GetPricingProductArgs, GetPricingProductResult, GetPricingProductOutputArgs } from "./getPricingProduct";
export const getPricingProduct: typeof import("./getPricingProduct").getPricingProduct = null as any;
export const getPricingProductOutput: typeof import("./getPricingProduct").getPricingProductOutput = null as any;
utilities.lazyLoad(exports, ["getPricingProduct","getPricingProductOutput"], () => require("./getPricingProduct"));

export { GetPrometheusWorkspaceArgs, GetPrometheusWorkspaceResult, GetPrometheusWorkspaceOutputArgs } from "./getPrometheusWorkspace";
export const getPrometheusWorkspace: typeof import("./getPrometheusWorkspace").getPrometheusWorkspace = null as any;
export const getPrometheusWorkspaceOutput: typeof import("./getPrometheusWorkspace").getPrometheusWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheusWorkspace","getPrometheusWorkspaceOutput"], () => require("./getPrometheusWorkspace"));

export { GetPrometheusWorkspacesArgs, GetPrometheusWorkspacesResult, GetPrometheusWorkspacesOutputArgs } from "./getPrometheusWorkspaces";
export const getPrometheusWorkspaces: typeof import("./getPrometheusWorkspaces").getPrometheusWorkspaces = null as any;
export const getPrometheusWorkspacesOutput: typeof import("./getPrometheusWorkspaces").getPrometheusWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getPrometheusWorkspaces","getPrometheusWorkspacesOutput"], () => require("./getPrometheusWorkspaces"));

export { GetQldbLedgerArgs, GetQldbLedgerResult, GetQldbLedgerOutputArgs } from "./getQldbLedger";
export const getQldbLedger: typeof import("./getQldbLedger").getQldbLedger = null as any;
export const getQldbLedgerOutput: typeof import("./getQldbLedger").getQldbLedgerOutput = null as any;
utilities.lazyLoad(exports, ["getQldbLedger","getQldbLedgerOutput"], () => require("./getQldbLedger"));

export { GetQuicksightDataSetArgs, GetQuicksightDataSetResult, GetQuicksightDataSetOutputArgs } from "./getQuicksightDataSet";
export const getQuicksightDataSet: typeof import("./getQuicksightDataSet").getQuicksightDataSet = null as any;
export const getQuicksightDataSetOutput: typeof import("./getQuicksightDataSet").getQuicksightDataSetOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightDataSet","getQuicksightDataSetOutput"], () => require("./getQuicksightDataSet"));

export { GetQuicksightGroupArgs, GetQuicksightGroupResult, GetQuicksightGroupOutputArgs } from "./getQuicksightGroup";
export const getQuicksightGroup: typeof import("./getQuicksightGroup").getQuicksightGroup = null as any;
export const getQuicksightGroupOutput: typeof import("./getQuicksightGroup").getQuicksightGroupOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightGroup","getQuicksightGroupOutput"], () => require("./getQuicksightGroup"));

export { GetQuicksightThemeArgs, GetQuicksightThemeResult, GetQuicksightThemeOutputArgs } from "./getQuicksightTheme";
export const getQuicksightTheme: typeof import("./getQuicksightTheme").getQuicksightTheme = null as any;
export const getQuicksightThemeOutput: typeof import("./getQuicksightTheme").getQuicksightThemeOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightTheme","getQuicksightThemeOutput"], () => require("./getQuicksightTheme"));

export { GetQuicksightUserArgs, GetQuicksightUserResult, GetQuicksightUserOutputArgs } from "./getQuicksightUser";
export const getQuicksightUser: typeof import("./getQuicksightUser").getQuicksightUser = null as any;
export const getQuicksightUserOutput: typeof import("./getQuicksightUser").getQuicksightUserOutput = null as any;
utilities.lazyLoad(exports, ["getQuicksightUser","getQuicksightUserOutput"], () => require("./getQuicksightUser"));

export { GetRamResourceShareArgs, GetRamResourceShareResult, GetRamResourceShareOutputArgs } from "./getRamResourceShare";
export const getRamResourceShare: typeof import("./getRamResourceShare").getRamResourceShare = null as any;
export const getRamResourceShareOutput: typeof import("./getRamResourceShare").getRamResourceShareOutput = null as any;
utilities.lazyLoad(exports, ["getRamResourceShare","getRamResourceShareOutput"], () => require("./getRamResourceShare"));

export { GetRdsCertificateArgs, GetRdsCertificateResult, GetRdsCertificateOutputArgs } from "./getRdsCertificate";
export const getRdsCertificate: typeof import("./getRdsCertificate").getRdsCertificate = null as any;
export const getRdsCertificateOutput: typeof import("./getRdsCertificate").getRdsCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCertificate","getRdsCertificateOutput"], () => require("./getRdsCertificate"));

export { GetRdsClusterArgs, GetRdsClusterResult, GetRdsClusterOutputArgs } from "./getRdsCluster";
export const getRdsCluster: typeof import("./getRdsCluster").getRdsCluster = null as any;
export const getRdsClusterOutput: typeof import("./getRdsCluster").getRdsClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRdsCluster","getRdsClusterOutput"], () => require("./getRdsCluster"));

export { GetRdsClusterParameterGroupArgs, GetRdsClusterParameterGroupResult, GetRdsClusterParameterGroupOutputArgs } from "./getRdsClusterParameterGroup";
export const getRdsClusterParameterGroup: typeof import("./getRdsClusterParameterGroup").getRdsClusterParameterGroup = null as any;
export const getRdsClusterParameterGroupOutput: typeof import("./getRdsClusterParameterGroup").getRdsClusterParameterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRdsClusterParameterGroup","getRdsClusterParameterGroupOutput"], () => require("./getRdsClusterParameterGroup"));

export { GetRdsClustersArgs, GetRdsClustersResult, GetRdsClustersOutputArgs } from "./getRdsClusters";
export const getRdsClusters: typeof import("./getRdsClusters").getRdsClusters = null as any;
export const getRdsClustersOutput: typeof import("./getRdsClusters").getRdsClustersOutput = null as any;
utilities.lazyLoad(exports, ["getRdsClusters","getRdsClustersOutput"], () => require("./getRdsClusters"));

export { GetRdsEngineVersionArgs, GetRdsEngineVersionResult, GetRdsEngineVersionOutputArgs } from "./getRdsEngineVersion";
export const getRdsEngineVersion: typeof import("./getRdsEngineVersion").getRdsEngineVersion = null as any;
export const getRdsEngineVersionOutput: typeof import("./getRdsEngineVersion").getRdsEngineVersionOutput = null as any;
utilities.lazyLoad(exports, ["getRdsEngineVersion","getRdsEngineVersionOutput"], () => require("./getRdsEngineVersion"));

export { GetRdsOrderableDbInstanceArgs, GetRdsOrderableDbInstanceResult, GetRdsOrderableDbInstanceOutputArgs } from "./getRdsOrderableDbInstance";
export const getRdsOrderableDbInstance: typeof import("./getRdsOrderableDbInstance").getRdsOrderableDbInstance = null as any;
export const getRdsOrderableDbInstanceOutput: typeof import("./getRdsOrderableDbInstance").getRdsOrderableDbInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRdsOrderableDbInstance","getRdsOrderableDbInstanceOutput"], () => require("./getRdsOrderableDbInstance"));

export { GetRdsReservedInstanceOfferingArgs, GetRdsReservedInstanceOfferingResult, GetRdsReservedInstanceOfferingOutputArgs } from "./getRdsReservedInstanceOffering";
export const getRdsReservedInstanceOffering: typeof import("./getRdsReservedInstanceOffering").getRdsReservedInstanceOffering = null as any;
export const getRdsReservedInstanceOfferingOutput: typeof import("./getRdsReservedInstanceOffering").getRdsReservedInstanceOfferingOutput = null as any;
utilities.lazyLoad(exports, ["getRdsReservedInstanceOffering","getRdsReservedInstanceOfferingOutput"], () => require("./getRdsReservedInstanceOffering"));

export { GetRedshiftClusterArgs, GetRedshiftClusterResult, GetRedshiftClusterOutputArgs } from "./getRedshiftCluster";
export const getRedshiftCluster: typeof import("./getRedshiftCluster").getRedshiftCluster = null as any;
export const getRedshiftClusterOutput: typeof import("./getRedshiftCluster").getRedshiftClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftCluster","getRedshiftClusterOutput"], () => require("./getRedshiftCluster"));

export { GetRedshiftClusterCredentialsArgs, GetRedshiftClusterCredentialsResult, GetRedshiftClusterCredentialsOutputArgs } from "./getRedshiftClusterCredentials";
export const getRedshiftClusterCredentials: typeof import("./getRedshiftClusterCredentials").getRedshiftClusterCredentials = null as any;
export const getRedshiftClusterCredentialsOutput: typeof import("./getRedshiftClusterCredentials").getRedshiftClusterCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftClusterCredentials","getRedshiftClusterCredentialsOutput"], () => require("./getRedshiftClusterCredentials"));

export { GetRedshiftDataSharesArgs, GetRedshiftDataSharesResult, GetRedshiftDataSharesOutputArgs } from "./getRedshiftDataShares";
export const getRedshiftDataShares: typeof import("./getRedshiftDataShares").getRedshiftDataShares = null as any;
export const getRedshiftDataSharesOutput: typeof import("./getRedshiftDataShares").getRedshiftDataSharesOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftDataShares","getRedshiftDataSharesOutput"], () => require("./getRedshiftDataShares"));

export { GetRedshiftOrderableClusterArgs, GetRedshiftOrderableClusterResult, GetRedshiftOrderableClusterOutputArgs } from "./getRedshiftOrderableCluster";
export const getRedshiftOrderableCluster: typeof import("./getRedshiftOrderableCluster").getRedshiftOrderableCluster = null as any;
export const getRedshiftOrderableClusterOutput: typeof import("./getRedshiftOrderableCluster").getRedshiftOrderableClusterOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftOrderableCluster","getRedshiftOrderableClusterOutput"], () => require("./getRedshiftOrderableCluster"));

export { GetRedshiftProducerDataSharesArgs, GetRedshiftProducerDataSharesResult, GetRedshiftProducerDataSharesOutputArgs } from "./getRedshiftProducerDataShares";
export const getRedshiftProducerDataShares: typeof import("./getRedshiftProducerDataShares").getRedshiftProducerDataShares = null as any;
export const getRedshiftProducerDataSharesOutput: typeof import("./getRedshiftProducerDataShares").getRedshiftProducerDataSharesOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftProducerDataShares","getRedshiftProducerDataSharesOutput"], () => require("./getRedshiftProducerDataShares"));

export { GetRedshiftServiceAccountArgs, GetRedshiftServiceAccountResult, GetRedshiftServiceAccountOutputArgs } from "./getRedshiftServiceAccount";
export const getRedshiftServiceAccount: typeof import("./getRedshiftServiceAccount").getRedshiftServiceAccount = null as any;
export const getRedshiftServiceAccountOutput: typeof import("./getRedshiftServiceAccount").getRedshiftServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftServiceAccount","getRedshiftServiceAccountOutput"], () => require("./getRedshiftServiceAccount"));

export { GetRedshiftSubnetGroupArgs, GetRedshiftSubnetGroupResult, GetRedshiftSubnetGroupOutputArgs } from "./getRedshiftSubnetGroup";
export const getRedshiftSubnetGroup: typeof import("./getRedshiftSubnetGroup").getRedshiftSubnetGroup = null as any;
export const getRedshiftSubnetGroupOutput: typeof import("./getRedshiftSubnetGroup").getRedshiftSubnetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftSubnetGroup","getRedshiftSubnetGroupOutput"], () => require("./getRedshiftSubnetGroup"));

export { GetRedshiftserverlessCredentialsArgs, GetRedshiftserverlessCredentialsResult, GetRedshiftserverlessCredentialsOutputArgs } from "./getRedshiftserverlessCredentials";
export const getRedshiftserverlessCredentials: typeof import("./getRedshiftserverlessCredentials").getRedshiftserverlessCredentials = null as any;
export const getRedshiftserverlessCredentialsOutput: typeof import("./getRedshiftserverlessCredentials").getRedshiftserverlessCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftserverlessCredentials","getRedshiftserverlessCredentialsOutput"], () => require("./getRedshiftserverlessCredentials"));

export { GetRedshiftserverlessNamespaceArgs, GetRedshiftserverlessNamespaceResult, GetRedshiftserverlessNamespaceOutputArgs } from "./getRedshiftserverlessNamespace";
export const getRedshiftserverlessNamespace: typeof import("./getRedshiftserverlessNamespace").getRedshiftserverlessNamespace = null as any;
export const getRedshiftserverlessNamespaceOutput: typeof import("./getRedshiftserverlessNamespace").getRedshiftserverlessNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftserverlessNamespace","getRedshiftserverlessNamespaceOutput"], () => require("./getRedshiftserverlessNamespace"));

export { GetRedshiftserverlessWorkgroupArgs, GetRedshiftserverlessWorkgroupResult, GetRedshiftserverlessWorkgroupOutputArgs } from "./getRedshiftserverlessWorkgroup";
export const getRedshiftserverlessWorkgroup: typeof import("./getRedshiftserverlessWorkgroup").getRedshiftserverlessWorkgroup = null as any;
export const getRedshiftserverlessWorkgroupOutput: typeof import("./getRedshiftserverlessWorkgroup").getRedshiftserverlessWorkgroupOutput = null as any;
utilities.lazyLoad(exports, ["getRedshiftserverlessWorkgroup","getRedshiftserverlessWorkgroupOutput"], () => require("./getRedshiftserverlessWorkgroup"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetResourceexplorer2SearchArgs, GetResourceexplorer2SearchResult, GetResourceexplorer2SearchOutputArgs } from "./getResourceexplorer2Search";
export const getResourceexplorer2Search: typeof import("./getResourceexplorer2Search").getResourceexplorer2Search = null as any;
export const getResourceexplorer2SearchOutput: typeof import("./getResourceexplorer2Search").getResourceexplorer2SearchOutput = null as any;
utilities.lazyLoad(exports, ["getResourceexplorer2Search","getResourceexplorer2SearchOutput"], () => require("./getResourceexplorer2Search"));

export { GetResourcegroupstaggingapiResourcesArgs, GetResourcegroupstaggingapiResourcesResult, GetResourcegroupstaggingapiResourcesOutputArgs } from "./getResourcegroupstaggingapiResources";
export const getResourcegroupstaggingapiResources: typeof import("./getResourcegroupstaggingapiResources").getResourcegroupstaggingapiResources = null as any;
export const getResourcegroupstaggingapiResourcesOutput: typeof import("./getResourcegroupstaggingapiResources").getResourcegroupstaggingapiResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getResourcegroupstaggingapiResources","getResourcegroupstaggingapiResourcesOutput"], () => require("./getResourcegroupstaggingapiResources"));

export { GetRouteArgs, GetRouteResult, GetRouteOutputArgs } from "./getRoute";
export const getRoute: typeof import("./getRoute").getRoute = null as any;
export const getRouteOutput: typeof import("./getRoute").getRouteOutput = null as any;
utilities.lazyLoad(exports, ["getRoute","getRouteOutput"], () => require("./getRoute"));

export { GetRoute53DelegationSetArgs, GetRoute53DelegationSetResult, GetRoute53DelegationSetOutputArgs } from "./getRoute53DelegationSet";
export const getRoute53DelegationSet: typeof import("./getRoute53DelegationSet").getRoute53DelegationSet = null as any;
export const getRoute53DelegationSetOutput: typeof import("./getRoute53DelegationSet").getRoute53DelegationSetOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53DelegationSet","getRoute53DelegationSetOutput"], () => require("./getRoute53DelegationSet"));

export { GetRoute53ResolverEndpointArgs, GetRoute53ResolverEndpointResult, GetRoute53ResolverEndpointOutputArgs } from "./getRoute53ResolverEndpoint";
export const getRoute53ResolverEndpoint: typeof import("./getRoute53ResolverEndpoint").getRoute53ResolverEndpoint = null as any;
export const getRoute53ResolverEndpointOutput: typeof import("./getRoute53ResolverEndpoint").getRoute53ResolverEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverEndpoint","getRoute53ResolverEndpointOutput"], () => require("./getRoute53ResolverEndpoint"));

export { GetRoute53ResolverFirewallConfigArgs, GetRoute53ResolverFirewallConfigResult, GetRoute53ResolverFirewallConfigOutputArgs } from "./getRoute53ResolverFirewallConfig";
export const getRoute53ResolverFirewallConfig: typeof import("./getRoute53ResolverFirewallConfig").getRoute53ResolverFirewallConfig = null as any;
export const getRoute53ResolverFirewallConfigOutput: typeof import("./getRoute53ResolverFirewallConfig").getRoute53ResolverFirewallConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverFirewallConfig","getRoute53ResolverFirewallConfigOutput"], () => require("./getRoute53ResolverFirewallConfig"));

export { GetRoute53ResolverFirewallDomainListArgs, GetRoute53ResolverFirewallDomainListResult, GetRoute53ResolverFirewallDomainListOutputArgs } from "./getRoute53ResolverFirewallDomainList";
export const getRoute53ResolverFirewallDomainList: typeof import("./getRoute53ResolverFirewallDomainList").getRoute53ResolverFirewallDomainList = null as any;
export const getRoute53ResolverFirewallDomainListOutput: typeof import("./getRoute53ResolverFirewallDomainList").getRoute53ResolverFirewallDomainListOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverFirewallDomainList","getRoute53ResolverFirewallDomainListOutput"], () => require("./getRoute53ResolverFirewallDomainList"));

export { GetRoute53ResolverFirewallRuleGroupArgs, GetRoute53ResolverFirewallRuleGroupResult, GetRoute53ResolverFirewallRuleGroupOutputArgs } from "./getRoute53ResolverFirewallRuleGroup";
export const getRoute53ResolverFirewallRuleGroup: typeof import("./getRoute53ResolverFirewallRuleGroup").getRoute53ResolverFirewallRuleGroup = null as any;
export const getRoute53ResolverFirewallRuleGroupOutput: typeof import("./getRoute53ResolverFirewallRuleGroup").getRoute53ResolverFirewallRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverFirewallRuleGroup","getRoute53ResolverFirewallRuleGroupOutput"], () => require("./getRoute53ResolverFirewallRuleGroup"));

export { GetRoute53ResolverFirewallRuleGroupAssociationArgs, GetRoute53ResolverFirewallRuleGroupAssociationResult, GetRoute53ResolverFirewallRuleGroupAssociationOutputArgs } from "./getRoute53ResolverFirewallRuleGroupAssociation";
export const getRoute53ResolverFirewallRuleGroupAssociation: typeof import("./getRoute53ResolverFirewallRuleGroupAssociation").getRoute53ResolverFirewallRuleGroupAssociation = null as any;
export const getRoute53ResolverFirewallRuleGroupAssociationOutput: typeof import("./getRoute53ResolverFirewallRuleGroupAssociation").getRoute53ResolverFirewallRuleGroupAssociationOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverFirewallRuleGroupAssociation","getRoute53ResolverFirewallRuleGroupAssociationOutput"], () => require("./getRoute53ResolverFirewallRuleGroupAssociation"));

export { GetRoute53ResolverFirewallRulesArgs, GetRoute53ResolverFirewallRulesResult, GetRoute53ResolverFirewallRulesOutputArgs } from "./getRoute53ResolverFirewallRules";
export const getRoute53ResolverFirewallRules: typeof import("./getRoute53ResolverFirewallRules").getRoute53ResolverFirewallRules = null as any;
export const getRoute53ResolverFirewallRulesOutput: typeof import("./getRoute53ResolverFirewallRules").getRoute53ResolverFirewallRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverFirewallRules","getRoute53ResolverFirewallRulesOutput"], () => require("./getRoute53ResolverFirewallRules"));

export { GetRoute53ResolverQueryLogConfigArgs, GetRoute53ResolverQueryLogConfigResult, GetRoute53ResolverQueryLogConfigOutputArgs } from "./getRoute53ResolverQueryLogConfig";
export const getRoute53ResolverQueryLogConfig: typeof import("./getRoute53ResolverQueryLogConfig").getRoute53ResolverQueryLogConfig = null as any;
export const getRoute53ResolverQueryLogConfigOutput: typeof import("./getRoute53ResolverQueryLogConfig").getRoute53ResolverQueryLogConfigOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverQueryLogConfig","getRoute53ResolverQueryLogConfigOutput"], () => require("./getRoute53ResolverQueryLogConfig"));

export { GetRoute53ResolverRuleArgs, GetRoute53ResolverRuleResult, GetRoute53ResolverRuleOutputArgs } from "./getRoute53ResolverRule";
export const getRoute53ResolverRule: typeof import("./getRoute53ResolverRule").getRoute53ResolverRule = null as any;
export const getRoute53ResolverRuleOutput: typeof import("./getRoute53ResolverRule").getRoute53ResolverRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverRule","getRoute53ResolverRuleOutput"], () => require("./getRoute53ResolverRule"));

export { GetRoute53ResolverRulesArgs, GetRoute53ResolverRulesResult, GetRoute53ResolverRulesOutputArgs } from "./getRoute53ResolverRules";
export const getRoute53ResolverRules: typeof import("./getRoute53ResolverRules").getRoute53ResolverRules = null as any;
export const getRoute53ResolverRulesOutput: typeof import("./getRoute53ResolverRules").getRoute53ResolverRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53ResolverRules","getRoute53ResolverRulesOutput"], () => require("./getRoute53ResolverRules"));

export { GetRoute53TrafficPolicyDocumentArgs, GetRoute53TrafficPolicyDocumentResult, GetRoute53TrafficPolicyDocumentOutputArgs } from "./getRoute53TrafficPolicyDocument";
export const getRoute53TrafficPolicyDocument: typeof import("./getRoute53TrafficPolicyDocument").getRoute53TrafficPolicyDocument = null as any;
export const getRoute53TrafficPolicyDocumentOutput: typeof import("./getRoute53TrafficPolicyDocument").getRoute53TrafficPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53TrafficPolicyDocument","getRoute53TrafficPolicyDocumentOutput"], () => require("./getRoute53TrafficPolicyDocument"));

export { GetRoute53ZoneArgs, GetRoute53ZoneResult, GetRoute53ZoneOutputArgs } from "./getRoute53Zone";
export const getRoute53Zone: typeof import("./getRoute53Zone").getRoute53Zone = null as any;
export const getRoute53ZoneOutput: typeof import("./getRoute53Zone").getRoute53ZoneOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53Zone","getRoute53ZoneOutput"], () => require("./getRoute53Zone"));

export { GetRoute53ZonesResult } from "./getRoute53Zones";
export const getRoute53Zones: typeof import("./getRoute53Zones").getRoute53Zones = null as any;
export const getRoute53ZonesOutput: typeof import("./getRoute53Zones").getRoute53ZonesOutput = null as any;
utilities.lazyLoad(exports, ["getRoute53Zones","getRoute53ZonesOutput"], () => require("./getRoute53Zones"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetRouteTablesArgs, GetRouteTablesResult, GetRouteTablesOutputArgs } from "./getRouteTables";
export const getRouteTables: typeof import("./getRouteTables").getRouteTables = null as any;
export const getRouteTablesOutput: typeof import("./getRouteTables").getRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTables","getRouteTablesOutput"], () => require("./getRouteTables"));

export { GetS3AccountPublicAccessBlockArgs, GetS3AccountPublicAccessBlockResult, GetS3AccountPublicAccessBlockOutputArgs } from "./getS3AccountPublicAccessBlock";
export const getS3AccountPublicAccessBlock: typeof import("./getS3AccountPublicAccessBlock").getS3AccountPublicAccessBlock = null as any;
export const getS3AccountPublicAccessBlockOutput: typeof import("./getS3AccountPublicAccessBlock").getS3AccountPublicAccessBlockOutput = null as any;
utilities.lazyLoad(exports, ["getS3AccountPublicAccessBlock","getS3AccountPublicAccessBlockOutput"], () => require("./getS3AccountPublicAccessBlock"));

export { GetS3BucketArgs, GetS3BucketResult, GetS3BucketOutputArgs } from "./getS3Bucket";
export const getS3Bucket: typeof import("./getS3Bucket").getS3Bucket = null as any;
export const getS3BucketOutput: typeof import("./getS3Bucket").getS3BucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3Bucket","getS3BucketOutput"], () => require("./getS3Bucket"));

export { GetS3BucketObjectArgs, GetS3BucketObjectResult, GetS3BucketObjectOutputArgs } from "./getS3BucketObject";
export const getS3BucketObject: typeof import("./getS3BucketObject").getS3BucketObject = null as any;
export const getS3BucketObjectOutput: typeof import("./getS3BucketObject").getS3BucketObjectOutput = null as any;
utilities.lazyLoad(exports, ["getS3BucketObject","getS3BucketObjectOutput"], () => require("./getS3BucketObject"));

export { GetS3BucketObjectsArgs, GetS3BucketObjectsResult, GetS3BucketObjectsOutputArgs } from "./getS3BucketObjects";
export const getS3BucketObjects: typeof import("./getS3BucketObjects").getS3BucketObjects = null as any;
export const getS3BucketObjectsOutput: typeof import("./getS3BucketObjects").getS3BucketObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getS3BucketObjects","getS3BucketObjectsOutput"], () => require("./getS3BucketObjects"));

export { GetS3BucketPolicyArgs, GetS3BucketPolicyResult, GetS3BucketPolicyOutputArgs } from "./getS3BucketPolicy";
export const getS3BucketPolicy: typeof import("./getS3BucketPolicy").getS3BucketPolicy = null as any;
export const getS3BucketPolicyOutput: typeof import("./getS3BucketPolicy").getS3BucketPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getS3BucketPolicy","getS3BucketPolicyOutput"], () => require("./getS3BucketPolicy"));

export { GetS3DirectoryBucketsResult } from "./getS3DirectoryBuckets";
export const getS3DirectoryBuckets: typeof import("./getS3DirectoryBuckets").getS3DirectoryBuckets = null as any;
export const getS3DirectoryBucketsOutput: typeof import("./getS3DirectoryBuckets").getS3DirectoryBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getS3DirectoryBuckets","getS3DirectoryBucketsOutput"], () => require("./getS3DirectoryBuckets"));

export { GetS3ObjectArgs, GetS3ObjectResult, GetS3ObjectOutputArgs } from "./getS3Object";
export const getS3Object: typeof import("./getS3Object").getS3Object = null as any;
export const getS3ObjectOutput: typeof import("./getS3Object").getS3ObjectOutput = null as any;
utilities.lazyLoad(exports, ["getS3Object","getS3ObjectOutput"], () => require("./getS3Object"));

export { GetS3ObjectsArgs, GetS3ObjectsResult, GetS3ObjectsOutputArgs } from "./getS3Objects";
export const getS3Objects: typeof import("./getS3Objects").getS3Objects = null as any;
export const getS3ObjectsOutput: typeof import("./getS3Objects").getS3ObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getS3Objects","getS3ObjectsOutput"], () => require("./getS3Objects"));

export { GetS3controlMultiRegionAccessPointArgs, GetS3controlMultiRegionAccessPointResult, GetS3controlMultiRegionAccessPointOutputArgs } from "./getS3controlMultiRegionAccessPoint";
export const getS3controlMultiRegionAccessPoint: typeof import("./getS3controlMultiRegionAccessPoint").getS3controlMultiRegionAccessPoint = null as any;
export const getS3controlMultiRegionAccessPointOutput: typeof import("./getS3controlMultiRegionAccessPoint").getS3controlMultiRegionAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getS3controlMultiRegionAccessPoint","getS3controlMultiRegionAccessPointOutput"], () => require("./getS3controlMultiRegionAccessPoint"));

export { GetSagemakerPrebuiltEcrImageArgs, GetSagemakerPrebuiltEcrImageResult, GetSagemakerPrebuiltEcrImageOutputArgs } from "./getSagemakerPrebuiltEcrImage";
export const getSagemakerPrebuiltEcrImage: typeof import("./getSagemakerPrebuiltEcrImage").getSagemakerPrebuiltEcrImage = null as any;
export const getSagemakerPrebuiltEcrImageOutput: typeof import("./getSagemakerPrebuiltEcrImage").getSagemakerPrebuiltEcrImageOutput = null as any;
utilities.lazyLoad(exports, ["getSagemakerPrebuiltEcrImage","getSagemakerPrebuiltEcrImageOutput"], () => require("./getSagemakerPrebuiltEcrImage"));

export { GetSecretsmanagerRandomPasswordArgs, GetSecretsmanagerRandomPasswordResult, GetSecretsmanagerRandomPasswordOutputArgs } from "./getSecretsmanagerRandomPassword";
export const getSecretsmanagerRandomPassword: typeof import("./getSecretsmanagerRandomPassword").getSecretsmanagerRandomPassword = null as any;
export const getSecretsmanagerRandomPasswordOutput: typeof import("./getSecretsmanagerRandomPassword").getSecretsmanagerRandomPasswordOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerRandomPassword","getSecretsmanagerRandomPasswordOutput"], () => require("./getSecretsmanagerRandomPassword"));

export { GetSecretsmanagerSecretArgs, GetSecretsmanagerSecretResult, GetSecretsmanagerSecretOutputArgs } from "./getSecretsmanagerSecret";
export const getSecretsmanagerSecret: typeof import("./getSecretsmanagerSecret").getSecretsmanagerSecret = null as any;
export const getSecretsmanagerSecretOutput: typeof import("./getSecretsmanagerSecret").getSecretsmanagerSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerSecret","getSecretsmanagerSecretOutput"], () => require("./getSecretsmanagerSecret"));

export { GetSecretsmanagerSecretRotationArgs, GetSecretsmanagerSecretRotationResult, GetSecretsmanagerSecretRotationOutputArgs } from "./getSecretsmanagerSecretRotation";
export const getSecretsmanagerSecretRotation: typeof import("./getSecretsmanagerSecretRotation").getSecretsmanagerSecretRotation = null as any;
export const getSecretsmanagerSecretRotationOutput: typeof import("./getSecretsmanagerSecretRotation").getSecretsmanagerSecretRotationOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerSecretRotation","getSecretsmanagerSecretRotationOutput"], () => require("./getSecretsmanagerSecretRotation"));

export { GetSecretsmanagerSecretVersionArgs, GetSecretsmanagerSecretVersionResult, GetSecretsmanagerSecretVersionOutputArgs } from "./getSecretsmanagerSecretVersion";
export const getSecretsmanagerSecretVersion: typeof import("./getSecretsmanagerSecretVersion").getSecretsmanagerSecretVersion = null as any;
export const getSecretsmanagerSecretVersionOutput: typeof import("./getSecretsmanagerSecretVersion").getSecretsmanagerSecretVersionOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerSecretVersion","getSecretsmanagerSecretVersionOutput"], () => require("./getSecretsmanagerSecretVersion"));

export { GetSecretsmanagerSecretVersionsArgs, GetSecretsmanagerSecretVersionsResult, GetSecretsmanagerSecretVersionsOutputArgs } from "./getSecretsmanagerSecretVersions";
export const getSecretsmanagerSecretVersions: typeof import("./getSecretsmanagerSecretVersions").getSecretsmanagerSecretVersions = null as any;
export const getSecretsmanagerSecretVersionsOutput: typeof import("./getSecretsmanagerSecretVersions").getSecretsmanagerSecretVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerSecretVersions","getSecretsmanagerSecretVersionsOutput"], () => require("./getSecretsmanagerSecretVersions"));

export { GetSecretsmanagerSecretsArgs, GetSecretsmanagerSecretsResult, GetSecretsmanagerSecretsOutputArgs } from "./getSecretsmanagerSecrets";
export const getSecretsmanagerSecrets: typeof import("./getSecretsmanagerSecrets").getSecretsmanagerSecrets = null as any;
export const getSecretsmanagerSecretsOutput: typeof import("./getSecretsmanagerSecrets").getSecretsmanagerSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecretsmanagerSecrets","getSecretsmanagerSecretsOutput"], () => require("./getSecretsmanagerSecrets"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetServerlessapplicationrepositoryApplicationArgs, GetServerlessapplicationrepositoryApplicationResult, GetServerlessapplicationrepositoryApplicationOutputArgs } from "./getServerlessapplicationrepositoryApplication";
export const getServerlessapplicationrepositoryApplication: typeof import("./getServerlessapplicationrepositoryApplication").getServerlessapplicationrepositoryApplication = null as any;
export const getServerlessapplicationrepositoryApplicationOutput: typeof import("./getServerlessapplicationrepositoryApplication").getServerlessapplicationrepositoryApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessapplicationrepositoryApplication","getServerlessapplicationrepositoryApplicationOutput"], () => require("./getServerlessapplicationrepositoryApplication"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceDiscoveryDnsNamespaceArgs, GetServiceDiscoveryDnsNamespaceResult, GetServiceDiscoveryDnsNamespaceOutputArgs } from "./getServiceDiscoveryDnsNamespace";
export const getServiceDiscoveryDnsNamespace: typeof import("./getServiceDiscoveryDnsNamespace").getServiceDiscoveryDnsNamespace = null as any;
export const getServiceDiscoveryDnsNamespaceOutput: typeof import("./getServiceDiscoveryDnsNamespace").getServiceDiscoveryDnsNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getServiceDiscoveryDnsNamespace","getServiceDiscoveryDnsNamespaceOutput"], () => require("./getServiceDiscoveryDnsNamespace"));

export { GetServiceDiscoveryHttpNamespaceArgs, GetServiceDiscoveryHttpNamespaceResult, GetServiceDiscoveryHttpNamespaceOutputArgs } from "./getServiceDiscoveryHttpNamespace";
export const getServiceDiscoveryHttpNamespace: typeof import("./getServiceDiscoveryHttpNamespace").getServiceDiscoveryHttpNamespace = null as any;
export const getServiceDiscoveryHttpNamespaceOutput: typeof import("./getServiceDiscoveryHttpNamespace").getServiceDiscoveryHttpNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getServiceDiscoveryHttpNamespace","getServiceDiscoveryHttpNamespaceOutput"], () => require("./getServiceDiscoveryHttpNamespace"));

export { GetServiceDiscoveryServiceArgs, GetServiceDiscoveryServiceResult, GetServiceDiscoveryServiceOutputArgs } from "./getServiceDiscoveryService";
export const getServiceDiscoveryService: typeof import("./getServiceDiscoveryService").getServiceDiscoveryService = null as any;
export const getServiceDiscoveryServiceOutput: typeof import("./getServiceDiscoveryService").getServiceDiscoveryServiceOutput = null as any;
utilities.lazyLoad(exports, ["getServiceDiscoveryService","getServiceDiscoveryServiceOutput"], () => require("./getServiceDiscoveryService"));

export { GetServicePrincipalArgs, GetServicePrincipalResult, GetServicePrincipalOutputArgs } from "./getServicePrincipal";
export const getServicePrincipal: typeof import("./getServicePrincipal").getServicePrincipal = null as any;
export const getServicePrincipalOutput: typeof import("./getServicePrincipal").getServicePrincipalOutput = null as any;
utilities.lazyLoad(exports, ["getServicePrincipal","getServicePrincipalOutput"], () => require("./getServicePrincipal"));

export { GetServicecatalogConstraintArgs, GetServicecatalogConstraintResult, GetServicecatalogConstraintOutputArgs } from "./getServicecatalogConstraint";
export const getServicecatalogConstraint: typeof import("./getServicecatalogConstraint").getServicecatalogConstraint = null as any;
export const getServicecatalogConstraintOutput: typeof import("./getServicecatalogConstraint").getServicecatalogConstraintOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogConstraint","getServicecatalogConstraintOutput"], () => require("./getServicecatalogConstraint"));

export { GetServicecatalogLaunchPathsArgs, GetServicecatalogLaunchPathsResult, GetServicecatalogLaunchPathsOutputArgs } from "./getServicecatalogLaunchPaths";
export const getServicecatalogLaunchPaths: typeof import("./getServicecatalogLaunchPaths").getServicecatalogLaunchPaths = null as any;
export const getServicecatalogLaunchPathsOutput: typeof import("./getServicecatalogLaunchPaths").getServicecatalogLaunchPathsOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogLaunchPaths","getServicecatalogLaunchPathsOutput"], () => require("./getServicecatalogLaunchPaths"));

export { GetServicecatalogPortfolioArgs, GetServicecatalogPortfolioResult, GetServicecatalogPortfolioOutputArgs } from "./getServicecatalogPortfolio";
export const getServicecatalogPortfolio: typeof import("./getServicecatalogPortfolio").getServicecatalogPortfolio = null as any;
export const getServicecatalogPortfolioOutput: typeof import("./getServicecatalogPortfolio").getServicecatalogPortfolioOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogPortfolio","getServicecatalogPortfolioOutput"], () => require("./getServicecatalogPortfolio"));

export { GetServicecatalogPortfolioConstraintsArgs, GetServicecatalogPortfolioConstraintsResult, GetServicecatalogPortfolioConstraintsOutputArgs } from "./getServicecatalogPortfolioConstraints";
export const getServicecatalogPortfolioConstraints: typeof import("./getServicecatalogPortfolioConstraints").getServicecatalogPortfolioConstraints = null as any;
export const getServicecatalogPortfolioConstraintsOutput: typeof import("./getServicecatalogPortfolioConstraints").getServicecatalogPortfolioConstraintsOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogPortfolioConstraints","getServicecatalogPortfolioConstraintsOutput"], () => require("./getServicecatalogPortfolioConstraints"));

export { GetServicecatalogProductArgs, GetServicecatalogProductResult, GetServicecatalogProductOutputArgs } from "./getServicecatalogProduct";
export const getServicecatalogProduct: typeof import("./getServicecatalogProduct").getServicecatalogProduct = null as any;
export const getServicecatalogProductOutput: typeof import("./getServicecatalogProduct").getServicecatalogProductOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogProduct","getServicecatalogProductOutput"], () => require("./getServicecatalogProduct"));

export { GetServicecatalogProvisioningArtifactsArgs, GetServicecatalogProvisioningArtifactsResult, GetServicecatalogProvisioningArtifactsOutputArgs } from "./getServicecatalogProvisioningArtifacts";
export const getServicecatalogProvisioningArtifacts: typeof import("./getServicecatalogProvisioningArtifacts").getServicecatalogProvisioningArtifacts = null as any;
export const getServicecatalogProvisioningArtifactsOutput: typeof import("./getServicecatalogProvisioningArtifacts").getServicecatalogProvisioningArtifactsOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogProvisioningArtifacts","getServicecatalogProvisioningArtifactsOutput"], () => require("./getServicecatalogProvisioningArtifacts"));

export { GetServicecatalogappregistryApplicationArgs, GetServicecatalogappregistryApplicationResult, GetServicecatalogappregistryApplicationOutputArgs } from "./getServicecatalogappregistryApplication";
export const getServicecatalogappregistryApplication: typeof import("./getServicecatalogappregistryApplication").getServicecatalogappregistryApplication = null as any;
export const getServicecatalogappregistryApplicationOutput: typeof import("./getServicecatalogappregistryApplication").getServicecatalogappregistryApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getServicecatalogappregistryApplication","getServicecatalogappregistryApplicationOutput"], () => require("./getServicecatalogappregistryApplication"));

export { GetServicequotasServiceArgs, GetServicequotasServiceResult, GetServicequotasServiceOutputArgs } from "./getServicequotasService";
export const getServicequotasService: typeof import("./getServicequotasService").getServicequotasService = null as any;
export const getServicequotasServiceOutput: typeof import("./getServicequotasService").getServicequotasServiceOutput = null as any;
utilities.lazyLoad(exports, ["getServicequotasService","getServicequotasServiceOutput"], () => require("./getServicequotasService"));

export { GetServicequotasServiceQuotaArgs, GetServicequotasServiceQuotaResult, GetServicequotasServiceQuotaOutputArgs } from "./getServicequotasServiceQuota";
export const getServicequotasServiceQuota: typeof import("./getServicequotasServiceQuota").getServicequotasServiceQuota = null as any;
export const getServicequotasServiceQuotaOutput: typeof import("./getServicequotasServiceQuota").getServicequotasServiceQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getServicequotasServiceQuota","getServicequotasServiceQuotaOutput"], () => require("./getServicequotasServiceQuota"));

export { GetServicequotasTemplatesArgs, GetServicequotasTemplatesResult, GetServicequotasTemplatesOutputArgs } from "./getServicequotasTemplates";
export const getServicequotasTemplates: typeof import("./getServicequotasTemplates").getServicequotasTemplates = null as any;
export const getServicequotasTemplatesOutput: typeof import("./getServicequotasTemplates").getServicequotasTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getServicequotasTemplates","getServicequotasTemplatesOutput"], () => require("./getServicequotasTemplates"));

export { GetSesActiveReceiptRuleSetArgs, GetSesActiveReceiptRuleSetResult, GetSesActiveReceiptRuleSetOutputArgs } from "./getSesActiveReceiptRuleSet";
export const getSesActiveReceiptRuleSet: typeof import("./getSesActiveReceiptRuleSet").getSesActiveReceiptRuleSet = null as any;
export const getSesActiveReceiptRuleSetOutput: typeof import("./getSesActiveReceiptRuleSet").getSesActiveReceiptRuleSetOutput = null as any;
utilities.lazyLoad(exports, ["getSesActiveReceiptRuleSet","getSesActiveReceiptRuleSetOutput"], () => require("./getSesActiveReceiptRuleSet"));

export { GetSesDomainIdentityArgs, GetSesDomainIdentityResult, GetSesDomainIdentityOutputArgs } from "./getSesDomainIdentity";
export const getSesDomainIdentity: typeof import("./getSesDomainIdentity").getSesDomainIdentity = null as any;
export const getSesDomainIdentityOutput: typeof import("./getSesDomainIdentity").getSesDomainIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getSesDomainIdentity","getSesDomainIdentityOutput"], () => require("./getSesDomainIdentity"));

export { GetSesEmailIdentityArgs, GetSesEmailIdentityResult, GetSesEmailIdentityOutputArgs } from "./getSesEmailIdentity";
export const getSesEmailIdentity: typeof import("./getSesEmailIdentity").getSesEmailIdentity = null as any;
export const getSesEmailIdentityOutput: typeof import("./getSesEmailIdentity").getSesEmailIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getSesEmailIdentity","getSesEmailIdentityOutput"], () => require("./getSesEmailIdentity"));

export { GetSesv2ConfigurationSetArgs, GetSesv2ConfigurationSetResult, GetSesv2ConfigurationSetOutputArgs } from "./getSesv2ConfigurationSet";
export const getSesv2ConfigurationSet: typeof import("./getSesv2ConfigurationSet").getSesv2ConfigurationSet = null as any;
export const getSesv2ConfigurationSetOutput: typeof import("./getSesv2ConfigurationSet").getSesv2ConfigurationSetOutput = null as any;
utilities.lazyLoad(exports, ["getSesv2ConfigurationSet","getSesv2ConfigurationSetOutput"], () => require("./getSesv2ConfigurationSet"));

export { GetSesv2DedicatedIpPoolArgs, GetSesv2DedicatedIpPoolResult, GetSesv2DedicatedIpPoolOutputArgs } from "./getSesv2DedicatedIpPool";
export const getSesv2DedicatedIpPool: typeof import("./getSesv2DedicatedIpPool").getSesv2DedicatedIpPool = null as any;
export const getSesv2DedicatedIpPoolOutput: typeof import("./getSesv2DedicatedIpPool").getSesv2DedicatedIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getSesv2DedicatedIpPool","getSesv2DedicatedIpPoolOutput"], () => require("./getSesv2DedicatedIpPool"));

export { GetSesv2EmailIdentityArgs, GetSesv2EmailIdentityResult, GetSesv2EmailIdentityOutputArgs } from "./getSesv2EmailIdentity";
export const getSesv2EmailIdentity: typeof import("./getSesv2EmailIdentity").getSesv2EmailIdentity = null as any;
export const getSesv2EmailIdentityOutput: typeof import("./getSesv2EmailIdentity").getSesv2EmailIdentityOutput = null as any;
utilities.lazyLoad(exports, ["getSesv2EmailIdentity","getSesv2EmailIdentityOutput"], () => require("./getSesv2EmailIdentity"));

export { GetSesv2EmailIdentityMailFromAttributesArgs, GetSesv2EmailIdentityMailFromAttributesResult, GetSesv2EmailIdentityMailFromAttributesOutputArgs } from "./getSesv2EmailIdentityMailFromAttributes";
export const getSesv2EmailIdentityMailFromAttributes: typeof import("./getSesv2EmailIdentityMailFromAttributes").getSesv2EmailIdentityMailFromAttributes = null as any;
export const getSesv2EmailIdentityMailFromAttributesOutput: typeof import("./getSesv2EmailIdentityMailFromAttributes").getSesv2EmailIdentityMailFromAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getSesv2EmailIdentityMailFromAttributes","getSesv2EmailIdentityMailFromAttributesOutput"], () => require("./getSesv2EmailIdentityMailFromAttributes"));

export { GetSfnActivityArgs, GetSfnActivityResult, GetSfnActivityOutputArgs } from "./getSfnActivity";
export const getSfnActivity: typeof import("./getSfnActivity").getSfnActivity = null as any;
export const getSfnActivityOutput: typeof import("./getSfnActivity").getSfnActivityOutput = null as any;
utilities.lazyLoad(exports, ["getSfnActivity","getSfnActivityOutput"], () => require("./getSfnActivity"));

export { GetSfnAliasArgs, GetSfnAliasResult, GetSfnAliasOutputArgs } from "./getSfnAlias";
export const getSfnAlias: typeof import("./getSfnAlias").getSfnAlias = null as any;
export const getSfnAliasOutput: typeof import("./getSfnAlias").getSfnAliasOutput = null as any;
utilities.lazyLoad(exports, ["getSfnAlias","getSfnAliasOutput"], () => require("./getSfnAlias"));

export { GetSfnStateMachineArgs, GetSfnStateMachineResult, GetSfnStateMachineOutputArgs } from "./getSfnStateMachine";
export const getSfnStateMachine: typeof import("./getSfnStateMachine").getSfnStateMachine = null as any;
export const getSfnStateMachineOutput: typeof import("./getSfnStateMachine").getSfnStateMachineOutput = null as any;
utilities.lazyLoad(exports, ["getSfnStateMachine","getSfnStateMachineOutput"], () => require("./getSfnStateMachine"));

export { GetSfnStateMachineVersionsArgs, GetSfnStateMachineVersionsResult, GetSfnStateMachineVersionsOutputArgs } from "./getSfnStateMachineVersions";
export const getSfnStateMachineVersions: typeof import("./getSfnStateMachineVersions").getSfnStateMachineVersions = null as any;
export const getSfnStateMachineVersionsOutput: typeof import("./getSfnStateMachineVersions").getSfnStateMachineVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSfnStateMachineVersions","getSfnStateMachineVersionsOutput"], () => require("./getSfnStateMachineVersions"));

export { GetShieldProtectionArgs, GetShieldProtectionResult, GetShieldProtectionOutputArgs } from "./getShieldProtection";
export const getShieldProtection: typeof import("./getShieldProtection").getShieldProtection = null as any;
export const getShieldProtectionOutput: typeof import("./getShieldProtection").getShieldProtectionOutput = null as any;
utilities.lazyLoad(exports, ["getShieldProtection","getShieldProtectionOutput"], () => require("./getShieldProtection"));

export { GetSignerSigningJobArgs, GetSignerSigningJobResult, GetSignerSigningJobOutputArgs } from "./getSignerSigningJob";
export const getSignerSigningJob: typeof import("./getSignerSigningJob").getSignerSigningJob = null as any;
export const getSignerSigningJobOutput: typeof import("./getSignerSigningJob").getSignerSigningJobOutput = null as any;
utilities.lazyLoad(exports, ["getSignerSigningJob","getSignerSigningJobOutput"], () => require("./getSignerSigningJob"));

export { GetSignerSigningProfileArgs, GetSignerSigningProfileResult, GetSignerSigningProfileOutputArgs } from "./getSignerSigningProfile";
export const getSignerSigningProfile: typeof import("./getSignerSigningProfile").getSignerSigningProfile = null as any;
export const getSignerSigningProfileOutput: typeof import("./getSignerSigningProfile").getSignerSigningProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSignerSigningProfile","getSignerSigningProfileOutput"], () => require("./getSignerSigningProfile"));

export { GetSnsTopicArgs, GetSnsTopicResult, GetSnsTopicOutputArgs } from "./getSnsTopic";
export const getSnsTopic: typeof import("./getSnsTopic").getSnsTopic = null as any;
export const getSnsTopicOutput: typeof import("./getSnsTopic").getSnsTopicOutput = null as any;
utilities.lazyLoad(exports, ["getSnsTopic","getSnsTopicOutput"], () => require("./getSnsTopic"));

export { GetSqsQueueArgs, GetSqsQueueResult, GetSqsQueueOutputArgs } from "./getSqsQueue";
export const getSqsQueue: typeof import("./getSqsQueue").getSqsQueue = null as any;
export const getSqsQueueOutput: typeof import("./getSqsQueue").getSqsQueueOutput = null as any;
utilities.lazyLoad(exports, ["getSqsQueue","getSqsQueueOutput"], () => require("./getSqsQueue"));

export { GetSqsQueuesArgs, GetSqsQueuesResult, GetSqsQueuesOutputArgs } from "./getSqsQueues";
export const getSqsQueues: typeof import("./getSqsQueues").getSqsQueues = null as any;
export const getSqsQueuesOutput: typeof import("./getSqsQueues").getSqsQueuesOutput = null as any;
utilities.lazyLoad(exports, ["getSqsQueues","getSqsQueuesOutput"], () => require("./getSqsQueues"));

export { GetSsmDocumentArgs, GetSsmDocumentResult, GetSsmDocumentOutputArgs } from "./getSsmDocument";
export const getSsmDocument: typeof import("./getSsmDocument").getSsmDocument = null as any;
export const getSsmDocumentOutput: typeof import("./getSsmDocument").getSsmDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getSsmDocument","getSsmDocumentOutput"], () => require("./getSsmDocument"));

export { GetSsmInstancesArgs, GetSsmInstancesResult, GetSsmInstancesOutputArgs } from "./getSsmInstances";
export const getSsmInstances: typeof import("./getSsmInstances").getSsmInstances = null as any;
export const getSsmInstancesOutput: typeof import("./getSsmInstances").getSsmInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSsmInstances","getSsmInstancesOutput"], () => require("./getSsmInstances"));

export { GetSsmMaintenanceWindowsArgs, GetSsmMaintenanceWindowsResult, GetSsmMaintenanceWindowsOutputArgs } from "./getSsmMaintenanceWindows";
export const getSsmMaintenanceWindows: typeof import("./getSsmMaintenanceWindows").getSsmMaintenanceWindows = null as any;
export const getSsmMaintenanceWindowsOutput: typeof import("./getSsmMaintenanceWindows").getSsmMaintenanceWindowsOutput = null as any;
utilities.lazyLoad(exports, ["getSsmMaintenanceWindows","getSsmMaintenanceWindowsOutput"], () => require("./getSsmMaintenanceWindows"));

export { GetSsmParameterArgs, GetSsmParameterResult, GetSsmParameterOutputArgs } from "./getSsmParameter";
export const getSsmParameter: typeof import("./getSsmParameter").getSsmParameter = null as any;
export const getSsmParameterOutput: typeof import("./getSsmParameter").getSsmParameterOutput = null as any;
utilities.lazyLoad(exports, ["getSsmParameter","getSsmParameterOutput"], () => require("./getSsmParameter"));

export { GetSsmParametersByPathArgs, GetSsmParametersByPathResult, GetSsmParametersByPathOutputArgs } from "./getSsmParametersByPath";
export const getSsmParametersByPath: typeof import("./getSsmParametersByPath").getSsmParametersByPath = null as any;
export const getSsmParametersByPathOutput: typeof import("./getSsmParametersByPath").getSsmParametersByPathOutput = null as any;
utilities.lazyLoad(exports, ["getSsmParametersByPath","getSsmParametersByPathOutput"], () => require("./getSsmParametersByPath"));

export { GetSsmPatchBaselineArgs, GetSsmPatchBaselineResult, GetSsmPatchBaselineOutputArgs } from "./getSsmPatchBaseline";
export const getSsmPatchBaseline: typeof import("./getSsmPatchBaseline").getSsmPatchBaseline = null as any;
export const getSsmPatchBaselineOutput: typeof import("./getSsmPatchBaseline").getSsmPatchBaselineOutput = null as any;
utilities.lazyLoad(exports, ["getSsmPatchBaseline","getSsmPatchBaselineOutput"], () => require("./getSsmPatchBaseline"));

export { GetSsmcontactsContactArgs, GetSsmcontactsContactResult, GetSsmcontactsContactOutputArgs } from "./getSsmcontactsContact";
export const getSsmcontactsContact: typeof import("./getSsmcontactsContact").getSsmcontactsContact = null as any;
export const getSsmcontactsContactOutput: typeof import("./getSsmcontactsContact").getSsmcontactsContactOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsContact","getSsmcontactsContactOutput"], () => require("./getSsmcontactsContact"));

export { GetSsmcontactsContactChannelArgs, GetSsmcontactsContactChannelResult, GetSsmcontactsContactChannelOutputArgs } from "./getSsmcontactsContactChannel";
export const getSsmcontactsContactChannel: typeof import("./getSsmcontactsContactChannel").getSsmcontactsContactChannel = null as any;
export const getSsmcontactsContactChannelOutput: typeof import("./getSsmcontactsContactChannel").getSsmcontactsContactChannelOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsContactChannel","getSsmcontactsContactChannelOutput"], () => require("./getSsmcontactsContactChannel"));

export { GetSsmcontactsPlanArgs, GetSsmcontactsPlanResult, GetSsmcontactsPlanOutputArgs } from "./getSsmcontactsPlan";
export const getSsmcontactsPlan: typeof import("./getSsmcontactsPlan").getSsmcontactsPlan = null as any;
export const getSsmcontactsPlanOutput: typeof import("./getSsmcontactsPlan").getSsmcontactsPlanOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsPlan","getSsmcontactsPlanOutput"], () => require("./getSsmcontactsPlan"));

export { GetSsmcontactsRotationArgs, GetSsmcontactsRotationResult, GetSsmcontactsRotationOutputArgs } from "./getSsmcontactsRotation";
export const getSsmcontactsRotation: typeof import("./getSsmcontactsRotation").getSsmcontactsRotation = null as any;
export const getSsmcontactsRotationOutput: typeof import("./getSsmcontactsRotation").getSsmcontactsRotationOutput = null as any;
utilities.lazyLoad(exports, ["getSsmcontactsRotation","getSsmcontactsRotationOutput"], () => require("./getSsmcontactsRotation"));

export { GetSsmincidentsReplicationSetArgs, GetSsmincidentsReplicationSetResult, GetSsmincidentsReplicationSetOutputArgs } from "./getSsmincidentsReplicationSet";
export const getSsmincidentsReplicationSet: typeof import("./getSsmincidentsReplicationSet").getSsmincidentsReplicationSet = null as any;
export const getSsmincidentsReplicationSetOutput: typeof import("./getSsmincidentsReplicationSet").getSsmincidentsReplicationSetOutput = null as any;
utilities.lazyLoad(exports, ["getSsmincidentsReplicationSet","getSsmincidentsReplicationSetOutput"], () => require("./getSsmincidentsReplicationSet"));

export { GetSsmincidentsResponsePlanArgs, GetSsmincidentsResponsePlanResult, GetSsmincidentsResponsePlanOutputArgs } from "./getSsmincidentsResponsePlan";
export const getSsmincidentsResponsePlan: typeof import("./getSsmincidentsResponsePlan").getSsmincidentsResponsePlan = null as any;
export const getSsmincidentsResponsePlanOutput: typeof import("./getSsmincidentsResponsePlan").getSsmincidentsResponsePlanOutput = null as any;
utilities.lazyLoad(exports, ["getSsmincidentsResponsePlan","getSsmincidentsResponsePlanOutput"], () => require("./getSsmincidentsResponsePlan"));

export { GetSsoadminApplicationArgs, GetSsoadminApplicationResult, GetSsoadminApplicationOutputArgs } from "./getSsoadminApplication";
export const getSsoadminApplication: typeof import("./getSsoadminApplication").getSsoadminApplication = null as any;
export const getSsoadminApplicationOutput: typeof import("./getSsoadminApplication").getSsoadminApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getSsoadminApplication","getSsoadminApplicationOutput"], () => require("./getSsoadminApplication"));

export { GetSsoadminApplicationAssignmentsArgs, GetSsoadminApplicationAssignmentsResult, GetSsoadminApplicationAssignmentsOutputArgs } from "./getSsoadminApplicationAssignments";
export const getSsoadminApplicationAssignments: typeof import("./getSsoadminApplicationAssignments").getSsoadminApplicationAssignments = null as any;
export const getSsoadminApplicationAssignmentsOutput: typeof import("./getSsoadminApplicationAssignments").getSsoadminApplicationAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getSsoadminApplicationAssignments","getSsoadminApplicationAssignmentsOutput"], () => require("./getSsoadminApplicationAssignments"));

export { GetSsoadminApplicationProvidersArgs, GetSsoadminApplicationProvidersResult, GetSsoadminApplicationProvidersOutputArgs } from "./getSsoadminApplicationProviders";
export const getSsoadminApplicationProviders: typeof import("./getSsoadminApplicationProviders").getSsoadminApplicationProviders = null as any;
export const getSsoadminApplicationProvidersOutput: typeof import("./getSsoadminApplicationProviders").getSsoadminApplicationProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getSsoadminApplicationProviders","getSsoadminApplicationProvidersOutput"], () => require("./getSsoadminApplicationProviders"));

export { GetSsoadminInstancesArgs, GetSsoadminInstancesResult, GetSsoadminInstancesOutputArgs } from "./getSsoadminInstances";
export const getSsoadminInstances: typeof import("./getSsoadminInstances").getSsoadminInstances = null as any;
export const getSsoadminInstancesOutput: typeof import("./getSsoadminInstances").getSsoadminInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getSsoadminInstances","getSsoadminInstancesOutput"], () => require("./getSsoadminInstances"));

export { GetSsoadminPermissionSetArgs, GetSsoadminPermissionSetResult, GetSsoadminPermissionSetOutputArgs } from "./getSsoadminPermissionSet";
export const getSsoadminPermissionSet: typeof import("./getSsoadminPermissionSet").getSsoadminPermissionSet = null as any;
export const getSsoadminPermissionSetOutput: typeof import("./getSsoadminPermissionSet").getSsoadminPermissionSetOutput = null as any;
utilities.lazyLoad(exports, ["getSsoadminPermissionSet","getSsoadminPermissionSetOutput"], () => require("./getSsoadminPermissionSet"));

export { GetSsoadminPermissionSetsArgs, GetSsoadminPermissionSetsResult, GetSsoadminPermissionSetsOutputArgs } from "./getSsoadminPermissionSets";
export const getSsoadminPermissionSets: typeof import("./getSsoadminPermissionSets").getSsoadminPermissionSets = null as any;
export const getSsoadminPermissionSetsOutput: typeof import("./getSsoadminPermissionSets").getSsoadminPermissionSetsOutput = null as any;
utilities.lazyLoad(exports, ["getSsoadminPermissionSets","getSsoadminPermissionSetsOutput"], () => require("./getSsoadminPermissionSets"));

export { GetSsoadminPrincipalApplicationAssignmentsArgs, GetSsoadminPrincipalApplicationAssignmentsResult, GetSsoadminPrincipalApplicationAssignmentsOutputArgs } from "./getSsoadminPrincipalApplicationAssignments";
export const getSsoadminPrincipalApplicationAssignments: typeof import("./getSsoadminPrincipalApplicationAssignments").getSsoadminPrincipalApplicationAssignments = null as any;
export const getSsoadminPrincipalApplicationAssignmentsOutput: typeof import("./getSsoadminPrincipalApplicationAssignments").getSsoadminPrincipalApplicationAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getSsoadminPrincipalApplicationAssignments","getSsoadminPrincipalApplicationAssignmentsOutput"], () => require("./getSsoadminPrincipalApplicationAssignments"));

export { GetStoragegatewayLocalDiskArgs, GetStoragegatewayLocalDiskResult, GetStoragegatewayLocalDiskOutputArgs } from "./getStoragegatewayLocalDisk";
export const getStoragegatewayLocalDisk: typeof import("./getStoragegatewayLocalDisk").getStoragegatewayLocalDisk = null as any;
export const getStoragegatewayLocalDiskOutput: typeof import("./getStoragegatewayLocalDisk").getStoragegatewayLocalDiskOutput = null as any;
utilities.lazyLoad(exports, ["getStoragegatewayLocalDisk","getStoragegatewayLocalDiskOutput"], () => require("./getStoragegatewayLocalDisk"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetTimestreamwriteDatabaseArgs, GetTimestreamwriteDatabaseResult, GetTimestreamwriteDatabaseOutputArgs } from "./getTimestreamwriteDatabase";
export const getTimestreamwriteDatabase: typeof import("./getTimestreamwriteDatabase").getTimestreamwriteDatabase = null as any;
export const getTimestreamwriteDatabaseOutput: typeof import("./getTimestreamwriteDatabase").getTimestreamwriteDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamwriteDatabase","getTimestreamwriteDatabaseOutput"], () => require("./getTimestreamwriteDatabase"));

export { GetTimestreamwriteTableArgs, GetTimestreamwriteTableResult, GetTimestreamwriteTableOutputArgs } from "./getTimestreamwriteTable";
export const getTimestreamwriteTable: typeof import("./getTimestreamwriteTable").getTimestreamwriteTable = null as any;
export const getTimestreamwriteTableOutput: typeof import("./getTimestreamwriteTable").getTimestreamwriteTableOutput = null as any;
utilities.lazyLoad(exports, ["getTimestreamwriteTable","getTimestreamwriteTableOutput"], () => require("./getTimestreamwriteTable"));

export { GetTransferConnectorArgs, GetTransferConnectorResult, GetTransferConnectorOutputArgs } from "./getTransferConnector";
export const getTransferConnector: typeof import("./getTransferConnector").getTransferConnector = null as any;
export const getTransferConnectorOutput: typeof import("./getTransferConnector").getTransferConnectorOutput = null as any;
utilities.lazyLoad(exports, ["getTransferConnector","getTransferConnectorOutput"], () => require("./getTransferConnector"));

export { GetTransferServerArgs, GetTransferServerResult, GetTransferServerOutputArgs } from "./getTransferServer";
export const getTransferServer: typeof import("./getTransferServer").getTransferServer = null as any;
export const getTransferServerOutput: typeof import("./getTransferServer").getTransferServerOutput = null as any;
utilities.lazyLoad(exports, ["getTransferServer","getTransferServerOutput"], () => require("./getTransferServer"));

export { GetVerifiedpermissionsPolicyStoreArgs, GetVerifiedpermissionsPolicyStoreResult, GetVerifiedpermissionsPolicyStoreOutputArgs } from "./getVerifiedpermissionsPolicyStore";
export const getVerifiedpermissionsPolicyStore: typeof import("./getVerifiedpermissionsPolicyStore").getVerifiedpermissionsPolicyStore = null as any;
export const getVerifiedpermissionsPolicyStoreOutput: typeof import("./getVerifiedpermissionsPolicyStore").getVerifiedpermissionsPolicyStoreOutput = null as any;
utilities.lazyLoad(exports, ["getVerifiedpermissionsPolicyStore","getVerifiedpermissionsPolicyStoreOutput"], () => require("./getVerifiedpermissionsPolicyStore"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcDhcpOptionsArgs, GetVpcDhcpOptionsResult, GetVpcDhcpOptionsOutputArgs } from "./getVpcDhcpOptions";
export const getVpcDhcpOptions: typeof import("./getVpcDhcpOptions").getVpcDhcpOptions = null as any;
export const getVpcDhcpOptionsOutput: typeof import("./getVpcDhcpOptions").getVpcDhcpOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcDhcpOptions","getVpcDhcpOptionsOutput"], () => require("./getVpcDhcpOptions"));

export { GetVpcEndpointArgs, GetVpcEndpointResult, GetVpcEndpointOutputArgs } from "./getVpcEndpoint";
export const getVpcEndpoint: typeof import("./getVpcEndpoint").getVpcEndpoint = null as any;
export const getVpcEndpointOutput: typeof import("./getVpcEndpoint").getVpcEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpoint","getVpcEndpointOutput"], () => require("./getVpcEndpoint"));

export { GetVpcEndpointServiceArgs, GetVpcEndpointServiceResult, GetVpcEndpointServiceOutputArgs } from "./getVpcEndpointService";
export const getVpcEndpointService: typeof import("./getVpcEndpointService").getVpcEndpointService = null as any;
export const getVpcEndpointServiceOutput: typeof import("./getVpcEndpointService").getVpcEndpointServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpcEndpointService","getVpcEndpointServiceOutput"], () => require("./getVpcEndpointService"));

export { GetVpcIpamPoolArgs, GetVpcIpamPoolResult, GetVpcIpamPoolOutputArgs } from "./getVpcIpamPool";
export const getVpcIpamPool: typeof import("./getVpcIpamPool").getVpcIpamPool = null as any;
export const getVpcIpamPoolOutput: typeof import("./getVpcIpamPool").getVpcIpamPoolOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpamPool","getVpcIpamPoolOutput"], () => require("./getVpcIpamPool"));

export { GetVpcIpamPoolCidrsArgs, GetVpcIpamPoolCidrsResult, GetVpcIpamPoolCidrsOutputArgs } from "./getVpcIpamPoolCidrs";
export const getVpcIpamPoolCidrs: typeof import("./getVpcIpamPoolCidrs").getVpcIpamPoolCidrs = null as any;
export const getVpcIpamPoolCidrsOutput: typeof import("./getVpcIpamPoolCidrs").getVpcIpamPoolCidrsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpamPoolCidrs","getVpcIpamPoolCidrsOutput"], () => require("./getVpcIpamPoolCidrs"));

export { GetVpcIpamPoolsArgs, GetVpcIpamPoolsResult, GetVpcIpamPoolsOutputArgs } from "./getVpcIpamPools";
export const getVpcIpamPools: typeof import("./getVpcIpamPools").getVpcIpamPools = null as any;
export const getVpcIpamPoolsOutput: typeof import("./getVpcIpamPools").getVpcIpamPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpamPools","getVpcIpamPoolsOutput"], () => require("./getVpcIpamPools"));

export { GetVpcIpamPreviewNextCidrArgs, GetVpcIpamPreviewNextCidrResult, GetVpcIpamPreviewNextCidrOutputArgs } from "./getVpcIpamPreviewNextCidr";
export const getVpcIpamPreviewNextCidr: typeof import("./getVpcIpamPreviewNextCidr").getVpcIpamPreviewNextCidr = null as any;
export const getVpcIpamPreviewNextCidrOutput: typeof import("./getVpcIpamPreviewNextCidr").getVpcIpamPreviewNextCidrOutput = null as any;
utilities.lazyLoad(exports, ["getVpcIpamPreviewNextCidr","getVpcIpamPreviewNextCidrOutput"], () => require("./getVpcIpamPreviewNextCidr"));

export { GetVpcPeeringConnectionArgs, GetVpcPeeringConnectionResult, GetVpcPeeringConnectionOutputArgs } from "./getVpcPeeringConnection";
export const getVpcPeeringConnection: typeof import("./getVpcPeeringConnection").getVpcPeeringConnection = null as any;
export const getVpcPeeringConnectionOutput: typeof import("./getVpcPeeringConnection").getVpcPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeeringConnection","getVpcPeeringConnectionOutput"], () => require("./getVpcPeeringConnection"));

export { GetVpcPeeringConnectionsArgs, GetVpcPeeringConnectionsResult, GetVpcPeeringConnectionsOutputArgs } from "./getVpcPeeringConnections";
export const getVpcPeeringConnections: typeof import("./getVpcPeeringConnections").getVpcPeeringConnections = null as any;
export const getVpcPeeringConnectionsOutput: typeof import("./getVpcPeeringConnections").getVpcPeeringConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeeringConnections","getVpcPeeringConnectionsOutput"], () => require("./getVpcPeeringConnections"));

export { GetVpcSecurityGroupRuleArgs, GetVpcSecurityGroupRuleResult, GetVpcSecurityGroupRuleOutputArgs } from "./getVpcSecurityGroupRule";
export const getVpcSecurityGroupRule: typeof import("./getVpcSecurityGroupRule").getVpcSecurityGroupRule = null as any;
export const getVpcSecurityGroupRuleOutput: typeof import("./getVpcSecurityGroupRule").getVpcSecurityGroupRuleOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSecurityGroupRule","getVpcSecurityGroupRuleOutput"], () => require("./getVpcSecurityGroupRule"));

export { GetVpcSecurityGroupRulesArgs, GetVpcSecurityGroupRulesResult, GetVpcSecurityGroupRulesOutputArgs } from "./getVpcSecurityGroupRules";
export const getVpcSecurityGroupRules: typeof import("./getVpcSecurityGroupRules").getVpcSecurityGroupRules = null as any;
export const getVpcSecurityGroupRulesOutput: typeof import("./getVpcSecurityGroupRules").getVpcSecurityGroupRulesOutput = null as any;
utilities.lazyLoad(exports, ["getVpcSecurityGroupRules","getVpcSecurityGroupRulesOutput"], () => require("./getVpcSecurityGroupRules"));

export { GetVpclatticeAuthPolicyArgs, GetVpclatticeAuthPolicyResult, GetVpclatticeAuthPolicyOutputArgs } from "./getVpclatticeAuthPolicy";
export const getVpclatticeAuthPolicy: typeof import("./getVpclatticeAuthPolicy").getVpclatticeAuthPolicy = null as any;
export const getVpclatticeAuthPolicyOutput: typeof import("./getVpclatticeAuthPolicy").getVpclatticeAuthPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeAuthPolicy","getVpclatticeAuthPolicyOutput"], () => require("./getVpclatticeAuthPolicy"));

export { GetVpclatticeListenerArgs, GetVpclatticeListenerResult, GetVpclatticeListenerOutputArgs } from "./getVpclatticeListener";
export const getVpclatticeListener: typeof import("./getVpclatticeListener").getVpclatticeListener = null as any;
export const getVpclatticeListenerOutput: typeof import("./getVpclatticeListener").getVpclatticeListenerOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeListener","getVpclatticeListenerOutput"], () => require("./getVpclatticeListener"));

export { GetVpclatticeResourcePolicyArgs, GetVpclatticeResourcePolicyResult, GetVpclatticeResourcePolicyOutputArgs } from "./getVpclatticeResourcePolicy";
export const getVpclatticeResourcePolicy: typeof import("./getVpclatticeResourcePolicy").getVpclatticeResourcePolicy = null as any;
export const getVpclatticeResourcePolicyOutput: typeof import("./getVpclatticeResourcePolicy").getVpclatticeResourcePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeResourcePolicy","getVpclatticeResourcePolicyOutput"], () => require("./getVpclatticeResourcePolicy"));

export { GetVpclatticeServiceArgs, GetVpclatticeServiceResult, GetVpclatticeServiceOutputArgs } from "./getVpclatticeService";
export const getVpclatticeService: typeof import("./getVpclatticeService").getVpclatticeService = null as any;
export const getVpclatticeServiceOutput: typeof import("./getVpclatticeService").getVpclatticeServiceOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeService","getVpclatticeServiceOutput"], () => require("./getVpclatticeService"));

export { GetVpclatticeServiceNetworkArgs, GetVpclatticeServiceNetworkResult, GetVpclatticeServiceNetworkOutputArgs } from "./getVpclatticeServiceNetwork";
export const getVpclatticeServiceNetwork: typeof import("./getVpclatticeServiceNetwork").getVpclatticeServiceNetwork = null as any;
export const getVpclatticeServiceNetworkOutput: typeof import("./getVpclatticeServiceNetwork").getVpclatticeServiceNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVpclatticeServiceNetwork","getVpclatticeServiceNetworkOutput"], () => require("./getVpclatticeServiceNetwork"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { GetVpnGatewayArgs, GetVpnGatewayResult, GetVpnGatewayOutputArgs } from "./getVpnGateway";
export const getVpnGateway: typeof import("./getVpnGateway").getVpnGateway = null as any;
export const getVpnGatewayOutput: typeof import("./getVpnGateway").getVpnGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateway","getVpnGatewayOutput"], () => require("./getVpnGateway"));

export { GetWafIpsetArgs, GetWafIpsetResult, GetWafIpsetOutputArgs } from "./getWafIpset";
export const getWafIpset: typeof import("./getWafIpset").getWafIpset = null as any;
export const getWafIpsetOutput: typeof import("./getWafIpset").getWafIpsetOutput = null as any;
utilities.lazyLoad(exports, ["getWafIpset","getWafIpsetOutput"], () => require("./getWafIpset"));

export { GetWafRateBasedRuleArgs, GetWafRateBasedRuleResult, GetWafRateBasedRuleOutputArgs } from "./getWafRateBasedRule";
export const getWafRateBasedRule: typeof import("./getWafRateBasedRule").getWafRateBasedRule = null as any;
export const getWafRateBasedRuleOutput: typeof import("./getWafRateBasedRule").getWafRateBasedRuleOutput = null as any;
utilities.lazyLoad(exports, ["getWafRateBasedRule","getWafRateBasedRuleOutput"], () => require("./getWafRateBasedRule"));

export { GetWafRuleArgs, GetWafRuleResult, GetWafRuleOutputArgs } from "./getWafRule";
export const getWafRule: typeof import("./getWafRule").getWafRule = null as any;
export const getWafRuleOutput: typeof import("./getWafRule").getWafRuleOutput = null as any;
utilities.lazyLoad(exports, ["getWafRule","getWafRuleOutput"], () => require("./getWafRule"));

export { GetWafSubscribedRuleGroupArgs, GetWafSubscribedRuleGroupResult, GetWafSubscribedRuleGroupOutputArgs } from "./getWafSubscribedRuleGroup";
export const getWafSubscribedRuleGroup: typeof import("./getWafSubscribedRuleGroup").getWafSubscribedRuleGroup = null as any;
export const getWafSubscribedRuleGroupOutput: typeof import("./getWafSubscribedRuleGroup").getWafSubscribedRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWafSubscribedRuleGroup","getWafSubscribedRuleGroupOutput"], () => require("./getWafSubscribedRuleGroup"));

export { GetWafWebAclArgs, GetWafWebAclResult, GetWafWebAclOutputArgs } from "./getWafWebAcl";
export const getWafWebAcl: typeof import("./getWafWebAcl").getWafWebAcl = null as any;
export const getWafWebAclOutput: typeof import("./getWafWebAcl").getWafWebAclOutput = null as any;
utilities.lazyLoad(exports, ["getWafWebAcl","getWafWebAclOutput"], () => require("./getWafWebAcl"));

export { GetWafregionalIpsetArgs, GetWafregionalIpsetResult, GetWafregionalIpsetOutputArgs } from "./getWafregionalIpset";
export const getWafregionalIpset: typeof import("./getWafregionalIpset").getWafregionalIpset = null as any;
export const getWafregionalIpsetOutput: typeof import("./getWafregionalIpset").getWafregionalIpsetOutput = null as any;
utilities.lazyLoad(exports, ["getWafregionalIpset","getWafregionalIpsetOutput"], () => require("./getWafregionalIpset"));

export { GetWafregionalRateBasedRuleArgs, GetWafregionalRateBasedRuleResult, GetWafregionalRateBasedRuleOutputArgs } from "./getWafregionalRateBasedRule";
export const getWafregionalRateBasedRule: typeof import("./getWafregionalRateBasedRule").getWafregionalRateBasedRule = null as any;
export const getWafregionalRateBasedRuleOutput: typeof import("./getWafregionalRateBasedRule").getWafregionalRateBasedRuleOutput = null as any;
utilities.lazyLoad(exports, ["getWafregionalRateBasedRule","getWafregionalRateBasedRuleOutput"], () => require("./getWafregionalRateBasedRule"));

export { GetWafregionalRuleArgs, GetWafregionalRuleResult, GetWafregionalRuleOutputArgs } from "./getWafregionalRule";
export const getWafregionalRule: typeof import("./getWafregionalRule").getWafregionalRule = null as any;
export const getWafregionalRuleOutput: typeof import("./getWafregionalRule").getWafregionalRuleOutput = null as any;
utilities.lazyLoad(exports, ["getWafregionalRule","getWafregionalRuleOutput"], () => require("./getWafregionalRule"));

export { GetWafregionalSubscribedRuleGroupArgs, GetWafregionalSubscribedRuleGroupResult, GetWafregionalSubscribedRuleGroupOutputArgs } from "./getWafregionalSubscribedRuleGroup";
export const getWafregionalSubscribedRuleGroup: typeof import("./getWafregionalSubscribedRuleGroup").getWafregionalSubscribedRuleGroup = null as any;
export const getWafregionalSubscribedRuleGroupOutput: typeof import("./getWafregionalSubscribedRuleGroup").getWafregionalSubscribedRuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWafregionalSubscribedRuleGroup","getWafregionalSubscribedRuleGroupOutput"], () => require("./getWafregionalSubscribedRuleGroup"));

export { GetWafregionalWebAclArgs, GetWafregionalWebAclResult, GetWafregionalWebAclOutputArgs } from "./getWafregionalWebAcl";
export const getWafregionalWebAcl: typeof import("./getWafregionalWebAcl").getWafregionalWebAcl = null as any;
export const getWafregionalWebAclOutput: typeof import("./getWafregionalWebAcl").getWafregionalWebAclOutput = null as any;
utilities.lazyLoad(exports, ["getWafregionalWebAcl","getWafregionalWebAclOutput"], () => require("./getWafregionalWebAcl"));

export { GetWafv2IpSetArgs, GetWafv2IpSetResult, GetWafv2IpSetOutputArgs } from "./getWafv2IpSet";
export const getWafv2IpSet: typeof import("./getWafv2IpSet").getWafv2IpSet = null as any;
export const getWafv2IpSetOutput: typeof import("./getWafv2IpSet").getWafv2IpSetOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2IpSet","getWafv2IpSetOutput"], () => require("./getWafv2IpSet"));

export { GetWafv2RegexPatternSetArgs, GetWafv2RegexPatternSetResult, GetWafv2RegexPatternSetOutputArgs } from "./getWafv2RegexPatternSet";
export const getWafv2RegexPatternSet: typeof import("./getWafv2RegexPatternSet").getWafv2RegexPatternSet = null as any;
export const getWafv2RegexPatternSetOutput: typeof import("./getWafv2RegexPatternSet").getWafv2RegexPatternSetOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2RegexPatternSet","getWafv2RegexPatternSetOutput"], () => require("./getWafv2RegexPatternSet"));

export { GetWafv2RuleGroupArgs, GetWafv2RuleGroupResult, GetWafv2RuleGroupOutputArgs } from "./getWafv2RuleGroup";
export const getWafv2RuleGroup: typeof import("./getWafv2RuleGroup").getWafv2RuleGroup = null as any;
export const getWafv2RuleGroupOutput: typeof import("./getWafv2RuleGroup").getWafv2RuleGroupOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2RuleGroup","getWafv2RuleGroupOutput"], () => require("./getWafv2RuleGroup"));

export { GetWafv2WebAclArgs, GetWafv2WebAclResult, GetWafv2WebAclOutputArgs } from "./getWafv2WebAcl";
export const getWafv2WebAcl: typeof import("./getWafv2WebAcl").getWafv2WebAcl = null as any;
export const getWafv2WebAclOutput: typeof import("./getWafv2WebAcl").getWafv2WebAclOutput = null as any;
utilities.lazyLoad(exports, ["getWafv2WebAcl","getWafv2WebAclOutput"], () => require("./getWafv2WebAcl"));

export { GetWorkspacesBundleArgs, GetWorkspacesBundleResult, GetWorkspacesBundleOutputArgs } from "./getWorkspacesBundle";
export const getWorkspacesBundle: typeof import("./getWorkspacesBundle").getWorkspacesBundle = null as any;
export const getWorkspacesBundleOutput: typeof import("./getWorkspacesBundle").getWorkspacesBundleOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesBundle","getWorkspacesBundleOutput"], () => require("./getWorkspacesBundle"));

export { GetWorkspacesDirectoryArgs, GetWorkspacesDirectoryResult, GetWorkspacesDirectoryOutputArgs } from "./getWorkspacesDirectory";
export const getWorkspacesDirectory: typeof import("./getWorkspacesDirectory").getWorkspacesDirectory = null as any;
export const getWorkspacesDirectoryOutput: typeof import("./getWorkspacesDirectory").getWorkspacesDirectoryOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesDirectory","getWorkspacesDirectoryOutput"], () => require("./getWorkspacesDirectory"));

export { GetWorkspacesImageArgs, GetWorkspacesImageResult, GetWorkspacesImageOutputArgs } from "./getWorkspacesImage";
export const getWorkspacesImage: typeof import("./getWorkspacesImage").getWorkspacesImage = null as any;
export const getWorkspacesImageOutput: typeof import("./getWorkspacesImage").getWorkspacesImageOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesImage","getWorkspacesImageOutput"], () => require("./getWorkspacesImage"));

export { GetWorkspacesWorkspaceArgs, GetWorkspacesWorkspaceResult, GetWorkspacesWorkspaceOutputArgs } from "./getWorkspacesWorkspace";
export const getWorkspacesWorkspace: typeof import("./getWorkspacesWorkspace").getWorkspacesWorkspace = null as any;
export const getWorkspacesWorkspaceOutput: typeof import("./getWorkspacesWorkspace").getWorkspacesWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspacesWorkspace","getWorkspacesWorkspaceOutput"], () => require("./getWorkspacesWorkspace"));

export { GlacierVaultArgs, GlacierVaultState } from "./glacierVault";
export type GlacierVault = import("./glacierVault").GlacierVault;
export const GlacierVault: typeof import("./glacierVault").GlacierVault = null as any;
utilities.lazyLoad(exports, ["GlacierVault"], () => require("./glacierVault"));

export { GlacierVaultLockArgs, GlacierVaultLockState } from "./glacierVaultLock";
export type GlacierVaultLock = import("./glacierVaultLock").GlacierVaultLock;
export const GlacierVaultLock: typeof import("./glacierVaultLock").GlacierVaultLock = null as any;
utilities.lazyLoad(exports, ["GlacierVaultLock"], () => require("./glacierVaultLock"));

export { GlobalacceleratorAcceleratorArgs, GlobalacceleratorAcceleratorState } from "./globalacceleratorAccelerator";
export type GlobalacceleratorAccelerator = import("./globalacceleratorAccelerator").GlobalacceleratorAccelerator;
export const GlobalacceleratorAccelerator: typeof import("./globalacceleratorAccelerator").GlobalacceleratorAccelerator = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorAccelerator"], () => require("./globalacceleratorAccelerator"));

export { GlobalacceleratorCrossAccountAttachmentArgs, GlobalacceleratorCrossAccountAttachmentState } from "./globalacceleratorCrossAccountAttachment";
export type GlobalacceleratorCrossAccountAttachment = import("./globalacceleratorCrossAccountAttachment").GlobalacceleratorCrossAccountAttachment;
export const GlobalacceleratorCrossAccountAttachment: typeof import("./globalacceleratorCrossAccountAttachment").GlobalacceleratorCrossAccountAttachment = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorCrossAccountAttachment"], () => require("./globalacceleratorCrossAccountAttachment"));

export { GlobalacceleratorCustomRoutingAcceleratorArgs, GlobalacceleratorCustomRoutingAcceleratorState } from "./globalacceleratorCustomRoutingAccelerator";
export type GlobalacceleratorCustomRoutingAccelerator = import("./globalacceleratorCustomRoutingAccelerator").GlobalacceleratorCustomRoutingAccelerator;
export const GlobalacceleratorCustomRoutingAccelerator: typeof import("./globalacceleratorCustomRoutingAccelerator").GlobalacceleratorCustomRoutingAccelerator = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorCustomRoutingAccelerator"], () => require("./globalacceleratorCustomRoutingAccelerator"));

export { GlobalacceleratorCustomRoutingEndpointGroupArgs, GlobalacceleratorCustomRoutingEndpointGroupState } from "./globalacceleratorCustomRoutingEndpointGroup";
export type GlobalacceleratorCustomRoutingEndpointGroup = import("./globalacceleratorCustomRoutingEndpointGroup").GlobalacceleratorCustomRoutingEndpointGroup;
export const GlobalacceleratorCustomRoutingEndpointGroup: typeof import("./globalacceleratorCustomRoutingEndpointGroup").GlobalacceleratorCustomRoutingEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorCustomRoutingEndpointGroup"], () => require("./globalacceleratorCustomRoutingEndpointGroup"));

export { GlobalacceleratorCustomRoutingListenerArgs, GlobalacceleratorCustomRoutingListenerState } from "./globalacceleratorCustomRoutingListener";
export type GlobalacceleratorCustomRoutingListener = import("./globalacceleratorCustomRoutingListener").GlobalacceleratorCustomRoutingListener;
export const GlobalacceleratorCustomRoutingListener: typeof import("./globalacceleratorCustomRoutingListener").GlobalacceleratorCustomRoutingListener = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorCustomRoutingListener"], () => require("./globalacceleratorCustomRoutingListener"));

export { GlobalacceleratorEndpointGroupArgs, GlobalacceleratorEndpointGroupState } from "./globalacceleratorEndpointGroup";
export type GlobalacceleratorEndpointGroup = import("./globalacceleratorEndpointGroup").GlobalacceleratorEndpointGroup;
export const GlobalacceleratorEndpointGroup: typeof import("./globalacceleratorEndpointGroup").GlobalacceleratorEndpointGroup = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorEndpointGroup"], () => require("./globalacceleratorEndpointGroup"));

export { GlobalacceleratorListenerArgs, GlobalacceleratorListenerState } from "./globalacceleratorListener";
export type GlobalacceleratorListener = import("./globalacceleratorListener").GlobalacceleratorListener;
export const GlobalacceleratorListener: typeof import("./globalacceleratorListener").GlobalacceleratorListener = null as any;
utilities.lazyLoad(exports, ["GlobalacceleratorListener"], () => require("./globalacceleratorListener"));

export { GlueCatalogDatabaseArgs, GlueCatalogDatabaseState } from "./glueCatalogDatabase";
export type GlueCatalogDatabase = import("./glueCatalogDatabase").GlueCatalogDatabase;
export const GlueCatalogDatabase: typeof import("./glueCatalogDatabase").GlueCatalogDatabase = null as any;
utilities.lazyLoad(exports, ["GlueCatalogDatabase"], () => require("./glueCatalogDatabase"));

export { GlueCatalogTableArgs, GlueCatalogTableState } from "./glueCatalogTable";
export type GlueCatalogTable = import("./glueCatalogTable").GlueCatalogTable;
export const GlueCatalogTable: typeof import("./glueCatalogTable").GlueCatalogTable = null as any;
utilities.lazyLoad(exports, ["GlueCatalogTable"], () => require("./glueCatalogTable"));

export { GlueCatalogTableOptimizerArgs, GlueCatalogTableOptimizerState } from "./glueCatalogTableOptimizer";
export type GlueCatalogTableOptimizer = import("./glueCatalogTableOptimizer").GlueCatalogTableOptimizer;
export const GlueCatalogTableOptimizer: typeof import("./glueCatalogTableOptimizer").GlueCatalogTableOptimizer = null as any;
utilities.lazyLoad(exports, ["GlueCatalogTableOptimizer"], () => require("./glueCatalogTableOptimizer"));

export { GlueClassifierArgs, GlueClassifierState } from "./glueClassifier";
export type GlueClassifier = import("./glueClassifier").GlueClassifier;
export const GlueClassifier: typeof import("./glueClassifier").GlueClassifier = null as any;
utilities.lazyLoad(exports, ["GlueClassifier"], () => require("./glueClassifier"));

export { GlueConnectionArgs, GlueConnectionState } from "./glueConnection";
export type GlueConnection = import("./glueConnection").GlueConnection;
export const GlueConnection: typeof import("./glueConnection").GlueConnection = null as any;
utilities.lazyLoad(exports, ["GlueConnection"], () => require("./glueConnection"));

export { GlueCrawlerArgs, GlueCrawlerState } from "./glueCrawler";
export type GlueCrawler = import("./glueCrawler").GlueCrawler;
export const GlueCrawler: typeof import("./glueCrawler").GlueCrawler = null as any;
utilities.lazyLoad(exports, ["GlueCrawler"], () => require("./glueCrawler"));

export { GlueDataCatalogEncryptionSettingsArgs, GlueDataCatalogEncryptionSettingsState } from "./glueDataCatalogEncryptionSettings";
export type GlueDataCatalogEncryptionSettings = import("./glueDataCatalogEncryptionSettings").GlueDataCatalogEncryptionSettings;
export const GlueDataCatalogEncryptionSettings: typeof import("./glueDataCatalogEncryptionSettings").GlueDataCatalogEncryptionSettings = null as any;
utilities.lazyLoad(exports, ["GlueDataCatalogEncryptionSettings"], () => require("./glueDataCatalogEncryptionSettings"));

export { GlueDataQualityRulesetArgs, GlueDataQualityRulesetState } from "./glueDataQualityRuleset";
export type GlueDataQualityRuleset = import("./glueDataQualityRuleset").GlueDataQualityRuleset;
export const GlueDataQualityRuleset: typeof import("./glueDataQualityRuleset").GlueDataQualityRuleset = null as any;
utilities.lazyLoad(exports, ["GlueDataQualityRuleset"], () => require("./glueDataQualityRuleset"));

export { GlueDevEndpointArgs, GlueDevEndpointState } from "./glueDevEndpoint";
export type GlueDevEndpoint = import("./glueDevEndpoint").GlueDevEndpoint;
export const GlueDevEndpoint: typeof import("./glueDevEndpoint").GlueDevEndpoint = null as any;
utilities.lazyLoad(exports, ["GlueDevEndpoint"], () => require("./glueDevEndpoint"));

export { GlueJobArgs, GlueJobState } from "./glueJob";
export type GlueJob = import("./glueJob").GlueJob;
export const GlueJob: typeof import("./glueJob").GlueJob = null as any;
utilities.lazyLoad(exports, ["GlueJob"], () => require("./glueJob"));

export { GlueMlTransformArgs, GlueMlTransformState } from "./glueMlTransform";
export type GlueMlTransform = import("./glueMlTransform").GlueMlTransform;
export const GlueMlTransform: typeof import("./glueMlTransform").GlueMlTransform = null as any;
utilities.lazyLoad(exports, ["GlueMlTransform"], () => require("./glueMlTransform"));

export { GluePartitionArgs, GluePartitionState } from "./gluePartition";
export type GluePartition = import("./gluePartition").GluePartition;
export const GluePartition: typeof import("./gluePartition").GluePartition = null as any;
utilities.lazyLoad(exports, ["GluePartition"], () => require("./gluePartition"));

export { GluePartitionIndexArgs, GluePartitionIndexState } from "./gluePartitionIndex";
export type GluePartitionIndex = import("./gluePartitionIndex").GluePartitionIndex;
export const GluePartitionIndex: typeof import("./gluePartitionIndex").GluePartitionIndex = null as any;
utilities.lazyLoad(exports, ["GluePartitionIndex"], () => require("./gluePartitionIndex"));

export { GlueRegistryArgs, GlueRegistryState } from "./glueRegistry";
export type GlueRegistry = import("./glueRegistry").GlueRegistry;
export const GlueRegistry: typeof import("./glueRegistry").GlueRegistry = null as any;
utilities.lazyLoad(exports, ["GlueRegistry"], () => require("./glueRegistry"));

export { GlueResourcePolicyArgs, GlueResourcePolicyState } from "./glueResourcePolicy";
export type GlueResourcePolicy = import("./glueResourcePolicy").GlueResourcePolicy;
export const GlueResourcePolicy: typeof import("./glueResourcePolicy").GlueResourcePolicy = null as any;
utilities.lazyLoad(exports, ["GlueResourcePolicy"], () => require("./glueResourcePolicy"));

export { GlueSchemaArgs, GlueSchemaState } from "./glueSchema";
export type GlueSchema = import("./glueSchema").GlueSchema;
export const GlueSchema: typeof import("./glueSchema").GlueSchema = null as any;
utilities.lazyLoad(exports, ["GlueSchema"], () => require("./glueSchema"));

export { GlueSecurityConfigurationArgs, GlueSecurityConfigurationState } from "./glueSecurityConfiguration";
export type GlueSecurityConfiguration = import("./glueSecurityConfiguration").GlueSecurityConfiguration;
export const GlueSecurityConfiguration: typeof import("./glueSecurityConfiguration").GlueSecurityConfiguration = null as any;
utilities.lazyLoad(exports, ["GlueSecurityConfiguration"], () => require("./glueSecurityConfiguration"));

export { GlueTriggerArgs, GlueTriggerState } from "./glueTrigger";
export type GlueTrigger = import("./glueTrigger").GlueTrigger;
export const GlueTrigger: typeof import("./glueTrigger").GlueTrigger = null as any;
utilities.lazyLoad(exports, ["GlueTrigger"], () => require("./glueTrigger"));

export { GlueUserDefinedFunctionArgs, GlueUserDefinedFunctionState } from "./glueUserDefinedFunction";
export type GlueUserDefinedFunction = import("./glueUserDefinedFunction").GlueUserDefinedFunction;
export const GlueUserDefinedFunction: typeof import("./glueUserDefinedFunction").GlueUserDefinedFunction = null as any;
utilities.lazyLoad(exports, ["GlueUserDefinedFunction"], () => require("./glueUserDefinedFunction"));

export { GlueWorkflowArgs, GlueWorkflowState } from "./glueWorkflow";
export type GlueWorkflow = import("./glueWorkflow").GlueWorkflow;
export const GlueWorkflow: typeof import("./glueWorkflow").GlueWorkflow = null as any;
utilities.lazyLoad(exports, ["GlueWorkflow"], () => require("./glueWorkflow"));

export { GrafanaLicenseAssociationArgs, GrafanaLicenseAssociationState } from "./grafanaLicenseAssociation";
export type GrafanaLicenseAssociation = import("./grafanaLicenseAssociation").GrafanaLicenseAssociation;
export const GrafanaLicenseAssociation: typeof import("./grafanaLicenseAssociation").GrafanaLicenseAssociation = null as any;
utilities.lazyLoad(exports, ["GrafanaLicenseAssociation"], () => require("./grafanaLicenseAssociation"));

export { GrafanaRoleAssociationArgs, GrafanaRoleAssociationState } from "./grafanaRoleAssociation";
export type GrafanaRoleAssociation = import("./grafanaRoleAssociation").GrafanaRoleAssociation;
export const GrafanaRoleAssociation: typeof import("./grafanaRoleAssociation").GrafanaRoleAssociation = null as any;
utilities.lazyLoad(exports, ["GrafanaRoleAssociation"], () => require("./grafanaRoleAssociation"));

export { GrafanaWorkspaceArgs, GrafanaWorkspaceState } from "./grafanaWorkspace";
export type GrafanaWorkspace = import("./grafanaWorkspace").GrafanaWorkspace;
export const GrafanaWorkspace: typeof import("./grafanaWorkspace").GrafanaWorkspace = null as any;
utilities.lazyLoad(exports, ["GrafanaWorkspace"], () => require("./grafanaWorkspace"));

export { GrafanaWorkspaceApiKeyArgs, GrafanaWorkspaceApiKeyState } from "./grafanaWorkspaceApiKey";
export type GrafanaWorkspaceApiKey = import("./grafanaWorkspaceApiKey").GrafanaWorkspaceApiKey;
export const GrafanaWorkspaceApiKey: typeof import("./grafanaWorkspaceApiKey").GrafanaWorkspaceApiKey = null as any;
utilities.lazyLoad(exports, ["GrafanaWorkspaceApiKey"], () => require("./grafanaWorkspaceApiKey"));

export { GrafanaWorkspaceSamlConfigurationArgs, GrafanaWorkspaceSamlConfigurationState } from "./grafanaWorkspaceSamlConfiguration";
export type GrafanaWorkspaceSamlConfiguration = import("./grafanaWorkspaceSamlConfiguration").GrafanaWorkspaceSamlConfiguration;
export const GrafanaWorkspaceSamlConfiguration: typeof import("./grafanaWorkspaceSamlConfiguration").GrafanaWorkspaceSamlConfiguration = null as any;
utilities.lazyLoad(exports, ["GrafanaWorkspaceSamlConfiguration"], () => require("./grafanaWorkspaceSamlConfiguration"));

export { GrafanaWorkspaceServiceAccountArgs, GrafanaWorkspaceServiceAccountState } from "./grafanaWorkspaceServiceAccount";
export type GrafanaWorkspaceServiceAccount = import("./grafanaWorkspaceServiceAccount").GrafanaWorkspaceServiceAccount;
export const GrafanaWorkspaceServiceAccount: typeof import("./grafanaWorkspaceServiceAccount").GrafanaWorkspaceServiceAccount = null as any;
utilities.lazyLoad(exports, ["GrafanaWorkspaceServiceAccount"], () => require("./grafanaWorkspaceServiceAccount"));

export { GrafanaWorkspaceServiceAccountTokenArgs, GrafanaWorkspaceServiceAccountTokenState } from "./grafanaWorkspaceServiceAccountToken";
export type GrafanaWorkspaceServiceAccountToken = import("./grafanaWorkspaceServiceAccountToken").GrafanaWorkspaceServiceAccountToken;
export const GrafanaWorkspaceServiceAccountToken: typeof import("./grafanaWorkspaceServiceAccountToken").GrafanaWorkspaceServiceAccountToken = null as any;
utilities.lazyLoad(exports, ["GrafanaWorkspaceServiceAccountToken"], () => require("./grafanaWorkspaceServiceAccountToken"));

export { GuarddutyDetectorArgs, GuarddutyDetectorState } from "./guarddutyDetector";
export type GuarddutyDetector = import("./guarddutyDetector").GuarddutyDetector;
export const GuarddutyDetector: typeof import("./guarddutyDetector").GuarddutyDetector = null as any;
utilities.lazyLoad(exports, ["GuarddutyDetector"], () => require("./guarddutyDetector"));

export { GuarddutyDetectorFeatureArgs, GuarddutyDetectorFeatureState } from "./guarddutyDetectorFeature";
export type GuarddutyDetectorFeature = import("./guarddutyDetectorFeature").GuarddutyDetectorFeature;
export const GuarddutyDetectorFeature: typeof import("./guarddutyDetectorFeature").GuarddutyDetectorFeature = null as any;
utilities.lazyLoad(exports, ["GuarddutyDetectorFeature"], () => require("./guarddutyDetectorFeature"));

export { GuarddutyFilterArgs, GuarddutyFilterState } from "./guarddutyFilter";
export type GuarddutyFilter = import("./guarddutyFilter").GuarddutyFilter;
export const GuarddutyFilter: typeof import("./guarddutyFilter").GuarddutyFilter = null as any;
utilities.lazyLoad(exports, ["GuarddutyFilter"], () => require("./guarddutyFilter"));

export { GuarddutyInviteAccepterArgs, GuarddutyInviteAccepterState } from "./guarddutyInviteAccepter";
export type GuarddutyInviteAccepter = import("./guarddutyInviteAccepter").GuarddutyInviteAccepter;
export const GuarddutyInviteAccepter: typeof import("./guarddutyInviteAccepter").GuarddutyInviteAccepter = null as any;
utilities.lazyLoad(exports, ["GuarddutyInviteAccepter"], () => require("./guarddutyInviteAccepter"));

export { GuarddutyIpsetArgs, GuarddutyIpsetState } from "./guarddutyIpset";
export type GuarddutyIpset = import("./guarddutyIpset").GuarddutyIpset;
export const GuarddutyIpset: typeof import("./guarddutyIpset").GuarddutyIpset = null as any;
utilities.lazyLoad(exports, ["GuarddutyIpset"], () => require("./guarddutyIpset"));

export { GuarddutyMalwareProtectionPlanArgs, GuarddutyMalwareProtectionPlanState } from "./guarddutyMalwareProtectionPlan";
export type GuarddutyMalwareProtectionPlan = import("./guarddutyMalwareProtectionPlan").GuarddutyMalwareProtectionPlan;
export const GuarddutyMalwareProtectionPlan: typeof import("./guarddutyMalwareProtectionPlan").GuarddutyMalwareProtectionPlan = null as any;
utilities.lazyLoad(exports, ["GuarddutyMalwareProtectionPlan"], () => require("./guarddutyMalwareProtectionPlan"));

export { GuarddutyMemberArgs, GuarddutyMemberState } from "./guarddutyMember";
export type GuarddutyMember = import("./guarddutyMember").GuarddutyMember;
export const GuarddutyMember: typeof import("./guarddutyMember").GuarddutyMember = null as any;
utilities.lazyLoad(exports, ["GuarddutyMember"], () => require("./guarddutyMember"));

export { GuarddutyOrganizationAdminAccountArgs, GuarddutyOrganizationAdminAccountState } from "./guarddutyOrganizationAdminAccount";
export type GuarddutyOrganizationAdminAccount = import("./guarddutyOrganizationAdminAccount").GuarddutyOrganizationAdminAccount;
export const GuarddutyOrganizationAdminAccount: typeof import("./guarddutyOrganizationAdminAccount").GuarddutyOrganizationAdminAccount = null as any;
utilities.lazyLoad(exports, ["GuarddutyOrganizationAdminAccount"], () => require("./guarddutyOrganizationAdminAccount"));

export { GuarddutyOrganizationConfigurationArgs, GuarddutyOrganizationConfigurationState } from "./guarddutyOrganizationConfiguration";
export type GuarddutyOrganizationConfiguration = import("./guarddutyOrganizationConfiguration").GuarddutyOrganizationConfiguration;
export const GuarddutyOrganizationConfiguration: typeof import("./guarddutyOrganizationConfiguration").GuarddutyOrganizationConfiguration = null as any;
utilities.lazyLoad(exports, ["GuarddutyOrganizationConfiguration"], () => require("./guarddutyOrganizationConfiguration"));

export { GuarddutyOrganizationConfigurationFeatureArgs, GuarddutyOrganizationConfigurationFeatureState } from "./guarddutyOrganizationConfigurationFeature";
export type GuarddutyOrganizationConfigurationFeature = import("./guarddutyOrganizationConfigurationFeature").GuarddutyOrganizationConfigurationFeature;
export const GuarddutyOrganizationConfigurationFeature: typeof import("./guarddutyOrganizationConfigurationFeature").GuarddutyOrganizationConfigurationFeature = null as any;
utilities.lazyLoad(exports, ["GuarddutyOrganizationConfigurationFeature"], () => require("./guarddutyOrganizationConfigurationFeature"));

export { GuarddutyPublishingDestinationArgs, GuarddutyPublishingDestinationState } from "./guarddutyPublishingDestination";
export type GuarddutyPublishingDestination = import("./guarddutyPublishingDestination").GuarddutyPublishingDestination;
export const GuarddutyPublishingDestination: typeof import("./guarddutyPublishingDestination").GuarddutyPublishingDestination = null as any;
utilities.lazyLoad(exports, ["GuarddutyPublishingDestination"], () => require("./guarddutyPublishingDestination"));

export { GuarddutyThreatintelsetArgs, GuarddutyThreatintelsetState } from "./guarddutyThreatintelset";
export type GuarddutyThreatintelset = import("./guarddutyThreatintelset").GuarddutyThreatintelset;
export const GuarddutyThreatintelset: typeof import("./guarddutyThreatintelset").GuarddutyThreatintelset = null as any;
utilities.lazyLoad(exports, ["GuarddutyThreatintelset"], () => require("./guarddutyThreatintelset"));

export { IamAccessKeyArgs, IamAccessKeyState } from "./iamAccessKey";
export type IamAccessKey = import("./iamAccessKey").IamAccessKey;
export const IamAccessKey: typeof import("./iamAccessKey").IamAccessKey = null as any;
utilities.lazyLoad(exports, ["IamAccessKey"], () => require("./iamAccessKey"));

export { IamAccountAliasArgs, IamAccountAliasState } from "./iamAccountAlias";
export type IamAccountAlias = import("./iamAccountAlias").IamAccountAlias;
export const IamAccountAlias: typeof import("./iamAccountAlias").IamAccountAlias = null as any;
utilities.lazyLoad(exports, ["IamAccountAlias"], () => require("./iamAccountAlias"));

export { IamAccountPasswordPolicyArgs, IamAccountPasswordPolicyState } from "./iamAccountPasswordPolicy";
export type IamAccountPasswordPolicy = import("./iamAccountPasswordPolicy").IamAccountPasswordPolicy;
export const IamAccountPasswordPolicy: typeof import("./iamAccountPasswordPolicy").IamAccountPasswordPolicy = null as any;
utilities.lazyLoad(exports, ["IamAccountPasswordPolicy"], () => require("./iamAccountPasswordPolicy"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamGroupMembershipArgs, IamGroupMembershipState } from "./iamGroupMembership";
export type IamGroupMembership = import("./iamGroupMembership").IamGroupMembership;
export const IamGroupMembership: typeof import("./iamGroupMembership").IamGroupMembership = null as any;
utilities.lazyLoad(exports, ["IamGroupMembership"], () => require("./iamGroupMembership"));

export { IamGroupPolicyArgs, IamGroupPolicyState } from "./iamGroupPolicy";
export type IamGroupPolicy = import("./iamGroupPolicy").IamGroupPolicy;
export const IamGroupPolicy: typeof import("./iamGroupPolicy").IamGroupPolicy = null as any;
utilities.lazyLoad(exports, ["IamGroupPolicy"], () => require("./iamGroupPolicy"));

export { IamGroupPolicyAttachmentArgs, IamGroupPolicyAttachmentState } from "./iamGroupPolicyAttachment";
export type IamGroupPolicyAttachment = import("./iamGroupPolicyAttachment").IamGroupPolicyAttachment;
export const IamGroupPolicyAttachment: typeof import("./iamGroupPolicyAttachment").IamGroupPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IamGroupPolicyAttachment"], () => require("./iamGroupPolicyAttachment"));

export { IamInstanceProfileArgs, IamInstanceProfileState } from "./iamInstanceProfile";
export type IamInstanceProfile = import("./iamInstanceProfile").IamInstanceProfile;
export const IamInstanceProfile: typeof import("./iamInstanceProfile").IamInstanceProfile = null as any;
utilities.lazyLoad(exports, ["IamInstanceProfile"], () => require("./iamInstanceProfile"));

export { IamOpenidConnectProviderArgs, IamOpenidConnectProviderState } from "./iamOpenidConnectProvider";
export type IamOpenidConnectProvider = import("./iamOpenidConnectProvider").IamOpenidConnectProvider;
export const IamOpenidConnectProvider: typeof import("./iamOpenidConnectProvider").IamOpenidConnectProvider = null as any;
utilities.lazyLoad(exports, ["IamOpenidConnectProvider"], () => require("./iamOpenidConnectProvider"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { IamPolicyAttachmentArgs, IamPolicyAttachmentState } from "./iamPolicyAttachment";
export type IamPolicyAttachment = import("./iamPolicyAttachment").IamPolicyAttachment;
export const IamPolicyAttachment: typeof import("./iamPolicyAttachment").IamPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IamPolicyAttachment"], () => require("./iamPolicyAttachment"));

export { IamRoleArgs, IamRoleState } from "./iamRole";
export type IamRole = import("./iamRole").IamRole;
export const IamRole: typeof import("./iamRole").IamRole = null as any;
utilities.lazyLoad(exports, ["IamRole"], () => require("./iamRole"));

export { IamRolePolicyArgs, IamRolePolicyState } from "./iamRolePolicy";
export type IamRolePolicy = import("./iamRolePolicy").IamRolePolicy;
export const IamRolePolicy: typeof import("./iamRolePolicy").IamRolePolicy = null as any;
utilities.lazyLoad(exports, ["IamRolePolicy"], () => require("./iamRolePolicy"));

export { IamRolePolicyAttachmentArgs, IamRolePolicyAttachmentState } from "./iamRolePolicyAttachment";
export type IamRolePolicyAttachment = import("./iamRolePolicyAttachment").IamRolePolicyAttachment;
export const IamRolePolicyAttachment: typeof import("./iamRolePolicyAttachment").IamRolePolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IamRolePolicyAttachment"], () => require("./iamRolePolicyAttachment"));

export { IamSamlProviderArgs, IamSamlProviderState } from "./iamSamlProvider";
export type IamSamlProvider = import("./iamSamlProvider").IamSamlProvider;
export const IamSamlProvider: typeof import("./iamSamlProvider").IamSamlProvider = null as any;
utilities.lazyLoad(exports, ["IamSamlProvider"], () => require("./iamSamlProvider"));

export { IamSecurityTokenServicePreferencesArgs, IamSecurityTokenServicePreferencesState } from "./iamSecurityTokenServicePreferences";
export type IamSecurityTokenServicePreferences = import("./iamSecurityTokenServicePreferences").IamSecurityTokenServicePreferences;
export const IamSecurityTokenServicePreferences: typeof import("./iamSecurityTokenServicePreferences").IamSecurityTokenServicePreferences = null as any;
utilities.lazyLoad(exports, ["IamSecurityTokenServicePreferences"], () => require("./iamSecurityTokenServicePreferences"));

export { IamServerCertificateArgs, IamServerCertificateState } from "./iamServerCertificate";
export type IamServerCertificate = import("./iamServerCertificate").IamServerCertificate;
export const IamServerCertificate: typeof import("./iamServerCertificate").IamServerCertificate = null as any;
utilities.lazyLoad(exports, ["IamServerCertificate"], () => require("./iamServerCertificate"));

export { IamServiceLinkedRoleArgs, IamServiceLinkedRoleState } from "./iamServiceLinkedRole";
export type IamServiceLinkedRole = import("./iamServiceLinkedRole").IamServiceLinkedRole;
export const IamServiceLinkedRole: typeof import("./iamServiceLinkedRole").IamServiceLinkedRole = null as any;
utilities.lazyLoad(exports, ["IamServiceLinkedRole"], () => require("./iamServiceLinkedRole"));

export { IamServiceSpecificCredentialArgs, IamServiceSpecificCredentialState } from "./iamServiceSpecificCredential";
export type IamServiceSpecificCredential = import("./iamServiceSpecificCredential").IamServiceSpecificCredential;
export const IamServiceSpecificCredential: typeof import("./iamServiceSpecificCredential").IamServiceSpecificCredential = null as any;
utilities.lazyLoad(exports, ["IamServiceSpecificCredential"], () => require("./iamServiceSpecificCredential"));

export { IamSigningCertificateArgs, IamSigningCertificateState } from "./iamSigningCertificate";
export type IamSigningCertificate = import("./iamSigningCertificate").IamSigningCertificate;
export const IamSigningCertificate: typeof import("./iamSigningCertificate").IamSigningCertificate = null as any;
utilities.lazyLoad(exports, ["IamSigningCertificate"], () => require("./iamSigningCertificate"));

export { IamUserArgs, IamUserState } from "./iamUser";
export type IamUser = import("./iamUser").IamUser;
export const IamUser: typeof import("./iamUser").IamUser = null as any;
utilities.lazyLoad(exports, ["IamUser"], () => require("./iamUser"));

export { IamUserGroupMembershipArgs, IamUserGroupMembershipState } from "./iamUserGroupMembership";
export type IamUserGroupMembership = import("./iamUserGroupMembership").IamUserGroupMembership;
export const IamUserGroupMembership: typeof import("./iamUserGroupMembership").IamUserGroupMembership = null as any;
utilities.lazyLoad(exports, ["IamUserGroupMembership"], () => require("./iamUserGroupMembership"));

export { IamUserLoginProfileArgs, IamUserLoginProfileState } from "./iamUserLoginProfile";
export type IamUserLoginProfile = import("./iamUserLoginProfile").IamUserLoginProfile;
export const IamUserLoginProfile: typeof import("./iamUserLoginProfile").IamUserLoginProfile = null as any;
utilities.lazyLoad(exports, ["IamUserLoginProfile"], () => require("./iamUserLoginProfile"));

export { IamUserPolicyArgs, IamUserPolicyState } from "./iamUserPolicy";
export type IamUserPolicy = import("./iamUserPolicy").IamUserPolicy;
export const IamUserPolicy: typeof import("./iamUserPolicy").IamUserPolicy = null as any;
utilities.lazyLoad(exports, ["IamUserPolicy"], () => require("./iamUserPolicy"));

export { IamUserPolicyAttachmentArgs, IamUserPolicyAttachmentState } from "./iamUserPolicyAttachment";
export type IamUserPolicyAttachment = import("./iamUserPolicyAttachment").IamUserPolicyAttachment;
export const IamUserPolicyAttachment: typeof import("./iamUserPolicyAttachment").IamUserPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IamUserPolicyAttachment"], () => require("./iamUserPolicyAttachment"));

export { IamUserSshKeyArgs, IamUserSshKeyState } from "./iamUserSshKey";
export type IamUserSshKey = import("./iamUserSshKey").IamUserSshKey;
export const IamUserSshKey: typeof import("./iamUserSshKey").IamUserSshKey = null as any;
utilities.lazyLoad(exports, ["IamUserSshKey"], () => require("./iamUserSshKey"));

export { IamVirtualMfaDeviceArgs, IamVirtualMfaDeviceState } from "./iamVirtualMfaDevice";
export type IamVirtualMfaDevice = import("./iamVirtualMfaDevice").IamVirtualMfaDevice;
export const IamVirtualMfaDevice: typeof import("./iamVirtualMfaDevice").IamVirtualMfaDevice = null as any;
utilities.lazyLoad(exports, ["IamVirtualMfaDevice"], () => require("./iamVirtualMfaDevice"));

export { IdentitystoreGroupArgs, IdentitystoreGroupState } from "./identitystoreGroup";
export type IdentitystoreGroup = import("./identitystoreGroup").IdentitystoreGroup;
export const IdentitystoreGroup: typeof import("./identitystoreGroup").IdentitystoreGroup = null as any;
utilities.lazyLoad(exports, ["IdentitystoreGroup"], () => require("./identitystoreGroup"));

export { IdentitystoreGroupMembershipArgs, IdentitystoreGroupMembershipState } from "./identitystoreGroupMembership";
export type IdentitystoreGroupMembership = import("./identitystoreGroupMembership").IdentitystoreGroupMembership;
export const IdentitystoreGroupMembership: typeof import("./identitystoreGroupMembership").IdentitystoreGroupMembership = null as any;
utilities.lazyLoad(exports, ["IdentitystoreGroupMembership"], () => require("./identitystoreGroupMembership"));

export { IdentitystoreUserArgs, IdentitystoreUserState } from "./identitystoreUser";
export type IdentitystoreUser = import("./identitystoreUser").IdentitystoreUser;
export const IdentitystoreUser: typeof import("./identitystoreUser").IdentitystoreUser = null as any;
utilities.lazyLoad(exports, ["IdentitystoreUser"], () => require("./identitystoreUser"));

export { ImagebuilderComponentArgs, ImagebuilderComponentState } from "./imagebuilderComponent";
export type ImagebuilderComponent = import("./imagebuilderComponent").ImagebuilderComponent;
export const ImagebuilderComponent: typeof import("./imagebuilderComponent").ImagebuilderComponent = null as any;
utilities.lazyLoad(exports, ["ImagebuilderComponent"], () => require("./imagebuilderComponent"));

export { ImagebuilderContainerRecipeArgs, ImagebuilderContainerRecipeState } from "./imagebuilderContainerRecipe";
export type ImagebuilderContainerRecipe = import("./imagebuilderContainerRecipe").ImagebuilderContainerRecipe;
export const ImagebuilderContainerRecipe: typeof import("./imagebuilderContainerRecipe").ImagebuilderContainerRecipe = null as any;
utilities.lazyLoad(exports, ["ImagebuilderContainerRecipe"], () => require("./imagebuilderContainerRecipe"));

export { ImagebuilderDistributionConfigurationArgs, ImagebuilderDistributionConfigurationState } from "./imagebuilderDistributionConfiguration";
export type ImagebuilderDistributionConfiguration = import("./imagebuilderDistributionConfiguration").ImagebuilderDistributionConfiguration;
export const ImagebuilderDistributionConfiguration: typeof import("./imagebuilderDistributionConfiguration").ImagebuilderDistributionConfiguration = null as any;
utilities.lazyLoad(exports, ["ImagebuilderDistributionConfiguration"], () => require("./imagebuilderDistributionConfiguration"));

export { ImagebuilderImageArgs, ImagebuilderImageState } from "./imagebuilderImage";
export type ImagebuilderImage = import("./imagebuilderImage").ImagebuilderImage;
export const ImagebuilderImage: typeof import("./imagebuilderImage").ImagebuilderImage = null as any;
utilities.lazyLoad(exports, ["ImagebuilderImage"], () => require("./imagebuilderImage"));

export { ImagebuilderImagePipelineArgs, ImagebuilderImagePipelineState } from "./imagebuilderImagePipeline";
export type ImagebuilderImagePipeline = import("./imagebuilderImagePipeline").ImagebuilderImagePipeline;
export const ImagebuilderImagePipeline: typeof import("./imagebuilderImagePipeline").ImagebuilderImagePipeline = null as any;
utilities.lazyLoad(exports, ["ImagebuilderImagePipeline"], () => require("./imagebuilderImagePipeline"));

export { ImagebuilderImageRecipeArgs, ImagebuilderImageRecipeState } from "./imagebuilderImageRecipe";
export type ImagebuilderImageRecipe = import("./imagebuilderImageRecipe").ImagebuilderImageRecipe;
export const ImagebuilderImageRecipe: typeof import("./imagebuilderImageRecipe").ImagebuilderImageRecipe = null as any;
utilities.lazyLoad(exports, ["ImagebuilderImageRecipe"], () => require("./imagebuilderImageRecipe"));

export { ImagebuilderInfrastructureConfigurationArgs, ImagebuilderInfrastructureConfigurationState } from "./imagebuilderInfrastructureConfiguration";
export type ImagebuilderInfrastructureConfiguration = import("./imagebuilderInfrastructureConfiguration").ImagebuilderInfrastructureConfiguration;
export const ImagebuilderInfrastructureConfiguration: typeof import("./imagebuilderInfrastructureConfiguration").ImagebuilderInfrastructureConfiguration = null as any;
utilities.lazyLoad(exports, ["ImagebuilderInfrastructureConfiguration"], () => require("./imagebuilderInfrastructureConfiguration"));

export { ImagebuilderWorkflowArgs, ImagebuilderWorkflowState } from "./imagebuilderWorkflow";
export type ImagebuilderWorkflow = import("./imagebuilderWorkflow").ImagebuilderWorkflow;
export const ImagebuilderWorkflow: typeof import("./imagebuilderWorkflow").ImagebuilderWorkflow = null as any;
utilities.lazyLoad(exports, ["ImagebuilderWorkflow"], () => require("./imagebuilderWorkflow"));

export { Inspector2DelegatedAdminAccountArgs, Inspector2DelegatedAdminAccountState } from "./inspector2DelegatedAdminAccount";
export type Inspector2DelegatedAdminAccount = import("./inspector2DelegatedAdminAccount").Inspector2DelegatedAdminAccount;
export const Inspector2DelegatedAdminAccount: typeof import("./inspector2DelegatedAdminAccount").Inspector2DelegatedAdminAccount = null as any;
utilities.lazyLoad(exports, ["Inspector2DelegatedAdminAccount"], () => require("./inspector2DelegatedAdminAccount"));

export { Inspector2EnablerArgs, Inspector2EnablerState } from "./inspector2Enabler";
export type Inspector2Enabler = import("./inspector2Enabler").Inspector2Enabler;
export const Inspector2Enabler: typeof import("./inspector2Enabler").Inspector2Enabler = null as any;
utilities.lazyLoad(exports, ["Inspector2Enabler"], () => require("./inspector2Enabler"));

export { Inspector2MemberAssociationArgs, Inspector2MemberAssociationState } from "./inspector2MemberAssociation";
export type Inspector2MemberAssociation = import("./inspector2MemberAssociation").Inspector2MemberAssociation;
export const Inspector2MemberAssociation: typeof import("./inspector2MemberAssociation").Inspector2MemberAssociation = null as any;
utilities.lazyLoad(exports, ["Inspector2MemberAssociation"], () => require("./inspector2MemberAssociation"));

export { Inspector2OrganizationConfigurationArgs, Inspector2OrganizationConfigurationState } from "./inspector2OrganizationConfiguration";
export type Inspector2OrganizationConfiguration = import("./inspector2OrganizationConfiguration").Inspector2OrganizationConfiguration;
export const Inspector2OrganizationConfiguration: typeof import("./inspector2OrganizationConfiguration").Inspector2OrganizationConfiguration = null as any;
utilities.lazyLoad(exports, ["Inspector2OrganizationConfiguration"], () => require("./inspector2OrganizationConfiguration"));

export { InspectorAssessmentTargetArgs, InspectorAssessmentTargetState } from "./inspectorAssessmentTarget";
export type InspectorAssessmentTarget = import("./inspectorAssessmentTarget").InspectorAssessmentTarget;
export const InspectorAssessmentTarget: typeof import("./inspectorAssessmentTarget").InspectorAssessmentTarget = null as any;
utilities.lazyLoad(exports, ["InspectorAssessmentTarget"], () => require("./inspectorAssessmentTarget"));

export { InspectorAssessmentTemplateArgs, InspectorAssessmentTemplateState } from "./inspectorAssessmentTemplate";
export type InspectorAssessmentTemplate = import("./inspectorAssessmentTemplate").InspectorAssessmentTemplate;
export const InspectorAssessmentTemplate: typeof import("./inspectorAssessmentTemplate").InspectorAssessmentTemplate = null as any;
utilities.lazyLoad(exports, ["InspectorAssessmentTemplate"], () => require("./inspectorAssessmentTemplate"));

export { InspectorResourceGroupArgs, InspectorResourceGroupState } from "./inspectorResourceGroup";
export type InspectorResourceGroup = import("./inspectorResourceGroup").InspectorResourceGroup;
export const InspectorResourceGroup: typeof import("./inspectorResourceGroup").InspectorResourceGroup = null as any;
utilities.lazyLoad(exports, ["InspectorResourceGroup"], () => require("./inspectorResourceGroup"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InternetGatewayArgs, InternetGatewayState } from "./internetGateway";
export type InternetGateway = import("./internetGateway").InternetGateway;
export const InternetGateway: typeof import("./internetGateway").InternetGateway = null as any;
utilities.lazyLoad(exports, ["InternetGateway"], () => require("./internetGateway"));

export { InternetGatewayAttachmentArgs, InternetGatewayAttachmentState } from "./internetGatewayAttachment";
export type InternetGatewayAttachment = import("./internetGatewayAttachment").InternetGatewayAttachment;
export const InternetGatewayAttachment: typeof import("./internetGatewayAttachment").InternetGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["InternetGatewayAttachment"], () => require("./internetGatewayAttachment"));

export { InternetmonitorMonitorArgs, InternetmonitorMonitorState } from "./internetmonitorMonitor";
export type InternetmonitorMonitor = import("./internetmonitorMonitor").InternetmonitorMonitor;
export const InternetmonitorMonitor: typeof import("./internetmonitorMonitor").InternetmonitorMonitor = null as any;
utilities.lazyLoad(exports, ["InternetmonitorMonitor"], () => require("./internetmonitorMonitor"));

export { IotAuthorizerArgs, IotAuthorizerState } from "./iotAuthorizer";
export type IotAuthorizer = import("./iotAuthorizer").IotAuthorizer;
export const IotAuthorizer: typeof import("./iotAuthorizer").IotAuthorizer = null as any;
utilities.lazyLoad(exports, ["IotAuthorizer"], () => require("./iotAuthorizer"));

export { IotBillingGroupArgs, IotBillingGroupState } from "./iotBillingGroup";
export type IotBillingGroup = import("./iotBillingGroup").IotBillingGroup;
export const IotBillingGroup: typeof import("./iotBillingGroup").IotBillingGroup = null as any;
utilities.lazyLoad(exports, ["IotBillingGroup"], () => require("./iotBillingGroup"));

export { IotCaCertificateArgs, IotCaCertificateState } from "./iotCaCertificate";
export type IotCaCertificate = import("./iotCaCertificate").IotCaCertificate;
export const IotCaCertificate: typeof import("./iotCaCertificate").IotCaCertificate = null as any;
utilities.lazyLoad(exports, ["IotCaCertificate"], () => require("./iotCaCertificate"));

export { IotCertificateArgs, IotCertificateState } from "./iotCertificate";
export type IotCertificate = import("./iotCertificate").IotCertificate;
export const IotCertificate: typeof import("./iotCertificate").IotCertificate = null as any;
utilities.lazyLoad(exports, ["IotCertificate"], () => require("./iotCertificate"));

export { IotDomainConfigurationArgs, IotDomainConfigurationState } from "./iotDomainConfiguration";
export type IotDomainConfiguration = import("./iotDomainConfiguration").IotDomainConfiguration;
export const IotDomainConfiguration: typeof import("./iotDomainConfiguration").IotDomainConfiguration = null as any;
utilities.lazyLoad(exports, ["IotDomainConfiguration"], () => require("./iotDomainConfiguration"));

export { IotEventConfigurationsArgs, IotEventConfigurationsState } from "./iotEventConfigurations";
export type IotEventConfigurations = import("./iotEventConfigurations").IotEventConfigurations;
export const IotEventConfigurations: typeof import("./iotEventConfigurations").IotEventConfigurations = null as any;
utilities.lazyLoad(exports, ["IotEventConfigurations"], () => require("./iotEventConfigurations"));

export { IotIndexingConfigurationArgs, IotIndexingConfigurationState } from "./iotIndexingConfiguration";
export type IotIndexingConfiguration = import("./iotIndexingConfiguration").IotIndexingConfiguration;
export const IotIndexingConfiguration: typeof import("./iotIndexingConfiguration").IotIndexingConfiguration = null as any;
utilities.lazyLoad(exports, ["IotIndexingConfiguration"], () => require("./iotIndexingConfiguration"));

export { IotLoggingOptionsArgs, IotLoggingOptionsState } from "./iotLoggingOptions";
export type IotLoggingOptions = import("./iotLoggingOptions").IotLoggingOptions;
export const IotLoggingOptions: typeof import("./iotLoggingOptions").IotLoggingOptions = null as any;
utilities.lazyLoad(exports, ["IotLoggingOptions"], () => require("./iotLoggingOptions"));

export { IotPolicyArgs, IotPolicyState } from "./iotPolicy";
export type IotPolicy = import("./iotPolicy").IotPolicy;
export const IotPolicy: typeof import("./iotPolicy").IotPolicy = null as any;
utilities.lazyLoad(exports, ["IotPolicy"], () => require("./iotPolicy"));

export { IotPolicyAttachmentArgs, IotPolicyAttachmentState } from "./iotPolicyAttachment";
export type IotPolicyAttachment = import("./iotPolicyAttachment").IotPolicyAttachment;
export const IotPolicyAttachment: typeof import("./iotPolicyAttachment").IotPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IotPolicyAttachment"], () => require("./iotPolicyAttachment"));

export { IotProvisioningTemplateArgs, IotProvisioningTemplateState } from "./iotProvisioningTemplate";
export type IotProvisioningTemplate = import("./iotProvisioningTemplate").IotProvisioningTemplate;
export const IotProvisioningTemplate: typeof import("./iotProvisioningTemplate").IotProvisioningTemplate = null as any;
utilities.lazyLoad(exports, ["IotProvisioningTemplate"], () => require("./iotProvisioningTemplate"));

export { IotRoleAliasArgs, IotRoleAliasState } from "./iotRoleAlias";
export type IotRoleAlias = import("./iotRoleAlias").IotRoleAlias;
export const IotRoleAlias: typeof import("./iotRoleAlias").IotRoleAlias = null as any;
utilities.lazyLoad(exports, ["IotRoleAlias"], () => require("./iotRoleAlias"));

export { IotThingArgs, IotThingState } from "./iotThing";
export type IotThing = import("./iotThing").IotThing;
export const IotThing: typeof import("./iotThing").IotThing = null as any;
utilities.lazyLoad(exports, ["IotThing"], () => require("./iotThing"));

export { IotThingGroupArgs, IotThingGroupState } from "./iotThingGroup";
export type IotThingGroup = import("./iotThingGroup").IotThingGroup;
export const IotThingGroup: typeof import("./iotThingGroup").IotThingGroup = null as any;
utilities.lazyLoad(exports, ["IotThingGroup"], () => require("./iotThingGroup"));

export { IotThingGroupMembershipArgs, IotThingGroupMembershipState } from "./iotThingGroupMembership";
export type IotThingGroupMembership = import("./iotThingGroupMembership").IotThingGroupMembership;
export const IotThingGroupMembership: typeof import("./iotThingGroupMembership").IotThingGroupMembership = null as any;
utilities.lazyLoad(exports, ["IotThingGroupMembership"], () => require("./iotThingGroupMembership"));

export { IotThingPrincipalAttachmentArgs, IotThingPrincipalAttachmentState } from "./iotThingPrincipalAttachment";
export type IotThingPrincipalAttachment = import("./iotThingPrincipalAttachment").IotThingPrincipalAttachment;
export const IotThingPrincipalAttachment: typeof import("./iotThingPrincipalAttachment").IotThingPrincipalAttachment = null as any;
utilities.lazyLoad(exports, ["IotThingPrincipalAttachment"], () => require("./iotThingPrincipalAttachment"));

export { IotThingTypeArgs, IotThingTypeState } from "./iotThingType";
export type IotThingType = import("./iotThingType").IotThingType;
export const IotThingType: typeof import("./iotThingType").IotThingType = null as any;
utilities.lazyLoad(exports, ["IotThingType"], () => require("./iotThingType"));

export { IotTopicRuleArgs, IotTopicRuleState } from "./iotTopicRule";
export type IotTopicRule = import("./iotTopicRule").IotTopicRule;
export const IotTopicRule: typeof import("./iotTopicRule").IotTopicRule = null as any;
utilities.lazyLoad(exports, ["IotTopicRule"], () => require("./iotTopicRule"));

export { IotTopicRuleDestinationArgs, IotTopicRuleDestinationState } from "./iotTopicRuleDestination";
export type IotTopicRuleDestination = import("./iotTopicRuleDestination").IotTopicRuleDestination;
export const IotTopicRuleDestination: typeof import("./iotTopicRuleDestination").IotTopicRuleDestination = null as any;
utilities.lazyLoad(exports, ["IotTopicRuleDestination"], () => require("./iotTopicRuleDestination"));

export { IvsChannelArgs, IvsChannelState } from "./ivsChannel";
export type IvsChannel = import("./ivsChannel").IvsChannel;
export const IvsChannel: typeof import("./ivsChannel").IvsChannel = null as any;
utilities.lazyLoad(exports, ["IvsChannel"], () => require("./ivsChannel"));

export { IvsPlaybackKeyPairArgs, IvsPlaybackKeyPairState } from "./ivsPlaybackKeyPair";
export type IvsPlaybackKeyPair = import("./ivsPlaybackKeyPair").IvsPlaybackKeyPair;
export const IvsPlaybackKeyPair: typeof import("./ivsPlaybackKeyPair").IvsPlaybackKeyPair = null as any;
utilities.lazyLoad(exports, ["IvsPlaybackKeyPair"], () => require("./ivsPlaybackKeyPair"));

export { IvsRecordingConfigurationArgs, IvsRecordingConfigurationState } from "./ivsRecordingConfiguration";
export type IvsRecordingConfiguration = import("./ivsRecordingConfiguration").IvsRecordingConfiguration;
export const IvsRecordingConfiguration: typeof import("./ivsRecordingConfiguration").IvsRecordingConfiguration = null as any;
utilities.lazyLoad(exports, ["IvsRecordingConfiguration"], () => require("./ivsRecordingConfiguration"));

export { IvschatLoggingConfigurationArgs, IvschatLoggingConfigurationState } from "./ivschatLoggingConfiguration";
export type IvschatLoggingConfiguration = import("./ivschatLoggingConfiguration").IvschatLoggingConfiguration;
export const IvschatLoggingConfiguration: typeof import("./ivschatLoggingConfiguration").IvschatLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["IvschatLoggingConfiguration"], () => require("./ivschatLoggingConfiguration"));

export { IvschatRoomArgs, IvschatRoomState } from "./ivschatRoom";
export type IvschatRoom = import("./ivschatRoom").IvschatRoom;
export const IvschatRoom: typeof import("./ivschatRoom").IvschatRoom = null as any;
utilities.lazyLoad(exports, ["IvschatRoom"], () => require("./ivschatRoom"));

export { KendraDataSourceArgs, KendraDataSourceState } from "./kendraDataSource";
export type KendraDataSource = import("./kendraDataSource").KendraDataSource;
export const KendraDataSource: typeof import("./kendraDataSource").KendraDataSource = null as any;
utilities.lazyLoad(exports, ["KendraDataSource"], () => require("./kendraDataSource"));

export { KendraExperienceArgs, KendraExperienceState } from "./kendraExperience";
export type KendraExperience = import("./kendraExperience").KendraExperience;
export const KendraExperience: typeof import("./kendraExperience").KendraExperience = null as any;
utilities.lazyLoad(exports, ["KendraExperience"], () => require("./kendraExperience"));

export { KendraFaqArgs, KendraFaqState } from "./kendraFaq";
export type KendraFaq = import("./kendraFaq").KendraFaq;
export const KendraFaq: typeof import("./kendraFaq").KendraFaq = null as any;
utilities.lazyLoad(exports, ["KendraFaq"], () => require("./kendraFaq"));

export { KendraIndexArgs, KendraIndexState } from "./kendraIndex";
export type KendraIndex = import("./kendraIndex").KendraIndex;
export const KendraIndex: typeof import("./kendraIndex").KendraIndex = null as any;
utilities.lazyLoad(exports, ["KendraIndex"], () => require("./kendraIndex"));

export { KendraQuerySuggestionsBlockListArgs, KendraQuerySuggestionsBlockListState } from "./kendraQuerySuggestionsBlockList";
export type KendraQuerySuggestionsBlockList = import("./kendraQuerySuggestionsBlockList").KendraQuerySuggestionsBlockList;
export const KendraQuerySuggestionsBlockList: typeof import("./kendraQuerySuggestionsBlockList").KendraQuerySuggestionsBlockList = null as any;
utilities.lazyLoad(exports, ["KendraQuerySuggestionsBlockList"], () => require("./kendraQuerySuggestionsBlockList"));

export { KendraThesaurusArgs, KendraThesaurusState } from "./kendraThesaurus";
export type KendraThesaurus = import("./kendraThesaurus").KendraThesaurus;
export const KendraThesaurus: typeof import("./kendraThesaurus").KendraThesaurus = null as any;
utilities.lazyLoad(exports, ["KendraThesaurus"], () => require("./kendraThesaurus"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { KeyspacesKeyspaceArgs, KeyspacesKeyspaceState } from "./keyspacesKeyspace";
export type KeyspacesKeyspace = import("./keyspacesKeyspace").KeyspacesKeyspace;
export const KeyspacesKeyspace: typeof import("./keyspacesKeyspace").KeyspacesKeyspace = null as any;
utilities.lazyLoad(exports, ["KeyspacesKeyspace"], () => require("./keyspacesKeyspace"));

export { KeyspacesTableArgs, KeyspacesTableState } from "./keyspacesTable";
export type KeyspacesTable = import("./keyspacesTable").KeyspacesTable;
export const KeyspacesTable: typeof import("./keyspacesTable").KeyspacesTable = null as any;
utilities.lazyLoad(exports, ["KeyspacesTable"], () => require("./keyspacesTable"));

export { KinesisAnalyticsApplicationArgs, KinesisAnalyticsApplicationState } from "./kinesisAnalyticsApplication";
export type KinesisAnalyticsApplication = import("./kinesisAnalyticsApplication").KinesisAnalyticsApplication;
export const KinesisAnalyticsApplication: typeof import("./kinesisAnalyticsApplication").KinesisAnalyticsApplication = null as any;
utilities.lazyLoad(exports, ["KinesisAnalyticsApplication"], () => require("./kinesisAnalyticsApplication"));

export { KinesisFirehoseDeliveryStreamArgs, KinesisFirehoseDeliveryStreamState } from "./kinesisFirehoseDeliveryStream";
export type KinesisFirehoseDeliveryStream = import("./kinesisFirehoseDeliveryStream").KinesisFirehoseDeliveryStream;
export const KinesisFirehoseDeliveryStream: typeof import("./kinesisFirehoseDeliveryStream").KinesisFirehoseDeliveryStream = null as any;
utilities.lazyLoad(exports, ["KinesisFirehoseDeliveryStream"], () => require("./kinesisFirehoseDeliveryStream"));

export { KinesisResourcePolicyArgs, KinesisResourcePolicyState } from "./kinesisResourcePolicy";
export type KinesisResourcePolicy = import("./kinesisResourcePolicy").KinesisResourcePolicy;
export const KinesisResourcePolicy: typeof import("./kinesisResourcePolicy").KinesisResourcePolicy = null as any;
utilities.lazyLoad(exports, ["KinesisResourcePolicy"], () => require("./kinesisResourcePolicy"));

export { KinesisStreamArgs, KinesisStreamState } from "./kinesisStream";
export type KinesisStream = import("./kinesisStream").KinesisStream;
export const KinesisStream: typeof import("./kinesisStream").KinesisStream = null as any;
utilities.lazyLoad(exports, ["KinesisStream"], () => require("./kinesisStream"));

export { KinesisStreamConsumerArgs, KinesisStreamConsumerState } from "./kinesisStreamConsumer";
export type KinesisStreamConsumer = import("./kinesisStreamConsumer").KinesisStreamConsumer;
export const KinesisStreamConsumer: typeof import("./kinesisStreamConsumer").KinesisStreamConsumer = null as any;
utilities.lazyLoad(exports, ["KinesisStreamConsumer"], () => require("./kinesisStreamConsumer"));

export { KinesisVideoStreamArgs, KinesisVideoStreamState } from "./kinesisVideoStream";
export type KinesisVideoStream = import("./kinesisVideoStream").KinesisVideoStream;
export const KinesisVideoStream: typeof import("./kinesisVideoStream").KinesisVideoStream = null as any;
utilities.lazyLoad(exports, ["KinesisVideoStream"], () => require("./kinesisVideoStream"));

export { Kinesisanalyticsv2ApplicationArgs, Kinesisanalyticsv2ApplicationState } from "./kinesisanalyticsv2Application";
export type Kinesisanalyticsv2Application = import("./kinesisanalyticsv2Application").Kinesisanalyticsv2Application;
export const Kinesisanalyticsv2Application: typeof import("./kinesisanalyticsv2Application").Kinesisanalyticsv2Application = null as any;
utilities.lazyLoad(exports, ["Kinesisanalyticsv2Application"], () => require("./kinesisanalyticsv2Application"));

export { Kinesisanalyticsv2ApplicationSnapshotArgs, Kinesisanalyticsv2ApplicationSnapshotState } from "./kinesisanalyticsv2ApplicationSnapshot";
export type Kinesisanalyticsv2ApplicationSnapshot = import("./kinesisanalyticsv2ApplicationSnapshot").Kinesisanalyticsv2ApplicationSnapshot;
export const Kinesisanalyticsv2ApplicationSnapshot: typeof import("./kinesisanalyticsv2ApplicationSnapshot").Kinesisanalyticsv2ApplicationSnapshot = null as any;
utilities.lazyLoad(exports, ["Kinesisanalyticsv2ApplicationSnapshot"], () => require("./kinesisanalyticsv2ApplicationSnapshot"));

export { KmsAliasArgs, KmsAliasState } from "./kmsAlias";
export type KmsAlias = import("./kmsAlias").KmsAlias;
export const KmsAlias: typeof import("./kmsAlias").KmsAlias = null as any;
utilities.lazyLoad(exports, ["KmsAlias"], () => require("./kmsAlias"));

export { KmsCiphertextArgs, KmsCiphertextState } from "./kmsCiphertext";
export type KmsCiphertext = import("./kmsCiphertext").KmsCiphertext;
export const KmsCiphertext: typeof import("./kmsCiphertext").KmsCiphertext = null as any;
utilities.lazyLoad(exports, ["KmsCiphertext"], () => require("./kmsCiphertext"));

export { KmsCustomKeyStoreArgs, KmsCustomKeyStoreState } from "./kmsCustomKeyStore";
export type KmsCustomKeyStore = import("./kmsCustomKeyStore").KmsCustomKeyStore;
export const KmsCustomKeyStore: typeof import("./kmsCustomKeyStore").KmsCustomKeyStore = null as any;
utilities.lazyLoad(exports, ["KmsCustomKeyStore"], () => require("./kmsCustomKeyStore"));

export { KmsExternalKeyArgs, KmsExternalKeyState } from "./kmsExternalKey";
export type KmsExternalKey = import("./kmsExternalKey").KmsExternalKey;
export const KmsExternalKey: typeof import("./kmsExternalKey").KmsExternalKey = null as any;
utilities.lazyLoad(exports, ["KmsExternalKey"], () => require("./kmsExternalKey"));

export { KmsGrantArgs, KmsGrantState } from "./kmsGrant";
export type KmsGrant = import("./kmsGrant").KmsGrant;
export const KmsGrant: typeof import("./kmsGrant").KmsGrant = null as any;
utilities.lazyLoad(exports, ["KmsGrant"], () => require("./kmsGrant"));

export { KmsKeyArgs, KmsKeyState } from "./kmsKey";
export type KmsKey = import("./kmsKey").KmsKey;
export const KmsKey: typeof import("./kmsKey").KmsKey = null as any;
utilities.lazyLoad(exports, ["KmsKey"], () => require("./kmsKey"));

export { KmsKeyPolicyArgs, KmsKeyPolicyState } from "./kmsKeyPolicy";
export type KmsKeyPolicy = import("./kmsKeyPolicy").KmsKeyPolicy;
export const KmsKeyPolicy: typeof import("./kmsKeyPolicy").KmsKeyPolicy = null as any;
utilities.lazyLoad(exports, ["KmsKeyPolicy"], () => require("./kmsKeyPolicy"));

export { KmsReplicaExternalKeyArgs, KmsReplicaExternalKeyState } from "./kmsReplicaExternalKey";
export type KmsReplicaExternalKey = import("./kmsReplicaExternalKey").KmsReplicaExternalKey;
export const KmsReplicaExternalKey: typeof import("./kmsReplicaExternalKey").KmsReplicaExternalKey = null as any;
utilities.lazyLoad(exports, ["KmsReplicaExternalKey"], () => require("./kmsReplicaExternalKey"));

export { KmsReplicaKeyArgs, KmsReplicaKeyState } from "./kmsReplicaKey";
export type KmsReplicaKey = import("./kmsReplicaKey").KmsReplicaKey;
export const KmsReplicaKey: typeof import("./kmsReplicaKey").KmsReplicaKey = null as any;
utilities.lazyLoad(exports, ["KmsReplicaKey"], () => require("./kmsReplicaKey"));

export { LakeformationDataCellsFilterArgs, LakeformationDataCellsFilterState } from "./lakeformationDataCellsFilter";
export type LakeformationDataCellsFilter = import("./lakeformationDataCellsFilter").LakeformationDataCellsFilter;
export const LakeformationDataCellsFilter: typeof import("./lakeformationDataCellsFilter").LakeformationDataCellsFilter = null as any;
utilities.lazyLoad(exports, ["LakeformationDataCellsFilter"], () => require("./lakeformationDataCellsFilter"));

export { LakeformationDataLakeSettingsArgs, LakeformationDataLakeSettingsState } from "./lakeformationDataLakeSettings";
export type LakeformationDataLakeSettings = import("./lakeformationDataLakeSettings").LakeformationDataLakeSettings;
export const LakeformationDataLakeSettings: typeof import("./lakeformationDataLakeSettings").LakeformationDataLakeSettings = null as any;
utilities.lazyLoad(exports, ["LakeformationDataLakeSettings"], () => require("./lakeformationDataLakeSettings"));

export { LakeformationLfTagArgs, LakeformationLfTagState } from "./lakeformationLfTag";
export type LakeformationLfTag = import("./lakeformationLfTag").LakeformationLfTag;
export const LakeformationLfTag: typeof import("./lakeformationLfTag").LakeformationLfTag = null as any;
utilities.lazyLoad(exports, ["LakeformationLfTag"], () => require("./lakeformationLfTag"));

export { LakeformationPermissionsArgs, LakeformationPermissionsState } from "./lakeformationPermissions";
export type LakeformationPermissions = import("./lakeformationPermissions").LakeformationPermissions;
export const LakeformationPermissions: typeof import("./lakeformationPermissions").LakeformationPermissions = null as any;
utilities.lazyLoad(exports, ["LakeformationPermissions"], () => require("./lakeformationPermissions"));

export { LakeformationResourceArgs, LakeformationResourceState } from "./lakeformationResource";
export type LakeformationResource = import("./lakeformationResource").LakeformationResource;
export const LakeformationResource: typeof import("./lakeformationResource").LakeformationResource = null as any;
utilities.lazyLoad(exports, ["LakeformationResource"], () => require("./lakeformationResource"));

export { LakeformationResourceLfTagArgs, LakeformationResourceLfTagState } from "./lakeformationResourceLfTag";
export type LakeformationResourceLfTag = import("./lakeformationResourceLfTag").LakeformationResourceLfTag;
export const LakeformationResourceLfTag: typeof import("./lakeformationResourceLfTag").LakeformationResourceLfTag = null as any;
utilities.lazyLoad(exports, ["LakeformationResourceLfTag"], () => require("./lakeformationResourceLfTag"));

export { LakeformationResourceLfTagsArgs, LakeformationResourceLfTagsState } from "./lakeformationResourceLfTags";
export type LakeformationResourceLfTags = import("./lakeformationResourceLfTags").LakeformationResourceLfTags;
export const LakeformationResourceLfTags: typeof import("./lakeformationResourceLfTags").LakeformationResourceLfTags = null as any;
utilities.lazyLoad(exports, ["LakeformationResourceLfTags"], () => require("./lakeformationResourceLfTags"));

export { LambdaAliasArgs, LambdaAliasState } from "./lambdaAlias";
export type LambdaAlias = import("./lambdaAlias").LambdaAlias;
export const LambdaAlias: typeof import("./lambdaAlias").LambdaAlias = null as any;
utilities.lazyLoad(exports, ["LambdaAlias"], () => require("./lambdaAlias"));

export { LambdaCodeSigningConfigArgs, LambdaCodeSigningConfigState } from "./lambdaCodeSigningConfig";
export type LambdaCodeSigningConfig = import("./lambdaCodeSigningConfig").LambdaCodeSigningConfig;
export const LambdaCodeSigningConfig: typeof import("./lambdaCodeSigningConfig").LambdaCodeSigningConfig = null as any;
utilities.lazyLoad(exports, ["LambdaCodeSigningConfig"], () => require("./lambdaCodeSigningConfig"));

export { LambdaEventSourceMappingArgs, LambdaEventSourceMappingState } from "./lambdaEventSourceMapping";
export type LambdaEventSourceMapping = import("./lambdaEventSourceMapping").LambdaEventSourceMapping;
export const LambdaEventSourceMapping: typeof import("./lambdaEventSourceMapping").LambdaEventSourceMapping = null as any;
utilities.lazyLoad(exports, ["LambdaEventSourceMapping"], () => require("./lambdaEventSourceMapping"));

export { LambdaFunctionArgs, LambdaFunctionState } from "./lambdaFunction";
export type LambdaFunction = import("./lambdaFunction").LambdaFunction;
export const LambdaFunction: typeof import("./lambdaFunction").LambdaFunction = null as any;
utilities.lazyLoad(exports, ["LambdaFunction"], () => require("./lambdaFunction"));

export { LambdaFunctionEventInvokeConfigArgs, LambdaFunctionEventInvokeConfigState } from "./lambdaFunctionEventInvokeConfig";
export type LambdaFunctionEventInvokeConfig = import("./lambdaFunctionEventInvokeConfig").LambdaFunctionEventInvokeConfig;
export const LambdaFunctionEventInvokeConfig: typeof import("./lambdaFunctionEventInvokeConfig").LambdaFunctionEventInvokeConfig = null as any;
utilities.lazyLoad(exports, ["LambdaFunctionEventInvokeConfig"], () => require("./lambdaFunctionEventInvokeConfig"));

export { LambdaFunctionUrlArgs, LambdaFunctionUrlState } from "./lambdaFunctionUrl";
export type LambdaFunctionUrl = import("./lambdaFunctionUrl").LambdaFunctionUrl;
export const LambdaFunctionUrl: typeof import("./lambdaFunctionUrl").LambdaFunctionUrl = null as any;
utilities.lazyLoad(exports, ["LambdaFunctionUrl"], () => require("./lambdaFunctionUrl"));

export { LambdaInvocationArgs, LambdaInvocationState } from "./lambdaInvocation";
export type LambdaInvocation = import("./lambdaInvocation").LambdaInvocation;
export const LambdaInvocation: typeof import("./lambdaInvocation").LambdaInvocation = null as any;
utilities.lazyLoad(exports, ["LambdaInvocation"], () => require("./lambdaInvocation"));

export { LambdaLayerVersionArgs, LambdaLayerVersionState } from "./lambdaLayerVersion";
export type LambdaLayerVersion = import("./lambdaLayerVersion").LambdaLayerVersion;
export const LambdaLayerVersion: typeof import("./lambdaLayerVersion").LambdaLayerVersion = null as any;
utilities.lazyLoad(exports, ["LambdaLayerVersion"], () => require("./lambdaLayerVersion"));

export { LambdaLayerVersionPermissionArgs, LambdaLayerVersionPermissionState } from "./lambdaLayerVersionPermission";
export type LambdaLayerVersionPermission = import("./lambdaLayerVersionPermission").LambdaLayerVersionPermission;
export const LambdaLayerVersionPermission: typeof import("./lambdaLayerVersionPermission").LambdaLayerVersionPermission = null as any;
utilities.lazyLoad(exports, ["LambdaLayerVersionPermission"], () => require("./lambdaLayerVersionPermission"));

export { LambdaPermissionArgs, LambdaPermissionState } from "./lambdaPermission";
export type LambdaPermission = import("./lambdaPermission").LambdaPermission;
export const LambdaPermission: typeof import("./lambdaPermission").LambdaPermission = null as any;
utilities.lazyLoad(exports, ["LambdaPermission"], () => require("./lambdaPermission"));

export { LambdaProvisionedConcurrencyConfigArgs, LambdaProvisionedConcurrencyConfigState } from "./lambdaProvisionedConcurrencyConfig";
export type LambdaProvisionedConcurrencyConfig = import("./lambdaProvisionedConcurrencyConfig").LambdaProvisionedConcurrencyConfig;
export const LambdaProvisionedConcurrencyConfig: typeof import("./lambdaProvisionedConcurrencyConfig").LambdaProvisionedConcurrencyConfig = null as any;
utilities.lazyLoad(exports, ["LambdaProvisionedConcurrencyConfig"], () => require("./lambdaProvisionedConcurrencyConfig"));

export { LambdaRuntimeManagementConfigArgs, LambdaRuntimeManagementConfigState } from "./lambdaRuntimeManagementConfig";
export type LambdaRuntimeManagementConfig = import("./lambdaRuntimeManagementConfig").LambdaRuntimeManagementConfig;
export const LambdaRuntimeManagementConfig: typeof import("./lambdaRuntimeManagementConfig").LambdaRuntimeManagementConfig = null as any;
utilities.lazyLoad(exports, ["LambdaRuntimeManagementConfig"], () => require("./lambdaRuntimeManagementConfig"));

export { LaunchConfigurationArgs, LaunchConfigurationState } from "./launchConfiguration";
export type LaunchConfiguration = import("./launchConfiguration").LaunchConfiguration;
export const LaunchConfiguration: typeof import("./launchConfiguration").LaunchConfiguration = null as any;
utilities.lazyLoad(exports, ["LaunchConfiguration"], () => require("./launchConfiguration"));

export { LaunchTemplateArgs, LaunchTemplateState } from "./launchTemplate";
export type LaunchTemplate = import("./launchTemplate").LaunchTemplate;
export const LaunchTemplate: typeof import("./launchTemplate").LaunchTemplate = null as any;
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));

export { LbArgs, LbState } from "./lb";
export type Lb = import("./lb").Lb;
export const Lb: typeof import("./lb").Lb = null as any;
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));

export { LbCookieStickinessPolicyArgs, LbCookieStickinessPolicyState } from "./lbCookieStickinessPolicy";
export type LbCookieStickinessPolicy = import("./lbCookieStickinessPolicy").LbCookieStickinessPolicy;
export const LbCookieStickinessPolicy: typeof import("./lbCookieStickinessPolicy").LbCookieStickinessPolicy = null as any;
utilities.lazyLoad(exports, ["LbCookieStickinessPolicy"], () => require("./lbCookieStickinessPolicy"));

export { LbListenerArgs, LbListenerState } from "./lbListener";
export type LbListener = import("./lbListener").LbListener;
export const LbListener: typeof import("./lbListener").LbListener = null as any;
utilities.lazyLoad(exports, ["LbListener"], () => require("./lbListener"));

export { LbListenerCertificateArgs, LbListenerCertificateState } from "./lbListenerCertificate";
export type LbListenerCertificate = import("./lbListenerCertificate").LbListenerCertificate;
export const LbListenerCertificate: typeof import("./lbListenerCertificate").LbListenerCertificate = null as any;
utilities.lazyLoad(exports, ["LbListenerCertificate"], () => require("./lbListenerCertificate"));

export { LbListenerRuleArgs, LbListenerRuleState } from "./lbListenerRule";
export type LbListenerRule = import("./lbListenerRule").LbListenerRule;
export const LbListenerRule: typeof import("./lbListenerRule").LbListenerRule = null as any;
utilities.lazyLoad(exports, ["LbListenerRule"], () => require("./lbListenerRule"));

export { LbSslNegotiationPolicyArgs, LbSslNegotiationPolicyState } from "./lbSslNegotiationPolicy";
export type LbSslNegotiationPolicy = import("./lbSslNegotiationPolicy").LbSslNegotiationPolicy;
export const LbSslNegotiationPolicy: typeof import("./lbSslNegotiationPolicy").LbSslNegotiationPolicy = null as any;
utilities.lazyLoad(exports, ["LbSslNegotiationPolicy"], () => require("./lbSslNegotiationPolicy"));

export { LbTargetGroupArgs, LbTargetGroupState } from "./lbTargetGroup";
export type LbTargetGroup = import("./lbTargetGroup").LbTargetGroup;
export const LbTargetGroup: typeof import("./lbTargetGroup").LbTargetGroup = null as any;
utilities.lazyLoad(exports, ["LbTargetGroup"], () => require("./lbTargetGroup"));

export { LbTargetGroupAttachmentArgs, LbTargetGroupAttachmentState } from "./lbTargetGroupAttachment";
export type LbTargetGroupAttachment = import("./lbTargetGroupAttachment").LbTargetGroupAttachment;
export const LbTargetGroupAttachment: typeof import("./lbTargetGroupAttachment").LbTargetGroupAttachment = null as any;
utilities.lazyLoad(exports, ["LbTargetGroupAttachment"], () => require("./lbTargetGroupAttachment"));

export { LbTrustStoreArgs, LbTrustStoreState } from "./lbTrustStore";
export type LbTrustStore = import("./lbTrustStore").LbTrustStore;
export const LbTrustStore: typeof import("./lbTrustStore").LbTrustStore = null as any;
utilities.lazyLoad(exports, ["LbTrustStore"], () => require("./lbTrustStore"));

export { LbTrustStoreRevocationArgs, LbTrustStoreRevocationState } from "./lbTrustStoreRevocation";
export type LbTrustStoreRevocation = import("./lbTrustStoreRevocation").LbTrustStoreRevocation;
export const LbTrustStoreRevocation: typeof import("./lbTrustStoreRevocation").LbTrustStoreRevocation = null as any;
utilities.lazyLoad(exports, ["LbTrustStoreRevocation"], () => require("./lbTrustStoreRevocation"));

export { LexBotArgs, LexBotState } from "./lexBot";
export type LexBot = import("./lexBot").LexBot;
export const LexBot: typeof import("./lexBot").LexBot = null as any;
utilities.lazyLoad(exports, ["LexBot"], () => require("./lexBot"));

export { LexBotAliasArgs, LexBotAliasState } from "./lexBotAlias";
export type LexBotAlias = import("./lexBotAlias").LexBotAlias;
export const LexBotAlias: typeof import("./lexBotAlias").LexBotAlias = null as any;
utilities.lazyLoad(exports, ["LexBotAlias"], () => require("./lexBotAlias"));

export { LexIntentArgs, LexIntentState } from "./lexIntent";
export type LexIntent = import("./lexIntent").LexIntent;
export const LexIntent: typeof import("./lexIntent").LexIntent = null as any;
utilities.lazyLoad(exports, ["LexIntent"], () => require("./lexIntent"));

export { LexSlotTypeArgs, LexSlotTypeState } from "./lexSlotType";
export type LexSlotType = import("./lexSlotType").LexSlotType;
export const LexSlotType: typeof import("./lexSlotType").LexSlotType = null as any;
utilities.lazyLoad(exports, ["LexSlotType"], () => require("./lexSlotType"));

export { Lexv2modelsBotArgs, Lexv2modelsBotState } from "./lexv2modelsBot";
export type Lexv2modelsBot = import("./lexv2modelsBot").Lexv2modelsBot;
export const Lexv2modelsBot: typeof import("./lexv2modelsBot").Lexv2modelsBot = null as any;
utilities.lazyLoad(exports, ["Lexv2modelsBot"], () => require("./lexv2modelsBot"));

export { Lexv2modelsBotLocaleArgs, Lexv2modelsBotLocaleState } from "./lexv2modelsBotLocale";
export type Lexv2modelsBotLocale = import("./lexv2modelsBotLocale").Lexv2modelsBotLocale;
export const Lexv2modelsBotLocale: typeof import("./lexv2modelsBotLocale").Lexv2modelsBotLocale = null as any;
utilities.lazyLoad(exports, ["Lexv2modelsBotLocale"], () => require("./lexv2modelsBotLocale"));

export { Lexv2modelsBotVersionArgs, Lexv2modelsBotVersionState } from "./lexv2modelsBotVersion";
export type Lexv2modelsBotVersion = import("./lexv2modelsBotVersion").Lexv2modelsBotVersion;
export const Lexv2modelsBotVersion: typeof import("./lexv2modelsBotVersion").Lexv2modelsBotVersion = null as any;
utilities.lazyLoad(exports, ["Lexv2modelsBotVersion"], () => require("./lexv2modelsBotVersion"));

export { Lexv2modelsIntentArgs, Lexv2modelsIntentState } from "./lexv2modelsIntent";
export type Lexv2modelsIntent = import("./lexv2modelsIntent").Lexv2modelsIntent;
export const Lexv2modelsIntent: typeof import("./lexv2modelsIntent").Lexv2modelsIntent = null as any;
utilities.lazyLoad(exports, ["Lexv2modelsIntent"], () => require("./lexv2modelsIntent"));

export { Lexv2modelsSlotArgs, Lexv2modelsSlotState } from "./lexv2modelsSlot";
export type Lexv2modelsSlot = import("./lexv2modelsSlot").Lexv2modelsSlot;
export const Lexv2modelsSlot: typeof import("./lexv2modelsSlot").Lexv2modelsSlot = null as any;
utilities.lazyLoad(exports, ["Lexv2modelsSlot"], () => require("./lexv2modelsSlot"));

export { Lexv2modelsSlotTypeArgs, Lexv2modelsSlotTypeState } from "./lexv2modelsSlotType";
export type Lexv2modelsSlotType = import("./lexv2modelsSlotType").Lexv2modelsSlotType;
export const Lexv2modelsSlotType: typeof import("./lexv2modelsSlotType").Lexv2modelsSlotType = null as any;
utilities.lazyLoad(exports, ["Lexv2modelsSlotType"], () => require("./lexv2modelsSlotType"));

export { LicensemanagerAssociationArgs, LicensemanagerAssociationState } from "./licensemanagerAssociation";
export type LicensemanagerAssociation = import("./licensemanagerAssociation").LicensemanagerAssociation;
export const LicensemanagerAssociation: typeof import("./licensemanagerAssociation").LicensemanagerAssociation = null as any;
utilities.lazyLoad(exports, ["LicensemanagerAssociation"], () => require("./licensemanagerAssociation"));

export { LicensemanagerGrantArgs, LicensemanagerGrantState } from "./licensemanagerGrant";
export type LicensemanagerGrant = import("./licensemanagerGrant").LicensemanagerGrant;
export const LicensemanagerGrant: typeof import("./licensemanagerGrant").LicensemanagerGrant = null as any;
utilities.lazyLoad(exports, ["LicensemanagerGrant"], () => require("./licensemanagerGrant"));

export { LicensemanagerGrantAccepterArgs, LicensemanagerGrantAccepterState } from "./licensemanagerGrantAccepter";
export type LicensemanagerGrantAccepter = import("./licensemanagerGrantAccepter").LicensemanagerGrantAccepter;
export const LicensemanagerGrantAccepter: typeof import("./licensemanagerGrantAccepter").LicensemanagerGrantAccepter = null as any;
utilities.lazyLoad(exports, ["LicensemanagerGrantAccepter"], () => require("./licensemanagerGrantAccepter"));

export { LicensemanagerLicenseConfigurationArgs, LicensemanagerLicenseConfigurationState } from "./licensemanagerLicenseConfiguration";
export type LicensemanagerLicenseConfiguration = import("./licensemanagerLicenseConfiguration").LicensemanagerLicenseConfiguration;
export const LicensemanagerLicenseConfiguration: typeof import("./licensemanagerLicenseConfiguration").LicensemanagerLicenseConfiguration = null as any;
utilities.lazyLoad(exports, ["LicensemanagerLicenseConfiguration"], () => require("./licensemanagerLicenseConfiguration"));

export { LightsailBucketArgs, LightsailBucketState } from "./lightsailBucket";
export type LightsailBucket = import("./lightsailBucket").LightsailBucket;
export const LightsailBucket: typeof import("./lightsailBucket").LightsailBucket = null as any;
utilities.lazyLoad(exports, ["LightsailBucket"], () => require("./lightsailBucket"));

export { LightsailBucketAccessKeyArgs, LightsailBucketAccessKeyState } from "./lightsailBucketAccessKey";
export type LightsailBucketAccessKey = import("./lightsailBucketAccessKey").LightsailBucketAccessKey;
export const LightsailBucketAccessKey: typeof import("./lightsailBucketAccessKey").LightsailBucketAccessKey = null as any;
utilities.lazyLoad(exports, ["LightsailBucketAccessKey"], () => require("./lightsailBucketAccessKey"));

export { LightsailBucketResourceAccessArgs, LightsailBucketResourceAccessState } from "./lightsailBucketResourceAccess";
export type LightsailBucketResourceAccess = import("./lightsailBucketResourceAccess").LightsailBucketResourceAccess;
export const LightsailBucketResourceAccess: typeof import("./lightsailBucketResourceAccess").LightsailBucketResourceAccess = null as any;
utilities.lazyLoad(exports, ["LightsailBucketResourceAccess"], () => require("./lightsailBucketResourceAccess"));

export { LightsailCertificateArgs, LightsailCertificateState } from "./lightsailCertificate";
export type LightsailCertificate = import("./lightsailCertificate").LightsailCertificate;
export const LightsailCertificate: typeof import("./lightsailCertificate").LightsailCertificate = null as any;
utilities.lazyLoad(exports, ["LightsailCertificate"], () => require("./lightsailCertificate"));

export { LightsailContainerServiceArgs, LightsailContainerServiceState } from "./lightsailContainerService";
export type LightsailContainerService = import("./lightsailContainerService").LightsailContainerService;
export const LightsailContainerService: typeof import("./lightsailContainerService").LightsailContainerService = null as any;
utilities.lazyLoad(exports, ["LightsailContainerService"], () => require("./lightsailContainerService"));

export { LightsailContainerServiceDeploymentVersionArgs, LightsailContainerServiceDeploymentVersionState } from "./lightsailContainerServiceDeploymentVersion";
export type LightsailContainerServiceDeploymentVersion = import("./lightsailContainerServiceDeploymentVersion").LightsailContainerServiceDeploymentVersion;
export const LightsailContainerServiceDeploymentVersion: typeof import("./lightsailContainerServiceDeploymentVersion").LightsailContainerServiceDeploymentVersion = null as any;
utilities.lazyLoad(exports, ["LightsailContainerServiceDeploymentVersion"], () => require("./lightsailContainerServiceDeploymentVersion"));

export { LightsailDatabaseArgs, LightsailDatabaseState } from "./lightsailDatabase";
export type LightsailDatabase = import("./lightsailDatabase").LightsailDatabase;
export const LightsailDatabase: typeof import("./lightsailDatabase").LightsailDatabase = null as any;
utilities.lazyLoad(exports, ["LightsailDatabase"], () => require("./lightsailDatabase"));

export { LightsailDiskArgs, LightsailDiskState } from "./lightsailDisk";
export type LightsailDisk = import("./lightsailDisk").LightsailDisk;
export const LightsailDisk: typeof import("./lightsailDisk").LightsailDisk = null as any;
utilities.lazyLoad(exports, ["LightsailDisk"], () => require("./lightsailDisk"));

export { LightsailDiskAttachmentArgs, LightsailDiskAttachmentState } from "./lightsailDiskAttachment";
export type LightsailDiskAttachment = import("./lightsailDiskAttachment").LightsailDiskAttachment;
export const LightsailDiskAttachment: typeof import("./lightsailDiskAttachment").LightsailDiskAttachment = null as any;
utilities.lazyLoad(exports, ["LightsailDiskAttachment"], () => require("./lightsailDiskAttachment"));

export { LightsailDistributionArgs, LightsailDistributionState } from "./lightsailDistribution";
export type LightsailDistribution = import("./lightsailDistribution").LightsailDistribution;
export const LightsailDistribution: typeof import("./lightsailDistribution").LightsailDistribution = null as any;
utilities.lazyLoad(exports, ["LightsailDistribution"], () => require("./lightsailDistribution"));

export { LightsailDomainArgs, LightsailDomainState } from "./lightsailDomain";
export type LightsailDomain = import("./lightsailDomain").LightsailDomain;
export const LightsailDomain: typeof import("./lightsailDomain").LightsailDomain = null as any;
utilities.lazyLoad(exports, ["LightsailDomain"], () => require("./lightsailDomain"));

export { LightsailDomainEntryArgs, LightsailDomainEntryState } from "./lightsailDomainEntry";
export type LightsailDomainEntry = import("./lightsailDomainEntry").LightsailDomainEntry;
export const LightsailDomainEntry: typeof import("./lightsailDomainEntry").LightsailDomainEntry = null as any;
utilities.lazyLoad(exports, ["LightsailDomainEntry"], () => require("./lightsailDomainEntry"));

export { LightsailInstanceArgs, LightsailInstanceState } from "./lightsailInstance";
export type LightsailInstance = import("./lightsailInstance").LightsailInstance;
export const LightsailInstance: typeof import("./lightsailInstance").LightsailInstance = null as any;
utilities.lazyLoad(exports, ["LightsailInstance"], () => require("./lightsailInstance"));

export { LightsailInstancePublicPortsArgs, LightsailInstancePublicPortsState } from "./lightsailInstancePublicPorts";
export type LightsailInstancePublicPorts = import("./lightsailInstancePublicPorts").LightsailInstancePublicPorts;
export const LightsailInstancePublicPorts: typeof import("./lightsailInstancePublicPorts").LightsailInstancePublicPorts = null as any;
utilities.lazyLoad(exports, ["LightsailInstancePublicPorts"], () => require("./lightsailInstancePublicPorts"));

export { LightsailKeyPairArgs, LightsailKeyPairState } from "./lightsailKeyPair";
export type LightsailKeyPair = import("./lightsailKeyPair").LightsailKeyPair;
export const LightsailKeyPair: typeof import("./lightsailKeyPair").LightsailKeyPair = null as any;
utilities.lazyLoad(exports, ["LightsailKeyPair"], () => require("./lightsailKeyPair"));

export { LightsailLbArgs, LightsailLbState } from "./lightsailLb";
export type LightsailLb = import("./lightsailLb").LightsailLb;
export const LightsailLb: typeof import("./lightsailLb").LightsailLb = null as any;
utilities.lazyLoad(exports, ["LightsailLb"], () => require("./lightsailLb"));

export { LightsailLbAttachmentArgs, LightsailLbAttachmentState } from "./lightsailLbAttachment";
export type LightsailLbAttachment = import("./lightsailLbAttachment").LightsailLbAttachment;
export const LightsailLbAttachment: typeof import("./lightsailLbAttachment").LightsailLbAttachment = null as any;
utilities.lazyLoad(exports, ["LightsailLbAttachment"], () => require("./lightsailLbAttachment"));

export { LightsailLbCertificateArgs, LightsailLbCertificateState } from "./lightsailLbCertificate";
export type LightsailLbCertificate = import("./lightsailLbCertificate").LightsailLbCertificate;
export const LightsailLbCertificate: typeof import("./lightsailLbCertificate").LightsailLbCertificate = null as any;
utilities.lazyLoad(exports, ["LightsailLbCertificate"], () => require("./lightsailLbCertificate"));

export { LightsailLbCertificateAttachmentArgs, LightsailLbCertificateAttachmentState } from "./lightsailLbCertificateAttachment";
export type LightsailLbCertificateAttachment = import("./lightsailLbCertificateAttachment").LightsailLbCertificateAttachment;
export const LightsailLbCertificateAttachment: typeof import("./lightsailLbCertificateAttachment").LightsailLbCertificateAttachment = null as any;
utilities.lazyLoad(exports, ["LightsailLbCertificateAttachment"], () => require("./lightsailLbCertificateAttachment"));

export { LightsailLbHttpsRedirectionPolicyArgs, LightsailLbHttpsRedirectionPolicyState } from "./lightsailLbHttpsRedirectionPolicy";
export type LightsailLbHttpsRedirectionPolicy = import("./lightsailLbHttpsRedirectionPolicy").LightsailLbHttpsRedirectionPolicy;
export const LightsailLbHttpsRedirectionPolicy: typeof import("./lightsailLbHttpsRedirectionPolicy").LightsailLbHttpsRedirectionPolicy = null as any;
utilities.lazyLoad(exports, ["LightsailLbHttpsRedirectionPolicy"], () => require("./lightsailLbHttpsRedirectionPolicy"));

export { LightsailLbStickinessPolicyArgs, LightsailLbStickinessPolicyState } from "./lightsailLbStickinessPolicy";
export type LightsailLbStickinessPolicy = import("./lightsailLbStickinessPolicy").LightsailLbStickinessPolicy;
export const LightsailLbStickinessPolicy: typeof import("./lightsailLbStickinessPolicy").LightsailLbStickinessPolicy = null as any;
utilities.lazyLoad(exports, ["LightsailLbStickinessPolicy"], () => require("./lightsailLbStickinessPolicy"));

export { LightsailStaticIpArgs, LightsailStaticIpState } from "./lightsailStaticIp";
export type LightsailStaticIp = import("./lightsailStaticIp").LightsailStaticIp;
export const LightsailStaticIp: typeof import("./lightsailStaticIp").LightsailStaticIp = null as any;
utilities.lazyLoad(exports, ["LightsailStaticIp"], () => require("./lightsailStaticIp"));

export { LightsailStaticIpAttachmentArgs, LightsailStaticIpAttachmentState } from "./lightsailStaticIpAttachment";
export type LightsailStaticIpAttachment = import("./lightsailStaticIpAttachment").LightsailStaticIpAttachment;
export const LightsailStaticIpAttachment: typeof import("./lightsailStaticIpAttachment").LightsailStaticIpAttachment = null as any;
utilities.lazyLoad(exports, ["LightsailStaticIpAttachment"], () => require("./lightsailStaticIpAttachment"));

export { LoadBalancerBackendServerPolicyArgs, LoadBalancerBackendServerPolicyState } from "./loadBalancerBackendServerPolicy";
export type LoadBalancerBackendServerPolicy = import("./loadBalancerBackendServerPolicy").LoadBalancerBackendServerPolicy;
export const LoadBalancerBackendServerPolicy: typeof import("./loadBalancerBackendServerPolicy").LoadBalancerBackendServerPolicy = null as any;
utilities.lazyLoad(exports, ["LoadBalancerBackendServerPolicy"], () => require("./loadBalancerBackendServerPolicy"));

export { LoadBalancerListenerPolicyArgs, LoadBalancerListenerPolicyState } from "./loadBalancerListenerPolicy";
export type LoadBalancerListenerPolicy = import("./loadBalancerListenerPolicy").LoadBalancerListenerPolicy;
export const LoadBalancerListenerPolicy: typeof import("./loadBalancerListenerPolicy").LoadBalancerListenerPolicy = null as any;
utilities.lazyLoad(exports, ["LoadBalancerListenerPolicy"], () => require("./loadBalancerListenerPolicy"));

export { LoadBalancerPolicyArgs, LoadBalancerPolicyState } from "./loadBalancerPolicy";
export type LoadBalancerPolicy = import("./loadBalancerPolicy").LoadBalancerPolicy;
export const LoadBalancerPolicy: typeof import("./loadBalancerPolicy").LoadBalancerPolicy = null as any;
utilities.lazyLoad(exports, ["LoadBalancerPolicy"], () => require("./loadBalancerPolicy"));

export { LocationGeofenceCollectionArgs, LocationGeofenceCollectionState } from "./locationGeofenceCollection";
export type LocationGeofenceCollection = import("./locationGeofenceCollection").LocationGeofenceCollection;
export const LocationGeofenceCollection: typeof import("./locationGeofenceCollection").LocationGeofenceCollection = null as any;
utilities.lazyLoad(exports, ["LocationGeofenceCollection"], () => require("./locationGeofenceCollection"));

export { LocationMapArgs, LocationMapState } from "./locationMap";
export type LocationMap = import("./locationMap").LocationMap;
export const LocationMap: typeof import("./locationMap").LocationMap = null as any;
utilities.lazyLoad(exports, ["LocationMap"], () => require("./locationMap"));

export { LocationPlaceIndexArgs, LocationPlaceIndexState } from "./locationPlaceIndex";
export type LocationPlaceIndex = import("./locationPlaceIndex").LocationPlaceIndex;
export const LocationPlaceIndex: typeof import("./locationPlaceIndex").LocationPlaceIndex = null as any;
utilities.lazyLoad(exports, ["LocationPlaceIndex"], () => require("./locationPlaceIndex"));

export { LocationRouteCalculatorArgs, LocationRouteCalculatorState } from "./locationRouteCalculator";
export type LocationRouteCalculator = import("./locationRouteCalculator").LocationRouteCalculator;
export const LocationRouteCalculator: typeof import("./locationRouteCalculator").LocationRouteCalculator = null as any;
utilities.lazyLoad(exports, ["LocationRouteCalculator"], () => require("./locationRouteCalculator"));

export { LocationTrackerArgs, LocationTrackerState } from "./locationTracker";
export type LocationTracker = import("./locationTracker").LocationTracker;
export const LocationTracker: typeof import("./locationTracker").LocationTracker = null as any;
utilities.lazyLoad(exports, ["LocationTracker"], () => require("./locationTracker"));

export { LocationTrackerAssociationArgs, LocationTrackerAssociationState } from "./locationTrackerAssociation";
export type LocationTrackerAssociation = import("./locationTrackerAssociation").LocationTrackerAssociation;
export const LocationTrackerAssociation: typeof import("./locationTrackerAssociation").LocationTrackerAssociation = null as any;
utilities.lazyLoad(exports, ["LocationTrackerAssociation"], () => require("./locationTrackerAssociation"));

export { M2ApplicationArgs, M2ApplicationState } from "./m2application";
export type M2Application = import("./m2application").M2Application;
export const M2Application: typeof import("./m2application").M2Application = null as any;
utilities.lazyLoad(exports, ["M2Application"], () => require("./m2application"));

export { M2DeploymentArgs, M2DeploymentState } from "./m2deployment";
export type M2Deployment = import("./m2deployment").M2Deployment;
export const M2Deployment: typeof import("./m2deployment").M2Deployment = null as any;
utilities.lazyLoad(exports, ["M2Deployment"], () => require("./m2deployment"));

export { M2EnvironmentArgs, M2EnvironmentState } from "./m2environment";
export type M2Environment = import("./m2environment").M2Environment;
export const M2Environment: typeof import("./m2environment").M2Environment = null as any;
utilities.lazyLoad(exports, ["M2Environment"], () => require("./m2environment"));

export { Macie2AccountArgs, Macie2AccountState } from "./macie2Account";
export type Macie2Account = import("./macie2Account").Macie2Account;
export const Macie2Account: typeof import("./macie2Account").Macie2Account = null as any;
utilities.lazyLoad(exports, ["Macie2Account"], () => require("./macie2Account"));

export { Macie2ClassificationExportConfigurationArgs, Macie2ClassificationExportConfigurationState } from "./macie2ClassificationExportConfiguration";
export type Macie2ClassificationExportConfiguration = import("./macie2ClassificationExportConfiguration").Macie2ClassificationExportConfiguration;
export const Macie2ClassificationExportConfiguration: typeof import("./macie2ClassificationExportConfiguration").Macie2ClassificationExportConfiguration = null as any;
utilities.lazyLoad(exports, ["Macie2ClassificationExportConfiguration"], () => require("./macie2ClassificationExportConfiguration"));

export { Macie2ClassificationJobArgs, Macie2ClassificationJobState } from "./macie2ClassificationJob";
export type Macie2ClassificationJob = import("./macie2ClassificationJob").Macie2ClassificationJob;
export const Macie2ClassificationJob: typeof import("./macie2ClassificationJob").Macie2ClassificationJob = null as any;
utilities.lazyLoad(exports, ["Macie2ClassificationJob"], () => require("./macie2ClassificationJob"));

export { Macie2CustomDataIdentifierArgs, Macie2CustomDataIdentifierState } from "./macie2CustomDataIdentifier";
export type Macie2CustomDataIdentifier = import("./macie2CustomDataIdentifier").Macie2CustomDataIdentifier;
export const Macie2CustomDataIdentifier: typeof import("./macie2CustomDataIdentifier").Macie2CustomDataIdentifier = null as any;
utilities.lazyLoad(exports, ["Macie2CustomDataIdentifier"], () => require("./macie2CustomDataIdentifier"));

export { Macie2FindingsFilterArgs, Macie2FindingsFilterState } from "./macie2FindingsFilter";
export type Macie2FindingsFilter = import("./macie2FindingsFilter").Macie2FindingsFilter;
export const Macie2FindingsFilter: typeof import("./macie2FindingsFilter").Macie2FindingsFilter = null as any;
utilities.lazyLoad(exports, ["Macie2FindingsFilter"], () => require("./macie2FindingsFilter"));

export { Macie2InvitationAccepterArgs, Macie2InvitationAccepterState } from "./macie2InvitationAccepter";
export type Macie2InvitationAccepter = import("./macie2InvitationAccepter").Macie2InvitationAccepter;
export const Macie2InvitationAccepter: typeof import("./macie2InvitationAccepter").Macie2InvitationAccepter = null as any;
utilities.lazyLoad(exports, ["Macie2InvitationAccepter"], () => require("./macie2InvitationAccepter"));

export { Macie2MemberArgs, Macie2MemberState } from "./macie2Member";
export type Macie2Member = import("./macie2Member").Macie2Member;
export const Macie2Member: typeof import("./macie2Member").Macie2Member = null as any;
utilities.lazyLoad(exports, ["Macie2Member"], () => require("./macie2Member"));

export { Macie2OrganizationAdminAccountArgs, Macie2OrganizationAdminAccountState } from "./macie2OrganizationAdminAccount";
export type Macie2OrganizationAdminAccount = import("./macie2OrganizationAdminAccount").Macie2OrganizationAdminAccount;
export const Macie2OrganizationAdminAccount: typeof import("./macie2OrganizationAdminAccount").Macie2OrganizationAdminAccount = null as any;
utilities.lazyLoad(exports, ["Macie2OrganizationAdminAccount"], () => require("./macie2OrganizationAdminAccount"));

export { MainRouteTableAssociationArgs, MainRouteTableAssociationState } from "./mainRouteTableAssociation";
export type MainRouteTableAssociation = import("./mainRouteTableAssociation").MainRouteTableAssociation;
export const MainRouteTableAssociation: typeof import("./mainRouteTableAssociation").MainRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["MainRouteTableAssociation"], () => require("./mainRouteTableAssociation"));

export { MediaConvertQueueArgs, MediaConvertQueueState } from "./mediaConvertQueue";
export type MediaConvertQueue = import("./mediaConvertQueue").MediaConvertQueue;
export const MediaConvertQueue: typeof import("./mediaConvertQueue").MediaConvertQueue = null as any;
utilities.lazyLoad(exports, ["MediaConvertQueue"], () => require("./mediaConvertQueue"));

export { MediaPackageChannelArgs, MediaPackageChannelState } from "./mediaPackageChannel";
export type MediaPackageChannel = import("./mediaPackageChannel").MediaPackageChannel;
export const MediaPackageChannel: typeof import("./mediaPackageChannel").MediaPackageChannel = null as any;
utilities.lazyLoad(exports, ["MediaPackageChannel"], () => require("./mediaPackageChannel"));

export { MediaStoreContainerArgs, MediaStoreContainerState } from "./mediaStoreContainer";
export type MediaStoreContainer = import("./mediaStoreContainer").MediaStoreContainer;
export const MediaStoreContainer: typeof import("./mediaStoreContainer").MediaStoreContainer = null as any;
utilities.lazyLoad(exports, ["MediaStoreContainer"], () => require("./mediaStoreContainer"));

export { MediaStoreContainerPolicyArgs, MediaStoreContainerPolicyState } from "./mediaStoreContainerPolicy";
export type MediaStoreContainerPolicy = import("./mediaStoreContainerPolicy").MediaStoreContainerPolicy;
export const MediaStoreContainerPolicy: typeof import("./mediaStoreContainerPolicy").MediaStoreContainerPolicy = null as any;
utilities.lazyLoad(exports, ["MediaStoreContainerPolicy"], () => require("./mediaStoreContainerPolicy"));

export { MedialiveChannelArgs, MedialiveChannelState } from "./medialiveChannel";
export type MedialiveChannel = import("./medialiveChannel").MedialiveChannel;
export const MedialiveChannel: typeof import("./medialiveChannel").MedialiveChannel = null as any;
utilities.lazyLoad(exports, ["MedialiveChannel"], () => require("./medialiveChannel"));

export { MedialiveInputArgs, MedialiveInputState } from "./medialiveInput";
export type MedialiveInput = import("./medialiveInput").MedialiveInput;
export const MedialiveInput: typeof import("./medialiveInput").MedialiveInput = null as any;
utilities.lazyLoad(exports, ["MedialiveInput"], () => require("./medialiveInput"));

export { MedialiveInputSecurityGroupArgs, MedialiveInputSecurityGroupState } from "./medialiveInputSecurityGroup";
export type MedialiveInputSecurityGroup = import("./medialiveInputSecurityGroup").MedialiveInputSecurityGroup;
export const MedialiveInputSecurityGroup: typeof import("./medialiveInputSecurityGroup").MedialiveInputSecurityGroup = null as any;
utilities.lazyLoad(exports, ["MedialiveInputSecurityGroup"], () => require("./medialiveInputSecurityGroup"));

export { MedialiveMultiplexArgs, MedialiveMultiplexState } from "./medialiveMultiplex";
export type MedialiveMultiplex = import("./medialiveMultiplex").MedialiveMultiplex;
export const MedialiveMultiplex: typeof import("./medialiveMultiplex").MedialiveMultiplex = null as any;
utilities.lazyLoad(exports, ["MedialiveMultiplex"], () => require("./medialiveMultiplex"));

export { MedialiveMultiplexProgramArgs, MedialiveMultiplexProgramState } from "./medialiveMultiplexProgram";
export type MedialiveMultiplexProgram = import("./medialiveMultiplexProgram").MedialiveMultiplexProgram;
export const MedialiveMultiplexProgram: typeof import("./medialiveMultiplexProgram").MedialiveMultiplexProgram = null as any;
utilities.lazyLoad(exports, ["MedialiveMultiplexProgram"], () => require("./medialiveMultiplexProgram"));

export { MemorydbAclArgs, MemorydbAclState } from "./memorydbAcl";
export type MemorydbAcl = import("./memorydbAcl").MemorydbAcl;
export const MemorydbAcl: typeof import("./memorydbAcl").MemorydbAcl = null as any;
utilities.lazyLoad(exports, ["MemorydbAcl"], () => require("./memorydbAcl"));

export { MemorydbClusterArgs, MemorydbClusterState } from "./memorydbCluster";
export type MemorydbCluster = import("./memorydbCluster").MemorydbCluster;
export const MemorydbCluster: typeof import("./memorydbCluster").MemorydbCluster = null as any;
utilities.lazyLoad(exports, ["MemorydbCluster"], () => require("./memorydbCluster"));

export { MemorydbParameterGroupArgs, MemorydbParameterGroupState } from "./memorydbParameterGroup";
export type MemorydbParameterGroup = import("./memorydbParameterGroup").MemorydbParameterGroup;
export const MemorydbParameterGroup: typeof import("./memorydbParameterGroup").MemorydbParameterGroup = null as any;
utilities.lazyLoad(exports, ["MemorydbParameterGroup"], () => require("./memorydbParameterGroup"));

export { MemorydbSnapshotArgs, MemorydbSnapshotState } from "./memorydbSnapshot";
export type MemorydbSnapshot = import("./memorydbSnapshot").MemorydbSnapshot;
export const MemorydbSnapshot: typeof import("./memorydbSnapshot").MemorydbSnapshot = null as any;
utilities.lazyLoad(exports, ["MemorydbSnapshot"], () => require("./memorydbSnapshot"));

export { MemorydbSubnetGroupArgs, MemorydbSubnetGroupState } from "./memorydbSubnetGroup";
export type MemorydbSubnetGroup = import("./memorydbSubnetGroup").MemorydbSubnetGroup;
export const MemorydbSubnetGroup: typeof import("./memorydbSubnetGroup").MemorydbSubnetGroup = null as any;
utilities.lazyLoad(exports, ["MemorydbSubnetGroup"], () => require("./memorydbSubnetGroup"));

export { MemorydbUserArgs, MemorydbUserState } from "./memorydbUser";
export type MemorydbUser = import("./memorydbUser").MemorydbUser;
export const MemorydbUser: typeof import("./memorydbUser").MemorydbUser = null as any;
utilities.lazyLoad(exports, ["MemorydbUser"], () => require("./memorydbUser"));

export { MqBrokerArgs, MqBrokerState } from "./mqBroker";
export type MqBroker = import("./mqBroker").MqBroker;
export const MqBroker: typeof import("./mqBroker").MqBroker = null as any;
utilities.lazyLoad(exports, ["MqBroker"], () => require("./mqBroker"));

export { MqConfigurationArgs, MqConfigurationState } from "./mqConfiguration";
export type MqConfiguration = import("./mqConfiguration").MqConfiguration;
export const MqConfiguration: typeof import("./mqConfiguration").MqConfiguration = null as any;
utilities.lazyLoad(exports, ["MqConfiguration"], () => require("./mqConfiguration"));

export { MskClusterArgs, MskClusterState } from "./mskCluster";
export type MskCluster = import("./mskCluster").MskCluster;
export const MskCluster: typeof import("./mskCluster").MskCluster = null as any;
utilities.lazyLoad(exports, ["MskCluster"], () => require("./mskCluster"));

export { MskClusterPolicyArgs, MskClusterPolicyState } from "./mskClusterPolicy";
export type MskClusterPolicy = import("./mskClusterPolicy").MskClusterPolicy;
export const MskClusterPolicy: typeof import("./mskClusterPolicy").MskClusterPolicy = null as any;
utilities.lazyLoad(exports, ["MskClusterPolicy"], () => require("./mskClusterPolicy"));

export { MskConfigurationArgs, MskConfigurationState } from "./mskConfiguration";
export type MskConfiguration = import("./mskConfiguration").MskConfiguration;
export const MskConfiguration: typeof import("./mskConfiguration").MskConfiguration = null as any;
utilities.lazyLoad(exports, ["MskConfiguration"], () => require("./mskConfiguration"));

export { MskReplicatorArgs, MskReplicatorState } from "./mskReplicator";
export type MskReplicator = import("./mskReplicator").MskReplicator;
export const MskReplicator: typeof import("./mskReplicator").MskReplicator = null as any;
utilities.lazyLoad(exports, ["MskReplicator"], () => require("./mskReplicator"));

export { MskScramSecretAssociationArgs, MskScramSecretAssociationState } from "./mskScramSecretAssociation";
export type MskScramSecretAssociation = import("./mskScramSecretAssociation").MskScramSecretAssociation;
export const MskScramSecretAssociation: typeof import("./mskScramSecretAssociation").MskScramSecretAssociation = null as any;
utilities.lazyLoad(exports, ["MskScramSecretAssociation"], () => require("./mskScramSecretAssociation"));

export { MskServerlessClusterArgs, MskServerlessClusterState } from "./mskServerlessCluster";
export type MskServerlessCluster = import("./mskServerlessCluster").MskServerlessCluster;
export const MskServerlessCluster: typeof import("./mskServerlessCluster").MskServerlessCluster = null as any;
utilities.lazyLoad(exports, ["MskServerlessCluster"], () => require("./mskServerlessCluster"));

export { MskVpcConnectionArgs, MskVpcConnectionState } from "./mskVpcConnection";
export type MskVpcConnection = import("./mskVpcConnection").MskVpcConnection;
export const MskVpcConnection: typeof import("./mskVpcConnection").MskVpcConnection = null as any;
utilities.lazyLoad(exports, ["MskVpcConnection"], () => require("./mskVpcConnection"));

export { MskconnectConnectorArgs, MskconnectConnectorState } from "./mskconnectConnector";
export type MskconnectConnector = import("./mskconnectConnector").MskconnectConnector;
export const MskconnectConnector: typeof import("./mskconnectConnector").MskconnectConnector = null as any;
utilities.lazyLoad(exports, ["MskconnectConnector"], () => require("./mskconnectConnector"));

export { MskconnectCustomPluginArgs, MskconnectCustomPluginState } from "./mskconnectCustomPlugin";
export type MskconnectCustomPlugin = import("./mskconnectCustomPlugin").MskconnectCustomPlugin;
export const MskconnectCustomPlugin: typeof import("./mskconnectCustomPlugin").MskconnectCustomPlugin = null as any;
utilities.lazyLoad(exports, ["MskconnectCustomPlugin"], () => require("./mskconnectCustomPlugin"));

export { MskconnectWorkerConfigurationArgs, MskconnectWorkerConfigurationState } from "./mskconnectWorkerConfiguration";
export type MskconnectWorkerConfiguration = import("./mskconnectWorkerConfiguration").MskconnectWorkerConfiguration;
export const MskconnectWorkerConfiguration: typeof import("./mskconnectWorkerConfiguration").MskconnectWorkerConfiguration = null as any;
utilities.lazyLoad(exports, ["MskconnectWorkerConfiguration"], () => require("./mskconnectWorkerConfiguration"));

export { MwaaEnvironmentArgs, MwaaEnvironmentState } from "./mwaaEnvironment";
export type MwaaEnvironment = import("./mwaaEnvironment").MwaaEnvironment;
export const MwaaEnvironment: typeof import("./mwaaEnvironment").MwaaEnvironment = null as any;
utilities.lazyLoad(exports, ["MwaaEnvironment"], () => require("./mwaaEnvironment"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NeptuneClusterArgs, NeptuneClusterState } from "./neptuneCluster";
export type NeptuneCluster = import("./neptuneCluster").NeptuneCluster;
export const NeptuneCluster: typeof import("./neptuneCluster").NeptuneCluster = null as any;
utilities.lazyLoad(exports, ["NeptuneCluster"], () => require("./neptuneCluster"));

export { NeptuneClusterEndpointArgs, NeptuneClusterEndpointState } from "./neptuneClusterEndpoint";
export type NeptuneClusterEndpoint = import("./neptuneClusterEndpoint").NeptuneClusterEndpoint;
export const NeptuneClusterEndpoint: typeof import("./neptuneClusterEndpoint").NeptuneClusterEndpoint = null as any;
utilities.lazyLoad(exports, ["NeptuneClusterEndpoint"], () => require("./neptuneClusterEndpoint"));

export { NeptuneClusterInstanceArgs, NeptuneClusterInstanceState } from "./neptuneClusterInstance";
export type NeptuneClusterInstance = import("./neptuneClusterInstance").NeptuneClusterInstance;
export const NeptuneClusterInstance: typeof import("./neptuneClusterInstance").NeptuneClusterInstance = null as any;
utilities.lazyLoad(exports, ["NeptuneClusterInstance"], () => require("./neptuneClusterInstance"));

export { NeptuneClusterParameterGroupArgs, NeptuneClusterParameterGroupState } from "./neptuneClusterParameterGroup";
export type NeptuneClusterParameterGroup = import("./neptuneClusterParameterGroup").NeptuneClusterParameterGroup;
export const NeptuneClusterParameterGroup: typeof import("./neptuneClusterParameterGroup").NeptuneClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["NeptuneClusterParameterGroup"], () => require("./neptuneClusterParameterGroup"));

export { NeptuneClusterSnapshotArgs, NeptuneClusterSnapshotState } from "./neptuneClusterSnapshot";
export type NeptuneClusterSnapshot = import("./neptuneClusterSnapshot").NeptuneClusterSnapshot;
export const NeptuneClusterSnapshot: typeof import("./neptuneClusterSnapshot").NeptuneClusterSnapshot = null as any;
utilities.lazyLoad(exports, ["NeptuneClusterSnapshot"], () => require("./neptuneClusterSnapshot"));

export { NeptuneEventSubscriptionArgs, NeptuneEventSubscriptionState } from "./neptuneEventSubscription";
export type NeptuneEventSubscription = import("./neptuneEventSubscription").NeptuneEventSubscription;
export const NeptuneEventSubscription: typeof import("./neptuneEventSubscription").NeptuneEventSubscription = null as any;
utilities.lazyLoad(exports, ["NeptuneEventSubscription"], () => require("./neptuneEventSubscription"));

export { NeptuneGlobalClusterArgs, NeptuneGlobalClusterState } from "./neptuneGlobalCluster";
export type NeptuneGlobalCluster = import("./neptuneGlobalCluster").NeptuneGlobalCluster;
export const NeptuneGlobalCluster: typeof import("./neptuneGlobalCluster").NeptuneGlobalCluster = null as any;
utilities.lazyLoad(exports, ["NeptuneGlobalCluster"], () => require("./neptuneGlobalCluster"));

export { NeptuneParameterGroupArgs, NeptuneParameterGroupState } from "./neptuneParameterGroup";
export type NeptuneParameterGroup = import("./neptuneParameterGroup").NeptuneParameterGroup;
export const NeptuneParameterGroup: typeof import("./neptuneParameterGroup").NeptuneParameterGroup = null as any;
utilities.lazyLoad(exports, ["NeptuneParameterGroup"], () => require("./neptuneParameterGroup"));

export { NeptuneSubnetGroupArgs, NeptuneSubnetGroupState } from "./neptuneSubnetGroup";
export type NeptuneSubnetGroup = import("./neptuneSubnetGroup").NeptuneSubnetGroup;
export const NeptuneSubnetGroup: typeof import("./neptuneSubnetGroup").NeptuneSubnetGroup = null as any;
utilities.lazyLoad(exports, ["NeptuneSubnetGroup"], () => require("./neptuneSubnetGroup"));

export { NetworkAclArgs, NetworkAclState } from "./networkAcl";
export type NetworkAcl = import("./networkAcl").NetworkAcl;
export const NetworkAcl: typeof import("./networkAcl").NetworkAcl = null as any;
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));

export { NetworkAclAssociationArgs, NetworkAclAssociationState } from "./networkAclAssociation";
export type NetworkAclAssociation = import("./networkAclAssociation").NetworkAclAssociation;
export const NetworkAclAssociation: typeof import("./networkAclAssociation").NetworkAclAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkAclAssociation"], () => require("./networkAclAssociation"));

export { NetworkAclRuleArgs, NetworkAclRuleState } from "./networkAclRule";
export type NetworkAclRule = import("./networkAclRule").NetworkAclRule;
export const NetworkAclRule: typeof import("./networkAclRule").NetworkAclRule = null as any;
utilities.lazyLoad(exports, ["NetworkAclRule"], () => require("./networkAclRule"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkInterfaceAttachmentArgs, NetworkInterfaceAttachmentState } from "./networkInterfaceAttachment";
export type NetworkInterfaceAttachment = import("./networkInterfaceAttachment").NetworkInterfaceAttachment;
export const NetworkInterfaceAttachment: typeof import("./networkInterfaceAttachment").NetworkInterfaceAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceAttachment"], () => require("./networkInterfaceAttachment"));

export { NetworkInterfaceSgAttachmentArgs, NetworkInterfaceSgAttachmentState } from "./networkInterfaceSgAttachment";
export type NetworkInterfaceSgAttachment = import("./networkInterfaceSgAttachment").NetworkInterfaceSgAttachment;
export const NetworkInterfaceSgAttachment: typeof import("./networkInterfaceSgAttachment").NetworkInterfaceSgAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkInterfaceSgAttachment"], () => require("./networkInterfaceSgAttachment"));

export { NetworkfirewallFirewallArgs, NetworkfirewallFirewallState } from "./networkfirewallFirewall";
export type NetworkfirewallFirewall = import("./networkfirewallFirewall").NetworkfirewallFirewall;
export const NetworkfirewallFirewall: typeof import("./networkfirewallFirewall").NetworkfirewallFirewall = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallFirewall"], () => require("./networkfirewallFirewall"));

export { NetworkfirewallFirewallPolicyArgs, NetworkfirewallFirewallPolicyState } from "./networkfirewallFirewallPolicy";
export type NetworkfirewallFirewallPolicy = import("./networkfirewallFirewallPolicy").NetworkfirewallFirewallPolicy;
export const NetworkfirewallFirewallPolicy: typeof import("./networkfirewallFirewallPolicy").NetworkfirewallFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallFirewallPolicy"], () => require("./networkfirewallFirewallPolicy"));

export { NetworkfirewallLoggingConfigurationArgs, NetworkfirewallLoggingConfigurationState } from "./networkfirewallLoggingConfiguration";
export type NetworkfirewallLoggingConfiguration = import("./networkfirewallLoggingConfiguration").NetworkfirewallLoggingConfiguration;
export const NetworkfirewallLoggingConfiguration: typeof import("./networkfirewallLoggingConfiguration").NetworkfirewallLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallLoggingConfiguration"], () => require("./networkfirewallLoggingConfiguration"));

export { NetworkfirewallResourcePolicyArgs, NetworkfirewallResourcePolicyState } from "./networkfirewallResourcePolicy";
export type NetworkfirewallResourcePolicy = import("./networkfirewallResourcePolicy").NetworkfirewallResourcePolicy;
export const NetworkfirewallResourcePolicy: typeof import("./networkfirewallResourcePolicy").NetworkfirewallResourcePolicy = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallResourcePolicy"], () => require("./networkfirewallResourcePolicy"));

export { NetworkfirewallRuleGroupArgs, NetworkfirewallRuleGroupState } from "./networkfirewallRuleGroup";
export type NetworkfirewallRuleGroup = import("./networkfirewallRuleGroup").NetworkfirewallRuleGroup;
export const NetworkfirewallRuleGroup: typeof import("./networkfirewallRuleGroup").NetworkfirewallRuleGroup = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallRuleGroup"], () => require("./networkfirewallRuleGroup"));

export { NetworkfirewallTlsInspectionConfigurationArgs, NetworkfirewallTlsInspectionConfigurationState } from "./networkfirewallTlsInspectionConfiguration";
export type NetworkfirewallTlsInspectionConfiguration = import("./networkfirewallTlsInspectionConfiguration").NetworkfirewallTlsInspectionConfiguration;
export const NetworkfirewallTlsInspectionConfiguration: typeof import("./networkfirewallTlsInspectionConfiguration").NetworkfirewallTlsInspectionConfiguration = null as any;
utilities.lazyLoad(exports, ["NetworkfirewallTlsInspectionConfiguration"], () => require("./networkfirewallTlsInspectionConfiguration"));

export { NetworkmanagerAttachmentAccepterArgs, NetworkmanagerAttachmentAccepterState } from "./networkmanagerAttachmentAccepter";
export type NetworkmanagerAttachmentAccepter = import("./networkmanagerAttachmentAccepter").NetworkmanagerAttachmentAccepter;
export const NetworkmanagerAttachmentAccepter: typeof import("./networkmanagerAttachmentAccepter").NetworkmanagerAttachmentAccepter = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerAttachmentAccepter"], () => require("./networkmanagerAttachmentAccepter"));

export { NetworkmanagerConnectAttachmentArgs, NetworkmanagerConnectAttachmentState } from "./networkmanagerConnectAttachment";
export type NetworkmanagerConnectAttachment = import("./networkmanagerConnectAttachment").NetworkmanagerConnectAttachment;
export const NetworkmanagerConnectAttachment: typeof import("./networkmanagerConnectAttachment").NetworkmanagerConnectAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerConnectAttachment"], () => require("./networkmanagerConnectAttachment"));

export { NetworkmanagerConnectPeerArgs, NetworkmanagerConnectPeerState } from "./networkmanagerConnectPeer";
export type NetworkmanagerConnectPeer = import("./networkmanagerConnectPeer").NetworkmanagerConnectPeer;
export const NetworkmanagerConnectPeer: typeof import("./networkmanagerConnectPeer").NetworkmanagerConnectPeer = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerConnectPeer"], () => require("./networkmanagerConnectPeer"));

export { NetworkmanagerConnectionArgs, NetworkmanagerConnectionState } from "./networkmanagerConnection";
export type NetworkmanagerConnection = import("./networkmanagerConnection").NetworkmanagerConnection;
export const NetworkmanagerConnection: typeof import("./networkmanagerConnection").NetworkmanagerConnection = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerConnection"], () => require("./networkmanagerConnection"));

export { NetworkmanagerCoreNetworkArgs, NetworkmanagerCoreNetworkState } from "./networkmanagerCoreNetwork";
export type NetworkmanagerCoreNetwork = import("./networkmanagerCoreNetwork").NetworkmanagerCoreNetwork;
export const NetworkmanagerCoreNetwork: typeof import("./networkmanagerCoreNetwork").NetworkmanagerCoreNetwork = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerCoreNetwork"], () => require("./networkmanagerCoreNetwork"));

export { NetworkmanagerCoreNetworkPolicyAttachmentArgs, NetworkmanagerCoreNetworkPolicyAttachmentState } from "./networkmanagerCoreNetworkPolicyAttachment";
export type NetworkmanagerCoreNetworkPolicyAttachment = import("./networkmanagerCoreNetworkPolicyAttachment").NetworkmanagerCoreNetworkPolicyAttachment;
export const NetworkmanagerCoreNetworkPolicyAttachment: typeof import("./networkmanagerCoreNetworkPolicyAttachment").NetworkmanagerCoreNetworkPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerCoreNetworkPolicyAttachment"], () => require("./networkmanagerCoreNetworkPolicyAttachment"));

export { NetworkmanagerCustomerGatewayAssociationArgs, NetworkmanagerCustomerGatewayAssociationState } from "./networkmanagerCustomerGatewayAssociation";
export type NetworkmanagerCustomerGatewayAssociation = import("./networkmanagerCustomerGatewayAssociation").NetworkmanagerCustomerGatewayAssociation;
export const NetworkmanagerCustomerGatewayAssociation: typeof import("./networkmanagerCustomerGatewayAssociation").NetworkmanagerCustomerGatewayAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerCustomerGatewayAssociation"], () => require("./networkmanagerCustomerGatewayAssociation"));

export { NetworkmanagerDeviceArgs, NetworkmanagerDeviceState } from "./networkmanagerDevice";
export type NetworkmanagerDevice = import("./networkmanagerDevice").NetworkmanagerDevice;
export const NetworkmanagerDevice: typeof import("./networkmanagerDevice").NetworkmanagerDevice = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerDevice"], () => require("./networkmanagerDevice"));

export { NetworkmanagerGlobalNetworkArgs, NetworkmanagerGlobalNetworkState } from "./networkmanagerGlobalNetwork";
export type NetworkmanagerGlobalNetwork = import("./networkmanagerGlobalNetwork").NetworkmanagerGlobalNetwork;
export const NetworkmanagerGlobalNetwork: typeof import("./networkmanagerGlobalNetwork").NetworkmanagerGlobalNetwork = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerGlobalNetwork"], () => require("./networkmanagerGlobalNetwork"));

export { NetworkmanagerLinkArgs, NetworkmanagerLinkState } from "./networkmanagerLink";
export type NetworkmanagerLink = import("./networkmanagerLink").NetworkmanagerLink;
export const NetworkmanagerLink: typeof import("./networkmanagerLink").NetworkmanagerLink = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerLink"], () => require("./networkmanagerLink"));

export { NetworkmanagerLinkAssociationArgs, NetworkmanagerLinkAssociationState } from "./networkmanagerLinkAssociation";
export type NetworkmanagerLinkAssociation = import("./networkmanagerLinkAssociation").NetworkmanagerLinkAssociation;
export const NetworkmanagerLinkAssociation: typeof import("./networkmanagerLinkAssociation").NetworkmanagerLinkAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerLinkAssociation"], () => require("./networkmanagerLinkAssociation"));

export { NetworkmanagerSiteArgs, NetworkmanagerSiteState } from "./networkmanagerSite";
export type NetworkmanagerSite = import("./networkmanagerSite").NetworkmanagerSite;
export const NetworkmanagerSite: typeof import("./networkmanagerSite").NetworkmanagerSite = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerSite"], () => require("./networkmanagerSite"));

export { NetworkmanagerSiteToSiteVpnAttachmentArgs, NetworkmanagerSiteToSiteVpnAttachmentState } from "./networkmanagerSiteToSiteVpnAttachment";
export type NetworkmanagerSiteToSiteVpnAttachment = import("./networkmanagerSiteToSiteVpnAttachment").NetworkmanagerSiteToSiteVpnAttachment;
export const NetworkmanagerSiteToSiteVpnAttachment: typeof import("./networkmanagerSiteToSiteVpnAttachment").NetworkmanagerSiteToSiteVpnAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerSiteToSiteVpnAttachment"], () => require("./networkmanagerSiteToSiteVpnAttachment"));

export { NetworkmanagerTransitGatewayConnectPeerAssociationArgs, NetworkmanagerTransitGatewayConnectPeerAssociationState } from "./networkmanagerTransitGatewayConnectPeerAssociation";
export type NetworkmanagerTransitGatewayConnectPeerAssociation = import("./networkmanagerTransitGatewayConnectPeerAssociation").NetworkmanagerTransitGatewayConnectPeerAssociation;
export const NetworkmanagerTransitGatewayConnectPeerAssociation: typeof import("./networkmanagerTransitGatewayConnectPeerAssociation").NetworkmanagerTransitGatewayConnectPeerAssociation = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerTransitGatewayConnectPeerAssociation"], () => require("./networkmanagerTransitGatewayConnectPeerAssociation"));

export { NetworkmanagerTransitGatewayPeeringArgs, NetworkmanagerTransitGatewayPeeringState } from "./networkmanagerTransitGatewayPeering";
export type NetworkmanagerTransitGatewayPeering = import("./networkmanagerTransitGatewayPeering").NetworkmanagerTransitGatewayPeering;
export const NetworkmanagerTransitGatewayPeering: typeof import("./networkmanagerTransitGatewayPeering").NetworkmanagerTransitGatewayPeering = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerTransitGatewayPeering"], () => require("./networkmanagerTransitGatewayPeering"));

export { NetworkmanagerTransitGatewayRegistrationArgs, NetworkmanagerTransitGatewayRegistrationState } from "./networkmanagerTransitGatewayRegistration";
export type NetworkmanagerTransitGatewayRegistration = import("./networkmanagerTransitGatewayRegistration").NetworkmanagerTransitGatewayRegistration;
export const NetworkmanagerTransitGatewayRegistration: typeof import("./networkmanagerTransitGatewayRegistration").NetworkmanagerTransitGatewayRegistration = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerTransitGatewayRegistration"], () => require("./networkmanagerTransitGatewayRegistration"));

export { NetworkmanagerTransitGatewayRouteTableAttachmentArgs, NetworkmanagerTransitGatewayRouteTableAttachmentState } from "./networkmanagerTransitGatewayRouteTableAttachment";
export type NetworkmanagerTransitGatewayRouteTableAttachment = import("./networkmanagerTransitGatewayRouteTableAttachment").NetworkmanagerTransitGatewayRouteTableAttachment;
export const NetworkmanagerTransitGatewayRouteTableAttachment: typeof import("./networkmanagerTransitGatewayRouteTableAttachment").NetworkmanagerTransitGatewayRouteTableAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerTransitGatewayRouteTableAttachment"], () => require("./networkmanagerTransitGatewayRouteTableAttachment"));

export { NetworkmanagerVpcAttachmentArgs, NetworkmanagerVpcAttachmentState } from "./networkmanagerVpcAttachment";
export type NetworkmanagerVpcAttachment = import("./networkmanagerVpcAttachment").NetworkmanagerVpcAttachment;
export const NetworkmanagerVpcAttachment: typeof import("./networkmanagerVpcAttachment").NetworkmanagerVpcAttachment = null as any;
utilities.lazyLoad(exports, ["NetworkmanagerVpcAttachment"], () => require("./networkmanagerVpcAttachment"));

export { NetworkmonitorMonitorArgs, NetworkmonitorMonitorState } from "./networkmonitorMonitor";
export type NetworkmonitorMonitor = import("./networkmonitorMonitor").NetworkmonitorMonitor;
export const NetworkmonitorMonitor: typeof import("./networkmonitorMonitor").NetworkmonitorMonitor = null as any;
utilities.lazyLoad(exports, ["NetworkmonitorMonitor"], () => require("./networkmonitorMonitor"));

export { NetworkmonitorProbeArgs, NetworkmonitorProbeState } from "./networkmonitorProbe";
export type NetworkmonitorProbe = import("./networkmonitorProbe").NetworkmonitorProbe;
export const NetworkmonitorProbe: typeof import("./networkmonitorProbe").NetworkmonitorProbe = null as any;
utilities.lazyLoad(exports, ["NetworkmonitorProbe"], () => require("./networkmonitorProbe"));

export { OamLinkArgs, OamLinkState } from "./oamLink";
export type OamLink = import("./oamLink").OamLink;
export const OamLink: typeof import("./oamLink").OamLink = null as any;
utilities.lazyLoad(exports, ["OamLink"], () => require("./oamLink"));

export { OamSinkArgs, OamSinkState } from "./oamSink";
export type OamSink = import("./oamSink").OamSink;
export const OamSink: typeof import("./oamSink").OamSink = null as any;
utilities.lazyLoad(exports, ["OamSink"], () => require("./oamSink"));

export { OamSinkPolicyArgs, OamSinkPolicyState } from "./oamSinkPolicy";
export type OamSinkPolicy = import("./oamSinkPolicy").OamSinkPolicy;
export const OamSinkPolicy: typeof import("./oamSinkPolicy").OamSinkPolicy = null as any;
utilities.lazyLoad(exports, ["OamSinkPolicy"], () => require("./oamSinkPolicy"));

export { OpensearchDomainArgs, OpensearchDomainState } from "./opensearchDomain";
export type OpensearchDomain = import("./opensearchDomain").OpensearchDomain;
export const OpensearchDomain: typeof import("./opensearchDomain").OpensearchDomain = null as any;
utilities.lazyLoad(exports, ["OpensearchDomain"], () => require("./opensearchDomain"));

export { OpensearchDomainPolicyArgs, OpensearchDomainPolicyState } from "./opensearchDomainPolicy";
export type OpensearchDomainPolicy = import("./opensearchDomainPolicy").OpensearchDomainPolicy;
export const OpensearchDomainPolicy: typeof import("./opensearchDomainPolicy").OpensearchDomainPolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchDomainPolicy"], () => require("./opensearchDomainPolicy"));

export { OpensearchDomainSamlOptionsArgs, OpensearchDomainSamlOptionsState } from "./opensearchDomainSamlOptions";
export type OpensearchDomainSamlOptions = import("./opensearchDomainSamlOptions").OpensearchDomainSamlOptions;
export const OpensearchDomainSamlOptions: typeof import("./opensearchDomainSamlOptions").OpensearchDomainSamlOptions = null as any;
utilities.lazyLoad(exports, ["OpensearchDomainSamlOptions"], () => require("./opensearchDomainSamlOptions"));

export { OpensearchInboundConnectionAccepterArgs, OpensearchInboundConnectionAccepterState } from "./opensearchInboundConnectionAccepter";
export type OpensearchInboundConnectionAccepter = import("./opensearchInboundConnectionAccepter").OpensearchInboundConnectionAccepter;
export const OpensearchInboundConnectionAccepter: typeof import("./opensearchInboundConnectionAccepter").OpensearchInboundConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["OpensearchInboundConnectionAccepter"], () => require("./opensearchInboundConnectionAccepter"));

export { OpensearchOutboundConnectionArgs, OpensearchOutboundConnectionState } from "./opensearchOutboundConnection";
export type OpensearchOutboundConnection = import("./opensearchOutboundConnection").OpensearchOutboundConnection;
export const OpensearchOutboundConnection: typeof import("./opensearchOutboundConnection").OpensearchOutboundConnection = null as any;
utilities.lazyLoad(exports, ["OpensearchOutboundConnection"], () => require("./opensearchOutboundConnection"));

export { OpensearchPackageArgs, OpensearchPackageState } from "./opensearchPackage";
export type OpensearchPackage = import("./opensearchPackage").OpensearchPackage;
export const OpensearchPackage: typeof import("./opensearchPackage").OpensearchPackage = null as any;
utilities.lazyLoad(exports, ["OpensearchPackage"], () => require("./opensearchPackage"));

export { OpensearchPackageAssociationArgs, OpensearchPackageAssociationState } from "./opensearchPackageAssociation";
export type OpensearchPackageAssociation = import("./opensearchPackageAssociation").OpensearchPackageAssociation;
export const OpensearchPackageAssociation: typeof import("./opensearchPackageAssociation").OpensearchPackageAssociation = null as any;
utilities.lazyLoad(exports, ["OpensearchPackageAssociation"], () => require("./opensearchPackageAssociation"));

export { OpensearchVpcEndpointArgs, OpensearchVpcEndpointState } from "./opensearchVpcEndpoint";
export type OpensearchVpcEndpoint = import("./opensearchVpcEndpoint").OpensearchVpcEndpoint;
export const OpensearchVpcEndpoint: typeof import("./opensearchVpcEndpoint").OpensearchVpcEndpoint = null as any;
utilities.lazyLoad(exports, ["OpensearchVpcEndpoint"], () => require("./opensearchVpcEndpoint"));

export { OpensearchserverlessAccessPolicyArgs, OpensearchserverlessAccessPolicyState } from "./opensearchserverlessAccessPolicy";
export type OpensearchserverlessAccessPolicy = import("./opensearchserverlessAccessPolicy").OpensearchserverlessAccessPolicy;
export const OpensearchserverlessAccessPolicy: typeof import("./opensearchserverlessAccessPolicy").OpensearchserverlessAccessPolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessAccessPolicy"], () => require("./opensearchserverlessAccessPolicy"));

export { OpensearchserverlessCollectionArgs, OpensearchserverlessCollectionState } from "./opensearchserverlessCollection";
export type OpensearchserverlessCollection = import("./opensearchserverlessCollection").OpensearchserverlessCollection;
export const OpensearchserverlessCollection: typeof import("./opensearchserverlessCollection").OpensearchserverlessCollection = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessCollection"], () => require("./opensearchserverlessCollection"));

export { OpensearchserverlessLifecyclePolicyArgs, OpensearchserverlessLifecyclePolicyState } from "./opensearchserverlessLifecyclePolicy";
export type OpensearchserverlessLifecyclePolicy = import("./opensearchserverlessLifecyclePolicy").OpensearchserverlessLifecyclePolicy;
export const OpensearchserverlessLifecyclePolicy: typeof import("./opensearchserverlessLifecyclePolicy").OpensearchserverlessLifecyclePolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessLifecyclePolicy"], () => require("./opensearchserverlessLifecyclePolicy"));

export { OpensearchserverlessSecurityConfigArgs, OpensearchserverlessSecurityConfigState } from "./opensearchserverlessSecurityConfig";
export type OpensearchserverlessSecurityConfig = import("./opensearchserverlessSecurityConfig").OpensearchserverlessSecurityConfig;
export const OpensearchserverlessSecurityConfig: typeof import("./opensearchserverlessSecurityConfig").OpensearchserverlessSecurityConfig = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessSecurityConfig"], () => require("./opensearchserverlessSecurityConfig"));

export { OpensearchserverlessSecurityPolicyArgs, OpensearchserverlessSecurityPolicyState } from "./opensearchserverlessSecurityPolicy";
export type OpensearchserverlessSecurityPolicy = import("./opensearchserverlessSecurityPolicy").OpensearchserverlessSecurityPolicy;
export const OpensearchserverlessSecurityPolicy: typeof import("./opensearchserverlessSecurityPolicy").OpensearchserverlessSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessSecurityPolicy"], () => require("./opensearchserverlessSecurityPolicy"));

export { OpensearchserverlessVpcEndpointArgs, OpensearchserverlessVpcEndpointState } from "./opensearchserverlessVpcEndpoint";
export type OpensearchserverlessVpcEndpoint = import("./opensearchserverlessVpcEndpoint").OpensearchserverlessVpcEndpoint;
export const OpensearchserverlessVpcEndpoint: typeof import("./opensearchserverlessVpcEndpoint").OpensearchserverlessVpcEndpoint = null as any;
utilities.lazyLoad(exports, ["OpensearchserverlessVpcEndpoint"], () => require("./opensearchserverlessVpcEndpoint"));

export { OpsworksApplicationArgs, OpsworksApplicationState } from "./opsworksApplication";
export type OpsworksApplication = import("./opsworksApplication").OpsworksApplication;
export const OpsworksApplication: typeof import("./opsworksApplication").OpsworksApplication = null as any;
utilities.lazyLoad(exports, ["OpsworksApplication"], () => require("./opsworksApplication"));

export { OpsworksCustomLayerArgs, OpsworksCustomLayerState } from "./opsworksCustomLayer";
export type OpsworksCustomLayer = import("./opsworksCustomLayer").OpsworksCustomLayer;
export const OpsworksCustomLayer: typeof import("./opsworksCustomLayer").OpsworksCustomLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksCustomLayer"], () => require("./opsworksCustomLayer"));

export { OpsworksEcsClusterLayerArgs, OpsworksEcsClusterLayerState } from "./opsworksEcsClusterLayer";
export type OpsworksEcsClusterLayer = import("./opsworksEcsClusterLayer").OpsworksEcsClusterLayer;
export const OpsworksEcsClusterLayer: typeof import("./opsworksEcsClusterLayer").OpsworksEcsClusterLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksEcsClusterLayer"], () => require("./opsworksEcsClusterLayer"));

export { OpsworksGangliaLayerArgs, OpsworksGangliaLayerState } from "./opsworksGangliaLayer";
export type OpsworksGangliaLayer = import("./opsworksGangliaLayer").OpsworksGangliaLayer;
export const OpsworksGangliaLayer: typeof import("./opsworksGangliaLayer").OpsworksGangliaLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksGangliaLayer"], () => require("./opsworksGangliaLayer"));

export { OpsworksHaproxyLayerArgs, OpsworksHaproxyLayerState } from "./opsworksHaproxyLayer";
export type OpsworksHaproxyLayer = import("./opsworksHaproxyLayer").OpsworksHaproxyLayer;
export const OpsworksHaproxyLayer: typeof import("./opsworksHaproxyLayer").OpsworksHaproxyLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksHaproxyLayer"], () => require("./opsworksHaproxyLayer"));

export { OpsworksInstanceArgs, OpsworksInstanceState } from "./opsworksInstance";
export type OpsworksInstance = import("./opsworksInstance").OpsworksInstance;
export const OpsworksInstance: typeof import("./opsworksInstance").OpsworksInstance = null as any;
utilities.lazyLoad(exports, ["OpsworksInstance"], () => require("./opsworksInstance"));

export { OpsworksJavaAppLayerArgs, OpsworksJavaAppLayerState } from "./opsworksJavaAppLayer";
export type OpsworksJavaAppLayer = import("./opsworksJavaAppLayer").OpsworksJavaAppLayer;
export const OpsworksJavaAppLayer: typeof import("./opsworksJavaAppLayer").OpsworksJavaAppLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksJavaAppLayer"], () => require("./opsworksJavaAppLayer"));

export { OpsworksMemcachedLayerArgs, OpsworksMemcachedLayerState } from "./opsworksMemcachedLayer";
export type OpsworksMemcachedLayer = import("./opsworksMemcachedLayer").OpsworksMemcachedLayer;
export const OpsworksMemcachedLayer: typeof import("./opsworksMemcachedLayer").OpsworksMemcachedLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksMemcachedLayer"], () => require("./opsworksMemcachedLayer"));

export { OpsworksMysqlLayerArgs, OpsworksMysqlLayerState } from "./opsworksMysqlLayer";
export type OpsworksMysqlLayer = import("./opsworksMysqlLayer").OpsworksMysqlLayer;
export const OpsworksMysqlLayer: typeof import("./opsworksMysqlLayer").OpsworksMysqlLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksMysqlLayer"], () => require("./opsworksMysqlLayer"));

export { OpsworksNodejsAppLayerArgs, OpsworksNodejsAppLayerState } from "./opsworksNodejsAppLayer";
export type OpsworksNodejsAppLayer = import("./opsworksNodejsAppLayer").OpsworksNodejsAppLayer;
export const OpsworksNodejsAppLayer: typeof import("./opsworksNodejsAppLayer").OpsworksNodejsAppLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksNodejsAppLayer"], () => require("./opsworksNodejsAppLayer"));

export { OpsworksPermissionArgs, OpsworksPermissionState } from "./opsworksPermission";
export type OpsworksPermission = import("./opsworksPermission").OpsworksPermission;
export const OpsworksPermission: typeof import("./opsworksPermission").OpsworksPermission = null as any;
utilities.lazyLoad(exports, ["OpsworksPermission"], () => require("./opsworksPermission"));

export { OpsworksPhpAppLayerArgs, OpsworksPhpAppLayerState } from "./opsworksPhpAppLayer";
export type OpsworksPhpAppLayer = import("./opsworksPhpAppLayer").OpsworksPhpAppLayer;
export const OpsworksPhpAppLayer: typeof import("./opsworksPhpAppLayer").OpsworksPhpAppLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksPhpAppLayer"], () => require("./opsworksPhpAppLayer"));

export { OpsworksRailsAppLayerArgs, OpsworksRailsAppLayerState } from "./opsworksRailsAppLayer";
export type OpsworksRailsAppLayer = import("./opsworksRailsAppLayer").OpsworksRailsAppLayer;
export const OpsworksRailsAppLayer: typeof import("./opsworksRailsAppLayer").OpsworksRailsAppLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksRailsAppLayer"], () => require("./opsworksRailsAppLayer"));

export { OpsworksRdsDbInstanceArgs, OpsworksRdsDbInstanceState } from "./opsworksRdsDbInstance";
export type OpsworksRdsDbInstance = import("./opsworksRdsDbInstance").OpsworksRdsDbInstance;
export const OpsworksRdsDbInstance: typeof import("./opsworksRdsDbInstance").OpsworksRdsDbInstance = null as any;
utilities.lazyLoad(exports, ["OpsworksRdsDbInstance"], () => require("./opsworksRdsDbInstance"));

export { OpsworksStackArgs, OpsworksStackState } from "./opsworksStack";
export type OpsworksStack = import("./opsworksStack").OpsworksStack;
export const OpsworksStack: typeof import("./opsworksStack").OpsworksStack = null as any;
utilities.lazyLoad(exports, ["OpsworksStack"], () => require("./opsworksStack"));

export { OpsworksStaticWebLayerArgs, OpsworksStaticWebLayerState } from "./opsworksStaticWebLayer";
export type OpsworksStaticWebLayer = import("./opsworksStaticWebLayer").OpsworksStaticWebLayer;
export const OpsworksStaticWebLayer: typeof import("./opsworksStaticWebLayer").OpsworksStaticWebLayer = null as any;
utilities.lazyLoad(exports, ["OpsworksStaticWebLayer"], () => require("./opsworksStaticWebLayer"));

export { OpsworksUserProfileArgs, OpsworksUserProfileState } from "./opsworksUserProfile";
export type OpsworksUserProfile = import("./opsworksUserProfile").OpsworksUserProfile;
export const OpsworksUserProfile: typeof import("./opsworksUserProfile").OpsworksUserProfile = null as any;
utilities.lazyLoad(exports, ["OpsworksUserProfile"], () => require("./opsworksUserProfile"));

export { OrganizationsAccountArgs, OrganizationsAccountState } from "./organizationsAccount";
export type OrganizationsAccount = import("./organizationsAccount").OrganizationsAccount;
export const OrganizationsAccount: typeof import("./organizationsAccount").OrganizationsAccount = null as any;
utilities.lazyLoad(exports, ["OrganizationsAccount"], () => require("./organizationsAccount"));

export { OrganizationsDelegatedAdministratorArgs, OrganizationsDelegatedAdministratorState } from "./organizationsDelegatedAdministrator";
export type OrganizationsDelegatedAdministrator = import("./organizationsDelegatedAdministrator").OrganizationsDelegatedAdministrator;
export const OrganizationsDelegatedAdministrator: typeof import("./organizationsDelegatedAdministrator").OrganizationsDelegatedAdministrator = null as any;
utilities.lazyLoad(exports, ["OrganizationsDelegatedAdministrator"], () => require("./organizationsDelegatedAdministrator"));

export { OrganizationsOrganizationArgs, OrganizationsOrganizationState } from "./organizationsOrganization";
export type OrganizationsOrganization = import("./organizationsOrganization").OrganizationsOrganization;
export const OrganizationsOrganization: typeof import("./organizationsOrganization").OrganizationsOrganization = null as any;
utilities.lazyLoad(exports, ["OrganizationsOrganization"], () => require("./organizationsOrganization"));

export { OrganizationsOrganizationalUnitArgs, OrganizationsOrganizationalUnitState } from "./organizationsOrganizationalUnit";
export type OrganizationsOrganizationalUnit = import("./organizationsOrganizationalUnit").OrganizationsOrganizationalUnit;
export const OrganizationsOrganizationalUnit: typeof import("./organizationsOrganizationalUnit").OrganizationsOrganizationalUnit = null as any;
utilities.lazyLoad(exports, ["OrganizationsOrganizationalUnit"], () => require("./organizationsOrganizationalUnit"));

export { OrganizationsPolicyArgs, OrganizationsPolicyState } from "./organizationsPolicy";
export type OrganizationsPolicy = import("./organizationsPolicy").OrganizationsPolicy;
export const OrganizationsPolicy: typeof import("./organizationsPolicy").OrganizationsPolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationsPolicy"], () => require("./organizationsPolicy"));

export { OrganizationsPolicyAttachmentArgs, OrganizationsPolicyAttachmentState } from "./organizationsPolicyAttachment";
export type OrganizationsPolicyAttachment = import("./organizationsPolicyAttachment").OrganizationsPolicyAttachment;
export const OrganizationsPolicyAttachment: typeof import("./organizationsPolicyAttachment").OrganizationsPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["OrganizationsPolicyAttachment"], () => require("./organizationsPolicyAttachment"));

export { OrganizationsResourcePolicyArgs, OrganizationsResourcePolicyState } from "./organizationsResourcePolicy";
export type OrganizationsResourcePolicy = import("./organizationsResourcePolicy").OrganizationsResourcePolicy;
export const OrganizationsResourcePolicy: typeof import("./organizationsResourcePolicy").OrganizationsResourcePolicy = null as any;
utilities.lazyLoad(exports, ["OrganizationsResourcePolicy"], () => require("./organizationsResourcePolicy"));

export { OsisPipelineArgs, OsisPipelineState } from "./osisPipeline";
export type OsisPipeline = import("./osisPipeline").OsisPipeline;
export const OsisPipeline: typeof import("./osisPipeline").OsisPipeline = null as any;
utilities.lazyLoad(exports, ["OsisPipeline"], () => require("./osisPipeline"));

export { PaymentcryptographyKeyArgs, PaymentcryptographyKeyState } from "./paymentcryptographyKey";
export type PaymentcryptographyKey = import("./paymentcryptographyKey").PaymentcryptographyKey;
export const PaymentcryptographyKey: typeof import("./paymentcryptographyKey").PaymentcryptographyKey = null as any;
utilities.lazyLoad(exports, ["PaymentcryptographyKey"], () => require("./paymentcryptographyKey"));

export { PaymentcryptographyKeyAliasArgs, PaymentcryptographyKeyAliasState } from "./paymentcryptographyKeyAlias";
export type PaymentcryptographyKeyAlias = import("./paymentcryptographyKeyAlias").PaymentcryptographyKeyAlias;
export const PaymentcryptographyKeyAlias: typeof import("./paymentcryptographyKeyAlias").PaymentcryptographyKeyAlias = null as any;
utilities.lazyLoad(exports, ["PaymentcryptographyKeyAlias"], () => require("./paymentcryptographyKeyAlias"));

export { PinpointAdmChannelArgs, PinpointAdmChannelState } from "./pinpointAdmChannel";
export type PinpointAdmChannel = import("./pinpointAdmChannel").PinpointAdmChannel;
export const PinpointAdmChannel: typeof import("./pinpointAdmChannel").PinpointAdmChannel = null as any;
utilities.lazyLoad(exports, ["PinpointAdmChannel"], () => require("./pinpointAdmChannel"));

export { PinpointApnsChannelArgs, PinpointApnsChannelState } from "./pinpointApnsChannel";
export type PinpointApnsChannel = import("./pinpointApnsChannel").PinpointApnsChannel;
export const PinpointApnsChannel: typeof import("./pinpointApnsChannel").PinpointApnsChannel = null as any;
utilities.lazyLoad(exports, ["PinpointApnsChannel"], () => require("./pinpointApnsChannel"));

export { PinpointApnsSandboxChannelArgs, PinpointApnsSandboxChannelState } from "./pinpointApnsSandboxChannel";
export type PinpointApnsSandboxChannel = import("./pinpointApnsSandboxChannel").PinpointApnsSandboxChannel;
export const PinpointApnsSandboxChannel: typeof import("./pinpointApnsSandboxChannel").PinpointApnsSandboxChannel = null as any;
utilities.lazyLoad(exports, ["PinpointApnsSandboxChannel"], () => require("./pinpointApnsSandboxChannel"));

export { PinpointApnsVoipChannelArgs, PinpointApnsVoipChannelState } from "./pinpointApnsVoipChannel";
export type PinpointApnsVoipChannel = import("./pinpointApnsVoipChannel").PinpointApnsVoipChannel;
export const PinpointApnsVoipChannel: typeof import("./pinpointApnsVoipChannel").PinpointApnsVoipChannel = null as any;
utilities.lazyLoad(exports, ["PinpointApnsVoipChannel"], () => require("./pinpointApnsVoipChannel"));

export { PinpointApnsVoipSandboxChannelArgs, PinpointApnsVoipSandboxChannelState } from "./pinpointApnsVoipSandboxChannel";
export type PinpointApnsVoipSandboxChannel = import("./pinpointApnsVoipSandboxChannel").PinpointApnsVoipSandboxChannel;
export const PinpointApnsVoipSandboxChannel: typeof import("./pinpointApnsVoipSandboxChannel").PinpointApnsVoipSandboxChannel = null as any;
utilities.lazyLoad(exports, ["PinpointApnsVoipSandboxChannel"], () => require("./pinpointApnsVoipSandboxChannel"));

export { PinpointAppArgs, PinpointAppState } from "./pinpointApp";
export type PinpointApp = import("./pinpointApp").PinpointApp;
export const PinpointApp: typeof import("./pinpointApp").PinpointApp = null as any;
utilities.lazyLoad(exports, ["PinpointApp"], () => require("./pinpointApp"));

export { PinpointBaiduChannelArgs, PinpointBaiduChannelState } from "./pinpointBaiduChannel";
export type PinpointBaiduChannel = import("./pinpointBaiduChannel").PinpointBaiduChannel;
export const PinpointBaiduChannel: typeof import("./pinpointBaiduChannel").PinpointBaiduChannel = null as any;
utilities.lazyLoad(exports, ["PinpointBaiduChannel"], () => require("./pinpointBaiduChannel"));

export { PinpointEmailChannelArgs, PinpointEmailChannelState } from "./pinpointEmailChannel";
export type PinpointEmailChannel = import("./pinpointEmailChannel").PinpointEmailChannel;
export const PinpointEmailChannel: typeof import("./pinpointEmailChannel").PinpointEmailChannel = null as any;
utilities.lazyLoad(exports, ["PinpointEmailChannel"], () => require("./pinpointEmailChannel"));

export { PinpointEmailTemplateArgs, PinpointEmailTemplateState } from "./pinpointEmailTemplate";
export type PinpointEmailTemplate = import("./pinpointEmailTemplate").PinpointEmailTemplate;
export const PinpointEmailTemplate: typeof import("./pinpointEmailTemplate").PinpointEmailTemplate = null as any;
utilities.lazyLoad(exports, ["PinpointEmailTemplate"], () => require("./pinpointEmailTemplate"));

export { PinpointEventStreamArgs, PinpointEventStreamState } from "./pinpointEventStream";
export type PinpointEventStream = import("./pinpointEventStream").PinpointEventStream;
export const PinpointEventStream: typeof import("./pinpointEventStream").PinpointEventStream = null as any;
utilities.lazyLoad(exports, ["PinpointEventStream"], () => require("./pinpointEventStream"));

export { PinpointGcmChannelArgs, PinpointGcmChannelState } from "./pinpointGcmChannel";
export type PinpointGcmChannel = import("./pinpointGcmChannel").PinpointGcmChannel;
export const PinpointGcmChannel: typeof import("./pinpointGcmChannel").PinpointGcmChannel = null as any;
utilities.lazyLoad(exports, ["PinpointGcmChannel"], () => require("./pinpointGcmChannel"));

export { PinpointSmsChannelArgs, PinpointSmsChannelState } from "./pinpointSmsChannel";
export type PinpointSmsChannel = import("./pinpointSmsChannel").PinpointSmsChannel;
export const PinpointSmsChannel: typeof import("./pinpointSmsChannel").PinpointSmsChannel = null as any;
utilities.lazyLoad(exports, ["PinpointSmsChannel"], () => require("./pinpointSmsChannel"));

export { PipesPipeArgs, PipesPipeState } from "./pipesPipe";
export type PipesPipe = import("./pipesPipe").PipesPipe;
export const PipesPipe: typeof import("./pipesPipe").PipesPipe = null as any;
utilities.lazyLoad(exports, ["PipesPipe"], () => require("./pipesPipe"));

export { PlacementGroupArgs, PlacementGroupState } from "./placementGroup";
export type PlacementGroup = import("./placementGroup").PlacementGroup;
export const PlacementGroup: typeof import("./placementGroup").PlacementGroup = null as any;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));

export { PrometheusAlertManagerDefinitionArgs, PrometheusAlertManagerDefinitionState } from "./prometheusAlertManagerDefinition";
export type PrometheusAlertManagerDefinition = import("./prometheusAlertManagerDefinition").PrometheusAlertManagerDefinition;
export const PrometheusAlertManagerDefinition: typeof import("./prometheusAlertManagerDefinition").PrometheusAlertManagerDefinition = null as any;
utilities.lazyLoad(exports, ["PrometheusAlertManagerDefinition"], () => require("./prometheusAlertManagerDefinition"));

export { PrometheusRuleGroupNamespaceArgs, PrometheusRuleGroupNamespaceState } from "./prometheusRuleGroupNamespace";
export type PrometheusRuleGroupNamespace = import("./prometheusRuleGroupNamespace").PrometheusRuleGroupNamespace;
export const PrometheusRuleGroupNamespace: typeof import("./prometheusRuleGroupNamespace").PrometheusRuleGroupNamespace = null as any;
utilities.lazyLoad(exports, ["PrometheusRuleGroupNamespace"], () => require("./prometheusRuleGroupNamespace"));

export { PrometheusScraperArgs, PrometheusScraperState } from "./prometheusScraper";
export type PrometheusScraper = import("./prometheusScraper").PrometheusScraper;
export const PrometheusScraper: typeof import("./prometheusScraper").PrometheusScraper = null as any;
utilities.lazyLoad(exports, ["PrometheusScraper"], () => require("./prometheusScraper"));

export { PrometheusWorkspaceArgs, PrometheusWorkspaceState } from "./prometheusWorkspace";
export type PrometheusWorkspace = import("./prometheusWorkspace").PrometheusWorkspace;
export const PrometheusWorkspace: typeof import("./prometheusWorkspace").PrometheusWorkspace = null as any;
utilities.lazyLoad(exports, ["PrometheusWorkspace"], () => require("./prometheusWorkspace"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProxyProtocolPolicyArgs, ProxyProtocolPolicyState } from "./proxyProtocolPolicy";
export type ProxyProtocolPolicy = import("./proxyProtocolPolicy").ProxyProtocolPolicy;
export const ProxyProtocolPolicy: typeof import("./proxyProtocolPolicy").ProxyProtocolPolicy = null as any;
utilities.lazyLoad(exports, ["ProxyProtocolPolicy"], () => require("./proxyProtocolPolicy"));

export { QldbLedgerArgs, QldbLedgerState } from "./qldbLedger";
export type QldbLedger = import("./qldbLedger").QldbLedger;
export const QldbLedger: typeof import("./qldbLedger").QldbLedger = null as any;
utilities.lazyLoad(exports, ["QldbLedger"], () => require("./qldbLedger"));

export { QldbStreamArgs, QldbStreamState } from "./qldbStream";
export type QldbStream = import("./qldbStream").QldbStream;
export const QldbStream: typeof import("./qldbStream").QldbStream = null as any;
utilities.lazyLoad(exports, ["QldbStream"], () => require("./qldbStream"));

export { QuicksightAccountSubscriptionArgs, QuicksightAccountSubscriptionState } from "./quicksightAccountSubscription";
export type QuicksightAccountSubscription = import("./quicksightAccountSubscription").QuicksightAccountSubscription;
export const QuicksightAccountSubscription: typeof import("./quicksightAccountSubscription").QuicksightAccountSubscription = null as any;
utilities.lazyLoad(exports, ["QuicksightAccountSubscription"], () => require("./quicksightAccountSubscription"));

export { QuicksightAnalysisArgs, QuicksightAnalysisState } from "./quicksightAnalysis";
export type QuicksightAnalysis = import("./quicksightAnalysis").QuicksightAnalysis;
export const QuicksightAnalysis: typeof import("./quicksightAnalysis").QuicksightAnalysis = null as any;
utilities.lazyLoad(exports, ["QuicksightAnalysis"], () => require("./quicksightAnalysis"));

export { QuicksightDashboardArgs, QuicksightDashboardState } from "./quicksightDashboard";
export type QuicksightDashboard = import("./quicksightDashboard").QuicksightDashboard;
export const QuicksightDashboard: typeof import("./quicksightDashboard").QuicksightDashboard = null as any;
utilities.lazyLoad(exports, ["QuicksightDashboard"], () => require("./quicksightDashboard"));

export { QuicksightDataSetArgs, QuicksightDataSetState } from "./quicksightDataSet";
export type QuicksightDataSet = import("./quicksightDataSet").QuicksightDataSet;
export const QuicksightDataSet: typeof import("./quicksightDataSet").QuicksightDataSet = null as any;
utilities.lazyLoad(exports, ["QuicksightDataSet"], () => require("./quicksightDataSet"));

export { QuicksightDataSourceArgs, QuicksightDataSourceState } from "./quicksightDataSource";
export type QuicksightDataSource = import("./quicksightDataSource").QuicksightDataSource;
export const QuicksightDataSource: typeof import("./quicksightDataSource").QuicksightDataSource = null as any;
utilities.lazyLoad(exports, ["QuicksightDataSource"], () => require("./quicksightDataSource"));

export { QuicksightFolderArgs, QuicksightFolderState } from "./quicksightFolder";
export type QuicksightFolder = import("./quicksightFolder").QuicksightFolder;
export const QuicksightFolder: typeof import("./quicksightFolder").QuicksightFolder = null as any;
utilities.lazyLoad(exports, ["QuicksightFolder"], () => require("./quicksightFolder"));

export { QuicksightFolderMembershipArgs, QuicksightFolderMembershipState } from "./quicksightFolderMembership";
export type QuicksightFolderMembership = import("./quicksightFolderMembership").QuicksightFolderMembership;
export const QuicksightFolderMembership: typeof import("./quicksightFolderMembership").QuicksightFolderMembership = null as any;
utilities.lazyLoad(exports, ["QuicksightFolderMembership"], () => require("./quicksightFolderMembership"));

export { QuicksightGroupArgs, QuicksightGroupState } from "./quicksightGroup";
export type QuicksightGroup = import("./quicksightGroup").QuicksightGroup;
export const QuicksightGroup: typeof import("./quicksightGroup").QuicksightGroup = null as any;
utilities.lazyLoad(exports, ["QuicksightGroup"], () => require("./quicksightGroup"));

export { QuicksightGroupMembershipArgs, QuicksightGroupMembershipState } from "./quicksightGroupMembership";
export type QuicksightGroupMembership = import("./quicksightGroupMembership").QuicksightGroupMembership;
export const QuicksightGroupMembership: typeof import("./quicksightGroupMembership").QuicksightGroupMembership = null as any;
utilities.lazyLoad(exports, ["QuicksightGroupMembership"], () => require("./quicksightGroupMembership"));

export { QuicksightIamPolicyAssignmentArgs, QuicksightIamPolicyAssignmentState } from "./quicksightIamPolicyAssignment";
export type QuicksightIamPolicyAssignment = import("./quicksightIamPolicyAssignment").QuicksightIamPolicyAssignment;
export const QuicksightIamPolicyAssignment: typeof import("./quicksightIamPolicyAssignment").QuicksightIamPolicyAssignment = null as any;
utilities.lazyLoad(exports, ["QuicksightIamPolicyAssignment"], () => require("./quicksightIamPolicyAssignment"));

export { QuicksightIngestionArgs, QuicksightIngestionState } from "./quicksightIngestion";
export type QuicksightIngestion = import("./quicksightIngestion").QuicksightIngestion;
export const QuicksightIngestion: typeof import("./quicksightIngestion").QuicksightIngestion = null as any;
utilities.lazyLoad(exports, ["QuicksightIngestion"], () => require("./quicksightIngestion"));

export { QuicksightNamespaceArgs, QuicksightNamespaceState } from "./quicksightNamespace";
export type QuicksightNamespace = import("./quicksightNamespace").QuicksightNamespace;
export const QuicksightNamespace: typeof import("./quicksightNamespace").QuicksightNamespace = null as any;
utilities.lazyLoad(exports, ["QuicksightNamespace"], () => require("./quicksightNamespace"));

export { QuicksightRefreshScheduleArgs, QuicksightRefreshScheduleState } from "./quicksightRefreshSchedule";
export type QuicksightRefreshSchedule = import("./quicksightRefreshSchedule").QuicksightRefreshSchedule;
export const QuicksightRefreshSchedule: typeof import("./quicksightRefreshSchedule").QuicksightRefreshSchedule = null as any;
utilities.lazyLoad(exports, ["QuicksightRefreshSchedule"], () => require("./quicksightRefreshSchedule"));

export { QuicksightTemplateArgs, QuicksightTemplateState } from "./quicksightTemplate";
export type QuicksightTemplate = import("./quicksightTemplate").QuicksightTemplate;
export const QuicksightTemplate: typeof import("./quicksightTemplate").QuicksightTemplate = null as any;
utilities.lazyLoad(exports, ["QuicksightTemplate"], () => require("./quicksightTemplate"));

export { QuicksightTemplateAliasArgs, QuicksightTemplateAliasState } from "./quicksightTemplateAlias";
export type QuicksightTemplateAlias = import("./quicksightTemplateAlias").QuicksightTemplateAlias;
export const QuicksightTemplateAlias: typeof import("./quicksightTemplateAlias").QuicksightTemplateAlias = null as any;
utilities.lazyLoad(exports, ["QuicksightTemplateAlias"], () => require("./quicksightTemplateAlias"));

export { QuicksightThemeArgs, QuicksightThemeState } from "./quicksightTheme";
export type QuicksightTheme = import("./quicksightTheme").QuicksightTheme;
export const QuicksightTheme: typeof import("./quicksightTheme").QuicksightTheme = null as any;
utilities.lazyLoad(exports, ["QuicksightTheme"], () => require("./quicksightTheme"));

export { QuicksightUserArgs, QuicksightUserState } from "./quicksightUser";
export type QuicksightUser = import("./quicksightUser").QuicksightUser;
export const QuicksightUser: typeof import("./quicksightUser").QuicksightUser = null as any;
utilities.lazyLoad(exports, ["QuicksightUser"], () => require("./quicksightUser"));

export { QuicksightVpcConnectionArgs, QuicksightVpcConnectionState } from "./quicksightVpcConnection";
export type QuicksightVpcConnection = import("./quicksightVpcConnection").QuicksightVpcConnection;
export const QuicksightVpcConnection: typeof import("./quicksightVpcConnection").QuicksightVpcConnection = null as any;
utilities.lazyLoad(exports, ["QuicksightVpcConnection"], () => require("./quicksightVpcConnection"));

export { RamPrincipalAssociationArgs, RamPrincipalAssociationState } from "./ramPrincipalAssociation";
export type RamPrincipalAssociation = import("./ramPrincipalAssociation").RamPrincipalAssociation;
export const RamPrincipalAssociation: typeof import("./ramPrincipalAssociation").RamPrincipalAssociation = null as any;
utilities.lazyLoad(exports, ["RamPrincipalAssociation"], () => require("./ramPrincipalAssociation"));

export { RamResourceAssociationArgs, RamResourceAssociationState } from "./ramResourceAssociation";
export type RamResourceAssociation = import("./ramResourceAssociation").RamResourceAssociation;
export const RamResourceAssociation: typeof import("./ramResourceAssociation").RamResourceAssociation = null as any;
utilities.lazyLoad(exports, ["RamResourceAssociation"], () => require("./ramResourceAssociation"));

export { RamResourceShareArgs, RamResourceShareState } from "./ramResourceShare";
export type RamResourceShare = import("./ramResourceShare").RamResourceShare;
export const RamResourceShare: typeof import("./ramResourceShare").RamResourceShare = null as any;
utilities.lazyLoad(exports, ["RamResourceShare"], () => require("./ramResourceShare"));

export { RamResourceShareAccepterArgs, RamResourceShareAccepterState } from "./ramResourceShareAccepter";
export type RamResourceShareAccepter = import("./ramResourceShareAccepter").RamResourceShareAccepter;
export const RamResourceShareAccepter: typeof import("./ramResourceShareAccepter").RamResourceShareAccepter = null as any;
utilities.lazyLoad(exports, ["RamResourceShareAccepter"], () => require("./ramResourceShareAccepter"));

export { RamSharingWithOrganizationArgs, RamSharingWithOrganizationState } from "./ramSharingWithOrganization";
export type RamSharingWithOrganization = import("./ramSharingWithOrganization").RamSharingWithOrganization;
export const RamSharingWithOrganization: typeof import("./ramSharingWithOrganization").RamSharingWithOrganization = null as any;
utilities.lazyLoad(exports, ["RamSharingWithOrganization"], () => require("./ramSharingWithOrganization"));

export { RbinRuleArgs, RbinRuleState } from "./rbinRule";
export type RbinRule = import("./rbinRule").RbinRule;
export const RbinRule: typeof import("./rbinRule").RbinRule = null as any;
utilities.lazyLoad(exports, ["RbinRule"], () => require("./rbinRule"));

export { RdsCertificateArgs, RdsCertificateState } from "./rdsCertificate";
export type RdsCertificate = import("./rdsCertificate").RdsCertificate;
export const RdsCertificate: typeof import("./rdsCertificate").RdsCertificate = null as any;
utilities.lazyLoad(exports, ["RdsCertificate"], () => require("./rdsCertificate"));

export { RdsClusterArgs, RdsClusterState } from "./rdsCluster";
export type RdsCluster = import("./rdsCluster").RdsCluster;
export const RdsCluster: typeof import("./rdsCluster").RdsCluster = null as any;
utilities.lazyLoad(exports, ["RdsCluster"], () => require("./rdsCluster"));

export { RdsClusterActivityStreamArgs, RdsClusterActivityStreamState } from "./rdsClusterActivityStream";
export type RdsClusterActivityStream = import("./rdsClusterActivityStream").RdsClusterActivityStream;
export const RdsClusterActivityStream: typeof import("./rdsClusterActivityStream").RdsClusterActivityStream = null as any;
utilities.lazyLoad(exports, ["RdsClusterActivityStream"], () => require("./rdsClusterActivityStream"));

export { RdsClusterEndpointArgs, RdsClusterEndpointState } from "./rdsClusterEndpoint";
export type RdsClusterEndpoint = import("./rdsClusterEndpoint").RdsClusterEndpoint;
export const RdsClusterEndpoint: typeof import("./rdsClusterEndpoint").RdsClusterEndpoint = null as any;
utilities.lazyLoad(exports, ["RdsClusterEndpoint"], () => require("./rdsClusterEndpoint"));

export { RdsClusterInstanceArgs, RdsClusterInstanceState } from "./rdsClusterInstance";
export type RdsClusterInstance = import("./rdsClusterInstance").RdsClusterInstance;
export const RdsClusterInstance: typeof import("./rdsClusterInstance").RdsClusterInstance = null as any;
utilities.lazyLoad(exports, ["RdsClusterInstance"], () => require("./rdsClusterInstance"));

export { RdsClusterParameterGroupArgs, RdsClusterParameterGroupState } from "./rdsClusterParameterGroup";
export type RdsClusterParameterGroup = import("./rdsClusterParameterGroup").RdsClusterParameterGroup;
export const RdsClusterParameterGroup: typeof import("./rdsClusterParameterGroup").RdsClusterParameterGroup = null as any;
utilities.lazyLoad(exports, ["RdsClusterParameterGroup"], () => require("./rdsClusterParameterGroup"));

export { RdsClusterRoleAssociationArgs, RdsClusterRoleAssociationState } from "./rdsClusterRoleAssociation";
export type RdsClusterRoleAssociation = import("./rdsClusterRoleAssociation").RdsClusterRoleAssociation;
export const RdsClusterRoleAssociation: typeof import("./rdsClusterRoleAssociation").RdsClusterRoleAssociation = null as any;
utilities.lazyLoad(exports, ["RdsClusterRoleAssociation"], () => require("./rdsClusterRoleAssociation"));

export { RdsCustomDbEngineVersionArgs, RdsCustomDbEngineVersionState } from "./rdsCustomDbEngineVersion";
export type RdsCustomDbEngineVersion = import("./rdsCustomDbEngineVersion").RdsCustomDbEngineVersion;
export const RdsCustomDbEngineVersion: typeof import("./rdsCustomDbEngineVersion").RdsCustomDbEngineVersion = null as any;
utilities.lazyLoad(exports, ["RdsCustomDbEngineVersion"], () => require("./rdsCustomDbEngineVersion"));

export { RdsExportTaskArgs, RdsExportTaskState } from "./rdsExportTask";
export type RdsExportTask = import("./rdsExportTask").RdsExportTask;
export const RdsExportTask: typeof import("./rdsExportTask").RdsExportTask = null as any;
utilities.lazyLoad(exports, ["RdsExportTask"], () => require("./rdsExportTask"));

export { RdsGlobalClusterArgs, RdsGlobalClusterState } from "./rdsGlobalCluster";
export type RdsGlobalCluster = import("./rdsGlobalCluster").RdsGlobalCluster;
export const RdsGlobalCluster: typeof import("./rdsGlobalCluster").RdsGlobalCluster = null as any;
utilities.lazyLoad(exports, ["RdsGlobalCluster"], () => require("./rdsGlobalCluster"));

export { RdsIntegrationArgs, RdsIntegrationState } from "./rdsIntegration";
export type RdsIntegration = import("./rdsIntegration").RdsIntegration;
export const RdsIntegration: typeof import("./rdsIntegration").RdsIntegration = null as any;
utilities.lazyLoad(exports, ["RdsIntegration"], () => require("./rdsIntegration"));

export { RdsReservedInstanceArgs, RdsReservedInstanceState } from "./rdsReservedInstance";
export type RdsReservedInstance = import("./rdsReservedInstance").RdsReservedInstance;
export const RdsReservedInstance: typeof import("./rdsReservedInstance").RdsReservedInstance = null as any;
utilities.lazyLoad(exports, ["RdsReservedInstance"], () => require("./rdsReservedInstance"));

export { RedshiftAuthenticationProfileArgs, RedshiftAuthenticationProfileState } from "./redshiftAuthenticationProfile";
export type RedshiftAuthenticationProfile = import("./redshiftAuthenticationProfile").RedshiftAuthenticationProfile;
export const RedshiftAuthenticationProfile: typeof import("./redshiftAuthenticationProfile").RedshiftAuthenticationProfile = null as any;
utilities.lazyLoad(exports, ["RedshiftAuthenticationProfile"], () => require("./redshiftAuthenticationProfile"));

export { RedshiftClusterArgs, RedshiftClusterState } from "./redshiftCluster";
export type RedshiftCluster = import("./redshiftCluster").RedshiftCluster;
export const RedshiftCluster: typeof import("./redshiftCluster").RedshiftCluster = null as any;
utilities.lazyLoad(exports, ["RedshiftCluster"], () => require("./redshiftCluster"));

export { RedshiftClusterIamRolesArgs, RedshiftClusterIamRolesState } from "./redshiftClusterIamRoles";
export type RedshiftClusterIamRoles = import("./redshiftClusterIamRoles").RedshiftClusterIamRoles;
export const RedshiftClusterIamRoles: typeof import("./redshiftClusterIamRoles").RedshiftClusterIamRoles = null as any;
utilities.lazyLoad(exports, ["RedshiftClusterIamRoles"], () => require("./redshiftClusterIamRoles"));

export { RedshiftClusterSnapshotArgs, RedshiftClusterSnapshotState } from "./redshiftClusterSnapshot";
export type RedshiftClusterSnapshot = import("./redshiftClusterSnapshot").RedshiftClusterSnapshot;
export const RedshiftClusterSnapshot: typeof import("./redshiftClusterSnapshot").RedshiftClusterSnapshot = null as any;
utilities.lazyLoad(exports, ["RedshiftClusterSnapshot"], () => require("./redshiftClusterSnapshot"));

export { RedshiftDataShareAuthorizationArgs, RedshiftDataShareAuthorizationState } from "./redshiftDataShareAuthorization";
export type RedshiftDataShareAuthorization = import("./redshiftDataShareAuthorization").RedshiftDataShareAuthorization;
export const RedshiftDataShareAuthorization: typeof import("./redshiftDataShareAuthorization").RedshiftDataShareAuthorization = null as any;
utilities.lazyLoad(exports, ["RedshiftDataShareAuthorization"], () => require("./redshiftDataShareAuthorization"));

export { RedshiftDataShareConsumerAssociationArgs, RedshiftDataShareConsumerAssociationState } from "./redshiftDataShareConsumerAssociation";
export type RedshiftDataShareConsumerAssociation = import("./redshiftDataShareConsumerAssociation").RedshiftDataShareConsumerAssociation;
export const RedshiftDataShareConsumerAssociation: typeof import("./redshiftDataShareConsumerAssociation").RedshiftDataShareConsumerAssociation = null as any;
utilities.lazyLoad(exports, ["RedshiftDataShareConsumerAssociation"], () => require("./redshiftDataShareConsumerAssociation"));

export { RedshiftEndpointAccessArgs, RedshiftEndpointAccessState } from "./redshiftEndpointAccess";
export type RedshiftEndpointAccess = import("./redshiftEndpointAccess").RedshiftEndpointAccess;
export const RedshiftEndpointAccess: typeof import("./redshiftEndpointAccess").RedshiftEndpointAccess = null as any;
utilities.lazyLoad(exports, ["RedshiftEndpointAccess"], () => require("./redshiftEndpointAccess"));

export { RedshiftEndpointAuthorizationArgs, RedshiftEndpointAuthorizationState } from "./redshiftEndpointAuthorization";
export type RedshiftEndpointAuthorization = import("./redshiftEndpointAuthorization").RedshiftEndpointAuthorization;
export const RedshiftEndpointAuthorization: typeof import("./redshiftEndpointAuthorization").RedshiftEndpointAuthorization = null as any;
utilities.lazyLoad(exports, ["RedshiftEndpointAuthorization"], () => require("./redshiftEndpointAuthorization"));

export { RedshiftEventSubscriptionArgs, RedshiftEventSubscriptionState } from "./redshiftEventSubscription";
export type RedshiftEventSubscription = import("./redshiftEventSubscription").RedshiftEventSubscription;
export const RedshiftEventSubscription: typeof import("./redshiftEventSubscription").RedshiftEventSubscription = null as any;
utilities.lazyLoad(exports, ["RedshiftEventSubscription"], () => require("./redshiftEventSubscription"));

export { RedshiftHsmClientCertificateArgs, RedshiftHsmClientCertificateState } from "./redshiftHsmClientCertificate";
export type RedshiftHsmClientCertificate = import("./redshiftHsmClientCertificate").RedshiftHsmClientCertificate;
export const RedshiftHsmClientCertificate: typeof import("./redshiftHsmClientCertificate").RedshiftHsmClientCertificate = null as any;
utilities.lazyLoad(exports, ["RedshiftHsmClientCertificate"], () => require("./redshiftHsmClientCertificate"));

export { RedshiftHsmConfigurationArgs, RedshiftHsmConfigurationState } from "./redshiftHsmConfiguration";
export type RedshiftHsmConfiguration = import("./redshiftHsmConfiguration").RedshiftHsmConfiguration;
export const RedshiftHsmConfiguration: typeof import("./redshiftHsmConfiguration").RedshiftHsmConfiguration = null as any;
utilities.lazyLoad(exports, ["RedshiftHsmConfiguration"], () => require("./redshiftHsmConfiguration"));

export { RedshiftLoggingArgs, RedshiftLoggingState } from "./redshiftLogging";
export type RedshiftLogging = import("./redshiftLogging").RedshiftLogging;
export const RedshiftLogging: typeof import("./redshiftLogging").RedshiftLogging = null as any;
utilities.lazyLoad(exports, ["RedshiftLogging"], () => require("./redshiftLogging"));

export { RedshiftParameterGroupArgs, RedshiftParameterGroupState } from "./redshiftParameterGroup";
export type RedshiftParameterGroup = import("./redshiftParameterGroup").RedshiftParameterGroup;
export const RedshiftParameterGroup: typeof import("./redshiftParameterGroup").RedshiftParameterGroup = null as any;
utilities.lazyLoad(exports, ["RedshiftParameterGroup"], () => require("./redshiftParameterGroup"));

export { RedshiftPartnerArgs, RedshiftPartnerState } from "./redshiftPartner";
export type RedshiftPartner = import("./redshiftPartner").RedshiftPartner;
export const RedshiftPartner: typeof import("./redshiftPartner").RedshiftPartner = null as any;
utilities.lazyLoad(exports, ["RedshiftPartner"], () => require("./redshiftPartner"));

export { RedshiftResourcePolicyArgs, RedshiftResourcePolicyState } from "./redshiftResourcePolicy";
export type RedshiftResourcePolicy = import("./redshiftResourcePolicy").RedshiftResourcePolicy;
export const RedshiftResourcePolicy: typeof import("./redshiftResourcePolicy").RedshiftResourcePolicy = null as any;
utilities.lazyLoad(exports, ["RedshiftResourcePolicy"], () => require("./redshiftResourcePolicy"));

export { RedshiftScheduledActionArgs, RedshiftScheduledActionState } from "./redshiftScheduledAction";
export type RedshiftScheduledAction = import("./redshiftScheduledAction").RedshiftScheduledAction;
export const RedshiftScheduledAction: typeof import("./redshiftScheduledAction").RedshiftScheduledAction = null as any;
utilities.lazyLoad(exports, ["RedshiftScheduledAction"], () => require("./redshiftScheduledAction"));

export { RedshiftSnapshotCopyArgs, RedshiftSnapshotCopyState } from "./redshiftSnapshotCopy";
export type RedshiftSnapshotCopy = import("./redshiftSnapshotCopy").RedshiftSnapshotCopy;
export const RedshiftSnapshotCopy: typeof import("./redshiftSnapshotCopy").RedshiftSnapshotCopy = null as any;
utilities.lazyLoad(exports, ["RedshiftSnapshotCopy"], () => require("./redshiftSnapshotCopy"));

export { RedshiftSnapshotCopyGrantArgs, RedshiftSnapshotCopyGrantState } from "./redshiftSnapshotCopyGrant";
export type RedshiftSnapshotCopyGrant = import("./redshiftSnapshotCopyGrant").RedshiftSnapshotCopyGrant;
export const RedshiftSnapshotCopyGrant: typeof import("./redshiftSnapshotCopyGrant").RedshiftSnapshotCopyGrant = null as any;
utilities.lazyLoad(exports, ["RedshiftSnapshotCopyGrant"], () => require("./redshiftSnapshotCopyGrant"));

export { RedshiftSnapshotScheduleArgs, RedshiftSnapshotScheduleState } from "./redshiftSnapshotSchedule";
export type RedshiftSnapshotSchedule = import("./redshiftSnapshotSchedule").RedshiftSnapshotSchedule;
export const RedshiftSnapshotSchedule: typeof import("./redshiftSnapshotSchedule").RedshiftSnapshotSchedule = null as any;
utilities.lazyLoad(exports, ["RedshiftSnapshotSchedule"], () => require("./redshiftSnapshotSchedule"));

export { RedshiftSnapshotScheduleAssociationArgs, RedshiftSnapshotScheduleAssociationState } from "./redshiftSnapshotScheduleAssociation";
export type RedshiftSnapshotScheduleAssociation = import("./redshiftSnapshotScheduleAssociation").RedshiftSnapshotScheduleAssociation;
export const RedshiftSnapshotScheduleAssociation: typeof import("./redshiftSnapshotScheduleAssociation").RedshiftSnapshotScheduleAssociation = null as any;
utilities.lazyLoad(exports, ["RedshiftSnapshotScheduleAssociation"], () => require("./redshiftSnapshotScheduleAssociation"));

export { RedshiftSubnetGroupArgs, RedshiftSubnetGroupState } from "./redshiftSubnetGroup";
export type RedshiftSubnetGroup = import("./redshiftSubnetGroup").RedshiftSubnetGroup;
export const RedshiftSubnetGroup: typeof import("./redshiftSubnetGroup").RedshiftSubnetGroup = null as any;
utilities.lazyLoad(exports, ["RedshiftSubnetGroup"], () => require("./redshiftSubnetGroup"));

export { RedshiftUsageLimitArgs, RedshiftUsageLimitState } from "./redshiftUsageLimit";
export type RedshiftUsageLimit = import("./redshiftUsageLimit").RedshiftUsageLimit;
export const RedshiftUsageLimit: typeof import("./redshiftUsageLimit").RedshiftUsageLimit = null as any;
utilities.lazyLoad(exports, ["RedshiftUsageLimit"], () => require("./redshiftUsageLimit"));

export { RedshiftdataStatementArgs, RedshiftdataStatementState } from "./redshiftdataStatement";
export type RedshiftdataStatement = import("./redshiftdataStatement").RedshiftdataStatement;
export const RedshiftdataStatement: typeof import("./redshiftdataStatement").RedshiftdataStatement = null as any;
utilities.lazyLoad(exports, ["RedshiftdataStatement"], () => require("./redshiftdataStatement"));

export { RedshiftserverlessCustomDomainAssociationArgs, RedshiftserverlessCustomDomainAssociationState } from "./redshiftserverlessCustomDomainAssociation";
export type RedshiftserverlessCustomDomainAssociation = import("./redshiftserverlessCustomDomainAssociation").RedshiftserverlessCustomDomainAssociation;
export const RedshiftserverlessCustomDomainAssociation: typeof import("./redshiftserverlessCustomDomainAssociation").RedshiftserverlessCustomDomainAssociation = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessCustomDomainAssociation"], () => require("./redshiftserverlessCustomDomainAssociation"));

export { RedshiftserverlessEndpointAccessArgs, RedshiftserverlessEndpointAccessState } from "./redshiftserverlessEndpointAccess";
export type RedshiftserverlessEndpointAccess = import("./redshiftserverlessEndpointAccess").RedshiftserverlessEndpointAccess;
export const RedshiftserverlessEndpointAccess: typeof import("./redshiftserverlessEndpointAccess").RedshiftserverlessEndpointAccess = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessEndpointAccess"], () => require("./redshiftserverlessEndpointAccess"));

export { RedshiftserverlessNamespaceArgs, RedshiftserverlessNamespaceState } from "./redshiftserverlessNamespace";
export type RedshiftserverlessNamespace = import("./redshiftserverlessNamespace").RedshiftserverlessNamespace;
export const RedshiftserverlessNamespace: typeof import("./redshiftserverlessNamespace").RedshiftserverlessNamespace = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessNamespace"], () => require("./redshiftserverlessNamespace"));

export { RedshiftserverlessResourcePolicyArgs, RedshiftserverlessResourcePolicyState } from "./redshiftserverlessResourcePolicy";
export type RedshiftserverlessResourcePolicy = import("./redshiftserverlessResourcePolicy").RedshiftserverlessResourcePolicy;
export const RedshiftserverlessResourcePolicy: typeof import("./redshiftserverlessResourcePolicy").RedshiftserverlessResourcePolicy = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessResourcePolicy"], () => require("./redshiftserverlessResourcePolicy"));

export { RedshiftserverlessSnapshotArgs, RedshiftserverlessSnapshotState } from "./redshiftserverlessSnapshot";
export type RedshiftserverlessSnapshot = import("./redshiftserverlessSnapshot").RedshiftserverlessSnapshot;
export const RedshiftserverlessSnapshot: typeof import("./redshiftserverlessSnapshot").RedshiftserverlessSnapshot = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessSnapshot"], () => require("./redshiftserverlessSnapshot"));

export { RedshiftserverlessUsageLimitArgs, RedshiftserverlessUsageLimitState } from "./redshiftserverlessUsageLimit";
export type RedshiftserverlessUsageLimit = import("./redshiftserverlessUsageLimit").RedshiftserverlessUsageLimit;
export const RedshiftserverlessUsageLimit: typeof import("./redshiftserverlessUsageLimit").RedshiftserverlessUsageLimit = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessUsageLimit"], () => require("./redshiftserverlessUsageLimit"));

export { RedshiftserverlessWorkgroupArgs, RedshiftserverlessWorkgroupState } from "./redshiftserverlessWorkgroup";
export type RedshiftserverlessWorkgroup = import("./redshiftserverlessWorkgroup").RedshiftserverlessWorkgroup;
export const RedshiftserverlessWorkgroup: typeof import("./redshiftserverlessWorkgroup").RedshiftserverlessWorkgroup = null as any;
utilities.lazyLoad(exports, ["RedshiftserverlessWorkgroup"], () => require("./redshiftserverlessWorkgroup"));

export { RekognitionCollectionArgs, RekognitionCollectionState } from "./rekognitionCollection";
export type RekognitionCollection = import("./rekognitionCollection").RekognitionCollection;
export const RekognitionCollection: typeof import("./rekognitionCollection").RekognitionCollection = null as any;
utilities.lazyLoad(exports, ["RekognitionCollection"], () => require("./rekognitionCollection"));

export { RekognitionProjectArgs, RekognitionProjectState } from "./rekognitionProject";
export type RekognitionProject = import("./rekognitionProject").RekognitionProject;
export const RekognitionProject: typeof import("./rekognitionProject").RekognitionProject = null as any;
utilities.lazyLoad(exports, ["RekognitionProject"], () => require("./rekognitionProject"));

export { RekognitionStreamProcessorArgs, RekognitionStreamProcessorState } from "./rekognitionStreamProcessor";
export type RekognitionStreamProcessor = import("./rekognitionStreamProcessor").RekognitionStreamProcessor;
export const RekognitionStreamProcessor: typeof import("./rekognitionStreamProcessor").RekognitionStreamProcessor = null as any;
utilities.lazyLoad(exports, ["RekognitionStreamProcessor"], () => require("./rekognitionStreamProcessor"));

export { Resourceexplorer2IndexArgs, Resourceexplorer2IndexState } from "./resourceexplorer2Index";
export type Resourceexplorer2Index = import("./resourceexplorer2Index").Resourceexplorer2Index;
export const Resourceexplorer2Index: typeof import("./resourceexplorer2Index").Resourceexplorer2Index = null as any;
utilities.lazyLoad(exports, ["Resourceexplorer2Index"], () => require("./resourceexplorer2Index"));

export { Resourceexplorer2ViewArgs, Resourceexplorer2ViewState } from "./resourceexplorer2View";
export type Resourceexplorer2View = import("./resourceexplorer2View").Resourceexplorer2View;
export const Resourceexplorer2View: typeof import("./resourceexplorer2View").Resourceexplorer2View = null as any;
utilities.lazyLoad(exports, ["Resourceexplorer2View"], () => require("./resourceexplorer2View"));

export { ResourcegroupsGroupArgs, ResourcegroupsGroupState } from "./resourcegroupsGroup";
export type ResourcegroupsGroup = import("./resourcegroupsGroup").ResourcegroupsGroup;
export const ResourcegroupsGroup: typeof import("./resourcegroupsGroup").ResourcegroupsGroup = null as any;
utilities.lazyLoad(exports, ["ResourcegroupsGroup"], () => require("./resourcegroupsGroup"));

export { ResourcegroupsResourceArgs, ResourcegroupsResourceState } from "./resourcegroupsResource";
export type ResourcegroupsResource = import("./resourcegroupsResource").ResourcegroupsResource;
export const ResourcegroupsResource: typeof import("./resourcegroupsResource").ResourcegroupsResource = null as any;
utilities.lazyLoad(exports, ["ResourcegroupsResource"], () => require("./resourcegroupsResource"));

export { RolesanywhereProfileArgs, RolesanywhereProfileState } from "./rolesanywhereProfile";
export type RolesanywhereProfile = import("./rolesanywhereProfile").RolesanywhereProfile;
export const RolesanywhereProfile: typeof import("./rolesanywhereProfile").RolesanywhereProfile = null as any;
utilities.lazyLoad(exports, ["RolesanywhereProfile"], () => require("./rolesanywhereProfile"));

export { RolesanywhereTrustAnchorArgs, RolesanywhereTrustAnchorState } from "./rolesanywhereTrustAnchor";
export type RolesanywhereTrustAnchor = import("./rolesanywhereTrustAnchor").RolesanywhereTrustAnchor;
export const RolesanywhereTrustAnchor: typeof import("./rolesanywhereTrustAnchor").RolesanywhereTrustAnchor = null as any;
utilities.lazyLoad(exports, ["RolesanywhereTrustAnchor"], () => require("./rolesanywhereTrustAnchor"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { Route53CidrCollectionArgs, Route53CidrCollectionState } from "./route53CidrCollection";
export type Route53CidrCollection = import("./route53CidrCollection").Route53CidrCollection;
export const Route53CidrCollection: typeof import("./route53CidrCollection").Route53CidrCollection = null as any;
utilities.lazyLoad(exports, ["Route53CidrCollection"], () => require("./route53CidrCollection"));

export { Route53CidrLocationArgs, Route53CidrLocationState } from "./route53CidrLocation";
export type Route53CidrLocation = import("./route53CidrLocation").Route53CidrLocation;
export const Route53CidrLocation: typeof import("./route53CidrLocation").Route53CidrLocation = null as any;
utilities.lazyLoad(exports, ["Route53CidrLocation"], () => require("./route53CidrLocation"));

export { Route53DelegationSetArgs, Route53DelegationSetState } from "./route53DelegationSet";
export type Route53DelegationSet = import("./route53DelegationSet").Route53DelegationSet;
export const Route53DelegationSet: typeof import("./route53DelegationSet").Route53DelegationSet = null as any;
utilities.lazyLoad(exports, ["Route53DelegationSet"], () => require("./route53DelegationSet"));

export { Route53HealthCheckArgs, Route53HealthCheckState } from "./route53HealthCheck";
export type Route53HealthCheck = import("./route53HealthCheck").Route53HealthCheck;
export const Route53HealthCheck: typeof import("./route53HealthCheck").Route53HealthCheck = null as any;
utilities.lazyLoad(exports, ["Route53HealthCheck"], () => require("./route53HealthCheck"));

export { Route53HostedZoneDnssecArgs, Route53HostedZoneDnssecState } from "./route53HostedZoneDnssec";
export type Route53HostedZoneDnssec = import("./route53HostedZoneDnssec").Route53HostedZoneDnssec;
export const Route53HostedZoneDnssec: typeof import("./route53HostedZoneDnssec").Route53HostedZoneDnssec = null as any;
utilities.lazyLoad(exports, ["Route53HostedZoneDnssec"], () => require("./route53HostedZoneDnssec"));

export { Route53KeySigningKeyArgs, Route53KeySigningKeyState } from "./route53KeySigningKey";
export type Route53KeySigningKey = import("./route53KeySigningKey").Route53KeySigningKey;
export const Route53KeySigningKey: typeof import("./route53KeySigningKey").Route53KeySigningKey = null as any;
utilities.lazyLoad(exports, ["Route53KeySigningKey"], () => require("./route53KeySigningKey"));

export { Route53QueryLogArgs, Route53QueryLogState } from "./route53QueryLog";
export type Route53QueryLog = import("./route53QueryLog").Route53QueryLog;
export const Route53QueryLog: typeof import("./route53QueryLog").Route53QueryLog = null as any;
utilities.lazyLoad(exports, ["Route53QueryLog"], () => require("./route53QueryLog"));

export { Route53RecordArgs, Route53RecordState } from "./route53Record";
export type Route53Record = import("./route53Record").Route53Record;
export const Route53Record: typeof import("./route53Record").Route53Record = null as any;
utilities.lazyLoad(exports, ["Route53Record"], () => require("./route53Record"));

export { Route53ResolverConfigArgs, Route53ResolverConfigState } from "./route53ResolverConfig";
export type Route53ResolverConfig = import("./route53ResolverConfig").Route53ResolverConfig;
export const Route53ResolverConfig: typeof import("./route53ResolverConfig").Route53ResolverConfig = null as any;
utilities.lazyLoad(exports, ["Route53ResolverConfig"], () => require("./route53ResolverConfig"));

export { Route53ResolverDnssecConfigArgs, Route53ResolverDnssecConfigState } from "./route53ResolverDnssecConfig";
export type Route53ResolverDnssecConfig = import("./route53ResolverDnssecConfig").Route53ResolverDnssecConfig;
export const Route53ResolverDnssecConfig: typeof import("./route53ResolverDnssecConfig").Route53ResolverDnssecConfig = null as any;
utilities.lazyLoad(exports, ["Route53ResolverDnssecConfig"], () => require("./route53ResolverDnssecConfig"));

export { Route53ResolverEndpointArgs, Route53ResolverEndpointState } from "./route53ResolverEndpoint";
export type Route53ResolverEndpoint = import("./route53ResolverEndpoint").Route53ResolverEndpoint;
export const Route53ResolverEndpoint: typeof import("./route53ResolverEndpoint").Route53ResolverEndpoint = null as any;
utilities.lazyLoad(exports, ["Route53ResolverEndpoint"], () => require("./route53ResolverEndpoint"));

export { Route53ResolverFirewallConfigArgs, Route53ResolverFirewallConfigState } from "./route53ResolverFirewallConfig";
export type Route53ResolverFirewallConfig = import("./route53ResolverFirewallConfig").Route53ResolverFirewallConfig;
export const Route53ResolverFirewallConfig: typeof import("./route53ResolverFirewallConfig").Route53ResolverFirewallConfig = null as any;
utilities.lazyLoad(exports, ["Route53ResolverFirewallConfig"], () => require("./route53ResolverFirewallConfig"));

export { Route53ResolverFirewallDomainListArgs, Route53ResolverFirewallDomainListState } from "./route53ResolverFirewallDomainList";
export type Route53ResolverFirewallDomainList = import("./route53ResolverFirewallDomainList").Route53ResolverFirewallDomainList;
export const Route53ResolverFirewallDomainList: typeof import("./route53ResolverFirewallDomainList").Route53ResolverFirewallDomainList = null as any;
utilities.lazyLoad(exports, ["Route53ResolverFirewallDomainList"], () => require("./route53ResolverFirewallDomainList"));

export { Route53ResolverFirewallRuleArgs, Route53ResolverFirewallRuleState } from "./route53ResolverFirewallRule";
export type Route53ResolverFirewallRule = import("./route53ResolverFirewallRule").Route53ResolverFirewallRule;
export const Route53ResolverFirewallRule: typeof import("./route53ResolverFirewallRule").Route53ResolverFirewallRule = null as any;
utilities.lazyLoad(exports, ["Route53ResolverFirewallRule"], () => require("./route53ResolverFirewallRule"));

export { Route53ResolverFirewallRuleGroupArgs, Route53ResolverFirewallRuleGroupState } from "./route53ResolverFirewallRuleGroup";
export type Route53ResolverFirewallRuleGroup = import("./route53ResolverFirewallRuleGroup").Route53ResolverFirewallRuleGroup;
export const Route53ResolverFirewallRuleGroup: typeof import("./route53ResolverFirewallRuleGroup").Route53ResolverFirewallRuleGroup = null as any;
utilities.lazyLoad(exports, ["Route53ResolverFirewallRuleGroup"], () => require("./route53ResolverFirewallRuleGroup"));

export { Route53ResolverFirewallRuleGroupAssociationArgs, Route53ResolverFirewallRuleGroupAssociationState } from "./route53ResolverFirewallRuleGroupAssociation";
export type Route53ResolverFirewallRuleGroupAssociation = import("./route53ResolverFirewallRuleGroupAssociation").Route53ResolverFirewallRuleGroupAssociation;
export const Route53ResolverFirewallRuleGroupAssociation: typeof import("./route53ResolverFirewallRuleGroupAssociation").Route53ResolverFirewallRuleGroupAssociation = null as any;
utilities.lazyLoad(exports, ["Route53ResolverFirewallRuleGroupAssociation"], () => require("./route53ResolverFirewallRuleGroupAssociation"));

export { Route53ResolverQueryLogConfigArgs, Route53ResolverQueryLogConfigState } from "./route53ResolverQueryLogConfig";
export type Route53ResolverQueryLogConfig = import("./route53ResolverQueryLogConfig").Route53ResolverQueryLogConfig;
export const Route53ResolverQueryLogConfig: typeof import("./route53ResolverQueryLogConfig").Route53ResolverQueryLogConfig = null as any;
utilities.lazyLoad(exports, ["Route53ResolverQueryLogConfig"], () => require("./route53ResolverQueryLogConfig"));

export { Route53ResolverQueryLogConfigAssociationArgs, Route53ResolverQueryLogConfigAssociationState } from "./route53ResolverQueryLogConfigAssociation";
export type Route53ResolverQueryLogConfigAssociation = import("./route53ResolverQueryLogConfigAssociation").Route53ResolverQueryLogConfigAssociation;
export const Route53ResolverQueryLogConfigAssociation: typeof import("./route53ResolverQueryLogConfigAssociation").Route53ResolverQueryLogConfigAssociation = null as any;
utilities.lazyLoad(exports, ["Route53ResolverQueryLogConfigAssociation"], () => require("./route53ResolverQueryLogConfigAssociation"));

export { Route53ResolverRuleArgs, Route53ResolverRuleState } from "./route53ResolverRule";
export type Route53ResolverRule = import("./route53ResolverRule").Route53ResolverRule;
export const Route53ResolverRule: typeof import("./route53ResolverRule").Route53ResolverRule = null as any;
utilities.lazyLoad(exports, ["Route53ResolverRule"], () => require("./route53ResolverRule"));

export { Route53ResolverRuleAssociationArgs, Route53ResolverRuleAssociationState } from "./route53ResolverRuleAssociation";
export type Route53ResolverRuleAssociation = import("./route53ResolverRuleAssociation").Route53ResolverRuleAssociation;
export const Route53ResolverRuleAssociation: typeof import("./route53ResolverRuleAssociation").Route53ResolverRuleAssociation = null as any;
utilities.lazyLoad(exports, ["Route53ResolverRuleAssociation"], () => require("./route53ResolverRuleAssociation"));

export { Route53TrafficPolicyArgs, Route53TrafficPolicyState } from "./route53TrafficPolicy";
export type Route53TrafficPolicy = import("./route53TrafficPolicy").Route53TrafficPolicy;
export const Route53TrafficPolicy: typeof import("./route53TrafficPolicy").Route53TrafficPolicy = null as any;
utilities.lazyLoad(exports, ["Route53TrafficPolicy"], () => require("./route53TrafficPolicy"));

export { Route53TrafficPolicyInstanceArgs, Route53TrafficPolicyInstanceState } from "./route53TrafficPolicyInstance";
export type Route53TrafficPolicyInstance = import("./route53TrafficPolicyInstance").Route53TrafficPolicyInstance;
export const Route53TrafficPolicyInstance: typeof import("./route53TrafficPolicyInstance").Route53TrafficPolicyInstance = null as any;
utilities.lazyLoad(exports, ["Route53TrafficPolicyInstance"], () => require("./route53TrafficPolicyInstance"));

export { Route53VpcAssociationAuthorizationArgs, Route53VpcAssociationAuthorizationState } from "./route53VpcAssociationAuthorization";
export type Route53VpcAssociationAuthorization = import("./route53VpcAssociationAuthorization").Route53VpcAssociationAuthorization;
export const Route53VpcAssociationAuthorization: typeof import("./route53VpcAssociationAuthorization").Route53VpcAssociationAuthorization = null as any;
utilities.lazyLoad(exports, ["Route53VpcAssociationAuthorization"], () => require("./route53VpcAssociationAuthorization"));

export { Route53ZoneArgs, Route53ZoneState } from "./route53Zone";
export type Route53Zone = import("./route53Zone").Route53Zone;
export const Route53Zone: typeof import("./route53Zone").Route53Zone = null as any;
utilities.lazyLoad(exports, ["Route53Zone"], () => require("./route53Zone"));

export { Route53ZoneAssociationArgs, Route53ZoneAssociationState } from "./route53ZoneAssociation";
export type Route53ZoneAssociation = import("./route53ZoneAssociation").Route53ZoneAssociation;
export const Route53ZoneAssociation: typeof import("./route53ZoneAssociation").Route53ZoneAssociation = null as any;
utilities.lazyLoad(exports, ["Route53ZoneAssociation"], () => require("./route53ZoneAssociation"));

export { Route53domainsDelegationSignerRecordArgs, Route53domainsDelegationSignerRecordState } from "./route53domainsDelegationSignerRecord";
export type Route53domainsDelegationSignerRecord = import("./route53domainsDelegationSignerRecord").Route53domainsDelegationSignerRecord;
export const Route53domainsDelegationSignerRecord: typeof import("./route53domainsDelegationSignerRecord").Route53domainsDelegationSignerRecord = null as any;
utilities.lazyLoad(exports, ["Route53domainsDelegationSignerRecord"], () => require("./route53domainsDelegationSignerRecord"));

export { Route53domainsRegisteredDomainArgs, Route53domainsRegisteredDomainState } from "./route53domainsRegisteredDomain";
export type Route53domainsRegisteredDomain = import("./route53domainsRegisteredDomain").Route53domainsRegisteredDomain;
export const Route53domainsRegisteredDomain: typeof import("./route53domainsRegisteredDomain").Route53domainsRegisteredDomain = null as any;
utilities.lazyLoad(exports, ["Route53domainsRegisteredDomain"], () => require("./route53domainsRegisteredDomain"));

export { Route53recoverycontrolconfigClusterArgs, Route53recoverycontrolconfigClusterState } from "./route53recoverycontrolconfigCluster";
export type Route53recoverycontrolconfigCluster = import("./route53recoverycontrolconfigCluster").Route53recoverycontrolconfigCluster;
export const Route53recoverycontrolconfigCluster: typeof import("./route53recoverycontrolconfigCluster").Route53recoverycontrolconfigCluster = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolconfigCluster"], () => require("./route53recoverycontrolconfigCluster"));

export { Route53recoverycontrolconfigControlPanelArgs, Route53recoverycontrolconfigControlPanelState } from "./route53recoverycontrolconfigControlPanel";
export type Route53recoverycontrolconfigControlPanel = import("./route53recoverycontrolconfigControlPanel").Route53recoverycontrolconfigControlPanel;
export const Route53recoverycontrolconfigControlPanel: typeof import("./route53recoverycontrolconfigControlPanel").Route53recoverycontrolconfigControlPanel = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolconfigControlPanel"], () => require("./route53recoverycontrolconfigControlPanel"));

export { Route53recoverycontrolconfigRoutingControlArgs, Route53recoverycontrolconfigRoutingControlState } from "./route53recoverycontrolconfigRoutingControl";
export type Route53recoverycontrolconfigRoutingControl = import("./route53recoverycontrolconfigRoutingControl").Route53recoverycontrolconfigRoutingControl;
export const Route53recoverycontrolconfigRoutingControl: typeof import("./route53recoverycontrolconfigRoutingControl").Route53recoverycontrolconfigRoutingControl = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolconfigRoutingControl"], () => require("./route53recoverycontrolconfigRoutingControl"));

export { Route53recoverycontrolconfigSafetyRuleArgs, Route53recoverycontrolconfigSafetyRuleState } from "./route53recoverycontrolconfigSafetyRule";
export type Route53recoverycontrolconfigSafetyRule = import("./route53recoverycontrolconfigSafetyRule").Route53recoverycontrolconfigSafetyRule;
export const Route53recoverycontrolconfigSafetyRule: typeof import("./route53recoverycontrolconfigSafetyRule").Route53recoverycontrolconfigSafetyRule = null as any;
utilities.lazyLoad(exports, ["Route53recoverycontrolconfigSafetyRule"], () => require("./route53recoverycontrolconfigSafetyRule"));

export { Route53recoveryreadinessCellArgs, Route53recoveryreadinessCellState } from "./route53recoveryreadinessCell";
export type Route53recoveryreadinessCell = import("./route53recoveryreadinessCell").Route53recoveryreadinessCell;
export const Route53recoveryreadinessCell: typeof import("./route53recoveryreadinessCell").Route53recoveryreadinessCell = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessCell"], () => require("./route53recoveryreadinessCell"));

export { Route53recoveryreadinessReadinessCheckArgs, Route53recoveryreadinessReadinessCheckState } from "./route53recoveryreadinessReadinessCheck";
export type Route53recoveryreadinessReadinessCheck = import("./route53recoveryreadinessReadinessCheck").Route53recoveryreadinessReadinessCheck;
export const Route53recoveryreadinessReadinessCheck: typeof import("./route53recoveryreadinessReadinessCheck").Route53recoveryreadinessReadinessCheck = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessReadinessCheck"], () => require("./route53recoveryreadinessReadinessCheck"));

export { Route53recoveryreadinessRecoveryGroupArgs, Route53recoveryreadinessRecoveryGroupState } from "./route53recoveryreadinessRecoveryGroup";
export type Route53recoveryreadinessRecoveryGroup = import("./route53recoveryreadinessRecoveryGroup").Route53recoveryreadinessRecoveryGroup;
export const Route53recoveryreadinessRecoveryGroup: typeof import("./route53recoveryreadinessRecoveryGroup").Route53recoveryreadinessRecoveryGroup = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessRecoveryGroup"], () => require("./route53recoveryreadinessRecoveryGroup"));

export { Route53recoveryreadinessResourceSetArgs, Route53recoveryreadinessResourceSetState } from "./route53recoveryreadinessResourceSet";
export type Route53recoveryreadinessResourceSet = import("./route53recoveryreadinessResourceSet").Route53recoveryreadinessResourceSet;
export const Route53recoveryreadinessResourceSet: typeof import("./route53recoveryreadinessResourceSet").Route53recoveryreadinessResourceSet = null as any;
utilities.lazyLoad(exports, ["Route53recoveryreadinessResourceSet"], () => require("./route53recoveryreadinessResourceSet"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAssociationArgs, RouteTableAssociationState } from "./routeTableAssociation";
export type RouteTableAssociation = import("./routeTableAssociation").RouteTableAssociation;
export const RouteTableAssociation: typeof import("./routeTableAssociation").RouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));

export { RumAppMonitorArgs, RumAppMonitorState } from "./rumAppMonitor";
export type RumAppMonitor = import("./rumAppMonitor").RumAppMonitor;
export const RumAppMonitor: typeof import("./rumAppMonitor").RumAppMonitor = null as any;
utilities.lazyLoad(exports, ["RumAppMonitor"], () => require("./rumAppMonitor"));

export { RumMetricsDestinationArgs, RumMetricsDestinationState } from "./rumMetricsDestination";
export type RumMetricsDestination = import("./rumMetricsDestination").RumMetricsDestination;
export const RumMetricsDestination: typeof import("./rumMetricsDestination").RumMetricsDestination = null as any;
utilities.lazyLoad(exports, ["RumMetricsDestination"], () => require("./rumMetricsDestination"));

export { S3AccessPointArgs, S3AccessPointState } from "./s3accessPoint";
export type S3AccessPoint = import("./s3accessPoint").S3AccessPoint;
export const S3AccessPoint: typeof import("./s3accessPoint").S3AccessPoint = null as any;
utilities.lazyLoad(exports, ["S3AccessPoint"], () => require("./s3accessPoint"));

export { S3AccountPublicAccessBlockArgs, S3AccountPublicAccessBlockState } from "./s3accountPublicAccessBlock";
export type S3AccountPublicAccessBlock = import("./s3accountPublicAccessBlock").S3AccountPublicAccessBlock;
export const S3AccountPublicAccessBlock: typeof import("./s3accountPublicAccessBlock").S3AccountPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["S3AccountPublicAccessBlock"], () => require("./s3accountPublicAccessBlock"));

export { S3BucketArgs, S3BucketState } from "./s3bucket";
export type S3Bucket = import("./s3bucket").S3Bucket;
export const S3Bucket: typeof import("./s3bucket").S3Bucket = null as any;
utilities.lazyLoad(exports, ["S3Bucket"], () => require("./s3bucket"));

export { S3BucketAccelerateConfigurationArgs, S3BucketAccelerateConfigurationState } from "./s3bucketAccelerateConfiguration";
export type S3BucketAccelerateConfiguration = import("./s3bucketAccelerateConfiguration").S3BucketAccelerateConfiguration;
export const S3BucketAccelerateConfiguration: typeof import("./s3bucketAccelerateConfiguration").S3BucketAccelerateConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketAccelerateConfiguration"], () => require("./s3bucketAccelerateConfiguration"));

export { S3BucketAclArgs, S3BucketAclState } from "./s3bucketAcl";
export type S3BucketAcl = import("./s3bucketAcl").S3BucketAcl;
export const S3BucketAcl: typeof import("./s3bucketAcl").S3BucketAcl = null as any;
utilities.lazyLoad(exports, ["S3BucketAcl"], () => require("./s3bucketAcl"));

export { S3BucketAnalyticsConfigurationArgs, S3BucketAnalyticsConfigurationState } from "./s3bucketAnalyticsConfiguration";
export type S3BucketAnalyticsConfiguration = import("./s3bucketAnalyticsConfiguration").S3BucketAnalyticsConfiguration;
export const S3BucketAnalyticsConfiguration: typeof import("./s3bucketAnalyticsConfiguration").S3BucketAnalyticsConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketAnalyticsConfiguration"], () => require("./s3bucketAnalyticsConfiguration"));

export { S3BucketCorsConfigurationArgs, S3BucketCorsConfigurationState } from "./s3bucketCorsConfiguration";
export type S3BucketCorsConfiguration = import("./s3bucketCorsConfiguration").S3BucketCorsConfiguration;
export const S3BucketCorsConfiguration: typeof import("./s3bucketCorsConfiguration").S3BucketCorsConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketCorsConfiguration"], () => require("./s3bucketCorsConfiguration"));

export { S3BucketIntelligentTieringConfigurationArgs, S3BucketIntelligentTieringConfigurationState } from "./s3bucketIntelligentTieringConfiguration";
export type S3BucketIntelligentTieringConfiguration = import("./s3bucketIntelligentTieringConfiguration").S3BucketIntelligentTieringConfiguration;
export const S3BucketIntelligentTieringConfiguration: typeof import("./s3bucketIntelligentTieringConfiguration").S3BucketIntelligentTieringConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketIntelligentTieringConfiguration"], () => require("./s3bucketIntelligentTieringConfiguration"));

export { S3BucketInventoryArgs, S3BucketInventoryState } from "./s3bucketInventory";
export type S3BucketInventory = import("./s3bucketInventory").S3BucketInventory;
export const S3BucketInventory: typeof import("./s3bucketInventory").S3BucketInventory = null as any;
utilities.lazyLoad(exports, ["S3BucketInventory"], () => require("./s3bucketInventory"));

export { S3BucketLifecycleConfigurationArgs, S3BucketLifecycleConfigurationState } from "./s3bucketLifecycleConfiguration";
export type S3BucketLifecycleConfiguration = import("./s3bucketLifecycleConfiguration").S3BucketLifecycleConfiguration;
export const S3BucketLifecycleConfiguration: typeof import("./s3bucketLifecycleConfiguration").S3BucketLifecycleConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketLifecycleConfiguration"], () => require("./s3bucketLifecycleConfiguration"));

export { S3BucketLoggingArgs, S3BucketLoggingState } from "./s3bucketLogging";
export type S3BucketLogging = import("./s3bucketLogging").S3BucketLogging;
export const S3BucketLogging: typeof import("./s3bucketLogging").S3BucketLogging = null as any;
utilities.lazyLoad(exports, ["S3BucketLogging"], () => require("./s3bucketLogging"));

export { S3BucketMetricArgs, S3BucketMetricState } from "./s3bucketMetric";
export type S3BucketMetric = import("./s3bucketMetric").S3BucketMetric;
export const S3BucketMetric: typeof import("./s3bucketMetric").S3BucketMetric = null as any;
utilities.lazyLoad(exports, ["S3BucketMetric"], () => require("./s3bucketMetric"));

export { S3BucketNotificationArgs, S3BucketNotificationState } from "./s3bucketNotification";
export type S3BucketNotification = import("./s3bucketNotification").S3BucketNotification;
export const S3BucketNotification: typeof import("./s3bucketNotification").S3BucketNotification = null as any;
utilities.lazyLoad(exports, ["S3BucketNotification"], () => require("./s3bucketNotification"));

export { S3BucketObjectArgs, S3BucketObjectState } from "./s3bucketObject";
export type S3BucketObject = import("./s3bucketObject").S3BucketObject;
export const S3BucketObject: typeof import("./s3bucketObject").S3BucketObject = null as any;
utilities.lazyLoad(exports, ["S3BucketObject"], () => require("./s3bucketObject"));

export { S3BucketObjectLockConfigurationArgs, S3BucketObjectLockConfigurationState } from "./s3bucketObjectLockConfiguration";
export type S3BucketObjectLockConfiguration = import("./s3bucketObjectLockConfiguration").S3BucketObjectLockConfiguration;
export const S3BucketObjectLockConfiguration: typeof import("./s3bucketObjectLockConfiguration").S3BucketObjectLockConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketObjectLockConfiguration"], () => require("./s3bucketObjectLockConfiguration"));

export { S3BucketOwnershipControlsArgs, S3BucketOwnershipControlsState } from "./s3bucketOwnershipControls";
export type S3BucketOwnershipControls = import("./s3bucketOwnershipControls").S3BucketOwnershipControls;
export const S3BucketOwnershipControls: typeof import("./s3bucketOwnershipControls").S3BucketOwnershipControls = null as any;
utilities.lazyLoad(exports, ["S3BucketOwnershipControls"], () => require("./s3bucketOwnershipControls"));

export { S3BucketPolicyArgs, S3BucketPolicyState } from "./s3bucketPolicy";
export type S3BucketPolicy = import("./s3bucketPolicy").S3BucketPolicy;
export const S3BucketPolicy: typeof import("./s3bucketPolicy").S3BucketPolicy = null as any;
utilities.lazyLoad(exports, ["S3BucketPolicy"], () => require("./s3bucketPolicy"));

export { S3BucketPublicAccessBlockArgs, S3BucketPublicAccessBlockState } from "./s3bucketPublicAccessBlock";
export type S3BucketPublicAccessBlock = import("./s3bucketPublicAccessBlock").S3BucketPublicAccessBlock;
export const S3BucketPublicAccessBlock: typeof import("./s3bucketPublicAccessBlock").S3BucketPublicAccessBlock = null as any;
utilities.lazyLoad(exports, ["S3BucketPublicAccessBlock"], () => require("./s3bucketPublicAccessBlock"));

export { S3BucketReplicationConfigurationArgs, S3BucketReplicationConfigurationState } from "./s3bucketReplicationConfiguration";
export type S3BucketReplicationConfiguration = import("./s3bucketReplicationConfiguration").S3BucketReplicationConfiguration;
export const S3BucketReplicationConfiguration: typeof import("./s3bucketReplicationConfiguration").S3BucketReplicationConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketReplicationConfiguration"], () => require("./s3bucketReplicationConfiguration"));

export { S3BucketRequestPaymentConfigurationArgs, S3BucketRequestPaymentConfigurationState } from "./s3bucketRequestPaymentConfiguration";
export type S3BucketRequestPaymentConfiguration = import("./s3bucketRequestPaymentConfiguration").S3BucketRequestPaymentConfiguration;
export const S3BucketRequestPaymentConfiguration: typeof import("./s3bucketRequestPaymentConfiguration").S3BucketRequestPaymentConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketRequestPaymentConfiguration"], () => require("./s3bucketRequestPaymentConfiguration"));

export { S3BucketServerSideEncryptionConfigurationArgs, S3BucketServerSideEncryptionConfigurationState } from "./s3bucketServerSideEncryptionConfiguration";
export type S3BucketServerSideEncryptionConfiguration = import("./s3bucketServerSideEncryptionConfiguration").S3BucketServerSideEncryptionConfiguration;
export const S3BucketServerSideEncryptionConfiguration: typeof import("./s3bucketServerSideEncryptionConfiguration").S3BucketServerSideEncryptionConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketServerSideEncryptionConfiguration"], () => require("./s3bucketServerSideEncryptionConfiguration"));

export { S3BucketVersioningArgs, S3BucketVersioningState } from "./s3bucketVersioning";
export type S3BucketVersioning = import("./s3bucketVersioning").S3BucketVersioning;
export const S3BucketVersioning: typeof import("./s3bucketVersioning").S3BucketVersioning = null as any;
utilities.lazyLoad(exports, ["S3BucketVersioning"], () => require("./s3bucketVersioning"));

export { S3BucketWebsiteConfigurationArgs, S3BucketWebsiteConfigurationState } from "./s3bucketWebsiteConfiguration";
export type S3BucketWebsiteConfiguration = import("./s3bucketWebsiteConfiguration").S3BucketWebsiteConfiguration;
export const S3BucketWebsiteConfiguration: typeof import("./s3bucketWebsiteConfiguration").S3BucketWebsiteConfiguration = null as any;
utilities.lazyLoad(exports, ["S3BucketWebsiteConfiguration"], () => require("./s3bucketWebsiteConfiguration"));

export { S3controlAccessGrantArgs, S3controlAccessGrantState } from "./s3controlAccessGrant";
export type S3controlAccessGrant = import("./s3controlAccessGrant").S3controlAccessGrant;
export const S3controlAccessGrant: typeof import("./s3controlAccessGrant").S3controlAccessGrant = null as any;
utilities.lazyLoad(exports, ["S3controlAccessGrant"], () => require("./s3controlAccessGrant"));

export { S3controlAccessGrantsInstanceArgs, S3controlAccessGrantsInstanceState } from "./s3controlAccessGrantsInstance";
export type S3controlAccessGrantsInstance = import("./s3controlAccessGrantsInstance").S3controlAccessGrantsInstance;
export const S3controlAccessGrantsInstance: typeof import("./s3controlAccessGrantsInstance").S3controlAccessGrantsInstance = null as any;
utilities.lazyLoad(exports, ["S3controlAccessGrantsInstance"], () => require("./s3controlAccessGrantsInstance"));

export { S3controlAccessGrantsInstanceResourcePolicyArgs, S3controlAccessGrantsInstanceResourcePolicyState } from "./s3controlAccessGrantsInstanceResourcePolicy";
export type S3controlAccessGrantsInstanceResourcePolicy = import("./s3controlAccessGrantsInstanceResourcePolicy").S3controlAccessGrantsInstanceResourcePolicy;
export const S3controlAccessGrantsInstanceResourcePolicy: typeof import("./s3controlAccessGrantsInstanceResourcePolicy").S3controlAccessGrantsInstanceResourcePolicy = null as any;
utilities.lazyLoad(exports, ["S3controlAccessGrantsInstanceResourcePolicy"], () => require("./s3controlAccessGrantsInstanceResourcePolicy"));

export { S3controlAccessGrantsLocationArgs, S3controlAccessGrantsLocationState } from "./s3controlAccessGrantsLocation";
export type S3controlAccessGrantsLocation = import("./s3controlAccessGrantsLocation").S3controlAccessGrantsLocation;
export const S3controlAccessGrantsLocation: typeof import("./s3controlAccessGrantsLocation").S3controlAccessGrantsLocation = null as any;
utilities.lazyLoad(exports, ["S3controlAccessGrantsLocation"], () => require("./s3controlAccessGrantsLocation"));

export { S3controlAccessPointPolicyArgs, S3controlAccessPointPolicyState } from "./s3controlAccessPointPolicy";
export type S3controlAccessPointPolicy = import("./s3controlAccessPointPolicy").S3controlAccessPointPolicy;
export const S3controlAccessPointPolicy: typeof import("./s3controlAccessPointPolicy").S3controlAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["S3controlAccessPointPolicy"], () => require("./s3controlAccessPointPolicy"));

export { S3controlBucketArgs, S3controlBucketState } from "./s3controlBucket";
export type S3controlBucket = import("./s3controlBucket").S3controlBucket;
export const S3controlBucket: typeof import("./s3controlBucket").S3controlBucket = null as any;
utilities.lazyLoad(exports, ["S3controlBucket"], () => require("./s3controlBucket"));

export { S3controlBucketLifecycleConfigurationArgs, S3controlBucketLifecycleConfigurationState } from "./s3controlBucketLifecycleConfiguration";
export type S3controlBucketLifecycleConfiguration = import("./s3controlBucketLifecycleConfiguration").S3controlBucketLifecycleConfiguration;
export const S3controlBucketLifecycleConfiguration: typeof import("./s3controlBucketLifecycleConfiguration").S3controlBucketLifecycleConfiguration = null as any;
utilities.lazyLoad(exports, ["S3controlBucketLifecycleConfiguration"], () => require("./s3controlBucketLifecycleConfiguration"));

export { S3controlBucketPolicyArgs, S3controlBucketPolicyState } from "./s3controlBucketPolicy";
export type S3controlBucketPolicy = import("./s3controlBucketPolicy").S3controlBucketPolicy;
export const S3controlBucketPolicy: typeof import("./s3controlBucketPolicy").S3controlBucketPolicy = null as any;
utilities.lazyLoad(exports, ["S3controlBucketPolicy"], () => require("./s3controlBucketPolicy"));

export { S3controlMultiRegionAccessPointArgs, S3controlMultiRegionAccessPointState } from "./s3controlMultiRegionAccessPoint";
export type S3controlMultiRegionAccessPoint = import("./s3controlMultiRegionAccessPoint").S3controlMultiRegionAccessPoint;
export const S3controlMultiRegionAccessPoint: typeof import("./s3controlMultiRegionAccessPoint").S3controlMultiRegionAccessPoint = null as any;
utilities.lazyLoad(exports, ["S3controlMultiRegionAccessPoint"], () => require("./s3controlMultiRegionAccessPoint"));

export { S3controlMultiRegionAccessPointPolicyArgs, S3controlMultiRegionAccessPointPolicyState } from "./s3controlMultiRegionAccessPointPolicy";
export type S3controlMultiRegionAccessPointPolicy = import("./s3controlMultiRegionAccessPointPolicy").S3controlMultiRegionAccessPointPolicy;
export const S3controlMultiRegionAccessPointPolicy: typeof import("./s3controlMultiRegionAccessPointPolicy").S3controlMultiRegionAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["S3controlMultiRegionAccessPointPolicy"], () => require("./s3controlMultiRegionAccessPointPolicy"));

export { S3controlObjectLambdaAccessPointArgs, S3controlObjectLambdaAccessPointState } from "./s3controlObjectLambdaAccessPoint";
export type S3controlObjectLambdaAccessPoint = import("./s3controlObjectLambdaAccessPoint").S3controlObjectLambdaAccessPoint;
export const S3controlObjectLambdaAccessPoint: typeof import("./s3controlObjectLambdaAccessPoint").S3controlObjectLambdaAccessPoint = null as any;
utilities.lazyLoad(exports, ["S3controlObjectLambdaAccessPoint"], () => require("./s3controlObjectLambdaAccessPoint"));

export { S3controlObjectLambdaAccessPointPolicyArgs, S3controlObjectLambdaAccessPointPolicyState } from "./s3controlObjectLambdaAccessPointPolicy";
export type S3controlObjectLambdaAccessPointPolicy = import("./s3controlObjectLambdaAccessPointPolicy").S3controlObjectLambdaAccessPointPolicy;
export const S3controlObjectLambdaAccessPointPolicy: typeof import("./s3controlObjectLambdaAccessPointPolicy").S3controlObjectLambdaAccessPointPolicy = null as any;
utilities.lazyLoad(exports, ["S3controlObjectLambdaAccessPointPolicy"], () => require("./s3controlObjectLambdaAccessPointPolicy"));

export { S3controlStorageLensConfigurationArgs, S3controlStorageLensConfigurationState } from "./s3controlStorageLensConfiguration";
export type S3controlStorageLensConfiguration = import("./s3controlStorageLensConfiguration").S3controlStorageLensConfiguration;
export const S3controlStorageLensConfiguration: typeof import("./s3controlStorageLensConfiguration").S3controlStorageLensConfiguration = null as any;
utilities.lazyLoad(exports, ["S3controlStorageLensConfiguration"], () => require("./s3controlStorageLensConfiguration"));

export { S3DirectoryBucketArgs, S3DirectoryBucketState } from "./s3directoryBucket";
export type S3DirectoryBucket = import("./s3directoryBucket").S3DirectoryBucket;
export const S3DirectoryBucket: typeof import("./s3directoryBucket").S3DirectoryBucket = null as any;
utilities.lazyLoad(exports, ["S3DirectoryBucket"], () => require("./s3directoryBucket"));

export { S3ObjectArgs, S3ObjectState } from "./s3object";
export type S3Object = import("./s3object").S3Object;
export const S3Object: typeof import("./s3object").S3Object = null as any;
utilities.lazyLoad(exports, ["S3Object"], () => require("./s3object"));

export { S3ObjectCopyArgs, S3ObjectCopyState } from "./s3objectCopy";
export type S3ObjectCopy = import("./s3objectCopy").S3ObjectCopy;
export const S3ObjectCopy: typeof import("./s3objectCopy").S3ObjectCopy = null as any;
utilities.lazyLoad(exports, ["S3ObjectCopy"], () => require("./s3objectCopy"));

export { S3outpostsEndpointArgs, S3outpostsEndpointState } from "./s3outpostsEndpoint";
export type S3outpostsEndpoint = import("./s3outpostsEndpoint").S3outpostsEndpoint;
export const S3outpostsEndpoint: typeof import("./s3outpostsEndpoint").S3outpostsEndpoint = null as any;
utilities.lazyLoad(exports, ["S3outpostsEndpoint"], () => require("./s3outpostsEndpoint"));

export { SagemakerAppArgs, SagemakerAppState } from "./sagemakerApp";
export type SagemakerApp = import("./sagemakerApp").SagemakerApp;
export const SagemakerApp: typeof import("./sagemakerApp").SagemakerApp = null as any;
utilities.lazyLoad(exports, ["SagemakerApp"], () => require("./sagemakerApp"));

export { SagemakerAppImageConfigArgs, SagemakerAppImageConfigState } from "./sagemakerAppImageConfig";
export type SagemakerAppImageConfig = import("./sagemakerAppImageConfig").SagemakerAppImageConfig;
export const SagemakerAppImageConfig: typeof import("./sagemakerAppImageConfig").SagemakerAppImageConfig = null as any;
utilities.lazyLoad(exports, ["SagemakerAppImageConfig"], () => require("./sagemakerAppImageConfig"));

export { SagemakerCodeRepositoryArgs, SagemakerCodeRepositoryState } from "./sagemakerCodeRepository";
export type SagemakerCodeRepository = import("./sagemakerCodeRepository").SagemakerCodeRepository;
export const SagemakerCodeRepository: typeof import("./sagemakerCodeRepository").SagemakerCodeRepository = null as any;
utilities.lazyLoad(exports, ["SagemakerCodeRepository"], () => require("./sagemakerCodeRepository"));

export { SagemakerDataQualityJobDefinitionArgs, SagemakerDataQualityJobDefinitionState } from "./sagemakerDataQualityJobDefinition";
export type SagemakerDataQualityJobDefinition = import("./sagemakerDataQualityJobDefinition").SagemakerDataQualityJobDefinition;
export const SagemakerDataQualityJobDefinition: typeof import("./sagemakerDataQualityJobDefinition").SagemakerDataQualityJobDefinition = null as any;
utilities.lazyLoad(exports, ["SagemakerDataQualityJobDefinition"], () => require("./sagemakerDataQualityJobDefinition"));

export { SagemakerDeviceArgs, SagemakerDeviceState } from "./sagemakerDevice";
export type SagemakerDevice = import("./sagemakerDevice").SagemakerDevice;
export const SagemakerDevice: typeof import("./sagemakerDevice").SagemakerDevice = null as any;
utilities.lazyLoad(exports, ["SagemakerDevice"], () => require("./sagemakerDevice"));

export { SagemakerDeviceFleetArgs, SagemakerDeviceFleetState } from "./sagemakerDeviceFleet";
export type SagemakerDeviceFleet = import("./sagemakerDeviceFleet").SagemakerDeviceFleet;
export const SagemakerDeviceFleet: typeof import("./sagemakerDeviceFleet").SagemakerDeviceFleet = null as any;
utilities.lazyLoad(exports, ["SagemakerDeviceFleet"], () => require("./sagemakerDeviceFleet"));

export { SagemakerDomainArgs, SagemakerDomainState } from "./sagemakerDomain";
export type SagemakerDomain = import("./sagemakerDomain").SagemakerDomain;
export const SagemakerDomain: typeof import("./sagemakerDomain").SagemakerDomain = null as any;
utilities.lazyLoad(exports, ["SagemakerDomain"], () => require("./sagemakerDomain"));

export { SagemakerEndpointArgs, SagemakerEndpointState } from "./sagemakerEndpoint";
export type SagemakerEndpoint = import("./sagemakerEndpoint").SagemakerEndpoint;
export const SagemakerEndpoint: typeof import("./sagemakerEndpoint").SagemakerEndpoint = null as any;
utilities.lazyLoad(exports, ["SagemakerEndpoint"], () => require("./sagemakerEndpoint"));

export { SagemakerEndpointConfigurationArgs, SagemakerEndpointConfigurationState } from "./sagemakerEndpointConfiguration";
export type SagemakerEndpointConfiguration = import("./sagemakerEndpointConfiguration").SagemakerEndpointConfiguration;
export const SagemakerEndpointConfiguration: typeof import("./sagemakerEndpointConfiguration").SagemakerEndpointConfiguration = null as any;
utilities.lazyLoad(exports, ["SagemakerEndpointConfiguration"], () => require("./sagemakerEndpointConfiguration"));

export { SagemakerFeatureGroupArgs, SagemakerFeatureGroupState } from "./sagemakerFeatureGroup";
export type SagemakerFeatureGroup = import("./sagemakerFeatureGroup").SagemakerFeatureGroup;
export const SagemakerFeatureGroup: typeof import("./sagemakerFeatureGroup").SagemakerFeatureGroup = null as any;
utilities.lazyLoad(exports, ["SagemakerFeatureGroup"], () => require("./sagemakerFeatureGroup"));

export { SagemakerFlowDefinitionArgs, SagemakerFlowDefinitionState } from "./sagemakerFlowDefinition";
export type SagemakerFlowDefinition = import("./sagemakerFlowDefinition").SagemakerFlowDefinition;
export const SagemakerFlowDefinition: typeof import("./sagemakerFlowDefinition").SagemakerFlowDefinition = null as any;
utilities.lazyLoad(exports, ["SagemakerFlowDefinition"], () => require("./sagemakerFlowDefinition"));

export { SagemakerHumanTaskUiArgs, SagemakerHumanTaskUiState } from "./sagemakerHumanTaskUi";
export type SagemakerHumanTaskUi = import("./sagemakerHumanTaskUi").SagemakerHumanTaskUi;
export const SagemakerHumanTaskUi: typeof import("./sagemakerHumanTaskUi").SagemakerHumanTaskUi = null as any;
utilities.lazyLoad(exports, ["SagemakerHumanTaskUi"], () => require("./sagemakerHumanTaskUi"));

export { SagemakerImageArgs, SagemakerImageState } from "./sagemakerImage";
export type SagemakerImage = import("./sagemakerImage").SagemakerImage;
export const SagemakerImage: typeof import("./sagemakerImage").SagemakerImage = null as any;
utilities.lazyLoad(exports, ["SagemakerImage"], () => require("./sagemakerImage"));

export { SagemakerImageVersionArgs, SagemakerImageVersionState } from "./sagemakerImageVersion";
export type SagemakerImageVersion = import("./sagemakerImageVersion").SagemakerImageVersion;
export const SagemakerImageVersion: typeof import("./sagemakerImageVersion").SagemakerImageVersion = null as any;
utilities.lazyLoad(exports, ["SagemakerImageVersion"], () => require("./sagemakerImageVersion"));

export { SagemakerModelArgs, SagemakerModelState } from "./sagemakerModel";
export type SagemakerModel = import("./sagemakerModel").SagemakerModel;
export const SagemakerModel: typeof import("./sagemakerModel").SagemakerModel = null as any;
utilities.lazyLoad(exports, ["SagemakerModel"], () => require("./sagemakerModel"));

export { SagemakerModelPackageGroupArgs, SagemakerModelPackageGroupState } from "./sagemakerModelPackageGroup";
export type SagemakerModelPackageGroup = import("./sagemakerModelPackageGroup").SagemakerModelPackageGroup;
export const SagemakerModelPackageGroup: typeof import("./sagemakerModelPackageGroup").SagemakerModelPackageGroup = null as any;
utilities.lazyLoad(exports, ["SagemakerModelPackageGroup"], () => require("./sagemakerModelPackageGroup"));

export { SagemakerModelPackageGroupPolicyArgs, SagemakerModelPackageGroupPolicyState } from "./sagemakerModelPackageGroupPolicy";
export type SagemakerModelPackageGroupPolicy = import("./sagemakerModelPackageGroupPolicy").SagemakerModelPackageGroupPolicy;
export const SagemakerModelPackageGroupPolicy: typeof import("./sagemakerModelPackageGroupPolicy").SagemakerModelPackageGroupPolicy = null as any;
utilities.lazyLoad(exports, ["SagemakerModelPackageGroupPolicy"], () => require("./sagemakerModelPackageGroupPolicy"));

export { SagemakerMonitoringScheduleArgs, SagemakerMonitoringScheduleState } from "./sagemakerMonitoringSchedule";
export type SagemakerMonitoringSchedule = import("./sagemakerMonitoringSchedule").SagemakerMonitoringSchedule;
export const SagemakerMonitoringSchedule: typeof import("./sagemakerMonitoringSchedule").SagemakerMonitoringSchedule = null as any;
utilities.lazyLoad(exports, ["SagemakerMonitoringSchedule"], () => require("./sagemakerMonitoringSchedule"));

export { SagemakerNotebookInstanceArgs, SagemakerNotebookInstanceState } from "./sagemakerNotebookInstance";
export type SagemakerNotebookInstance = import("./sagemakerNotebookInstance").SagemakerNotebookInstance;
export const SagemakerNotebookInstance: typeof import("./sagemakerNotebookInstance").SagemakerNotebookInstance = null as any;
utilities.lazyLoad(exports, ["SagemakerNotebookInstance"], () => require("./sagemakerNotebookInstance"));

export { SagemakerNotebookInstanceLifecycleConfigurationArgs, SagemakerNotebookInstanceLifecycleConfigurationState } from "./sagemakerNotebookInstanceLifecycleConfiguration";
export type SagemakerNotebookInstanceLifecycleConfiguration = import("./sagemakerNotebookInstanceLifecycleConfiguration").SagemakerNotebookInstanceLifecycleConfiguration;
export const SagemakerNotebookInstanceLifecycleConfiguration: typeof import("./sagemakerNotebookInstanceLifecycleConfiguration").SagemakerNotebookInstanceLifecycleConfiguration = null as any;
utilities.lazyLoad(exports, ["SagemakerNotebookInstanceLifecycleConfiguration"], () => require("./sagemakerNotebookInstanceLifecycleConfiguration"));

export { SagemakerPipelineArgs, SagemakerPipelineState } from "./sagemakerPipeline";
export type SagemakerPipeline = import("./sagemakerPipeline").SagemakerPipeline;
export const SagemakerPipeline: typeof import("./sagemakerPipeline").SagemakerPipeline = null as any;
utilities.lazyLoad(exports, ["SagemakerPipeline"], () => require("./sagemakerPipeline"));

export { SagemakerProjectArgs, SagemakerProjectState } from "./sagemakerProject";
export type SagemakerProject = import("./sagemakerProject").SagemakerProject;
export const SagemakerProject: typeof import("./sagemakerProject").SagemakerProject = null as any;
utilities.lazyLoad(exports, ["SagemakerProject"], () => require("./sagemakerProject"));

export { SagemakerServicecatalogPortfolioStatusArgs, SagemakerServicecatalogPortfolioStatusState } from "./sagemakerServicecatalogPortfolioStatus";
export type SagemakerServicecatalogPortfolioStatus = import("./sagemakerServicecatalogPortfolioStatus").SagemakerServicecatalogPortfolioStatus;
export const SagemakerServicecatalogPortfolioStatus: typeof import("./sagemakerServicecatalogPortfolioStatus").SagemakerServicecatalogPortfolioStatus = null as any;
utilities.lazyLoad(exports, ["SagemakerServicecatalogPortfolioStatus"], () => require("./sagemakerServicecatalogPortfolioStatus"));

export { SagemakerSpaceArgs, SagemakerSpaceState } from "./sagemakerSpace";
export type SagemakerSpace = import("./sagemakerSpace").SagemakerSpace;
export const SagemakerSpace: typeof import("./sagemakerSpace").SagemakerSpace = null as any;
utilities.lazyLoad(exports, ["SagemakerSpace"], () => require("./sagemakerSpace"));

export { SagemakerStudioLifecycleConfigArgs, SagemakerStudioLifecycleConfigState } from "./sagemakerStudioLifecycleConfig";
export type SagemakerStudioLifecycleConfig = import("./sagemakerStudioLifecycleConfig").SagemakerStudioLifecycleConfig;
export const SagemakerStudioLifecycleConfig: typeof import("./sagemakerStudioLifecycleConfig").SagemakerStudioLifecycleConfig = null as any;
utilities.lazyLoad(exports, ["SagemakerStudioLifecycleConfig"], () => require("./sagemakerStudioLifecycleConfig"));

export { SagemakerUserProfileArgs, SagemakerUserProfileState } from "./sagemakerUserProfile";
export type SagemakerUserProfile = import("./sagemakerUserProfile").SagemakerUserProfile;
export const SagemakerUserProfile: typeof import("./sagemakerUserProfile").SagemakerUserProfile = null as any;
utilities.lazyLoad(exports, ["SagemakerUserProfile"], () => require("./sagemakerUserProfile"));

export { SagemakerWorkforceArgs, SagemakerWorkforceState } from "./sagemakerWorkforce";
export type SagemakerWorkforce = import("./sagemakerWorkforce").SagemakerWorkforce;
export const SagemakerWorkforce: typeof import("./sagemakerWorkforce").SagemakerWorkforce = null as any;
utilities.lazyLoad(exports, ["SagemakerWorkforce"], () => require("./sagemakerWorkforce"));

export { SagemakerWorkteamArgs, SagemakerWorkteamState } from "./sagemakerWorkteam";
export type SagemakerWorkteam = import("./sagemakerWorkteam").SagemakerWorkteam;
export const SagemakerWorkteam: typeof import("./sagemakerWorkteam").SagemakerWorkteam = null as any;
utilities.lazyLoad(exports, ["SagemakerWorkteam"], () => require("./sagemakerWorkteam"));

export { SchedulerScheduleArgs, SchedulerScheduleState } from "./schedulerSchedule";
export type SchedulerSchedule = import("./schedulerSchedule").SchedulerSchedule;
export const SchedulerSchedule: typeof import("./schedulerSchedule").SchedulerSchedule = null as any;
utilities.lazyLoad(exports, ["SchedulerSchedule"], () => require("./schedulerSchedule"));

export { SchedulerScheduleGroupArgs, SchedulerScheduleGroupState } from "./schedulerScheduleGroup";
export type SchedulerScheduleGroup = import("./schedulerScheduleGroup").SchedulerScheduleGroup;
export const SchedulerScheduleGroup: typeof import("./schedulerScheduleGroup").SchedulerScheduleGroup = null as any;
utilities.lazyLoad(exports, ["SchedulerScheduleGroup"], () => require("./schedulerScheduleGroup"));

export { SchemasDiscovererArgs, SchemasDiscovererState } from "./schemasDiscoverer";
export type SchemasDiscoverer = import("./schemasDiscoverer").SchemasDiscoverer;
export const SchemasDiscoverer: typeof import("./schemasDiscoverer").SchemasDiscoverer = null as any;
utilities.lazyLoad(exports, ["SchemasDiscoverer"], () => require("./schemasDiscoverer"));

export { SchemasRegistryArgs, SchemasRegistryState } from "./schemasRegistry";
export type SchemasRegistry = import("./schemasRegistry").SchemasRegistry;
export const SchemasRegistry: typeof import("./schemasRegistry").SchemasRegistry = null as any;
utilities.lazyLoad(exports, ["SchemasRegistry"], () => require("./schemasRegistry"));

export { SchemasRegistryPolicyArgs, SchemasRegistryPolicyState } from "./schemasRegistryPolicy";
export type SchemasRegistryPolicy = import("./schemasRegistryPolicy").SchemasRegistryPolicy;
export const SchemasRegistryPolicy: typeof import("./schemasRegistryPolicy").SchemasRegistryPolicy = null as any;
utilities.lazyLoad(exports, ["SchemasRegistryPolicy"], () => require("./schemasRegistryPolicy"));

export { SchemasSchemaArgs, SchemasSchemaState } from "./schemasSchema";
export type SchemasSchema = import("./schemasSchema").SchemasSchema;
export const SchemasSchema: typeof import("./schemasSchema").SchemasSchema = null as any;
utilities.lazyLoad(exports, ["SchemasSchema"], () => require("./schemasSchema"));

export { SecretsmanagerSecretArgs, SecretsmanagerSecretState } from "./secretsmanagerSecret";
export type SecretsmanagerSecret = import("./secretsmanagerSecret").SecretsmanagerSecret;
export const SecretsmanagerSecret: typeof import("./secretsmanagerSecret").SecretsmanagerSecret = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerSecret"], () => require("./secretsmanagerSecret"));

export { SecretsmanagerSecretPolicyArgs, SecretsmanagerSecretPolicyState } from "./secretsmanagerSecretPolicy";
export type SecretsmanagerSecretPolicy = import("./secretsmanagerSecretPolicy").SecretsmanagerSecretPolicy;
export const SecretsmanagerSecretPolicy: typeof import("./secretsmanagerSecretPolicy").SecretsmanagerSecretPolicy = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerSecretPolicy"], () => require("./secretsmanagerSecretPolicy"));

export { SecretsmanagerSecretRotationArgs, SecretsmanagerSecretRotationState } from "./secretsmanagerSecretRotation";
export type SecretsmanagerSecretRotation = import("./secretsmanagerSecretRotation").SecretsmanagerSecretRotation;
export const SecretsmanagerSecretRotation: typeof import("./secretsmanagerSecretRotation").SecretsmanagerSecretRotation = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerSecretRotation"], () => require("./secretsmanagerSecretRotation"));

export { SecretsmanagerSecretVersionArgs, SecretsmanagerSecretVersionState } from "./secretsmanagerSecretVersion";
export type SecretsmanagerSecretVersion = import("./secretsmanagerSecretVersion").SecretsmanagerSecretVersion;
export const SecretsmanagerSecretVersion: typeof import("./secretsmanagerSecretVersion").SecretsmanagerSecretVersion = null as any;
utilities.lazyLoad(exports, ["SecretsmanagerSecretVersion"], () => require("./secretsmanagerSecretVersion"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { SecurityhubAccountArgs, SecurityhubAccountState } from "./securityhubAccount";
export type SecurityhubAccount = import("./securityhubAccount").SecurityhubAccount;
export const SecurityhubAccount: typeof import("./securityhubAccount").SecurityhubAccount = null as any;
utilities.lazyLoad(exports, ["SecurityhubAccount"], () => require("./securityhubAccount"));

export { SecurityhubActionTargetArgs, SecurityhubActionTargetState } from "./securityhubActionTarget";
export type SecurityhubActionTarget = import("./securityhubActionTarget").SecurityhubActionTarget;
export const SecurityhubActionTarget: typeof import("./securityhubActionTarget").SecurityhubActionTarget = null as any;
utilities.lazyLoad(exports, ["SecurityhubActionTarget"], () => require("./securityhubActionTarget"));

export { SecurityhubAutomationRuleArgs, SecurityhubAutomationRuleState } from "./securityhubAutomationRule";
export type SecurityhubAutomationRule = import("./securityhubAutomationRule").SecurityhubAutomationRule;
export const SecurityhubAutomationRule: typeof import("./securityhubAutomationRule").SecurityhubAutomationRule = null as any;
utilities.lazyLoad(exports, ["SecurityhubAutomationRule"], () => require("./securityhubAutomationRule"));

export { SecurityhubConfigurationPolicyArgs, SecurityhubConfigurationPolicyState } from "./securityhubConfigurationPolicy";
export type SecurityhubConfigurationPolicy = import("./securityhubConfigurationPolicy").SecurityhubConfigurationPolicy;
export const SecurityhubConfigurationPolicy: typeof import("./securityhubConfigurationPolicy").SecurityhubConfigurationPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityhubConfigurationPolicy"], () => require("./securityhubConfigurationPolicy"));

export { SecurityhubConfigurationPolicyAssociationArgs, SecurityhubConfigurationPolicyAssociationState } from "./securityhubConfigurationPolicyAssociation";
export type SecurityhubConfigurationPolicyAssociation = import("./securityhubConfigurationPolicyAssociation").SecurityhubConfigurationPolicyAssociation;
export const SecurityhubConfigurationPolicyAssociation: typeof import("./securityhubConfigurationPolicyAssociation").SecurityhubConfigurationPolicyAssociation = null as any;
utilities.lazyLoad(exports, ["SecurityhubConfigurationPolicyAssociation"], () => require("./securityhubConfigurationPolicyAssociation"));

export { SecurityhubFindingAggregatorArgs, SecurityhubFindingAggregatorState } from "./securityhubFindingAggregator";
export type SecurityhubFindingAggregator = import("./securityhubFindingAggregator").SecurityhubFindingAggregator;
export const SecurityhubFindingAggregator: typeof import("./securityhubFindingAggregator").SecurityhubFindingAggregator = null as any;
utilities.lazyLoad(exports, ["SecurityhubFindingAggregator"], () => require("./securityhubFindingAggregator"));

export { SecurityhubInsightArgs, SecurityhubInsightState } from "./securityhubInsight";
export type SecurityhubInsight = import("./securityhubInsight").SecurityhubInsight;
export const SecurityhubInsight: typeof import("./securityhubInsight").SecurityhubInsight = null as any;
utilities.lazyLoad(exports, ["SecurityhubInsight"], () => require("./securityhubInsight"));

export { SecurityhubInviteAccepterArgs, SecurityhubInviteAccepterState } from "./securityhubInviteAccepter";
export type SecurityhubInviteAccepter = import("./securityhubInviteAccepter").SecurityhubInviteAccepter;
export const SecurityhubInviteAccepter: typeof import("./securityhubInviteAccepter").SecurityhubInviteAccepter = null as any;
utilities.lazyLoad(exports, ["SecurityhubInviteAccepter"], () => require("./securityhubInviteAccepter"));

export { SecurityhubMemberArgs, SecurityhubMemberState } from "./securityhubMember";
export type SecurityhubMember = import("./securityhubMember").SecurityhubMember;
export const SecurityhubMember: typeof import("./securityhubMember").SecurityhubMember = null as any;
utilities.lazyLoad(exports, ["SecurityhubMember"], () => require("./securityhubMember"));

export { SecurityhubOrganizationAdminAccountArgs, SecurityhubOrganizationAdminAccountState } from "./securityhubOrganizationAdminAccount";
export type SecurityhubOrganizationAdminAccount = import("./securityhubOrganizationAdminAccount").SecurityhubOrganizationAdminAccount;
export const SecurityhubOrganizationAdminAccount: typeof import("./securityhubOrganizationAdminAccount").SecurityhubOrganizationAdminAccount = null as any;
utilities.lazyLoad(exports, ["SecurityhubOrganizationAdminAccount"], () => require("./securityhubOrganizationAdminAccount"));

export { SecurityhubOrganizationConfigurationArgs, SecurityhubOrganizationConfigurationState } from "./securityhubOrganizationConfiguration";
export type SecurityhubOrganizationConfiguration = import("./securityhubOrganizationConfiguration").SecurityhubOrganizationConfiguration;
export const SecurityhubOrganizationConfiguration: typeof import("./securityhubOrganizationConfiguration").SecurityhubOrganizationConfiguration = null as any;
utilities.lazyLoad(exports, ["SecurityhubOrganizationConfiguration"], () => require("./securityhubOrganizationConfiguration"));

export { SecurityhubProductSubscriptionArgs, SecurityhubProductSubscriptionState } from "./securityhubProductSubscription";
export type SecurityhubProductSubscription = import("./securityhubProductSubscription").SecurityhubProductSubscription;
export const SecurityhubProductSubscription: typeof import("./securityhubProductSubscription").SecurityhubProductSubscription = null as any;
utilities.lazyLoad(exports, ["SecurityhubProductSubscription"], () => require("./securityhubProductSubscription"));

export { SecurityhubStandardsControlArgs, SecurityhubStandardsControlState } from "./securityhubStandardsControl";
export type SecurityhubStandardsControl = import("./securityhubStandardsControl").SecurityhubStandardsControl;
export const SecurityhubStandardsControl: typeof import("./securityhubStandardsControl").SecurityhubStandardsControl = null as any;
utilities.lazyLoad(exports, ["SecurityhubStandardsControl"], () => require("./securityhubStandardsControl"));

export { SecurityhubStandardsSubscriptionArgs, SecurityhubStandardsSubscriptionState } from "./securityhubStandardsSubscription";
export type SecurityhubStandardsSubscription = import("./securityhubStandardsSubscription").SecurityhubStandardsSubscription;
export const SecurityhubStandardsSubscription: typeof import("./securityhubStandardsSubscription").SecurityhubStandardsSubscription = null as any;
utilities.lazyLoad(exports, ["SecurityhubStandardsSubscription"], () => require("./securityhubStandardsSubscription"));

export { SecuritylakeAwsLogSourceArgs, SecuritylakeAwsLogSourceState } from "./securitylakeAwsLogSource";
export type SecuritylakeAwsLogSource = import("./securitylakeAwsLogSource").SecuritylakeAwsLogSource;
export const SecuritylakeAwsLogSource: typeof import("./securitylakeAwsLogSource").SecuritylakeAwsLogSource = null as any;
utilities.lazyLoad(exports, ["SecuritylakeAwsLogSource"], () => require("./securitylakeAwsLogSource"));

export { SecuritylakeCustomLogSourceArgs, SecuritylakeCustomLogSourceState } from "./securitylakeCustomLogSource";
export type SecuritylakeCustomLogSource = import("./securitylakeCustomLogSource").SecuritylakeCustomLogSource;
export const SecuritylakeCustomLogSource: typeof import("./securitylakeCustomLogSource").SecuritylakeCustomLogSource = null as any;
utilities.lazyLoad(exports, ["SecuritylakeCustomLogSource"], () => require("./securitylakeCustomLogSource"));

export { SecuritylakeDataLakeArgs, SecuritylakeDataLakeState } from "./securitylakeDataLake";
export type SecuritylakeDataLake = import("./securitylakeDataLake").SecuritylakeDataLake;
export const SecuritylakeDataLake: typeof import("./securitylakeDataLake").SecuritylakeDataLake = null as any;
utilities.lazyLoad(exports, ["SecuritylakeDataLake"], () => require("./securitylakeDataLake"));

export { SecuritylakeSubscriberArgs, SecuritylakeSubscriberState } from "./securitylakeSubscriber";
export type SecuritylakeSubscriber = import("./securitylakeSubscriber").SecuritylakeSubscriber;
export const SecuritylakeSubscriber: typeof import("./securitylakeSubscriber").SecuritylakeSubscriber = null as any;
utilities.lazyLoad(exports, ["SecuritylakeSubscriber"], () => require("./securitylakeSubscriber"));

export { SecuritylakeSubscriberNotificationArgs, SecuritylakeSubscriberNotificationState } from "./securitylakeSubscriberNotification";
export type SecuritylakeSubscriberNotification = import("./securitylakeSubscriberNotification").SecuritylakeSubscriberNotification;
export const SecuritylakeSubscriberNotification: typeof import("./securitylakeSubscriberNotification").SecuritylakeSubscriberNotification = null as any;
utilities.lazyLoad(exports, ["SecuritylakeSubscriberNotification"], () => require("./securitylakeSubscriberNotification"));

export { ServerlessapplicationrepositoryCloudformationStackArgs, ServerlessapplicationrepositoryCloudformationStackState } from "./serverlessapplicationrepositoryCloudformationStack";
export type ServerlessapplicationrepositoryCloudformationStack = import("./serverlessapplicationrepositoryCloudformationStack").ServerlessapplicationrepositoryCloudformationStack;
export const ServerlessapplicationrepositoryCloudformationStack: typeof import("./serverlessapplicationrepositoryCloudformationStack").ServerlessapplicationrepositoryCloudformationStack = null as any;
utilities.lazyLoad(exports, ["ServerlessapplicationrepositoryCloudformationStack"], () => require("./serverlessapplicationrepositoryCloudformationStack"));

export { ServiceDiscoveryHttpNamespaceArgs, ServiceDiscoveryHttpNamespaceState } from "./serviceDiscoveryHttpNamespace";
export type ServiceDiscoveryHttpNamespace = import("./serviceDiscoveryHttpNamespace").ServiceDiscoveryHttpNamespace;
export const ServiceDiscoveryHttpNamespace: typeof import("./serviceDiscoveryHttpNamespace").ServiceDiscoveryHttpNamespace = null as any;
utilities.lazyLoad(exports, ["ServiceDiscoveryHttpNamespace"], () => require("./serviceDiscoveryHttpNamespace"));

export { ServiceDiscoveryInstanceArgs, ServiceDiscoveryInstanceState } from "./serviceDiscoveryInstance";
export type ServiceDiscoveryInstance = import("./serviceDiscoveryInstance").ServiceDiscoveryInstance;
export const ServiceDiscoveryInstance: typeof import("./serviceDiscoveryInstance").ServiceDiscoveryInstance = null as any;
utilities.lazyLoad(exports, ["ServiceDiscoveryInstance"], () => require("./serviceDiscoveryInstance"));

export { ServiceDiscoveryPrivateDnsNamespaceArgs, ServiceDiscoveryPrivateDnsNamespaceState } from "./serviceDiscoveryPrivateDnsNamespace";
export type ServiceDiscoveryPrivateDnsNamespace = import("./serviceDiscoveryPrivateDnsNamespace").ServiceDiscoveryPrivateDnsNamespace;
export const ServiceDiscoveryPrivateDnsNamespace: typeof import("./serviceDiscoveryPrivateDnsNamespace").ServiceDiscoveryPrivateDnsNamespace = null as any;
utilities.lazyLoad(exports, ["ServiceDiscoveryPrivateDnsNamespace"], () => require("./serviceDiscoveryPrivateDnsNamespace"));

export { ServiceDiscoveryPublicDnsNamespaceArgs, ServiceDiscoveryPublicDnsNamespaceState } from "./serviceDiscoveryPublicDnsNamespace";
export type ServiceDiscoveryPublicDnsNamespace = import("./serviceDiscoveryPublicDnsNamespace").ServiceDiscoveryPublicDnsNamespace;
export const ServiceDiscoveryPublicDnsNamespace: typeof import("./serviceDiscoveryPublicDnsNamespace").ServiceDiscoveryPublicDnsNamespace = null as any;
utilities.lazyLoad(exports, ["ServiceDiscoveryPublicDnsNamespace"], () => require("./serviceDiscoveryPublicDnsNamespace"));

export { ServiceDiscoveryServiceArgs, ServiceDiscoveryServiceState } from "./serviceDiscoveryService";
export type ServiceDiscoveryService = import("./serviceDiscoveryService").ServiceDiscoveryService;
export const ServiceDiscoveryService: typeof import("./serviceDiscoveryService").ServiceDiscoveryService = null as any;
utilities.lazyLoad(exports, ["ServiceDiscoveryService"], () => require("./serviceDiscoveryService"));

export { ServicecatalogBudgetResourceAssociationArgs, ServicecatalogBudgetResourceAssociationState } from "./servicecatalogBudgetResourceAssociation";
export type ServicecatalogBudgetResourceAssociation = import("./servicecatalogBudgetResourceAssociation").ServicecatalogBudgetResourceAssociation;
export const ServicecatalogBudgetResourceAssociation: typeof import("./servicecatalogBudgetResourceAssociation").ServicecatalogBudgetResourceAssociation = null as any;
utilities.lazyLoad(exports, ["ServicecatalogBudgetResourceAssociation"], () => require("./servicecatalogBudgetResourceAssociation"));

export { ServicecatalogConstraintArgs, ServicecatalogConstraintState } from "./servicecatalogConstraint";
export type ServicecatalogConstraint = import("./servicecatalogConstraint").ServicecatalogConstraint;
export const ServicecatalogConstraint: typeof import("./servicecatalogConstraint").ServicecatalogConstraint = null as any;
utilities.lazyLoad(exports, ["ServicecatalogConstraint"], () => require("./servicecatalogConstraint"));

export { ServicecatalogOrganizationsAccessArgs, ServicecatalogOrganizationsAccessState } from "./servicecatalogOrganizationsAccess";
export type ServicecatalogOrganizationsAccess = import("./servicecatalogOrganizationsAccess").ServicecatalogOrganizationsAccess;
export const ServicecatalogOrganizationsAccess: typeof import("./servicecatalogOrganizationsAccess").ServicecatalogOrganizationsAccess = null as any;
utilities.lazyLoad(exports, ["ServicecatalogOrganizationsAccess"], () => require("./servicecatalogOrganizationsAccess"));

export { ServicecatalogPortfolioArgs, ServicecatalogPortfolioState } from "./servicecatalogPortfolio";
export type ServicecatalogPortfolio = import("./servicecatalogPortfolio").ServicecatalogPortfolio;
export const ServicecatalogPortfolio: typeof import("./servicecatalogPortfolio").ServicecatalogPortfolio = null as any;
utilities.lazyLoad(exports, ["ServicecatalogPortfolio"], () => require("./servicecatalogPortfolio"));

export { ServicecatalogPortfolioShareArgs, ServicecatalogPortfolioShareState } from "./servicecatalogPortfolioShare";
export type ServicecatalogPortfolioShare = import("./servicecatalogPortfolioShare").ServicecatalogPortfolioShare;
export const ServicecatalogPortfolioShare: typeof import("./servicecatalogPortfolioShare").ServicecatalogPortfolioShare = null as any;
utilities.lazyLoad(exports, ["ServicecatalogPortfolioShare"], () => require("./servicecatalogPortfolioShare"));

export { ServicecatalogPrincipalPortfolioAssociationArgs, ServicecatalogPrincipalPortfolioAssociationState } from "./servicecatalogPrincipalPortfolioAssociation";
export type ServicecatalogPrincipalPortfolioAssociation = import("./servicecatalogPrincipalPortfolioAssociation").ServicecatalogPrincipalPortfolioAssociation;
export const ServicecatalogPrincipalPortfolioAssociation: typeof import("./servicecatalogPrincipalPortfolioAssociation").ServicecatalogPrincipalPortfolioAssociation = null as any;
utilities.lazyLoad(exports, ["ServicecatalogPrincipalPortfolioAssociation"], () => require("./servicecatalogPrincipalPortfolioAssociation"));

export { ServicecatalogProductArgs, ServicecatalogProductState } from "./servicecatalogProduct";
export type ServicecatalogProduct = import("./servicecatalogProduct").ServicecatalogProduct;
export const ServicecatalogProduct: typeof import("./servicecatalogProduct").ServicecatalogProduct = null as any;
utilities.lazyLoad(exports, ["ServicecatalogProduct"], () => require("./servicecatalogProduct"));

export { ServicecatalogProductPortfolioAssociationArgs, ServicecatalogProductPortfolioAssociationState } from "./servicecatalogProductPortfolioAssociation";
export type ServicecatalogProductPortfolioAssociation = import("./servicecatalogProductPortfolioAssociation").ServicecatalogProductPortfolioAssociation;
export const ServicecatalogProductPortfolioAssociation: typeof import("./servicecatalogProductPortfolioAssociation").ServicecatalogProductPortfolioAssociation = null as any;
utilities.lazyLoad(exports, ["ServicecatalogProductPortfolioAssociation"], () => require("./servicecatalogProductPortfolioAssociation"));

export { ServicecatalogProvisionedProductArgs, ServicecatalogProvisionedProductState } from "./servicecatalogProvisionedProduct";
export type ServicecatalogProvisionedProduct = import("./servicecatalogProvisionedProduct").ServicecatalogProvisionedProduct;
export const ServicecatalogProvisionedProduct: typeof import("./servicecatalogProvisionedProduct").ServicecatalogProvisionedProduct = null as any;
utilities.lazyLoad(exports, ["ServicecatalogProvisionedProduct"], () => require("./servicecatalogProvisionedProduct"));

export { ServicecatalogProvisioningArtifactArgs, ServicecatalogProvisioningArtifactState } from "./servicecatalogProvisioningArtifact";
export type ServicecatalogProvisioningArtifact = import("./servicecatalogProvisioningArtifact").ServicecatalogProvisioningArtifact;
export const ServicecatalogProvisioningArtifact: typeof import("./servicecatalogProvisioningArtifact").ServicecatalogProvisioningArtifact = null as any;
utilities.lazyLoad(exports, ["ServicecatalogProvisioningArtifact"], () => require("./servicecatalogProvisioningArtifact"));

export { ServicecatalogServiceActionArgs, ServicecatalogServiceActionState } from "./servicecatalogServiceAction";
export type ServicecatalogServiceAction = import("./servicecatalogServiceAction").ServicecatalogServiceAction;
export const ServicecatalogServiceAction: typeof import("./servicecatalogServiceAction").ServicecatalogServiceAction = null as any;
utilities.lazyLoad(exports, ["ServicecatalogServiceAction"], () => require("./servicecatalogServiceAction"));

export { ServicecatalogTagOptionArgs, ServicecatalogTagOptionState } from "./servicecatalogTagOption";
export type ServicecatalogTagOption = import("./servicecatalogTagOption").ServicecatalogTagOption;
export const ServicecatalogTagOption: typeof import("./servicecatalogTagOption").ServicecatalogTagOption = null as any;
utilities.lazyLoad(exports, ["ServicecatalogTagOption"], () => require("./servicecatalogTagOption"));

export { ServicecatalogTagOptionResourceAssociationArgs, ServicecatalogTagOptionResourceAssociationState } from "./servicecatalogTagOptionResourceAssociation";
export type ServicecatalogTagOptionResourceAssociation = import("./servicecatalogTagOptionResourceAssociation").ServicecatalogTagOptionResourceAssociation;
export const ServicecatalogTagOptionResourceAssociation: typeof import("./servicecatalogTagOptionResourceAssociation").ServicecatalogTagOptionResourceAssociation = null as any;
utilities.lazyLoad(exports, ["ServicecatalogTagOptionResourceAssociation"], () => require("./servicecatalogTagOptionResourceAssociation"));

export { ServicecatalogappregistryApplicationArgs, ServicecatalogappregistryApplicationState } from "./servicecatalogappregistryApplication";
export type ServicecatalogappregistryApplication = import("./servicecatalogappregistryApplication").ServicecatalogappregistryApplication;
export const ServicecatalogappregistryApplication: typeof import("./servicecatalogappregistryApplication").ServicecatalogappregistryApplication = null as any;
utilities.lazyLoad(exports, ["ServicecatalogappregistryApplication"], () => require("./servicecatalogappregistryApplication"));

export { ServicequotasServiceQuotaArgs, ServicequotasServiceQuotaState } from "./servicequotasServiceQuota";
export type ServicequotasServiceQuota = import("./servicequotasServiceQuota").ServicequotasServiceQuota;
export const ServicequotasServiceQuota: typeof import("./servicequotasServiceQuota").ServicequotasServiceQuota = null as any;
utilities.lazyLoad(exports, ["ServicequotasServiceQuota"], () => require("./servicequotasServiceQuota"));

export { ServicequotasTemplateArgs, ServicequotasTemplateState } from "./servicequotasTemplate";
export type ServicequotasTemplate = import("./servicequotasTemplate").ServicequotasTemplate;
export const ServicequotasTemplate: typeof import("./servicequotasTemplate").ServicequotasTemplate = null as any;
utilities.lazyLoad(exports, ["ServicequotasTemplate"], () => require("./servicequotasTemplate"));

export { ServicequotasTemplateAssociationArgs, ServicequotasTemplateAssociationState } from "./servicequotasTemplateAssociation";
export type ServicequotasTemplateAssociation = import("./servicequotasTemplateAssociation").ServicequotasTemplateAssociation;
export const ServicequotasTemplateAssociation: typeof import("./servicequotasTemplateAssociation").ServicequotasTemplateAssociation = null as any;
utilities.lazyLoad(exports, ["ServicequotasTemplateAssociation"], () => require("./servicequotasTemplateAssociation"));

export { SesActiveReceiptRuleSetArgs, SesActiveReceiptRuleSetState } from "./sesActiveReceiptRuleSet";
export type SesActiveReceiptRuleSet = import("./sesActiveReceiptRuleSet").SesActiveReceiptRuleSet;
export const SesActiveReceiptRuleSet: typeof import("./sesActiveReceiptRuleSet").SesActiveReceiptRuleSet = null as any;
utilities.lazyLoad(exports, ["SesActiveReceiptRuleSet"], () => require("./sesActiveReceiptRuleSet"));

export { SesConfigurationSetArgs, SesConfigurationSetState } from "./sesConfigurationSet";
export type SesConfigurationSet = import("./sesConfigurationSet").SesConfigurationSet;
export const SesConfigurationSet: typeof import("./sesConfigurationSet").SesConfigurationSet = null as any;
utilities.lazyLoad(exports, ["SesConfigurationSet"], () => require("./sesConfigurationSet"));

export { SesDomainDkimArgs, SesDomainDkimState } from "./sesDomainDkim";
export type SesDomainDkim = import("./sesDomainDkim").SesDomainDkim;
export const SesDomainDkim: typeof import("./sesDomainDkim").SesDomainDkim = null as any;
utilities.lazyLoad(exports, ["SesDomainDkim"], () => require("./sesDomainDkim"));

export { SesDomainIdentityArgs, SesDomainIdentityState } from "./sesDomainIdentity";
export type SesDomainIdentity = import("./sesDomainIdentity").SesDomainIdentity;
export const SesDomainIdentity: typeof import("./sesDomainIdentity").SesDomainIdentity = null as any;
utilities.lazyLoad(exports, ["SesDomainIdentity"], () => require("./sesDomainIdentity"));

export { SesDomainIdentityVerificationArgs, SesDomainIdentityVerificationState } from "./sesDomainIdentityVerification";
export type SesDomainIdentityVerification = import("./sesDomainIdentityVerification").SesDomainIdentityVerification;
export const SesDomainIdentityVerification: typeof import("./sesDomainIdentityVerification").SesDomainIdentityVerification = null as any;
utilities.lazyLoad(exports, ["SesDomainIdentityVerification"], () => require("./sesDomainIdentityVerification"));

export { SesDomainMailFromArgs, SesDomainMailFromState } from "./sesDomainMailFrom";
export type SesDomainMailFrom = import("./sesDomainMailFrom").SesDomainMailFrom;
export const SesDomainMailFrom: typeof import("./sesDomainMailFrom").SesDomainMailFrom = null as any;
utilities.lazyLoad(exports, ["SesDomainMailFrom"], () => require("./sesDomainMailFrom"));

export { SesEmailIdentityArgs, SesEmailIdentityState } from "./sesEmailIdentity";
export type SesEmailIdentity = import("./sesEmailIdentity").SesEmailIdentity;
export const SesEmailIdentity: typeof import("./sesEmailIdentity").SesEmailIdentity = null as any;
utilities.lazyLoad(exports, ["SesEmailIdentity"], () => require("./sesEmailIdentity"));

export { SesEventDestinationArgs, SesEventDestinationState } from "./sesEventDestination";
export type SesEventDestination = import("./sesEventDestination").SesEventDestination;
export const SesEventDestination: typeof import("./sesEventDestination").SesEventDestination = null as any;
utilities.lazyLoad(exports, ["SesEventDestination"], () => require("./sesEventDestination"));

export { SesIdentityNotificationTopicArgs, SesIdentityNotificationTopicState } from "./sesIdentityNotificationTopic";
export type SesIdentityNotificationTopic = import("./sesIdentityNotificationTopic").SesIdentityNotificationTopic;
export const SesIdentityNotificationTopic: typeof import("./sesIdentityNotificationTopic").SesIdentityNotificationTopic = null as any;
utilities.lazyLoad(exports, ["SesIdentityNotificationTopic"], () => require("./sesIdentityNotificationTopic"));

export { SesIdentityPolicyArgs, SesIdentityPolicyState } from "./sesIdentityPolicy";
export type SesIdentityPolicy = import("./sesIdentityPolicy").SesIdentityPolicy;
export const SesIdentityPolicy: typeof import("./sesIdentityPolicy").SesIdentityPolicy = null as any;
utilities.lazyLoad(exports, ["SesIdentityPolicy"], () => require("./sesIdentityPolicy"));

export { SesReceiptFilterArgs, SesReceiptFilterState } from "./sesReceiptFilter";
export type SesReceiptFilter = import("./sesReceiptFilter").SesReceiptFilter;
export const SesReceiptFilter: typeof import("./sesReceiptFilter").SesReceiptFilter = null as any;
utilities.lazyLoad(exports, ["SesReceiptFilter"], () => require("./sesReceiptFilter"));

export { SesReceiptRuleArgs, SesReceiptRuleState } from "./sesReceiptRule";
export type SesReceiptRule = import("./sesReceiptRule").SesReceiptRule;
export const SesReceiptRule: typeof import("./sesReceiptRule").SesReceiptRule = null as any;
utilities.lazyLoad(exports, ["SesReceiptRule"], () => require("./sesReceiptRule"));

export { SesReceiptRuleSetArgs, SesReceiptRuleSetState } from "./sesReceiptRuleSet";
export type SesReceiptRuleSet = import("./sesReceiptRuleSet").SesReceiptRuleSet;
export const SesReceiptRuleSet: typeof import("./sesReceiptRuleSet").SesReceiptRuleSet = null as any;
utilities.lazyLoad(exports, ["SesReceiptRuleSet"], () => require("./sesReceiptRuleSet"));

export { SesTemplateArgs, SesTemplateState } from "./sesTemplate";
export type SesTemplate = import("./sesTemplate").SesTemplate;
export const SesTemplate: typeof import("./sesTemplate").SesTemplate = null as any;
utilities.lazyLoad(exports, ["SesTemplate"], () => require("./sesTemplate"));

export { Sesv2AccountVdmAttributesArgs, Sesv2AccountVdmAttributesState } from "./sesv2AccountVdmAttributes";
export type Sesv2AccountVdmAttributes = import("./sesv2AccountVdmAttributes").Sesv2AccountVdmAttributes;
export const Sesv2AccountVdmAttributes: typeof import("./sesv2AccountVdmAttributes").Sesv2AccountVdmAttributes = null as any;
utilities.lazyLoad(exports, ["Sesv2AccountVdmAttributes"], () => require("./sesv2AccountVdmAttributes"));

export { Sesv2ConfigurationSetArgs, Sesv2ConfigurationSetState } from "./sesv2ConfigurationSet";
export type Sesv2ConfigurationSet = import("./sesv2ConfigurationSet").Sesv2ConfigurationSet;
export const Sesv2ConfigurationSet: typeof import("./sesv2ConfigurationSet").Sesv2ConfigurationSet = null as any;
utilities.lazyLoad(exports, ["Sesv2ConfigurationSet"], () => require("./sesv2ConfigurationSet"));

export { Sesv2ConfigurationSetEventDestinationArgs, Sesv2ConfigurationSetEventDestinationState } from "./sesv2ConfigurationSetEventDestination";
export type Sesv2ConfigurationSetEventDestination = import("./sesv2ConfigurationSetEventDestination").Sesv2ConfigurationSetEventDestination;
export const Sesv2ConfigurationSetEventDestination: typeof import("./sesv2ConfigurationSetEventDestination").Sesv2ConfigurationSetEventDestination = null as any;
utilities.lazyLoad(exports, ["Sesv2ConfigurationSetEventDestination"], () => require("./sesv2ConfigurationSetEventDestination"));

export { Sesv2ContactListArgs, Sesv2ContactListState } from "./sesv2ContactList";
export type Sesv2ContactList = import("./sesv2ContactList").Sesv2ContactList;
export const Sesv2ContactList: typeof import("./sesv2ContactList").Sesv2ContactList = null as any;
utilities.lazyLoad(exports, ["Sesv2ContactList"], () => require("./sesv2ContactList"));

export { Sesv2DedicatedIpAssignmentArgs, Sesv2DedicatedIpAssignmentState } from "./sesv2DedicatedIpAssignment";
export type Sesv2DedicatedIpAssignment = import("./sesv2DedicatedIpAssignment").Sesv2DedicatedIpAssignment;
export const Sesv2DedicatedIpAssignment: typeof import("./sesv2DedicatedIpAssignment").Sesv2DedicatedIpAssignment = null as any;
utilities.lazyLoad(exports, ["Sesv2DedicatedIpAssignment"], () => require("./sesv2DedicatedIpAssignment"));

export { Sesv2DedicatedIpPoolArgs, Sesv2DedicatedIpPoolState } from "./sesv2DedicatedIpPool";
export type Sesv2DedicatedIpPool = import("./sesv2DedicatedIpPool").Sesv2DedicatedIpPool;
export const Sesv2DedicatedIpPool: typeof import("./sesv2DedicatedIpPool").Sesv2DedicatedIpPool = null as any;
utilities.lazyLoad(exports, ["Sesv2DedicatedIpPool"], () => require("./sesv2DedicatedIpPool"));

export { Sesv2EmailIdentityArgs, Sesv2EmailIdentityState } from "./sesv2EmailIdentity";
export type Sesv2EmailIdentity = import("./sesv2EmailIdentity").Sesv2EmailIdentity;
export const Sesv2EmailIdentity: typeof import("./sesv2EmailIdentity").Sesv2EmailIdentity = null as any;
utilities.lazyLoad(exports, ["Sesv2EmailIdentity"], () => require("./sesv2EmailIdentity"));

export { Sesv2EmailIdentityFeedbackAttributesArgs, Sesv2EmailIdentityFeedbackAttributesState } from "./sesv2EmailIdentityFeedbackAttributes";
export type Sesv2EmailIdentityFeedbackAttributes = import("./sesv2EmailIdentityFeedbackAttributes").Sesv2EmailIdentityFeedbackAttributes;
export const Sesv2EmailIdentityFeedbackAttributes: typeof import("./sesv2EmailIdentityFeedbackAttributes").Sesv2EmailIdentityFeedbackAttributes = null as any;
utilities.lazyLoad(exports, ["Sesv2EmailIdentityFeedbackAttributes"], () => require("./sesv2EmailIdentityFeedbackAttributes"));

export { Sesv2EmailIdentityMailFromAttributesArgs, Sesv2EmailIdentityMailFromAttributesState } from "./sesv2EmailIdentityMailFromAttributes";
export type Sesv2EmailIdentityMailFromAttributes = import("./sesv2EmailIdentityMailFromAttributes").Sesv2EmailIdentityMailFromAttributes;
export const Sesv2EmailIdentityMailFromAttributes: typeof import("./sesv2EmailIdentityMailFromAttributes").Sesv2EmailIdentityMailFromAttributes = null as any;
utilities.lazyLoad(exports, ["Sesv2EmailIdentityMailFromAttributes"], () => require("./sesv2EmailIdentityMailFromAttributes"));

export { Sesv2EmailIdentityPolicyArgs, Sesv2EmailIdentityPolicyState } from "./sesv2EmailIdentityPolicy";
export type Sesv2EmailIdentityPolicy = import("./sesv2EmailIdentityPolicy").Sesv2EmailIdentityPolicy;
export const Sesv2EmailIdentityPolicy: typeof import("./sesv2EmailIdentityPolicy").Sesv2EmailIdentityPolicy = null as any;
utilities.lazyLoad(exports, ["Sesv2EmailIdentityPolicy"], () => require("./sesv2EmailIdentityPolicy"));

export { SfnActivityArgs, SfnActivityState } from "./sfnActivity";
export type SfnActivity = import("./sfnActivity").SfnActivity;
export const SfnActivity: typeof import("./sfnActivity").SfnActivity = null as any;
utilities.lazyLoad(exports, ["SfnActivity"], () => require("./sfnActivity"));

export { SfnAliasArgs, SfnAliasState } from "./sfnAlias";
export type SfnAlias = import("./sfnAlias").SfnAlias;
export const SfnAlias: typeof import("./sfnAlias").SfnAlias = null as any;
utilities.lazyLoad(exports, ["SfnAlias"], () => require("./sfnAlias"));

export { SfnStateMachineArgs, SfnStateMachineState } from "./sfnStateMachine";
export type SfnStateMachine = import("./sfnStateMachine").SfnStateMachine;
export const SfnStateMachine: typeof import("./sfnStateMachine").SfnStateMachine = null as any;
utilities.lazyLoad(exports, ["SfnStateMachine"], () => require("./sfnStateMachine"));

export { ShieldApplicationLayerAutomaticResponseArgs, ShieldApplicationLayerAutomaticResponseState } from "./shieldApplicationLayerAutomaticResponse";
export type ShieldApplicationLayerAutomaticResponse = import("./shieldApplicationLayerAutomaticResponse").ShieldApplicationLayerAutomaticResponse;
export const ShieldApplicationLayerAutomaticResponse: typeof import("./shieldApplicationLayerAutomaticResponse").ShieldApplicationLayerAutomaticResponse = null as any;
utilities.lazyLoad(exports, ["ShieldApplicationLayerAutomaticResponse"], () => require("./shieldApplicationLayerAutomaticResponse"));

export { ShieldDrtAccessLogBucketAssociationArgs, ShieldDrtAccessLogBucketAssociationState } from "./shieldDrtAccessLogBucketAssociation";
export type ShieldDrtAccessLogBucketAssociation = import("./shieldDrtAccessLogBucketAssociation").ShieldDrtAccessLogBucketAssociation;
export const ShieldDrtAccessLogBucketAssociation: typeof import("./shieldDrtAccessLogBucketAssociation").ShieldDrtAccessLogBucketAssociation = null as any;
utilities.lazyLoad(exports, ["ShieldDrtAccessLogBucketAssociation"], () => require("./shieldDrtAccessLogBucketAssociation"));

export { ShieldDrtAccessRoleArnAssociationArgs, ShieldDrtAccessRoleArnAssociationState } from "./shieldDrtAccessRoleArnAssociation";
export type ShieldDrtAccessRoleArnAssociation = import("./shieldDrtAccessRoleArnAssociation").ShieldDrtAccessRoleArnAssociation;
export const ShieldDrtAccessRoleArnAssociation: typeof import("./shieldDrtAccessRoleArnAssociation").ShieldDrtAccessRoleArnAssociation = null as any;
utilities.lazyLoad(exports, ["ShieldDrtAccessRoleArnAssociation"], () => require("./shieldDrtAccessRoleArnAssociation"));

export { ShieldProactiveEngagementArgs, ShieldProactiveEngagementState } from "./shieldProactiveEngagement";
export type ShieldProactiveEngagement = import("./shieldProactiveEngagement").ShieldProactiveEngagement;
export const ShieldProactiveEngagement: typeof import("./shieldProactiveEngagement").ShieldProactiveEngagement = null as any;
utilities.lazyLoad(exports, ["ShieldProactiveEngagement"], () => require("./shieldProactiveEngagement"));

export { ShieldProtectionArgs, ShieldProtectionState } from "./shieldProtection";
export type ShieldProtection = import("./shieldProtection").ShieldProtection;
export const ShieldProtection: typeof import("./shieldProtection").ShieldProtection = null as any;
utilities.lazyLoad(exports, ["ShieldProtection"], () => require("./shieldProtection"));

export { ShieldProtectionGroupArgs, ShieldProtectionGroupState } from "./shieldProtectionGroup";
export type ShieldProtectionGroup = import("./shieldProtectionGroup").ShieldProtectionGroup;
export const ShieldProtectionGroup: typeof import("./shieldProtectionGroup").ShieldProtectionGroup = null as any;
utilities.lazyLoad(exports, ["ShieldProtectionGroup"], () => require("./shieldProtectionGroup"));

export { ShieldProtectionHealthCheckAssociationArgs, ShieldProtectionHealthCheckAssociationState } from "./shieldProtectionHealthCheckAssociation";
export type ShieldProtectionHealthCheckAssociation = import("./shieldProtectionHealthCheckAssociation").ShieldProtectionHealthCheckAssociation;
export const ShieldProtectionHealthCheckAssociation: typeof import("./shieldProtectionHealthCheckAssociation").ShieldProtectionHealthCheckAssociation = null as any;
utilities.lazyLoad(exports, ["ShieldProtectionHealthCheckAssociation"], () => require("./shieldProtectionHealthCheckAssociation"));

export { ShieldSubscriptionArgs, ShieldSubscriptionState } from "./shieldSubscription";
export type ShieldSubscription = import("./shieldSubscription").ShieldSubscription;
export const ShieldSubscription: typeof import("./shieldSubscription").ShieldSubscription = null as any;
utilities.lazyLoad(exports, ["ShieldSubscription"], () => require("./shieldSubscription"));

export { SignerSigningJobArgs, SignerSigningJobState } from "./signerSigningJob";
export type SignerSigningJob = import("./signerSigningJob").SignerSigningJob;
export const SignerSigningJob: typeof import("./signerSigningJob").SignerSigningJob = null as any;
utilities.lazyLoad(exports, ["SignerSigningJob"], () => require("./signerSigningJob"));

export { SignerSigningProfileArgs, SignerSigningProfileState } from "./signerSigningProfile";
export type SignerSigningProfile = import("./signerSigningProfile").SignerSigningProfile;
export const SignerSigningProfile: typeof import("./signerSigningProfile").SignerSigningProfile = null as any;
utilities.lazyLoad(exports, ["SignerSigningProfile"], () => require("./signerSigningProfile"));

export { SignerSigningProfilePermissionArgs, SignerSigningProfilePermissionState } from "./signerSigningProfilePermission";
export type SignerSigningProfilePermission = import("./signerSigningProfilePermission").SignerSigningProfilePermission;
export const SignerSigningProfilePermission: typeof import("./signerSigningProfilePermission").SignerSigningProfilePermission = null as any;
utilities.lazyLoad(exports, ["SignerSigningProfilePermission"], () => require("./signerSigningProfilePermission"));

export { SimpledbDomainArgs, SimpledbDomainState } from "./simpledbDomain";
export type SimpledbDomain = import("./simpledbDomain").SimpledbDomain;
export const SimpledbDomain: typeof import("./simpledbDomain").SimpledbDomain = null as any;
utilities.lazyLoad(exports, ["SimpledbDomain"], () => require("./simpledbDomain"));

export { SnapshotCreateVolumePermissionArgs, SnapshotCreateVolumePermissionState } from "./snapshotCreateVolumePermission";
export type SnapshotCreateVolumePermission = import("./snapshotCreateVolumePermission").SnapshotCreateVolumePermission;
export const SnapshotCreateVolumePermission: typeof import("./snapshotCreateVolumePermission").SnapshotCreateVolumePermission = null as any;
utilities.lazyLoad(exports, ["SnapshotCreateVolumePermission"], () => require("./snapshotCreateVolumePermission"));

export { SnsPlatformApplicationArgs, SnsPlatformApplicationState } from "./snsPlatformApplication";
export type SnsPlatformApplication = import("./snsPlatformApplication").SnsPlatformApplication;
export const SnsPlatformApplication: typeof import("./snsPlatformApplication").SnsPlatformApplication = null as any;
utilities.lazyLoad(exports, ["SnsPlatformApplication"], () => require("./snsPlatformApplication"));

export { SnsSmsPreferencesArgs, SnsSmsPreferencesState } from "./snsSmsPreferences";
export type SnsSmsPreferences = import("./snsSmsPreferences").SnsSmsPreferences;
export const SnsSmsPreferences: typeof import("./snsSmsPreferences").SnsSmsPreferences = null as any;
utilities.lazyLoad(exports, ["SnsSmsPreferences"], () => require("./snsSmsPreferences"));

export { SnsTopicArgs, SnsTopicState } from "./snsTopic";
export type SnsTopic = import("./snsTopic").SnsTopic;
export const SnsTopic: typeof import("./snsTopic").SnsTopic = null as any;
utilities.lazyLoad(exports, ["SnsTopic"], () => require("./snsTopic"));

export { SnsTopicDataProtectionPolicyArgs, SnsTopicDataProtectionPolicyState } from "./snsTopicDataProtectionPolicy";
export type SnsTopicDataProtectionPolicy = import("./snsTopicDataProtectionPolicy").SnsTopicDataProtectionPolicy;
export const SnsTopicDataProtectionPolicy: typeof import("./snsTopicDataProtectionPolicy").SnsTopicDataProtectionPolicy = null as any;
utilities.lazyLoad(exports, ["SnsTopicDataProtectionPolicy"], () => require("./snsTopicDataProtectionPolicy"));

export { SnsTopicPolicyArgs, SnsTopicPolicyState } from "./snsTopicPolicy";
export type SnsTopicPolicy = import("./snsTopicPolicy").SnsTopicPolicy;
export const SnsTopicPolicy: typeof import("./snsTopicPolicy").SnsTopicPolicy = null as any;
utilities.lazyLoad(exports, ["SnsTopicPolicy"], () => require("./snsTopicPolicy"));

export { SnsTopicSubscriptionArgs, SnsTopicSubscriptionState } from "./snsTopicSubscription";
export type SnsTopicSubscription = import("./snsTopicSubscription").SnsTopicSubscription;
export const SnsTopicSubscription: typeof import("./snsTopicSubscription").SnsTopicSubscription = null as any;
utilities.lazyLoad(exports, ["SnsTopicSubscription"], () => require("./snsTopicSubscription"));

export { SpotDatafeedSubscriptionArgs, SpotDatafeedSubscriptionState } from "./spotDatafeedSubscription";
export type SpotDatafeedSubscription = import("./spotDatafeedSubscription").SpotDatafeedSubscription;
export const SpotDatafeedSubscription: typeof import("./spotDatafeedSubscription").SpotDatafeedSubscription = null as any;
utilities.lazyLoad(exports, ["SpotDatafeedSubscription"], () => require("./spotDatafeedSubscription"));

export { SpotFleetRequestArgs, SpotFleetRequestState } from "./spotFleetRequest";
export type SpotFleetRequest = import("./spotFleetRequest").SpotFleetRequest;
export const SpotFleetRequest: typeof import("./spotFleetRequest").SpotFleetRequest = null as any;
utilities.lazyLoad(exports, ["SpotFleetRequest"], () => require("./spotFleetRequest"));

export { SpotInstanceRequestArgs, SpotInstanceRequestState } from "./spotInstanceRequest";
export type SpotInstanceRequest = import("./spotInstanceRequest").SpotInstanceRequest;
export const SpotInstanceRequest: typeof import("./spotInstanceRequest").SpotInstanceRequest = null as any;
utilities.lazyLoad(exports, ["SpotInstanceRequest"], () => require("./spotInstanceRequest"));

export { SqsQueueArgs, SqsQueueState } from "./sqsQueue";
export type SqsQueue = import("./sqsQueue").SqsQueue;
export const SqsQueue: typeof import("./sqsQueue").SqsQueue = null as any;
utilities.lazyLoad(exports, ["SqsQueue"], () => require("./sqsQueue"));

export { SqsQueuePolicyArgs, SqsQueuePolicyState } from "./sqsQueuePolicy";
export type SqsQueuePolicy = import("./sqsQueuePolicy").SqsQueuePolicy;
export const SqsQueuePolicy: typeof import("./sqsQueuePolicy").SqsQueuePolicy = null as any;
utilities.lazyLoad(exports, ["SqsQueuePolicy"], () => require("./sqsQueuePolicy"));

export { SqsQueueRedriveAllowPolicyArgs, SqsQueueRedriveAllowPolicyState } from "./sqsQueueRedriveAllowPolicy";
export type SqsQueueRedriveAllowPolicy = import("./sqsQueueRedriveAllowPolicy").SqsQueueRedriveAllowPolicy;
export const SqsQueueRedriveAllowPolicy: typeof import("./sqsQueueRedriveAllowPolicy").SqsQueueRedriveAllowPolicy = null as any;
utilities.lazyLoad(exports, ["SqsQueueRedriveAllowPolicy"], () => require("./sqsQueueRedriveAllowPolicy"));

export { SqsQueueRedrivePolicyArgs, SqsQueueRedrivePolicyState } from "./sqsQueueRedrivePolicy";
export type SqsQueueRedrivePolicy = import("./sqsQueueRedrivePolicy").SqsQueueRedrivePolicy;
export const SqsQueueRedrivePolicy: typeof import("./sqsQueueRedrivePolicy").SqsQueueRedrivePolicy = null as any;
utilities.lazyLoad(exports, ["SqsQueueRedrivePolicy"], () => require("./sqsQueueRedrivePolicy"));

export { SsmActivationArgs, SsmActivationState } from "./ssmActivation";
export type SsmActivation = import("./ssmActivation").SsmActivation;
export const SsmActivation: typeof import("./ssmActivation").SsmActivation = null as any;
utilities.lazyLoad(exports, ["SsmActivation"], () => require("./ssmActivation"));

export { SsmAssociationArgs, SsmAssociationState } from "./ssmAssociation";
export type SsmAssociation = import("./ssmAssociation").SsmAssociation;
export const SsmAssociation: typeof import("./ssmAssociation").SsmAssociation = null as any;
utilities.lazyLoad(exports, ["SsmAssociation"], () => require("./ssmAssociation"));

export { SsmDefaultPatchBaselineArgs, SsmDefaultPatchBaselineState } from "./ssmDefaultPatchBaseline";
export type SsmDefaultPatchBaseline = import("./ssmDefaultPatchBaseline").SsmDefaultPatchBaseline;
export const SsmDefaultPatchBaseline: typeof import("./ssmDefaultPatchBaseline").SsmDefaultPatchBaseline = null as any;
utilities.lazyLoad(exports, ["SsmDefaultPatchBaseline"], () => require("./ssmDefaultPatchBaseline"));

export { SsmDocumentArgs, SsmDocumentState } from "./ssmDocument";
export type SsmDocument = import("./ssmDocument").SsmDocument;
export const SsmDocument: typeof import("./ssmDocument").SsmDocument = null as any;
utilities.lazyLoad(exports, ["SsmDocument"], () => require("./ssmDocument"));

export { SsmMaintenanceWindowArgs, SsmMaintenanceWindowState } from "./ssmMaintenanceWindow";
export type SsmMaintenanceWindow = import("./ssmMaintenanceWindow").SsmMaintenanceWindow;
export const SsmMaintenanceWindow: typeof import("./ssmMaintenanceWindow").SsmMaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["SsmMaintenanceWindow"], () => require("./ssmMaintenanceWindow"));

export { SsmMaintenanceWindowTargetArgs, SsmMaintenanceWindowTargetState } from "./ssmMaintenanceWindowTarget";
export type SsmMaintenanceWindowTarget = import("./ssmMaintenanceWindowTarget").SsmMaintenanceWindowTarget;
export const SsmMaintenanceWindowTarget: typeof import("./ssmMaintenanceWindowTarget").SsmMaintenanceWindowTarget = null as any;
utilities.lazyLoad(exports, ["SsmMaintenanceWindowTarget"], () => require("./ssmMaintenanceWindowTarget"));

export { SsmMaintenanceWindowTaskArgs, SsmMaintenanceWindowTaskState } from "./ssmMaintenanceWindowTask";
export type SsmMaintenanceWindowTask = import("./ssmMaintenanceWindowTask").SsmMaintenanceWindowTask;
export const SsmMaintenanceWindowTask: typeof import("./ssmMaintenanceWindowTask").SsmMaintenanceWindowTask = null as any;
utilities.lazyLoad(exports, ["SsmMaintenanceWindowTask"], () => require("./ssmMaintenanceWindowTask"));

export { SsmParameterArgs, SsmParameterState } from "./ssmParameter";
export type SsmParameter = import("./ssmParameter").SsmParameter;
export const SsmParameter: typeof import("./ssmParameter").SsmParameter = null as any;
utilities.lazyLoad(exports, ["SsmParameter"], () => require("./ssmParameter"));

export { SsmPatchBaselineArgs, SsmPatchBaselineState } from "./ssmPatchBaseline";
export type SsmPatchBaseline = import("./ssmPatchBaseline").SsmPatchBaseline;
export const SsmPatchBaseline: typeof import("./ssmPatchBaseline").SsmPatchBaseline = null as any;
utilities.lazyLoad(exports, ["SsmPatchBaseline"], () => require("./ssmPatchBaseline"));

export { SsmPatchGroupArgs, SsmPatchGroupState } from "./ssmPatchGroup";
export type SsmPatchGroup = import("./ssmPatchGroup").SsmPatchGroup;
export const SsmPatchGroup: typeof import("./ssmPatchGroup").SsmPatchGroup = null as any;
utilities.lazyLoad(exports, ["SsmPatchGroup"], () => require("./ssmPatchGroup"));

export { SsmResourceDataSyncArgs, SsmResourceDataSyncState } from "./ssmResourceDataSync";
export type SsmResourceDataSync = import("./ssmResourceDataSync").SsmResourceDataSync;
export const SsmResourceDataSync: typeof import("./ssmResourceDataSync").SsmResourceDataSync = null as any;
utilities.lazyLoad(exports, ["SsmResourceDataSync"], () => require("./ssmResourceDataSync"));

export { SsmServiceSettingArgs, SsmServiceSettingState } from "./ssmServiceSetting";
export type SsmServiceSetting = import("./ssmServiceSetting").SsmServiceSetting;
export const SsmServiceSetting: typeof import("./ssmServiceSetting").SsmServiceSetting = null as any;
utilities.lazyLoad(exports, ["SsmServiceSetting"], () => require("./ssmServiceSetting"));

export { SsmcontactsContactArgs, SsmcontactsContactState } from "./ssmcontactsContact";
export type SsmcontactsContact = import("./ssmcontactsContact").SsmcontactsContact;
export const SsmcontactsContact: typeof import("./ssmcontactsContact").SsmcontactsContact = null as any;
utilities.lazyLoad(exports, ["SsmcontactsContact"], () => require("./ssmcontactsContact"));

export { SsmcontactsContactChannelArgs, SsmcontactsContactChannelState } from "./ssmcontactsContactChannel";
export type SsmcontactsContactChannel = import("./ssmcontactsContactChannel").SsmcontactsContactChannel;
export const SsmcontactsContactChannel: typeof import("./ssmcontactsContactChannel").SsmcontactsContactChannel = null as any;
utilities.lazyLoad(exports, ["SsmcontactsContactChannel"], () => require("./ssmcontactsContactChannel"));

export { SsmcontactsPlanArgs, SsmcontactsPlanState } from "./ssmcontactsPlan";
export type SsmcontactsPlan = import("./ssmcontactsPlan").SsmcontactsPlan;
export const SsmcontactsPlan: typeof import("./ssmcontactsPlan").SsmcontactsPlan = null as any;
utilities.lazyLoad(exports, ["SsmcontactsPlan"], () => require("./ssmcontactsPlan"));

export { SsmcontactsRotationArgs, SsmcontactsRotationState } from "./ssmcontactsRotation";
export type SsmcontactsRotation = import("./ssmcontactsRotation").SsmcontactsRotation;
export const SsmcontactsRotation: typeof import("./ssmcontactsRotation").SsmcontactsRotation = null as any;
utilities.lazyLoad(exports, ["SsmcontactsRotation"], () => require("./ssmcontactsRotation"));

export { SsmincidentsReplicationSetArgs, SsmincidentsReplicationSetState } from "./ssmincidentsReplicationSet";
export type SsmincidentsReplicationSet = import("./ssmincidentsReplicationSet").SsmincidentsReplicationSet;
export const SsmincidentsReplicationSet: typeof import("./ssmincidentsReplicationSet").SsmincidentsReplicationSet = null as any;
utilities.lazyLoad(exports, ["SsmincidentsReplicationSet"], () => require("./ssmincidentsReplicationSet"));

export { SsmincidentsResponsePlanArgs, SsmincidentsResponsePlanState } from "./ssmincidentsResponsePlan";
export type SsmincidentsResponsePlan = import("./ssmincidentsResponsePlan").SsmincidentsResponsePlan;
export const SsmincidentsResponsePlan: typeof import("./ssmincidentsResponsePlan").SsmincidentsResponsePlan = null as any;
utilities.lazyLoad(exports, ["SsmincidentsResponsePlan"], () => require("./ssmincidentsResponsePlan"));

export { SsoadminAccountAssignmentArgs, SsoadminAccountAssignmentState } from "./ssoadminAccountAssignment";
export type SsoadminAccountAssignment = import("./ssoadminAccountAssignment").SsoadminAccountAssignment;
export const SsoadminAccountAssignment: typeof import("./ssoadminAccountAssignment").SsoadminAccountAssignment = null as any;
utilities.lazyLoad(exports, ["SsoadminAccountAssignment"], () => require("./ssoadminAccountAssignment"));

export { SsoadminApplicationArgs, SsoadminApplicationState } from "./ssoadminApplication";
export type SsoadminApplication = import("./ssoadminApplication").SsoadminApplication;
export const SsoadminApplication: typeof import("./ssoadminApplication").SsoadminApplication = null as any;
utilities.lazyLoad(exports, ["SsoadminApplication"], () => require("./ssoadminApplication"));

export { SsoadminApplicationAccessScopeArgs, SsoadminApplicationAccessScopeState } from "./ssoadminApplicationAccessScope";
export type SsoadminApplicationAccessScope = import("./ssoadminApplicationAccessScope").SsoadminApplicationAccessScope;
export const SsoadminApplicationAccessScope: typeof import("./ssoadminApplicationAccessScope").SsoadminApplicationAccessScope = null as any;
utilities.lazyLoad(exports, ["SsoadminApplicationAccessScope"], () => require("./ssoadminApplicationAccessScope"));

export { SsoadminApplicationAssignmentArgs, SsoadminApplicationAssignmentState } from "./ssoadminApplicationAssignment";
export type SsoadminApplicationAssignment = import("./ssoadminApplicationAssignment").SsoadminApplicationAssignment;
export const SsoadminApplicationAssignment: typeof import("./ssoadminApplicationAssignment").SsoadminApplicationAssignment = null as any;
utilities.lazyLoad(exports, ["SsoadminApplicationAssignment"], () => require("./ssoadminApplicationAssignment"));

export { SsoadminApplicationAssignmentConfigurationArgs, SsoadminApplicationAssignmentConfigurationState } from "./ssoadminApplicationAssignmentConfiguration";
export type SsoadminApplicationAssignmentConfiguration = import("./ssoadminApplicationAssignmentConfiguration").SsoadminApplicationAssignmentConfiguration;
export const SsoadminApplicationAssignmentConfiguration: typeof import("./ssoadminApplicationAssignmentConfiguration").SsoadminApplicationAssignmentConfiguration = null as any;
utilities.lazyLoad(exports, ["SsoadminApplicationAssignmentConfiguration"], () => require("./ssoadminApplicationAssignmentConfiguration"));

export { SsoadminCustomerManagedPolicyAttachmentArgs, SsoadminCustomerManagedPolicyAttachmentState } from "./ssoadminCustomerManagedPolicyAttachment";
export type SsoadminCustomerManagedPolicyAttachment = import("./ssoadminCustomerManagedPolicyAttachment").SsoadminCustomerManagedPolicyAttachment;
export const SsoadminCustomerManagedPolicyAttachment: typeof import("./ssoadminCustomerManagedPolicyAttachment").SsoadminCustomerManagedPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["SsoadminCustomerManagedPolicyAttachment"], () => require("./ssoadminCustomerManagedPolicyAttachment"));

export { SsoadminInstanceAccessControlAttributesArgs, SsoadminInstanceAccessControlAttributesState } from "./ssoadminInstanceAccessControlAttributes";
export type SsoadminInstanceAccessControlAttributes = import("./ssoadminInstanceAccessControlAttributes").SsoadminInstanceAccessControlAttributes;
export const SsoadminInstanceAccessControlAttributes: typeof import("./ssoadminInstanceAccessControlAttributes").SsoadminInstanceAccessControlAttributes = null as any;
utilities.lazyLoad(exports, ["SsoadminInstanceAccessControlAttributes"], () => require("./ssoadminInstanceAccessControlAttributes"));

export { SsoadminManagedPolicyAttachmentArgs, SsoadminManagedPolicyAttachmentState } from "./ssoadminManagedPolicyAttachment";
export type SsoadminManagedPolicyAttachment = import("./ssoadminManagedPolicyAttachment").SsoadminManagedPolicyAttachment;
export const SsoadminManagedPolicyAttachment: typeof import("./ssoadminManagedPolicyAttachment").SsoadminManagedPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["SsoadminManagedPolicyAttachment"], () => require("./ssoadminManagedPolicyAttachment"));

export { SsoadminPermissionSetArgs, SsoadminPermissionSetState } from "./ssoadminPermissionSet";
export type SsoadminPermissionSet = import("./ssoadminPermissionSet").SsoadminPermissionSet;
export const SsoadminPermissionSet: typeof import("./ssoadminPermissionSet").SsoadminPermissionSet = null as any;
utilities.lazyLoad(exports, ["SsoadminPermissionSet"], () => require("./ssoadminPermissionSet"));

export { SsoadminPermissionSetInlinePolicyArgs, SsoadminPermissionSetInlinePolicyState } from "./ssoadminPermissionSetInlinePolicy";
export type SsoadminPermissionSetInlinePolicy = import("./ssoadminPermissionSetInlinePolicy").SsoadminPermissionSetInlinePolicy;
export const SsoadminPermissionSetInlinePolicy: typeof import("./ssoadminPermissionSetInlinePolicy").SsoadminPermissionSetInlinePolicy = null as any;
utilities.lazyLoad(exports, ["SsoadminPermissionSetInlinePolicy"], () => require("./ssoadminPermissionSetInlinePolicy"));

export { SsoadminPermissionsBoundaryAttachmentArgs, SsoadminPermissionsBoundaryAttachmentState } from "./ssoadminPermissionsBoundaryAttachment";
export type SsoadminPermissionsBoundaryAttachment = import("./ssoadminPermissionsBoundaryAttachment").SsoadminPermissionsBoundaryAttachment;
export const SsoadminPermissionsBoundaryAttachment: typeof import("./ssoadminPermissionsBoundaryAttachment").SsoadminPermissionsBoundaryAttachment = null as any;
utilities.lazyLoad(exports, ["SsoadminPermissionsBoundaryAttachment"], () => require("./ssoadminPermissionsBoundaryAttachment"));

export { SsoadminTrustedTokenIssuerArgs, SsoadminTrustedTokenIssuerState } from "./ssoadminTrustedTokenIssuer";
export type SsoadminTrustedTokenIssuer = import("./ssoadminTrustedTokenIssuer").SsoadminTrustedTokenIssuer;
export const SsoadminTrustedTokenIssuer: typeof import("./ssoadminTrustedTokenIssuer").SsoadminTrustedTokenIssuer = null as any;
utilities.lazyLoad(exports, ["SsoadminTrustedTokenIssuer"], () => require("./ssoadminTrustedTokenIssuer"));

export { StoragegatewayCacheArgs, StoragegatewayCacheState } from "./storagegatewayCache";
export type StoragegatewayCache = import("./storagegatewayCache").StoragegatewayCache;
export const StoragegatewayCache: typeof import("./storagegatewayCache").StoragegatewayCache = null as any;
utilities.lazyLoad(exports, ["StoragegatewayCache"], () => require("./storagegatewayCache"));

export { StoragegatewayCachedIscsiVolumeArgs, StoragegatewayCachedIscsiVolumeState } from "./storagegatewayCachedIscsiVolume";
export type StoragegatewayCachedIscsiVolume = import("./storagegatewayCachedIscsiVolume").StoragegatewayCachedIscsiVolume;
export const StoragegatewayCachedIscsiVolume: typeof import("./storagegatewayCachedIscsiVolume").StoragegatewayCachedIscsiVolume = null as any;
utilities.lazyLoad(exports, ["StoragegatewayCachedIscsiVolume"], () => require("./storagegatewayCachedIscsiVolume"));

export { StoragegatewayFileSystemAssociationArgs, StoragegatewayFileSystemAssociationState } from "./storagegatewayFileSystemAssociation";
export type StoragegatewayFileSystemAssociation = import("./storagegatewayFileSystemAssociation").StoragegatewayFileSystemAssociation;
export const StoragegatewayFileSystemAssociation: typeof import("./storagegatewayFileSystemAssociation").StoragegatewayFileSystemAssociation = null as any;
utilities.lazyLoad(exports, ["StoragegatewayFileSystemAssociation"], () => require("./storagegatewayFileSystemAssociation"));

export { StoragegatewayGatewayArgs, StoragegatewayGatewayState } from "./storagegatewayGateway";
export type StoragegatewayGateway = import("./storagegatewayGateway").StoragegatewayGateway;
export const StoragegatewayGateway: typeof import("./storagegatewayGateway").StoragegatewayGateway = null as any;
utilities.lazyLoad(exports, ["StoragegatewayGateway"], () => require("./storagegatewayGateway"));

export { StoragegatewayNfsFileShareArgs, StoragegatewayNfsFileShareState } from "./storagegatewayNfsFileShare";
export type StoragegatewayNfsFileShare = import("./storagegatewayNfsFileShare").StoragegatewayNfsFileShare;
export const StoragegatewayNfsFileShare: typeof import("./storagegatewayNfsFileShare").StoragegatewayNfsFileShare = null as any;
utilities.lazyLoad(exports, ["StoragegatewayNfsFileShare"], () => require("./storagegatewayNfsFileShare"));

export { StoragegatewaySmbFileShareArgs, StoragegatewaySmbFileShareState } from "./storagegatewaySmbFileShare";
export type StoragegatewaySmbFileShare = import("./storagegatewaySmbFileShare").StoragegatewaySmbFileShare;
export const StoragegatewaySmbFileShare: typeof import("./storagegatewaySmbFileShare").StoragegatewaySmbFileShare = null as any;
utilities.lazyLoad(exports, ["StoragegatewaySmbFileShare"], () => require("./storagegatewaySmbFileShare"));

export { StoragegatewayStoredIscsiVolumeArgs, StoragegatewayStoredIscsiVolumeState } from "./storagegatewayStoredIscsiVolume";
export type StoragegatewayStoredIscsiVolume = import("./storagegatewayStoredIscsiVolume").StoragegatewayStoredIscsiVolume;
export const StoragegatewayStoredIscsiVolume: typeof import("./storagegatewayStoredIscsiVolume").StoragegatewayStoredIscsiVolume = null as any;
utilities.lazyLoad(exports, ["StoragegatewayStoredIscsiVolume"], () => require("./storagegatewayStoredIscsiVolume"));

export { StoragegatewayTapePoolArgs, StoragegatewayTapePoolState } from "./storagegatewayTapePool";
export type StoragegatewayTapePool = import("./storagegatewayTapePool").StoragegatewayTapePool;
export const StoragegatewayTapePool: typeof import("./storagegatewayTapePool").StoragegatewayTapePool = null as any;
utilities.lazyLoad(exports, ["StoragegatewayTapePool"], () => require("./storagegatewayTapePool"));

export { StoragegatewayUploadBufferArgs, StoragegatewayUploadBufferState } from "./storagegatewayUploadBuffer";
export type StoragegatewayUploadBuffer = import("./storagegatewayUploadBuffer").StoragegatewayUploadBuffer;
export const StoragegatewayUploadBuffer: typeof import("./storagegatewayUploadBuffer").StoragegatewayUploadBuffer = null as any;
utilities.lazyLoad(exports, ["StoragegatewayUploadBuffer"], () => require("./storagegatewayUploadBuffer"));

export { StoragegatewayWorkingStorageArgs, StoragegatewayWorkingStorageState } from "./storagegatewayWorkingStorage";
export type StoragegatewayWorkingStorage = import("./storagegatewayWorkingStorage").StoragegatewayWorkingStorage;
export const StoragegatewayWorkingStorage: typeof import("./storagegatewayWorkingStorage").StoragegatewayWorkingStorage = null as any;
utilities.lazyLoad(exports, ["StoragegatewayWorkingStorage"], () => require("./storagegatewayWorkingStorage"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { SwfDomainArgs, SwfDomainState } from "./swfDomain";
export type SwfDomain = import("./swfDomain").SwfDomain;
export const SwfDomain: typeof import("./swfDomain").SwfDomain = null as any;
utilities.lazyLoad(exports, ["SwfDomain"], () => require("./swfDomain"));

export { SyntheticsCanaryArgs, SyntheticsCanaryState } from "./syntheticsCanary";
export type SyntheticsCanary = import("./syntheticsCanary").SyntheticsCanary;
export const SyntheticsCanary: typeof import("./syntheticsCanary").SyntheticsCanary = null as any;
utilities.lazyLoad(exports, ["SyntheticsCanary"], () => require("./syntheticsCanary"));

export { SyntheticsGroupArgs, SyntheticsGroupState } from "./syntheticsGroup";
export type SyntheticsGroup = import("./syntheticsGroup").SyntheticsGroup;
export const SyntheticsGroup: typeof import("./syntheticsGroup").SyntheticsGroup = null as any;
utilities.lazyLoad(exports, ["SyntheticsGroup"], () => require("./syntheticsGroup"));

export { SyntheticsGroupAssociationArgs, SyntheticsGroupAssociationState } from "./syntheticsGroupAssociation";
export type SyntheticsGroupAssociation = import("./syntheticsGroupAssociation").SyntheticsGroupAssociation;
export const SyntheticsGroupAssociation: typeof import("./syntheticsGroupAssociation").SyntheticsGroupAssociation = null as any;
utilities.lazyLoad(exports, ["SyntheticsGroupAssociation"], () => require("./syntheticsGroupAssociation"));

export { TimestreaminfluxdbDbInstanceArgs, TimestreaminfluxdbDbInstanceState } from "./timestreaminfluxdbDbInstance";
export type TimestreaminfluxdbDbInstance = import("./timestreaminfluxdbDbInstance").TimestreaminfluxdbDbInstance;
export const TimestreaminfluxdbDbInstance: typeof import("./timestreaminfluxdbDbInstance").TimestreaminfluxdbDbInstance = null as any;
utilities.lazyLoad(exports, ["TimestreaminfluxdbDbInstance"], () => require("./timestreaminfluxdbDbInstance"));

export { TimestreamwriteDatabaseArgs, TimestreamwriteDatabaseState } from "./timestreamwriteDatabase";
export type TimestreamwriteDatabase = import("./timestreamwriteDatabase").TimestreamwriteDatabase;
export const TimestreamwriteDatabase: typeof import("./timestreamwriteDatabase").TimestreamwriteDatabase = null as any;
utilities.lazyLoad(exports, ["TimestreamwriteDatabase"], () => require("./timestreamwriteDatabase"));

export { TimestreamwriteTableArgs, TimestreamwriteTableState } from "./timestreamwriteTable";
export type TimestreamwriteTable = import("./timestreamwriteTable").TimestreamwriteTable;
export const TimestreamwriteTable: typeof import("./timestreamwriteTable").TimestreamwriteTable = null as any;
utilities.lazyLoad(exports, ["TimestreamwriteTable"], () => require("./timestreamwriteTable"));

export { TranscribeLanguageModelArgs, TranscribeLanguageModelState } from "./transcribeLanguageModel";
export type TranscribeLanguageModel = import("./transcribeLanguageModel").TranscribeLanguageModel;
export const TranscribeLanguageModel: typeof import("./transcribeLanguageModel").TranscribeLanguageModel = null as any;
utilities.lazyLoad(exports, ["TranscribeLanguageModel"], () => require("./transcribeLanguageModel"));

export { TranscribeMedicalVocabularyArgs, TranscribeMedicalVocabularyState } from "./transcribeMedicalVocabulary";
export type TranscribeMedicalVocabulary = import("./transcribeMedicalVocabulary").TranscribeMedicalVocabulary;
export const TranscribeMedicalVocabulary: typeof import("./transcribeMedicalVocabulary").TranscribeMedicalVocabulary = null as any;
utilities.lazyLoad(exports, ["TranscribeMedicalVocabulary"], () => require("./transcribeMedicalVocabulary"));

export { TranscribeVocabularyArgs, TranscribeVocabularyState } from "./transcribeVocabulary";
export type TranscribeVocabulary = import("./transcribeVocabulary").TranscribeVocabulary;
export const TranscribeVocabulary: typeof import("./transcribeVocabulary").TranscribeVocabulary = null as any;
utilities.lazyLoad(exports, ["TranscribeVocabulary"], () => require("./transcribeVocabulary"));

export { TranscribeVocabularyFilterArgs, TranscribeVocabularyFilterState } from "./transcribeVocabularyFilter";
export type TranscribeVocabularyFilter = import("./transcribeVocabularyFilter").TranscribeVocabularyFilter;
export const TranscribeVocabularyFilter: typeof import("./transcribeVocabularyFilter").TranscribeVocabularyFilter = null as any;
utilities.lazyLoad(exports, ["TranscribeVocabularyFilter"], () => require("./transcribeVocabularyFilter"));

export { TransferAccessArgs, TransferAccessState } from "./transferAccess";
export type TransferAccess = import("./transferAccess").TransferAccess;
export const TransferAccess: typeof import("./transferAccess").TransferAccess = null as any;
utilities.lazyLoad(exports, ["TransferAccess"], () => require("./transferAccess"));

export { TransferAgreementArgs, TransferAgreementState } from "./transferAgreement";
export type TransferAgreement = import("./transferAgreement").TransferAgreement;
export const TransferAgreement: typeof import("./transferAgreement").TransferAgreement = null as any;
utilities.lazyLoad(exports, ["TransferAgreement"], () => require("./transferAgreement"));

export { TransferCertificateArgs, TransferCertificateState } from "./transferCertificate";
export type TransferCertificate = import("./transferCertificate").TransferCertificate;
export const TransferCertificate: typeof import("./transferCertificate").TransferCertificate = null as any;
utilities.lazyLoad(exports, ["TransferCertificate"], () => require("./transferCertificate"));

export { TransferConnectorArgs, TransferConnectorState } from "./transferConnector";
export type TransferConnector = import("./transferConnector").TransferConnector;
export const TransferConnector: typeof import("./transferConnector").TransferConnector = null as any;
utilities.lazyLoad(exports, ["TransferConnector"], () => require("./transferConnector"));

export { TransferProfileArgs, TransferProfileState } from "./transferProfile";
export type TransferProfile = import("./transferProfile").TransferProfile;
export const TransferProfile: typeof import("./transferProfile").TransferProfile = null as any;
utilities.lazyLoad(exports, ["TransferProfile"], () => require("./transferProfile"));

export { TransferServerArgs, TransferServerState } from "./transferServer";
export type TransferServer = import("./transferServer").TransferServer;
export const TransferServer: typeof import("./transferServer").TransferServer = null as any;
utilities.lazyLoad(exports, ["TransferServer"], () => require("./transferServer"));

export { TransferSshKeyArgs, TransferSshKeyState } from "./transferSshKey";
export type TransferSshKey = import("./transferSshKey").TransferSshKey;
export const TransferSshKey: typeof import("./transferSshKey").TransferSshKey = null as any;
utilities.lazyLoad(exports, ["TransferSshKey"], () => require("./transferSshKey"));

export { TransferTagArgs, TransferTagState } from "./transferTag";
export type TransferTag = import("./transferTag").TransferTag;
export const TransferTag: typeof import("./transferTag").TransferTag = null as any;
utilities.lazyLoad(exports, ["TransferTag"], () => require("./transferTag"));

export { TransferUserArgs, TransferUserState } from "./transferUser";
export type TransferUser = import("./transferUser").TransferUser;
export const TransferUser: typeof import("./transferUser").TransferUser = null as any;
utilities.lazyLoad(exports, ["TransferUser"], () => require("./transferUser"));

export { TransferWorkflowArgs, TransferWorkflowState } from "./transferWorkflow";
export type TransferWorkflow = import("./transferWorkflow").TransferWorkflow;
export const TransferWorkflow: typeof import("./transferWorkflow").TransferWorkflow = null as any;
utilities.lazyLoad(exports, ["TransferWorkflow"], () => require("./transferWorkflow"));

export { VerifiedaccessEndpointArgs, VerifiedaccessEndpointState } from "./verifiedaccessEndpoint";
export type VerifiedaccessEndpoint = import("./verifiedaccessEndpoint").VerifiedaccessEndpoint;
export const VerifiedaccessEndpoint: typeof import("./verifiedaccessEndpoint").VerifiedaccessEndpoint = null as any;
utilities.lazyLoad(exports, ["VerifiedaccessEndpoint"], () => require("./verifiedaccessEndpoint"));

export { VerifiedaccessGroupArgs, VerifiedaccessGroupState } from "./verifiedaccessGroup";
export type VerifiedaccessGroup = import("./verifiedaccessGroup").VerifiedaccessGroup;
export const VerifiedaccessGroup: typeof import("./verifiedaccessGroup").VerifiedaccessGroup = null as any;
utilities.lazyLoad(exports, ["VerifiedaccessGroup"], () => require("./verifiedaccessGroup"));

export { VerifiedaccessInstanceArgs, VerifiedaccessInstanceState } from "./verifiedaccessInstance";
export type VerifiedaccessInstance = import("./verifiedaccessInstance").VerifiedaccessInstance;
export const VerifiedaccessInstance: typeof import("./verifiedaccessInstance").VerifiedaccessInstance = null as any;
utilities.lazyLoad(exports, ["VerifiedaccessInstance"], () => require("./verifiedaccessInstance"));

export { VerifiedaccessInstanceLoggingConfigurationArgs, VerifiedaccessInstanceLoggingConfigurationState } from "./verifiedaccessInstanceLoggingConfiguration";
export type VerifiedaccessInstanceLoggingConfiguration = import("./verifiedaccessInstanceLoggingConfiguration").VerifiedaccessInstanceLoggingConfiguration;
export const VerifiedaccessInstanceLoggingConfiguration: typeof import("./verifiedaccessInstanceLoggingConfiguration").VerifiedaccessInstanceLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["VerifiedaccessInstanceLoggingConfiguration"], () => require("./verifiedaccessInstanceLoggingConfiguration"));

export { VerifiedaccessInstanceTrustProviderAttachmentArgs, VerifiedaccessInstanceTrustProviderAttachmentState } from "./verifiedaccessInstanceTrustProviderAttachment";
export type VerifiedaccessInstanceTrustProviderAttachment = import("./verifiedaccessInstanceTrustProviderAttachment").VerifiedaccessInstanceTrustProviderAttachment;
export const VerifiedaccessInstanceTrustProviderAttachment: typeof import("./verifiedaccessInstanceTrustProviderAttachment").VerifiedaccessInstanceTrustProviderAttachment = null as any;
utilities.lazyLoad(exports, ["VerifiedaccessInstanceTrustProviderAttachment"], () => require("./verifiedaccessInstanceTrustProviderAttachment"));

export { VerifiedaccessTrustProviderArgs, VerifiedaccessTrustProviderState } from "./verifiedaccessTrustProvider";
export type VerifiedaccessTrustProvider = import("./verifiedaccessTrustProvider").VerifiedaccessTrustProvider;
export const VerifiedaccessTrustProvider: typeof import("./verifiedaccessTrustProvider").VerifiedaccessTrustProvider = null as any;
utilities.lazyLoad(exports, ["VerifiedaccessTrustProvider"], () => require("./verifiedaccessTrustProvider"));

export { VerifiedpermissionsIdentitySourceArgs, VerifiedpermissionsIdentitySourceState } from "./verifiedpermissionsIdentitySource";
export type VerifiedpermissionsIdentitySource = import("./verifiedpermissionsIdentitySource").VerifiedpermissionsIdentitySource;
export const VerifiedpermissionsIdentitySource: typeof import("./verifiedpermissionsIdentitySource").VerifiedpermissionsIdentitySource = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsIdentitySource"], () => require("./verifiedpermissionsIdentitySource"));

export { VerifiedpermissionsPolicyArgs, VerifiedpermissionsPolicyState } from "./verifiedpermissionsPolicy";
export type VerifiedpermissionsPolicy = import("./verifiedpermissionsPolicy").VerifiedpermissionsPolicy;
export const VerifiedpermissionsPolicy: typeof import("./verifiedpermissionsPolicy").VerifiedpermissionsPolicy = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsPolicy"], () => require("./verifiedpermissionsPolicy"));

export { VerifiedpermissionsPolicyStoreArgs, VerifiedpermissionsPolicyStoreState } from "./verifiedpermissionsPolicyStore";
export type VerifiedpermissionsPolicyStore = import("./verifiedpermissionsPolicyStore").VerifiedpermissionsPolicyStore;
export const VerifiedpermissionsPolicyStore: typeof import("./verifiedpermissionsPolicyStore").VerifiedpermissionsPolicyStore = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsPolicyStore"], () => require("./verifiedpermissionsPolicyStore"));

export { VerifiedpermissionsPolicyTemplateArgs, VerifiedpermissionsPolicyTemplateState } from "./verifiedpermissionsPolicyTemplate";
export type VerifiedpermissionsPolicyTemplate = import("./verifiedpermissionsPolicyTemplate").VerifiedpermissionsPolicyTemplate;
export const VerifiedpermissionsPolicyTemplate: typeof import("./verifiedpermissionsPolicyTemplate").VerifiedpermissionsPolicyTemplate = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsPolicyTemplate"], () => require("./verifiedpermissionsPolicyTemplate"));

export { VerifiedpermissionsSchemaArgs, VerifiedpermissionsSchemaState } from "./verifiedpermissionsSchema";
export type VerifiedpermissionsSchema = import("./verifiedpermissionsSchema").VerifiedpermissionsSchema;
export const VerifiedpermissionsSchema: typeof import("./verifiedpermissionsSchema").VerifiedpermissionsSchema = null as any;
utilities.lazyLoad(exports, ["VerifiedpermissionsSchema"], () => require("./verifiedpermissionsSchema"));

export { VolumeAttachmentArgs, VolumeAttachmentState } from "./volumeAttachment";
export type VolumeAttachment = import("./volumeAttachment").VolumeAttachment;
export const VolumeAttachment: typeof import("./volumeAttachment").VolumeAttachment = null as any;
utilities.lazyLoad(exports, ["VolumeAttachment"], () => require("./volumeAttachment"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcDhcpOptionsArgs, VpcDhcpOptionsState } from "./vpcDhcpOptions";
export type VpcDhcpOptions = import("./vpcDhcpOptions").VpcDhcpOptions;
export const VpcDhcpOptions: typeof import("./vpcDhcpOptions").VpcDhcpOptions = null as any;
utilities.lazyLoad(exports, ["VpcDhcpOptions"], () => require("./vpcDhcpOptions"));

export { VpcDhcpOptionsAssociationArgs, VpcDhcpOptionsAssociationState } from "./vpcDhcpOptionsAssociation";
export type VpcDhcpOptionsAssociation = import("./vpcDhcpOptionsAssociation").VpcDhcpOptionsAssociation;
export const VpcDhcpOptionsAssociation: typeof import("./vpcDhcpOptionsAssociation").VpcDhcpOptionsAssociation = null as any;
utilities.lazyLoad(exports, ["VpcDhcpOptionsAssociation"], () => require("./vpcDhcpOptionsAssociation"));

export { VpcEndpointArgs, VpcEndpointState } from "./vpcEndpoint";
export type VpcEndpoint = import("./vpcEndpoint").VpcEndpoint;
export const VpcEndpoint: typeof import("./vpcEndpoint").VpcEndpoint = null as any;
utilities.lazyLoad(exports, ["VpcEndpoint"], () => require("./vpcEndpoint"));

export { VpcEndpointConnectionAccepterArgs, VpcEndpointConnectionAccepterState } from "./vpcEndpointConnectionAccepter";
export type VpcEndpointConnectionAccepter = import("./vpcEndpointConnectionAccepter").VpcEndpointConnectionAccepter;
export const VpcEndpointConnectionAccepter: typeof import("./vpcEndpointConnectionAccepter").VpcEndpointConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["VpcEndpointConnectionAccepter"], () => require("./vpcEndpointConnectionAccepter"));

export { VpcEndpointConnectionNotificationArgs, VpcEndpointConnectionNotificationState } from "./vpcEndpointConnectionNotification";
export type VpcEndpointConnectionNotification = import("./vpcEndpointConnectionNotification").VpcEndpointConnectionNotification;
export const VpcEndpointConnectionNotification: typeof import("./vpcEndpointConnectionNotification").VpcEndpointConnectionNotification = null as any;
utilities.lazyLoad(exports, ["VpcEndpointConnectionNotification"], () => require("./vpcEndpointConnectionNotification"));

export { VpcEndpointPolicyArgs, VpcEndpointPolicyState } from "./vpcEndpointPolicy";
export type VpcEndpointPolicy = import("./vpcEndpointPolicy").VpcEndpointPolicy;
export const VpcEndpointPolicy: typeof import("./vpcEndpointPolicy").VpcEndpointPolicy = null as any;
utilities.lazyLoad(exports, ["VpcEndpointPolicy"], () => require("./vpcEndpointPolicy"));

export { VpcEndpointPrivateDnsArgs, VpcEndpointPrivateDnsState } from "./vpcEndpointPrivateDns";
export type VpcEndpointPrivateDns = import("./vpcEndpointPrivateDns").VpcEndpointPrivateDns;
export const VpcEndpointPrivateDns: typeof import("./vpcEndpointPrivateDns").VpcEndpointPrivateDns = null as any;
utilities.lazyLoad(exports, ["VpcEndpointPrivateDns"], () => require("./vpcEndpointPrivateDns"));

export { VpcEndpointRouteTableAssociationArgs, VpcEndpointRouteTableAssociationState } from "./vpcEndpointRouteTableAssociation";
export type VpcEndpointRouteTableAssociation = import("./vpcEndpointRouteTableAssociation").VpcEndpointRouteTableAssociation;
export const VpcEndpointRouteTableAssociation: typeof import("./vpcEndpointRouteTableAssociation").VpcEndpointRouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["VpcEndpointRouteTableAssociation"], () => require("./vpcEndpointRouteTableAssociation"));

export { VpcEndpointSecurityGroupAssociationArgs, VpcEndpointSecurityGroupAssociationState } from "./vpcEndpointSecurityGroupAssociation";
export type VpcEndpointSecurityGroupAssociation = import("./vpcEndpointSecurityGroupAssociation").VpcEndpointSecurityGroupAssociation;
export const VpcEndpointSecurityGroupAssociation: typeof import("./vpcEndpointSecurityGroupAssociation").VpcEndpointSecurityGroupAssociation = null as any;
utilities.lazyLoad(exports, ["VpcEndpointSecurityGroupAssociation"], () => require("./vpcEndpointSecurityGroupAssociation"));

export { VpcEndpointServiceArgs, VpcEndpointServiceState } from "./vpcEndpointService";
export type VpcEndpointService = import("./vpcEndpointService").VpcEndpointService;
export const VpcEndpointService: typeof import("./vpcEndpointService").VpcEndpointService = null as any;
utilities.lazyLoad(exports, ["VpcEndpointService"], () => require("./vpcEndpointService"));

export { VpcEndpointServiceAllowedPrincipalArgs, VpcEndpointServiceAllowedPrincipalState } from "./vpcEndpointServiceAllowedPrincipal";
export type VpcEndpointServiceAllowedPrincipal = import("./vpcEndpointServiceAllowedPrincipal").VpcEndpointServiceAllowedPrincipal;
export const VpcEndpointServiceAllowedPrincipal: typeof import("./vpcEndpointServiceAllowedPrincipal").VpcEndpointServiceAllowedPrincipal = null as any;
utilities.lazyLoad(exports, ["VpcEndpointServiceAllowedPrincipal"], () => require("./vpcEndpointServiceAllowedPrincipal"));

export { VpcEndpointServicePrivateDnsVerificationArgs, VpcEndpointServicePrivateDnsVerificationState } from "./vpcEndpointServicePrivateDnsVerification";
export type VpcEndpointServicePrivateDnsVerification = import("./vpcEndpointServicePrivateDnsVerification").VpcEndpointServicePrivateDnsVerification;
export const VpcEndpointServicePrivateDnsVerification: typeof import("./vpcEndpointServicePrivateDnsVerification").VpcEndpointServicePrivateDnsVerification = null as any;
utilities.lazyLoad(exports, ["VpcEndpointServicePrivateDnsVerification"], () => require("./vpcEndpointServicePrivateDnsVerification"));

export { VpcEndpointSubnetAssociationArgs, VpcEndpointSubnetAssociationState } from "./vpcEndpointSubnetAssociation";
export type VpcEndpointSubnetAssociation = import("./vpcEndpointSubnetAssociation").VpcEndpointSubnetAssociation;
export const VpcEndpointSubnetAssociation: typeof import("./vpcEndpointSubnetAssociation").VpcEndpointSubnetAssociation = null as any;
utilities.lazyLoad(exports, ["VpcEndpointSubnetAssociation"], () => require("./vpcEndpointSubnetAssociation"));

export { VpcIpamArgs, VpcIpamState } from "./vpcIpam";
export type VpcIpam = import("./vpcIpam").VpcIpam;
export const VpcIpam: typeof import("./vpcIpam").VpcIpam = null as any;
utilities.lazyLoad(exports, ["VpcIpam"], () => require("./vpcIpam"));

export { VpcIpamOrganizationAdminAccountArgs, VpcIpamOrganizationAdminAccountState } from "./vpcIpamOrganizationAdminAccount";
export type VpcIpamOrganizationAdminAccount = import("./vpcIpamOrganizationAdminAccount").VpcIpamOrganizationAdminAccount;
export const VpcIpamOrganizationAdminAccount: typeof import("./vpcIpamOrganizationAdminAccount").VpcIpamOrganizationAdminAccount = null as any;
utilities.lazyLoad(exports, ["VpcIpamOrganizationAdminAccount"], () => require("./vpcIpamOrganizationAdminAccount"));

export { VpcIpamPoolArgs, VpcIpamPoolState } from "./vpcIpamPool";
export type VpcIpamPool = import("./vpcIpamPool").VpcIpamPool;
export const VpcIpamPool: typeof import("./vpcIpamPool").VpcIpamPool = null as any;
utilities.lazyLoad(exports, ["VpcIpamPool"], () => require("./vpcIpamPool"));

export { VpcIpamPoolCidrArgs, VpcIpamPoolCidrState } from "./vpcIpamPoolCidr";
export type VpcIpamPoolCidr = import("./vpcIpamPoolCidr").VpcIpamPoolCidr;
export const VpcIpamPoolCidr: typeof import("./vpcIpamPoolCidr").VpcIpamPoolCidr = null as any;
utilities.lazyLoad(exports, ["VpcIpamPoolCidr"], () => require("./vpcIpamPoolCidr"));

export { VpcIpamPoolCidrAllocationArgs, VpcIpamPoolCidrAllocationState } from "./vpcIpamPoolCidrAllocation";
export type VpcIpamPoolCidrAllocation = import("./vpcIpamPoolCidrAllocation").VpcIpamPoolCidrAllocation;
export const VpcIpamPoolCidrAllocation: typeof import("./vpcIpamPoolCidrAllocation").VpcIpamPoolCidrAllocation = null as any;
utilities.lazyLoad(exports, ["VpcIpamPoolCidrAllocation"], () => require("./vpcIpamPoolCidrAllocation"));

export { VpcIpamPreviewNextCidrArgs, VpcIpamPreviewNextCidrState } from "./vpcIpamPreviewNextCidr";
export type VpcIpamPreviewNextCidr = import("./vpcIpamPreviewNextCidr").VpcIpamPreviewNextCidr;
export const VpcIpamPreviewNextCidr: typeof import("./vpcIpamPreviewNextCidr").VpcIpamPreviewNextCidr = null as any;
utilities.lazyLoad(exports, ["VpcIpamPreviewNextCidr"], () => require("./vpcIpamPreviewNextCidr"));

export { VpcIpamResourceDiscoveryArgs, VpcIpamResourceDiscoveryState } from "./vpcIpamResourceDiscovery";
export type VpcIpamResourceDiscovery = import("./vpcIpamResourceDiscovery").VpcIpamResourceDiscovery;
export const VpcIpamResourceDiscovery: typeof import("./vpcIpamResourceDiscovery").VpcIpamResourceDiscovery = null as any;
utilities.lazyLoad(exports, ["VpcIpamResourceDiscovery"], () => require("./vpcIpamResourceDiscovery"));

export { VpcIpamResourceDiscoveryAssociationArgs, VpcIpamResourceDiscoveryAssociationState } from "./vpcIpamResourceDiscoveryAssociation";
export type VpcIpamResourceDiscoveryAssociation = import("./vpcIpamResourceDiscoveryAssociation").VpcIpamResourceDiscoveryAssociation;
export const VpcIpamResourceDiscoveryAssociation: typeof import("./vpcIpamResourceDiscoveryAssociation").VpcIpamResourceDiscoveryAssociation = null as any;
utilities.lazyLoad(exports, ["VpcIpamResourceDiscoveryAssociation"], () => require("./vpcIpamResourceDiscoveryAssociation"));

export { VpcIpamScopeArgs, VpcIpamScopeState } from "./vpcIpamScope";
export type VpcIpamScope = import("./vpcIpamScope").VpcIpamScope;
export const VpcIpamScope: typeof import("./vpcIpamScope").VpcIpamScope = null as any;
utilities.lazyLoad(exports, ["VpcIpamScope"], () => require("./vpcIpamScope"));

export { VpcIpv4CidrBlockAssociationArgs, VpcIpv4CidrBlockAssociationState } from "./vpcIpv4CidrBlockAssociation";
export type VpcIpv4CidrBlockAssociation = import("./vpcIpv4CidrBlockAssociation").VpcIpv4CidrBlockAssociation;
export const VpcIpv4CidrBlockAssociation: typeof import("./vpcIpv4CidrBlockAssociation").VpcIpv4CidrBlockAssociation = null as any;
utilities.lazyLoad(exports, ["VpcIpv4CidrBlockAssociation"], () => require("./vpcIpv4CidrBlockAssociation"));

export { VpcIpv6CidrBlockAssociationArgs, VpcIpv6CidrBlockAssociationState } from "./vpcIpv6CidrBlockAssociation";
export type VpcIpv6CidrBlockAssociation = import("./vpcIpv6CidrBlockAssociation").VpcIpv6CidrBlockAssociation;
export const VpcIpv6CidrBlockAssociation: typeof import("./vpcIpv6CidrBlockAssociation").VpcIpv6CidrBlockAssociation = null as any;
utilities.lazyLoad(exports, ["VpcIpv6CidrBlockAssociation"], () => require("./vpcIpv6CidrBlockAssociation"));

export { VpcNetworkPerformanceMetricSubscriptionArgs, VpcNetworkPerformanceMetricSubscriptionState } from "./vpcNetworkPerformanceMetricSubscription";
export type VpcNetworkPerformanceMetricSubscription = import("./vpcNetworkPerformanceMetricSubscription").VpcNetworkPerformanceMetricSubscription;
export const VpcNetworkPerformanceMetricSubscription: typeof import("./vpcNetworkPerformanceMetricSubscription").VpcNetworkPerformanceMetricSubscription = null as any;
utilities.lazyLoad(exports, ["VpcNetworkPerformanceMetricSubscription"], () => require("./vpcNetworkPerformanceMetricSubscription"));

export { VpcPeeringConnectionArgs, VpcPeeringConnectionState } from "./vpcPeeringConnection";
export type VpcPeeringConnection = import("./vpcPeeringConnection").VpcPeeringConnection;
export const VpcPeeringConnection: typeof import("./vpcPeeringConnection").VpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["VpcPeeringConnection"], () => require("./vpcPeeringConnection"));

export { VpcPeeringConnectionAccepterArgs, VpcPeeringConnectionAccepterState } from "./vpcPeeringConnectionAccepter";
export type VpcPeeringConnectionAccepter = import("./vpcPeeringConnectionAccepter").VpcPeeringConnectionAccepter;
export const VpcPeeringConnectionAccepter: typeof import("./vpcPeeringConnectionAccepter").VpcPeeringConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["VpcPeeringConnectionAccepter"], () => require("./vpcPeeringConnectionAccepter"));

export { VpcPeeringConnectionOptionsArgs, VpcPeeringConnectionOptionsState } from "./vpcPeeringConnectionOptions";
export type VpcPeeringConnectionOptions = import("./vpcPeeringConnectionOptions").VpcPeeringConnectionOptions;
export const VpcPeeringConnectionOptions: typeof import("./vpcPeeringConnectionOptions").VpcPeeringConnectionOptions = null as any;
utilities.lazyLoad(exports, ["VpcPeeringConnectionOptions"], () => require("./vpcPeeringConnectionOptions"));

export { VpcSecurityGroupEgressRuleArgs, VpcSecurityGroupEgressRuleState } from "./vpcSecurityGroupEgressRule";
export type VpcSecurityGroupEgressRule = import("./vpcSecurityGroupEgressRule").VpcSecurityGroupEgressRule;
export const VpcSecurityGroupEgressRule: typeof import("./vpcSecurityGroupEgressRule").VpcSecurityGroupEgressRule = null as any;
utilities.lazyLoad(exports, ["VpcSecurityGroupEgressRule"], () => require("./vpcSecurityGroupEgressRule"));

export { VpcSecurityGroupIngressRuleArgs, VpcSecurityGroupIngressRuleState } from "./vpcSecurityGroupIngressRule";
export type VpcSecurityGroupIngressRule = import("./vpcSecurityGroupIngressRule").VpcSecurityGroupIngressRule;
export const VpcSecurityGroupIngressRule: typeof import("./vpcSecurityGroupIngressRule").VpcSecurityGroupIngressRule = null as any;
utilities.lazyLoad(exports, ["VpcSecurityGroupIngressRule"], () => require("./vpcSecurityGroupIngressRule"));

export { VpclatticeAccessLogSubscriptionArgs, VpclatticeAccessLogSubscriptionState } from "./vpclatticeAccessLogSubscription";
export type VpclatticeAccessLogSubscription = import("./vpclatticeAccessLogSubscription").VpclatticeAccessLogSubscription;
export const VpclatticeAccessLogSubscription: typeof import("./vpclatticeAccessLogSubscription").VpclatticeAccessLogSubscription = null as any;
utilities.lazyLoad(exports, ["VpclatticeAccessLogSubscription"], () => require("./vpclatticeAccessLogSubscription"));

export { VpclatticeAuthPolicyArgs, VpclatticeAuthPolicyState } from "./vpclatticeAuthPolicy";
export type VpclatticeAuthPolicy = import("./vpclatticeAuthPolicy").VpclatticeAuthPolicy;
export const VpclatticeAuthPolicy: typeof import("./vpclatticeAuthPolicy").VpclatticeAuthPolicy = null as any;
utilities.lazyLoad(exports, ["VpclatticeAuthPolicy"], () => require("./vpclatticeAuthPolicy"));

export { VpclatticeListenerArgs, VpclatticeListenerState } from "./vpclatticeListener";
export type VpclatticeListener = import("./vpclatticeListener").VpclatticeListener;
export const VpclatticeListener: typeof import("./vpclatticeListener").VpclatticeListener = null as any;
utilities.lazyLoad(exports, ["VpclatticeListener"], () => require("./vpclatticeListener"));

export { VpclatticeListenerRuleArgs, VpclatticeListenerRuleState } from "./vpclatticeListenerRule";
export type VpclatticeListenerRule = import("./vpclatticeListenerRule").VpclatticeListenerRule;
export const VpclatticeListenerRule: typeof import("./vpclatticeListenerRule").VpclatticeListenerRule = null as any;
utilities.lazyLoad(exports, ["VpclatticeListenerRule"], () => require("./vpclatticeListenerRule"));

export { VpclatticeResourcePolicyArgs, VpclatticeResourcePolicyState } from "./vpclatticeResourcePolicy";
export type VpclatticeResourcePolicy = import("./vpclatticeResourcePolicy").VpclatticeResourcePolicy;
export const VpclatticeResourcePolicy: typeof import("./vpclatticeResourcePolicy").VpclatticeResourcePolicy = null as any;
utilities.lazyLoad(exports, ["VpclatticeResourcePolicy"], () => require("./vpclatticeResourcePolicy"));

export { VpclatticeServiceArgs, VpclatticeServiceState } from "./vpclatticeService";
export type VpclatticeService = import("./vpclatticeService").VpclatticeService;
export const VpclatticeService: typeof import("./vpclatticeService").VpclatticeService = null as any;
utilities.lazyLoad(exports, ["VpclatticeService"], () => require("./vpclatticeService"));

export { VpclatticeServiceNetworkArgs, VpclatticeServiceNetworkState } from "./vpclatticeServiceNetwork";
export type VpclatticeServiceNetwork = import("./vpclatticeServiceNetwork").VpclatticeServiceNetwork;
export const VpclatticeServiceNetwork: typeof import("./vpclatticeServiceNetwork").VpclatticeServiceNetwork = null as any;
utilities.lazyLoad(exports, ["VpclatticeServiceNetwork"], () => require("./vpclatticeServiceNetwork"));

export { VpclatticeServiceNetworkServiceAssociationArgs, VpclatticeServiceNetworkServiceAssociationState } from "./vpclatticeServiceNetworkServiceAssociation";
export type VpclatticeServiceNetworkServiceAssociation = import("./vpclatticeServiceNetworkServiceAssociation").VpclatticeServiceNetworkServiceAssociation;
export const VpclatticeServiceNetworkServiceAssociation: typeof import("./vpclatticeServiceNetworkServiceAssociation").VpclatticeServiceNetworkServiceAssociation = null as any;
utilities.lazyLoad(exports, ["VpclatticeServiceNetworkServiceAssociation"], () => require("./vpclatticeServiceNetworkServiceAssociation"));

export { VpclatticeServiceNetworkVpcAssociationArgs, VpclatticeServiceNetworkVpcAssociationState } from "./vpclatticeServiceNetworkVpcAssociation";
export type VpclatticeServiceNetworkVpcAssociation = import("./vpclatticeServiceNetworkVpcAssociation").VpclatticeServiceNetworkVpcAssociation;
export const VpclatticeServiceNetworkVpcAssociation: typeof import("./vpclatticeServiceNetworkVpcAssociation").VpclatticeServiceNetworkVpcAssociation = null as any;
utilities.lazyLoad(exports, ["VpclatticeServiceNetworkVpcAssociation"], () => require("./vpclatticeServiceNetworkVpcAssociation"));

export { VpclatticeTargetGroupArgs, VpclatticeTargetGroupState } from "./vpclatticeTargetGroup";
export type VpclatticeTargetGroup = import("./vpclatticeTargetGroup").VpclatticeTargetGroup;
export const VpclatticeTargetGroup: typeof import("./vpclatticeTargetGroup").VpclatticeTargetGroup = null as any;
utilities.lazyLoad(exports, ["VpclatticeTargetGroup"], () => require("./vpclatticeTargetGroup"));

export { VpclatticeTargetGroupAttachmentArgs, VpclatticeTargetGroupAttachmentState } from "./vpclatticeTargetGroupAttachment";
export type VpclatticeTargetGroupAttachment = import("./vpclatticeTargetGroupAttachment").VpclatticeTargetGroupAttachment;
export const VpclatticeTargetGroupAttachment: typeof import("./vpclatticeTargetGroupAttachment").VpclatticeTargetGroupAttachment = null as any;
utilities.lazyLoad(exports, ["VpclatticeTargetGroupAttachment"], () => require("./vpclatticeTargetGroupAttachment"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnConnectionRouteArgs, VpnConnectionRouteState } from "./vpnConnectionRoute";
export type VpnConnectionRoute = import("./vpnConnectionRoute").VpnConnectionRoute;
export const VpnConnectionRoute: typeof import("./vpnConnectionRoute").VpnConnectionRoute = null as any;
utilities.lazyLoad(exports, ["VpnConnectionRoute"], () => require("./vpnConnectionRoute"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));

export { VpnGatewayAttachmentArgs, VpnGatewayAttachmentState } from "./vpnGatewayAttachment";
export type VpnGatewayAttachment = import("./vpnGatewayAttachment").VpnGatewayAttachment;
export const VpnGatewayAttachment: typeof import("./vpnGatewayAttachment").VpnGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["VpnGatewayAttachment"], () => require("./vpnGatewayAttachment"));

export { VpnGatewayRoutePropagationArgs, VpnGatewayRoutePropagationState } from "./vpnGatewayRoutePropagation";
export type VpnGatewayRoutePropagation = import("./vpnGatewayRoutePropagation").VpnGatewayRoutePropagation;
export const VpnGatewayRoutePropagation: typeof import("./vpnGatewayRoutePropagation").VpnGatewayRoutePropagation = null as any;
utilities.lazyLoad(exports, ["VpnGatewayRoutePropagation"], () => require("./vpnGatewayRoutePropagation"));

export { WafByteMatchSetArgs, WafByteMatchSetState } from "./wafByteMatchSet";
export type WafByteMatchSet = import("./wafByteMatchSet").WafByteMatchSet;
export const WafByteMatchSet: typeof import("./wafByteMatchSet").WafByteMatchSet = null as any;
utilities.lazyLoad(exports, ["WafByteMatchSet"], () => require("./wafByteMatchSet"));

export { WafGeoMatchSetArgs, WafGeoMatchSetState } from "./wafGeoMatchSet";
export type WafGeoMatchSet = import("./wafGeoMatchSet").WafGeoMatchSet;
export const WafGeoMatchSet: typeof import("./wafGeoMatchSet").WafGeoMatchSet = null as any;
utilities.lazyLoad(exports, ["WafGeoMatchSet"], () => require("./wafGeoMatchSet"));

export { WafIpsetArgs, WafIpsetState } from "./wafIpset";
export type WafIpset = import("./wafIpset").WafIpset;
export const WafIpset: typeof import("./wafIpset").WafIpset = null as any;
utilities.lazyLoad(exports, ["WafIpset"], () => require("./wafIpset"));

export { WafRateBasedRuleArgs, WafRateBasedRuleState } from "./wafRateBasedRule";
export type WafRateBasedRule = import("./wafRateBasedRule").WafRateBasedRule;
export const WafRateBasedRule: typeof import("./wafRateBasedRule").WafRateBasedRule = null as any;
utilities.lazyLoad(exports, ["WafRateBasedRule"], () => require("./wafRateBasedRule"));

export { WafRegexMatchSetArgs, WafRegexMatchSetState } from "./wafRegexMatchSet";
export type WafRegexMatchSet = import("./wafRegexMatchSet").WafRegexMatchSet;
export const WafRegexMatchSet: typeof import("./wafRegexMatchSet").WafRegexMatchSet = null as any;
utilities.lazyLoad(exports, ["WafRegexMatchSet"], () => require("./wafRegexMatchSet"));

export { WafRegexPatternSetArgs, WafRegexPatternSetState } from "./wafRegexPatternSet";
export type WafRegexPatternSet = import("./wafRegexPatternSet").WafRegexPatternSet;
export const WafRegexPatternSet: typeof import("./wafRegexPatternSet").WafRegexPatternSet = null as any;
utilities.lazyLoad(exports, ["WafRegexPatternSet"], () => require("./wafRegexPatternSet"));

export { WafRuleArgs, WafRuleState } from "./wafRule";
export type WafRule = import("./wafRule").WafRule;
export const WafRule: typeof import("./wafRule").WafRule = null as any;
utilities.lazyLoad(exports, ["WafRule"], () => require("./wafRule"));

export { WafRuleGroupArgs, WafRuleGroupState } from "./wafRuleGroup";
export type WafRuleGroup = import("./wafRuleGroup").WafRuleGroup;
export const WafRuleGroup: typeof import("./wafRuleGroup").WafRuleGroup = null as any;
utilities.lazyLoad(exports, ["WafRuleGroup"], () => require("./wafRuleGroup"));

export { WafSizeConstraintSetArgs, WafSizeConstraintSetState } from "./wafSizeConstraintSet";
export type WafSizeConstraintSet = import("./wafSizeConstraintSet").WafSizeConstraintSet;
export const WafSizeConstraintSet: typeof import("./wafSizeConstraintSet").WafSizeConstraintSet = null as any;
utilities.lazyLoad(exports, ["WafSizeConstraintSet"], () => require("./wafSizeConstraintSet"));

export { WafSqlInjectionMatchSetArgs, WafSqlInjectionMatchSetState } from "./wafSqlInjectionMatchSet";
export type WafSqlInjectionMatchSet = import("./wafSqlInjectionMatchSet").WafSqlInjectionMatchSet;
export const WafSqlInjectionMatchSet: typeof import("./wafSqlInjectionMatchSet").WafSqlInjectionMatchSet = null as any;
utilities.lazyLoad(exports, ["WafSqlInjectionMatchSet"], () => require("./wafSqlInjectionMatchSet"));

export { WafWebAclArgs, WafWebAclState } from "./wafWebAcl";
export type WafWebAcl = import("./wafWebAcl").WafWebAcl;
export const WafWebAcl: typeof import("./wafWebAcl").WafWebAcl = null as any;
utilities.lazyLoad(exports, ["WafWebAcl"], () => require("./wafWebAcl"));

export { WafXssMatchSetArgs, WafXssMatchSetState } from "./wafXssMatchSet";
export type WafXssMatchSet = import("./wafXssMatchSet").WafXssMatchSet;
export const WafXssMatchSet: typeof import("./wafXssMatchSet").WafXssMatchSet = null as any;
utilities.lazyLoad(exports, ["WafXssMatchSet"], () => require("./wafXssMatchSet"));

export { WafregionalByteMatchSetArgs, WafregionalByteMatchSetState } from "./wafregionalByteMatchSet";
export type WafregionalByteMatchSet = import("./wafregionalByteMatchSet").WafregionalByteMatchSet;
export const WafregionalByteMatchSet: typeof import("./wafregionalByteMatchSet").WafregionalByteMatchSet = null as any;
utilities.lazyLoad(exports, ["WafregionalByteMatchSet"], () => require("./wafregionalByteMatchSet"));

export { WafregionalGeoMatchSetArgs, WafregionalGeoMatchSetState } from "./wafregionalGeoMatchSet";
export type WafregionalGeoMatchSet = import("./wafregionalGeoMatchSet").WafregionalGeoMatchSet;
export const WafregionalGeoMatchSet: typeof import("./wafregionalGeoMatchSet").WafregionalGeoMatchSet = null as any;
utilities.lazyLoad(exports, ["WafregionalGeoMatchSet"], () => require("./wafregionalGeoMatchSet"));

export { WafregionalIpsetArgs, WafregionalIpsetState } from "./wafregionalIpset";
export type WafregionalIpset = import("./wafregionalIpset").WafregionalIpset;
export const WafregionalIpset: typeof import("./wafregionalIpset").WafregionalIpset = null as any;
utilities.lazyLoad(exports, ["WafregionalIpset"], () => require("./wafregionalIpset"));

export { WafregionalRateBasedRuleArgs, WafregionalRateBasedRuleState } from "./wafregionalRateBasedRule";
export type WafregionalRateBasedRule = import("./wafregionalRateBasedRule").WafregionalRateBasedRule;
export const WafregionalRateBasedRule: typeof import("./wafregionalRateBasedRule").WafregionalRateBasedRule = null as any;
utilities.lazyLoad(exports, ["WafregionalRateBasedRule"], () => require("./wafregionalRateBasedRule"));

export { WafregionalRegexMatchSetArgs, WafregionalRegexMatchSetState } from "./wafregionalRegexMatchSet";
export type WafregionalRegexMatchSet = import("./wafregionalRegexMatchSet").WafregionalRegexMatchSet;
export const WafregionalRegexMatchSet: typeof import("./wafregionalRegexMatchSet").WafregionalRegexMatchSet = null as any;
utilities.lazyLoad(exports, ["WafregionalRegexMatchSet"], () => require("./wafregionalRegexMatchSet"));

export { WafregionalRegexPatternSetArgs, WafregionalRegexPatternSetState } from "./wafregionalRegexPatternSet";
export type WafregionalRegexPatternSet = import("./wafregionalRegexPatternSet").WafregionalRegexPatternSet;
export const WafregionalRegexPatternSet: typeof import("./wafregionalRegexPatternSet").WafregionalRegexPatternSet = null as any;
utilities.lazyLoad(exports, ["WafregionalRegexPatternSet"], () => require("./wafregionalRegexPatternSet"));

export { WafregionalRuleArgs, WafregionalRuleState } from "./wafregionalRule";
export type WafregionalRule = import("./wafregionalRule").WafregionalRule;
export const WafregionalRule: typeof import("./wafregionalRule").WafregionalRule = null as any;
utilities.lazyLoad(exports, ["WafregionalRule"], () => require("./wafregionalRule"));

export { WafregionalRuleGroupArgs, WafregionalRuleGroupState } from "./wafregionalRuleGroup";
export type WafregionalRuleGroup = import("./wafregionalRuleGroup").WafregionalRuleGroup;
export const WafregionalRuleGroup: typeof import("./wafregionalRuleGroup").WafregionalRuleGroup = null as any;
utilities.lazyLoad(exports, ["WafregionalRuleGroup"], () => require("./wafregionalRuleGroup"));

export { WafregionalSizeConstraintSetArgs, WafregionalSizeConstraintSetState } from "./wafregionalSizeConstraintSet";
export type WafregionalSizeConstraintSet = import("./wafregionalSizeConstraintSet").WafregionalSizeConstraintSet;
export const WafregionalSizeConstraintSet: typeof import("./wafregionalSizeConstraintSet").WafregionalSizeConstraintSet = null as any;
utilities.lazyLoad(exports, ["WafregionalSizeConstraintSet"], () => require("./wafregionalSizeConstraintSet"));

export { WafregionalSqlInjectionMatchSetArgs, WafregionalSqlInjectionMatchSetState } from "./wafregionalSqlInjectionMatchSet";
export type WafregionalSqlInjectionMatchSet = import("./wafregionalSqlInjectionMatchSet").WafregionalSqlInjectionMatchSet;
export const WafregionalSqlInjectionMatchSet: typeof import("./wafregionalSqlInjectionMatchSet").WafregionalSqlInjectionMatchSet = null as any;
utilities.lazyLoad(exports, ["WafregionalSqlInjectionMatchSet"], () => require("./wafregionalSqlInjectionMatchSet"));

export { WafregionalWebAclArgs, WafregionalWebAclState } from "./wafregionalWebAcl";
export type WafregionalWebAcl = import("./wafregionalWebAcl").WafregionalWebAcl;
export const WafregionalWebAcl: typeof import("./wafregionalWebAcl").WafregionalWebAcl = null as any;
utilities.lazyLoad(exports, ["WafregionalWebAcl"], () => require("./wafregionalWebAcl"));

export { WafregionalWebAclAssociationArgs, WafregionalWebAclAssociationState } from "./wafregionalWebAclAssociation";
export type WafregionalWebAclAssociation = import("./wafregionalWebAclAssociation").WafregionalWebAclAssociation;
export const WafregionalWebAclAssociation: typeof import("./wafregionalWebAclAssociation").WafregionalWebAclAssociation = null as any;
utilities.lazyLoad(exports, ["WafregionalWebAclAssociation"], () => require("./wafregionalWebAclAssociation"));

export { WafregionalXssMatchSetArgs, WafregionalXssMatchSetState } from "./wafregionalXssMatchSet";
export type WafregionalXssMatchSet = import("./wafregionalXssMatchSet").WafregionalXssMatchSet;
export const WafregionalXssMatchSet: typeof import("./wafregionalXssMatchSet").WafregionalXssMatchSet = null as any;
utilities.lazyLoad(exports, ["WafregionalXssMatchSet"], () => require("./wafregionalXssMatchSet"));

export { Wafv2IpSetArgs, Wafv2IpSetState } from "./wafv2IpSet";
export type Wafv2IpSet = import("./wafv2IpSet").Wafv2IpSet;
export const Wafv2IpSet: typeof import("./wafv2IpSet").Wafv2IpSet = null as any;
utilities.lazyLoad(exports, ["Wafv2IpSet"], () => require("./wafv2IpSet"));

export { Wafv2RegexPatternSetArgs, Wafv2RegexPatternSetState } from "./wafv2RegexPatternSet";
export type Wafv2RegexPatternSet = import("./wafv2RegexPatternSet").Wafv2RegexPatternSet;
export const Wafv2RegexPatternSet: typeof import("./wafv2RegexPatternSet").Wafv2RegexPatternSet = null as any;
utilities.lazyLoad(exports, ["Wafv2RegexPatternSet"], () => require("./wafv2RegexPatternSet"));

export { Wafv2RuleGroupArgs, Wafv2RuleGroupState } from "./wafv2RuleGroup";
export type Wafv2RuleGroup = import("./wafv2RuleGroup").Wafv2RuleGroup;
export const Wafv2RuleGroup: typeof import("./wafv2RuleGroup").Wafv2RuleGroup = null as any;
utilities.lazyLoad(exports, ["Wafv2RuleGroup"], () => require("./wafv2RuleGroup"));

export { Wafv2WebAclArgs, Wafv2WebAclState } from "./wafv2WebAcl";
export type Wafv2WebAcl = import("./wafv2WebAcl").Wafv2WebAcl;
export const Wafv2WebAcl: typeof import("./wafv2WebAcl").Wafv2WebAcl = null as any;
utilities.lazyLoad(exports, ["Wafv2WebAcl"], () => require("./wafv2WebAcl"));

export { Wafv2WebAclAssociationArgs, Wafv2WebAclAssociationState } from "./wafv2WebAclAssociation";
export type Wafv2WebAclAssociation = import("./wafv2WebAclAssociation").Wafv2WebAclAssociation;
export const Wafv2WebAclAssociation: typeof import("./wafv2WebAclAssociation").Wafv2WebAclAssociation = null as any;
utilities.lazyLoad(exports, ["Wafv2WebAclAssociation"], () => require("./wafv2WebAclAssociation"));

export { Wafv2WebAclLoggingConfigurationArgs, Wafv2WebAclLoggingConfigurationState } from "./wafv2WebAclLoggingConfiguration";
export type Wafv2WebAclLoggingConfiguration = import("./wafv2WebAclLoggingConfiguration").Wafv2WebAclLoggingConfiguration;
export const Wafv2WebAclLoggingConfiguration: typeof import("./wafv2WebAclLoggingConfiguration").Wafv2WebAclLoggingConfiguration = null as any;
utilities.lazyLoad(exports, ["Wafv2WebAclLoggingConfiguration"], () => require("./wafv2WebAclLoggingConfiguration"));

export { WorklinkFleetArgs, WorklinkFleetState } from "./worklinkFleet";
export type WorklinkFleet = import("./worklinkFleet").WorklinkFleet;
export const WorklinkFleet: typeof import("./worklinkFleet").WorklinkFleet = null as any;
utilities.lazyLoad(exports, ["WorklinkFleet"], () => require("./worklinkFleet"));

export { WorklinkWebsiteCertificateAuthorityAssociationArgs, WorklinkWebsiteCertificateAuthorityAssociationState } from "./worklinkWebsiteCertificateAuthorityAssociation";
export type WorklinkWebsiteCertificateAuthorityAssociation = import("./worklinkWebsiteCertificateAuthorityAssociation").WorklinkWebsiteCertificateAuthorityAssociation;
export const WorklinkWebsiteCertificateAuthorityAssociation: typeof import("./worklinkWebsiteCertificateAuthorityAssociation").WorklinkWebsiteCertificateAuthorityAssociation = null as any;
utilities.lazyLoad(exports, ["WorklinkWebsiteCertificateAuthorityAssociation"], () => require("./worklinkWebsiteCertificateAuthorityAssociation"));

export { WorkspacesConnectionAliasArgs, WorkspacesConnectionAliasState } from "./workspacesConnectionAlias";
export type WorkspacesConnectionAlias = import("./workspacesConnectionAlias").WorkspacesConnectionAlias;
export const WorkspacesConnectionAlias: typeof import("./workspacesConnectionAlias").WorkspacesConnectionAlias = null as any;
utilities.lazyLoad(exports, ["WorkspacesConnectionAlias"], () => require("./workspacesConnectionAlias"));

export { WorkspacesDirectoryArgs, WorkspacesDirectoryState } from "./workspacesDirectory";
export type WorkspacesDirectory = import("./workspacesDirectory").WorkspacesDirectory;
export const WorkspacesDirectory: typeof import("./workspacesDirectory").WorkspacesDirectory = null as any;
utilities.lazyLoad(exports, ["WorkspacesDirectory"], () => require("./workspacesDirectory"));

export { WorkspacesIpGroupArgs, WorkspacesIpGroupState } from "./workspacesIpGroup";
export type WorkspacesIpGroup = import("./workspacesIpGroup").WorkspacesIpGroup;
export const WorkspacesIpGroup: typeof import("./workspacesIpGroup").WorkspacesIpGroup = null as any;
utilities.lazyLoad(exports, ["WorkspacesIpGroup"], () => require("./workspacesIpGroup"));

export { WorkspacesWorkspaceArgs, WorkspacesWorkspaceState } from "./workspacesWorkspace";
export type WorkspacesWorkspace = import("./workspacesWorkspace").WorkspacesWorkspace;
export const WorkspacesWorkspace: typeof import("./workspacesWorkspace").WorkspacesWorkspace = null as any;
utilities.lazyLoad(exports, ["WorkspacesWorkspace"], () => require("./workspacesWorkspace"));

export { XrayEncryptionConfigArgs, XrayEncryptionConfigState } from "./xrayEncryptionConfig";
export type XrayEncryptionConfig = import("./xrayEncryptionConfig").XrayEncryptionConfig;
export const XrayEncryptionConfig: typeof import("./xrayEncryptionConfig").XrayEncryptionConfig = null as any;
utilities.lazyLoad(exports, ["XrayEncryptionConfig"], () => require("./xrayEncryptionConfig"));

export { XrayGroupArgs, XrayGroupState } from "./xrayGroup";
export type XrayGroup = import("./xrayGroup").XrayGroup;
export const XrayGroup: typeof import("./xrayGroup").XrayGroup = null as any;
utilities.lazyLoad(exports, ["XrayGroup"], () => require("./xrayGroup"));

export { XraySamplingRuleArgs, XraySamplingRuleState } from "./xraySamplingRule";
export type XraySamplingRule = import("./xraySamplingRule").XraySamplingRule;
export const XraySamplingRule: typeof import("./xraySamplingRule").XraySamplingRule = null as any;
utilities.lazyLoad(exports, ["XraySamplingRule"], () => require("./xraySamplingRule"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:index/accessanalyzerAnalyzer:AccessanalyzerAnalyzer":
                return new AccessanalyzerAnalyzer(name, <any>undefined, { urn })
            case "aws:index/accessanalyzerArchiveRule:AccessanalyzerArchiveRule":
                return new AccessanalyzerArchiveRule(name, <any>undefined, { urn })
            case "aws:index/accountAlternateContact:AccountAlternateContact":
                return new AccountAlternateContact(name, <any>undefined, { urn })
            case "aws:index/accountPrimaryContact:AccountPrimaryContact":
                return new AccountPrimaryContact(name, <any>undefined, { urn })
            case "aws:index/accountRegion:AccountRegion":
                return new AccountRegion(name, <any>undefined, { urn })
            case "aws:index/acmCertificate:AcmCertificate":
                return new AcmCertificate(name, <any>undefined, { urn })
            case "aws:index/acmCertificateValidation:AcmCertificateValidation":
                return new AcmCertificateValidation(name, <any>undefined, { urn })
            case "aws:index/acmpcaCertificate:AcmpcaCertificate":
                return new AcmpcaCertificate(name, <any>undefined, { urn })
            case "aws:index/acmpcaCertificateAuthority:AcmpcaCertificateAuthority":
                return new AcmpcaCertificateAuthority(name, <any>undefined, { urn })
            case "aws:index/acmpcaCertificateAuthorityCertificate:AcmpcaCertificateAuthorityCertificate":
                return new AcmpcaCertificateAuthorityCertificate(name, <any>undefined, { urn })
            case "aws:index/acmpcaPermission:AcmpcaPermission":
                return new AcmpcaPermission(name, <any>undefined, { urn })
            case "aws:index/acmpcaPolicy:AcmpcaPolicy":
                return new AcmpcaPolicy(name, <any>undefined, { urn })
            case "aws:index/alb:Alb":
                return new Alb(name, <any>undefined, { urn })
            case "aws:index/albListener:AlbListener":
                return new AlbListener(name, <any>undefined, { urn })
            case "aws:index/albListenerCertificate:AlbListenerCertificate":
                return new AlbListenerCertificate(name, <any>undefined, { urn })
            case "aws:index/albListenerRule:AlbListenerRule":
                return new AlbListenerRule(name, <any>undefined, { urn })
            case "aws:index/albTargetGroup:AlbTargetGroup":
                return new AlbTargetGroup(name, <any>undefined, { urn })
            case "aws:index/albTargetGroupAttachment:AlbTargetGroupAttachment":
                return new AlbTargetGroupAttachment(name, <any>undefined, { urn })
            case "aws:index/ami:Ami":
                return new Ami(name, <any>undefined, { urn })
            case "aws:index/amiCopy:AmiCopy":
                return new AmiCopy(name, <any>undefined, { urn })
            case "aws:index/amiFromInstance:AmiFromInstance":
                return new AmiFromInstance(name, <any>undefined, { urn })
            case "aws:index/amiLaunchPermission:AmiLaunchPermission":
                return new AmiLaunchPermission(name, <any>undefined, { urn })
            case "aws:index/amplifyApp:AmplifyApp":
                return new AmplifyApp(name, <any>undefined, { urn })
            case "aws:index/amplifyBackendEnvironment:AmplifyBackendEnvironment":
                return new AmplifyBackendEnvironment(name, <any>undefined, { urn })
            case "aws:index/amplifyBranch:AmplifyBranch":
                return new AmplifyBranch(name, <any>undefined, { urn })
            case "aws:index/amplifyDomainAssociation:AmplifyDomainAssociation":
                return new AmplifyDomainAssociation(name, <any>undefined, { urn })
            case "aws:index/amplifyWebhook:AmplifyWebhook":
                return new AmplifyWebhook(name, <any>undefined, { urn })
            case "aws:index/apiGatewayAccount:ApiGatewayAccount":
                return new ApiGatewayAccount(name, <any>undefined, { urn })
            case "aws:index/apiGatewayApiKey:ApiGatewayApiKey":
                return new ApiGatewayApiKey(name, <any>undefined, { urn })
            case "aws:index/apiGatewayAuthorizer:ApiGatewayAuthorizer":
                return new ApiGatewayAuthorizer(name, <any>undefined, { urn })
            case "aws:index/apiGatewayBasePathMapping:ApiGatewayBasePathMapping":
                return new ApiGatewayBasePathMapping(name, <any>undefined, { urn })
            case "aws:index/apiGatewayClientCertificate:ApiGatewayClientCertificate":
                return new ApiGatewayClientCertificate(name, <any>undefined, { urn })
            case "aws:index/apiGatewayDeployment:ApiGatewayDeployment":
                return new ApiGatewayDeployment(name, <any>undefined, { urn })
            case "aws:index/apiGatewayDocumentationPart:ApiGatewayDocumentationPart":
                return new ApiGatewayDocumentationPart(name, <any>undefined, { urn })
            case "aws:index/apiGatewayDocumentationVersion:ApiGatewayDocumentationVersion":
                return new ApiGatewayDocumentationVersion(name, <any>undefined, { urn })
            case "aws:index/apiGatewayDomainName:ApiGatewayDomainName":
                return new ApiGatewayDomainName(name, <any>undefined, { urn })
            case "aws:index/apiGatewayGatewayResponse:ApiGatewayGatewayResponse":
                return new ApiGatewayGatewayResponse(name, <any>undefined, { urn })
            case "aws:index/apiGatewayIntegration:ApiGatewayIntegration":
                return new ApiGatewayIntegration(name, <any>undefined, { urn })
            case "aws:index/apiGatewayIntegrationResponse:ApiGatewayIntegrationResponse":
                return new ApiGatewayIntegrationResponse(name, <any>undefined, { urn })
            case "aws:index/apiGatewayMethod:ApiGatewayMethod":
                return new ApiGatewayMethod(name, <any>undefined, { urn })
            case "aws:index/apiGatewayMethodResponse:ApiGatewayMethodResponse":
                return new ApiGatewayMethodResponse(name, <any>undefined, { urn })
            case "aws:index/apiGatewayMethodSettings:ApiGatewayMethodSettings":
                return new ApiGatewayMethodSettings(name, <any>undefined, { urn })
            case "aws:index/apiGatewayModel:ApiGatewayModel":
                return new ApiGatewayModel(name, <any>undefined, { urn })
            case "aws:index/apiGatewayRequestValidator:ApiGatewayRequestValidator":
                return new ApiGatewayRequestValidator(name, <any>undefined, { urn })
            case "aws:index/apiGatewayResource:ApiGatewayResource":
                return new ApiGatewayResource(name, <any>undefined, { urn })
            case "aws:index/apiGatewayRestApi:ApiGatewayRestApi":
                return new ApiGatewayRestApi(name, <any>undefined, { urn })
            case "aws:index/apiGatewayRestApiPolicy:ApiGatewayRestApiPolicy":
                return new ApiGatewayRestApiPolicy(name, <any>undefined, { urn })
            case "aws:index/apiGatewayStage:ApiGatewayStage":
                return new ApiGatewayStage(name, <any>undefined, { urn })
            case "aws:index/apiGatewayUsagePlan:ApiGatewayUsagePlan":
                return new ApiGatewayUsagePlan(name, <any>undefined, { urn })
            case "aws:index/apiGatewayUsagePlanKey:ApiGatewayUsagePlanKey":
                return new ApiGatewayUsagePlanKey(name, <any>undefined, { urn })
            case "aws:index/apiGatewayVpcLink:ApiGatewayVpcLink":
                return new ApiGatewayVpcLink(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2Api:Apigatewayv2Api":
                return new Apigatewayv2Api(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2ApiMapping:Apigatewayv2ApiMapping":
                return new Apigatewayv2ApiMapping(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2Authorizer:Apigatewayv2Authorizer":
                return new Apigatewayv2Authorizer(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2Deployment:Apigatewayv2Deployment":
                return new Apigatewayv2Deployment(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2DomainName:Apigatewayv2DomainName":
                return new Apigatewayv2DomainName(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2Integration:Apigatewayv2Integration":
                return new Apigatewayv2Integration(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2IntegrationResponse:Apigatewayv2IntegrationResponse":
                return new Apigatewayv2IntegrationResponse(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2Model:Apigatewayv2Model":
                return new Apigatewayv2Model(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2Route:Apigatewayv2Route":
                return new Apigatewayv2Route(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2RouteResponse:Apigatewayv2RouteResponse":
                return new Apigatewayv2RouteResponse(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2Stage:Apigatewayv2Stage":
                return new Apigatewayv2Stage(name, <any>undefined, { urn })
            case "aws:index/apigatewayv2VpcLink:Apigatewayv2VpcLink":
                return new Apigatewayv2VpcLink(name, <any>undefined, { urn })
            case "aws:index/appCookieStickinessPolicy:AppCookieStickinessPolicy":
                return new AppCookieStickinessPolicy(name, <any>undefined, { urn })
            case "aws:index/appautoscalingPolicy:AppautoscalingPolicy":
                return new AppautoscalingPolicy(name, <any>undefined, { urn })
            case "aws:index/appautoscalingScheduledAction:AppautoscalingScheduledAction":
                return new AppautoscalingScheduledAction(name, <any>undefined, { urn })
            case "aws:index/appautoscalingTarget:AppautoscalingTarget":
                return new AppautoscalingTarget(name, <any>undefined, { urn })
            case "aws:index/appconfigApplication:AppconfigApplication":
                return new AppconfigApplication(name, <any>undefined, { urn })
            case "aws:index/appconfigConfigurationProfile:AppconfigConfigurationProfile":
                return new AppconfigConfigurationProfile(name, <any>undefined, { urn })
            case "aws:index/appconfigDeployment:AppconfigDeployment":
                return new AppconfigDeployment(name, <any>undefined, { urn })
            case "aws:index/appconfigDeploymentStrategy:AppconfigDeploymentStrategy":
                return new AppconfigDeploymentStrategy(name, <any>undefined, { urn })
            case "aws:index/appconfigEnvironment:AppconfigEnvironment":
                return new AppconfigEnvironment(name, <any>undefined, { urn })
            case "aws:index/appconfigExtension:AppconfigExtension":
                return new AppconfigExtension(name, <any>undefined, { urn })
            case "aws:index/appconfigExtensionAssociation:AppconfigExtensionAssociation":
                return new AppconfigExtensionAssociation(name, <any>undefined, { urn })
            case "aws:index/appconfigHostedConfigurationVersion:AppconfigHostedConfigurationVersion":
                return new AppconfigHostedConfigurationVersion(name, <any>undefined, { urn })
            case "aws:index/appfabricAppAuthorization:AppfabricAppAuthorization":
                return new AppfabricAppAuthorization(name, <any>undefined, { urn })
            case "aws:index/appfabricAppAuthorizationConnection:AppfabricAppAuthorizationConnection":
                return new AppfabricAppAuthorizationConnection(name, <any>undefined, { urn })
            case "aws:index/appfabricAppBundle:AppfabricAppBundle":
                return new AppfabricAppBundle(name, <any>undefined, { urn })
            case "aws:index/appfabricIngestion:AppfabricIngestion":
                return new AppfabricIngestion(name, <any>undefined, { urn })
            case "aws:index/appfabricIngestionDestination:AppfabricIngestionDestination":
                return new AppfabricIngestionDestination(name, <any>undefined, { urn })
            case "aws:index/appflowConnectorProfile:AppflowConnectorProfile":
                return new AppflowConnectorProfile(name, <any>undefined, { urn })
            case "aws:index/appflowFlow:AppflowFlow":
                return new AppflowFlow(name, <any>undefined, { urn })
            case "aws:index/appintegrationsDataIntegration:AppintegrationsDataIntegration":
                return new AppintegrationsDataIntegration(name, <any>undefined, { urn })
            case "aws:index/appintegrationsEventIntegration:AppintegrationsEventIntegration":
                return new AppintegrationsEventIntegration(name, <any>undefined, { urn })
            case "aws:index/applicationinsightsApplication:ApplicationinsightsApplication":
                return new ApplicationinsightsApplication(name, <any>undefined, { urn })
            case "aws:index/appmeshGatewayRoute:AppmeshGatewayRoute":
                return new AppmeshGatewayRoute(name, <any>undefined, { urn })
            case "aws:index/appmeshMesh:AppmeshMesh":
                return new AppmeshMesh(name, <any>undefined, { urn })
            case "aws:index/appmeshRoute:AppmeshRoute":
                return new AppmeshRoute(name, <any>undefined, { urn })
            case "aws:index/appmeshVirtualGateway:AppmeshVirtualGateway":
                return new AppmeshVirtualGateway(name, <any>undefined, { urn })
            case "aws:index/appmeshVirtualNode:AppmeshVirtualNode":
                return new AppmeshVirtualNode(name, <any>undefined, { urn })
            case "aws:index/appmeshVirtualRouter:AppmeshVirtualRouter":
                return new AppmeshVirtualRouter(name, <any>undefined, { urn })
            case "aws:index/appmeshVirtualService:AppmeshVirtualService":
                return new AppmeshVirtualService(name, <any>undefined, { urn })
            case "aws:index/apprunnerAutoScalingConfigurationVersion:ApprunnerAutoScalingConfigurationVersion":
                return new ApprunnerAutoScalingConfigurationVersion(name, <any>undefined, { urn })
            case "aws:index/apprunnerConnection:ApprunnerConnection":
                return new ApprunnerConnection(name, <any>undefined, { urn })
            case "aws:index/apprunnerCustomDomainAssociation:ApprunnerCustomDomainAssociation":
                return new ApprunnerCustomDomainAssociation(name, <any>undefined, { urn })
            case "aws:index/apprunnerDefaultAutoScalingConfigurationVersion:ApprunnerDefaultAutoScalingConfigurationVersion":
                return new ApprunnerDefaultAutoScalingConfigurationVersion(name, <any>undefined, { urn })
            case "aws:index/apprunnerDeployment:ApprunnerDeployment":
                return new ApprunnerDeployment(name, <any>undefined, { urn })
            case "aws:index/apprunnerObservabilityConfiguration:ApprunnerObservabilityConfiguration":
                return new ApprunnerObservabilityConfiguration(name, <any>undefined, { urn })
            case "aws:index/apprunnerService:ApprunnerService":
                return new ApprunnerService(name, <any>undefined, { urn })
            case "aws:index/apprunnerVpcConnector:ApprunnerVpcConnector":
                return new ApprunnerVpcConnector(name, <any>undefined, { urn })
            case "aws:index/apprunnerVpcIngressConnection:ApprunnerVpcIngressConnection":
                return new ApprunnerVpcIngressConnection(name, <any>undefined, { urn })
            case "aws:index/appstreamDirectoryConfig:AppstreamDirectoryConfig":
                return new AppstreamDirectoryConfig(name, <any>undefined, { urn })
            case "aws:index/appstreamFleet:AppstreamFleet":
                return new AppstreamFleet(name, <any>undefined, { urn })
            case "aws:index/appstreamFleetStackAssociation:AppstreamFleetStackAssociation":
                return new AppstreamFleetStackAssociation(name, <any>undefined, { urn })
            case "aws:index/appstreamImageBuilder:AppstreamImageBuilder":
                return new AppstreamImageBuilder(name, <any>undefined, { urn })
            case "aws:index/appstreamStack:AppstreamStack":
                return new AppstreamStack(name, <any>undefined, { urn })
            case "aws:index/appstreamUser:AppstreamUser":
                return new AppstreamUser(name, <any>undefined, { urn })
            case "aws:index/appstreamUserStackAssociation:AppstreamUserStackAssociation":
                return new AppstreamUserStackAssociation(name, <any>undefined, { urn })
            case "aws:index/appsyncApiCache:AppsyncApiCache":
                return new AppsyncApiCache(name, <any>undefined, { urn })
            case "aws:index/appsyncApiKey:AppsyncApiKey":
                return new AppsyncApiKey(name, <any>undefined, { urn })
            case "aws:index/appsyncDatasource:AppsyncDatasource":
                return new AppsyncDatasource(name, <any>undefined, { urn })
            case "aws:index/appsyncDomainName:AppsyncDomainName":
                return new AppsyncDomainName(name, <any>undefined, { urn })
            case "aws:index/appsyncDomainNameApiAssociation:AppsyncDomainNameApiAssociation":
                return new AppsyncDomainNameApiAssociation(name, <any>undefined, { urn })
            case "aws:index/appsyncFunction:AppsyncFunction":
                return new AppsyncFunction(name, <any>undefined, { urn })
            case "aws:index/appsyncGraphqlApi:AppsyncGraphqlApi":
                return new AppsyncGraphqlApi(name, <any>undefined, { urn })
            case "aws:index/appsyncResolver:AppsyncResolver":
                return new AppsyncResolver(name, <any>undefined, { urn })
            case "aws:index/appsyncType:AppsyncType":
                return new AppsyncType(name, <any>undefined, { urn })
            case "aws:index/athenaDataCatalog:AthenaDataCatalog":
                return new AthenaDataCatalog(name, <any>undefined, { urn })
            case "aws:index/athenaDatabase:AthenaDatabase":
                return new AthenaDatabase(name, <any>undefined, { urn })
            case "aws:index/athenaNamedQuery:AthenaNamedQuery":
                return new AthenaNamedQuery(name, <any>undefined, { urn })
            case "aws:index/athenaPreparedStatement:AthenaPreparedStatement":
                return new AthenaPreparedStatement(name, <any>undefined, { urn })
            case "aws:index/athenaWorkgroup:AthenaWorkgroup":
                return new AthenaWorkgroup(name, <any>undefined, { urn })
            case "aws:index/auditmanagerAccountRegistration:AuditmanagerAccountRegistration":
                return new AuditmanagerAccountRegistration(name, <any>undefined, { urn })
            case "aws:index/auditmanagerAssessment:AuditmanagerAssessment":
                return new AuditmanagerAssessment(name, <any>undefined, { urn })
            case "aws:index/auditmanagerAssessmentDelegation:AuditmanagerAssessmentDelegation":
                return new AuditmanagerAssessmentDelegation(name, <any>undefined, { urn })
            case "aws:index/auditmanagerAssessmentReport:AuditmanagerAssessmentReport":
                return new AuditmanagerAssessmentReport(name, <any>undefined, { urn })
            case "aws:index/auditmanagerControl:AuditmanagerControl":
                return new AuditmanagerControl(name, <any>undefined, { urn })
            case "aws:index/auditmanagerFramework:AuditmanagerFramework":
                return new AuditmanagerFramework(name, <any>undefined, { urn })
            case "aws:index/auditmanagerFrameworkShare:AuditmanagerFrameworkShare":
                return new AuditmanagerFrameworkShare(name, <any>undefined, { urn })
            case "aws:index/auditmanagerOrganizationAdminAccountRegistration:AuditmanagerOrganizationAdminAccountRegistration":
                return new AuditmanagerOrganizationAdminAccountRegistration(name, <any>undefined, { urn })
            case "aws:index/autoscalingAttachment:AutoscalingAttachment":
                return new AutoscalingAttachment(name, <any>undefined, { urn })
            case "aws:index/autoscalingGroup:AutoscalingGroup":
                return new AutoscalingGroup(name, <any>undefined, { urn })
            case "aws:index/autoscalingGroupTag:AutoscalingGroupTag":
                return new AutoscalingGroupTag(name, <any>undefined, { urn })
            case "aws:index/autoscalingLifecycleHook:AutoscalingLifecycleHook":
                return new AutoscalingLifecycleHook(name, <any>undefined, { urn })
            case "aws:index/autoscalingNotification:AutoscalingNotification":
                return new AutoscalingNotification(name, <any>undefined, { urn })
            case "aws:index/autoscalingPolicy:AutoscalingPolicy":
                return new AutoscalingPolicy(name, <any>undefined, { urn })
            case "aws:index/autoscalingSchedule:AutoscalingSchedule":
                return new AutoscalingSchedule(name, <any>undefined, { urn })
            case "aws:index/autoscalingTrafficSourceAttachment:AutoscalingTrafficSourceAttachment":
                return new AutoscalingTrafficSourceAttachment(name, <any>undefined, { urn })
            case "aws:index/autoscalingplansScalingPlan:AutoscalingplansScalingPlan":
                return new AutoscalingplansScalingPlan(name, <any>undefined, { urn })
            case "aws:index/backupFramework:BackupFramework":
                return new BackupFramework(name, <any>undefined, { urn })
            case "aws:index/backupGlobalSettings:BackupGlobalSettings":
                return new BackupGlobalSettings(name, <any>undefined, { urn })
            case "aws:index/backupPlan:BackupPlan":
                return new BackupPlan(name, <any>undefined, { urn })
            case "aws:index/backupRegionSettings:BackupRegionSettings":
                return new BackupRegionSettings(name, <any>undefined, { urn })
            case "aws:index/backupReportPlan:BackupReportPlan":
                return new BackupReportPlan(name, <any>undefined, { urn })
            case "aws:index/backupSelection:BackupSelection":
                return new BackupSelection(name, <any>undefined, { urn })
            case "aws:index/backupVault:BackupVault":
                return new BackupVault(name, <any>undefined, { urn })
            case "aws:index/backupVaultLockConfiguration:BackupVaultLockConfiguration":
                return new BackupVaultLockConfiguration(name, <any>undefined, { urn })
            case "aws:index/backupVaultNotifications:BackupVaultNotifications":
                return new BackupVaultNotifications(name, <any>undefined, { urn })
            case "aws:index/backupVaultPolicy:BackupVaultPolicy":
                return new BackupVaultPolicy(name, <any>undefined, { urn })
            case "aws:index/batchComputeEnvironment:BatchComputeEnvironment":
                return new BatchComputeEnvironment(name, <any>undefined, { urn })
            case "aws:index/batchJobDefinition:BatchJobDefinition":
                return new BatchJobDefinition(name, <any>undefined, { urn })
            case "aws:index/batchJobQueue:BatchJobQueue":
                return new BatchJobQueue(name, <any>undefined, { urn })
            case "aws:index/batchSchedulingPolicy:BatchSchedulingPolicy":
                return new BatchSchedulingPolicy(name, <any>undefined, { urn })
            case "aws:index/bcmdataexportsExport:BcmdataexportsExport":
                return new BcmdataexportsExport(name, <any>undefined, { urn })
            case "aws:index/bedrockCustomModel:BedrockCustomModel":
                return new BedrockCustomModel(name, <any>undefined, { urn })
            case "aws:index/bedrockGuardrail:BedrockGuardrail":
                return new BedrockGuardrail(name, <any>undefined, { urn })
            case "aws:index/bedrockModelInvocationLoggingConfiguration:BedrockModelInvocationLoggingConfiguration":
                return new BedrockModelInvocationLoggingConfiguration(name, <any>undefined, { urn })
            case "aws:index/bedrockProvisionedModelThroughput:BedrockProvisionedModelThroughput":
                return new BedrockProvisionedModelThroughput(name, <any>undefined, { urn })
            case "aws:index/bedrockagentAgent:BedrockagentAgent":
                return new BedrockagentAgent(name, <any>undefined, { urn })
            case "aws:index/bedrockagentAgentActionGroup:BedrockagentAgentActionGroup":
                return new BedrockagentAgentActionGroup(name, <any>undefined, { urn })
            case "aws:index/bedrockagentAgentAlias:BedrockagentAgentAlias":
                return new BedrockagentAgentAlias(name, <any>undefined, { urn })
            case "aws:index/bedrockagentAgentKnowledgeBaseAssociation:BedrockagentAgentKnowledgeBaseAssociation":
                return new BedrockagentAgentKnowledgeBaseAssociation(name, <any>undefined, { urn })
            case "aws:index/bedrockagentDataSource:BedrockagentDataSource":
                return new BedrockagentDataSource(name, <any>undefined, { urn })
            case "aws:index/bedrockagentKnowledgeBase:BedrockagentKnowledgeBase":
                return new BedrockagentKnowledgeBase(name, <any>undefined, { urn })
            case "aws:index/budgetsBudget:BudgetsBudget":
                return new BudgetsBudget(name, <any>undefined, { urn })
            case "aws:index/budgetsBudgetAction:BudgetsBudgetAction":
                return new BudgetsBudgetAction(name, <any>undefined, { urn })
            case "aws:index/ceAnomalyMonitor:CeAnomalyMonitor":
                return new CeAnomalyMonitor(name, <any>undefined, { urn })
            case "aws:index/ceAnomalySubscription:CeAnomalySubscription":
                return new CeAnomalySubscription(name, <any>undefined, { urn })
            case "aws:index/ceCostAllocationTag:CeCostAllocationTag":
                return new CeCostAllocationTag(name, <any>undefined, { urn })
            case "aws:index/ceCostCategory:CeCostCategory":
                return new CeCostCategory(name, <any>undefined, { urn })
            case "aws:index/chatbotSlackChannelConfiguration:ChatbotSlackChannelConfiguration":
                return new ChatbotSlackChannelConfiguration(name, <any>undefined, { urn })
            case "aws:index/chatbotTeamsChannelConfiguration:ChatbotTeamsChannelConfiguration":
                return new ChatbotTeamsChannelConfiguration(name, <any>undefined, { urn })
            case "aws:index/chimeVoiceConnector:ChimeVoiceConnector":
                return new ChimeVoiceConnector(name, <any>undefined, { urn })
            case "aws:index/chimeVoiceConnectorGroup:ChimeVoiceConnectorGroup":
                return new ChimeVoiceConnectorGroup(name, <any>undefined, { urn })
            case "aws:index/chimeVoiceConnectorLogging:ChimeVoiceConnectorLogging":
                return new ChimeVoiceConnectorLogging(name, <any>undefined, { urn })
            case "aws:index/chimeVoiceConnectorOrigination:ChimeVoiceConnectorOrigination":
                return new ChimeVoiceConnectorOrigination(name, <any>undefined, { urn })
            case "aws:index/chimeVoiceConnectorStreaming:ChimeVoiceConnectorStreaming":
                return new ChimeVoiceConnectorStreaming(name, <any>undefined, { urn })
            case "aws:index/chimeVoiceConnectorTermination:ChimeVoiceConnectorTermination":
                return new ChimeVoiceConnectorTermination(name, <any>undefined, { urn })
            case "aws:index/chimeVoiceConnectorTerminationCredentials:ChimeVoiceConnectorTerminationCredentials":
                return new ChimeVoiceConnectorTerminationCredentials(name, <any>undefined, { urn })
            case "aws:index/chimesdkmediapipelinesMediaInsightsPipelineConfiguration:ChimesdkmediapipelinesMediaInsightsPipelineConfiguration":
                return new ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(name, <any>undefined, { urn })
            case "aws:index/chimesdkvoiceGlobalSettings:ChimesdkvoiceGlobalSettings":
                return new ChimesdkvoiceGlobalSettings(name, <any>undefined, { urn })
            case "aws:index/chimesdkvoiceSipMediaApplication:ChimesdkvoiceSipMediaApplication":
                return new ChimesdkvoiceSipMediaApplication(name, <any>undefined, { urn })
            case "aws:index/chimesdkvoiceSipRule:ChimesdkvoiceSipRule":
                return new ChimesdkvoiceSipRule(name, <any>undefined, { urn })
            case "aws:index/chimesdkvoiceVoiceProfileDomain:ChimesdkvoiceVoiceProfileDomain":
                return new ChimesdkvoiceVoiceProfileDomain(name, <any>undefined, { urn })
            case "aws:index/cleanroomsCollaboration:CleanroomsCollaboration":
                return new CleanroomsCollaboration(name, <any>undefined, { urn })
            case "aws:index/cleanroomsConfiguredTable:CleanroomsConfiguredTable":
                return new CleanroomsConfiguredTable(name, <any>undefined, { urn })
            case "aws:index/cloud9EnvironmentEc2:Cloud9EnvironmentEc2":
                return new Cloud9EnvironmentEc2(name, <any>undefined, { urn })
            case "aws:index/cloud9EnvironmentMembership:Cloud9EnvironmentMembership":
                return new Cloud9EnvironmentMembership(name, <any>undefined, { urn })
            case "aws:index/cloudcontrolapiResource:CloudcontrolapiResource":
                return new CloudcontrolapiResource(name, <any>undefined, { urn })
            case "aws:index/cloudformationStack:CloudformationStack":
                return new CloudformationStack(name, <any>undefined, { urn })
            case "aws:index/cloudformationStackSet:CloudformationStackSet":
                return new CloudformationStackSet(name, <any>undefined, { urn })
            case "aws:index/cloudformationStackSetInstance:CloudformationStackSetInstance":
                return new CloudformationStackSetInstance(name, <any>undefined, { urn })
            case "aws:index/cloudformationType:CloudformationType":
                return new CloudformationType(name, <any>undefined, { urn })
            case "aws:index/cloudfrontCachePolicy:CloudfrontCachePolicy":
                return new CloudfrontCachePolicy(name, <any>undefined, { urn })
            case "aws:index/cloudfrontContinuousDeploymentPolicy:CloudfrontContinuousDeploymentPolicy":
                return new CloudfrontContinuousDeploymentPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudfrontDistribution:CloudfrontDistribution":
                return new CloudfrontDistribution(name, <any>undefined, { urn })
            case "aws:index/cloudfrontFieldLevelEncryptionConfig:CloudfrontFieldLevelEncryptionConfig":
                return new CloudfrontFieldLevelEncryptionConfig(name, <any>undefined, { urn })
            case "aws:index/cloudfrontFieldLevelEncryptionProfile:CloudfrontFieldLevelEncryptionProfile":
                return new CloudfrontFieldLevelEncryptionProfile(name, <any>undefined, { urn })
            case "aws:index/cloudfrontFunction:CloudfrontFunction":
                return new CloudfrontFunction(name, <any>undefined, { urn })
            case "aws:index/cloudfrontKeyGroup:CloudfrontKeyGroup":
                return new CloudfrontKeyGroup(name, <any>undefined, { urn })
            case "aws:index/cloudfrontKeyValueStore:CloudfrontKeyValueStore":
                return new CloudfrontKeyValueStore(name, <any>undefined, { urn })
            case "aws:index/cloudfrontMonitoringSubscription:CloudfrontMonitoringSubscription":
                return new CloudfrontMonitoringSubscription(name, <any>undefined, { urn })
            case "aws:index/cloudfrontOriginAccessControl:CloudfrontOriginAccessControl":
                return new CloudfrontOriginAccessControl(name, <any>undefined, { urn })
            case "aws:index/cloudfrontOriginAccessIdentity:CloudfrontOriginAccessIdentity":
                return new CloudfrontOriginAccessIdentity(name, <any>undefined, { urn })
            case "aws:index/cloudfrontOriginRequestPolicy:CloudfrontOriginRequestPolicy":
                return new CloudfrontOriginRequestPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudfrontPublicKey:CloudfrontPublicKey":
                return new CloudfrontPublicKey(name, <any>undefined, { urn })
            case "aws:index/cloudfrontRealtimeLogConfig:CloudfrontRealtimeLogConfig":
                return new CloudfrontRealtimeLogConfig(name, <any>undefined, { urn })
            case "aws:index/cloudfrontResponseHeadersPolicy:CloudfrontResponseHeadersPolicy":
                return new CloudfrontResponseHeadersPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudfrontkeyvaluestoreKey:CloudfrontkeyvaluestoreKey":
                return new CloudfrontkeyvaluestoreKey(name, <any>undefined, { urn })
            case "aws:index/cloudhsmV2Cluster:CloudhsmV2Cluster":
                return new CloudhsmV2Cluster(name, <any>undefined, { urn })
            case "aws:index/cloudhsmV2Hsm:CloudhsmV2Hsm":
                return new CloudhsmV2Hsm(name, <any>undefined, { urn })
            case "aws:index/cloudsearchDomain:CloudsearchDomain":
                return new CloudsearchDomain(name, <any>undefined, { urn })
            case "aws:index/cloudsearchDomainServiceAccessPolicy:CloudsearchDomainServiceAccessPolicy":
                return new CloudsearchDomainServiceAccessPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudtrail:Cloudtrail":
                return new Cloudtrail(name, <any>undefined, { urn })
            case "aws:index/cloudtrailEventDataStore:CloudtrailEventDataStore":
                return new CloudtrailEventDataStore(name, <any>undefined, { urn })
            case "aws:index/cloudtrailOrganizationDelegatedAdminAccount:CloudtrailOrganizationDelegatedAdminAccount":
                return new CloudtrailOrganizationDelegatedAdminAccount(name, <any>undefined, { urn })
            case "aws:index/cloudwatchCompositeAlarm:CloudwatchCompositeAlarm":
                return new CloudwatchCompositeAlarm(name, <any>undefined, { urn })
            case "aws:index/cloudwatchDashboard:CloudwatchDashboard":
                return new CloudwatchDashboard(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventApiDestination:CloudwatchEventApiDestination":
                return new CloudwatchEventApiDestination(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventArchive:CloudwatchEventArchive":
                return new CloudwatchEventArchive(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventBus:CloudwatchEventBus":
                return new CloudwatchEventBus(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventBusPolicy:CloudwatchEventBusPolicy":
                return new CloudwatchEventBusPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventConnection:CloudwatchEventConnection":
                return new CloudwatchEventConnection(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventEndpoint:CloudwatchEventEndpoint":
                return new CloudwatchEventEndpoint(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventPermission:CloudwatchEventPermission":
                return new CloudwatchEventPermission(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventRule:CloudwatchEventRule":
                return new CloudwatchEventRule(name, <any>undefined, { urn })
            case "aws:index/cloudwatchEventTarget:CloudwatchEventTarget":
                return new CloudwatchEventTarget(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogAccountPolicy:CloudwatchLogAccountPolicy":
                return new CloudwatchLogAccountPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogDataProtectionPolicy:CloudwatchLogDataProtectionPolicy":
                return new CloudwatchLogDataProtectionPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogDestination:CloudwatchLogDestination":
                return new CloudwatchLogDestination(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogDestinationPolicy:CloudwatchLogDestinationPolicy":
                return new CloudwatchLogDestinationPolicy(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogGroup:CloudwatchLogGroup":
                return new CloudwatchLogGroup(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogMetricFilter:CloudwatchLogMetricFilter":
                return new CloudwatchLogMetricFilter(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogResourcePolicy:CloudwatchLogResourcePolicy":
                return new CloudwatchLogResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogStream:CloudwatchLogStream":
                return new CloudwatchLogStream(name, <any>undefined, { urn })
            case "aws:index/cloudwatchLogSubscriptionFilter:CloudwatchLogSubscriptionFilter":
                return new CloudwatchLogSubscriptionFilter(name, <any>undefined, { urn })
            case "aws:index/cloudwatchMetricAlarm:CloudwatchMetricAlarm":
                return new CloudwatchMetricAlarm(name, <any>undefined, { urn })
            case "aws:index/cloudwatchMetricStream:CloudwatchMetricStream":
                return new CloudwatchMetricStream(name, <any>undefined, { urn })
            case "aws:index/cloudwatchQueryDefinition:CloudwatchQueryDefinition":
                return new CloudwatchQueryDefinition(name, <any>undefined, { urn })
            case "aws:index/codeartifactDomain:CodeartifactDomain":
                return new CodeartifactDomain(name, <any>undefined, { urn })
            case "aws:index/codeartifactDomainPermissionsPolicy:CodeartifactDomainPermissionsPolicy":
                return new CodeartifactDomainPermissionsPolicy(name, <any>undefined, { urn })
            case "aws:index/codeartifactRepository:CodeartifactRepository":
                return new CodeartifactRepository(name, <any>undefined, { urn })
            case "aws:index/codeartifactRepositoryPermissionsPolicy:CodeartifactRepositoryPermissionsPolicy":
                return new CodeartifactRepositoryPermissionsPolicy(name, <any>undefined, { urn })
            case "aws:index/codebuildProject:CodebuildProject":
                return new CodebuildProject(name, <any>undefined, { urn })
            case "aws:index/codebuildReportGroup:CodebuildReportGroup":
                return new CodebuildReportGroup(name, <any>undefined, { urn })
            case "aws:index/codebuildResourcePolicy:CodebuildResourcePolicy":
                return new CodebuildResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/codebuildSourceCredential:CodebuildSourceCredential":
                return new CodebuildSourceCredential(name, <any>undefined, { urn })
            case "aws:index/codebuildWebhook:CodebuildWebhook":
                return new CodebuildWebhook(name, <any>undefined, { urn })
            case "aws:index/codecatalystDevEnvironment:CodecatalystDevEnvironment":
                return new CodecatalystDevEnvironment(name, <any>undefined, { urn })
            case "aws:index/codecatalystProject:CodecatalystProject":
                return new CodecatalystProject(name, <any>undefined, { urn })
            case "aws:index/codecatalystSourceRepository:CodecatalystSourceRepository":
                return new CodecatalystSourceRepository(name, <any>undefined, { urn })
            case "aws:index/codecommitApprovalRuleTemplate:CodecommitApprovalRuleTemplate":
                return new CodecommitApprovalRuleTemplate(name, <any>undefined, { urn })
            case "aws:index/codecommitApprovalRuleTemplateAssociation:CodecommitApprovalRuleTemplateAssociation":
                return new CodecommitApprovalRuleTemplateAssociation(name, <any>undefined, { urn })
            case "aws:index/codecommitRepository:CodecommitRepository":
                return new CodecommitRepository(name, <any>undefined, { urn })
            case "aws:index/codecommitTrigger:CodecommitTrigger":
                return new CodecommitTrigger(name, <any>undefined, { urn })
            case "aws:index/codedeployApp:CodedeployApp":
                return new CodedeployApp(name, <any>undefined, { urn })
            case "aws:index/codedeployDeploymentConfig:CodedeployDeploymentConfig":
                return new CodedeployDeploymentConfig(name, <any>undefined, { urn })
            case "aws:index/codedeployDeploymentGroup:CodedeployDeploymentGroup":
                return new CodedeployDeploymentGroup(name, <any>undefined, { urn })
            case "aws:index/codeguruprofilerProfilingGroup:CodeguruprofilerProfilingGroup":
                return new CodeguruprofilerProfilingGroup(name, <any>undefined, { urn })
            case "aws:index/codegurureviewerRepositoryAssociation:CodegurureviewerRepositoryAssociation":
                return new CodegurureviewerRepositoryAssociation(name, <any>undefined, { urn })
            case "aws:index/codepipeline:Codepipeline":
                return new Codepipeline(name, <any>undefined, { urn })
            case "aws:index/codepipelineCustomActionType:CodepipelineCustomActionType":
                return new CodepipelineCustomActionType(name, <any>undefined, { urn })
            case "aws:index/codepipelineWebhook:CodepipelineWebhook":
                return new CodepipelineWebhook(name, <any>undefined, { urn })
            case "aws:index/codestarconnectionsConnection:CodestarconnectionsConnection":
                return new CodestarconnectionsConnection(name, <any>undefined, { urn })
            case "aws:index/codestarconnectionsHost:CodestarconnectionsHost":
                return new CodestarconnectionsHost(name, <any>undefined, { urn })
            case "aws:index/codestarnotificationsNotificationRule:CodestarnotificationsNotificationRule":
                return new CodestarnotificationsNotificationRule(name, <any>undefined, { urn })
            case "aws:index/cognitoIdentityPool:CognitoIdentityPool":
                return new CognitoIdentityPool(name, <any>undefined, { urn })
            case "aws:index/cognitoIdentityPoolProviderPrincipalTag:CognitoIdentityPoolProviderPrincipalTag":
                return new CognitoIdentityPoolProviderPrincipalTag(name, <any>undefined, { urn })
            case "aws:index/cognitoIdentityPoolRolesAttachment:CognitoIdentityPoolRolesAttachment":
                return new CognitoIdentityPoolRolesAttachment(name, <any>undefined, { urn })
            case "aws:index/cognitoIdentityProvider:CognitoIdentityProvider":
                return new CognitoIdentityProvider(name, <any>undefined, { urn })
            case "aws:index/cognitoManagedUserPoolClient:CognitoManagedUserPoolClient":
                return new CognitoManagedUserPoolClient(name, <any>undefined, { urn })
            case "aws:index/cognitoResourceServer:CognitoResourceServer":
                return new CognitoResourceServer(name, <any>undefined, { urn })
            case "aws:index/cognitoRiskConfiguration:CognitoRiskConfiguration":
                return new CognitoRiskConfiguration(name, <any>undefined, { urn })
            case "aws:index/cognitoUser:CognitoUser":
                return new CognitoUser(name, <any>undefined, { urn })
            case "aws:index/cognitoUserGroup:CognitoUserGroup":
                return new CognitoUserGroup(name, <any>undefined, { urn })
            case "aws:index/cognitoUserInGroup:CognitoUserInGroup":
                return new CognitoUserInGroup(name, <any>undefined, { urn })
            case "aws:index/cognitoUserPool:CognitoUserPool":
                return new CognitoUserPool(name, <any>undefined, { urn })
            case "aws:index/cognitoUserPoolClient:CognitoUserPoolClient":
                return new CognitoUserPoolClient(name, <any>undefined, { urn })
            case "aws:index/cognitoUserPoolDomain:CognitoUserPoolDomain":
                return new CognitoUserPoolDomain(name, <any>undefined, { urn })
            case "aws:index/cognitoUserPoolUiCustomization:CognitoUserPoolUiCustomization":
                return new CognitoUserPoolUiCustomization(name, <any>undefined, { urn })
            case "aws:index/comprehendDocumentClassifier:ComprehendDocumentClassifier":
                return new ComprehendDocumentClassifier(name, <any>undefined, { urn })
            case "aws:index/comprehendEntityRecognizer:ComprehendEntityRecognizer":
                return new ComprehendEntityRecognizer(name, <any>undefined, { urn })
            case "aws:index/configAggregateAuthorization:ConfigAggregateAuthorization":
                return new ConfigAggregateAuthorization(name, <any>undefined, { urn })
            case "aws:index/configConfigRule:ConfigConfigRule":
                return new ConfigConfigRule(name, <any>undefined, { urn })
            case "aws:index/configConfigurationAggregator:ConfigConfigurationAggregator":
                return new ConfigConfigurationAggregator(name, <any>undefined, { urn })
            case "aws:index/configConfigurationRecorder:ConfigConfigurationRecorder":
                return new ConfigConfigurationRecorder(name, <any>undefined, { urn })
            case "aws:index/configConfigurationRecorderStatus:ConfigConfigurationRecorderStatus":
                return new ConfigConfigurationRecorderStatus(name, <any>undefined, { urn })
            case "aws:index/configConformancePack:ConfigConformancePack":
                return new ConfigConformancePack(name, <any>undefined, { urn })
            case "aws:index/configDeliveryChannel:ConfigDeliveryChannel":
                return new ConfigDeliveryChannel(name, <any>undefined, { urn })
            case "aws:index/configOrganizationConformancePack:ConfigOrganizationConformancePack":
                return new ConfigOrganizationConformancePack(name, <any>undefined, { urn })
            case "aws:index/configOrganizationCustomPolicyRule:ConfigOrganizationCustomPolicyRule":
                return new ConfigOrganizationCustomPolicyRule(name, <any>undefined, { urn })
            case "aws:index/configOrganizationCustomRule:ConfigOrganizationCustomRule":
                return new ConfigOrganizationCustomRule(name, <any>undefined, { urn })
            case "aws:index/configOrganizationManagedRule:ConfigOrganizationManagedRule":
                return new ConfigOrganizationManagedRule(name, <any>undefined, { urn })
            case "aws:index/configRemediationConfiguration:ConfigRemediationConfiguration":
                return new ConfigRemediationConfiguration(name, <any>undefined, { urn })
            case "aws:index/configRetentionConfiguration:ConfigRetentionConfiguration":
                return new ConfigRetentionConfiguration(name, <any>undefined, { urn })
            case "aws:index/connectBotAssociation:ConnectBotAssociation":
                return new ConnectBotAssociation(name, <any>undefined, { urn })
            case "aws:index/connectContactFlow:ConnectContactFlow":
                return new ConnectContactFlow(name, <any>undefined, { urn })
            case "aws:index/connectContactFlowModule:ConnectContactFlowModule":
                return new ConnectContactFlowModule(name, <any>undefined, { urn })
            case "aws:index/connectHoursOfOperation:ConnectHoursOfOperation":
                return new ConnectHoursOfOperation(name, <any>undefined, { urn })
            case "aws:index/connectInstance:ConnectInstance":
                return new ConnectInstance(name, <any>undefined, { urn })
            case "aws:index/connectInstanceStorageConfig:ConnectInstanceStorageConfig":
                return new ConnectInstanceStorageConfig(name, <any>undefined, { urn })
            case "aws:index/connectLambdaFunctionAssociation:ConnectLambdaFunctionAssociation":
                return new ConnectLambdaFunctionAssociation(name, <any>undefined, { urn })
            case "aws:index/connectPhoneNumber:ConnectPhoneNumber":
                return new ConnectPhoneNumber(name, <any>undefined, { urn })
            case "aws:index/connectQueue:ConnectQueue":
                return new ConnectQueue(name, <any>undefined, { urn })
            case "aws:index/connectQuickConnect:ConnectQuickConnect":
                return new ConnectQuickConnect(name, <any>undefined, { urn })
            case "aws:index/connectRoutingProfile:ConnectRoutingProfile":
                return new ConnectRoutingProfile(name, <any>undefined, { urn })
            case "aws:index/connectSecurityProfile:ConnectSecurityProfile":
                return new ConnectSecurityProfile(name, <any>undefined, { urn })
            case "aws:index/connectUser:ConnectUser":
                return new ConnectUser(name, <any>undefined, { urn })
            case "aws:index/connectUserHierarchyGroup:ConnectUserHierarchyGroup":
                return new ConnectUserHierarchyGroup(name, <any>undefined, { urn })
            case "aws:index/connectUserHierarchyStructure:ConnectUserHierarchyStructure":
                return new ConnectUserHierarchyStructure(name, <any>undefined, { urn })
            case "aws:index/connectVocabulary:ConnectVocabulary":
                return new ConnectVocabulary(name, <any>undefined, { urn })
            case "aws:index/controltowerControl:ControltowerControl":
                return new ControltowerControl(name, <any>undefined, { urn })
            case "aws:index/controltowerLandingZone:ControltowerLandingZone":
                return new ControltowerLandingZone(name, <any>undefined, { urn })
            case "aws:index/curReportDefinition:CurReportDefinition":
                return new CurReportDefinition(name, <any>undefined, { urn })
            case "aws:index/customerGateway:CustomerGateway":
                return new CustomerGateway(name, <any>undefined, { urn })
            case "aws:index/customerprofilesDomain:CustomerprofilesDomain":
                return new CustomerprofilesDomain(name, <any>undefined, { urn })
            case "aws:index/customerprofilesProfile:CustomerprofilesProfile":
                return new CustomerprofilesProfile(name, <any>undefined, { urn })
            case "aws:index/dataexchangeDataSet:DataexchangeDataSet":
                return new DataexchangeDataSet(name, <any>undefined, { urn })
            case "aws:index/dataexchangeRevision:DataexchangeRevision":
                return new DataexchangeRevision(name, <any>undefined, { urn })
            case "aws:index/datapipelinePipeline:DatapipelinePipeline":
                return new DatapipelinePipeline(name, <any>undefined, { urn })
            case "aws:index/datapipelinePipelineDefinition:DatapipelinePipelineDefinition":
                return new DatapipelinePipelineDefinition(name, <any>undefined, { urn })
            case "aws:index/datasyncAgent:DatasyncAgent":
                return new DatasyncAgent(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationAzureBlob:DatasyncLocationAzureBlob":
                return new DatasyncLocationAzureBlob(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationEfs:DatasyncLocationEfs":
                return new DatasyncLocationEfs(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationFsxLustreFileSystem:DatasyncLocationFsxLustreFileSystem":
                return new DatasyncLocationFsxLustreFileSystem(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationFsxOntapFileSystem:DatasyncLocationFsxOntapFileSystem":
                return new DatasyncLocationFsxOntapFileSystem(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationFsxOpenzfsFileSystem:DatasyncLocationFsxOpenzfsFileSystem":
                return new DatasyncLocationFsxOpenzfsFileSystem(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationFsxWindowsFileSystem:DatasyncLocationFsxWindowsFileSystem":
                return new DatasyncLocationFsxWindowsFileSystem(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationHdfs:DatasyncLocationHdfs":
                return new DatasyncLocationHdfs(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationNfs:DatasyncLocationNfs":
                return new DatasyncLocationNfs(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationObjectStorage:DatasyncLocationObjectStorage":
                return new DatasyncLocationObjectStorage(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationS3:DatasyncLocationS3":
                return new DatasyncLocationS3(name, <any>undefined, { urn })
            case "aws:index/datasyncLocationSmb:DatasyncLocationSmb":
                return new DatasyncLocationSmb(name, <any>undefined, { urn })
            case "aws:index/datasyncTask:DatasyncTask":
                return new DatasyncTask(name, <any>undefined, { urn })
            case "aws:index/datazoneDomain:DatazoneDomain":
                return new DatazoneDomain(name, <any>undefined, { urn })
            case "aws:index/datazoneEnvironmentBlueprintConfiguration:DatazoneEnvironmentBlueprintConfiguration":
                return new DatazoneEnvironmentBlueprintConfiguration(name, <any>undefined, { urn })
            case "aws:index/datazoneEnvironmentProfile:DatazoneEnvironmentProfile":
                return new DatazoneEnvironmentProfile(name, <any>undefined, { urn })
            case "aws:index/datazoneFormType:DatazoneFormType":
                return new DatazoneFormType(name, <any>undefined, { urn })
            case "aws:index/datazoneGlossary:DatazoneGlossary":
                return new DatazoneGlossary(name, <any>undefined, { urn })
            case "aws:index/datazoneGlossaryTerm:DatazoneGlossaryTerm":
                return new DatazoneGlossaryTerm(name, <any>undefined, { urn })
            case "aws:index/datazoneProject:DatazoneProject":
                return new DatazoneProject(name, <any>undefined, { urn })
            case "aws:index/daxCluster:DaxCluster":
                return new DaxCluster(name, <any>undefined, { urn })
            case "aws:index/daxParameterGroup:DaxParameterGroup":
                return new DaxParameterGroup(name, <any>undefined, { urn })
            case "aws:index/daxSubnetGroup:DaxSubnetGroup":
                return new DaxSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/dbClusterSnapshot:DbClusterSnapshot":
                return new DbClusterSnapshot(name, <any>undefined, { urn })
            case "aws:index/dbEventSubscription:DbEventSubscription":
                return new DbEventSubscription(name, <any>undefined, { urn })
            case "aws:index/dbInstance:DbInstance":
                return new DbInstance(name, <any>undefined, { urn })
            case "aws:index/dbInstanceAutomatedBackupsReplication:DbInstanceAutomatedBackupsReplication":
                return new DbInstanceAutomatedBackupsReplication(name, <any>undefined, { urn })
            case "aws:index/dbInstanceRoleAssociation:DbInstanceRoleAssociation":
                return new DbInstanceRoleAssociation(name, <any>undefined, { urn })
            case "aws:index/dbOptionGroup:DbOptionGroup":
                return new DbOptionGroup(name, <any>undefined, { urn })
            case "aws:index/dbParameterGroup:DbParameterGroup":
                return new DbParameterGroup(name, <any>undefined, { urn })
            case "aws:index/dbProxy:DbProxy":
                return new DbProxy(name, <any>undefined, { urn })
            case "aws:index/dbProxyDefaultTargetGroup:DbProxyDefaultTargetGroup":
                return new DbProxyDefaultTargetGroup(name, <any>undefined, { urn })
            case "aws:index/dbProxyEndpoint:DbProxyEndpoint":
                return new DbProxyEndpoint(name, <any>undefined, { urn })
            case "aws:index/dbProxyTarget:DbProxyTarget":
                return new DbProxyTarget(name, <any>undefined, { urn })
            case "aws:index/dbSnapshot:DbSnapshot":
                return new DbSnapshot(name, <any>undefined, { urn })
            case "aws:index/dbSnapshotCopy:DbSnapshotCopy":
                return new DbSnapshotCopy(name, <any>undefined, { urn })
            case "aws:index/dbSubnetGroup:DbSubnetGroup":
                return new DbSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/defaultNetworkAcl:DefaultNetworkAcl":
                return new DefaultNetworkAcl(name, <any>undefined, { urn })
            case "aws:index/defaultRouteTable:DefaultRouteTable":
                return new DefaultRouteTable(name, <any>undefined, { urn })
            case "aws:index/defaultSecurityGroup:DefaultSecurityGroup":
                return new DefaultSecurityGroup(name, <any>undefined, { urn })
            case "aws:index/defaultSubnet:DefaultSubnet":
                return new DefaultSubnet(name, <any>undefined, { urn })
            case "aws:index/defaultVpc:DefaultVpc":
                return new DefaultVpc(name, <any>undefined, { urn })
            case "aws:index/defaultVpcDhcpOptions:DefaultVpcDhcpOptions":
                return new DefaultVpcDhcpOptions(name, <any>undefined, { urn })
            case "aws:index/detectiveGraph:DetectiveGraph":
                return new DetectiveGraph(name, <any>undefined, { urn })
            case "aws:index/detectiveInvitationAccepter:DetectiveInvitationAccepter":
                return new DetectiveInvitationAccepter(name, <any>undefined, { urn })
            case "aws:index/detectiveMember:DetectiveMember":
                return new DetectiveMember(name, <any>undefined, { urn })
            case "aws:index/detectiveOrganizationAdminAccount:DetectiveOrganizationAdminAccount":
                return new DetectiveOrganizationAdminAccount(name, <any>undefined, { urn })
            case "aws:index/detectiveOrganizationConfiguration:DetectiveOrganizationConfiguration":
                return new DetectiveOrganizationConfiguration(name, <any>undefined, { urn })
            case "aws:index/devicefarmDevicePool:DevicefarmDevicePool":
                return new DevicefarmDevicePool(name, <any>undefined, { urn })
            case "aws:index/devicefarmInstanceProfile:DevicefarmInstanceProfile":
                return new DevicefarmInstanceProfile(name, <any>undefined, { urn })
            case "aws:index/devicefarmNetworkProfile:DevicefarmNetworkProfile":
                return new DevicefarmNetworkProfile(name, <any>undefined, { urn })
            case "aws:index/devicefarmProject:DevicefarmProject":
                return new DevicefarmProject(name, <any>undefined, { urn })
            case "aws:index/devicefarmTestGridProject:DevicefarmTestGridProject":
                return new DevicefarmTestGridProject(name, <any>undefined, { urn })
            case "aws:index/devicefarmUpload:DevicefarmUpload":
                return new DevicefarmUpload(name, <any>undefined, { urn })
            case "aws:index/devopsguruEventSourcesConfig:DevopsguruEventSourcesConfig":
                return new DevopsguruEventSourcesConfig(name, <any>undefined, { urn })
            case "aws:index/devopsguruNotificationChannel:DevopsguruNotificationChannel":
                return new DevopsguruNotificationChannel(name, <any>undefined, { urn })
            case "aws:index/devopsguruResourceCollection:DevopsguruResourceCollection":
                return new DevopsguruResourceCollection(name, <any>undefined, { urn })
            case "aws:index/devopsguruServiceIntegration:DevopsguruServiceIntegration":
                return new DevopsguruServiceIntegration(name, <any>undefined, { urn })
            case "aws:index/directoryServiceConditionalForwarder:DirectoryServiceConditionalForwarder":
                return new DirectoryServiceConditionalForwarder(name, <any>undefined, { urn })
            case "aws:index/directoryServiceDirectory:DirectoryServiceDirectory":
                return new DirectoryServiceDirectory(name, <any>undefined, { urn })
            case "aws:index/directoryServiceLogSubscription:DirectoryServiceLogSubscription":
                return new DirectoryServiceLogSubscription(name, <any>undefined, { urn })
            case "aws:index/directoryServiceRadiusSettings:DirectoryServiceRadiusSettings":
                return new DirectoryServiceRadiusSettings(name, <any>undefined, { urn })
            case "aws:index/directoryServiceRegion:DirectoryServiceRegion":
                return new DirectoryServiceRegion(name, <any>undefined, { urn })
            case "aws:index/directoryServiceSharedDirectory:DirectoryServiceSharedDirectory":
                return new DirectoryServiceSharedDirectory(name, <any>undefined, { urn })
            case "aws:index/directoryServiceSharedDirectoryAccepter:DirectoryServiceSharedDirectoryAccepter":
                return new DirectoryServiceSharedDirectoryAccepter(name, <any>undefined, { urn })
            case "aws:index/directoryServiceTrust:DirectoryServiceTrust":
                return new DirectoryServiceTrust(name, <any>undefined, { urn })
            case "aws:index/dlmLifecyclePolicy:DlmLifecyclePolicy":
                return new DlmLifecyclePolicy(name, <any>undefined, { urn })
            case "aws:index/dmsCertificate:DmsCertificate":
                return new DmsCertificate(name, <any>undefined, { urn })
            case "aws:index/dmsEndpoint:DmsEndpoint":
                return new DmsEndpoint(name, <any>undefined, { urn })
            case "aws:index/dmsEventSubscription:DmsEventSubscription":
                return new DmsEventSubscription(name, <any>undefined, { urn })
            case "aws:index/dmsReplicationConfig:DmsReplicationConfig":
                return new DmsReplicationConfig(name, <any>undefined, { urn })
            case "aws:index/dmsReplicationInstance:DmsReplicationInstance":
                return new DmsReplicationInstance(name, <any>undefined, { urn })
            case "aws:index/dmsReplicationSubnetGroup:DmsReplicationSubnetGroup":
                return new DmsReplicationSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/dmsReplicationTask:DmsReplicationTask":
                return new DmsReplicationTask(name, <any>undefined, { urn })
            case "aws:index/dmsS3Endpoint:DmsS3Endpoint":
                return new DmsS3Endpoint(name, <any>undefined, { urn })
            case "aws:index/docdbCluster:DocdbCluster":
                return new DocdbCluster(name, <any>undefined, { urn })
            case "aws:index/docdbClusterInstance:DocdbClusterInstance":
                return new DocdbClusterInstance(name, <any>undefined, { urn })
            case "aws:index/docdbClusterParameterGroup:DocdbClusterParameterGroup":
                return new DocdbClusterParameterGroup(name, <any>undefined, { urn })
            case "aws:index/docdbClusterSnapshot:DocdbClusterSnapshot":
                return new DocdbClusterSnapshot(name, <any>undefined, { urn })
            case "aws:index/docdbEventSubscription:DocdbEventSubscription":
                return new DocdbEventSubscription(name, <any>undefined, { urn })
            case "aws:index/docdbGlobalCluster:DocdbGlobalCluster":
                return new DocdbGlobalCluster(name, <any>undefined, { urn })
            case "aws:index/docdbSubnetGroup:DocdbSubnetGroup":
                return new DocdbSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/docdbelasticCluster:DocdbelasticCluster":
                return new DocdbelasticCluster(name, <any>undefined, { urn })
            case "aws:index/drsReplicationConfigurationTemplate:DrsReplicationConfigurationTemplate":
                return new DrsReplicationConfigurationTemplate(name, <any>undefined, { urn })
            case "aws:index/dxBgpPeer:DxBgpPeer":
                return new DxBgpPeer(name, <any>undefined, { urn })
            case "aws:index/dxConnection:DxConnection":
                return new DxConnection(name, <any>undefined, { urn })
            case "aws:index/dxConnectionAssociation:DxConnectionAssociation":
                return new DxConnectionAssociation(name, <any>undefined, { urn })
            case "aws:index/dxConnectionConfirmation:DxConnectionConfirmation":
                return new DxConnectionConfirmation(name, <any>undefined, { urn })
            case "aws:index/dxGateway:DxGateway":
                return new DxGateway(name, <any>undefined, { urn })
            case "aws:index/dxGatewayAssociation:DxGatewayAssociation":
                return new DxGatewayAssociation(name, <any>undefined, { urn })
            case "aws:index/dxGatewayAssociationProposal:DxGatewayAssociationProposal":
                return new DxGatewayAssociationProposal(name, <any>undefined, { urn })
            case "aws:index/dxHostedConnection:DxHostedConnection":
                return new DxHostedConnection(name, <any>undefined, { urn })
            case "aws:index/dxHostedPrivateVirtualInterface:DxHostedPrivateVirtualInterface":
                return new DxHostedPrivateVirtualInterface(name, <any>undefined, { urn })
            case "aws:index/dxHostedPrivateVirtualInterfaceAccepter:DxHostedPrivateVirtualInterfaceAccepter":
                return new DxHostedPrivateVirtualInterfaceAccepter(name, <any>undefined, { urn })
            case "aws:index/dxHostedPublicVirtualInterface:DxHostedPublicVirtualInterface":
                return new DxHostedPublicVirtualInterface(name, <any>undefined, { urn })
            case "aws:index/dxHostedPublicVirtualInterfaceAccepter:DxHostedPublicVirtualInterfaceAccepter":
                return new DxHostedPublicVirtualInterfaceAccepter(name, <any>undefined, { urn })
            case "aws:index/dxHostedTransitVirtualInterface:DxHostedTransitVirtualInterface":
                return new DxHostedTransitVirtualInterface(name, <any>undefined, { urn })
            case "aws:index/dxHostedTransitVirtualInterfaceAccepter:DxHostedTransitVirtualInterfaceAccepter":
                return new DxHostedTransitVirtualInterfaceAccepter(name, <any>undefined, { urn })
            case "aws:index/dxLag:DxLag":
                return new DxLag(name, <any>undefined, { urn })
            case "aws:index/dxMacsecKeyAssociation:DxMacsecKeyAssociation":
                return new DxMacsecKeyAssociation(name, <any>undefined, { urn })
            case "aws:index/dxPrivateVirtualInterface:DxPrivateVirtualInterface":
                return new DxPrivateVirtualInterface(name, <any>undefined, { urn })
            case "aws:index/dxPublicVirtualInterface:DxPublicVirtualInterface":
                return new DxPublicVirtualInterface(name, <any>undefined, { urn })
            case "aws:index/dxTransitVirtualInterface:DxTransitVirtualInterface":
                return new DxTransitVirtualInterface(name, <any>undefined, { urn })
            case "aws:index/dynamodbContributorInsights:DynamodbContributorInsights":
                return new DynamodbContributorInsights(name, <any>undefined, { urn })
            case "aws:index/dynamodbGlobalTable:DynamodbGlobalTable":
                return new DynamodbGlobalTable(name, <any>undefined, { urn })
            case "aws:index/dynamodbKinesisStreamingDestination:DynamodbKinesisStreamingDestination":
                return new DynamodbKinesisStreamingDestination(name, <any>undefined, { urn })
            case "aws:index/dynamodbResourcePolicy:DynamodbResourcePolicy":
                return new DynamodbResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/dynamodbTable:DynamodbTable":
                return new DynamodbTable(name, <any>undefined, { urn })
            case "aws:index/dynamodbTableExport:DynamodbTableExport":
                return new DynamodbTableExport(name, <any>undefined, { urn })
            case "aws:index/dynamodbTableItem:DynamodbTableItem":
                return new DynamodbTableItem(name, <any>undefined, { urn })
            case "aws:index/dynamodbTableReplica:DynamodbTableReplica":
                return new DynamodbTableReplica(name, <any>undefined, { urn })
            case "aws:index/dynamodbTag:DynamodbTag":
                return new DynamodbTag(name, <any>undefined, { urn })
            case "aws:index/ebsDefaultKmsKey:EbsDefaultKmsKey":
                return new EbsDefaultKmsKey(name, <any>undefined, { urn })
            case "aws:index/ebsEncryptionByDefault:EbsEncryptionByDefault":
                return new EbsEncryptionByDefault(name, <any>undefined, { urn })
            case "aws:index/ebsFastSnapshotRestore:EbsFastSnapshotRestore":
                return new EbsFastSnapshotRestore(name, <any>undefined, { urn })
            case "aws:index/ebsSnapshot:EbsSnapshot":
                return new EbsSnapshot(name, <any>undefined, { urn })
            case "aws:index/ebsSnapshotBlockPublicAccess:EbsSnapshotBlockPublicAccess":
                return new EbsSnapshotBlockPublicAccess(name, <any>undefined, { urn })
            case "aws:index/ebsSnapshotCopy:EbsSnapshotCopy":
                return new EbsSnapshotCopy(name, <any>undefined, { urn })
            case "aws:index/ebsSnapshotImport:EbsSnapshotImport":
                return new EbsSnapshotImport(name, <any>undefined, { urn })
            case "aws:index/ebsVolume:EbsVolume":
                return new EbsVolume(name, <any>undefined, { urn })
            case "aws:index/ec2AvailabilityZoneGroup:Ec2AvailabilityZoneGroup":
                return new Ec2AvailabilityZoneGroup(name, <any>undefined, { urn })
            case "aws:index/ec2CapacityBlockReservation:Ec2CapacityBlockReservation":
                return new Ec2CapacityBlockReservation(name, <any>undefined, { urn })
            case "aws:index/ec2CapacityReservation:Ec2CapacityReservation":
                return new Ec2CapacityReservation(name, <any>undefined, { urn })
            case "aws:index/ec2CarrierGateway:Ec2CarrierGateway":
                return new Ec2CarrierGateway(name, <any>undefined, { urn })
            case "aws:index/ec2ClientVpnAuthorizationRule:Ec2ClientVpnAuthorizationRule":
                return new Ec2ClientVpnAuthorizationRule(name, <any>undefined, { urn })
            case "aws:index/ec2ClientVpnEndpoint:Ec2ClientVpnEndpoint":
                return new Ec2ClientVpnEndpoint(name, <any>undefined, { urn })
            case "aws:index/ec2ClientVpnNetworkAssociation:Ec2ClientVpnNetworkAssociation":
                return new Ec2ClientVpnNetworkAssociation(name, <any>undefined, { urn })
            case "aws:index/ec2ClientVpnRoute:Ec2ClientVpnRoute":
                return new Ec2ClientVpnRoute(name, <any>undefined, { urn })
            case "aws:index/ec2Fleet:Ec2Fleet":
                return new Ec2Fleet(name, <any>undefined, { urn })
            case "aws:index/ec2Host:Ec2Host":
                return new Ec2Host(name, <any>undefined, { urn })
            case "aws:index/ec2ImageBlockPublicAccess:Ec2ImageBlockPublicAccess":
                return new Ec2ImageBlockPublicAccess(name, <any>undefined, { urn })
            case "aws:index/ec2InstanceConnectEndpoint:Ec2InstanceConnectEndpoint":
                return new Ec2InstanceConnectEndpoint(name, <any>undefined, { urn })
            case "aws:index/ec2InstanceMetadataDefaults:Ec2InstanceMetadataDefaults":
                return new Ec2InstanceMetadataDefaults(name, <any>undefined, { urn })
            case "aws:index/ec2InstanceState:Ec2InstanceState":
                return new Ec2InstanceState(name, <any>undefined, { urn })
            case "aws:index/ec2LocalGatewayRoute:Ec2LocalGatewayRoute":
                return new Ec2LocalGatewayRoute(name, <any>undefined, { urn })
            case "aws:index/ec2LocalGatewayRouteTableVpcAssociation:Ec2LocalGatewayRouteTableVpcAssociation":
                return new Ec2LocalGatewayRouteTableVpcAssociation(name, <any>undefined, { urn })
            case "aws:index/ec2ManagedPrefixList:Ec2ManagedPrefixList":
                return new Ec2ManagedPrefixList(name, <any>undefined, { urn })
            case "aws:index/ec2ManagedPrefixListEntry:Ec2ManagedPrefixListEntry":
                return new Ec2ManagedPrefixListEntry(name, <any>undefined, { urn })
            case "aws:index/ec2NetworkInsightsAnalysis:Ec2NetworkInsightsAnalysis":
                return new Ec2NetworkInsightsAnalysis(name, <any>undefined, { urn })
            case "aws:index/ec2NetworkInsightsPath:Ec2NetworkInsightsPath":
                return new Ec2NetworkInsightsPath(name, <any>undefined, { urn })
            case "aws:index/ec2SerialConsoleAccess:Ec2SerialConsoleAccess":
                return new Ec2SerialConsoleAccess(name, <any>undefined, { urn })
            case "aws:index/ec2SubnetCidrReservation:Ec2SubnetCidrReservation":
                return new Ec2SubnetCidrReservation(name, <any>undefined, { urn })
            case "aws:index/ec2Tag:Ec2Tag":
                return new Ec2Tag(name, <any>undefined, { urn })
            case "aws:index/ec2TrafficMirrorFilter:Ec2TrafficMirrorFilter":
                return new Ec2TrafficMirrorFilter(name, <any>undefined, { urn })
            case "aws:index/ec2TrafficMirrorFilterRule:Ec2TrafficMirrorFilterRule":
                return new Ec2TrafficMirrorFilterRule(name, <any>undefined, { urn })
            case "aws:index/ec2TrafficMirrorSession:Ec2TrafficMirrorSession":
                return new Ec2TrafficMirrorSession(name, <any>undefined, { urn })
            case "aws:index/ec2TrafficMirrorTarget:Ec2TrafficMirrorTarget":
                return new Ec2TrafficMirrorTarget(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGateway:Ec2TransitGateway":
                return new Ec2TransitGateway(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayConnect:Ec2TransitGatewayConnect":
                return new Ec2TransitGatewayConnect(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayConnectPeer:Ec2TransitGatewayConnectPeer":
                return new Ec2TransitGatewayConnectPeer(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayMulticastDomain:Ec2TransitGatewayMulticastDomain":
                return new Ec2TransitGatewayMulticastDomain(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayMulticastDomainAssociation:Ec2TransitGatewayMulticastDomainAssociation":
                return new Ec2TransitGatewayMulticastDomainAssociation(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayMulticastGroupMember:Ec2TransitGatewayMulticastGroupMember":
                return new Ec2TransitGatewayMulticastGroupMember(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayMulticastGroupSource:Ec2TransitGatewayMulticastGroupSource":
                return new Ec2TransitGatewayMulticastGroupSource(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayPeeringAttachment:Ec2TransitGatewayPeeringAttachment":
                return new Ec2TransitGatewayPeeringAttachment(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayPeeringAttachmentAccepter:Ec2TransitGatewayPeeringAttachmentAccepter":
                return new Ec2TransitGatewayPeeringAttachmentAccepter(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayPolicyTable:Ec2TransitGatewayPolicyTable":
                return new Ec2TransitGatewayPolicyTable(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayPolicyTableAssociation:Ec2TransitGatewayPolicyTableAssociation":
                return new Ec2TransitGatewayPolicyTableAssociation(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayPrefixListReference:Ec2TransitGatewayPrefixListReference":
                return new Ec2TransitGatewayPrefixListReference(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayRoute:Ec2TransitGatewayRoute":
                return new Ec2TransitGatewayRoute(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayRouteTable:Ec2TransitGatewayRouteTable":
                return new Ec2TransitGatewayRouteTable(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayRouteTableAssociation:Ec2TransitGatewayRouteTableAssociation":
                return new Ec2TransitGatewayRouteTableAssociation(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayRouteTablePropagation:Ec2TransitGatewayRouteTablePropagation":
                return new Ec2TransitGatewayRouteTablePropagation(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayVpcAttachment:Ec2TransitGatewayVpcAttachment":
                return new Ec2TransitGatewayVpcAttachment(name, <any>undefined, { urn })
            case "aws:index/ec2TransitGatewayVpcAttachmentAccepter:Ec2TransitGatewayVpcAttachmentAccepter":
                return new Ec2TransitGatewayVpcAttachmentAccepter(name, <any>undefined, { urn })
            case "aws:index/ecrLifecyclePolicy:EcrLifecyclePolicy":
                return new EcrLifecyclePolicy(name, <any>undefined, { urn })
            case "aws:index/ecrPullThroughCacheRule:EcrPullThroughCacheRule":
                return new EcrPullThroughCacheRule(name, <any>undefined, { urn })
            case "aws:index/ecrRegistryPolicy:EcrRegistryPolicy":
                return new EcrRegistryPolicy(name, <any>undefined, { urn })
            case "aws:index/ecrRegistryScanningConfiguration:EcrRegistryScanningConfiguration":
                return new EcrRegistryScanningConfiguration(name, <any>undefined, { urn })
            case "aws:index/ecrReplicationConfiguration:EcrReplicationConfiguration":
                return new EcrReplicationConfiguration(name, <any>undefined, { urn })
            case "aws:index/ecrRepository:EcrRepository":
                return new EcrRepository(name, <any>undefined, { urn })
            case "aws:index/ecrRepositoryCreationTemplate:EcrRepositoryCreationTemplate":
                return new EcrRepositoryCreationTemplate(name, <any>undefined, { urn })
            case "aws:index/ecrRepositoryPolicy:EcrRepositoryPolicy":
                return new EcrRepositoryPolicy(name, <any>undefined, { urn })
            case "aws:index/ecrpublicRepository:EcrpublicRepository":
                return new EcrpublicRepository(name, <any>undefined, { urn })
            case "aws:index/ecrpublicRepositoryPolicy:EcrpublicRepositoryPolicy":
                return new EcrpublicRepositoryPolicy(name, <any>undefined, { urn })
            case "aws:index/ecsAccountSettingDefault:EcsAccountSettingDefault":
                return new EcsAccountSettingDefault(name, <any>undefined, { urn })
            case "aws:index/ecsCapacityProvider:EcsCapacityProvider":
                return new EcsCapacityProvider(name, <any>undefined, { urn })
            case "aws:index/ecsCluster:EcsCluster":
                return new EcsCluster(name, <any>undefined, { urn })
            case "aws:index/ecsClusterCapacityProviders:EcsClusterCapacityProviders":
                return new EcsClusterCapacityProviders(name, <any>undefined, { urn })
            case "aws:index/ecsService:EcsService":
                return new EcsService(name, <any>undefined, { urn })
            case "aws:index/ecsTag:EcsTag":
                return new EcsTag(name, <any>undefined, { urn })
            case "aws:index/ecsTaskDefinition:EcsTaskDefinition":
                return new EcsTaskDefinition(name, <any>undefined, { urn })
            case "aws:index/ecsTaskSet:EcsTaskSet":
                return new EcsTaskSet(name, <any>undefined, { urn })
            case "aws:index/efsAccessPoint:EfsAccessPoint":
                return new EfsAccessPoint(name, <any>undefined, { urn })
            case "aws:index/efsBackupPolicy:EfsBackupPolicy":
                return new EfsBackupPolicy(name, <any>undefined, { urn })
            case "aws:index/efsFileSystem:EfsFileSystem":
                return new EfsFileSystem(name, <any>undefined, { urn })
            case "aws:index/efsFileSystemPolicy:EfsFileSystemPolicy":
                return new EfsFileSystemPolicy(name, <any>undefined, { urn })
            case "aws:index/efsMountTarget:EfsMountTarget":
                return new EfsMountTarget(name, <any>undefined, { urn })
            case "aws:index/efsReplicationConfiguration:EfsReplicationConfiguration":
                return new EfsReplicationConfiguration(name, <any>undefined, { urn })
            case "aws:index/egressOnlyInternetGateway:EgressOnlyInternetGateway":
                return new EgressOnlyInternetGateway(name, <any>undefined, { urn })
            case "aws:index/eip:Eip":
                return new Eip(name, <any>undefined, { urn })
            case "aws:index/eipAssociation:EipAssociation":
                return new EipAssociation(name, <any>undefined, { urn })
            case "aws:index/eipDomainName:EipDomainName":
                return new EipDomainName(name, <any>undefined, { urn })
            case "aws:index/eksAccessEntry:EksAccessEntry":
                return new EksAccessEntry(name, <any>undefined, { urn })
            case "aws:index/eksAccessPolicyAssociation:EksAccessPolicyAssociation":
                return new EksAccessPolicyAssociation(name, <any>undefined, { urn })
            case "aws:index/eksAddon:EksAddon":
                return new EksAddon(name, <any>undefined, { urn })
            case "aws:index/eksCluster:EksCluster":
                return new EksCluster(name, <any>undefined, { urn })
            case "aws:index/eksFargateProfile:EksFargateProfile":
                return new EksFargateProfile(name, <any>undefined, { urn })
            case "aws:index/eksIdentityProviderConfig:EksIdentityProviderConfig":
                return new EksIdentityProviderConfig(name, <any>undefined, { urn })
            case "aws:index/eksNodeGroup:EksNodeGroup":
                return new EksNodeGroup(name, <any>undefined, { urn })
            case "aws:index/eksPodIdentityAssociation:EksPodIdentityAssociation":
                return new EksPodIdentityAssociation(name, <any>undefined, { urn })
            case "aws:index/elasticBeanstalkApplication:ElasticBeanstalkApplication":
                return new ElasticBeanstalkApplication(name, <any>undefined, { urn })
            case "aws:index/elasticBeanstalkApplicationVersion:ElasticBeanstalkApplicationVersion":
                return new ElasticBeanstalkApplicationVersion(name, <any>undefined, { urn })
            case "aws:index/elasticBeanstalkConfigurationTemplate:ElasticBeanstalkConfigurationTemplate":
                return new ElasticBeanstalkConfigurationTemplate(name, <any>undefined, { urn })
            case "aws:index/elasticBeanstalkEnvironment:ElasticBeanstalkEnvironment":
                return new ElasticBeanstalkEnvironment(name, <any>undefined, { urn })
            case "aws:index/elasticacheCluster:ElasticacheCluster":
                return new ElasticacheCluster(name, <any>undefined, { urn })
            case "aws:index/elasticacheGlobalReplicationGroup:ElasticacheGlobalReplicationGroup":
                return new ElasticacheGlobalReplicationGroup(name, <any>undefined, { urn })
            case "aws:index/elasticacheParameterGroup:ElasticacheParameterGroup":
                return new ElasticacheParameterGroup(name, <any>undefined, { urn })
            case "aws:index/elasticacheReplicationGroup:ElasticacheReplicationGroup":
                return new ElasticacheReplicationGroup(name, <any>undefined, { urn })
            case "aws:index/elasticacheServerlessCache:ElasticacheServerlessCache":
                return new ElasticacheServerlessCache(name, <any>undefined, { urn })
            case "aws:index/elasticacheSubnetGroup:ElasticacheSubnetGroup":
                return new ElasticacheSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/elasticacheUser:ElasticacheUser":
                return new ElasticacheUser(name, <any>undefined, { urn })
            case "aws:index/elasticacheUserGroup:ElasticacheUserGroup":
                return new ElasticacheUserGroup(name, <any>undefined, { urn })
            case "aws:index/elasticacheUserGroupAssociation:ElasticacheUserGroupAssociation":
                return new ElasticacheUserGroupAssociation(name, <any>undefined, { urn })
            case "aws:index/elasticsearchDomain:ElasticsearchDomain":
                return new ElasticsearchDomain(name, <any>undefined, { urn })
            case "aws:index/elasticsearchDomainPolicy:ElasticsearchDomainPolicy":
                return new ElasticsearchDomainPolicy(name, <any>undefined, { urn })
            case "aws:index/elasticsearchDomainSamlOptions:ElasticsearchDomainSamlOptions":
                return new ElasticsearchDomainSamlOptions(name, <any>undefined, { urn })
            case "aws:index/elasticsearchVpcEndpoint:ElasticsearchVpcEndpoint":
                return new ElasticsearchVpcEndpoint(name, <any>undefined, { urn })
            case "aws:index/elastictranscoderPipeline:ElastictranscoderPipeline":
                return new ElastictranscoderPipeline(name, <any>undefined, { urn })
            case "aws:index/elastictranscoderPreset:ElastictranscoderPreset":
                return new ElastictranscoderPreset(name, <any>undefined, { urn })
            case "aws:index/elb:Elb":
                return new Elb(name, <any>undefined, { urn })
            case "aws:index/elbAttachment:ElbAttachment":
                return new ElbAttachment(name, <any>undefined, { urn })
            case "aws:index/emrBlockPublicAccessConfiguration:EmrBlockPublicAccessConfiguration":
                return new EmrBlockPublicAccessConfiguration(name, <any>undefined, { urn })
            case "aws:index/emrCluster:EmrCluster":
                return new EmrCluster(name, <any>undefined, { urn })
            case "aws:index/emrInstanceFleet:EmrInstanceFleet":
                return new EmrInstanceFleet(name, <any>undefined, { urn })
            case "aws:index/emrInstanceGroup:EmrInstanceGroup":
                return new EmrInstanceGroup(name, <any>undefined, { urn })
            case "aws:index/emrManagedScalingPolicy:EmrManagedScalingPolicy":
                return new EmrManagedScalingPolicy(name, <any>undefined, { urn })
            case "aws:index/emrSecurityConfiguration:EmrSecurityConfiguration":
                return new EmrSecurityConfiguration(name, <any>undefined, { urn })
            case "aws:index/emrStudio:EmrStudio":
                return new EmrStudio(name, <any>undefined, { urn })
            case "aws:index/emrStudioSessionMapping:EmrStudioSessionMapping":
                return new EmrStudioSessionMapping(name, <any>undefined, { urn })
            case "aws:index/emrcontainersJobTemplate:EmrcontainersJobTemplate":
                return new EmrcontainersJobTemplate(name, <any>undefined, { urn })
            case "aws:index/emrcontainersVirtualCluster:EmrcontainersVirtualCluster":
                return new EmrcontainersVirtualCluster(name, <any>undefined, { urn })
            case "aws:index/emrserverlessApplication:EmrserverlessApplication":
                return new EmrserverlessApplication(name, <any>undefined, { urn })
            case "aws:index/evidentlyFeature:EvidentlyFeature":
                return new EvidentlyFeature(name, <any>undefined, { urn })
            case "aws:index/evidentlyLaunch:EvidentlyLaunch":
                return new EvidentlyLaunch(name, <any>undefined, { urn })
            case "aws:index/evidentlyProject:EvidentlyProject":
                return new EvidentlyProject(name, <any>undefined, { urn })
            case "aws:index/evidentlySegment:EvidentlySegment":
                return new EvidentlySegment(name, <any>undefined, { urn })
            case "aws:index/finspaceKxCluster:FinspaceKxCluster":
                return new FinspaceKxCluster(name, <any>undefined, { urn })
            case "aws:index/finspaceKxDatabase:FinspaceKxDatabase":
                return new FinspaceKxDatabase(name, <any>undefined, { urn })
            case "aws:index/finspaceKxDataview:FinspaceKxDataview":
                return new FinspaceKxDataview(name, <any>undefined, { urn })
            case "aws:index/finspaceKxEnvironment:FinspaceKxEnvironment":
                return new FinspaceKxEnvironment(name, <any>undefined, { urn })
            case "aws:index/finspaceKxScalingGroup:FinspaceKxScalingGroup":
                return new FinspaceKxScalingGroup(name, <any>undefined, { urn })
            case "aws:index/finspaceKxUser:FinspaceKxUser":
                return new FinspaceKxUser(name, <any>undefined, { urn })
            case "aws:index/finspaceKxVolume:FinspaceKxVolume":
                return new FinspaceKxVolume(name, <any>undefined, { urn })
            case "aws:index/fisExperimentTemplate:FisExperimentTemplate":
                return new FisExperimentTemplate(name, <any>undefined, { urn })
            case "aws:index/flowLog:FlowLog":
                return new FlowLog(name, <any>undefined, { urn })
            case "aws:index/fmsAdminAccount:FmsAdminAccount":
                return new FmsAdminAccount(name, <any>undefined, { urn })
            case "aws:index/fmsPolicy:FmsPolicy":
                return new FmsPolicy(name, <any>undefined, { urn })
            case "aws:index/fmsResourceSet:FmsResourceSet":
                return new FmsResourceSet(name, <any>undefined, { urn })
            case "aws:index/fsxBackup:FsxBackup":
                return new FsxBackup(name, <any>undefined, { urn })
            case "aws:index/fsxDataRepositoryAssociation:FsxDataRepositoryAssociation":
                return new FsxDataRepositoryAssociation(name, <any>undefined, { urn })
            case "aws:index/fsxFileCache:FsxFileCache":
                return new FsxFileCache(name, <any>undefined, { urn })
            case "aws:index/fsxLustreFileSystem:FsxLustreFileSystem":
                return new FsxLustreFileSystem(name, <any>undefined, { urn })
            case "aws:index/fsxOntapFileSystem:FsxOntapFileSystem":
                return new FsxOntapFileSystem(name, <any>undefined, { urn })
            case "aws:index/fsxOntapStorageVirtualMachine:FsxOntapStorageVirtualMachine":
                return new FsxOntapStorageVirtualMachine(name, <any>undefined, { urn })
            case "aws:index/fsxOntapVolume:FsxOntapVolume":
                return new FsxOntapVolume(name, <any>undefined, { urn })
            case "aws:index/fsxOpenzfsFileSystem:FsxOpenzfsFileSystem":
                return new FsxOpenzfsFileSystem(name, <any>undefined, { urn })
            case "aws:index/fsxOpenzfsSnapshot:FsxOpenzfsSnapshot":
                return new FsxOpenzfsSnapshot(name, <any>undefined, { urn })
            case "aws:index/fsxOpenzfsVolume:FsxOpenzfsVolume":
                return new FsxOpenzfsVolume(name, <any>undefined, { urn })
            case "aws:index/fsxWindowsFileSystem:FsxWindowsFileSystem":
                return new FsxWindowsFileSystem(name, <any>undefined, { urn })
            case "aws:index/gameliftAlias:GameliftAlias":
                return new GameliftAlias(name, <any>undefined, { urn })
            case "aws:index/gameliftBuild:GameliftBuild":
                return new GameliftBuild(name, <any>undefined, { urn })
            case "aws:index/gameliftFleet:GameliftFleet":
                return new GameliftFleet(name, <any>undefined, { urn })
            case "aws:index/gameliftGameServerGroup:GameliftGameServerGroup":
                return new GameliftGameServerGroup(name, <any>undefined, { urn })
            case "aws:index/gameliftGameSessionQueue:GameliftGameSessionQueue":
                return new GameliftGameSessionQueue(name, <any>undefined, { urn })
            case "aws:index/gameliftScript:GameliftScript":
                return new GameliftScript(name, <any>undefined, { urn })
            case "aws:index/glacierVault:GlacierVault":
                return new GlacierVault(name, <any>undefined, { urn })
            case "aws:index/glacierVaultLock:GlacierVaultLock":
                return new GlacierVaultLock(name, <any>undefined, { urn })
            case "aws:index/globalacceleratorAccelerator:GlobalacceleratorAccelerator":
                return new GlobalacceleratorAccelerator(name, <any>undefined, { urn })
            case "aws:index/globalacceleratorCrossAccountAttachment:GlobalacceleratorCrossAccountAttachment":
                return new GlobalacceleratorCrossAccountAttachment(name, <any>undefined, { urn })
            case "aws:index/globalacceleratorCustomRoutingAccelerator:GlobalacceleratorCustomRoutingAccelerator":
                return new GlobalacceleratorCustomRoutingAccelerator(name, <any>undefined, { urn })
            case "aws:index/globalacceleratorCustomRoutingEndpointGroup:GlobalacceleratorCustomRoutingEndpointGroup":
                return new GlobalacceleratorCustomRoutingEndpointGroup(name, <any>undefined, { urn })
            case "aws:index/globalacceleratorCustomRoutingListener:GlobalacceleratorCustomRoutingListener":
                return new GlobalacceleratorCustomRoutingListener(name, <any>undefined, { urn })
            case "aws:index/globalacceleratorEndpointGroup:GlobalacceleratorEndpointGroup":
                return new GlobalacceleratorEndpointGroup(name, <any>undefined, { urn })
            case "aws:index/globalacceleratorListener:GlobalacceleratorListener":
                return new GlobalacceleratorListener(name, <any>undefined, { urn })
            case "aws:index/glueCatalogDatabase:GlueCatalogDatabase":
                return new GlueCatalogDatabase(name, <any>undefined, { urn })
            case "aws:index/glueCatalogTable:GlueCatalogTable":
                return new GlueCatalogTable(name, <any>undefined, { urn })
            case "aws:index/glueCatalogTableOptimizer:GlueCatalogTableOptimizer":
                return new GlueCatalogTableOptimizer(name, <any>undefined, { urn })
            case "aws:index/glueClassifier:GlueClassifier":
                return new GlueClassifier(name, <any>undefined, { urn })
            case "aws:index/glueConnection:GlueConnection":
                return new GlueConnection(name, <any>undefined, { urn })
            case "aws:index/glueCrawler:GlueCrawler":
                return new GlueCrawler(name, <any>undefined, { urn })
            case "aws:index/glueDataCatalogEncryptionSettings:GlueDataCatalogEncryptionSettings":
                return new GlueDataCatalogEncryptionSettings(name, <any>undefined, { urn })
            case "aws:index/glueDataQualityRuleset:GlueDataQualityRuleset":
                return new GlueDataQualityRuleset(name, <any>undefined, { urn })
            case "aws:index/glueDevEndpoint:GlueDevEndpoint":
                return new GlueDevEndpoint(name, <any>undefined, { urn })
            case "aws:index/glueJob:GlueJob":
                return new GlueJob(name, <any>undefined, { urn })
            case "aws:index/glueMlTransform:GlueMlTransform":
                return new GlueMlTransform(name, <any>undefined, { urn })
            case "aws:index/gluePartition:GluePartition":
                return new GluePartition(name, <any>undefined, { urn })
            case "aws:index/gluePartitionIndex:GluePartitionIndex":
                return new GluePartitionIndex(name, <any>undefined, { urn })
            case "aws:index/glueRegistry:GlueRegistry":
                return new GlueRegistry(name, <any>undefined, { urn })
            case "aws:index/glueResourcePolicy:GlueResourcePolicy":
                return new GlueResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/glueSchema:GlueSchema":
                return new GlueSchema(name, <any>undefined, { urn })
            case "aws:index/glueSecurityConfiguration:GlueSecurityConfiguration":
                return new GlueSecurityConfiguration(name, <any>undefined, { urn })
            case "aws:index/glueTrigger:GlueTrigger":
                return new GlueTrigger(name, <any>undefined, { urn })
            case "aws:index/glueUserDefinedFunction:GlueUserDefinedFunction":
                return new GlueUserDefinedFunction(name, <any>undefined, { urn })
            case "aws:index/glueWorkflow:GlueWorkflow":
                return new GlueWorkflow(name, <any>undefined, { urn })
            case "aws:index/grafanaLicenseAssociation:GrafanaLicenseAssociation":
                return new GrafanaLicenseAssociation(name, <any>undefined, { urn })
            case "aws:index/grafanaRoleAssociation:GrafanaRoleAssociation":
                return new GrafanaRoleAssociation(name, <any>undefined, { urn })
            case "aws:index/grafanaWorkspace:GrafanaWorkspace":
                return new GrafanaWorkspace(name, <any>undefined, { urn })
            case "aws:index/grafanaWorkspaceApiKey:GrafanaWorkspaceApiKey":
                return new GrafanaWorkspaceApiKey(name, <any>undefined, { urn })
            case "aws:index/grafanaWorkspaceSamlConfiguration:GrafanaWorkspaceSamlConfiguration":
                return new GrafanaWorkspaceSamlConfiguration(name, <any>undefined, { urn })
            case "aws:index/grafanaWorkspaceServiceAccount:GrafanaWorkspaceServiceAccount":
                return new GrafanaWorkspaceServiceAccount(name, <any>undefined, { urn })
            case "aws:index/grafanaWorkspaceServiceAccountToken:GrafanaWorkspaceServiceAccountToken":
                return new GrafanaWorkspaceServiceAccountToken(name, <any>undefined, { urn })
            case "aws:index/guarddutyDetector:GuarddutyDetector":
                return new GuarddutyDetector(name, <any>undefined, { urn })
            case "aws:index/guarddutyDetectorFeature:GuarddutyDetectorFeature":
                return new GuarddutyDetectorFeature(name, <any>undefined, { urn })
            case "aws:index/guarddutyFilter:GuarddutyFilter":
                return new GuarddutyFilter(name, <any>undefined, { urn })
            case "aws:index/guarddutyInviteAccepter:GuarddutyInviteAccepter":
                return new GuarddutyInviteAccepter(name, <any>undefined, { urn })
            case "aws:index/guarddutyIpset:GuarddutyIpset":
                return new GuarddutyIpset(name, <any>undefined, { urn })
            case "aws:index/guarddutyMalwareProtectionPlan:GuarddutyMalwareProtectionPlan":
                return new GuarddutyMalwareProtectionPlan(name, <any>undefined, { urn })
            case "aws:index/guarddutyMember:GuarddutyMember":
                return new GuarddutyMember(name, <any>undefined, { urn })
            case "aws:index/guarddutyOrganizationAdminAccount:GuarddutyOrganizationAdminAccount":
                return new GuarddutyOrganizationAdminAccount(name, <any>undefined, { urn })
            case "aws:index/guarddutyOrganizationConfiguration:GuarddutyOrganizationConfiguration":
                return new GuarddutyOrganizationConfiguration(name, <any>undefined, { urn })
            case "aws:index/guarddutyOrganizationConfigurationFeature:GuarddutyOrganizationConfigurationFeature":
                return new GuarddutyOrganizationConfigurationFeature(name, <any>undefined, { urn })
            case "aws:index/guarddutyPublishingDestination:GuarddutyPublishingDestination":
                return new GuarddutyPublishingDestination(name, <any>undefined, { urn })
            case "aws:index/guarddutyThreatintelset:GuarddutyThreatintelset":
                return new GuarddutyThreatintelset(name, <any>undefined, { urn })
            case "aws:index/iamAccessKey:IamAccessKey":
                return new IamAccessKey(name, <any>undefined, { urn })
            case "aws:index/iamAccountAlias:IamAccountAlias":
                return new IamAccountAlias(name, <any>undefined, { urn })
            case "aws:index/iamAccountPasswordPolicy:IamAccountPasswordPolicy":
                return new IamAccountPasswordPolicy(name, <any>undefined, { urn })
            case "aws:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "aws:index/iamGroupMembership:IamGroupMembership":
                return new IamGroupMembership(name, <any>undefined, { urn })
            case "aws:index/iamGroupPolicy:IamGroupPolicy":
                return new IamGroupPolicy(name, <any>undefined, { urn })
            case "aws:index/iamGroupPolicyAttachment:IamGroupPolicyAttachment":
                return new IamGroupPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/iamInstanceProfile:IamInstanceProfile":
                return new IamInstanceProfile(name, <any>undefined, { urn })
            case "aws:index/iamOpenidConnectProvider:IamOpenidConnectProvider":
                return new IamOpenidConnectProvider(name, <any>undefined, { urn })
            case "aws:index/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "aws:index/iamPolicyAttachment:IamPolicyAttachment":
                return new IamPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/iamRole:IamRole":
                return new IamRole(name, <any>undefined, { urn })
            case "aws:index/iamRolePolicy:IamRolePolicy":
                return new IamRolePolicy(name, <any>undefined, { urn })
            case "aws:index/iamRolePolicyAttachment:IamRolePolicyAttachment":
                return new IamRolePolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/iamSamlProvider:IamSamlProvider":
                return new IamSamlProvider(name, <any>undefined, { urn })
            case "aws:index/iamSecurityTokenServicePreferences:IamSecurityTokenServicePreferences":
                return new IamSecurityTokenServicePreferences(name, <any>undefined, { urn })
            case "aws:index/iamServerCertificate:IamServerCertificate":
                return new IamServerCertificate(name, <any>undefined, { urn })
            case "aws:index/iamServiceLinkedRole:IamServiceLinkedRole":
                return new IamServiceLinkedRole(name, <any>undefined, { urn })
            case "aws:index/iamServiceSpecificCredential:IamServiceSpecificCredential":
                return new IamServiceSpecificCredential(name, <any>undefined, { urn })
            case "aws:index/iamSigningCertificate:IamSigningCertificate":
                return new IamSigningCertificate(name, <any>undefined, { urn })
            case "aws:index/iamUser:IamUser":
                return new IamUser(name, <any>undefined, { urn })
            case "aws:index/iamUserGroupMembership:IamUserGroupMembership":
                return new IamUserGroupMembership(name, <any>undefined, { urn })
            case "aws:index/iamUserLoginProfile:IamUserLoginProfile":
                return new IamUserLoginProfile(name, <any>undefined, { urn })
            case "aws:index/iamUserPolicy:IamUserPolicy":
                return new IamUserPolicy(name, <any>undefined, { urn })
            case "aws:index/iamUserPolicyAttachment:IamUserPolicyAttachment":
                return new IamUserPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/iamUserSshKey:IamUserSshKey":
                return new IamUserSshKey(name, <any>undefined, { urn })
            case "aws:index/iamVirtualMfaDevice:IamVirtualMfaDevice":
                return new IamVirtualMfaDevice(name, <any>undefined, { urn })
            case "aws:index/identitystoreGroup:IdentitystoreGroup":
                return new IdentitystoreGroup(name, <any>undefined, { urn })
            case "aws:index/identitystoreGroupMembership:IdentitystoreGroupMembership":
                return new IdentitystoreGroupMembership(name, <any>undefined, { urn })
            case "aws:index/identitystoreUser:IdentitystoreUser":
                return new IdentitystoreUser(name, <any>undefined, { urn })
            case "aws:index/imagebuilderComponent:ImagebuilderComponent":
                return new ImagebuilderComponent(name, <any>undefined, { urn })
            case "aws:index/imagebuilderContainerRecipe:ImagebuilderContainerRecipe":
                return new ImagebuilderContainerRecipe(name, <any>undefined, { urn })
            case "aws:index/imagebuilderDistributionConfiguration:ImagebuilderDistributionConfiguration":
                return new ImagebuilderDistributionConfiguration(name, <any>undefined, { urn })
            case "aws:index/imagebuilderImage:ImagebuilderImage":
                return new ImagebuilderImage(name, <any>undefined, { urn })
            case "aws:index/imagebuilderImagePipeline:ImagebuilderImagePipeline":
                return new ImagebuilderImagePipeline(name, <any>undefined, { urn })
            case "aws:index/imagebuilderImageRecipe:ImagebuilderImageRecipe":
                return new ImagebuilderImageRecipe(name, <any>undefined, { urn })
            case "aws:index/imagebuilderInfrastructureConfiguration:ImagebuilderInfrastructureConfiguration":
                return new ImagebuilderInfrastructureConfiguration(name, <any>undefined, { urn })
            case "aws:index/imagebuilderWorkflow:ImagebuilderWorkflow":
                return new ImagebuilderWorkflow(name, <any>undefined, { urn })
            case "aws:index/inspector2DelegatedAdminAccount:Inspector2DelegatedAdminAccount":
                return new Inspector2DelegatedAdminAccount(name, <any>undefined, { urn })
            case "aws:index/inspector2Enabler:Inspector2Enabler":
                return new Inspector2Enabler(name, <any>undefined, { urn })
            case "aws:index/inspector2MemberAssociation:Inspector2MemberAssociation":
                return new Inspector2MemberAssociation(name, <any>undefined, { urn })
            case "aws:index/inspector2OrganizationConfiguration:Inspector2OrganizationConfiguration":
                return new Inspector2OrganizationConfiguration(name, <any>undefined, { urn })
            case "aws:index/inspectorAssessmentTarget:InspectorAssessmentTarget":
                return new InspectorAssessmentTarget(name, <any>undefined, { urn })
            case "aws:index/inspectorAssessmentTemplate:InspectorAssessmentTemplate":
                return new InspectorAssessmentTemplate(name, <any>undefined, { urn })
            case "aws:index/inspectorResourceGroup:InspectorResourceGroup":
                return new InspectorResourceGroup(name, <any>undefined, { urn })
            case "aws:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws:index/internetGateway:InternetGateway":
                return new InternetGateway(name, <any>undefined, { urn })
            case "aws:index/internetGatewayAttachment:InternetGatewayAttachment":
                return new InternetGatewayAttachment(name, <any>undefined, { urn })
            case "aws:index/internetmonitorMonitor:InternetmonitorMonitor":
                return new InternetmonitorMonitor(name, <any>undefined, { urn })
            case "aws:index/iotAuthorizer:IotAuthorizer":
                return new IotAuthorizer(name, <any>undefined, { urn })
            case "aws:index/iotBillingGroup:IotBillingGroup":
                return new IotBillingGroup(name, <any>undefined, { urn })
            case "aws:index/iotCaCertificate:IotCaCertificate":
                return new IotCaCertificate(name, <any>undefined, { urn })
            case "aws:index/iotCertificate:IotCertificate":
                return new IotCertificate(name, <any>undefined, { urn })
            case "aws:index/iotDomainConfiguration:IotDomainConfiguration":
                return new IotDomainConfiguration(name, <any>undefined, { urn })
            case "aws:index/iotEventConfigurations:IotEventConfigurations":
                return new IotEventConfigurations(name, <any>undefined, { urn })
            case "aws:index/iotIndexingConfiguration:IotIndexingConfiguration":
                return new IotIndexingConfiguration(name, <any>undefined, { urn })
            case "aws:index/iotLoggingOptions:IotLoggingOptions":
                return new IotLoggingOptions(name, <any>undefined, { urn })
            case "aws:index/iotPolicy:IotPolicy":
                return new IotPolicy(name, <any>undefined, { urn })
            case "aws:index/iotPolicyAttachment:IotPolicyAttachment":
                return new IotPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/iotProvisioningTemplate:IotProvisioningTemplate":
                return new IotProvisioningTemplate(name, <any>undefined, { urn })
            case "aws:index/iotRoleAlias:IotRoleAlias":
                return new IotRoleAlias(name, <any>undefined, { urn })
            case "aws:index/iotThing:IotThing":
                return new IotThing(name, <any>undefined, { urn })
            case "aws:index/iotThingGroup:IotThingGroup":
                return new IotThingGroup(name, <any>undefined, { urn })
            case "aws:index/iotThingGroupMembership:IotThingGroupMembership":
                return new IotThingGroupMembership(name, <any>undefined, { urn })
            case "aws:index/iotThingPrincipalAttachment:IotThingPrincipalAttachment":
                return new IotThingPrincipalAttachment(name, <any>undefined, { urn })
            case "aws:index/iotThingType:IotThingType":
                return new IotThingType(name, <any>undefined, { urn })
            case "aws:index/iotTopicRule:IotTopicRule":
                return new IotTopicRule(name, <any>undefined, { urn })
            case "aws:index/iotTopicRuleDestination:IotTopicRuleDestination":
                return new IotTopicRuleDestination(name, <any>undefined, { urn })
            case "aws:index/ivsChannel:IvsChannel":
                return new IvsChannel(name, <any>undefined, { urn })
            case "aws:index/ivsPlaybackKeyPair:IvsPlaybackKeyPair":
                return new IvsPlaybackKeyPair(name, <any>undefined, { urn })
            case "aws:index/ivsRecordingConfiguration:IvsRecordingConfiguration":
                return new IvsRecordingConfiguration(name, <any>undefined, { urn })
            case "aws:index/ivschatLoggingConfiguration:IvschatLoggingConfiguration":
                return new IvschatLoggingConfiguration(name, <any>undefined, { urn })
            case "aws:index/ivschatRoom:IvschatRoom":
                return new IvschatRoom(name, <any>undefined, { urn })
            case "aws:index/kendraDataSource:KendraDataSource":
                return new KendraDataSource(name, <any>undefined, { urn })
            case "aws:index/kendraExperience:KendraExperience":
                return new KendraExperience(name, <any>undefined, { urn })
            case "aws:index/kendraFaq:KendraFaq":
                return new KendraFaq(name, <any>undefined, { urn })
            case "aws:index/kendraIndex:KendraIndex":
                return new KendraIndex(name, <any>undefined, { urn })
            case "aws:index/kendraQuerySuggestionsBlockList:KendraQuerySuggestionsBlockList":
                return new KendraQuerySuggestionsBlockList(name, <any>undefined, { urn })
            case "aws:index/kendraThesaurus:KendraThesaurus":
                return new KendraThesaurus(name, <any>undefined, { urn })
            case "aws:index/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "aws:index/keyspacesKeyspace:KeyspacesKeyspace":
                return new KeyspacesKeyspace(name, <any>undefined, { urn })
            case "aws:index/keyspacesTable:KeyspacesTable":
                return new KeyspacesTable(name, <any>undefined, { urn })
            case "aws:index/kinesisAnalyticsApplication:KinesisAnalyticsApplication":
                return new KinesisAnalyticsApplication(name, <any>undefined, { urn })
            case "aws:index/kinesisFirehoseDeliveryStream:KinesisFirehoseDeliveryStream":
                return new KinesisFirehoseDeliveryStream(name, <any>undefined, { urn })
            case "aws:index/kinesisResourcePolicy:KinesisResourcePolicy":
                return new KinesisResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/kinesisStream:KinesisStream":
                return new KinesisStream(name, <any>undefined, { urn })
            case "aws:index/kinesisStreamConsumer:KinesisStreamConsumer":
                return new KinesisStreamConsumer(name, <any>undefined, { urn })
            case "aws:index/kinesisVideoStream:KinesisVideoStream":
                return new KinesisVideoStream(name, <any>undefined, { urn })
            case "aws:index/kinesisanalyticsv2Application:Kinesisanalyticsv2Application":
                return new Kinesisanalyticsv2Application(name, <any>undefined, { urn })
            case "aws:index/kinesisanalyticsv2ApplicationSnapshot:Kinesisanalyticsv2ApplicationSnapshot":
                return new Kinesisanalyticsv2ApplicationSnapshot(name, <any>undefined, { urn })
            case "aws:index/kmsAlias:KmsAlias":
                return new KmsAlias(name, <any>undefined, { urn })
            case "aws:index/kmsCiphertext:KmsCiphertext":
                return new KmsCiphertext(name, <any>undefined, { urn })
            case "aws:index/kmsCustomKeyStore:KmsCustomKeyStore":
                return new KmsCustomKeyStore(name, <any>undefined, { urn })
            case "aws:index/kmsExternalKey:KmsExternalKey":
                return new KmsExternalKey(name, <any>undefined, { urn })
            case "aws:index/kmsGrant:KmsGrant":
                return new KmsGrant(name, <any>undefined, { urn })
            case "aws:index/kmsKey:KmsKey":
                return new KmsKey(name, <any>undefined, { urn })
            case "aws:index/kmsKeyPolicy:KmsKeyPolicy":
                return new KmsKeyPolicy(name, <any>undefined, { urn })
            case "aws:index/kmsReplicaExternalKey:KmsReplicaExternalKey":
                return new KmsReplicaExternalKey(name, <any>undefined, { urn })
            case "aws:index/kmsReplicaKey:KmsReplicaKey":
                return new KmsReplicaKey(name, <any>undefined, { urn })
            case "aws:index/lakeformationDataCellsFilter:LakeformationDataCellsFilter":
                return new LakeformationDataCellsFilter(name, <any>undefined, { urn })
            case "aws:index/lakeformationDataLakeSettings:LakeformationDataLakeSettings":
                return new LakeformationDataLakeSettings(name, <any>undefined, { urn })
            case "aws:index/lakeformationLfTag:LakeformationLfTag":
                return new LakeformationLfTag(name, <any>undefined, { urn })
            case "aws:index/lakeformationPermissions:LakeformationPermissions":
                return new LakeformationPermissions(name, <any>undefined, { urn })
            case "aws:index/lakeformationResource:LakeformationResource":
                return new LakeformationResource(name, <any>undefined, { urn })
            case "aws:index/lakeformationResourceLfTag:LakeformationResourceLfTag":
                return new LakeformationResourceLfTag(name, <any>undefined, { urn })
            case "aws:index/lakeformationResourceLfTags:LakeformationResourceLfTags":
                return new LakeformationResourceLfTags(name, <any>undefined, { urn })
            case "aws:index/lambdaAlias:LambdaAlias":
                return new LambdaAlias(name, <any>undefined, { urn })
            case "aws:index/lambdaCodeSigningConfig:LambdaCodeSigningConfig":
                return new LambdaCodeSigningConfig(name, <any>undefined, { urn })
            case "aws:index/lambdaEventSourceMapping:LambdaEventSourceMapping":
                return new LambdaEventSourceMapping(name, <any>undefined, { urn })
            case "aws:index/lambdaFunction:LambdaFunction":
                return new LambdaFunction(name, <any>undefined, { urn })
            case "aws:index/lambdaFunctionEventInvokeConfig:LambdaFunctionEventInvokeConfig":
                return new LambdaFunctionEventInvokeConfig(name, <any>undefined, { urn })
            case "aws:index/lambdaFunctionUrl:LambdaFunctionUrl":
                return new LambdaFunctionUrl(name, <any>undefined, { urn })
            case "aws:index/lambdaInvocation:LambdaInvocation":
                return new LambdaInvocation(name, <any>undefined, { urn })
            case "aws:index/lambdaLayerVersion:LambdaLayerVersion":
                return new LambdaLayerVersion(name, <any>undefined, { urn })
            case "aws:index/lambdaLayerVersionPermission:LambdaLayerVersionPermission":
                return new LambdaLayerVersionPermission(name, <any>undefined, { urn })
            case "aws:index/lambdaPermission:LambdaPermission":
                return new LambdaPermission(name, <any>undefined, { urn })
            case "aws:index/lambdaProvisionedConcurrencyConfig:LambdaProvisionedConcurrencyConfig":
                return new LambdaProvisionedConcurrencyConfig(name, <any>undefined, { urn })
            case "aws:index/lambdaRuntimeManagementConfig:LambdaRuntimeManagementConfig":
                return new LambdaRuntimeManagementConfig(name, <any>undefined, { urn })
            case "aws:index/launchConfiguration:LaunchConfiguration":
                return new LaunchConfiguration(name, <any>undefined, { urn })
            case "aws:index/launchTemplate:LaunchTemplate":
                return new LaunchTemplate(name, <any>undefined, { urn })
            case "aws:index/lb:Lb":
                return new Lb(name, <any>undefined, { urn })
            case "aws:index/lbCookieStickinessPolicy:LbCookieStickinessPolicy":
                return new LbCookieStickinessPolicy(name, <any>undefined, { urn })
            case "aws:index/lbListener:LbListener":
                return new LbListener(name, <any>undefined, { urn })
            case "aws:index/lbListenerCertificate:LbListenerCertificate":
                return new LbListenerCertificate(name, <any>undefined, { urn })
            case "aws:index/lbListenerRule:LbListenerRule":
                return new LbListenerRule(name, <any>undefined, { urn })
            case "aws:index/lbSslNegotiationPolicy:LbSslNegotiationPolicy":
                return new LbSslNegotiationPolicy(name, <any>undefined, { urn })
            case "aws:index/lbTargetGroup:LbTargetGroup":
                return new LbTargetGroup(name, <any>undefined, { urn })
            case "aws:index/lbTargetGroupAttachment:LbTargetGroupAttachment":
                return new LbTargetGroupAttachment(name, <any>undefined, { urn })
            case "aws:index/lbTrustStore:LbTrustStore":
                return new LbTrustStore(name, <any>undefined, { urn })
            case "aws:index/lbTrustStoreRevocation:LbTrustStoreRevocation":
                return new LbTrustStoreRevocation(name, <any>undefined, { urn })
            case "aws:index/lexBot:LexBot":
                return new LexBot(name, <any>undefined, { urn })
            case "aws:index/lexBotAlias:LexBotAlias":
                return new LexBotAlias(name, <any>undefined, { urn })
            case "aws:index/lexIntent:LexIntent":
                return new LexIntent(name, <any>undefined, { urn })
            case "aws:index/lexSlotType:LexSlotType":
                return new LexSlotType(name, <any>undefined, { urn })
            case "aws:index/lexv2modelsBot:Lexv2modelsBot":
                return new Lexv2modelsBot(name, <any>undefined, { urn })
            case "aws:index/lexv2modelsBotLocale:Lexv2modelsBotLocale":
                return new Lexv2modelsBotLocale(name, <any>undefined, { urn })
            case "aws:index/lexv2modelsBotVersion:Lexv2modelsBotVersion":
                return new Lexv2modelsBotVersion(name, <any>undefined, { urn })
            case "aws:index/lexv2modelsIntent:Lexv2modelsIntent":
                return new Lexv2modelsIntent(name, <any>undefined, { urn })
            case "aws:index/lexv2modelsSlot:Lexv2modelsSlot":
                return new Lexv2modelsSlot(name, <any>undefined, { urn })
            case "aws:index/lexv2modelsSlotType:Lexv2modelsSlotType":
                return new Lexv2modelsSlotType(name, <any>undefined, { urn })
            case "aws:index/licensemanagerAssociation:LicensemanagerAssociation":
                return new LicensemanagerAssociation(name, <any>undefined, { urn })
            case "aws:index/licensemanagerGrant:LicensemanagerGrant":
                return new LicensemanagerGrant(name, <any>undefined, { urn })
            case "aws:index/licensemanagerGrantAccepter:LicensemanagerGrantAccepter":
                return new LicensemanagerGrantAccepter(name, <any>undefined, { urn })
            case "aws:index/licensemanagerLicenseConfiguration:LicensemanagerLicenseConfiguration":
                return new LicensemanagerLicenseConfiguration(name, <any>undefined, { urn })
            case "aws:index/lightsailBucket:LightsailBucket":
                return new LightsailBucket(name, <any>undefined, { urn })
            case "aws:index/lightsailBucketAccessKey:LightsailBucketAccessKey":
                return new LightsailBucketAccessKey(name, <any>undefined, { urn })
            case "aws:index/lightsailBucketResourceAccess:LightsailBucketResourceAccess":
                return new LightsailBucketResourceAccess(name, <any>undefined, { urn })
            case "aws:index/lightsailCertificate:LightsailCertificate":
                return new LightsailCertificate(name, <any>undefined, { urn })
            case "aws:index/lightsailContainerService:LightsailContainerService":
                return new LightsailContainerService(name, <any>undefined, { urn })
            case "aws:index/lightsailContainerServiceDeploymentVersion:LightsailContainerServiceDeploymentVersion":
                return new LightsailContainerServiceDeploymentVersion(name, <any>undefined, { urn })
            case "aws:index/lightsailDatabase:LightsailDatabase":
                return new LightsailDatabase(name, <any>undefined, { urn })
            case "aws:index/lightsailDisk:LightsailDisk":
                return new LightsailDisk(name, <any>undefined, { urn })
            case "aws:index/lightsailDiskAttachment:LightsailDiskAttachment":
                return new LightsailDiskAttachment(name, <any>undefined, { urn })
            case "aws:index/lightsailDistribution:LightsailDistribution":
                return new LightsailDistribution(name, <any>undefined, { urn })
            case "aws:index/lightsailDomain:LightsailDomain":
                return new LightsailDomain(name, <any>undefined, { urn })
            case "aws:index/lightsailDomainEntry:LightsailDomainEntry":
                return new LightsailDomainEntry(name, <any>undefined, { urn })
            case "aws:index/lightsailInstance:LightsailInstance":
                return new LightsailInstance(name, <any>undefined, { urn })
            case "aws:index/lightsailInstancePublicPorts:LightsailInstancePublicPorts":
                return new LightsailInstancePublicPorts(name, <any>undefined, { urn })
            case "aws:index/lightsailKeyPair:LightsailKeyPair":
                return new LightsailKeyPair(name, <any>undefined, { urn })
            case "aws:index/lightsailLb:LightsailLb":
                return new LightsailLb(name, <any>undefined, { urn })
            case "aws:index/lightsailLbAttachment:LightsailLbAttachment":
                return new LightsailLbAttachment(name, <any>undefined, { urn })
            case "aws:index/lightsailLbCertificate:LightsailLbCertificate":
                return new LightsailLbCertificate(name, <any>undefined, { urn })
            case "aws:index/lightsailLbCertificateAttachment:LightsailLbCertificateAttachment":
                return new LightsailLbCertificateAttachment(name, <any>undefined, { urn })
            case "aws:index/lightsailLbHttpsRedirectionPolicy:LightsailLbHttpsRedirectionPolicy":
                return new LightsailLbHttpsRedirectionPolicy(name, <any>undefined, { urn })
            case "aws:index/lightsailLbStickinessPolicy:LightsailLbStickinessPolicy":
                return new LightsailLbStickinessPolicy(name, <any>undefined, { urn })
            case "aws:index/lightsailStaticIp:LightsailStaticIp":
                return new LightsailStaticIp(name, <any>undefined, { urn })
            case "aws:index/lightsailStaticIpAttachment:LightsailStaticIpAttachment":
                return new LightsailStaticIpAttachment(name, <any>undefined, { urn })
            case "aws:index/loadBalancerBackendServerPolicy:LoadBalancerBackendServerPolicy":
                return new LoadBalancerBackendServerPolicy(name, <any>undefined, { urn })
            case "aws:index/loadBalancerListenerPolicy:LoadBalancerListenerPolicy":
                return new LoadBalancerListenerPolicy(name, <any>undefined, { urn })
            case "aws:index/loadBalancerPolicy:LoadBalancerPolicy":
                return new LoadBalancerPolicy(name, <any>undefined, { urn })
            case "aws:index/locationGeofenceCollection:LocationGeofenceCollection":
                return new LocationGeofenceCollection(name, <any>undefined, { urn })
            case "aws:index/locationMap:LocationMap":
                return new LocationMap(name, <any>undefined, { urn })
            case "aws:index/locationPlaceIndex:LocationPlaceIndex":
                return new LocationPlaceIndex(name, <any>undefined, { urn })
            case "aws:index/locationRouteCalculator:LocationRouteCalculator":
                return new LocationRouteCalculator(name, <any>undefined, { urn })
            case "aws:index/locationTracker:LocationTracker":
                return new LocationTracker(name, <any>undefined, { urn })
            case "aws:index/locationTrackerAssociation:LocationTrackerAssociation":
                return new LocationTrackerAssociation(name, <any>undefined, { urn })
            case "aws:index/m2Application:M2Application":
                return new M2Application(name, <any>undefined, { urn })
            case "aws:index/m2Deployment:M2Deployment":
                return new M2Deployment(name, <any>undefined, { urn })
            case "aws:index/m2Environment:M2Environment":
                return new M2Environment(name, <any>undefined, { urn })
            case "aws:index/macie2Account:Macie2Account":
                return new Macie2Account(name, <any>undefined, { urn })
            case "aws:index/macie2ClassificationExportConfiguration:Macie2ClassificationExportConfiguration":
                return new Macie2ClassificationExportConfiguration(name, <any>undefined, { urn })
            case "aws:index/macie2ClassificationJob:Macie2ClassificationJob":
                return new Macie2ClassificationJob(name, <any>undefined, { urn })
            case "aws:index/macie2CustomDataIdentifier:Macie2CustomDataIdentifier":
                return new Macie2CustomDataIdentifier(name, <any>undefined, { urn })
            case "aws:index/macie2FindingsFilter:Macie2FindingsFilter":
                return new Macie2FindingsFilter(name, <any>undefined, { urn })
            case "aws:index/macie2InvitationAccepter:Macie2InvitationAccepter":
                return new Macie2InvitationAccepter(name, <any>undefined, { urn })
            case "aws:index/macie2Member:Macie2Member":
                return new Macie2Member(name, <any>undefined, { urn })
            case "aws:index/macie2OrganizationAdminAccount:Macie2OrganizationAdminAccount":
                return new Macie2OrganizationAdminAccount(name, <any>undefined, { urn })
            case "aws:index/mainRouteTableAssociation:MainRouteTableAssociation":
                return new MainRouteTableAssociation(name, <any>undefined, { urn })
            case "aws:index/mediaConvertQueue:MediaConvertQueue":
                return new MediaConvertQueue(name, <any>undefined, { urn })
            case "aws:index/mediaPackageChannel:MediaPackageChannel":
                return new MediaPackageChannel(name, <any>undefined, { urn })
            case "aws:index/mediaStoreContainer:MediaStoreContainer":
                return new MediaStoreContainer(name, <any>undefined, { urn })
            case "aws:index/mediaStoreContainerPolicy:MediaStoreContainerPolicy":
                return new MediaStoreContainerPolicy(name, <any>undefined, { urn })
            case "aws:index/medialiveChannel:MedialiveChannel":
                return new MedialiveChannel(name, <any>undefined, { urn })
            case "aws:index/medialiveInput:MedialiveInput":
                return new MedialiveInput(name, <any>undefined, { urn })
            case "aws:index/medialiveInputSecurityGroup:MedialiveInputSecurityGroup":
                return new MedialiveInputSecurityGroup(name, <any>undefined, { urn })
            case "aws:index/medialiveMultiplex:MedialiveMultiplex":
                return new MedialiveMultiplex(name, <any>undefined, { urn })
            case "aws:index/medialiveMultiplexProgram:MedialiveMultiplexProgram":
                return new MedialiveMultiplexProgram(name, <any>undefined, { urn })
            case "aws:index/memorydbAcl:MemorydbAcl":
                return new MemorydbAcl(name, <any>undefined, { urn })
            case "aws:index/memorydbCluster:MemorydbCluster":
                return new MemorydbCluster(name, <any>undefined, { urn })
            case "aws:index/memorydbParameterGroup:MemorydbParameterGroup":
                return new MemorydbParameterGroup(name, <any>undefined, { urn })
            case "aws:index/memorydbSnapshot:MemorydbSnapshot":
                return new MemorydbSnapshot(name, <any>undefined, { urn })
            case "aws:index/memorydbSubnetGroup:MemorydbSubnetGroup":
                return new MemorydbSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/memorydbUser:MemorydbUser":
                return new MemorydbUser(name, <any>undefined, { urn })
            case "aws:index/mqBroker:MqBroker":
                return new MqBroker(name, <any>undefined, { urn })
            case "aws:index/mqConfiguration:MqConfiguration":
                return new MqConfiguration(name, <any>undefined, { urn })
            case "aws:index/mskCluster:MskCluster":
                return new MskCluster(name, <any>undefined, { urn })
            case "aws:index/mskClusterPolicy:MskClusterPolicy":
                return new MskClusterPolicy(name, <any>undefined, { urn })
            case "aws:index/mskConfiguration:MskConfiguration":
                return new MskConfiguration(name, <any>undefined, { urn })
            case "aws:index/mskReplicator:MskReplicator":
                return new MskReplicator(name, <any>undefined, { urn })
            case "aws:index/mskScramSecretAssociation:MskScramSecretAssociation":
                return new MskScramSecretAssociation(name, <any>undefined, { urn })
            case "aws:index/mskServerlessCluster:MskServerlessCluster":
                return new MskServerlessCluster(name, <any>undefined, { urn })
            case "aws:index/mskVpcConnection:MskVpcConnection":
                return new MskVpcConnection(name, <any>undefined, { urn })
            case "aws:index/mskconnectConnector:MskconnectConnector":
                return new MskconnectConnector(name, <any>undefined, { urn })
            case "aws:index/mskconnectCustomPlugin:MskconnectCustomPlugin":
                return new MskconnectCustomPlugin(name, <any>undefined, { urn })
            case "aws:index/mskconnectWorkerConfiguration:MskconnectWorkerConfiguration":
                return new MskconnectWorkerConfiguration(name, <any>undefined, { urn })
            case "aws:index/mwaaEnvironment:MwaaEnvironment":
                return new MwaaEnvironment(name, <any>undefined, { urn })
            case "aws:index/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "aws:index/neptuneCluster:NeptuneCluster":
                return new NeptuneCluster(name, <any>undefined, { urn })
            case "aws:index/neptuneClusterEndpoint:NeptuneClusterEndpoint":
                return new NeptuneClusterEndpoint(name, <any>undefined, { urn })
            case "aws:index/neptuneClusterInstance:NeptuneClusterInstance":
                return new NeptuneClusterInstance(name, <any>undefined, { urn })
            case "aws:index/neptuneClusterParameterGroup:NeptuneClusterParameterGroup":
                return new NeptuneClusterParameterGroup(name, <any>undefined, { urn })
            case "aws:index/neptuneClusterSnapshot:NeptuneClusterSnapshot":
                return new NeptuneClusterSnapshot(name, <any>undefined, { urn })
            case "aws:index/neptuneEventSubscription:NeptuneEventSubscription":
                return new NeptuneEventSubscription(name, <any>undefined, { urn })
            case "aws:index/neptuneGlobalCluster:NeptuneGlobalCluster":
                return new NeptuneGlobalCluster(name, <any>undefined, { urn })
            case "aws:index/neptuneParameterGroup:NeptuneParameterGroup":
                return new NeptuneParameterGroup(name, <any>undefined, { urn })
            case "aws:index/neptuneSubnetGroup:NeptuneSubnetGroup":
                return new NeptuneSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/networkAcl:NetworkAcl":
                return new NetworkAcl(name, <any>undefined, { urn })
            case "aws:index/networkAclAssociation:NetworkAclAssociation":
                return new NetworkAclAssociation(name, <any>undefined, { urn })
            case "aws:index/networkAclRule:NetworkAclRule":
                return new NetworkAclRule(name, <any>undefined, { urn })
            case "aws:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "aws:index/networkInterfaceAttachment:NetworkInterfaceAttachment":
                return new NetworkInterfaceAttachment(name, <any>undefined, { urn })
            case "aws:index/networkInterfaceSgAttachment:NetworkInterfaceSgAttachment":
                return new NetworkInterfaceSgAttachment(name, <any>undefined, { urn })
            case "aws:index/networkfirewallFirewall:NetworkfirewallFirewall":
                return new NetworkfirewallFirewall(name, <any>undefined, { urn })
            case "aws:index/networkfirewallFirewallPolicy:NetworkfirewallFirewallPolicy":
                return new NetworkfirewallFirewallPolicy(name, <any>undefined, { urn })
            case "aws:index/networkfirewallLoggingConfiguration:NetworkfirewallLoggingConfiguration":
                return new NetworkfirewallLoggingConfiguration(name, <any>undefined, { urn })
            case "aws:index/networkfirewallResourcePolicy:NetworkfirewallResourcePolicy":
                return new NetworkfirewallResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/networkfirewallRuleGroup:NetworkfirewallRuleGroup":
                return new NetworkfirewallRuleGroup(name, <any>undefined, { urn })
            case "aws:index/networkfirewallTlsInspectionConfiguration:NetworkfirewallTlsInspectionConfiguration":
                return new NetworkfirewallTlsInspectionConfiguration(name, <any>undefined, { urn })
            case "aws:index/networkmanagerAttachmentAccepter:NetworkmanagerAttachmentAccepter":
                return new NetworkmanagerAttachmentAccepter(name, <any>undefined, { urn })
            case "aws:index/networkmanagerConnectAttachment:NetworkmanagerConnectAttachment":
                return new NetworkmanagerConnectAttachment(name, <any>undefined, { urn })
            case "aws:index/networkmanagerConnectPeer:NetworkmanagerConnectPeer":
                return new NetworkmanagerConnectPeer(name, <any>undefined, { urn })
            case "aws:index/networkmanagerConnection:NetworkmanagerConnection":
                return new NetworkmanagerConnection(name, <any>undefined, { urn })
            case "aws:index/networkmanagerCoreNetwork:NetworkmanagerCoreNetwork":
                return new NetworkmanagerCoreNetwork(name, <any>undefined, { urn })
            case "aws:index/networkmanagerCoreNetworkPolicyAttachment:NetworkmanagerCoreNetworkPolicyAttachment":
                return new NetworkmanagerCoreNetworkPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/networkmanagerCustomerGatewayAssociation:NetworkmanagerCustomerGatewayAssociation":
                return new NetworkmanagerCustomerGatewayAssociation(name, <any>undefined, { urn })
            case "aws:index/networkmanagerDevice:NetworkmanagerDevice":
                return new NetworkmanagerDevice(name, <any>undefined, { urn })
            case "aws:index/networkmanagerGlobalNetwork:NetworkmanagerGlobalNetwork":
                return new NetworkmanagerGlobalNetwork(name, <any>undefined, { urn })
            case "aws:index/networkmanagerLink:NetworkmanagerLink":
                return new NetworkmanagerLink(name, <any>undefined, { urn })
            case "aws:index/networkmanagerLinkAssociation:NetworkmanagerLinkAssociation":
                return new NetworkmanagerLinkAssociation(name, <any>undefined, { urn })
            case "aws:index/networkmanagerSite:NetworkmanagerSite":
                return new NetworkmanagerSite(name, <any>undefined, { urn })
            case "aws:index/networkmanagerSiteToSiteVpnAttachment:NetworkmanagerSiteToSiteVpnAttachment":
                return new NetworkmanagerSiteToSiteVpnAttachment(name, <any>undefined, { urn })
            case "aws:index/networkmanagerTransitGatewayConnectPeerAssociation:NetworkmanagerTransitGatewayConnectPeerAssociation":
                return new NetworkmanagerTransitGatewayConnectPeerAssociation(name, <any>undefined, { urn })
            case "aws:index/networkmanagerTransitGatewayPeering:NetworkmanagerTransitGatewayPeering":
                return new NetworkmanagerTransitGatewayPeering(name, <any>undefined, { urn })
            case "aws:index/networkmanagerTransitGatewayRegistration:NetworkmanagerTransitGatewayRegistration":
                return new NetworkmanagerTransitGatewayRegistration(name, <any>undefined, { urn })
            case "aws:index/networkmanagerTransitGatewayRouteTableAttachment:NetworkmanagerTransitGatewayRouteTableAttachment":
                return new NetworkmanagerTransitGatewayRouteTableAttachment(name, <any>undefined, { urn })
            case "aws:index/networkmanagerVpcAttachment:NetworkmanagerVpcAttachment":
                return new NetworkmanagerVpcAttachment(name, <any>undefined, { urn })
            case "aws:index/networkmonitorMonitor:NetworkmonitorMonitor":
                return new NetworkmonitorMonitor(name, <any>undefined, { urn })
            case "aws:index/networkmonitorProbe:NetworkmonitorProbe":
                return new NetworkmonitorProbe(name, <any>undefined, { urn })
            case "aws:index/oamLink:OamLink":
                return new OamLink(name, <any>undefined, { urn })
            case "aws:index/oamSink:OamSink":
                return new OamSink(name, <any>undefined, { urn })
            case "aws:index/oamSinkPolicy:OamSinkPolicy":
                return new OamSinkPolicy(name, <any>undefined, { urn })
            case "aws:index/opensearchDomain:OpensearchDomain":
                return new OpensearchDomain(name, <any>undefined, { urn })
            case "aws:index/opensearchDomainPolicy:OpensearchDomainPolicy":
                return new OpensearchDomainPolicy(name, <any>undefined, { urn })
            case "aws:index/opensearchDomainSamlOptions:OpensearchDomainSamlOptions":
                return new OpensearchDomainSamlOptions(name, <any>undefined, { urn })
            case "aws:index/opensearchInboundConnectionAccepter:OpensearchInboundConnectionAccepter":
                return new OpensearchInboundConnectionAccepter(name, <any>undefined, { urn })
            case "aws:index/opensearchOutboundConnection:OpensearchOutboundConnection":
                return new OpensearchOutboundConnection(name, <any>undefined, { urn })
            case "aws:index/opensearchPackage:OpensearchPackage":
                return new OpensearchPackage(name, <any>undefined, { urn })
            case "aws:index/opensearchPackageAssociation:OpensearchPackageAssociation":
                return new OpensearchPackageAssociation(name, <any>undefined, { urn })
            case "aws:index/opensearchVpcEndpoint:OpensearchVpcEndpoint":
                return new OpensearchVpcEndpoint(name, <any>undefined, { urn })
            case "aws:index/opensearchserverlessAccessPolicy:OpensearchserverlessAccessPolicy":
                return new OpensearchserverlessAccessPolicy(name, <any>undefined, { urn })
            case "aws:index/opensearchserverlessCollection:OpensearchserverlessCollection":
                return new OpensearchserverlessCollection(name, <any>undefined, { urn })
            case "aws:index/opensearchserverlessLifecyclePolicy:OpensearchserverlessLifecyclePolicy":
                return new OpensearchserverlessLifecyclePolicy(name, <any>undefined, { urn })
            case "aws:index/opensearchserverlessSecurityConfig:OpensearchserverlessSecurityConfig":
                return new OpensearchserverlessSecurityConfig(name, <any>undefined, { urn })
            case "aws:index/opensearchserverlessSecurityPolicy:OpensearchserverlessSecurityPolicy":
                return new OpensearchserverlessSecurityPolicy(name, <any>undefined, { urn })
            case "aws:index/opensearchserverlessVpcEndpoint:OpensearchserverlessVpcEndpoint":
                return new OpensearchserverlessVpcEndpoint(name, <any>undefined, { urn })
            case "aws:index/opsworksApplication:OpsworksApplication":
                return new OpsworksApplication(name, <any>undefined, { urn })
            case "aws:index/opsworksCustomLayer:OpsworksCustomLayer":
                return new OpsworksCustomLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksEcsClusterLayer:OpsworksEcsClusterLayer":
                return new OpsworksEcsClusterLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksGangliaLayer:OpsworksGangliaLayer":
                return new OpsworksGangliaLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksHaproxyLayer:OpsworksHaproxyLayer":
                return new OpsworksHaproxyLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksInstance:OpsworksInstance":
                return new OpsworksInstance(name, <any>undefined, { urn })
            case "aws:index/opsworksJavaAppLayer:OpsworksJavaAppLayer":
                return new OpsworksJavaAppLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksMemcachedLayer:OpsworksMemcachedLayer":
                return new OpsworksMemcachedLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksMysqlLayer:OpsworksMysqlLayer":
                return new OpsworksMysqlLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksNodejsAppLayer:OpsworksNodejsAppLayer":
                return new OpsworksNodejsAppLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksPermission:OpsworksPermission":
                return new OpsworksPermission(name, <any>undefined, { urn })
            case "aws:index/opsworksPhpAppLayer:OpsworksPhpAppLayer":
                return new OpsworksPhpAppLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksRailsAppLayer:OpsworksRailsAppLayer":
                return new OpsworksRailsAppLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksRdsDbInstance:OpsworksRdsDbInstance":
                return new OpsworksRdsDbInstance(name, <any>undefined, { urn })
            case "aws:index/opsworksStack:OpsworksStack":
                return new OpsworksStack(name, <any>undefined, { urn })
            case "aws:index/opsworksStaticWebLayer:OpsworksStaticWebLayer":
                return new OpsworksStaticWebLayer(name, <any>undefined, { urn })
            case "aws:index/opsworksUserProfile:OpsworksUserProfile":
                return new OpsworksUserProfile(name, <any>undefined, { urn })
            case "aws:index/organizationsAccount:OrganizationsAccount":
                return new OrganizationsAccount(name, <any>undefined, { urn })
            case "aws:index/organizationsDelegatedAdministrator:OrganizationsDelegatedAdministrator":
                return new OrganizationsDelegatedAdministrator(name, <any>undefined, { urn })
            case "aws:index/organizationsOrganization:OrganizationsOrganization":
                return new OrganizationsOrganization(name, <any>undefined, { urn })
            case "aws:index/organizationsOrganizationalUnit:OrganizationsOrganizationalUnit":
                return new OrganizationsOrganizationalUnit(name, <any>undefined, { urn })
            case "aws:index/organizationsPolicy:OrganizationsPolicy":
                return new OrganizationsPolicy(name, <any>undefined, { urn })
            case "aws:index/organizationsPolicyAttachment:OrganizationsPolicyAttachment":
                return new OrganizationsPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/organizationsResourcePolicy:OrganizationsResourcePolicy":
                return new OrganizationsResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/osisPipeline:OsisPipeline":
                return new OsisPipeline(name, <any>undefined, { urn })
            case "aws:index/paymentcryptographyKey:PaymentcryptographyKey":
                return new PaymentcryptographyKey(name, <any>undefined, { urn })
            case "aws:index/paymentcryptographyKeyAlias:PaymentcryptographyKeyAlias":
                return new PaymentcryptographyKeyAlias(name, <any>undefined, { urn })
            case "aws:index/pinpointAdmChannel:PinpointAdmChannel":
                return new PinpointAdmChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointApnsChannel:PinpointApnsChannel":
                return new PinpointApnsChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointApnsSandboxChannel:PinpointApnsSandboxChannel":
                return new PinpointApnsSandboxChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointApnsVoipChannel:PinpointApnsVoipChannel":
                return new PinpointApnsVoipChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointApnsVoipSandboxChannel:PinpointApnsVoipSandboxChannel":
                return new PinpointApnsVoipSandboxChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointApp:PinpointApp":
                return new PinpointApp(name, <any>undefined, { urn })
            case "aws:index/pinpointBaiduChannel:PinpointBaiduChannel":
                return new PinpointBaiduChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointEmailChannel:PinpointEmailChannel":
                return new PinpointEmailChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointEmailTemplate:PinpointEmailTemplate":
                return new PinpointEmailTemplate(name, <any>undefined, { urn })
            case "aws:index/pinpointEventStream:PinpointEventStream":
                return new PinpointEventStream(name, <any>undefined, { urn })
            case "aws:index/pinpointGcmChannel:PinpointGcmChannel":
                return new PinpointGcmChannel(name, <any>undefined, { urn })
            case "aws:index/pinpointSmsChannel:PinpointSmsChannel":
                return new PinpointSmsChannel(name, <any>undefined, { urn })
            case "aws:index/pipesPipe:PipesPipe":
                return new PipesPipe(name, <any>undefined, { urn })
            case "aws:index/placementGroup:PlacementGroup":
                return new PlacementGroup(name, <any>undefined, { urn })
            case "aws:index/prometheusAlertManagerDefinition:PrometheusAlertManagerDefinition":
                return new PrometheusAlertManagerDefinition(name, <any>undefined, { urn })
            case "aws:index/prometheusRuleGroupNamespace:PrometheusRuleGroupNamespace":
                return new PrometheusRuleGroupNamespace(name, <any>undefined, { urn })
            case "aws:index/prometheusScraper:PrometheusScraper":
                return new PrometheusScraper(name, <any>undefined, { urn })
            case "aws:index/prometheusWorkspace:PrometheusWorkspace":
                return new PrometheusWorkspace(name, <any>undefined, { urn })
            case "aws:index/proxyProtocolPolicy:ProxyProtocolPolicy":
                return new ProxyProtocolPolicy(name, <any>undefined, { urn })
            case "aws:index/qldbLedger:QldbLedger":
                return new QldbLedger(name, <any>undefined, { urn })
            case "aws:index/qldbStream:QldbStream":
                return new QldbStream(name, <any>undefined, { urn })
            case "aws:index/quicksightAccountSubscription:QuicksightAccountSubscription":
                return new QuicksightAccountSubscription(name, <any>undefined, { urn })
            case "aws:index/quicksightAnalysis:QuicksightAnalysis":
                return new QuicksightAnalysis(name, <any>undefined, { urn })
            case "aws:index/quicksightDashboard:QuicksightDashboard":
                return new QuicksightDashboard(name, <any>undefined, { urn })
            case "aws:index/quicksightDataSet:QuicksightDataSet":
                return new QuicksightDataSet(name, <any>undefined, { urn })
            case "aws:index/quicksightDataSource:QuicksightDataSource":
                return new QuicksightDataSource(name, <any>undefined, { urn })
            case "aws:index/quicksightFolder:QuicksightFolder":
                return new QuicksightFolder(name, <any>undefined, { urn })
            case "aws:index/quicksightFolderMembership:QuicksightFolderMembership":
                return new QuicksightFolderMembership(name, <any>undefined, { urn })
            case "aws:index/quicksightGroup:QuicksightGroup":
                return new QuicksightGroup(name, <any>undefined, { urn })
            case "aws:index/quicksightGroupMembership:QuicksightGroupMembership":
                return new QuicksightGroupMembership(name, <any>undefined, { urn })
            case "aws:index/quicksightIamPolicyAssignment:QuicksightIamPolicyAssignment":
                return new QuicksightIamPolicyAssignment(name, <any>undefined, { urn })
            case "aws:index/quicksightIngestion:QuicksightIngestion":
                return new QuicksightIngestion(name, <any>undefined, { urn })
            case "aws:index/quicksightNamespace:QuicksightNamespace":
                return new QuicksightNamespace(name, <any>undefined, { urn })
            case "aws:index/quicksightRefreshSchedule:QuicksightRefreshSchedule":
                return new QuicksightRefreshSchedule(name, <any>undefined, { urn })
            case "aws:index/quicksightTemplate:QuicksightTemplate":
                return new QuicksightTemplate(name, <any>undefined, { urn })
            case "aws:index/quicksightTemplateAlias:QuicksightTemplateAlias":
                return new QuicksightTemplateAlias(name, <any>undefined, { urn })
            case "aws:index/quicksightTheme:QuicksightTheme":
                return new QuicksightTheme(name, <any>undefined, { urn })
            case "aws:index/quicksightUser:QuicksightUser":
                return new QuicksightUser(name, <any>undefined, { urn })
            case "aws:index/quicksightVpcConnection:QuicksightVpcConnection":
                return new QuicksightVpcConnection(name, <any>undefined, { urn })
            case "aws:index/ramPrincipalAssociation:RamPrincipalAssociation":
                return new RamPrincipalAssociation(name, <any>undefined, { urn })
            case "aws:index/ramResourceAssociation:RamResourceAssociation":
                return new RamResourceAssociation(name, <any>undefined, { urn })
            case "aws:index/ramResourceShare:RamResourceShare":
                return new RamResourceShare(name, <any>undefined, { urn })
            case "aws:index/ramResourceShareAccepter:RamResourceShareAccepter":
                return new RamResourceShareAccepter(name, <any>undefined, { urn })
            case "aws:index/ramSharingWithOrganization:RamSharingWithOrganization":
                return new RamSharingWithOrganization(name, <any>undefined, { urn })
            case "aws:index/rbinRule:RbinRule":
                return new RbinRule(name, <any>undefined, { urn })
            case "aws:index/rdsCertificate:RdsCertificate":
                return new RdsCertificate(name, <any>undefined, { urn })
            case "aws:index/rdsCluster:RdsCluster":
                return new RdsCluster(name, <any>undefined, { urn })
            case "aws:index/rdsClusterActivityStream:RdsClusterActivityStream":
                return new RdsClusterActivityStream(name, <any>undefined, { urn })
            case "aws:index/rdsClusterEndpoint:RdsClusterEndpoint":
                return new RdsClusterEndpoint(name, <any>undefined, { urn })
            case "aws:index/rdsClusterInstance:RdsClusterInstance":
                return new RdsClusterInstance(name, <any>undefined, { urn })
            case "aws:index/rdsClusterParameterGroup:RdsClusterParameterGroup":
                return new RdsClusterParameterGroup(name, <any>undefined, { urn })
            case "aws:index/rdsClusterRoleAssociation:RdsClusterRoleAssociation":
                return new RdsClusterRoleAssociation(name, <any>undefined, { urn })
            case "aws:index/rdsCustomDbEngineVersion:RdsCustomDbEngineVersion":
                return new RdsCustomDbEngineVersion(name, <any>undefined, { urn })
            case "aws:index/rdsExportTask:RdsExportTask":
                return new RdsExportTask(name, <any>undefined, { urn })
            case "aws:index/rdsGlobalCluster:RdsGlobalCluster":
                return new RdsGlobalCluster(name, <any>undefined, { urn })
            case "aws:index/rdsIntegration:RdsIntegration":
                return new RdsIntegration(name, <any>undefined, { urn })
            case "aws:index/rdsReservedInstance:RdsReservedInstance":
                return new RdsReservedInstance(name, <any>undefined, { urn })
            case "aws:index/redshiftAuthenticationProfile:RedshiftAuthenticationProfile":
                return new RedshiftAuthenticationProfile(name, <any>undefined, { urn })
            case "aws:index/redshiftCluster:RedshiftCluster":
                return new RedshiftCluster(name, <any>undefined, { urn })
            case "aws:index/redshiftClusterIamRoles:RedshiftClusterIamRoles":
                return new RedshiftClusterIamRoles(name, <any>undefined, { urn })
            case "aws:index/redshiftClusterSnapshot:RedshiftClusterSnapshot":
                return new RedshiftClusterSnapshot(name, <any>undefined, { urn })
            case "aws:index/redshiftDataShareAuthorization:RedshiftDataShareAuthorization":
                return new RedshiftDataShareAuthorization(name, <any>undefined, { urn })
            case "aws:index/redshiftDataShareConsumerAssociation:RedshiftDataShareConsumerAssociation":
                return new RedshiftDataShareConsumerAssociation(name, <any>undefined, { urn })
            case "aws:index/redshiftEndpointAccess:RedshiftEndpointAccess":
                return new RedshiftEndpointAccess(name, <any>undefined, { urn })
            case "aws:index/redshiftEndpointAuthorization:RedshiftEndpointAuthorization":
                return new RedshiftEndpointAuthorization(name, <any>undefined, { urn })
            case "aws:index/redshiftEventSubscription:RedshiftEventSubscription":
                return new RedshiftEventSubscription(name, <any>undefined, { urn })
            case "aws:index/redshiftHsmClientCertificate:RedshiftHsmClientCertificate":
                return new RedshiftHsmClientCertificate(name, <any>undefined, { urn })
            case "aws:index/redshiftHsmConfiguration:RedshiftHsmConfiguration":
                return new RedshiftHsmConfiguration(name, <any>undefined, { urn })
            case "aws:index/redshiftLogging:RedshiftLogging":
                return new RedshiftLogging(name, <any>undefined, { urn })
            case "aws:index/redshiftParameterGroup:RedshiftParameterGroup":
                return new RedshiftParameterGroup(name, <any>undefined, { urn })
            case "aws:index/redshiftPartner:RedshiftPartner":
                return new RedshiftPartner(name, <any>undefined, { urn })
            case "aws:index/redshiftResourcePolicy:RedshiftResourcePolicy":
                return new RedshiftResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/redshiftScheduledAction:RedshiftScheduledAction":
                return new RedshiftScheduledAction(name, <any>undefined, { urn })
            case "aws:index/redshiftSnapshotCopy:RedshiftSnapshotCopy":
                return new RedshiftSnapshotCopy(name, <any>undefined, { urn })
            case "aws:index/redshiftSnapshotCopyGrant:RedshiftSnapshotCopyGrant":
                return new RedshiftSnapshotCopyGrant(name, <any>undefined, { urn })
            case "aws:index/redshiftSnapshotSchedule:RedshiftSnapshotSchedule":
                return new RedshiftSnapshotSchedule(name, <any>undefined, { urn })
            case "aws:index/redshiftSnapshotScheduleAssociation:RedshiftSnapshotScheduleAssociation":
                return new RedshiftSnapshotScheduleAssociation(name, <any>undefined, { urn })
            case "aws:index/redshiftSubnetGroup:RedshiftSubnetGroup":
                return new RedshiftSubnetGroup(name, <any>undefined, { urn })
            case "aws:index/redshiftUsageLimit:RedshiftUsageLimit":
                return new RedshiftUsageLimit(name, <any>undefined, { urn })
            case "aws:index/redshiftdataStatement:RedshiftdataStatement":
                return new RedshiftdataStatement(name, <any>undefined, { urn })
            case "aws:index/redshiftserverlessCustomDomainAssociation:RedshiftserverlessCustomDomainAssociation":
                return new RedshiftserverlessCustomDomainAssociation(name, <any>undefined, { urn })
            case "aws:index/redshiftserverlessEndpointAccess:RedshiftserverlessEndpointAccess":
                return new RedshiftserverlessEndpointAccess(name, <any>undefined, { urn })
            case "aws:index/redshiftserverlessNamespace:RedshiftserverlessNamespace":
                return new RedshiftserverlessNamespace(name, <any>undefined, { urn })
            case "aws:index/redshiftserverlessResourcePolicy:RedshiftserverlessResourcePolicy":
                return new RedshiftserverlessResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/redshiftserverlessSnapshot:RedshiftserverlessSnapshot":
                return new RedshiftserverlessSnapshot(name, <any>undefined, { urn })
            case "aws:index/redshiftserverlessUsageLimit:RedshiftserverlessUsageLimit":
                return new RedshiftserverlessUsageLimit(name, <any>undefined, { urn })
            case "aws:index/redshiftserverlessWorkgroup:RedshiftserverlessWorkgroup":
                return new RedshiftserverlessWorkgroup(name, <any>undefined, { urn })
            case "aws:index/rekognitionCollection:RekognitionCollection":
                return new RekognitionCollection(name, <any>undefined, { urn })
            case "aws:index/rekognitionProject:RekognitionProject":
                return new RekognitionProject(name, <any>undefined, { urn })
            case "aws:index/rekognitionStreamProcessor:RekognitionStreamProcessor":
                return new RekognitionStreamProcessor(name, <any>undefined, { urn })
            case "aws:index/resourceexplorer2Index:Resourceexplorer2Index":
                return new Resourceexplorer2Index(name, <any>undefined, { urn })
            case "aws:index/resourceexplorer2View:Resourceexplorer2View":
                return new Resourceexplorer2View(name, <any>undefined, { urn })
            case "aws:index/resourcegroupsGroup:ResourcegroupsGroup":
                return new ResourcegroupsGroup(name, <any>undefined, { urn })
            case "aws:index/resourcegroupsResource:ResourcegroupsResource":
                return new ResourcegroupsResource(name, <any>undefined, { urn })
            case "aws:index/rolesanywhereProfile:RolesanywhereProfile":
                return new RolesanywhereProfile(name, <any>undefined, { urn })
            case "aws:index/rolesanywhereTrustAnchor:RolesanywhereTrustAnchor":
                return new RolesanywhereTrustAnchor(name, <any>undefined, { urn })
            case "aws:index/route53CidrCollection:Route53CidrCollection":
                return new Route53CidrCollection(name, <any>undefined, { urn })
            case "aws:index/route53CidrLocation:Route53CidrLocation":
                return new Route53CidrLocation(name, <any>undefined, { urn })
            case "aws:index/route53DelegationSet:Route53DelegationSet":
                return new Route53DelegationSet(name, <any>undefined, { urn })
            case "aws:index/route53HealthCheck:Route53HealthCheck":
                return new Route53HealthCheck(name, <any>undefined, { urn })
            case "aws:index/route53HostedZoneDnssec:Route53HostedZoneDnssec":
                return new Route53HostedZoneDnssec(name, <any>undefined, { urn })
            case "aws:index/route53KeySigningKey:Route53KeySigningKey":
                return new Route53KeySigningKey(name, <any>undefined, { urn })
            case "aws:index/route53QueryLog:Route53QueryLog":
                return new Route53QueryLog(name, <any>undefined, { urn })
            case "aws:index/route53Record:Route53Record":
                return new Route53Record(name, <any>undefined, { urn })
            case "aws:index/route53ResolverConfig:Route53ResolverConfig":
                return new Route53ResolverConfig(name, <any>undefined, { urn })
            case "aws:index/route53ResolverDnssecConfig:Route53ResolverDnssecConfig":
                return new Route53ResolverDnssecConfig(name, <any>undefined, { urn })
            case "aws:index/route53ResolverEndpoint:Route53ResolverEndpoint":
                return new Route53ResolverEndpoint(name, <any>undefined, { urn })
            case "aws:index/route53ResolverFirewallConfig:Route53ResolverFirewallConfig":
                return new Route53ResolverFirewallConfig(name, <any>undefined, { urn })
            case "aws:index/route53ResolverFirewallDomainList:Route53ResolverFirewallDomainList":
                return new Route53ResolverFirewallDomainList(name, <any>undefined, { urn })
            case "aws:index/route53ResolverFirewallRule:Route53ResolverFirewallRule":
                return new Route53ResolverFirewallRule(name, <any>undefined, { urn })
            case "aws:index/route53ResolverFirewallRuleGroup:Route53ResolverFirewallRuleGroup":
                return new Route53ResolverFirewallRuleGroup(name, <any>undefined, { urn })
            case "aws:index/route53ResolverFirewallRuleGroupAssociation:Route53ResolverFirewallRuleGroupAssociation":
                return new Route53ResolverFirewallRuleGroupAssociation(name, <any>undefined, { urn })
            case "aws:index/route53ResolverQueryLogConfig:Route53ResolverQueryLogConfig":
                return new Route53ResolverQueryLogConfig(name, <any>undefined, { urn })
            case "aws:index/route53ResolverQueryLogConfigAssociation:Route53ResolverQueryLogConfigAssociation":
                return new Route53ResolverQueryLogConfigAssociation(name, <any>undefined, { urn })
            case "aws:index/route53ResolverRule:Route53ResolverRule":
                return new Route53ResolverRule(name, <any>undefined, { urn })
            case "aws:index/route53ResolverRuleAssociation:Route53ResolverRuleAssociation":
                return new Route53ResolverRuleAssociation(name, <any>undefined, { urn })
            case "aws:index/route53TrafficPolicy:Route53TrafficPolicy":
                return new Route53TrafficPolicy(name, <any>undefined, { urn })
            case "aws:index/route53TrafficPolicyInstance:Route53TrafficPolicyInstance":
                return new Route53TrafficPolicyInstance(name, <any>undefined, { urn })
            case "aws:index/route53VpcAssociationAuthorization:Route53VpcAssociationAuthorization":
                return new Route53VpcAssociationAuthorization(name, <any>undefined, { urn })
            case "aws:index/route53Zone:Route53Zone":
                return new Route53Zone(name, <any>undefined, { urn })
            case "aws:index/route53ZoneAssociation:Route53ZoneAssociation":
                return new Route53ZoneAssociation(name, <any>undefined, { urn })
            case "aws:index/route53domainsDelegationSignerRecord:Route53domainsDelegationSignerRecord":
                return new Route53domainsDelegationSignerRecord(name, <any>undefined, { urn })
            case "aws:index/route53domainsRegisteredDomain:Route53domainsRegisteredDomain":
                return new Route53domainsRegisteredDomain(name, <any>undefined, { urn })
            case "aws:index/route53recoverycontrolconfigCluster:Route53recoverycontrolconfigCluster":
                return new Route53recoverycontrolconfigCluster(name, <any>undefined, { urn })
            case "aws:index/route53recoverycontrolconfigControlPanel:Route53recoverycontrolconfigControlPanel":
                return new Route53recoverycontrolconfigControlPanel(name, <any>undefined, { urn })
            case "aws:index/route53recoverycontrolconfigRoutingControl:Route53recoverycontrolconfigRoutingControl":
                return new Route53recoverycontrolconfigRoutingControl(name, <any>undefined, { urn })
            case "aws:index/route53recoverycontrolconfigSafetyRule:Route53recoverycontrolconfigSafetyRule":
                return new Route53recoverycontrolconfigSafetyRule(name, <any>undefined, { urn })
            case "aws:index/route53recoveryreadinessCell:Route53recoveryreadinessCell":
                return new Route53recoveryreadinessCell(name, <any>undefined, { urn })
            case "aws:index/route53recoveryreadinessReadinessCheck:Route53recoveryreadinessReadinessCheck":
                return new Route53recoveryreadinessReadinessCheck(name, <any>undefined, { urn })
            case "aws:index/route53recoveryreadinessRecoveryGroup:Route53recoveryreadinessRecoveryGroup":
                return new Route53recoveryreadinessRecoveryGroup(name, <any>undefined, { urn })
            case "aws:index/route53recoveryreadinessResourceSet:Route53recoveryreadinessResourceSet":
                return new Route53recoveryreadinessResourceSet(name, <any>undefined, { urn })
            case "aws:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "aws:index/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "aws:index/routeTableAssociation:RouteTableAssociation":
                return new RouteTableAssociation(name, <any>undefined, { urn })
            case "aws:index/rumAppMonitor:RumAppMonitor":
                return new RumAppMonitor(name, <any>undefined, { urn })
            case "aws:index/rumMetricsDestination:RumMetricsDestination":
                return new RumMetricsDestination(name, <any>undefined, { urn })
            case "aws:index/s3AccessPoint:S3AccessPoint":
                return new S3AccessPoint(name, <any>undefined, { urn })
            case "aws:index/s3AccountPublicAccessBlock:S3AccountPublicAccessBlock":
                return new S3AccountPublicAccessBlock(name, <any>undefined, { urn })
            case "aws:index/s3Bucket:S3Bucket":
                return new S3Bucket(name, <any>undefined, { urn })
            case "aws:index/s3BucketAccelerateConfiguration:S3BucketAccelerateConfiguration":
                return new S3BucketAccelerateConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketAcl:S3BucketAcl":
                return new S3BucketAcl(name, <any>undefined, { urn })
            case "aws:index/s3BucketAnalyticsConfiguration:S3BucketAnalyticsConfiguration":
                return new S3BucketAnalyticsConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketCorsConfiguration:S3BucketCorsConfiguration":
                return new S3BucketCorsConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketIntelligentTieringConfiguration:S3BucketIntelligentTieringConfiguration":
                return new S3BucketIntelligentTieringConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketInventory:S3BucketInventory":
                return new S3BucketInventory(name, <any>undefined, { urn })
            case "aws:index/s3BucketLifecycleConfiguration:S3BucketLifecycleConfiguration":
                return new S3BucketLifecycleConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketLogging:S3BucketLogging":
                return new S3BucketLogging(name, <any>undefined, { urn })
            case "aws:index/s3BucketMetric:S3BucketMetric":
                return new S3BucketMetric(name, <any>undefined, { urn })
            case "aws:index/s3BucketNotification:S3BucketNotification":
                return new S3BucketNotification(name, <any>undefined, { urn })
            case "aws:index/s3BucketObject:S3BucketObject":
                return new S3BucketObject(name, <any>undefined, { urn })
            case "aws:index/s3BucketObjectLockConfiguration:S3BucketObjectLockConfiguration":
                return new S3BucketObjectLockConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketOwnershipControls:S3BucketOwnershipControls":
                return new S3BucketOwnershipControls(name, <any>undefined, { urn })
            case "aws:index/s3BucketPolicy:S3BucketPolicy":
                return new S3BucketPolicy(name, <any>undefined, { urn })
            case "aws:index/s3BucketPublicAccessBlock:S3BucketPublicAccessBlock":
                return new S3BucketPublicAccessBlock(name, <any>undefined, { urn })
            case "aws:index/s3BucketReplicationConfiguration:S3BucketReplicationConfiguration":
                return new S3BucketReplicationConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketRequestPaymentConfiguration:S3BucketRequestPaymentConfiguration":
                return new S3BucketRequestPaymentConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketServerSideEncryptionConfiguration:S3BucketServerSideEncryptionConfiguration":
                return new S3BucketServerSideEncryptionConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3BucketVersioning:S3BucketVersioning":
                return new S3BucketVersioning(name, <any>undefined, { urn })
            case "aws:index/s3BucketWebsiteConfiguration:S3BucketWebsiteConfiguration":
                return new S3BucketWebsiteConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3DirectoryBucket:S3DirectoryBucket":
                return new S3DirectoryBucket(name, <any>undefined, { urn })
            case "aws:index/s3Object:S3Object":
                return new S3Object(name, <any>undefined, { urn })
            case "aws:index/s3ObjectCopy:S3ObjectCopy":
                return new S3ObjectCopy(name, <any>undefined, { urn })
            case "aws:index/s3controlAccessGrant:S3controlAccessGrant":
                return new S3controlAccessGrant(name, <any>undefined, { urn })
            case "aws:index/s3controlAccessGrantsInstance:S3controlAccessGrantsInstance":
                return new S3controlAccessGrantsInstance(name, <any>undefined, { urn })
            case "aws:index/s3controlAccessGrantsInstanceResourcePolicy:S3controlAccessGrantsInstanceResourcePolicy":
                return new S3controlAccessGrantsInstanceResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/s3controlAccessGrantsLocation:S3controlAccessGrantsLocation":
                return new S3controlAccessGrantsLocation(name, <any>undefined, { urn })
            case "aws:index/s3controlAccessPointPolicy:S3controlAccessPointPolicy":
                return new S3controlAccessPointPolicy(name, <any>undefined, { urn })
            case "aws:index/s3controlBucket:S3controlBucket":
                return new S3controlBucket(name, <any>undefined, { urn })
            case "aws:index/s3controlBucketLifecycleConfiguration:S3controlBucketLifecycleConfiguration":
                return new S3controlBucketLifecycleConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3controlBucketPolicy:S3controlBucketPolicy":
                return new S3controlBucketPolicy(name, <any>undefined, { urn })
            case "aws:index/s3controlMultiRegionAccessPoint:S3controlMultiRegionAccessPoint":
                return new S3controlMultiRegionAccessPoint(name, <any>undefined, { urn })
            case "aws:index/s3controlMultiRegionAccessPointPolicy:S3controlMultiRegionAccessPointPolicy":
                return new S3controlMultiRegionAccessPointPolicy(name, <any>undefined, { urn })
            case "aws:index/s3controlObjectLambdaAccessPoint:S3controlObjectLambdaAccessPoint":
                return new S3controlObjectLambdaAccessPoint(name, <any>undefined, { urn })
            case "aws:index/s3controlObjectLambdaAccessPointPolicy:S3controlObjectLambdaAccessPointPolicy":
                return new S3controlObjectLambdaAccessPointPolicy(name, <any>undefined, { urn })
            case "aws:index/s3controlStorageLensConfiguration:S3controlStorageLensConfiguration":
                return new S3controlStorageLensConfiguration(name, <any>undefined, { urn })
            case "aws:index/s3outpostsEndpoint:S3outpostsEndpoint":
                return new S3outpostsEndpoint(name, <any>undefined, { urn })
            case "aws:index/sagemakerApp:SagemakerApp":
                return new SagemakerApp(name, <any>undefined, { urn })
            case "aws:index/sagemakerAppImageConfig:SagemakerAppImageConfig":
                return new SagemakerAppImageConfig(name, <any>undefined, { urn })
            case "aws:index/sagemakerCodeRepository:SagemakerCodeRepository":
                return new SagemakerCodeRepository(name, <any>undefined, { urn })
            case "aws:index/sagemakerDataQualityJobDefinition:SagemakerDataQualityJobDefinition":
                return new SagemakerDataQualityJobDefinition(name, <any>undefined, { urn })
            case "aws:index/sagemakerDevice:SagemakerDevice":
                return new SagemakerDevice(name, <any>undefined, { urn })
            case "aws:index/sagemakerDeviceFleet:SagemakerDeviceFleet":
                return new SagemakerDeviceFleet(name, <any>undefined, { urn })
            case "aws:index/sagemakerDomain:SagemakerDomain":
                return new SagemakerDomain(name, <any>undefined, { urn })
            case "aws:index/sagemakerEndpoint:SagemakerEndpoint":
                return new SagemakerEndpoint(name, <any>undefined, { urn })
            case "aws:index/sagemakerEndpointConfiguration:SagemakerEndpointConfiguration":
                return new SagemakerEndpointConfiguration(name, <any>undefined, { urn })
            case "aws:index/sagemakerFeatureGroup:SagemakerFeatureGroup":
                return new SagemakerFeatureGroup(name, <any>undefined, { urn })
            case "aws:index/sagemakerFlowDefinition:SagemakerFlowDefinition":
                return new SagemakerFlowDefinition(name, <any>undefined, { urn })
            case "aws:index/sagemakerHumanTaskUi:SagemakerHumanTaskUi":
                return new SagemakerHumanTaskUi(name, <any>undefined, { urn })
            case "aws:index/sagemakerImage:SagemakerImage":
                return new SagemakerImage(name, <any>undefined, { urn })
            case "aws:index/sagemakerImageVersion:SagemakerImageVersion":
                return new SagemakerImageVersion(name, <any>undefined, { urn })
            case "aws:index/sagemakerModel:SagemakerModel":
                return new SagemakerModel(name, <any>undefined, { urn })
            case "aws:index/sagemakerModelPackageGroup:SagemakerModelPackageGroup":
                return new SagemakerModelPackageGroup(name, <any>undefined, { urn })
            case "aws:index/sagemakerModelPackageGroupPolicy:SagemakerModelPackageGroupPolicy":
                return new SagemakerModelPackageGroupPolicy(name, <any>undefined, { urn })
            case "aws:index/sagemakerMonitoringSchedule:SagemakerMonitoringSchedule":
                return new SagemakerMonitoringSchedule(name, <any>undefined, { urn })
            case "aws:index/sagemakerNotebookInstance:SagemakerNotebookInstance":
                return new SagemakerNotebookInstance(name, <any>undefined, { urn })
            case "aws:index/sagemakerNotebookInstanceLifecycleConfiguration:SagemakerNotebookInstanceLifecycleConfiguration":
                return new SagemakerNotebookInstanceLifecycleConfiguration(name, <any>undefined, { urn })
            case "aws:index/sagemakerPipeline:SagemakerPipeline":
                return new SagemakerPipeline(name, <any>undefined, { urn })
            case "aws:index/sagemakerProject:SagemakerProject":
                return new SagemakerProject(name, <any>undefined, { urn })
            case "aws:index/sagemakerServicecatalogPortfolioStatus:SagemakerServicecatalogPortfolioStatus":
                return new SagemakerServicecatalogPortfolioStatus(name, <any>undefined, { urn })
            case "aws:index/sagemakerSpace:SagemakerSpace":
                return new SagemakerSpace(name, <any>undefined, { urn })
            case "aws:index/sagemakerStudioLifecycleConfig:SagemakerStudioLifecycleConfig":
                return new SagemakerStudioLifecycleConfig(name, <any>undefined, { urn })
            case "aws:index/sagemakerUserProfile:SagemakerUserProfile":
                return new SagemakerUserProfile(name, <any>undefined, { urn })
            case "aws:index/sagemakerWorkforce:SagemakerWorkforce":
                return new SagemakerWorkforce(name, <any>undefined, { urn })
            case "aws:index/sagemakerWorkteam:SagemakerWorkteam":
                return new SagemakerWorkteam(name, <any>undefined, { urn })
            case "aws:index/schedulerSchedule:SchedulerSchedule":
                return new SchedulerSchedule(name, <any>undefined, { urn })
            case "aws:index/schedulerScheduleGroup:SchedulerScheduleGroup":
                return new SchedulerScheduleGroup(name, <any>undefined, { urn })
            case "aws:index/schemasDiscoverer:SchemasDiscoverer":
                return new SchemasDiscoverer(name, <any>undefined, { urn })
            case "aws:index/schemasRegistry:SchemasRegistry":
                return new SchemasRegistry(name, <any>undefined, { urn })
            case "aws:index/schemasRegistryPolicy:SchemasRegistryPolicy":
                return new SchemasRegistryPolicy(name, <any>undefined, { urn })
            case "aws:index/schemasSchema:SchemasSchema":
                return new SchemasSchema(name, <any>undefined, { urn })
            case "aws:index/secretsmanagerSecret:SecretsmanagerSecret":
                return new SecretsmanagerSecret(name, <any>undefined, { urn })
            case "aws:index/secretsmanagerSecretPolicy:SecretsmanagerSecretPolicy":
                return new SecretsmanagerSecretPolicy(name, <any>undefined, { urn })
            case "aws:index/secretsmanagerSecretRotation:SecretsmanagerSecretRotation":
                return new SecretsmanagerSecretRotation(name, <any>undefined, { urn })
            case "aws:index/secretsmanagerSecretVersion:SecretsmanagerSecretVersion":
                return new SecretsmanagerSecretVersion(name, <any>undefined, { urn })
            case "aws:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "aws:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "aws:index/securityhubAccount:SecurityhubAccount":
                return new SecurityhubAccount(name, <any>undefined, { urn })
            case "aws:index/securityhubActionTarget:SecurityhubActionTarget":
                return new SecurityhubActionTarget(name, <any>undefined, { urn })
            case "aws:index/securityhubAutomationRule:SecurityhubAutomationRule":
                return new SecurityhubAutomationRule(name, <any>undefined, { urn })
            case "aws:index/securityhubConfigurationPolicy:SecurityhubConfigurationPolicy":
                return new SecurityhubConfigurationPolicy(name, <any>undefined, { urn })
            case "aws:index/securityhubConfigurationPolicyAssociation:SecurityhubConfigurationPolicyAssociation":
                return new SecurityhubConfigurationPolicyAssociation(name, <any>undefined, { urn })
            case "aws:index/securityhubFindingAggregator:SecurityhubFindingAggregator":
                return new SecurityhubFindingAggregator(name, <any>undefined, { urn })
            case "aws:index/securityhubInsight:SecurityhubInsight":
                return new SecurityhubInsight(name, <any>undefined, { urn })
            case "aws:index/securityhubInviteAccepter:SecurityhubInviteAccepter":
                return new SecurityhubInviteAccepter(name, <any>undefined, { urn })
            case "aws:index/securityhubMember:SecurityhubMember":
                return new SecurityhubMember(name, <any>undefined, { urn })
            case "aws:index/securityhubOrganizationAdminAccount:SecurityhubOrganizationAdminAccount":
                return new SecurityhubOrganizationAdminAccount(name, <any>undefined, { urn })
            case "aws:index/securityhubOrganizationConfiguration:SecurityhubOrganizationConfiguration":
                return new SecurityhubOrganizationConfiguration(name, <any>undefined, { urn })
            case "aws:index/securityhubProductSubscription:SecurityhubProductSubscription":
                return new SecurityhubProductSubscription(name, <any>undefined, { urn })
            case "aws:index/securityhubStandardsControl:SecurityhubStandardsControl":
                return new SecurityhubStandardsControl(name, <any>undefined, { urn })
            case "aws:index/securityhubStandardsSubscription:SecurityhubStandardsSubscription":
                return new SecurityhubStandardsSubscription(name, <any>undefined, { urn })
            case "aws:index/securitylakeAwsLogSource:SecuritylakeAwsLogSource":
                return new SecuritylakeAwsLogSource(name, <any>undefined, { urn })
            case "aws:index/securitylakeCustomLogSource:SecuritylakeCustomLogSource":
                return new SecuritylakeCustomLogSource(name, <any>undefined, { urn })
            case "aws:index/securitylakeDataLake:SecuritylakeDataLake":
                return new SecuritylakeDataLake(name, <any>undefined, { urn })
            case "aws:index/securitylakeSubscriber:SecuritylakeSubscriber":
                return new SecuritylakeSubscriber(name, <any>undefined, { urn })
            case "aws:index/securitylakeSubscriberNotification:SecuritylakeSubscriberNotification":
                return new SecuritylakeSubscriberNotification(name, <any>undefined, { urn })
            case "aws:index/serverlessapplicationrepositoryCloudformationStack:ServerlessapplicationrepositoryCloudformationStack":
                return new ServerlessapplicationrepositoryCloudformationStack(name, <any>undefined, { urn })
            case "aws:index/serviceDiscoveryHttpNamespace:ServiceDiscoveryHttpNamespace":
                return new ServiceDiscoveryHttpNamespace(name, <any>undefined, { urn })
            case "aws:index/serviceDiscoveryInstance:ServiceDiscoveryInstance":
                return new ServiceDiscoveryInstance(name, <any>undefined, { urn })
            case "aws:index/serviceDiscoveryPrivateDnsNamespace:ServiceDiscoveryPrivateDnsNamespace":
                return new ServiceDiscoveryPrivateDnsNamespace(name, <any>undefined, { urn })
            case "aws:index/serviceDiscoveryPublicDnsNamespace:ServiceDiscoveryPublicDnsNamespace":
                return new ServiceDiscoveryPublicDnsNamespace(name, <any>undefined, { urn })
            case "aws:index/serviceDiscoveryService:ServiceDiscoveryService":
                return new ServiceDiscoveryService(name, <any>undefined, { urn })
            case "aws:index/servicecatalogBudgetResourceAssociation:ServicecatalogBudgetResourceAssociation":
                return new ServicecatalogBudgetResourceAssociation(name, <any>undefined, { urn })
            case "aws:index/servicecatalogConstraint:ServicecatalogConstraint":
                return new ServicecatalogConstraint(name, <any>undefined, { urn })
            case "aws:index/servicecatalogOrganizationsAccess:ServicecatalogOrganizationsAccess":
                return new ServicecatalogOrganizationsAccess(name, <any>undefined, { urn })
            case "aws:index/servicecatalogPortfolio:ServicecatalogPortfolio":
                return new ServicecatalogPortfolio(name, <any>undefined, { urn })
            case "aws:index/servicecatalogPortfolioShare:ServicecatalogPortfolioShare":
                return new ServicecatalogPortfolioShare(name, <any>undefined, { urn })
            case "aws:index/servicecatalogPrincipalPortfolioAssociation:ServicecatalogPrincipalPortfolioAssociation":
                return new ServicecatalogPrincipalPortfolioAssociation(name, <any>undefined, { urn })
            case "aws:index/servicecatalogProduct:ServicecatalogProduct":
                return new ServicecatalogProduct(name, <any>undefined, { urn })
            case "aws:index/servicecatalogProductPortfolioAssociation:ServicecatalogProductPortfolioAssociation":
                return new ServicecatalogProductPortfolioAssociation(name, <any>undefined, { urn })
            case "aws:index/servicecatalogProvisionedProduct:ServicecatalogProvisionedProduct":
                return new ServicecatalogProvisionedProduct(name, <any>undefined, { urn })
            case "aws:index/servicecatalogProvisioningArtifact:ServicecatalogProvisioningArtifact":
                return new ServicecatalogProvisioningArtifact(name, <any>undefined, { urn })
            case "aws:index/servicecatalogServiceAction:ServicecatalogServiceAction":
                return new ServicecatalogServiceAction(name, <any>undefined, { urn })
            case "aws:index/servicecatalogTagOption:ServicecatalogTagOption":
                return new ServicecatalogTagOption(name, <any>undefined, { urn })
            case "aws:index/servicecatalogTagOptionResourceAssociation:ServicecatalogTagOptionResourceAssociation":
                return new ServicecatalogTagOptionResourceAssociation(name, <any>undefined, { urn })
            case "aws:index/servicecatalogappregistryApplication:ServicecatalogappregistryApplication":
                return new ServicecatalogappregistryApplication(name, <any>undefined, { urn })
            case "aws:index/servicequotasServiceQuota:ServicequotasServiceQuota":
                return new ServicequotasServiceQuota(name, <any>undefined, { urn })
            case "aws:index/servicequotasTemplate:ServicequotasTemplate":
                return new ServicequotasTemplate(name, <any>undefined, { urn })
            case "aws:index/servicequotasTemplateAssociation:ServicequotasTemplateAssociation":
                return new ServicequotasTemplateAssociation(name, <any>undefined, { urn })
            case "aws:index/sesActiveReceiptRuleSet:SesActiveReceiptRuleSet":
                return new SesActiveReceiptRuleSet(name, <any>undefined, { urn })
            case "aws:index/sesConfigurationSet:SesConfigurationSet":
                return new SesConfigurationSet(name, <any>undefined, { urn })
            case "aws:index/sesDomainDkim:SesDomainDkim":
                return new SesDomainDkim(name, <any>undefined, { urn })
            case "aws:index/sesDomainIdentity:SesDomainIdentity":
                return new SesDomainIdentity(name, <any>undefined, { urn })
            case "aws:index/sesDomainIdentityVerification:SesDomainIdentityVerification":
                return new SesDomainIdentityVerification(name, <any>undefined, { urn })
            case "aws:index/sesDomainMailFrom:SesDomainMailFrom":
                return new SesDomainMailFrom(name, <any>undefined, { urn })
            case "aws:index/sesEmailIdentity:SesEmailIdentity":
                return new SesEmailIdentity(name, <any>undefined, { urn })
            case "aws:index/sesEventDestination:SesEventDestination":
                return new SesEventDestination(name, <any>undefined, { urn })
            case "aws:index/sesIdentityNotificationTopic:SesIdentityNotificationTopic":
                return new SesIdentityNotificationTopic(name, <any>undefined, { urn })
            case "aws:index/sesIdentityPolicy:SesIdentityPolicy":
                return new SesIdentityPolicy(name, <any>undefined, { urn })
            case "aws:index/sesReceiptFilter:SesReceiptFilter":
                return new SesReceiptFilter(name, <any>undefined, { urn })
            case "aws:index/sesReceiptRule:SesReceiptRule":
                return new SesReceiptRule(name, <any>undefined, { urn })
            case "aws:index/sesReceiptRuleSet:SesReceiptRuleSet":
                return new SesReceiptRuleSet(name, <any>undefined, { urn })
            case "aws:index/sesTemplate:SesTemplate":
                return new SesTemplate(name, <any>undefined, { urn })
            case "aws:index/sesv2AccountVdmAttributes:Sesv2AccountVdmAttributes":
                return new Sesv2AccountVdmAttributes(name, <any>undefined, { urn })
            case "aws:index/sesv2ConfigurationSet:Sesv2ConfigurationSet":
                return new Sesv2ConfigurationSet(name, <any>undefined, { urn })
            case "aws:index/sesv2ConfigurationSetEventDestination:Sesv2ConfigurationSetEventDestination":
                return new Sesv2ConfigurationSetEventDestination(name, <any>undefined, { urn })
            case "aws:index/sesv2ContactList:Sesv2ContactList":
                return new Sesv2ContactList(name, <any>undefined, { urn })
            case "aws:index/sesv2DedicatedIpAssignment:Sesv2DedicatedIpAssignment":
                return new Sesv2DedicatedIpAssignment(name, <any>undefined, { urn })
            case "aws:index/sesv2DedicatedIpPool:Sesv2DedicatedIpPool":
                return new Sesv2DedicatedIpPool(name, <any>undefined, { urn })
            case "aws:index/sesv2EmailIdentity:Sesv2EmailIdentity":
                return new Sesv2EmailIdentity(name, <any>undefined, { urn })
            case "aws:index/sesv2EmailIdentityFeedbackAttributes:Sesv2EmailIdentityFeedbackAttributes":
                return new Sesv2EmailIdentityFeedbackAttributes(name, <any>undefined, { urn })
            case "aws:index/sesv2EmailIdentityMailFromAttributes:Sesv2EmailIdentityMailFromAttributes":
                return new Sesv2EmailIdentityMailFromAttributes(name, <any>undefined, { urn })
            case "aws:index/sesv2EmailIdentityPolicy:Sesv2EmailIdentityPolicy":
                return new Sesv2EmailIdentityPolicy(name, <any>undefined, { urn })
            case "aws:index/sfnActivity:SfnActivity":
                return new SfnActivity(name, <any>undefined, { urn })
            case "aws:index/sfnAlias:SfnAlias":
                return new SfnAlias(name, <any>undefined, { urn })
            case "aws:index/sfnStateMachine:SfnStateMachine":
                return new SfnStateMachine(name, <any>undefined, { urn })
            case "aws:index/shieldApplicationLayerAutomaticResponse:ShieldApplicationLayerAutomaticResponse":
                return new ShieldApplicationLayerAutomaticResponse(name, <any>undefined, { urn })
            case "aws:index/shieldDrtAccessLogBucketAssociation:ShieldDrtAccessLogBucketAssociation":
                return new ShieldDrtAccessLogBucketAssociation(name, <any>undefined, { urn })
            case "aws:index/shieldDrtAccessRoleArnAssociation:ShieldDrtAccessRoleArnAssociation":
                return new ShieldDrtAccessRoleArnAssociation(name, <any>undefined, { urn })
            case "aws:index/shieldProactiveEngagement:ShieldProactiveEngagement":
                return new ShieldProactiveEngagement(name, <any>undefined, { urn })
            case "aws:index/shieldProtection:ShieldProtection":
                return new ShieldProtection(name, <any>undefined, { urn })
            case "aws:index/shieldProtectionGroup:ShieldProtectionGroup":
                return new ShieldProtectionGroup(name, <any>undefined, { urn })
            case "aws:index/shieldProtectionHealthCheckAssociation:ShieldProtectionHealthCheckAssociation":
                return new ShieldProtectionHealthCheckAssociation(name, <any>undefined, { urn })
            case "aws:index/shieldSubscription:ShieldSubscription":
                return new ShieldSubscription(name, <any>undefined, { urn })
            case "aws:index/signerSigningJob:SignerSigningJob":
                return new SignerSigningJob(name, <any>undefined, { urn })
            case "aws:index/signerSigningProfile:SignerSigningProfile":
                return new SignerSigningProfile(name, <any>undefined, { urn })
            case "aws:index/signerSigningProfilePermission:SignerSigningProfilePermission":
                return new SignerSigningProfilePermission(name, <any>undefined, { urn })
            case "aws:index/simpledbDomain:SimpledbDomain":
                return new SimpledbDomain(name, <any>undefined, { urn })
            case "aws:index/snapshotCreateVolumePermission:SnapshotCreateVolumePermission":
                return new SnapshotCreateVolumePermission(name, <any>undefined, { urn })
            case "aws:index/snsPlatformApplication:SnsPlatformApplication":
                return new SnsPlatformApplication(name, <any>undefined, { urn })
            case "aws:index/snsSmsPreferences:SnsSmsPreferences":
                return new SnsSmsPreferences(name, <any>undefined, { urn })
            case "aws:index/snsTopic:SnsTopic":
                return new SnsTopic(name, <any>undefined, { urn })
            case "aws:index/snsTopicDataProtectionPolicy:SnsTopicDataProtectionPolicy":
                return new SnsTopicDataProtectionPolicy(name, <any>undefined, { urn })
            case "aws:index/snsTopicPolicy:SnsTopicPolicy":
                return new SnsTopicPolicy(name, <any>undefined, { urn })
            case "aws:index/snsTopicSubscription:SnsTopicSubscription":
                return new SnsTopicSubscription(name, <any>undefined, { urn })
            case "aws:index/spotDatafeedSubscription:SpotDatafeedSubscription":
                return new SpotDatafeedSubscription(name, <any>undefined, { urn })
            case "aws:index/spotFleetRequest:SpotFleetRequest":
                return new SpotFleetRequest(name, <any>undefined, { urn })
            case "aws:index/spotInstanceRequest:SpotInstanceRequest":
                return new SpotInstanceRequest(name, <any>undefined, { urn })
            case "aws:index/sqsQueue:SqsQueue":
                return new SqsQueue(name, <any>undefined, { urn })
            case "aws:index/sqsQueuePolicy:SqsQueuePolicy":
                return new SqsQueuePolicy(name, <any>undefined, { urn })
            case "aws:index/sqsQueueRedriveAllowPolicy:SqsQueueRedriveAllowPolicy":
                return new SqsQueueRedriveAllowPolicy(name, <any>undefined, { urn })
            case "aws:index/sqsQueueRedrivePolicy:SqsQueueRedrivePolicy":
                return new SqsQueueRedrivePolicy(name, <any>undefined, { urn })
            case "aws:index/ssmActivation:SsmActivation":
                return new SsmActivation(name, <any>undefined, { urn })
            case "aws:index/ssmAssociation:SsmAssociation":
                return new SsmAssociation(name, <any>undefined, { urn })
            case "aws:index/ssmDefaultPatchBaseline:SsmDefaultPatchBaseline":
                return new SsmDefaultPatchBaseline(name, <any>undefined, { urn })
            case "aws:index/ssmDocument:SsmDocument":
                return new SsmDocument(name, <any>undefined, { urn })
            case "aws:index/ssmMaintenanceWindow:SsmMaintenanceWindow":
                return new SsmMaintenanceWindow(name, <any>undefined, { urn })
            case "aws:index/ssmMaintenanceWindowTarget:SsmMaintenanceWindowTarget":
                return new SsmMaintenanceWindowTarget(name, <any>undefined, { urn })
            case "aws:index/ssmMaintenanceWindowTask:SsmMaintenanceWindowTask":
                return new SsmMaintenanceWindowTask(name, <any>undefined, { urn })
            case "aws:index/ssmParameter:SsmParameter":
                return new SsmParameter(name, <any>undefined, { urn })
            case "aws:index/ssmPatchBaseline:SsmPatchBaseline":
                return new SsmPatchBaseline(name, <any>undefined, { urn })
            case "aws:index/ssmPatchGroup:SsmPatchGroup":
                return new SsmPatchGroup(name, <any>undefined, { urn })
            case "aws:index/ssmResourceDataSync:SsmResourceDataSync":
                return new SsmResourceDataSync(name, <any>undefined, { urn })
            case "aws:index/ssmServiceSetting:SsmServiceSetting":
                return new SsmServiceSetting(name, <any>undefined, { urn })
            case "aws:index/ssmcontactsContact:SsmcontactsContact":
                return new SsmcontactsContact(name, <any>undefined, { urn })
            case "aws:index/ssmcontactsContactChannel:SsmcontactsContactChannel":
                return new SsmcontactsContactChannel(name, <any>undefined, { urn })
            case "aws:index/ssmcontactsPlan:SsmcontactsPlan":
                return new SsmcontactsPlan(name, <any>undefined, { urn })
            case "aws:index/ssmcontactsRotation:SsmcontactsRotation":
                return new SsmcontactsRotation(name, <any>undefined, { urn })
            case "aws:index/ssmincidentsReplicationSet:SsmincidentsReplicationSet":
                return new SsmincidentsReplicationSet(name, <any>undefined, { urn })
            case "aws:index/ssmincidentsResponsePlan:SsmincidentsResponsePlan":
                return new SsmincidentsResponsePlan(name, <any>undefined, { urn })
            case "aws:index/ssoadminAccountAssignment:SsoadminAccountAssignment":
                return new SsoadminAccountAssignment(name, <any>undefined, { urn })
            case "aws:index/ssoadminApplication:SsoadminApplication":
                return new SsoadminApplication(name, <any>undefined, { urn })
            case "aws:index/ssoadminApplicationAccessScope:SsoadminApplicationAccessScope":
                return new SsoadminApplicationAccessScope(name, <any>undefined, { urn })
            case "aws:index/ssoadminApplicationAssignment:SsoadminApplicationAssignment":
                return new SsoadminApplicationAssignment(name, <any>undefined, { urn })
            case "aws:index/ssoadminApplicationAssignmentConfiguration:SsoadminApplicationAssignmentConfiguration":
                return new SsoadminApplicationAssignmentConfiguration(name, <any>undefined, { urn })
            case "aws:index/ssoadminCustomerManagedPolicyAttachment:SsoadminCustomerManagedPolicyAttachment":
                return new SsoadminCustomerManagedPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/ssoadminInstanceAccessControlAttributes:SsoadminInstanceAccessControlAttributes":
                return new SsoadminInstanceAccessControlAttributes(name, <any>undefined, { urn })
            case "aws:index/ssoadminManagedPolicyAttachment:SsoadminManagedPolicyAttachment":
                return new SsoadminManagedPolicyAttachment(name, <any>undefined, { urn })
            case "aws:index/ssoadminPermissionSet:SsoadminPermissionSet":
                return new SsoadminPermissionSet(name, <any>undefined, { urn })
            case "aws:index/ssoadminPermissionSetInlinePolicy:SsoadminPermissionSetInlinePolicy":
                return new SsoadminPermissionSetInlinePolicy(name, <any>undefined, { urn })
            case "aws:index/ssoadminPermissionsBoundaryAttachment:SsoadminPermissionsBoundaryAttachment":
                return new SsoadminPermissionsBoundaryAttachment(name, <any>undefined, { urn })
            case "aws:index/ssoadminTrustedTokenIssuer:SsoadminTrustedTokenIssuer":
                return new SsoadminTrustedTokenIssuer(name, <any>undefined, { urn })
            case "aws:index/storagegatewayCache:StoragegatewayCache":
                return new StoragegatewayCache(name, <any>undefined, { urn })
            case "aws:index/storagegatewayCachedIscsiVolume:StoragegatewayCachedIscsiVolume":
                return new StoragegatewayCachedIscsiVolume(name, <any>undefined, { urn })
            case "aws:index/storagegatewayFileSystemAssociation:StoragegatewayFileSystemAssociation":
                return new StoragegatewayFileSystemAssociation(name, <any>undefined, { urn })
            case "aws:index/storagegatewayGateway:StoragegatewayGateway":
                return new StoragegatewayGateway(name, <any>undefined, { urn })
            case "aws:index/storagegatewayNfsFileShare:StoragegatewayNfsFileShare":
                return new StoragegatewayNfsFileShare(name, <any>undefined, { urn })
            case "aws:index/storagegatewaySmbFileShare:StoragegatewaySmbFileShare":
                return new StoragegatewaySmbFileShare(name, <any>undefined, { urn })
            case "aws:index/storagegatewayStoredIscsiVolume:StoragegatewayStoredIscsiVolume":
                return new StoragegatewayStoredIscsiVolume(name, <any>undefined, { urn })
            case "aws:index/storagegatewayTapePool:StoragegatewayTapePool":
                return new StoragegatewayTapePool(name, <any>undefined, { urn })
            case "aws:index/storagegatewayUploadBuffer:StoragegatewayUploadBuffer":
                return new StoragegatewayUploadBuffer(name, <any>undefined, { urn })
            case "aws:index/storagegatewayWorkingStorage:StoragegatewayWorkingStorage":
                return new StoragegatewayWorkingStorage(name, <any>undefined, { urn })
            case "aws:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "aws:index/swfDomain:SwfDomain":
                return new SwfDomain(name, <any>undefined, { urn })
            case "aws:index/syntheticsCanary:SyntheticsCanary":
                return new SyntheticsCanary(name, <any>undefined, { urn })
            case "aws:index/syntheticsGroup:SyntheticsGroup":
                return new SyntheticsGroup(name, <any>undefined, { urn })
            case "aws:index/syntheticsGroupAssociation:SyntheticsGroupAssociation":
                return new SyntheticsGroupAssociation(name, <any>undefined, { urn })
            case "aws:index/timestreaminfluxdbDbInstance:TimestreaminfluxdbDbInstance":
                return new TimestreaminfluxdbDbInstance(name, <any>undefined, { urn })
            case "aws:index/timestreamwriteDatabase:TimestreamwriteDatabase":
                return new TimestreamwriteDatabase(name, <any>undefined, { urn })
            case "aws:index/timestreamwriteTable:TimestreamwriteTable":
                return new TimestreamwriteTable(name, <any>undefined, { urn })
            case "aws:index/transcribeLanguageModel:TranscribeLanguageModel":
                return new TranscribeLanguageModel(name, <any>undefined, { urn })
            case "aws:index/transcribeMedicalVocabulary:TranscribeMedicalVocabulary":
                return new TranscribeMedicalVocabulary(name, <any>undefined, { urn })
            case "aws:index/transcribeVocabulary:TranscribeVocabulary":
                return new TranscribeVocabulary(name, <any>undefined, { urn })
            case "aws:index/transcribeVocabularyFilter:TranscribeVocabularyFilter":
                return new TranscribeVocabularyFilter(name, <any>undefined, { urn })
            case "aws:index/transferAccess:TransferAccess":
                return new TransferAccess(name, <any>undefined, { urn })
            case "aws:index/transferAgreement:TransferAgreement":
                return new TransferAgreement(name, <any>undefined, { urn })
            case "aws:index/transferCertificate:TransferCertificate":
                return new TransferCertificate(name, <any>undefined, { urn })
            case "aws:index/transferConnector:TransferConnector":
                return new TransferConnector(name, <any>undefined, { urn })
            case "aws:index/transferProfile:TransferProfile":
                return new TransferProfile(name, <any>undefined, { urn })
            case "aws:index/transferServer:TransferServer":
                return new TransferServer(name, <any>undefined, { urn })
            case "aws:index/transferSshKey:TransferSshKey":
                return new TransferSshKey(name, <any>undefined, { urn })
            case "aws:index/transferTag:TransferTag":
                return new TransferTag(name, <any>undefined, { urn })
            case "aws:index/transferUser:TransferUser":
                return new TransferUser(name, <any>undefined, { urn })
            case "aws:index/transferWorkflow:TransferWorkflow":
                return new TransferWorkflow(name, <any>undefined, { urn })
            case "aws:index/verifiedaccessEndpoint:VerifiedaccessEndpoint":
                return new VerifiedaccessEndpoint(name, <any>undefined, { urn })
            case "aws:index/verifiedaccessGroup:VerifiedaccessGroup":
                return new VerifiedaccessGroup(name, <any>undefined, { urn })
            case "aws:index/verifiedaccessInstance:VerifiedaccessInstance":
                return new VerifiedaccessInstance(name, <any>undefined, { urn })
            case "aws:index/verifiedaccessInstanceLoggingConfiguration:VerifiedaccessInstanceLoggingConfiguration":
                return new VerifiedaccessInstanceLoggingConfiguration(name, <any>undefined, { urn })
            case "aws:index/verifiedaccessInstanceTrustProviderAttachment:VerifiedaccessInstanceTrustProviderAttachment":
                return new VerifiedaccessInstanceTrustProviderAttachment(name, <any>undefined, { urn })
            case "aws:index/verifiedaccessTrustProvider:VerifiedaccessTrustProvider":
                return new VerifiedaccessTrustProvider(name, <any>undefined, { urn })
            case "aws:index/verifiedpermissionsIdentitySource:VerifiedpermissionsIdentitySource":
                return new VerifiedpermissionsIdentitySource(name, <any>undefined, { urn })
            case "aws:index/verifiedpermissionsPolicy:VerifiedpermissionsPolicy":
                return new VerifiedpermissionsPolicy(name, <any>undefined, { urn })
            case "aws:index/verifiedpermissionsPolicyStore:VerifiedpermissionsPolicyStore":
                return new VerifiedpermissionsPolicyStore(name, <any>undefined, { urn })
            case "aws:index/verifiedpermissionsPolicyTemplate:VerifiedpermissionsPolicyTemplate":
                return new VerifiedpermissionsPolicyTemplate(name, <any>undefined, { urn })
            case "aws:index/verifiedpermissionsSchema:VerifiedpermissionsSchema":
                return new VerifiedpermissionsSchema(name, <any>undefined, { urn })
            case "aws:index/volumeAttachment:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            case "aws:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "aws:index/vpcDhcpOptions:VpcDhcpOptions":
                return new VpcDhcpOptions(name, <any>undefined, { urn })
            case "aws:index/vpcDhcpOptionsAssociation:VpcDhcpOptionsAssociation":
                return new VpcDhcpOptionsAssociation(name, <any>undefined, { urn })
            case "aws:index/vpcEndpoint:VpcEndpoint":
                return new VpcEndpoint(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointConnectionAccepter:VpcEndpointConnectionAccepter":
                return new VpcEndpointConnectionAccepter(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification":
                return new VpcEndpointConnectionNotification(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointPolicy:VpcEndpointPolicy":
                return new VpcEndpointPolicy(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointPrivateDns:VpcEndpointPrivateDns":
                return new VpcEndpointPrivateDns(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation":
                return new VpcEndpointRouteTableAssociation(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointSecurityGroupAssociation:VpcEndpointSecurityGroupAssociation":
                return new VpcEndpointSecurityGroupAssociation(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointService:VpcEndpointService":
                return new VpcEndpointService(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointServiceAllowedPrincipal:VpcEndpointServiceAllowedPrincipal":
                return new VpcEndpointServiceAllowedPrincipal(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointServicePrivateDnsVerification:VpcEndpointServicePrivateDnsVerification":
                return new VpcEndpointServicePrivateDnsVerification(name, <any>undefined, { urn })
            case "aws:index/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation":
                return new VpcEndpointSubnetAssociation(name, <any>undefined, { urn })
            case "aws:index/vpcIpam:VpcIpam":
                return new VpcIpam(name, <any>undefined, { urn })
            case "aws:index/vpcIpamOrganizationAdminAccount:VpcIpamOrganizationAdminAccount":
                return new VpcIpamOrganizationAdminAccount(name, <any>undefined, { urn })
            case "aws:index/vpcIpamPool:VpcIpamPool":
                return new VpcIpamPool(name, <any>undefined, { urn })
            case "aws:index/vpcIpamPoolCidr:VpcIpamPoolCidr":
                return new VpcIpamPoolCidr(name, <any>undefined, { urn })
            case "aws:index/vpcIpamPoolCidrAllocation:VpcIpamPoolCidrAllocation":
                return new VpcIpamPoolCidrAllocation(name, <any>undefined, { urn })
            case "aws:index/vpcIpamPreviewNextCidr:VpcIpamPreviewNextCidr":
                return new VpcIpamPreviewNextCidr(name, <any>undefined, { urn })
            case "aws:index/vpcIpamResourceDiscovery:VpcIpamResourceDiscovery":
                return new VpcIpamResourceDiscovery(name, <any>undefined, { urn })
            case "aws:index/vpcIpamResourceDiscoveryAssociation:VpcIpamResourceDiscoveryAssociation":
                return new VpcIpamResourceDiscoveryAssociation(name, <any>undefined, { urn })
            case "aws:index/vpcIpamScope:VpcIpamScope":
                return new VpcIpamScope(name, <any>undefined, { urn })
            case "aws:index/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation":
                return new VpcIpv4CidrBlockAssociation(name, <any>undefined, { urn })
            case "aws:index/vpcIpv6CidrBlockAssociation:VpcIpv6CidrBlockAssociation":
                return new VpcIpv6CidrBlockAssociation(name, <any>undefined, { urn })
            case "aws:index/vpcNetworkPerformanceMetricSubscription:VpcNetworkPerformanceMetricSubscription":
                return new VpcNetworkPerformanceMetricSubscription(name, <any>undefined, { urn })
            case "aws:index/vpcPeeringConnection:VpcPeeringConnection":
                return new VpcPeeringConnection(name, <any>undefined, { urn })
            case "aws:index/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter":
                return new VpcPeeringConnectionAccepter(name, <any>undefined, { urn })
            case "aws:index/vpcPeeringConnectionOptions:VpcPeeringConnectionOptions":
                return new VpcPeeringConnectionOptions(name, <any>undefined, { urn })
            case "aws:index/vpcSecurityGroupEgressRule:VpcSecurityGroupEgressRule":
                return new VpcSecurityGroupEgressRule(name, <any>undefined, { urn })
            case "aws:index/vpcSecurityGroupIngressRule:VpcSecurityGroupIngressRule":
                return new VpcSecurityGroupIngressRule(name, <any>undefined, { urn })
            case "aws:index/vpclatticeAccessLogSubscription:VpclatticeAccessLogSubscription":
                return new VpclatticeAccessLogSubscription(name, <any>undefined, { urn })
            case "aws:index/vpclatticeAuthPolicy:VpclatticeAuthPolicy":
                return new VpclatticeAuthPolicy(name, <any>undefined, { urn })
            case "aws:index/vpclatticeListener:VpclatticeListener":
                return new VpclatticeListener(name, <any>undefined, { urn })
            case "aws:index/vpclatticeListenerRule:VpclatticeListenerRule":
                return new VpclatticeListenerRule(name, <any>undefined, { urn })
            case "aws:index/vpclatticeResourcePolicy:VpclatticeResourcePolicy":
                return new VpclatticeResourcePolicy(name, <any>undefined, { urn })
            case "aws:index/vpclatticeService:VpclatticeService":
                return new VpclatticeService(name, <any>undefined, { urn })
            case "aws:index/vpclatticeServiceNetwork:VpclatticeServiceNetwork":
                return new VpclatticeServiceNetwork(name, <any>undefined, { urn })
            case "aws:index/vpclatticeServiceNetworkServiceAssociation:VpclatticeServiceNetworkServiceAssociation":
                return new VpclatticeServiceNetworkServiceAssociation(name, <any>undefined, { urn })
            case "aws:index/vpclatticeServiceNetworkVpcAssociation:VpclatticeServiceNetworkVpcAssociation":
                return new VpclatticeServiceNetworkVpcAssociation(name, <any>undefined, { urn })
            case "aws:index/vpclatticeTargetGroup:VpclatticeTargetGroup":
                return new VpclatticeTargetGroup(name, <any>undefined, { urn })
            case "aws:index/vpclatticeTargetGroupAttachment:VpclatticeTargetGroupAttachment":
                return new VpclatticeTargetGroupAttachment(name, <any>undefined, { urn })
            case "aws:index/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "aws:index/vpnConnectionRoute:VpnConnectionRoute":
                return new VpnConnectionRoute(name, <any>undefined, { urn })
            case "aws:index/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            case "aws:index/vpnGatewayAttachment:VpnGatewayAttachment":
                return new VpnGatewayAttachment(name, <any>undefined, { urn })
            case "aws:index/vpnGatewayRoutePropagation:VpnGatewayRoutePropagation":
                return new VpnGatewayRoutePropagation(name, <any>undefined, { urn })
            case "aws:index/wafByteMatchSet:WafByteMatchSet":
                return new WafByteMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafGeoMatchSet:WafGeoMatchSet":
                return new WafGeoMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafIpset:WafIpset":
                return new WafIpset(name, <any>undefined, { urn })
            case "aws:index/wafRateBasedRule:WafRateBasedRule":
                return new WafRateBasedRule(name, <any>undefined, { urn })
            case "aws:index/wafRegexMatchSet:WafRegexMatchSet":
                return new WafRegexMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafRegexPatternSet:WafRegexPatternSet":
                return new WafRegexPatternSet(name, <any>undefined, { urn })
            case "aws:index/wafRule:WafRule":
                return new WafRule(name, <any>undefined, { urn })
            case "aws:index/wafRuleGroup:WafRuleGroup":
                return new WafRuleGroup(name, <any>undefined, { urn })
            case "aws:index/wafSizeConstraintSet:WafSizeConstraintSet":
                return new WafSizeConstraintSet(name, <any>undefined, { urn })
            case "aws:index/wafSqlInjectionMatchSet:WafSqlInjectionMatchSet":
                return new WafSqlInjectionMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafWebAcl:WafWebAcl":
                return new WafWebAcl(name, <any>undefined, { urn })
            case "aws:index/wafXssMatchSet:WafXssMatchSet":
                return new WafXssMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafregionalByteMatchSet:WafregionalByteMatchSet":
                return new WafregionalByteMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafregionalGeoMatchSet:WafregionalGeoMatchSet":
                return new WafregionalGeoMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafregionalIpset:WafregionalIpset":
                return new WafregionalIpset(name, <any>undefined, { urn })
            case "aws:index/wafregionalRateBasedRule:WafregionalRateBasedRule":
                return new WafregionalRateBasedRule(name, <any>undefined, { urn })
            case "aws:index/wafregionalRegexMatchSet:WafregionalRegexMatchSet":
                return new WafregionalRegexMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafregionalRegexPatternSet:WafregionalRegexPatternSet":
                return new WafregionalRegexPatternSet(name, <any>undefined, { urn })
            case "aws:index/wafregionalRule:WafregionalRule":
                return new WafregionalRule(name, <any>undefined, { urn })
            case "aws:index/wafregionalRuleGroup:WafregionalRuleGroup":
                return new WafregionalRuleGroup(name, <any>undefined, { urn })
            case "aws:index/wafregionalSizeConstraintSet:WafregionalSizeConstraintSet":
                return new WafregionalSizeConstraintSet(name, <any>undefined, { urn })
            case "aws:index/wafregionalSqlInjectionMatchSet:WafregionalSqlInjectionMatchSet":
                return new WafregionalSqlInjectionMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafregionalWebAcl:WafregionalWebAcl":
                return new WafregionalWebAcl(name, <any>undefined, { urn })
            case "aws:index/wafregionalWebAclAssociation:WafregionalWebAclAssociation":
                return new WafregionalWebAclAssociation(name, <any>undefined, { urn })
            case "aws:index/wafregionalXssMatchSet:WafregionalXssMatchSet":
                return new WafregionalXssMatchSet(name, <any>undefined, { urn })
            case "aws:index/wafv2IpSet:Wafv2IpSet":
                return new Wafv2IpSet(name, <any>undefined, { urn })
            case "aws:index/wafv2RegexPatternSet:Wafv2RegexPatternSet":
                return new Wafv2RegexPatternSet(name, <any>undefined, { urn })
            case "aws:index/wafv2RuleGroup:Wafv2RuleGroup":
                return new Wafv2RuleGroup(name, <any>undefined, { urn })
            case "aws:index/wafv2WebAcl:Wafv2WebAcl":
                return new Wafv2WebAcl(name, <any>undefined, { urn })
            case "aws:index/wafv2WebAclAssociation:Wafv2WebAclAssociation":
                return new Wafv2WebAclAssociation(name, <any>undefined, { urn })
            case "aws:index/wafv2WebAclLoggingConfiguration:Wafv2WebAclLoggingConfiguration":
                return new Wafv2WebAclLoggingConfiguration(name, <any>undefined, { urn })
            case "aws:index/worklinkFleet:WorklinkFleet":
                return new WorklinkFleet(name, <any>undefined, { urn })
            case "aws:index/worklinkWebsiteCertificateAuthorityAssociation:WorklinkWebsiteCertificateAuthorityAssociation":
                return new WorklinkWebsiteCertificateAuthorityAssociation(name, <any>undefined, { urn })
            case "aws:index/workspacesConnectionAlias:WorkspacesConnectionAlias":
                return new WorkspacesConnectionAlias(name, <any>undefined, { urn })
            case "aws:index/workspacesDirectory:WorkspacesDirectory":
                return new WorkspacesDirectory(name, <any>undefined, { urn })
            case "aws:index/workspacesIpGroup:WorkspacesIpGroup":
                return new WorkspacesIpGroup(name, <any>undefined, { urn })
            case "aws:index/workspacesWorkspace:WorkspacesWorkspace":
                return new WorkspacesWorkspace(name, <any>undefined, { urn })
            case "aws:index/xrayEncryptionConfig:XrayEncryptionConfig":
                return new XrayEncryptionConfig(name, <any>undefined, { urn })
            case "aws:index/xrayGroup:XrayGroup":
                return new XrayGroup(name, <any>undefined, { urn })
            case "aws:index/xraySamplingRule:XraySamplingRule":
                return new XraySamplingRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "index/accessanalyzerAnalyzer", _module)
pulumi.runtime.registerResourceModule("aws", "index/accessanalyzerArchiveRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/accountAlternateContact", _module)
pulumi.runtime.registerResourceModule("aws", "index/accountPrimaryContact", _module)
pulumi.runtime.registerResourceModule("aws", "index/accountRegion", _module)
pulumi.runtime.registerResourceModule("aws", "index/acmCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/acmCertificateValidation", _module)
pulumi.runtime.registerResourceModule("aws", "index/acmpcaCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/acmpcaCertificateAuthority", _module)
pulumi.runtime.registerResourceModule("aws", "index/acmpcaCertificateAuthorityCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/acmpcaPermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/acmpcaPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/alb", _module)
pulumi.runtime.registerResourceModule("aws", "index/albListener", _module)
pulumi.runtime.registerResourceModule("aws", "index/albListenerCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/albListenerRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/albTargetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/albTargetGroupAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ami", _module)
pulumi.runtime.registerResourceModule("aws", "index/amiCopy", _module)
pulumi.runtime.registerResourceModule("aws", "index/amiFromInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/amiLaunchPermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/amplifyApp", _module)
pulumi.runtime.registerResourceModule("aws", "index/amplifyBackendEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "index/amplifyBranch", _module)
pulumi.runtime.registerResourceModule("aws", "index/amplifyDomainAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/amplifyWebhook", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayApiKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayAuthorizer", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayBasePathMapping", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayClientCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayDeployment", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayDocumentationPart", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayDocumentationVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayDomainName", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayGatewayResponse", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayIntegration", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayIntegrationResponse", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayMethod", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayMethodResponse", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayMethodSettings", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayModel", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayRequestValidator", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayResource", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayRestApi", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayRestApiPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayStage", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayUsagePlan", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayUsagePlanKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/apiGatewayVpcLink", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2Api", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2ApiMapping", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2Authorizer", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2Deployment", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2DomainName", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2Integration", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2IntegrationResponse", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2Model", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2Route", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2RouteResponse", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2Stage", _module)
pulumi.runtime.registerResourceModule("aws", "index/apigatewayv2VpcLink", _module)
pulumi.runtime.registerResourceModule("aws", "index/appCookieStickinessPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/appautoscalingPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/appautoscalingScheduledAction", _module)
pulumi.runtime.registerResourceModule("aws", "index/appautoscalingTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigConfigurationProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigDeployment", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigDeploymentStrategy", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigExtension", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigExtensionAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/appconfigHostedConfigurationVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/appfabricAppAuthorization", _module)
pulumi.runtime.registerResourceModule("aws", "index/appfabricAppAuthorizationConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/appfabricAppBundle", _module)
pulumi.runtime.registerResourceModule("aws", "index/appfabricIngestion", _module)
pulumi.runtime.registerResourceModule("aws", "index/appfabricIngestionDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/appflowConnectorProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/appflowFlow", _module)
pulumi.runtime.registerResourceModule("aws", "index/appintegrationsDataIntegration", _module)
pulumi.runtime.registerResourceModule("aws", "index/appintegrationsEventIntegration", _module)
pulumi.runtime.registerResourceModule("aws", "index/applicationinsightsApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/appmeshGatewayRoute", _module)
pulumi.runtime.registerResourceModule("aws", "index/appmeshMesh", _module)
pulumi.runtime.registerResourceModule("aws", "index/appmeshRoute", _module)
pulumi.runtime.registerResourceModule("aws", "index/appmeshVirtualGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/appmeshVirtualNode", _module)
pulumi.runtime.registerResourceModule("aws", "index/appmeshVirtualRouter", _module)
pulumi.runtime.registerResourceModule("aws", "index/appmeshVirtualService", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerAutoScalingConfigurationVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerCustomDomainAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerDefaultAutoScalingConfigurationVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerDeployment", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerObservabilityConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerService", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerVpcConnector", _module)
pulumi.runtime.registerResourceModule("aws", "index/apprunnerVpcIngressConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/appstreamDirectoryConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/appstreamFleet", _module)
pulumi.runtime.registerResourceModule("aws", "index/appstreamFleetStackAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/appstreamImageBuilder", _module)
pulumi.runtime.registerResourceModule("aws", "index/appstreamStack", _module)
pulumi.runtime.registerResourceModule("aws", "index/appstreamUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/appstreamUserStackAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncApiCache", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncApiKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncDatasource", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncDomainName", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncDomainNameApiAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncFunction", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncGraphqlApi", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncResolver", _module)
pulumi.runtime.registerResourceModule("aws", "index/appsyncType", _module)
pulumi.runtime.registerResourceModule("aws", "index/athenaDataCatalog", _module)
pulumi.runtime.registerResourceModule("aws", "index/athenaDatabase", _module)
pulumi.runtime.registerResourceModule("aws", "index/athenaNamedQuery", _module)
pulumi.runtime.registerResourceModule("aws", "index/athenaPreparedStatement", _module)
pulumi.runtime.registerResourceModule("aws", "index/athenaWorkgroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerAccountRegistration", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerAssessment", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerAssessmentDelegation", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerAssessmentReport", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerControl", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerFramework", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerFrameworkShare", _module)
pulumi.runtime.registerResourceModule("aws", "index/auditmanagerOrganizationAdminAccountRegistration", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingGroupTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingLifecycleHook", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingNotification", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingSchedule", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingTrafficSourceAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/autoscalingplansScalingPlan", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupFramework", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupGlobalSettings", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupPlan", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupRegionSettings", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupReportPlan", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupSelection", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupVault", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupVaultLockConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupVaultNotifications", _module)
pulumi.runtime.registerResourceModule("aws", "index/backupVaultPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/batchComputeEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "index/batchJobDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/batchJobQueue", _module)
pulumi.runtime.registerResourceModule("aws", "index/batchSchedulingPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/bcmdataexportsExport", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockCustomModel", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockGuardrail", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockModelInvocationLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockProvisionedModelThroughput", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockagentAgent", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockagentAgentActionGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockagentAgentAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockagentAgentKnowledgeBaseAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockagentDataSource", _module)
pulumi.runtime.registerResourceModule("aws", "index/bedrockagentKnowledgeBase", _module)
pulumi.runtime.registerResourceModule("aws", "index/budgetsBudget", _module)
pulumi.runtime.registerResourceModule("aws", "index/budgetsBudgetAction", _module)
pulumi.runtime.registerResourceModule("aws", "index/ceAnomalyMonitor", _module)
pulumi.runtime.registerResourceModule("aws", "index/ceAnomalySubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/ceCostAllocationTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/ceCostCategory", _module)
pulumi.runtime.registerResourceModule("aws", "index/chatbotSlackChannelConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/chatbotTeamsChannelConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimeVoiceConnector", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimeVoiceConnectorGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimeVoiceConnectorLogging", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimeVoiceConnectorOrigination", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimeVoiceConnectorStreaming", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimeVoiceConnectorTermination", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimeVoiceConnectorTerminationCredentials", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimesdkmediapipelinesMediaInsightsPipelineConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimesdkvoiceGlobalSettings", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimesdkvoiceSipMediaApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimesdkvoiceSipRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/chimesdkvoiceVoiceProfileDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/cleanroomsCollaboration", _module)
pulumi.runtime.registerResourceModule("aws", "index/cleanroomsConfiguredTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloud9EnvironmentEc2", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloud9EnvironmentMembership", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudcontrolapiResource", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudformationStack", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudformationStackSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudformationStackSetInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudformationType", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontCachePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontContinuousDeploymentPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontDistribution", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontFieldLevelEncryptionConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontFieldLevelEncryptionProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontFunction", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontKeyGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontKeyValueStore", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontMonitoringSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontOriginAccessControl", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontOriginAccessIdentity", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontOriginRequestPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontPublicKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontRealtimeLogConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontResponseHeadersPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudfrontkeyvaluestoreKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudhsmV2Cluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudhsmV2Hsm", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudsearchDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudsearchDomainServiceAccessPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudtrail", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudtrailEventDataStore", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudtrailOrganizationDelegatedAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchCompositeAlarm", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchDashboard", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventApiDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventArchive", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventBus", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventBusPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventPermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchEventTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogAccountPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogDataProtectionPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogDestinationPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogMetricFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchLogSubscriptionFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchMetricAlarm", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchMetricStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/cloudwatchQueryDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/codeartifactDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/codeartifactDomainPermissionsPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/codeartifactRepository", _module)
pulumi.runtime.registerResourceModule("aws", "index/codeartifactRepositoryPermissionsPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/codebuildProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/codebuildReportGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/codebuildResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/codebuildSourceCredential", _module)
pulumi.runtime.registerResourceModule("aws", "index/codebuildWebhook", _module)
pulumi.runtime.registerResourceModule("aws", "index/codecatalystDevEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "index/codecatalystProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/codecatalystSourceRepository", _module)
pulumi.runtime.registerResourceModule("aws", "index/codecommitApprovalRuleTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/codecommitApprovalRuleTemplateAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/codecommitRepository", _module)
pulumi.runtime.registerResourceModule("aws", "index/codecommitTrigger", _module)
pulumi.runtime.registerResourceModule("aws", "index/codedeployApp", _module)
pulumi.runtime.registerResourceModule("aws", "index/codedeployDeploymentConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/codedeployDeploymentGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/codeguruprofilerProfilingGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/codegurureviewerRepositoryAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/codepipeline", _module)
pulumi.runtime.registerResourceModule("aws", "index/codepipelineCustomActionType", _module)
pulumi.runtime.registerResourceModule("aws", "index/codepipelineWebhook", _module)
pulumi.runtime.registerResourceModule("aws", "index/codestarconnectionsConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/codestarconnectionsHost", _module)
pulumi.runtime.registerResourceModule("aws", "index/codestarnotificationsNotificationRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoIdentityPool", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoIdentityPoolProviderPrincipalTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoIdentityPoolRolesAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoIdentityProvider", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoManagedUserPoolClient", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoResourceServer", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoRiskConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoUserGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoUserInGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoUserPool", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoUserPoolClient", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoUserPoolDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/cognitoUserPoolUiCustomization", _module)
pulumi.runtime.registerResourceModule("aws", "index/comprehendDocumentClassifier", _module)
pulumi.runtime.registerResourceModule("aws", "index/comprehendEntityRecognizer", _module)
pulumi.runtime.registerResourceModule("aws", "index/configAggregateAuthorization", _module)
pulumi.runtime.registerResourceModule("aws", "index/configConfigRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/configConfigurationAggregator", _module)
pulumi.runtime.registerResourceModule("aws", "index/configConfigurationRecorder", _module)
pulumi.runtime.registerResourceModule("aws", "index/configConfigurationRecorderStatus", _module)
pulumi.runtime.registerResourceModule("aws", "index/configConformancePack", _module)
pulumi.runtime.registerResourceModule("aws", "index/configDeliveryChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/configOrganizationConformancePack", _module)
pulumi.runtime.registerResourceModule("aws", "index/configOrganizationCustomPolicyRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/configOrganizationCustomRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/configOrganizationManagedRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/configRemediationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/configRetentionConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectBotAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectContactFlow", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectContactFlowModule", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectHoursOfOperation", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectInstanceStorageConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectLambdaFunctionAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectPhoneNumber", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectQueue", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectQuickConnect", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectRoutingProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectSecurityProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectUserHierarchyGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectUserHierarchyStructure", _module)
pulumi.runtime.registerResourceModule("aws", "index/connectVocabulary", _module)
pulumi.runtime.registerResourceModule("aws", "index/controltowerControl", _module)
pulumi.runtime.registerResourceModule("aws", "index/controltowerLandingZone", _module)
pulumi.runtime.registerResourceModule("aws", "index/curReportDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/customerGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/customerprofilesDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/customerprofilesProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/dataexchangeDataSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/dataexchangeRevision", _module)
pulumi.runtime.registerResourceModule("aws", "index/datapipelinePipeline", _module)
pulumi.runtime.registerResourceModule("aws", "index/datapipelinePipelineDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncAgent", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationAzureBlob", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationEfs", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationFsxLustreFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationFsxOntapFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationFsxOpenzfsFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationFsxWindowsFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationHdfs", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationNfs", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationObjectStorage", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationS3", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncLocationSmb", _module)
pulumi.runtime.registerResourceModule("aws", "index/datasyncTask", _module)
pulumi.runtime.registerResourceModule("aws", "index/datazoneDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/datazoneEnvironmentBlueprintConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/datazoneEnvironmentProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/datazoneFormType", _module)
pulumi.runtime.registerResourceModule("aws", "index/datazoneGlossary", _module)
pulumi.runtime.registerResourceModule("aws", "index/datazoneGlossaryTerm", _module)
pulumi.runtime.registerResourceModule("aws", "index/datazoneProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/daxCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/daxParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/daxSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbClusterSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbEventSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbInstanceAutomatedBackupsReplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbInstanceRoleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbOptionGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbProxy", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbProxyDefaultTargetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbProxyEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbProxyTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbSnapshotCopy", _module)
pulumi.runtime.registerResourceModule("aws", "index/dbSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/defaultNetworkAcl", _module)
pulumi.runtime.registerResourceModule("aws", "index/defaultRouteTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/defaultSecurityGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/defaultSubnet", _module)
pulumi.runtime.registerResourceModule("aws", "index/defaultVpc", _module)
pulumi.runtime.registerResourceModule("aws", "index/defaultVpcDhcpOptions", _module)
pulumi.runtime.registerResourceModule("aws", "index/detectiveGraph", _module)
pulumi.runtime.registerResourceModule("aws", "index/detectiveInvitationAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/detectiveMember", _module)
pulumi.runtime.registerResourceModule("aws", "index/detectiveOrganizationAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/detectiveOrganizationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/devicefarmDevicePool", _module)
pulumi.runtime.registerResourceModule("aws", "index/devicefarmInstanceProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/devicefarmNetworkProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/devicefarmProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/devicefarmTestGridProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/devicefarmUpload", _module)
pulumi.runtime.registerResourceModule("aws", "index/devopsguruEventSourcesConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/devopsguruNotificationChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/devopsguruResourceCollection", _module)
pulumi.runtime.registerResourceModule("aws", "index/devopsguruServiceIntegration", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceConditionalForwarder", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceDirectory", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceLogSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceRadiusSettings", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceRegion", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceSharedDirectory", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceSharedDirectoryAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/directoryServiceTrust", _module)
pulumi.runtime.registerResourceModule("aws", "index/dlmLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsEventSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsReplicationConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsReplicationInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsReplicationSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsReplicationTask", _module)
pulumi.runtime.registerResourceModule("aws", "index/dmsS3Endpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbClusterInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbClusterParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbClusterSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbEventSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbGlobalCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/docdbelasticCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/drsReplicationConfigurationTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxBgpPeer", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxConnectionAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxConnectionConfirmation", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxGatewayAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxGatewayAssociationProposal", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxHostedConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxHostedPrivateVirtualInterface", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxHostedPrivateVirtualInterfaceAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxHostedPublicVirtualInterface", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxHostedPublicVirtualInterfaceAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxHostedTransitVirtualInterface", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxHostedTransitVirtualInterfaceAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxLag", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxMacsecKeyAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxPrivateVirtualInterface", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxPublicVirtualInterface", _module)
pulumi.runtime.registerResourceModule("aws", "index/dxTransitVirtualInterface", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbContributorInsights", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbGlobalTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbKinesisStreamingDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbTableExport", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbTableItem", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbTableReplica", _module)
pulumi.runtime.registerResourceModule("aws", "index/dynamodbTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsDefaultKmsKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsEncryptionByDefault", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsFastSnapshotRestore", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsSnapshotBlockPublicAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsSnapshotCopy", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsSnapshotImport", _module)
pulumi.runtime.registerResourceModule("aws", "index/ebsVolume", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2AvailabilityZoneGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2CapacityBlockReservation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2CapacityReservation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2CarrierGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2ClientVpnAuthorizationRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2ClientVpnEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2ClientVpnNetworkAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2ClientVpnRoute", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2Fleet", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2Host", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2ImageBlockPublicAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2InstanceConnectEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2InstanceMetadataDefaults", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2InstanceState", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2LocalGatewayRoute", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2LocalGatewayRouteTableVpcAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2ManagedPrefixList", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2ManagedPrefixListEntry", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2NetworkInsightsAnalysis", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2NetworkInsightsPath", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2SerialConsoleAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2SubnetCidrReservation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2Tag", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TrafficMirrorFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TrafficMirrorFilterRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TrafficMirrorSession", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TrafficMirrorTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayConnect", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayConnectPeer", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayMulticastDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayMulticastDomainAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayMulticastGroupMember", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayMulticastGroupSource", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayPeeringAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayPeeringAttachmentAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayPolicyTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayPolicyTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayPrefixListReference", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayRoute", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayRouteTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayRouteTablePropagation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayVpcAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ec2TransitGatewayVpcAttachmentAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrPullThroughCacheRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrRegistryPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrRegistryScanningConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrReplicationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrRepository", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrRepositoryCreationTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrRepositoryPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrpublicRepository", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecrpublicRepositoryPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsAccountSettingDefault", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsCapacityProvider", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsClusterCapacityProviders", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsService", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsTaskDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/ecsTaskSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/efsAccessPoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/efsBackupPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/efsFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/efsFileSystemPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/efsMountTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/efsReplicationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/egressOnlyInternetGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/eip", _module)
pulumi.runtime.registerResourceModule("aws", "index/eipAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/eipDomainName", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksAccessEntry", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksAccessPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksAddon", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksFargateProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksIdentityProviderConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksNodeGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/eksPodIdentityAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticBeanstalkApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticBeanstalkApplicationVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticBeanstalkConfigurationTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticBeanstalkEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheGlobalReplicationGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheReplicationGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheServerlessCache", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheUserGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticacheUserGroupAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticsearchDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticsearchDomainPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticsearchDomainSamlOptions", _module)
pulumi.runtime.registerResourceModule("aws", "index/elasticsearchVpcEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/elastictranscoderPipeline", _module)
pulumi.runtime.registerResourceModule("aws", "index/elastictranscoderPreset", _module)
pulumi.runtime.registerResourceModule("aws", "index/elb", _module)
pulumi.runtime.registerResourceModule("aws", "index/elbAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrBlockPublicAccessConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrInstanceFleet", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrInstanceGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrManagedScalingPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrSecurityConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrStudio", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrStudioSessionMapping", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrcontainersJobTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrcontainersVirtualCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/emrserverlessApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/evidentlyFeature", _module)
pulumi.runtime.registerResourceModule("aws", "index/evidentlyLaunch", _module)
pulumi.runtime.registerResourceModule("aws", "index/evidentlyProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/evidentlySegment", _module)
pulumi.runtime.registerResourceModule("aws", "index/finspaceKxCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/finspaceKxDatabase", _module)
pulumi.runtime.registerResourceModule("aws", "index/finspaceKxDataview", _module)
pulumi.runtime.registerResourceModule("aws", "index/finspaceKxEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "index/finspaceKxScalingGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/finspaceKxUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/finspaceKxVolume", _module)
pulumi.runtime.registerResourceModule("aws", "index/fisExperimentTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/flowLog", _module)
pulumi.runtime.registerResourceModule("aws", "index/fmsAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/fmsPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/fmsResourceSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxBackup", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxDataRepositoryAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxFileCache", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxLustreFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxOntapFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxOntapStorageVirtualMachine", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxOntapVolume", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxOpenzfsFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxOpenzfsSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxOpenzfsVolume", _module)
pulumi.runtime.registerResourceModule("aws", "index/fsxWindowsFileSystem", _module)
pulumi.runtime.registerResourceModule("aws", "index/gameliftAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/gameliftBuild", _module)
pulumi.runtime.registerResourceModule("aws", "index/gameliftFleet", _module)
pulumi.runtime.registerResourceModule("aws", "index/gameliftGameServerGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/gameliftGameSessionQueue", _module)
pulumi.runtime.registerResourceModule("aws", "index/gameliftScript", _module)
pulumi.runtime.registerResourceModule("aws", "index/glacierVault", _module)
pulumi.runtime.registerResourceModule("aws", "index/glacierVaultLock", _module)
pulumi.runtime.registerResourceModule("aws", "index/globalacceleratorAccelerator", _module)
pulumi.runtime.registerResourceModule("aws", "index/globalacceleratorCrossAccountAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/globalacceleratorCustomRoutingAccelerator", _module)
pulumi.runtime.registerResourceModule("aws", "index/globalacceleratorCustomRoutingEndpointGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/globalacceleratorCustomRoutingListener", _module)
pulumi.runtime.registerResourceModule("aws", "index/globalacceleratorEndpointGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/globalacceleratorListener", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueCatalogDatabase", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueCatalogTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueCatalogTableOptimizer", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueClassifier", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueCrawler", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueDataCatalogEncryptionSettings", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueDataQualityRuleset", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueDevEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueJob", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueMlTransform", _module)
pulumi.runtime.registerResourceModule("aws", "index/gluePartition", _module)
pulumi.runtime.registerResourceModule("aws", "index/gluePartitionIndex", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueRegistry", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueSchema", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueSecurityConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueTrigger", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueUserDefinedFunction", _module)
pulumi.runtime.registerResourceModule("aws", "index/glueWorkflow", _module)
pulumi.runtime.registerResourceModule("aws", "index/grafanaLicenseAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/grafanaRoleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/grafanaWorkspace", _module)
pulumi.runtime.registerResourceModule("aws", "index/grafanaWorkspaceApiKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/grafanaWorkspaceSamlConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/grafanaWorkspaceServiceAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/grafanaWorkspaceServiceAccountToken", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyDetector", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyDetectorFeature", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyInviteAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyIpset", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyMalwareProtectionPlan", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyMember", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyOrganizationAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyOrganizationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyOrganizationConfigurationFeature", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyPublishingDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/guarddutyThreatintelset", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamAccessKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamAccountAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamAccountPasswordPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamGroupMembership", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamGroupPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamGroupPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamInstanceProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamOpenidConnectProvider", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamRole", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamRolePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamRolePolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamSamlProvider", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamSecurityTokenServicePreferences", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamServerCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamServiceLinkedRole", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamServiceSpecificCredential", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamSigningCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamUserGroupMembership", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamUserLoginProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamUserPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamUserPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamUserSshKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/iamVirtualMfaDevice", _module)
pulumi.runtime.registerResourceModule("aws", "index/identitystoreGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/identitystoreGroupMembership", _module)
pulumi.runtime.registerResourceModule("aws", "index/identitystoreUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderComponent", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderContainerRecipe", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderDistributionConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderImage", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderImagePipeline", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderImageRecipe", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderInfrastructureConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/imagebuilderWorkflow", _module)
pulumi.runtime.registerResourceModule("aws", "index/inspector2DelegatedAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/inspector2Enabler", _module)
pulumi.runtime.registerResourceModule("aws", "index/inspector2MemberAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/inspector2OrganizationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/inspectorAssessmentTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/inspectorAssessmentTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/inspectorResourceGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/instance", _module)
pulumi.runtime.registerResourceModule("aws", "index/internetGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/internetGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/internetmonitorMonitor", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotAuthorizer", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotBillingGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotCaCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotDomainConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotEventConfigurations", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotIndexingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotLoggingOptions", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotProvisioningTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotRoleAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotThing", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotThingGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotThingGroupMembership", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotThingPrincipalAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotThingType", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotTopicRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/iotTopicRuleDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/ivsChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/ivsPlaybackKeyPair", _module)
pulumi.runtime.registerResourceModule("aws", "index/ivsRecordingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/ivschatLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/ivschatRoom", _module)
pulumi.runtime.registerResourceModule("aws", "index/kendraDataSource", _module)
pulumi.runtime.registerResourceModule("aws", "index/kendraExperience", _module)
pulumi.runtime.registerResourceModule("aws", "index/kendraFaq", _module)
pulumi.runtime.registerResourceModule("aws", "index/kendraIndex", _module)
pulumi.runtime.registerResourceModule("aws", "index/kendraQuerySuggestionsBlockList", _module)
pulumi.runtime.registerResourceModule("aws", "index/kendraThesaurus", _module)
pulumi.runtime.registerResourceModule("aws", "index/keyPair", _module)
pulumi.runtime.registerResourceModule("aws", "index/keyspacesKeyspace", _module)
pulumi.runtime.registerResourceModule("aws", "index/keyspacesTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisAnalyticsApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisFirehoseDeliveryStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisStreamConsumer", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisVideoStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisanalyticsv2Application", _module)
pulumi.runtime.registerResourceModule("aws", "index/kinesisanalyticsv2ApplicationSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsCiphertext", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsCustomKeyStore", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsExternalKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsGrant", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsKeyPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsReplicaExternalKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/kmsReplicaKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/lakeformationDataCellsFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/lakeformationDataLakeSettings", _module)
pulumi.runtime.registerResourceModule("aws", "index/lakeformationLfTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/lakeformationPermissions", _module)
pulumi.runtime.registerResourceModule("aws", "index/lakeformationResource", _module)
pulumi.runtime.registerResourceModule("aws", "index/lakeformationResourceLfTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/lakeformationResourceLfTags", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaCodeSigningConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaEventSourceMapping", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaFunction", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaFunctionEventInvokeConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaFunctionUrl", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaInvocation", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaLayerVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaLayerVersionPermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaPermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaProvisionedConcurrencyConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/lambdaRuntimeManagementConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/launchConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/launchTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/lb", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbCookieStickinessPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbListener", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbListenerCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbListenerRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbSslNegotiationPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbTargetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbTargetGroupAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbTrustStore", _module)
pulumi.runtime.registerResourceModule("aws", "index/lbTrustStoreRevocation", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexBot", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexBotAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexIntent", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexSlotType", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexv2modelsBot", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexv2modelsBotLocale", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexv2modelsBotVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexv2modelsIntent", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexv2modelsSlot", _module)
pulumi.runtime.registerResourceModule("aws", "index/lexv2modelsSlotType", _module)
pulumi.runtime.registerResourceModule("aws", "index/licensemanagerAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/licensemanagerGrant", _module)
pulumi.runtime.registerResourceModule("aws", "index/licensemanagerGrantAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/licensemanagerLicenseConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailBucket", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailBucketAccessKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailBucketResourceAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailContainerService", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailContainerServiceDeploymentVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailDatabase", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailDisk", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailDiskAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailDistribution", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailDomainEntry", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailInstancePublicPorts", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailKeyPair", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailLb", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailLbAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailLbCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailLbCertificateAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailLbHttpsRedirectionPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailLbStickinessPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailStaticIp", _module)
pulumi.runtime.registerResourceModule("aws", "index/lightsailStaticIpAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/loadBalancerBackendServerPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/loadBalancerListenerPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/loadBalancerPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/locationGeofenceCollection", _module)
pulumi.runtime.registerResourceModule("aws", "index/locationMap", _module)
pulumi.runtime.registerResourceModule("aws", "index/locationPlaceIndex", _module)
pulumi.runtime.registerResourceModule("aws", "index/locationRouteCalculator", _module)
pulumi.runtime.registerResourceModule("aws", "index/locationTracker", _module)
pulumi.runtime.registerResourceModule("aws", "index/locationTrackerAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/m2Application", _module)
pulumi.runtime.registerResourceModule("aws", "index/m2Deployment", _module)
pulumi.runtime.registerResourceModule("aws", "index/m2Environment", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2Account", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2ClassificationExportConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2ClassificationJob", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2CustomDataIdentifier", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2FindingsFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2InvitationAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2Member", _module)
pulumi.runtime.registerResourceModule("aws", "index/macie2OrganizationAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/mainRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/mediaConvertQueue", _module)
pulumi.runtime.registerResourceModule("aws", "index/mediaPackageChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/mediaStoreContainer", _module)
pulumi.runtime.registerResourceModule("aws", "index/mediaStoreContainerPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/medialiveChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/medialiveInput", _module)
pulumi.runtime.registerResourceModule("aws", "index/medialiveInputSecurityGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/medialiveMultiplex", _module)
pulumi.runtime.registerResourceModule("aws", "index/medialiveMultiplexProgram", _module)
pulumi.runtime.registerResourceModule("aws", "index/memorydbAcl", _module)
pulumi.runtime.registerResourceModule("aws", "index/memorydbCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/memorydbParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/memorydbSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/memorydbSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/memorydbUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/mqBroker", _module)
pulumi.runtime.registerResourceModule("aws", "index/mqConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskClusterPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskReplicator", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskScramSecretAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskServerlessCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskVpcConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskconnectConnector", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskconnectCustomPlugin", _module)
pulumi.runtime.registerResourceModule("aws", "index/mskconnectWorkerConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/mwaaEnvironment", _module)
pulumi.runtime.registerResourceModule("aws", "index/natGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneClusterEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneClusterInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneClusterParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneClusterSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneEventSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneGlobalCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/neptuneSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkAcl", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkAclAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkAclRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkInterfaceAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkInterfaceSgAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkfirewallFirewall", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkfirewallFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkfirewallLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkfirewallResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkfirewallRuleGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkfirewallTlsInspectionConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerAttachmentAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerConnectAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerConnectPeer", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerCoreNetwork", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerCoreNetworkPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerCustomerGatewayAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerDevice", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerGlobalNetwork", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerLink", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerLinkAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerSite", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerSiteToSiteVpnAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerTransitGatewayConnectPeerAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerTransitGatewayPeering", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerTransitGatewayRegistration", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerTransitGatewayRouteTableAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmanagerVpcAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmonitorMonitor", _module)
pulumi.runtime.registerResourceModule("aws", "index/networkmonitorProbe", _module)
pulumi.runtime.registerResourceModule("aws", "index/oamLink", _module)
pulumi.runtime.registerResourceModule("aws", "index/oamSink", _module)
pulumi.runtime.registerResourceModule("aws", "index/oamSinkPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchDomainPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchDomainSamlOptions", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchInboundConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchOutboundConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchPackage", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchPackageAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchVpcEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchserverlessAccessPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchserverlessCollection", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchserverlessLifecyclePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchserverlessSecurityConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchserverlessSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/opensearchserverlessVpcEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksCustomLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksEcsClusterLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksGangliaLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksHaproxyLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksJavaAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksMemcachedLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksMysqlLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksNodejsAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksPermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksPhpAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksRailsAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksRdsDbInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksStack", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksStaticWebLayer", _module)
pulumi.runtime.registerResourceModule("aws", "index/opsworksUserProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/organizationsAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/organizationsDelegatedAdministrator", _module)
pulumi.runtime.registerResourceModule("aws", "index/organizationsOrganization", _module)
pulumi.runtime.registerResourceModule("aws", "index/organizationsOrganizationalUnit", _module)
pulumi.runtime.registerResourceModule("aws", "index/organizationsPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/organizationsPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/organizationsResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/osisPipeline", _module)
pulumi.runtime.registerResourceModule("aws", "index/paymentcryptographyKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/paymentcryptographyKeyAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointAdmChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointApnsChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointApnsSandboxChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointApnsVoipChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointApnsVoipSandboxChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointApp", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointBaiduChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointEmailChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointEmailTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointEventStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointGcmChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pinpointSmsChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/pipesPipe", _module)
pulumi.runtime.registerResourceModule("aws", "index/placementGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/prometheusAlertManagerDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/prometheusRuleGroupNamespace", _module)
pulumi.runtime.registerResourceModule("aws", "index/prometheusScraper", _module)
pulumi.runtime.registerResourceModule("aws", "index/prometheusWorkspace", _module)
pulumi.runtime.registerResourceModule("aws", "index/proxyProtocolPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/qldbLedger", _module)
pulumi.runtime.registerResourceModule("aws", "index/qldbStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightAccountSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightAnalysis", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightDashboard", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightDataSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightDataSource", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightFolder", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightFolderMembership", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightGroupMembership", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightIamPolicyAssignment", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightIngestion", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightNamespace", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightRefreshSchedule", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightTemplateAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightTheme", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/quicksightVpcConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/ramPrincipalAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ramResourceAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ramResourceShare", _module)
pulumi.runtime.registerResourceModule("aws", "index/ramResourceShareAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/ramSharingWithOrganization", _module)
pulumi.runtime.registerResourceModule("aws", "index/rbinRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsClusterActivityStream", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsClusterEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsClusterInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsClusterParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsClusterRoleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsCustomDbEngineVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsExportTask", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsGlobalCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsIntegration", _module)
pulumi.runtime.registerResourceModule("aws", "index/rdsReservedInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftAuthenticationProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftClusterIamRoles", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftClusterSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftDataShareAuthorization", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftDataShareConsumerAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftEndpointAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftEndpointAuthorization", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftEventSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftHsmClientCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftHsmConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftLogging", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftParameterGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftPartner", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftScheduledAction", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftSnapshotCopy", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftSnapshotCopyGrant", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftSnapshotSchedule", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftSnapshotScheduleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftSubnetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftUsageLimit", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftdataStatement", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftserverlessCustomDomainAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftserverlessEndpointAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftserverlessNamespace", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftserverlessResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftserverlessSnapshot", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftserverlessUsageLimit", _module)
pulumi.runtime.registerResourceModule("aws", "index/redshiftserverlessWorkgroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/rekognitionCollection", _module)
pulumi.runtime.registerResourceModule("aws", "index/rekognitionProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/rekognitionStreamProcessor", _module)
pulumi.runtime.registerResourceModule("aws", "index/resourceexplorer2Index", _module)
pulumi.runtime.registerResourceModule("aws", "index/resourceexplorer2View", _module)
pulumi.runtime.registerResourceModule("aws", "index/resourcegroupsGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/resourcegroupsResource", _module)
pulumi.runtime.registerResourceModule("aws", "index/rolesanywhereProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/rolesanywhereTrustAnchor", _module)
pulumi.runtime.registerResourceModule("aws", "index/route", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53CidrCollection", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53CidrLocation", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53DelegationSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53HealthCheck", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53HostedZoneDnssec", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53KeySigningKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53QueryLog", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53Record", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverDnssecConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverFirewallConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverFirewallDomainList", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverFirewallRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverFirewallRuleGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverFirewallRuleGroupAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverQueryLogConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverQueryLogConfigAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ResolverRuleAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53TrafficPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53TrafficPolicyInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53VpcAssociationAuthorization", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53Zone", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53ZoneAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53domainsDelegationSignerRecord", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53domainsRegisteredDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoverycontrolconfigCluster", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoverycontrolconfigControlPanel", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoverycontrolconfigRoutingControl", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoverycontrolconfigSafetyRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoveryreadinessCell", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoveryreadinessReadinessCheck", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoveryreadinessRecoveryGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/route53recoveryreadinessResourceSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/routeTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/routeTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/rumAppMonitor", _module)
pulumi.runtime.registerResourceModule("aws", "index/rumMetricsDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3AccessPoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3AccountPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3Bucket", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketAccelerateConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketAcl", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketAnalyticsConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketCorsConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketIntelligentTieringConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketInventory", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketLifecycleConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketLogging", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketMetric", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketNotification", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketObject", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketObjectLockConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketOwnershipControls", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketPublicAccessBlock", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketReplicationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketRequestPaymentConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketServerSideEncryptionConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketVersioning", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3BucketWebsiteConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3DirectoryBucket", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3Object", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3ObjectCopy", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlAccessGrant", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlAccessGrantsInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlAccessGrantsInstanceResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlAccessGrantsLocation", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlAccessPointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlBucket", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlBucketLifecycleConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlBucketPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlMultiRegionAccessPoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlMultiRegionAccessPointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlObjectLambdaAccessPoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlObjectLambdaAccessPointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3controlStorageLensConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/s3outpostsEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerApp", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerAppImageConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerCodeRepository", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerDataQualityJobDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerDevice", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerDeviceFleet", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerEndpointConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerFeatureGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerFlowDefinition", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerHumanTaskUi", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerImage", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerImageVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerModel", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerModelPackageGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerModelPackageGroupPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerMonitoringSchedule", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerNotebookInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerNotebookInstanceLifecycleConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerPipeline", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerProject", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerServicecatalogPortfolioStatus", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerSpace", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerStudioLifecycleConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerUserProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerWorkforce", _module)
pulumi.runtime.registerResourceModule("aws", "index/sagemakerWorkteam", _module)
pulumi.runtime.registerResourceModule("aws", "index/schedulerSchedule", _module)
pulumi.runtime.registerResourceModule("aws", "index/schedulerScheduleGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/schemasDiscoverer", _module)
pulumi.runtime.registerResourceModule("aws", "index/schemasRegistry", _module)
pulumi.runtime.registerResourceModule("aws", "index/schemasRegistryPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/schemasSchema", _module)
pulumi.runtime.registerResourceModule("aws", "index/secretsmanagerSecret", _module)
pulumi.runtime.registerResourceModule("aws", "index/secretsmanagerSecretPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/secretsmanagerSecretRotation", _module)
pulumi.runtime.registerResourceModule("aws", "index/secretsmanagerSecretVersion", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubActionTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubAutomationRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubConfigurationPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubConfigurationPolicyAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubFindingAggregator", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubInsight", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubInviteAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubMember", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubOrganizationAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubOrganizationConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubProductSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubStandardsControl", _module)
pulumi.runtime.registerResourceModule("aws", "index/securityhubStandardsSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/securitylakeAwsLogSource", _module)
pulumi.runtime.registerResourceModule("aws", "index/securitylakeCustomLogSource", _module)
pulumi.runtime.registerResourceModule("aws", "index/securitylakeDataLake", _module)
pulumi.runtime.registerResourceModule("aws", "index/securitylakeSubscriber", _module)
pulumi.runtime.registerResourceModule("aws", "index/securitylakeSubscriberNotification", _module)
pulumi.runtime.registerResourceModule("aws", "index/serverlessapplicationrepositoryCloudformationStack", _module)
pulumi.runtime.registerResourceModule("aws", "index/serviceDiscoveryHttpNamespace", _module)
pulumi.runtime.registerResourceModule("aws", "index/serviceDiscoveryInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/serviceDiscoveryPrivateDnsNamespace", _module)
pulumi.runtime.registerResourceModule("aws", "index/serviceDiscoveryPublicDnsNamespace", _module)
pulumi.runtime.registerResourceModule("aws", "index/serviceDiscoveryService", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogBudgetResourceAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogConstraint", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogOrganizationsAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogPortfolio", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogPortfolioShare", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogPrincipalPortfolioAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogProduct", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogProductPortfolioAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogProvisionedProduct", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogProvisioningArtifact", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogServiceAction", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogTagOption", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogTagOptionResourceAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicecatalogappregistryApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicequotasServiceQuota", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicequotasTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/servicequotasTemplateAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesActiveReceiptRuleSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesConfigurationSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesDomainDkim", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesDomainIdentity", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesDomainIdentityVerification", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesDomainMailFrom", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesEmailIdentity", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesEventDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesIdentityNotificationTopic", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesIdentityPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesReceiptFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesReceiptRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesReceiptRuleSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2AccountVdmAttributes", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2ConfigurationSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2ConfigurationSetEventDestination", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2ContactList", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2DedicatedIpAssignment", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2DedicatedIpPool", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2EmailIdentity", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2EmailIdentityFeedbackAttributes", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2EmailIdentityMailFromAttributes", _module)
pulumi.runtime.registerResourceModule("aws", "index/sesv2EmailIdentityPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/sfnActivity", _module)
pulumi.runtime.registerResourceModule("aws", "index/sfnAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/sfnStateMachine", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldApplicationLayerAutomaticResponse", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldDrtAccessLogBucketAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldDrtAccessRoleArnAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldProactiveEngagement", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldProtection", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldProtectionGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldProtectionHealthCheckAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/shieldSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/signerSigningJob", _module)
pulumi.runtime.registerResourceModule("aws", "index/signerSigningProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/signerSigningProfilePermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/simpledbDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/snapshotCreateVolumePermission", _module)
pulumi.runtime.registerResourceModule("aws", "index/snsPlatformApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/snsSmsPreferences", _module)
pulumi.runtime.registerResourceModule("aws", "index/snsTopic", _module)
pulumi.runtime.registerResourceModule("aws", "index/snsTopicDataProtectionPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/snsTopicPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/snsTopicSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/spotDatafeedSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/spotFleetRequest", _module)
pulumi.runtime.registerResourceModule("aws", "index/spotInstanceRequest", _module)
pulumi.runtime.registerResourceModule("aws", "index/sqsQueue", _module)
pulumi.runtime.registerResourceModule("aws", "index/sqsQueuePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/sqsQueueRedriveAllowPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/sqsQueueRedrivePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmActivation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmDefaultPatchBaseline", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmDocument", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmMaintenanceWindow", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmMaintenanceWindowTarget", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmMaintenanceWindowTask", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmParameter", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmPatchBaseline", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmPatchGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmResourceDataSync", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmServiceSetting", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmcontactsContact", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmcontactsContactChannel", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmcontactsPlan", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmcontactsRotation", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmincidentsReplicationSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssmincidentsResponsePlan", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminAccountAssignment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminApplication", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminApplicationAccessScope", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminApplicationAssignment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminApplicationAssignmentConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminCustomerManagedPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminInstanceAccessControlAttributes", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminManagedPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminPermissionSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminPermissionSetInlinePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminPermissionsBoundaryAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/ssoadminTrustedTokenIssuer", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayCache", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayCachedIscsiVolume", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayFileSystemAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayNfsFileShare", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewaySmbFileShare", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayStoredIscsiVolume", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayTapePool", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayUploadBuffer", _module)
pulumi.runtime.registerResourceModule("aws", "index/storagegatewayWorkingStorage", _module)
pulumi.runtime.registerResourceModule("aws", "index/subnet", _module)
pulumi.runtime.registerResourceModule("aws", "index/swfDomain", _module)
pulumi.runtime.registerResourceModule("aws", "index/syntheticsCanary", _module)
pulumi.runtime.registerResourceModule("aws", "index/syntheticsGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/syntheticsGroupAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/timestreaminfluxdbDbInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/timestreamwriteDatabase", _module)
pulumi.runtime.registerResourceModule("aws", "index/timestreamwriteTable", _module)
pulumi.runtime.registerResourceModule("aws", "index/transcribeLanguageModel", _module)
pulumi.runtime.registerResourceModule("aws", "index/transcribeMedicalVocabulary", _module)
pulumi.runtime.registerResourceModule("aws", "index/transcribeVocabulary", _module)
pulumi.runtime.registerResourceModule("aws", "index/transcribeVocabularyFilter", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferAccess", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferAgreement", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferCertificate", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferConnector", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferProfile", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferServer", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferSshKey", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferTag", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferUser", _module)
pulumi.runtime.registerResourceModule("aws", "index/transferWorkflow", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedaccessEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedaccessGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedaccessInstance", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedaccessInstanceLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedaccessInstanceTrustProviderAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedaccessTrustProvider", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedpermissionsIdentitySource", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedpermissionsPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedpermissionsPolicyStore", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedpermissionsPolicyTemplate", _module)
pulumi.runtime.registerResourceModule("aws", "index/verifiedpermissionsSchema", _module)
pulumi.runtime.registerResourceModule("aws", "index/volumeAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpc", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcDhcpOptions", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcDhcpOptionsAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpoint", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointConnectionNotification", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointPrivateDns", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointRouteTableAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointSecurityGroupAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointService", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointServiceAllowedPrincipal", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointServicePrivateDnsVerification", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcEndpointSubnetAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpam", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamOrganizationAdminAccount", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamPool", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamPoolCidr", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamPoolCidrAllocation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamPreviewNextCidr", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamResourceDiscovery", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamResourceDiscoveryAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpamScope", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpv4CidrBlockAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcIpv6CidrBlockAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcNetworkPerformanceMetricSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcPeeringConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcPeeringConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcPeeringConnectionOptions", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcSecurityGroupEgressRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpcSecurityGroupIngressRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeAccessLogSubscription", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeAuthPolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeListener", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeListenerRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeResourcePolicy", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeService", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeServiceNetwork", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeServiceNetworkServiceAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeServiceNetworkVpcAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeTargetGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpclatticeTargetGroupAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpnConnection", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpnConnectionRoute", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpnGateway", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpnGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("aws", "index/vpnGatewayRoutePropagation", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafByteMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafGeoMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafIpset", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafRateBasedRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafRegexMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafRegexPatternSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafRuleGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafSizeConstraintSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafSqlInjectionMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafWebAcl", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafXssMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalByteMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalGeoMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalIpset", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalRateBasedRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalRegexMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalRegexPatternSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalRule", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalRuleGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalSizeConstraintSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalSqlInjectionMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalWebAcl", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalWebAclAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafregionalXssMatchSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafv2IpSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafv2RegexPatternSet", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafv2RuleGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafv2WebAcl", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafv2WebAclAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/wafv2WebAclLoggingConfiguration", _module)
pulumi.runtime.registerResourceModule("aws", "index/worklinkFleet", _module)
pulumi.runtime.registerResourceModule("aws", "index/worklinkWebsiteCertificateAuthorityAssociation", _module)
pulumi.runtime.registerResourceModule("aws", "index/workspacesConnectionAlias", _module)
pulumi.runtime.registerResourceModule("aws", "index/workspacesDirectory", _module)
pulumi.runtime.registerResourceModule("aws", "index/workspacesIpGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/workspacesWorkspace", _module)
pulumi.runtime.registerResourceModule("aws", "index/xrayEncryptionConfig", _module)
pulumi.runtime.registerResourceModule("aws", "index/xrayGroup", _module)
pulumi.runtime.registerResourceModule("aws", "index/xraySamplingRule", _module)
pulumi.runtime.registerResourcePackage("aws", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aws") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
