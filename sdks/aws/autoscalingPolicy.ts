// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutoscalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoscalingPolicyState, opts?: pulumi.CustomResourceOptions): AutoscalingPolicy {
        return new AutoscalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/autoscalingPolicy:AutoscalingPolicy';

    /**
     * Returns true if the given object is an instance of AutoscalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingPolicy.__pulumiType;
    }

    public readonly adjustmentType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoscalingGroupName!: pulumi.Output<string>;
    public readonly cooldown!: pulumi.Output<number | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly estimatedInstanceWarmup!: pulumi.Output<number | undefined>;
    public readonly metricAggregationType!: pulumi.Output<string>;
    public readonly minAdjustmentMagnitude!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly policyType!: pulumi.Output<string | undefined>;
    public readonly predictiveScalingConfiguration!: pulumi.Output<outputs.AutoscalingPolicyPredictiveScalingConfiguration | undefined>;
    public readonly scalingAdjustment!: pulumi.Output<number | undefined>;
    public readonly stepAdjustments!: pulumi.Output<outputs.AutoscalingPolicyStepAdjustment[] | undefined>;
    public readonly targetTrackingConfiguration!: pulumi.Output<outputs.AutoscalingPolicyTargetTrackingConfiguration | undefined>;

    /**
     * Create a AutoscalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoscalingPolicyArgs | AutoscalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoscalingPolicyState | undefined;
            resourceInputs["adjustmentType"] = state ? state.adjustmentType : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoscalingGroupName"] = state ? state.autoscalingGroupName : undefined;
            resourceInputs["cooldown"] = state ? state.cooldown : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["estimatedInstanceWarmup"] = state ? state.estimatedInstanceWarmup : undefined;
            resourceInputs["metricAggregationType"] = state ? state.metricAggregationType : undefined;
            resourceInputs["minAdjustmentMagnitude"] = state ? state.minAdjustmentMagnitude : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["predictiveScalingConfiguration"] = state ? state.predictiveScalingConfiguration : undefined;
            resourceInputs["scalingAdjustment"] = state ? state.scalingAdjustment : undefined;
            resourceInputs["stepAdjustments"] = state ? state.stepAdjustments : undefined;
            resourceInputs["targetTrackingConfiguration"] = state ? state.targetTrackingConfiguration : undefined;
        } else {
            const args = argsOrState as AutoscalingPolicyArgs | undefined;
            if ((!args || args.autoscalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoscalingGroupName'");
            }
            resourceInputs["adjustmentType"] = args ? args.adjustmentType : undefined;
            resourceInputs["autoscalingGroupName"] = args ? args.autoscalingGroupName : undefined;
            resourceInputs["cooldown"] = args ? args.cooldown : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["estimatedInstanceWarmup"] = args ? args.estimatedInstanceWarmup : undefined;
            resourceInputs["metricAggregationType"] = args ? args.metricAggregationType : undefined;
            resourceInputs["minAdjustmentMagnitude"] = args ? args.minAdjustmentMagnitude : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["predictiveScalingConfiguration"] = args ? args.predictiveScalingConfiguration : undefined;
            resourceInputs["scalingAdjustment"] = args ? args.scalingAdjustment : undefined;
            resourceInputs["stepAdjustments"] = args ? args.stepAdjustments : undefined;
            resourceInputs["targetTrackingConfiguration"] = args ? args.targetTrackingConfiguration : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoscalingPolicy resources.
 */
export interface AutoscalingPolicyState {
    adjustmentType?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    autoscalingGroupName?: pulumi.Input<string>;
    cooldown?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    estimatedInstanceWarmup?: pulumi.Input<number>;
    metricAggregationType?: pulumi.Input<string>;
    minAdjustmentMagnitude?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    policyType?: pulumi.Input<string>;
    predictiveScalingConfiguration?: pulumi.Input<inputs.AutoscalingPolicyPredictiveScalingConfiguration>;
    scalingAdjustment?: pulumi.Input<number>;
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.AutoscalingPolicyStepAdjustment>[]>;
    targetTrackingConfiguration?: pulumi.Input<inputs.AutoscalingPolicyTargetTrackingConfiguration>;
}

/**
 * The set of arguments for constructing a AutoscalingPolicy resource.
 */
export interface AutoscalingPolicyArgs {
    adjustmentType?: pulumi.Input<string>;
    autoscalingGroupName: pulumi.Input<string>;
    cooldown?: pulumi.Input<number>;
    enabled?: pulumi.Input<boolean>;
    estimatedInstanceWarmup?: pulumi.Input<number>;
    metricAggregationType?: pulumi.Input<string>;
    minAdjustmentMagnitude?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    policyType?: pulumi.Input<string>;
    predictiveScalingConfiguration?: pulumi.Input<inputs.AutoscalingPolicyPredictiveScalingConfiguration>;
    scalingAdjustment?: pulumi.Input<number>;
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.AutoscalingPolicyStepAdjustment>[]>;
    targetTrackingConfiguration?: pulumi.Input<inputs.AutoscalingPolicyTargetTrackingConfiguration>;
}
