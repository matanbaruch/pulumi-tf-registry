// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DbProxyTarget extends pulumi.CustomResource {
    /**
     * Get an existing DbProxyTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbProxyTargetState, opts?: pulumi.CustomResourceOptions): DbProxyTarget {
        return new DbProxyTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/dbProxyTarget:DbProxyTarget';

    /**
     * Returns true if the given object is an instance of DbProxyTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbProxyTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbProxyTarget.__pulumiType;
    }

    public readonly dbClusterIdentifier!: pulumi.Output<string | undefined>;
    public readonly dbInstanceIdentifier!: pulumi.Output<string | undefined>;
    public readonly dbProxyName!: pulumi.Output<string>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public /*out*/ readonly rdsResourceId!: pulumi.Output<string>;
    public /*out*/ readonly targetArn!: pulumi.Output<string>;
    public readonly targetGroupName!: pulumi.Output<string>;
    public /*out*/ readonly trackedClusterId!: pulumi.Output<string>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DbProxyTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbProxyTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbProxyTargetArgs | DbProxyTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbProxyTargetState | undefined;
            resourceInputs["dbClusterIdentifier"] = state ? state.dbClusterIdentifier : undefined;
            resourceInputs["dbInstanceIdentifier"] = state ? state.dbInstanceIdentifier : undefined;
            resourceInputs["dbProxyName"] = state ? state.dbProxyName : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["rdsResourceId"] = state ? state.rdsResourceId : undefined;
            resourceInputs["targetArn"] = state ? state.targetArn : undefined;
            resourceInputs["targetGroupName"] = state ? state.targetGroupName : undefined;
            resourceInputs["trackedClusterId"] = state ? state.trackedClusterId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DbProxyTargetArgs | undefined;
            if ((!args || args.dbProxyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbProxyName'");
            }
            if ((!args || args.targetGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetGroupName'");
            }
            resourceInputs["dbClusterIdentifier"] = args ? args.dbClusterIdentifier : undefined;
            resourceInputs["dbInstanceIdentifier"] = args ? args.dbInstanceIdentifier : undefined;
            resourceInputs["dbProxyName"] = args ? args.dbProxyName : undefined;
            resourceInputs["targetGroupName"] = args ? args.targetGroupName : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["rdsResourceId"] = undefined /*out*/;
            resourceInputs["targetArn"] = undefined /*out*/;
            resourceInputs["trackedClusterId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbProxyTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbProxyTarget resources.
 */
export interface DbProxyTargetState {
    dbClusterIdentifier?: pulumi.Input<string>;
    dbInstanceIdentifier?: pulumi.Input<string>;
    dbProxyName?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    rdsResourceId?: pulumi.Input<string>;
    targetArn?: pulumi.Input<string>;
    targetGroupName?: pulumi.Input<string>;
    trackedClusterId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbProxyTarget resource.
 */
export interface DbProxyTargetArgs {
    dbClusterIdentifier?: pulumi.Input<string>;
    dbInstanceIdentifier?: pulumi.Input<string>;
    dbProxyName: pulumi.Input<string>;
    targetGroupName: pulumi.Input<string>;
}
