// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2ClientVpnAuthorizationRule extends pulumi.CustomResource {
    /**
     * Get an existing Ec2ClientVpnAuthorizationRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2ClientVpnAuthorizationRuleState, opts?: pulumi.CustomResourceOptions): Ec2ClientVpnAuthorizationRule {
        return new Ec2ClientVpnAuthorizationRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ec2ClientVpnAuthorizationRule:Ec2ClientVpnAuthorizationRule';

    /**
     * Returns true if the given object is an instance of Ec2ClientVpnAuthorizationRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2ClientVpnAuthorizationRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2ClientVpnAuthorizationRule.__pulumiType;
    }

    public readonly accessGroupId!: pulumi.Output<string | undefined>;
    public readonly authorizeAllGroups!: pulumi.Output<boolean | undefined>;
    public readonly clientVpnEndpointId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly targetNetworkCidr!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.Ec2ClientVpnAuthorizationRuleTimeouts | undefined>;

    /**
     * Create a Ec2ClientVpnAuthorizationRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2ClientVpnAuthorizationRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2ClientVpnAuthorizationRuleArgs | Ec2ClientVpnAuthorizationRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2ClientVpnAuthorizationRuleState | undefined;
            resourceInputs["accessGroupId"] = state ? state.accessGroupId : undefined;
            resourceInputs["authorizeAllGroups"] = state ? state.authorizeAllGroups : undefined;
            resourceInputs["clientVpnEndpointId"] = state ? state.clientVpnEndpointId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["targetNetworkCidr"] = state ? state.targetNetworkCidr : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as Ec2ClientVpnAuthorizationRuleArgs | undefined;
            if ((!args || args.clientVpnEndpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientVpnEndpointId'");
            }
            if ((!args || args.targetNetworkCidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetNetworkCidr'");
            }
            resourceInputs["accessGroupId"] = args ? args.accessGroupId : undefined;
            resourceInputs["authorizeAllGroups"] = args ? args.authorizeAllGroups : undefined;
            resourceInputs["clientVpnEndpointId"] = args ? args.clientVpnEndpointId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["targetNetworkCidr"] = args ? args.targetNetworkCidr : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2ClientVpnAuthorizationRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2ClientVpnAuthorizationRule resources.
 */
export interface Ec2ClientVpnAuthorizationRuleState {
    accessGroupId?: pulumi.Input<string>;
    authorizeAllGroups?: pulumi.Input<boolean>;
    clientVpnEndpointId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    targetNetworkCidr?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Ec2ClientVpnAuthorizationRuleTimeouts>;
}

/**
 * The set of arguments for constructing a Ec2ClientVpnAuthorizationRule resource.
 */
export interface Ec2ClientVpnAuthorizationRuleArgs {
    accessGroupId?: pulumi.Input<string>;
    authorizeAllGroups?: pulumi.Input<boolean>;
    clientVpnEndpointId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    targetNetworkCidr: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Ec2ClientVpnAuthorizationRuleTimeouts>;
}
