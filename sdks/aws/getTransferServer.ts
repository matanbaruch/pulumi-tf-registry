// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getTransferServer(args: GetTransferServerArgs, opts?: pulumi.InvokeOptions): Promise<GetTransferServerResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getTransferServer:getTransferServer", {
        "id": args.id,
        "serverId": args.serverId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTransferServer.
 */
export interface GetTransferServerArgs {
    id?: string;
    serverId: string;
}

/**
 * A collection of values returned by getTransferServer.
 */
export interface GetTransferServerResult {
    readonly arn: string;
    readonly certificate: string;
    readonly domain: string;
    readonly endpoint: string;
    readonly endpointType: string;
    readonly id: string;
    readonly identityProviderType: string;
    readonly invocationRole: string;
    readonly loggingRole: string;
    readonly protocols: string[];
    readonly securityPolicyName: string;
    readonly serverId: string;
    readonly structuredLogDestinations: string[];
    readonly url: string;
}
export function getTransferServerOutput(args: GetTransferServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransferServerResult> {
    return pulumi.output(args).apply((a: any) => getTransferServer(a, opts))
}

/**
 * A collection of arguments for invoking getTransferServer.
 */
export interface GetTransferServerOutputArgs {
    id?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
}
