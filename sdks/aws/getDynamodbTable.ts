// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDynamodbTable(args: GetDynamodbTableArgs, opts?: pulumi.InvokeOptions): Promise<GetDynamodbTableResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getDynamodbTable:getDynamodbTable", {
        "id": args.id,
        "name": args.name,
        "serverSideEncryption": args.serverSideEncryption,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDynamodbTable.
 */
export interface GetDynamodbTableArgs {
    id?: string;
    name: string;
    serverSideEncryption?: inputs.GetDynamodbTableServerSideEncryption;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getDynamodbTable.
 */
export interface GetDynamodbTableResult {
    readonly arn: string;
    readonly attributes: outputs.GetDynamodbTableAttribute[];
    readonly billingMode: string;
    readonly deletionProtectionEnabled: boolean;
    readonly globalSecondaryIndices: outputs.GetDynamodbTableGlobalSecondaryIndex[];
    readonly hashKey: string;
    readonly id: string;
    readonly localSecondaryIndices: outputs.GetDynamodbTableLocalSecondaryIndex[];
    readonly name: string;
    readonly pointInTimeRecoveries: outputs.GetDynamodbTablePointInTimeRecovery[];
    readonly rangeKey: string;
    readonly readCapacity: number;
    readonly replicas: outputs.GetDynamodbTableReplica[];
    readonly serverSideEncryption?: outputs.GetDynamodbTableServerSideEncryption;
    readonly streamArn: string;
    readonly streamEnabled: boolean;
    readonly streamLabel: string;
    readonly streamViewType: string;
    readonly tableClass: string;
    readonly tags: {[key: string]: string};
    readonly ttls: outputs.GetDynamodbTableTtl[];
    readonly writeCapacity: number;
}
export function getDynamodbTableOutput(args: GetDynamodbTableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDynamodbTableResult> {
    return pulumi.output(args).apply((a: any) => getDynamodbTable(a, opts))
}

/**
 * A collection of arguments for invoking getDynamodbTable.
 */
export interface GetDynamodbTableOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    serverSideEncryption?: pulumi.Input<inputs.GetDynamodbTableServerSideEncryptionArgs>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
