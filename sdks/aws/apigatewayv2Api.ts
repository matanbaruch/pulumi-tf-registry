// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Apigatewayv2Api extends pulumi.CustomResource {
    /**
     * Get an existing Apigatewayv2Api resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Apigatewayv2ApiState, opts?: pulumi.CustomResourceOptions): Apigatewayv2Api {
        return new Apigatewayv2Api(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/apigatewayv2Api:Apigatewayv2Api';

    /**
     * Returns true if the given object is an instance of Apigatewayv2Api.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Apigatewayv2Api {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Apigatewayv2Api.__pulumiType;
    }

    public /*out*/ readonly apiEndpoint!: pulumi.Output<string>;
    public readonly apiKeySelectionExpression!: pulumi.Output<string | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly body!: pulumi.Output<string | undefined>;
    public readonly corsConfiguration!: pulumi.Output<outputs.Apigatewayv2ApiCorsConfiguration | undefined>;
    public readonly credentialsArn!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disableExecuteApiEndpoint!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly executionArn!: pulumi.Output<string>;
    public readonly failOnWarnings!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly protocolType!: pulumi.Output<string>;
    public readonly routeKey!: pulumi.Output<string | undefined>;
    public readonly routeSelectionExpression!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly version!: pulumi.Output<string | undefined>;

    /**
     * Create a Apigatewayv2Api resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Apigatewayv2ApiArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Apigatewayv2ApiArgs | Apigatewayv2ApiState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Apigatewayv2ApiState | undefined;
            resourceInputs["apiEndpoint"] = state ? state.apiEndpoint : undefined;
            resourceInputs["apiKeySelectionExpression"] = state ? state.apiKeySelectionExpression : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["corsConfiguration"] = state ? state.corsConfiguration : undefined;
            resourceInputs["credentialsArn"] = state ? state.credentialsArn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableExecuteApiEndpoint"] = state ? state.disableExecuteApiEndpoint : undefined;
            resourceInputs["executionArn"] = state ? state.executionArn : undefined;
            resourceInputs["failOnWarnings"] = state ? state.failOnWarnings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["routeKey"] = state ? state.routeKey : undefined;
            resourceInputs["routeSelectionExpression"] = state ? state.routeSelectionExpression : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as Apigatewayv2ApiArgs | undefined;
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            resourceInputs["apiKeySelectionExpression"] = args ? args.apiKeySelectionExpression : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["corsConfiguration"] = args ? args.corsConfiguration : undefined;
            resourceInputs["credentialsArn"] = args ? args.credentialsArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableExecuteApiEndpoint"] = args ? args.disableExecuteApiEndpoint : undefined;
            resourceInputs["failOnWarnings"] = args ? args.failOnWarnings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["routeKey"] = args ? args.routeKey : undefined;
            resourceInputs["routeSelectionExpression"] = args ? args.routeSelectionExpression : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["apiEndpoint"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["executionArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Apigatewayv2Api.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Apigatewayv2Api resources.
 */
export interface Apigatewayv2ApiState {
    apiEndpoint?: pulumi.Input<string>;
    apiKeySelectionExpression?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    body?: pulumi.Input<string>;
    corsConfiguration?: pulumi.Input<inputs.Apigatewayv2ApiCorsConfiguration>;
    credentialsArn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableExecuteApiEndpoint?: pulumi.Input<boolean>;
    executionArn?: pulumi.Input<string>;
    failOnWarnings?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    protocolType?: pulumi.Input<string>;
    routeKey?: pulumi.Input<string>;
    routeSelectionExpression?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    target?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Apigatewayv2Api resource.
 */
export interface Apigatewayv2ApiArgs {
    apiKeySelectionExpression?: pulumi.Input<string>;
    body?: pulumi.Input<string>;
    corsConfiguration?: pulumi.Input<inputs.Apigatewayv2ApiCorsConfiguration>;
    credentialsArn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableExecuteApiEndpoint?: pulumi.Input<boolean>;
    failOnWarnings?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    protocolType: pulumi.Input<string>;
    routeKey?: pulumi.Input<string>;
    routeSelectionExpression?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    target?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}
