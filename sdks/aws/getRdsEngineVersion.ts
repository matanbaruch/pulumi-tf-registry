// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRdsEngineVersion(args: GetRdsEngineVersionArgs, opts?: pulumi.InvokeOptions): Promise<GetRdsEngineVersionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getRdsEngineVersion:getRdsEngineVersion", {
        "defaultOnly": args.defaultOnly,
        "engine": args.engine,
        "filters": args.filters,
        "hasMajorTarget": args.hasMajorTarget,
        "hasMinorTarget": args.hasMinorTarget,
        "id": args.id,
        "includeAll": args.includeAll,
        "latest": args.latest,
        "parameterGroupFamily": args.parameterGroupFamily,
        "preferredMajorTargets": args.preferredMajorTargets,
        "preferredUpgradeTargets": args.preferredUpgradeTargets,
        "preferredVersions": args.preferredVersions,
        "version": args.version,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRdsEngineVersion.
 */
export interface GetRdsEngineVersionArgs {
    defaultOnly?: boolean;
    engine: string;
    filters?: inputs.GetRdsEngineVersionFilter[];
    hasMajorTarget?: boolean;
    hasMinorTarget?: boolean;
    id?: string;
    includeAll?: boolean;
    latest?: boolean;
    parameterGroupFamily?: string;
    preferredMajorTargets?: string[];
    preferredUpgradeTargets?: string[];
    preferredVersions?: string[];
    version?: string;
}

/**
 * A collection of values returned by getRdsEngineVersion.
 */
export interface GetRdsEngineVersionResult {
    readonly defaultCharacterSet: string;
    readonly defaultOnly?: boolean;
    readonly engine: string;
    readonly engineDescription: string;
    readonly exportableLogTypes: string[];
    readonly filters?: outputs.GetRdsEngineVersionFilter[];
    readonly hasMajorTarget?: boolean;
    readonly hasMinorTarget?: boolean;
    readonly id: string;
    readonly includeAll?: boolean;
    readonly latest?: boolean;
    readonly parameterGroupFamily: string;
    readonly preferredMajorTargets?: string[];
    readonly preferredUpgradeTargets?: string[];
    readonly preferredVersions?: string[];
    readonly status: string;
    readonly supportedCharacterSets: string[];
    readonly supportedFeatureNames: string[];
    readonly supportedModes: string[];
    readonly supportedTimezones: string[];
    readonly supportsGlobalDatabases: boolean;
    readonly supportsLimitlessDatabase: boolean;
    readonly supportsLogExportsToCloudwatch: boolean;
    readonly supportsParallelQuery: boolean;
    readonly supportsReadReplica: boolean;
    readonly validMajorTargets: string[];
    readonly validMinorTargets: string[];
    readonly validUpgradeTargets: string[];
    readonly version: string;
    readonly versionActual: string;
    readonly versionDescription: string;
}
export function getRdsEngineVersionOutput(args: GetRdsEngineVersionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRdsEngineVersionResult> {
    return pulumi.output(args).apply((a: any) => getRdsEngineVersion(a, opts))
}

/**
 * A collection of arguments for invoking getRdsEngineVersion.
 */
export interface GetRdsEngineVersionOutputArgs {
    defaultOnly?: pulumi.Input<boolean>;
    engine: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetRdsEngineVersionFilterArgs>[]>;
    hasMajorTarget?: pulumi.Input<boolean>;
    hasMinorTarget?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    includeAll?: pulumi.Input<boolean>;
    latest?: pulumi.Input<boolean>;
    parameterGroupFamily?: pulumi.Input<string>;
    preferredMajorTargets?: pulumi.Input<pulumi.Input<string>[]>;
    preferredUpgradeTargets?: pulumi.Input<pulumi.Input<string>[]>;
    preferredVersions?: pulumi.Input<pulumi.Input<string>[]>;
    version?: pulumi.Input<string>;
}
