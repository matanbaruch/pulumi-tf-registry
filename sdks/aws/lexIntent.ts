// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LexIntent extends pulumi.CustomResource {
    /**
     * Get an existing LexIntent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LexIntentState, opts?: pulumi.CustomResourceOptions): LexIntent {
        return new LexIntent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lexIntent:LexIntent';

    /**
     * Returns true if the given object is an instance of LexIntent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LexIntent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LexIntent.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly checksum!: pulumi.Output<string>;
    public readonly conclusionStatement!: pulumi.Output<outputs.LexIntentConclusionStatement | undefined>;
    public readonly confirmationPrompt!: pulumi.Output<outputs.LexIntentConfirmationPrompt | undefined>;
    public readonly createVersion!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dialogCodeHook!: pulumi.Output<outputs.LexIntentDialogCodeHook | undefined>;
    public readonly followUpPrompt!: pulumi.Output<outputs.LexIntentFollowUpPrompt | undefined>;
    public readonly fulfillmentActivity!: pulumi.Output<outputs.LexIntentFulfillmentActivity>;
    public /*out*/ readonly lastUpdatedDate!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parentIntentSignature!: pulumi.Output<string | undefined>;
    public readonly rejectionStatement!: pulumi.Output<outputs.LexIntentRejectionStatement | undefined>;
    public readonly sampleUtterances!: pulumi.Output<string[] | undefined>;
    public readonly slots!: pulumi.Output<outputs.LexIntentSlot[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LexIntentTimeouts | undefined>;
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a LexIntent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LexIntentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LexIntentArgs | LexIntentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LexIntentState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["conclusionStatement"] = state ? state.conclusionStatement : undefined;
            resourceInputs["confirmationPrompt"] = state ? state.confirmationPrompt : undefined;
            resourceInputs["createVersion"] = state ? state.createVersion : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dialogCodeHook"] = state ? state.dialogCodeHook : undefined;
            resourceInputs["followUpPrompt"] = state ? state.followUpPrompt : undefined;
            resourceInputs["fulfillmentActivity"] = state ? state.fulfillmentActivity : undefined;
            resourceInputs["lastUpdatedDate"] = state ? state.lastUpdatedDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentIntentSignature"] = state ? state.parentIntentSignature : undefined;
            resourceInputs["rejectionStatement"] = state ? state.rejectionStatement : undefined;
            resourceInputs["sampleUtterances"] = state ? state.sampleUtterances : undefined;
            resourceInputs["slots"] = state ? state.slots : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as LexIntentArgs | undefined;
            if ((!args || args.fulfillmentActivity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fulfillmentActivity'");
            }
            resourceInputs["conclusionStatement"] = args ? args.conclusionStatement : undefined;
            resourceInputs["confirmationPrompt"] = args ? args.confirmationPrompt : undefined;
            resourceInputs["createVersion"] = args ? args.createVersion : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dialogCodeHook"] = args ? args.dialogCodeHook : undefined;
            resourceInputs["followUpPrompt"] = args ? args.followUpPrompt : undefined;
            resourceInputs["fulfillmentActivity"] = args ? args.fulfillmentActivity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentIntentSignature"] = args ? args.parentIntentSignature : undefined;
            resourceInputs["rejectionStatement"] = args ? args.rejectionStatement : undefined;
            resourceInputs["sampleUtterances"] = args ? args.sampleUtterances : undefined;
            resourceInputs["slots"] = args ? args.slots : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["lastUpdatedDate"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LexIntent.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LexIntent resources.
 */
export interface LexIntentState {
    arn?: pulumi.Input<string>;
    checksum?: pulumi.Input<string>;
    conclusionStatement?: pulumi.Input<inputs.LexIntentConclusionStatement>;
    confirmationPrompt?: pulumi.Input<inputs.LexIntentConfirmationPrompt>;
    createVersion?: pulumi.Input<boolean>;
    createdDate?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dialogCodeHook?: pulumi.Input<inputs.LexIntentDialogCodeHook>;
    followUpPrompt?: pulumi.Input<inputs.LexIntentFollowUpPrompt>;
    fulfillmentActivity?: pulumi.Input<inputs.LexIntentFulfillmentActivity>;
    lastUpdatedDate?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parentIntentSignature?: pulumi.Input<string>;
    rejectionStatement?: pulumi.Input<inputs.LexIntentRejectionStatement>;
    sampleUtterances?: pulumi.Input<pulumi.Input<string>[]>;
    slots?: pulumi.Input<pulumi.Input<inputs.LexIntentSlot>[]>;
    timeouts?: pulumi.Input<inputs.LexIntentTimeouts>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LexIntent resource.
 */
export interface LexIntentArgs {
    conclusionStatement?: pulumi.Input<inputs.LexIntentConclusionStatement>;
    confirmationPrompt?: pulumi.Input<inputs.LexIntentConfirmationPrompt>;
    createVersion?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dialogCodeHook?: pulumi.Input<inputs.LexIntentDialogCodeHook>;
    followUpPrompt?: pulumi.Input<inputs.LexIntentFollowUpPrompt>;
    fulfillmentActivity: pulumi.Input<inputs.LexIntentFulfillmentActivity>;
    name?: pulumi.Input<string>;
    parentIntentSignature?: pulumi.Input<string>;
    rejectionStatement?: pulumi.Input<inputs.LexIntentRejectionStatement>;
    sampleUtterances?: pulumi.Input<pulumi.Input<string>[]>;
    slots?: pulumi.Input<pulumi.Input<inputs.LexIntentSlot>[]>;
    timeouts?: pulumi.Input<inputs.LexIntentTimeouts>;
}
