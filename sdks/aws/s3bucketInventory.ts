// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3BucketInventory extends pulumi.CustomResource {
    /**
     * Get an existing S3BucketInventory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketInventoryState, opts?: pulumi.CustomResourceOptions): S3BucketInventory {
        return new S3BucketInventory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/s3BucketInventory:S3BucketInventory';

    /**
     * Returns true if the given object is an instance of S3BucketInventory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3BucketInventory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3BucketInventory.__pulumiType;
    }

    public readonly bucket!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<outputs.S3BucketInventoryDestination>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly filter!: pulumi.Output<outputs.S3BucketInventoryFilter | undefined>;
    public readonly includedObjectVersions!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly optionalFields!: pulumi.Output<string[] | undefined>;
    public readonly schedule!: pulumi.Output<outputs.S3BucketInventorySchedule>;

    /**
     * Create a S3BucketInventory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3BucketInventoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketInventoryArgs | S3BucketInventoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketInventoryState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["includedObjectVersions"] = state ? state.includedObjectVersions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optionalFields"] = state ? state.optionalFields : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
        } else {
            const args = argsOrState as S3BucketInventoryArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.includedObjectVersions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'includedObjectVersions'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["includedObjectVersions"] = args ? args.includedObjectVersions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optionalFields"] = args ? args.optionalFields : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3BucketInventory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3BucketInventory resources.
 */
export interface S3BucketInventoryState {
    bucket?: pulumi.Input<string>;
    destination?: pulumi.Input<inputs.S3BucketInventoryDestination>;
    enabled?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.S3BucketInventoryFilter>;
    includedObjectVersions?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optionalFields?: pulumi.Input<pulumi.Input<string>[]>;
    schedule?: pulumi.Input<inputs.S3BucketInventorySchedule>;
}

/**
 * The set of arguments for constructing a S3BucketInventory resource.
 */
export interface S3BucketInventoryArgs {
    bucket: pulumi.Input<string>;
    destination: pulumi.Input<inputs.S3BucketInventoryDestination>;
    enabled?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.S3BucketInventoryFilter>;
    includedObjectVersions: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    optionalFields?: pulumi.Input<pulumi.Input<string>[]>;
    schedule: pulumi.Input<inputs.S3BucketInventorySchedule>;
}
