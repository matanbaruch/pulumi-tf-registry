// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AppconfigDeployment extends pulumi.CustomResource {
    /**
     * Get an existing AppconfigDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppconfigDeploymentState, opts?: pulumi.CustomResourceOptions): AppconfigDeployment {
        return new AppconfigDeployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/appconfigDeployment:AppconfigDeployment';

    /**
     * Returns true if the given object is an instance of AppconfigDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppconfigDeployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppconfigDeployment.__pulumiType;
    }

    public readonly applicationId!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly configurationProfileId!: pulumi.Output<string>;
    public readonly configurationVersion!: pulumi.Output<string>;
    public /*out*/ readonly deploymentNumber!: pulumi.Output<number>;
    public readonly deploymentStrategyId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly environmentId!: pulumi.Output<string>;
    public /*out*/ readonly kmsKeyArn!: pulumi.Output<string>;
    public readonly kmsKeyIdentifier!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a AppconfigDeployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppconfigDeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppconfigDeploymentArgs | AppconfigDeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppconfigDeploymentState | undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["configurationProfileId"] = state ? state.configurationProfileId : undefined;
            resourceInputs["configurationVersion"] = state ? state.configurationVersion : undefined;
            resourceInputs["deploymentNumber"] = state ? state.deploymentNumber : undefined;
            resourceInputs["deploymentStrategyId"] = state ? state.deploymentStrategyId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["kmsKeyIdentifier"] = state ? state.kmsKeyIdentifier : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as AppconfigDeploymentArgs | undefined;
            if ((!args || args.applicationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationId'");
            }
            if ((!args || args.configurationProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationProfileId'");
            }
            if ((!args || args.configurationVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationVersion'");
            }
            if ((!args || args.deploymentStrategyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentStrategyId'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["applicationId"] = args ? args.applicationId : undefined;
            resourceInputs["configurationProfileId"] = args ? args.configurationProfileId : undefined;
            resourceInputs["configurationVersion"] = args ? args.configurationVersion : undefined;
            resourceInputs["deploymentStrategyId"] = args ? args.deploymentStrategyId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["kmsKeyIdentifier"] = args ? args.kmsKeyIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["deploymentNumber"] = undefined /*out*/;
            resourceInputs["kmsKeyArn"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppconfigDeployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppconfigDeployment resources.
 */
export interface AppconfigDeploymentState {
    applicationId?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    configurationProfileId?: pulumi.Input<string>;
    configurationVersion?: pulumi.Input<string>;
    deploymentNumber?: pulumi.Input<number>;
    deploymentStrategyId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    environmentId?: pulumi.Input<string>;
    kmsKeyArn?: pulumi.Input<string>;
    kmsKeyIdentifier?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a AppconfigDeployment resource.
 */
export interface AppconfigDeploymentArgs {
    applicationId: pulumi.Input<string>;
    configurationProfileId: pulumi.Input<string>;
    configurationVersion: pulumi.Input<string>;
    deploymentStrategyId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    environmentId: pulumi.Input<string>;
    kmsKeyIdentifier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
