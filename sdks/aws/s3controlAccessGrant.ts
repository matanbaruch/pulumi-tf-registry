// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3controlAccessGrant extends pulumi.CustomResource {
    /**
     * Get an existing S3controlAccessGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3controlAccessGrantState, opts?: pulumi.CustomResourceOptions): S3controlAccessGrant {
        return new S3controlAccessGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/s3controlAccessGrant:S3controlAccessGrant';

    /**
     * Returns true if the given object is an instance of S3controlAccessGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3controlAccessGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3controlAccessGrant.__pulumiType;
    }

    public /*out*/ readonly accessGrantArn!: pulumi.Output<string>;
    public /*out*/ readonly accessGrantId!: pulumi.Output<string>;
    public readonly accessGrantsLocationConfigurations!: pulumi.Output<outputs.S3controlAccessGrantAccessGrantsLocationConfiguration[] | undefined>;
    public readonly accessGrantsLocationId!: pulumi.Output<string>;
    public readonly accountId!: pulumi.Output<string>;
    public /*out*/ readonly grantScope!: pulumi.Output<string>;
    public readonly grantees!: pulumi.Output<outputs.S3controlAccessGrantGrantee[] | undefined>;
    public readonly permission!: pulumi.Output<string>;
    public readonly s3PrefixType!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a S3controlAccessGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3controlAccessGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3controlAccessGrantArgs | S3controlAccessGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3controlAccessGrantState | undefined;
            resourceInputs["accessGrantArn"] = state ? state.accessGrantArn : undefined;
            resourceInputs["accessGrantId"] = state ? state.accessGrantId : undefined;
            resourceInputs["accessGrantsLocationConfigurations"] = state ? state.accessGrantsLocationConfigurations : undefined;
            resourceInputs["accessGrantsLocationId"] = state ? state.accessGrantsLocationId : undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["grantScope"] = state ? state.grantScope : undefined;
            resourceInputs["grantees"] = state ? state.grantees : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["s3PrefixType"] = state ? state.s3PrefixType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as S3controlAccessGrantArgs | undefined;
            if ((!args || args.accessGrantsLocationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessGrantsLocationId'");
            }
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            resourceInputs["accessGrantsLocationConfigurations"] = args ? args.accessGrantsLocationConfigurations : undefined;
            resourceInputs["accessGrantsLocationId"] = args ? args.accessGrantsLocationId : undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["grantees"] = args ? args.grantees : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["s3PrefixType"] = args ? args.s3PrefixType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accessGrantArn"] = undefined /*out*/;
            resourceInputs["accessGrantId"] = undefined /*out*/;
            resourceInputs["grantScope"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3controlAccessGrant.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3controlAccessGrant resources.
 */
export interface S3controlAccessGrantState {
    accessGrantArn?: pulumi.Input<string>;
    accessGrantId?: pulumi.Input<string>;
    accessGrantsLocationConfigurations?: pulumi.Input<pulumi.Input<inputs.S3controlAccessGrantAccessGrantsLocationConfiguration>[]>;
    accessGrantsLocationId?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    grantScope?: pulumi.Input<string>;
    grantees?: pulumi.Input<pulumi.Input<inputs.S3controlAccessGrantGrantee>[]>;
    permission?: pulumi.Input<string>;
    s3PrefixType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a S3controlAccessGrant resource.
 */
export interface S3controlAccessGrantArgs {
    accessGrantsLocationConfigurations?: pulumi.Input<pulumi.Input<inputs.S3controlAccessGrantAccessGrantsLocationConfiguration>[]>;
    accessGrantsLocationId: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    grantees?: pulumi.Input<pulumi.Input<inputs.S3controlAccessGrantGrantee>[]>;
    permission: pulumi.Input<string>;
    s3PrefixType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
