// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2CapacityBlockReservation extends pulumi.CustomResource {
    /**
     * Get an existing Ec2CapacityBlockReservation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2CapacityBlockReservationState, opts?: pulumi.CustomResourceOptions): Ec2CapacityBlockReservation {
        return new Ec2CapacityBlockReservation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ec2CapacityBlockReservation:Ec2CapacityBlockReservation';

    /**
     * Returns true if the given object is an instance of Ec2CapacityBlockReservation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2CapacityBlockReservation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2CapacityBlockReservation.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    public readonly capacityBlockOfferingId!: pulumi.Output<string>;
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public /*out*/ readonly ebsOptimized!: pulumi.Output<boolean>;
    public /*out*/ readonly endDate!: pulumi.Output<string>;
    public /*out*/ readonly endDateType!: pulumi.Output<string>;
    public /*out*/ readonly instanceCount!: pulumi.Output<number>;
    public readonly instancePlatform!: pulumi.Output<string>;
    public /*out*/ readonly instanceType!: pulumi.Output<string>;
    public /*out*/ readonly outpostArn!: pulumi.Output<string>;
    public /*out*/ readonly placementGroupArn!: pulumi.Output<string>;
    public /*out*/ readonly reservationType!: pulumi.Output<string>;
    public /*out*/ readonly startDate!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly tenancy!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.Ec2CapacityBlockReservationTimeouts | undefined>;

    /**
     * Create a Ec2CapacityBlockReservation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2CapacityBlockReservationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2CapacityBlockReservationArgs | Ec2CapacityBlockReservationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2CapacityBlockReservationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["capacityBlockOfferingId"] = state ? state.capacityBlockOfferingId : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            resourceInputs["endDate"] = state ? state.endDate : undefined;
            resourceInputs["endDateType"] = state ? state.endDateType : undefined;
            resourceInputs["instanceCount"] = state ? state.instanceCount : undefined;
            resourceInputs["instancePlatform"] = state ? state.instancePlatform : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["outpostArn"] = state ? state.outpostArn : undefined;
            resourceInputs["placementGroupArn"] = state ? state.placementGroupArn : undefined;
            resourceInputs["reservationType"] = state ? state.reservationType : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tenancy"] = state ? state.tenancy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as Ec2CapacityBlockReservationArgs | undefined;
            if ((!args || args.capacityBlockOfferingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityBlockOfferingId'");
            }
            if ((!args || args.instancePlatform === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instancePlatform'");
            }
            resourceInputs["capacityBlockOfferingId"] = args ? args.capacityBlockOfferingId : undefined;
            resourceInputs["instancePlatform"] = args ? args.instancePlatform : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["ebsOptimized"] = undefined /*out*/;
            resourceInputs["endDate"] = undefined /*out*/;
            resourceInputs["endDateType"] = undefined /*out*/;
            resourceInputs["instanceCount"] = undefined /*out*/;
            resourceInputs["instanceType"] = undefined /*out*/;
            resourceInputs["outpostArn"] = undefined /*out*/;
            resourceInputs["placementGroupArn"] = undefined /*out*/;
            resourceInputs["reservationType"] = undefined /*out*/;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["tenancy"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2CapacityBlockReservation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2CapacityBlockReservation resources.
 */
export interface Ec2CapacityBlockReservationState {
    arn?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    capacityBlockOfferingId?: pulumi.Input<string>;
    createdDate?: pulumi.Input<string>;
    ebsOptimized?: pulumi.Input<boolean>;
    endDate?: pulumi.Input<string>;
    endDateType?: pulumi.Input<string>;
    instanceCount?: pulumi.Input<number>;
    instancePlatform?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    outpostArn?: pulumi.Input<string>;
    placementGroupArn?: pulumi.Input<string>;
    reservationType?: pulumi.Input<string>;
    startDate?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tenancy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Ec2CapacityBlockReservationTimeouts>;
}

/**
 * The set of arguments for constructing a Ec2CapacityBlockReservation resource.
 */
export interface Ec2CapacityBlockReservationArgs {
    capacityBlockOfferingId: pulumi.Input<string>;
    instancePlatform: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Ec2CapacityBlockReservationTimeouts>;
}
