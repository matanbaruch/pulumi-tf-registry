// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsCluster extends pulumi.CustomResource {
    /**
     * Get an existing RdsCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsClusterState, opts?: pulumi.CustomResourceOptions): RdsCluster {
        return new RdsCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/rdsCluster:RdsCluster';

    /**
     * Returns true if the given object is an instance of RdsCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsCluster.__pulumiType;
    }

    public readonly allocatedStorage!: pulumi.Output<number>;
    public readonly allowMajorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly applyImmediately!: pulumi.Output<boolean>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly availabilityZones!: pulumi.Output<string[]>;
    public readonly backtrackWindow!: pulumi.Output<number | undefined>;
    public readonly backupRetentionPeriod!: pulumi.Output<number>;
    public readonly caCertificateIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly caCertificateValidTill!: pulumi.Output<string>;
    public readonly clusterIdentifier!: pulumi.Output<string>;
    public readonly clusterIdentifierPrefix!: pulumi.Output<string>;
    public readonly clusterMembers!: pulumi.Output<string[]>;
    public /*out*/ readonly clusterResourceId!: pulumi.Output<string>;
    public readonly copyTagsToSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly dbClusterInstanceClass!: pulumi.Output<string | undefined>;
    public readonly dbClusterParameterGroupName!: pulumi.Output<string>;
    public readonly dbInstanceParameterGroupName!: pulumi.Output<string | undefined>;
    public readonly dbSubnetGroupName!: pulumi.Output<string>;
    public readonly dbSystemId!: pulumi.Output<string>;
    public readonly deleteAutomatedBackups!: pulumi.Output<boolean | undefined>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly domainIamRoleName!: pulumi.Output<string | undefined>;
    public readonly enableGlobalWriteForwarding!: pulumi.Output<boolean | undefined>;
    public readonly enableHttpEndpoint!: pulumi.Output<boolean | undefined>;
    public readonly enableLocalWriteForwarding!: pulumi.Output<boolean | undefined>;
    public readonly enabledCloudwatchLogsExports!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineLifecycleSupport!: pulumi.Output<string>;
    public readonly engineMode!: pulumi.Output<string | undefined>;
    public readonly engineVersion!: pulumi.Output<string>;
    public /*out*/ readonly engineVersionActual!: pulumi.Output<string>;
    public readonly finalSnapshotIdentifier!: pulumi.Output<string | undefined>;
    public readonly globalClusterIdentifier!: pulumi.Output<string | undefined>;
    public /*out*/ readonly hostedZoneId!: pulumi.Output<string>;
    public readonly iamDatabaseAuthenticationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly iamRoles!: pulumi.Output<string[]>;
    public readonly iops!: pulumi.Output<number | undefined>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly manageMasterUserPassword!: pulumi.Output<boolean | undefined>;
    public readonly masterPassword!: pulumi.Output<string | undefined>;
    public readonly masterUserSecretKmsKeyId!: pulumi.Output<string>;
    public /*out*/ readonly masterUserSecrets!: pulumi.Output<outputs.RdsClusterMasterUserSecret[]>;
    public readonly masterUsername!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly performanceInsightsEnabled!: pulumi.Output<boolean | undefined>;
    public readonly performanceInsightsKmsKeyId!: pulumi.Output<string>;
    public readonly performanceInsightsRetentionPeriod!: pulumi.Output<number>;
    public readonly port!: pulumi.Output<number>;
    public readonly preferredBackupWindow!: pulumi.Output<string>;
    public readonly preferredMaintenanceWindow!: pulumi.Output<string>;
    public /*out*/ readonly readerEndpoint!: pulumi.Output<string>;
    public readonly replicationSourceIdentifier!: pulumi.Output<string | undefined>;
    public readonly restoreToPointInTime!: pulumi.Output<outputs.RdsClusterRestoreToPointInTime | undefined>;
    public readonly s3Import!: pulumi.Output<outputs.RdsClusterS3Import | undefined>;
    public readonly scalingConfiguration!: pulumi.Output<outputs.RdsClusterScalingConfiguration | undefined>;
    public readonly serverlessv2ScalingConfiguration!: pulumi.Output<outputs.RdsClusterServerlessv2ScalingConfiguration | undefined>;
    public readonly skipFinalSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly snapshotIdentifier!: pulumi.Output<string | undefined>;
    public readonly sourceRegion!: pulumi.Output<string | undefined>;
    public readonly storageEncrypted!: pulumi.Output<boolean>;
    public readonly storageType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.RdsClusterTimeouts | undefined>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a RdsCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsClusterArgs | RdsClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsClusterState | undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = state ? state.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["backtrackWindow"] = state ? state.backtrackWindow : undefined;
            resourceInputs["backupRetentionPeriod"] = state ? state.backupRetentionPeriod : undefined;
            resourceInputs["caCertificateIdentifier"] = state ? state.caCertificateIdentifier : undefined;
            resourceInputs["caCertificateValidTill"] = state ? state.caCertificateValidTill : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["clusterIdentifierPrefix"] = state ? state.clusterIdentifierPrefix : undefined;
            resourceInputs["clusterMembers"] = state ? state.clusterMembers : undefined;
            resourceInputs["clusterResourceId"] = state ? state.clusterResourceId : undefined;
            resourceInputs["copyTagsToSnapshot"] = state ? state.copyTagsToSnapshot : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["dbClusterInstanceClass"] = state ? state.dbClusterInstanceClass : undefined;
            resourceInputs["dbClusterParameterGroupName"] = state ? state.dbClusterParameterGroupName : undefined;
            resourceInputs["dbInstanceParameterGroupName"] = state ? state.dbInstanceParameterGroupName : undefined;
            resourceInputs["dbSubnetGroupName"] = state ? state.dbSubnetGroupName : undefined;
            resourceInputs["dbSystemId"] = state ? state.dbSystemId : undefined;
            resourceInputs["deleteAutomatedBackups"] = state ? state.deleteAutomatedBackups : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainIamRoleName"] = state ? state.domainIamRoleName : undefined;
            resourceInputs["enableGlobalWriteForwarding"] = state ? state.enableGlobalWriteForwarding : undefined;
            resourceInputs["enableHttpEndpoint"] = state ? state.enableHttpEndpoint : undefined;
            resourceInputs["enableLocalWriteForwarding"] = state ? state.enableLocalWriteForwarding : undefined;
            resourceInputs["enabledCloudwatchLogsExports"] = state ? state.enabledCloudwatchLogsExports : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineLifecycleSupport"] = state ? state.engineLifecycleSupport : undefined;
            resourceInputs["engineMode"] = state ? state.engineMode : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            resourceInputs["globalClusterIdentifier"] = state ? state.globalClusterIdentifier : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["iamDatabaseAuthenticationEnabled"] = state ? state.iamDatabaseAuthenticationEnabled : undefined;
            resourceInputs["iamRoles"] = state ? state.iamRoles : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["manageMasterUserPassword"] = state ? state.manageMasterUserPassword : undefined;
            resourceInputs["masterPassword"] = state ? state.masterPassword : undefined;
            resourceInputs["masterUserSecretKmsKeyId"] = state ? state.masterUserSecretKmsKeyId : undefined;
            resourceInputs["masterUserSecrets"] = state ? state.masterUserSecrets : undefined;
            resourceInputs["masterUsername"] = state ? state.masterUsername : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["performanceInsightsEnabled"] = state ? state.performanceInsightsEnabled : undefined;
            resourceInputs["performanceInsightsKmsKeyId"] = state ? state.performanceInsightsKmsKeyId : undefined;
            resourceInputs["performanceInsightsRetentionPeriod"] = state ? state.performanceInsightsRetentionPeriod : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["preferredBackupWindow"] = state ? state.preferredBackupWindow : undefined;
            resourceInputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            resourceInputs["readerEndpoint"] = state ? state.readerEndpoint : undefined;
            resourceInputs["replicationSourceIdentifier"] = state ? state.replicationSourceIdentifier : undefined;
            resourceInputs["restoreToPointInTime"] = state ? state.restoreToPointInTime : undefined;
            resourceInputs["s3Import"] = state ? state.s3Import : undefined;
            resourceInputs["scalingConfiguration"] = state ? state.scalingConfiguration : undefined;
            resourceInputs["serverlessv2ScalingConfiguration"] = state ? state.serverlessv2ScalingConfiguration : undefined;
            resourceInputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            resourceInputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            resourceInputs["sourceRegion"] = state ? state.sourceRegion : undefined;
            resourceInputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as RdsClusterArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            resourceInputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            resourceInputs["allowMajorVersionUpgrade"] = args ? args.allowMajorVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["backtrackWindow"] = args ? args.backtrackWindow : undefined;
            resourceInputs["backupRetentionPeriod"] = args ? args.backupRetentionPeriod : undefined;
            resourceInputs["caCertificateIdentifier"] = args ? args.caCertificateIdentifier : undefined;
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["clusterIdentifierPrefix"] = args ? args.clusterIdentifierPrefix : undefined;
            resourceInputs["clusterMembers"] = args ? args.clusterMembers : undefined;
            resourceInputs["copyTagsToSnapshot"] = args ? args.copyTagsToSnapshot : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["dbClusterInstanceClass"] = args ? args.dbClusterInstanceClass : undefined;
            resourceInputs["dbClusterParameterGroupName"] = args ? args.dbClusterParameterGroupName : undefined;
            resourceInputs["dbInstanceParameterGroupName"] = args ? args.dbInstanceParameterGroupName : undefined;
            resourceInputs["dbSubnetGroupName"] = args ? args.dbSubnetGroupName : undefined;
            resourceInputs["dbSystemId"] = args ? args.dbSystemId : undefined;
            resourceInputs["deleteAutomatedBackups"] = args ? args.deleteAutomatedBackups : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainIamRoleName"] = args ? args.domainIamRoleName : undefined;
            resourceInputs["enableGlobalWriteForwarding"] = args ? args.enableGlobalWriteForwarding : undefined;
            resourceInputs["enableHttpEndpoint"] = args ? args.enableHttpEndpoint : undefined;
            resourceInputs["enableLocalWriteForwarding"] = args ? args.enableLocalWriteForwarding : undefined;
            resourceInputs["enabledCloudwatchLogsExports"] = args ? args.enabledCloudwatchLogsExports : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineLifecycleSupport"] = args ? args.engineLifecycleSupport : undefined;
            resourceInputs["engineMode"] = args ? args.engineMode : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            resourceInputs["globalClusterIdentifier"] = args ? args.globalClusterIdentifier : undefined;
            resourceInputs["iamDatabaseAuthenticationEnabled"] = args ? args.iamDatabaseAuthenticationEnabled : undefined;
            resourceInputs["iamRoles"] = args ? args.iamRoles : undefined;
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["manageMasterUserPassword"] = args ? args.manageMasterUserPassword : undefined;
            resourceInputs["masterPassword"] = args?.masterPassword ? pulumi.secret(args.masterPassword) : undefined;
            resourceInputs["masterUserSecretKmsKeyId"] = args ? args.masterUserSecretKmsKeyId : undefined;
            resourceInputs["masterUsername"] = args ? args.masterUsername : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["performanceInsightsEnabled"] = args ? args.performanceInsightsEnabled : undefined;
            resourceInputs["performanceInsightsKmsKeyId"] = args ? args.performanceInsightsKmsKeyId : undefined;
            resourceInputs["performanceInsightsRetentionPeriod"] = args ? args.performanceInsightsRetentionPeriod : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["preferredBackupWindow"] = args ? args.preferredBackupWindow : undefined;
            resourceInputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            resourceInputs["replicationSourceIdentifier"] = args ? args.replicationSourceIdentifier : undefined;
            resourceInputs["restoreToPointInTime"] = args ? args.restoreToPointInTime : undefined;
            resourceInputs["s3Import"] = args ? args.s3Import : undefined;
            resourceInputs["scalingConfiguration"] = args ? args.scalingConfiguration : undefined;
            resourceInputs["serverlessv2ScalingConfiguration"] = args ? args.serverlessv2ScalingConfiguration : undefined;
            resourceInputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            resourceInputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            resourceInputs["sourceRegion"] = args ? args.sourceRegion : undefined;
            resourceInputs["storageEncrypted"] = args ? args.storageEncrypted : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["caCertificateValidTill"] = undefined /*out*/;
            resourceInputs["clusterResourceId"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
            resourceInputs["masterUserSecrets"] = undefined /*out*/;
            resourceInputs["readerEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["masterPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RdsCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsCluster resources.
 */
export interface RdsClusterState {
    allocatedStorage?: pulumi.Input<number>;
    allowMajorVersionUpgrade?: pulumi.Input<boolean>;
    applyImmediately?: pulumi.Input<boolean>;
    arn?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    backtrackWindow?: pulumi.Input<number>;
    backupRetentionPeriod?: pulumi.Input<number>;
    caCertificateIdentifier?: pulumi.Input<string>;
    caCertificateValidTill?: pulumi.Input<string>;
    clusterIdentifier?: pulumi.Input<string>;
    clusterIdentifierPrefix?: pulumi.Input<string>;
    clusterMembers?: pulumi.Input<pulumi.Input<string>[]>;
    clusterResourceId?: pulumi.Input<string>;
    copyTagsToSnapshot?: pulumi.Input<boolean>;
    databaseName?: pulumi.Input<string>;
    dbClusterInstanceClass?: pulumi.Input<string>;
    dbClusterParameterGroupName?: pulumi.Input<string>;
    dbInstanceParameterGroupName?: pulumi.Input<string>;
    dbSubnetGroupName?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    deleteAutomatedBackups?: pulumi.Input<boolean>;
    deletionProtection?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    domainIamRoleName?: pulumi.Input<string>;
    enableGlobalWriteForwarding?: pulumi.Input<boolean>;
    enableHttpEndpoint?: pulumi.Input<boolean>;
    enableLocalWriteForwarding?: pulumi.Input<boolean>;
    enabledCloudwatchLogsExports?: pulumi.Input<pulumi.Input<string>[]>;
    endpoint?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineLifecycleSupport?: pulumi.Input<string>;
    engineMode?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    engineVersionActual?: pulumi.Input<string>;
    finalSnapshotIdentifier?: pulumi.Input<string>;
    globalClusterIdentifier?: pulumi.Input<string>;
    hostedZoneId?: pulumi.Input<string>;
    iamDatabaseAuthenticationEnabled?: pulumi.Input<boolean>;
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    iops?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    manageMasterUserPassword?: pulumi.Input<boolean>;
    masterPassword?: pulumi.Input<string>;
    masterUserSecretKmsKeyId?: pulumi.Input<string>;
    masterUserSecrets?: pulumi.Input<pulumi.Input<inputs.RdsClusterMasterUserSecret>[]>;
    masterUsername?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    performanceInsightsEnabled?: pulumi.Input<boolean>;
    performanceInsightsKmsKeyId?: pulumi.Input<string>;
    performanceInsightsRetentionPeriod?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    preferredBackupWindow?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    readerEndpoint?: pulumi.Input<string>;
    replicationSourceIdentifier?: pulumi.Input<string>;
    restoreToPointInTime?: pulumi.Input<inputs.RdsClusterRestoreToPointInTime>;
    s3Import?: pulumi.Input<inputs.RdsClusterS3Import>;
    scalingConfiguration?: pulumi.Input<inputs.RdsClusterScalingConfiguration>;
    serverlessv2ScalingConfiguration?: pulumi.Input<inputs.RdsClusterServerlessv2ScalingConfiguration>;
    skipFinalSnapshot?: pulumi.Input<boolean>;
    snapshotIdentifier?: pulumi.Input<string>;
    sourceRegion?: pulumi.Input<string>;
    storageEncrypted?: pulumi.Input<boolean>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RdsClusterTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RdsCluster resource.
 */
export interface RdsClusterArgs {
    allocatedStorage?: pulumi.Input<number>;
    allowMajorVersionUpgrade?: pulumi.Input<boolean>;
    applyImmediately?: pulumi.Input<boolean>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    backtrackWindow?: pulumi.Input<number>;
    backupRetentionPeriod?: pulumi.Input<number>;
    caCertificateIdentifier?: pulumi.Input<string>;
    clusterIdentifier?: pulumi.Input<string>;
    clusterIdentifierPrefix?: pulumi.Input<string>;
    clusterMembers?: pulumi.Input<pulumi.Input<string>[]>;
    copyTagsToSnapshot?: pulumi.Input<boolean>;
    databaseName?: pulumi.Input<string>;
    dbClusterInstanceClass?: pulumi.Input<string>;
    dbClusterParameterGroupName?: pulumi.Input<string>;
    dbInstanceParameterGroupName?: pulumi.Input<string>;
    dbSubnetGroupName?: pulumi.Input<string>;
    dbSystemId?: pulumi.Input<string>;
    deleteAutomatedBackups?: pulumi.Input<boolean>;
    deletionProtection?: pulumi.Input<boolean>;
    domain?: pulumi.Input<string>;
    domainIamRoleName?: pulumi.Input<string>;
    enableGlobalWriteForwarding?: pulumi.Input<boolean>;
    enableHttpEndpoint?: pulumi.Input<boolean>;
    enableLocalWriteForwarding?: pulumi.Input<boolean>;
    enabledCloudwatchLogsExports?: pulumi.Input<pulumi.Input<string>[]>;
    engine: pulumi.Input<string>;
    engineLifecycleSupport?: pulumi.Input<string>;
    engineMode?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    finalSnapshotIdentifier?: pulumi.Input<string>;
    globalClusterIdentifier?: pulumi.Input<string>;
    iamDatabaseAuthenticationEnabled?: pulumi.Input<boolean>;
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    iops?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    manageMasterUserPassword?: pulumi.Input<boolean>;
    masterPassword?: pulumi.Input<string>;
    masterUserSecretKmsKeyId?: pulumi.Input<string>;
    masterUsername?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    performanceInsightsEnabled?: pulumi.Input<boolean>;
    performanceInsightsKmsKeyId?: pulumi.Input<string>;
    performanceInsightsRetentionPeriod?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    preferredBackupWindow?: pulumi.Input<string>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    replicationSourceIdentifier?: pulumi.Input<string>;
    restoreToPointInTime?: pulumi.Input<inputs.RdsClusterRestoreToPointInTime>;
    s3Import?: pulumi.Input<inputs.RdsClusterS3Import>;
    scalingConfiguration?: pulumi.Input<inputs.RdsClusterScalingConfiguration>;
    serverlessv2ScalingConfiguration?: pulumi.Input<inputs.RdsClusterServerlessv2ScalingConfiguration>;
    skipFinalSnapshot?: pulumi.Input<boolean>;
    snapshotIdentifier?: pulumi.Input<string>;
    sourceRegion?: pulumi.Input<string>;
    storageEncrypted?: pulumi.Input<boolean>;
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RdsClusterTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
