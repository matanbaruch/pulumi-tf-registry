// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2InstanceTypeOffering(args?: GetEc2InstanceTypeOfferingArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2InstanceTypeOfferingResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEc2InstanceTypeOffering:getEc2InstanceTypeOffering", {
        "filters": args.filters,
        "id": args.id,
        "locationType": args.locationType,
        "preferredInstanceTypes": args.preferredInstanceTypes,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2InstanceTypeOffering.
 */
export interface GetEc2InstanceTypeOfferingArgs {
    filters?: inputs.GetEc2InstanceTypeOfferingFilter[];
    id?: string;
    locationType?: string;
    preferredInstanceTypes?: string[];
    timeouts?: inputs.GetEc2InstanceTypeOfferingTimeouts;
}

/**
 * A collection of values returned by getEc2InstanceTypeOffering.
 */
export interface GetEc2InstanceTypeOfferingResult {
    readonly filters?: outputs.GetEc2InstanceTypeOfferingFilter[];
    readonly id: string;
    readonly instanceType: string;
    readonly locationType?: string;
    readonly preferredInstanceTypes?: string[];
    readonly timeouts?: outputs.GetEc2InstanceTypeOfferingTimeouts;
}
export function getEc2InstanceTypeOfferingOutput(args?: GetEc2InstanceTypeOfferingOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2InstanceTypeOfferingResult> {
    return pulumi.output(args).apply((a: any) => getEc2InstanceTypeOffering(a, opts))
}

/**
 * A collection of arguments for invoking getEc2InstanceTypeOffering.
 */
export interface GetEc2InstanceTypeOfferingOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetEc2InstanceTypeOfferingFilterArgs>[]>;
    id?: pulumi.Input<string>;
    locationType?: pulumi.Input<string>;
    preferredInstanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.GetEc2InstanceTypeOfferingTimeoutsArgs>;
}
