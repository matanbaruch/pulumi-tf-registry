// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudformationStack extends pulumi.CustomResource {
    /**
     * Get an existing CloudformationStack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudformationStackState, opts?: pulumi.CustomResourceOptions): CloudformationStack {
        return new CloudformationStack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/cloudformationStack:CloudformationStack';

    /**
     * Returns true if the given object is an instance of CloudformationStack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudformationStack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudformationStack.__pulumiType;
    }

    public readonly capabilities!: pulumi.Output<string[] | undefined>;
    public readonly disableRollback!: pulumi.Output<boolean | undefined>;
    public readonly iamRoleArn!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationArns!: pulumi.Output<string[] | undefined>;
    public readonly onFailure!: pulumi.Output<string | undefined>;
    public /*out*/ readonly outputs!: pulumi.Output<{[key: string]: string}>;
    public readonly parameters!: pulumi.Output<{[key: string]: string}>;
    public readonly policyBody!: pulumi.Output<string>;
    public readonly policyUrl!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly templateBody!: pulumi.Output<string>;
    public readonly templateUrl!: pulumi.Output<string | undefined>;
    public readonly timeoutInMinutes!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CloudformationStackTimeouts | undefined>;

    /**
     * Create a CloudformationStack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudformationStackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudformationStackArgs | CloudformationStackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudformationStackState | undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["disableRollback"] = state ? state.disableRollback : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationArns"] = state ? state.notificationArns : undefined;
            resourceInputs["onFailure"] = state ? state.onFailure : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["policyBody"] = state ? state.policyBody : undefined;
            resourceInputs["policyUrl"] = state ? state.policyUrl : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["templateBody"] = state ? state.templateBody : undefined;
            resourceInputs["templateUrl"] = state ? state.templateUrl : undefined;
            resourceInputs["timeoutInMinutes"] = state ? state.timeoutInMinutes : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CloudformationStackArgs | undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["disableRollback"] = args ? args.disableRollback : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationArns"] = args ? args.notificationArns : undefined;
            resourceInputs["onFailure"] = args ? args.onFailure : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["policyBody"] = args ? args.policyBody : undefined;
            resourceInputs["policyUrl"] = args ? args.policyUrl : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["templateBody"] = args ? args.templateBody : undefined;
            resourceInputs["templateUrl"] = args ? args.templateUrl : undefined;
            resourceInputs["timeoutInMinutes"] = args ? args.timeoutInMinutes : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["outputs"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudformationStack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudformationStack resources.
 */
export interface CloudformationStackState {
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    disableRollback?: pulumi.Input<boolean>;
    iamRoleArn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationArns?: pulumi.Input<pulumi.Input<string>[]>;
    onFailure?: pulumi.Input<string>;
    outputs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    policyBody?: pulumi.Input<string>;
    policyUrl?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateBody?: pulumi.Input<string>;
    templateUrl?: pulumi.Input<string>;
    timeoutInMinutes?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudformationStackTimeouts>;
}

/**
 * The set of arguments for constructing a CloudformationStack resource.
 */
export interface CloudformationStackArgs {
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    disableRollback?: pulumi.Input<boolean>;
    iamRoleArn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationArns?: pulumi.Input<pulumi.Input<string>[]>;
    onFailure?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    policyBody?: pulumi.Input<string>;
    policyUrl?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateBody?: pulumi.Input<string>;
    templateUrl?: pulumi.Input<string>;
    timeoutInMinutes?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.CloudformationStackTimeouts>;
}
