// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LightsailLb extends pulumi.CustomResource {
    /**
     * Get an existing LightsailLb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LightsailLbState, opts?: pulumi.CustomResourceOptions): LightsailLb {
        return new LightsailLb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lightsailLb:LightsailLb';

    /**
     * Returns true if the given object is an instance of LightsailLb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LightsailLb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LightsailLb.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly healthCheckPath!: pulumi.Output<string | undefined>;
    public readonly instancePort!: pulumi.Output<number>;
    public readonly ipAddressType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly protocol!: pulumi.Output<string>;
    public /*out*/ readonly publicPorts!: pulumi.Output<number[]>;
    public /*out*/ readonly supportCode!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a LightsailLb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LightsailLbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LightsailLbArgs | LightsailLbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LightsailLbState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["healthCheckPath"] = state ? state.healthCheckPath : undefined;
            resourceInputs["instancePort"] = state ? state.instancePort : undefined;
            resourceInputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["publicPorts"] = state ? state.publicPorts : undefined;
            resourceInputs["supportCode"] = state ? state.supportCode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as LightsailLbArgs | undefined;
            if ((!args || args.instancePort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instancePort'");
            }
            resourceInputs["healthCheckPath"] = args ? args.healthCheckPath : undefined;
            resourceInputs["instancePort"] = args ? args.instancePort : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["protocol"] = undefined /*out*/;
            resourceInputs["publicPorts"] = undefined /*out*/;
            resourceInputs["supportCode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LightsailLb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LightsailLb resources.
 */
export interface LightsailLbState {
    arn?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    healthCheckPath?: pulumi.Input<string>;
    instancePort?: pulumi.Input<number>;
    ipAddressType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    publicPorts?: pulumi.Input<pulumi.Input<number>[]>;
    supportCode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LightsailLb resource.
 */
export interface LightsailLbArgs {
    healthCheckPath?: pulumi.Input<string>;
    instancePort: pulumi.Input<number>;
    ipAddressType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
