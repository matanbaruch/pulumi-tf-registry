// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatasyncLocationAzureBlob extends pulumi.CustomResource {
    /**
     * Get an existing DatasyncLocationAzureBlob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatasyncLocationAzureBlobState, opts?: pulumi.CustomResourceOptions): DatasyncLocationAzureBlob {
        return new DatasyncLocationAzureBlob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/datasyncLocationAzureBlob:DatasyncLocationAzureBlob';

    /**
     * Returns true if the given object is an instance of DatasyncLocationAzureBlob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatasyncLocationAzureBlob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasyncLocationAzureBlob.__pulumiType;
    }

    public readonly accessTier!: pulumi.Output<string | undefined>;
    public readonly agentArns!: pulumi.Output<string[]>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authenticationType!: pulumi.Output<string>;
    public readonly blobType!: pulumi.Output<string | undefined>;
    public readonly containerUrl!: pulumi.Output<string>;
    public readonly sasConfiguration!: pulumi.Output<outputs.DatasyncLocationAzureBlobSasConfiguration | undefined>;
    public readonly subdirectory!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly uri!: pulumi.Output<string>;

    /**
     * Create a DatasyncLocationAzureBlob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatasyncLocationAzureBlobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatasyncLocationAzureBlobArgs | DatasyncLocationAzureBlobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatasyncLocationAzureBlobState | undefined;
            resourceInputs["accessTier"] = state ? state.accessTier : undefined;
            resourceInputs["agentArns"] = state ? state.agentArns : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationType"] = state ? state.authenticationType : undefined;
            resourceInputs["blobType"] = state ? state.blobType : undefined;
            resourceInputs["containerUrl"] = state ? state.containerUrl : undefined;
            resourceInputs["sasConfiguration"] = state ? state.sasConfiguration : undefined;
            resourceInputs["subdirectory"] = state ? state.subdirectory : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as DatasyncLocationAzureBlobArgs | undefined;
            if ((!args || args.agentArns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentArns'");
            }
            if ((!args || args.authenticationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationType'");
            }
            if ((!args || args.containerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerUrl'");
            }
            resourceInputs["accessTier"] = args ? args.accessTier : undefined;
            resourceInputs["agentArns"] = args ? args.agentArns : undefined;
            resourceInputs["authenticationType"] = args ? args.authenticationType : undefined;
            resourceInputs["blobType"] = args ? args.blobType : undefined;
            resourceInputs["containerUrl"] = args ? args.containerUrl : undefined;
            resourceInputs["sasConfiguration"] = args ? args.sasConfiguration : undefined;
            resourceInputs["subdirectory"] = args ? args.subdirectory : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["uri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasyncLocationAzureBlob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatasyncLocationAzureBlob resources.
 */
export interface DatasyncLocationAzureBlobState {
    accessTier?: pulumi.Input<string>;
    agentArns?: pulumi.Input<pulumi.Input<string>[]>;
    arn?: pulumi.Input<string>;
    authenticationType?: pulumi.Input<string>;
    blobType?: pulumi.Input<string>;
    containerUrl?: pulumi.Input<string>;
    sasConfiguration?: pulumi.Input<inputs.DatasyncLocationAzureBlobSasConfiguration>;
    subdirectory?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatasyncLocationAzureBlob resource.
 */
export interface DatasyncLocationAzureBlobArgs {
    accessTier?: pulumi.Input<string>;
    agentArns: pulumi.Input<pulumi.Input<string>[]>;
    authenticationType: pulumi.Input<string>;
    blobType?: pulumi.Input<string>;
    containerUrl: pulumi.Input<string>;
    sasConfiguration?: pulumi.Input<inputs.DatasyncLocationAzureBlobSasConfiguration>;
    subdirectory?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
