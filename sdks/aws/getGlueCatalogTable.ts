// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGlueCatalogTable(args: GetGlueCatalogTableArgs, opts?: pulumi.InvokeOptions): Promise<GetGlueCatalogTableResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getGlueCatalogTable:getGlueCatalogTable", {
        "catalogId": args.catalogId,
        "databaseName": args.databaseName,
        "id": args.id,
        "name": args.name,
        "queryAsOfTime": args.queryAsOfTime,
        "transactionId": args.transactionId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGlueCatalogTable.
 */
export interface GetGlueCatalogTableArgs {
    catalogId?: string;
    databaseName: string;
    id?: string;
    name: string;
    queryAsOfTime?: string;
    transactionId?: number;
}

/**
 * A collection of values returned by getGlueCatalogTable.
 */
export interface GetGlueCatalogTableResult {
    readonly arn: string;
    readonly catalogId: string;
    readonly databaseName: string;
    readonly description: string;
    readonly id: string;
    readonly name: string;
    readonly owner: string;
    readonly parameters: {[key: string]: string};
    readonly partitionIndices: outputs.GetGlueCatalogTablePartitionIndex[];
    readonly partitionKeys: outputs.GetGlueCatalogTablePartitionKey[];
    readonly queryAsOfTime?: string;
    readonly retention: number;
    readonly storageDescriptors: outputs.GetGlueCatalogTableStorageDescriptor[];
    readonly tableType: string;
    readonly targetTables: outputs.GetGlueCatalogTableTargetTable[];
    readonly transactionId?: number;
    readonly viewExpandedText: string;
    readonly viewOriginalText: string;
}
export function getGlueCatalogTableOutput(args: GetGlueCatalogTableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGlueCatalogTableResult> {
    return pulumi.output(args).apply((a: any) => getGlueCatalogTable(a, opts))
}

/**
 * A collection of arguments for invoking getGlueCatalogTable.
 */
export interface GetGlueCatalogTableOutputArgs {
    catalogId?: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    queryAsOfTime?: pulumi.Input<string>;
    transactionId?: pulumi.Input<number>;
}
