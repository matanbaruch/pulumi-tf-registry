// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedshiftserverlessNamespace extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftserverlessNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftserverlessNamespaceState, opts?: pulumi.CustomResourceOptions): RedshiftserverlessNamespace {
        return new RedshiftserverlessNamespace(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftserverlessNamespace:RedshiftserverlessNamespace';

    /**
     * Returns true if the given object is an instance of RedshiftserverlessNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftserverlessNamespace {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftserverlessNamespace.__pulumiType;
    }

    public /*out*/ readonly adminPasswordSecretArn!: pulumi.Output<string>;
    public readonly adminPasswordSecretKmsKeyId!: pulumi.Output<string>;
    public readonly adminUserPassword!: pulumi.Output<string | undefined>;
    public readonly adminUsername!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly dbName!: pulumi.Output<string>;
    public readonly defaultIamRoleArn!: pulumi.Output<string | undefined>;
    public readonly iamRoles!: pulumi.Output<string[]>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public readonly logExports!: pulumi.Output<string[] | undefined>;
    public readonly manageAdminPassword!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly namespaceId!: pulumi.Output<string>;
    public readonly namespaceName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a RedshiftserverlessNamespace resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftserverlessNamespaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftserverlessNamespaceArgs | RedshiftserverlessNamespaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftserverlessNamespaceState | undefined;
            resourceInputs["adminPasswordSecretArn"] = state ? state.adminPasswordSecretArn : undefined;
            resourceInputs["adminPasswordSecretKmsKeyId"] = state ? state.adminPasswordSecretKmsKeyId : undefined;
            resourceInputs["adminUserPassword"] = state ? state.adminUserPassword : undefined;
            resourceInputs["adminUsername"] = state ? state.adminUsername : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["defaultIamRoleArn"] = state ? state.defaultIamRoleArn : undefined;
            resourceInputs["iamRoles"] = state ? state.iamRoles : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["logExports"] = state ? state.logExports : undefined;
            resourceInputs["manageAdminPassword"] = state ? state.manageAdminPassword : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as RedshiftserverlessNamespaceArgs | undefined;
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            resourceInputs["adminPasswordSecretKmsKeyId"] = args ? args.adminPasswordSecretKmsKeyId : undefined;
            resourceInputs["adminUserPassword"] = args?.adminUserPassword ? pulumi.secret(args.adminUserPassword) : undefined;
            resourceInputs["adminUsername"] = args?.adminUsername ? pulumi.secret(args.adminUsername) : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["defaultIamRoleArn"] = args ? args.defaultIamRoleArn : undefined;
            resourceInputs["iamRoles"] = args ? args.iamRoles : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["logExports"] = args ? args.logExports : undefined;
            resourceInputs["manageAdminPassword"] = args ? args.manageAdminPassword : undefined;
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["adminPasswordSecretArn"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["namespaceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminUserPassword", "adminUsername"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedshiftserverlessNamespace.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftserverlessNamespace resources.
 */
export interface RedshiftserverlessNamespaceState {
    adminPasswordSecretArn?: pulumi.Input<string>;
    adminPasswordSecretKmsKeyId?: pulumi.Input<string>;
    adminUserPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    defaultIamRoleArn?: pulumi.Input<string>;
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    kmsKeyId?: pulumi.Input<string>;
    logExports?: pulumi.Input<pulumi.Input<string>[]>;
    manageAdminPassword?: pulumi.Input<boolean>;
    namespaceId?: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RedshiftserverlessNamespace resource.
 */
export interface RedshiftserverlessNamespaceArgs {
    adminPasswordSecretKmsKeyId?: pulumi.Input<string>;
    adminUserPassword?: pulumi.Input<string>;
    adminUsername?: pulumi.Input<string>;
    dbName?: pulumi.Input<string>;
    defaultIamRoleArn?: pulumi.Input<string>;
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    kmsKeyId?: pulumi.Input<string>;
    logExports?: pulumi.Input<pulumi.Input<string>[]>;
    manageAdminPassword?: pulumi.Input<boolean>;
    namespaceName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
