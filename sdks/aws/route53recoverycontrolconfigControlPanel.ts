// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Route53recoverycontrolconfigControlPanel extends pulumi.CustomResource {
    /**
     * Get an existing Route53recoverycontrolconfigControlPanel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Route53recoverycontrolconfigControlPanelState, opts?: pulumi.CustomResourceOptions): Route53recoverycontrolconfigControlPanel {
        return new Route53recoverycontrolconfigControlPanel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/route53recoverycontrolconfigControlPanel:Route53recoverycontrolconfigControlPanel';

    /**
     * Returns true if the given object is an instance of Route53recoverycontrolconfigControlPanel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route53recoverycontrolconfigControlPanel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route53recoverycontrolconfigControlPanel.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly clusterArn!: pulumi.Output<string>;
    public /*out*/ readonly defaultControlPanel!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly routingControlCount!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Route53recoverycontrolconfigControlPanel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Route53recoverycontrolconfigControlPanelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Route53recoverycontrolconfigControlPanelArgs | Route53recoverycontrolconfigControlPanelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Route53recoverycontrolconfigControlPanelState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["clusterArn"] = state ? state.clusterArn : undefined;
            resourceInputs["defaultControlPanel"] = state ? state.defaultControlPanel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["routingControlCount"] = state ? state.routingControlCount : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as Route53recoverycontrolconfigControlPanelArgs | undefined;
            if ((!args || args.clusterArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterArn'");
            }
            resourceInputs["clusterArn"] = args ? args.clusterArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["defaultControlPanel"] = undefined /*out*/;
            resourceInputs["routingControlCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route53recoverycontrolconfigControlPanel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route53recoverycontrolconfigControlPanel resources.
 */
export interface Route53recoverycontrolconfigControlPanelState {
    arn?: pulumi.Input<string>;
    clusterArn?: pulumi.Input<string>;
    defaultControlPanel?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    routingControlCount?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route53recoverycontrolconfigControlPanel resource.
 */
export interface Route53recoverycontrolconfigControlPanelArgs {
    clusterArn: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
