// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LakeformationPermissions extends pulumi.CustomResource {
    /**
     * Get an existing LakeformationPermissions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LakeformationPermissionsState, opts?: pulumi.CustomResourceOptions): LakeformationPermissions {
        return new LakeformationPermissions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lakeformationPermissions:LakeformationPermissions';

    /**
     * Returns true if the given object is an instance of LakeformationPermissions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LakeformationPermissions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LakeformationPermissions.__pulumiType;
    }

    public readonly catalogId!: pulumi.Output<string | undefined>;
    public readonly catalogResource!: pulumi.Output<boolean | undefined>;
    public readonly dataCellsFilter!: pulumi.Output<outputs.LakeformationPermissionsDataCellsFilter | undefined>;
    public readonly dataLocation!: pulumi.Output<outputs.LakeformationPermissionsDataLocation | undefined>;
    public readonly database!: pulumi.Output<outputs.LakeformationPermissionsDatabase | undefined>;
    public readonly lfTag!: pulumi.Output<outputs.LakeformationPermissionsLfTag | undefined>;
    public readonly lfTagPolicy!: pulumi.Output<outputs.LakeformationPermissionsLfTagPolicy | undefined>;
    public readonly permissions!: pulumi.Output<string[]>;
    public readonly permissionsWithGrantOptions!: pulumi.Output<string[]>;
    public readonly principal!: pulumi.Output<string>;
    public readonly table!: pulumi.Output<outputs.LakeformationPermissionsTable | undefined>;
    public readonly tableWithColumns!: pulumi.Output<outputs.LakeformationPermissionsTableWithColumns | undefined>;

    /**
     * Create a LakeformationPermissions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LakeformationPermissionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LakeformationPermissionsArgs | LakeformationPermissionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LakeformationPermissionsState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["catalogResource"] = state ? state.catalogResource : undefined;
            resourceInputs["dataCellsFilter"] = state ? state.dataCellsFilter : undefined;
            resourceInputs["dataLocation"] = state ? state.dataLocation : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["lfTag"] = state ? state.lfTag : undefined;
            resourceInputs["lfTagPolicy"] = state ? state.lfTagPolicy : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["permissionsWithGrantOptions"] = state ? state.permissionsWithGrantOptions : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["tableWithColumns"] = state ? state.tableWithColumns : undefined;
        } else {
            const args = argsOrState as LakeformationPermissionsArgs | undefined;
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["catalogResource"] = args ? args.catalogResource : undefined;
            resourceInputs["dataCellsFilter"] = args ? args.dataCellsFilter : undefined;
            resourceInputs["dataLocation"] = args ? args.dataLocation : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["lfTag"] = args ? args.lfTag : undefined;
            resourceInputs["lfTagPolicy"] = args ? args.lfTagPolicy : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["permissionsWithGrantOptions"] = args ? args.permissionsWithGrantOptions : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["tableWithColumns"] = args ? args.tableWithColumns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LakeformationPermissions.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LakeformationPermissions resources.
 */
export interface LakeformationPermissionsState {
    catalogId?: pulumi.Input<string>;
    catalogResource?: pulumi.Input<boolean>;
    dataCellsFilter?: pulumi.Input<inputs.LakeformationPermissionsDataCellsFilter>;
    dataLocation?: pulumi.Input<inputs.LakeformationPermissionsDataLocation>;
    database?: pulumi.Input<inputs.LakeformationPermissionsDatabase>;
    lfTag?: pulumi.Input<inputs.LakeformationPermissionsLfTag>;
    lfTagPolicy?: pulumi.Input<inputs.LakeformationPermissionsLfTagPolicy>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    permissionsWithGrantOptions?: pulumi.Input<pulumi.Input<string>[]>;
    principal?: pulumi.Input<string>;
    table?: pulumi.Input<inputs.LakeformationPermissionsTable>;
    tableWithColumns?: pulumi.Input<inputs.LakeformationPermissionsTableWithColumns>;
}

/**
 * The set of arguments for constructing a LakeformationPermissions resource.
 */
export interface LakeformationPermissionsArgs {
    catalogId?: pulumi.Input<string>;
    catalogResource?: pulumi.Input<boolean>;
    dataCellsFilter?: pulumi.Input<inputs.LakeformationPermissionsDataCellsFilter>;
    dataLocation?: pulumi.Input<inputs.LakeformationPermissionsDataLocation>;
    database?: pulumi.Input<inputs.LakeformationPermissionsDatabase>;
    lfTag?: pulumi.Input<inputs.LakeformationPermissionsLfTag>;
    lfTagPolicy?: pulumi.Input<inputs.LakeformationPermissionsLfTagPolicy>;
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    permissionsWithGrantOptions?: pulumi.Input<pulumi.Input<string>[]>;
    principal: pulumi.Input<string>;
    table?: pulumi.Input<inputs.LakeformationPermissionsTable>;
    tableWithColumns?: pulumi.Input<inputs.LakeformationPermissionsTableWithColumns>;
}
