// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlueMlTransform extends pulumi.CustomResource {
    /**
     * Get an existing GlueMlTransform resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueMlTransformState, opts?: pulumi.CustomResourceOptions): GlueMlTransform {
        return new GlueMlTransform(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/glueMlTransform:GlueMlTransform';

    /**
     * Returns true if the given object is an instance of GlueMlTransform.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueMlTransform {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueMlTransform.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly glueVersion!: pulumi.Output<string>;
    public readonly inputRecordTables!: pulumi.Output<outputs.GlueMlTransformInputRecordTable[]>;
    public /*out*/ readonly labelCount!: pulumi.Output<number>;
    public readonly maxCapacity!: pulumi.Output<number>;
    public readonly maxRetries!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly numberOfWorkers!: pulumi.Output<number | undefined>;
    public readonly parameters!: pulumi.Output<outputs.GlueMlTransformParameters>;
    public readonly roleArn!: pulumi.Output<string>;
    public /*out*/ readonly schemas!: pulumi.Output<outputs.GlueMlTransformSchema[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeout!: pulumi.Output<number | undefined>;
    public readonly workerType!: pulumi.Output<string | undefined>;

    /**
     * Create a GlueMlTransform resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueMlTransformArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueMlTransformArgs | GlueMlTransformState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueMlTransformState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["glueVersion"] = state ? state.glueVersion : undefined;
            resourceInputs["inputRecordTables"] = state ? state.inputRecordTables : undefined;
            resourceInputs["labelCount"] = state ? state.labelCount : undefined;
            resourceInputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            resourceInputs["maxRetries"] = state ? state.maxRetries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfWorkers"] = state ? state.numberOfWorkers : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["schemas"] = state ? state.schemas : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["workerType"] = state ? state.workerType : undefined;
        } else {
            const args = argsOrState as GlueMlTransformArgs | undefined;
            if ((!args || args.inputRecordTables === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputRecordTables'");
            }
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["glueVersion"] = args ? args.glueVersion : undefined;
            resourceInputs["inputRecordTables"] = args ? args.inputRecordTables : undefined;
            resourceInputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            resourceInputs["maxRetries"] = args ? args.maxRetries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfWorkers"] = args ? args.numberOfWorkers : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["workerType"] = args ? args.workerType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["labelCount"] = undefined /*out*/;
            resourceInputs["schemas"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueMlTransform.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueMlTransform resources.
 */
export interface GlueMlTransformState {
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    glueVersion?: pulumi.Input<string>;
    inputRecordTables?: pulumi.Input<pulumi.Input<inputs.GlueMlTransformInputRecordTable>[]>;
    labelCount?: pulumi.Input<number>;
    maxCapacity?: pulumi.Input<number>;
    maxRetries?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numberOfWorkers?: pulumi.Input<number>;
    parameters?: pulumi.Input<inputs.GlueMlTransformParameters>;
    roleArn?: pulumi.Input<string>;
    schemas?: pulumi.Input<pulumi.Input<inputs.GlueMlTransformSchema>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    workerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlueMlTransform resource.
 */
export interface GlueMlTransformArgs {
    description?: pulumi.Input<string>;
    glueVersion?: pulumi.Input<string>;
    inputRecordTables: pulumi.Input<pulumi.Input<inputs.GlueMlTransformInputRecordTable>[]>;
    maxCapacity?: pulumi.Input<number>;
    maxRetries?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    numberOfWorkers?: pulumi.Input<number>;
    parameters: pulumi.Input<inputs.GlueMlTransformParameters>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    workerType?: pulumi.Input<string>;
}
