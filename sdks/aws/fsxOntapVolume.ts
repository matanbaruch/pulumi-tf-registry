// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FsxOntapVolume extends pulumi.CustomResource {
    /**
     * Get an existing FsxOntapVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FsxOntapVolumeState, opts?: pulumi.CustomResourceOptions): FsxOntapVolume {
        return new FsxOntapVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/fsxOntapVolume:FsxOntapVolume';

    /**
     * Returns true if the given object is an instance of FsxOntapVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FsxOntapVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FsxOntapVolume.__pulumiType;
    }

    public readonly aggregateConfiguration!: pulumi.Output<outputs.FsxOntapVolumeAggregateConfiguration | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly bypassSnaplockEnterpriseRetention!: pulumi.Output<boolean | undefined>;
    public readonly copyTagsToBackups!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly fileSystemId!: pulumi.Output<string>;
    public readonly finalBackupTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly flexcacheEndpointType!: pulumi.Output<string>;
    public readonly junctionPath!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ontapVolumeType!: pulumi.Output<string>;
    public readonly securityStyle!: pulumi.Output<string>;
    public readonly sizeInBytes!: pulumi.Output<string>;
    public readonly sizeInMegabytes!: pulumi.Output<number>;
    public readonly skipFinalBackup!: pulumi.Output<boolean | undefined>;
    public readonly snaplockConfiguration!: pulumi.Output<outputs.FsxOntapVolumeSnaplockConfiguration | undefined>;
    public readonly snapshotPolicy!: pulumi.Output<string>;
    public readonly storageEfficiencyEnabled!: pulumi.Output<boolean | undefined>;
    public readonly storageVirtualMachineId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly tieringPolicy!: pulumi.Output<outputs.FsxOntapVolumeTieringPolicy | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.FsxOntapVolumeTimeouts | undefined>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    public readonly volumeStyle!: pulumi.Output<string>;
    public readonly volumeType!: pulumi.Output<string | undefined>;

    /**
     * Create a FsxOntapVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FsxOntapVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FsxOntapVolumeArgs | FsxOntapVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FsxOntapVolumeState | undefined;
            resourceInputs["aggregateConfiguration"] = state ? state.aggregateConfiguration : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bypassSnaplockEnterpriseRetention"] = state ? state.bypassSnaplockEnterpriseRetention : undefined;
            resourceInputs["copyTagsToBackups"] = state ? state.copyTagsToBackups : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["finalBackupTags"] = state ? state.finalBackupTags : undefined;
            resourceInputs["flexcacheEndpointType"] = state ? state.flexcacheEndpointType : undefined;
            resourceInputs["junctionPath"] = state ? state.junctionPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ontapVolumeType"] = state ? state.ontapVolumeType : undefined;
            resourceInputs["securityStyle"] = state ? state.securityStyle : undefined;
            resourceInputs["sizeInBytes"] = state ? state.sizeInBytes : undefined;
            resourceInputs["sizeInMegabytes"] = state ? state.sizeInMegabytes : undefined;
            resourceInputs["skipFinalBackup"] = state ? state.skipFinalBackup : undefined;
            resourceInputs["snaplockConfiguration"] = state ? state.snaplockConfiguration : undefined;
            resourceInputs["snapshotPolicy"] = state ? state.snapshotPolicy : undefined;
            resourceInputs["storageEfficiencyEnabled"] = state ? state.storageEfficiencyEnabled : undefined;
            resourceInputs["storageVirtualMachineId"] = state ? state.storageVirtualMachineId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tieringPolicy"] = state ? state.tieringPolicy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["volumeStyle"] = state ? state.volumeStyle : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as FsxOntapVolumeArgs | undefined;
            if ((!args || args.storageVirtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageVirtualMachineId'");
            }
            resourceInputs["aggregateConfiguration"] = args ? args.aggregateConfiguration : undefined;
            resourceInputs["bypassSnaplockEnterpriseRetention"] = args ? args.bypassSnaplockEnterpriseRetention : undefined;
            resourceInputs["copyTagsToBackups"] = args ? args.copyTagsToBackups : undefined;
            resourceInputs["finalBackupTags"] = args ? args.finalBackupTags : undefined;
            resourceInputs["junctionPath"] = args ? args.junctionPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ontapVolumeType"] = args ? args.ontapVolumeType : undefined;
            resourceInputs["securityStyle"] = args ? args.securityStyle : undefined;
            resourceInputs["sizeInBytes"] = args ? args.sizeInBytes : undefined;
            resourceInputs["sizeInMegabytes"] = args ? args.sizeInMegabytes : undefined;
            resourceInputs["skipFinalBackup"] = args ? args.skipFinalBackup : undefined;
            resourceInputs["snaplockConfiguration"] = args ? args.snaplockConfiguration : undefined;
            resourceInputs["snapshotPolicy"] = args ? args.snapshotPolicy : undefined;
            resourceInputs["storageEfficiencyEnabled"] = args ? args.storageEfficiencyEnabled : undefined;
            resourceInputs["storageVirtualMachineId"] = args ? args.storageVirtualMachineId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["tieringPolicy"] = args ? args.tieringPolicy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeStyle"] = args ? args.volumeStyle : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["fileSystemId"] = undefined /*out*/;
            resourceInputs["flexcacheEndpointType"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FsxOntapVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FsxOntapVolume resources.
 */
export interface FsxOntapVolumeState {
    aggregateConfiguration?: pulumi.Input<inputs.FsxOntapVolumeAggregateConfiguration>;
    arn?: pulumi.Input<string>;
    bypassSnaplockEnterpriseRetention?: pulumi.Input<boolean>;
    copyTagsToBackups?: pulumi.Input<boolean>;
    fileSystemId?: pulumi.Input<string>;
    finalBackupTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    flexcacheEndpointType?: pulumi.Input<string>;
    junctionPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ontapVolumeType?: pulumi.Input<string>;
    securityStyle?: pulumi.Input<string>;
    sizeInBytes?: pulumi.Input<string>;
    sizeInMegabytes?: pulumi.Input<number>;
    skipFinalBackup?: pulumi.Input<boolean>;
    snaplockConfiguration?: pulumi.Input<inputs.FsxOntapVolumeSnaplockConfiguration>;
    snapshotPolicy?: pulumi.Input<string>;
    storageEfficiencyEnabled?: pulumi.Input<boolean>;
    storageVirtualMachineId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tieringPolicy?: pulumi.Input<inputs.FsxOntapVolumeTieringPolicy>;
    timeouts?: pulumi.Input<inputs.FsxOntapVolumeTimeouts>;
    uuid?: pulumi.Input<string>;
    volumeStyle?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FsxOntapVolume resource.
 */
export interface FsxOntapVolumeArgs {
    aggregateConfiguration?: pulumi.Input<inputs.FsxOntapVolumeAggregateConfiguration>;
    bypassSnaplockEnterpriseRetention?: pulumi.Input<boolean>;
    copyTagsToBackups?: pulumi.Input<boolean>;
    finalBackupTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    junctionPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ontapVolumeType?: pulumi.Input<string>;
    securityStyle?: pulumi.Input<string>;
    sizeInBytes?: pulumi.Input<string>;
    sizeInMegabytes?: pulumi.Input<number>;
    skipFinalBackup?: pulumi.Input<boolean>;
    snaplockConfiguration?: pulumi.Input<inputs.FsxOntapVolumeSnaplockConfiguration>;
    snapshotPolicy?: pulumi.Input<string>;
    storageEfficiencyEnabled?: pulumi.Input<boolean>;
    storageVirtualMachineId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tieringPolicy?: pulumi.Input<inputs.FsxOntapVolumeTieringPolicy>;
    timeouts?: pulumi.Input<inputs.FsxOntapVolumeTimeouts>;
    volumeStyle?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
}
