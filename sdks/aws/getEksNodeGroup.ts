// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEksNodeGroup(args: GetEksNodeGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetEksNodeGroupResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEksNodeGroup:getEksNodeGroup", {
        "clusterName": args.clusterName,
        "id": args.id,
        "nodeGroupName": args.nodeGroupName,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEksNodeGroup.
 */
export interface GetEksNodeGroupArgs {
    clusterName: string;
    id?: string;
    nodeGroupName: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getEksNodeGroup.
 */
export interface GetEksNodeGroupResult {
    readonly amiType: string;
    readonly arn: string;
    readonly capacityType: string;
    readonly clusterName: string;
    readonly diskSize: number;
    readonly id: string;
    readonly instanceTypes: string[];
    readonly labels: {[key: string]: string};
    readonly launchTemplates: outputs.GetEksNodeGroupLaunchTemplate[];
    readonly nodeGroupName: string;
    readonly nodeRoleArn: string;
    readonly releaseVersion: string;
    readonly remoteAccesses: outputs.GetEksNodeGroupRemoteAccess[];
    readonly resources: outputs.GetEksNodeGroupResource[];
    readonly scalingConfigs: outputs.GetEksNodeGroupScalingConfig[];
    readonly status: string;
    readonly subnetIds: string[];
    readonly tags: {[key: string]: string};
    readonly taints: outputs.GetEksNodeGroupTaint[];
    readonly version: string;
}
export function getEksNodeGroupOutput(args: GetEksNodeGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEksNodeGroupResult> {
    return pulumi.output(args).apply((a: any) => getEksNodeGroup(a, opts))
}

/**
 * A collection of arguments for invoking getEksNodeGroup.
 */
export interface GetEksNodeGroupOutputArgs {
    clusterName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    nodeGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
