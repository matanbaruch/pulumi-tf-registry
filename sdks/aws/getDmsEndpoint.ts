// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDmsEndpoint(args: GetDmsEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetDmsEndpointResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getDmsEndpoint:getDmsEndpoint", {
        "endpointId": args.endpointId,
        "id": args.id,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDmsEndpoint.
 */
export interface GetDmsEndpointArgs {
    endpointId: string;
    id?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getDmsEndpoint.
 */
export interface GetDmsEndpointResult {
    readonly certificateArn: string;
    readonly databaseName: string;
    readonly elasticsearchSettings: outputs.GetDmsEndpointElasticsearchSetting[];
    readonly endpointArn: string;
    readonly endpointId: string;
    readonly endpointType: string;
    readonly engineName: string;
    readonly extraConnectionAttributes: string;
    readonly id: string;
    readonly kafkaSettings: outputs.GetDmsEndpointKafkaSetting[];
    readonly kinesisSettings: outputs.GetDmsEndpointKinesisSetting[];
    readonly kmsKeyArn: string;
    readonly mongodbSettings: outputs.GetDmsEndpointMongodbSetting[];
    readonly password: string;
    readonly port: number;
    readonly postgresSettings: outputs.GetDmsEndpointPostgresSetting[];
    readonly redisSettings: outputs.GetDmsEndpointRedisSetting[];
    readonly redshiftSettings: outputs.GetDmsEndpointRedshiftSetting[];
    readonly s3Settings: outputs.GetDmsEndpointS3Setting[];
    readonly secretsManagerAccessRoleArn: string;
    readonly secretsManagerArn: string;
    readonly serverName: string;
    readonly serviceAccessRole: string;
    readonly sslMode: string;
    readonly tags: {[key: string]: string};
    readonly username: string;
}
export function getDmsEndpointOutput(args: GetDmsEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDmsEndpointResult> {
    return pulumi.output(args).apply((a: any) => getDmsEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getDmsEndpoint.
 */
export interface GetDmsEndpointOutputArgs {
    endpointId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
