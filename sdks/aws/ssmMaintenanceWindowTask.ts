// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SsmMaintenanceWindowTask extends pulumi.CustomResource {
    /**
     * Get an existing SsmMaintenanceWindowTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsmMaintenanceWindowTaskState, opts?: pulumi.CustomResourceOptions): SsmMaintenanceWindowTask {
        return new SsmMaintenanceWindowTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ssmMaintenanceWindowTask:SsmMaintenanceWindowTask';

    /**
     * Returns true if the given object is an instance of SsmMaintenanceWindowTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsmMaintenanceWindowTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsmMaintenanceWindowTask.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cutoffBehavior!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly maxConcurrency!: pulumi.Output<string>;
    public readonly maxErrors!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly serviceRoleArn!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<outputs.SsmMaintenanceWindowTaskTarget[] | undefined>;
    public readonly taskArn!: pulumi.Output<string>;
    public readonly taskInvocationParameters!: pulumi.Output<outputs.SsmMaintenanceWindowTaskTaskInvocationParameters | undefined>;
    public readonly taskType!: pulumi.Output<string>;
    public readonly windowId!: pulumi.Output<string>;
    public /*out*/ readonly windowTaskId!: pulumi.Output<string>;

    /**
     * Create a SsmMaintenanceWindowTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsmMaintenanceWindowTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsmMaintenanceWindowTaskArgs | SsmMaintenanceWindowTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsmMaintenanceWindowTaskState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cutoffBehavior"] = state ? state.cutoffBehavior : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            resourceInputs["maxErrors"] = state ? state.maxErrors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["serviceRoleArn"] = state ? state.serviceRoleArn : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["taskArn"] = state ? state.taskArn : undefined;
            resourceInputs["taskInvocationParameters"] = state ? state.taskInvocationParameters : undefined;
            resourceInputs["taskType"] = state ? state.taskType : undefined;
            resourceInputs["windowId"] = state ? state.windowId : undefined;
            resourceInputs["windowTaskId"] = state ? state.windowTaskId : undefined;
        } else {
            const args = argsOrState as SsmMaintenanceWindowTaskArgs | undefined;
            if ((!args || args.taskArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskArn'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            if ((!args || args.windowId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'windowId'");
            }
            resourceInputs["cutoffBehavior"] = args ? args.cutoffBehavior : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            resourceInputs["maxErrors"] = args ? args.maxErrors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["serviceRoleArn"] = args ? args.serviceRoleArn : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["taskArn"] = args ? args.taskArn : undefined;
            resourceInputs["taskInvocationParameters"] = args ? args.taskInvocationParameters : undefined;
            resourceInputs["taskType"] = args ? args.taskType : undefined;
            resourceInputs["windowId"] = args ? args.windowId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["windowTaskId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsmMaintenanceWindowTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsmMaintenanceWindowTask resources.
 */
export interface SsmMaintenanceWindowTaskState {
    arn?: pulumi.Input<string>;
    cutoffBehavior?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    maxConcurrency?: pulumi.Input<string>;
    maxErrors?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    serviceRoleArn?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<inputs.SsmMaintenanceWindowTaskTarget>[]>;
    taskArn?: pulumi.Input<string>;
    taskInvocationParameters?: pulumi.Input<inputs.SsmMaintenanceWindowTaskTaskInvocationParameters>;
    taskType?: pulumi.Input<string>;
    windowId?: pulumi.Input<string>;
    windowTaskId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SsmMaintenanceWindowTask resource.
 */
export interface SsmMaintenanceWindowTaskArgs {
    cutoffBehavior?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    maxConcurrency?: pulumi.Input<string>;
    maxErrors?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    serviceRoleArn?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<inputs.SsmMaintenanceWindowTaskTarget>[]>;
    taskArn: pulumi.Input<string>;
    taskInvocationParameters?: pulumi.Input<inputs.SsmMaintenanceWindowTaskTaskInvocationParameters>;
    taskType: pulumi.Input<string>;
    windowId: pulumi.Input<string>;
}
