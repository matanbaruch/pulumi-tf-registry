// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedshiftserverlessCustomDomainAssociation extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftserverlessCustomDomainAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftserverlessCustomDomainAssociationState, opts?: pulumi.CustomResourceOptions): RedshiftserverlessCustomDomainAssociation {
        return new RedshiftserverlessCustomDomainAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftserverlessCustomDomainAssociation:RedshiftserverlessCustomDomainAssociation';

    /**
     * Returns true if the given object is an instance of RedshiftserverlessCustomDomainAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftserverlessCustomDomainAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftserverlessCustomDomainAssociation.__pulumiType;
    }

    public readonly customDomainCertificateArn!: pulumi.Output<string>;
    public /*out*/ readonly customDomainCertificateExpiryTime!: pulumi.Output<string>;
    public readonly customDomainName!: pulumi.Output<string>;
    public readonly workgroupName!: pulumi.Output<string>;

    /**
     * Create a RedshiftserverlessCustomDomainAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftserverlessCustomDomainAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftserverlessCustomDomainAssociationArgs | RedshiftserverlessCustomDomainAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftserverlessCustomDomainAssociationState | undefined;
            resourceInputs["customDomainCertificateArn"] = state ? state.customDomainCertificateArn : undefined;
            resourceInputs["customDomainCertificateExpiryTime"] = state ? state.customDomainCertificateExpiryTime : undefined;
            resourceInputs["customDomainName"] = state ? state.customDomainName : undefined;
            resourceInputs["workgroupName"] = state ? state.workgroupName : undefined;
        } else {
            const args = argsOrState as RedshiftserverlessCustomDomainAssociationArgs | undefined;
            if ((!args || args.customDomainCertificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customDomainCertificateArn'");
            }
            if ((!args || args.customDomainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customDomainName'");
            }
            if ((!args || args.workgroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workgroupName'");
            }
            resourceInputs["customDomainCertificateArn"] = args ? args.customDomainCertificateArn : undefined;
            resourceInputs["customDomainName"] = args ? args.customDomainName : undefined;
            resourceInputs["workgroupName"] = args ? args.workgroupName : undefined;
            resourceInputs["customDomainCertificateExpiryTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftserverlessCustomDomainAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftserverlessCustomDomainAssociation resources.
 */
export interface RedshiftserverlessCustomDomainAssociationState {
    customDomainCertificateArn?: pulumi.Input<string>;
    customDomainCertificateExpiryTime?: pulumi.Input<string>;
    customDomainName?: pulumi.Input<string>;
    workgroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedshiftserverlessCustomDomainAssociation resource.
 */
export interface RedshiftserverlessCustomDomainAssociationArgs {
    customDomainCertificateArn: pulumi.Input<string>;
    customDomainName: pulumi.Input<string>;
    workgroupName: pulumi.Input<string>;
}
