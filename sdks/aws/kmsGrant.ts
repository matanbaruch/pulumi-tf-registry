// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KmsGrant extends pulumi.CustomResource {
    /**
     * Get an existing KmsGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsGrantState, opts?: pulumi.CustomResourceOptions): KmsGrant {
        return new KmsGrant(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/kmsGrant:KmsGrant';

    /**
     * Returns true if the given object is an instance of KmsGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsGrant {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsGrant.__pulumiType;
    }

    public readonly constraints!: pulumi.Output<outputs.KmsGrantConstraint[] | undefined>;
    public readonly grantCreationTokens!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly grantId!: pulumi.Output<string>;
    public /*out*/ readonly grantToken!: pulumi.Output<string>;
    public readonly granteePrincipal!: pulumi.Output<string>;
    public readonly keyId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly operations!: pulumi.Output<string[]>;
    public readonly retireOnDelete!: pulumi.Output<boolean | undefined>;
    public readonly retiringPrincipal!: pulumi.Output<string | undefined>;

    /**
     * Create a KmsGrant resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsGrantArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsGrantArgs | KmsGrantState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsGrantState | undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["grantCreationTokens"] = state ? state.grantCreationTokens : undefined;
            resourceInputs["grantId"] = state ? state.grantId : undefined;
            resourceInputs["grantToken"] = state ? state.grantToken : undefined;
            resourceInputs["granteePrincipal"] = state ? state.granteePrincipal : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operations"] = state ? state.operations : undefined;
            resourceInputs["retireOnDelete"] = state ? state.retireOnDelete : undefined;
            resourceInputs["retiringPrincipal"] = state ? state.retiringPrincipal : undefined;
        } else {
            const args = argsOrState as KmsGrantArgs | undefined;
            if ((!args || args.granteePrincipal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'granteePrincipal'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.operations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operations'");
            }
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["grantCreationTokens"] = args ? args.grantCreationTokens : undefined;
            resourceInputs["granteePrincipal"] = args ? args.granteePrincipal : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operations"] = args ? args.operations : undefined;
            resourceInputs["retireOnDelete"] = args ? args.retireOnDelete : undefined;
            resourceInputs["retiringPrincipal"] = args ? args.retiringPrincipal : undefined;
            resourceInputs["grantId"] = undefined /*out*/;
            resourceInputs["grantToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["grantToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KmsGrant.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KmsGrant resources.
 */
export interface KmsGrantState {
    constraints?: pulumi.Input<pulumi.Input<inputs.KmsGrantConstraint>[]>;
    grantCreationTokens?: pulumi.Input<pulumi.Input<string>[]>;
    grantId?: pulumi.Input<string>;
    grantToken?: pulumi.Input<string>;
    granteePrincipal?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operations?: pulumi.Input<pulumi.Input<string>[]>;
    retireOnDelete?: pulumi.Input<boolean>;
    retiringPrincipal?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KmsGrant resource.
 */
export interface KmsGrantArgs {
    constraints?: pulumi.Input<pulumi.Input<inputs.KmsGrantConstraint>[]>;
    grantCreationTokens?: pulumi.Input<pulumi.Input<string>[]>;
    granteePrincipal: pulumi.Input<string>;
    keyId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operations: pulumi.Input<pulumi.Input<string>[]>;
    retireOnDelete?: pulumi.Input<boolean>;
    retiringPrincipal?: pulumi.Input<string>;
}
