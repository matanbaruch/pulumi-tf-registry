// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DbInstanceRoleAssociation extends pulumi.CustomResource {
    /**
     * Get an existing DbInstanceRoleAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbInstanceRoleAssociationState, opts?: pulumi.CustomResourceOptions): DbInstanceRoleAssociation {
        return new DbInstanceRoleAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/dbInstanceRoleAssociation:DbInstanceRoleAssociation';

    /**
     * Returns true if the given object is an instance of DbInstanceRoleAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbInstanceRoleAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbInstanceRoleAssociation.__pulumiType;
    }

    public readonly dbInstanceIdentifier!: pulumi.Output<string>;
    public readonly featureName!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;

    /**
     * Create a DbInstanceRoleAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbInstanceRoleAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbInstanceRoleAssociationArgs | DbInstanceRoleAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbInstanceRoleAssociationState | undefined;
            resourceInputs["dbInstanceIdentifier"] = state ? state.dbInstanceIdentifier : undefined;
            resourceInputs["featureName"] = state ? state.featureName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as DbInstanceRoleAssociationArgs | undefined;
            if ((!args || args.dbInstanceIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceIdentifier'");
            }
            if ((!args || args.featureName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureName'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["dbInstanceIdentifier"] = args ? args.dbInstanceIdentifier : undefined;
            resourceInputs["featureName"] = args ? args.featureName : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbInstanceRoleAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbInstanceRoleAssociation resources.
 */
export interface DbInstanceRoleAssociationState {
    dbInstanceIdentifier?: pulumi.Input<string>;
    featureName?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbInstanceRoleAssociation resource.
 */
export interface DbInstanceRoleAssociationArgs {
    dbInstanceIdentifier: pulumi.Input<string>;
    featureName: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
}
