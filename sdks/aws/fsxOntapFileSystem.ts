// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FsxOntapFileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FsxOntapFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FsxOntapFileSystemState, opts?: pulumi.CustomResourceOptions): FsxOntapFileSystem {
        return new FsxOntapFileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/fsxOntapFileSystem:FsxOntapFileSystem';

    /**
     * Returns true if the given object is an instance of FsxOntapFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FsxOntapFileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FsxOntapFileSystem.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly automaticBackupRetentionDays!: pulumi.Output<number | undefined>;
    public readonly dailyAutomaticBackupStartTime!: pulumi.Output<string>;
    public readonly deploymentType!: pulumi.Output<string>;
    public readonly diskIopsConfiguration!: pulumi.Output<outputs.FsxOntapFileSystemDiskIopsConfiguration | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly endpointIpAddressRange!: pulumi.Output<string>;
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.FsxOntapFileSystemEndpoint[]>;
    public readonly fsxAdminPassword!: pulumi.Output<string | undefined>;
    public readonly haPairs!: pulumi.Output<number>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public /*out*/ readonly networkInterfaceIds!: pulumi.Output<string[]>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public readonly preferredSubnetId!: pulumi.Output<string>;
    public readonly routeTableIds!: pulumi.Output<string[]>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly storageCapacity!: pulumi.Output<number>;
    public readonly storageType!: pulumi.Output<string | undefined>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly throughputCapacity!: pulumi.Output<number>;
    public readonly throughputCapacityPerHaPair!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.FsxOntapFileSystemTimeouts | undefined>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public readonly weeklyMaintenanceStartTime!: pulumi.Output<string>;

    /**
     * Create a FsxOntapFileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FsxOntapFileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FsxOntapFileSystemArgs | FsxOntapFileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FsxOntapFileSystemState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["automaticBackupRetentionDays"] = state ? state.automaticBackupRetentionDays : undefined;
            resourceInputs["dailyAutomaticBackupStartTime"] = state ? state.dailyAutomaticBackupStartTime : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["diskIopsConfiguration"] = state ? state.diskIopsConfiguration : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["endpointIpAddressRange"] = state ? state.endpointIpAddressRange : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["fsxAdminPassword"] = state ? state.fsxAdminPassword : undefined;
            resourceInputs["haPairs"] = state ? state.haPairs : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["preferredSubnetId"] = state ? state.preferredSubnetId : undefined;
            resourceInputs["routeTableIds"] = state ? state.routeTableIds : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["storageCapacity"] = state ? state.storageCapacity : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["throughputCapacity"] = state ? state.throughputCapacity : undefined;
            resourceInputs["throughputCapacityPerHaPair"] = state ? state.throughputCapacityPerHaPair : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["weeklyMaintenanceStartTime"] = state ? state.weeklyMaintenanceStartTime : undefined;
        } else {
            const args = argsOrState as FsxOntapFileSystemArgs | undefined;
            if ((!args || args.deploymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentType'");
            }
            if ((!args || args.preferredSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'preferredSubnetId'");
            }
            if ((!args || args.storageCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageCapacity'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            resourceInputs["automaticBackupRetentionDays"] = args ? args.automaticBackupRetentionDays : undefined;
            resourceInputs["dailyAutomaticBackupStartTime"] = args ? args.dailyAutomaticBackupStartTime : undefined;
            resourceInputs["deploymentType"] = args ? args.deploymentType : undefined;
            resourceInputs["diskIopsConfiguration"] = args ? args.diskIopsConfiguration : undefined;
            resourceInputs["endpointIpAddressRange"] = args ? args.endpointIpAddressRange : undefined;
            resourceInputs["fsxAdminPassword"] = args?.fsxAdminPassword ? pulumi.secret(args.fsxAdminPassword) : undefined;
            resourceInputs["haPairs"] = args ? args.haPairs : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["preferredSubnetId"] = args ? args.preferredSubnetId : undefined;
            resourceInputs["routeTableIds"] = args ? args.routeTableIds : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["storageCapacity"] = args ? args.storageCapacity : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["throughputCapacity"] = args ? args.throughputCapacity : undefined;
            resourceInputs["throughputCapacityPerHaPair"] = args ? args.throughputCapacityPerHaPair : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["weeklyMaintenanceStartTime"] = args ? args.weeklyMaintenanceStartTime : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["networkInterfaceIds"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["fsxAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FsxOntapFileSystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FsxOntapFileSystem resources.
 */
export interface FsxOntapFileSystemState {
    arn?: pulumi.Input<string>;
    automaticBackupRetentionDays?: pulumi.Input<number>;
    dailyAutomaticBackupStartTime?: pulumi.Input<string>;
    deploymentType?: pulumi.Input<string>;
    diskIopsConfiguration?: pulumi.Input<inputs.FsxOntapFileSystemDiskIopsConfiguration>;
    dnsName?: pulumi.Input<string>;
    endpointIpAddressRange?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.FsxOntapFileSystemEndpoint>[]>;
    fsxAdminPassword?: pulumi.Input<string>;
    haPairs?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    networkInterfaceIds?: pulumi.Input<pulumi.Input<string>[]>;
    ownerId?: pulumi.Input<string>;
    preferredSubnetId?: pulumi.Input<string>;
    routeTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    storageCapacity?: pulumi.Input<number>;
    storageType?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughputCapacity?: pulumi.Input<number>;
    throughputCapacityPerHaPair?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.FsxOntapFileSystemTimeouts>;
    vpcId?: pulumi.Input<string>;
    weeklyMaintenanceStartTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FsxOntapFileSystem resource.
 */
export interface FsxOntapFileSystemArgs {
    automaticBackupRetentionDays?: pulumi.Input<number>;
    dailyAutomaticBackupStartTime?: pulumi.Input<string>;
    deploymentType: pulumi.Input<string>;
    diskIopsConfiguration?: pulumi.Input<inputs.FsxOntapFileSystemDiskIopsConfiguration>;
    endpointIpAddressRange?: pulumi.Input<string>;
    fsxAdminPassword?: pulumi.Input<string>;
    haPairs?: pulumi.Input<number>;
    kmsKeyId?: pulumi.Input<string>;
    preferredSubnetId: pulumi.Input<string>;
    routeTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    storageCapacity: pulumi.Input<number>;
    storageType?: pulumi.Input<string>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughputCapacity?: pulumi.Input<number>;
    throughputCapacityPerHaPair?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.FsxOntapFileSystemTimeouts>;
    weeklyMaintenanceStartTime?: pulumi.Input<string>;
}
