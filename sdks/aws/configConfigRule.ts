// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigConfigRule extends pulumi.CustomResource {
    /**
     * Get an existing ConfigConfigRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigConfigRuleState, opts?: pulumi.CustomResourceOptions): ConfigConfigRule {
        return new ConfigConfigRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/configConfigRule:ConfigConfigRule';

    /**
     * Returns true if the given object is an instance of ConfigConfigRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigConfigRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigConfigRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly evaluationModes!: pulumi.Output<outputs.ConfigConfigRuleEvaluationMode[] | undefined>;
    public readonly inputParameters!: pulumi.Output<string | undefined>;
    public readonly maximumExecutionFrequency!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    public readonly scope!: pulumi.Output<outputs.ConfigConfigRuleScope | undefined>;
    public readonly source!: pulumi.Output<outputs.ConfigConfigRuleSource>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ConfigConfigRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigConfigRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigConfigRuleArgs | ConfigConfigRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigConfigRuleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["evaluationModes"] = state ? state.evaluationModes : undefined;
            resourceInputs["inputParameters"] = state ? state.inputParameters : undefined;
            resourceInputs["maximumExecutionFrequency"] = state ? state.maximumExecutionFrequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ConfigConfigRuleArgs | undefined;
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["evaluationModes"] = args ? args.evaluationModes : undefined;
            resourceInputs["inputParameters"] = args ? args.inputParameters : undefined;
            resourceInputs["maximumExecutionFrequency"] = args ? args.maximumExecutionFrequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigConfigRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigConfigRule resources.
 */
export interface ConfigConfigRuleState {
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    evaluationModes?: pulumi.Input<pulumi.Input<inputs.ConfigConfigRuleEvaluationMode>[]>;
    inputParameters?: pulumi.Input<string>;
    maximumExecutionFrequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    scope?: pulumi.Input<inputs.ConfigConfigRuleScope>;
    source?: pulumi.Input<inputs.ConfigConfigRuleSource>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ConfigConfigRule resource.
 */
export interface ConfigConfigRuleArgs {
    description?: pulumi.Input<string>;
    evaluationModes?: pulumi.Input<pulumi.Input<inputs.ConfigConfigRuleEvaluationMode>[]>;
    inputParameters?: pulumi.Input<string>;
    maximumExecutionFrequency?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    scope?: pulumi.Input<inputs.ConfigConfigRuleScope>;
    source: pulumi.Input<inputs.ConfigConfigRuleSource>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
