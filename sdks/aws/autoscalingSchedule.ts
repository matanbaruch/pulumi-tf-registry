// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AutoscalingSchedule extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoscalingScheduleState, opts?: pulumi.CustomResourceOptions): AutoscalingSchedule {
        return new AutoscalingSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/autoscalingSchedule:AutoscalingSchedule';

    /**
     * Returns true if the given object is an instance of AutoscalingSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscalingSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingSchedule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoscalingGroupName!: pulumi.Output<string>;
    public readonly desiredCapacity!: pulumi.Output<number>;
    public readonly endTime!: pulumi.Output<string>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly recurrence!: pulumi.Output<string>;
    public readonly scheduledActionName!: pulumi.Output<string>;
    public readonly startTime!: pulumi.Output<string>;
    public readonly timeZone!: pulumi.Output<string>;

    /**
     * Create a AutoscalingSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscalingScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoscalingScheduleArgs | AutoscalingScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoscalingScheduleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoscalingGroupName"] = state ? state.autoscalingGroupName : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["recurrence"] = state ? state.recurrence : undefined;
            resourceInputs["scheduledActionName"] = state ? state.scheduledActionName : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        } else {
            const args = argsOrState as AutoscalingScheduleArgs | undefined;
            if ((!args || args.autoscalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoscalingGroupName'");
            }
            if ((!args || args.scheduledActionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduledActionName'");
            }
            resourceInputs["autoscalingGroupName"] = args ? args.autoscalingGroupName : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["recurrence"] = args ? args.recurrence : undefined;
            resourceInputs["scheduledActionName"] = args ? args.scheduledActionName : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoscalingSchedule resources.
 */
export interface AutoscalingScheduleState {
    arn?: pulumi.Input<string>;
    autoscalingGroupName?: pulumi.Input<string>;
    desiredCapacity?: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    recurrence?: pulumi.Input<string>;
    scheduledActionName?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoscalingSchedule resource.
 */
export interface AutoscalingScheduleArgs {
    autoscalingGroupName: pulumi.Input<string>;
    desiredCapacity?: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    recurrence?: pulumi.Input<string>;
    scheduledActionName: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
}
