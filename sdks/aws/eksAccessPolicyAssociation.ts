// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EksAccessPolicyAssociation extends pulumi.CustomResource {
    /**
     * Get an existing EksAccessPolicyAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EksAccessPolicyAssociationState, opts?: pulumi.CustomResourceOptions): EksAccessPolicyAssociation {
        return new EksAccessPolicyAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/eksAccessPolicyAssociation:EksAccessPolicyAssociation';

    /**
     * Returns true if the given object is an instance of EksAccessPolicyAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EksAccessPolicyAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EksAccessPolicyAssociation.__pulumiType;
    }

    public readonly accessScope!: pulumi.Output<outputs.EksAccessPolicyAssociationAccessScope>;
    public /*out*/ readonly associatedAt!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public readonly policyArn!: pulumi.Output<string>;
    public readonly principalArn!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EksAccessPolicyAssociationTimeouts | undefined>;

    /**
     * Create a EksAccessPolicyAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EksAccessPolicyAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EksAccessPolicyAssociationArgs | EksAccessPolicyAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EksAccessPolicyAssociationState | undefined;
            resourceInputs["accessScope"] = state ? state.accessScope : undefined;
            resourceInputs["associatedAt"] = state ? state.associatedAt : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["policyArn"] = state ? state.policyArn : undefined;
            resourceInputs["principalArn"] = state ? state.principalArn : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EksAccessPolicyAssociationArgs | undefined;
            if ((!args || args.accessScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessScope'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.policyArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyArn'");
            }
            if ((!args || args.principalArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalArn'");
            }
            resourceInputs["accessScope"] = args ? args.accessScope : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["policyArn"] = args ? args.policyArn : undefined;
            resourceInputs["principalArn"] = args ? args.principalArn : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["associatedAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EksAccessPolicyAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EksAccessPolicyAssociation resources.
 */
export interface EksAccessPolicyAssociationState {
    accessScope?: pulumi.Input<inputs.EksAccessPolicyAssociationAccessScope>;
    associatedAt?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    policyArn?: pulumi.Input<string>;
    principalArn?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EksAccessPolicyAssociationTimeouts>;
}

/**
 * The set of arguments for constructing a EksAccessPolicyAssociation resource.
 */
export interface EksAccessPolicyAssociationArgs {
    accessScope: pulumi.Input<inputs.EksAccessPolicyAssociationAccessScope>;
    clusterName: pulumi.Input<string>;
    policyArn: pulumi.Input<string>;
    principalArn: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EksAccessPolicyAssociationTimeouts>;
}
