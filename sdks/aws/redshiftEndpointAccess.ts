// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftEndpointAccess extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftEndpointAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftEndpointAccessState, opts?: pulumi.CustomResourceOptions): RedshiftEndpointAccess {
        return new RedshiftEndpointAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftEndpointAccess:RedshiftEndpointAccess';

    /**
     * Returns true if the given object is an instance of RedshiftEndpointAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftEndpointAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftEndpointAccess.__pulumiType;
    }

    public /*out*/ readonly address!: pulumi.Output<string>;
    public readonly clusterIdentifier!: pulumi.Output<string>;
    public readonly endpointName!: pulumi.Output<string>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public readonly resourceOwner!: pulumi.Output<string>;
    public readonly subnetGroupName!: pulumi.Output<string>;
    public /*out*/ readonly vpcEndpoints!: pulumi.Output<outputs.RedshiftEndpointAccessVpcEndpoint[]>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a RedshiftEndpointAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftEndpointAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftEndpointAccessArgs | RedshiftEndpointAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftEndpointAccessState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["endpointName"] = state ? state.endpointName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["resourceOwner"] = state ? state.resourceOwner : undefined;
            resourceInputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            resourceInputs["vpcEndpoints"] = state ? state.vpcEndpoints : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as RedshiftEndpointAccessArgs | undefined;
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.subnetGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetGroupName'");
            }
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["resourceOwner"] = args ? args.resourceOwner : undefined;
            resourceInputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["vpcEndpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftEndpointAccess.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftEndpointAccess resources.
 */
export interface RedshiftEndpointAccessState {
    address?: pulumi.Input<string>;
    clusterIdentifier?: pulumi.Input<string>;
    endpointName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    resourceOwner?: pulumi.Input<string>;
    subnetGroupName?: pulumi.Input<string>;
    vpcEndpoints?: pulumi.Input<pulumi.Input<inputs.RedshiftEndpointAccessVpcEndpoint>[]>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RedshiftEndpointAccess resource.
 */
export interface RedshiftEndpointAccessArgs {
    clusterIdentifier: pulumi.Input<string>;
    endpointName: pulumi.Input<string>;
    resourceOwner?: pulumi.Input<string>;
    subnetGroupName: pulumi.Input<string>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
