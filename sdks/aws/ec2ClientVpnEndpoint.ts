// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2ClientVpnEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing Ec2ClientVpnEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2ClientVpnEndpointState, opts?: pulumi.CustomResourceOptions): Ec2ClientVpnEndpoint {
        return new Ec2ClientVpnEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ec2ClientVpnEndpoint:Ec2ClientVpnEndpoint';

    /**
     * Returns true if the given object is an instance of Ec2ClientVpnEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2ClientVpnEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2ClientVpnEndpoint.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authenticationOptions!: pulumi.Output<outputs.Ec2ClientVpnEndpointAuthenticationOption[]>;
    public readonly clientCidrBlock!: pulumi.Output<string>;
    public readonly clientConnectOptions!: pulumi.Output<outputs.Ec2ClientVpnEndpointClientConnectOptions | undefined>;
    public readonly clientLoginBannerOptions!: pulumi.Output<outputs.Ec2ClientVpnEndpointClientLoginBannerOptions | undefined>;
    public readonly connectionLogOptions!: pulumi.Output<outputs.Ec2ClientVpnEndpointConnectionLogOptions>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    public readonly selfServicePortal!: pulumi.Output<string | undefined>;
    public /*out*/ readonly selfServicePortalUrl!: pulumi.Output<string>;
    public readonly serverCertificateArn!: pulumi.Output<string>;
    public readonly sessionTimeoutHours!: pulumi.Output<number | undefined>;
    public readonly splitTunnel!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly transportProtocol!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string>;
    public readonly vpnPort!: pulumi.Output<number | undefined>;

    /**
     * Create a Ec2ClientVpnEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2ClientVpnEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2ClientVpnEndpointArgs | Ec2ClientVpnEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2ClientVpnEndpointState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authenticationOptions"] = state ? state.authenticationOptions : undefined;
            resourceInputs["clientCidrBlock"] = state ? state.clientCidrBlock : undefined;
            resourceInputs["clientConnectOptions"] = state ? state.clientConnectOptions : undefined;
            resourceInputs["clientLoginBannerOptions"] = state ? state.clientLoginBannerOptions : undefined;
            resourceInputs["connectionLogOptions"] = state ? state.connectionLogOptions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["selfServicePortal"] = state ? state.selfServicePortal : undefined;
            resourceInputs["selfServicePortalUrl"] = state ? state.selfServicePortalUrl : undefined;
            resourceInputs["serverCertificateArn"] = state ? state.serverCertificateArn : undefined;
            resourceInputs["sessionTimeoutHours"] = state ? state.sessionTimeoutHours : undefined;
            resourceInputs["splitTunnel"] = state ? state.splitTunnel : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["transportProtocol"] = state ? state.transportProtocol : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpnPort"] = state ? state.vpnPort : undefined;
        } else {
            const args = argsOrState as Ec2ClientVpnEndpointArgs | undefined;
            if ((!args || args.authenticationOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationOptions'");
            }
            if ((!args || args.clientCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientCidrBlock'");
            }
            if ((!args || args.connectionLogOptions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionLogOptions'");
            }
            if ((!args || args.serverCertificateArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverCertificateArn'");
            }
            resourceInputs["authenticationOptions"] = args ? args.authenticationOptions : undefined;
            resourceInputs["clientCidrBlock"] = args ? args.clientCidrBlock : undefined;
            resourceInputs["clientConnectOptions"] = args ? args.clientConnectOptions : undefined;
            resourceInputs["clientLoginBannerOptions"] = args ? args.clientLoginBannerOptions : undefined;
            resourceInputs["connectionLogOptions"] = args ? args.connectionLogOptions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["selfServicePortal"] = args ? args.selfServicePortal : undefined;
            resourceInputs["serverCertificateArn"] = args ? args.serverCertificateArn : undefined;
            resourceInputs["sessionTimeoutHours"] = args ? args.sessionTimeoutHours : undefined;
            resourceInputs["splitTunnel"] = args ? args.splitTunnel : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["transportProtocol"] = args ? args.transportProtocol : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpnPort"] = args ? args.vpnPort : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["selfServicePortalUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2ClientVpnEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2ClientVpnEndpoint resources.
 */
export interface Ec2ClientVpnEndpointState {
    arn?: pulumi.Input<string>;
    authenticationOptions?: pulumi.Input<pulumi.Input<inputs.Ec2ClientVpnEndpointAuthenticationOption>[]>;
    clientCidrBlock?: pulumi.Input<string>;
    clientConnectOptions?: pulumi.Input<inputs.Ec2ClientVpnEndpointClientConnectOptions>;
    clientLoginBannerOptions?: pulumi.Input<inputs.Ec2ClientVpnEndpointClientLoginBannerOptions>;
    connectionLogOptions?: pulumi.Input<inputs.Ec2ClientVpnEndpointConnectionLogOptions>;
    description?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    selfServicePortal?: pulumi.Input<string>;
    selfServicePortalUrl?: pulumi.Input<string>;
    serverCertificateArn?: pulumi.Input<string>;
    sessionTimeoutHours?: pulumi.Input<number>;
    splitTunnel?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transportProtocol?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vpnPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Ec2ClientVpnEndpoint resource.
 */
export interface Ec2ClientVpnEndpointArgs {
    authenticationOptions: pulumi.Input<pulumi.Input<inputs.Ec2ClientVpnEndpointAuthenticationOption>[]>;
    clientCidrBlock: pulumi.Input<string>;
    clientConnectOptions?: pulumi.Input<inputs.Ec2ClientVpnEndpointClientConnectOptions>;
    clientLoginBannerOptions?: pulumi.Input<inputs.Ec2ClientVpnEndpointClientLoginBannerOptions>;
    connectionLogOptions: pulumi.Input<inputs.Ec2ClientVpnEndpointConnectionLogOptions>;
    description?: pulumi.Input<string>;
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    selfServicePortal?: pulumi.Input<string>;
    serverCertificateArn: pulumi.Input<string>;
    sessionTimeoutHours?: pulumi.Input<number>;
    splitTunnel?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transportProtocol?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vpnPort?: pulumi.Input<number>;
}
