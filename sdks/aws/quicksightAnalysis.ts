// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class QuicksightAnalysis extends pulumi.CustomResource {
    /**
     * Get an existing QuicksightAnalysis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuicksightAnalysisState, opts?: pulumi.CustomResourceOptions): QuicksightAnalysis {
        return new QuicksightAnalysis(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/quicksightAnalysis:QuicksightAnalysis';

    /**
     * Returns true if the given object is an instance of QuicksightAnalysis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuicksightAnalysis {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuicksightAnalysis.__pulumiType;
    }

    public readonly analysisId!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly awsAccountId!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly definition!: pulumi.Output<outputs.QuicksightAnalysisDefinition | undefined>;
    public /*out*/ readonly lastPublishedTime!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<outputs.QuicksightAnalysisParameters | undefined>;
    public readonly permissions!: pulumi.Output<outputs.QuicksightAnalysisPermission[] | undefined>;
    public readonly recoveryWindowInDays!: pulumi.Output<number | undefined>;
    public readonly sourceEntity!: pulumi.Output<outputs.QuicksightAnalysisSourceEntity | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly themeArn!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.QuicksightAnalysisTimeouts | undefined>;

    /**
     * Create a QuicksightAnalysis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuicksightAnalysisArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuicksightAnalysisArgs | QuicksightAnalysisState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuicksightAnalysisState | undefined;
            resourceInputs["analysisId"] = state ? state.analysisId : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["lastPublishedTime"] = state ? state.lastPublishedTime : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["recoveryWindowInDays"] = state ? state.recoveryWindowInDays : undefined;
            resourceInputs["sourceEntity"] = state ? state.sourceEntity : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["themeArn"] = state ? state.themeArn : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as QuicksightAnalysisArgs | undefined;
            if ((!args || args.analysisId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'analysisId'");
            }
            resourceInputs["analysisId"] = args ? args.analysisId : undefined;
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["recoveryWindowInDays"] = args ? args.recoveryWindowInDays : undefined;
            resourceInputs["sourceEntity"] = args ? args.sourceEntity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["themeArn"] = args ? args.themeArn : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["lastPublishedTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuicksightAnalysis.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuicksightAnalysis resources.
 */
export interface QuicksightAnalysisState {
    analysisId?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    definition?: pulumi.Input<inputs.QuicksightAnalysisDefinition>;
    lastPublishedTime?: pulumi.Input<string>;
    lastUpdatedTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<inputs.QuicksightAnalysisParameters>;
    permissions?: pulumi.Input<pulumi.Input<inputs.QuicksightAnalysisPermission>[]>;
    recoveryWindowInDays?: pulumi.Input<number>;
    sourceEntity?: pulumi.Input<inputs.QuicksightAnalysisSourceEntity>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    themeArn?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.QuicksightAnalysisTimeouts>;
}

/**
 * The set of arguments for constructing a QuicksightAnalysis resource.
 */
export interface QuicksightAnalysisArgs {
    analysisId: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    definition?: pulumi.Input<inputs.QuicksightAnalysisDefinition>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<inputs.QuicksightAnalysisParameters>;
    permissions?: pulumi.Input<pulumi.Input<inputs.QuicksightAnalysisPermission>[]>;
    recoveryWindowInDays?: pulumi.Input<number>;
    sourceEntity?: pulumi.Input<inputs.QuicksightAnalysisSourceEntity>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    themeArn?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.QuicksightAnalysisTimeouts>;
}
