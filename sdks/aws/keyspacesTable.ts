// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeyspacesTable extends pulumi.CustomResource {
    /**
     * Get an existing KeyspacesTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyspacesTableState, opts?: pulumi.CustomResourceOptions): KeyspacesTable {
        return new KeyspacesTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/keyspacesTable:KeyspacesTable';

    /**
     * Returns true if the given object is an instance of KeyspacesTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyspacesTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyspacesTable.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly capacitySpecification!: pulumi.Output<outputs.KeyspacesTableCapacitySpecification | undefined>;
    public readonly clientSideTimestamps!: pulumi.Output<outputs.KeyspacesTableClientSideTimestamps | undefined>;
    public readonly comment!: pulumi.Output<outputs.KeyspacesTableComment | undefined>;
    public readonly defaultTimeToLive!: pulumi.Output<number | undefined>;
    public readonly encryptionSpecification!: pulumi.Output<outputs.KeyspacesTableEncryptionSpecification | undefined>;
    public readonly keyspaceName!: pulumi.Output<string>;
    public readonly pointInTimeRecovery!: pulumi.Output<outputs.KeyspacesTablePointInTimeRecovery | undefined>;
    public readonly schemaDefinition!: pulumi.Output<outputs.KeyspacesTableSchemaDefinition>;
    public readonly tableName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.KeyspacesTableTimeouts | undefined>;
    public readonly ttl!: pulumi.Output<outputs.KeyspacesTableTtl | undefined>;

    /**
     * Create a KeyspacesTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyspacesTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyspacesTableArgs | KeyspacesTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyspacesTableState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["capacitySpecification"] = state ? state.capacitySpecification : undefined;
            resourceInputs["clientSideTimestamps"] = state ? state.clientSideTimestamps : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["defaultTimeToLive"] = state ? state.defaultTimeToLive : undefined;
            resourceInputs["encryptionSpecification"] = state ? state.encryptionSpecification : undefined;
            resourceInputs["keyspaceName"] = state ? state.keyspaceName : undefined;
            resourceInputs["pointInTimeRecovery"] = state ? state.pointInTimeRecovery : undefined;
            resourceInputs["schemaDefinition"] = state ? state.schemaDefinition : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as KeyspacesTableArgs | undefined;
            if ((!args || args.keyspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyspaceName'");
            }
            if ((!args || args.schemaDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaDefinition'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["capacitySpecification"] = args ? args.capacitySpecification : undefined;
            resourceInputs["clientSideTimestamps"] = args ? args.clientSideTimestamps : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["defaultTimeToLive"] = args ? args.defaultTimeToLive : undefined;
            resourceInputs["encryptionSpecification"] = args ? args.encryptionSpecification : undefined;
            resourceInputs["keyspaceName"] = args ? args.keyspaceName : undefined;
            resourceInputs["pointInTimeRecovery"] = args ? args.pointInTimeRecovery : undefined;
            resourceInputs["schemaDefinition"] = args ? args.schemaDefinition : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyspacesTable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeyspacesTable resources.
 */
export interface KeyspacesTableState {
    arn?: pulumi.Input<string>;
    capacitySpecification?: pulumi.Input<inputs.KeyspacesTableCapacitySpecification>;
    clientSideTimestamps?: pulumi.Input<inputs.KeyspacesTableClientSideTimestamps>;
    comment?: pulumi.Input<inputs.KeyspacesTableComment>;
    defaultTimeToLive?: pulumi.Input<number>;
    encryptionSpecification?: pulumi.Input<inputs.KeyspacesTableEncryptionSpecification>;
    keyspaceName?: pulumi.Input<string>;
    pointInTimeRecovery?: pulumi.Input<inputs.KeyspacesTablePointInTimeRecovery>;
    schemaDefinition?: pulumi.Input<inputs.KeyspacesTableSchemaDefinition>;
    tableName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KeyspacesTableTimeouts>;
    ttl?: pulumi.Input<inputs.KeyspacesTableTtl>;
}

/**
 * The set of arguments for constructing a KeyspacesTable resource.
 */
export interface KeyspacesTableArgs {
    capacitySpecification?: pulumi.Input<inputs.KeyspacesTableCapacitySpecification>;
    clientSideTimestamps?: pulumi.Input<inputs.KeyspacesTableClientSideTimestamps>;
    comment?: pulumi.Input<inputs.KeyspacesTableComment>;
    defaultTimeToLive?: pulumi.Input<number>;
    encryptionSpecification?: pulumi.Input<inputs.KeyspacesTableEncryptionSpecification>;
    keyspaceName: pulumi.Input<string>;
    pointInTimeRecovery?: pulumi.Input<inputs.KeyspacesTablePointInTimeRecovery>;
    schemaDefinition: pulumi.Input<inputs.KeyspacesTableSchemaDefinition>;
    tableName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KeyspacesTableTimeouts>;
    ttl?: pulumi.Input<inputs.KeyspacesTableTtl>;
}
