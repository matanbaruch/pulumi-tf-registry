// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VerifiedaccessTrustProvider extends pulumi.CustomResource {
    /**
     * Get an existing VerifiedaccessTrustProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VerifiedaccessTrustProviderState, opts?: pulumi.CustomResourceOptions): VerifiedaccessTrustProvider {
        return new VerifiedaccessTrustProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/verifiedaccessTrustProvider:VerifiedaccessTrustProvider';

    /**
     * Returns true if the given object is an instance of VerifiedaccessTrustProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VerifiedaccessTrustProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VerifiedaccessTrustProvider.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceOptions!: pulumi.Output<outputs.VerifiedaccessTrustProviderDeviceOptions | undefined>;
    public readonly deviceTrustProviderType!: pulumi.Output<string | undefined>;
    public readonly oidcOptions!: pulumi.Output<outputs.VerifiedaccessTrustProviderOidcOptions | undefined>;
    public readonly policyReferenceName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.VerifiedaccessTrustProviderTimeouts | undefined>;
    public readonly trustProviderType!: pulumi.Output<string>;
    public readonly userTrustProviderType!: pulumi.Output<string | undefined>;

    /**
     * Create a VerifiedaccessTrustProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VerifiedaccessTrustProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VerifiedaccessTrustProviderArgs | VerifiedaccessTrustProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VerifiedaccessTrustProviderState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceOptions"] = state ? state.deviceOptions : undefined;
            resourceInputs["deviceTrustProviderType"] = state ? state.deviceTrustProviderType : undefined;
            resourceInputs["oidcOptions"] = state ? state.oidcOptions : undefined;
            resourceInputs["policyReferenceName"] = state ? state.policyReferenceName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustProviderType"] = state ? state.trustProviderType : undefined;
            resourceInputs["userTrustProviderType"] = state ? state.userTrustProviderType : undefined;
        } else {
            const args = argsOrState as VerifiedaccessTrustProviderArgs | undefined;
            if ((!args || args.policyReferenceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyReferenceName'");
            }
            if ((!args || args.trustProviderType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustProviderType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceOptions"] = args ? args.deviceOptions : undefined;
            resourceInputs["deviceTrustProviderType"] = args ? args.deviceTrustProviderType : undefined;
            resourceInputs["oidcOptions"] = args ? args.oidcOptions : undefined;
            resourceInputs["policyReferenceName"] = args ? args.policyReferenceName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustProviderType"] = args ? args.trustProviderType : undefined;
            resourceInputs["userTrustProviderType"] = args ? args.userTrustProviderType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VerifiedaccessTrustProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VerifiedaccessTrustProvider resources.
 */
export interface VerifiedaccessTrustProviderState {
    description?: pulumi.Input<string>;
    deviceOptions?: pulumi.Input<inputs.VerifiedaccessTrustProviderDeviceOptions>;
    deviceTrustProviderType?: pulumi.Input<string>;
    oidcOptions?: pulumi.Input<inputs.VerifiedaccessTrustProviderOidcOptions>;
    policyReferenceName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VerifiedaccessTrustProviderTimeouts>;
    trustProviderType?: pulumi.Input<string>;
    userTrustProviderType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VerifiedaccessTrustProvider resource.
 */
export interface VerifiedaccessTrustProviderArgs {
    description?: pulumi.Input<string>;
    deviceOptions?: pulumi.Input<inputs.VerifiedaccessTrustProviderDeviceOptions>;
    deviceTrustProviderType?: pulumi.Input<string>;
    oidcOptions?: pulumi.Input<inputs.VerifiedaccessTrustProviderOidcOptions>;
    policyReferenceName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.VerifiedaccessTrustProviderTimeouts>;
    trustProviderType: pulumi.Input<string>;
    userTrustProviderType?: pulumi.Input<string>;
}
