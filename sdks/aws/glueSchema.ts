// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GlueSchema extends pulumi.CustomResource {
    /**
     * Get an existing GlueSchema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueSchemaState, opts?: pulumi.CustomResourceOptions): GlueSchema {
        return new GlueSchema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/glueSchema:GlueSchema';

    /**
     * Returns true if the given object is an instance of GlueSchema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueSchema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueSchema.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly compatibility!: pulumi.Output<string>;
    public readonly dataFormat!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly latestSchemaVersion!: pulumi.Output<number>;
    public /*out*/ readonly nextSchemaVersion!: pulumi.Output<number>;
    public readonly registryArn!: pulumi.Output<string>;
    public /*out*/ readonly registryName!: pulumi.Output<string>;
    public /*out*/ readonly schemaCheckpoint!: pulumi.Output<number>;
    public readonly schemaDefinition!: pulumi.Output<string>;
    public readonly schemaName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a GlueSchema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueSchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueSchemaArgs | GlueSchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueSchemaState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["compatibility"] = state ? state.compatibility : undefined;
            resourceInputs["dataFormat"] = state ? state.dataFormat : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["latestSchemaVersion"] = state ? state.latestSchemaVersion : undefined;
            resourceInputs["nextSchemaVersion"] = state ? state.nextSchemaVersion : undefined;
            resourceInputs["registryArn"] = state ? state.registryArn : undefined;
            resourceInputs["registryName"] = state ? state.registryName : undefined;
            resourceInputs["schemaCheckpoint"] = state ? state.schemaCheckpoint : undefined;
            resourceInputs["schemaDefinition"] = state ? state.schemaDefinition : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as GlueSchemaArgs | undefined;
            if ((!args || args.compatibility === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compatibility'");
            }
            if ((!args || args.dataFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFormat'");
            }
            if ((!args || args.schemaDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaDefinition'");
            }
            if ((!args || args.schemaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            resourceInputs["compatibility"] = args ? args.compatibility : undefined;
            resourceInputs["dataFormat"] = args ? args.dataFormat : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["registryArn"] = args ? args.registryArn : undefined;
            resourceInputs["schemaDefinition"] = args ? args.schemaDefinition : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["latestSchemaVersion"] = undefined /*out*/;
            resourceInputs["nextSchemaVersion"] = undefined /*out*/;
            resourceInputs["registryName"] = undefined /*out*/;
            resourceInputs["schemaCheckpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueSchema.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueSchema resources.
 */
export interface GlueSchemaState {
    arn?: pulumi.Input<string>;
    compatibility?: pulumi.Input<string>;
    dataFormat?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    latestSchemaVersion?: pulumi.Input<number>;
    nextSchemaVersion?: pulumi.Input<number>;
    registryArn?: pulumi.Input<string>;
    registryName?: pulumi.Input<string>;
    schemaCheckpoint?: pulumi.Input<number>;
    schemaDefinition?: pulumi.Input<string>;
    schemaName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a GlueSchema resource.
 */
export interface GlueSchemaArgs {
    compatibility: pulumi.Input<string>;
    dataFormat: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    registryArn?: pulumi.Input<string>;
    schemaDefinition: pulumi.Input<string>;
    schemaName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
