// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class QuicksightAccountSubscription extends pulumi.CustomResource {
    /**
     * Get an existing QuicksightAccountSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuicksightAccountSubscriptionState, opts?: pulumi.CustomResourceOptions): QuicksightAccountSubscription {
        return new QuicksightAccountSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/quicksightAccountSubscription:QuicksightAccountSubscription';

    /**
     * Returns true if the given object is an instance of QuicksightAccountSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuicksightAccountSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuicksightAccountSubscription.__pulumiType;
    }

    public readonly accountName!: pulumi.Output<string>;
    public /*out*/ readonly accountSubscriptionStatus!: pulumi.Output<string>;
    public readonly activeDirectoryName!: pulumi.Output<string | undefined>;
    public readonly adminGroups!: pulumi.Output<string[] | undefined>;
    public readonly authenticationMethod!: pulumi.Output<string>;
    public readonly authorGroups!: pulumi.Output<string[] | undefined>;
    public readonly awsAccountId!: pulumi.Output<string>;
    public readonly contactNumber!: pulumi.Output<string | undefined>;
    public readonly directoryId!: pulumi.Output<string | undefined>;
    public readonly edition!: pulumi.Output<string>;
    public readonly emailAddress!: pulumi.Output<string | undefined>;
    public readonly firstName!: pulumi.Output<string | undefined>;
    public readonly iamIdentityCenterInstanceArn!: pulumi.Output<string | undefined>;
    public readonly lastName!: pulumi.Output<string | undefined>;
    public readonly notificationEmail!: pulumi.Output<string>;
    public readonly readerGroups!: pulumi.Output<string[] | undefined>;
    public readonly realm!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.QuicksightAccountSubscriptionTimeouts | undefined>;

    /**
     * Create a QuicksightAccountSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuicksightAccountSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuicksightAccountSubscriptionArgs | QuicksightAccountSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuicksightAccountSubscriptionState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["accountSubscriptionStatus"] = state ? state.accountSubscriptionStatus : undefined;
            resourceInputs["activeDirectoryName"] = state ? state.activeDirectoryName : undefined;
            resourceInputs["adminGroups"] = state ? state.adminGroups : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["authorGroups"] = state ? state.authorGroups : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["contactNumber"] = state ? state.contactNumber : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["emailAddress"] = state ? state.emailAddress : undefined;
            resourceInputs["firstName"] = state ? state.firstName : undefined;
            resourceInputs["iamIdentityCenterInstanceArn"] = state ? state.iamIdentityCenterInstanceArn : undefined;
            resourceInputs["lastName"] = state ? state.lastName : undefined;
            resourceInputs["notificationEmail"] = state ? state.notificationEmail : undefined;
            resourceInputs["readerGroups"] = state ? state.readerGroups : undefined;
            resourceInputs["realm"] = state ? state.realm : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as QuicksightAccountSubscriptionArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.authenticationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationMethod'");
            }
            if ((!args || args.edition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edition'");
            }
            if ((!args || args.notificationEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationEmail'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["activeDirectoryName"] = args ? args.activeDirectoryName : undefined;
            resourceInputs["adminGroups"] = args ? args.adminGroups : undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["authorGroups"] = args ? args.authorGroups : undefined;
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["contactNumber"] = args ? args.contactNumber : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["emailAddress"] = args ? args.emailAddress : undefined;
            resourceInputs["firstName"] = args ? args.firstName : undefined;
            resourceInputs["iamIdentityCenterInstanceArn"] = args ? args.iamIdentityCenterInstanceArn : undefined;
            resourceInputs["lastName"] = args ? args.lastName : undefined;
            resourceInputs["notificationEmail"] = args ? args.notificationEmail : undefined;
            resourceInputs["readerGroups"] = args ? args.readerGroups : undefined;
            resourceInputs["realm"] = args ? args.realm : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["accountSubscriptionStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuicksightAccountSubscription.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuicksightAccountSubscription resources.
 */
export interface QuicksightAccountSubscriptionState {
    accountName?: pulumi.Input<string>;
    accountSubscriptionStatus?: pulumi.Input<string>;
    activeDirectoryName?: pulumi.Input<string>;
    adminGroups?: pulumi.Input<pulumi.Input<string>[]>;
    authenticationMethod?: pulumi.Input<string>;
    authorGroups?: pulumi.Input<pulumi.Input<string>[]>;
    awsAccountId?: pulumi.Input<string>;
    contactNumber?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    edition?: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    firstName?: pulumi.Input<string>;
    iamIdentityCenterInstanceArn?: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
    notificationEmail?: pulumi.Input<string>;
    readerGroups?: pulumi.Input<pulumi.Input<string>[]>;
    realm?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.QuicksightAccountSubscriptionTimeouts>;
}

/**
 * The set of arguments for constructing a QuicksightAccountSubscription resource.
 */
export interface QuicksightAccountSubscriptionArgs {
    accountName: pulumi.Input<string>;
    activeDirectoryName?: pulumi.Input<string>;
    adminGroups?: pulumi.Input<pulumi.Input<string>[]>;
    authenticationMethod: pulumi.Input<string>;
    authorGroups?: pulumi.Input<pulumi.Input<string>[]>;
    awsAccountId?: pulumi.Input<string>;
    contactNumber?: pulumi.Input<string>;
    directoryId?: pulumi.Input<string>;
    edition: pulumi.Input<string>;
    emailAddress?: pulumi.Input<string>;
    firstName?: pulumi.Input<string>;
    iamIdentityCenterInstanceArn?: pulumi.Input<string>;
    lastName?: pulumi.Input<string>;
    notificationEmail: pulumi.Input<string>;
    readerGroups?: pulumi.Input<pulumi.Input<string>[]>;
    realm?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.QuicksightAccountSubscriptionTimeouts>;
}
