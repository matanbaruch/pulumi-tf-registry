// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GlueDevEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing GlueDevEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueDevEndpointState, opts?: pulumi.CustomResourceOptions): GlueDevEndpoint {
        return new GlueDevEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/glueDevEndpoint:GlueDevEndpoint';

    /**
     * Returns true if the given object is an instance of GlueDevEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueDevEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueDevEndpoint.__pulumiType;
    }

    public readonly arguments!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    public readonly extraJarsS3Path!: pulumi.Output<string | undefined>;
    public readonly extraPythonLibsS3Path!: pulumi.Output<string | undefined>;
    public /*out*/ readonly failureReason!: pulumi.Output<string>;
    public readonly glueVersion!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly numberOfNodes!: pulumi.Output<number | undefined>;
    public readonly numberOfWorkers!: pulumi.Output<number | undefined>;
    public /*out*/ readonly privateAddress!: pulumi.Output<string>;
    public /*out*/ readonly publicAddress!: pulumi.Output<string>;
    public readonly publicKey!: pulumi.Output<string | undefined>;
    public readonly publicKeys!: pulumi.Output<string[] | undefined>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly securityConfiguration!: pulumi.Output<string | undefined>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public readonly workerType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly yarnEndpointAddress!: pulumi.Output<string>;
    public /*out*/ readonly zeppelinRemoteSparkInterpreterPort!: pulumi.Output<number>;

    /**
     * Create a GlueDevEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueDevEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueDevEndpointArgs | GlueDevEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueDevEndpointState | undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["extraJarsS3Path"] = state ? state.extraJarsS3Path : undefined;
            resourceInputs["extraPythonLibsS3Path"] = state ? state.extraPythonLibsS3Path : undefined;
            resourceInputs["failureReason"] = state ? state.failureReason : undefined;
            resourceInputs["glueVersion"] = state ? state.glueVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfNodes"] = state ? state.numberOfNodes : undefined;
            resourceInputs["numberOfWorkers"] = state ? state.numberOfWorkers : undefined;
            resourceInputs["privateAddress"] = state ? state.privateAddress : undefined;
            resourceInputs["publicAddress"] = state ? state.publicAddress : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["publicKeys"] = state ? state.publicKeys : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["securityConfiguration"] = state ? state.securityConfiguration : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["workerType"] = state ? state.workerType : undefined;
            resourceInputs["yarnEndpointAddress"] = state ? state.yarnEndpointAddress : undefined;
            resourceInputs["zeppelinRemoteSparkInterpreterPort"] = state ? state.zeppelinRemoteSparkInterpreterPort : undefined;
        } else {
            const args = argsOrState as GlueDevEndpointArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["extraJarsS3Path"] = args ? args.extraJarsS3Path : undefined;
            resourceInputs["extraPythonLibsS3Path"] = args ? args.extraPythonLibsS3Path : undefined;
            resourceInputs["glueVersion"] = args ? args.glueVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfNodes"] = args ? args.numberOfNodes : undefined;
            resourceInputs["numberOfWorkers"] = args ? args.numberOfWorkers : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["publicKeys"] = args ? args.publicKeys : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["workerType"] = args ? args.workerType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["failureReason"] = undefined /*out*/;
            resourceInputs["privateAddress"] = undefined /*out*/;
            resourceInputs["publicAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["yarnEndpointAddress"] = undefined /*out*/;
            resourceInputs["zeppelinRemoteSparkInterpreterPort"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueDevEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueDevEndpoint resources.
 */
export interface GlueDevEndpointState {
    arguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    arn?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    extraJarsS3Path?: pulumi.Input<string>;
    extraPythonLibsS3Path?: pulumi.Input<string>;
    failureReason?: pulumi.Input<string>;
    glueVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numberOfNodes?: pulumi.Input<number>;
    numberOfWorkers?: pulumi.Input<number>;
    privateAddress?: pulumi.Input<string>;
    publicAddress?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    publicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    roleArn?: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
    workerType?: pulumi.Input<string>;
    yarnEndpointAddress?: pulumi.Input<string>;
    zeppelinRemoteSparkInterpreterPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GlueDevEndpoint resource.
 */
export interface GlueDevEndpointArgs {
    arguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extraJarsS3Path?: pulumi.Input<string>;
    extraPythonLibsS3Path?: pulumi.Input<string>;
    glueVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numberOfNodes?: pulumi.Input<number>;
    numberOfWorkers?: pulumi.Input<number>;
    publicKey?: pulumi.Input<string>;
    publicKeys?: pulumi.Input<pulumi.Input<string>[]>;
    roleArn: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    workerType?: pulumi.Input<string>;
}
