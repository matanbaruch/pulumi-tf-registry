// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AutoscalingGroup extends pulumi.CustomResource {
    /**
     * Get an existing AutoscalingGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoscalingGroupState, opts?: pulumi.CustomResourceOptions): AutoscalingGroup {
        return new AutoscalingGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/autoscalingGroup:AutoscalingGroup';

    /**
     * Returns true if the given object is an instance of AutoscalingGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoscalingGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscalingGroup.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly availabilityZones!: pulumi.Output<string[]>;
    public readonly capacityRebalance!: pulumi.Output<boolean | undefined>;
    public readonly context!: pulumi.Output<string | undefined>;
    public readonly defaultCooldown!: pulumi.Output<number>;
    public readonly defaultInstanceWarmup!: pulumi.Output<number | undefined>;
    public readonly desiredCapacity!: pulumi.Output<number>;
    public readonly desiredCapacityType!: pulumi.Output<string | undefined>;
    public readonly enabledMetrics!: pulumi.Output<string[] | undefined>;
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public readonly forceDeleteWarmPool!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckGracePeriod!: pulumi.Output<number | undefined>;
    public readonly healthCheckType!: pulumi.Output<string>;
    public readonly ignoreFailedScalingActivities!: pulumi.Output<boolean | undefined>;
    public readonly initialLifecycleHooks!: pulumi.Output<outputs.AutoscalingGroupInitialLifecycleHook[] | undefined>;
    public readonly instanceMaintenancePolicy!: pulumi.Output<outputs.AutoscalingGroupInstanceMaintenancePolicy | undefined>;
    public readonly instanceRefresh!: pulumi.Output<outputs.AutoscalingGroupInstanceRefresh | undefined>;
    public readonly launchConfiguration!: pulumi.Output<string | undefined>;
    public readonly launchTemplate!: pulumi.Output<outputs.AutoscalingGroupLaunchTemplate | undefined>;
    public readonly loadBalancers!: pulumi.Output<string[]>;
    public readonly maxInstanceLifetime!: pulumi.Output<number | undefined>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly metricsGranularity!: pulumi.Output<string | undefined>;
    public readonly minElbCapacity!: pulumi.Output<number | undefined>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly mixedInstancesPolicy!: pulumi.Output<outputs.AutoscalingGroupMixedInstancesPolicy | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string>;
    public readonly placementGroup!: pulumi.Output<string | undefined>;
    public /*out*/ readonly predictedCapacity!: pulumi.Output<number>;
    public readonly protectFromScaleIn!: pulumi.Output<boolean | undefined>;
    public readonly serviceLinkedRoleArn!: pulumi.Output<string>;
    public readonly suspendedProcesses!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<outputs.AutoscalingGroupTag[] | undefined>;
    public readonly targetGroupArns!: pulumi.Output<string[]>;
    public readonly terminationPolicies!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.AutoscalingGroupTimeouts | undefined>;
    public readonly trafficSources!: pulumi.Output<outputs.AutoscalingGroupTrafficSource[] | undefined>;
    public readonly vpcZoneIdentifiers!: pulumi.Output<string[]>;
    public readonly waitForCapacityTimeout!: pulumi.Output<string | undefined>;
    public readonly waitForElbCapacity!: pulumi.Output<number | undefined>;
    public readonly warmPool!: pulumi.Output<outputs.AutoscalingGroupWarmPool | undefined>;
    public /*out*/ readonly warmPoolSize!: pulumi.Output<number>;

    /**
     * Create a AutoscalingGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoscalingGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoscalingGroupArgs | AutoscalingGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoscalingGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["capacityRebalance"] = state ? state.capacityRebalance : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["defaultCooldown"] = state ? state.defaultCooldown : undefined;
            resourceInputs["defaultInstanceWarmup"] = state ? state.defaultInstanceWarmup : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["desiredCapacityType"] = state ? state.desiredCapacityType : undefined;
            resourceInputs["enabledMetrics"] = state ? state.enabledMetrics : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["forceDeleteWarmPool"] = state ? state.forceDeleteWarmPool : undefined;
            resourceInputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = state ? state.healthCheckType : undefined;
            resourceInputs["ignoreFailedScalingActivities"] = state ? state.ignoreFailedScalingActivities : undefined;
            resourceInputs["initialLifecycleHooks"] = state ? state.initialLifecycleHooks : undefined;
            resourceInputs["instanceMaintenancePolicy"] = state ? state.instanceMaintenancePolicy : undefined;
            resourceInputs["instanceRefresh"] = state ? state.instanceRefresh : undefined;
            resourceInputs["launchConfiguration"] = state ? state.launchConfiguration : undefined;
            resourceInputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            resourceInputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            resourceInputs["maxInstanceLifetime"] = state ? state.maxInstanceLifetime : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["metricsGranularity"] = state ? state.metricsGranularity : undefined;
            resourceInputs["minElbCapacity"] = state ? state.minElbCapacity : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["mixedInstancesPolicy"] = state ? state.mixedInstancesPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["placementGroup"] = state ? state.placementGroup : undefined;
            resourceInputs["predictedCapacity"] = state ? state.predictedCapacity : undefined;
            resourceInputs["protectFromScaleIn"] = state ? state.protectFromScaleIn : undefined;
            resourceInputs["serviceLinkedRoleArn"] = state ? state.serviceLinkedRoleArn : undefined;
            resourceInputs["suspendedProcesses"] = state ? state.suspendedProcesses : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetGroupArns"] = state ? state.targetGroupArns : undefined;
            resourceInputs["terminationPolicies"] = state ? state.terminationPolicies : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trafficSources"] = state ? state.trafficSources : undefined;
            resourceInputs["vpcZoneIdentifiers"] = state ? state.vpcZoneIdentifiers : undefined;
            resourceInputs["waitForCapacityTimeout"] = state ? state.waitForCapacityTimeout : undefined;
            resourceInputs["waitForElbCapacity"] = state ? state.waitForElbCapacity : undefined;
            resourceInputs["warmPool"] = state ? state.warmPool : undefined;
            resourceInputs["warmPoolSize"] = state ? state.warmPoolSize : undefined;
        } else {
            const args = argsOrState as AutoscalingGroupArgs | undefined;
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["capacityRebalance"] = args ? args.capacityRebalance : undefined;
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["defaultCooldown"] = args ? args.defaultCooldown : undefined;
            resourceInputs["defaultInstanceWarmup"] = args ? args.defaultInstanceWarmup : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["desiredCapacityType"] = args ? args.desiredCapacityType : undefined;
            resourceInputs["enabledMetrics"] = args ? args.enabledMetrics : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["forceDeleteWarmPool"] = args ? args.forceDeleteWarmPool : undefined;
            resourceInputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckType"] = args ? args.healthCheckType : undefined;
            resourceInputs["ignoreFailedScalingActivities"] = args ? args.ignoreFailedScalingActivities : undefined;
            resourceInputs["initialLifecycleHooks"] = args ? args.initialLifecycleHooks : undefined;
            resourceInputs["instanceMaintenancePolicy"] = args ? args.instanceMaintenancePolicy : undefined;
            resourceInputs["instanceRefresh"] = args ? args.instanceRefresh : undefined;
            resourceInputs["launchConfiguration"] = args ? args.launchConfiguration : undefined;
            resourceInputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            resourceInputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            resourceInputs["maxInstanceLifetime"] = args ? args.maxInstanceLifetime : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["metricsGranularity"] = args ? args.metricsGranularity : undefined;
            resourceInputs["minElbCapacity"] = args ? args.minElbCapacity : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["mixedInstancesPolicy"] = args ? args.mixedInstancesPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["placementGroup"] = args ? args.placementGroup : undefined;
            resourceInputs["protectFromScaleIn"] = args ? args.protectFromScaleIn : undefined;
            resourceInputs["serviceLinkedRoleArn"] = args ? args.serviceLinkedRoleArn : undefined;
            resourceInputs["suspendedProcesses"] = args ? args.suspendedProcesses : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetGroupArns"] = args ? args.targetGroupArns : undefined;
            resourceInputs["terminationPolicies"] = args ? args.terminationPolicies : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trafficSources"] = args ? args.trafficSources : undefined;
            resourceInputs["vpcZoneIdentifiers"] = args ? args.vpcZoneIdentifiers : undefined;
            resourceInputs["waitForCapacityTimeout"] = args ? args.waitForCapacityTimeout : undefined;
            resourceInputs["waitForElbCapacity"] = args ? args.waitForElbCapacity : undefined;
            resourceInputs["warmPool"] = args ? args.warmPool : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["predictedCapacity"] = undefined /*out*/;
            resourceInputs["warmPoolSize"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscalingGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoscalingGroup resources.
 */
export interface AutoscalingGroupState {
    arn?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    capacityRebalance?: pulumi.Input<boolean>;
    context?: pulumi.Input<string>;
    defaultCooldown?: pulumi.Input<number>;
    defaultInstanceWarmup?: pulumi.Input<number>;
    desiredCapacity?: pulumi.Input<number>;
    desiredCapacityType?: pulumi.Input<string>;
    enabledMetrics?: pulumi.Input<pulumi.Input<string>[]>;
    forceDelete?: pulumi.Input<boolean>;
    forceDeleteWarmPool?: pulumi.Input<boolean>;
    healthCheckGracePeriod?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    ignoreFailedScalingActivities?: pulumi.Input<boolean>;
    initialLifecycleHooks?: pulumi.Input<pulumi.Input<inputs.AutoscalingGroupInitialLifecycleHook>[]>;
    instanceMaintenancePolicy?: pulumi.Input<inputs.AutoscalingGroupInstanceMaintenancePolicy>;
    instanceRefresh?: pulumi.Input<inputs.AutoscalingGroupInstanceRefresh>;
    launchConfiguration?: pulumi.Input<string>;
    launchTemplate?: pulumi.Input<inputs.AutoscalingGroupLaunchTemplate>;
    loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    maxInstanceLifetime?: pulumi.Input<number>;
    maxSize?: pulumi.Input<number>;
    metricsGranularity?: pulumi.Input<string>;
    minElbCapacity?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    mixedInstancesPolicy?: pulumi.Input<inputs.AutoscalingGroupMixedInstancesPolicy>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    placementGroup?: pulumi.Input<string>;
    predictedCapacity?: pulumi.Input<number>;
    protectFromScaleIn?: pulumi.Input<boolean>;
    serviceLinkedRoleArn?: pulumi.Input<string>;
    suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.AutoscalingGroupTag>[]>;
    targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AutoscalingGroupTimeouts>;
    trafficSources?: pulumi.Input<pulumi.Input<inputs.AutoscalingGroupTrafficSource>[]>;
    vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    waitForCapacityTimeout?: pulumi.Input<string>;
    waitForElbCapacity?: pulumi.Input<number>;
    warmPool?: pulumi.Input<inputs.AutoscalingGroupWarmPool>;
    warmPoolSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AutoscalingGroup resource.
 */
export interface AutoscalingGroupArgs {
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    capacityRebalance?: pulumi.Input<boolean>;
    context?: pulumi.Input<string>;
    defaultCooldown?: pulumi.Input<number>;
    defaultInstanceWarmup?: pulumi.Input<number>;
    desiredCapacity?: pulumi.Input<number>;
    desiredCapacityType?: pulumi.Input<string>;
    enabledMetrics?: pulumi.Input<pulumi.Input<string>[]>;
    forceDelete?: pulumi.Input<boolean>;
    forceDeleteWarmPool?: pulumi.Input<boolean>;
    healthCheckGracePeriod?: pulumi.Input<number>;
    healthCheckType?: pulumi.Input<string>;
    ignoreFailedScalingActivities?: pulumi.Input<boolean>;
    initialLifecycleHooks?: pulumi.Input<pulumi.Input<inputs.AutoscalingGroupInitialLifecycleHook>[]>;
    instanceMaintenancePolicy?: pulumi.Input<inputs.AutoscalingGroupInstanceMaintenancePolicy>;
    instanceRefresh?: pulumi.Input<inputs.AutoscalingGroupInstanceRefresh>;
    launchConfiguration?: pulumi.Input<string>;
    launchTemplate?: pulumi.Input<inputs.AutoscalingGroupLaunchTemplate>;
    loadBalancers?: pulumi.Input<pulumi.Input<string>[]>;
    maxInstanceLifetime?: pulumi.Input<number>;
    maxSize: pulumi.Input<number>;
    metricsGranularity?: pulumi.Input<string>;
    minElbCapacity?: pulumi.Input<number>;
    minSize: pulumi.Input<number>;
    mixedInstancesPolicy?: pulumi.Input<inputs.AutoscalingGroupMixedInstancesPolicy>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    placementGroup?: pulumi.Input<string>;
    protectFromScaleIn?: pulumi.Input<boolean>;
    serviceLinkedRoleArn?: pulumi.Input<string>;
    suspendedProcesses?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.AutoscalingGroupTag>[]>;
    targetGroupArns?: pulumi.Input<pulumi.Input<string>[]>;
    terminationPolicies?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AutoscalingGroupTimeouts>;
    trafficSources?: pulumi.Input<pulumi.Input<inputs.AutoscalingGroupTrafficSource>[]>;
    vpcZoneIdentifiers?: pulumi.Input<pulumi.Input<string>[]>;
    waitForCapacityTimeout?: pulumi.Input<string>;
    waitForElbCapacity?: pulumi.Input<number>;
    warmPool?: pulumi.Input<inputs.AutoscalingGroupWarmPool>;
}
