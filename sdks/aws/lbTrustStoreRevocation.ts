// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbTrustStoreRevocation extends pulumi.CustomResource {
    /**
     * Get an existing LbTrustStoreRevocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbTrustStoreRevocationState, opts?: pulumi.CustomResourceOptions): LbTrustStoreRevocation {
        return new LbTrustStoreRevocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lbTrustStoreRevocation:LbTrustStoreRevocation';

    /**
     * Returns true if the given object is an instance of LbTrustStoreRevocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbTrustStoreRevocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbTrustStoreRevocation.__pulumiType;
    }

    public /*out*/ readonly revocationId!: pulumi.Output<number>;
    public readonly revocationsS3Bucket!: pulumi.Output<string>;
    public readonly revocationsS3Key!: pulumi.Output<string>;
    public readonly revocationsS3ObjectVersion!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LbTrustStoreRevocationTimeouts | undefined>;
    public readonly trustStoreArn!: pulumi.Output<string>;

    /**
     * Create a LbTrustStoreRevocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbTrustStoreRevocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbTrustStoreRevocationArgs | LbTrustStoreRevocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbTrustStoreRevocationState | undefined;
            resourceInputs["revocationId"] = state ? state.revocationId : undefined;
            resourceInputs["revocationsS3Bucket"] = state ? state.revocationsS3Bucket : undefined;
            resourceInputs["revocationsS3Key"] = state ? state.revocationsS3Key : undefined;
            resourceInputs["revocationsS3ObjectVersion"] = state ? state.revocationsS3ObjectVersion : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["trustStoreArn"] = state ? state.trustStoreArn : undefined;
        } else {
            const args = argsOrState as LbTrustStoreRevocationArgs | undefined;
            if ((!args || args.revocationsS3Bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'revocationsS3Bucket'");
            }
            if ((!args || args.revocationsS3Key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'revocationsS3Key'");
            }
            if ((!args || args.trustStoreArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustStoreArn'");
            }
            resourceInputs["revocationsS3Bucket"] = args ? args.revocationsS3Bucket : undefined;
            resourceInputs["revocationsS3Key"] = args ? args.revocationsS3Key : undefined;
            resourceInputs["revocationsS3ObjectVersion"] = args ? args.revocationsS3ObjectVersion : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["trustStoreArn"] = args ? args.trustStoreArn : undefined;
            resourceInputs["revocationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbTrustStoreRevocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbTrustStoreRevocation resources.
 */
export interface LbTrustStoreRevocationState {
    revocationId?: pulumi.Input<number>;
    revocationsS3Bucket?: pulumi.Input<string>;
    revocationsS3Key?: pulumi.Input<string>;
    revocationsS3ObjectVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbTrustStoreRevocationTimeouts>;
    trustStoreArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbTrustStoreRevocation resource.
 */
export interface LbTrustStoreRevocationArgs {
    revocationsS3Bucket: pulumi.Input<string>;
    revocationsS3Key: pulumi.Input<string>;
    revocationsS3ObjectVersion?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbTrustStoreRevocationTimeouts>;
    trustStoreArn: pulumi.Input<string>;
}
