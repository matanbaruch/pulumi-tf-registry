// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RedshiftHsmConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftHsmConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftHsmConfigurationState, opts?: pulumi.CustomResourceOptions): RedshiftHsmConfiguration {
        return new RedshiftHsmConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftHsmConfiguration:RedshiftHsmConfiguration';

    /**
     * Returns true if the given object is an instance of RedshiftHsmConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftHsmConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftHsmConfiguration.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly hsmConfigurationIdentifier!: pulumi.Output<string>;
    public readonly hsmIpAddress!: pulumi.Output<string>;
    public readonly hsmPartitionName!: pulumi.Output<string>;
    public readonly hsmPartitionPassword!: pulumi.Output<string>;
    public readonly hsmServerPublicCertificate!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a RedshiftHsmConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftHsmConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftHsmConfigurationArgs | RedshiftHsmConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftHsmConfigurationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hsmConfigurationIdentifier"] = state ? state.hsmConfigurationIdentifier : undefined;
            resourceInputs["hsmIpAddress"] = state ? state.hsmIpAddress : undefined;
            resourceInputs["hsmPartitionName"] = state ? state.hsmPartitionName : undefined;
            resourceInputs["hsmPartitionPassword"] = state ? state.hsmPartitionPassword : undefined;
            resourceInputs["hsmServerPublicCertificate"] = state ? state.hsmServerPublicCertificate : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as RedshiftHsmConfigurationArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.hsmConfigurationIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hsmConfigurationIdentifier'");
            }
            if ((!args || args.hsmIpAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hsmIpAddress'");
            }
            if ((!args || args.hsmPartitionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hsmPartitionName'");
            }
            if ((!args || args.hsmPartitionPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hsmPartitionPassword'");
            }
            if ((!args || args.hsmServerPublicCertificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hsmServerPublicCertificate'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hsmConfigurationIdentifier"] = args ? args.hsmConfigurationIdentifier : undefined;
            resourceInputs["hsmIpAddress"] = args ? args.hsmIpAddress : undefined;
            resourceInputs["hsmPartitionName"] = args ? args.hsmPartitionName : undefined;
            resourceInputs["hsmPartitionPassword"] = args?.hsmPartitionPassword ? pulumi.secret(args.hsmPartitionPassword) : undefined;
            resourceInputs["hsmServerPublicCertificate"] = args ? args.hsmServerPublicCertificate : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["hsmPartitionPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedshiftHsmConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftHsmConfiguration resources.
 */
export interface RedshiftHsmConfigurationState {
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    hsmConfigurationIdentifier?: pulumi.Input<string>;
    hsmIpAddress?: pulumi.Input<string>;
    hsmPartitionName?: pulumi.Input<string>;
    hsmPartitionPassword?: pulumi.Input<string>;
    hsmServerPublicCertificate?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a RedshiftHsmConfiguration resource.
 */
export interface RedshiftHsmConfigurationArgs {
    description: pulumi.Input<string>;
    hsmConfigurationIdentifier: pulumi.Input<string>;
    hsmIpAddress: pulumi.Input<string>;
    hsmPartitionName: pulumi.Input<string>;
    hsmPartitionPassword: pulumi.Input<string>;
    hsmServerPublicCertificate: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
