// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2ClientVpnEndpoint(args?: GetEc2ClientVpnEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2ClientVpnEndpointResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEc2ClientVpnEndpoint:getEc2ClientVpnEndpoint", {
        "clientVpnEndpointId": args.clientVpnEndpointId,
        "filters": args.filters,
        "id": args.id,
        "tags": args.tags,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2ClientVpnEndpoint.
 */
export interface GetEc2ClientVpnEndpointArgs {
    clientVpnEndpointId?: string;
    filters?: inputs.GetEc2ClientVpnEndpointFilter[];
    id?: string;
    tags?: {[key: string]: string};
    timeouts?: inputs.GetEc2ClientVpnEndpointTimeouts;
}

/**
 * A collection of values returned by getEc2ClientVpnEndpoint.
 */
export interface GetEc2ClientVpnEndpointResult {
    readonly arn: string;
    readonly authenticationOptions: outputs.GetEc2ClientVpnEndpointAuthenticationOption[];
    readonly clientCidrBlock: string;
    readonly clientConnectOptions: outputs.GetEc2ClientVpnEndpointClientConnectOption[];
    readonly clientLoginBannerOptions: outputs.GetEc2ClientVpnEndpointClientLoginBannerOption[];
    readonly clientVpnEndpointId: string;
    readonly connectionLogOptions: outputs.GetEc2ClientVpnEndpointConnectionLogOption[];
    readonly description: string;
    readonly dnsName: string;
    readonly dnsServers: string[];
    readonly filters?: outputs.GetEc2ClientVpnEndpointFilter[];
    readonly id: string;
    readonly securityGroupIds: string[];
    readonly selfServicePortal: string;
    readonly selfServicePortalUrl: string;
    readonly serverCertificateArn: string;
    readonly sessionTimeoutHours: number;
    readonly splitTunnel: boolean;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetEc2ClientVpnEndpointTimeouts;
    readonly transportProtocol: string;
    readonly vpcId: string;
    readonly vpnPort: number;
}
export function getEc2ClientVpnEndpointOutput(args?: GetEc2ClientVpnEndpointOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2ClientVpnEndpointResult> {
    return pulumi.output(args).apply((a: any) => getEc2ClientVpnEndpoint(a, opts))
}

/**
 * A collection of arguments for invoking getEc2ClientVpnEndpoint.
 */
export interface GetEc2ClientVpnEndpointOutputArgs {
    clientVpnEndpointId?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetEc2ClientVpnEndpointFilterArgs>[]>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GetEc2ClientVpnEndpointTimeoutsArgs>;
}
