// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LakeformationResourceLfTag extends pulumi.CustomResource {
    /**
     * Get an existing LakeformationResourceLfTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LakeformationResourceLfTagState, opts?: pulumi.CustomResourceOptions): LakeformationResourceLfTag {
        return new LakeformationResourceLfTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lakeformationResourceLfTag:LakeformationResourceLfTag';

    /**
     * Returns true if the given object is an instance of LakeformationResourceLfTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LakeformationResourceLfTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LakeformationResourceLfTag.__pulumiType;
    }

    public readonly catalogId!: pulumi.Output<string | undefined>;
    public readonly databases!: pulumi.Output<outputs.LakeformationResourceLfTagDatabase[] | undefined>;
    public readonly lfTags!: pulumi.Output<outputs.LakeformationResourceLfTagLfTag[] | undefined>;
    public readonly tableWithColumns!: pulumi.Output<outputs.LakeformationResourceLfTagTableWithColumn[] | undefined>;
    public readonly tables!: pulumi.Output<outputs.LakeformationResourceLfTagTable[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LakeformationResourceLfTagTimeouts | undefined>;

    /**
     * Create a LakeformationResourceLfTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LakeformationResourceLfTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LakeformationResourceLfTagArgs | LakeformationResourceLfTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LakeformationResourceLfTagState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["databases"] = state ? state.databases : undefined;
            resourceInputs["lfTags"] = state ? state.lfTags : undefined;
            resourceInputs["tableWithColumns"] = state ? state.tableWithColumns : undefined;
            resourceInputs["tables"] = state ? state.tables : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LakeformationResourceLfTagArgs | undefined;
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["databases"] = args ? args.databases : undefined;
            resourceInputs["lfTags"] = args ? args.lfTags : undefined;
            resourceInputs["tableWithColumns"] = args ? args.tableWithColumns : undefined;
            resourceInputs["tables"] = args ? args.tables : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LakeformationResourceLfTag.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LakeformationResourceLfTag resources.
 */
export interface LakeformationResourceLfTagState {
    catalogId?: pulumi.Input<string>;
    databases?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagDatabase>[]>;
    lfTags?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagLfTag>[]>;
    tableWithColumns?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagTableWithColumn>[]>;
    tables?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagTable>[]>;
    timeouts?: pulumi.Input<inputs.LakeformationResourceLfTagTimeouts>;
}

/**
 * The set of arguments for constructing a LakeformationResourceLfTag resource.
 */
export interface LakeformationResourceLfTagArgs {
    catalogId?: pulumi.Input<string>;
    databases?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagDatabase>[]>;
    lfTags?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagLfTag>[]>;
    tableWithColumns?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagTableWithColumn>[]>;
    tables?: pulumi.Input<pulumi.Input<inputs.LakeformationResourceLfTagTable>[]>;
    timeouts?: pulumi.Input<inputs.LakeformationResourceLfTagTimeouts>;
}
