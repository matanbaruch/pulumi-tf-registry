// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EksAccessEntry extends pulumi.CustomResource {
    /**
     * Get an existing EksAccessEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EksAccessEntryState, opts?: pulumi.CustomResourceOptions): EksAccessEntry {
        return new EksAccessEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/eksAccessEntry:EksAccessEntry';

    /**
     * Returns true if the given object is an instance of EksAccessEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EksAccessEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EksAccessEntry.__pulumiType;
    }

    public /*out*/ readonly accessEntryArn!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly kubernetesGroups!: pulumi.Output<string[]>;
    public /*out*/ readonly modifiedAt!: pulumi.Output<string>;
    public readonly principalArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.EksAccessEntryTimeouts | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a EksAccessEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EksAccessEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EksAccessEntryArgs | EksAccessEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EksAccessEntryState | undefined;
            resourceInputs["accessEntryArn"] = state ? state.accessEntryArn : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["kubernetesGroups"] = state ? state.kubernetesGroups : undefined;
            resourceInputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            resourceInputs["principalArn"] = state ? state.principalArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as EksAccessEntryArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.principalArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalArn'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["kubernetesGroups"] = args ? args.kubernetesGroups : undefined;
            resourceInputs["principalArn"] = args ? args.principalArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["accessEntryArn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["modifiedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EksAccessEntry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EksAccessEntry resources.
 */
export interface EksAccessEntryState {
    accessEntryArn?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    kubernetesGroups?: pulumi.Input<pulumi.Input<string>[]>;
    modifiedAt?: pulumi.Input<string>;
    principalArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EksAccessEntryTimeouts>;
    type?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EksAccessEntry resource.
 */
export interface EksAccessEntryArgs {
    clusterName: pulumi.Input<string>;
    kubernetesGroups?: pulumi.Input<pulumi.Input<string>[]>;
    principalArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EksAccessEntryTimeouts>;
    type?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}
