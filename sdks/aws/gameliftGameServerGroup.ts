// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GameliftGameServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing GameliftGameServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GameliftGameServerGroupState, opts?: pulumi.CustomResourceOptions): GameliftGameServerGroup {
        return new GameliftGameServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/gameliftGameServerGroup:GameliftGameServerGroup';

    /**
     * Returns true if the given object is an instance of GameliftGameServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GameliftGameServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GameliftGameServerGroup.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly autoScalingGroupArn!: pulumi.Output<string>;
    public readonly autoScalingPolicy!: pulumi.Output<outputs.GameliftGameServerGroupAutoScalingPolicy | undefined>;
    public readonly balancingStrategy!: pulumi.Output<string>;
    public readonly gameServerGroupName!: pulumi.Output<string>;
    public readonly gameServerProtectionPolicy!: pulumi.Output<string>;
    public readonly instanceDefinitions!: pulumi.Output<outputs.GameliftGameServerGroupInstanceDefinition[]>;
    public readonly launchTemplate!: pulumi.Output<outputs.GameliftGameServerGroupLaunchTemplate>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.GameliftGameServerGroupTimeouts | undefined>;
    public readonly vpcSubnets!: pulumi.Output<string[] | undefined>;

    /**
     * Create a GameliftGameServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GameliftGameServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GameliftGameServerGroupArgs | GameliftGameServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GameliftGameServerGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoScalingGroupArn"] = state ? state.autoScalingGroupArn : undefined;
            resourceInputs["autoScalingPolicy"] = state ? state.autoScalingPolicy : undefined;
            resourceInputs["balancingStrategy"] = state ? state.balancingStrategy : undefined;
            resourceInputs["gameServerGroupName"] = state ? state.gameServerGroupName : undefined;
            resourceInputs["gameServerProtectionPolicy"] = state ? state.gameServerProtectionPolicy : undefined;
            resourceInputs["instanceDefinitions"] = state ? state.instanceDefinitions : undefined;
            resourceInputs["launchTemplate"] = state ? state.launchTemplate : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcSubnets"] = state ? state.vpcSubnets : undefined;
        } else {
            const args = argsOrState as GameliftGameServerGroupArgs | undefined;
            if ((!args || args.gameServerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gameServerGroupName'");
            }
            if ((!args || args.instanceDefinitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceDefinitions'");
            }
            if ((!args || args.launchTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplate'");
            }
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["autoScalingPolicy"] = args ? args.autoScalingPolicy : undefined;
            resourceInputs["balancingStrategy"] = args ? args.balancingStrategy : undefined;
            resourceInputs["gameServerGroupName"] = args ? args.gameServerGroupName : undefined;
            resourceInputs["gameServerProtectionPolicy"] = args ? args.gameServerProtectionPolicy : undefined;
            resourceInputs["instanceDefinitions"] = args ? args.instanceDefinitions : undefined;
            resourceInputs["launchTemplate"] = args ? args.launchTemplate : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcSubnets"] = args ? args.vpcSubnets : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["autoScalingGroupArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GameliftGameServerGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GameliftGameServerGroup resources.
 */
export interface GameliftGameServerGroupState {
    arn?: pulumi.Input<string>;
    autoScalingGroupArn?: pulumi.Input<string>;
    autoScalingPolicy?: pulumi.Input<inputs.GameliftGameServerGroupAutoScalingPolicy>;
    balancingStrategy?: pulumi.Input<string>;
    gameServerGroupName?: pulumi.Input<string>;
    gameServerProtectionPolicy?: pulumi.Input<string>;
    instanceDefinitions?: pulumi.Input<pulumi.Input<inputs.GameliftGameServerGroupInstanceDefinition>[]>;
    launchTemplate?: pulumi.Input<inputs.GameliftGameServerGroupLaunchTemplate>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GameliftGameServerGroupTimeouts>;
    vpcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a GameliftGameServerGroup resource.
 */
export interface GameliftGameServerGroupArgs {
    autoScalingPolicy?: pulumi.Input<inputs.GameliftGameServerGroupAutoScalingPolicy>;
    balancingStrategy?: pulumi.Input<string>;
    gameServerGroupName: pulumi.Input<string>;
    gameServerProtectionPolicy?: pulumi.Input<string>;
    instanceDefinitions: pulumi.Input<pulumi.Input<inputs.GameliftGameServerGroupInstanceDefinition>[]>;
    launchTemplate: pulumi.Input<inputs.GameliftGameServerGroupLaunchTemplate>;
    maxSize: pulumi.Input<number>;
    minSize: pulumi.Input<number>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GameliftGameServerGroupTimeouts>;
    vpcSubnets?: pulumi.Input<pulumi.Input<string>[]>;
}
