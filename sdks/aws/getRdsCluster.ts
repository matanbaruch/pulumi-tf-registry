// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRdsCluster(args: GetRdsClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetRdsClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getRdsCluster:getRdsCluster", {
        "clusterIdentifier": args.clusterIdentifier,
        "id": args.id,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRdsCluster.
 */
export interface GetRdsClusterArgs {
    clusterIdentifier: string;
    id?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getRdsCluster.
 */
export interface GetRdsClusterResult {
    readonly arn: string;
    readonly availabilityZones: string[];
    readonly backtrackWindow: number;
    readonly backupRetentionPeriod: number;
    readonly clusterIdentifier: string;
    readonly clusterMembers: string[];
    readonly clusterResourceId: string;
    readonly databaseName: string;
    readonly dbClusterParameterGroupName: string;
    readonly dbSubnetGroupName: string;
    readonly dbSystemId: string;
    readonly enabledCloudwatchLogsExports: string[];
    readonly endpoint: string;
    readonly engine: string;
    readonly engineMode: string;
    readonly engineVersion: string;
    readonly finalSnapshotIdentifier: string;
    readonly hostedZoneId: string;
    readonly iamDatabaseAuthenticationEnabled: boolean;
    readonly iamRoles: string[];
    readonly id: string;
    readonly kmsKeyId: string;
    readonly masterUserSecrets: outputs.GetRdsClusterMasterUserSecret[];
    readonly masterUsername: string;
    readonly networkType: string;
    readonly port: number;
    readonly preferredBackupWindow: string;
    readonly preferredMaintenanceWindow: string;
    readonly readerEndpoint: string;
    readonly replicationSourceIdentifier: string;
    readonly storageEncrypted: boolean;
    readonly tags: {[key: string]: string};
    readonly vpcSecurityGroupIds: string[];
}
export function getRdsClusterOutput(args: GetRdsClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRdsClusterResult> {
    return pulumi.output(args).apply((a: any) => getRdsCluster(a, opts))
}

/**
 * A collection of arguments for invoking getRdsCluster.
 */
export interface GetRdsClusterOutputArgs {
    clusterIdentifier: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
