// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EvidentlyLaunch extends pulumi.CustomResource {
    /**
     * Get an existing EvidentlyLaunch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EvidentlyLaunchState, opts?: pulumi.CustomResourceOptions): EvidentlyLaunch {
        return new EvidentlyLaunch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/evidentlyLaunch:EvidentlyLaunch';

    /**
     * Returns true if the given object is an instance of EvidentlyLaunch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EvidentlyLaunch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EvidentlyLaunch.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly executions!: pulumi.Output<outputs.EvidentlyLaunchExecution[]>;
    public readonly groups!: pulumi.Output<outputs.EvidentlyLaunchGroup[]>;
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    public readonly metricMonitors!: pulumi.Output<outputs.EvidentlyLaunchMetricMonitor[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly project!: pulumi.Output<string>;
    public readonly randomizationSalt!: pulumi.Output<string | undefined>;
    public readonly scheduledSplitsConfig!: pulumi.Output<outputs.EvidentlyLaunchScheduledSplitsConfig | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly statusReason!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.EvidentlyLaunchTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a EvidentlyLaunch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EvidentlyLaunchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EvidentlyLaunchArgs | EvidentlyLaunchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EvidentlyLaunchState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executions"] = state ? state.executions : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["lastUpdatedTime"] = state ? state.lastUpdatedTime : undefined;
            resourceInputs["metricMonitors"] = state ? state.metricMonitors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["randomizationSalt"] = state ? state.randomizationSalt : undefined;
            resourceInputs["scheduledSplitsConfig"] = state ? state.scheduledSplitsConfig : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as EvidentlyLaunchArgs | undefined;
            if ((!args || args.groups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groups'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["metricMonitors"] = args ? args.metricMonitors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["randomizationSalt"] = args ? args.randomizationSalt : undefined;
            resourceInputs["scheduledSplitsConfig"] = args ? args.scheduledSplitsConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["executions"] = undefined /*out*/;
            resourceInputs["lastUpdatedTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusReason"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EvidentlyLaunch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EvidentlyLaunch resources.
 */
export interface EvidentlyLaunchState {
    arn?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    executions?: pulumi.Input<pulumi.Input<inputs.EvidentlyLaunchExecution>[]>;
    groups?: pulumi.Input<pulumi.Input<inputs.EvidentlyLaunchGroup>[]>;
    lastUpdatedTime?: pulumi.Input<string>;
    metricMonitors?: pulumi.Input<pulumi.Input<inputs.EvidentlyLaunchMetricMonitor>[]>;
    name?: pulumi.Input<string>;
    project?: pulumi.Input<string>;
    randomizationSalt?: pulumi.Input<string>;
    scheduledSplitsConfig?: pulumi.Input<inputs.EvidentlyLaunchScheduledSplitsConfig>;
    status?: pulumi.Input<string>;
    statusReason?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EvidentlyLaunchTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EvidentlyLaunch resource.
 */
export interface EvidentlyLaunchArgs {
    description?: pulumi.Input<string>;
    groups: pulumi.Input<pulumi.Input<inputs.EvidentlyLaunchGroup>[]>;
    metricMonitors?: pulumi.Input<pulumi.Input<inputs.EvidentlyLaunchMetricMonitor>[]>;
    name?: pulumi.Input<string>;
    project: pulumi.Input<string>;
    randomizationSalt?: pulumi.Input<string>;
    scheduledSplitsConfig?: pulumi.Input<inputs.EvidentlyLaunchScheduledSplitsConfig>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EvidentlyLaunchTimeouts>;
}
