// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerDeviceFleet extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerDeviceFleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerDeviceFleetState, opts?: pulumi.CustomResourceOptions): SagemakerDeviceFleet {
        return new SagemakerDeviceFleet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/sagemakerDeviceFleet:SagemakerDeviceFleet';

    /**
     * Returns true if the given object is an instance of SagemakerDeviceFleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerDeviceFleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerDeviceFleet.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceFleetName!: pulumi.Output<string>;
    public readonly enableIotRoleAlias!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly iotRoleAlias!: pulumi.Output<string>;
    public readonly outputConfig!: pulumi.Output<outputs.SagemakerDeviceFleetOutputConfig>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a SagemakerDeviceFleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerDeviceFleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerDeviceFleetArgs | SagemakerDeviceFleetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerDeviceFleetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceFleetName"] = state ? state.deviceFleetName : undefined;
            resourceInputs["enableIotRoleAlias"] = state ? state.enableIotRoleAlias : undefined;
            resourceInputs["iotRoleAlias"] = state ? state.iotRoleAlias : undefined;
            resourceInputs["outputConfig"] = state ? state.outputConfig : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as SagemakerDeviceFleetArgs | undefined;
            if ((!args || args.deviceFleetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceFleetName'");
            }
            if ((!args || args.outputConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputConfig'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceFleetName"] = args ? args.deviceFleetName : undefined;
            resourceInputs["enableIotRoleAlias"] = args ? args.enableIotRoleAlias : undefined;
            resourceInputs["outputConfig"] = args ? args.outputConfig : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["iotRoleAlias"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerDeviceFleet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerDeviceFleet resources.
 */
export interface SagemakerDeviceFleetState {
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceFleetName?: pulumi.Input<string>;
    enableIotRoleAlias?: pulumi.Input<boolean>;
    iotRoleAlias?: pulumi.Input<string>;
    outputConfig?: pulumi.Input<inputs.SagemakerDeviceFleetOutputConfig>;
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a SagemakerDeviceFleet resource.
 */
export interface SagemakerDeviceFleetArgs {
    description?: pulumi.Input<string>;
    deviceFleetName: pulumi.Input<string>;
    enableIotRoleAlias?: pulumi.Input<boolean>;
    outputConfig: pulumi.Input<inputs.SagemakerDeviceFleetOutputConfig>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
