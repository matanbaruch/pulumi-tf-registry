// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SesIdentityNotificationTopic extends pulumi.CustomResource {
    /**
     * Get an existing SesIdentityNotificationTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SesIdentityNotificationTopicState, opts?: pulumi.CustomResourceOptions): SesIdentityNotificationTopic {
        return new SesIdentityNotificationTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/sesIdentityNotificationTopic:SesIdentityNotificationTopic';

    /**
     * Returns true if the given object is an instance of SesIdentityNotificationTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SesIdentityNotificationTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SesIdentityNotificationTopic.__pulumiType;
    }

    public readonly identity!: pulumi.Output<string>;
    public readonly includeOriginalHeaders!: pulumi.Output<boolean | undefined>;
    public readonly notificationType!: pulumi.Output<string>;
    public readonly topicArn!: pulumi.Output<string | undefined>;

    /**
     * Create a SesIdentityNotificationTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SesIdentityNotificationTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SesIdentityNotificationTopicArgs | SesIdentityNotificationTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SesIdentityNotificationTopicState | undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["includeOriginalHeaders"] = state ? state.includeOriginalHeaders : undefined;
            resourceInputs["notificationType"] = state ? state.notificationType : undefined;
            resourceInputs["topicArn"] = state ? state.topicArn : undefined;
        } else {
            const args = argsOrState as SesIdentityNotificationTopicArgs | undefined;
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.notificationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationType'");
            }
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["includeOriginalHeaders"] = args ? args.includeOriginalHeaders : undefined;
            resourceInputs["notificationType"] = args ? args.notificationType : undefined;
            resourceInputs["topicArn"] = args ? args.topicArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SesIdentityNotificationTopic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SesIdentityNotificationTopic resources.
 */
export interface SesIdentityNotificationTopicState {
    identity?: pulumi.Input<string>;
    includeOriginalHeaders?: pulumi.Input<boolean>;
    notificationType?: pulumi.Input<string>;
    topicArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SesIdentityNotificationTopic resource.
 */
export interface SesIdentityNotificationTopicArgs {
    identity: pulumi.Input<string>;
    includeOriginalHeaders?: pulumi.Input<boolean>;
    notificationType: pulumi.Input<string>;
    topicArn?: pulumi.Input<string>;
}
