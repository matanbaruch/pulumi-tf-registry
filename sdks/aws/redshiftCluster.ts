// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftCluster extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftClusterState, opts?: pulumi.CustomResourceOptions): RedshiftCluster {
        return new RedshiftCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftCluster:RedshiftCluster';

    /**
     * Returns true if the given object is an instance of RedshiftCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftCluster.__pulumiType;
    }

    public readonly allowVersionUpgrade!: pulumi.Output<boolean | undefined>;
    public readonly applyImmediately!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly aquaConfigurationStatus!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly automatedSnapshotRetentionPeriod!: pulumi.Output<number | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly availabilityZoneRelocationEnabled!: pulumi.Output<boolean | undefined>;
    public readonly clusterIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly clusterNamespaceArn!: pulumi.Output<string>;
    public /*out*/ readonly clusterNodes!: pulumi.Output<outputs.RedshiftClusterClusterNode[]>;
    public readonly clusterParameterGroupName!: pulumi.Output<string>;
    public readonly clusterPublicKey!: pulumi.Output<string>;
    public readonly clusterRevisionNumber!: pulumi.Output<string>;
    public readonly clusterSubnetGroupName!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string>;
    public readonly clusterVersion!: pulumi.Output<string | undefined>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly defaultIamRoleArn!: pulumi.Output<string>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly elasticIp!: pulumi.Output<string | undefined>;
    public readonly encrypted!: pulumi.Output<boolean | undefined>;
    public readonly endpoint!: pulumi.Output<string>;
    public readonly enhancedVpcRouting!: pulumi.Output<boolean>;
    public readonly finalSnapshotIdentifier!: pulumi.Output<string | undefined>;
    public readonly iamRoles!: pulumi.Output<string[]>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly logging!: pulumi.Output<outputs.RedshiftClusterLogging | undefined>;
    public readonly maintenanceTrackName!: pulumi.Output<string | undefined>;
    public readonly manageMasterPassword!: pulumi.Output<boolean | undefined>;
    public readonly manualSnapshotRetentionPeriod!: pulumi.Output<number | undefined>;
    public readonly masterPassword!: pulumi.Output<string | undefined>;
    public /*out*/ readonly masterPasswordSecretArn!: pulumi.Output<string>;
    public readonly masterPasswordSecretKmsKeyId!: pulumi.Output<string>;
    public readonly masterUsername!: pulumi.Output<string | undefined>;
    public readonly multiAz!: pulumi.Output<boolean | undefined>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly numberOfNodes!: pulumi.Output<number | undefined>;
    public readonly ownerAccount!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly preferredMaintenanceWindow!: pulumi.Output<string>;
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    public readonly skipFinalSnapshot!: pulumi.Output<boolean | undefined>;
    public readonly snapshotArn!: pulumi.Output<string | undefined>;
    public readonly snapshotClusterIdentifier!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly snapshotCopy!: pulumi.Output<outputs.RedshiftClusterSnapshotCopy | undefined>;
    public readonly snapshotIdentifier!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.RedshiftClusterTimeouts | undefined>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;

    /**
     * Create a RedshiftCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftClusterArgs | RedshiftClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftClusterState | undefined;
            resourceInputs["allowVersionUpgrade"] = state ? state.allowVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["aquaConfigurationStatus"] = state ? state.aquaConfigurationStatus : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["automatedSnapshotRetentionPeriod"] = state ? state.automatedSnapshotRetentionPeriod : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["availabilityZoneRelocationEnabled"] = state ? state.availabilityZoneRelocationEnabled : undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["clusterNamespaceArn"] = state ? state.clusterNamespaceArn : undefined;
            resourceInputs["clusterNodes"] = state ? state.clusterNodes : undefined;
            resourceInputs["clusterParameterGroupName"] = state ? state.clusterParameterGroupName : undefined;
            resourceInputs["clusterPublicKey"] = state ? state.clusterPublicKey : undefined;
            resourceInputs["clusterRevisionNumber"] = state ? state.clusterRevisionNumber : undefined;
            resourceInputs["clusterSubnetGroupName"] = state ? state.clusterSubnetGroupName : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["clusterVersion"] = state ? state.clusterVersion : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["defaultIamRoleArn"] = state ? state.defaultIamRoleArn : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["elasticIp"] = state ? state.elasticIp : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["enhancedVpcRouting"] = state ? state.enhancedVpcRouting : undefined;
            resourceInputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            resourceInputs["iamRoles"] = state ? state.iamRoles : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["maintenanceTrackName"] = state ? state.maintenanceTrackName : undefined;
            resourceInputs["manageMasterPassword"] = state ? state.manageMasterPassword : undefined;
            resourceInputs["manualSnapshotRetentionPeriod"] = state ? state.manualSnapshotRetentionPeriod : undefined;
            resourceInputs["masterPassword"] = state ? state.masterPassword : undefined;
            resourceInputs["masterPasswordSecretArn"] = state ? state.masterPasswordSecretArn : undefined;
            resourceInputs["masterPasswordSecretKmsKeyId"] = state ? state.masterPasswordSecretKmsKeyId : undefined;
            resourceInputs["masterUsername"] = state ? state.masterUsername : undefined;
            resourceInputs["multiAz"] = state ? state.multiAz : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["numberOfNodes"] = state ? state.numberOfNodes : undefined;
            resourceInputs["ownerAccount"] = state ? state.ownerAccount : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["preferredMaintenanceWindow"] = state ? state.preferredMaintenanceWindow : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["skipFinalSnapshot"] = state ? state.skipFinalSnapshot : undefined;
            resourceInputs["snapshotArn"] = state ? state.snapshotArn : undefined;
            resourceInputs["snapshotClusterIdentifier"] = state ? state.snapshotClusterIdentifier : undefined;
            resourceInputs["snapshotCopy"] = state ? state.snapshotCopy : undefined;
            resourceInputs["snapshotIdentifier"] = state ? state.snapshotIdentifier : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
        } else {
            const args = argsOrState as RedshiftClusterArgs | undefined;
            if ((!args || args.clusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterIdentifier'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            resourceInputs["allowVersionUpgrade"] = args ? args.allowVersionUpgrade : undefined;
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["aquaConfigurationStatus"] = args ? args.aquaConfigurationStatus : undefined;
            resourceInputs["automatedSnapshotRetentionPeriod"] = args ? args.automatedSnapshotRetentionPeriod : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["availabilityZoneRelocationEnabled"] = args ? args.availabilityZoneRelocationEnabled : undefined;
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["clusterParameterGroupName"] = args ? args.clusterParameterGroupName : undefined;
            resourceInputs["clusterPublicKey"] = args ? args.clusterPublicKey : undefined;
            resourceInputs["clusterRevisionNumber"] = args ? args.clusterRevisionNumber : undefined;
            resourceInputs["clusterSubnetGroupName"] = args ? args.clusterSubnetGroupName : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["clusterVersion"] = args ? args.clusterVersion : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["defaultIamRoleArn"] = args ? args.defaultIamRoleArn : undefined;
            resourceInputs["elasticIp"] = args ? args.elasticIp : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["enhancedVpcRouting"] = args ? args.enhancedVpcRouting : undefined;
            resourceInputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            resourceInputs["iamRoles"] = args ? args.iamRoles : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["maintenanceTrackName"] = args ? args.maintenanceTrackName : undefined;
            resourceInputs["manageMasterPassword"] = args ? args.manageMasterPassword : undefined;
            resourceInputs["manualSnapshotRetentionPeriod"] = args ? args.manualSnapshotRetentionPeriod : undefined;
            resourceInputs["masterPassword"] = args?.masterPassword ? pulumi.secret(args.masterPassword) : undefined;
            resourceInputs["masterPasswordSecretKmsKeyId"] = args ? args.masterPasswordSecretKmsKeyId : undefined;
            resourceInputs["masterUsername"] = args ? args.masterUsername : undefined;
            resourceInputs["multiAz"] = args ? args.multiAz : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["numberOfNodes"] = args ? args.numberOfNodes : undefined;
            resourceInputs["ownerAccount"] = args ? args.ownerAccount : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["preferredMaintenanceWindow"] = args ? args.preferredMaintenanceWindow : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["skipFinalSnapshot"] = args ? args.skipFinalSnapshot : undefined;
            resourceInputs["snapshotArn"] = args ? args.snapshotArn : undefined;
            resourceInputs["snapshotClusterIdentifier"] = args ? args.snapshotClusterIdentifier : undefined;
            resourceInputs["snapshotCopy"] = args ? args.snapshotCopy : undefined;
            resourceInputs["snapshotIdentifier"] = args ? args.snapshotIdentifier : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["clusterNamespaceArn"] = undefined /*out*/;
            resourceInputs["clusterNodes"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["masterPasswordSecretArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["masterPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RedshiftCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftCluster resources.
 */
export interface RedshiftClusterState {
    allowVersionUpgrade?: pulumi.Input<boolean>;
    applyImmediately?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    aquaConfigurationStatus?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    automatedSnapshotRetentionPeriod?: pulumi.Input<number>;
    availabilityZone?: pulumi.Input<string>;
    availabilityZoneRelocationEnabled?: pulumi.Input<boolean>;
    clusterIdentifier?: pulumi.Input<string>;
    clusterNamespaceArn?: pulumi.Input<string>;
    clusterNodes?: pulumi.Input<pulumi.Input<inputs.RedshiftClusterClusterNode>[]>;
    clusterParameterGroupName?: pulumi.Input<string>;
    clusterPublicKey?: pulumi.Input<string>;
    clusterRevisionNumber?: pulumi.Input<string>;
    clusterSubnetGroupName?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    defaultIamRoleArn?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    elasticIp?: pulumi.Input<string>;
    encrypted?: pulumi.Input<boolean>;
    endpoint?: pulumi.Input<string>;
    enhancedVpcRouting?: pulumi.Input<boolean>;
    finalSnapshotIdentifier?: pulumi.Input<string>;
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    kmsKeyId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    logging?: pulumi.Input<inputs.RedshiftClusterLogging>;
    maintenanceTrackName?: pulumi.Input<string>;
    manageMasterPassword?: pulumi.Input<boolean>;
    manualSnapshotRetentionPeriod?: pulumi.Input<number>;
    masterPassword?: pulumi.Input<string>;
    masterPasswordSecretArn?: pulumi.Input<string>;
    masterPasswordSecretKmsKeyId?: pulumi.Input<string>;
    masterUsername?: pulumi.Input<string>;
    multiAz?: pulumi.Input<boolean>;
    nodeType?: pulumi.Input<string>;
    numberOfNodes?: pulumi.Input<number>;
    ownerAccount?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    publiclyAccessible?: pulumi.Input<boolean>;
    skipFinalSnapshot?: pulumi.Input<boolean>;
    snapshotArn?: pulumi.Input<string>;
    snapshotClusterIdentifier?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    snapshotCopy?: pulumi.Input<inputs.RedshiftClusterSnapshotCopy>;
    snapshotIdentifier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedshiftClusterTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RedshiftCluster resource.
 */
export interface RedshiftClusterArgs {
    allowVersionUpgrade?: pulumi.Input<boolean>;
    applyImmediately?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    aquaConfigurationStatus?: pulumi.Input<string>;
    automatedSnapshotRetentionPeriod?: pulumi.Input<number>;
    availabilityZone?: pulumi.Input<string>;
    availabilityZoneRelocationEnabled?: pulumi.Input<boolean>;
    clusterIdentifier: pulumi.Input<string>;
    clusterParameterGroupName?: pulumi.Input<string>;
    clusterPublicKey?: pulumi.Input<string>;
    clusterRevisionNumber?: pulumi.Input<string>;
    clusterSubnetGroupName?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    defaultIamRoleArn?: pulumi.Input<string>;
    elasticIp?: pulumi.Input<string>;
    encrypted?: pulumi.Input<boolean>;
    endpoint?: pulumi.Input<string>;
    enhancedVpcRouting?: pulumi.Input<boolean>;
    finalSnapshotIdentifier?: pulumi.Input<string>;
    iamRoles?: pulumi.Input<pulumi.Input<string>[]>;
    kmsKeyId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    logging?: pulumi.Input<inputs.RedshiftClusterLogging>;
    maintenanceTrackName?: pulumi.Input<string>;
    manageMasterPassword?: pulumi.Input<boolean>;
    manualSnapshotRetentionPeriod?: pulumi.Input<number>;
    masterPassword?: pulumi.Input<string>;
    masterPasswordSecretKmsKeyId?: pulumi.Input<string>;
    masterUsername?: pulumi.Input<string>;
    multiAz?: pulumi.Input<boolean>;
    nodeType: pulumi.Input<string>;
    numberOfNodes?: pulumi.Input<number>;
    ownerAccount?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferredMaintenanceWindow?: pulumi.Input<string>;
    publiclyAccessible?: pulumi.Input<boolean>;
    skipFinalSnapshot?: pulumi.Input<boolean>;
    snapshotArn?: pulumi.Input<string>;
    snapshotClusterIdentifier?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    snapshotCopy?: pulumi.Input<inputs.RedshiftClusterSnapshotCopy>;
    snapshotIdentifier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedshiftClusterTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
}
