// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class S3controlAccessGrantsLocation extends pulumi.CustomResource {
    /**
     * Get an existing S3controlAccessGrantsLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3controlAccessGrantsLocationState, opts?: pulumi.CustomResourceOptions): S3controlAccessGrantsLocation {
        return new S3controlAccessGrantsLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/s3controlAccessGrantsLocation:S3controlAccessGrantsLocation';

    /**
     * Returns true if the given object is an instance of S3controlAccessGrantsLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3controlAccessGrantsLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3controlAccessGrantsLocation.__pulumiType;
    }

    public /*out*/ readonly accessGrantsLocationArn!: pulumi.Output<string>;
    public /*out*/ readonly accessGrantsLocationId!: pulumi.Output<string>;
    public readonly accountId!: pulumi.Output<string>;
    public readonly iamRoleArn!: pulumi.Output<string>;
    public readonly locationScope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a S3controlAccessGrantsLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3controlAccessGrantsLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3controlAccessGrantsLocationArgs | S3controlAccessGrantsLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3controlAccessGrantsLocationState | undefined;
            resourceInputs["accessGrantsLocationArn"] = state ? state.accessGrantsLocationArn : undefined;
            resourceInputs["accessGrantsLocationId"] = state ? state.accessGrantsLocationId : undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["locationScope"] = state ? state.locationScope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as S3controlAccessGrantsLocationArgs | undefined;
            if ((!args || args.iamRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if ((!args || args.locationScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationScope'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["locationScope"] = args ? args.locationScope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accessGrantsLocationArn"] = undefined /*out*/;
            resourceInputs["accessGrantsLocationId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3controlAccessGrantsLocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3controlAccessGrantsLocation resources.
 */
export interface S3controlAccessGrantsLocationState {
    accessGrantsLocationArn?: pulumi.Input<string>;
    accessGrantsLocationId?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    iamRoleArn?: pulumi.Input<string>;
    locationScope?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a S3controlAccessGrantsLocation resource.
 */
export interface S3controlAccessGrantsLocationArgs {
    accountId?: pulumi.Input<string>;
    iamRoleArn: pulumi.Input<string>;
    locationScope: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
