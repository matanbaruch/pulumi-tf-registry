// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Apigatewayv2Authorizer extends pulumi.CustomResource {
    /**
     * Get an existing Apigatewayv2Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Apigatewayv2AuthorizerState, opts?: pulumi.CustomResourceOptions): Apigatewayv2Authorizer {
        return new Apigatewayv2Authorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/apigatewayv2Authorizer:Apigatewayv2Authorizer';

    /**
     * Returns true if the given object is an instance of Apigatewayv2Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Apigatewayv2Authorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Apigatewayv2Authorizer.__pulumiType;
    }

    public readonly apiId!: pulumi.Output<string>;
    public readonly authorizerCredentialsArn!: pulumi.Output<string | undefined>;
    public readonly authorizerPayloadFormatVersion!: pulumi.Output<string | undefined>;
    public readonly authorizerResultTtlInSeconds!: pulumi.Output<number>;
    public readonly authorizerType!: pulumi.Output<string>;
    public readonly authorizerUri!: pulumi.Output<string | undefined>;
    public readonly enableSimpleResponses!: pulumi.Output<boolean | undefined>;
    public readonly identitySources!: pulumi.Output<string[] | undefined>;
    public readonly jwtConfiguration!: pulumi.Output<outputs.Apigatewayv2AuthorizerJwtConfiguration | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.Apigatewayv2AuthorizerTimeouts | undefined>;

    /**
     * Create a Apigatewayv2Authorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Apigatewayv2AuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Apigatewayv2AuthorizerArgs | Apigatewayv2AuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Apigatewayv2AuthorizerState | undefined;
            resourceInputs["apiId"] = state ? state.apiId : undefined;
            resourceInputs["authorizerCredentialsArn"] = state ? state.authorizerCredentialsArn : undefined;
            resourceInputs["authorizerPayloadFormatVersion"] = state ? state.authorizerPayloadFormatVersion : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = state ? state.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerType"] = state ? state.authorizerType : undefined;
            resourceInputs["authorizerUri"] = state ? state.authorizerUri : undefined;
            resourceInputs["enableSimpleResponses"] = state ? state.enableSimpleResponses : undefined;
            resourceInputs["identitySources"] = state ? state.identitySources : undefined;
            resourceInputs["jwtConfiguration"] = state ? state.jwtConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as Apigatewayv2AuthorizerArgs | undefined;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.authorizerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizerType'");
            }
            resourceInputs["apiId"] = args ? args.apiId : undefined;
            resourceInputs["authorizerCredentialsArn"] = args ? args.authorizerCredentialsArn : undefined;
            resourceInputs["authorizerPayloadFormatVersion"] = args ? args.authorizerPayloadFormatVersion : undefined;
            resourceInputs["authorizerResultTtlInSeconds"] = args ? args.authorizerResultTtlInSeconds : undefined;
            resourceInputs["authorizerType"] = args ? args.authorizerType : undefined;
            resourceInputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            resourceInputs["enableSimpleResponses"] = args ? args.enableSimpleResponses : undefined;
            resourceInputs["identitySources"] = args ? args.identitySources : undefined;
            resourceInputs["jwtConfiguration"] = args ? args.jwtConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Apigatewayv2Authorizer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Apigatewayv2Authorizer resources.
 */
export interface Apigatewayv2AuthorizerState {
    apiId?: pulumi.Input<string>;
    authorizerCredentialsArn?: pulumi.Input<string>;
    authorizerPayloadFormatVersion?: pulumi.Input<string>;
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    authorizerType?: pulumi.Input<string>;
    authorizerUri?: pulumi.Input<string>;
    enableSimpleResponses?: pulumi.Input<boolean>;
    identitySources?: pulumi.Input<pulumi.Input<string>[]>;
    jwtConfiguration?: pulumi.Input<inputs.Apigatewayv2AuthorizerJwtConfiguration>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Apigatewayv2AuthorizerTimeouts>;
}

/**
 * The set of arguments for constructing a Apigatewayv2Authorizer resource.
 */
export interface Apigatewayv2AuthorizerArgs {
    apiId: pulumi.Input<string>;
    authorizerCredentialsArn?: pulumi.Input<string>;
    authorizerPayloadFormatVersion?: pulumi.Input<string>;
    authorizerResultTtlInSeconds?: pulumi.Input<number>;
    authorizerType: pulumi.Input<string>;
    authorizerUri?: pulumi.Input<string>;
    enableSimpleResponses?: pulumi.Input<boolean>;
    identitySources?: pulumi.Input<pulumi.Input<string>[]>;
    jwtConfiguration?: pulumi.Input<inputs.Apigatewayv2AuthorizerJwtConfiguration>;
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Apigatewayv2AuthorizerTimeouts>;
}
