// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Route53HostedZoneDnssec extends pulumi.CustomResource {
    /**
     * Get an existing Route53HostedZoneDnssec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Route53HostedZoneDnssecState, opts?: pulumi.CustomResourceOptions): Route53HostedZoneDnssec {
        return new Route53HostedZoneDnssec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/route53HostedZoneDnssec:Route53HostedZoneDnssec';

    /**
     * Returns true if the given object is an instance of Route53HostedZoneDnssec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route53HostedZoneDnssec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route53HostedZoneDnssec.__pulumiType;
    }

    public readonly hostedZoneId!: pulumi.Output<string>;
    public readonly signingStatus!: pulumi.Output<string | undefined>;

    /**
     * Create a Route53HostedZoneDnssec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Route53HostedZoneDnssecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Route53HostedZoneDnssecArgs | Route53HostedZoneDnssecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Route53HostedZoneDnssecState | undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["signingStatus"] = state ? state.signingStatus : undefined;
        } else {
            const args = argsOrState as Route53HostedZoneDnssecArgs | undefined;
            if ((!args || args.hostedZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostedZoneId'");
            }
            resourceInputs["hostedZoneId"] = args ? args.hostedZoneId : undefined;
            resourceInputs["signingStatus"] = args ? args.signingStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route53HostedZoneDnssec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route53HostedZoneDnssec resources.
 */
export interface Route53HostedZoneDnssecState {
    hostedZoneId?: pulumi.Input<string>;
    signingStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route53HostedZoneDnssec resource.
 */
export interface Route53HostedZoneDnssecArgs {
    hostedZoneId: pulumi.Input<string>;
    signingStatus?: pulumi.Input<string>;
}
