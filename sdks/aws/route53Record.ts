// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Route53Record extends pulumi.CustomResource {
    /**
     * Get an existing Route53Record resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Route53RecordState, opts?: pulumi.CustomResourceOptions): Route53Record {
        return new Route53Record(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/route53Record:Route53Record';

    /**
     * Returns true if the given object is an instance of Route53Record.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route53Record {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route53Record.__pulumiType;
    }

    public readonly alias!: pulumi.Output<outputs.Route53RecordAlias | undefined>;
    public readonly allowOverwrite!: pulumi.Output<boolean>;
    public readonly cidrRoutingPolicy!: pulumi.Output<outputs.Route53RecordCidrRoutingPolicy | undefined>;
    public readonly failoverRoutingPolicy!: pulumi.Output<outputs.Route53RecordFailoverRoutingPolicy | undefined>;
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    public readonly geolocationRoutingPolicy!: pulumi.Output<outputs.Route53RecordGeolocationRoutingPolicy | undefined>;
    public readonly geoproximityRoutingPolicy!: pulumi.Output<outputs.Route53RecordGeoproximityRoutingPolicy | undefined>;
    public readonly healthCheckId!: pulumi.Output<string | undefined>;
    public readonly latencyRoutingPolicy!: pulumi.Output<outputs.Route53RecordLatencyRoutingPolicy | undefined>;
    public readonly multivalueAnswerRoutingPolicy!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly records!: pulumi.Output<string[] | undefined>;
    public readonly setIdentifier!: pulumi.Output<string | undefined>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly weightedRoutingPolicy!: pulumi.Output<outputs.Route53RecordWeightedRoutingPolicy | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Route53Record resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Route53RecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Route53RecordArgs | Route53RecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Route53RecordState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["allowOverwrite"] = state ? state.allowOverwrite : undefined;
            resourceInputs["cidrRoutingPolicy"] = state ? state.cidrRoutingPolicy : undefined;
            resourceInputs["failoverRoutingPolicy"] = state ? state.failoverRoutingPolicy : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["geolocationRoutingPolicy"] = state ? state.geolocationRoutingPolicy : undefined;
            resourceInputs["geoproximityRoutingPolicy"] = state ? state.geoproximityRoutingPolicy : undefined;
            resourceInputs["healthCheckId"] = state ? state.healthCheckId : undefined;
            resourceInputs["latencyRoutingPolicy"] = state ? state.latencyRoutingPolicy : undefined;
            resourceInputs["multivalueAnswerRoutingPolicy"] = state ? state.multivalueAnswerRoutingPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["records"] = state ? state.records : undefined;
            resourceInputs["setIdentifier"] = state ? state.setIdentifier : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["weightedRoutingPolicy"] = state ? state.weightedRoutingPolicy : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as Route53RecordArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["allowOverwrite"] = args ? args.allowOverwrite : undefined;
            resourceInputs["cidrRoutingPolicy"] = args ? args.cidrRoutingPolicy : undefined;
            resourceInputs["failoverRoutingPolicy"] = args ? args.failoverRoutingPolicy : undefined;
            resourceInputs["geolocationRoutingPolicy"] = args ? args.geolocationRoutingPolicy : undefined;
            resourceInputs["geoproximityRoutingPolicy"] = args ? args.geoproximityRoutingPolicy : undefined;
            resourceInputs["healthCheckId"] = args ? args.healthCheckId : undefined;
            resourceInputs["latencyRoutingPolicy"] = args ? args.latencyRoutingPolicy : undefined;
            resourceInputs["multivalueAnswerRoutingPolicy"] = args ? args.multivalueAnswerRoutingPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["records"] = args ? args.records : undefined;
            resourceInputs["setIdentifier"] = args ? args.setIdentifier : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["weightedRoutingPolicy"] = args ? args.weightedRoutingPolicy : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route53Record.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route53Record resources.
 */
export interface Route53RecordState {
    alias?: pulumi.Input<inputs.Route53RecordAlias>;
    allowOverwrite?: pulumi.Input<boolean>;
    cidrRoutingPolicy?: pulumi.Input<inputs.Route53RecordCidrRoutingPolicy>;
    failoverRoutingPolicy?: pulumi.Input<inputs.Route53RecordFailoverRoutingPolicy>;
    fqdn?: pulumi.Input<string>;
    geolocationRoutingPolicy?: pulumi.Input<inputs.Route53RecordGeolocationRoutingPolicy>;
    geoproximityRoutingPolicy?: pulumi.Input<inputs.Route53RecordGeoproximityRoutingPolicy>;
    healthCheckId?: pulumi.Input<string>;
    latencyRoutingPolicy?: pulumi.Input<inputs.Route53RecordLatencyRoutingPolicy>;
    multivalueAnswerRoutingPolicy?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    records?: pulumi.Input<pulumi.Input<string>[]>;
    setIdentifier?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    weightedRoutingPolicy?: pulumi.Input<inputs.Route53RecordWeightedRoutingPolicy>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route53Record resource.
 */
export interface Route53RecordArgs {
    alias?: pulumi.Input<inputs.Route53RecordAlias>;
    allowOverwrite?: pulumi.Input<boolean>;
    cidrRoutingPolicy?: pulumi.Input<inputs.Route53RecordCidrRoutingPolicy>;
    failoverRoutingPolicy?: pulumi.Input<inputs.Route53RecordFailoverRoutingPolicy>;
    geolocationRoutingPolicy?: pulumi.Input<inputs.Route53RecordGeolocationRoutingPolicy>;
    geoproximityRoutingPolicy?: pulumi.Input<inputs.Route53RecordGeoproximityRoutingPolicy>;
    healthCheckId?: pulumi.Input<string>;
    latencyRoutingPolicy?: pulumi.Input<inputs.Route53RecordLatencyRoutingPolicy>;
    multivalueAnswerRoutingPolicy?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    records?: pulumi.Input<pulumi.Input<string>[]>;
    setIdentifier?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    weightedRoutingPolicy?: pulumi.Input<inputs.Route53RecordWeightedRoutingPolicy>;
    zoneId: pulumi.Input<string>;
}
