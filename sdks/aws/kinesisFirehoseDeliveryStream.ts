// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KinesisFirehoseDeliveryStream extends pulumi.CustomResource {
    /**
     * Get an existing KinesisFirehoseDeliveryStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KinesisFirehoseDeliveryStreamState, opts?: pulumi.CustomResourceOptions): KinesisFirehoseDeliveryStream {
        return new KinesisFirehoseDeliveryStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/kinesisFirehoseDeliveryStream:KinesisFirehoseDeliveryStream';

    /**
     * Returns true if the given object is an instance of KinesisFirehoseDeliveryStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KinesisFirehoseDeliveryStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KinesisFirehoseDeliveryStream.__pulumiType;
    }

    public readonly arn!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<string>;
    public readonly destinationId!: pulumi.Output<string>;
    public readonly elasticsearchConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamElasticsearchConfiguration | undefined>;
    public readonly extendedS3Configuration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamExtendedS3Configuration | undefined>;
    public readonly httpEndpointConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamHttpEndpointConfiguration | undefined>;
    public readonly kinesisSourceConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamKinesisSourceConfiguration | undefined>;
    public readonly mskSourceConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamMskSourceConfiguration | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly opensearchConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamOpensearchConfiguration | undefined>;
    public readonly opensearchserverlessConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamOpensearchserverlessConfiguration | undefined>;
    public readonly redshiftConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamRedshiftConfiguration | undefined>;
    public readonly serverSideEncryption!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamServerSideEncryption | undefined>;
    public readonly snowflakeConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamSnowflakeConfiguration | undefined>;
    public readonly splunkConfiguration!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamSplunkConfiguration | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.KinesisFirehoseDeliveryStreamTimeouts | undefined>;
    public readonly versionId!: pulumi.Output<string>;

    /**
     * Create a KinesisFirehoseDeliveryStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KinesisFirehoseDeliveryStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KinesisFirehoseDeliveryStreamArgs | KinesisFirehoseDeliveryStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KinesisFirehoseDeliveryStreamState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationId"] = state ? state.destinationId : undefined;
            resourceInputs["elasticsearchConfiguration"] = state ? state.elasticsearchConfiguration : undefined;
            resourceInputs["extendedS3Configuration"] = state ? state.extendedS3Configuration : undefined;
            resourceInputs["httpEndpointConfiguration"] = state ? state.httpEndpointConfiguration : undefined;
            resourceInputs["kinesisSourceConfiguration"] = state ? state.kinesisSourceConfiguration : undefined;
            resourceInputs["mskSourceConfiguration"] = state ? state.mskSourceConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["opensearchConfiguration"] = state ? state.opensearchConfiguration : undefined;
            resourceInputs["opensearchserverlessConfiguration"] = state ? state.opensearchserverlessConfiguration : undefined;
            resourceInputs["redshiftConfiguration"] = state ? state.redshiftConfiguration : undefined;
            resourceInputs["serverSideEncryption"] = state ? state.serverSideEncryption : undefined;
            resourceInputs["snowflakeConfiguration"] = state ? state.snowflakeConfiguration : undefined;
            resourceInputs["splunkConfiguration"] = state ? state.splunkConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["versionId"] = state ? state.versionId : undefined;
        } else {
            const args = argsOrState as KinesisFirehoseDeliveryStreamArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationId"] = args ? args.destinationId : undefined;
            resourceInputs["elasticsearchConfiguration"] = args ? args.elasticsearchConfiguration : undefined;
            resourceInputs["extendedS3Configuration"] = args ? args.extendedS3Configuration : undefined;
            resourceInputs["httpEndpointConfiguration"] = args ? args.httpEndpointConfiguration : undefined;
            resourceInputs["kinesisSourceConfiguration"] = args ? args.kinesisSourceConfiguration : undefined;
            resourceInputs["mskSourceConfiguration"] = args ? args.mskSourceConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["opensearchConfiguration"] = args ? args.opensearchConfiguration : undefined;
            resourceInputs["opensearchserverlessConfiguration"] = args ? args.opensearchserverlessConfiguration : undefined;
            resourceInputs["redshiftConfiguration"] = args ? args.redshiftConfiguration : undefined;
            resourceInputs["serverSideEncryption"] = args ? args.serverSideEncryption : undefined;
            resourceInputs["snowflakeConfiguration"] = args ? args.snowflakeConfiguration : undefined;
            resourceInputs["splunkConfiguration"] = args ? args.splunkConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["versionId"] = args ? args.versionId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KinesisFirehoseDeliveryStream.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KinesisFirehoseDeliveryStream resources.
 */
export interface KinesisFirehoseDeliveryStreamState {
    arn?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    destinationId?: pulumi.Input<string>;
    elasticsearchConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamElasticsearchConfiguration>;
    extendedS3Configuration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamExtendedS3Configuration>;
    httpEndpointConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamHttpEndpointConfiguration>;
    kinesisSourceConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamKinesisSourceConfiguration>;
    mskSourceConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamMskSourceConfiguration>;
    name?: pulumi.Input<string>;
    opensearchConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamOpensearchConfiguration>;
    opensearchserverlessConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamOpensearchserverlessConfiguration>;
    redshiftConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamRedshiftConfiguration>;
    serverSideEncryption?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamServerSideEncryption>;
    snowflakeConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamSnowflakeConfiguration>;
    splunkConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamSplunkConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamTimeouts>;
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KinesisFirehoseDeliveryStream resource.
 */
export interface KinesisFirehoseDeliveryStreamArgs {
    arn?: pulumi.Input<string>;
    destination: pulumi.Input<string>;
    destinationId?: pulumi.Input<string>;
    elasticsearchConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamElasticsearchConfiguration>;
    extendedS3Configuration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamExtendedS3Configuration>;
    httpEndpointConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamHttpEndpointConfiguration>;
    kinesisSourceConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamKinesisSourceConfiguration>;
    mskSourceConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamMskSourceConfiguration>;
    name?: pulumi.Input<string>;
    opensearchConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamOpensearchConfiguration>;
    opensearchserverlessConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamOpensearchserverlessConfiguration>;
    redshiftConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamRedshiftConfiguration>;
    serverSideEncryption?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamServerSideEncryption>;
    snowflakeConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamSnowflakeConfiguration>;
    splunkConfiguration?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamSplunkConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.KinesisFirehoseDeliveryStreamTimeouts>;
    versionId?: pulumi.Input<string>;
}
