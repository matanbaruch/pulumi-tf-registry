// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectUser extends pulumi.CustomResource {
    /**
     * Get an existing ConnectUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectUserState, opts?: pulumi.CustomResourceOptions): ConnectUser {
        return new ConnectUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/connectUser:ConnectUser';

    /**
     * Returns true if the given object is an instance of ConnectUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectUser.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly directoryUserId!: pulumi.Output<string>;
    public readonly hierarchyGroupId!: pulumi.Output<string | undefined>;
    public readonly identityInfo!: pulumi.Output<outputs.ConnectUserIdentityInfo | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly phoneConfig!: pulumi.Output<outputs.ConnectUserPhoneConfig>;
    public readonly routingProfileId!: pulumi.Output<string>;
    public readonly securityProfileIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly userId!: pulumi.Output<string>;

    /**
     * Create a ConnectUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectUserArgs | ConnectUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectUserState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["directoryUserId"] = state ? state.directoryUserId : undefined;
            resourceInputs["hierarchyGroupId"] = state ? state.hierarchyGroupId : undefined;
            resourceInputs["identityInfo"] = state ? state.identityInfo : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["phoneConfig"] = state ? state.phoneConfig : undefined;
            resourceInputs["routingProfileId"] = state ? state.routingProfileId : undefined;
            resourceInputs["securityProfileIds"] = state ? state.securityProfileIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ConnectUserArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.phoneConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'phoneConfig'");
            }
            if ((!args || args.routingProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingProfileId'");
            }
            if ((!args || args.securityProfileIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityProfileIds'");
            }
            resourceInputs["directoryUserId"] = args ? args.directoryUserId : undefined;
            resourceInputs["hierarchyGroupId"] = args ? args.hierarchyGroupId : undefined;
            resourceInputs["identityInfo"] = args ? args.identityInfo : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["phoneConfig"] = args ? args.phoneConfig : undefined;
            resourceInputs["routingProfileId"] = args ? args.routingProfileId : undefined;
            resourceInputs["securityProfileIds"] = args ? args.securityProfileIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectUser resources.
 */
export interface ConnectUserState {
    arn?: pulumi.Input<string>;
    directoryUserId?: pulumi.Input<string>;
    hierarchyGroupId?: pulumi.Input<string>;
    identityInfo?: pulumi.Input<inputs.ConnectUserIdentityInfo>;
    instanceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    phoneConfig?: pulumi.Input<inputs.ConnectUserPhoneConfig>;
    routingProfileId?: pulumi.Input<string>;
    securityProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectUser resource.
 */
export interface ConnectUserArgs {
    directoryUserId?: pulumi.Input<string>;
    hierarchyGroupId?: pulumi.Input<string>;
    identityInfo?: pulumi.Input<inputs.ConnectUserIdentityInfo>;
    instanceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    phoneConfig: pulumi.Input<inputs.ConnectUserPhoneConfig>;
    routingProfileId: pulumi.Input<string>;
    securityProfileIds: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
