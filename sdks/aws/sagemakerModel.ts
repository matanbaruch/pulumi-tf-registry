// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerModel extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerModel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerModelState, opts?: pulumi.CustomResourceOptions): SagemakerModel {
        return new SagemakerModel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/sagemakerModel:SagemakerModel';

    /**
     * Returns true if the given object is an instance of SagemakerModel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerModel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerModel.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly containers!: pulumi.Output<outputs.SagemakerModelContainer[] | undefined>;
    public readonly enableNetworkIsolation!: pulumi.Output<boolean | undefined>;
    public readonly executionRoleArn!: pulumi.Output<string>;
    public readonly inferenceExecutionConfig!: pulumi.Output<outputs.SagemakerModelInferenceExecutionConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly primaryContainer!: pulumi.Output<outputs.SagemakerModelPrimaryContainer | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly vpcConfig!: pulumi.Output<outputs.SagemakerModelVpcConfig | undefined>;

    /**
     * Create a SagemakerModel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerModelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerModelArgs | SagemakerModelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerModelState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["containers"] = state ? state.containers : undefined;
            resourceInputs["enableNetworkIsolation"] = state ? state.enableNetworkIsolation : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["inferenceExecutionConfig"] = state ? state.inferenceExecutionConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryContainer"] = state ? state.primaryContainer : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as SagemakerModelArgs | undefined;
            if ((!args || args.executionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            resourceInputs["containers"] = args ? args.containers : undefined;
            resourceInputs["enableNetworkIsolation"] = args ? args.enableNetworkIsolation : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["inferenceExecutionConfig"] = args ? args.inferenceExecutionConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryContainer"] = args ? args.primaryContainer : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerModel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerModel resources.
 */
export interface SagemakerModelState {
    arn?: pulumi.Input<string>;
    containers?: pulumi.Input<pulumi.Input<inputs.SagemakerModelContainer>[]>;
    enableNetworkIsolation?: pulumi.Input<boolean>;
    executionRoleArn?: pulumi.Input<string>;
    inferenceExecutionConfig?: pulumi.Input<inputs.SagemakerModelInferenceExecutionConfig>;
    name?: pulumi.Input<string>;
    primaryContainer?: pulumi.Input<inputs.SagemakerModelPrimaryContainer>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcConfig?: pulumi.Input<inputs.SagemakerModelVpcConfig>;
}

/**
 * The set of arguments for constructing a SagemakerModel resource.
 */
export interface SagemakerModelArgs {
    containers?: pulumi.Input<pulumi.Input<inputs.SagemakerModelContainer>[]>;
    enableNetworkIsolation?: pulumi.Input<boolean>;
    executionRoleArn: pulumi.Input<string>;
    inferenceExecutionConfig?: pulumi.Input<inputs.SagemakerModelInferenceExecutionConfig>;
    name?: pulumi.Input<string>;
    primaryContainer?: pulumi.Input<inputs.SagemakerModelPrimaryContainer>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcConfig?: pulumi.Input<inputs.SagemakerModelVpcConfig>;
}
