// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlueJob extends pulumi.CustomResource {
    /**
     * Get an existing GlueJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueJobState, opts?: pulumi.CustomResourceOptions): GlueJob {
        return new GlueJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/glueJob:GlueJob';

    /**
     * Returns true if the given object is an instance of GlueJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueJob.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly command!: pulumi.Output<outputs.GlueJobCommand>;
    public readonly connections!: pulumi.Output<string[] | undefined>;
    public readonly defaultArguments!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly executionClass!: pulumi.Output<string | undefined>;
    public readonly executionProperty!: pulumi.Output<outputs.GlueJobExecutionProperty | undefined>;
    public readonly glueVersion!: pulumi.Output<string>;
    public readonly jobRunQueuingEnabled!: pulumi.Output<boolean | undefined>;
    public readonly maintenanceWindow!: pulumi.Output<string | undefined>;
    public readonly maxCapacity!: pulumi.Output<number>;
    public readonly maxRetries!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nonOverridableArguments!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly notificationProperty!: pulumi.Output<outputs.GlueJobNotificationProperty | undefined>;
    public readonly numberOfWorkers!: pulumi.Output<number>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly securityConfiguration!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly workerType!: pulumi.Output<string>;

    /**
     * Create a GlueJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueJobArgs | GlueJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueJobState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["connections"] = state ? state.connections : undefined;
            resourceInputs["defaultArguments"] = state ? state.defaultArguments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["executionClass"] = state ? state.executionClass : undefined;
            resourceInputs["executionProperty"] = state ? state.executionProperty : undefined;
            resourceInputs["glueVersion"] = state ? state.glueVersion : undefined;
            resourceInputs["jobRunQueuingEnabled"] = state ? state.jobRunQueuingEnabled : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            resourceInputs["maxRetries"] = state ? state.maxRetries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonOverridableArguments"] = state ? state.nonOverridableArguments : undefined;
            resourceInputs["notificationProperty"] = state ? state.notificationProperty : undefined;
            resourceInputs["numberOfWorkers"] = state ? state.numberOfWorkers : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["securityConfiguration"] = state ? state.securityConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["workerType"] = state ? state.workerType : undefined;
        } else {
            const args = argsOrState as GlueJobArgs | undefined;
            if ((!args || args.command === undefined) && !opts.urn) {
                throw new Error("Missing required property 'command'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["connections"] = args ? args.connections : undefined;
            resourceInputs["defaultArguments"] = args ? args.defaultArguments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["executionClass"] = args ? args.executionClass : undefined;
            resourceInputs["executionProperty"] = args ? args.executionProperty : undefined;
            resourceInputs["glueVersion"] = args ? args.glueVersion : undefined;
            resourceInputs["jobRunQueuingEnabled"] = args ? args.jobRunQueuingEnabled : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            resourceInputs["maxRetries"] = args ? args.maxRetries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonOverridableArguments"] = args ? args.nonOverridableArguments : undefined;
            resourceInputs["notificationProperty"] = args ? args.notificationProperty : undefined;
            resourceInputs["numberOfWorkers"] = args ? args.numberOfWorkers : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["workerType"] = args ? args.workerType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueJob.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueJob resources.
 */
export interface GlueJobState {
    arn?: pulumi.Input<string>;
    command?: pulumi.Input<inputs.GlueJobCommand>;
    connections?: pulumi.Input<pulumi.Input<string>[]>;
    defaultArguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    executionClass?: pulumi.Input<string>;
    executionProperty?: pulumi.Input<inputs.GlueJobExecutionProperty>;
    glueVersion?: pulumi.Input<string>;
    jobRunQueuingEnabled?: pulumi.Input<boolean>;
    maintenanceWindow?: pulumi.Input<string>;
    maxCapacity?: pulumi.Input<number>;
    maxRetries?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nonOverridableArguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notificationProperty?: pulumi.Input<inputs.GlueJobNotificationProperty>;
    numberOfWorkers?: pulumi.Input<number>;
    roleArn?: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    workerType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlueJob resource.
 */
export interface GlueJobArgs {
    command: pulumi.Input<inputs.GlueJobCommand>;
    connections?: pulumi.Input<pulumi.Input<string>[]>;
    defaultArguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    executionClass?: pulumi.Input<string>;
    executionProperty?: pulumi.Input<inputs.GlueJobExecutionProperty>;
    glueVersion?: pulumi.Input<string>;
    jobRunQueuingEnabled?: pulumi.Input<boolean>;
    maintenanceWindow?: pulumi.Input<string>;
    maxCapacity?: pulumi.Input<number>;
    maxRetries?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nonOverridableArguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    notificationProperty?: pulumi.Input<inputs.GlueJobNotificationProperty>;
    numberOfWorkers?: pulumi.Input<number>;
    roleArn: pulumi.Input<string>;
    securityConfiguration?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    workerType?: pulumi.Input<string>;
}
