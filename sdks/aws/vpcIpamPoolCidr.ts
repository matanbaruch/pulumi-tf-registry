// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpcIpamPoolCidr extends pulumi.CustomResource {
    /**
     * Get an existing VpcIpamPoolCidr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcIpamPoolCidrState, opts?: pulumi.CustomResourceOptions): VpcIpamPoolCidr {
        return new VpcIpamPoolCidr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/vpcIpamPoolCidr:VpcIpamPoolCidr';

    /**
     * Returns true if the given object is an instance of VpcIpamPoolCidr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcIpamPoolCidr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcIpamPoolCidr.__pulumiType;
    }

    public readonly cidr!: pulumi.Output<string>;
    public readonly cidrAuthorizationContext!: pulumi.Output<outputs.VpcIpamPoolCidrCidrAuthorizationContext | undefined>;
    public /*out*/ readonly ipamPoolCidrId!: pulumi.Output<string>;
    public readonly ipamPoolId!: pulumi.Output<string>;
    public readonly netmaskLength!: pulumi.Output<number | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VpcIpamPoolCidrTimeouts | undefined>;

    /**
     * Create a VpcIpamPoolCidr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcIpamPoolCidrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcIpamPoolCidrArgs | VpcIpamPoolCidrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcIpamPoolCidrState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["cidrAuthorizationContext"] = state ? state.cidrAuthorizationContext : undefined;
            resourceInputs["ipamPoolCidrId"] = state ? state.ipamPoolCidrId : undefined;
            resourceInputs["ipamPoolId"] = state ? state.ipamPoolId : undefined;
            resourceInputs["netmaskLength"] = state ? state.netmaskLength : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as VpcIpamPoolCidrArgs | undefined;
            if ((!args || args.ipamPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipamPoolId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["cidrAuthorizationContext"] = args ? args.cidrAuthorizationContext : undefined;
            resourceInputs["ipamPoolId"] = args ? args.ipamPoolId : undefined;
            resourceInputs["netmaskLength"] = args ? args.netmaskLength : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["ipamPoolCidrId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcIpamPoolCidr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcIpamPoolCidr resources.
 */
export interface VpcIpamPoolCidrState {
    cidr?: pulumi.Input<string>;
    cidrAuthorizationContext?: pulumi.Input<inputs.VpcIpamPoolCidrCidrAuthorizationContext>;
    ipamPoolCidrId?: pulumi.Input<string>;
    ipamPoolId?: pulumi.Input<string>;
    netmaskLength?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.VpcIpamPoolCidrTimeouts>;
}

/**
 * The set of arguments for constructing a VpcIpamPoolCidr resource.
 */
export interface VpcIpamPoolCidrArgs {
    cidr?: pulumi.Input<string>;
    cidrAuthorizationContext?: pulumi.Input<inputs.VpcIpamPoolCidrCidrAuthorizationContext>;
    ipamPoolId: pulumi.Input<string>;
    netmaskLength?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.VpcIpamPoolCidrTimeouts>;
}
