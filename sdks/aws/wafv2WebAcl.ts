// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Wafv2WebAcl extends pulumi.CustomResource {
    /**
     * Get an existing Wafv2WebAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Wafv2WebAclState, opts?: pulumi.CustomResourceOptions): Wafv2WebAcl {
        return new Wafv2WebAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/wafv2WebAcl:Wafv2WebAcl';

    /**
     * Returns true if the given object is an instance of Wafv2WebAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Wafv2WebAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Wafv2WebAcl.__pulumiType;
    }

    public /*out*/ readonly applicationIntegrationUrl!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly associationConfig!: pulumi.Output<outputs.Wafv2WebAclAssociationConfig | undefined>;
    public /*out*/ readonly capacity!: pulumi.Output<number>;
    public readonly captchaConfig!: pulumi.Output<outputs.Wafv2WebAclCaptchaConfig | undefined>;
    public readonly challengeConfig!: pulumi.Output<outputs.Wafv2WebAclChallengeConfig | undefined>;
    public readonly customResponseBodies!: pulumi.Output<outputs.Wafv2WebAclCustomResponseBody[] | undefined>;
    public readonly defaultAction!: pulumi.Output<outputs.Wafv2WebAclDefaultAction>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lockToken!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ruleJson!: pulumi.Output<string | undefined>;
    public readonly rules!: pulumi.Output<outputs.Wafv2WebAclRule[] | undefined>;
    public readonly scope!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly tokenDomains!: pulumi.Output<string[] | undefined>;
    public readonly visibilityConfig!: pulumi.Output<outputs.Wafv2WebAclVisibilityConfig>;

    /**
     * Create a Wafv2WebAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Wafv2WebAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Wafv2WebAclArgs | Wafv2WebAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Wafv2WebAclState | undefined;
            resourceInputs["applicationIntegrationUrl"] = state ? state.applicationIntegrationUrl : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associationConfig"] = state ? state.associationConfig : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["captchaConfig"] = state ? state.captchaConfig : undefined;
            resourceInputs["challengeConfig"] = state ? state.challengeConfig : undefined;
            resourceInputs["customResponseBodies"] = state ? state.customResponseBodies : undefined;
            resourceInputs["defaultAction"] = state ? state.defaultAction : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lockToken"] = state ? state.lockToken : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ruleJson"] = state ? state.ruleJson : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tokenDomains"] = state ? state.tokenDomains : undefined;
            resourceInputs["visibilityConfig"] = state ? state.visibilityConfig : undefined;
        } else {
            const args = argsOrState as Wafv2WebAclArgs | undefined;
            if ((!args || args.defaultAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAction'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.visibilityConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'visibilityConfig'");
            }
            resourceInputs["associationConfig"] = args ? args.associationConfig : undefined;
            resourceInputs["captchaConfig"] = args ? args.captchaConfig : undefined;
            resourceInputs["challengeConfig"] = args ? args.challengeConfig : undefined;
            resourceInputs["customResponseBodies"] = args ? args.customResponseBodies : undefined;
            resourceInputs["defaultAction"] = args ? args.defaultAction : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ruleJson"] = args ? args.ruleJson : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["tokenDomains"] = args ? args.tokenDomains : undefined;
            resourceInputs["visibilityConfig"] = args ? args.visibilityConfig : undefined;
            resourceInputs["applicationIntegrationUrl"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["capacity"] = undefined /*out*/;
            resourceInputs["lockToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Wafv2WebAcl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Wafv2WebAcl resources.
 */
export interface Wafv2WebAclState {
    applicationIntegrationUrl?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    associationConfig?: pulumi.Input<inputs.Wafv2WebAclAssociationConfig>;
    capacity?: pulumi.Input<number>;
    captchaConfig?: pulumi.Input<inputs.Wafv2WebAclCaptchaConfig>;
    challengeConfig?: pulumi.Input<inputs.Wafv2WebAclChallengeConfig>;
    customResponseBodies?: pulumi.Input<pulumi.Input<inputs.Wafv2WebAclCustomResponseBody>[]>;
    defaultAction?: pulumi.Input<inputs.Wafv2WebAclDefaultAction>;
    description?: pulumi.Input<string>;
    lockToken?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ruleJson?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.Wafv2WebAclRule>[]>;
    scope?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tokenDomains?: pulumi.Input<pulumi.Input<string>[]>;
    visibilityConfig?: pulumi.Input<inputs.Wafv2WebAclVisibilityConfig>;
}

/**
 * The set of arguments for constructing a Wafv2WebAcl resource.
 */
export interface Wafv2WebAclArgs {
    associationConfig?: pulumi.Input<inputs.Wafv2WebAclAssociationConfig>;
    captchaConfig?: pulumi.Input<inputs.Wafv2WebAclCaptchaConfig>;
    challengeConfig?: pulumi.Input<inputs.Wafv2WebAclChallengeConfig>;
    customResponseBodies?: pulumi.Input<pulumi.Input<inputs.Wafv2WebAclCustomResponseBody>[]>;
    defaultAction: pulumi.Input<inputs.Wafv2WebAclDefaultAction>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ruleJson?: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.Wafv2WebAclRule>[]>;
    scope: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tokenDomains?: pulumi.Input<pulumi.Input<string>[]>;
    visibilityConfig: pulumi.Input<inputs.Wafv2WebAclVisibilityConfig>;
}
