// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotDomainConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing IotDomainConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotDomainConfigurationState, opts?: pulumi.CustomResourceOptions): IotDomainConfiguration {
        return new IotDomainConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/iotDomainConfiguration:IotDomainConfiguration';

    /**
     * Returns true if the given object is an instance of IotDomainConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotDomainConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotDomainConfiguration.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly authorizerConfig!: pulumi.Output<outputs.IotDomainConfigurationAuthorizerConfig | undefined>;
    public readonly domainName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly domainType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly serverCertificateArns!: pulumi.Output<string[] | undefined>;
    public readonly serviceType!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly tlsConfig!: pulumi.Output<outputs.IotDomainConfigurationTlsConfig | undefined>;
    public readonly validationCertificateArn!: pulumi.Output<string | undefined>;

    /**
     * Create a IotDomainConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IotDomainConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotDomainConfigurationArgs | IotDomainConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotDomainConfigurationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["authorizerConfig"] = state ? state.authorizerConfig : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainType"] = state ? state.domainType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverCertificateArns"] = state ? state.serverCertificateArns : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
            resourceInputs["validationCertificateArn"] = state ? state.validationCertificateArn : undefined;
        } else {
            const args = argsOrState as IotDomainConfigurationArgs | undefined;
            resourceInputs["authorizerConfig"] = args ? args.authorizerConfig : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverCertificateArns"] = args ? args.serverCertificateArns : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["validationCertificateArn"] = args ? args.validationCertificateArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["domainType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotDomainConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotDomainConfiguration resources.
 */
export interface IotDomainConfigurationState {
    arn?: pulumi.Input<string>;
    authorizerConfig?: pulumi.Input<inputs.IotDomainConfigurationAuthorizerConfig>;
    domainName?: pulumi.Input<string>;
    domainType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverCertificateArns?: pulumi.Input<pulumi.Input<string>[]>;
    serviceType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsConfig?: pulumi.Input<inputs.IotDomainConfigurationTlsConfig>;
    validationCertificateArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IotDomainConfiguration resource.
 */
export interface IotDomainConfigurationArgs {
    authorizerConfig?: pulumi.Input<inputs.IotDomainConfigurationAuthorizerConfig>;
    domainName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverCertificateArns?: pulumi.Input<pulumi.Input<string>[]>;
    serviceType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tlsConfig?: pulumi.Input<inputs.IotDomainConfigurationTlsConfig>;
    validationCertificateArn?: pulumi.Input<string>;
}
