// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLicensemanagerReceivedLicense(args: GetLicensemanagerReceivedLicenseArgs, opts?: pulumi.InvokeOptions): Promise<GetLicensemanagerReceivedLicenseResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getLicensemanagerReceivedLicense:getLicensemanagerReceivedLicense", {
        "id": args.id,
        "licenseArn": args.licenseArn,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLicensemanagerReceivedLicense.
 */
export interface GetLicensemanagerReceivedLicenseArgs {
    id?: string;
    licenseArn: string;
}

/**
 * A collection of values returned by getLicensemanagerReceivedLicense.
 */
export interface GetLicensemanagerReceivedLicenseResult {
    readonly beneficiary: string;
    readonly consumptionConfigurations: outputs.GetLicensemanagerReceivedLicenseConsumptionConfiguration[];
    readonly createTime: string;
    readonly entitlements: outputs.GetLicensemanagerReceivedLicenseEntitlement[];
    readonly homeRegion: string;
    readonly id: string;
    readonly issuers: outputs.GetLicensemanagerReceivedLicenseIssuer[];
    readonly licenseArn: string;
    readonly licenseMetadatas: outputs.GetLicensemanagerReceivedLicenseLicenseMetadata[];
    readonly licenseName: string;
    readonly productName: string;
    readonly productSku: string;
    readonly receivedMetadatas: outputs.GetLicensemanagerReceivedLicenseReceivedMetadata[];
    readonly status: string;
    readonly validities: outputs.GetLicensemanagerReceivedLicenseValidity[];
    readonly version: string;
}
export function getLicensemanagerReceivedLicenseOutput(args: GetLicensemanagerReceivedLicenseOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLicensemanagerReceivedLicenseResult> {
    return pulumi.output(args).apply((a: any) => getLicensemanagerReceivedLicense(a, opts))
}

/**
 * A collection of arguments for invoking getLicensemanagerReceivedLicense.
 */
export interface GetLicensemanagerReceivedLicenseOutputArgs {
    id?: pulumi.Input<string>;
    licenseArn: pulumi.Input<string>;
}
