// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEcsCluster(args: GetEcsClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEcsCluster:getEcsCluster", {
        "clusterName": args.clusterName,
        "id": args.id,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsCluster.
 */
export interface GetEcsClusterArgs {
    clusterName: string;
    id?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getEcsCluster.
 */
export interface GetEcsClusterResult {
    readonly arn: string;
    readonly clusterName: string;
    readonly id: string;
    readonly pendingTasksCount: number;
    readonly registeredContainerInstancesCount: number;
    readonly runningTasksCount: number;
    readonly serviceConnectDefaults: outputs.GetEcsClusterServiceConnectDefault[];
    readonly settings: outputs.GetEcsClusterSetting[];
    readonly status: string;
    readonly tags: {[key: string]: string};
}
export function getEcsClusterOutput(args: GetEcsClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsClusterResult> {
    return pulumi.output(args).apply((a: any) => getEcsCluster(a, opts))
}

/**
 * A collection of arguments for invoking getEcsCluster.
 */
export interface GetEcsClusterOutputArgs {
    clusterName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
