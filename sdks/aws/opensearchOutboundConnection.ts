// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpensearchOutboundConnection extends pulumi.CustomResource {
    /**
     * Get an existing OpensearchOutboundConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpensearchOutboundConnectionState, opts?: pulumi.CustomResourceOptions): OpensearchOutboundConnection {
        return new OpensearchOutboundConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/opensearchOutboundConnection:OpensearchOutboundConnection';

    /**
     * Returns true if the given object is an instance of OpensearchOutboundConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpensearchOutboundConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpensearchOutboundConnection.__pulumiType;
    }

    public readonly acceptConnection!: pulumi.Output<boolean | undefined>;
    public readonly connectionAlias!: pulumi.Output<string>;
    public readonly connectionMode!: pulumi.Output<string>;
    public readonly connectionProperties!: pulumi.Output<outputs.OpensearchOutboundConnectionConnectionProperties | undefined>;
    public /*out*/ readonly connectionStatus!: pulumi.Output<string>;
    public readonly localDomainInfo!: pulumi.Output<outputs.OpensearchOutboundConnectionLocalDomainInfo>;
    public readonly remoteDomainInfo!: pulumi.Output<outputs.OpensearchOutboundConnectionRemoteDomainInfo>;
    public readonly timeouts!: pulumi.Output<outputs.OpensearchOutboundConnectionTimeouts | undefined>;

    /**
     * Create a OpensearchOutboundConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpensearchOutboundConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpensearchOutboundConnectionArgs | OpensearchOutboundConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpensearchOutboundConnectionState | undefined;
            resourceInputs["acceptConnection"] = state ? state.acceptConnection : undefined;
            resourceInputs["connectionAlias"] = state ? state.connectionAlias : undefined;
            resourceInputs["connectionMode"] = state ? state.connectionMode : undefined;
            resourceInputs["connectionProperties"] = state ? state.connectionProperties : undefined;
            resourceInputs["connectionStatus"] = state ? state.connectionStatus : undefined;
            resourceInputs["localDomainInfo"] = state ? state.localDomainInfo : undefined;
            resourceInputs["remoteDomainInfo"] = state ? state.remoteDomainInfo : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as OpensearchOutboundConnectionArgs | undefined;
            if ((!args || args.connectionAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionAlias'");
            }
            if ((!args || args.localDomainInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localDomainInfo'");
            }
            if ((!args || args.remoteDomainInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteDomainInfo'");
            }
            resourceInputs["acceptConnection"] = args ? args.acceptConnection : undefined;
            resourceInputs["connectionAlias"] = args ? args.connectionAlias : undefined;
            resourceInputs["connectionMode"] = args ? args.connectionMode : undefined;
            resourceInputs["connectionProperties"] = args ? args.connectionProperties : undefined;
            resourceInputs["localDomainInfo"] = args ? args.localDomainInfo : undefined;
            resourceInputs["remoteDomainInfo"] = args ? args.remoteDomainInfo : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["connectionStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpensearchOutboundConnection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OpensearchOutboundConnection resources.
 */
export interface OpensearchOutboundConnectionState {
    acceptConnection?: pulumi.Input<boolean>;
    connectionAlias?: pulumi.Input<string>;
    connectionMode?: pulumi.Input<string>;
    connectionProperties?: pulumi.Input<inputs.OpensearchOutboundConnectionConnectionProperties>;
    connectionStatus?: pulumi.Input<string>;
    localDomainInfo?: pulumi.Input<inputs.OpensearchOutboundConnectionLocalDomainInfo>;
    remoteDomainInfo?: pulumi.Input<inputs.OpensearchOutboundConnectionRemoteDomainInfo>;
    timeouts?: pulumi.Input<inputs.OpensearchOutboundConnectionTimeouts>;
}

/**
 * The set of arguments for constructing a OpensearchOutboundConnection resource.
 */
export interface OpensearchOutboundConnectionArgs {
    acceptConnection?: pulumi.Input<boolean>;
    connectionAlias: pulumi.Input<string>;
    connectionMode?: pulumi.Input<string>;
    connectionProperties?: pulumi.Input<inputs.OpensearchOutboundConnectionConnectionProperties>;
    localDomainInfo: pulumi.Input<inputs.OpensearchOutboundConnectionLocalDomainInfo>;
    remoteDomainInfo: pulumi.Input<inputs.OpensearchOutboundConnectionRemoteDomainInfo>;
    timeouts?: pulumi.Input<inputs.OpensearchOutboundConnectionTimeouts>;
}
