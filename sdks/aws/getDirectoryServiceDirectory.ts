// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDirectoryServiceDirectory(args: GetDirectoryServiceDirectoryArgs, opts?: pulumi.InvokeOptions): Promise<GetDirectoryServiceDirectoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getDirectoryServiceDirectory:getDirectoryServiceDirectory", {
        "directoryId": args.directoryId,
        "id": args.id,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDirectoryServiceDirectory.
 */
export interface GetDirectoryServiceDirectoryArgs {
    directoryId: string;
    id?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getDirectoryServiceDirectory.
 */
export interface GetDirectoryServiceDirectoryResult {
    readonly accessUrl: string;
    readonly alias: string;
    readonly connectSettings: outputs.GetDirectoryServiceDirectoryConnectSetting[];
    readonly description: string;
    readonly directoryId: string;
    readonly dnsIpAddresses: string[];
    readonly edition: string;
    readonly enableSso: boolean;
    readonly id: string;
    readonly name: string;
    readonly radiusSettings: outputs.GetDirectoryServiceDirectoryRadiusSetting[];
    readonly securityGroupId: string;
    readonly shortName: string;
    readonly size: string;
    readonly tags: {[key: string]: string};
    readonly type: string;
    readonly vpcSettings: outputs.GetDirectoryServiceDirectoryVpcSetting[];
}
export function getDirectoryServiceDirectoryOutput(args: GetDirectoryServiceDirectoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDirectoryServiceDirectoryResult> {
    return pulumi.output(args).apply((a: any) => getDirectoryServiceDirectory(a, opts))
}

/**
 * A collection of arguments for invoking getDirectoryServiceDirectory.
 */
export interface GetDirectoryServiceDirectoryOutputArgs {
    directoryId: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
