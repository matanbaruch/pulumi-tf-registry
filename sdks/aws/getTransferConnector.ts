// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTransferConnector(args: GetTransferConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetTransferConnectorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getTransferConnector:getTransferConnector", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTransferConnector.
 */
export interface GetTransferConnectorArgs {
    id: string;
}

/**
 * A collection of values returned by getTransferConnector.
 */
export interface GetTransferConnectorResult {
    readonly accessRole: string;
    readonly arn: string;
    readonly as2Configs: outputs.GetTransferConnectorAs2Config[];
    readonly id: string;
    readonly loggingRole: string;
    readonly securityPolicyName: string;
    readonly serviceManagedEgressIpAddresses: string[];
    readonly sftpConfigs: outputs.GetTransferConnectorSftpConfig[];
    readonly tags: {[key: string]: string};
    readonly url: string;
}
export function getTransferConnectorOutput(args: GetTransferConnectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransferConnectorResult> {
    return pulumi.output(args).apply((a: any) => getTransferConnector(a, opts))
}

/**
 * A collection of arguments for invoking getTransferConnector.
 */
export interface GetTransferConnectorOutputArgs {
    id: pulumi.Input<string>;
}
