// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DrsReplicationConfigurationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing DrsReplicationConfigurationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DrsReplicationConfigurationTemplateState, opts?: pulumi.CustomResourceOptions): DrsReplicationConfigurationTemplate {
        return new DrsReplicationConfigurationTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/drsReplicationConfigurationTemplate:DrsReplicationConfigurationTemplate';

    /**
     * Returns true if the given object is an instance of DrsReplicationConfigurationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DrsReplicationConfigurationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DrsReplicationConfigurationTemplate.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly associateDefaultSecurityGroup!: pulumi.Output<boolean>;
    public readonly autoReplicateNewDisks!: pulumi.Output<boolean>;
    public readonly bandwidthThrottling!: pulumi.Output<number>;
    public readonly createPublicIp!: pulumi.Output<boolean>;
    public readonly dataPlaneRouting!: pulumi.Output<string>;
    public readonly defaultLargeStagingDiskType!: pulumi.Output<string>;
    public readonly ebsEncryption!: pulumi.Output<string>;
    public readonly ebsEncryptionKeyArn!: pulumi.Output<string | undefined>;
    public readonly pitPolicies!: pulumi.Output<outputs.DrsReplicationConfigurationTemplatePitPolicy[] | undefined>;
    public readonly replicationServerInstanceType!: pulumi.Output<string>;
    public readonly replicationServersSecurityGroupsIds!: pulumi.Output<string[]>;
    public readonly stagingAreaSubnetId!: pulumi.Output<string>;
    public readonly stagingAreaTags!: pulumi.Output<{[key: string]: string}>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.DrsReplicationConfigurationTemplateTimeouts | undefined>;
    public readonly useDedicatedReplicationServer!: pulumi.Output<boolean>;

    /**
     * Create a DrsReplicationConfigurationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DrsReplicationConfigurationTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DrsReplicationConfigurationTemplateArgs | DrsReplicationConfigurationTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DrsReplicationConfigurationTemplateState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associateDefaultSecurityGroup"] = state ? state.associateDefaultSecurityGroup : undefined;
            resourceInputs["autoReplicateNewDisks"] = state ? state.autoReplicateNewDisks : undefined;
            resourceInputs["bandwidthThrottling"] = state ? state.bandwidthThrottling : undefined;
            resourceInputs["createPublicIp"] = state ? state.createPublicIp : undefined;
            resourceInputs["dataPlaneRouting"] = state ? state.dataPlaneRouting : undefined;
            resourceInputs["defaultLargeStagingDiskType"] = state ? state.defaultLargeStagingDiskType : undefined;
            resourceInputs["ebsEncryption"] = state ? state.ebsEncryption : undefined;
            resourceInputs["ebsEncryptionKeyArn"] = state ? state.ebsEncryptionKeyArn : undefined;
            resourceInputs["pitPolicies"] = state ? state.pitPolicies : undefined;
            resourceInputs["replicationServerInstanceType"] = state ? state.replicationServerInstanceType : undefined;
            resourceInputs["replicationServersSecurityGroupsIds"] = state ? state.replicationServersSecurityGroupsIds : undefined;
            resourceInputs["stagingAreaSubnetId"] = state ? state.stagingAreaSubnetId : undefined;
            resourceInputs["stagingAreaTags"] = state ? state.stagingAreaTags : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["useDedicatedReplicationServer"] = state ? state.useDedicatedReplicationServer : undefined;
        } else {
            const args = argsOrState as DrsReplicationConfigurationTemplateArgs | undefined;
            if ((!args || args.associateDefaultSecurityGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'associateDefaultSecurityGroup'");
            }
            if ((!args || args.bandwidthThrottling === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidthThrottling'");
            }
            if ((!args || args.createPublicIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createPublicIp'");
            }
            if ((!args || args.dataPlaneRouting === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataPlaneRouting'");
            }
            if ((!args || args.defaultLargeStagingDiskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultLargeStagingDiskType'");
            }
            if ((!args || args.ebsEncryption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ebsEncryption'");
            }
            if ((!args || args.replicationServerInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationServerInstanceType'");
            }
            if ((!args || args.replicationServersSecurityGroupsIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationServersSecurityGroupsIds'");
            }
            if ((!args || args.stagingAreaSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stagingAreaSubnetId'");
            }
            if ((!args || args.stagingAreaTags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stagingAreaTags'");
            }
            if ((!args || args.useDedicatedReplicationServer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'useDedicatedReplicationServer'");
            }
            resourceInputs["associateDefaultSecurityGroup"] = args ? args.associateDefaultSecurityGroup : undefined;
            resourceInputs["autoReplicateNewDisks"] = args ? args.autoReplicateNewDisks : undefined;
            resourceInputs["bandwidthThrottling"] = args ? args.bandwidthThrottling : undefined;
            resourceInputs["createPublicIp"] = args ? args.createPublicIp : undefined;
            resourceInputs["dataPlaneRouting"] = args ? args.dataPlaneRouting : undefined;
            resourceInputs["defaultLargeStagingDiskType"] = args ? args.defaultLargeStagingDiskType : undefined;
            resourceInputs["ebsEncryption"] = args ? args.ebsEncryption : undefined;
            resourceInputs["ebsEncryptionKeyArn"] = args ? args.ebsEncryptionKeyArn : undefined;
            resourceInputs["pitPolicies"] = args ? args.pitPolicies : undefined;
            resourceInputs["replicationServerInstanceType"] = args ? args.replicationServerInstanceType : undefined;
            resourceInputs["replicationServersSecurityGroupsIds"] = args ? args.replicationServersSecurityGroupsIds : undefined;
            resourceInputs["stagingAreaSubnetId"] = args ? args.stagingAreaSubnetId : undefined;
            resourceInputs["stagingAreaTags"] = args ? args.stagingAreaTags : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["useDedicatedReplicationServer"] = args ? args.useDedicatedReplicationServer : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DrsReplicationConfigurationTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DrsReplicationConfigurationTemplate resources.
 */
export interface DrsReplicationConfigurationTemplateState {
    arn?: pulumi.Input<string>;
    associateDefaultSecurityGroup?: pulumi.Input<boolean>;
    autoReplicateNewDisks?: pulumi.Input<boolean>;
    bandwidthThrottling?: pulumi.Input<number>;
    createPublicIp?: pulumi.Input<boolean>;
    dataPlaneRouting?: pulumi.Input<string>;
    defaultLargeStagingDiskType?: pulumi.Input<string>;
    ebsEncryption?: pulumi.Input<string>;
    ebsEncryptionKeyArn?: pulumi.Input<string>;
    pitPolicies?: pulumi.Input<pulumi.Input<inputs.DrsReplicationConfigurationTemplatePitPolicy>[]>;
    replicationServerInstanceType?: pulumi.Input<string>;
    replicationServersSecurityGroupsIds?: pulumi.Input<pulumi.Input<string>[]>;
    stagingAreaSubnetId?: pulumi.Input<string>;
    stagingAreaTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DrsReplicationConfigurationTemplateTimeouts>;
    useDedicatedReplicationServer?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DrsReplicationConfigurationTemplate resource.
 */
export interface DrsReplicationConfigurationTemplateArgs {
    associateDefaultSecurityGroup: pulumi.Input<boolean>;
    autoReplicateNewDisks?: pulumi.Input<boolean>;
    bandwidthThrottling: pulumi.Input<number>;
    createPublicIp: pulumi.Input<boolean>;
    dataPlaneRouting: pulumi.Input<string>;
    defaultLargeStagingDiskType: pulumi.Input<string>;
    ebsEncryption: pulumi.Input<string>;
    ebsEncryptionKeyArn?: pulumi.Input<string>;
    pitPolicies?: pulumi.Input<pulumi.Input<inputs.DrsReplicationConfigurationTemplatePitPolicy>[]>;
    replicationServerInstanceType: pulumi.Input<string>;
    replicationServersSecurityGroupsIds: pulumi.Input<pulumi.Input<string>[]>;
    stagingAreaSubnetId: pulumi.Input<string>;
    stagingAreaTags: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DrsReplicationConfigurationTemplateTimeouts>;
    useDedicatedReplicationServer: pulumi.Input<boolean>;
}
