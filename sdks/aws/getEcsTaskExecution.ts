// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEcsTaskExecution(args: GetEcsTaskExecutionArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsTaskExecutionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEcsTaskExecution:getEcsTaskExecution", {
        "capacityProviderStrategies": args.capacityProviderStrategies,
        "clientToken": args.clientToken,
        "cluster": args.cluster,
        "desiredCount": args.desiredCount,
        "enableEcsManagedTags": args.enableEcsManagedTags,
        "enableExecuteCommand": args.enableExecuteCommand,
        "group": args.group,
        "id": args.id,
        "launchType": args.launchType,
        "networkConfiguration": args.networkConfiguration,
        "overrides": args.overrides,
        "placementConstraints": args.placementConstraints,
        "placementStrategies": args.placementStrategies,
        "platformVersion": args.platformVersion,
        "propagateTags": args.propagateTags,
        "referenceId": args.referenceId,
        "startedBy": args.startedBy,
        "tags": args.tags,
        "taskDefinition": args.taskDefinition,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsTaskExecution.
 */
export interface GetEcsTaskExecutionArgs {
    capacityProviderStrategies?: inputs.GetEcsTaskExecutionCapacityProviderStrategy[];
    clientToken?: string;
    cluster: string;
    desiredCount?: number;
    enableEcsManagedTags?: boolean;
    enableExecuteCommand?: boolean;
    group?: string;
    id?: string;
    launchType?: string;
    networkConfiguration?: inputs.GetEcsTaskExecutionNetworkConfiguration;
    overrides?: inputs.GetEcsTaskExecutionOverrides;
    placementConstraints?: inputs.GetEcsTaskExecutionPlacementConstraint[];
    placementStrategies?: inputs.GetEcsTaskExecutionPlacementStrategy[];
    platformVersion?: string;
    propagateTags?: string;
    referenceId?: string;
    startedBy?: string;
    tags?: {[key: string]: string};
    taskDefinition: string;
}

/**
 * A collection of values returned by getEcsTaskExecution.
 */
export interface GetEcsTaskExecutionResult {
    readonly capacityProviderStrategies?: outputs.GetEcsTaskExecutionCapacityProviderStrategy[];
    readonly clientToken?: string;
    readonly cluster: string;
    readonly desiredCount?: number;
    readonly enableEcsManagedTags?: boolean;
    readonly enableExecuteCommand?: boolean;
    readonly group?: string;
    readonly id: string;
    readonly launchType?: string;
    readonly networkConfiguration?: outputs.GetEcsTaskExecutionNetworkConfiguration;
    readonly overrides?: outputs.GetEcsTaskExecutionOverrides;
    readonly placementConstraints?: outputs.GetEcsTaskExecutionPlacementConstraint[];
    readonly placementStrategies?: outputs.GetEcsTaskExecutionPlacementStrategy[];
    readonly platformVersion?: string;
    readonly propagateTags?: string;
    readonly referenceId?: string;
    readonly startedBy?: string;
    readonly tags?: {[key: string]: string};
    readonly taskArns: string[];
    readonly taskDefinition: string;
}
export function getEcsTaskExecutionOutput(args: GetEcsTaskExecutionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsTaskExecutionResult> {
    return pulumi.output(args).apply((a: any) => getEcsTaskExecution(a, opts))
}

/**
 * A collection of arguments for invoking getEcsTaskExecution.
 */
export interface GetEcsTaskExecutionOutputArgs {
    capacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.GetEcsTaskExecutionCapacityProviderStrategyArgs>[]>;
    clientToken?: pulumi.Input<string>;
    cluster: pulumi.Input<string>;
    desiredCount?: pulumi.Input<number>;
    enableEcsManagedTags?: pulumi.Input<boolean>;
    enableExecuteCommand?: pulumi.Input<boolean>;
    group?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    launchType?: pulumi.Input<string>;
    networkConfiguration?: pulumi.Input<inputs.GetEcsTaskExecutionNetworkConfigurationArgs>;
    overrides?: pulumi.Input<inputs.GetEcsTaskExecutionOverridesArgs>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.GetEcsTaskExecutionPlacementConstraintArgs>[]>;
    placementStrategies?: pulumi.Input<pulumi.Input<inputs.GetEcsTaskExecutionPlacementStrategyArgs>[]>;
    platformVersion?: pulumi.Input<string>;
    propagateTags?: pulumi.Input<string>;
    referenceId?: pulumi.Input<string>;
    startedBy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskDefinition: pulumi.Input<string>;
}
