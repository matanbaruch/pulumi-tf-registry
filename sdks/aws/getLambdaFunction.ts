// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLambdaFunction(args: GetLambdaFunctionArgs, opts?: pulumi.InvokeOptions): Promise<GetLambdaFunctionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getLambdaFunction:getLambdaFunction", {
        "functionName": args.functionName,
        "id": args.id,
        "qualifier": args.qualifier,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLambdaFunction.
 */
export interface GetLambdaFunctionArgs {
    functionName: string;
    id?: string;
    qualifier?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getLambdaFunction.
 */
export interface GetLambdaFunctionResult {
    readonly architectures: string[];
    readonly arn: string;
    readonly codeSha256: string;
    readonly codeSigningConfigArn: string;
    readonly deadLetterConfigs: outputs.GetLambdaFunctionDeadLetterConfig[];
    readonly description: string;
    readonly environments: outputs.GetLambdaFunctionEnvironment[];
    readonly ephemeralStorages: outputs.GetLambdaFunctionEphemeralStorage[];
    readonly fileSystemConfigs: outputs.GetLambdaFunctionFileSystemConfig[];
    readonly functionName: string;
    readonly handler: string;
    readonly id: string;
    readonly imageUri: string;
    readonly invokeArn: string;
    readonly kmsKeyArn: string;
    readonly lastModified: string;
    readonly layers: string[];
    readonly loggingConfigs: outputs.GetLambdaFunctionLoggingConfig[];
    readonly memorySize: number;
    readonly qualifiedArn: string;
    readonly qualifiedInvokeArn: string;
    readonly qualifier?: string;
    readonly reservedConcurrentExecutions: number;
    readonly role: string;
    readonly runtime: string;
    readonly signingJobArn: string;
    readonly signingProfileVersionArn: string;
    /**
     * @deprecated Deprecated
     */
    readonly sourceCodeHash: string;
    readonly sourceCodeSize: number;
    readonly tags: {[key: string]: string};
    readonly timeout: number;
    readonly tracingConfigs: outputs.GetLambdaFunctionTracingConfig[];
    readonly version: string;
    readonly vpcConfigs: outputs.GetLambdaFunctionVpcConfig[];
}
export function getLambdaFunctionOutput(args: GetLambdaFunctionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLambdaFunctionResult> {
    return pulumi.output(args).apply((a: any) => getLambdaFunction(a, opts))
}

/**
 * A collection of arguments for invoking getLambdaFunction.
 */
export interface GetLambdaFunctionOutputArgs {
    functionName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    qualifier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
