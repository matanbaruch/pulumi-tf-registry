// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcrRepositoryCreationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing EcrRepositoryCreationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcrRepositoryCreationTemplateState, opts?: pulumi.CustomResourceOptions): EcrRepositoryCreationTemplate {
        return new EcrRepositoryCreationTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ecrRepositoryCreationTemplate:EcrRepositoryCreationTemplate';

    /**
     * Returns true if the given object is an instance of EcrRepositoryCreationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcrRepositoryCreationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcrRepositoryCreationTemplate.__pulumiType;
    }

    public readonly appliedFors!: pulumi.Output<string[]>;
    public readonly customRoleArn!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly encryptionConfigurations!: pulumi.Output<outputs.EcrRepositoryCreationTemplateEncryptionConfiguration[] | undefined>;
    public readonly imageTagMutability!: pulumi.Output<string | undefined>;
    public readonly lifecyclePolicy!: pulumi.Output<string | undefined>;
    public readonly prefix!: pulumi.Output<string>;
    public /*out*/ readonly registryId!: pulumi.Output<string>;
    public readonly repositoryPolicy!: pulumi.Output<string | undefined>;
    public readonly resourceTags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a EcrRepositoryCreationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EcrRepositoryCreationTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcrRepositoryCreationTemplateArgs | EcrRepositoryCreationTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcrRepositoryCreationTemplateState | undefined;
            resourceInputs["appliedFors"] = state ? state.appliedFors : undefined;
            resourceInputs["customRoleArn"] = state ? state.customRoleArn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionConfigurations"] = state ? state.encryptionConfigurations : undefined;
            resourceInputs["imageTagMutability"] = state ? state.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = state ? state.lifecyclePolicy : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
            resourceInputs["repositoryPolicy"] = state ? state.repositoryPolicy : undefined;
            resourceInputs["resourceTags"] = state ? state.resourceTags : undefined;
        } else {
            const args = argsOrState as EcrRepositoryCreationTemplateArgs | undefined;
            if ((!args || args.appliedFors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appliedFors'");
            }
            if ((!args || args.prefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefix'");
            }
            resourceInputs["appliedFors"] = args ? args.appliedFors : undefined;
            resourceInputs["customRoleArn"] = args ? args.customRoleArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionConfigurations"] = args ? args.encryptionConfigurations : undefined;
            resourceInputs["imageTagMutability"] = args ? args.imageTagMutability : undefined;
            resourceInputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["repositoryPolicy"] = args ? args.repositoryPolicy : undefined;
            resourceInputs["resourceTags"] = args ? args.resourceTags : undefined;
            resourceInputs["registryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcrRepositoryCreationTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcrRepositoryCreationTemplate resources.
 */
export interface EcrRepositoryCreationTemplateState {
    appliedFors?: pulumi.Input<pulumi.Input<string>[]>;
    customRoleArn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionConfigurations?: pulumi.Input<pulumi.Input<inputs.EcrRepositoryCreationTemplateEncryptionConfiguration>[]>;
    imageTagMutability?: pulumi.Input<string>;
    lifecyclePolicy?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    registryId?: pulumi.Input<string>;
    repositoryPolicy?: pulumi.Input<string>;
    resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a EcrRepositoryCreationTemplate resource.
 */
export interface EcrRepositoryCreationTemplateArgs {
    appliedFors: pulumi.Input<pulumi.Input<string>[]>;
    customRoleArn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionConfigurations?: pulumi.Input<pulumi.Input<inputs.EcrRepositoryCreationTemplateEncryptionConfiguration>[]>;
    imageTagMutability?: pulumi.Input<string>;
    lifecyclePolicy?: pulumi.Input<string>;
    prefix: pulumi.Input<string>;
    repositoryPolicy?: pulumi.Input<string>;
    resourceTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
