// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DirectoryServiceSharedDirectory extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryServiceSharedDirectory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryServiceSharedDirectoryState, opts?: pulumi.CustomResourceOptions): DirectoryServiceSharedDirectory {
        return new DirectoryServiceSharedDirectory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/directoryServiceSharedDirectory:DirectoryServiceSharedDirectory';

    /**
     * Returns true if the given object is an instance of DirectoryServiceSharedDirectory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirectoryServiceSharedDirectory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryServiceSharedDirectory.__pulumiType;
    }

    public readonly directoryId!: pulumi.Output<string>;
    public readonly method!: pulumi.Output<string | undefined>;
    public readonly notes!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sharedDirectoryId!: pulumi.Output<string>;
    public readonly target!: pulumi.Output<outputs.DirectoryServiceSharedDirectoryTarget>;
    public readonly timeouts!: pulumi.Output<outputs.DirectoryServiceSharedDirectoryTimeouts | undefined>;

    /**
     * Create a DirectoryServiceSharedDirectory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryServiceSharedDirectoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryServiceSharedDirectoryArgs | DirectoryServiceSharedDirectoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryServiceSharedDirectoryState | undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["sharedDirectoryId"] = state ? state.sharedDirectoryId : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DirectoryServiceSharedDirectoryArgs | undefined;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["notes"] = args?.notes ? pulumi.secret(args.notes) : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["sharedDirectoryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["notes"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DirectoryServiceSharedDirectory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DirectoryServiceSharedDirectory resources.
 */
export interface DirectoryServiceSharedDirectoryState {
    directoryId?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    sharedDirectoryId?: pulumi.Input<string>;
    target?: pulumi.Input<inputs.DirectoryServiceSharedDirectoryTarget>;
    timeouts?: pulumi.Input<inputs.DirectoryServiceSharedDirectoryTimeouts>;
}

/**
 * The set of arguments for constructing a DirectoryServiceSharedDirectory resource.
 */
export interface DirectoryServiceSharedDirectoryArgs {
    directoryId: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    target: pulumi.Input<inputs.DirectoryServiceSharedDirectoryTarget>;
    timeouts?: pulumi.Input<inputs.DirectoryServiceSharedDirectoryTimeouts>;
}
