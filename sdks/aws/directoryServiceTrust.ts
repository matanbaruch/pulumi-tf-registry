// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DirectoryServiceTrust extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryServiceTrust resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryServiceTrustState, opts?: pulumi.CustomResourceOptions): DirectoryServiceTrust {
        return new DirectoryServiceTrust(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/directoryServiceTrust:DirectoryServiceTrust';

    /**
     * Returns true if the given object is an instance of DirectoryServiceTrust.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirectoryServiceTrust {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryServiceTrust.__pulumiType;
    }

    public readonly conditionalForwarderIpAddrs!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly createdDateTime!: pulumi.Output<string>;
    public readonly deleteAssociatedConditionalForwarder!: pulumi.Output<boolean>;
    public readonly directoryId!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdatedDateTime!: pulumi.Output<string>;
    public readonly remoteDomainName!: pulumi.Output<string>;
    public readonly selectiveAuth!: pulumi.Output<string>;
    public /*out*/ readonly stateLastUpdatedDateTime!: pulumi.Output<string>;
    public readonly trustDirection!: pulumi.Output<string>;
    public readonly trustPassword!: pulumi.Output<string>;
    public /*out*/ readonly trustState!: pulumi.Output<string>;
    public /*out*/ readonly trustStateReason!: pulumi.Output<string>;
    public readonly trustType!: pulumi.Output<string>;

    /**
     * Create a DirectoryServiceTrust resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryServiceTrustArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryServiceTrustArgs | DirectoryServiceTrustState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryServiceTrustState | undefined;
            resourceInputs["conditionalForwarderIpAddrs"] = state ? state.conditionalForwarderIpAddrs : undefined;
            resourceInputs["createdDateTime"] = state ? state.createdDateTime : undefined;
            resourceInputs["deleteAssociatedConditionalForwarder"] = state ? state.deleteAssociatedConditionalForwarder : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["lastUpdatedDateTime"] = state ? state.lastUpdatedDateTime : undefined;
            resourceInputs["remoteDomainName"] = state ? state.remoteDomainName : undefined;
            resourceInputs["selectiveAuth"] = state ? state.selectiveAuth : undefined;
            resourceInputs["stateLastUpdatedDateTime"] = state ? state.stateLastUpdatedDateTime : undefined;
            resourceInputs["trustDirection"] = state ? state.trustDirection : undefined;
            resourceInputs["trustPassword"] = state ? state.trustPassword : undefined;
            resourceInputs["trustState"] = state ? state.trustState : undefined;
            resourceInputs["trustStateReason"] = state ? state.trustStateReason : undefined;
            resourceInputs["trustType"] = state ? state.trustType : undefined;
        } else {
            const args = argsOrState as DirectoryServiceTrustArgs | undefined;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if ((!args || args.remoteDomainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteDomainName'");
            }
            if ((!args || args.trustDirection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustDirection'");
            }
            if ((!args || args.trustPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustPassword'");
            }
            resourceInputs["conditionalForwarderIpAddrs"] = args ? args.conditionalForwarderIpAddrs : undefined;
            resourceInputs["deleteAssociatedConditionalForwarder"] = args ? args.deleteAssociatedConditionalForwarder : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["remoteDomainName"] = args ? args.remoteDomainName : undefined;
            resourceInputs["selectiveAuth"] = args ? args.selectiveAuth : undefined;
            resourceInputs["trustDirection"] = args ? args.trustDirection : undefined;
            resourceInputs["trustPassword"] = args ? args.trustPassword : undefined;
            resourceInputs["trustType"] = args ? args.trustType : undefined;
            resourceInputs["createdDateTime"] = undefined /*out*/;
            resourceInputs["lastUpdatedDateTime"] = undefined /*out*/;
            resourceInputs["stateLastUpdatedDateTime"] = undefined /*out*/;
            resourceInputs["trustState"] = undefined /*out*/;
            resourceInputs["trustStateReason"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirectoryServiceTrust.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DirectoryServiceTrust resources.
 */
export interface DirectoryServiceTrustState {
    conditionalForwarderIpAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    createdDateTime?: pulumi.Input<string>;
    deleteAssociatedConditionalForwarder?: pulumi.Input<boolean>;
    directoryId?: pulumi.Input<string>;
    lastUpdatedDateTime?: pulumi.Input<string>;
    remoteDomainName?: pulumi.Input<string>;
    selectiveAuth?: pulumi.Input<string>;
    stateLastUpdatedDateTime?: pulumi.Input<string>;
    trustDirection?: pulumi.Input<string>;
    trustPassword?: pulumi.Input<string>;
    trustState?: pulumi.Input<string>;
    trustStateReason?: pulumi.Input<string>;
    trustType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DirectoryServiceTrust resource.
 */
export interface DirectoryServiceTrustArgs {
    conditionalForwarderIpAddrs?: pulumi.Input<pulumi.Input<string>[]>;
    deleteAssociatedConditionalForwarder?: pulumi.Input<boolean>;
    directoryId: pulumi.Input<string>;
    remoteDomainName: pulumi.Input<string>;
    selectiveAuth?: pulumi.Input<string>;
    trustDirection: pulumi.Input<string>;
    trustPassword: pulumi.Input<string>;
    trustType?: pulumi.Input<string>;
}
