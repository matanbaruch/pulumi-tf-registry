// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkmonitorProbe extends pulumi.CustomResource {
    /**
     * Get an existing NetworkmonitorProbe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkmonitorProbeState, opts?: pulumi.CustomResourceOptions): NetworkmonitorProbe {
        return new NetworkmonitorProbe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/networkmonitorProbe:NetworkmonitorProbe';

    /**
     * Returns true if the given object is an instance of NetworkmonitorProbe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkmonitorProbe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkmonitorProbe.__pulumiType;
    }

    public /*out*/ readonly addressFamily!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly destination!: pulumi.Output<string>;
    public readonly destinationPort!: pulumi.Output<number | undefined>;
    public readonly monitorName!: pulumi.Output<string>;
    public readonly packetSize!: pulumi.Output<number>;
    public /*out*/ readonly probeId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly sourceArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a NetworkmonitorProbe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkmonitorProbeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkmonitorProbeArgs | NetworkmonitorProbeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkmonitorProbeState | undefined;
            resourceInputs["addressFamily"] = state ? state.addressFamily : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["destinationPort"] = state ? state.destinationPort : undefined;
            resourceInputs["monitorName"] = state ? state.monitorName : undefined;
            resourceInputs["packetSize"] = state ? state.packetSize : undefined;
            resourceInputs["probeId"] = state ? state.probeId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as NetworkmonitorProbeArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.monitorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorName'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.sourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceArn'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["destinationPort"] = args ? args.destinationPort : undefined;
            resourceInputs["monitorName"] = args ? args.monitorName : undefined;
            resourceInputs["packetSize"] = args ? args.packetSize : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["addressFamily"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["probeId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkmonitorProbe.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkmonitorProbe resources.
 */
export interface NetworkmonitorProbeState {
    addressFamily?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    destination?: pulumi.Input<string>;
    destinationPort?: pulumi.Input<number>;
    monitorName?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    probeId?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    sourceArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkmonitorProbe resource.
 */
export interface NetworkmonitorProbeArgs {
    destination: pulumi.Input<string>;
    destinationPort?: pulumi.Input<number>;
    monitorName: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    sourceArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
