// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsExportTask extends pulumi.CustomResource {
    /**
     * Get an existing RdsExportTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsExportTaskState, opts?: pulumi.CustomResourceOptions): RdsExportTask {
        return new RdsExportTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/rdsExportTask:RdsExportTask';

    /**
     * Returns true if the given object is an instance of RdsExportTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsExportTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsExportTask.__pulumiType;
    }

    public readonly exportOnlies!: pulumi.Output<string[] | undefined>;
    public readonly exportTaskIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly failureCause!: pulumi.Output<string>;
    public readonly iamRoleArn!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public /*out*/ readonly percentProgress!: pulumi.Output<number>;
    public readonly s3BucketName!: pulumi.Output<string>;
    public readonly s3Prefix!: pulumi.Output<string>;
    public /*out*/ readonly snapshotTime!: pulumi.Output<string>;
    public readonly sourceArn!: pulumi.Output<string>;
    public /*out*/ readonly sourceType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly taskEndTime!: pulumi.Output<string>;
    public /*out*/ readonly taskStartTime!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RdsExportTaskTimeouts | undefined>;
    public /*out*/ readonly warningMessage!: pulumi.Output<string>;

    /**
     * Create a RdsExportTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsExportTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsExportTaskArgs | RdsExportTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsExportTaskState | undefined;
            resourceInputs["exportOnlies"] = state ? state.exportOnlies : undefined;
            resourceInputs["exportTaskIdentifier"] = state ? state.exportTaskIdentifier : undefined;
            resourceInputs["failureCause"] = state ? state.failureCause : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["percentProgress"] = state ? state.percentProgress : undefined;
            resourceInputs["s3BucketName"] = state ? state.s3BucketName : undefined;
            resourceInputs["s3Prefix"] = state ? state.s3Prefix : undefined;
            resourceInputs["snapshotTime"] = state ? state.snapshotTime : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["taskEndTime"] = state ? state.taskEndTime : undefined;
            resourceInputs["taskStartTime"] = state ? state.taskStartTime : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["warningMessage"] = state ? state.warningMessage : undefined;
        } else {
            const args = argsOrState as RdsExportTaskArgs | undefined;
            if ((!args || args.exportTaskIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportTaskIdentifier'");
            }
            if ((!args || args.iamRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleArn'");
            }
            if ((!args || args.kmsKeyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kmsKeyId'");
            }
            if ((!args || args.s3BucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3BucketName'");
            }
            if ((!args || args.sourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceArn'");
            }
            resourceInputs["exportOnlies"] = args ? args.exportOnlies : undefined;
            resourceInputs["exportTaskIdentifier"] = args ? args.exportTaskIdentifier : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["s3BucketName"] = args ? args.s3BucketName : undefined;
            resourceInputs["s3Prefix"] = args ? args.s3Prefix : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["failureCause"] = undefined /*out*/;
            resourceInputs["percentProgress"] = undefined /*out*/;
            resourceInputs["snapshotTime"] = undefined /*out*/;
            resourceInputs["sourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["taskEndTime"] = undefined /*out*/;
            resourceInputs["taskStartTime"] = undefined /*out*/;
            resourceInputs["warningMessage"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsExportTask.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsExportTask resources.
 */
export interface RdsExportTaskState {
    exportOnlies?: pulumi.Input<pulumi.Input<string>[]>;
    exportTaskIdentifier?: pulumi.Input<string>;
    failureCause?: pulumi.Input<string>;
    iamRoleArn?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    percentProgress?: pulumi.Input<number>;
    s3BucketName?: pulumi.Input<string>;
    s3Prefix?: pulumi.Input<string>;
    snapshotTime?: pulumi.Input<string>;
    sourceArn?: pulumi.Input<string>;
    sourceType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    taskEndTime?: pulumi.Input<string>;
    taskStartTime?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsExportTaskTimeouts>;
    warningMessage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RdsExportTask resource.
 */
export interface RdsExportTaskArgs {
    exportOnlies?: pulumi.Input<pulumi.Input<string>[]>;
    exportTaskIdentifier: pulumi.Input<string>;
    iamRoleArn: pulumi.Input<string>;
    kmsKeyId: pulumi.Input<string>;
    s3BucketName: pulumi.Input<string>;
    s3Prefix?: pulumi.Input<string>;
    sourceArn: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RdsExportTaskTimeouts>;
}
