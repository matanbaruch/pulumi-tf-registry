// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SagemakerWorkforce extends pulumi.CustomResource {
    /**
     * Get an existing SagemakerWorkforce resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SagemakerWorkforceState, opts?: pulumi.CustomResourceOptions): SagemakerWorkforce {
        return new SagemakerWorkforce(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/sagemakerWorkforce:SagemakerWorkforce';

    /**
     * Returns true if the given object is an instance of SagemakerWorkforce.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SagemakerWorkforce {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SagemakerWorkforce.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cognitoConfig!: pulumi.Output<outputs.SagemakerWorkforceCognitoConfig | undefined>;
    public readonly oidcConfig!: pulumi.Output<outputs.SagemakerWorkforceOidcConfig | undefined>;
    public readonly sourceIpConfig!: pulumi.Output<outputs.SagemakerWorkforceSourceIpConfig | undefined>;
    public /*out*/ readonly subdomain!: pulumi.Output<string>;
    public readonly workforceName!: pulumi.Output<string>;
    public readonly workforceVpcConfig!: pulumi.Output<outputs.SagemakerWorkforceWorkforceVpcConfig | undefined>;

    /**
     * Create a SagemakerWorkforce resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SagemakerWorkforceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SagemakerWorkforceArgs | SagemakerWorkforceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SagemakerWorkforceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cognitoConfig"] = state ? state.cognitoConfig : undefined;
            resourceInputs["oidcConfig"] = state ? state.oidcConfig : undefined;
            resourceInputs["sourceIpConfig"] = state ? state.sourceIpConfig : undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
            resourceInputs["workforceName"] = state ? state.workforceName : undefined;
            resourceInputs["workforceVpcConfig"] = state ? state.workforceVpcConfig : undefined;
        } else {
            const args = argsOrState as SagemakerWorkforceArgs | undefined;
            if ((!args || args.workforceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workforceName'");
            }
            resourceInputs["cognitoConfig"] = args ? args.cognitoConfig : undefined;
            resourceInputs["oidcConfig"] = args ? args.oidcConfig : undefined;
            resourceInputs["sourceIpConfig"] = args ? args.sourceIpConfig : undefined;
            resourceInputs["workforceName"] = args ? args.workforceName : undefined;
            resourceInputs["workforceVpcConfig"] = args ? args.workforceVpcConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["subdomain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SagemakerWorkforce.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SagemakerWorkforce resources.
 */
export interface SagemakerWorkforceState {
    arn?: pulumi.Input<string>;
    cognitoConfig?: pulumi.Input<inputs.SagemakerWorkforceCognitoConfig>;
    oidcConfig?: pulumi.Input<inputs.SagemakerWorkforceOidcConfig>;
    sourceIpConfig?: pulumi.Input<inputs.SagemakerWorkforceSourceIpConfig>;
    subdomain?: pulumi.Input<string>;
    workforceName?: pulumi.Input<string>;
    workforceVpcConfig?: pulumi.Input<inputs.SagemakerWorkforceWorkforceVpcConfig>;
}

/**
 * The set of arguments for constructing a SagemakerWorkforce resource.
 */
export interface SagemakerWorkforceArgs {
    cognitoConfig?: pulumi.Input<inputs.SagemakerWorkforceCognitoConfig>;
    oidcConfig?: pulumi.Input<inputs.SagemakerWorkforceOidcConfig>;
    sourceIpConfig?: pulumi.Input<inputs.SagemakerWorkforceSourceIpConfig>;
    workforceName: pulumi.Input<string>;
    workforceVpcConfig?: pulumi.Input<inputs.SagemakerWorkforceWorkforceVpcConfig>;
}
