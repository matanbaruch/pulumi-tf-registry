// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IamUserLoginProfile extends pulumi.CustomResource {
    /**
     * Get an existing IamUserLoginProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamUserLoginProfileState, opts?: pulumi.CustomResourceOptions): IamUserLoginProfile {
        return new IamUserLoginProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/iamUserLoginProfile:IamUserLoginProfile';

    /**
     * Returns true if the given object is an instance of IamUserLoginProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamUserLoginProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamUserLoginProfile.__pulumiType;
    }

    public /*out*/ readonly encryptedPassword!: pulumi.Output<string>;
    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    public /*out*/ readonly password!: pulumi.Output<string>;
    public readonly passwordLength!: pulumi.Output<number | undefined>;
    public readonly passwordResetRequired!: pulumi.Output<boolean>;
    public readonly pgpKey!: pulumi.Output<string | undefined>;
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a IamUserLoginProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamUserLoginProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamUserLoginProfileArgs | IamUserLoginProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamUserLoginProfileState | undefined;
            resourceInputs["encryptedPassword"] = state ? state.encryptedPassword : undefined;
            resourceInputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordLength"] = state ? state.passwordLength : undefined;
            resourceInputs["passwordResetRequired"] = state ? state.passwordResetRequired : undefined;
            resourceInputs["pgpKey"] = state ? state.pgpKey : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as IamUserLoginProfileArgs | undefined;
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["passwordLength"] = args ? args.passwordLength : undefined;
            resourceInputs["passwordResetRequired"] = args ? args.passwordResetRequired : undefined;
            resourceInputs["pgpKey"] = args ? args.pgpKey : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["encryptedPassword"] = undefined /*out*/;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamUserLoginProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IamUserLoginProfile resources.
 */
export interface IamUserLoginProfileState {
    encryptedPassword?: pulumi.Input<string>;
    keyFingerprint?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    passwordLength?: pulumi.Input<number>;
    passwordResetRequired?: pulumi.Input<boolean>;
    pgpKey?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamUserLoginProfile resource.
 */
export interface IamUserLoginProfileArgs {
    passwordLength?: pulumi.Input<number>;
    passwordResetRequired?: pulumi.Input<boolean>;
    pgpKey?: pulumi.Input<string>;
    user: pulumi.Input<string>;
}
