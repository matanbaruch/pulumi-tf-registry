// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigDeliveryChannel extends pulumi.CustomResource {
    /**
     * Get an existing ConfigDeliveryChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigDeliveryChannelState, opts?: pulumi.CustomResourceOptions): ConfigDeliveryChannel {
        return new ConfigDeliveryChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/configDeliveryChannel:ConfigDeliveryChannel';

    /**
     * Returns true if the given object is an instance of ConfigDeliveryChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigDeliveryChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigDeliveryChannel.__pulumiType;
    }

    public readonly name!: pulumi.Output<string>;
    public readonly s3BucketName!: pulumi.Output<string>;
    public readonly s3KeyPrefix!: pulumi.Output<string | undefined>;
    public readonly s3KmsKeyArn!: pulumi.Output<string | undefined>;
    public readonly snapshotDeliveryProperties!: pulumi.Output<outputs.ConfigDeliveryChannelSnapshotDeliveryProperties | undefined>;
    public readonly snsTopicArn!: pulumi.Output<string | undefined>;

    /**
     * Create a ConfigDeliveryChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigDeliveryChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigDeliveryChannelArgs | ConfigDeliveryChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigDeliveryChannelState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["s3BucketName"] = state ? state.s3BucketName : undefined;
            resourceInputs["s3KeyPrefix"] = state ? state.s3KeyPrefix : undefined;
            resourceInputs["s3KmsKeyArn"] = state ? state.s3KmsKeyArn : undefined;
            resourceInputs["snapshotDeliveryProperties"] = state ? state.snapshotDeliveryProperties : undefined;
            resourceInputs["snsTopicArn"] = state ? state.snsTopicArn : undefined;
        } else {
            const args = argsOrState as ConfigDeliveryChannelArgs | undefined;
            if ((!args || args.s3BucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3BucketName'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["s3BucketName"] = args ? args.s3BucketName : undefined;
            resourceInputs["s3KeyPrefix"] = args ? args.s3KeyPrefix : undefined;
            resourceInputs["s3KmsKeyArn"] = args ? args.s3KmsKeyArn : undefined;
            resourceInputs["snapshotDeliveryProperties"] = args ? args.snapshotDeliveryProperties : undefined;
            resourceInputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigDeliveryChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigDeliveryChannel resources.
 */
export interface ConfigDeliveryChannelState {
    name?: pulumi.Input<string>;
    s3BucketName?: pulumi.Input<string>;
    s3KeyPrefix?: pulumi.Input<string>;
    s3KmsKeyArn?: pulumi.Input<string>;
    snapshotDeliveryProperties?: pulumi.Input<inputs.ConfigDeliveryChannelSnapshotDeliveryProperties>;
    snsTopicArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigDeliveryChannel resource.
 */
export interface ConfigDeliveryChannelArgs {
    name?: pulumi.Input<string>;
    s3BucketName: pulumi.Input<string>;
    s3KeyPrefix?: pulumi.Input<string>;
    s3KmsKeyArn?: pulumi.Input<string>;
    snapshotDeliveryProperties?: pulumi.Input<inputs.ConfigDeliveryChannelSnapshotDeliveryProperties>;
    snsTopicArn?: pulumi.Input<string>;
}
