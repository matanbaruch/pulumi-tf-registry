// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LocationPlaceIndex extends pulumi.CustomResource {
    /**
     * Get an existing LocationPlaceIndex resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocationPlaceIndexState, opts?: pulumi.CustomResourceOptions): LocationPlaceIndex {
        return new LocationPlaceIndex(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/locationPlaceIndex:LocationPlaceIndex';

    /**
     * Returns true if the given object is an instance of LocationPlaceIndex.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LocationPlaceIndex {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LocationPlaceIndex.__pulumiType;
    }

    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly dataSource!: pulumi.Output<string>;
    public readonly dataSourceConfiguration!: pulumi.Output<outputs.LocationPlaceIndexDataSourceConfiguration | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly indexArn!: pulumi.Output<string>;
    public readonly indexName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a LocationPlaceIndex resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationPlaceIndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocationPlaceIndexArgs | LocationPlaceIndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocationPlaceIndexState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataSource"] = state ? state.dataSource : undefined;
            resourceInputs["dataSourceConfiguration"] = state ? state.dataSourceConfiguration : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexArn"] = state ? state.indexArn : undefined;
            resourceInputs["indexName"] = state ? state.indexName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as LocationPlaceIndexArgs | undefined;
            if ((!args || args.dataSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSource'");
            }
            if ((!args || args.indexName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexName'");
            }
            resourceInputs["dataSource"] = args ? args.dataSource : undefined;
            resourceInputs["dataSourceConfiguration"] = args ? args.dataSourceConfiguration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexName"] = args ? args.indexName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["indexArn"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LocationPlaceIndex.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LocationPlaceIndex resources.
 */
export interface LocationPlaceIndexState {
    createTime?: pulumi.Input<string>;
    dataSource?: pulumi.Input<string>;
    dataSourceConfiguration?: pulumi.Input<inputs.LocationPlaceIndexDataSourceConfiguration>;
    description?: pulumi.Input<string>;
    indexArn?: pulumi.Input<string>;
    indexName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LocationPlaceIndex resource.
 */
export interface LocationPlaceIndexArgs {
    dataSource: pulumi.Input<string>;
    dataSourceConfiguration?: pulumi.Input<inputs.LocationPlaceIndexDataSourceConfiguration>;
    description?: pulumi.Input<string>;
    indexName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
