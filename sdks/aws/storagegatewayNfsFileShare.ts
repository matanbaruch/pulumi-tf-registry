// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StoragegatewayNfsFileShare extends pulumi.CustomResource {
    /**
     * Get an existing StoragegatewayNfsFileShare resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StoragegatewayNfsFileShareState, opts?: pulumi.CustomResourceOptions): StoragegatewayNfsFileShare {
        return new StoragegatewayNfsFileShare(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/storagegatewayNfsFileShare:StoragegatewayNfsFileShare';

    /**
     * Returns true if the given object is an instance of StoragegatewayNfsFileShare.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StoragegatewayNfsFileShare {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StoragegatewayNfsFileShare.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly auditDestinationArn!: pulumi.Output<string | undefined>;
    public readonly bucketRegion!: pulumi.Output<string | undefined>;
    public readonly cacheAttributes!: pulumi.Output<outputs.StoragegatewayNfsFileShareCacheAttributes | undefined>;
    public readonly clientLists!: pulumi.Output<string[]>;
    public readonly defaultStorageClass!: pulumi.Output<string | undefined>;
    public readonly fileShareName!: pulumi.Output<string>;
    public /*out*/ readonly fileshareId!: pulumi.Output<string>;
    public readonly gatewayArn!: pulumi.Output<string>;
    public readonly guessMimeTypeEnabled!: pulumi.Output<boolean | undefined>;
    public readonly kmsEncrypted!: pulumi.Output<boolean | undefined>;
    public readonly kmsKeyArn!: pulumi.Output<string | undefined>;
    public readonly locationArn!: pulumi.Output<string>;
    public readonly nfsFileShareDefaults!: pulumi.Output<outputs.StoragegatewayNfsFileShareNfsFileShareDefaults | undefined>;
    public readonly notificationPolicy!: pulumi.Output<string | undefined>;
    public readonly objectAcl!: pulumi.Output<string | undefined>;
    public /*out*/ readonly path!: pulumi.Output<string>;
    public readonly readOnly!: pulumi.Output<boolean | undefined>;
    public readonly requesterPays!: pulumi.Output<boolean | undefined>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly squash!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.StoragegatewayNfsFileShareTimeouts | undefined>;
    public readonly vpcEndpointDnsName!: pulumi.Output<string | undefined>;

    /**
     * Create a StoragegatewayNfsFileShare resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StoragegatewayNfsFileShareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StoragegatewayNfsFileShareArgs | StoragegatewayNfsFileShareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StoragegatewayNfsFileShareState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["auditDestinationArn"] = state ? state.auditDestinationArn : undefined;
            resourceInputs["bucketRegion"] = state ? state.bucketRegion : undefined;
            resourceInputs["cacheAttributes"] = state ? state.cacheAttributes : undefined;
            resourceInputs["clientLists"] = state ? state.clientLists : undefined;
            resourceInputs["defaultStorageClass"] = state ? state.defaultStorageClass : undefined;
            resourceInputs["fileShareName"] = state ? state.fileShareName : undefined;
            resourceInputs["fileshareId"] = state ? state.fileshareId : undefined;
            resourceInputs["gatewayArn"] = state ? state.gatewayArn : undefined;
            resourceInputs["guessMimeTypeEnabled"] = state ? state.guessMimeTypeEnabled : undefined;
            resourceInputs["kmsEncrypted"] = state ? state.kmsEncrypted : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["locationArn"] = state ? state.locationArn : undefined;
            resourceInputs["nfsFileShareDefaults"] = state ? state.nfsFileShareDefaults : undefined;
            resourceInputs["notificationPolicy"] = state ? state.notificationPolicy : undefined;
            resourceInputs["objectAcl"] = state ? state.objectAcl : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["requesterPays"] = state ? state.requesterPays : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["squash"] = state ? state.squash : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcEndpointDnsName"] = state ? state.vpcEndpointDnsName : undefined;
        } else {
            const args = argsOrState as StoragegatewayNfsFileShareArgs | undefined;
            if ((!args || args.clientLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientLists'");
            }
            if ((!args || args.gatewayArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayArn'");
            }
            if ((!args || args.locationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationArn'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["auditDestinationArn"] = args ? args.auditDestinationArn : undefined;
            resourceInputs["bucketRegion"] = args ? args.bucketRegion : undefined;
            resourceInputs["cacheAttributes"] = args ? args.cacheAttributes : undefined;
            resourceInputs["clientLists"] = args ? args.clientLists : undefined;
            resourceInputs["defaultStorageClass"] = args ? args.defaultStorageClass : undefined;
            resourceInputs["fileShareName"] = args ? args.fileShareName : undefined;
            resourceInputs["gatewayArn"] = args ? args.gatewayArn : undefined;
            resourceInputs["guessMimeTypeEnabled"] = args ? args.guessMimeTypeEnabled : undefined;
            resourceInputs["kmsEncrypted"] = args ? args.kmsEncrypted : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["locationArn"] = args ? args.locationArn : undefined;
            resourceInputs["nfsFileShareDefaults"] = args ? args.nfsFileShareDefaults : undefined;
            resourceInputs["notificationPolicy"] = args ? args.notificationPolicy : undefined;
            resourceInputs["objectAcl"] = args ? args.objectAcl : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["requesterPays"] = args ? args.requesterPays : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["squash"] = args ? args.squash : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcEndpointDnsName"] = args ? args.vpcEndpointDnsName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["fileshareId"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StoragegatewayNfsFileShare.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StoragegatewayNfsFileShare resources.
 */
export interface StoragegatewayNfsFileShareState {
    arn?: pulumi.Input<string>;
    auditDestinationArn?: pulumi.Input<string>;
    bucketRegion?: pulumi.Input<string>;
    cacheAttributes?: pulumi.Input<inputs.StoragegatewayNfsFileShareCacheAttributes>;
    clientLists?: pulumi.Input<pulumi.Input<string>[]>;
    defaultStorageClass?: pulumi.Input<string>;
    fileShareName?: pulumi.Input<string>;
    fileshareId?: pulumi.Input<string>;
    gatewayArn?: pulumi.Input<string>;
    guessMimeTypeEnabled?: pulumi.Input<boolean>;
    kmsEncrypted?: pulumi.Input<boolean>;
    kmsKeyArn?: pulumi.Input<string>;
    locationArn?: pulumi.Input<string>;
    nfsFileShareDefaults?: pulumi.Input<inputs.StoragegatewayNfsFileShareNfsFileShareDefaults>;
    notificationPolicy?: pulumi.Input<string>;
    objectAcl?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    requesterPays?: pulumi.Input<boolean>;
    roleArn?: pulumi.Input<string>;
    squash?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StoragegatewayNfsFileShareTimeouts>;
    vpcEndpointDnsName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StoragegatewayNfsFileShare resource.
 */
export interface StoragegatewayNfsFileShareArgs {
    auditDestinationArn?: pulumi.Input<string>;
    bucketRegion?: pulumi.Input<string>;
    cacheAttributes?: pulumi.Input<inputs.StoragegatewayNfsFileShareCacheAttributes>;
    clientLists: pulumi.Input<pulumi.Input<string>[]>;
    defaultStorageClass?: pulumi.Input<string>;
    fileShareName?: pulumi.Input<string>;
    gatewayArn: pulumi.Input<string>;
    guessMimeTypeEnabled?: pulumi.Input<boolean>;
    kmsEncrypted?: pulumi.Input<boolean>;
    kmsKeyArn?: pulumi.Input<string>;
    locationArn: pulumi.Input<string>;
    nfsFileShareDefaults?: pulumi.Input<inputs.StoragegatewayNfsFileShareNfsFileShareDefaults>;
    notificationPolicy?: pulumi.Input<string>;
    objectAcl?: pulumi.Input<string>;
    readOnly?: pulumi.Input<boolean>;
    requesterPays?: pulumi.Input<boolean>;
    roleArn: pulumi.Input<string>;
    squash?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.StoragegatewayNfsFileShareTimeouts>;
    vpcEndpointDnsName?: pulumi.Input<string>;
}
