// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3Bucket extends pulumi.CustomResource {
    /**
     * Get an existing S3Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3BucketState, opts?: pulumi.CustomResourceOptions): S3Bucket {
        return new S3Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/s3Bucket:S3Bucket';

    /**
     * Returns true if the given object is an instance of S3Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Bucket.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly accelerationStatus!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly acl!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly bucket!: pulumi.Output<string>;
    public /*out*/ readonly bucketDomainName!: pulumi.Output<string>;
    public readonly bucketPrefix!: pulumi.Output<string>;
    public /*out*/ readonly bucketRegionalDomainName!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly corsRules!: pulumi.Output<outputs.S3BucketCorsRule[] | undefined>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly grants!: pulumi.Output<outputs.S3BucketGrant[] | undefined>;
    public /*out*/ readonly hostedZoneId!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly lifecycleRules!: pulumi.Output<outputs.S3BucketLifecycleRule[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly logging!: pulumi.Output<outputs.S3BucketLogging | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly objectLockConfiguration!: pulumi.Output<outputs.S3BucketObjectLockConfiguration | undefined>;
    public readonly objectLockEnabled!: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    public readonly policy!: pulumi.Output<string>;
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly replicationConfiguration!: pulumi.Output<outputs.S3BucketReplicationConfiguration | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly requestPayer!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly serverSideEncryptionConfiguration!: pulumi.Output<outputs.S3BucketServerSideEncryptionConfiguration | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.S3BucketTimeouts | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly versioning!: pulumi.Output<outputs.S3BucketVersioning | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly website!: pulumi.Output<outputs.S3BucketWebsite | undefined>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly websiteDomain!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly websiteEndpoint!: pulumi.Output<string>;

    /**
     * Create a S3Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: S3BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3BucketArgs | S3BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3BucketState | undefined;
            resourceInputs["accelerationStatus"] = state ? state.accelerationStatus : undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["bucketPrefix"] = state ? state.bucketPrefix : undefined;
            resourceInputs["bucketRegionalDomainName"] = state ? state.bucketRegionalDomainName : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["grants"] = state ? state.grants : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["objectLockConfiguration"] = state ? state.objectLockConfiguration : undefined;
            resourceInputs["objectLockEnabled"] = state ? state.objectLockEnabled : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicationConfiguration"] = state ? state.replicationConfiguration : undefined;
            resourceInputs["requestPayer"] = state ? state.requestPayer : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = state ? state.serverSideEncryptionConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
            resourceInputs["websiteDomain"] = state ? state.websiteDomain : undefined;
            resourceInputs["websiteEndpoint"] = state ? state.websiteEndpoint : undefined;
        } else {
            const args = argsOrState as S3BucketArgs | undefined;
            resourceInputs["accelerationStatus"] = args ? args.accelerationStatus : undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bucketPrefix"] = args ? args.bucketPrefix : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["grants"] = args ? args.grants : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["objectLockConfiguration"] = args ? args.objectLockConfiguration : undefined;
            resourceInputs["objectLockEnabled"] = args ? args.objectLockEnabled : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["replicationConfiguration"] = args ? args.replicationConfiguration : undefined;
            resourceInputs["requestPayer"] = args ? args.requestPayer : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = args ? args.serverSideEncryptionConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["bucketRegionalDomainName"] = undefined /*out*/;
            resourceInputs["hostedZoneId"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["websiteDomain"] = undefined /*out*/;
            resourceInputs["websiteEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3Bucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3Bucket resources.
 */
export interface S3BucketState {
    /**
     * @deprecated Deprecated
     */
    accelerationStatus?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    acl?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    bucketDomainName?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    bucketRegionalDomainName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.S3BucketCorsRule>[]>;
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    grants?: pulumi.Input<pulumi.Input<inputs.S3BucketGrant>[]>;
    hostedZoneId?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.S3BucketLifecycleRule>[]>;
    /**
     * @deprecated Deprecated
     */
    logging?: pulumi.Input<inputs.S3BucketLogging>;
    /**
     * @deprecated Deprecated
     */
    objectLockConfiguration?: pulumi.Input<inputs.S3BucketObjectLockConfiguration>;
    objectLockEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    policy?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    replicationConfiguration?: pulumi.Input<inputs.S3BucketReplicationConfiguration>;
    /**
     * @deprecated Deprecated
     */
    requestPayer?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.S3BucketServerSideEncryptionConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.S3BucketTimeouts>;
    /**
     * @deprecated Deprecated
     */
    versioning?: pulumi.Input<inputs.S3BucketVersioning>;
    /**
     * @deprecated Deprecated
     */
    website?: pulumi.Input<inputs.S3BucketWebsite>;
    /**
     * @deprecated Deprecated
     */
    websiteDomain?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    websiteEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a S3Bucket resource.
 */
export interface S3BucketArgs {
    /**
     * @deprecated Deprecated
     */
    accelerationStatus?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.S3BucketCorsRule>[]>;
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    grants?: pulumi.Input<pulumi.Input<inputs.S3BucketGrant>[]>;
    /**
     * @deprecated Deprecated
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.S3BucketLifecycleRule>[]>;
    /**
     * @deprecated Deprecated
     */
    logging?: pulumi.Input<inputs.S3BucketLogging>;
    /**
     * @deprecated Deprecated
     */
    objectLockConfiguration?: pulumi.Input<inputs.S3BucketObjectLockConfiguration>;
    objectLockEnabled?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    policy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    replicationConfiguration?: pulumi.Input<inputs.S3BucketReplicationConfiguration>;
    /**
     * @deprecated Deprecated
     */
    requestPayer?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.S3BucketServerSideEncryptionConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.S3BucketTimeouts>;
    /**
     * @deprecated Deprecated
     */
    versioning?: pulumi.Input<inputs.S3BucketVersioning>;
    /**
     * @deprecated Deprecated
     */
    website?: pulumi.Input<inputs.S3BucketWebsite>;
}
