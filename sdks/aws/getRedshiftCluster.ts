// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedshiftCluster(args: GetRedshiftClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetRedshiftClusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getRedshiftCluster:getRedshiftCluster", {
        "clusterIdentifier": args.clusterIdentifier,
        "id": args.id,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedshiftCluster.
 */
export interface GetRedshiftClusterArgs {
    clusterIdentifier: string;
    id?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getRedshiftCluster.
 */
export interface GetRedshiftClusterResult {
    readonly allowVersionUpgrade: boolean;
    readonly aquaConfigurationStatus: string;
    readonly arn: string;
    readonly automatedSnapshotRetentionPeriod: number;
    readonly availabilityZone: string;
    readonly availabilityZoneRelocationEnabled: boolean;
    readonly bucketName: string;
    readonly clusterIdentifier: string;
    readonly clusterNamespaceArn: string;
    readonly clusterNodes: outputs.GetRedshiftClusterClusterNode[];
    readonly clusterParameterGroupName: string;
    readonly clusterPublicKey: string;
    readonly clusterRevisionNumber: string;
    readonly clusterSubnetGroupName: string;
    readonly clusterType: string;
    readonly clusterVersion: string;
    readonly databaseName: string;
    readonly defaultIamRoleArn: string;
    readonly elasticIp: string;
    readonly enableLogging: boolean;
    readonly encrypted: boolean;
    readonly endpoint: string;
    readonly enhancedVpcRouting: boolean;
    readonly iamRoles: string[];
    readonly id: string;
    readonly kmsKeyId: string;
    readonly logDestinationType: string;
    readonly logExports: string[];
    readonly maintenanceTrackName: string;
    readonly manualSnapshotRetentionPeriod: number;
    readonly masterUsername: string;
    readonly multiAz: boolean;
    readonly nodeType: string;
    readonly numberOfNodes: number;
    readonly port: number;
    readonly preferredMaintenanceWindow: string;
    readonly publiclyAccessible: boolean;
    readonly s3KeyPrefix: string;
    readonly tags: {[key: string]: string};
    readonly vpcId: string;
    readonly vpcSecurityGroupIds: string[];
}
export function getRedshiftClusterOutput(args: GetRedshiftClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedshiftClusterResult> {
    return pulumi.output(args).apply((a: any) => getRedshiftCluster(a, opts))
}

/**
 * A collection of arguments for invoking getRedshiftCluster.
 */
export interface GetRedshiftClusterOutputArgs {
    clusterIdentifier: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
