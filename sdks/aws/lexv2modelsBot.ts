// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lexv2modelsBot extends pulumi.CustomResource {
    /**
     * Get an existing Lexv2modelsBot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Lexv2modelsBotState, opts?: pulumi.CustomResourceOptions): Lexv2modelsBot {
        return new Lexv2modelsBot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lexv2modelsBot:Lexv2modelsBot';

    /**
     * Returns true if the given object is an instance of Lexv2modelsBot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lexv2modelsBot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lexv2modelsBot.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly dataPrivacies!: pulumi.Output<outputs.Lexv2modelsBotDataPrivacy[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly idleSessionTtlInSeconds!: pulumi.Output<number>;
    public readonly members!: pulumi.Output<outputs.Lexv2modelsBotMember[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly testBotAliasTags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.Lexv2modelsBotTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Lexv2modelsBot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Lexv2modelsBotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Lexv2modelsBotArgs | Lexv2modelsBotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Lexv2modelsBotState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dataPrivacies"] = state ? state.dataPrivacies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["idleSessionTtlInSeconds"] = state ? state.idleSessionTtlInSeconds : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["testBotAliasTags"] = state ? state.testBotAliasTags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as Lexv2modelsBotArgs | undefined;
            if ((!args || args.idleSessionTtlInSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idleSessionTtlInSeconds'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            resourceInputs["dataPrivacies"] = args ? args.dataPrivacies : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["idleSessionTtlInSeconds"] = args ? args.idleSessionTtlInSeconds : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["testBotAliasTags"] = args ? args.testBotAliasTags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lexv2modelsBot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lexv2modelsBot resources.
 */
export interface Lexv2modelsBotState {
    arn?: pulumi.Input<string>;
    dataPrivacies?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsBotDataPrivacy>[]>;
    description?: pulumi.Input<string>;
    idleSessionTtlInSeconds?: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsBotMember>[]>;
    name?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    testBotAliasTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Lexv2modelsBotTimeouts>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lexv2modelsBot resource.
 */
export interface Lexv2modelsBotArgs {
    dataPrivacies?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsBotDataPrivacy>[]>;
    description?: pulumi.Input<string>;
    idleSessionTtlInSeconds: pulumi.Input<number>;
    members?: pulumi.Input<pulumi.Input<inputs.Lexv2modelsBotMember>[]>;
    name?: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    testBotAliasTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Lexv2modelsBotTimeouts>;
    type?: pulumi.Input<string>;
}
