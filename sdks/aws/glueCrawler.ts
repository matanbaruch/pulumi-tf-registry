// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlueCrawler extends pulumi.CustomResource {
    /**
     * Get an existing GlueCrawler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueCrawlerState, opts?: pulumi.CustomResourceOptions): GlueCrawler {
        return new GlueCrawler(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/glueCrawler:GlueCrawler';

    /**
     * Returns true if the given object is an instance of GlueCrawler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueCrawler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueCrawler.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly catalogTargets!: pulumi.Output<outputs.GlueCrawlerCatalogTarget[] | undefined>;
    public readonly classifiers!: pulumi.Output<string[] | undefined>;
    public readonly configuration!: pulumi.Output<string | undefined>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly deltaTargets!: pulumi.Output<outputs.GlueCrawlerDeltaTarget[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dynamodbTargets!: pulumi.Output<outputs.GlueCrawlerDynamodbTarget[] | undefined>;
    public readonly hudiTargets!: pulumi.Output<outputs.GlueCrawlerHudiTarget[] | undefined>;
    public readonly icebergTargets!: pulumi.Output<outputs.GlueCrawlerIcebergTarget[] | undefined>;
    public readonly jdbcTargets!: pulumi.Output<outputs.GlueCrawlerJdbcTarget[] | undefined>;
    public readonly lakeFormationConfiguration!: pulumi.Output<outputs.GlueCrawlerLakeFormationConfiguration | undefined>;
    public readonly lineageConfiguration!: pulumi.Output<outputs.GlueCrawlerLineageConfiguration | undefined>;
    public readonly mongodbTargets!: pulumi.Output<outputs.GlueCrawlerMongodbTarget[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly recrawlPolicy!: pulumi.Output<outputs.GlueCrawlerRecrawlPolicy | undefined>;
    public readonly role!: pulumi.Output<string>;
    public readonly s3Targets!: pulumi.Output<outputs.GlueCrawlerS3Target[] | undefined>;
    public readonly schedule!: pulumi.Output<string | undefined>;
    public readonly schemaChangePolicy!: pulumi.Output<outputs.GlueCrawlerSchemaChangePolicy | undefined>;
    public readonly securityConfiguration!: pulumi.Output<string | undefined>;
    public readonly tablePrefix!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a GlueCrawler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueCrawlerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueCrawlerArgs | GlueCrawlerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueCrawlerState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["catalogTargets"] = state ? state.catalogTargets : undefined;
            resourceInputs["classifiers"] = state ? state.classifiers : undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["deltaTargets"] = state ? state.deltaTargets : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamodbTargets"] = state ? state.dynamodbTargets : undefined;
            resourceInputs["hudiTargets"] = state ? state.hudiTargets : undefined;
            resourceInputs["icebergTargets"] = state ? state.icebergTargets : undefined;
            resourceInputs["jdbcTargets"] = state ? state.jdbcTargets : undefined;
            resourceInputs["lakeFormationConfiguration"] = state ? state.lakeFormationConfiguration : undefined;
            resourceInputs["lineageConfiguration"] = state ? state.lineageConfiguration : undefined;
            resourceInputs["mongodbTargets"] = state ? state.mongodbTargets : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recrawlPolicy"] = state ? state.recrawlPolicy : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["s3Targets"] = state ? state.s3Targets : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["schemaChangePolicy"] = state ? state.schemaChangePolicy : undefined;
            resourceInputs["securityConfiguration"] = state ? state.securityConfiguration : undefined;
            resourceInputs["tablePrefix"] = state ? state.tablePrefix : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as GlueCrawlerArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["catalogTargets"] = args ? args.catalogTargets : undefined;
            resourceInputs["classifiers"] = args ? args.classifiers : undefined;
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["deltaTargets"] = args ? args.deltaTargets : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamodbTargets"] = args ? args.dynamodbTargets : undefined;
            resourceInputs["hudiTargets"] = args ? args.hudiTargets : undefined;
            resourceInputs["icebergTargets"] = args ? args.icebergTargets : undefined;
            resourceInputs["jdbcTargets"] = args ? args.jdbcTargets : undefined;
            resourceInputs["lakeFormationConfiguration"] = args ? args.lakeFormationConfiguration : undefined;
            resourceInputs["lineageConfiguration"] = args ? args.lineageConfiguration : undefined;
            resourceInputs["mongodbTargets"] = args ? args.mongodbTargets : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recrawlPolicy"] = args ? args.recrawlPolicy : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["s3Targets"] = args ? args.s3Targets : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["schemaChangePolicy"] = args ? args.schemaChangePolicy : undefined;
            resourceInputs["securityConfiguration"] = args ? args.securityConfiguration : undefined;
            resourceInputs["tablePrefix"] = args ? args.tablePrefix : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueCrawler.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueCrawler resources.
 */
export interface GlueCrawlerState {
    arn?: pulumi.Input<string>;
    catalogTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerCatalogTarget>[]>;
    classifiers?: pulumi.Input<pulumi.Input<string>[]>;
    configuration?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    deltaTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerDeltaTarget>[]>;
    description?: pulumi.Input<string>;
    dynamodbTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerDynamodbTarget>[]>;
    hudiTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerHudiTarget>[]>;
    icebergTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerIcebergTarget>[]>;
    jdbcTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerJdbcTarget>[]>;
    lakeFormationConfiguration?: pulumi.Input<inputs.GlueCrawlerLakeFormationConfiguration>;
    lineageConfiguration?: pulumi.Input<inputs.GlueCrawlerLineageConfiguration>;
    mongodbTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerMongodbTarget>[]>;
    name?: pulumi.Input<string>;
    recrawlPolicy?: pulumi.Input<inputs.GlueCrawlerRecrawlPolicy>;
    role?: pulumi.Input<string>;
    s3Targets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerS3Target>[]>;
    schedule?: pulumi.Input<string>;
    schemaChangePolicy?: pulumi.Input<inputs.GlueCrawlerSchemaChangePolicy>;
    securityConfiguration?: pulumi.Input<string>;
    tablePrefix?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a GlueCrawler resource.
 */
export interface GlueCrawlerArgs {
    catalogTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerCatalogTarget>[]>;
    classifiers?: pulumi.Input<pulumi.Input<string>[]>;
    configuration?: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    deltaTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerDeltaTarget>[]>;
    description?: pulumi.Input<string>;
    dynamodbTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerDynamodbTarget>[]>;
    hudiTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerHudiTarget>[]>;
    icebergTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerIcebergTarget>[]>;
    jdbcTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerJdbcTarget>[]>;
    lakeFormationConfiguration?: pulumi.Input<inputs.GlueCrawlerLakeFormationConfiguration>;
    lineageConfiguration?: pulumi.Input<inputs.GlueCrawlerLineageConfiguration>;
    mongodbTargets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerMongodbTarget>[]>;
    name?: pulumi.Input<string>;
    recrawlPolicy?: pulumi.Input<inputs.GlueCrawlerRecrawlPolicy>;
    role: pulumi.Input<string>;
    s3Targets?: pulumi.Input<pulumi.Input<inputs.GlueCrawlerS3Target>[]>;
    schedule?: pulumi.Input<string>;
    schemaChangePolicy?: pulumi.Input<inputs.GlueCrawlerSchemaChangePolicy>;
    securityConfiguration?: pulumi.Input<string>;
    tablePrefix?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
