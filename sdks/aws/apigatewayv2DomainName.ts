// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Apigatewayv2DomainName extends pulumi.CustomResource {
    /**
     * Get an existing Apigatewayv2DomainName resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Apigatewayv2DomainNameState, opts?: pulumi.CustomResourceOptions): Apigatewayv2DomainName {
        return new Apigatewayv2DomainName(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/apigatewayv2DomainName:Apigatewayv2DomainName';

    /**
     * Returns true if the given object is an instance of Apigatewayv2DomainName.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Apigatewayv2DomainName {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Apigatewayv2DomainName.__pulumiType;
    }

    public /*out*/ readonly apiMappingSelectionExpression!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly domainName!: pulumi.Output<string>;
    public readonly domainNameConfiguration!: pulumi.Output<outputs.Apigatewayv2DomainNameDomainNameConfiguration>;
    public readonly mutualTlsAuthentication!: pulumi.Output<outputs.Apigatewayv2DomainNameMutualTlsAuthentication | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.Apigatewayv2DomainNameTimeouts | undefined>;

    /**
     * Create a Apigatewayv2DomainName resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Apigatewayv2DomainNameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Apigatewayv2DomainNameArgs | Apigatewayv2DomainNameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Apigatewayv2DomainNameState | undefined;
            resourceInputs["apiMappingSelectionExpression"] = state ? state.apiMappingSelectionExpression : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainNameConfiguration"] = state ? state.domainNameConfiguration : undefined;
            resourceInputs["mutualTlsAuthentication"] = state ? state.mutualTlsAuthentication : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as Apigatewayv2DomainNameArgs | undefined;
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.domainNameConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainNameConfiguration'");
            }
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainNameConfiguration"] = args ? args.domainNameConfiguration : undefined;
            resourceInputs["mutualTlsAuthentication"] = args ? args.mutualTlsAuthentication : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["apiMappingSelectionExpression"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Apigatewayv2DomainName.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Apigatewayv2DomainName resources.
 */
export interface Apigatewayv2DomainNameState {
    apiMappingSelectionExpression?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    domainNameConfiguration?: pulumi.Input<inputs.Apigatewayv2DomainNameDomainNameConfiguration>;
    mutualTlsAuthentication?: pulumi.Input<inputs.Apigatewayv2DomainNameMutualTlsAuthentication>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Apigatewayv2DomainNameTimeouts>;
}

/**
 * The set of arguments for constructing a Apigatewayv2DomainName resource.
 */
export interface Apigatewayv2DomainNameArgs {
    domainName: pulumi.Input<string>;
    domainNameConfiguration: pulumi.Input<inputs.Apigatewayv2DomainNameDomainNameConfiguration>;
    mutualTlsAuthentication?: pulumi.Input<inputs.Apigatewayv2DomainNameMutualTlsAuthentication>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.Apigatewayv2DomainNameTimeouts>;
}
