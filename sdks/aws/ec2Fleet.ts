// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ec2Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Ec2Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ec2FleetState, opts?: pulumi.CustomResourceOptions): Ec2Fleet {
        return new Ec2Fleet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ec2Fleet:Ec2Fleet';

    /**
     * Returns true if the given object is an instance of Ec2Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ec2Fleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ec2Fleet.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly context!: pulumi.Output<string | undefined>;
    public readonly excessCapacityTerminationPolicy!: pulumi.Output<string | undefined>;
    public readonly fleetInstanceSets!: pulumi.Output<outputs.Ec2FleetFleetInstanceSet[] | undefined>;
    public readonly fleetState!: pulumi.Output<string>;
    public readonly fulfilledCapacity!: pulumi.Output<number>;
    public readonly fulfilledOnDemandCapacity!: pulumi.Output<number>;
    public readonly launchTemplateConfigs!: pulumi.Output<outputs.Ec2FleetLaunchTemplateConfig[]>;
    public readonly onDemandOptions!: pulumi.Output<outputs.Ec2FleetOnDemandOptions | undefined>;
    public readonly replaceUnhealthyInstances!: pulumi.Output<boolean | undefined>;
    public readonly spotOptions!: pulumi.Output<outputs.Ec2FleetSpotOptions | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly targetCapacitySpecification!: pulumi.Output<outputs.Ec2FleetTargetCapacitySpecification>;
    public readonly terminateInstances!: pulumi.Output<boolean | undefined>;
    public readonly terminateInstancesWithExpiration!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.Ec2FleetTimeouts | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly validFrom!: pulumi.Output<string | undefined>;
    public readonly validUntil!: pulumi.Output<string | undefined>;

    /**
     * Create a Ec2Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Ec2FleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ec2FleetArgs | Ec2FleetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ec2FleetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["excessCapacityTerminationPolicy"] = state ? state.excessCapacityTerminationPolicy : undefined;
            resourceInputs["fleetInstanceSets"] = state ? state.fleetInstanceSets : undefined;
            resourceInputs["fleetState"] = state ? state.fleetState : undefined;
            resourceInputs["fulfilledCapacity"] = state ? state.fulfilledCapacity : undefined;
            resourceInputs["fulfilledOnDemandCapacity"] = state ? state.fulfilledOnDemandCapacity : undefined;
            resourceInputs["launchTemplateConfigs"] = state ? state.launchTemplateConfigs : undefined;
            resourceInputs["onDemandOptions"] = state ? state.onDemandOptions : undefined;
            resourceInputs["replaceUnhealthyInstances"] = state ? state.replaceUnhealthyInstances : undefined;
            resourceInputs["spotOptions"] = state ? state.spotOptions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targetCapacitySpecification"] = state ? state.targetCapacitySpecification : undefined;
            resourceInputs["terminateInstances"] = state ? state.terminateInstances : undefined;
            resourceInputs["terminateInstancesWithExpiration"] = state ? state.terminateInstancesWithExpiration : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["validFrom"] = state ? state.validFrom : undefined;
            resourceInputs["validUntil"] = state ? state.validUntil : undefined;
        } else {
            const args = argsOrState as Ec2FleetArgs | undefined;
            if ((!args || args.launchTemplateConfigs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchTemplateConfigs'");
            }
            if ((!args || args.targetCapacitySpecification === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetCapacitySpecification'");
            }
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["excessCapacityTerminationPolicy"] = args ? args.excessCapacityTerminationPolicy : undefined;
            resourceInputs["fleetInstanceSets"] = args ? args.fleetInstanceSets : undefined;
            resourceInputs["fleetState"] = args ? args.fleetState : undefined;
            resourceInputs["fulfilledCapacity"] = args ? args.fulfilledCapacity : undefined;
            resourceInputs["fulfilledOnDemandCapacity"] = args ? args.fulfilledOnDemandCapacity : undefined;
            resourceInputs["launchTemplateConfigs"] = args ? args.launchTemplateConfigs : undefined;
            resourceInputs["onDemandOptions"] = args ? args.onDemandOptions : undefined;
            resourceInputs["replaceUnhealthyInstances"] = args ? args.replaceUnhealthyInstances : undefined;
            resourceInputs["spotOptions"] = args ? args.spotOptions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["targetCapacitySpecification"] = args ? args.targetCapacitySpecification : undefined;
            resourceInputs["terminateInstances"] = args ? args.terminateInstances : undefined;
            resourceInputs["terminateInstancesWithExpiration"] = args ? args.terminateInstancesWithExpiration : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["validFrom"] = args ? args.validFrom : undefined;
            resourceInputs["validUntil"] = args ? args.validUntil : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ec2Fleet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ec2Fleet resources.
 */
export interface Ec2FleetState {
    arn?: pulumi.Input<string>;
    context?: pulumi.Input<string>;
    excessCapacityTerminationPolicy?: pulumi.Input<string>;
    fleetInstanceSets?: pulumi.Input<pulumi.Input<inputs.Ec2FleetFleetInstanceSet>[]>;
    fleetState?: pulumi.Input<string>;
    fulfilledCapacity?: pulumi.Input<number>;
    fulfilledOnDemandCapacity?: pulumi.Input<number>;
    launchTemplateConfigs?: pulumi.Input<pulumi.Input<inputs.Ec2FleetLaunchTemplateConfig>[]>;
    onDemandOptions?: pulumi.Input<inputs.Ec2FleetOnDemandOptions>;
    replaceUnhealthyInstances?: pulumi.Input<boolean>;
    spotOptions?: pulumi.Input<inputs.Ec2FleetSpotOptions>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetCapacitySpecification?: pulumi.Input<inputs.Ec2FleetTargetCapacitySpecification>;
    terminateInstances?: pulumi.Input<boolean>;
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.Ec2FleetTimeouts>;
    type?: pulumi.Input<string>;
    validFrom?: pulumi.Input<string>;
    validUntil?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ec2Fleet resource.
 */
export interface Ec2FleetArgs {
    context?: pulumi.Input<string>;
    excessCapacityTerminationPolicy?: pulumi.Input<string>;
    fleetInstanceSets?: pulumi.Input<pulumi.Input<inputs.Ec2FleetFleetInstanceSet>[]>;
    fleetState?: pulumi.Input<string>;
    fulfilledCapacity?: pulumi.Input<number>;
    fulfilledOnDemandCapacity?: pulumi.Input<number>;
    launchTemplateConfigs: pulumi.Input<pulumi.Input<inputs.Ec2FleetLaunchTemplateConfig>[]>;
    onDemandOptions?: pulumi.Input<inputs.Ec2FleetOnDemandOptions>;
    replaceUnhealthyInstances?: pulumi.Input<boolean>;
    spotOptions?: pulumi.Input<inputs.Ec2FleetSpotOptions>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetCapacitySpecification: pulumi.Input<inputs.Ec2FleetTargetCapacitySpecification>;
    terminateInstances?: pulumi.Input<boolean>;
    terminateInstancesWithExpiration?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.Ec2FleetTimeouts>;
    type?: pulumi.Input<string>;
    validFrom?: pulumi.Input<string>;
    validUntil?: pulumi.Input<string>;
}
