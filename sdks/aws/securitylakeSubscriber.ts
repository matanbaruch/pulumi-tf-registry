// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecuritylakeSubscriber extends pulumi.CustomResource {
    /**
     * Get an existing SecuritylakeSubscriber resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecuritylakeSubscriberState, opts?: pulumi.CustomResourceOptions): SecuritylakeSubscriber {
        return new SecuritylakeSubscriber(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/securitylakeSubscriber:SecuritylakeSubscriber';

    /**
     * Returns true if the given object is an instance of SecuritylakeSubscriber.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecuritylakeSubscriber {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecuritylakeSubscriber.__pulumiType;
    }

    public readonly accessType!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly resourceShareArn!: pulumi.Output<string>;
    public /*out*/ readonly resourceShareName!: pulumi.Output<string>;
    public /*out*/ readonly roleArn!: pulumi.Output<string>;
    public /*out*/ readonly s3BucketArn!: pulumi.Output<string>;
    public readonly sources!: pulumi.Output<outputs.SecuritylakeSubscriberSource[] | undefined>;
    public readonly subscriberDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly subscriberEndpoint!: pulumi.Output<string>;
    public readonly subscriberIdentities!: pulumi.Output<outputs.SecuritylakeSubscriberSubscriberIdentity[] | undefined>;
    public readonly subscriberName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly subscriberStatus!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.SecuritylakeSubscriberTimeouts | undefined>;

    /**
     * Create a SecuritylakeSubscriber resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecuritylakeSubscriberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecuritylakeSubscriberArgs | SecuritylakeSubscriberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecuritylakeSubscriberState | undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["resourceShareArn"] = state ? state.resourceShareArn : undefined;
            resourceInputs["resourceShareName"] = state ? state.resourceShareName : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["s3BucketArn"] = state ? state.s3BucketArn : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["subscriberDescription"] = state ? state.subscriberDescription : undefined;
            resourceInputs["subscriberEndpoint"] = state ? state.subscriberEndpoint : undefined;
            resourceInputs["subscriberIdentities"] = state ? state.subscriberIdentities : undefined;
            resourceInputs["subscriberName"] = state ? state.subscriberName : undefined;
            resourceInputs["subscriberStatus"] = state ? state.subscriberStatus : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SecuritylakeSubscriberArgs | undefined;
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["subscriberDescription"] = args ? args.subscriberDescription : undefined;
            resourceInputs["subscriberIdentities"] = args ? args.subscriberIdentities : undefined;
            resourceInputs["subscriberName"] = args ? args.subscriberName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["resourceShareArn"] = undefined /*out*/;
            resourceInputs["resourceShareName"] = undefined /*out*/;
            resourceInputs["roleArn"] = undefined /*out*/;
            resourceInputs["s3BucketArn"] = undefined /*out*/;
            resourceInputs["subscriberEndpoint"] = undefined /*out*/;
            resourceInputs["subscriberStatus"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecuritylakeSubscriber.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecuritylakeSubscriber resources.
 */
export interface SecuritylakeSubscriberState {
    accessType?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    resourceShareArn?: pulumi.Input<string>;
    resourceShareName?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    s3BucketArn?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.SecuritylakeSubscriberSource>[]>;
    subscriberDescription?: pulumi.Input<string>;
    subscriberEndpoint?: pulumi.Input<string>;
    subscriberIdentities?: pulumi.Input<pulumi.Input<inputs.SecuritylakeSubscriberSubscriberIdentity>[]>;
    subscriberName?: pulumi.Input<string>;
    subscriberStatus?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SecuritylakeSubscriberTimeouts>;
}

/**
 * The set of arguments for constructing a SecuritylakeSubscriber resource.
 */
export interface SecuritylakeSubscriberArgs {
    accessType?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.SecuritylakeSubscriberSource>[]>;
    subscriberDescription?: pulumi.Input<string>;
    subscriberIdentities?: pulumi.Input<pulumi.Input<inputs.SecuritylakeSubscriberSubscriberIdentity>[]>;
    subscriberName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.SecuritylakeSubscriberTimeouts>;
}
