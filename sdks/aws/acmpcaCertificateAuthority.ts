// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AcmpcaCertificateAuthority extends pulumi.CustomResource {
    /**
     * Get an existing AcmpcaCertificateAuthority resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcmpcaCertificateAuthorityState, opts?: pulumi.CustomResourceOptions): AcmpcaCertificateAuthority {
        return new AcmpcaCertificateAuthority(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/acmpcaCertificateAuthority:AcmpcaCertificateAuthority';

    /**
     * Returns true if the given object is an instance of AcmpcaCertificateAuthority.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AcmpcaCertificateAuthority {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AcmpcaCertificateAuthority.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly certificate!: pulumi.Output<string>;
    public readonly certificateAuthorityConfiguration!: pulumi.Output<outputs.AcmpcaCertificateAuthorityCertificateAuthorityConfiguration>;
    public /*out*/ readonly certificateChain!: pulumi.Output<string>;
    public /*out*/ readonly certificateSigningRequest!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly keyStorageSecurityStandard!: pulumi.Output<string>;
    public /*out*/ readonly notAfter!: pulumi.Output<string>;
    public /*out*/ readonly notBefore!: pulumi.Output<string>;
    public readonly permanentDeletionTimeInDays!: pulumi.Output<number | undefined>;
    public readonly revocationConfiguration!: pulumi.Output<outputs.AcmpcaCertificateAuthorityRevocationConfiguration | undefined>;
    public /*out*/ readonly serial!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.AcmpcaCertificateAuthorityTimeouts | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly usageMode!: pulumi.Output<string>;

    /**
     * Create a AcmpcaCertificateAuthority resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AcmpcaCertificateAuthorityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcmpcaCertificateAuthorityArgs | AcmpcaCertificateAuthorityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcmpcaCertificateAuthorityState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateAuthorityConfiguration"] = state ? state.certificateAuthorityConfiguration : undefined;
            resourceInputs["certificateChain"] = state ? state.certificateChain : undefined;
            resourceInputs["certificateSigningRequest"] = state ? state.certificateSigningRequest : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["keyStorageSecurityStandard"] = state ? state.keyStorageSecurityStandard : undefined;
            resourceInputs["notAfter"] = state ? state.notAfter : undefined;
            resourceInputs["notBefore"] = state ? state.notBefore : undefined;
            resourceInputs["permanentDeletionTimeInDays"] = state ? state.permanentDeletionTimeInDays : undefined;
            resourceInputs["revocationConfiguration"] = state ? state.revocationConfiguration : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usageMode"] = state ? state.usageMode : undefined;
        } else {
            const args = argsOrState as AcmpcaCertificateAuthorityArgs | undefined;
            if ((!args || args.certificateAuthorityConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateAuthorityConfiguration'");
            }
            resourceInputs["certificateAuthorityConfiguration"] = args ? args.certificateAuthorityConfiguration : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["keyStorageSecurityStandard"] = args ? args.keyStorageSecurityStandard : undefined;
            resourceInputs["permanentDeletionTimeInDays"] = args ? args.permanentDeletionTimeInDays : undefined;
            resourceInputs["revocationConfiguration"] = args ? args.revocationConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usageMode"] = args ? args.usageMode : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificate"] = undefined /*out*/;
            resourceInputs["certificateChain"] = undefined /*out*/;
            resourceInputs["certificateSigningRequest"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AcmpcaCertificateAuthority.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AcmpcaCertificateAuthority resources.
 */
export interface AcmpcaCertificateAuthorityState {
    arn?: pulumi.Input<string>;
    certificate?: pulumi.Input<string>;
    certificateAuthorityConfiguration?: pulumi.Input<inputs.AcmpcaCertificateAuthorityCertificateAuthorityConfiguration>;
    certificateChain?: pulumi.Input<string>;
    certificateSigningRequest?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    keyStorageSecurityStandard?: pulumi.Input<string>;
    notAfter?: pulumi.Input<string>;
    notBefore?: pulumi.Input<string>;
    permanentDeletionTimeInDays?: pulumi.Input<number>;
    revocationConfiguration?: pulumi.Input<inputs.AcmpcaCertificateAuthorityRevocationConfiguration>;
    serial?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AcmpcaCertificateAuthorityTimeouts>;
    type?: pulumi.Input<string>;
    usageMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AcmpcaCertificateAuthority resource.
 */
export interface AcmpcaCertificateAuthorityArgs {
    certificateAuthorityConfiguration: pulumi.Input<inputs.AcmpcaCertificateAuthorityCertificateAuthorityConfiguration>;
    enabled?: pulumi.Input<boolean>;
    keyStorageSecurityStandard?: pulumi.Input<string>;
    permanentDeletionTimeInDays?: pulumi.Input<number>;
    revocationConfiguration?: pulumi.Input<inputs.AcmpcaCertificateAuthorityRevocationConfiguration>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.AcmpcaCertificateAuthorityTimeouts>;
    type?: pulumi.Input<string>;
    usageMode?: pulumi.Input<string>;
}
