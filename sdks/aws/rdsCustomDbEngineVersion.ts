// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RdsCustomDbEngineVersion extends pulumi.CustomResource {
    /**
     * Get an existing RdsCustomDbEngineVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdsCustomDbEngineVersionState, opts?: pulumi.CustomResourceOptions): RdsCustomDbEngineVersion {
        return new RdsCustomDbEngineVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/rdsCustomDbEngineVersion:RdsCustomDbEngineVersion';

    /**
     * Returns true if the given object is an instance of RdsCustomDbEngineVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RdsCustomDbEngineVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsCustomDbEngineVersion.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly databaseInstallationFilesS3BucketName!: pulumi.Output<string | undefined>;
    public readonly databaseInstallationFilesS3Prefix!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dbParameterGroupFamily!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public readonly filename!: pulumi.Output<string | undefined>;
    public /*out*/ readonly imageId!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string>;
    public /*out*/ readonly majorEngineVersion!: pulumi.Output<string>;
    public readonly manifest!: pulumi.Output<string | undefined>;
    public /*out*/ readonly manifestComputed!: pulumi.Output<string>;
    public readonly manifestHash!: pulumi.Output<string | undefined>;
    public readonly sourceImageId!: pulumi.Output<string | undefined>;
    public readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.RdsCustomDbEngineVersionTimeouts | undefined>;

    /**
     * Create a RdsCustomDbEngineVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdsCustomDbEngineVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdsCustomDbEngineVersionArgs | RdsCustomDbEngineVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RdsCustomDbEngineVersionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["databaseInstallationFilesS3BucketName"] = state ? state.databaseInstallationFilesS3BucketName : undefined;
            resourceInputs["databaseInstallationFilesS3Prefix"] = state ? state.databaseInstallationFilesS3Prefix : undefined;
            resourceInputs["dbParameterGroupFamily"] = state ? state.dbParameterGroupFamily : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["majorEngineVersion"] = state ? state.majorEngineVersion : undefined;
            resourceInputs["manifest"] = state ? state.manifest : undefined;
            resourceInputs["manifestComputed"] = state ? state.manifestComputed : undefined;
            resourceInputs["manifestHash"] = state ? state.manifestHash : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RdsCustomDbEngineVersionArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            resourceInputs["databaseInstallationFilesS3BucketName"] = args ? args.databaseInstallationFilesS3BucketName : undefined;
            resourceInputs["databaseInstallationFilesS3Prefix"] = args ? args.databaseInstallationFilesS3Prefix : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["manifest"] = args ? args.manifest : undefined;
            resourceInputs["manifestHash"] = args ? args.manifestHash : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dbParameterGroupFamily"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["majorEngineVersion"] = undefined /*out*/;
            resourceInputs["manifestComputed"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RdsCustomDbEngineVersion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RdsCustomDbEngineVersion resources.
 */
export interface RdsCustomDbEngineVersionState {
    arn?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    databaseInstallationFilesS3BucketName?: pulumi.Input<string>;
    databaseInstallationFilesS3Prefix?: pulumi.Input<string>;
    dbParameterGroupFamily?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    majorEngineVersion?: pulumi.Input<string>;
    manifest?: pulumi.Input<string>;
    manifestComputed?: pulumi.Input<string>;
    manifestHash?: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RdsCustomDbEngineVersionTimeouts>;
}

/**
 * The set of arguments for constructing a RdsCustomDbEngineVersion resource.
 */
export interface RdsCustomDbEngineVersionArgs {
    databaseInstallationFilesS3BucketName?: pulumi.Input<string>;
    databaseInstallationFilesS3Prefix?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    filename?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    manifest?: pulumi.Input<string>;
    manifestHash?: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RdsCustomDbEngineVersionTimeouts>;
}
