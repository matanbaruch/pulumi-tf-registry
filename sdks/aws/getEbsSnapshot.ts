// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEbsSnapshot(args?: GetEbsSnapshotArgs, opts?: pulumi.InvokeOptions): Promise<GetEbsSnapshotResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEbsSnapshot:getEbsSnapshot", {
        "filters": args.filters,
        "id": args.id,
        "mostRecent": args.mostRecent,
        "owners": args.owners,
        "restorableByUserIds": args.restorableByUserIds,
        "snapshotIds": args.snapshotIds,
        "tags": args.tags,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEbsSnapshot.
 */
export interface GetEbsSnapshotArgs {
    filters?: inputs.GetEbsSnapshotFilter[];
    id?: string;
    mostRecent?: boolean;
    owners?: string[];
    restorableByUserIds?: string[];
    snapshotIds?: string[];
    tags?: {[key: string]: string};
    timeouts?: inputs.GetEbsSnapshotTimeouts;
}

/**
 * A collection of values returned by getEbsSnapshot.
 */
export interface GetEbsSnapshotResult {
    readonly arn: string;
    readonly dataEncryptionKeyId: string;
    readonly description: string;
    readonly encrypted: boolean;
    readonly filters?: outputs.GetEbsSnapshotFilter[];
    readonly id: string;
    readonly kmsKeyId: string;
    readonly mostRecent?: boolean;
    readonly outpostArn: string;
    readonly ownerAlias: string;
    readonly ownerId: string;
    readonly owners?: string[];
    readonly restorableByUserIds?: string[];
    readonly snapshotId: string;
    readonly snapshotIds?: string[];
    readonly state: string;
    readonly storageTier: string;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetEbsSnapshotTimeouts;
    readonly volumeId: string;
    readonly volumeSize: number;
}
export function getEbsSnapshotOutput(args?: GetEbsSnapshotOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEbsSnapshotResult> {
    return pulumi.output(args).apply((a: any) => getEbsSnapshot(a, opts))
}

/**
 * A collection of arguments for invoking getEbsSnapshot.
 */
export interface GetEbsSnapshotOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetEbsSnapshotFilterArgs>[]>;
    id?: pulumi.Input<string>;
    mostRecent?: pulumi.Input<boolean>;
    owners?: pulumi.Input<pulumi.Input<string>[]>;
    restorableByUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GetEbsSnapshotTimeoutsArgs>;
}
