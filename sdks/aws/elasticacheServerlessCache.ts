// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticacheServerlessCache extends pulumi.CustomResource {
    /**
     * Get an existing ElasticacheServerlessCache resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticacheServerlessCacheState, opts?: pulumi.CustomResourceOptions): ElasticacheServerlessCache {
        return new ElasticacheServerlessCache(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/elasticacheServerlessCache:ElasticacheServerlessCache';

    /**
     * Returns true if the given object is an instance of ElasticacheServerlessCache.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticacheServerlessCache {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticacheServerlessCache.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cacheUsageLimits!: pulumi.Output<outputs.ElasticacheServerlessCacheCacheUsageLimit[] | undefined>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly dailySnapshotTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.ElasticacheServerlessCacheEndpoint[]>;
    public readonly engine!: pulumi.Output<string>;
    public /*out*/ readonly fullEngineVersion!: pulumi.Output<string>;
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    public readonly majorEngineVersion!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly readerEndpoints!: pulumi.Output<outputs.ElasticacheServerlessCacheReaderEndpoint[]>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    public readonly snapshotArnsToRestores!: pulumi.Output<string[] | undefined>;
    public readonly snapshotRetentionLimit!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.ElasticacheServerlessCacheTimeouts | undefined>;
    public readonly userGroupId!: pulumi.Output<string | undefined>;

    /**
     * Create a ElasticacheServerlessCache resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticacheServerlessCacheArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticacheServerlessCacheArgs | ElasticacheServerlessCacheState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticacheServerlessCacheState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cacheUsageLimits"] = state ? state.cacheUsageLimits : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dailySnapshotTime"] = state ? state.dailySnapshotTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["fullEngineVersion"] = state ? state.fullEngineVersion : undefined;
            resourceInputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            resourceInputs["majorEngineVersion"] = state ? state.majorEngineVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readerEndpoints"] = state ? state.readerEndpoints : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["snapshotArnsToRestores"] = state ? state.snapshotArnsToRestores : undefined;
            resourceInputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userGroupId"] = state ? state.userGroupId : undefined;
        } else {
            const args = argsOrState as ElasticacheServerlessCacheArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            resourceInputs["cacheUsageLimits"] = args ? args.cacheUsageLimits : undefined;
            resourceInputs["dailySnapshotTime"] = args ? args.dailySnapshotTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            resourceInputs["majorEngineVersion"] = args ? args.majorEngineVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["snapshotArnsToRestores"] = args ? args.snapshotArnsToRestores : undefined;
            resourceInputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userGroupId"] = args ? args.userGroupId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["fullEngineVersion"] = undefined /*out*/;
            resourceInputs["readerEndpoints"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticacheServerlessCache.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticacheServerlessCache resources.
 */
export interface ElasticacheServerlessCacheState {
    arn?: pulumi.Input<string>;
    cacheUsageLimits?: pulumi.Input<pulumi.Input<inputs.ElasticacheServerlessCacheCacheUsageLimit>[]>;
    createTime?: pulumi.Input<string>;
    dailySnapshotTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.ElasticacheServerlessCacheEndpoint>[]>;
    engine?: pulumi.Input<string>;
    fullEngineVersion?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    majorEngineVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    readerEndpoints?: pulumi.Input<pulumi.Input<inputs.ElasticacheServerlessCacheReaderEndpoint>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotArnsToRestores?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotRetentionLimit?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticacheServerlessCacheTimeouts>;
    userGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElasticacheServerlessCache resource.
 */
export interface ElasticacheServerlessCacheArgs {
    cacheUsageLimits?: pulumi.Input<pulumi.Input<inputs.ElasticacheServerlessCacheCacheUsageLimit>[]>;
    dailySnapshotTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    engine: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    majorEngineVersion?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotArnsToRestores?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotRetentionLimit?: pulumi.Input<number>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ElasticacheServerlessCacheTimeouts>;
    userGroupId?: pulumi.Input<string>;
}
