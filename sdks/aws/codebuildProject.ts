// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodebuildProject extends pulumi.CustomResource {
    /**
     * Get an existing CodebuildProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodebuildProjectState, opts?: pulumi.CustomResourceOptions): CodebuildProject {
        return new CodebuildProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/codebuildProject:CodebuildProject';

    /**
     * Returns true if the given object is an instance of CodebuildProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodebuildProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodebuildProject.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly artifacts!: pulumi.Output<outputs.CodebuildProjectArtifacts>;
    public readonly badgeEnabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly badgeUrl!: pulumi.Output<string>;
    public readonly buildBatchConfig!: pulumi.Output<outputs.CodebuildProjectBuildBatchConfig | undefined>;
    public readonly buildTimeout!: pulumi.Output<number | undefined>;
    public readonly cache!: pulumi.Output<outputs.CodebuildProjectCache | undefined>;
    public readonly concurrentBuildLimit!: pulumi.Output<number | undefined>;
    public readonly description!: pulumi.Output<string>;
    public readonly encryptionKey!: pulumi.Output<string>;
    public readonly environment!: pulumi.Output<outputs.CodebuildProjectEnvironment>;
    public readonly fileSystemLocations!: pulumi.Output<outputs.CodebuildProjectFileSystemLocation[] | undefined>;
    public readonly logsConfig!: pulumi.Output<outputs.CodebuildProjectLogsConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectVisibility!: pulumi.Output<string | undefined>;
    public /*out*/ readonly publicProjectAlias!: pulumi.Output<string>;
    public readonly queuedTimeout!: pulumi.Output<number | undefined>;
    public readonly resourceAccessRole!: pulumi.Output<string | undefined>;
    public readonly secondaryArtifacts!: pulumi.Output<outputs.CodebuildProjectSecondaryArtifact[] | undefined>;
    public readonly secondarySourceVersions!: pulumi.Output<outputs.CodebuildProjectSecondarySourceVersion[] | undefined>;
    public readonly secondarySources!: pulumi.Output<outputs.CodebuildProjectSecondarySource[] | undefined>;
    public readonly serviceRole!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<outputs.CodebuildProjectSource>;
    public readonly sourceVersion!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly vpcConfig!: pulumi.Output<outputs.CodebuildProjectVpcConfig | undefined>;

    /**
     * Create a CodebuildProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodebuildProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodebuildProjectArgs | CodebuildProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodebuildProjectState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["artifacts"] = state ? state.artifacts : undefined;
            resourceInputs["badgeEnabled"] = state ? state.badgeEnabled : undefined;
            resourceInputs["badgeUrl"] = state ? state.badgeUrl : undefined;
            resourceInputs["buildBatchConfig"] = state ? state.buildBatchConfig : undefined;
            resourceInputs["buildTimeout"] = state ? state.buildTimeout : undefined;
            resourceInputs["cache"] = state ? state.cache : undefined;
            resourceInputs["concurrentBuildLimit"] = state ? state.concurrentBuildLimit : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["fileSystemLocations"] = state ? state.fileSystemLocations : undefined;
            resourceInputs["logsConfig"] = state ? state.logsConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectVisibility"] = state ? state.projectVisibility : undefined;
            resourceInputs["publicProjectAlias"] = state ? state.publicProjectAlias : undefined;
            resourceInputs["queuedTimeout"] = state ? state.queuedTimeout : undefined;
            resourceInputs["resourceAccessRole"] = state ? state.resourceAccessRole : undefined;
            resourceInputs["secondaryArtifacts"] = state ? state.secondaryArtifacts : undefined;
            resourceInputs["secondarySourceVersions"] = state ? state.secondarySourceVersions : undefined;
            resourceInputs["secondarySources"] = state ? state.secondarySources : undefined;
            resourceInputs["serviceRole"] = state ? state.serviceRole : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceVersion"] = state ? state.sourceVersion : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as CodebuildProjectArgs | undefined;
            if ((!args || args.artifacts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'artifacts'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.serviceRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceRole'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["artifacts"] = args ? args.artifacts : undefined;
            resourceInputs["badgeEnabled"] = args ? args.badgeEnabled : undefined;
            resourceInputs["buildBatchConfig"] = args ? args.buildBatchConfig : undefined;
            resourceInputs["buildTimeout"] = args ? args.buildTimeout : undefined;
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["concurrentBuildLimit"] = args ? args.concurrentBuildLimit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["fileSystemLocations"] = args ? args.fileSystemLocations : undefined;
            resourceInputs["logsConfig"] = args ? args.logsConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectVisibility"] = args ? args.projectVisibility : undefined;
            resourceInputs["queuedTimeout"] = args ? args.queuedTimeout : undefined;
            resourceInputs["resourceAccessRole"] = args ? args.resourceAccessRole : undefined;
            resourceInputs["secondaryArtifacts"] = args ? args.secondaryArtifacts : undefined;
            resourceInputs["secondarySourceVersions"] = args ? args.secondarySourceVersions : undefined;
            resourceInputs["secondarySources"] = args ? args.secondarySources : undefined;
            resourceInputs["serviceRole"] = args ? args.serviceRole : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceVersion"] = args ? args.sourceVersion : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["badgeUrl"] = undefined /*out*/;
            resourceInputs["publicProjectAlias"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodebuildProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodebuildProject resources.
 */
export interface CodebuildProjectState {
    arn?: pulumi.Input<string>;
    artifacts?: pulumi.Input<inputs.CodebuildProjectArtifacts>;
    badgeEnabled?: pulumi.Input<boolean>;
    badgeUrl?: pulumi.Input<string>;
    buildBatchConfig?: pulumi.Input<inputs.CodebuildProjectBuildBatchConfig>;
    buildTimeout?: pulumi.Input<number>;
    cache?: pulumi.Input<inputs.CodebuildProjectCache>;
    concurrentBuildLimit?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    environment?: pulumi.Input<inputs.CodebuildProjectEnvironment>;
    fileSystemLocations?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectFileSystemLocation>[]>;
    logsConfig?: pulumi.Input<inputs.CodebuildProjectLogsConfig>;
    name?: pulumi.Input<string>;
    projectVisibility?: pulumi.Input<string>;
    publicProjectAlias?: pulumi.Input<string>;
    queuedTimeout?: pulumi.Input<number>;
    resourceAccessRole?: pulumi.Input<string>;
    secondaryArtifacts?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectSecondaryArtifact>[]>;
    secondarySourceVersions?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectSecondarySourceVersion>[]>;
    secondarySources?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectSecondarySource>[]>;
    serviceRole?: pulumi.Input<string>;
    source?: pulumi.Input<inputs.CodebuildProjectSource>;
    sourceVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcConfig?: pulumi.Input<inputs.CodebuildProjectVpcConfig>;
}

/**
 * The set of arguments for constructing a CodebuildProject resource.
 */
export interface CodebuildProjectArgs {
    artifacts: pulumi.Input<inputs.CodebuildProjectArtifacts>;
    badgeEnabled?: pulumi.Input<boolean>;
    buildBatchConfig?: pulumi.Input<inputs.CodebuildProjectBuildBatchConfig>;
    buildTimeout?: pulumi.Input<number>;
    cache?: pulumi.Input<inputs.CodebuildProjectCache>;
    concurrentBuildLimit?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    encryptionKey?: pulumi.Input<string>;
    environment: pulumi.Input<inputs.CodebuildProjectEnvironment>;
    fileSystemLocations?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectFileSystemLocation>[]>;
    logsConfig?: pulumi.Input<inputs.CodebuildProjectLogsConfig>;
    name?: pulumi.Input<string>;
    projectVisibility?: pulumi.Input<string>;
    queuedTimeout?: pulumi.Input<number>;
    resourceAccessRole?: pulumi.Input<string>;
    secondaryArtifacts?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectSecondaryArtifact>[]>;
    secondarySourceVersions?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectSecondarySourceVersion>[]>;
    secondarySources?: pulumi.Input<pulumi.Input<inputs.CodebuildProjectSecondarySource>[]>;
    serviceRole: pulumi.Input<string>;
    source: pulumi.Input<inputs.CodebuildProjectSource>;
    sourceVersion?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcConfig?: pulumi.Input<inputs.CodebuildProjectVpcConfig>;
}
