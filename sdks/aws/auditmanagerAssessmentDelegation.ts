// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AuditmanagerAssessmentDelegation extends pulumi.CustomResource {
    /**
     * Get an existing AuditmanagerAssessmentDelegation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditmanagerAssessmentDelegationState, opts?: pulumi.CustomResourceOptions): AuditmanagerAssessmentDelegation {
        return new AuditmanagerAssessmentDelegation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/auditmanagerAssessmentDelegation:AuditmanagerAssessmentDelegation';

    /**
     * Returns true if the given object is an instance of AuditmanagerAssessmentDelegation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuditmanagerAssessmentDelegation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuditmanagerAssessmentDelegation.__pulumiType;
    }

    public readonly assessmentId!: pulumi.Output<string>;
    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly controlSetId!: pulumi.Output<string>;
    public /*out*/ readonly delegationId!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly roleType!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a AuditmanagerAssessmentDelegation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuditmanagerAssessmentDelegationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditmanagerAssessmentDelegationArgs | AuditmanagerAssessmentDelegationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditmanagerAssessmentDelegationState | undefined;
            resourceInputs["assessmentId"] = state ? state.assessmentId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["controlSetId"] = state ? state.controlSetId : undefined;
            resourceInputs["delegationId"] = state ? state.delegationId : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["roleType"] = state ? state.roleType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as AuditmanagerAssessmentDelegationArgs | undefined;
            if ((!args || args.assessmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assessmentId'");
            }
            if ((!args || args.controlSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlSetId'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.roleType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleType'");
            }
            resourceInputs["assessmentId"] = args ? args.assessmentId : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["controlSetId"] = args ? args.controlSetId : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["roleType"] = args ? args.roleType : undefined;
            resourceInputs["delegationId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuditmanagerAssessmentDelegation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuditmanagerAssessmentDelegation resources.
 */
export interface AuditmanagerAssessmentDelegationState {
    assessmentId?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    controlSetId?: pulumi.Input<string>;
    delegationId?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    roleType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuditmanagerAssessmentDelegation resource.
 */
export interface AuditmanagerAssessmentDelegationArgs {
    assessmentId: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    controlSetId: pulumi.Input<string>;
    roleArn: pulumi.Input<string>;
    roleType: pulumi.Input<string>;
}
