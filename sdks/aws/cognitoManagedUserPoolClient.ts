// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CognitoManagedUserPoolClient extends pulumi.CustomResource {
    /**
     * Get an existing CognitoManagedUserPoolClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CognitoManagedUserPoolClientState, opts?: pulumi.CustomResourceOptions): CognitoManagedUserPoolClient {
        return new CognitoManagedUserPoolClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/cognitoManagedUserPoolClient:CognitoManagedUserPoolClient';

    /**
     * Returns true if the given object is an instance of CognitoManagedUserPoolClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CognitoManagedUserPoolClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CognitoManagedUserPoolClient.__pulumiType;
    }

    public readonly accessTokenValidity!: pulumi.Output<number>;
    public readonly allowedOauthFlows!: pulumi.Output<string[]>;
    public readonly allowedOauthFlowsUserPoolClient!: pulumi.Output<boolean>;
    public readonly allowedOauthScopes!: pulumi.Output<string[]>;
    public readonly analyticsConfigurations!: pulumi.Output<outputs.CognitoManagedUserPoolClientAnalyticsConfiguration[] | undefined>;
    public readonly authSessionValidity!: pulumi.Output<number>;
    public readonly callbackUrls!: pulumi.Output<string[]>;
    public /*out*/ readonly clientSecret!: pulumi.Output<string>;
    public readonly defaultRedirectUri!: pulumi.Output<string>;
    public readonly enablePropagateAdditionalUserContextData!: pulumi.Output<boolean>;
    public readonly enableTokenRevocation!: pulumi.Output<boolean>;
    public readonly explicitAuthFlows!: pulumi.Output<string[]>;
    public readonly idTokenValidity!: pulumi.Output<number>;
    public readonly logoutUrls!: pulumi.Output<string[]>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly namePattern!: pulumi.Output<string | undefined>;
    public readonly namePrefix!: pulumi.Output<string | undefined>;
    public readonly preventUserExistenceErrors!: pulumi.Output<string>;
    public readonly readAttributes!: pulumi.Output<string[]>;
    public readonly refreshTokenValidity!: pulumi.Output<number>;
    public readonly supportedIdentityProviders!: pulumi.Output<string[]>;
    public readonly tokenValidityUnits!: pulumi.Output<outputs.CognitoManagedUserPoolClientTokenValidityUnit[] | undefined>;
    public readonly userPoolId!: pulumi.Output<string>;
    public readonly writeAttributes!: pulumi.Output<string[]>;

    /**
     * Create a CognitoManagedUserPoolClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CognitoManagedUserPoolClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CognitoManagedUserPoolClientArgs | CognitoManagedUserPoolClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CognitoManagedUserPoolClientState | undefined;
            resourceInputs["accessTokenValidity"] = state ? state.accessTokenValidity : undefined;
            resourceInputs["allowedOauthFlows"] = state ? state.allowedOauthFlows : undefined;
            resourceInputs["allowedOauthFlowsUserPoolClient"] = state ? state.allowedOauthFlowsUserPoolClient : undefined;
            resourceInputs["allowedOauthScopes"] = state ? state.allowedOauthScopes : undefined;
            resourceInputs["analyticsConfigurations"] = state ? state.analyticsConfigurations : undefined;
            resourceInputs["authSessionValidity"] = state ? state.authSessionValidity : undefined;
            resourceInputs["callbackUrls"] = state ? state.callbackUrls : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["defaultRedirectUri"] = state ? state.defaultRedirectUri : undefined;
            resourceInputs["enablePropagateAdditionalUserContextData"] = state ? state.enablePropagateAdditionalUserContextData : undefined;
            resourceInputs["enableTokenRevocation"] = state ? state.enableTokenRevocation : undefined;
            resourceInputs["explicitAuthFlows"] = state ? state.explicitAuthFlows : undefined;
            resourceInputs["idTokenValidity"] = state ? state.idTokenValidity : undefined;
            resourceInputs["logoutUrls"] = state ? state.logoutUrls : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePattern"] = state ? state.namePattern : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["preventUserExistenceErrors"] = state ? state.preventUserExistenceErrors : undefined;
            resourceInputs["readAttributes"] = state ? state.readAttributes : undefined;
            resourceInputs["refreshTokenValidity"] = state ? state.refreshTokenValidity : undefined;
            resourceInputs["supportedIdentityProviders"] = state ? state.supportedIdentityProviders : undefined;
            resourceInputs["tokenValidityUnits"] = state ? state.tokenValidityUnits : undefined;
            resourceInputs["userPoolId"] = state ? state.userPoolId : undefined;
            resourceInputs["writeAttributes"] = state ? state.writeAttributes : undefined;
        } else {
            const args = argsOrState as CognitoManagedUserPoolClientArgs | undefined;
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            resourceInputs["accessTokenValidity"] = args ? args.accessTokenValidity : undefined;
            resourceInputs["allowedOauthFlows"] = args ? args.allowedOauthFlows : undefined;
            resourceInputs["allowedOauthFlowsUserPoolClient"] = args ? args.allowedOauthFlowsUserPoolClient : undefined;
            resourceInputs["allowedOauthScopes"] = args ? args.allowedOauthScopes : undefined;
            resourceInputs["analyticsConfigurations"] = args ? args.analyticsConfigurations : undefined;
            resourceInputs["authSessionValidity"] = args ? args.authSessionValidity : undefined;
            resourceInputs["callbackUrls"] = args ? args.callbackUrls : undefined;
            resourceInputs["defaultRedirectUri"] = args ? args.defaultRedirectUri : undefined;
            resourceInputs["enablePropagateAdditionalUserContextData"] = args ? args.enablePropagateAdditionalUserContextData : undefined;
            resourceInputs["enableTokenRevocation"] = args ? args.enableTokenRevocation : undefined;
            resourceInputs["explicitAuthFlows"] = args ? args.explicitAuthFlows : undefined;
            resourceInputs["idTokenValidity"] = args ? args.idTokenValidity : undefined;
            resourceInputs["logoutUrls"] = args ? args.logoutUrls : undefined;
            resourceInputs["namePattern"] = args ? args.namePattern : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["preventUserExistenceErrors"] = args ? args.preventUserExistenceErrors : undefined;
            resourceInputs["readAttributes"] = args ? args.readAttributes : undefined;
            resourceInputs["refreshTokenValidity"] = args ? args.refreshTokenValidity : undefined;
            resourceInputs["supportedIdentityProviders"] = args ? args.supportedIdentityProviders : undefined;
            resourceInputs["tokenValidityUnits"] = args ? args.tokenValidityUnits : undefined;
            resourceInputs["userPoolId"] = args ? args.userPoolId : undefined;
            resourceInputs["writeAttributes"] = args ? args.writeAttributes : undefined;
            resourceInputs["clientSecret"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["clientSecret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CognitoManagedUserPoolClient.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CognitoManagedUserPoolClient resources.
 */
export interface CognitoManagedUserPoolClientState {
    accessTokenValidity?: pulumi.Input<number>;
    allowedOauthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    allowedOauthFlowsUserPoolClient?: pulumi.Input<boolean>;
    allowedOauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    analyticsConfigurations?: pulumi.Input<pulumi.Input<inputs.CognitoManagedUserPoolClientAnalyticsConfiguration>[]>;
    authSessionValidity?: pulumi.Input<number>;
    callbackUrls?: pulumi.Input<pulumi.Input<string>[]>;
    clientSecret?: pulumi.Input<string>;
    defaultRedirectUri?: pulumi.Input<string>;
    enablePropagateAdditionalUserContextData?: pulumi.Input<boolean>;
    enableTokenRevocation?: pulumi.Input<boolean>;
    explicitAuthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    idTokenValidity?: pulumi.Input<number>;
    logoutUrls?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    namePattern?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    preventUserExistenceErrors?: pulumi.Input<string>;
    readAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    refreshTokenValidity?: pulumi.Input<number>;
    supportedIdentityProviders?: pulumi.Input<pulumi.Input<string>[]>;
    tokenValidityUnits?: pulumi.Input<pulumi.Input<inputs.CognitoManagedUserPoolClientTokenValidityUnit>[]>;
    userPoolId?: pulumi.Input<string>;
    writeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a CognitoManagedUserPoolClient resource.
 */
export interface CognitoManagedUserPoolClientArgs {
    accessTokenValidity?: pulumi.Input<number>;
    allowedOauthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    allowedOauthFlowsUserPoolClient?: pulumi.Input<boolean>;
    allowedOauthScopes?: pulumi.Input<pulumi.Input<string>[]>;
    analyticsConfigurations?: pulumi.Input<pulumi.Input<inputs.CognitoManagedUserPoolClientAnalyticsConfiguration>[]>;
    authSessionValidity?: pulumi.Input<number>;
    callbackUrls?: pulumi.Input<pulumi.Input<string>[]>;
    defaultRedirectUri?: pulumi.Input<string>;
    enablePropagateAdditionalUserContextData?: pulumi.Input<boolean>;
    enableTokenRevocation?: pulumi.Input<boolean>;
    explicitAuthFlows?: pulumi.Input<pulumi.Input<string>[]>;
    idTokenValidity?: pulumi.Input<number>;
    logoutUrls?: pulumi.Input<pulumi.Input<string>[]>;
    namePattern?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    preventUserExistenceErrors?: pulumi.Input<string>;
    readAttributes?: pulumi.Input<pulumi.Input<string>[]>;
    refreshTokenValidity?: pulumi.Input<number>;
    supportedIdentityProviders?: pulumi.Input<pulumi.Input<string>[]>;
    tokenValidityUnits?: pulumi.Input<pulumi.Input<inputs.CognitoManagedUserPoolClientTokenValidityUnit>[]>;
    userPoolId: pulumi.Input<string>;
    writeAttributes?: pulumi.Input<pulumi.Input<string>[]>;
}
