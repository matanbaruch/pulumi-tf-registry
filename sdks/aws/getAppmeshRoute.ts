// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAppmeshRoute(args: GetAppmeshRouteArgs, opts?: pulumi.InvokeOptions): Promise<GetAppmeshRouteResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getAppmeshRoute:getAppmeshRoute", {
        "id": args.id,
        "meshName": args.meshName,
        "meshOwner": args.meshOwner,
        "name": args.name,
        "tags": args.tags,
        "virtualRouterName": args.virtualRouterName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAppmeshRoute.
 */
export interface GetAppmeshRouteArgs {
    id?: string;
    meshName: string;
    meshOwner?: string;
    name: string;
    tags?: {[key: string]: string};
    virtualRouterName: string;
}

/**
 * A collection of values returned by getAppmeshRoute.
 */
export interface GetAppmeshRouteResult {
    readonly arn: string;
    readonly createdDate: string;
    readonly id: string;
    readonly lastUpdatedDate: string;
    readonly meshName: string;
    readonly meshOwner: string;
    readonly name: string;
    readonly resourceOwner: string;
    readonly specs: outputs.GetAppmeshRouteSpec[];
    readonly tags: {[key: string]: string};
    readonly virtualRouterName: string;
}
export function getAppmeshRouteOutput(args: GetAppmeshRouteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAppmeshRouteResult> {
    return pulumi.output(args).apply((a: any) => getAppmeshRoute(a, opts))
}

/**
 * A collection of arguments for invoking getAppmeshRoute.
 */
export interface GetAppmeshRouteOutputArgs {
    id?: pulumi.Input<string>;
    meshName: pulumi.Input<string>;
    meshOwner?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    virtualRouterName: pulumi.Input<string>;
}
