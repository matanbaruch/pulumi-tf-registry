// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EcsService extends pulumi.CustomResource {
    /**
     * Get an existing EcsService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EcsServiceState, opts?: pulumi.CustomResourceOptions): EcsService {
        return new EcsService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ecsService:EcsService';

    /**
     * Returns true if the given object is an instance of EcsService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EcsService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EcsService.__pulumiType;
    }

    public readonly alarms!: pulumi.Output<outputs.EcsServiceAlarms | undefined>;
    public readonly capacityProviderStrategies!: pulumi.Output<outputs.EcsServiceCapacityProviderStrategy[] | undefined>;
    public readonly cluster!: pulumi.Output<string>;
    public readonly deploymentCircuitBreaker!: pulumi.Output<outputs.EcsServiceDeploymentCircuitBreaker | undefined>;
    public readonly deploymentController!: pulumi.Output<outputs.EcsServiceDeploymentController | undefined>;
    public readonly deploymentMaximumPercent!: pulumi.Output<number | undefined>;
    public readonly deploymentMinimumHealthyPercent!: pulumi.Output<number | undefined>;
    public readonly desiredCount!: pulumi.Output<number | undefined>;
    public readonly enableEcsManagedTags!: pulumi.Output<boolean | undefined>;
    public readonly enableExecuteCommand!: pulumi.Output<boolean | undefined>;
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    public readonly forceNewDeployment!: pulumi.Output<boolean | undefined>;
    public readonly healthCheckGracePeriodSeconds!: pulumi.Output<number | undefined>;
    public readonly iamRole!: pulumi.Output<string>;
    public readonly launchType!: pulumi.Output<string>;
    public readonly loadBalancers!: pulumi.Output<outputs.EcsServiceLoadBalancer[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkConfiguration!: pulumi.Output<outputs.EcsServiceNetworkConfiguration | undefined>;
    public readonly orderedPlacementStrategies!: pulumi.Output<outputs.EcsServiceOrderedPlacementStrategy[] | undefined>;
    public readonly placementConstraints!: pulumi.Output<outputs.EcsServicePlacementConstraint[] | undefined>;
    public readonly platformVersion!: pulumi.Output<string>;
    public readonly propagateTags!: pulumi.Output<string | undefined>;
    public readonly schedulingStrategy!: pulumi.Output<string | undefined>;
    public readonly serviceConnectConfiguration!: pulumi.Output<outputs.EcsServiceServiceConnectConfiguration | undefined>;
    public readonly serviceRegistries!: pulumi.Output<outputs.EcsServiceServiceRegistries | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly taskDefinition!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EcsServiceTimeouts | undefined>;
    public readonly triggers!: pulumi.Output<{[key: string]: string}>;
    public readonly volumeConfiguration!: pulumi.Output<outputs.EcsServiceVolumeConfiguration | undefined>;
    public readonly waitForSteadyState!: pulumi.Output<boolean | undefined>;

    /**
     * Create a EcsService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EcsServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EcsServiceArgs | EcsServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EcsServiceState | undefined;
            resourceInputs["alarms"] = state ? state.alarms : undefined;
            resourceInputs["capacityProviderStrategies"] = state ? state.capacityProviderStrategies : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["deploymentCircuitBreaker"] = state ? state.deploymentCircuitBreaker : undefined;
            resourceInputs["deploymentController"] = state ? state.deploymentController : undefined;
            resourceInputs["deploymentMaximumPercent"] = state ? state.deploymentMaximumPercent : undefined;
            resourceInputs["deploymentMinimumHealthyPercent"] = state ? state.deploymentMinimumHealthyPercent : undefined;
            resourceInputs["desiredCount"] = state ? state.desiredCount : undefined;
            resourceInputs["enableEcsManagedTags"] = state ? state.enableEcsManagedTags : undefined;
            resourceInputs["enableExecuteCommand"] = state ? state.enableExecuteCommand : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["forceNewDeployment"] = state ? state.forceNewDeployment : undefined;
            resourceInputs["healthCheckGracePeriodSeconds"] = state ? state.healthCheckGracePeriodSeconds : undefined;
            resourceInputs["iamRole"] = state ? state.iamRole : undefined;
            resourceInputs["launchType"] = state ? state.launchType : undefined;
            resourceInputs["loadBalancers"] = state ? state.loadBalancers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["orderedPlacementStrategies"] = state ? state.orderedPlacementStrategies : undefined;
            resourceInputs["placementConstraints"] = state ? state.placementConstraints : undefined;
            resourceInputs["platformVersion"] = state ? state.platformVersion : undefined;
            resourceInputs["propagateTags"] = state ? state.propagateTags : undefined;
            resourceInputs["schedulingStrategy"] = state ? state.schedulingStrategy : undefined;
            resourceInputs["serviceConnectConfiguration"] = state ? state.serviceConnectConfiguration : undefined;
            resourceInputs["serviceRegistries"] = state ? state.serviceRegistries : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["taskDefinition"] = state ? state.taskDefinition : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["triggers"] = state ? state.triggers : undefined;
            resourceInputs["volumeConfiguration"] = state ? state.volumeConfiguration : undefined;
            resourceInputs["waitForSteadyState"] = state ? state.waitForSteadyState : undefined;
        } else {
            const args = argsOrState as EcsServiceArgs | undefined;
            resourceInputs["alarms"] = args ? args.alarms : undefined;
            resourceInputs["capacityProviderStrategies"] = args ? args.capacityProviderStrategies : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["deploymentCircuitBreaker"] = args ? args.deploymentCircuitBreaker : undefined;
            resourceInputs["deploymentController"] = args ? args.deploymentController : undefined;
            resourceInputs["deploymentMaximumPercent"] = args ? args.deploymentMaximumPercent : undefined;
            resourceInputs["deploymentMinimumHealthyPercent"] = args ? args.deploymentMinimumHealthyPercent : undefined;
            resourceInputs["desiredCount"] = args ? args.desiredCount : undefined;
            resourceInputs["enableEcsManagedTags"] = args ? args.enableEcsManagedTags : undefined;
            resourceInputs["enableExecuteCommand"] = args ? args.enableExecuteCommand : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["forceNewDeployment"] = args ? args.forceNewDeployment : undefined;
            resourceInputs["healthCheckGracePeriodSeconds"] = args ? args.healthCheckGracePeriodSeconds : undefined;
            resourceInputs["iamRole"] = args ? args.iamRole : undefined;
            resourceInputs["launchType"] = args ? args.launchType : undefined;
            resourceInputs["loadBalancers"] = args ? args.loadBalancers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["orderedPlacementStrategies"] = args ? args.orderedPlacementStrategies : undefined;
            resourceInputs["placementConstraints"] = args ? args.placementConstraints : undefined;
            resourceInputs["platformVersion"] = args ? args.platformVersion : undefined;
            resourceInputs["propagateTags"] = args ? args.propagateTags : undefined;
            resourceInputs["schedulingStrategy"] = args ? args.schedulingStrategy : undefined;
            resourceInputs["serviceConnectConfiguration"] = args ? args.serviceConnectConfiguration : undefined;
            resourceInputs["serviceRegistries"] = args ? args.serviceRegistries : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["taskDefinition"] = args ? args.taskDefinition : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["triggers"] = args ? args.triggers : undefined;
            resourceInputs["volumeConfiguration"] = args ? args.volumeConfiguration : undefined;
            resourceInputs["waitForSteadyState"] = args ? args.waitForSteadyState : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EcsService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EcsService resources.
 */
export interface EcsServiceState {
    alarms?: pulumi.Input<inputs.EcsServiceAlarms>;
    capacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.EcsServiceCapacityProviderStrategy>[]>;
    cluster?: pulumi.Input<string>;
    deploymentCircuitBreaker?: pulumi.Input<inputs.EcsServiceDeploymentCircuitBreaker>;
    deploymentController?: pulumi.Input<inputs.EcsServiceDeploymentController>;
    deploymentMaximumPercent?: pulumi.Input<number>;
    deploymentMinimumHealthyPercent?: pulumi.Input<number>;
    desiredCount?: pulumi.Input<number>;
    enableEcsManagedTags?: pulumi.Input<boolean>;
    enableExecuteCommand?: pulumi.Input<boolean>;
    forceDelete?: pulumi.Input<boolean>;
    forceNewDeployment?: pulumi.Input<boolean>;
    healthCheckGracePeriodSeconds?: pulumi.Input<number>;
    iamRole?: pulumi.Input<string>;
    launchType?: pulumi.Input<string>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.EcsServiceLoadBalancer>[]>;
    name?: pulumi.Input<string>;
    networkConfiguration?: pulumi.Input<inputs.EcsServiceNetworkConfiguration>;
    orderedPlacementStrategies?: pulumi.Input<pulumi.Input<inputs.EcsServiceOrderedPlacementStrategy>[]>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.EcsServicePlacementConstraint>[]>;
    platformVersion?: pulumi.Input<string>;
    propagateTags?: pulumi.Input<string>;
    schedulingStrategy?: pulumi.Input<string>;
    serviceConnectConfiguration?: pulumi.Input<inputs.EcsServiceServiceConnectConfiguration>;
    serviceRegistries?: pulumi.Input<inputs.EcsServiceServiceRegistries>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskDefinition?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcsServiceTimeouts>;
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    volumeConfiguration?: pulumi.Input<inputs.EcsServiceVolumeConfiguration>;
    waitForSteadyState?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a EcsService resource.
 */
export interface EcsServiceArgs {
    alarms?: pulumi.Input<inputs.EcsServiceAlarms>;
    capacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.EcsServiceCapacityProviderStrategy>[]>;
    cluster?: pulumi.Input<string>;
    deploymentCircuitBreaker?: pulumi.Input<inputs.EcsServiceDeploymentCircuitBreaker>;
    deploymentController?: pulumi.Input<inputs.EcsServiceDeploymentController>;
    deploymentMaximumPercent?: pulumi.Input<number>;
    deploymentMinimumHealthyPercent?: pulumi.Input<number>;
    desiredCount?: pulumi.Input<number>;
    enableEcsManagedTags?: pulumi.Input<boolean>;
    enableExecuteCommand?: pulumi.Input<boolean>;
    forceDelete?: pulumi.Input<boolean>;
    forceNewDeployment?: pulumi.Input<boolean>;
    healthCheckGracePeriodSeconds?: pulumi.Input<number>;
    iamRole?: pulumi.Input<string>;
    launchType?: pulumi.Input<string>;
    loadBalancers?: pulumi.Input<pulumi.Input<inputs.EcsServiceLoadBalancer>[]>;
    name?: pulumi.Input<string>;
    networkConfiguration?: pulumi.Input<inputs.EcsServiceNetworkConfiguration>;
    orderedPlacementStrategies?: pulumi.Input<pulumi.Input<inputs.EcsServiceOrderedPlacementStrategy>[]>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.EcsServicePlacementConstraint>[]>;
    platformVersion?: pulumi.Input<string>;
    propagateTags?: pulumi.Input<string>;
    schedulingStrategy?: pulumi.Input<string>;
    serviceConnectConfiguration?: pulumi.Input<inputs.EcsServiceServiceConnectConfiguration>;
    serviceRegistries?: pulumi.Input<inputs.EcsServiceServiceRegistries>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskDefinition?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EcsServiceTimeouts>;
    triggers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    volumeConfiguration?: pulumi.Input<inputs.EcsServiceVolumeConfiguration>;
    waitForSteadyState?: pulumi.Input<boolean>;
}
