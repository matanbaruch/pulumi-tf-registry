// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FsxOntapStorageVirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing FsxOntapStorageVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FsxOntapStorageVirtualMachineState, opts?: pulumi.CustomResourceOptions): FsxOntapStorageVirtualMachine {
        return new FsxOntapStorageVirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/fsxOntapStorageVirtualMachine:FsxOntapStorageVirtualMachine';

    /**
     * Returns true if the given object is an instance of FsxOntapStorageVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FsxOntapStorageVirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FsxOntapStorageVirtualMachine.__pulumiType;
    }

    public readonly activeDirectoryConfiguration!: pulumi.Output<outputs.FsxOntapStorageVirtualMachineActiveDirectoryConfiguration | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.FsxOntapStorageVirtualMachineEndpoint[]>;
    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly rootVolumeSecurityStyle!: pulumi.Output<string | undefined>;
    public /*out*/ readonly subtype!: pulumi.Output<string>;
    public readonly svmAdminPassword!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.FsxOntapStorageVirtualMachineTimeouts | undefined>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FsxOntapStorageVirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FsxOntapStorageVirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FsxOntapStorageVirtualMachineArgs | FsxOntapStorageVirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FsxOntapStorageVirtualMachineState | undefined;
            resourceInputs["activeDirectoryConfiguration"] = state ? state.activeDirectoryConfiguration : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rootVolumeSecurityStyle"] = state ? state.rootVolumeSecurityStyle : undefined;
            resourceInputs["subtype"] = state ? state.subtype : undefined;
            resourceInputs["svmAdminPassword"] = state ? state.svmAdminPassword : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FsxOntapStorageVirtualMachineArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            resourceInputs["activeDirectoryConfiguration"] = args ? args.activeDirectoryConfiguration : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rootVolumeSecurityStyle"] = args ? args.rootVolumeSecurityStyle : undefined;
            resourceInputs["svmAdminPassword"] = args?.svmAdminPassword ? pulumi.secret(args.svmAdminPassword) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["subtype"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["svmAdminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FsxOntapStorageVirtualMachine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FsxOntapStorageVirtualMachine resources.
 */
export interface FsxOntapStorageVirtualMachineState {
    activeDirectoryConfiguration?: pulumi.Input<inputs.FsxOntapStorageVirtualMachineActiveDirectoryConfiguration>;
    arn?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.FsxOntapStorageVirtualMachineEndpoint>[]>;
    fileSystemId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rootVolumeSecurityStyle?: pulumi.Input<string>;
    subtype?: pulumi.Input<string>;
    svmAdminPassword?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.FsxOntapStorageVirtualMachineTimeouts>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FsxOntapStorageVirtualMachine resource.
 */
export interface FsxOntapStorageVirtualMachineArgs {
    activeDirectoryConfiguration?: pulumi.Input<inputs.FsxOntapStorageVirtualMachineActiveDirectoryConfiguration>;
    fileSystemId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    rootVolumeSecurityStyle?: pulumi.Input<string>;
    svmAdminPassword?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.FsxOntapStorageVirtualMachineTimeouts>;
}
