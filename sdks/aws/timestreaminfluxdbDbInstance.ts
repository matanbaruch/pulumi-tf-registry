// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TimestreaminfluxdbDbInstance extends pulumi.CustomResource {
    /**
     * Get an existing TimestreaminfluxdbDbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimestreaminfluxdbDbInstanceState, opts?: pulumi.CustomResourceOptions): TimestreaminfluxdbDbInstance {
        return new TimestreaminfluxdbDbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/timestreaminfluxdbDbInstance:TimestreaminfluxdbDbInstance';

    /**
     * Returns true if the given object is an instance of TimestreaminfluxdbDbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TimestreaminfluxdbDbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimestreaminfluxdbDbInstance.__pulumiType;
    }

    /**
     * The amount of storage to allocate for your DB storage type in GiB (gibibytes).
     */
    public readonly allocatedStorage!: pulumi.Output<number>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The Availability Zone in which the DB instance resides.
     */
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    /**
     * The name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a
     * database and a retention period (the duration of time that each data point persists). A bucket belongs to an
     * organization.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * The Timestream for InfluxDB DB instance type to run InfluxDB on.
     */
    public readonly dbInstanceType!: pulumi.Output<string>;
    /**
     * The id of the DB parameter group assigned to your DB instance.
     */
    public readonly dbParameterGroupIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of
     * provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx
     * IO Included 12000 IOPS, Influx IO Included 16000 IOPS.
     */
    public readonly dbStorageType!: pulumi.Output<string>;
    /**
     * Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high
     * availability.
     */
    public readonly deploymentType!: pulumi.Output<string>;
    /**
     * The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization
     * parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization,
     * bucket, username, and password.
     */
    public /*out*/ readonly influxAuthParametersSecretArn!: pulumi.Output<string>;
    /**
     * Configuration for sending InfluxDB engine logs to a specified S3 bucket.
     */
    public readonly logDeliveryConfigurations!: pulumi.Output<outputs.TimestreaminfluxdbDbInstanceLogDeliveryConfiguration[] | undefined>;
    /**
     * The name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI
     * commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and
     * per region.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for
     * a group of users.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to
     * perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be
     * stored in a Secret created in AWS SecretManager in your account.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Configures the DB instance with a public IP to facilitate access.
     */
    public readonly publiclyAccessible!: pulumi.Output<boolean>;
    /**
     * The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
     */
    public /*out*/ readonly secondaryAvailabilityZone!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.TimestreaminfluxdbDbInstanceTimeouts | undefined>;
    /**
     * The username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or
     * contain two consecutive hyphens. For example, my-user1. This username will allow you to access the InfluxDB UI to
     * perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be
     * stored in a Secret created in Amazon Secrets Manager in your account
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * A list of VPC security group IDs to associate with the DB instance.
     */
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;
    /**
     * A list of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different
     * availability zones when deploying with a Multi-AZ standby.
     */
    public readonly vpcSubnetIds!: pulumi.Output<string[]>;

    /**
     * Create a TimestreaminfluxdbDbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TimestreaminfluxdbDbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimestreaminfluxdbDbInstanceArgs | TimestreaminfluxdbDbInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TimestreaminfluxdbDbInstanceState | undefined;
            resourceInputs["allocatedStorage"] = state ? state.allocatedStorage : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["dbInstanceType"] = state ? state.dbInstanceType : undefined;
            resourceInputs["dbParameterGroupIdentifier"] = state ? state.dbParameterGroupIdentifier : undefined;
            resourceInputs["dbStorageType"] = state ? state.dbStorageType : undefined;
            resourceInputs["deploymentType"] = state ? state.deploymentType : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["influxAuthParametersSecretArn"] = state ? state.influxAuthParametersSecretArn : undefined;
            resourceInputs["logDeliveryConfigurations"] = state ? state.logDeliveryConfigurations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["secondaryAvailabilityZone"] = state ? state.secondaryAvailabilityZone : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
            resourceInputs["vpcSubnetIds"] = state ? state.vpcSubnetIds : undefined;
        } else {
            const args = argsOrState as TimestreaminfluxdbDbInstanceArgs | undefined;
            if ((!args || args.allocatedStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allocatedStorage'");
            }
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.dbInstanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbInstanceType'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            if ((!args || args.vpcSecurityGroupIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSecurityGroupIds'");
            }
            if ((!args || args.vpcSubnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSubnetIds'");
            }
            resourceInputs["allocatedStorage"] = args ? args.allocatedStorage : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["dbInstanceType"] = args ? args.dbInstanceType : undefined;
            resourceInputs["dbParameterGroupIdentifier"] = args ? args.dbParameterGroupIdentifier : undefined;
            resourceInputs["dbStorageType"] = args ? args.dbStorageType : undefined;
            resourceInputs["deploymentType"] = args ? args.deploymentType : undefined;
            resourceInputs["logDeliveryConfigurations"] = args ? args.logDeliveryConfigurations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["vpcSubnetIds"] = args ? args.vpcSubnetIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["influxAuthParametersSecretArn"] = undefined /*out*/;
            resourceInputs["secondaryAvailabilityZone"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TimestreaminfluxdbDbInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TimestreaminfluxdbDbInstance resources.
 */
export interface TimestreaminfluxdbDbInstanceState {
    /**
     * The amount of storage to allocate for your DB storage type in GiB (gibibytes).
     */
    allocatedStorage?: pulumi.Input<number>;
    arn?: pulumi.Input<string>;
    /**
     * The Availability Zone in which the DB instance resides.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a
     * database and a retention period (the duration of time that each data point persists). A bucket belongs to an
     * organization.
     */
    bucket?: pulumi.Input<string>;
    /**
     * The Timestream for InfluxDB DB instance type to run InfluxDB on.
     */
    dbInstanceType?: pulumi.Input<string>;
    /**
     * The id of the DB parameter group assigned to your DB instance.
     */
    dbParameterGroupIdentifier?: pulumi.Input<string>;
    /**
     * The Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of
     * provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx
     * IO Included 12000 IOPS, Influx IO Included 16000 IOPS.
     */
    dbStorageType?: pulumi.Input<string>;
    /**
     * Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high
     * availability.
     */
    deploymentType?: pulumi.Input<string>;
    /**
     * The endpoint used to connect to InfluxDB. The default InfluxDB port is 8086.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the AWS Secrets Manager secret containing the initial InfluxDB authorization
     * parameters. The secret value is a JSON formatted key-value pair holding InfluxDB authorization values: organization,
     * bucket, username, and password.
     */
    influxAuthParametersSecretArn?: pulumi.Input<string>;
    /**
     * Configuration for sending InfluxDB engine logs to a specified S3 bucket.
     */
    logDeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.TimestreaminfluxdbDbInstanceLogDeliveryConfiguration>[]>;
    /**
     * The name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI
     * commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and
     * per region.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for
     * a group of users.
     */
    organization?: pulumi.Input<string>;
    /**
     * The password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to
     * perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be
     * stored in a Secret created in AWS SecretManager in your account.
     */
    password?: pulumi.Input<string>;
    /**
     * Configures the DB instance with a public IP to facilitate access.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    /**
     * The Availability Zone in which the standby instance is located when deploying with a MultiAZ standby instance.
     */
    secondaryAvailabilityZone?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.TimestreaminfluxdbDbInstanceTimeouts>;
    /**
     * The username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or
     * contain two consecutive hyphens. For example, my-user1. This username will allow you to access the InfluxDB UI to
     * perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be
     * stored in a Secret created in Amazon Secrets Manager in your account
     */
    username?: pulumi.Input<string>;
    /**
     * A list of VPC security group IDs to associate with the DB instance.
     */
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different
     * availability zones when deploying with a Multi-AZ standby.
     */
    vpcSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a TimestreaminfluxdbDbInstance resource.
 */
export interface TimestreaminfluxdbDbInstanceArgs {
    /**
     * The amount of storage to allocate for your DB storage type in GiB (gibibytes).
     */
    allocatedStorage: pulumi.Input<number>;
    /**
     * The name of the initial InfluxDB bucket. All InfluxDB data is stored in a bucket. A bucket combines the concept of a
     * database and a retention period (the duration of time that each data point persists). A bucket belongs to an
     * organization.
     */
    bucket: pulumi.Input<string>;
    /**
     * The Timestream for InfluxDB DB instance type to run InfluxDB on.
     */
    dbInstanceType: pulumi.Input<string>;
    /**
     * The id of the DB parameter group assigned to your DB instance.
     */
    dbParameterGroupIdentifier?: pulumi.Input<string>;
    /**
     * The Timestream for InfluxDB DB storage type to read and write InfluxDB data. You can choose between 3 different types of
     * provisioned Influx IOPS included storage according to your workloads requirements: Influx IO Included 3000 IOPS, Influx
     * IO Included 12000 IOPS, Influx IO Included 16000 IOPS.
     */
    dbStorageType?: pulumi.Input<string>;
    /**
     * Specifies whether the DB instance will be deployed as a standalone instance or with a Multi-AZ standby for high
     * availability.
     */
    deploymentType?: pulumi.Input<string>;
    /**
     * Configuration for sending InfluxDB engine logs to a specified S3 bucket.
     */
    logDeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.TimestreaminfluxdbDbInstanceLogDeliveryConfiguration>[]>;
    /**
     * The name that uniquely identifies the DB instance when interacting with the Amazon Timestream for InfluxDB API and CLI
     * commands. This name will also be a prefix included in the endpoint. DB instance names must be unique per customer and
     * per region.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the initial organization for the initial admin user in InfluxDB. An InfluxDB organization is a workspace for
     * a group of users.
     */
    organization: pulumi.Input<string>;
    /**
     * The password of the initial admin user created in InfluxDB. This password will allow you to access the InfluxDB UI to
     * perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be
     * stored in a Secret created in AWS SecretManager in your account.
     */
    password: pulumi.Input<string>;
    /**
     * Configures the DB instance with a public IP to facilitate access.
     */
    publiclyAccessible?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.TimestreaminfluxdbDbInstanceTimeouts>;
    /**
     * The username of the initial admin user created in InfluxDB. Must start with a letter and can't end with a hyphen or
     * contain two consecutive hyphens. For example, my-user1. This username will allow you to access the InfluxDB UI to
     * perform various administrative tasks and also use the InfluxDB CLI to create an operator token. These attributes will be
     * stored in a Secret created in Amazon Secrets Manager in your account
     */
    username: pulumi.Input<string>;
    /**
     * A list of VPC security group IDs to associate with the DB instance.
     */
    vpcSecurityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of VPC subnet IDs to associate with the DB instance. Provide at least two VPC subnet IDs in different
     * availability zones when deploying with a Multi-AZ standby.
     */
    vpcSubnetIds: pulumi.Input<pulumi.Input<string>[]>;
}
