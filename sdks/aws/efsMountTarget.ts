// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EfsMountTarget extends pulumi.CustomResource {
    /**
     * Get an existing EfsMountTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EfsMountTargetState, opts?: pulumi.CustomResourceOptions): EfsMountTarget {
        return new EfsMountTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/efsMountTarget:EfsMountTarget';

    /**
     * Returns true if the given object is an instance of EfsMountTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EfsMountTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EfsMountTarget.__pulumiType;
    }

    public /*out*/ readonly availabilityZoneId!: pulumi.Output<string>;
    public /*out*/ readonly availabilityZoneName!: pulumi.Output<string>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public /*out*/ readonly fileSystemArn!: pulumi.Output<string>;
    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly ipAddress!: pulumi.Output<string>;
    public /*out*/ readonly mountTargetDnsName!: pulumi.Output<string>;
    public /*out*/ readonly networkInterfaceId!: pulumi.Output<string>;
    public /*out*/ readonly ownerId!: pulumi.Output<string>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EfsMountTargetTimeouts | undefined>;

    /**
     * Create a EfsMountTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EfsMountTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EfsMountTargetArgs | EfsMountTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EfsMountTargetState | undefined;
            resourceInputs["availabilityZoneId"] = state ? state.availabilityZoneId : undefined;
            resourceInputs["availabilityZoneName"] = state ? state.availabilityZoneName : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["fileSystemArn"] = state ? state.fileSystemArn : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["mountTargetDnsName"] = state ? state.mountTargetDnsName : undefined;
            resourceInputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            resourceInputs["ownerId"] = state ? state.ownerId : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EfsMountTargetArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["availabilityZoneId"] = undefined /*out*/;
            resourceInputs["availabilityZoneName"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["fileSystemArn"] = undefined /*out*/;
            resourceInputs["mountTargetDnsName"] = undefined /*out*/;
            resourceInputs["networkInterfaceId"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EfsMountTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EfsMountTarget resources.
 */
export interface EfsMountTargetState {
    availabilityZoneId?: pulumi.Input<string>;
    availabilityZoneName?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    fileSystemArn?: pulumi.Input<string>;
    fileSystemId?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    mountTargetDnsName?: pulumi.Input<string>;
    networkInterfaceId?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EfsMountTargetTimeouts>;
}

/**
 * The set of arguments for constructing a EfsMountTarget resource.
 */
export interface EfsMountTargetArgs {
    fileSystemId: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EfsMountTargetTimeouts>;
}
