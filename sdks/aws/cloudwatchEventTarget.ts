// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudwatchEventTarget extends pulumi.CustomResource {
    /**
     * Get an existing CloudwatchEventTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudwatchEventTargetState, opts?: pulumi.CustomResourceOptions): CloudwatchEventTarget {
        return new CloudwatchEventTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/cloudwatchEventTarget:CloudwatchEventTarget';

    /**
     * Returns true if the given object is an instance of CloudwatchEventTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudwatchEventTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudwatchEventTarget.__pulumiType;
    }

    public readonly arn!: pulumi.Output<string>;
    public readonly batchTarget!: pulumi.Output<outputs.CloudwatchEventTargetBatchTarget | undefined>;
    public readonly deadLetterConfig!: pulumi.Output<outputs.CloudwatchEventTargetDeadLetterConfig | undefined>;
    public readonly ecsTarget!: pulumi.Output<outputs.CloudwatchEventTargetEcsTarget | undefined>;
    public readonly eventBusName!: pulumi.Output<string | undefined>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly httpTarget!: pulumi.Output<outputs.CloudwatchEventTargetHttpTarget | undefined>;
    public readonly input!: pulumi.Output<string | undefined>;
    public readonly inputPath!: pulumi.Output<string | undefined>;
    public readonly inputTransformer!: pulumi.Output<outputs.CloudwatchEventTargetInputTransformer | undefined>;
    public readonly kinesisTarget!: pulumi.Output<outputs.CloudwatchEventTargetKinesisTarget | undefined>;
    public readonly redshiftTarget!: pulumi.Output<outputs.CloudwatchEventTargetRedshiftTarget | undefined>;
    public readonly retryPolicy!: pulumi.Output<outputs.CloudwatchEventTargetRetryPolicy | undefined>;
    public readonly roleArn!: pulumi.Output<string | undefined>;
    public readonly rule!: pulumi.Output<string>;
    public readonly runCommandTargets!: pulumi.Output<outputs.CloudwatchEventTargetRunCommandTarget[] | undefined>;
    public readonly sagemakerPipelineTarget!: pulumi.Output<outputs.CloudwatchEventTargetSagemakerPipelineTarget | undefined>;
    public readonly sqsTarget!: pulumi.Output<outputs.CloudwatchEventTargetSqsTarget | undefined>;
    public readonly targetId!: pulumi.Output<string>;

    /**
     * Create a CloudwatchEventTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudwatchEventTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudwatchEventTargetArgs | CloudwatchEventTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudwatchEventTargetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["batchTarget"] = state ? state.batchTarget : undefined;
            resourceInputs["deadLetterConfig"] = state ? state.deadLetterConfig : undefined;
            resourceInputs["ecsTarget"] = state ? state.ecsTarget : undefined;
            resourceInputs["eventBusName"] = state ? state.eventBusName : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["httpTarget"] = state ? state.httpTarget : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["inputPath"] = state ? state.inputPath : undefined;
            resourceInputs["inputTransformer"] = state ? state.inputTransformer : undefined;
            resourceInputs["kinesisTarget"] = state ? state.kinesisTarget : undefined;
            resourceInputs["redshiftTarget"] = state ? state.redshiftTarget : undefined;
            resourceInputs["retryPolicy"] = state ? state.retryPolicy : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["runCommandTargets"] = state ? state.runCommandTargets : undefined;
            resourceInputs["sagemakerPipelineTarget"] = state ? state.sagemakerPipelineTarget : undefined;
            resourceInputs["sqsTarget"] = state ? state.sqsTarget : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
        } else {
            const args = argsOrState as CloudwatchEventTargetArgs | undefined;
            if ((!args || args.arn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arn'");
            }
            if ((!args || args.rule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["batchTarget"] = args ? args.batchTarget : undefined;
            resourceInputs["deadLetterConfig"] = args ? args.deadLetterConfig : undefined;
            resourceInputs["ecsTarget"] = args ? args.ecsTarget : undefined;
            resourceInputs["eventBusName"] = args ? args.eventBusName : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["httpTarget"] = args ? args.httpTarget : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["inputPath"] = args ? args.inputPath : undefined;
            resourceInputs["inputTransformer"] = args ? args.inputTransformer : undefined;
            resourceInputs["kinesisTarget"] = args ? args.kinesisTarget : undefined;
            resourceInputs["redshiftTarget"] = args ? args.redshiftTarget : undefined;
            resourceInputs["retryPolicy"] = args ? args.retryPolicy : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["runCommandTargets"] = args ? args.runCommandTargets : undefined;
            resourceInputs["sagemakerPipelineTarget"] = args ? args.sagemakerPipelineTarget : undefined;
            resourceInputs["sqsTarget"] = args ? args.sqsTarget : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudwatchEventTarget.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudwatchEventTarget resources.
 */
export interface CloudwatchEventTargetState {
    arn?: pulumi.Input<string>;
    batchTarget?: pulumi.Input<inputs.CloudwatchEventTargetBatchTarget>;
    deadLetterConfig?: pulumi.Input<inputs.CloudwatchEventTargetDeadLetterConfig>;
    ecsTarget?: pulumi.Input<inputs.CloudwatchEventTargetEcsTarget>;
    eventBusName?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    httpTarget?: pulumi.Input<inputs.CloudwatchEventTargetHttpTarget>;
    input?: pulumi.Input<string>;
    inputPath?: pulumi.Input<string>;
    inputTransformer?: pulumi.Input<inputs.CloudwatchEventTargetInputTransformer>;
    kinesisTarget?: pulumi.Input<inputs.CloudwatchEventTargetKinesisTarget>;
    redshiftTarget?: pulumi.Input<inputs.CloudwatchEventTargetRedshiftTarget>;
    retryPolicy?: pulumi.Input<inputs.CloudwatchEventTargetRetryPolicy>;
    roleArn?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    runCommandTargets?: pulumi.Input<pulumi.Input<inputs.CloudwatchEventTargetRunCommandTarget>[]>;
    sagemakerPipelineTarget?: pulumi.Input<inputs.CloudwatchEventTargetSagemakerPipelineTarget>;
    sqsTarget?: pulumi.Input<inputs.CloudwatchEventTargetSqsTarget>;
    targetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudwatchEventTarget resource.
 */
export interface CloudwatchEventTargetArgs {
    arn: pulumi.Input<string>;
    batchTarget?: pulumi.Input<inputs.CloudwatchEventTargetBatchTarget>;
    deadLetterConfig?: pulumi.Input<inputs.CloudwatchEventTargetDeadLetterConfig>;
    ecsTarget?: pulumi.Input<inputs.CloudwatchEventTargetEcsTarget>;
    eventBusName?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    httpTarget?: pulumi.Input<inputs.CloudwatchEventTargetHttpTarget>;
    input?: pulumi.Input<string>;
    inputPath?: pulumi.Input<string>;
    inputTransformer?: pulumi.Input<inputs.CloudwatchEventTargetInputTransformer>;
    kinesisTarget?: pulumi.Input<inputs.CloudwatchEventTargetKinesisTarget>;
    redshiftTarget?: pulumi.Input<inputs.CloudwatchEventTargetRedshiftTarget>;
    retryPolicy?: pulumi.Input<inputs.CloudwatchEventTargetRetryPolicy>;
    roleArn?: pulumi.Input<string>;
    rule: pulumi.Input<string>;
    runCommandTargets?: pulumi.Input<pulumi.Input<inputs.CloudwatchEventTargetRunCommandTarget>[]>;
    sagemakerPipelineTarget?: pulumi.Input<inputs.CloudwatchEventTargetSagemakerPipelineTarget>;
    sqsTarget?: pulumi.Input<inputs.CloudwatchEventTargetSqsTarget>;
    targetId?: pulumi.Input<string>;
}
