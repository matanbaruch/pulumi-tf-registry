// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCognitoUserPool(args: GetCognitoUserPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetCognitoUserPoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getCognitoUserPool:getCognitoUserPool", {
        "userPoolId": args.userPoolId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCognitoUserPool.
 */
export interface GetCognitoUserPoolArgs {
    userPoolId: string;
}

/**
 * A collection of values returned by getCognitoUserPool.
 */
export interface GetCognitoUserPoolResult {
    readonly accountRecoverySettings: outputs.GetCognitoUserPoolAccountRecoverySetting[];
    readonly adminCreateUserConfigs: outputs.GetCognitoUserPoolAdminCreateUserConfig[];
    readonly arn: string;
    readonly autoVerifiedAttributes: string[];
    readonly creationDate: string;
    readonly customDomain: string;
    readonly deletionProtection: string;
    readonly deviceConfigurations: outputs.GetCognitoUserPoolDeviceConfiguration[];
    readonly domain: string;
    readonly emailConfigurations: outputs.GetCognitoUserPoolEmailConfiguration[];
    readonly estimatedNumberOfUsers: number;
    readonly id: string;
    readonly lambdaConfigs: outputs.GetCognitoUserPoolLambdaConfig[];
    readonly lastModifiedDate: string;
    readonly mfaConfiguration: string;
    readonly name: string;
    readonly schemaAttributes: outputs.GetCognitoUserPoolSchemaAttribute[];
    readonly smsAuthenticationMessage: string;
    readonly smsConfigurationFailure: string;
    readonly smsVerificationMessage: string;
    readonly userPoolId: string;
    readonly userPoolTags: {[key: string]: string};
    readonly usernameAttributes: string[];
}
export function getCognitoUserPoolOutput(args: GetCognitoUserPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCognitoUserPoolResult> {
    return pulumi.output(args).apply((a: any) => getCognitoUserPool(a, opts))
}

/**
 * A collection of arguments for invoking getCognitoUserPool.
 */
export interface GetCognitoUserPoolOutputArgs {
    userPoolId: pulumi.Input<string>;
}
