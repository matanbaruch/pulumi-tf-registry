// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkfirewallTlsInspectionConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing NetworkfirewallTlsInspectionConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkfirewallTlsInspectionConfigurationState, opts?: pulumi.CustomResourceOptions): NetworkfirewallTlsInspectionConfiguration {
        return new NetworkfirewallTlsInspectionConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/networkfirewallTlsInspectionConfiguration:NetworkfirewallTlsInspectionConfiguration';

    /**
     * Returns true if the given object is an instance of NetworkfirewallTlsInspectionConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkfirewallTlsInspectionConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkfirewallTlsInspectionConfiguration.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly certificateAuthorities!: pulumi.Output<outputs.NetworkfirewallTlsInspectionConfigurationCertificateAuthority[]>;
    public /*out*/ readonly certificates!: pulumi.Output<outputs.NetworkfirewallTlsInspectionConfigurationCertificate[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly encryptionConfigurations!: pulumi.Output<outputs.NetworkfirewallTlsInspectionConfigurationEncryptionConfiguration[]>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly numberOfAssociations!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkfirewallTlsInspectionConfigurationTimeouts | undefined>;
    public /*out*/ readonly tlsInspectionConfigurationId!: pulumi.Output<string>;
    public readonly tlsInspectionConfigurations!: pulumi.Output<outputs.NetworkfirewallTlsInspectionConfigurationTlsInspectionConfiguration[] | undefined>;
    public /*out*/ readonly updateToken!: pulumi.Output<string>;

    /**
     * Create a NetworkfirewallTlsInspectionConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkfirewallTlsInspectionConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkfirewallTlsInspectionConfigurationArgs | NetworkfirewallTlsInspectionConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkfirewallTlsInspectionConfigurationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["certificateAuthorities"] = state ? state.certificateAuthorities : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionConfigurations"] = state ? state.encryptionConfigurations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfAssociations"] = state ? state.numberOfAssociations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsInspectionConfigurationId"] = state ? state.tlsInspectionConfigurationId : undefined;
            resourceInputs["tlsInspectionConfigurations"] = state ? state.tlsInspectionConfigurations : undefined;
            resourceInputs["updateToken"] = state ? state.updateToken : undefined;
        } else {
            const args = argsOrState as NetworkfirewallTlsInspectionConfigurationArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionConfigurations"] = args ? args.encryptionConfigurations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsInspectionConfigurations"] = args ? args.tlsInspectionConfigurations : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificateAuthorities"] = undefined /*out*/;
            resourceInputs["certificates"] = undefined /*out*/;
            resourceInputs["numberOfAssociations"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["tlsInspectionConfigurationId"] = undefined /*out*/;
            resourceInputs["updateToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkfirewallTlsInspectionConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkfirewallTlsInspectionConfiguration resources.
 */
export interface NetworkfirewallTlsInspectionConfigurationState {
    arn?: pulumi.Input<string>;
    certificateAuthorities?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationCertificateAuthority>[]>;
    certificates?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationCertificate>[]>;
    description?: pulumi.Input<string>;
    encryptionConfigurations?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationEncryptionConfiguration>[]>;
    name?: pulumi.Input<string>;
    numberOfAssociations?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTimeouts>;
    tlsInspectionConfigurationId?: pulumi.Input<string>;
    tlsInspectionConfigurations?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTlsInspectionConfiguration>[]>;
    updateToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkfirewallTlsInspectionConfiguration resource.
 */
export interface NetworkfirewallTlsInspectionConfigurationArgs {
    description?: pulumi.Input<string>;
    encryptionConfigurations?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationEncryptionConfiguration>[]>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTimeouts>;
    tlsInspectionConfigurations?: pulumi.Input<pulumi.Input<inputs.NetworkfirewallTlsInspectionConfigurationTlsInspectionConfiguration>[]>;
}
