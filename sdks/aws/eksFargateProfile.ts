// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EksFargateProfile extends pulumi.CustomResource {
    /**
     * Get an existing EksFargateProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EksFargateProfileState, opts?: pulumi.CustomResourceOptions): EksFargateProfile {
        return new EksFargateProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/eksFargateProfile:EksFargateProfile';

    /**
     * Returns true if the given object is an instance of EksFargateProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EksFargateProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EksFargateProfile.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly fargateProfileName!: pulumi.Output<string>;
    public readonly podExecutionRoleArn!: pulumi.Output<string>;
    public readonly selectors!: pulumi.Output<outputs.EksFargateProfileSelector[]>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetIds!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.EksFargateProfileTimeouts | undefined>;

    /**
     * Create a EksFargateProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EksFargateProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EksFargateProfileArgs | EksFargateProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EksFargateProfileState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["fargateProfileName"] = state ? state.fargateProfileName : undefined;
            resourceInputs["podExecutionRoleArn"] = state ? state.podExecutionRoleArn : undefined;
            resourceInputs["selectors"] = state ? state.selectors : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EksFargateProfileArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.fargateProfileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fargateProfileName'");
            }
            if ((!args || args.podExecutionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'podExecutionRoleArn'");
            }
            if ((!args || args.selectors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'selectors'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["fargateProfileName"] = args ? args.fargateProfileName : undefined;
            resourceInputs["podExecutionRoleArn"] = args ? args.podExecutionRoleArn : undefined;
            resourceInputs["selectors"] = args ? args.selectors : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EksFargateProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EksFargateProfile resources.
 */
export interface EksFargateProfileState {
    arn?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    fargateProfileName?: pulumi.Input<string>;
    podExecutionRoleArn?: pulumi.Input<string>;
    selectors?: pulumi.Input<pulumi.Input<inputs.EksFargateProfileSelector>[]>;
    status?: pulumi.Input<string>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EksFargateProfileTimeouts>;
}

/**
 * The set of arguments for constructing a EksFargateProfile resource.
 */
export interface EksFargateProfileArgs {
    clusterName: pulumi.Input<string>;
    fargateProfileName: pulumi.Input<string>;
    podExecutionRoleArn: pulumi.Input<string>;
    selectors: pulumi.Input<pulumi.Input<inputs.EksFargateProfileSelector>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EksFargateProfileTimeouts>;
}
