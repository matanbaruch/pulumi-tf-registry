// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlueCatalogTableOptimizer extends pulumi.CustomResource {
    /**
     * Get an existing GlueCatalogTableOptimizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueCatalogTableOptimizerState, opts?: pulumi.CustomResourceOptions): GlueCatalogTableOptimizer {
        return new GlueCatalogTableOptimizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/glueCatalogTableOptimizer:GlueCatalogTableOptimizer';

    /**
     * Returns true if the given object is an instance of GlueCatalogTableOptimizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueCatalogTableOptimizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueCatalogTableOptimizer.__pulumiType;
    }

    public readonly catalogId!: pulumi.Output<string>;
    public readonly configurations!: pulumi.Output<outputs.GlueCatalogTableOptimizerConfiguration[] | undefined>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly tableName!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a GlueCatalogTableOptimizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueCatalogTableOptimizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueCatalogTableOptimizerArgs | GlueCatalogTableOptimizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueCatalogTableOptimizerState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as GlueCatalogTableOptimizerArgs | undefined;
            if ((!args || args.catalogId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'catalogId'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueCatalogTableOptimizer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueCatalogTableOptimizer resources.
 */
export interface GlueCatalogTableOptimizerState {
    catalogId?: pulumi.Input<string>;
    configurations?: pulumi.Input<pulumi.Input<inputs.GlueCatalogTableOptimizerConfiguration>[]>;
    databaseName?: pulumi.Input<string>;
    tableName?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlueCatalogTableOptimizer resource.
 */
export interface GlueCatalogTableOptimizerArgs {
    catalogId: pulumi.Input<string>;
    configurations?: pulumi.Input<pulumi.Input<inputs.GlueCatalogTableOptimizerConfiguration>[]>;
    databaseName: pulumi.Input<string>;
    tableName: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
