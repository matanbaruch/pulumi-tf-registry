// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOpensearchDomain(args: GetOpensearchDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetOpensearchDomainResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getOpensearchDomain:getOpensearchDomain", {
        "domainName": args.domainName,
        "id": args.id,
        "offPeakWindowOptions": args.offPeakWindowOptions,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOpensearchDomain.
 */
export interface GetOpensearchDomainArgs {
    domainName: string;
    id?: string;
    offPeakWindowOptions?: inputs.GetOpensearchDomainOffPeakWindowOptions;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getOpensearchDomain.
 */
export interface GetOpensearchDomainResult {
    readonly accessPolicies: string;
    readonly advancedOptions: {[key: string]: string};
    readonly advancedSecurityOptions: outputs.GetOpensearchDomainAdvancedSecurityOption[];
    readonly arn: string;
    readonly autoTuneOptions: outputs.GetOpensearchDomainAutoTuneOption[];
    readonly clusterConfigs: outputs.GetOpensearchDomainClusterConfig[];
    readonly cognitoOptions: outputs.GetOpensearchDomainCognitoOption[];
    readonly created: boolean;
    readonly dashboardEndpoint: string;
    readonly dashboardEndpointV2: string;
    readonly deleted: boolean;
    readonly domainEndpointV2HostedZoneId: string;
    readonly domainId: string;
    readonly domainName: string;
    readonly ebsOptions: outputs.GetOpensearchDomainEbsOption[];
    readonly encryptionAtRests: outputs.GetOpensearchDomainEncryptionAtRest[];
    readonly endpoint: string;
    readonly endpointV2: string;
    readonly engineVersion: string;
    readonly id: string;
    readonly ipAddressType: string;
    /**
     * @deprecated Deprecated
     */
    readonly kibanaEndpoint: string;
    readonly logPublishingOptions: outputs.GetOpensearchDomainLogPublishingOption[];
    readonly nodeToNodeEncryptions: outputs.GetOpensearchDomainNodeToNodeEncryption[];
    readonly offPeakWindowOptions?: outputs.GetOpensearchDomainOffPeakWindowOptions;
    readonly processing: boolean;
    readonly snapshotOptions: outputs.GetOpensearchDomainSnapshotOption[];
    readonly softwareUpdateOptions: outputs.GetOpensearchDomainSoftwareUpdateOption[];
    readonly tags: {[key: string]: string};
    readonly vpcOptions: outputs.GetOpensearchDomainVpcOption[];
}
export function getOpensearchDomainOutput(args: GetOpensearchDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOpensearchDomainResult> {
    return pulumi.output(args).apply((a: any) => getOpensearchDomain(a, opts))
}

/**
 * A collection of arguments for invoking getOpensearchDomain.
 */
export interface GetOpensearchDomainOutputArgs {
    domainName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    offPeakWindowOptions?: pulumi.Input<inputs.GetOpensearchDomainOffPeakWindowOptionsArgs>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
