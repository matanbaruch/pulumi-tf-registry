// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApplicationinsightsApplication extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationinsightsApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationinsightsApplicationState, opts?: pulumi.CustomResourceOptions): ApplicationinsightsApplication {
        return new ApplicationinsightsApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/applicationinsightsApplication:ApplicationinsightsApplication';

    /**
     * Returns true if the given object is an instance of ApplicationinsightsApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationinsightsApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationinsightsApplication.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoConfigEnabled!: pulumi.Output<boolean | undefined>;
    public readonly autoCreate!: pulumi.Output<boolean | undefined>;
    public readonly cweMonitorEnabled!: pulumi.Output<boolean | undefined>;
    public readonly groupingType!: pulumi.Output<string | undefined>;
    public readonly opsCenterEnabled!: pulumi.Output<boolean | undefined>;
    public readonly opsItemSnsTopicArn!: pulumi.Output<string | undefined>;
    public readonly resourceGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ApplicationinsightsApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationinsightsApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationinsightsApplicationArgs | ApplicationinsightsApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationinsightsApplicationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoConfigEnabled"] = state ? state.autoConfigEnabled : undefined;
            resourceInputs["autoCreate"] = state ? state.autoCreate : undefined;
            resourceInputs["cweMonitorEnabled"] = state ? state.cweMonitorEnabled : undefined;
            resourceInputs["groupingType"] = state ? state.groupingType : undefined;
            resourceInputs["opsCenterEnabled"] = state ? state.opsCenterEnabled : undefined;
            resourceInputs["opsItemSnsTopicArn"] = state ? state.opsItemSnsTopicArn : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ApplicationinsightsApplicationArgs | undefined;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["autoConfigEnabled"] = args ? args.autoConfigEnabled : undefined;
            resourceInputs["autoCreate"] = args ? args.autoCreate : undefined;
            resourceInputs["cweMonitorEnabled"] = args ? args.cweMonitorEnabled : undefined;
            resourceInputs["groupingType"] = args ? args.groupingType : undefined;
            resourceInputs["opsCenterEnabled"] = args ? args.opsCenterEnabled : undefined;
            resourceInputs["opsItemSnsTopicArn"] = args ? args.opsItemSnsTopicArn : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationinsightsApplication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApplicationinsightsApplication resources.
 */
export interface ApplicationinsightsApplicationState {
    arn?: pulumi.Input<string>;
    autoConfigEnabled?: pulumi.Input<boolean>;
    autoCreate?: pulumi.Input<boolean>;
    cweMonitorEnabled?: pulumi.Input<boolean>;
    groupingType?: pulumi.Input<string>;
    opsCenterEnabled?: pulumi.Input<boolean>;
    opsItemSnsTopicArn?: pulumi.Input<string>;
    resourceGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ApplicationinsightsApplication resource.
 */
export interface ApplicationinsightsApplicationArgs {
    autoConfigEnabled?: pulumi.Input<boolean>;
    autoCreate?: pulumi.Input<boolean>;
    cweMonitorEnabled?: pulumi.Input<boolean>;
    groupingType?: pulumi.Input<string>;
    opsCenterEnabled?: pulumi.Input<boolean>;
    opsItemSnsTopicArn?: pulumi.Input<string>;
    resourceGroupName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
