// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftserverlessEndpointAccess extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftserverlessEndpointAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftserverlessEndpointAccessState, opts?: pulumi.CustomResourceOptions): RedshiftserverlessEndpointAccess {
        return new RedshiftserverlessEndpointAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftserverlessEndpointAccess:RedshiftserverlessEndpointAccess';

    /**
     * Returns true if the given object is an instance of RedshiftserverlessEndpointAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftserverlessEndpointAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftserverlessEndpointAccess.__pulumiType;
    }

    public /*out*/ readonly address!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly endpointName!: pulumi.Output<string>;
    public readonly ownerAccount!: pulumi.Output<string | undefined>;
    public /*out*/ readonly port!: pulumi.Output<number>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public /*out*/ readonly vpcEndpoints!: pulumi.Output<outputs.RedshiftserverlessEndpointAccessVpcEndpoint[]>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;
    public readonly workgroupName!: pulumi.Output<string>;

    /**
     * Create a RedshiftserverlessEndpointAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftserverlessEndpointAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftserverlessEndpointAccessArgs | RedshiftserverlessEndpointAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftserverlessEndpointAccessState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["endpointName"] = state ? state.endpointName : undefined;
            resourceInputs["ownerAccount"] = state ? state.ownerAccount : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["vpcEndpoints"] = state ? state.vpcEndpoints : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
            resourceInputs["workgroupName"] = state ? state.workgroupName : undefined;
        } else {
            const args = argsOrState as RedshiftserverlessEndpointAccessArgs | undefined;
            if ((!args || args.endpointName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointName'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.workgroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workgroupName'");
            }
            resourceInputs["endpointName"] = args ? args.endpointName : undefined;
            resourceInputs["ownerAccount"] = args ? args.ownerAccount : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["workgroupName"] = args ? args.workgroupName : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["vpcEndpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftserverlessEndpointAccess.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftserverlessEndpointAccess resources.
 */
export interface RedshiftserverlessEndpointAccessState {
    address?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    endpointName?: pulumi.Input<string>;
    ownerAccount?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    vpcEndpoints?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessEndpointAccessVpcEndpoint>[]>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    workgroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedshiftserverlessEndpointAccess resource.
 */
export interface RedshiftserverlessEndpointAccessArgs {
    endpointName: pulumi.Input<string>;
    ownerAccount?: pulumi.Input<string>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    workgroupName: pulumi.Input<string>;
}
