// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftserverlessWorkgroup extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftserverlessWorkgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftserverlessWorkgroupState, opts?: pulumi.CustomResourceOptions): RedshiftserverlessWorkgroup {
        return new RedshiftserverlessWorkgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftserverlessWorkgroup:RedshiftserverlessWorkgroup';

    /**
     * Returns true if the given object is an instance of RedshiftserverlessWorkgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftserverlessWorkgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftserverlessWorkgroup.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly baseCapacity!: pulumi.Output<number>;
    public readonly configParameters!: pulumi.Output<outputs.RedshiftserverlessWorkgroupConfigParameter[] | undefined>;
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.RedshiftserverlessWorkgroupEndpoint[]>;
    public readonly enhancedVpcRouting!: pulumi.Output<boolean | undefined>;
    public readonly maxCapacity!: pulumi.Output<number | undefined>;
    public readonly namespaceName!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly publiclyAccessible!: pulumi.Output<boolean | undefined>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    public readonly subnetIds!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.RedshiftserverlessWorkgroupTimeouts | undefined>;
    public /*out*/ readonly workgroupId!: pulumi.Output<string>;
    public readonly workgroupName!: pulumi.Output<string>;

    /**
     * Create a RedshiftserverlessWorkgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftserverlessWorkgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftserverlessWorkgroupArgs | RedshiftserverlessWorkgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftserverlessWorkgroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["baseCapacity"] = state ? state.baseCapacity : undefined;
            resourceInputs["configParameters"] = state ? state.configParameters : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["enhancedVpcRouting"] = state ? state.enhancedVpcRouting : undefined;
            resourceInputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["publiclyAccessible"] = state ? state.publiclyAccessible : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["workgroupId"] = state ? state.workgroupId : undefined;
            resourceInputs["workgroupName"] = state ? state.workgroupName : undefined;
        } else {
            const args = argsOrState as RedshiftserverlessWorkgroupArgs | undefined;
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.workgroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workgroupName'");
            }
            resourceInputs["baseCapacity"] = args ? args.baseCapacity : undefined;
            resourceInputs["configParameters"] = args ? args.configParameters : undefined;
            resourceInputs["enhancedVpcRouting"] = args ? args.enhancedVpcRouting : undefined;
            resourceInputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            resourceInputs["namespaceName"] = args ? args.namespaceName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["publiclyAccessible"] = args ? args.publiclyAccessible : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["workgroupName"] = args ? args.workgroupName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["workgroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftserverlessWorkgroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftserverlessWorkgroup resources.
 */
export interface RedshiftserverlessWorkgroupState {
    arn?: pulumi.Input<string>;
    baseCapacity?: pulumi.Input<number>;
    configParameters?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessWorkgroupConfigParameter>[]>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessWorkgroupEndpoint>[]>;
    enhancedVpcRouting?: pulumi.Input<boolean>;
    maxCapacity?: pulumi.Input<number>;
    namespaceName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    publiclyAccessible?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedshiftserverlessWorkgroupTimeouts>;
    workgroupId?: pulumi.Input<string>;
    workgroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedshiftserverlessWorkgroup resource.
 */
export interface RedshiftserverlessWorkgroupArgs {
    baseCapacity?: pulumi.Input<number>;
    configParameters?: pulumi.Input<pulumi.Input<inputs.RedshiftserverlessWorkgroupConfigParameter>[]>;
    enhancedVpcRouting?: pulumi.Input<boolean>;
    maxCapacity?: pulumi.Input<number>;
    namespaceName: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    publiclyAccessible?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.RedshiftserverlessWorkgroupTimeouts>;
    workgroupName: pulumi.Input<string>;
}
