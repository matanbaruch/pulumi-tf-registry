// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrganizationsOrganization extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationsOrganization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationsOrganizationState, opts?: pulumi.CustomResourceOptions): OrganizationsOrganization {
        return new OrganizationsOrganization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/organizationsOrganization:OrganizationsOrganization';

    /**
     * Returns true if the given object is an instance of OrganizationsOrganization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationsOrganization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationsOrganization.__pulumiType;
    }

    public /*out*/ readonly accounts!: pulumi.Output<outputs.OrganizationsOrganizationAccount[]>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly awsServiceAccessPrincipals!: pulumi.Output<string[] | undefined>;
    public readonly enabledPolicyTypes!: pulumi.Output<string[] | undefined>;
    public readonly featureSet!: pulumi.Output<string | undefined>;
    public /*out*/ readonly masterAccountArn!: pulumi.Output<string>;
    public /*out*/ readonly masterAccountEmail!: pulumi.Output<string>;
    public /*out*/ readonly masterAccountId!: pulumi.Output<string>;
    public /*out*/ readonly masterAccountName!: pulumi.Output<string>;
    public /*out*/ readonly nonMasterAccounts!: pulumi.Output<outputs.OrganizationsOrganizationNonMasterAccount[]>;
    public /*out*/ readonly roots!: pulumi.Output<outputs.OrganizationsOrganizationRoot[]>;

    /**
     * Create a OrganizationsOrganization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrganizationsOrganizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationsOrganizationArgs | OrganizationsOrganizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationsOrganizationState | undefined;
            resourceInputs["accounts"] = state ? state.accounts : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsServiceAccessPrincipals"] = state ? state.awsServiceAccessPrincipals : undefined;
            resourceInputs["enabledPolicyTypes"] = state ? state.enabledPolicyTypes : undefined;
            resourceInputs["featureSet"] = state ? state.featureSet : undefined;
            resourceInputs["masterAccountArn"] = state ? state.masterAccountArn : undefined;
            resourceInputs["masterAccountEmail"] = state ? state.masterAccountEmail : undefined;
            resourceInputs["masterAccountId"] = state ? state.masterAccountId : undefined;
            resourceInputs["masterAccountName"] = state ? state.masterAccountName : undefined;
            resourceInputs["nonMasterAccounts"] = state ? state.nonMasterAccounts : undefined;
            resourceInputs["roots"] = state ? state.roots : undefined;
        } else {
            const args = argsOrState as OrganizationsOrganizationArgs | undefined;
            resourceInputs["awsServiceAccessPrincipals"] = args ? args.awsServiceAccessPrincipals : undefined;
            resourceInputs["enabledPolicyTypes"] = args ? args.enabledPolicyTypes : undefined;
            resourceInputs["featureSet"] = args ? args.featureSet : undefined;
            resourceInputs["accounts"] = undefined /*out*/;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["masterAccountArn"] = undefined /*out*/;
            resourceInputs["masterAccountEmail"] = undefined /*out*/;
            resourceInputs["masterAccountId"] = undefined /*out*/;
            resourceInputs["masterAccountName"] = undefined /*out*/;
            resourceInputs["nonMasterAccounts"] = undefined /*out*/;
            resourceInputs["roots"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationsOrganization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationsOrganization resources.
 */
export interface OrganizationsOrganizationState {
    accounts?: pulumi.Input<pulumi.Input<inputs.OrganizationsOrganizationAccount>[]>;
    arn?: pulumi.Input<string>;
    awsServiceAccessPrincipals?: pulumi.Input<pulumi.Input<string>[]>;
    enabledPolicyTypes?: pulumi.Input<pulumi.Input<string>[]>;
    featureSet?: pulumi.Input<string>;
    masterAccountArn?: pulumi.Input<string>;
    masterAccountEmail?: pulumi.Input<string>;
    masterAccountId?: pulumi.Input<string>;
    masterAccountName?: pulumi.Input<string>;
    nonMasterAccounts?: pulumi.Input<pulumi.Input<inputs.OrganizationsOrganizationNonMasterAccount>[]>;
    roots?: pulumi.Input<pulumi.Input<inputs.OrganizationsOrganizationRoot>[]>;
}

/**
 * The set of arguments for constructing a OrganizationsOrganization resource.
 */
export interface OrganizationsOrganizationArgs {
    awsServiceAccessPrincipals?: pulumi.Input<pulumi.Input<string>[]>;
    enabledPolicyTypes?: pulumi.Input<pulumi.Input<string>[]>;
    featureSet?: pulumi.Input<string>;
}
