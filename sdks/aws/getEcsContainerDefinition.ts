// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEcsContainerDefinition(args: GetEcsContainerDefinitionArgs, opts?: pulumi.InvokeOptions): Promise<GetEcsContainerDefinitionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEcsContainerDefinition:getEcsContainerDefinition", {
        "containerName": args.containerName,
        "id": args.id,
        "taskDefinition": args.taskDefinition,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEcsContainerDefinition.
 */
export interface GetEcsContainerDefinitionArgs {
    containerName: string;
    id?: string;
    taskDefinition: string;
}

/**
 * A collection of values returned by getEcsContainerDefinition.
 */
export interface GetEcsContainerDefinitionResult {
    readonly containerName: string;
    readonly cpu: number;
    readonly disableNetworking: boolean;
    readonly dockerLabels: {[key: string]: string};
    readonly environment: {[key: string]: string};
    readonly id: string;
    readonly image: string;
    readonly imageDigest: string;
    readonly memory: number;
    readonly memoryReservation: number;
    readonly taskDefinition: string;
}
export function getEcsContainerDefinitionOutput(args: GetEcsContainerDefinitionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEcsContainerDefinitionResult> {
    return pulumi.output(args).apply((a: any) => getEcsContainerDefinition(a, opts))
}

/**
 * A collection of arguments for invoking getEcsContainerDefinition.
 */
export interface GetEcsContainerDefinitionOutputArgs {
    containerName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    taskDefinition: pulumi.Input<string>;
}
