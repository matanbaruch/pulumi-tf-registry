// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DmsEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing DmsEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsEndpointState, opts?: pulumi.CustomResourceOptions): DmsEndpoint {
        return new DmsEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/dmsEndpoint:DmsEndpoint';

    /**
     * Returns true if the given object is an instance of DmsEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsEndpoint.__pulumiType;
    }

    public readonly certificateArn!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string | undefined>;
    public readonly elasticsearchSettings!: pulumi.Output<outputs.DmsEndpointElasticsearchSettings | undefined>;
    public /*out*/ readonly endpointArn!: pulumi.Output<string>;
    public readonly endpointId!: pulumi.Output<string>;
    public readonly endpointType!: pulumi.Output<string>;
    public readonly engineName!: pulumi.Output<string>;
    public readonly extraConnectionAttributes!: pulumi.Output<string>;
    public readonly kafkaSettings!: pulumi.Output<outputs.DmsEndpointKafkaSettings | undefined>;
    public readonly kinesisSettings!: pulumi.Output<outputs.DmsEndpointKinesisSettings | undefined>;
    public readonly kmsKeyArn!: pulumi.Output<string>;
    public readonly mongodbSettings!: pulumi.Output<outputs.DmsEndpointMongodbSettings | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly pauseReplicationTasks!: pulumi.Output<boolean | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly postgresSettings!: pulumi.Output<outputs.DmsEndpointPostgresSettings | undefined>;
    public readonly redisSettings!: pulumi.Output<outputs.DmsEndpointRedisSettings | undefined>;
    public readonly redshiftSettings!: pulumi.Output<outputs.DmsEndpointRedshiftSettings | undefined>;
    /**
     * This argument is deprecated and will be removed in a future version; use aws.DmsS3Endpoint instead
     */
    public readonly s3Settings!: pulumi.Output<outputs.DmsEndpointS3Settings | undefined>;
    public readonly secretsManagerAccessRoleArn!: pulumi.Output<string | undefined>;
    public readonly secretsManagerArn!: pulumi.Output<string | undefined>;
    public readonly serverName!: pulumi.Output<string | undefined>;
    public readonly serviceAccessRole!: pulumi.Output<string | undefined>;
    public readonly sslMode!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.DmsEndpointTimeouts | undefined>;
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a DmsEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsEndpointArgs | DmsEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsEndpointState | undefined;
            resourceInputs["certificateArn"] = state ? state.certificateArn : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["elasticsearchSettings"] = state ? state.elasticsearchSettings : undefined;
            resourceInputs["endpointArn"] = state ? state.endpointArn : undefined;
            resourceInputs["endpointId"] = state ? state.endpointId : undefined;
            resourceInputs["endpointType"] = state ? state.endpointType : undefined;
            resourceInputs["engineName"] = state ? state.engineName : undefined;
            resourceInputs["extraConnectionAttributes"] = state ? state.extraConnectionAttributes : undefined;
            resourceInputs["kafkaSettings"] = state ? state.kafkaSettings : undefined;
            resourceInputs["kinesisSettings"] = state ? state.kinesisSettings : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["mongodbSettings"] = state ? state.mongodbSettings : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["pauseReplicationTasks"] = state ? state.pauseReplicationTasks : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["postgresSettings"] = state ? state.postgresSettings : undefined;
            resourceInputs["redisSettings"] = state ? state.redisSettings : undefined;
            resourceInputs["redshiftSettings"] = state ? state.redshiftSettings : undefined;
            resourceInputs["s3Settings"] = state ? state.s3Settings : undefined;
            resourceInputs["secretsManagerAccessRoleArn"] = state ? state.secretsManagerAccessRoleArn : undefined;
            resourceInputs["secretsManagerArn"] = state ? state.secretsManagerArn : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["serviceAccessRole"] = state ? state.serviceAccessRole : undefined;
            resourceInputs["sslMode"] = state ? state.sslMode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DmsEndpointArgs | undefined;
            if ((!args || args.endpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if ((!args || args.endpointType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointType'");
            }
            if ((!args || args.engineName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineName'");
            }
            resourceInputs["certificateArn"] = args ? args.certificateArn : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["elasticsearchSettings"] = args ? args.elasticsearchSettings : undefined;
            resourceInputs["endpointId"] = args ? args.endpointId : undefined;
            resourceInputs["endpointType"] = args ? args.endpointType : undefined;
            resourceInputs["engineName"] = args ? args.engineName : undefined;
            resourceInputs["extraConnectionAttributes"] = args ? args.extraConnectionAttributes : undefined;
            resourceInputs["kafkaSettings"] = args ? args.kafkaSettings : undefined;
            resourceInputs["kinesisSettings"] = args ? args.kinesisSettings : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["mongodbSettings"] = args ? args.mongodbSettings : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["pauseReplicationTasks"] = args ? args.pauseReplicationTasks : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["postgresSettings"] = args ? args.postgresSettings : undefined;
            resourceInputs["redisSettings"] = args ? args.redisSettings : undefined;
            resourceInputs["redshiftSettings"] = args ? args.redshiftSettings : undefined;
            resourceInputs["s3Settings"] = args ? args.s3Settings : undefined;
            resourceInputs["secretsManagerAccessRoleArn"] = args ? args.secretsManagerAccessRoleArn : undefined;
            resourceInputs["secretsManagerArn"] = args ? args.secretsManagerArn : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["serviceAccessRole"] = args ? args.serviceAccessRole : undefined;
            resourceInputs["sslMode"] = args ? args.sslMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["endpointArn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DmsEndpoint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DmsEndpoint resources.
 */
export interface DmsEndpointState {
    certificateArn?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    elasticsearchSettings?: pulumi.Input<inputs.DmsEndpointElasticsearchSettings>;
    endpointArn?: pulumi.Input<string>;
    endpointId?: pulumi.Input<string>;
    endpointType?: pulumi.Input<string>;
    engineName?: pulumi.Input<string>;
    extraConnectionAttributes?: pulumi.Input<string>;
    kafkaSettings?: pulumi.Input<inputs.DmsEndpointKafkaSettings>;
    kinesisSettings?: pulumi.Input<inputs.DmsEndpointKinesisSettings>;
    kmsKeyArn?: pulumi.Input<string>;
    mongodbSettings?: pulumi.Input<inputs.DmsEndpointMongodbSettings>;
    password?: pulumi.Input<string>;
    pauseReplicationTasks?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    postgresSettings?: pulumi.Input<inputs.DmsEndpointPostgresSettings>;
    redisSettings?: pulumi.Input<inputs.DmsEndpointRedisSettings>;
    redshiftSettings?: pulumi.Input<inputs.DmsEndpointRedshiftSettings>;
    /**
     * This argument is deprecated and will be removed in a future version; use aws.DmsS3Endpoint instead
     */
    s3Settings?: pulumi.Input<inputs.DmsEndpointS3Settings>;
    secretsManagerAccessRoleArn?: pulumi.Input<string>;
    secretsManagerArn?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    serviceAccessRole?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DmsEndpointTimeouts>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsEndpoint resource.
 */
export interface DmsEndpointArgs {
    certificateArn?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    elasticsearchSettings?: pulumi.Input<inputs.DmsEndpointElasticsearchSettings>;
    endpointId: pulumi.Input<string>;
    endpointType: pulumi.Input<string>;
    engineName: pulumi.Input<string>;
    extraConnectionAttributes?: pulumi.Input<string>;
    kafkaSettings?: pulumi.Input<inputs.DmsEndpointKafkaSettings>;
    kinesisSettings?: pulumi.Input<inputs.DmsEndpointKinesisSettings>;
    kmsKeyArn?: pulumi.Input<string>;
    mongodbSettings?: pulumi.Input<inputs.DmsEndpointMongodbSettings>;
    password?: pulumi.Input<string>;
    pauseReplicationTasks?: pulumi.Input<boolean>;
    port?: pulumi.Input<number>;
    postgresSettings?: pulumi.Input<inputs.DmsEndpointPostgresSettings>;
    redisSettings?: pulumi.Input<inputs.DmsEndpointRedisSettings>;
    redshiftSettings?: pulumi.Input<inputs.DmsEndpointRedshiftSettings>;
    /**
     * This argument is deprecated and will be removed in a future version; use aws.DmsS3Endpoint instead
     */
    s3Settings?: pulumi.Input<inputs.DmsEndpointS3Settings>;
    secretsManagerAccessRoleArn?: pulumi.Input<string>;
    secretsManagerArn?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    serviceAccessRole?: pulumi.Input<string>;
    sslMode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DmsEndpointTimeouts>;
    username?: pulumi.Input<string>;
}
