// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IotTopicRule extends pulumi.CustomResource {
    /**
     * Get an existing IotTopicRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IotTopicRuleState, opts?: pulumi.CustomResourceOptions): IotTopicRule {
        return new IotTopicRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/iotTopicRule:IotTopicRule';

    /**
     * Returns true if the given object is an instance of IotTopicRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IotTopicRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IotTopicRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cloudwatchAlarms!: pulumi.Output<outputs.IotTopicRuleCloudwatchAlarm[] | undefined>;
    public readonly cloudwatchLogs!: pulumi.Output<outputs.IotTopicRuleCloudwatchLog[] | undefined>;
    public readonly cloudwatchMetrics!: pulumi.Output<outputs.IotTopicRuleCloudwatchMetric[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dynamodbs!: pulumi.Output<outputs.IotTopicRuleDynamodb[] | undefined>;
    public readonly dynamodbv2s!: pulumi.Output<outputs.IotTopicRuleDynamodbv2[] | undefined>;
    public readonly elasticsearches!: pulumi.Output<outputs.IotTopicRuleElasticsearch[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly errorAction!: pulumi.Output<outputs.IotTopicRuleErrorAction | undefined>;
    public readonly firehoses!: pulumi.Output<outputs.IotTopicRuleFirehose[] | undefined>;
    public readonly https!: pulumi.Output<outputs.IotTopicRuleHttp[] | undefined>;
    public readonly iotAnalytics!: pulumi.Output<outputs.IotTopicRuleIotAnalytic[] | undefined>;
    public readonly iotEvents!: pulumi.Output<outputs.IotTopicRuleIotEvent[] | undefined>;
    public readonly kafkas!: pulumi.Output<outputs.IotTopicRuleKafka[] | undefined>;
    public readonly kineses!: pulumi.Output<outputs.IotTopicRuleKinese[] | undefined>;
    public readonly lambdas!: pulumi.Output<outputs.IotTopicRuleLambda[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly republishes!: pulumi.Output<outputs.IotTopicRuleRepublish[] | undefined>;
    public readonly s3s!: pulumi.Output<outputs.IotTopicRuleS3[] | undefined>;
    public readonly sns!: pulumi.Output<outputs.IotTopicRuleSn[] | undefined>;
    public readonly sql!: pulumi.Output<string>;
    public readonly sqlVersion!: pulumi.Output<string>;
    public readonly sqs!: pulumi.Output<outputs.IotTopicRuleSq[] | undefined>;
    public readonly stepFunctions!: pulumi.Output<outputs.IotTopicRuleStepFunction[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timestreams!: pulumi.Output<outputs.IotTopicRuleTimestream[] | undefined>;

    /**
     * Create a IotTopicRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IotTopicRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IotTopicRuleArgs | IotTopicRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IotTopicRuleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cloudwatchAlarms"] = state ? state.cloudwatchAlarms : undefined;
            resourceInputs["cloudwatchLogs"] = state ? state.cloudwatchLogs : undefined;
            resourceInputs["cloudwatchMetrics"] = state ? state.cloudwatchMetrics : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dynamodbs"] = state ? state.dynamodbs : undefined;
            resourceInputs["dynamodbv2s"] = state ? state.dynamodbv2s : undefined;
            resourceInputs["elasticsearches"] = state ? state.elasticsearches : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["errorAction"] = state ? state.errorAction : undefined;
            resourceInputs["firehoses"] = state ? state.firehoses : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["iotAnalytics"] = state ? state.iotAnalytics : undefined;
            resourceInputs["iotEvents"] = state ? state.iotEvents : undefined;
            resourceInputs["kafkas"] = state ? state.kafkas : undefined;
            resourceInputs["kineses"] = state ? state.kineses : undefined;
            resourceInputs["lambdas"] = state ? state.lambdas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["republishes"] = state ? state.republishes : undefined;
            resourceInputs["s3s"] = state ? state.s3s : undefined;
            resourceInputs["sns"] = state ? state.sns : undefined;
            resourceInputs["sql"] = state ? state.sql : undefined;
            resourceInputs["sqlVersion"] = state ? state.sqlVersion : undefined;
            resourceInputs["sqs"] = state ? state.sqs : undefined;
            resourceInputs["stepFunctions"] = state ? state.stepFunctions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timestreams"] = state ? state.timestreams : undefined;
        } else {
            const args = argsOrState as IotTopicRuleArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.sql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sql'");
            }
            if ((!args || args.sqlVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sqlVersion'");
            }
            resourceInputs["cloudwatchAlarms"] = args ? args.cloudwatchAlarms : undefined;
            resourceInputs["cloudwatchLogs"] = args ? args.cloudwatchLogs : undefined;
            resourceInputs["cloudwatchMetrics"] = args ? args.cloudwatchMetrics : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dynamodbs"] = args ? args.dynamodbs : undefined;
            resourceInputs["dynamodbv2s"] = args ? args.dynamodbv2s : undefined;
            resourceInputs["elasticsearches"] = args ? args.elasticsearches : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["errorAction"] = args ? args.errorAction : undefined;
            resourceInputs["firehoses"] = args ? args.firehoses : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["iotAnalytics"] = args ? args.iotAnalytics : undefined;
            resourceInputs["iotEvents"] = args ? args.iotEvents : undefined;
            resourceInputs["kafkas"] = args ? args.kafkas : undefined;
            resourceInputs["kineses"] = args ? args.kineses : undefined;
            resourceInputs["lambdas"] = args ? args.lambdas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["republishes"] = args ? args.republishes : undefined;
            resourceInputs["s3s"] = args ? args.s3s : undefined;
            resourceInputs["sns"] = args ? args.sns : undefined;
            resourceInputs["sql"] = args ? args.sql : undefined;
            resourceInputs["sqlVersion"] = args ? args.sqlVersion : undefined;
            resourceInputs["sqs"] = args ? args.sqs : undefined;
            resourceInputs["stepFunctions"] = args ? args.stepFunctions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timestreams"] = args ? args.timestreams : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IotTopicRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IotTopicRule resources.
 */
export interface IotTopicRuleState {
    arn?: pulumi.Input<string>;
    cloudwatchAlarms?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleCloudwatchAlarm>[]>;
    cloudwatchLogs?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleCloudwatchLog>[]>;
    cloudwatchMetrics?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleCloudwatchMetric>[]>;
    description?: pulumi.Input<string>;
    dynamodbs?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleDynamodb>[]>;
    dynamodbv2s?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleDynamodbv2>[]>;
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleElasticsearch>[]>;
    enabled?: pulumi.Input<boolean>;
    errorAction?: pulumi.Input<inputs.IotTopicRuleErrorAction>;
    firehoses?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleFirehose>[]>;
    https?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleHttp>[]>;
    iotAnalytics?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleIotAnalytic>[]>;
    iotEvents?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleIotEvent>[]>;
    kafkas?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleKafka>[]>;
    kineses?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleKinese>[]>;
    lambdas?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleLambda>[]>;
    name?: pulumi.Input<string>;
    republishes?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleRepublish>[]>;
    s3s?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleS3>[]>;
    sns?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleSn>[]>;
    sql?: pulumi.Input<string>;
    sqlVersion?: pulumi.Input<string>;
    sqs?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleSq>[]>;
    stepFunctions?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleStepFunction>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timestreams?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleTimestream>[]>;
}

/**
 * The set of arguments for constructing a IotTopicRule resource.
 */
export interface IotTopicRuleArgs {
    cloudwatchAlarms?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleCloudwatchAlarm>[]>;
    cloudwatchLogs?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleCloudwatchLog>[]>;
    cloudwatchMetrics?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleCloudwatchMetric>[]>;
    description?: pulumi.Input<string>;
    dynamodbs?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleDynamodb>[]>;
    dynamodbv2s?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleDynamodbv2>[]>;
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleElasticsearch>[]>;
    enabled: pulumi.Input<boolean>;
    errorAction?: pulumi.Input<inputs.IotTopicRuleErrorAction>;
    firehoses?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleFirehose>[]>;
    https?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleHttp>[]>;
    iotAnalytics?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleIotAnalytic>[]>;
    iotEvents?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleIotEvent>[]>;
    kafkas?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleKafka>[]>;
    kineses?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleKinese>[]>;
    lambdas?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleLambda>[]>;
    name?: pulumi.Input<string>;
    republishes?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleRepublish>[]>;
    s3s?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleS3>[]>;
    sns?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleSn>[]>;
    sql: pulumi.Input<string>;
    sqlVersion: pulumi.Input<string>;
    sqs?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleSq>[]>;
    stepFunctions?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleStepFunction>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timestreams?: pulumi.Input<pulumi.Input<inputs.IotTopicRuleTimestream>[]>;
}
