// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApiGatewayIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ApiGatewayIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiGatewayIntegrationState, opts?: pulumi.CustomResourceOptions): ApiGatewayIntegration {
        return new ApiGatewayIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/apiGatewayIntegration:ApiGatewayIntegration';

    /**
     * Returns true if the given object is an instance of ApiGatewayIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiGatewayIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiGatewayIntegration.__pulumiType;
    }

    public readonly cacheKeyParameters!: pulumi.Output<string[] | undefined>;
    public readonly cacheNamespace!: pulumi.Output<string>;
    public readonly connectionId!: pulumi.Output<string | undefined>;
    public readonly connectionType!: pulumi.Output<string | undefined>;
    public readonly contentHandling!: pulumi.Output<string | undefined>;
    public readonly credentials!: pulumi.Output<string | undefined>;
    public readonly httpMethod!: pulumi.Output<string>;
    public readonly integrationHttpMethod!: pulumi.Output<string | undefined>;
    public readonly passthroughBehavior!: pulumi.Output<string>;
    public readonly requestParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly requestTemplates!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly resourceId!: pulumi.Output<string>;
    public readonly restApiId!: pulumi.Output<string>;
    public readonly timeoutMilliseconds!: pulumi.Output<number | undefined>;
    public readonly tlsConfig!: pulumi.Output<outputs.ApiGatewayIntegrationTlsConfig | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly uri!: pulumi.Output<string | undefined>;

    /**
     * Create a ApiGatewayIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiGatewayIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiGatewayIntegrationArgs | ApiGatewayIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiGatewayIntegrationState | undefined;
            resourceInputs["cacheKeyParameters"] = state ? state.cacheKeyParameters : undefined;
            resourceInputs["cacheNamespace"] = state ? state.cacheNamespace : undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["contentHandling"] = state ? state.contentHandling : undefined;
            resourceInputs["credentials"] = state ? state.credentials : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["integrationHttpMethod"] = state ? state.integrationHttpMethod : undefined;
            resourceInputs["passthroughBehavior"] = state ? state.passthroughBehavior : undefined;
            resourceInputs["requestParameters"] = state ? state.requestParameters : undefined;
            resourceInputs["requestTemplates"] = state ? state.requestTemplates : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["restApiId"] = state ? state.restApiId : undefined;
            resourceInputs["timeoutMilliseconds"] = state ? state.timeoutMilliseconds : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uri"] = state ? state.uri : undefined;
        } else {
            const args = argsOrState as ApiGatewayIntegrationArgs | undefined;
            if ((!args || args.httpMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpMethod'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.restApiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restApiId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["cacheKeyParameters"] = args ? args.cacheKeyParameters : undefined;
            resourceInputs["cacheNamespace"] = args ? args.cacheNamespace : undefined;
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["contentHandling"] = args ? args.contentHandling : undefined;
            resourceInputs["credentials"] = args ? args.credentials : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["integrationHttpMethod"] = args ? args.integrationHttpMethod : undefined;
            resourceInputs["passthroughBehavior"] = args ? args.passthroughBehavior : undefined;
            resourceInputs["requestParameters"] = args ? args.requestParameters : undefined;
            resourceInputs["requestTemplates"] = args ? args.requestTemplates : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["restApiId"] = args ? args.restApiId : undefined;
            resourceInputs["timeoutMilliseconds"] = args ? args.timeoutMilliseconds : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uri"] = args ? args.uri : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiGatewayIntegration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ApiGatewayIntegration resources.
 */
export interface ApiGatewayIntegrationState {
    cacheKeyParameters?: pulumi.Input<pulumi.Input<string>[]>;
    cacheNamespace?: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    contentHandling?: pulumi.Input<string>;
    credentials?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    integrationHttpMethod?: pulumi.Input<string>;
    passthroughBehavior?: pulumi.Input<string>;
    requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    requestTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceId?: pulumi.Input<string>;
    restApiId?: pulumi.Input<string>;
    timeoutMilliseconds?: pulumi.Input<number>;
    tlsConfig?: pulumi.Input<inputs.ApiGatewayIntegrationTlsConfig>;
    type?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApiGatewayIntegration resource.
 */
export interface ApiGatewayIntegrationArgs {
    cacheKeyParameters?: pulumi.Input<pulumi.Input<string>[]>;
    cacheNamespace?: pulumi.Input<string>;
    connectionId?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    contentHandling?: pulumi.Input<string>;
    credentials?: pulumi.Input<string>;
    httpMethod: pulumi.Input<string>;
    integrationHttpMethod?: pulumi.Input<string>;
    passthroughBehavior?: pulumi.Input<string>;
    requestParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    requestTemplates?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    resourceId: pulumi.Input<string>;
    restApiId: pulumi.Input<string>;
    timeoutMilliseconds?: pulumi.Input<number>;
    tlsConfig?: pulumi.Input<inputs.ApiGatewayIntegrationTlsConfig>;
    type: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}
