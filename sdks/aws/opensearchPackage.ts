// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpensearchPackage extends pulumi.CustomResource {
    /**
     * Get an existing OpensearchPackage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpensearchPackageState, opts?: pulumi.CustomResourceOptions): OpensearchPackage {
        return new OpensearchPackage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/opensearchPackage:OpensearchPackage';

    /**
     * Returns true if the given object is an instance of OpensearchPackage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpensearchPackage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpensearchPackage.__pulumiType;
    }

    public /*out*/ readonly availablePackageVersion!: pulumi.Output<string>;
    public readonly packageDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly packageId!: pulumi.Output<string>;
    public readonly packageName!: pulumi.Output<string>;
    public readonly packageSource!: pulumi.Output<outputs.OpensearchPackagePackageSource>;
    public readonly packageType!: pulumi.Output<string>;

    /**
     * Create a OpensearchPackage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpensearchPackageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpensearchPackageArgs | OpensearchPackageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpensearchPackageState | undefined;
            resourceInputs["availablePackageVersion"] = state ? state.availablePackageVersion : undefined;
            resourceInputs["packageDescription"] = state ? state.packageDescription : undefined;
            resourceInputs["packageId"] = state ? state.packageId : undefined;
            resourceInputs["packageName"] = state ? state.packageName : undefined;
            resourceInputs["packageSource"] = state ? state.packageSource : undefined;
            resourceInputs["packageType"] = state ? state.packageType : undefined;
        } else {
            const args = argsOrState as OpensearchPackageArgs | undefined;
            if ((!args || args.packageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageName'");
            }
            if ((!args || args.packageSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageSource'");
            }
            if ((!args || args.packageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packageType'");
            }
            resourceInputs["packageDescription"] = args ? args.packageDescription : undefined;
            resourceInputs["packageName"] = args ? args.packageName : undefined;
            resourceInputs["packageSource"] = args ? args.packageSource : undefined;
            resourceInputs["packageType"] = args ? args.packageType : undefined;
            resourceInputs["availablePackageVersion"] = undefined /*out*/;
            resourceInputs["packageId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpensearchPackage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OpensearchPackage resources.
 */
export interface OpensearchPackageState {
    availablePackageVersion?: pulumi.Input<string>;
    packageDescription?: pulumi.Input<string>;
    packageId?: pulumi.Input<string>;
    packageName?: pulumi.Input<string>;
    packageSource?: pulumi.Input<inputs.OpensearchPackagePackageSource>;
    packageType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OpensearchPackage resource.
 */
export interface OpensearchPackageArgs {
    packageDescription?: pulumi.Input<string>;
    packageName: pulumi.Input<string>;
    packageSource: pulumi.Input<inputs.OpensearchPackagePackageSource>;
    packageType: pulumi.Input<string>;
}
