// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlueUserDefinedFunction extends pulumi.CustomResource {
    /**
     * Get an existing GlueUserDefinedFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlueUserDefinedFunctionState, opts?: pulumi.CustomResourceOptions): GlueUserDefinedFunction {
        return new GlueUserDefinedFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/glueUserDefinedFunction:GlueUserDefinedFunction';

    /**
     * Returns true if the given object is an instance of GlueUserDefinedFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlueUserDefinedFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlueUserDefinedFunction.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly catalogId!: pulumi.Output<string | undefined>;
    public readonly className!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly ownerName!: pulumi.Output<string>;
    public readonly ownerType!: pulumi.Output<string>;
    public readonly resourceUris!: pulumi.Output<outputs.GlueUserDefinedFunctionResourceUri[] | undefined>;

    /**
     * Create a GlueUserDefinedFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlueUserDefinedFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlueUserDefinedFunctionArgs | GlueUserDefinedFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlueUserDefinedFunctionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["className"] = state ? state.className : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["ownerType"] = state ? state.ownerType : undefined;
            resourceInputs["resourceUris"] = state ? state.resourceUris : undefined;
        } else {
            const args = argsOrState as GlueUserDefinedFunctionArgs | undefined;
            if ((!args || args.className === undefined) && !opts.urn) {
                throw new Error("Missing required property 'className'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.ownerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerType'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["className"] = args ? args.className : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["ownerType"] = args ? args.ownerType : undefined;
            resourceInputs["resourceUris"] = args ? args.resourceUris : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlueUserDefinedFunction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlueUserDefinedFunction resources.
 */
export interface GlueUserDefinedFunctionState {
    arn?: pulumi.Input<string>;
    catalogId?: pulumi.Input<string>;
    className?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerName?: pulumi.Input<string>;
    ownerType?: pulumi.Input<string>;
    resourceUris?: pulumi.Input<pulumi.Input<inputs.GlueUserDefinedFunctionResourceUri>[]>;
}

/**
 * The set of arguments for constructing a GlueUserDefinedFunction resource.
 */
export interface GlueUserDefinedFunctionArgs {
    catalogId?: pulumi.Input<string>;
    className: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ownerName: pulumi.Input<string>;
    ownerType: pulumi.Input<string>;
    resourceUris?: pulumi.Input<pulumi.Input<inputs.GlueUserDefinedFunctionResourceUri>[]>;
}
