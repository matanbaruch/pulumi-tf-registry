// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpcSecurityGroupEgressRule extends pulumi.CustomResource {
    /**
     * Get an existing VpcSecurityGroupEgressRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcSecurityGroupEgressRuleState, opts?: pulumi.CustomResourceOptions): VpcSecurityGroupEgressRule {
        return new VpcSecurityGroupEgressRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/vpcSecurityGroupEgressRule:VpcSecurityGroupEgressRule';

    /**
     * Returns true if the given object is an instance of VpcSecurityGroupEgressRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcSecurityGroupEgressRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcSecurityGroupEgressRule.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly cidrIpv4!: pulumi.Output<string | undefined>;
    public readonly cidrIpv6!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fromPort!: pulumi.Output<number | undefined>;
    public readonly ipProtocol!: pulumi.Output<string>;
    public readonly prefixListId!: pulumi.Output<string | undefined>;
    public readonly referencedSecurityGroupId!: pulumi.Output<string | undefined>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public /*out*/ readonly securityGroupRuleId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly toPort!: pulumi.Output<number | undefined>;

    /**
     * Create a VpcSecurityGroupEgressRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcSecurityGroupEgressRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcSecurityGroupEgressRuleArgs | VpcSecurityGroupEgressRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcSecurityGroupEgressRuleState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cidrIpv4"] = state ? state.cidrIpv4 : undefined;
            resourceInputs["cidrIpv6"] = state ? state.cidrIpv6 : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fromPort"] = state ? state.fromPort : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["prefixListId"] = state ? state.prefixListId : undefined;
            resourceInputs["referencedSecurityGroupId"] = state ? state.referencedSecurityGroupId : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["securityGroupRuleId"] = state ? state.securityGroupRuleId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["toPort"] = state ? state.toPort : undefined;
        } else {
            const args = argsOrState as VpcSecurityGroupEgressRuleArgs | undefined;
            if ((!args || args.ipProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["cidrIpv4"] = args ? args.cidrIpv4 : undefined;
            resourceInputs["cidrIpv6"] = args ? args.cidrIpv6 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fromPort"] = args ? args.fromPort : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["prefixListId"] = args ? args.prefixListId : undefined;
            resourceInputs["referencedSecurityGroupId"] = args ? args.referencedSecurityGroupId : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["toPort"] = args ? args.toPort : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["securityGroupRuleId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcSecurityGroupEgressRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpcSecurityGroupEgressRule resources.
 */
export interface VpcSecurityGroupEgressRuleState {
    arn?: pulumi.Input<string>;
    cidrIpv4?: pulumi.Input<string>;
    cidrIpv6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    ipProtocol?: pulumi.Input<string>;
    prefixListId?: pulumi.Input<string>;
    referencedSecurityGroupId?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    securityGroupRuleId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    toPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VpcSecurityGroupEgressRule resource.
 */
export interface VpcSecurityGroupEgressRuleArgs {
    cidrIpv4?: pulumi.Input<string>;
    cidrIpv6?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    ipProtocol: pulumi.Input<string>;
    prefixListId?: pulumi.Input<string>;
    referencedSecurityGroupId?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    toPort?: pulumi.Input<number>;
}
