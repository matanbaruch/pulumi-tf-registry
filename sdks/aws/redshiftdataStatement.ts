// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedshiftdataStatement extends pulumi.CustomResource {
    /**
     * Get an existing RedshiftdataStatement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedshiftdataStatementState, opts?: pulumi.CustomResourceOptions): RedshiftdataStatement {
        return new RedshiftdataStatement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/redshiftdataStatement:RedshiftdataStatement';

    /**
     * Returns true if the given object is an instance of RedshiftdataStatement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedshiftdataStatement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedshiftdataStatement.__pulumiType;
    }

    public readonly clusterIdentifier!: pulumi.Output<string | undefined>;
    public readonly database!: pulumi.Output<string>;
    public readonly dbUser!: pulumi.Output<string | undefined>;
    public readonly parameters!: pulumi.Output<outputs.RedshiftdataStatementParameter[] | undefined>;
    public readonly secretArn!: pulumi.Output<string | undefined>;
    public readonly sql!: pulumi.Output<string>;
    public readonly statementName!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RedshiftdataStatementTimeouts | undefined>;
    public readonly withEvent!: pulumi.Output<boolean | undefined>;
    public readonly workgroupName!: pulumi.Output<string | undefined>;

    /**
     * Create a RedshiftdataStatement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedshiftdataStatementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedshiftdataStatementArgs | RedshiftdataStatementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedshiftdataStatementState | undefined;
            resourceInputs["clusterIdentifier"] = state ? state.clusterIdentifier : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["dbUser"] = state ? state.dbUser : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["secretArn"] = state ? state.secretArn : undefined;
            resourceInputs["sql"] = state ? state.sql : undefined;
            resourceInputs["statementName"] = state ? state.statementName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["withEvent"] = state ? state.withEvent : undefined;
            resourceInputs["workgroupName"] = state ? state.workgroupName : undefined;
        } else {
            const args = argsOrState as RedshiftdataStatementArgs | undefined;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.sql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sql'");
            }
            resourceInputs["clusterIdentifier"] = args ? args.clusterIdentifier : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["dbUser"] = args ? args.dbUser : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["secretArn"] = args ? args.secretArn : undefined;
            resourceInputs["sql"] = args ? args.sql : undefined;
            resourceInputs["statementName"] = args ? args.statementName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["withEvent"] = args ? args.withEvent : undefined;
            resourceInputs["workgroupName"] = args ? args.workgroupName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedshiftdataStatement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedshiftdataStatement resources.
 */
export interface RedshiftdataStatementState {
    clusterIdentifier?: pulumi.Input<string>;
    database?: pulumi.Input<string>;
    dbUser?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RedshiftdataStatementParameter>[]>;
    secretArn?: pulumi.Input<string>;
    sql?: pulumi.Input<string>;
    statementName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedshiftdataStatementTimeouts>;
    withEvent?: pulumi.Input<boolean>;
    workgroupName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RedshiftdataStatement resource.
 */
export interface RedshiftdataStatementArgs {
    clusterIdentifier?: pulumi.Input<string>;
    database: pulumi.Input<string>;
    dbUser?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.RedshiftdataStatementParameter>[]>;
    secretArn?: pulumi.Input<string>;
    sql: pulumi.Input<string>;
    statementName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedshiftdataStatementTimeouts>;
    withEvent?: pulumi.Input<boolean>;
    workgroupName?: pulumi.Input<string>;
}
