// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EksCluster extends pulumi.CustomResource {
    /**
     * Get an existing EksCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EksClusterState, opts?: pulumi.CustomResourceOptions): EksCluster {
        return new EksCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/eksCluster:EksCluster';

    /**
     * Returns true if the given object is an instance of EksCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EksCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EksCluster.__pulumiType;
    }

    public readonly accessConfig!: pulumi.Output<outputs.EksClusterAccessConfig | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly bootstrapSelfManagedAddons!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly certificateAuthorities!: pulumi.Output<outputs.EksClusterCertificateAuthority[]>;
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly enabledClusterLogTypes!: pulumi.Output<string[] | undefined>;
    public readonly encryptionConfig!: pulumi.Output<outputs.EksClusterEncryptionConfig | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public /*out*/ readonly identities!: pulumi.Output<outputs.EksClusterIdentity[]>;
    public readonly kubernetesNetworkConfig!: pulumi.Output<outputs.EksClusterKubernetesNetworkConfig | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly outpostConfig!: pulumi.Output<outputs.EksClusterOutpostConfig | undefined>;
    public /*out*/ readonly platformVersion!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.EksClusterTimeouts | undefined>;
    public readonly upgradePolicy!: pulumi.Output<outputs.EksClusterUpgradePolicy | undefined>;
    public readonly version!: pulumi.Output<string>;
    public readonly vpcConfig!: pulumi.Output<outputs.EksClusterVpcConfig>;

    /**
     * Create a EksCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EksClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EksClusterArgs | EksClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EksClusterState | undefined;
            resourceInputs["accessConfig"] = state ? state.accessConfig : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["bootstrapSelfManagedAddons"] = state ? state.bootstrapSelfManagedAddons : undefined;
            resourceInputs["certificateAuthorities"] = state ? state.certificateAuthorities : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enabledClusterLogTypes"] = state ? state.enabledClusterLogTypes : undefined;
            resourceInputs["encryptionConfig"] = state ? state.encryptionConfig : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["identities"] = state ? state.identities : undefined;
            resourceInputs["kubernetesNetworkConfig"] = state ? state.kubernetesNetworkConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outpostConfig"] = state ? state.outpostConfig : undefined;
            resourceInputs["platformVersion"] = state ? state.platformVersion : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["upgradePolicy"] = state ? state.upgradePolicy : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as EksClusterArgs | undefined;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.vpcConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcConfig'");
            }
            resourceInputs["accessConfig"] = args ? args.accessConfig : undefined;
            resourceInputs["bootstrapSelfManagedAddons"] = args ? args.bootstrapSelfManagedAddons : undefined;
            resourceInputs["enabledClusterLogTypes"] = args ? args.enabledClusterLogTypes : undefined;
            resourceInputs["encryptionConfig"] = args ? args.encryptionConfig : undefined;
            resourceInputs["kubernetesNetworkConfig"] = args ? args.kubernetesNetworkConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outpostConfig"] = args ? args.outpostConfig : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["upgradePolicy"] = args ? args.upgradePolicy : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["certificateAuthorities"] = undefined /*out*/;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["identities"] = undefined /*out*/;
            resourceInputs["platformVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EksCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EksCluster resources.
 */
export interface EksClusterState {
    accessConfig?: pulumi.Input<inputs.EksClusterAccessConfig>;
    arn?: pulumi.Input<string>;
    bootstrapSelfManagedAddons?: pulumi.Input<boolean>;
    certificateAuthorities?: pulumi.Input<pulumi.Input<inputs.EksClusterCertificateAuthority>[]>;
    clusterId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    enabledClusterLogTypes?: pulumi.Input<pulumi.Input<string>[]>;
    encryptionConfig?: pulumi.Input<inputs.EksClusterEncryptionConfig>;
    endpoint?: pulumi.Input<string>;
    identities?: pulumi.Input<pulumi.Input<inputs.EksClusterIdentity>[]>;
    kubernetesNetworkConfig?: pulumi.Input<inputs.EksClusterKubernetesNetworkConfig>;
    name?: pulumi.Input<string>;
    outpostConfig?: pulumi.Input<inputs.EksClusterOutpostConfig>;
    platformVersion?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EksClusterTimeouts>;
    upgradePolicy?: pulumi.Input<inputs.EksClusterUpgradePolicy>;
    version?: pulumi.Input<string>;
    vpcConfig?: pulumi.Input<inputs.EksClusterVpcConfig>;
}

/**
 * The set of arguments for constructing a EksCluster resource.
 */
export interface EksClusterArgs {
    accessConfig?: pulumi.Input<inputs.EksClusterAccessConfig>;
    bootstrapSelfManagedAddons?: pulumi.Input<boolean>;
    enabledClusterLogTypes?: pulumi.Input<pulumi.Input<string>[]>;
    encryptionConfig?: pulumi.Input<inputs.EksClusterEncryptionConfig>;
    kubernetesNetworkConfig?: pulumi.Input<inputs.EksClusterKubernetesNetworkConfig>;
    name?: pulumi.Input<string>;
    outpostConfig?: pulumi.Input<inputs.EksClusterOutpostConfig>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.EksClusterTimeouts>;
    upgradePolicy?: pulumi.Input<inputs.EksClusterUpgradePolicy>;
    version?: pulumi.Input<string>;
    vpcConfig: pulumi.Input<inputs.EksClusterVpcConfig>;
}
