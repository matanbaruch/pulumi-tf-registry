// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodecatalystDevEnvironment extends pulumi.CustomResource {
    /**
     * Get an existing CodecatalystDevEnvironment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodecatalystDevEnvironmentState, opts?: pulumi.CustomResourceOptions): CodecatalystDevEnvironment {
        return new CodecatalystDevEnvironment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/codecatalystDevEnvironment:CodecatalystDevEnvironment';

    /**
     * Returns true if the given object is an instance of CodecatalystDevEnvironment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodecatalystDevEnvironment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodecatalystDevEnvironment.__pulumiType;
    }

    public readonly alias!: pulumi.Output<string | undefined>;
    public readonly ides!: pulumi.Output<outputs.CodecatalystDevEnvironmentIdes>;
    public readonly inactivityTimeoutMinutes!: pulumi.Output<number | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly persistentStorage!: pulumi.Output<outputs.CodecatalystDevEnvironmentPersistentStorage>;
    public readonly projectName!: pulumi.Output<string>;
    public readonly repositories!: pulumi.Output<outputs.CodecatalystDevEnvironmentRepository[] | undefined>;
    public readonly spaceName!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CodecatalystDevEnvironmentTimeouts | undefined>;

    /**
     * Create a CodecatalystDevEnvironment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodecatalystDevEnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodecatalystDevEnvironmentArgs | CodecatalystDevEnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodecatalystDevEnvironmentState | undefined;
            resourceInputs["alias"] = state ? state.alias : undefined;
            resourceInputs["ides"] = state ? state.ides : undefined;
            resourceInputs["inactivityTimeoutMinutes"] = state ? state.inactivityTimeoutMinutes : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["persistentStorage"] = state ? state.persistentStorage : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["repositories"] = state ? state.repositories : undefined;
            resourceInputs["spaceName"] = state ? state.spaceName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CodecatalystDevEnvironmentArgs | undefined;
            if ((!args || args.ides === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ides'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.persistentStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'persistentStorage'");
            }
            if ((!args || args.projectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectName'");
            }
            if ((!args || args.spaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceName'");
            }
            resourceInputs["alias"] = args ? args.alias : undefined;
            resourceInputs["ides"] = args ? args.ides : undefined;
            resourceInputs["inactivityTimeoutMinutes"] = args ? args.inactivityTimeoutMinutes : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["persistentStorage"] = args ? args.persistentStorage : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["repositories"] = args ? args.repositories : undefined;
            resourceInputs["spaceName"] = args ? args.spaceName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodecatalystDevEnvironment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodecatalystDevEnvironment resources.
 */
export interface CodecatalystDevEnvironmentState {
    alias?: pulumi.Input<string>;
    ides?: pulumi.Input<inputs.CodecatalystDevEnvironmentIdes>;
    inactivityTimeoutMinutes?: pulumi.Input<number>;
    instanceType?: pulumi.Input<string>;
    persistentStorage?: pulumi.Input<inputs.CodecatalystDevEnvironmentPersistentStorage>;
    projectName?: pulumi.Input<string>;
    repositories?: pulumi.Input<pulumi.Input<inputs.CodecatalystDevEnvironmentRepository>[]>;
    spaceName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CodecatalystDevEnvironmentTimeouts>;
}

/**
 * The set of arguments for constructing a CodecatalystDevEnvironment resource.
 */
export interface CodecatalystDevEnvironmentArgs {
    alias?: pulumi.Input<string>;
    ides: pulumi.Input<inputs.CodecatalystDevEnvironmentIdes>;
    inactivityTimeoutMinutes?: pulumi.Input<number>;
    instanceType: pulumi.Input<string>;
    persistentStorage: pulumi.Input<inputs.CodecatalystDevEnvironmentPersistentStorage>;
    projectName: pulumi.Input<string>;
    repositories?: pulumi.Input<pulumi.Input<inputs.CodecatalystDevEnvironmentRepository>[]>;
    spaceName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CodecatalystDevEnvironmentTimeouts>;
}
