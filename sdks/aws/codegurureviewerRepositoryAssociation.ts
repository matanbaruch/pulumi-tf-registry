// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CodegurureviewerRepositoryAssociation extends pulumi.CustomResource {
    /**
     * Get an existing CodegurureviewerRepositoryAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CodegurureviewerRepositoryAssociationState, opts?: pulumi.CustomResourceOptions): CodegurureviewerRepositoryAssociation {
        return new CodegurureviewerRepositoryAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/codegurureviewerRepositoryAssociation:CodegurureviewerRepositoryAssociation';

    /**
     * Returns true if the given object is an instance of CodegurureviewerRepositoryAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CodegurureviewerRepositoryAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CodegurureviewerRepositoryAssociation.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    public /*out*/ readonly connectionArn!: pulumi.Output<string>;
    public readonly kmsKeyDetails!: pulumi.Output<outputs.CodegurureviewerRepositoryAssociationKmsKeyDetails | undefined>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public /*out*/ readonly providerType!: pulumi.Output<string>;
    public readonly repository!: pulumi.Output<outputs.CodegurureviewerRepositoryAssociationRepository>;
    public /*out*/ readonly s3RepositoryDetails!: pulumi.Output<outputs.CodegurureviewerRepositoryAssociationS3RepositoryDetail[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly stateReason!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.CodegurureviewerRepositoryAssociationTimeouts | undefined>;

    /**
     * Create a CodegurureviewerRepositoryAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CodegurureviewerRepositoryAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CodegurureviewerRepositoryAssociationArgs | CodegurureviewerRepositoryAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CodegurureviewerRepositoryAssociationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["connectionArn"] = state ? state.connectionArn : undefined;
            resourceInputs["kmsKeyDetails"] = state ? state.kmsKeyDetails : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["s3RepositoryDetails"] = state ? state.s3RepositoryDetails : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateReason"] = state ? state.stateReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as CodegurureviewerRepositoryAssociationArgs | undefined;
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["kmsKeyDetails"] = args ? args.kmsKeyDetails : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
            resourceInputs["connectionArn"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["providerType"] = undefined /*out*/;
            resourceInputs["s3RepositoryDetails"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateReason"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CodegurureviewerRepositoryAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CodegurureviewerRepositoryAssociation resources.
 */
export interface CodegurureviewerRepositoryAssociationState {
    arn?: pulumi.Input<string>;
    associationId?: pulumi.Input<string>;
    connectionArn?: pulumi.Input<string>;
    kmsKeyDetails?: pulumi.Input<inputs.CodegurureviewerRepositoryAssociationKmsKeyDetails>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    providerType?: pulumi.Input<string>;
    repository?: pulumi.Input<inputs.CodegurureviewerRepositoryAssociationRepository>;
    s3RepositoryDetails?: pulumi.Input<pulumi.Input<inputs.CodegurureviewerRepositoryAssociationS3RepositoryDetail>[]>;
    state?: pulumi.Input<string>;
    stateReason?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CodegurureviewerRepositoryAssociationTimeouts>;
}

/**
 * The set of arguments for constructing a CodegurureviewerRepositoryAssociation resource.
 */
export interface CodegurureviewerRepositoryAssociationArgs {
    kmsKeyDetails?: pulumi.Input<inputs.CodegurureviewerRepositoryAssociationKmsKeyDetails>;
    repository: pulumi.Input<inputs.CodegurureviewerRepositoryAssociationRepository>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.CodegurureviewerRepositoryAssociationTimeouts>;
}
