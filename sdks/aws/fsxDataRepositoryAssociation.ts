// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FsxDataRepositoryAssociation extends pulumi.CustomResource {
    /**
     * Get an existing FsxDataRepositoryAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FsxDataRepositoryAssociationState, opts?: pulumi.CustomResourceOptions): FsxDataRepositoryAssociation {
        return new FsxDataRepositoryAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/fsxDataRepositoryAssociation:FsxDataRepositoryAssociation';

    /**
     * Returns true if the given object is an instance of FsxDataRepositoryAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FsxDataRepositoryAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FsxDataRepositoryAssociation.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly associationId!: pulumi.Output<string>;
    public readonly batchImportMetaDataOnCreate!: pulumi.Output<boolean | undefined>;
    public readonly dataRepositoryPath!: pulumi.Output<string>;
    public readonly deleteDataInFilesystem!: pulumi.Output<boolean | undefined>;
    public readonly fileSystemId!: pulumi.Output<string>;
    public readonly fileSystemPath!: pulumi.Output<string>;
    public readonly importedFileChunkSize!: pulumi.Output<number>;
    public readonly s3!: pulumi.Output<outputs.FsxDataRepositoryAssociationS3 | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.FsxDataRepositoryAssociationTimeouts | undefined>;

    /**
     * Create a FsxDataRepositoryAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FsxDataRepositoryAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FsxDataRepositoryAssociationArgs | FsxDataRepositoryAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FsxDataRepositoryAssociationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["associationId"] = state ? state.associationId : undefined;
            resourceInputs["batchImportMetaDataOnCreate"] = state ? state.batchImportMetaDataOnCreate : undefined;
            resourceInputs["dataRepositoryPath"] = state ? state.dataRepositoryPath : undefined;
            resourceInputs["deleteDataInFilesystem"] = state ? state.deleteDataInFilesystem : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["fileSystemPath"] = state ? state.fileSystemPath : undefined;
            resourceInputs["importedFileChunkSize"] = state ? state.importedFileChunkSize : undefined;
            resourceInputs["s3"] = state ? state.s3 : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as FsxDataRepositoryAssociationArgs | undefined;
            if ((!args || args.dataRepositoryPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataRepositoryPath'");
            }
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.fileSystemPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemPath'");
            }
            resourceInputs["batchImportMetaDataOnCreate"] = args ? args.batchImportMetaDataOnCreate : undefined;
            resourceInputs["dataRepositoryPath"] = args ? args.dataRepositoryPath : undefined;
            resourceInputs["deleteDataInFilesystem"] = args ? args.deleteDataInFilesystem : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["fileSystemPath"] = args ? args.fileSystemPath : undefined;
            resourceInputs["importedFileChunkSize"] = args ? args.importedFileChunkSize : undefined;
            resourceInputs["s3"] = args ? args.s3 : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["associationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FsxDataRepositoryAssociation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FsxDataRepositoryAssociation resources.
 */
export interface FsxDataRepositoryAssociationState {
    arn?: pulumi.Input<string>;
    associationId?: pulumi.Input<string>;
    batchImportMetaDataOnCreate?: pulumi.Input<boolean>;
    dataRepositoryPath?: pulumi.Input<string>;
    deleteDataInFilesystem?: pulumi.Input<boolean>;
    fileSystemId?: pulumi.Input<string>;
    fileSystemPath?: pulumi.Input<string>;
    importedFileChunkSize?: pulumi.Input<number>;
    s3?: pulumi.Input<inputs.FsxDataRepositoryAssociationS3>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.FsxDataRepositoryAssociationTimeouts>;
}

/**
 * The set of arguments for constructing a FsxDataRepositoryAssociation resource.
 */
export interface FsxDataRepositoryAssociationArgs {
    batchImportMetaDataOnCreate?: pulumi.Input<boolean>;
    dataRepositoryPath: pulumi.Input<string>;
    deleteDataInFilesystem?: pulumi.Input<boolean>;
    fileSystemId: pulumi.Input<string>;
    fileSystemPath: pulumi.Input<string>;
    importedFileChunkSize?: pulumi.Input<number>;
    s3?: pulumi.Input<inputs.FsxDataRepositoryAssociationS3>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.FsxDataRepositoryAssociationTimeouts>;
}
