// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEc2TransitGateway(args?: GetEc2TransitGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetEc2TransitGatewayResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getEc2TransitGateway:getEc2TransitGateway", {
        "filters": args.filters,
        "id": args.id,
        "tags": args.tags,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEc2TransitGateway.
 */
export interface GetEc2TransitGatewayArgs {
    filters?: inputs.GetEc2TransitGatewayFilter[];
    id?: string;
    tags?: {[key: string]: string};
    timeouts?: inputs.GetEc2TransitGatewayTimeouts;
}

/**
 * A collection of values returned by getEc2TransitGateway.
 */
export interface GetEc2TransitGatewayResult {
    readonly amazonSideAsn: number;
    readonly arn: string;
    readonly associationDefaultRouteTableId: string;
    readonly autoAcceptSharedAttachments: string;
    readonly defaultRouteTableAssociation: string;
    readonly defaultRouteTablePropagation: string;
    readonly description: string;
    readonly dnsSupport: string;
    readonly filters?: outputs.GetEc2TransitGatewayFilter[];
    readonly id: string;
    readonly multicastSupport: string;
    readonly ownerId: string;
    readonly propagationDefaultRouteTableId: string;
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetEc2TransitGatewayTimeouts;
    readonly transitGatewayCidrBlocks: string[];
    readonly vpnEcmpSupport: string;
}
export function getEc2TransitGatewayOutput(args?: GetEc2TransitGatewayOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEc2TransitGatewayResult> {
    return pulumi.output(args).apply((a: any) => getEc2TransitGateway(a, opts))
}

/**
 * A collection of arguments for invoking getEc2TransitGateway.
 */
export interface GetEc2TransitGatewayOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetEc2TransitGatewayFilterArgs>[]>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GetEc2TransitGatewayTimeoutsArgs>;
}
