// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class QuicksightIngestion extends pulumi.CustomResource {
    /**
     * Get an existing QuicksightIngestion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QuicksightIngestionState, opts?: pulumi.CustomResourceOptions): QuicksightIngestion {
        return new QuicksightIngestion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/quicksightIngestion:QuicksightIngestion';

    /**
     * Returns true if the given object is an instance of QuicksightIngestion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QuicksightIngestion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QuicksightIngestion.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly awsAccountId!: pulumi.Output<string>;
    public readonly dataSetId!: pulumi.Output<string>;
    public readonly ingestionId!: pulumi.Output<string>;
    public /*out*/ readonly ingestionStatus!: pulumi.Output<string>;
    public readonly ingestionType!: pulumi.Output<string>;

    /**
     * Create a QuicksightIngestion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QuicksightIngestionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QuicksightIngestionArgs | QuicksightIngestionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QuicksightIngestionState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["dataSetId"] = state ? state.dataSetId : undefined;
            resourceInputs["ingestionId"] = state ? state.ingestionId : undefined;
            resourceInputs["ingestionStatus"] = state ? state.ingestionStatus : undefined;
            resourceInputs["ingestionType"] = state ? state.ingestionType : undefined;
        } else {
            const args = argsOrState as QuicksightIngestionArgs | undefined;
            if ((!args || args.dataSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataSetId'");
            }
            if ((!args || args.ingestionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingestionId'");
            }
            if ((!args || args.ingestionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingestionType'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["dataSetId"] = args ? args.dataSetId : undefined;
            resourceInputs["ingestionId"] = args ? args.ingestionId : undefined;
            resourceInputs["ingestionType"] = args ? args.ingestionType : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ingestionStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QuicksightIngestion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering QuicksightIngestion resources.
 */
export interface QuicksightIngestionState {
    arn?: pulumi.Input<string>;
    awsAccountId?: pulumi.Input<string>;
    dataSetId?: pulumi.Input<string>;
    ingestionId?: pulumi.Input<string>;
    ingestionStatus?: pulumi.Input<string>;
    ingestionType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a QuicksightIngestion resource.
 */
export interface QuicksightIngestionArgs {
    awsAccountId?: pulumi.Input<string>;
    dataSetId: pulumi.Input<string>;
    ingestionId: pulumi.Input<string>;
    ingestionType: pulumi.Input<string>;
}
