// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DatazoneFormType extends pulumi.CustomResource {
    /**
     * Get an existing DatazoneFormType resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatazoneFormTypeState, opts?: pulumi.CustomResourceOptions): DatazoneFormType {
        return new DatazoneFormType(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/datazoneFormType:DatazoneFormType';

    /**
     * Returns true if the given object is an instance of DatazoneFormType.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatazoneFormType {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatazoneFormType.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly domainIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly imports!: pulumi.Output<outputs.DatazoneFormTypeImport[]>;
    public readonly models!: pulumi.Output<outputs.DatazoneFormTypeModel[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly originDomainId!: pulumi.Output<string>;
    public /*out*/ readonly originProjectId!: pulumi.Output<string>;
    public readonly owningProjectIdentifier!: pulumi.Output<string>;
    public /*out*/ readonly revision!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DatazoneFormTypeTimeouts | undefined>;

    /**
     * Create a DatazoneFormType resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatazoneFormTypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatazoneFormTypeArgs | DatazoneFormTypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatazoneFormTypeState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainIdentifier"] = state ? state.domainIdentifier : undefined;
            resourceInputs["imports"] = state ? state.imports : undefined;
            resourceInputs["models"] = state ? state.models : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originDomainId"] = state ? state.originDomainId : undefined;
            resourceInputs["originProjectId"] = state ? state.originProjectId : undefined;
            resourceInputs["owningProjectIdentifier"] = state ? state.owningProjectIdentifier : undefined;
            resourceInputs["revision"] = state ? state.revision : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as DatazoneFormTypeArgs | undefined;
            if ((!args || args.domainIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainIdentifier'");
            }
            if ((!args || args.owningProjectIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owningProjectIdentifier'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainIdentifier"] = args ? args.domainIdentifier : undefined;
            resourceInputs["models"] = args ? args.models : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owningProjectIdentifier"] = args ? args.owningProjectIdentifier : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["imports"] = undefined /*out*/;
            resourceInputs["originDomainId"] = undefined /*out*/;
            resourceInputs["originProjectId"] = undefined /*out*/;
            resourceInputs["revision"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatazoneFormType.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DatazoneFormType resources.
 */
export interface DatazoneFormTypeState {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainIdentifier?: pulumi.Input<string>;
    imports?: pulumi.Input<pulumi.Input<inputs.DatazoneFormTypeImport>[]>;
    models?: pulumi.Input<pulumi.Input<inputs.DatazoneFormTypeModel>[]>;
    name?: pulumi.Input<string>;
    originDomainId?: pulumi.Input<string>;
    originProjectId?: pulumi.Input<string>;
    owningProjectIdentifier?: pulumi.Input<string>;
    revision?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatazoneFormTypeTimeouts>;
}

/**
 * The set of arguments for constructing a DatazoneFormType resource.
 */
export interface DatazoneFormTypeArgs {
    description?: pulumi.Input<string>;
    domainIdentifier: pulumi.Input<string>;
    models?: pulumi.Input<pulumi.Input<inputs.DatazoneFormTypeModel>[]>;
    name?: pulumi.Input<string>;
    owningProjectIdentifier: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DatazoneFormTypeTimeouts>;
}
