// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIdentitystoreUser(args: GetIdentitystoreUserArgs, opts?: pulumi.InvokeOptions): Promise<GetIdentitystoreUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getIdentitystoreUser:getIdentitystoreUser", {
        "alternateIdentifier": args.alternateIdentifier,
        "filter": args.filter,
        "id": args.id,
        "identityStoreId": args.identityStoreId,
        "userId": args.userId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIdentitystoreUser.
 */
export interface GetIdentitystoreUserArgs {
    alternateIdentifier?: inputs.GetIdentitystoreUserAlternateIdentifier;
    /**
     * @deprecated Deprecated
     */
    filter?: inputs.GetIdentitystoreUserFilter;
    id?: string;
    identityStoreId: string;
    userId?: string;
}

/**
 * A collection of values returned by getIdentitystoreUser.
 */
export interface GetIdentitystoreUserResult {
    readonly addresses: outputs.GetIdentitystoreUserAddress[];
    readonly alternateIdentifier?: outputs.GetIdentitystoreUserAlternateIdentifier;
    readonly displayName: string;
    readonly emails: outputs.GetIdentitystoreUserEmail[];
    readonly externalIds: outputs.GetIdentitystoreUserExternalId[];
    /**
     * @deprecated Deprecated
     */
    readonly filter?: outputs.GetIdentitystoreUserFilter;
    readonly id: string;
    readonly identityStoreId: string;
    readonly locale: string;
    readonly names: outputs.GetIdentitystoreUserName[];
    readonly nickname: string;
    readonly phoneNumbers: outputs.GetIdentitystoreUserPhoneNumber[];
    readonly preferredLanguage: string;
    readonly profileUrl: string;
    readonly timezone: string;
    readonly title: string;
    readonly userId: string;
    readonly userName: string;
    readonly userType: string;
}
export function getIdentitystoreUserOutput(args: GetIdentitystoreUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIdentitystoreUserResult> {
    return pulumi.output(args).apply((a: any) => getIdentitystoreUser(a, opts))
}

/**
 * A collection of arguments for invoking getIdentitystoreUser.
 */
export interface GetIdentitystoreUserOutputArgs {
    alternateIdentifier?: pulumi.Input<inputs.GetIdentitystoreUserAlternateIdentifierArgs>;
    /**
     * @deprecated Deprecated
     */
    filter?: pulumi.Input<inputs.GetIdentitystoreUserFilterArgs>;
    id?: pulumi.Input<string>;
    identityStoreId: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}
