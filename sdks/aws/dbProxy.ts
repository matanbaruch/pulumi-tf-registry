// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbProxy extends pulumi.CustomResource {
    /**
     * Get an existing DbProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbProxyState, opts?: pulumi.CustomResourceOptions): DbProxy {
        return new DbProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/dbProxy:DbProxy';

    /**
     * Returns true if the given object is an instance of DbProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbProxy.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly auths!: pulumi.Output<outputs.DbProxyAuth[]>;
    public readonly debugLogging!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly engineFamily!: pulumi.Output<string>;
    public readonly idleClientTimeout!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly requireTls!: pulumi.Output<boolean | undefined>;
    public readonly roleArn!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.DbProxyTimeouts | undefined>;
    public readonly vpcSecurityGroupIds!: pulumi.Output<string[]>;
    public readonly vpcSubnetIds!: pulumi.Output<string[]>;

    /**
     * Create a DbProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbProxyArgs | DbProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbProxyState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["auths"] = state ? state.auths : undefined;
            resourceInputs["debugLogging"] = state ? state.debugLogging : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["engineFamily"] = state ? state.engineFamily : undefined;
            resourceInputs["idleClientTimeout"] = state ? state.idleClientTimeout : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requireTls"] = state ? state.requireTls : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = state ? state.vpcSecurityGroupIds : undefined;
            resourceInputs["vpcSubnetIds"] = state ? state.vpcSubnetIds : undefined;
        } else {
            const args = argsOrState as DbProxyArgs | undefined;
            if ((!args || args.auths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'auths'");
            }
            if ((!args || args.engineFamily === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineFamily'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.vpcSubnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcSubnetIds'");
            }
            resourceInputs["auths"] = args ? args.auths : undefined;
            resourceInputs["debugLogging"] = args ? args.debugLogging : undefined;
            resourceInputs["engineFamily"] = args ? args.engineFamily : undefined;
            resourceInputs["idleClientTimeout"] = args ? args.idleClientTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requireTls"] = args ? args.requireTls : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcSecurityGroupIds"] = args ? args.vpcSecurityGroupIds : undefined;
            resourceInputs["vpcSubnetIds"] = args ? args.vpcSubnetIds : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbProxy resources.
 */
export interface DbProxyState {
    arn?: pulumi.Input<string>;
    auths?: pulumi.Input<pulumi.Input<inputs.DbProxyAuth>[]>;
    debugLogging?: pulumi.Input<boolean>;
    endpoint?: pulumi.Input<string>;
    engineFamily?: pulumi.Input<string>;
    idleClientTimeout?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    requireTls?: pulumi.Input<boolean>;
    roleArn?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DbProxyTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    vpcSubnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a DbProxy resource.
 */
export interface DbProxyArgs {
    auths: pulumi.Input<pulumi.Input<inputs.DbProxyAuth>[]>;
    debugLogging?: pulumi.Input<boolean>;
    engineFamily: pulumi.Input<string>;
    idleClientTimeout?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    requireTls?: pulumi.Input<boolean>;
    roleArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.DbProxyTimeouts>;
    vpcSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    vpcSubnetIds: pulumi.Input<pulumi.Input<string>[]>;
}
