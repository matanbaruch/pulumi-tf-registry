// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLb(args?: GetLbArgs, opts?: pulumi.InvokeOptions): Promise<GetLbResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:index/getLb:getLb", {
        "arn": args.arn,
        "id": args.id,
        "name": args.name,
        "tags": args.tags,
        "timeouts": args.timeouts,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLb.
 */
export interface GetLbArgs {
    arn?: string;
    id?: string;
    name?: string;
    tags?: {[key: string]: string};
    timeouts?: inputs.GetLbTimeouts;
}

/**
 * A collection of values returned by getLb.
 */
export interface GetLbResult {
    readonly accessLogs: outputs.GetLbAccessLog[];
    readonly arn: string;
    readonly arnSuffix: string;
    readonly clientKeepAlive: number;
    readonly connectionLogs: outputs.GetLbConnectionLog[];
    readonly customerOwnedIpv4Pool: string;
    readonly desyncMitigationMode: string;
    readonly dnsName: string;
    readonly dnsRecordClientRoutingPolicy: string;
    readonly dropInvalidHeaderFields: boolean;
    readonly enableCrossZoneLoadBalancing: boolean;
    readonly enableDeletionProtection: boolean;
    readonly enableHttp2: boolean;
    readonly enableTlsVersionAndCipherSuiteHeaders: boolean;
    readonly enableWafFailOpen: boolean;
    readonly enableXffClientPort: boolean;
    readonly enforceSecurityGroupInboundRulesOnPrivateLinkTraffic: string;
    readonly id: string;
    readonly idleTimeout: number;
    readonly internal: boolean;
    readonly ipAddressType: string;
    readonly loadBalancerType: string;
    readonly name: string;
    readonly preserveHostHeader: boolean;
    readonly securityGroups: string[];
    readonly subnetMappings: outputs.GetLbSubnetMapping[];
    readonly subnets: string[];
    readonly tags: {[key: string]: string};
    readonly timeouts?: outputs.GetLbTimeouts;
    readonly vpcId: string;
    readonly xffHeaderProcessingMode: string;
    readonly zoneId: string;
}
export function getLbOutput(args?: GetLbOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLbResult> {
    return pulumi.output(args).apply((a: any) => getLb(a, opts))
}

/**
 * A collection of arguments for invoking getLb.
 */
export interface GetLbOutputArgs {
    arn?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.GetLbTimeoutsArgs>;
}
