// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lb extends pulumi.CustomResource {
    /**
     * Get an existing Lb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbState, opts?: pulumi.CustomResourceOptions): Lb {
        return new Lb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/lb:Lb';

    /**
     * Returns true if the given object is an instance of Lb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lb.__pulumiType;
    }

    public readonly accessLogs!: pulumi.Output<outputs.LbAccessLogs | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly arnSuffix!: pulumi.Output<string>;
    public readonly clientKeepAlive!: pulumi.Output<number | undefined>;
    public readonly connectionLogs!: pulumi.Output<outputs.LbConnectionLogs | undefined>;
    public readonly customerOwnedIpv4Pool!: pulumi.Output<string | undefined>;
    public readonly desyncMitigationMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public readonly dnsRecordClientRoutingPolicy!: pulumi.Output<string | undefined>;
    public readonly dropInvalidHeaderFields!: pulumi.Output<boolean | undefined>;
    public readonly enableCrossZoneLoadBalancing!: pulumi.Output<boolean | undefined>;
    public readonly enableDeletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly enableHttp2!: pulumi.Output<boolean | undefined>;
    public readonly enableTlsVersionAndCipherSuiteHeaders!: pulumi.Output<boolean | undefined>;
    public readonly enableWafFailOpen!: pulumi.Output<boolean | undefined>;
    public readonly enableXffClientPort!: pulumi.Output<boolean | undefined>;
    public readonly enforceSecurityGroupInboundRulesOnPrivateLinkTraffic!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly internal!: pulumi.Output<boolean>;
    public readonly ipAddressType!: pulumi.Output<string>;
    public readonly loadBalancerType!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namePrefix!: pulumi.Output<string>;
    public readonly preserveHostHeader!: pulumi.Output<boolean | undefined>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly subnetMappings!: pulumi.Output<outputs.LbSubnetMapping[] | undefined>;
    public readonly subnets!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.LbTimeouts | undefined>;
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    public readonly xffHeaderProcessingMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Lb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbArgs | LbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbState | undefined;
            resourceInputs["accessLogs"] = state ? state.accessLogs : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["arnSuffix"] = state ? state.arnSuffix : undefined;
            resourceInputs["clientKeepAlive"] = state ? state.clientKeepAlive : undefined;
            resourceInputs["connectionLogs"] = state ? state.connectionLogs : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = state ? state.customerOwnedIpv4Pool : undefined;
            resourceInputs["desyncMitigationMode"] = state ? state.desyncMitigationMode : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["dnsRecordClientRoutingPolicy"] = state ? state.dnsRecordClientRoutingPolicy : undefined;
            resourceInputs["dropInvalidHeaderFields"] = state ? state.dropInvalidHeaderFields : undefined;
            resourceInputs["enableCrossZoneLoadBalancing"] = state ? state.enableCrossZoneLoadBalancing : undefined;
            resourceInputs["enableDeletionProtection"] = state ? state.enableDeletionProtection : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["enableTlsVersionAndCipherSuiteHeaders"] = state ? state.enableTlsVersionAndCipherSuiteHeaders : undefined;
            resourceInputs["enableWafFailOpen"] = state ? state.enableWafFailOpen : undefined;
            resourceInputs["enableXffClientPort"] = state ? state.enableXffClientPort : undefined;
            resourceInputs["enforceSecurityGroupInboundRulesOnPrivateLinkTraffic"] = state ? state.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["internal"] = state ? state.internal : undefined;
            resourceInputs["ipAddressType"] = state ? state.ipAddressType : undefined;
            resourceInputs["loadBalancerType"] = state ? state.loadBalancerType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namePrefix"] = state ? state.namePrefix : undefined;
            resourceInputs["preserveHostHeader"] = state ? state.preserveHostHeader : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["subnetMappings"] = state ? state.subnetMappings : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["xffHeaderProcessingMode"] = state ? state.xffHeaderProcessingMode : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as LbArgs | undefined;
            resourceInputs["accessLogs"] = args ? args.accessLogs : undefined;
            resourceInputs["clientKeepAlive"] = args ? args.clientKeepAlive : undefined;
            resourceInputs["connectionLogs"] = args ? args.connectionLogs : undefined;
            resourceInputs["customerOwnedIpv4Pool"] = args ? args.customerOwnedIpv4Pool : undefined;
            resourceInputs["desyncMitigationMode"] = args ? args.desyncMitigationMode : undefined;
            resourceInputs["dnsRecordClientRoutingPolicy"] = args ? args.dnsRecordClientRoutingPolicy : undefined;
            resourceInputs["dropInvalidHeaderFields"] = args ? args.dropInvalidHeaderFields : undefined;
            resourceInputs["enableCrossZoneLoadBalancing"] = args ? args.enableCrossZoneLoadBalancing : undefined;
            resourceInputs["enableDeletionProtection"] = args ? args.enableDeletionProtection : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["enableTlsVersionAndCipherSuiteHeaders"] = args ? args.enableTlsVersionAndCipherSuiteHeaders : undefined;
            resourceInputs["enableWafFailOpen"] = args ? args.enableWafFailOpen : undefined;
            resourceInputs["enableXffClientPort"] = args ? args.enableXffClientPort : undefined;
            resourceInputs["enforceSecurityGroupInboundRulesOnPrivateLinkTraffic"] = args ? args.enforceSecurityGroupInboundRulesOnPrivateLinkTraffic : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["internal"] = args ? args.internal : undefined;
            resourceInputs["ipAddressType"] = args ? args.ipAddressType : undefined;
            resourceInputs["loadBalancerType"] = args ? args.loadBalancerType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namePrefix"] = args ? args.namePrefix : undefined;
            resourceInputs["preserveHostHeader"] = args ? args.preserveHostHeader : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["subnetMappings"] = args ? args.subnetMappings : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["xffHeaderProcessingMode"] = args ? args.xffHeaderProcessingMode : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["arnSuffix"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lb resources.
 */
export interface LbState {
    accessLogs?: pulumi.Input<inputs.LbAccessLogs>;
    arn?: pulumi.Input<string>;
    arnSuffix?: pulumi.Input<string>;
    clientKeepAlive?: pulumi.Input<number>;
    connectionLogs?: pulumi.Input<inputs.LbConnectionLogs>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    desyncMitigationMode?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    dnsRecordClientRoutingPolicy?: pulumi.Input<string>;
    dropInvalidHeaderFields?: pulumi.Input<boolean>;
    enableCrossZoneLoadBalancing?: pulumi.Input<boolean>;
    enableDeletionProtection?: pulumi.Input<boolean>;
    enableHttp2?: pulumi.Input<boolean>;
    enableTlsVersionAndCipherSuiteHeaders?: pulumi.Input<boolean>;
    enableWafFailOpen?: pulumi.Input<boolean>;
    enableXffClientPort?: pulumi.Input<boolean>;
    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    internal?: pulumi.Input<boolean>;
    ipAddressType?: pulumi.Input<string>;
    loadBalancerType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    preserveHostHeader?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetMappings?: pulumi.Input<pulumi.Input<inputs.LbSubnetMapping>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LbTimeouts>;
    vpcId?: pulumi.Input<string>;
    xffHeaderProcessingMode?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lb resource.
 */
export interface LbArgs {
    accessLogs?: pulumi.Input<inputs.LbAccessLogs>;
    clientKeepAlive?: pulumi.Input<number>;
    connectionLogs?: pulumi.Input<inputs.LbConnectionLogs>;
    customerOwnedIpv4Pool?: pulumi.Input<string>;
    desyncMitigationMode?: pulumi.Input<string>;
    dnsRecordClientRoutingPolicy?: pulumi.Input<string>;
    dropInvalidHeaderFields?: pulumi.Input<boolean>;
    enableCrossZoneLoadBalancing?: pulumi.Input<boolean>;
    enableDeletionProtection?: pulumi.Input<boolean>;
    enableHttp2?: pulumi.Input<boolean>;
    enableTlsVersionAndCipherSuiteHeaders?: pulumi.Input<boolean>;
    enableWafFailOpen?: pulumi.Input<boolean>;
    enableXffClientPort?: pulumi.Input<boolean>;
    enforceSecurityGroupInboundRulesOnPrivateLinkTraffic?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    internal?: pulumi.Input<boolean>;
    ipAddressType?: pulumi.Input<string>;
    loadBalancerType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    preserveHostHeader?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetMappings?: pulumi.Input<pulumi.Input<inputs.LbSubnetMapping>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.LbTimeouts>;
    xffHeaderProcessingMode?: pulumi.Input<string>;
}
