// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConfigRemediationConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing ConfigRemediationConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigRemediationConfigurationState, opts?: pulumi.CustomResourceOptions): ConfigRemediationConfiguration {
        return new ConfigRemediationConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/configRemediationConfiguration:ConfigRemediationConfiguration';

    /**
     * Returns true if the given object is an instance of ConfigRemediationConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigRemediationConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigRemediationConfiguration.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly automatic!: pulumi.Output<boolean | undefined>;
    public readonly configRuleName!: pulumi.Output<string>;
    public readonly executionControls!: pulumi.Output<outputs.ConfigRemediationConfigurationExecutionControls | undefined>;
    public readonly maximumAutomaticAttempts!: pulumi.Output<number | undefined>;
    public readonly parameters!: pulumi.Output<outputs.ConfigRemediationConfigurationParameter[] | undefined>;
    public readonly resourceType!: pulumi.Output<string | undefined>;
    public readonly retryAttemptSeconds!: pulumi.Output<number | undefined>;
    public readonly targetId!: pulumi.Output<string>;
    public readonly targetType!: pulumi.Output<string>;
    public readonly targetVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a ConfigRemediationConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigRemediationConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigRemediationConfigurationArgs | ConfigRemediationConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigRemediationConfigurationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["automatic"] = state ? state.automatic : undefined;
            resourceInputs["configRuleName"] = state ? state.configRuleName : undefined;
            resourceInputs["executionControls"] = state ? state.executionControls : undefined;
            resourceInputs["maximumAutomaticAttempts"] = state ? state.maximumAutomaticAttempts : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["retryAttemptSeconds"] = state ? state.retryAttemptSeconds : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["targetVersion"] = state ? state.targetVersion : undefined;
        } else {
            const args = argsOrState as ConfigRemediationConfigurationArgs | undefined;
            if ((!args || args.configRuleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configRuleName'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["automatic"] = args ? args.automatic : undefined;
            resourceInputs["configRuleName"] = args ? args.configRuleName : undefined;
            resourceInputs["executionControls"] = args ? args.executionControls : undefined;
            resourceInputs["maximumAutomaticAttempts"] = args ? args.maximumAutomaticAttempts : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["retryAttemptSeconds"] = args ? args.retryAttemptSeconds : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["targetVersion"] = args ? args.targetVersion : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigRemediationConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigRemediationConfiguration resources.
 */
export interface ConfigRemediationConfigurationState {
    arn?: pulumi.Input<string>;
    automatic?: pulumi.Input<boolean>;
    configRuleName?: pulumi.Input<string>;
    executionControls?: pulumi.Input<inputs.ConfigRemediationConfigurationExecutionControls>;
    maximumAutomaticAttempts?: pulumi.Input<number>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ConfigRemediationConfigurationParameter>[]>;
    resourceType?: pulumi.Input<string>;
    retryAttemptSeconds?: pulumi.Input<number>;
    targetId?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
    targetVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigRemediationConfiguration resource.
 */
export interface ConfigRemediationConfigurationArgs {
    automatic?: pulumi.Input<boolean>;
    configRuleName: pulumi.Input<string>;
    executionControls?: pulumi.Input<inputs.ConfigRemediationConfigurationExecutionControls>;
    maximumAutomaticAttempts?: pulumi.Input<number>;
    parameters?: pulumi.Input<pulumi.Input<inputs.ConfigRemediationConfigurationParameter>[]>;
    resourceType?: pulumi.Input<string>;
    retryAttemptSeconds?: pulumi.Input<number>;
    targetId: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
    targetVersion?: pulumi.Input<string>;
}
