// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SsmPatchBaseline extends pulumi.CustomResource {
    /**
     * Get an existing SsmPatchBaseline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsmPatchBaselineState, opts?: pulumi.CustomResourceOptions): SsmPatchBaseline {
        return new SsmPatchBaseline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:index/ssmPatchBaseline:SsmPatchBaseline';

    /**
     * Returns true if the given object is an instance of SsmPatchBaseline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsmPatchBaseline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsmPatchBaseline.__pulumiType;
    }

    public readonly approvalRules!: pulumi.Output<outputs.SsmPatchBaselineApprovalRule[] | undefined>;
    public readonly approvedPatches!: pulumi.Output<string[] | undefined>;
    public readonly approvedPatchesComplianceLevel!: pulumi.Output<string | undefined>;
    public readonly approvedPatchesEnableNonSecurity!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly globalFilters!: pulumi.Output<outputs.SsmPatchBaselineGlobalFilter[] | undefined>;
    public /*out*/ readonly json!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly operatingSystem!: pulumi.Output<string | undefined>;
    public readonly rejectedPatches!: pulumi.Output<string[] | undefined>;
    public readonly rejectedPatchesAction!: pulumi.Output<string>;
    public readonly sources!: pulumi.Output<outputs.SsmPatchBaselineSource[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a SsmPatchBaseline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SsmPatchBaselineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsmPatchBaselineArgs | SsmPatchBaselineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsmPatchBaselineState | undefined;
            resourceInputs["approvalRules"] = state ? state.approvalRules : undefined;
            resourceInputs["approvedPatches"] = state ? state.approvedPatches : undefined;
            resourceInputs["approvedPatchesComplianceLevel"] = state ? state.approvedPatchesComplianceLevel : undefined;
            resourceInputs["approvedPatchesEnableNonSecurity"] = state ? state.approvedPatchesEnableNonSecurity : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["globalFilters"] = state ? state.globalFilters : undefined;
            resourceInputs["json"] = state ? state.json : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingSystem"] = state ? state.operatingSystem : undefined;
            resourceInputs["rejectedPatches"] = state ? state.rejectedPatches : undefined;
            resourceInputs["rejectedPatchesAction"] = state ? state.rejectedPatchesAction : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as SsmPatchBaselineArgs | undefined;
            resourceInputs["approvalRules"] = args ? args.approvalRules : undefined;
            resourceInputs["approvedPatches"] = args ? args.approvedPatches : undefined;
            resourceInputs["approvedPatchesComplianceLevel"] = args ? args.approvedPatchesComplianceLevel : undefined;
            resourceInputs["approvedPatchesEnableNonSecurity"] = args ? args.approvedPatchesEnableNonSecurity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalFilters"] = args ? args.globalFilters : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatingSystem"] = args ? args.operatingSystem : undefined;
            resourceInputs["rejectedPatches"] = args ? args.rejectedPatches : undefined;
            resourceInputs["rejectedPatchesAction"] = args ? args.rejectedPatchesAction : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tagsAll"] = args ? args.tagsAll : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["json"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsmPatchBaseline.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsmPatchBaseline resources.
 */
export interface SsmPatchBaselineState {
    approvalRules?: pulumi.Input<pulumi.Input<inputs.SsmPatchBaselineApprovalRule>[]>;
    approvedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    approvedPatchesComplianceLevel?: pulumi.Input<string>;
    approvedPatchesEnableNonSecurity?: pulumi.Input<boolean>;
    arn?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    globalFilters?: pulumi.Input<pulumi.Input<inputs.SsmPatchBaselineGlobalFilter>[]>;
    json?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    rejectedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    rejectedPatchesAction?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.SsmPatchBaselineSource>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a SsmPatchBaseline resource.
 */
export interface SsmPatchBaselineArgs {
    approvalRules?: pulumi.Input<pulumi.Input<inputs.SsmPatchBaselineApprovalRule>[]>;
    approvedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    approvedPatchesComplianceLevel?: pulumi.Input<string>;
    approvedPatchesEnableNonSecurity?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    globalFilters?: pulumi.Input<pulumi.Input<inputs.SsmPatchBaselineGlobalFilter>[]>;
    name?: pulumi.Input<string>;
    operatingSystem?: pulumi.Input<string>;
    rejectedPatches?: pulumi.Input<pulumi.Input<string>[]>;
    rejectedPatchesAction?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.SsmPatchBaselineSource>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
