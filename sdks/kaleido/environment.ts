// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kaleido:index/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    public readonly blockPeriod!: pulumi.Output<number | undefined>;
    public readonly chainId!: pulumi.Output<number>;
    public readonly consensusType!: pulumi.Output<string>;
    public readonly consortiumId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly envType!: pulumi.Output<string>;
    public readonly multiRegion!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly prefundedAccounts!: pulumi.Output<{[key: string]: string}>;
    public readonly releaseId!: pulumi.Output<string>;
    /**
     * The decentralized nature of Kaleido means an environment might be shared with other accounts. When true only create if
     * name does not exist, and delete becomes a no-op.
     */
    public readonly sharedDeployment!: pulumi.Output<boolean | undefined>;
    public readonly testFeaturesJson!: pulumi.Output<string | undefined>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["blockPeriod"] = state ? state.blockPeriod : undefined;
            resourceInputs["chainId"] = state ? state.chainId : undefined;
            resourceInputs["consensusType"] = state ? state.consensusType : undefined;
            resourceInputs["consortiumId"] = state ? state.consortiumId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["envType"] = state ? state.envType : undefined;
            resourceInputs["multiRegion"] = state ? state.multiRegion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prefundedAccounts"] = state ? state.prefundedAccounts : undefined;
            resourceInputs["releaseId"] = state ? state.releaseId : undefined;
            resourceInputs["sharedDeployment"] = state ? state.sharedDeployment : undefined;
            resourceInputs["testFeaturesJson"] = state ? state.testFeaturesJson : undefined;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if ((!args || args.consensusType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consensusType'");
            }
            if ((!args || args.consortiumId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consortiumId'");
            }
            if ((!args || args.envType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envType'");
            }
            resourceInputs["blockPeriod"] = args ? args.blockPeriod : undefined;
            resourceInputs["chainId"] = args ? args.chainId : undefined;
            resourceInputs["consensusType"] = args ? args.consensusType : undefined;
            resourceInputs["consortiumId"] = args ? args.consortiumId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envType"] = args ? args.envType : undefined;
            resourceInputs["multiRegion"] = args ? args.multiRegion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prefundedAccounts"] = args ? args.prefundedAccounts : undefined;
            resourceInputs["releaseId"] = args ? args.releaseId : undefined;
            resourceInputs["sharedDeployment"] = args ? args.sharedDeployment : undefined;
            resourceInputs["testFeaturesJson"] = args ? args.testFeaturesJson : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Environment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    blockPeriod?: pulumi.Input<number>;
    chainId?: pulumi.Input<number>;
    consensusType?: pulumi.Input<string>;
    consortiumId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    envType?: pulumi.Input<string>;
    multiRegion?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    prefundedAccounts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    releaseId?: pulumi.Input<string>;
    /**
     * The decentralized nature of Kaleido means an environment might be shared with other accounts. When true only create if
     * name does not exist, and delete becomes a no-op.
     */
    sharedDeployment?: pulumi.Input<boolean>;
    testFeaturesJson?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    blockPeriod?: pulumi.Input<number>;
    chainId?: pulumi.Input<number>;
    consensusType: pulumi.Input<string>;
    consortiumId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    envType: pulumi.Input<string>;
    multiRegion?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    prefundedAccounts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    releaseId?: pulumi.Input<string>;
    /**
     * The decentralized nature of Kaleido means an environment might be shared with other accounts. When true only create if
     * name does not exist, and delete becomes a no-op.
     */
    sharedDeployment?: pulumi.Input<boolean>;
    testFeaturesJson?: pulumi.Input<string>;
}
