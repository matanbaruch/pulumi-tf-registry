// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Destination extends pulumi.CustomResource {
    /**
     * Get an existing Destination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DestinationState, opts?: pulumi.CustomResourceOptions): Destination {
        return new Destination(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kaleido:index/destination:Destination';

    /**
     * Returns true if the given object is an instance of Destination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Destination {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Destination.__pulumiType;
    }

    public readonly autoVerifyMembership!: pulumi.Output<boolean | undefined>;
    public readonly consortiumId!: pulumi.Output<string>;
    public readonly idregistryId!: pulumi.Output<string | undefined>;
    public readonly kaleidoManaged!: pulumi.Output<boolean | undefined>;
    public readonly membershipId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly serviceId!: pulumi.Output<string>;
    public readonly serviceType!: pulumi.Output<string>;

    /**
     * Create a Destination resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DestinationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DestinationArgs | DestinationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DestinationState | undefined;
            resourceInputs["autoVerifyMembership"] = state ? state.autoVerifyMembership : undefined;
            resourceInputs["consortiumId"] = state ? state.consortiumId : undefined;
            resourceInputs["idregistryId"] = state ? state.idregistryId : undefined;
            resourceInputs["kaleidoManaged"] = state ? state.kaleidoManaged : undefined;
            resourceInputs["membershipId"] = state ? state.membershipId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
        } else {
            const args = argsOrState as DestinationArgs | undefined;
            if ((!args || args.consortiumId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consortiumId'");
            }
            if ((!args || args.membershipId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipId'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.serviceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            resourceInputs["autoVerifyMembership"] = args ? args.autoVerifyMembership : undefined;
            resourceInputs["consortiumId"] = args ? args.consortiumId : undefined;
            resourceInputs["idregistryId"] = args ? args.idregistryId : undefined;
            resourceInputs["kaleidoManaged"] = args ? args.kaleidoManaged : undefined;
            resourceInputs["membershipId"] = args ? args.membershipId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Destination.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Destination resources.
 */
export interface DestinationState {
    autoVerifyMembership?: pulumi.Input<boolean>;
    consortiumId?: pulumi.Input<string>;
    idregistryId?: pulumi.Input<string>;
    kaleidoManaged?: pulumi.Input<boolean>;
    membershipId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Destination resource.
 */
export interface DestinationArgs {
    autoVerifyMembership?: pulumi.Input<boolean>;
    consortiumId: pulumi.Input<string>;
    idregistryId?: pulumi.Input<string>;
    kaleidoManaged?: pulumi.Input<boolean>;
    membershipId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serviceId: pulumi.Input<string>;
    serviceType: pulumi.Input<string>;
}
