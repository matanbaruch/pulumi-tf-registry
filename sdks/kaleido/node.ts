// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kaleido:index/node:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    public readonly backupId!: pulumi.Output<string | undefined>;
    public readonly bafId!: pulumi.Output<string | undefined>;
    public readonly consortiumId!: pulumi.Output<string>;
    public readonly databaseType!: pulumi.Output<string | undefined>;
    public readonly environmentId!: pulumi.Output<string>;
    public /*out*/ readonly firstUserAccount!: pulumi.Output<string>;
    public /*out*/ readonly httpsUrl!: pulumi.Output<string>;
    public /*out*/ readonly hybridPortAllocation!: pulumi.Output<number>;
    public readonly kmsId!: pulumi.Output<string | undefined>;
    public readonly membershipId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkingId!: pulumi.Output<string | undefined>;
    public readonly nodeConfigId!: pulumi.Output<string | undefined>;
    public readonly opsmetricId!: pulumi.Output<string | undefined>;
    public readonly remote!: pulumi.Output<boolean | undefined>;
    public readonly role!: pulumi.Output<string | undefined>;
    public readonly size!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NodeTimeouts | undefined>;
    public readonly updateTrigger!: pulumi.Output<string | undefined>;
    public /*out*/ readonly urls!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly websocketUrl!: pulumi.Output<string>;
    public readonly zoneId!: pulumi.Output<string | undefined>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeState | undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["bafId"] = state ? state.bafId : undefined;
            resourceInputs["consortiumId"] = state ? state.consortiumId : undefined;
            resourceInputs["databaseType"] = state ? state.databaseType : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["firstUserAccount"] = state ? state.firstUserAccount : undefined;
            resourceInputs["httpsUrl"] = state ? state.httpsUrl : undefined;
            resourceInputs["hybridPortAllocation"] = state ? state.hybridPortAllocation : undefined;
            resourceInputs["kmsId"] = state ? state.kmsId : undefined;
            resourceInputs["membershipId"] = state ? state.membershipId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkingId"] = state ? state.networkingId : undefined;
            resourceInputs["nodeConfigId"] = state ? state.nodeConfigId : undefined;
            resourceInputs["opsmetricId"] = state ? state.opsmetricId : undefined;
            resourceInputs["remote"] = state ? state.remote : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateTrigger"] = state ? state.updateTrigger : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
            resourceInputs["websocketUrl"] = state ? state.websocketUrl : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if ((!args || args.consortiumId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consortiumId'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.membershipId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'membershipId'");
            }
            resourceInputs["backupId"] = args ? args.backupId : undefined;
            resourceInputs["bafId"] = args ? args.bafId : undefined;
            resourceInputs["consortiumId"] = args ? args.consortiumId : undefined;
            resourceInputs["databaseType"] = args ? args.databaseType : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["kmsId"] = args ? args.kmsId : undefined;
            resourceInputs["membershipId"] = args ? args.membershipId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkingId"] = args ? args.networkingId : undefined;
            resourceInputs["nodeConfigId"] = args ? args.nodeConfigId : undefined;
            resourceInputs["opsmetricId"] = args ? args.opsmetricId : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["updateTrigger"] = args ? args.updateTrigger : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["firstUserAccount"] = undefined /*out*/;
            resourceInputs["httpsUrl"] = undefined /*out*/;
            resourceInputs["hybridPortAllocation"] = undefined /*out*/;
            resourceInputs["urls"] = undefined /*out*/;
            resourceInputs["websocketUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Node.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    backupId?: pulumi.Input<string>;
    bafId?: pulumi.Input<string>;
    consortiumId?: pulumi.Input<string>;
    databaseType?: pulumi.Input<string>;
    environmentId?: pulumi.Input<string>;
    firstUserAccount?: pulumi.Input<string>;
    httpsUrl?: pulumi.Input<string>;
    hybridPortAllocation?: pulumi.Input<number>;
    kmsId?: pulumi.Input<string>;
    membershipId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkingId?: pulumi.Input<string>;
    nodeConfigId?: pulumi.Input<string>;
    opsmetricId?: pulumi.Input<string>;
    remote?: pulumi.Input<boolean>;
    role?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NodeTimeouts>;
    updateTrigger?: pulumi.Input<string>;
    urls?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    websocketUrl?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    backupId?: pulumi.Input<string>;
    bafId?: pulumi.Input<string>;
    consortiumId: pulumi.Input<string>;
    databaseType?: pulumi.Input<string>;
    environmentId: pulumi.Input<string>;
    kmsId?: pulumi.Input<string>;
    membershipId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkingId?: pulumi.Input<string>;
    nodeConfigId?: pulumi.Input<string>;
    opsmetricId?: pulumi.Input<string>;
    remote?: pulumi.Input<boolean>;
    role?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NodeTimeouts>;
    updateTrigger?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}
