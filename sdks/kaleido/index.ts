// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppCredsArgs, AppCredsState } from "./appCreds";
export type AppCreds = import("./appCreds").AppCreds;
export const AppCreds: typeof import("./appCreds").AppCreds = null as any;
utilities.lazyLoad(exports, ["AppCreds"], () => require("./appCreds"));

export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { ConsortiumArgs, ConsortiumState } from "./consortium";
export type Consortium = import("./consortium").Consortium;
export const Consortium: typeof import("./consortium").Consortium = null as any;
utilities.lazyLoad(exports, ["Consortium"], () => require("./consortium"));

export { CzoneArgs, CzoneState } from "./czone";
export type Czone = import("./czone").Czone;
export const Czone: typeof import("./czone").Czone = null as any;
utilities.lazyLoad(exports, ["Czone"], () => require("./czone"));

export { DestinationArgs, DestinationState } from "./destination";
export type Destination = import("./destination").Destination;
export const Destination: typeof import("./destination").Destination = null as any;
utilities.lazyLoad(exports, ["Destination"], () => require("./destination"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { EzoneArgs, EzoneState } from "./ezone";
export type Ezone = import("./ezone").Ezone;
export const Ezone: typeof import("./ezone").Ezone = null as any;
utilities.lazyLoad(exports, ["Ezone"], () => require("./ezone"));

export { GetPrivatestackBridgeArgs, GetPrivatestackBridgeResult, GetPrivatestackBridgeOutputArgs } from "./getPrivatestackBridge";
export const getPrivatestackBridge: typeof import("./getPrivatestackBridge").getPrivatestackBridge = null as any;
export const getPrivatestackBridgeOutput: typeof import("./getPrivatestackBridge").getPrivatestackBridgeOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatestackBridge","getPrivatestackBridgeOutput"], () => require("./getPrivatestackBridge"));

export { InvitationArgs, InvitationState } from "./invitation";
export type Invitation = import("./invitation").Invitation;
export const Invitation: typeof import("./invitation").Invitation = null as any;
utilities.lazyLoad(exports, ["Invitation"], () => require("./invitation"));

export { MembershipArgs, MembershipState } from "./membership";
export type Membership = import("./membership").Membership;
export const Membership: typeof import("./membership").Membership = null as any;
utilities.lazyLoad(exports, ["Membership"], () => require("./membership"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kaleido:index/appCreds:AppCreds":
                return new AppCreds(name, <any>undefined, { urn })
            case "kaleido:index/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "kaleido:index/consortium:Consortium":
                return new Consortium(name, <any>undefined, { urn })
            case "kaleido:index/czone:Czone":
                return new Czone(name, <any>undefined, { urn })
            case "kaleido:index/destination:Destination":
                return new Destination(name, <any>undefined, { urn })
            case "kaleido:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "kaleido:index/ezone:Ezone":
                return new Ezone(name, <any>undefined, { urn })
            case "kaleido:index/invitation:Invitation":
                return new Invitation(name, <any>undefined, { urn })
            case "kaleido:index/membership:Membership":
                return new Membership(name, <any>undefined, { urn })
            case "kaleido:index/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "kaleido:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kaleido", "index/appCreds", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/configuration", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/consortium", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/czone", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/destination", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/environment", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/ezone", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/invitation", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/membership", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/node", _module)
pulumi.runtime.registerResourceModule("kaleido", "index/service", _module)
pulumi.runtime.registerResourcePackage("kaleido", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:kaleido") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
