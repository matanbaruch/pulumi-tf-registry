// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SdnPort extends pulumi.CustomResource {
    /**
     * Get an existing SdnPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SdnPortState, opts?: pulumi.CustomResourceOptions): SdnPort {
        return new SdnPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zenlayercloud:index/sdnPort:SdnPort';

    /**
     * Returns true if the given object is an instance of SdnPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SdnPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SdnPort.__pulumiType;
    }

    /**
     * Your business entity name. The entity name to be used on the Letter of Authorization (LOA).
     */
    public readonly businessEntityName!: pulumi.Output<string>;
    /**
     * The network connectivity state of port.
     */
    public /*out*/ readonly connectStatus!: pulumi.Output<string>;
    /**
     * Create time of the port.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * ID of data center.
     */
    public readonly datacenter!: pulumi.Output<string>;
    /**
     * The name of datacenter.
     */
    public /*out*/ readonly datacenterName!: pulumi.Output<string>;
    /**
     * Expired time of the port.
     */
    public /*out*/ readonly expiredTime!: pulumi.Output<string>;
    /**
     * Indicate whether to force delete the port. Default is `false`. If set true, the port will be permanently deleted instead
     * of being moved into the recycle bin.
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    /**
     * The LOA state.
     */
    public /*out*/ readonly loaStatus!: pulumi.Output<string>;
    /**
     * The LOA URL address.
     */
    public /*out*/ readonly loaUrl!: pulumi.Output<string>;
    /**
     * Port name. Up to 255 characters in length are allowed.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The charge type of port. Valid values: `PREPAID`, `POSTPAID`.
     */
    public /*out*/ readonly portChargeType!: pulumi.Output<string>;
    /**
     * The business status of port.
     */
    public /*out*/ readonly portStatus!: pulumi.Output<string>;
    /**
     * Type of port. eg. 1G/10G/40G.
     */
    public readonly portType!: pulumi.Output<string>;
    /**
     * Description of port.
     */
    public readonly remarks!: pulumi.Output<string | undefined>;

    /**
     * Create a SdnPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SdnPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SdnPortArgs | SdnPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SdnPortState | undefined;
            resourceInputs["businessEntityName"] = state ? state.businessEntityName : undefined;
            resourceInputs["connectStatus"] = state ? state.connectStatus : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["datacenterName"] = state ? state.datacenterName : undefined;
            resourceInputs["expiredTime"] = state ? state.expiredTime : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["loaStatus"] = state ? state.loaStatus : undefined;
            resourceInputs["loaUrl"] = state ? state.loaUrl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portChargeType"] = state ? state.portChargeType : undefined;
            resourceInputs["portStatus"] = state ? state.portStatus : undefined;
            resourceInputs["portType"] = state ? state.portType : undefined;
            resourceInputs["remarks"] = state ? state.remarks : undefined;
        } else {
            const args = argsOrState as SdnPortArgs | undefined;
            if ((!args || args.businessEntityName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'businessEntityName'");
            }
            if ((!args || args.datacenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenter'");
            }
            if ((!args || args.portType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portType'");
            }
            resourceInputs["businessEntityName"] = args ? args.businessEntityName : undefined;
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portType"] = args ? args.portType : undefined;
            resourceInputs["remarks"] = args ? args.remarks : undefined;
            resourceInputs["connectStatus"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["datacenterName"] = undefined /*out*/;
            resourceInputs["expiredTime"] = undefined /*out*/;
            resourceInputs["loaStatus"] = undefined /*out*/;
            resourceInputs["loaUrl"] = undefined /*out*/;
            resourceInputs["portChargeType"] = undefined /*out*/;
            resourceInputs["portStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SdnPort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SdnPort resources.
 */
export interface SdnPortState {
    /**
     * Your business entity name. The entity name to be used on the Letter of Authorization (LOA).
     */
    businessEntityName?: pulumi.Input<string>;
    /**
     * The network connectivity state of port.
     */
    connectStatus?: pulumi.Input<string>;
    /**
     * Create time of the port.
     */
    createTime?: pulumi.Input<string>;
    /**
     * ID of data center.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * The name of datacenter.
     */
    datacenterName?: pulumi.Input<string>;
    /**
     * Expired time of the port.
     */
    expiredTime?: pulumi.Input<string>;
    /**
     * Indicate whether to force delete the port. Default is `false`. If set true, the port will be permanently deleted instead
     * of being moved into the recycle bin.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The LOA state.
     */
    loaStatus?: pulumi.Input<string>;
    /**
     * The LOA URL address.
     */
    loaUrl?: pulumi.Input<string>;
    /**
     * Port name. Up to 255 characters in length are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * The charge type of port. Valid values: `PREPAID`, `POSTPAID`.
     */
    portChargeType?: pulumi.Input<string>;
    /**
     * The business status of port.
     */
    portStatus?: pulumi.Input<string>;
    /**
     * Type of port. eg. 1G/10G/40G.
     */
    portType?: pulumi.Input<string>;
    /**
     * Description of port.
     */
    remarks?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SdnPort resource.
 */
export interface SdnPortArgs {
    /**
     * Your business entity name. The entity name to be used on the Letter of Authorization (LOA).
     */
    businessEntityName: pulumi.Input<string>;
    /**
     * ID of data center.
     */
    datacenter: pulumi.Input<string>;
    /**
     * Indicate whether to force delete the port. Default is `false`. If set true, the port will be permanently deleted instead
     * of being moved into the recycle bin.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * Port name. Up to 255 characters in length are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of port. eg. 1G/10G/40G.
     */
    portType: pulumi.Input<string>;
    /**
     * Description of port.
     */
    remarks?: pulumi.Input<string>;
}
