// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecurityGroupRule extends pulumi.CustomResource {
    /**
     * Get an existing SecurityGroupRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityGroupRuleState, opts?: pulumi.CustomResourceOptions): SecurityGroupRule {
        return new SecurityGroupRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zenlayercloud:index/securityGroupRule:SecurityGroupRule';

    /**
     * Returns true if the given object is an instance of SecurityGroupRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityGroupRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroupRule.__pulumiType;
    }

    /**
     * The cidr ip of the rule.
     */
    public readonly cidrIp!: pulumi.Output<string>;
    /**
     * The direction of the rule.
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * The protocol of the rule.
     */
    public readonly ipProtocol!: pulumi.Output<string>;
    /**
     * The policy of the rule, currently only `accept` is supported.
     */
    public readonly policy!: pulumi.Output<string | undefined>;
    /**
     * The port range of the rule.
     */
    public readonly portRange!: pulumi.Output<string>;
    /**
     * ID of the security group to be queried.
     */
    public readonly securityGroupId!: pulumi.Output<string>;

    /**
     * Create a SecurityGroupRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityGroupRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityGroupRuleArgs | SecurityGroupRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityGroupRuleState | undefined;
            resourceInputs["cidrIp"] = state ? state.cidrIp : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["ipProtocol"] = state ? state.ipProtocol : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["portRange"] = state ? state.portRange : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
        } else {
            const args = argsOrState as SecurityGroupRuleArgs | undefined;
            if ((!args || args.cidrIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrIp'");
            }
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.ipProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipProtocol'");
            }
            if ((!args || args.portRange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portRange'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["cidrIp"] = args ? args.cidrIp : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["ipProtocol"] = args ? args.ipProtocol : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["portRange"] = args ? args.portRange : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityGroupRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityGroupRule resources.
 */
export interface SecurityGroupRuleState {
    /**
     * The cidr ip of the rule.
     */
    cidrIp?: pulumi.Input<string>;
    /**
     * The direction of the rule.
     */
    direction?: pulumi.Input<string>;
    /**
     * The protocol of the rule.
     */
    ipProtocol?: pulumi.Input<string>;
    /**
     * The policy of the rule, currently only `accept` is supported.
     */
    policy?: pulumi.Input<string>;
    /**
     * The port range of the rule.
     */
    portRange?: pulumi.Input<string>;
    /**
     * ID of the security group to be queried.
     */
    securityGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecurityGroupRule resource.
 */
export interface SecurityGroupRuleArgs {
    /**
     * The cidr ip of the rule.
     */
    cidrIp: pulumi.Input<string>;
    /**
     * The direction of the rule.
     */
    direction: pulumi.Input<string>;
    /**
     * The protocol of the rule.
     */
    ipProtocol: pulumi.Input<string>;
    /**
     * The policy of the rule, currently only `accept` is supported.
     */
    policy?: pulumi.Input<string>;
    /**
     * The port range of the rule.
     */
    portRange: pulumi.Input<string>;
    /**
     * ID of the security group to be queried.
     */
    securityGroupId: pulumi.Input<string>;
}
