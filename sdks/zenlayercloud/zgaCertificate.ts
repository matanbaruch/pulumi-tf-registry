// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ZgaCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ZgaCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZgaCertificateState, opts?: pulumi.CustomResourceOptions): ZgaCertificate {
        return new ZgaCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zenlayercloud:index/zgaCertificate:ZgaCertificate';

    /**
     * Returns true if the given object is an instance of ZgaCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZgaCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZgaCertificate.__pulumiType;
    }

    /**
     * The content of certificate.
     */
    public readonly certificate!: pulumi.Output<string>;
    /**
     * Common of the certificate.
     */
    public /*out*/ readonly common!: pulumi.Output<string>;
    /**
     * Uploaded time of the certificate.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Expiration time of the certificate.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    /**
     * The key of the certificate.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The label of the certificate. Modification is not supported.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The resource group id the certificate belongs to, default to Default Resource Group. Modification is not supported.
     */
    public readonly resourceGroupId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ZgaCertificateTimeouts | undefined>;

    /**
     * Create a ZgaCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZgaCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZgaCertificateArgs | ZgaCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZgaCertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["common"] = state ? state.common : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ZgaCertificateArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["key"] = args?.key ? pulumi.secret(args.key) : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["resourceGroupId"] = args ? args.resourceGroupId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["common"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ZgaCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ZgaCertificate resources.
 */
export interface ZgaCertificateState {
    /**
     * The content of certificate.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Common of the certificate.
     */
    common?: pulumi.Input<string>;
    /**
     * Uploaded time of the certificate.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Expiration time of the certificate.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The key of the certificate.
     */
    key?: pulumi.Input<string>;
    /**
     * The label of the certificate. Modification is not supported.
     */
    label?: pulumi.Input<string>;
    /**
     * The resource group id the certificate belongs to, default to Default Resource Group. Modification is not supported.
     */
    resourceGroupId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ZgaCertificateTimeouts>;
}

/**
 * The set of arguments for constructing a ZgaCertificate resource.
 */
export interface ZgaCertificateArgs {
    /**
     * The content of certificate.
     */
    certificate: pulumi.Input<string>;
    /**
     * The key of the certificate.
     */
    key: pulumi.Input<string>;
    /**
     * The label of the certificate. Modification is not supported.
     */
    label?: pulumi.Input<string>;
    /**
     * The resource group id the certificate belongs to, default to Default Resource Group. Modification is not supported.
     */
    resourceGroupId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ZgaCertificateTimeouts>;
}
