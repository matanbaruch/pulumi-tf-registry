// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SdnPrivateConnect extends pulumi.CustomResource {
    /**
     * Get an existing SdnPrivateConnect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SdnPrivateConnectState, opts?: pulumi.CustomResourceOptions): SdnPrivateConnect {
        return new SdnPrivateConnect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zenlayercloud:index/sdnPrivateConnect:SdnPrivateConnect';

    /**
     * Returns true if the given object is an instance of SdnPrivateConnect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SdnPrivateConnect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SdnPrivateConnect.__pulumiType;
    }

    /**
     * The bandwidth of private connect. Valid range: [1,500]. Unit: Mbps.
     */
    public readonly connectBandwidth!: pulumi.Output<number | undefined>;
    /**
     * The private connect name. Up to 255 characters in length are allowed.
     */
    public readonly connectName!: pulumi.Output<string | undefined>;
    /**
     * Network connectivity state. ACTIVE means the network is connected. DOWN which means not connected.
     */
    public /*out*/ readonly connectivityStatus!: pulumi.Output<string>;
    /**
     * Create time of the private connect.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Access points of private connect. Length must be equal to 2.
     */
    public readonly endpoints!: pulumi.Output<outputs.SdnPrivateConnectEndpoint[]>;
    /**
     * Expired time of the private connect.
     */
    public /*out*/ readonly expiredTime!: pulumi.Output<string>;
    /**
     * Indicate whether to force delete the private connect. Default is `false`. If set true, the private connect will be
     * permanently deleted instead of being moved into the recycle bin.
     */
    public readonly forceDelete!: pulumi.Output<boolean | undefined>;
    /**
     * The resource group ID.
     */
    public /*out*/ readonly resourceGroupId!: pulumi.Output<string>;
    /**
     * The Name of resource group.
     */
    public /*out*/ readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * The business state of private connect.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a SdnPrivateConnect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SdnPrivateConnectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SdnPrivateConnectArgs | SdnPrivateConnectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SdnPrivateConnectState | undefined;
            resourceInputs["connectBandwidth"] = state ? state.connectBandwidth : undefined;
            resourceInputs["connectName"] = state ? state.connectName : undefined;
            resourceInputs["connectivityStatus"] = state ? state.connectivityStatus : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["expiredTime"] = state ? state.expiredTime : undefined;
            resourceInputs["forceDelete"] = state ? state.forceDelete : undefined;
            resourceInputs["resourceGroupId"] = state ? state.resourceGroupId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as SdnPrivateConnectArgs | undefined;
            if ((!args || args.endpoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoints'");
            }
            resourceInputs["connectBandwidth"] = args ? args.connectBandwidth : undefined;
            resourceInputs["connectName"] = args ? args.connectName : undefined;
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["forceDelete"] = args ? args.forceDelete : undefined;
            resourceInputs["connectivityStatus"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expiredTime"] = undefined /*out*/;
            resourceInputs["resourceGroupId"] = undefined /*out*/;
            resourceInputs["resourceGroupName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SdnPrivateConnect.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SdnPrivateConnect resources.
 */
export interface SdnPrivateConnectState {
    /**
     * The bandwidth of private connect. Valid range: [1,500]. Unit: Mbps.
     */
    connectBandwidth?: pulumi.Input<number>;
    /**
     * The private connect name. Up to 255 characters in length are allowed.
     */
    connectName?: pulumi.Input<string>;
    /**
     * Network connectivity state. ACTIVE means the network is connected. DOWN which means not connected.
     */
    connectivityStatus?: pulumi.Input<string>;
    /**
     * Create time of the private connect.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Access points of private connect. Length must be equal to 2.
     */
    endpoints?: pulumi.Input<pulumi.Input<inputs.SdnPrivateConnectEndpoint>[]>;
    /**
     * Expired time of the private connect.
     */
    expiredTime?: pulumi.Input<string>;
    /**
     * Indicate whether to force delete the private connect. Default is `false`. If set true, the private connect will be
     * permanently deleted instead of being moved into the recycle bin.
     */
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The resource group ID.
     */
    resourceGroupId?: pulumi.Input<string>;
    /**
     * The Name of resource group.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The business state of private connect.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SdnPrivateConnect resource.
 */
export interface SdnPrivateConnectArgs {
    /**
     * The bandwidth of private connect. Valid range: [1,500]. Unit: Mbps.
     */
    connectBandwidth?: pulumi.Input<number>;
    /**
     * The private connect name. Up to 255 characters in length are allowed.
     */
    connectName?: pulumi.Input<string>;
    /**
     * Access points of private connect. Length must be equal to 2.
     */
    endpoints: pulumi.Input<pulumi.Input<inputs.SdnPrivateConnectEndpoint>[]>;
    /**
     * Indicate whether to force delete the private connect. Default is `false`. If set true, the private connect will be
     * permanently deleted instead of being moved into the recycle bin.
     */
    forceDelete?: pulumi.Input<boolean>;
}
