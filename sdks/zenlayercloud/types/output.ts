// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BmcInstancePartition {
    /**
     * The drive letter(windows) or device name(linux) for the partition.
     */
    fsPath: string;
    /**
     * The type of the partitioned file.
     */
    fsType: string;
    /**
     * The size of the partitioned disk.
     */
    size: number;
}

export interface BmcInstanceRaidConfigCustom {
    /**
     * The sequence of disk to make raid.
     */
    diskSequences: number[];
    /**
     * Simple config for raid.
     */
    raidType: string;
}

export interface BmcInstanceTimeouts {
    create?: string;
    update?: string;
}

export interface GetBmcDdosIpsIpList {
    availabilityZone: string;
    createTime: string;
    expiredTime: string;
    instanceId: string;
    instanceName: string;
    ipChargeType: string;
    ipId: string;
    ipStatus: string;
    publicIp: string;
    resourceGroupId: string;
    resourceGroupName: string;
}

export interface GetBmcEipsEipList {
    availabilityZone: string;
    createTime: string;
    eipChargeType: string;
    eipId: string;
    eipStatus: string;
    expiredTime: string;
    instanceId: string;
    instanceName: string;
    publicIp: string;
    resourceGroupId: string;
    resourceGroupName: string;
}

export interface GetBmcImagesImage {
    catalog: string;
    imageId: string;
    imageName: string;
    imageType: string;
    osType: string;
}

export interface GetBmcInstanceTypesInstanceType {
    availabilityZone: string;
    defaultTrafficPackageSize: number;
    instanceTypeId: string;
    internetChargeTypes: string[];
    maximumBandwidthOut: number;
    sellStatus: string;
}

export interface GetBmcInstancesInstanceList {
    availabilityZone: string;
    createTime: string;
    expiredTime: string;
    hostname: string;
    imageId: string;
    imageName: string;
    instanceChargePrepaidPeriod: number;
    instanceChargeType: string;
    instanceId: string;
    instanceName: string;
    instanceStatus: string;
    instanceTypeId: string;
    internetChargeType: string;
    internetMaxBandwidthOut: number;
    nicLanName: string;
    nicWanName: string;
    partitions: outputs.GetBmcInstancesInstanceListPartition[];
    privateIpv4Addresses: string[];
    publicIpv4Addresses: string[];
    publicIpv6Addresses: string[];
    raidConfigCustoms: outputs.GetBmcInstancesInstanceListRaidConfigCustom[];
    raidConfigType: string;
    resourceGroupId: string;
    resourceGroupName: string;
    subnetId: string;
    trafficPackageSize: number;
}

export interface GetBmcInstancesInstanceListPartition {
    fsPath: string;
    fsType: string;
    size: number;
}

export interface GetBmcInstancesInstanceListRaidConfigCustom {
    diskSequences: number[];
    raidType: string;
}

export interface GetBmcSubnetsSubnetList {
    availabilityZone: string;
    cidrBlock: string;
    createTime: string;
    resourceGroupId: string;
    resourceGroupName: string;
    subnetId: string;
    subnetName: string;
    subnetStatus: string;
    vpcId: string;
    vpcName: string;
}

export interface GetBmcVpcRegionsRegion {
    availabilityZones: string[];
    id: string;
    name: string;
}

export interface GetBmcVpcsVpcList {
    cidrBlock: string;
    createTime: string;
    name: string;
    region: string;
    resourceGroupId: string;
    resourceGroupName: string;
    vpcId: string;
    vpcStatus: string;
}

export interface GetBmcZonesZone {
    description: string;
    name: string;
}

export interface GetDisksDisk {
    availabilityZone: string;
    chargeType: string;
    createTime: string;
    diskCategory: string;
    diskSize: number;
    diskType: string;
    expiredTime: string;
    id: string;
    instanceId: string;
    instanceName: string;
    name: string;
    period: number;
    portable: boolean;
    status: string;
}

export interface GetImagesImage {
    category: string;
    imageDescription: string;
    imageId: string;
    imageName: string;
    imageSize: string;
    imageType: string;
    imageVersion: string;
    osType: string;
}

export interface GetInstanceTypesInstanceTypeQuota {
    availabilityZone: string;
    cpuCount: number;
    instanceType: string;
    internetChargeTypes: string[];
    maximumBandwidthOut: number;
    memory: number;
}

export interface GetKeyPairsKeyPair {
    createTime: string;
    keyDescription: string;
    keyId: string;
    keyName: string;
    publicKey: string;
}

export interface GetSdnCloudRegionsRegionList {
    cloudRegion: string;
    datacenter: string;
    datacenterName: string;
    products: string[];
}

export interface GetSdnDatacentersDatacenter {
    address: string;
    areaName: string;
    cityName: string;
    countryName: string;
    id: string;
    name: string;
}

export interface GetSdnPortsPortList {
    businessEntityName: string;
    connectStatus: string;
    createTime: string;
    datacenter: string;
    datacenterName: string;
    expiredTime: string;
    loaStatus: string;
    loaUrl: string;
    portChargeType: string;
    portId: string;
    portName: string;
    portStatus: string;
    portType: string;
    remarks: string;
}

export interface GetSdnPrivateConnectsConnectList {
    connectBandwidth: number;
    connectId: string;
    connectName: string;
    connectStatus: string;
    connectivityStatus: string;
    createTime: string;
    endpoints: outputs.GetSdnPrivateConnectsConnectListEndpoint[];
    expiredTime: string;
    resourceGroupId: string;
    resourceGroupName: string;
}

export interface GetSdnPrivateConnectsConnectListEndpoint {
    cloudAccount: string;
    cloudRegion: string;
    connectivityStatus: string;
    datacenter: string;
    endpointName: string;
    endpointType: string;
    portId: string;
    vlanId: number;
}

export interface GetSecurityGroupsSecurityGroup {
    createTime: string;
    description: string;
    instanceIds: string[];
    name: string;
    ruleInfos: outputs.GetSecurityGroupsSecurityGroupRuleInfo[];
    securityGroupId: string;
}

export interface GetSecurityGroupsSecurityGroupRuleInfo {
    cidrIp: string;
    direction: string;
    ipProtocol: string;
    policy: string;
    portRange: string;
}

export interface GetSubnetsSubnetList {
    availabilityZone: string;
    cidrBlock: string;
    createTime: string;
    subnetId: string;
    subnetName: string;
    subnetStatus: string;
}

export interface GetZgaAccelerateRegionsRegion {
    description: string;
    id: string;
}

export interface GetZgaAcceleratorsAccelerator {
    accelerateRegions: outputs.GetZgaAcceleratorsAcceleratorAccelerateRegion[];
    acceleratorId: string;
    acceleratorName: string;
    acceleratorStatus: string;
    acceleratorType: string;
    accessControls: outputs.GetZgaAcceleratorsAcceleratorAccessControl[];
    backupOrigins: string[];
    certificates: outputs.GetZgaAcceleratorsAcceleratorCertificate[];
    chargeType: string;
    cname: string;
    createTime: string;
    domain: string;
    healthChecks: outputs.GetZgaAcceleratorsAcceleratorHealthCheck[];
    l4Listeners: outputs.GetZgaAcceleratorsAcceleratorL4Listener[];
    l7Listeners: outputs.GetZgaAcceleratorsAcceleratorL7Listener[];
    originRegionId: string;
    originRegionName: string;
    origins: string[];
    protocolOpts: outputs.GetZgaAcceleratorsAcceleratorProtocolOpt[];
    relateDomains: string[];
    resourceGroupId: string;
}

export interface GetZgaAcceleratorsAcceleratorAccelerateRegion {
    accelerateRegionId: string;
    accelerateRegionName: string;
    accelerateRegionStatus: string;
    bandwidth: number;
    vip: string;
}

export interface GetZgaAcceleratorsAcceleratorAccessControl {
    enable: boolean;
    rules: outputs.GetZgaAcceleratorsAcceleratorAccessControlRule[];
}

export interface GetZgaAcceleratorsAcceleratorAccessControlRule {
    cidrIps: string[];
    directory: string;
    listener: string;
    note: string;
    policy: string;
}

export interface GetZgaAcceleratorsAcceleratorCertificate {
    algorithm: string;
    certificateId: string;
    certificateLabel: string;
    common: string;
    createTime: string;
    dnsNames: string[];
    endTime: string;
    expired: boolean;
    fingerprint: string;
    issuer: string;
    resourceGroupId: string;
    startTime: string;
}

export interface GetZgaAcceleratorsAcceleratorHealthCheck {
    alarm: boolean;
    enable: boolean;
    port: number;
}

export interface GetZgaAcceleratorsAcceleratorL4Listener {
    backPort: number;
    backPortRange: string;
    port: number;
    portRange: string;
    protocol: string;
}

export interface GetZgaAcceleratorsAcceleratorL7Listener {
    backPort: number;
    backPortRange: string;
    backProtocol: string;
    host: string;
    port: number;
    portRange: string;
    protocol: string;
}

export interface GetZgaAcceleratorsAcceleratorProtocolOpt {
    gzip: boolean;
    proxyProtocol: boolean;
    toa: boolean;
    toaValue: number;
    websocket: boolean;
}

export interface GetZgaCertificatesCertificate {
    algorithm: string;
    certificateId: string;
    certificateLabel: string;
    common: string;
    createTime: string;
    dnsNames: string[];
    endTime: string;
    expired: boolean;
    fingerprint: string;
    issuer: string;
    resourceGroupId: string;
    startTime: string;
}

export interface GetZgaOriginRegionsRegion {
    description: string;
    id: string;
}

export interface GetZonesZone {
    description: string;
    name: string;
}

export interface InstanceTimeouts {
    create?: string;
    update?: string;
}

export interface SdnPrivateConnectEndpoint {
    /**
     * The account of public cloud access point. If cloud type is GOOGLE, the value is google pairing key. This value is available only when `endpoint_type` within cloud type (AWS, GOOGLE and TENCENT).
     */
    cloudAccount?: string;
    /**
     * Region of cloud access point. This value is available only when `endpoint_type` within cloud type (AWS, GOOGLE and TENCENT).
     */
    cloudRegion?: string;
    /**
     * Network connectivity state. ACTIVE means the network is connected. DOWN which means not connected.
     */
    connectivityStatus: string;
    /**
     * The ID of data center.
     */
    datacenter?: string;
    /**
     * The name of the access point.
     */
    endpointName: string;
    /**
     * The type of the access point, Valid values: PORT,AWS,TENCENT and GOOGLE.
     */
    endpointType: string;
    /**
     * The ID of the port. This value is required when `endpoint_type` is `PORT`.
     */
    portId?: string;
    /**
     * VLAN ID of the access point. Value range: from 1 to 4096.
     */
    vlanId?: number;
}

export interface ZgaAcceleratorAccelerateRegion {
    /**
     * ID of the accelerate region.
     */
    accelerateRegionId: string;
    /**
     * Bandwidth limit of the accelerate region. Exceeding the account speed limit is not allowed. Unit: Mbps.
     */
    bandwidth: number;
    /**
     * Virtual IP the accelerate region. Modification is not supported.
     */
    vip: string;
}

export interface ZgaAcceleratorAccessControl {
    /**
     * Whether to enable access control. Default is `false`.
     */
    enable: boolean;
    /**
     * Rules of the access control.
     */
    rules?: outputs.ZgaAcceleratorAccessControlRule[];
}

export interface ZgaAcceleratorAccessControlRule {
    /**
     * The cidr ip of the rule.
     */
    cidrIps: string[];
    /**
     * The directory of the rule. Not configurable with L4 listener. Default is `/`. Wildcards supported: *.
     */
    directory?: string;
    /**
     * The listener of the rule. Valid values are `$protocol:$port`, `$protocol:$portRange`, `all`.
     */
    listener: string;
    /**
     * The note of the rule.
     */
    note?: string;
    /**
     * The policy of the rule. Valid values are `accept`, `deny`.
     */
    policy: string;
}

export interface ZgaAcceleratorHealthCheck {
    /**
     * Whether to enable alarm. Default is `false`.
     */
    alarm?: boolean;
    /**
     * Whether to enable health check. If the enable is `false`, the alarm will be set to `false` and the port will be cleared.
     */
    enable: boolean;
    /**
     * The port of health check.
     */
    port?: number;
}

export interface ZgaAcceleratorL4Listener {
    /**
     * The Return-to-origin port of the l4 listener.
     */
    backPort?: number;
    /**
     * The Return-to-origin port range of the l4 listener. Use a slash (/) to separate the starting and ending ports, like: 1/200.
     */
    backPortRange?: string;
    /**
     * The port of the l4 listener. Only port or portRange can be configured, and duplicate ports are not allowed.
     */
    port?: number;
    /**
     * The port range of the l4 listener. Only port or portRange can be configured. Use a slash (/) to separate the starting and ending ports, like: 1/200. The max range: 300.
     */
    portRange?: string;
    /**
     * The protocol of the l4 listener. Valid values: `tcp`, `udp`.
     */
    protocol: string;
}

export interface ZgaAcceleratorL7Listener {
    /**
     * The Return-to-origin port of the l7 listener.
     */
    backPort?: number;
    /**
     * The Return-to-origin port range of the l7 listener. Use a slash (/) to separate the starting and ending ports, like: 1/200.
     */
    backPortRange?: string;
    /**
     * The Return-to-origin protocol of the l7 listener. Valid values: http and https. The default is equal to protocol.
     */
    backProtocol: string;
    /**
     * The Return-to-origin host of the l7 listener.
     */
    host?: string;
    /**
     * The port of the l7 listener. Only port or portRange can be configured, and duplicate ports are not allowed.
     */
    port?: number;
    /**
     * The port range of the l7 listener. Only port or portRange can be configured. Use a slash (/) to separate the starting and ending ports, like: 1/200. The max range: 300.
     */
    portRange?: string;
    /**
     * The protocol of the l4 listener. Valid values: `http`, `https`.
     */
    protocol: string;
}

export interface ZgaAcceleratorProtocolOpts {
    /**
     * Whether to enable gzip. Default is `false`.
     */
    gzip?: boolean;
    /**
     * Whether to enable proxyProtocol. Default is `false`.
     */
    proxyProtocol?: boolean;
    /**
     * Whether to enable TOA. Default is `false`.
     */
    toa?: boolean;
    /**
     * TOA verison. Default is `253`.
     */
    toaValue?: number;
    /**
     * Whether to enable websocket. Default is `false`.
     */
    websocket?: boolean;
}

export interface ZgaAcceleratorTimeouts {
    create?: string;
    update?: string;
}

export interface ZgaCertificateTimeouts {
    create?: string;
}

