// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDisks(args?: GetDisksArgs, opts?: pulumi.InvokeOptions): Promise<GetDisksResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zenlayercloud:index/getDisks:getDisks", {
        "availabilityZone": args.availabilityZone,
        "diskType": args.diskType,
        "id": args.id,
        "instanceId": args.instanceId,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "portable": args.portable,
        "resultOutputFile": args.resultOutputFile,
        "status": args.status,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDisks.
 */
export interface GetDisksArgs {
    availabilityZone?: string;
    diskType?: string;
    id?: string;
    instanceId?: string;
    name?: string;
    nameRegex?: string;
    portable?: boolean;
    resultOutputFile?: string;
    status?: string;
}

/**
 * A collection of values returned by getDisks.
 */
export interface GetDisksResult {
    readonly availabilityZone?: string;
    readonly diskType?: string;
    readonly disks: outputs.GetDisksDisk[];
    readonly id?: string;
    readonly instanceId?: string;
    readonly name?: string;
    readonly nameRegex?: string;
    readonly portable?: boolean;
    readonly resultOutputFile?: string;
    readonly status?: string;
}
export function getDisksOutput(args?: GetDisksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDisksResult> {
    return pulumi.output(args).apply((a: any) => getDisks(a, opts))
}

/**
 * A collection of arguments for invoking getDisks.
 */
export interface GetDisksOutputArgs {
    availabilityZone?: pulumi.Input<string>;
    diskType?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nameRegex?: pulumi.Input<string>;
    portable?: pulumi.Input<boolean>;
    resultOutputFile?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
