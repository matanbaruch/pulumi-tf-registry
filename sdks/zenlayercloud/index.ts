// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BmcDdosIpArgs, BmcDdosIpState } from "./bmcDdosIp";
export type BmcDdosIp = import("./bmcDdosIp").BmcDdosIp;
export const BmcDdosIp: typeof import("./bmcDdosIp").BmcDdosIp = null as any;
utilities.lazyLoad(exports, ["BmcDdosIp"], () => require("./bmcDdosIp"));

export { BmcDdosIpAssociationArgs, BmcDdosIpAssociationState } from "./bmcDdosIpAssociation";
export type BmcDdosIpAssociation = import("./bmcDdosIpAssociation").BmcDdosIpAssociation;
export const BmcDdosIpAssociation: typeof import("./bmcDdosIpAssociation").BmcDdosIpAssociation = null as any;
utilities.lazyLoad(exports, ["BmcDdosIpAssociation"], () => require("./bmcDdosIpAssociation"));

export { BmcEipArgs, BmcEipState } from "./bmcEip";
export type BmcEip = import("./bmcEip").BmcEip;
export const BmcEip: typeof import("./bmcEip").BmcEip = null as any;
utilities.lazyLoad(exports, ["BmcEip"], () => require("./bmcEip"));

export { BmcEipAssociationArgs, BmcEipAssociationState } from "./bmcEipAssociation";
export type BmcEipAssociation = import("./bmcEipAssociation").BmcEipAssociation;
export const BmcEipAssociation: typeof import("./bmcEipAssociation").BmcEipAssociation = null as any;
utilities.lazyLoad(exports, ["BmcEipAssociation"], () => require("./bmcEipAssociation"));

export { BmcInstanceArgs, BmcInstanceState } from "./bmcInstance";
export type BmcInstance = import("./bmcInstance").BmcInstance;
export const BmcInstance: typeof import("./bmcInstance").BmcInstance = null as any;
utilities.lazyLoad(exports, ["BmcInstance"], () => require("./bmcInstance"));

export { BmcSubnetArgs, BmcSubnetState } from "./bmcSubnet";
export type BmcSubnet = import("./bmcSubnet").BmcSubnet;
export const BmcSubnet: typeof import("./bmcSubnet").BmcSubnet = null as any;
utilities.lazyLoad(exports, ["BmcSubnet"], () => require("./bmcSubnet"));

export { BmcVpcArgs, BmcVpcState } from "./bmcVpc";
export type BmcVpc = import("./bmcVpc").BmcVpc;
export const BmcVpc: typeof import("./bmcVpc").BmcVpc = null as any;
utilities.lazyLoad(exports, ["BmcVpc"], () => require("./bmcVpc"));

export { DiskArgs, DiskState } from "./disk";
export type Disk = import("./disk").Disk;
export const Disk: typeof import("./disk").Disk = null as any;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));

export { DiskAttachmentArgs, DiskAttachmentState } from "./diskAttachment";
export type DiskAttachment = import("./diskAttachment").DiskAttachment;
export const DiskAttachment: typeof import("./diskAttachment").DiskAttachment = null as any;
utilities.lazyLoad(exports, ["DiskAttachment"], () => require("./diskAttachment"));

export { GetBmcDdosIpsArgs, GetBmcDdosIpsResult, GetBmcDdosIpsOutputArgs } from "./getBmcDdosIps";
export const getBmcDdosIps: typeof import("./getBmcDdosIps").getBmcDdosIps = null as any;
export const getBmcDdosIpsOutput: typeof import("./getBmcDdosIps").getBmcDdosIpsOutput = null as any;
utilities.lazyLoad(exports, ["getBmcDdosIps","getBmcDdosIpsOutput"], () => require("./getBmcDdosIps"));

export { GetBmcEipsArgs, GetBmcEipsResult, GetBmcEipsOutputArgs } from "./getBmcEips";
export const getBmcEips: typeof import("./getBmcEips").getBmcEips = null as any;
export const getBmcEipsOutput: typeof import("./getBmcEips").getBmcEipsOutput = null as any;
utilities.lazyLoad(exports, ["getBmcEips","getBmcEipsOutput"], () => require("./getBmcEips"));

export { GetBmcImagesArgs, GetBmcImagesResult, GetBmcImagesOutputArgs } from "./getBmcImages";
export const getBmcImages: typeof import("./getBmcImages").getBmcImages = null as any;
export const getBmcImagesOutput: typeof import("./getBmcImages").getBmcImagesOutput = null as any;
utilities.lazyLoad(exports, ["getBmcImages","getBmcImagesOutput"], () => require("./getBmcImages"));

export { GetBmcInstanceTypesArgs, GetBmcInstanceTypesResult, GetBmcInstanceTypesOutputArgs } from "./getBmcInstanceTypes";
export const getBmcInstanceTypes: typeof import("./getBmcInstanceTypes").getBmcInstanceTypes = null as any;
export const getBmcInstanceTypesOutput: typeof import("./getBmcInstanceTypes").getBmcInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getBmcInstanceTypes","getBmcInstanceTypesOutput"], () => require("./getBmcInstanceTypes"));

export { GetBmcInstancesArgs, GetBmcInstancesResult, GetBmcInstancesOutputArgs } from "./getBmcInstances";
export const getBmcInstances: typeof import("./getBmcInstances").getBmcInstances = null as any;
export const getBmcInstancesOutput: typeof import("./getBmcInstances").getBmcInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getBmcInstances","getBmcInstancesOutput"], () => require("./getBmcInstances"));

export { GetBmcSubnetsArgs, GetBmcSubnetsResult, GetBmcSubnetsOutputArgs } from "./getBmcSubnets";
export const getBmcSubnets: typeof import("./getBmcSubnets").getBmcSubnets = null as any;
export const getBmcSubnetsOutput: typeof import("./getBmcSubnets").getBmcSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getBmcSubnets","getBmcSubnetsOutput"], () => require("./getBmcSubnets"));

export { GetBmcVpcRegionsArgs, GetBmcVpcRegionsResult, GetBmcVpcRegionsOutputArgs } from "./getBmcVpcRegions";
export const getBmcVpcRegions: typeof import("./getBmcVpcRegions").getBmcVpcRegions = null as any;
export const getBmcVpcRegionsOutput: typeof import("./getBmcVpcRegions").getBmcVpcRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getBmcVpcRegions","getBmcVpcRegionsOutput"], () => require("./getBmcVpcRegions"));

export { GetBmcVpcsArgs, GetBmcVpcsResult, GetBmcVpcsOutputArgs } from "./getBmcVpcs";
export const getBmcVpcs: typeof import("./getBmcVpcs").getBmcVpcs = null as any;
export const getBmcVpcsOutput: typeof import("./getBmcVpcs").getBmcVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getBmcVpcs","getBmcVpcsOutput"], () => require("./getBmcVpcs"));

export { GetBmcZonesArgs, GetBmcZonesResult, GetBmcZonesOutputArgs } from "./getBmcZones";
export const getBmcZones: typeof import("./getBmcZones").getBmcZones = null as any;
export const getBmcZonesOutput: typeof import("./getBmcZones").getBmcZonesOutput = null as any;
utilities.lazyLoad(exports, ["getBmcZones","getBmcZonesOutput"], () => require("./getBmcZones"));

export { GetDisksArgs, GetDisksResult, GetDisksOutputArgs } from "./getDisks";
export const getDisks: typeof import("./getDisks").getDisks = null as any;
export const getDisksOutput: typeof import("./getDisks").getDisksOutput = null as any;
utilities.lazyLoad(exports, ["getDisks","getDisksOutput"], () => require("./getDisks"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetInstanceTypesArgs, GetInstanceTypesResult, GetInstanceTypesOutputArgs } from "./getInstanceTypes";
export const getInstanceTypes: typeof import("./getInstanceTypes").getInstanceTypes = null as any;
export const getInstanceTypesOutput: typeof import("./getInstanceTypes").getInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypes","getInstanceTypesOutput"], () => require("./getInstanceTypes"));

export { GetKeyPairsArgs, GetKeyPairsResult, GetKeyPairsOutputArgs } from "./getKeyPairs";
export const getKeyPairs: typeof import("./getKeyPairs").getKeyPairs = null as any;
export const getKeyPairsOutput: typeof import("./getKeyPairs").getKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairs","getKeyPairsOutput"], () => require("./getKeyPairs"));

export { GetSdnCloudRegionsArgs, GetSdnCloudRegionsResult, GetSdnCloudRegionsOutputArgs } from "./getSdnCloudRegions";
export const getSdnCloudRegions: typeof import("./getSdnCloudRegions").getSdnCloudRegions = null as any;
export const getSdnCloudRegionsOutput: typeof import("./getSdnCloudRegions").getSdnCloudRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getSdnCloudRegions","getSdnCloudRegionsOutput"], () => require("./getSdnCloudRegions"));

export { GetSdnDatacentersArgs, GetSdnDatacentersResult, GetSdnDatacentersOutputArgs } from "./getSdnDatacenters";
export const getSdnDatacenters: typeof import("./getSdnDatacenters").getSdnDatacenters = null as any;
export const getSdnDatacentersOutput: typeof import("./getSdnDatacenters").getSdnDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getSdnDatacenters","getSdnDatacentersOutput"], () => require("./getSdnDatacenters"));

export { GetSdnPortsArgs, GetSdnPortsResult, GetSdnPortsOutputArgs } from "./getSdnPorts";
export const getSdnPorts: typeof import("./getSdnPorts").getSdnPorts = null as any;
export const getSdnPortsOutput: typeof import("./getSdnPorts").getSdnPortsOutput = null as any;
utilities.lazyLoad(exports, ["getSdnPorts","getSdnPortsOutput"], () => require("./getSdnPorts"));

export { GetSdnPrivateConnectsArgs, GetSdnPrivateConnectsResult, GetSdnPrivateConnectsOutputArgs } from "./getSdnPrivateConnects";
export const getSdnPrivateConnects: typeof import("./getSdnPrivateConnects").getSdnPrivateConnects = null as any;
export const getSdnPrivateConnectsOutput: typeof import("./getSdnPrivateConnects").getSdnPrivateConnectsOutput = null as any;
utilities.lazyLoad(exports, ["getSdnPrivateConnects","getSdnPrivateConnectsOutput"], () => require("./getSdnPrivateConnects"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetZgaAccelerateRegionsArgs, GetZgaAccelerateRegionsResult, GetZgaAccelerateRegionsOutputArgs } from "./getZgaAccelerateRegions";
export const getZgaAccelerateRegions: typeof import("./getZgaAccelerateRegions").getZgaAccelerateRegions = null as any;
export const getZgaAccelerateRegionsOutput: typeof import("./getZgaAccelerateRegions").getZgaAccelerateRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getZgaAccelerateRegions","getZgaAccelerateRegionsOutput"], () => require("./getZgaAccelerateRegions"));

export { GetZgaAcceleratorsArgs, GetZgaAcceleratorsResult, GetZgaAcceleratorsOutputArgs } from "./getZgaAccelerators";
export const getZgaAccelerators: typeof import("./getZgaAccelerators").getZgaAccelerators = null as any;
export const getZgaAcceleratorsOutput: typeof import("./getZgaAccelerators").getZgaAcceleratorsOutput = null as any;
utilities.lazyLoad(exports, ["getZgaAccelerators","getZgaAcceleratorsOutput"], () => require("./getZgaAccelerators"));

export { GetZgaCertificatesArgs, GetZgaCertificatesResult, GetZgaCertificatesOutputArgs } from "./getZgaCertificates";
export const getZgaCertificates: typeof import("./getZgaCertificates").getZgaCertificates = null as any;
export const getZgaCertificatesOutput: typeof import("./getZgaCertificates").getZgaCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getZgaCertificates","getZgaCertificatesOutput"], () => require("./getZgaCertificates"));

export { GetZgaOriginRegionsArgs, GetZgaOriginRegionsResult, GetZgaOriginRegionsOutputArgs } from "./getZgaOriginRegions";
export const getZgaOriginRegions: typeof import("./getZgaOriginRegions").getZgaOriginRegions = null as any;
export const getZgaOriginRegionsOutput: typeof import("./getZgaOriginRegions").getZgaOriginRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getZgaOriginRegions","getZgaOriginRegionsOutput"], () => require("./getZgaOriginRegions"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SdnPortArgs, SdnPortState } from "./sdnPort";
export type SdnPort = import("./sdnPort").SdnPort;
export const SdnPort: typeof import("./sdnPort").SdnPort = null as any;
utilities.lazyLoad(exports, ["SdnPort"], () => require("./sdnPort"));

export { SdnPrivateConnectArgs, SdnPrivateConnectState } from "./sdnPrivateConnect";
export type SdnPrivateConnect = import("./sdnPrivateConnect").SdnPrivateConnect;
export const SdnPrivateConnect: typeof import("./sdnPrivateConnect").SdnPrivateConnect = null as any;
utilities.lazyLoad(exports, ["SdnPrivateConnect"], () => require("./sdnPrivateConnect"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupAttachmentArgs, SecurityGroupAttachmentState } from "./securityGroupAttachment";
export type SecurityGroupAttachment = import("./securityGroupAttachment").SecurityGroupAttachment;
export const SecurityGroupAttachment: typeof import("./securityGroupAttachment").SecurityGroupAttachment = null as any;
utilities.lazyLoad(exports, ["SecurityGroupAttachment"], () => require("./securityGroupAttachment"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { ZgaAcceleratorArgs, ZgaAcceleratorState } from "./zgaAccelerator";
export type ZgaAccelerator = import("./zgaAccelerator").ZgaAccelerator;
export const ZgaAccelerator: typeof import("./zgaAccelerator").ZgaAccelerator = null as any;
utilities.lazyLoad(exports, ["ZgaAccelerator"], () => require("./zgaAccelerator"));

export { ZgaCertificateArgs, ZgaCertificateState } from "./zgaCertificate";
export type ZgaCertificate = import("./zgaCertificate").ZgaCertificate;
export const ZgaCertificate: typeof import("./zgaCertificate").ZgaCertificate = null as any;
utilities.lazyLoad(exports, ["ZgaCertificate"], () => require("./zgaCertificate"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zenlayercloud:index/bmcDdosIp:BmcDdosIp":
                return new BmcDdosIp(name, <any>undefined, { urn })
            case "zenlayercloud:index/bmcDdosIpAssociation:BmcDdosIpAssociation":
                return new BmcDdosIpAssociation(name, <any>undefined, { urn })
            case "zenlayercloud:index/bmcEip:BmcEip":
                return new BmcEip(name, <any>undefined, { urn })
            case "zenlayercloud:index/bmcEipAssociation:BmcEipAssociation":
                return new BmcEipAssociation(name, <any>undefined, { urn })
            case "zenlayercloud:index/bmcInstance:BmcInstance":
                return new BmcInstance(name, <any>undefined, { urn })
            case "zenlayercloud:index/bmcSubnet:BmcSubnet":
                return new BmcSubnet(name, <any>undefined, { urn })
            case "zenlayercloud:index/bmcVpc:BmcVpc":
                return new BmcVpc(name, <any>undefined, { urn })
            case "zenlayercloud:index/disk:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "zenlayercloud:index/diskAttachment:DiskAttachment":
                return new DiskAttachment(name, <any>undefined, { urn })
            case "zenlayercloud:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "zenlayercloud:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "zenlayercloud:index/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "zenlayercloud:index/sdnPort:SdnPort":
                return new SdnPort(name, <any>undefined, { urn })
            case "zenlayercloud:index/sdnPrivateConnect:SdnPrivateConnect":
                return new SdnPrivateConnect(name, <any>undefined, { urn })
            case "zenlayercloud:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "zenlayercloud:index/securityGroupAttachment:SecurityGroupAttachment":
                return new SecurityGroupAttachment(name, <any>undefined, { urn })
            case "zenlayercloud:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "zenlayercloud:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "zenlayercloud:index/zgaAccelerator:ZgaAccelerator":
                return new ZgaAccelerator(name, <any>undefined, { urn })
            case "zenlayercloud:index/zgaCertificate:ZgaCertificate":
                return new ZgaCertificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zenlayercloud", "index/bmcDdosIp", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/bmcDdosIpAssociation", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/bmcEip", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/bmcEipAssociation", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/bmcInstance", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/bmcSubnet", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/bmcVpc", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/disk", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/diskAttachment", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/image", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/instance", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/keyPair", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/sdnPort", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/sdnPrivateConnect", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/securityGroupAttachment", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/subnet", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/zgaAccelerator", _module)
pulumi.runtime.registerResourceModule("zenlayercloud", "index/zgaCertificate", _module)
pulumi.runtime.registerResourcePackage("zenlayercloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zenlayercloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
