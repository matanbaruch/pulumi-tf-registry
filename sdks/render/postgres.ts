// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Postgres extends pulumi.CustomResource {
    /**
     * Get an existing Postgres resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PostgresState, opts?: pulumi.CustomResourceOptions): Postgres {
        return new Postgres(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:index/postgres:Postgres';

    /**
     * Returns true if the given object is an instance of Postgres.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Postgres {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Postgres.__pulumiType;
    }

    /**
     * Database connection info.
     */
    public /*out*/ readonly connectionInfo!: pulumi.Output<outputs.PostgresConnectionInfo>;
    /**
     * Name of the database in the postgres instance
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * Name of the user in the postgres instance
     */
    public readonly databaseUser!: pulumi.Output<string>;
    /**
     * Datadog API key to use when sending postgres metrics
     */
    public readonly datadogApiKey!: pulumi.Output<string | undefined>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    public readonly environmentId!: pulumi.Output<string | undefined>;
    /**
     * Whether high availability is enabled for this postgres
     */
    public readonly highAvailabilityEnabled!: pulumi.Output<boolean>;
    /**
     * List of IP addresses that are allowed to connect to the instance. If no IP addresses are provided, only connections via
     * the private network will be allowed.
     */
    public readonly ipAllowLists!: pulumi.Output<outputs.PostgresIpAllowList[]>;
    /**
     * Descriptive name for this postgres
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Plan to use for this postgres. Must be one of `free`, `starter`, `standard`, `pro`, `pro_plus`, or a custom plan
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * If this is a replica, the ID of the primary postgres instance
     */
    public /*out*/ readonly primaryPostgresId!: pulumi.Output<string>;
    /**
     * List of read replicas.
     */
    public readonly readReplicas!: pulumi.Output<outputs.PostgresReadReplica[] | undefined>;
    /**
     * Region the postgres instance in
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Whether this postgres is a primary or replica
     */
    public /*out*/ readonly role!: pulumi.Output<string>;
    /**
     * The Postgres version
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Postgres resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PostgresArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PostgresArgs | PostgresState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PostgresState | undefined;
            resourceInputs["connectionInfo"] = state ? state.connectionInfo : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["databaseUser"] = state ? state.databaseUser : undefined;
            resourceInputs["datadogApiKey"] = state ? state.datadogApiKey : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["highAvailabilityEnabled"] = state ? state.highAvailabilityEnabled : undefined;
            resourceInputs["ipAllowLists"] = state ? state.ipAllowLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["primaryPostgresId"] = state ? state.primaryPostgresId : undefined;
            resourceInputs["readReplicas"] = state ? state.readReplicas : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as PostgresArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["databaseUser"] = args ? args.databaseUser : undefined;
            resourceInputs["datadogApiKey"] = args?.datadogApiKey ? pulumi.secret(args.datadogApiKey) : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["highAvailabilityEnabled"] = args ? args.highAvailabilityEnabled : undefined;
            resourceInputs["ipAllowLists"] = args ? args.ipAllowLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["readReplicas"] = args ? args.readReplicas : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["connectionInfo"] = undefined /*out*/;
            resourceInputs["primaryPostgresId"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionInfo", "datadogApiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Postgres.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Postgres resources.
 */
export interface PostgresState {
    /**
     * Database connection info.
     */
    connectionInfo?: pulumi.Input<inputs.PostgresConnectionInfo>;
    /**
     * Name of the database in the postgres instance
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Name of the user in the postgres instance
     */
    databaseUser?: pulumi.Input<string>;
    /**
     * Datadog API key to use when sending postgres metrics
     */
    datadogApiKey?: pulumi.Input<string>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Whether high availability is enabled for this postgres
     */
    highAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * List of IP addresses that are allowed to connect to the instance. If no IP addresses are provided, only connections via
     * the private network will be allowed.
     */
    ipAllowLists?: pulumi.Input<pulumi.Input<inputs.PostgresIpAllowList>[]>;
    /**
     * Descriptive name for this postgres
     */
    name?: pulumi.Input<string>;
    /**
     * Plan to use for this postgres. Must be one of `free`, `starter`, `standard`, `pro`, `pro_plus`, or a custom plan
     */
    plan?: pulumi.Input<string>;
    /**
     * If this is a replica, the ID of the primary postgres instance
     */
    primaryPostgresId?: pulumi.Input<string>;
    /**
     * List of read replicas.
     */
    readReplicas?: pulumi.Input<pulumi.Input<inputs.PostgresReadReplica>[]>;
    /**
     * Region the postgres instance in
     */
    region?: pulumi.Input<string>;
    /**
     * Whether this postgres is a primary or replica
     */
    role?: pulumi.Input<string>;
    /**
     * The Postgres version
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Postgres resource.
 */
export interface PostgresArgs {
    /**
     * Name of the database in the postgres instance
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Name of the user in the postgres instance
     */
    databaseUser?: pulumi.Input<string>;
    /**
     * Datadog API key to use when sending postgres metrics
     */
    datadogApiKey?: pulumi.Input<string>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Whether high availability is enabled for this postgres
     */
    highAvailabilityEnabled?: pulumi.Input<boolean>;
    /**
     * List of IP addresses that are allowed to connect to the instance. If no IP addresses are provided, only connections via
     * the private network will be allowed.
     */
    ipAllowLists?: pulumi.Input<pulumi.Input<inputs.PostgresIpAllowList>[]>;
    /**
     * Descriptive name for this postgres
     */
    name?: pulumi.Input<string>;
    /**
     * Plan to use for this postgres. Must be one of `free`, `starter`, `standard`, `pro`, `pro_plus`, or a custom plan
     */
    plan: pulumi.Input<string>;
    /**
     * List of read replicas.
     */
    readReplicas?: pulumi.Input<pulumi.Input<inputs.PostgresReadReplica>[]>;
    /**
     * Region the postgres instance in
     */
    region: pulumi.Input<string>;
    /**
     * The Postgres version
     */
    version: pulumi.Input<string>;
}
