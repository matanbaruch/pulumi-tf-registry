// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RegistryCredential extends pulumi.CustomResource {
    /**
     * Get an existing RegistryCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryCredentialState, opts?: pulumi.CustomResourceOptions): RegistryCredential {
        return new RegistryCredential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:index/registryCredential:RegistryCredential';

    /**
     * Returns true if the given object is an instance of RegistryCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryCredential.__pulumiType;
    }

    /**
     * The auth token to use when pulling the image
     */
    public readonly authToken!: pulumi.Output<string>;
    /**
     * Descriptive name for this credential
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The registry to use this credential with. One of `GITHUB`, `GITLAB`, `DOCKER`.
     */
    public readonly registry!: pulumi.Output<string>;
    /**
     * The username associated with the credential
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a RegistryCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryCredentialArgs | RegistryCredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryCredentialState | undefined;
            resourceInputs["authToken"] = state ? state.authToken : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as RegistryCredentialArgs | undefined;
            if ((!args || args.authToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authToken'");
            }
            if ((!args || args.registry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authToken"] = args?.authToken ? pulumi.secret(args.authToken) : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RegistryCredential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RegistryCredential resources.
 */
export interface RegistryCredentialState {
    /**
     * The auth token to use when pulling the image
     */
    authToken?: pulumi.Input<string>;
    /**
     * Descriptive name for this credential
     */
    name?: pulumi.Input<string>;
    /**
     * The registry to use this credential with. One of `GITHUB`, `GITLAB`, `DOCKER`.
     */
    registry?: pulumi.Input<string>;
    /**
     * The username associated with the credential
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryCredential resource.
 */
export interface RegistryCredentialArgs {
    /**
     * The auth token to use when pulling the image
     */
    authToken: pulumi.Input<string>;
    /**
     * Descriptive name for this credential
     */
    name?: pulumi.Input<string>;
    /**
     * The registry to use this credential with. One of `GITHUB`, `GITLAB`, `DOCKER`.
     */
    registry: pulumi.Input<string>;
    /**
     * The username associated with the credential
     */
    username: pulumi.Input<string>;
}
