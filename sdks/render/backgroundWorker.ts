// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BackgroundWorker extends pulumi.CustomResource {
    /**
     * Get an existing BackgroundWorker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackgroundWorkerState, opts?: pulumi.CustomResourceOptions): BackgroundWorker {
        return new BackgroundWorker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:index/backgroundWorker:BackgroundWorker';

    /**
     * Returns true if the given object is an instance of BackgroundWorker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackgroundWorker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackgroundWorker.__pulumiType;
    }

    /**
     * [Autoscaling settings](https://docs.render.com/scaling#autoscaling) for the service
     */
    public readonly autoscaling!: pulumi.Output<outputs.BackgroundWorkerAutoscaling | undefined>;
    /**
     * [Persistent disk](https://docs.render.com/disks) to attach to the service.
     */
    public readonly disk!: pulumi.Output<outputs.BackgroundWorkerDisk | undefined>;
    /**
     * Map of environment variable names to their values.
     */
    public readonly envVars!: pulumi.Output<{[key: string]: outputs.BackgroundWorkerEnvVars} | undefined>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    public readonly environmentId!: pulumi.Output<string | undefined>;
    /**
     * The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending
     * it a SIGTERM signal before sending a SIGKILL signal.
     */
    public readonly maxShutdownDelaySeconds!: pulumi.Output<number>;
    /**
     * Name of the service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configure the [notification settings](https://docs.render.com/notifications) for this service. These will override the
     * global notification settings of the user or team.
     */
    public readonly notificationOverride!: pulumi.Output<outputs.BackgroundWorkerNotificationOverride>;
    public readonly numInstances!: pulumi.Output<number>;
    /**
     * Plan to use for the service. Must be one of `starter`, `standard`, `pro`, `pro_plus`, `pro_max`, `pro_ultra`, or a
     * custom plan.
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * This command runs before starting your service. It is typically used for tasks like running a database migration or
     * uploading assets to a CDN.
     */
    public readonly preDeployCommand!: pulumi.Output<string | undefined>;
    /**
     * Enable [pull request previews](https://docs.render.com/pull-request-previews#pull-request-previews-git-backed) for the
     * service.
     */
    public readonly pullRequestPreviewsEnabled!: pulumi.Output<boolean>;
    /**
     * [Region](https://docs.render.com/regions) to deploy the service. One of `frankfurt`, `ohio`, `oregon`, `singapore`,
     * `virginia`.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * When you specify a [root directory](https://docs.render.com/monorepo-support#root-directory), Render runs all your
     * commands in the specified directory and ignores changes outside the directory. Defaults to the repository root.
     */
    public readonly rootDirectory!: pulumi.Output<string>;
    /**
     * Source of the build artifacts or image that run your service. You must provide one of
     * [native_runtime](https://docs.render.com/native-runtimes), [docker](https://docs.render.com/docker), or
     * [image](https://docs.render.com/deploy-an-image).
     */
    public readonly runtimeSource!: pulumi.Output<outputs.BackgroundWorkerRuntimeSource>;
    /**
     * A map of secret file paths to their contents.
     */
    public readonly secretFiles!: pulumi.Output<{[key: string]: outputs.BackgroundWorkerSecretFiles} | undefined>;
    /**
     * Unique slug for the service
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;
    /**
     * Command to run the service. When using native runtimes, this will be used as the start command and is required. For
     * [Docker](https://docs.render.com/docker) and [image-backed](https://docs.render.com/deploy-an-image) services, this will
     * override the default Docker command for the image.
     */
    public readonly startCommand!: pulumi.Output<string | undefined>;

    /**
     * Create a BackgroundWorker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackgroundWorkerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackgroundWorkerArgs | BackgroundWorkerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackgroundWorkerState | undefined;
            resourceInputs["autoscaling"] = state ? state.autoscaling : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["envVars"] = state ? state.envVars : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["maxShutdownDelaySeconds"] = state ? state.maxShutdownDelaySeconds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationOverride"] = state ? state.notificationOverride : undefined;
            resourceInputs["numInstances"] = state ? state.numInstances : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["preDeployCommand"] = state ? state.preDeployCommand : undefined;
            resourceInputs["pullRequestPreviewsEnabled"] = state ? state.pullRequestPreviewsEnabled : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootDirectory"] = state ? state.rootDirectory : undefined;
            resourceInputs["runtimeSource"] = state ? state.runtimeSource : undefined;
            resourceInputs["secretFiles"] = state ? state.secretFiles : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["startCommand"] = state ? state.startCommand : undefined;
        } else {
            const args = argsOrState as BackgroundWorkerArgs | undefined;
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.runtimeSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeSource'");
            }
            resourceInputs["autoscaling"] = args ? args.autoscaling : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["envVars"] = args ? args.envVars : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["maxShutdownDelaySeconds"] = args ? args.maxShutdownDelaySeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationOverride"] = args ? args.notificationOverride : undefined;
            resourceInputs["numInstances"] = args ? args.numInstances : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["preDeployCommand"] = args ? args.preDeployCommand : undefined;
            resourceInputs["pullRequestPreviewsEnabled"] = args ? args.pullRequestPreviewsEnabled : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rootDirectory"] = args ? args.rootDirectory : undefined;
            resourceInputs["runtimeSource"] = args ? args.runtimeSource : undefined;
            resourceInputs["secretFiles"] = args ? args.secretFiles : undefined;
            resourceInputs["startCommand"] = args ? args.startCommand : undefined;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackgroundWorker.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BackgroundWorker resources.
 */
export interface BackgroundWorkerState {
    /**
     * [Autoscaling settings](https://docs.render.com/scaling#autoscaling) for the service
     */
    autoscaling?: pulumi.Input<inputs.BackgroundWorkerAutoscaling>;
    /**
     * [Persistent disk](https://docs.render.com/disks) to attach to the service.
     */
    disk?: pulumi.Input<inputs.BackgroundWorkerDisk>;
    /**
     * Map of environment variable names to their values.
     */
    envVars?: pulumi.Input<{[key: string]: pulumi.Input<inputs.BackgroundWorkerEnvVars>}>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending
     * it a SIGTERM signal before sending a SIGKILL signal.
     */
    maxShutdownDelaySeconds?: pulumi.Input<number>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Configure the [notification settings](https://docs.render.com/notifications) for this service. These will override the
     * global notification settings of the user or team.
     */
    notificationOverride?: pulumi.Input<inputs.BackgroundWorkerNotificationOverride>;
    numInstances?: pulumi.Input<number>;
    /**
     * Plan to use for the service. Must be one of `starter`, `standard`, `pro`, `pro_plus`, `pro_max`, `pro_ultra`, or a
     * custom plan.
     */
    plan?: pulumi.Input<string>;
    /**
     * This command runs before starting your service. It is typically used for tasks like running a database migration or
     * uploading assets to a CDN.
     */
    preDeployCommand?: pulumi.Input<string>;
    /**
     * Enable [pull request previews](https://docs.render.com/pull-request-previews#pull-request-previews-git-backed) for the
     * service.
     */
    pullRequestPreviewsEnabled?: pulumi.Input<boolean>;
    /**
     * [Region](https://docs.render.com/regions) to deploy the service. One of `frankfurt`, `ohio`, `oregon`, `singapore`,
     * `virginia`.
     */
    region?: pulumi.Input<string>;
    /**
     * When you specify a [root directory](https://docs.render.com/monorepo-support#root-directory), Render runs all your
     * commands in the specified directory and ignores changes outside the directory. Defaults to the repository root.
     */
    rootDirectory?: pulumi.Input<string>;
    /**
     * Source of the build artifacts or image that run your service. You must provide one of
     * [native_runtime](https://docs.render.com/native-runtimes), [docker](https://docs.render.com/docker), or
     * [image](https://docs.render.com/deploy-an-image).
     */
    runtimeSource?: pulumi.Input<inputs.BackgroundWorkerRuntimeSource>;
    /**
     * A map of secret file paths to their contents.
     */
    secretFiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.BackgroundWorkerSecretFiles>}>;
    /**
     * Unique slug for the service
     */
    slug?: pulumi.Input<string>;
    /**
     * Command to run the service. When using native runtimes, this will be used as the start command and is required. For
     * [Docker](https://docs.render.com/docker) and [image-backed](https://docs.render.com/deploy-an-image) services, this will
     * override the default Docker command for the image.
     */
    startCommand?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BackgroundWorker resource.
 */
export interface BackgroundWorkerArgs {
    /**
     * [Autoscaling settings](https://docs.render.com/scaling#autoscaling) for the service
     */
    autoscaling?: pulumi.Input<inputs.BackgroundWorkerAutoscaling>;
    /**
     * [Persistent disk](https://docs.render.com/disks) to attach to the service.
     */
    disk?: pulumi.Input<inputs.BackgroundWorkerDisk>;
    /**
     * Map of environment variable names to their values.
     */
    envVars?: pulumi.Input<{[key: string]: pulumi.Input<inputs.BackgroundWorkerEnvVars>}>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The maximum amount of time (in seconds) that Render waits for your application process to exit gracefully after sending
     * it a SIGTERM signal before sending a SIGKILL signal.
     */
    maxShutdownDelaySeconds?: pulumi.Input<number>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Configure the [notification settings](https://docs.render.com/notifications) for this service. These will override the
     * global notification settings of the user or team.
     */
    notificationOverride?: pulumi.Input<inputs.BackgroundWorkerNotificationOverride>;
    numInstances?: pulumi.Input<number>;
    /**
     * Plan to use for the service. Must be one of `starter`, `standard`, `pro`, `pro_plus`, `pro_max`, `pro_ultra`, or a
     * custom plan.
     */
    plan: pulumi.Input<string>;
    /**
     * This command runs before starting your service. It is typically used for tasks like running a database migration or
     * uploading assets to a CDN.
     */
    preDeployCommand?: pulumi.Input<string>;
    /**
     * Enable [pull request previews](https://docs.render.com/pull-request-previews#pull-request-previews-git-backed) for the
     * service.
     */
    pullRequestPreviewsEnabled?: pulumi.Input<boolean>;
    /**
     * [Region](https://docs.render.com/regions) to deploy the service. One of `frankfurt`, `ohio`, `oregon`, `singapore`,
     * `virginia`.
     */
    region: pulumi.Input<string>;
    /**
     * When you specify a [root directory](https://docs.render.com/monorepo-support#root-directory), Render runs all your
     * commands in the specified directory and ignores changes outside the directory. Defaults to the repository root.
     */
    rootDirectory?: pulumi.Input<string>;
    /**
     * Source of the build artifacts or image that run your service. You must provide one of
     * [native_runtime](https://docs.render.com/native-runtimes), [docker](https://docs.render.com/docker), or
     * [image](https://docs.render.com/deploy-an-image).
     */
    runtimeSource: pulumi.Input<inputs.BackgroundWorkerRuntimeSource>;
    /**
     * A map of secret file paths to their contents.
     */
    secretFiles?: pulumi.Input<{[key: string]: pulumi.Input<inputs.BackgroundWorkerSecretFiles>}>;
    /**
     * Command to run the service. When using native runtimes, this will be used as the start command and is required. For
     * [Docker](https://docs.render.com/docker) and [image-backed](https://docs.render.com/deploy-an-image) services, this will
     * override the default Docker command for the image.
     */
    startCommand?: pulumi.Input<string>;
}
