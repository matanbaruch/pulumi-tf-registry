// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRedis(args: GetRedisArgs, opts?: pulumi.InvokeOptions): Promise<GetRedisResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("render:index/getRedis:getRedis", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRedis.
 */
export interface GetRedisArgs {
    id: string;
}

/**
 * A collection of values returned by getRedis.
 */
export interface GetRedisResult {
    readonly connectionInfo: outputs.GetRedisConnectionInfo;
    readonly environmentId: string;
    readonly id: string;
    readonly ipAllowLists: outputs.GetRedisIpAllowList[];
    readonly maxMemoryPolicy: string;
    readonly name: string;
    readonly plan: string;
    readonly region: string;
}
export function getRedisOutput(args: GetRedisOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRedisResult> {
    return pulumi.output(args).apply((a: any) => getRedis(a, opts))
}

/**
 * A collection of arguments for invoking getRedis.
 */
export interface GetRedisOutputArgs {
    id: pulumi.Input<string>;
}
