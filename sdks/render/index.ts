// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BackgroundWorkerArgs, BackgroundWorkerState } from "./backgroundWorker";
export type BackgroundWorker = import("./backgroundWorker").BackgroundWorker;
export const BackgroundWorker: typeof import("./backgroundWorker").BackgroundWorker = null as any;
utilities.lazyLoad(exports, ["BackgroundWorker"], () => require("./backgroundWorker"));

export { CronJobArgs, CronJobState } from "./cronJob";
export type CronJob = import("./cronJob").CronJob;
export const CronJob: typeof import("./cronJob").CronJob = null as any;
utilities.lazyLoad(exports, ["CronJob"], () => require("./cronJob"));

export { EnvGroupArgs, EnvGroupState } from "./envGroup";
export type EnvGroup = import("./envGroup").EnvGroup;
export const EnvGroup: typeof import("./envGroup").EnvGroup = null as any;
utilities.lazyLoad(exports, ["EnvGroup"], () => require("./envGroup"));

export { EnvGroupLinkArgs, EnvGroupLinkState } from "./envGroupLink";
export type EnvGroupLink = import("./envGroupLink").EnvGroupLink;
export const EnvGroupLink: typeof import("./envGroupLink").EnvGroupLink = null as any;
utilities.lazyLoad(exports, ["EnvGroupLink"], () => require("./envGroupLink"));

export { GetBackgroundWorkerArgs, GetBackgroundWorkerResult, GetBackgroundWorkerOutputArgs } from "./getBackgroundWorker";
export const getBackgroundWorker: typeof import("./getBackgroundWorker").getBackgroundWorker = null as any;
export const getBackgroundWorkerOutput: typeof import("./getBackgroundWorker").getBackgroundWorkerOutput = null as any;
utilities.lazyLoad(exports, ["getBackgroundWorker","getBackgroundWorkerOutput"], () => require("./getBackgroundWorker"));

export { GetCronJobArgs, GetCronJobResult, GetCronJobOutputArgs } from "./getCronJob";
export const getCronJob: typeof import("./getCronJob").getCronJob = null as any;
export const getCronJobOutput: typeof import("./getCronJob").getCronJobOutput = null as any;
utilities.lazyLoad(exports, ["getCronJob","getCronJobOutput"], () => require("./getCronJob"));

export { GetEnvGroupArgs, GetEnvGroupResult, GetEnvGroupOutputArgs } from "./getEnvGroup";
export const getEnvGroup: typeof import("./getEnvGroup").getEnvGroup = null as any;
export const getEnvGroupOutput: typeof import("./getEnvGroup").getEnvGroupOutput = null as any;
utilities.lazyLoad(exports, ["getEnvGroup","getEnvGroupOutput"], () => require("./getEnvGroup"));

export { GetEnvGroupLinkArgs, GetEnvGroupLinkResult, GetEnvGroupLinkOutputArgs } from "./getEnvGroupLink";
export const getEnvGroupLink: typeof import("./getEnvGroupLink").getEnvGroupLink = null as any;
export const getEnvGroupLinkOutput: typeof import("./getEnvGroupLink").getEnvGroupLinkOutput = null as any;
utilities.lazyLoad(exports, ["getEnvGroupLink","getEnvGroupLinkOutput"], () => require("./getEnvGroupLink"));

export { GetNotificationSettingResult } from "./getNotificationSetting";
export const getNotificationSetting: typeof import("./getNotificationSetting").getNotificationSetting = null as any;
export const getNotificationSettingOutput: typeof import("./getNotificationSetting").getNotificationSettingOutput = null as any;
utilities.lazyLoad(exports, ["getNotificationSetting","getNotificationSettingOutput"], () => require("./getNotificationSetting"));

export { GetPostgresArgs, GetPostgresResult, GetPostgresOutputArgs } from "./getPostgres";
export const getPostgres: typeof import("./getPostgres").getPostgres = null as any;
export const getPostgresOutput: typeof import("./getPostgres").getPostgresOutput = null as any;
utilities.lazyLoad(exports, ["getPostgres","getPostgresOutput"], () => require("./getPostgres"));

export { GetPrivateServiceArgs, GetPrivateServiceResult, GetPrivateServiceOutputArgs } from "./getPrivateService";
export const getPrivateService: typeof import("./getPrivateService").getPrivateService = null as any;
export const getPrivateServiceOutput: typeof import("./getPrivateService").getPrivateServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateService","getPrivateServiceOutput"], () => require("./getPrivateService"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRedisArgs, GetRedisResult, GetRedisOutputArgs } from "./getRedis";
export const getRedis: typeof import("./getRedis").getRedis = null as any;
export const getRedisOutput: typeof import("./getRedis").getRedisOutput = null as any;
utilities.lazyLoad(exports, ["getRedis","getRedisOutput"], () => require("./getRedis"));

export { GetRegistryCredentialArgs, GetRegistryCredentialResult, GetRegistryCredentialOutputArgs } from "./getRegistryCredential";
export const getRegistryCredential: typeof import("./getRegistryCredential").getRegistryCredential = null as any;
export const getRegistryCredentialOutput: typeof import("./getRegistryCredential").getRegistryCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getRegistryCredential","getRegistryCredentialOutput"], () => require("./getRegistryCredential"));

export { GetStaticSiteArgs, GetStaticSiteResult, GetStaticSiteOutputArgs } from "./getStaticSite";
export const getStaticSite: typeof import("./getStaticSite").getStaticSite = null as any;
export const getStaticSiteOutput: typeof import("./getStaticSite").getStaticSiteOutput = null as any;
utilities.lazyLoad(exports, ["getStaticSite","getStaticSiteOutput"], () => require("./getStaticSite"));

export { GetWebServiceArgs, GetWebServiceResult, GetWebServiceOutputArgs } from "./getWebService";
export const getWebService: typeof import("./getWebService").getWebService = null as any;
export const getWebServiceOutput: typeof import("./getWebService").getWebServiceOutput = null as any;
utilities.lazyLoad(exports, ["getWebService","getWebServiceOutput"], () => require("./getWebService"));

export { NotificationSettingArgs, NotificationSettingState } from "./notificationSetting";
export type NotificationSetting = import("./notificationSetting").NotificationSetting;
export const NotificationSetting: typeof import("./notificationSetting").NotificationSetting = null as any;
utilities.lazyLoad(exports, ["NotificationSetting"], () => require("./notificationSetting"));

export { PostgresArgs, PostgresState } from "./postgres";
export type Postgres = import("./postgres").Postgres;
export const Postgres: typeof import("./postgres").Postgres = null as any;
utilities.lazyLoad(exports, ["Postgres"], () => require("./postgres"));

export { PrivateServiceArgs, PrivateServiceState } from "./privateService";
export type PrivateService = import("./privateService").PrivateService;
export const PrivateService: typeof import("./privateService").PrivateService = null as any;
utilities.lazyLoad(exports, ["PrivateService"], () => require("./privateService"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RedisArgs, RedisState } from "./redis";
export type Redis = import("./redis").Redis;
export const Redis: typeof import("./redis").Redis = null as any;
utilities.lazyLoad(exports, ["Redis"], () => require("./redis"));

export { RegistryCredentialArgs, RegistryCredentialState } from "./registryCredential";
export type RegistryCredential = import("./registryCredential").RegistryCredential;
export const RegistryCredential: typeof import("./registryCredential").RegistryCredential = null as any;
utilities.lazyLoad(exports, ["RegistryCredential"], () => require("./registryCredential"));

export { StaticSiteArgs, StaticSiteState } from "./staticSite";
export type StaticSite = import("./staticSite").StaticSite;
export const StaticSite: typeof import("./staticSite").StaticSite = null as any;
utilities.lazyLoad(exports, ["StaticSite"], () => require("./staticSite"));

export { WebServiceArgs, WebServiceState } from "./webService";
export type WebService = import("./webService").WebService;
export const WebService: typeof import("./webService").WebService = null as any;
utilities.lazyLoad(exports, ["WebService"], () => require("./webService"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "render:index/backgroundWorker:BackgroundWorker":
                return new BackgroundWorker(name, <any>undefined, { urn })
            case "render:index/cronJob:CronJob":
                return new CronJob(name, <any>undefined, { urn })
            case "render:index/envGroup:EnvGroup":
                return new EnvGroup(name, <any>undefined, { urn })
            case "render:index/envGroupLink:EnvGroupLink":
                return new EnvGroupLink(name, <any>undefined, { urn })
            case "render:index/notificationSetting:NotificationSetting":
                return new NotificationSetting(name, <any>undefined, { urn })
            case "render:index/postgres:Postgres":
                return new Postgres(name, <any>undefined, { urn })
            case "render:index/privateService:PrivateService":
                return new PrivateService(name, <any>undefined, { urn })
            case "render:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "render:index/redis:Redis":
                return new Redis(name, <any>undefined, { urn })
            case "render:index/registryCredential:RegistryCredential":
                return new RegistryCredential(name, <any>undefined, { urn })
            case "render:index/staticSite:StaticSite":
                return new StaticSite(name, <any>undefined, { urn })
            case "render:index/webService:WebService":
                return new WebService(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("render", "index/backgroundWorker", _module)
pulumi.runtime.registerResourceModule("render", "index/cronJob", _module)
pulumi.runtime.registerResourceModule("render", "index/envGroup", _module)
pulumi.runtime.registerResourceModule("render", "index/envGroupLink", _module)
pulumi.runtime.registerResourceModule("render", "index/notificationSetting", _module)
pulumi.runtime.registerResourceModule("render", "index/postgres", _module)
pulumi.runtime.registerResourceModule("render", "index/privateService", _module)
pulumi.runtime.registerResourceModule("render", "index/project", _module)
pulumi.runtime.registerResourceModule("render", "index/redis", _module)
pulumi.runtime.registerResourceModule("render", "index/registryCredential", _module)
pulumi.runtime.registerResourceModule("render", "index/staticSite", _module)
pulumi.runtime.registerResourceModule("render", "index/webService", _module)
pulumi.runtime.registerResourcePackage("render", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:render") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
