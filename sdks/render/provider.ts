// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the render package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'render';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * API key to use when interacting with the API. You can generate an API key from the user settings on the Render
     * dashboard. The provider will read this value from the RENDER_API_KEY environment variable if set. This key is sensitive
     * and should not be committed to source control.
     */
    public readonly apiKey!: pulumi.Output<string | undefined>;
    /**
     * The user or team ID that owns the managed resources. All resources will be created under this owner ID. You can find the
     * owner ID in the Render dashboard by navigating to the user or team settings and finding the ID in the URL. The ID will
     * start with usr- for individual accounts and tea- for team accounts. The provider will read this value from the
     * RENDER_OWNER_ID environment variable if set.
     */
    public readonly ownerId!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["ownerId"] = args ? args.ownerId : undefined;
            resourceInputs["waitForDeployCompletion"] = pulumi.output(args ? args.waitForDeployCompletion : undefined).apply(JSON.stringify);
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * API key to use when interacting with the API. You can generate an API key from the user settings on the Render
     * dashboard. The provider will read this value from the RENDER_API_KEY environment variable if set. This key is sensitive
     * and should not be committed to source control.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The user or team ID that owns the managed resources. All resources will be created under this owner ID. You can find the
     * owner ID in the Render dashboard by navigating to the user or team settings and finding the ID in the URL. The ID will
     * start with usr- for individual accounts and tea- for team accounts. The provider will read this value from the
     * RENDER_OWNER_ID environment variable if set.
     */
    ownerId?: pulumi.Input<string>;
    /**
     * If set to true, the provider will wait for deployments to complete when creating web services, private services, and
     * background workers before continuing. This is useful when you have services that depend on one another and the
     * dependencies must be live for the dependent service to successfully start. The default value is false. The provider will
     * read this value from the RENDER_WAIT_FOR_DEPLOY_COMPLETION environment variable if set.
     */
    waitForDeployCompletion?: pulumi.Input<boolean>;
}
