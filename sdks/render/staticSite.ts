// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StaticSite extends pulumi.CustomResource {
    /**
     * Get an existing StaticSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StaticSiteState, opts?: pulumi.CustomResourceOptions): StaticSite {
        return new StaticSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:index/staticSite:StaticSite';

    /**
     * Returns true if the given object is an instance of StaticSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StaticSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StaticSite.__pulumiType;
    }

    /**
     * [Automatic deploy](https://docs.render.com/deploys#automatic-git-deploys) on every push to your repository, or changes
     * to your service settings or environment.
     */
    public readonly autoDeploy!: pulumi.Output<boolean>;
    /**
     * Branch of the git repository to build.
     */
    public readonly branch!: pulumi.Output<string>;
    /**
     * Command to build the service
     */
    public readonly buildCommand!: pulumi.Output<string>;
    /**
     * Apply [build filters](https://docs.render.com/monorepo-support#build-filters) to configure which changes in your git
     * repository trigger automatic deploys. If you've defined a root directory, you can still define paths outside of the root
     * directory.
     */
    public readonly buildFilter!: pulumi.Output<outputs.StaticSiteBuildFilter | undefined>;
    /**
     * Custom domains to associate with the service.
     */
    public readonly customDomains!: pulumi.Output<outputs.StaticSiteCustomDomain[] | undefined>;
    /**
     * Map of environment variable names to their values.
     */
    public readonly envVars!: pulumi.Output<{[key: string]: outputs.StaticSiteEnvVars} | undefined>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    public readonly environmentId!: pulumi.Output<string | undefined>;
    /**
     * List of [headers](https://docs.render.com/static-site-headers) to apply to requests for static sites
     */
    public readonly headers!: pulumi.Output<outputs.StaticSiteHeader[] | undefined>;
    /**
     * Name of the service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configure the [notification settings](https://docs.render.com/notifications) for this service. These will override the
     * global notification settings of the user or team.
     */
    public readonly notificationOverride!: pulumi.Output<outputs.StaticSiteNotificationOverride>;
    /**
     * Path to the directory that contains the build artifacts to publish for a static site. Defaults to public/.
     */
    public readonly publishPath!: pulumi.Output<string>;
    /**
     * Enable [pull request previews](https://docs.render.com/pull-request-previews#pull-request-previews-git-backed) for the
     * service.
     */
    public readonly pullRequestPreviewsEnabled!: pulumi.Output<boolean>;
    /**
     * URL of the git repository to build.
     */
    public readonly repoUrl!: pulumi.Output<string>;
    /**
     * When you specify a [root directory](https://docs.render.com/monorepo-support#root-directory), Render runs all your
     * commands in the specified directory and ignores changes outside the directory. Defaults to the repository root.
     */
    public readonly rootDirectory!: pulumi.Output<string>;
    /**
     * List of [redirect and rewrite rules](https://docs.render.com/redirects-rewrites) to apply to a static site.
     */
    public readonly routes!: pulumi.Output<outputs.StaticSiteRoute[] | undefined>;
    /**
     * Unique slug for the service
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;
    /**
     * URL that the service is accessible from.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a StaticSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StaticSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StaticSiteArgs | StaticSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StaticSiteState | undefined;
            resourceInputs["autoDeploy"] = state ? state.autoDeploy : undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["buildCommand"] = state ? state.buildCommand : undefined;
            resourceInputs["buildFilter"] = state ? state.buildFilter : undefined;
            resourceInputs["customDomains"] = state ? state.customDomains : undefined;
            resourceInputs["envVars"] = state ? state.envVars : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationOverride"] = state ? state.notificationOverride : undefined;
            resourceInputs["publishPath"] = state ? state.publishPath : undefined;
            resourceInputs["pullRequestPreviewsEnabled"] = state ? state.pullRequestPreviewsEnabled : undefined;
            resourceInputs["repoUrl"] = state ? state.repoUrl : undefined;
            resourceInputs["rootDirectory"] = state ? state.rootDirectory : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as StaticSiteArgs | undefined;
            if ((!args || args.branch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'branch'");
            }
            if ((!args || args.buildCommand === undefined) && !opts.urn) {
                throw new Error("Missing required property 'buildCommand'");
            }
            if ((!args || args.repoUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repoUrl'");
            }
            resourceInputs["autoDeploy"] = args ? args.autoDeploy : undefined;
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["buildCommand"] = args ? args.buildCommand : undefined;
            resourceInputs["buildFilter"] = args ? args.buildFilter : undefined;
            resourceInputs["customDomains"] = args ? args.customDomains : undefined;
            resourceInputs["envVars"] = args ? args.envVars : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationOverride"] = args ? args.notificationOverride : undefined;
            resourceInputs["publishPath"] = args ? args.publishPath : undefined;
            resourceInputs["pullRequestPreviewsEnabled"] = args ? args.pullRequestPreviewsEnabled : undefined;
            resourceInputs["repoUrl"] = args ? args.repoUrl : undefined;
            resourceInputs["rootDirectory"] = args ? args.rootDirectory : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StaticSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StaticSite resources.
 */
export interface StaticSiteState {
    /**
     * [Automatic deploy](https://docs.render.com/deploys#automatic-git-deploys) on every push to your repository, or changes
     * to your service settings or environment.
     */
    autoDeploy?: pulumi.Input<boolean>;
    /**
     * Branch of the git repository to build.
     */
    branch?: pulumi.Input<string>;
    /**
     * Command to build the service
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * Apply [build filters](https://docs.render.com/monorepo-support#build-filters) to configure which changes in your git
     * repository trigger automatic deploys. If you've defined a root directory, you can still define paths outside of the root
     * directory.
     */
    buildFilter?: pulumi.Input<inputs.StaticSiteBuildFilter>;
    /**
     * Custom domains to associate with the service.
     */
    customDomains?: pulumi.Input<pulumi.Input<inputs.StaticSiteCustomDomain>[]>;
    /**
     * Map of environment variable names to their values.
     */
    envVars?: pulumi.Input<{[key: string]: pulumi.Input<inputs.StaticSiteEnvVars>}>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * List of [headers](https://docs.render.com/static-site-headers) to apply to requests for static sites
     */
    headers?: pulumi.Input<pulumi.Input<inputs.StaticSiteHeader>[]>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Configure the [notification settings](https://docs.render.com/notifications) for this service. These will override the
     * global notification settings of the user or team.
     */
    notificationOverride?: pulumi.Input<inputs.StaticSiteNotificationOverride>;
    /**
     * Path to the directory that contains the build artifacts to publish for a static site. Defaults to public/.
     */
    publishPath?: pulumi.Input<string>;
    /**
     * Enable [pull request previews](https://docs.render.com/pull-request-previews#pull-request-previews-git-backed) for the
     * service.
     */
    pullRequestPreviewsEnabled?: pulumi.Input<boolean>;
    /**
     * URL of the git repository to build.
     */
    repoUrl?: pulumi.Input<string>;
    /**
     * When you specify a [root directory](https://docs.render.com/monorepo-support#root-directory), Render runs all your
     * commands in the specified directory and ignores changes outside the directory. Defaults to the repository root.
     */
    rootDirectory?: pulumi.Input<string>;
    /**
     * List of [redirect and rewrite rules](https://docs.render.com/redirects-rewrites) to apply to a static site.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.StaticSiteRoute>[]>;
    /**
     * Unique slug for the service
     */
    slug?: pulumi.Input<string>;
    /**
     * URL that the service is accessible from.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StaticSite resource.
 */
export interface StaticSiteArgs {
    /**
     * [Automatic deploy](https://docs.render.com/deploys#automatic-git-deploys) on every push to your repository, or changes
     * to your service settings or environment.
     */
    autoDeploy?: pulumi.Input<boolean>;
    /**
     * Branch of the git repository to build.
     */
    branch: pulumi.Input<string>;
    /**
     * Command to build the service
     */
    buildCommand: pulumi.Input<string>;
    /**
     * Apply [build filters](https://docs.render.com/monorepo-support#build-filters) to configure which changes in your git
     * repository trigger automatic deploys. If you've defined a root directory, you can still define paths outside of the root
     * directory.
     */
    buildFilter?: pulumi.Input<inputs.StaticSiteBuildFilter>;
    /**
     * Custom domains to associate with the service.
     */
    customDomains?: pulumi.Input<pulumi.Input<inputs.StaticSiteCustomDomain>[]>;
    /**
     * Map of environment variable names to their values.
     */
    envVars?: pulumi.Input<{[key: string]: pulumi.Input<inputs.StaticSiteEnvVars>}>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * List of [headers](https://docs.render.com/static-site-headers) to apply to requests for static sites
     */
    headers?: pulumi.Input<pulumi.Input<inputs.StaticSiteHeader>[]>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Configure the [notification settings](https://docs.render.com/notifications) for this service. These will override the
     * global notification settings of the user or team.
     */
    notificationOverride?: pulumi.Input<inputs.StaticSiteNotificationOverride>;
    /**
     * Path to the directory that contains the build artifacts to publish for a static site. Defaults to public/.
     */
    publishPath?: pulumi.Input<string>;
    /**
     * Enable [pull request previews](https://docs.render.com/pull-request-previews#pull-request-previews-git-backed) for the
     * service.
     */
    pullRequestPreviewsEnabled?: pulumi.Input<boolean>;
    /**
     * URL of the git repository to build.
     */
    repoUrl: pulumi.Input<string>;
    /**
     * When you specify a [root directory](https://docs.render.com/monorepo-support#root-directory), Render runs all your
     * commands in the specified directory and ignores changes outside the directory. Defaults to the repository root.
     */
    rootDirectory?: pulumi.Input<string>;
    /**
     * List of [redirect and rewrite rules](https://docs.render.com/redirects-rewrites) to apply to a static site.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.StaticSiteRoute>[]>;
}
