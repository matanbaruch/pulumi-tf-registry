// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Redis extends pulumi.CustomResource {
    /**
     * Get an existing Redis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisState, opts?: pulumi.CustomResourceOptions): Redis {
        return new Redis(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:index/redis:Redis';

    /**
     * Returns true if the given object is an instance of Redis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Redis {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Redis.__pulumiType;
    }

    /**
     * Database connection info.
     */
    public /*out*/ readonly connectionInfo!: pulumi.Output<outputs.RedisConnectionInfo>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    public readonly environmentId!: pulumi.Output<string | undefined>;
    /**
     * List of IP addresses that are allowed to connect to the instance. If no IP addresses are provided, only connections via
     * the private network will be allowed.
     */
    public readonly ipAllowLists!: pulumi.Output<outputs.RedisIpAllowList[]>;
    /**
     * Policy for evicting keys when the maxmemory limit is reached. Valid values are `allkeys_lfu`, `allkeys_lru`,
     * `allkeys_random`, `noeviction`, `volatile_lfu`, `volatile_lru`, `volatile_random`, `volatile_ttl.`
     */
    public readonly maxMemoryPolicy!: pulumi.Output<string>;
    /**
     * Name of the service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Plan for the Redis instance. Must be one of `free`, `starter`, `standard`, `pro`, `pro_plus`, or a custom plan.
     */
    public readonly plan!: pulumi.Output<string>;
    /**
     * [Region](https://docs.render.com/regions) to deploy the service. One of `frankfurt`, `ohio`, `oregon`, `singapore`,
     * `virginia`.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a Redis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisArgs | RedisState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisState | undefined;
            resourceInputs["connectionInfo"] = state ? state.connectionInfo : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["ipAllowLists"] = state ? state.ipAllowLists : undefined;
            resourceInputs["maxMemoryPolicy"] = state ? state.maxMemoryPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as RedisArgs | undefined;
            if ((!args || args.maxMemoryPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxMemoryPolicy'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["ipAllowLists"] = args ? args.ipAllowLists : undefined;
            resourceInputs["maxMemoryPolicy"] = args ? args.maxMemoryPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["connectionInfo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["connectionInfo"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Redis.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Redis resources.
 */
export interface RedisState {
    /**
     * Database connection info.
     */
    connectionInfo?: pulumi.Input<inputs.RedisConnectionInfo>;
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * List of IP addresses that are allowed to connect to the instance. If no IP addresses are provided, only connections via
     * the private network will be allowed.
     */
    ipAllowLists?: pulumi.Input<pulumi.Input<inputs.RedisIpAllowList>[]>;
    /**
     * Policy for evicting keys when the maxmemory limit is reached. Valid values are `allkeys_lfu`, `allkeys_lru`,
     * `allkeys_random`, `noeviction`, `volatile_lfu`, `volatile_lru`, `volatile_random`, `volatile_ttl.`
     */
    maxMemoryPolicy?: pulumi.Input<string>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Plan for the Redis instance. Must be one of `free`, `starter`, `standard`, `pro`, `pro_plus`, or a custom plan.
     */
    plan?: pulumi.Input<string>;
    /**
     * [Region](https://docs.render.com/regions) to deploy the service. One of `frankfurt`, `ohio`, `oregon`, `singapore`,
     * `virginia`.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Redis resource.
 */
export interface RedisArgs {
    /**
     * ID of the [project environment](https://docs.render.com/projects) that the resource belongs to
     */
    environmentId?: pulumi.Input<string>;
    /**
     * List of IP addresses that are allowed to connect to the instance. If no IP addresses are provided, only connections via
     * the private network will be allowed.
     */
    ipAllowLists?: pulumi.Input<pulumi.Input<inputs.RedisIpAllowList>[]>;
    /**
     * Policy for evicting keys when the maxmemory limit is reached. Valid values are `allkeys_lfu`, `allkeys_lru`,
     * `allkeys_random`, `noeviction`, `volatile_lfu`, `volatile_lru`, `volatile_random`, `volatile_ttl.`
     */
    maxMemoryPolicy: pulumi.Input<string>;
    /**
     * Name of the service
     */
    name?: pulumi.Input<string>;
    /**
     * Plan for the Redis instance. Must be one of `free`, `starter`, `standard`, `pro`, `pro_plus`, or a custom plan.
     */
    plan?: pulumi.Input<string>;
    /**
     * [Region](https://docs.render.com/regions) to deploy the service. One of `frankfurt`, `ohio`, `oregon`, `singapore`,
     * `virginia`.
     */
    region: pulumi.Input<string>;
}
