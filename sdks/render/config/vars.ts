// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("render");

/**
 * API key to use when interacting with the API. You can generate an API key from the user settings on the Render
 * dashboard. The provider will read this value from the RENDER_API_KEY environment variable if set. This key is sensitive
 * and should not be committed to source control.
 */
export declare const apiKey: string | undefined;
Object.defineProperty(exports, "apiKey", {
    get() {
        return __config.get("apiKey");
    },
    enumerable: true,
});

/**
 * The user or team ID that owns the managed resources. All resources will be created under this owner ID. You can find the
 * owner ID in the Render dashboard by navigating to the user or team settings and finding the ID in the URL. The ID will
 * start with usr- for individual accounts and tea- for team accounts. The provider will read this value from the
 * RENDER_OWNER_ID environment variable if set.
 */
export declare const ownerId: string | undefined;
Object.defineProperty(exports, "ownerId", {
    get() {
        return __config.get("ownerId");
    },
    enumerable: true,
});

/**
 * If set to true, the provider will wait for deployments to complete when creating web services, private services, and
 * background workers before continuing. This is useful when you have services that depend on one another and the
 * dependencies must be live for the dependent service to successfully start. The default value is false. The provider will
 * read this value from the RENDER_WAIT_FOR_DEPLOY_COMPLETION environment variable if set.
 */
export declare const waitForDeployCompletion: boolean | undefined;
Object.defineProperty(exports, "waitForDeployCompletion", {
    get() {
        return __config.getObject<boolean>("waitForDeployCompletion");
    },
    enumerable: true,
});

