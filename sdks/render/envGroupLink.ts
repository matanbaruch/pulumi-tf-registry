// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class EnvGroupLink extends pulumi.CustomResource {
    /**
     * Get an existing EnvGroupLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvGroupLinkState, opts?: pulumi.CustomResourceOptions): EnvGroupLink {
        return new EnvGroupLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'render:index/envGroupLink:EnvGroupLink';

    /**
     * Returns true if the given object is an instance of EnvGroupLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvGroupLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvGroupLink.__pulumiType;
    }

    /**
     * Unique identifier for the environment group
     */
    public readonly envGroupId!: pulumi.Output<string>;
    /**
     * List of service ids linked to the environment group
     */
    public readonly serviceIds!: pulumi.Output<string[]>;

    /**
     * Create a EnvGroupLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvGroupLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvGroupLinkArgs | EnvGroupLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvGroupLinkState | undefined;
            resourceInputs["envGroupId"] = state ? state.envGroupId : undefined;
            resourceInputs["serviceIds"] = state ? state.serviceIds : undefined;
        } else {
            const args = argsOrState as EnvGroupLinkArgs | undefined;
            if ((!args || args.envGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envGroupId'");
            }
            if ((!args || args.serviceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceIds'");
            }
            resourceInputs["envGroupId"] = args ? args.envGroupId : undefined;
            resourceInputs["serviceIds"] = args ? args.serviceIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvGroupLink.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EnvGroupLink resources.
 */
export interface EnvGroupLinkState {
    /**
     * Unique identifier for the environment group
     */
    envGroupId?: pulumi.Input<string>;
    /**
     * List of service ids linked to the environment group
     */
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EnvGroupLink resource.
 */
export interface EnvGroupLinkArgs {
    /**
     * Unique identifier for the environment group
     */
    envGroupId: pulumi.Input<string>;
    /**
     * List of service ids linked to the environment group
     */
    serviceIds: pulumi.Input<pulumi.Input<string>[]>;
}
