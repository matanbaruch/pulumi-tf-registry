// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AliasRecord extends pulumi.CustomResource {
    /**
     * Get an existing AliasRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AliasRecordState, opts?: pulumi.CustomResourceOptions): AliasRecord {
        return new AliasRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infoblox:index/aliasRecord:AliasRecord';

    /**
     * Returns true if the given object is an instance of AliasRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AliasRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AliasRecord.__pulumiType;
    }

    /**
     * Comment for the record; maximum 256 characters.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * Determines if the record is disabled or not. False means that the record is enabled.
     */
    public readonly disable!: pulumi.Output<boolean>;
    /**
     * The name for an Alias record in punycode format.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * Target name in punycode format.
     */
    public /*out*/ readonly dnsTargetName!: pulumi.Output<string>;
    /**
     * Extensible attributes of alias record (Values are JSON encoded).
     */
    public readonly extensibleAttributes!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name for an Alias record in FQDN format.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Reference id of alias record object.
     */
    public /*out*/ readonly ref!: pulumi.Output<string>;
    /**
     * Target name in FQDN format.
     */
    public readonly targetName!: pulumi.Output<string>;
    /**
     * Target type.
     */
    public readonly targetType!: pulumi.Output<string>;
    /**
     * The name of the DNS View in which the record resides.
     */
    public readonly view!: pulumi.Output<string>;
    /**
     * The name of the zone in which the record resides.
     */
    public /*out*/ readonly zone!: pulumi.Output<string>;

    /**
     * Create a AliasRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AliasRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AliasRecordArgs | AliasRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AliasRecordState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["dnsTargetName"] = state ? state.dnsTargetName : undefined;
            resourceInputs["extensibleAttributes"] = state ? state.extensibleAttributes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ref"] = state ? state.ref : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as AliasRecordArgs | undefined;
            if ((!args || args.targetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetName'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["extensibleAttributes"] = args ? args.extensibleAttributes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["dnsTargetName"] = undefined /*out*/;
            resourceInputs["ref"] = undefined /*out*/;
            resourceInputs["zone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AliasRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AliasRecord resources.
 */
export interface AliasRecordState {
    /**
     * Comment for the record; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Determines if the record is disabled or not. False means that the record is enabled.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * The name for an Alias record in punycode format.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Target name in punycode format.
     */
    dnsTargetName?: pulumi.Input<string>;
    /**
     * Extensible attributes of alias record (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name for an Alias record in FQDN format.
     */
    name?: pulumi.Input<string>;
    /**
     * Reference id of alias record object.
     */
    ref?: pulumi.Input<string>;
    /**
     * Target name in FQDN format.
     */
    targetName?: pulumi.Input<string>;
    /**
     * Target type.
     */
    targetType?: pulumi.Input<string>;
    /**
     * The name of the DNS View in which the record resides.
     */
    view?: pulumi.Input<string>;
    /**
     * The name of the zone in which the record resides.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AliasRecord resource.
 */
export interface AliasRecordArgs {
    /**
     * Comment for the record; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Determines if the record is disabled or not. False means that the record is enabled.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * Extensible attributes of alias record (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name for an Alias record in FQDN format.
     */
    name?: pulumi.Input<string>;
    /**
     * Target name in FQDN format.
     */
    targetName: pulumi.Input<string>;
    /**
     * Target type.
     */
    targetType: pulumi.Input<string>;
    /**
     * The name of the DNS View in which the record resides.
     */
    view?: pulumi.Input<string>;
}
