// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Network extends pulumi.CustomResource {
    /**
     * Get an existing Network resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkState, opts?: pulumi.CustomResourceOptions): Network {
        return new Network(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infoblox:index/network:Network';

    /**
     * Returns true if the given object is an instance of Network.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Network {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Network.__pulumiType;
    }

    /**
     * The network address in IPv4 Address/CIDR format.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Comment for the record; maximum 256 characters.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * Disable for DHCP.
     */
    public readonly disableDhcp!: pulumi.Output<boolean | undefined>;
    /**
     * Ea search criteria for next_available_network function
     */
    public readonly eaSearch!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Extensible attributes of network (Values are JSON encoded).
     */
    public readonly extensibleAttributes!: pulumi.Output<{[key: string]: string}>;
    /**
     * Name of extensible attribute for gateway address
     */
    public readonly gatewayEa!: pulumi.Output<string | undefined>;
    /**
     * IP address of default gateway if auto-created
     */
    public /*out*/ readonly gatewayIp!: pulumi.Output<string>;
    /**
     * Name to apply to gateway reservation
     */
    public readonly gatewayLabel!: pulumi.Output<string | undefined>;
    /**
     * Offset from network address to reserve for default gateway
     */
    public readonly gatewayOffset!: pulumi.Output<number | undefined>;
    /**
     * Reference id for gateway if created
     */
    public /*out*/ readonly gatewayRef!: pulumi.Output<string>;
    /**
     * Ref for grid needed for restarting services.
     */
    public readonly gridRef!: pulumi.Output<string | undefined>;
    /**
     * Grid members associated with network.
     */
    public readonly member!: pulumi.Output<outputs.NetworkMember | undefined>;
    /**
     * The name of the network view in which this network resides.
     */
    public readonly networkView!: pulumi.Output<string>;
    /**
     * An array of DHCP option structs that lists the DHCP options associated with the object.
     */
    public readonly options!: pulumi.Output<outputs.NetworkOption[] | undefined>;
    /**
     * Parent container CIDR subnet
     */
    public readonly parentCidr!: pulumi.Output<string | undefined>;
    /**
     * Desired prefix size of requested network
     */
    public readonly prefixLength!: pulumi.Output<number | undefined>;
    /**
     * Reference id of network object.
     */
    public /*out*/ readonly ref!: pulumi.Output<string>;
    /**
     * Restart dhcp services if needed.
     */
    public readonly restartIfNeeded!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Network resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkArgs | NetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disableDhcp"] = state ? state.disableDhcp : undefined;
            resourceInputs["eaSearch"] = state ? state.eaSearch : undefined;
            resourceInputs["extensibleAttributes"] = state ? state.extensibleAttributes : undefined;
            resourceInputs["gatewayEa"] = state ? state.gatewayEa : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["gatewayLabel"] = state ? state.gatewayLabel : undefined;
            resourceInputs["gatewayOffset"] = state ? state.gatewayOffset : undefined;
            resourceInputs["gatewayRef"] = state ? state.gatewayRef : undefined;
            resourceInputs["gridRef"] = state ? state.gridRef : undefined;
            resourceInputs["member"] = state ? state.member : undefined;
            resourceInputs["networkView"] = state ? state.networkView : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["parentCidr"] = state ? state.parentCidr : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["ref"] = state ? state.ref : undefined;
            resourceInputs["restartIfNeeded"] = state ? state.restartIfNeeded : undefined;
        } else {
            const args = argsOrState as NetworkArgs | undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disableDhcp"] = args ? args.disableDhcp : undefined;
            resourceInputs["eaSearch"] = args ? args.eaSearch : undefined;
            resourceInputs["extensibleAttributes"] = args ? args.extensibleAttributes : undefined;
            resourceInputs["gatewayEa"] = args ? args.gatewayEa : undefined;
            resourceInputs["gatewayLabel"] = args ? args.gatewayLabel : undefined;
            resourceInputs["gatewayOffset"] = args ? args.gatewayOffset : undefined;
            resourceInputs["gridRef"] = args ? args.gridRef : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["networkView"] = args ? args.networkView : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["parentCidr"] = args ? args.parentCidr : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["restartIfNeeded"] = args ? args.restartIfNeeded : undefined;
            resourceInputs["gatewayIp"] = undefined /*out*/;
            resourceInputs["gatewayRef"] = undefined /*out*/;
            resourceInputs["ref"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Network.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Network resources.
 */
export interface NetworkState {
    /**
     * The network address in IPv4 Address/CIDR format.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Comment for the record; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Disable for DHCP.
     */
    disableDhcp?: pulumi.Input<boolean>;
    /**
     * Ea search criteria for next_available_network function
     */
    eaSearch?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Extensible attributes of network (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of extensible attribute for gateway address
     */
    gatewayEa?: pulumi.Input<string>;
    /**
     * IP address of default gateway if auto-created
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Name to apply to gateway reservation
     */
    gatewayLabel?: pulumi.Input<string>;
    /**
     * Offset from network address to reserve for default gateway
     */
    gatewayOffset?: pulumi.Input<number>;
    /**
     * Reference id for gateway if created
     */
    gatewayRef?: pulumi.Input<string>;
    /**
     * Ref for grid needed for restarting services.
     */
    gridRef?: pulumi.Input<string>;
    /**
     * Grid members associated with network.
     */
    member?: pulumi.Input<inputs.NetworkMember>;
    /**
     * The name of the network view in which this network resides.
     */
    networkView?: pulumi.Input<string>;
    /**
     * An array of DHCP option structs that lists the DHCP options associated with the object.
     */
    options?: pulumi.Input<pulumi.Input<inputs.NetworkOption>[]>;
    /**
     * Parent container CIDR subnet
     */
    parentCidr?: pulumi.Input<string>;
    /**
     * Desired prefix size of requested network
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * Reference id of network object.
     */
    ref?: pulumi.Input<string>;
    /**
     * Restart dhcp services if needed.
     */
    restartIfNeeded?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Network resource.
 */
export interface NetworkArgs {
    /**
     * The network address in IPv4 Address/CIDR format.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Comment for the record; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Disable for DHCP.
     */
    disableDhcp?: pulumi.Input<boolean>;
    /**
     * Ea search criteria for next_available_network function
     */
    eaSearch?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Extensible attributes of network (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of extensible attribute for gateway address
     */
    gatewayEa?: pulumi.Input<string>;
    /**
     * Name to apply to gateway reservation
     */
    gatewayLabel?: pulumi.Input<string>;
    /**
     * Offset from network address to reserve for default gateway
     */
    gatewayOffset?: pulumi.Input<number>;
    /**
     * Ref for grid needed for restarting services.
     */
    gridRef?: pulumi.Input<string>;
    /**
     * Grid members associated with network.
     */
    member?: pulumi.Input<inputs.NetworkMember>;
    /**
     * The name of the network view in which this network resides.
     */
    networkView?: pulumi.Input<string>;
    /**
     * An array of DHCP option structs that lists the DHCP options associated with the object.
     */
    options?: pulumi.Input<pulumi.Input<inputs.NetworkOption>[]>;
    /**
     * Parent container CIDR subnet
     */
    parentCidr?: pulumi.Input<string>;
    /**
     * Desired prefix size of requested network
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * Restart dhcp services if needed.
     */
    restartIfNeeded?: pulumi.Input<boolean>;
}
