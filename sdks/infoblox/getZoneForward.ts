// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getZoneForward(args: GetZoneForwardArgs, opts?: pulumi.InvokeOptions): Promise<GetZoneForwardResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("infoblox:index/getZoneForward:getZoneForward", {
        "filters": args.filters,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getZoneForward.
 */
export interface GetZoneForwardArgs {
    filters: {[key: string]: string};
    id?: string;
}

/**
 * A collection of values returned by getZoneForward.
 */
export interface GetZoneForwardResult {
    readonly filters: {[key: string]: string};
    readonly id: string;
    readonly results: outputs.GetZoneForwardResult[];
}
export function getZoneForwardOutput(args: GetZoneForwardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetZoneForwardResult> {
    return pulumi.output(args).apply((a: any) => getZoneForward(a, opts))
}

/**
 * A collection of arguments for invoking getZoneForward.
 */
export interface GetZoneForwardOutputArgs {
    filters: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    id?: pulumi.Input<string>;
}
