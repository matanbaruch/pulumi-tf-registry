// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFixedAddress(args?: GetFixedAddressArgs, opts?: pulumi.InvokeOptions): Promise<GetFixedAddressResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("infoblox:index/getFixedAddress:getFixedAddress", {
        "hostname": args.hostname,
        "id": args.id,
        "ipAddress": args.ipAddress,
        "networkView": args.networkView,
        "queryParams": args.queryParams,
        "ref": args.ref,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFixedAddress.
 */
export interface GetFixedAddressArgs {
    hostname?: string;
    id?: string;
    ipAddress?: string;
    networkView?: string;
    queryParams?: {[key: string]: string};
    ref?: string;
}

/**
 * A collection of values returned by getFixedAddress.
 */
export interface GetFixedAddressResult {
    readonly cidr: string;
    readonly comment: string;
    readonly disable: boolean;
    readonly extensibleAttributes: {[key: string]: string};
    readonly hostname: string;
    readonly id: string;
    readonly ipAddress: string;
    readonly mac: string;
    readonly matchClient: string;
    readonly networkView: string;
    readonly options: outputs.GetFixedAddressOption[];
    readonly queryParams?: {[key: string]: string};
    readonly ref: string;
}
export function getFixedAddressOutput(args?: GetFixedAddressOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFixedAddressResult> {
    return pulumi.output(args).apply((a: any) => getFixedAddress(a, opts))
}

/**
 * A collection of arguments for invoking getFixedAddress.
 */
export interface GetFixedAddressOutputArgs {
    hostname?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    networkView?: pulumi.Input<string>;
    queryParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ref?: pulumi.Input<string>;
}
