// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Range extends pulumi.CustomResource {
    /**
     * Get an existing Range resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RangeState, opts?: pulumi.CustomResourceOptions): Range {
        return new Range(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infoblox:index/range:Range';

    /**
     * Returns true if the given object is an instance of Range.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Range {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Range.__pulumiType;
    }

    /**
     * The list of IP Addresses associated with this range
     */
    public /*out*/ readonly addressLists!: pulumi.Output<string[]>;
    /**
     * The network to which this range belongs, in IPv4 Address/CIDR format.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Comment for the range; maximum 256 characters.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * Disable for DHCP.
     */
    public readonly disableDhcp!: pulumi.Output<boolean>;
    /**
     * The IPv4 Address end address of the range.
     */
    public readonly endAddress!: pulumi.Output<string>;
    /**
     * Extensible attributes of range object (Values are JSON encoded).
     */
    public readonly extensibleAttributes!: pulumi.Output<{[key: string]: string}>;
    /**
     * Ref for grid needed for restarting services.
     */
    public readonly gridRef!: pulumi.Output<string | undefined>;
    /**
     * Grid member associated with range.
     */
    public readonly member!: pulumi.Output<outputs.RangeMember | undefined>;
    /**
     * The name of the network view in which this range resides.
     */
    public readonly networkView!: pulumi.Output<string>;
    /**
     * An array of DHCP option structs that lists the DHCP options associated with the object.
     */
    public readonly options!: pulumi.Output<outputs.RangeOption[] | undefined>;
    /**
     * String representation of start and end addresses to be used with function calls
     */
    public /*out*/ readonly rangeFunctionString!: pulumi.Output<string>;
    /**
     * Reference id of range object.
     */
    public /*out*/ readonly ref!: pulumi.Output<string>;
    /**
     * Restart dhcp services if needed.
     */
    public readonly restartIfNeeded!: pulumi.Output<boolean | undefined>;
    /**
     * Sequential count of addresses.
     */
    public readonly sequentialCount!: pulumi.Output<number | undefined>;
    /**
     * The IPv4 Address starting address of the range.
     */
    public readonly startAddress!: pulumi.Output<string>;

    /**
     * Create a Range resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RangeArgs | RangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RangeState | undefined;
            resourceInputs["addressLists"] = state ? state.addressLists : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disableDhcp"] = state ? state.disableDhcp : undefined;
            resourceInputs["endAddress"] = state ? state.endAddress : undefined;
            resourceInputs["extensibleAttributes"] = state ? state.extensibleAttributes : undefined;
            resourceInputs["gridRef"] = state ? state.gridRef : undefined;
            resourceInputs["member"] = state ? state.member : undefined;
            resourceInputs["networkView"] = state ? state.networkView : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["rangeFunctionString"] = state ? state.rangeFunctionString : undefined;
            resourceInputs["ref"] = state ? state.ref : undefined;
            resourceInputs["restartIfNeeded"] = state ? state.restartIfNeeded : undefined;
            resourceInputs["sequentialCount"] = state ? state.sequentialCount : undefined;
            resourceInputs["startAddress"] = state ? state.startAddress : undefined;
        } else {
            const args = argsOrState as RangeArgs | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disableDhcp"] = args ? args.disableDhcp : undefined;
            resourceInputs["endAddress"] = args ? args.endAddress : undefined;
            resourceInputs["extensibleAttributes"] = args ? args.extensibleAttributes : undefined;
            resourceInputs["gridRef"] = args ? args.gridRef : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["networkView"] = args ? args.networkView : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["restartIfNeeded"] = args ? args.restartIfNeeded : undefined;
            resourceInputs["sequentialCount"] = args ? args.sequentialCount : undefined;
            resourceInputs["startAddress"] = args ? args.startAddress : undefined;
            resourceInputs["addressLists"] = undefined /*out*/;
            resourceInputs["rangeFunctionString"] = undefined /*out*/;
            resourceInputs["ref"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Range.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Range resources.
 */
export interface RangeState {
    /**
     * The list of IP Addresses associated with this range
     */
    addressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network to which this range belongs, in IPv4 Address/CIDR format.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Comment for the range; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Disable for DHCP.
     */
    disableDhcp?: pulumi.Input<boolean>;
    /**
     * The IPv4 Address end address of the range.
     */
    endAddress?: pulumi.Input<string>;
    /**
     * Extensible attributes of range object (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Ref for grid needed for restarting services.
     */
    gridRef?: pulumi.Input<string>;
    /**
     * Grid member associated with range.
     */
    member?: pulumi.Input<inputs.RangeMember>;
    /**
     * The name of the network view in which this range resides.
     */
    networkView?: pulumi.Input<string>;
    /**
     * An array of DHCP option structs that lists the DHCP options associated with the object.
     */
    options?: pulumi.Input<pulumi.Input<inputs.RangeOption>[]>;
    /**
     * String representation of start and end addresses to be used with function calls
     */
    rangeFunctionString?: pulumi.Input<string>;
    /**
     * Reference id of range object.
     */
    ref?: pulumi.Input<string>;
    /**
     * Restart dhcp services if needed.
     */
    restartIfNeeded?: pulumi.Input<boolean>;
    /**
     * Sequential count of addresses.
     */
    sequentialCount?: pulumi.Input<number>;
    /**
     * The IPv4 Address starting address of the range.
     */
    startAddress?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Range resource.
 */
export interface RangeArgs {
    /**
     * The network to which this range belongs, in IPv4 Address/CIDR format.
     */
    cidr: pulumi.Input<string>;
    /**
     * Comment for the range; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * Disable for DHCP.
     */
    disableDhcp?: pulumi.Input<boolean>;
    /**
     * The IPv4 Address end address of the range.
     */
    endAddress?: pulumi.Input<string>;
    /**
     * Extensible attributes of range object (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Ref for grid needed for restarting services.
     */
    gridRef?: pulumi.Input<string>;
    /**
     * Grid member associated with range.
     */
    member?: pulumi.Input<inputs.RangeMember>;
    /**
     * The name of the network view in which this range resides.
     */
    networkView?: pulumi.Input<string>;
    /**
     * An array of DHCP option structs that lists the DHCP options associated with the object.
     */
    options?: pulumi.Input<pulumi.Input<inputs.RangeOption>[]>;
    /**
     * Restart dhcp services if needed.
     */
    restartIfNeeded?: pulumi.Input<boolean>;
    /**
     * Sequential count of addresses.
     */
    sequentialCount?: pulumi.Input<number>;
    /**
     * The IPv4 Address starting address of the range.
     */
    startAddress?: pulumi.Input<string>;
}
