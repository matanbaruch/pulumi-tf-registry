// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AaaaRecordArgs, AaaaRecordState } from "./aaaaRecord";
export type AaaaRecord = import("./aaaaRecord").AaaaRecord;
export const AaaaRecord: typeof import("./aaaaRecord").AaaaRecord = null as any;
utilities.lazyLoad(exports, ["AaaaRecord"], () => require("./aaaaRecord"));

export { ARecordArgs, ARecordState } from "./arecord";
export type ARecord = import("./arecord").ARecord;
export const ARecord: typeof import("./arecord").ARecord = null as any;
utilities.lazyLoad(exports, ["ARecord"], () => require("./arecord"));

export { CnameRecordArgs, CnameRecordState } from "./cnameRecord";
export type CnameRecord = import("./cnameRecord").CnameRecord;
export const CnameRecord: typeof import("./cnameRecord").CnameRecord = null as any;
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));

export { DnsViewArgs, DnsViewState } from "./dnsView";
export type DnsView = import("./dnsView").DnsView;
export const DnsView: typeof import("./dnsView").DnsView = null as any;
utilities.lazyLoad(exports, ["DnsView"], () => require("./dnsView"));

export { GetARecordArgs, GetARecordResult, GetARecordOutputArgs } from "./getARecord";
export const getARecord: typeof import("./getARecord").getARecord = null as any;
export const getARecordOutput: typeof import("./getARecord").getARecordOutput = null as any;
utilities.lazyLoad(exports, ["getARecord","getARecordOutput"], () => require("./getARecord"));

export { GetAaaaRecordArgs, GetAaaaRecordResult, GetAaaaRecordOutputArgs } from "./getAaaaRecord";
export const getAaaaRecord: typeof import("./getAaaaRecord").getAaaaRecord = null as any;
export const getAaaaRecordOutput: typeof import("./getAaaaRecord").getAaaaRecordOutput = null as any;
utilities.lazyLoad(exports, ["getAaaaRecord","getAaaaRecordOutput"], () => require("./getAaaaRecord"));

export { GetCnameRecordArgs, GetCnameRecordResult, GetCnameRecordOutputArgs } from "./getCnameRecord";
export const getCnameRecord: typeof import("./getCnameRecord").getCnameRecord = null as any;
export const getCnameRecordOutput: typeof import("./getCnameRecord").getCnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecord","getCnameRecordOutput"], () => require("./getCnameRecord"));

export { GetDnsViewArgs, GetDnsViewResult, GetDnsViewOutputArgs } from "./getDnsView";
export const getDnsView: typeof import("./getDnsView").getDnsView = null as any;
export const getDnsViewOutput: typeof import("./getDnsView").getDnsViewOutput = null as any;
utilities.lazyLoad(exports, ["getDnsView","getDnsViewOutput"], () => require("./getDnsView"));

export { GetHostRecordArgs, GetHostRecordResult, GetHostRecordOutputArgs } from "./getHostRecord";
export const getHostRecord: typeof import("./getHostRecord").getHostRecord = null as any;
export const getHostRecordOutput: typeof import("./getHostRecord").getHostRecordOutput = null as any;
utilities.lazyLoad(exports, ["getHostRecord","getHostRecordOutput"], () => require("./getHostRecord"));

export { GetIpv4NetworkArgs, GetIpv4NetworkResult, GetIpv4NetworkOutputArgs } from "./getIpv4Network";
export const getIpv4Network: typeof import("./getIpv4Network").getIpv4Network = null as any;
export const getIpv4NetworkOutput: typeof import("./getIpv4Network").getIpv4NetworkOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4Network","getIpv4NetworkOutput"], () => require("./getIpv4Network"));

export { GetIpv4NetworkContainerArgs, GetIpv4NetworkContainerResult, GetIpv4NetworkContainerOutputArgs } from "./getIpv4NetworkContainer";
export const getIpv4NetworkContainer: typeof import("./getIpv4NetworkContainer").getIpv4NetworkContainer = null as any;
export const getIpv4NetworkContainerOutput: typeof import("./getIpv4NetworkContainer").getIpv4NetworkContainerOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4NetworkContainer","getIpv4NetworkContainerOutput"], () => require("./getIpv4NetworkContainer"));

export { GetIpv6NetworkArgs, GetIpv6NetworkResult, GetIpv6NetworkOutputArgs } from "./getIpv6Network";
export const getIpv6Network: typeof import("./getIpv6Network").getIpv6Network = null as any;
export const getIpv6NetworkOutput: typeof import("./getIpv6Network").getIpv6NetworkOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6Network","getIpv6NetworkOutput"], () => require("./getIpv6Network"));

export { GetIpv6NetworkContainerArgs, GetIpv6NetworkContainerResult, GetIpv6NetworkContainerOutputArgs } from "./getIpv6NetworkContainer";
export const getIpv6NetworkContainer: typeof import("./getIpv6NetworkContainer").getIpv6NetworkContainer = null as any;
export const getIpv6NetworkContainerOutput: typeof import("./getIpv6NetworkContainer").getIpv6NetworkContainerOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6NetworkContainer","getIpv6NetworkContainerOutput"], () => require("./getIpv6NetworkContainer"));

export { GetMxRecordArgs, GetMxRecordResult, GetMxRecordOutputArgs } from "./getMxRecord";
export const getMxRecord: typeof import("./getMxRecord").getMxRecord = null as any;
export const getMxRecordOutput: typeof import("./getMxRecord").getMxRecordOutput = null as any;
utilities.lazyLoad(exports, ["getMxRecord","getMxRecordOutput"], () => require("./getMxRecord"));

export { GetNetworkViewArgs, GetNetworkViewResult, GetNetworkViewOutputArgs } from "./getNetworkView";
export const getNetworkView: typeof import("./getNetworkView").getNetworkView = null as any;
export const getNetworkViewOutput: typeof import("./getNetworkView").getNetworkViewOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkView","getNetworkViewOutput"], () => require("./getNetworkView"));

export { GetPtrRecordArgs, GetPtrRecordResult, GetPtrRecordOutputArgs } from "./getPtrRecord";
export const getPtrRecord: typeof import("./getPtrRecord").getPtrRecord = null as any;
export const getPtrRecordOutput: typeof import("./getPtrRecord").getPtrRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPtrRecord","getPtrRecordOutput"], () => require("./getPtrRecord"));

export { GetSrvRecordArgs, GetSrvRecordResult, GetSrvRecordOutputArgs } from "./getSrvRecord";
export const getSrvRecord: typeof import("./getSrvRecord").getSrvRecord = null as any;
export const getSrvRecordOutput: typeof import("./getSrvRecord").getSrvRecordOutput = null as any;
utilities.lazyLoad(exports, ["getSrvRecord","getSrvRecordOutput"], () => require("./getSrvRecord"));

export { GetTxtRecordArgs, GetTxtRecordResult, GetTxtRecordOutputArgs } from "./getTxtRecord";
export const getTxtRecord: typeof import("./getTxtRecord").getTxtRecord = null as any;
export const getTxtRecordOutput: typeof import("./getTxtRecord").getTxtRecordOutput = null as any;
utilities.lazyLoad(exports, ["getTxtRecord","getTxtRecordOutput"], () => require("./getTxtRecord"));

export { GetZoneAuthArgs, GetZoneAuthResult, GetZoneAuthOutputArgs } from "./getZoneAuth";
export const getZoneAuth: typeof import("./getZoneAuth").getZoneAuth = null as any;
export const getZoneAuthOutput: typeof import("./getZoneAuth").getZoneAuthOutput = null as any;
utilities.lazyLoad(exports, ["getZoneAuth","getZoneAuthOutput"], () => require("./getZoneAuth"));

export { GetZoneForwardArgs, GetZoneForwardResult, GetZoneForwardOutputArgs } from "./getZoneForward";
export const getZoneForward: typeof import("./getZoneForward").getZoneForward = null as any;
export const getZoneForwardOutput: typeof import("./getZoneForward").getZoneForwardOutput = null as any;
utilities.lazyLoad(exports, ["getZoneForward","getZoneForwardOutput"], () => require("./getZoneForward"));

export { IpAllocationArgs, IpAllocationState } from "./ipAllocation";
export type IpAllocation = import("./ipAllocation").IpAllocation;
export const IpAllocation: typeof import("./ipAllocation").IpAllocation = null as any;
utilities.lazyLoad(exports, ["IpAllocation"], () => require("./ipAllocation"));

export { IpAssociationArgs, IpAssociationState } from "./ipAssociation";
export type IpAssociation = import("./ipAssociation").IpAssociation;
export const IpAssociation: typeof import("./ipAssociation").IpAssociation = null as any;
utilities.lazyLoad(exports, ["IpAssociation"], () => require("./ipAssociation"));

export { Ipv4NetworkArgs, Ipv4NetworkState } from "./ipv4Network";
export type Ipv4Network = import("./ipv4Network").Ipv4Network;
export const Ipv4Network: typeof import("./ipv4Network").Ipv4Network = null as any;
utilities.lazyLoad(exports, ["Ipv4Network"], () => require("./ipv4Network"));

export { Ipv4NetworkContainerArgs, Ipv4NetworkContainerState } from "./ipv4NetworkContainer";
export type Ipv4NetworkContainer = import("./ipv4NetworkContainer").Ipv4NetworkContainer;
export const Ipv4NetworkContainer: typeof import("./ipv4NetworkContainer").Ipv4NetworkContainer = null as any;
utilities.lazyLoad(exports, ["Ipv4NetworkContainer"], () => require("./ipv4NetworkContainer"));

export { Ipv6NetworkArgs, Ipv6NetworkState } from "./ipv6Network";
export type Ipv6Network = import("./ipv6Network").Ipv6Network;
export const Ipv6Network: typeof import("./ipv6Network").Ipv6Network = null as any;
utilities.lazyLoad(exports, ["Ipv6Network"], () => require("./ipv6Network"));

export { Ipv6NetworkContainerArgs, Ipv6NetworkContainerState } from "./ipv6NetworkContainer";
export type Ipv6NetworkContainer = import("./ipv6NetworkContainer").Ipv6NetworkContainer;
export const Ipv6NetworkContainer: typeof import("./ipv6NetworkContainer").Ipv6NetworkContainer = null as any;
utilities.lazyLoad(exports, ["Ipv6NetworkContainer"], () => require("./ipv6NetworkContainer"));

export { MxRecordArgs, MxRecordState } from "./mxRecord";
export type MxRecord = import("./mxRecord").MxRecord;
export const MxRecord: typeof import("./mxRecord").MxRecord = null as any;
utilities.lazyLoad(exports, ["MxRecord"], () => require("./mxRecord"));

export { NetworkViewArgs, NetworkViewState } from "./networkView";
export type NetworkView = import("./networkView").NetworkView;
export const NetworkView: typeof import("./networkView").NetworkView = null as any;
utilities.lazyLoad(exports, ["NetworkView"], () => require("./networkView"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PtrRecordArgs, PtrRecordState } from "./ptrRecord";
export type PtrRecord = import("./ptrRecord").PtrRecord;
export const PtrRecord: typeof import("./ptrRecord").PtrRecord = null as any;
utilities.lazyLoad(exports, ["PtrRecord"], () => require("./ptrRecord"));

export { SrvRecordArgs, SrvRecordState } from "./srvRecord";
export type SrvRecord = import("./srvRecord").SrvRecord;
export const SrvRecord: typeof import("./srvRecord").SrvRecord = null as any;
utilities.lazyLoad(exports, ["SrvRecord"], () => require("./srvRecord"));

export { TxtRecordArgs, TxtRecordState } from "./txtRecord";
export type TxtRecord = import("./txtRecord").TxtRecord;
export const TxtRecord: typeof import("./txtRecord").TxtRecord = null as any;
utilities.lazyLoad(exports, ["TxtRecord"], () => require("./txtRecord"));

export { ZoneAuthArgs, ZoneAuthState } from "./zoneAuth";
export type ZoneAuth = import("./zoneAuth").ZoneAuth;
export const ZoneAuth: typeof import("./zoneAuth").ZoneAuth = null as any;
utilities.lazyLoad(exports, ["ZoneAuth"], () => require("./zoneAuth"));

export { ZoneForwardArgs, ZoneForwardState } from "./zoneForward";
export type ZoneForward = import("./zoneForward").ZoneForward;
export const ZoneForward: typeof import("./zoneForward").ZoneForward = null as any;
utilities.lazyLoad(exports, ["ZoneForward"], () => require("./zoneForward"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "infoblox:index/aRecord:ARecord":
                return new ARecord(name, <any>undefined, { urn })
            case "infoblox:index/aaaaRecord:AaaaRecord":
                return new AaaaRecord(name, <any>undefined, { urn })
            case "infoblox:index/cnameRecord:CnameRecord":
                return new CnameRecord(name, <any>undefined, { urn })
            case "infoblox:index/dnsView:DnsView":
                return new DnsView(name, <any>undefined, { urn })
            case "infoblox:index/ipAllocation:IpAllocation":
                return new IpAllocation(name, <any>undefined, { urn })
            case "infoblox:index/ipAssociation:IpAssociation":
                return new IpAssociation(name, <any>undefined, { urn })
            case "infoblox:index/ipv4Network:Ipv4Network":
                return new Ipv4Network(name, <any>undefined, { urn })
            case "infoblox:index/ipv4NetworkContainer:Ipv4NetworkContainer":
                return new Ipv4NetworkContainer(name, <any>undefined, { urn })
            case "infoblox:index/ipv6Network:Ipv6Network":
                return new Ipv6Network(name, <any>undefined, { urn })
            case "infoblox:index/ipv6NetworkContainer:Ipv6NetworkContainer":
                return new Ipv6NetworkContainer(name, <any>undefined, { urn })
            case "infoblox:index/mxRecord:MxRecord":
                return new MxRecord(name, <any>undefined, { urn })
            case "infoblox:index/networkView:NetworkView":
                return new NetworkView(name, <any>undefined, { urn })
            case "infoblox:index/ptrRecord:PtrRecord":
                return new PtrRecord(name, <any>undefined, { urn })
            case "infoblox:index/srvRecord:SrvRecord":
                return new SrvRecord(name, <any>undefined, { urn })
            case "infoblox:index/txtRecord:TxtRecord":
                return new TxtRecord(name, <any>undefined, { urn })
            case "infoblox:index/zoneAuth:ZoneAuth":
                return new ZoneAuth(name, <any>undefined, { urn })
            case "infoblox:index/zoneForward:ZoneForward":
                return new ZoneForward(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("infoblox", "index/aRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/aaaaRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/cnameRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/dnsView", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ipAllocation", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ipAssociation", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ipv4Network", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ipv4NetworkContainer", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ipv6Network", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ipv6NetworkContainer", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/mxRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/networkView", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ptrRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/srvRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/txtRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/zoneAuth", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/zoneForward", _module)
pulumi.runtime.registerResourcePackage("infoblox", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:infoblox") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
