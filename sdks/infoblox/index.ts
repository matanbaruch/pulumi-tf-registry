// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AliasRecordArgs, AliasRecordState } from "./aliasRecord";
export type AliasRecord = import("./aliasRecord").AliasRecord;
export const AliasRecord: typeof import("./aliasRecord").AliasRecord = null as any;
utilities.lazyLoad(exports, ["AliasRecord"], () => require("./aliasRecord"));

export { ARecordArgs, ARecordState } from "./arecord";
export type ARecord = import("./arecord").ARecord;
export const ARecord: typeof import("./arecord").ARecord = null as any;
utilities.lazyLoad(exports, ["ARecord"], () => require("./arecord"));

export { CnameRecordArgs, CnameRecordState } from "./cnameRecord";
export type CnameRecord = import("./cnameRecord").CnameRecord;
export const CnameRecord: typeof import("./cnameRecord").CnameRecord = null as any;
utilities.lazyLoad(exports, ["CnameRecord"], () => require("./cnameRecord"));

export { ContainerArgs, ContainerState } from "./container";
export type Container = import("./container").Container;
export const Container: typeof import("./container").Container = null as any;
utilities.lazyLoad(exports, ["Container"], () => require("./container"));

export { FixedAddressArgs, FixedAddressState } from "./fixedAddress";
export type FixedAddress = import("./fixedAddress").FixedAddress;
export const FixedAddress: typeof import("./fixedAddress").FixedAddress = null as any;
utilities.lazyLoad(exports, ["FixedAddress"], () => require("./fixedAddress"));

export { GetARecordArgs, GetARecordResult, GetARecordOutputArgs } from "./getARecord";
export const getARecord: typeof import("./getARecord").getARecord = null as any;
export const getARecordOutput: typeof import("./getARecord").getARecordOutput = null as any;
utilities.lazyLoad(exports, ["getARecord","getARecordOutput"], () => require("./getARecord"));

export { GetAliasRecordArgs, GetAliasRecordResult, GetAliasRecordOutputArgs } from "./getAliasRecord";
export const getAliasRecord: typeof import("./getAliasRecord").getAliasRecord = null as any;
export const getAliasRecordOutput: typeof import("./getAliasRecord").getAliasRecordOutput = null as any;
utilities.lazyLoad(exports, ["getAliasRecord","getAliasRecordOutput"], () => require("./getAliasRecord"));

export { GetCnameRecordArgs, GetCnameRecordResult, GetCnameRecordOutputArgs } from "./getCnameRecord";
export const getCnameRecord: typeof import("./getCnameRecord").getCnameRecord = null as any;
export const getCnameRecordOutput: typeof import("./getCnameRecord").getCnameRecordOutput = null as any;
utilities.lazyLoad(exports, ["getCnameRecord","getCnameRecordOutput"], () => require("./getCnameRecord"));

export { GetContainerArgs, GetContainerResult, GetContainerOutputArgs } from "./getContainer";
export const getContainer: typeof import("./getContainer").getContainer = null as any;
export const getContainerOutput: typeof import("./getContainer").getContainerOutput = null as any;
utilities.lazyLoad(exports, ["getContainer","getContainerOutput"], () => require("./getContainer"));

export { GetFixedAddressArgs, GetFixedAddressResult, GetFixedAddressOutputArgs } from "./getFixedAddress";
export const getFixedAddress: typeof import("./getFixedAddress").getFixedAddress = null as any;
export const getFixedAddressOutput: typeof import("./getFixedAddress").getFixedAddressOutput = null as any;
utilities.lazyLoad(exports, ["getFixedAddress","getFixedAddressOutput"], () => require("./getFixedAddress"));

export { GetGridArgs, GetGridResult, GetGridOutputArgs } from "./getGrid";
export const getGrid: typeof import("./getGrid").getGrid = null as any;
export const getGridOutput: typeof import("./getGrid").getGridOutput = null as any;
utilities.lazyLoad(exports, ["getGrid","getGridOutput"], () => require("./getGrid"));

export { GetGridMemberArgs, GetGridMemberResult, GetGridMemberOutputArgs } from "./getGridMember";
export const getGridMember: typeof import("./getGridMember").getGridMember = null as any;
export const getGridMemberOutput: typeof import("./getGridMember").getGridMemberOutput = null as any;
utilities.lazyLoad(exports, ["getGridMember","getGridMemberOutput"], () => require("./getGridMember"));

export { GetHostRecordArgs, GetHostRecordResult, GetHostRecordOutputArgs } from "./getHostRecord";
export const getHostRecord: typeof import("./getHostRecord").getHostRecord = null as any;
export const getHostRecordOutput: typeof import("./getHostRecord").getHostRecordOutput = null as any;
utilities.lazyLoad(exports, ["getHostRecord","getHostRecordOutput"], () => require("./getHostRecord"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetPtrRecordArgs, GetPtrRecordResult, GetPtrRecordOutputArgs } from "./getPtrRecord";
export const getPtrRecord: typeof import("./getPtrRecord").getPtrRecord = null as any;
export const getPtrRecordOutput: typeof import("./getPtrRecord").getPtrRecordOutput = null as any;
utilities.lazyLoad(exports, ["getPtrRecord","getPtrRecordOutput"], () => require("./getPtrRecord"));

export { GetRangeArgs, GetRangeResult, GetRangeOutputArgs } from "./getRange";
export const getRange: typeof import("./getRange").getRange = null as any;
export const getRangeOutput: typeof import("./getRange").getRangeOutput = null as any;
utilities.lazyLoad(exports, ["getRange","getRangeOutput"], () => require("./getRange"));

export { GetSequentialAddressBlockArgs, GetSequentialAddressBlockResult, GetSequentialAddressBlockOutputArgs } from "./getSequentialAddressBlock";
export const getSequentialAddressBlock: typeof import("./getSequentialAddressBlock").getSequentialAddressBlock = null as any;
export const getSequentialAddressBlockOutput: typeof import("./getSequentialAddressBlock").getSequentialAddressBlockOutput = null as any;
utilities.lazyLoad(exports, ["getSequentialAddressBlock","getSequentialAddressBlockOutput"], () => require("./getSequentialAddressBlock"));

export { HostRecordArgs, HostRecordState } from "./hostRecord";
export type HostRecord = import("./hostRecord").HostRecord;
export const HostRecord: typeof import("./hostRecord").HostRecord = null as any;
utilities.lazyLoad(exports, ["HostRecord"], () => require("./hostRecord"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PtrRecordArgs, PtrRecordState } from "./ptrRecord";
export type PtrRecord = import("./ptrRecord").PtrRecord;
export const PtrRecord: typeof import("./ptrRecord").PtrRecord = null as any;
utilities.lazyLoad(exports, ["PtrRecord"], () => require("./ptrRecord"));

export { RangeArgs, RangeState } from "./range";
export type Range = import("./range").Range;
export const Range: typeof import("./range").Range = null as any;
utilities.lazyLoad(exports, ["Range"], () => require("./range"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "infoblox:index/aRecord:ARecord":
                return new ARecord(name, <any>undefined, { urn })
            case "infoblox:index/aliasRecord:AliasRecord":
                return new AliasRecord(name, <any>undefined, { urn })
            case "infoblox:index/cnameRecord:CnameRecord":
                return new CnameRecord(name, <any>undefined, { urn })
            case "infoblox:index/container:Container":
                return new Container(name, <any>undefined, { urn })
            case "infoblox:index/fixedAddress:FixedAddress":
                return new FixedAddress(name, <any>undefined, { urn })
            case "infoblox:index/hostRecord:HostRecord":
                return new HostRecord(name, <any>undefined, { urn })
            case "infoblox:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "infoblox:index/ptrRecord:PtrRecord":
                return new PtrRecord(name, <any>undefined, { urn })
            case "infoblox:index/range:Range":
                return new Range(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("infoblox", "index/aRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/aliasRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/cnameRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/container", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/fixedAddress", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/hostRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/network", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/ptrRecord", _module)
pulumi.runtime.registerResourceModule("infoblox", "index/range", _module)
pulumi.runtime.registerResourcePackage("infoblox", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:infoblox") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
