// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ZoneForward extends pulumi.CustomResource {
    /**
     * Get an existing ZoneForward resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneForwardState, opts?: pulumi.CustomResourceOptions): ZoneForward {
        return new ZoneForward(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infoblox:index/zoneForward:ZoneForward';

    /**
     * Returns true if the given object is an instance of ZoneForward.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZoneForward {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneForward.__pulumiType;
    }

    /**
     * A descriptive comment.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Determines if the zone is disabled or not.
     */
    public readonly disable!: pulumi.Output<boolean | undefined>;
    /**
     * Extensible attributes of the zone forward to be added/updated, as a map in JSON format.
     */
    public readonly extAttrs!: pulumi.Output<string | undefined>;
    /**
     * A forward stub server name server group.
     */
    public readonly externalNsGroup!: pulumi.Output<string | undefined>;
    /**
     * The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified
     * domain name.
     */
    public readonly forwardTos!: pulumi.Output<outputs.ZoneForwardForwardTo[] | undefined>;
    /**
     * Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.
     */
    public readonly forwardersOnly!: pulumi.Output<boolean | undefined>;
    /**
     * The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified
     * domain name.
     */
    public readonly forwardingServers!: pulumi.Output<outputs.ZoneForwardForwardingServer[] | undefined>;
    /**
     * The name of this DNS zone
     */
    public readonly fqdn!: pulumi.Output<string>;
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    /**
     * A forwarding member name server group.
     */
    public readonly nsGroup!: pulumi.Output<string | undefined>;
    /**
     * NIOS object's reference, not to be set by a user.
     */
    public /*out*/ readonly ref!: pulumi.Output<string>;
    /**
     * The DNS view in which the zone is created.
     */
    public readonly view!: pulumi.Output<string | undefined>;
    /**
     * The format of the zone. Valid values are: FORWARD, IPV4, IPV6.
     */
    public readonly zoneFormat!: pulumi.Output<string | undefined>;

    /**
     * Create a ZoneForward resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneForwardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneForwardArgs | ZoneForwardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneForwardState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["extAttrs"] = state ? state.extAttrs : undefined;
            resourceInputs["externalNsGroup"] = state ? state.externalNsGroup : undefined;
            resourceInputs["forwardTos"] = state ? state.forwardTos : undefined;
            resourceInputs["forwardersOnly"] = state ? state.forwardersOnly : undefined;
            resourceInputs["forwardingServers"] = state ? state.forwardingServers : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["nsGroup"] = state ? state.nsGroup : undefined;
            resourceInputs["ref"] = state ? state.ref : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
            resourceInputs["zoneFormat"] = state ? state.zoneFormat : undefined;
        } else {
            const args = argsOrState as ZoneForwardArgs | undefined;
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["extAttrs"] = args ? args.extAttrs : undefined;
            resourceInputs["externalNsGroup"] = args ? args.externalNsGroup : undefined;
            resourceInputs["forwardTos"] = args ? args.forwardTos : undefined;
            resourceInputs["forwardersOnly"] = args ? args.forwardersOnly : undefined;
            resourceInputs["forwardingServers"] = args ? args.forwardingServers : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["nsGroup"] = args ? args.nsGroup : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
            resourceInputs["zoneFormat"] = args ? args.zoneFormat : undefined;
            resourceInputs["internalId"] = undefined /*out*/;
            resourceInputs["ref"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneForward.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ZoneForward resources.
 */
export interface ZoneForwardState {
    /**
     * A descriptive comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Determines if the zone is disabled or not.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * Extensible attributes of the zone forward to be added/updated, as a map in JSON format.
     */
    extAttrs?: pulumi.Input<string>;
    /**
     * A forward stub server name server group.
     */
    externalNsGroup?: pulumi.Input<string>;
    /**
     * The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified
     * domain name.
     */
    forwardTos?: pulumi.Input<pulumi.Input<inputs.ZoneForwardForwardTo>[]>;
    /**
     * Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.
     */
    forwardersOnly?: pulumi.Input<boolean>;
    /**
     * The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified
     * domain name.
     */
    forwardingServers?: pulumi.Input<pulumi.Input<inputs.ZoneForwardForwardingServer>[]>;
    /**
     * The name of this DNS zone
     */
    fqdn?: pulumi.Input<string>;
    internalId?: pulumi.Input<string>;
    /**
     * A forwarding member name server group.
     */
    nsGroup?: pulumi.Input<string>;
    /**
     * NIOS object's reference, not to be set by a user.
     */
    ref?: pulumi.Input<string>;
    /**
     * The DNS view in which the zone is created.
     */
    view?: pulumi.Input<string>;
    /**
     * The format of the zone. Valid values are: FORWARD, IPV4, IPV6.
     */
    zoneFormat?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneForward resource.
 */
export interface ZoneForwardArgs {
    /**
     * A descriptive comment.
     */
    comment?: pulumi.Input<string>;
    /**
     * Determines if the zone is disabled or not.
     */
    disable?: pulumi.Input<boolean>;
    /**
     * Extensible attributes of the zone forward to be added/updated, as a map in JSON format.
     */
    extAttrs?: pulumi.Input<string>;
    /**
     * A forward stub server name server group.
     */
    externalNsGroup?: pulumi.Input<string>;
    /**
     * The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified
     * domain name.
     */
    forwardTos?: pulumi.Input<pulumi.Input<inputs.ZoneForwardForwardTo>[]>;
    /**
     * Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.
     */
    forwardersOnly?: pulumi.Input<boolean>;
    /**
     * The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified
     * domain name.
     */
    forwardingServers?: pulumi.Input<pulumi.Input<inputs.ZoneForwardForwardingServer>[]>;
    /**
     * The name of this DNS zone
     */
    fqdn: pulumi.Input<string>;
    /**
     * A forwarding member name server group.
     */
    nsGroup?: pulumi.Input<string>;
    /**
     * The DNS view in which the zone is created.
     */
    view?: pulumi.Input<string>;
    /**
     * The format of the zone. Valid values are: FORWARD, IPV4, IPV6.
     */
    zoneFormat?: pulumi.Input<string>;
}
