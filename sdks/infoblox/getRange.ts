// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getRange(args?: GetRangeArgs, opts?: pulumi.InvokeOptions): Promise<GetRangeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("infoblox:index/getRange:getRange", {
        "cidr": args.cidr,
        "endAddress": args.endAddress,
        "id": args.id,
        "queryParams": args.queryParams,
        "ref": args.ref,
        "startAddress": args.startAddress,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRange.
 */
export interface GetRangeArgs {
    cidr?: string;
    endAddress?: string;
    id?: string;
    queryParams?: {[key: string]: string};
    ref?: string;
    startAddress?: string;
}

/**
 * A collection of values returned by getRange.
 */
export interface GetRangeResult {
    readonly addressLists: string[];
    readonly cidr?: string;
    readonly comment: string;
    readonly disableDhcp: boolean;
    readonly endAddress: string;
    readonly extensibleAttributes: {[key: string]: string};
    readonly id: string;
    readonly members: outputs.GetRangeMember[];
    readonly networkView: string;
    readonly options: outputs.GetRangeOption[];
    readonly queryParams?: {[key: string]: string};
    readonly rangeFunctionString: string;
    readonly ref: string;
    readonly startAddress: string;
}
export function getRangeOutput(args?: GetRangeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRangeResult> {
    return pulumi.output(args).apply((a: any) => getRange(a, opts))
}

/**
 * A collection of arguments for invoking getRange.
 */
export interface GetRangeOutputArgs {
    cidr?: pulumi.Input<string>;
    endAddress?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    queryParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ref?: pulumi.Input<string>;
    startAddress?: pulumi.Input<string>;
}
