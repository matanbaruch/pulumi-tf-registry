// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("infoblox");

/**
 * Disable tls verification
 */
export declare const disableTlsVerification: boolean | undefined;
Object.defineProperty(exports, "disableTlsVerification", {
    get() {
        return __config.getObject<boolean>("disableTlsVerification");
    },
    enumerable: true,
});

/**
 * Infoblox server hostname
 */
export declare const hostname: string | undefined;
Object.defineProperty(exports, "hostname", {
    get() {
        return __config.get("hostname");
    },
    enumerable: true,
});

/**
 * Extensible attributes applied to all objects configured by provider
 */
export declare const orchestratorExtensibleAttributes: {[key: string]: string} | undefined;
Object.defineProperty(exports, "orchestratorExtensibleAttributes", {
    get() {
        return __config.getObject<{[key: string]: string}>("orchestratorExtensibleAttributes");
    },
    enumerable: true,
});

/**
 * Infoblox server password
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * Infoblox server port
 */
export declare const port: string | undefined;
Object.defineProperty(exports, "port", {
    get() {
        return __config.get("port");
    },
    enumerable: true,
});

/**
 * Infoblox server username
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

/**
 * Infoblox server wapi version
 */
export declare const wapiVersion: string | undefined;
Object.defineProperty(exports, "wapiVersion", {
    get() {
        return __config.get("wapiVersion");
    },
    enumerable: true,
});

