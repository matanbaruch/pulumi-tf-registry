// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface FixedAddressMember {
    /**
     * Hostname of member.
     */
    hostname: string;
    /**
     * IPv4 address.
     */
    ipV4Address: string;
    /**
     * IPv6 address.
     */
    ipV6Address: string;
    /**
     * Struct type of member.
     */
    struct?: string;
}

export interface FixedAddressOption {
    /**
     * The code of the DHCP option.
     */
    code: number;
    /**
     * Name of the DHCP option.
     */
    name: string;
    /**
     * Only applies to special options that are displayed separately from other options and have a use flag.
     */
    useOption?: boolean;
    /**
     * Value of the DHCP option.
     */
    value: string;
    /**
     * The name of the space this DHCP option is associated to.
     */
    vendorClass?: string;
}

export interface GetFixedAddressOption {
    code: number;
    name: string;
    useOption: boolean;
    value: string;
    vendorClass: string;
}

export interface GetHostRecordIpV4Address {
    configureForDhcp: boolean;
    hostname: string;
    ipAddress: string;
    macAddress: string;
    network: string;
    ref: string;
    useForEaInheritance: boolean;
}

export interface GetNetworkMember {
    hostname: string;
    ipV4Address: string;
    ipV6Address: string;
    struct: string;
}

export interface GetNetworkOption {
    code: number;
    name: string;
    useOption: boolean;
    value: string;
    vendorClass: string;
}

export interface GetRangeMember {
    hostname: string;
    ipV4Address: string;
    ipV6Address: string;
    struct: string;
}

export interface GetRangeOption {
    code: number;
    name: string;
    useOption: boolean;
    value: string;
    vendorClass: string;
}

export interface GetSequentialAddressBlockAddress {
    cidr: string;
    hostnames: string[];
    ipAddress: string;
    macAddress: string;
    networkView: string;
    objects: string[];
    ref: string;
    status: string;
    types: string[];
    usages: string[];
}

export interface HostRecordIpV4Address {
    /**
     * Set this to True to enable the DHCP configuration for this host address.
     */
    configureForDhcp: boolean;
    /**
     * Hostname associated with IP address.
     */
    hostname: string;
    /**
     * IP address.
     */
    ipAddress: string;
    /**
     * MAC address associated with IP address.
     */
    macAddress: string;
    /**
     * Network for host record in CIDR notation (next_available_ip will be retrieved from this network).
     */
    network: string;
    /**
     * Range start and end string for next_available_ip function calls.
     */
    rangeFunctionString?: string;
    /**
     * Reference id of address object.
     */
    ref: string;
    /**
     * Set this to True when using this host address for EA inheritance.
     */
    useForEaInheritance: boolean;
}

export interface NetworkMember {
    /**
     * Hostname of member.
     */
    hostname: string;
    /**
     * IPv4 address.
     */
    ipV4Address: string;
    /**
     * IPv6 address.
     */
    ipV6Address: string;
    /**
     * Struct type of member.
     */
    struct?: string;
}

export interface NetworkOption {
    /**
     * The code of the DHCP option.
     */
    code: number;
    /**
     * Name of the DHCP option.
     */
    name: string;
    /**
     * Only applies to special options that are displayed separately from other options and have a use flag.
     */
    useOption?: boolean;
    /**
     * Value of the DHCP option.
     */
    value: string;
    /**
     * The name of the space this DHCP option is associated to.
     */
    vendorClass?: string;
}

export interface RangeMember {
    /**
     * Hostname of member.
     */
    hostname: string;
    /**
     * IPv4 address.
     */
    ipV4Address: string;
    /**
     * IPv6 address.
     */
    ipV6Address: string;
    /**
     * Struct type of member.
     */
    struct?: string;
}

export interface RangeOption {
    /**
     * The code of the DHCP option.
     */
    code: number;
    /**
     * Name of the DHCP option.
     */
    name: string;
    /**
     * Only applies to special options that are displayed separately from other options and have a use flag.
     */
    useOption?: boolean;
    /**
     * Value of the DHCP option.
     */
    value: string;
    /**
     * The name of the space this DHCP option is associated to.
     */
    vendorClass?: string;
}

