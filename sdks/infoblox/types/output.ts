// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetARecordResult {
    comment: string;
    dnsView: string;
    extAttrs: string;
    fqdn: string;
    id: string;
    ipAddr: string;
    ttl: number;
    zone: string;
}

export interface GetAaaaRecordResult {
    comment: string;
    dnsView: string;
    extAttrs: string;
    fqdn: string;
    id: string;
    ipv6Addr: string;
    ttl: number;
    zone: string;
}

export interface GetCnameRecordResult {
    alias: string;
    canonical: string;
    comment: string;
    dnsView: string;
    extAttrs: string;
    id: string;
    ttl: number;
    zone: string;
}

export interface GetDnsViewResult {
    comment: string;
    extAttrs: string;
    id: string;
    name: string;
    networkView: string;
}

export interface GetHostRecordResult {
    comment: string;
    dnsView: string;
    duid: string;
    enableDhcp: boolean;
    enableDns: boolean;
    extAttrs: string;
    fqdn: string;
    id: string;
    ipv4Addr: string;
    ipv6Addr: string;
    macAddr: string;
    ttl: number;
    zone: string;
}

export interface GetIpv4NetworkContainerResult {
    cidr: string;
    comment: string;
    extAttrs: string;
    id: string;
    networkView: string;
}

export interface GetIpv4NetworkResult {
    cidr: string;
    comment: string;
    extAttrs: string;
    id: string;
    networkView: string;
}

export interface GetIpv6NetworkContainerResult {
    cidr: string;
    comment: string;
    extAttrs: string;
    id: string;
    networkView: string;
}

export interface GetIpv6NetworkResult {
    cidr: string;
    comment: string;
    extAttrs: string;
    id: string;
    networkView: string;
}

export interface GetMxRecordResult {
    comment: string;
    dnsView: string;
    extAttrs: string;
    fqdn: string;
    id: string;
    mailExchanger: string;
    preference: number;
    ttl: number;
    zone: string;
}

export interface GetNetworkViewResult {
    comment: string;
    extAttrs: string;
    id: string;
    name: string;
}

export interface GetPtrRecordResult {
    comment: string;
    dnsView: string;
    extAttrs: string;
    id: string;
    ipAddr: string;
    ptrdname: string;
    recordName: string;
    ttl: number;
    zone: string;
}

export interface GetSrvRecordResult {
    comment: string;
    dnsView: string;
    extAttrs: string;
    id: string;
    name: string;
    port: number;
    priority: number;
    target: string;
    ttl: number;
    weight: number;
    zone: string;
}

export interface GetTxtRecordResult {
    comment: string;
    dnsView: string;
    extAttrs: string;
    fqdn: string;
    id: string;
    text: string;
    ttl: number;
    zone: string;
}

export interface GetZoneAuthResult {
    comment: string;
    extAttrs: string;
    fqdn: string;
    id: string;
    nsGroup: string;
    view: string;
    zoneFormat: string;
}

export interface GetZoneForwardResult {
    comment: string;
    disable: boolean;
    extAttrs: string;
    externalNsGroup: string;
    forwardTos: outputs.GetZoneForwardResultForwardTo[];
    forwardersOnly: boolean;
    forwardingServers: outputs.GetZoneForwardResultForwardingServer[];
    fqdn: string;
    id: string;
    nsGroup: string;
    view: string;
    zoneFormat: string;
}

export interface GetZoneForwardResultForwardTo {
    address: string;
    name: string;
}

export interface GetZoneForwardResultForwardingServer {
    forwardTos: outputs.GetZoneForwardResultForwardingServerForwardTo[];
    forwardersOnly: boolean;
    name: string;
    useOverrideForwarders: boolean;
}

export interface GetZoneForwardResultForwardingServerForwardTo {
    address: string;
    name: string;
}

export interface ZoneForwardForwardTo {
    /**
     * The IP address of the remote name server to which you want the Infoblox appliance to forward queries for a specified domain name.
     */
    address: string;
    /**
     * The name of the remote name server to which you want the Infoblox appliance to forward queries for a specified domain name.
     */
    name: string;
}

export interface ZoneForwardForwardingServer {
    /**
     * The information for the remote name servers to which you want the Infoblox appliance to forward queries for a specified domain name.
     */
    forwardTos?: outputs.ZoneForwardForwardingServerForwardTo[];
    /**
     * Determines if the appliance sends queries to forwarders only, and not to other internal or Internet root servers.
     */
    forwardersOnly?: boolean;
    /**
     * The name of this Grid member in FQDN format.
     */
    name: string;
    /**
     * Determines if the appliance sends queries to name servers.
     */
    useOverrideForwarders?: boolean;
}

export interface ZoneForwardForwardingServerForwardTo {
    /**
     * The IP address of the remote name server to which you want the Infoblox appliance to forward queries for a specified domain name.
     */
    address: string;
    /**
     * The name of the remote name server to which you want the Infoblox appliance to forward queries for a specified domain name.
     */
    name: string;
}

