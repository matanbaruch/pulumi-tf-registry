// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ZoneAuth extends pulumi.CustomResource {
    /**
     * Get an existing ZoneAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneAuthState, opts?: pulumi.CustomResourceOptions): ZoneAuth {
        return new ZoneAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infoblox:index/zoneAuth:ZoneAuth';

    /**
     * Returns true if the given object is an instance of ZoneAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZoneAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneAuth.__pulumiType;
    }

    /**
     * Comment for the zone; maximum 256 characters.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The Extensible attributes of the zone, as a map in JSON format
     */
    public readonly extAttrs!: pulumi.Output<string | undefined>;
    /**
     * The name of this DNS zone. For a reverse zone, this is in 'address/cidr' format. For other zones, this is in FQDN
     * format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be
     * set.
     */
    public readonly fqdn!: pulumi.Output<string>;
    public /*out*/ readonly internalId!: pulumi.Output<string>;
    /**
     * The name server group that serves DNS for this zone.
     */
    public readonly nsGroup!: pulumi.Output<string | undefined>;
    /**
     * NIOS object's reference, not to be set by a user.
     */
    public /*out*/ readonly ref!: pulumi.Output<string>;
    /**
     * Restarts the member service.
     */
    public readonly restartIfNeeded!: pulumi.Output<boolean | undefined>;
    /**
     * The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
     */
    public readonly soaDefaultTtl!: pulumi.Output<number | undefined>;
    /**
     * This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the
     * zone because the zone data is too old to be useful. The default is one week.
     */
    public readonly soaExpire!: pulumi.Output<number | undefined>;
    /**
     * The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for
     * 'Does Not Respond' responses.
     */
    public readonly soaNegativeTtl!: pulumi.Output<number | undefined>;
    /**
     * This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that
     * its data is current, and retrieve fresh data if it is not.
     */
    public readonly soaRefresh!: pulumi.Output<number | undefined>;
    /**
     * This indicates how long a secondary server must wait before attempting to recontact the primary server after a
     * connection failure between the two servers occurs.
     */
    public readonly soaRetry!: pulumi.Output<number | undefined>;
    /**
     * The name of the DNS view in which the zone resides. Example: 'external'
     */
    public readonly view!: pulumi.Output<string>;
    /**
     * Determines the format of this zone. Valid values are: FORWARD, IPV4, IPV6; the default is FORWARD
     */
    public readonly zoneFormat!: pulumi.Output<string>;

    /**
     * Create a ZoneAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneAuthArgs | ZoneAuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneAuthState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["extAttrs"] = state ? state.extAttrs : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["internalId"] = state ? state.internalId : undefined;
            resourceInputs["nsGroup"] = state ? state.nsGroup : undefined;
            resourceInputs["ref"] = state ? state.ref : undefined;
            resourceInputs["restartIfNeeded"] = state ? state.restartIfNeeded : undefined;
            resourceInputs["soaDefaultTtl"] = state ? state.soaDefaultTtl : undefined;
            resourceInputs["soaExpire"] = state ? state.soaExpire : undefined;
            resourceInputs["soaNegativeTtl"] = state ? state.soaNegativeTtl : undefined;
            resourceInputs["soaRefresh"] = state ? state.soaRefresh : undefined;
            resourceInputs["soaRetry"] = state ? state.soaRetry : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
            resourceInputs["zoneFormat"] = state ? state.zoneFormat : undefined;
        } else {
            const args = argsOrState as ZoneAuthArgs | undefined;
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["extAttrs"] = args ? args.extAttrs : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["nsGroup"] = args ? args.nsGroup : undefined;
            resourceInputs["restartIfNeeded"] = args ? args.restartIfNeeded : undefined;
            resourceInputs["soaDefaultTtl"] = args ? args.soaDefaultTtl : undefined;
            resourceInputs["soaExpire"] = args ? args.soaExpire : undefined;
            resourceInputs["soaNegativeTtl"] = args ? args.soaNegativeTtl : undefined;
            resourceInputs["soaRefresh"] = args ? args.soaRefresh : undefined;
            resourceInputs["soaRetry"] = args ? args.soaRetry : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
            resourceInputs["zoneFormat"] = args ? args.zoneFormat : undefined;
            resourceInputs["internalId"] = undefined /*out*/;
            resourceInputs["ref"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneAuth.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ZoneAuth resources.
 */
export interface ZoneAuthState {
    /**
     * Comment for the zone; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * The Extensible attributes of the zone, as a map in JSON format
     */
    extAttrs?: pulumi.Input<string>;
    /**
     * The name of this DNS zone. For a reverse zone, this is in 'address/cidr' format. For other zones, this is in FQDN
     * format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be
     * set.
     */
    fqdn?: pulumi.Input<string>;
    internalId?: pulumi.Input<string>;
    /**
     * The name server group that serves DNS for this zone.
     */
    nsGroup?: pulumi.Input<string>;
    /**
     * NIOS object's reference, not to be set by a user.
     */
    ref?: pulumi.Input<string>;
    /**
     * Restarts the member service.
     */
    restartIfNeeded?: pulumi.Input<boolean>;
    /**
     * The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
     */
    soaDefaultTtl?: pulumi.Input<number>;
    /**
     * This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the
     * zone because the zone data is too old to be useful. The default is one week.
     */
    soaExpire?: pulumi.Input<number>;
    /**
     * The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for
     * 'Does Not Respond' responses.
     */
    soaNegativeTtl?: pulumi.Input<number>;
    /**
     * This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that
     * its data is current, and retrieve fresh data if it is not.
     */
    soaRefresh?: pulumi.Input<number>;
    /**
     * This indicates how long a secondary server must wait before attempting to recontact the primary server after a
     * connection failure between the two servers occurs.
     */
    soaRetry?: pulumi.Input<number>;
    /**
     * The name of the DNS view in which the zone resides. Example: 'external'
     */
    view?: pulumi.Input<string>;
    /**
     * Determines the format of this zone. Valid values are: FORWARD, IPV4, IPV6; the default is FORWARD
     */
    zoneFormat?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneAuth resource.
 */
export interface ZoneAuthArgs {
    /**
     * Comment for the zone; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * The Extensible attributes of the zone, as a map in JSON format
     */
    extAttrs?: pulumi.Input<string>;
    /**
     * The name of this DNS zone. For a reverse zone, this is in 'address/cidr' format. For other zones, this is in FQDN
     * format. This value can be in unicode format. Note that for a reverse zone, the corresponding zone_format value should be
     * set.
     */
    fqdn: pulumi.Input<string>;
    /**
     * The name server group that serves DNS for this zone.
     */
    nsGroup?: pulumi.Input<string>;
    /**
     * Restarts the member service.
     */
    restartIfNeeded?: pulumi.Input<boolean>;
    /**
     * The Time to Live (TTL) value of the SOA record of this zone. This value is the number of seconds that data is cached.
     */
    soaDefaultTtl?: pulumi.Input<number>;
    /**
     * This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about the
     * zone because the zone data is too old to be useful. The default is one week.
     */
    soaExpire?: pulumi.Input<number>;
    /**
     * The negative Time to Live (TTL) value of the SOA of the zone indicates how long a secondary server can cache data for
     * 'Does Not Respond' responses.
     */
    soaNegativeTtl?: pulumi.Input<number>;
    /**
     * This indicates the interval at which a secondary server sends a message to the primary server for a zone to check that
     * its data is current, and retrieve fresh data if it is not.
     */
    soaRefresh?: pulumi.Input<number>;
    /**
     * This indicates how long a secondary server must wait before attempting to recontact the primary server after a
     * connection failure between the two servers occurs.
     */
    soaRetry?: pulumi.Input<number>;
    /**
     * The name of the DNS view in which the zone resides. Example: 'external'
     */
    view?: pulumi.Input<string>;
    /**
     * Determines the format of this zone. Valid values are: FORWARD, IPV4, IPV6; the default is FORWARD
     */
    zoneFormat?: pulumi.Input<string>;
}
