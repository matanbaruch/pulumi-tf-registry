// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HostRecord extends pulumi.CustomResource {
    /**
     * Get an existing HostRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostRecordState, opts?: pulumi.CustomResourceOptions): HostRecord {
        return new HostRecord(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'infoblox:index/hostRecord:HostRecord';

    /**
     * Returns true if the given object is an instance of HostRecord.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostRecord {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostRecord.__pulumiType;
    }

    /**
     * Comment for the record; maximum 256 characters.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * When false, the host does not have parent zone information.
     */
    public readonly enableDns!: pulumi.Output<boolean>;
    /**
     * Extensible attributes of host record (Values are JSON encoded).
     */
    public readonly extensibleAttributes!: pulumi.Output<{[key: string]: string}>;
    /**
     * The host name in FQDN format.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * IPv4 addresses associated with host record.
     */
    public readonly ipV4Addresses!: pulumi.Output<outputs.HostRecordIpV4Address[] | undefined>;
    /**
     * The name of the network view in which the host record resides.
     */
    public readonly networkView!: pulumi.Output<string>;
    /**
     * Reference id of host record object.
     */
    public /*out*/ readonly ref!: pulumi.Output<string>;
    /**
     * The name of the DNS view in which the record resides.
     */
    public readonly view!: pulumi.Output<string>;
    /**
     * The name of the zone in which the record resides.
     */
    public /*out*/ readonly zone!: pulumi.Output<string>;

    /**
     * Create a HostRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostRecordArgs | HostRecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostRecordState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["enableDns"] = state ? state.enableDns : undefined;
            resourceInputs["extensibleAttributes"] = state ? state.extensibleAttributes : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["ipV4Addresses"] = state ? state.ipV4Addresses : undefined;
            resourceInputs["networkView"] = state ? state.networkView : undefined;
            resourceInputs["ref"] = state ? state.ref : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as HostRecordArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["enableDns"] = args ? args.enableDns : undefined;
            resourceInputs["extensibleAttributes"] = args ? args.extensibleAttributes : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["ipV4Addresses"] = args ? args.ipV4Addresses : undefined;
            resourceInputs["networkView"] = args ? args.networkView : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
            resourceInputs["ref"] = undefined /*out*/;
            resourceInputs["zone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostRecord.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HostRecord resources.
 */
export interface HostRecordState {
    /**
     * Comment for the record; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * When false, the host does not have parent zone information.
     */
    enableDns?: pulumi.Input<boolean>;
    /**
     * Extensible attributes of host record (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The host name in FQDN format.
     */
    hostname?: pulumi.Input<string>;
    /**
     * IPv4 addresses associated with host record.
     */
    ipV4Addresses?: pulumi.Input<pulumi.Input<inputs.HostRecordIpV4Address>[]>;
    /**
     * The name of the network view in which the host record resides.
     */
    networkView?: pulumi.Input<string>;
    /**
     * Reference id of host record object.
     */
    ref?: pulumi.Input<string>;
    /**
     * The name of the DNS view in which the record resides.
     */
    view?: pulumi.Input<string>;
    /**
     * The name of the zone in which the record resides.
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HostRecord resource.
 */
export interface HostRecordArgs {
    /**
     * Comment for the record; maximum 256 characters.
     */
    comment?: pulumi.Input<string>;
    /**
     * When false, the host does not have parent zone information.
     */
    enableDns?: pulumi.Input<boolean>;
    /**
     * Extensible attributes of host record (Values are JSON encoded).
     */
    extensibleAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The host name in FQDN format.
     */
    hostname: pulumi.Input<string>;
    /**
     * IPv4 addresses associated with host record.
     */
    ipV4Addresses?: pulumi.Input<pulumi.Input<inputs.HostRecordIpV4Address>[]>;
    /**
     * The name of the network view in which the host record resides.
     */
    networkView?: pulumi.Input<string>;
    /**
     * The name of the DNS view in which the record resides.
     */
    view?: pulumi.Input<string>;
}
