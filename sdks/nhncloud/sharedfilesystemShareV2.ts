// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SharedfilesystemShareV2 extends pulumi.CustomResource {
    /**
     * Get an existing SharedfilesystemShareV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedfilesystemShareV2State, opts?: pulumi.CustomResourceOptions): SharedfilesystemShareV2 {
        return new SharedfilesystemShareV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/sharedfilesystemShareV2:SharedfilesystemShareV2';

    /**
     * Returns true if the given object is an instance of SharedfilesystemShareV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedfilesystemShareV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedfilesystemShareV2.__pulumiType;
    }

    public /*out*/ readonly allMetadata!: pulumi.Output<{[key: string]: string}>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly exportLocations!: pulumi.Output<outputs.SharedfilesystemShareV2ExportLocation[]>;
    public /*out*/ readonly hasReplicas!: pulumi.Output<boolean>;
    public /*out*/ readonly host!: pulumi.Output<string>;
    public readonly isPublic!: pulumi.Output<boolean | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly replicationType!: pulumi.Output<string>;
    public readonly shareNetworkId!: pulumi.Output<string>;
    public readonly shareProto!: pulumi.Output<string>;
    public /*out*/ readonly shareServerId!: pulumi.Output<string>;
    public readonly shareType!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SharedfilesystemShareV2Timeouts | undefined>;

    /**
     * Create a SharedfilesystemShareV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedfilesystemShareV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedfilesystemShareV2Args | SharedfilesystemShareV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedfilesystemShareV2State | undefined;
            resourceInputs["allMetadata"] = state ? state.allMetadata : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["exportLocations"] = state ? state.exportLocations : undefined;
            resourceInputs["hasReplicas"] = state ? state.hasReplicas : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicationType"] = state ? state.replicationType : undefined;
            resourceInputs["shareNetworkId"] = state ? state.shareNetworkId : undefined;
            resourceInputs["shareProto"] = state ? state.shareProto : undefined;
            resourceInputs["shareServerId"] = state ? state.shareServerId : undefined;
            resourceInputs["shareType"] = state ? state.shareType : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SharedfilesystemShareV2Args | undefined;
            if ((!args || args.shareProto === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareProto'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["shareNetworkId"] = args ? args.shareNetworkId : undefined;
            resourceInputs["shareProto"] = args ? args.shareProto : undefined;
            resourceInputs["shareType"] = args ? args.shareType : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["allMetadata"] = undefined /*out*/;
            resourceInputs["exportLocations"] = undefined /*out*/;
            resourceInputs["hasReplicas"] = undefined /*out*/;
            resourceInputs["host"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["replicationType"] = undefined /*out*/;
            resourceInputs["shareServerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedfilesystemShareV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SharedfilesystemShareV2 resources.
 */
export interface SharedfilesystemShareV2State {
    allMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    exportLocations?: pulumi.Input<pulumi.Input<inputs.SharedfilesystemShareV2ExportLocation>[]>;
    hasReplicas?: pulumi.Input<boolean>;
    host?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    replicationType?: pulumi.Input<string>;
    shareNetworkId?: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    shareServerId?: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SharedfilesystemShareV2Timeouts>;
}

/**
 * The set of arguments for constructing a SharedfilesystemShareV2 resource.
 */
export interface SharedfilesystemShareV2Args {
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareNetworkId?: pulumi.Input<string>;
    shareProto: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SharedfilesystemShareV2Timeouts>;
}
