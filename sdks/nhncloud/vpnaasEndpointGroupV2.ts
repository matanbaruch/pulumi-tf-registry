// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnaasEndpointGroupV2 extends pulumi.CustomResource {
    /**
     * Get an existing VpnaasEndpointGroupV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnaasEndpointGroupV2State, opts?: pulumi.CustomResourceOptions): VpnaasEndpointGroupV2 {
        return new VpnaasEndpointGroupV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/vpnaasEndpointGroupV2:VpnaasEndpointGroupV2';

    /**
     * Returns true if the given object is an instance of VpnaasEndpointGroupV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnaasEndpointGroupV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnaasEndpointGroupV2.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly endpoints!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpnaasEndpointGroupV2Timeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly valueSpecs!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a VpnaasEndpointGroupV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnaasEndpointGroupV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnaasEndpointGroupV2Args | VpnaasEndpointGroupV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnaasEndpointGroupV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        } else {
            const args = argsOrState as VpnaasEndpointGroupV2Args | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnaasEndpointGroupV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnaasEndpointGroupV2 resources.
 */
export interface VpnaasEndpointGroupV2State {
    description?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnaasEndpointGroupV2Timeouts>;
    type?: pulumi.Input<string>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a VpnaasEndpointGroupV2 resource.
 */
export interface VpnaasEndpointGroupV2Args {
    description?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnaasEndpointGroupV2Timeouts>;
    type?: pulumi.Input<string>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
