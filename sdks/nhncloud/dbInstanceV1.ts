// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbInstanceV1 extends pulumi.CustomResource {
    /**
     * Get an existing DbInstanceV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbInstanceV1State, opts?: pulumi.CustomResourceOptions): DbInstanceV1 {
        return new DbInstanceV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/dbInstanceV1:DbInstanceV1';

    /**
     * Returns true if the given object is an instance of DbInstanceV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbInstanceV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbInstanceV1.__pulumiType;
    }

    public /*out*/ readonly addresses!: pulumi.Output<string[]>;
    public readonly configurationId!: pulumi.Output<string | undefined>;
    public readonly databases!: pulumi.Output<outputs.DbInstanceV1Database[] | undefined>;
    public readonly datastore!: pulumi.Output<outputs.DbInstanceV1Datastore>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.DbInstanceV1Network[] | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.DbInstanceV1Timeouts | undefined>;
    public readonly users!: pulumi.Output<outputs.DbInstanceV1User[] | undefined>;

    /**
     * Create a DbInstanceV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbInstanceV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbInstanceV1Args | DbInstanceV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbInstanceV1State | undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["configurationId"] = state ? state.configurationId : undefined;
            resourceInputs["databases"] = state ? state.databases : undefined;
            resourceInputs["datastore"] = state ? state.datastore : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as DbInstanceV1Args | undefined;
            if ((!args || args.datastore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastore'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["configurationId"] = args ? args.configurationId : undefined;
            resourceInputs["databases"] = args ? args.databases : undefined;
            resourceInputs["datastore"] = args ? args.datastore : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["addresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbInstanceV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbInstanceV1 resources.
 */
export interface DbInstanceV1State {
    addresses?: pulumi.Input<pulumi.Input<string>[]>;
    configurationId?: pulumi.Input<string>;
    databases?: pulumi.Input<pulumi.Input<inputs.DbInstanceV1Database>[]>;
    datastore?: pulumi.Input<inputs.DbInstanceV1Datastore>;
    flavorId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.DbInstanceV1Network>[]>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DbInstanceV1Timeouts>;
    users?: pulumi.Input<pulumi.Input<inputs.DbInstanceV1User>[]>;
}

/**
 * The set of arguments for constructing a DbInstanceV1 resource.
 */
export interface DbInstanceV1Args {
    configurationId?: pulumi.Input<string>;
    databases?: pulumi.Input<pulumi.Input<inputs.DbInstanceV1Database>[]>;
    datastore: pulumi.Input<inputs.DbInstanceV1Datastore>;
    flavorId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.DbInstanceV1Network>[]>;
    region?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.DbInstanceV1Timeouts>;
    users?: pulumi.Input<pulumi.Input<inputs.DbInstanceV1User>[]>;
}
