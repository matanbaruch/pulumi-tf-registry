// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkingTrunkV2(args?: GetNetworkingTrunkV2Args, opts?: pulumi.InvokeOptions): Promise<GetNetworkingTrunkV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nhncloud:index/getNetworkingTrunkV2:getNetworkingTrunkV2", {
        "adminStateUp": args.adminStateUp,
        "description": args.description,
        "id": args.id,
        "name": args.name,
        "portId": args.portId,
        "projectId": args.projectId,
        "region": args.region,
        "status": args.status,
        "tags": args.tags,
        "trunkId": args.trunkId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkingTrunkV2.
 */
export interface GetNetworkingTrunkV2Args {
    adminStateUp?: boolean;
    description?: string;
    id?: string;
    name?: string;
    portId?: string;
    projectId?: string;
    region?: string;
    status?: string;
    tags?: string[];
    trunkId?: string;
}

/**
 * A collection of values returned by getNetworkingTrunkV2.
 */
export interface GetNetworkingTrunkV2Result {
    readonly adminStateUp?: boolean;
    readonly allTags: string[];
    readonly description?: string;
    readonly id: string;
    readonly name?: string;
    readonly portId?: string;
    readonly projectId: string;
    readonly region: string;
    readonly status?: string;
    readonly subPorts: outputs.GetNetworkingTrunkV2SubPort[];
    readonly tags?: string[];
    readonly trunkId?: string;
}
export function getNetworkingTrunkV2Output(args?: GetNetworkingTrunkV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkingTrunkV2Result> {
    return pulumi.output(args).apply((a: any) => getNetworkingTrunkV2(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkingTrunkV2.
 */
export interface GetNetworkingTrunkV2OutputArgs {
    adminStateUp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    trunkId?: pulumi.Input<string>;
}
