// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerinfraClusterV1 extends pulumi.CustomResource {
    /**
     * Get an existing ContainerinfraClusterV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerinfraClusterV1State, opts?: pulumi.CustomResourceOptions): ContainerinfraClusterV1 {
        return new ContainerinfraClusterV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/containerinfraClusterV1:ContainerinfraClusterV1';

    /**
     * Returns true if the given object is an instance of ContainerinfraClusterV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerinfraClusterV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerinfraClusterV1.__pulumiType;
    }

    public /*out*/ readonly apiAddress!: pulumi.Output<string>;
    public readonly clusterTemplateId!: pulumi.Output<string>;
    public /*out*/ readonly coeVersion!: pulumi.Output<string>;
    public /*out*/ readonly containerVersion!: pulumi.Output<string>;
    public readonly createTimeout!: pulumi.Output<number>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly discoveryUrl!: pulumi.Output<string>;
    public readonly dockerVolumeSize!: pulumi.Output<number>;
    public readonly fixedNetwork!: pulumi.Output<string>;
    public readonly fixedSubnet!: pulumi.Output<string>;
    public readonly flavor!: pulumi.Output<string>;
    public readonly floatingIpEnabled!: pulumi.Output<boolean>;
    public readonly keypair!: pulumi.Output<string>;
    public /*out*/ readonly kubeconfig!: pulumi.Output<{[key: string]: string}>;
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly masterAddresses!: pulumi.Output<string[]>;
    public readonly masterCount!: pulumi.Output<number>;
    public readonly masterFlavor!: pulumi.Output<string>;
    public readonly mergeLabels!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nodeAddresses!: pulumi.Output<string[]>;
    public readonly nodeCount!: pulumi.Output<number | undefined>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly stackId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerinfraClusterV1Timeouts | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public /*out*/ readonly userId!: pulumi.Output<string>;

    /**
     * Create a ContainerinfraClusterV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerinfraClusterV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerinfraClusterV1Args | ContainerinfraClusterV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerinfraClusterV1State | undefined;
            resourceInputs["apiAddress"] = state ? state.apiAddress : undefined;
            resourceInputs["clusterTemplateId"] = state ? state.clusterTemplateId : undefined;
            resourceInputs["coeVersion"] = state ? state.coeVersion : undefined;
            resourceInputs["containerVersion"] = state ? state.containerVersion : undefined;
            resourceInputs["createTimeout"] = state ? state.createTimeout : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["discoveryUrl"] = state ? state.discoveryUrl : undefined;
            resourceInputs["dockerVolumeSize"] = state ? state.dockerVolumeSize : undefined;
            resourceInputs["fixedNetwork"] = state ? state.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = state ? state.fixedSubnet : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = state ? state.floatingIpEnabled : undefined;
            resourceInputs["keypair"] = state ? state.keypair : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["masterAddresses"] = state ? state.masterAddresses : undefined;
            resourceInputs["masterCount"] = state ? state.masterCount : undefined;
            resourceInputs["masterFlavor"] = state ? state.masterFlavor : undefined;
            resourceInputs["mergeLabels"] = state ? state.mergeLabels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeAddresses"] = state ? state.nodeAddresses : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ContainerinfraClusterV1Args | undefined;
            if ((!args || args.clusterTemplateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterTemplateId'");
            }
            resourceInputs["clusterTemplateId"] = args ? args.clusterTemplateId : undefined;
            resourceInputs["createTimeout"] = args ? args.createTimeout : undefined;
            resourceInputs["discoveryUrl"] = args ? args.discoveryUrl : undefined;
            resourceInputs["dockerVolumeSize"] = args ? args.dockerVolumeSize : undefined;
            resourceInputs["fixedNetwork"] = args ? args.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = args ? args.fixedSubnet : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = args ? args.floatingIpEnabled : undefined;
            resourceInputs["keypair"] = args ? args.keypair : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["masterCount"] = args ? args.masterCount : undefined;
            resourceInputs["masterFlavor"] = args ? args.masterFlavor : undefined;
            resourceInputs["mergeLabels"] = args ? args.mergeLabels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["apiAddress"] = undefined /*out*/;
            resourceInputs["coeVersion"] = undefined /*out*/;
            resourceInputs["containerVersion"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["masterAddresses"] = undefined /*out*/;
            resourceInputs["nodeAddresses"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["stackId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ContainerinfraClusterV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerinfraClusterV1 resources.
 */
export interface ContainerinfraClusterV1State {
    apiAddress?: pulumi.Input<string>;
    clusterTemplateId?: pulumi.Input<string>;
    coeVersion?: pulumi.Input<string>;
    containerVersion?: pulumi.Input<string>;
    createTimeout?: pulumi.Input<number>;
    createdAt?: pulumi.Input<string>;
    discoveryUrl?: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    fixedNetwork?: pulumi.Input<string>;
    fixedSubnet?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    floatingIpEnabled?: pulumi.Input<boolean>;
    keypair?: pulumi.Input<string>;
    kubeconfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    masterAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    masterCount?: pulumi.Input<number>;
    masterFlavor?: pulumi.Input<string>;
    mergeLabels?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nodeAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    nodeCount?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    stackId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerinfraClusterV1Timeouts>;
    updatedAt?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerinfraClusterV1 resource.
 */
export interface ContainerinfraClusterV1Args {
    clusterTemplateId: pulumi.Input<string>;
    createTimeout?: pulumi.Input<number>;
    discoveryUrl?: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    fixedNetwork?: pulumi.Input<string>;
    fixedSubnet?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    floatingIpEnabled?: pulumi.Input<boolean>;
    keypair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    masterCount?: pulumi.Input<number>;
    masterFlavor?: pulumi.Input<string>;
    mergeLabels?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerinfraClusterV1Timeouts>;
}
