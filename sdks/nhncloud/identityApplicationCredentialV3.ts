// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityApplicationCredentialV3 extends pulumi.CustomResource {
    /**
     * Get an existing IdentityApplicationCredentialV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityApplicationCredentialV3State, opts?: pulumi.CustomResourceOptions): IdentityApplicationCredentialV3 {
        return new IdentityApplicationCredentialV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/identityApplicationCredentialV3:IdentityApplicationCredentialV3';

    /**
     * Returns true if the given object is an instance of IdentityApplicationCredentialV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityApplicationCredentialV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityApplicationCredentialV3.__pulumiType;
    }

    public readonly accessRules!: pulumi.Output<outputs.IdentityApplicationCredentialV3AccessRule[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly expiresAt!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly roles!: pulumi.Output<string[]>;
    public readonly secret!: pulumi.Output<string>;
    public readonly unrestricted!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IdentityApplicationCredentialV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IdentityApplicationCredentialV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityApplicationCredentialV3Args | IdentityApplicationCredentialV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityApplicationCredentialV3State | undefined;
            resourceInputs["accessRules"] = state ? state.accessRules : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["unrestricted"] = state ? state.unrestricted : undefined;
        } else {
            const args = argsOrState as IdentityApplicationCredentialV3Args | undefined;
            resourceInputs["accessRules"] = args ? args.accessRules : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["unrestricted"] = args ? args.unrestricted : undefined;
            resourceInputs["projectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityApplicationCredentialV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityApplicationCredentialV3 resources.
 */
export interface IdentityApplicationCredentialV3State {
    accessRules?: pulumi.Input<pulumi.Input<inputs.IdentityApplicationCredentialV3AccessRule>[]>;
    description?: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    secret?: pulumi.Input<string>;
    unrestricted?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IdentityApplicationCredentialV3 resource.
 */
export interface IdentityApplicationCredentialV3Args {
    accessRules?: pulumi.Input<pulumi.Input<inputs.IdentityApplicationCredentialV3AccessRule>[]>;
    description?: pulumi.Input<string>;
    expiresAt?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    secret?: pulumi.Input<string>;
    unrestricted?: pulumi.Input<boolean>;
}
