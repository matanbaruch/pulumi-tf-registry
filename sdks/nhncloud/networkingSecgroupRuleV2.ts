// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkingSecgroupRuleV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingSecgroupRuleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingSecgroupRuleV2State, opts?: pulumi.CustomResourceOptions): NetworkingSecgroupRuleV2 {
        return new NetworkingSecgroupRuleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/networkingSecgroupRuleV2:NetworkingSecgroupRuleV2';

    /**
     * Returns true if the given object is an instance of NetworkingSecgroupRuleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingSecgroupRuleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingSecgroupRuleV2.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly direction!: pulumi.Output<string>;
    public readonly ethertype!: pulumi.Output<string>;
    public readonly portRangeMax!: pulumi.Output<number>;
    public readonly portRangeMin!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly remoteGroupId!: pulumi.Output<string>;
    public readonly remoteIpPrefix!: pulumi.Output<string>;
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkingSecgroupRuleV2Timeouts | undefined>;

    /**
     * Create a NetworkingSecgroupRuleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingSecgroupRuleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingSecgroupRuleV2Args | NetworkingSecgroupRuleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingSecgroupRuleV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["ethertype"] = state ? state.ethertype : undefined;
            resourceInputs["portRangeMax"] = state ? state.portRangeMax : undefined;
            resourceInputs["portRangeMin"] = state ? state.portRangeMin : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["remoteGroupId"] = state ? state.remoteGroupId : undefined;
            resourceInputs["remoteIpPrefix"] = state ? state.remoteIpPrefix : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkingSecgroupRuleV2Args | undefined;
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["ethertype"] = args ? args.ethertype : undefined;
            resourceInputs["portRangeMax"] = args ? args.portRangeMax : undefined;
            resourceInputs["portRangeMin"] = args ? args.portRangeMin : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["remoteGroupId"] = args ? args.remoteGroupId : undefined;
            resourceInputs["remoteIpPrefix"] = args ? args.remoteIpPrefix : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingSecgroupRuleV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkingSecgroupRuleV2 resources.
 */
export interface NetworkingSecgroupRuleV2State {
    description?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    ethertype?: pulumi.Input<string>;
    portRangeMax?: pulumi.Input<number>;
    portRangeMin?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteGroupId?: pulumi.Input<string>;
    remoteIpPrefix?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingSecgroupRuleV2Timeouts>;
}

/**
 * The set of arguments for constructing a NetworkingSecgroupRuleV2 resource.
 */
export interface NetworkingSecgroupRuleV2Args {
    description?: pulumi.Input<string>;
    direction: pulumi.Input<string>;
    ethertype?: pulumi.Input<string>;
    portRangeMax?: pulumi.Input<number>;
    portRangeMin?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteGroupId?: pulumi.Input<string>;
    remoteIpPrefix?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingSecgroupRuleV2Timeouts>;
}
