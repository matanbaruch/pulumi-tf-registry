// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkingSubnetV2(args?: GetNetworkingSubnetV2Args, opts?: pulumi.InvokeOptions): Promise<GetNetworkingSubnetV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nhncloud:index/getNetworkingSubnetV2:getNetworkingSubnetV2", {
        "cidr": args.cidr,
        "description": args.description,
        "dhcpDisabled": args.dhcpDisabled,
        "dhcpEnabled": args.dhcpEnabled,
        "gatewayIp": args.gatewayIp,
        "id": args.id,
        "ipVersion": args.ipVersion,
        "ipv6AddressMode": args.ipv6AddressMode,
        "ipv6RaMode": args.ipv6RaMode,
        "name": args.name,
        "networkId": args.networkId,
        "region": args.region,
        "subnetId": args.subnetId,
        "subnetpoolId": args.subnetpoolId,
        "tags": args.tags,
        "tenantId": args.tenantId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkingSubnetV2.
 */
export interface GetNetworkingSubnetV2Args {
    cidr?: string;
    description?: string;
    /**
     * @deprecated Deprecated
     */
    dhcpDisabled?: boolean;
    dhcpEnabled?: boolean;
    gatewayIp?: string;
    id?: string;
    ipVersion?: number;
    ipv6AddressMode?: string;
    ipv6RaMode?: string;
    name?: string;
    networkId?: string;
    region?: string;
    subnetId?: string;
    subnetpoolId?: string;
    tags?: string[];
    tenantId?: string;
}

/**
 * A collection of values returned by getNetworkingSubnetV2.
 */
export interface GetNetworkingSubnetV2Result {
    readonly allTags: string[];
    readonly allocationPools: outputs.GetNetworkingSubnetV2AllocationPool[];
    readonly cidr: string;
    readonly description: string;
    /**
     * @deprecated Deprecated
     */
    readonly dhcpDisabled?: boolean;
    readonly dhcpEnabled?: boolean;
    readonly dnsNameservers: string[];
    readonly enableDhcp: boolean;
    readonly gatewayIp: string;
    readonly hostRoutes: outputs.GetNetworkingSubnetV2HostRoute[];
    readonly id: string;
    readonly ipVersion: number;
    readonly ipv6AddressMode: string;
    readonly ipv6RaMode: string;
    readonly name: string;
    readonly networkId: string;
    readonly region: string;
    readonly serviceTypes: string[];
    readonly subnetId: string;
    readonly subnetpoolId: string;
    readonly tags?: string[];
    readonly tenantId: string;
}
export function getNetworkingSubnetV2Output(args?: GetNetworkingSubnetV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkingSubnetV2Result> {
    return pulumi.output(args).apply((a: any) => getNetworkingSubnetV2(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkingSubnetV2.
 */
export interface GetNetworkingSubnetV2OutputArgs {
    cidr?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    dhcpDisabled?: pulumi.Input<boolean>;
    dhcpEnabled?: pulumi.Input<boolean>;
    gatewayIp?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<number>;
    ipv6AddressMode?: pulumi.Input<string>;
    ipv6RaMode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    subnetpoolId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
}
