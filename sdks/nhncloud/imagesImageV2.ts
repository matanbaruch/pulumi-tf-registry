// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImagesImageV2 extends pulumi.CustomResource {
    /**
     * Get an existing ImagesImageV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImagesImageV2State, opts?: pulumi.CustomResourceOptions): ImagesImageV2 {
        return new ImagesImageV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/imagesImageV2:ImagesImageV2';

    /**
     * Returns true if the given object is an instance of ImagesImageV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImagesImageV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImagesImageV2.__pulumiType;
    }

    public /*out*/ readonly checksum!: pulumi.Output<string>;
    public readonly containerFormat!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly decompress!: pulumi.Output<boolean | undefined>;
    public readonly diskFormat!: pulumi.Output<string>;
    public /*out*/ readonly file!: pulumi.Output<string>;
    public readonly hidden!: pulumi.Output<boolean | undefined>;
    public readonly imageCachePath!: pulumi.Output<string | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly imageSourcePassword!: pulumi.Output<string | undefined>;
    public readonly imageSourceUrl!: pulumi.Output<string | undefined>;
    public readonly imageSourceUsername!: pulumi.Output<string | undefined>;
    public readonly localFilePath!: pulumi.Output<string | undefined>;
    public /*out*/ readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly minDiskGb!: pulumi.Output<number | undefined>;
    public readonly minRamMb!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public readonly properties!: pulumi.Output<{[key: string]: string}>;
    public readonly protected!: pulumi.Output<boolean | undefined>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly schema!: pulumi.Output<string>;
    public /*out*/ readonly sizeBytes!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ImagesImageV2Timeouts | undefined>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly updateAt!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly verifyChecksum!: pulumi.Output<boolean | undefined>;
    public readonly visibility!: pulumi.Output<string | undefined>;
    public readonly webDownload!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ImagesImageV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImagesImageV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImagesImageV2Args | ImagesImageV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImagesImageV2State | undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["containerFormat"] = state ? state.containerFormat : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["decompress"] = state ? state.decompress : undefined;
            resourceInputs["diskFormat"] = state ? state.diskFormat : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["imageCachePath"] = state ? state.imageCachePath : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageSourcePassword"] = state ? state.imageSourcePassword : undefined;
            resourceInputs["imageSourceUrl"] = state ? state.imageSourceUrl : undefined;
            resourceInputs["imageSourceUsername"] = state ? state.imageSourceUsername : undefined;
            resourceInputs["localFilePath"] = state ? state.localFilePath : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["minDiskGb"] = state ? state.minDiskGb : undefined;
            resourceInputs["minRamMb"] = state ? state.minRamMb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["protected"] = state ? state.protected : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schema"] = state ? state.schema : undefined;
            resourceInputs["sizeBytes"] = state ? state.sizeBytes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updateAt"] = state ? state.updateAt : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["verifyChecksum"] = state ? state.verifyChecksum : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
            resourceInputs["webDownload"] = state ? state.webDownload : undefined;
        } else {
            const args = argsOrState as ImagesImageV2Args | undefined;
            if ((!args || args.containerFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerFormat'");
            }
            if ((!args || args.diskFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'diskFormat'");
            }
            resourceInputs["containerFormat"] = args ? args.containerFormat : undefined;
            resourceInputs["decompress"] = args ? args.decompress : undefined;
            resourceInputs["diskFormat"] = args ? args.diskFormat : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["imageCachePath"] = args ? args.imageCachePath : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageSourcePassword"] = args?.imageSourcePassword ? pulumi.secret(args.imageSourcePassword) : undefined;
            resourceInputs["imageSourceUrl"] = args ? args.imageSourceUrl : undefined;
            resourceInputs["imageSourceUsername"] = args ? args.imageSourceUsername : undefined;
            resourceInputs["localFilePath"] = args ? args.localFilePath : undefined;
            resourceInputs["minDiskGb"] = args ? args.minDiskGb : undefined;
            resourceInputs["minRamMb"] = args ? args.minRamMb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["protected"] = args ? args.protected : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["verifyChecksum"] = args ? args.verifyChecksum : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
            resourceInputs["webDownload"] = args ? args.webDownload : undefined;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["file"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["sizeBytes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["imageSourcePassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ImagesImageV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImagesImageV2 resources.
 */
export interface ImagesImageV2State {
    checksum?: pulumi.Input<string>;
    containerFormat?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    decompress?: pulumi.Input<boolean>;
    diskFormat?: pulumi.Input<string>;
    file?: pulumi.Input<string>;
    hidden?: pulumi.Input<boolean>;
    imageCachePath?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageSourcePassword?: pulumi.Input<string>;
    imageSourceUrl?: pulumi.Input<string>;
    imageSourceUsername?: pulumi.Input<string>;
    localFilePath?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    minDiskGb?: pulumi.Input<number>;
    minRamMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    protected?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    schema?: pulumi.Input<string>;
    sizeBytes?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ImagesImageV2Timeouts>;
    /**
     * @deprecated Deprecated
     */
    updateAt?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    verifyChecksum?: pulumi.Input<boolean>;
    visibility?: pulumi.Input<string>;
    webDownload?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ImagesImageV2 resource.
 */
export interface ImagesImageV2Args {
    containerFormat: pulumi.Input<string>;
    decompress?: pulumi.Input<boolean>;
    diskFormat: pulumi.Input<string>;
    hidden?: pulumi.Input<boolean>;
    imageCachePath?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageSourcePassword?: pulumi.Input<string>;
    imageSourceUrl?: pulumi.Input<string>;
    imageSourceUsername?: pulumi.Input<string>;
    localFilePath?: pulumi.Input<string>;
    minDiskGb?: pulumi.Input<number>;
    minRamMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    protected?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.ImagesImageV2Timeouts>;
    verifyChecksum?: pulumi.Input<boolean>;
    visibility?: pulumi.Input<string>;
    webDownload?: pulumi.Input<boolean>;
}
