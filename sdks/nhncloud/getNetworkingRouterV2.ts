// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkingRouterV2(args?: GetNetworkingRouterV2Args, opts?: pulumi.InvokeOptions): Promise<GetNetworkingRouterV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nhncloud:index/getNetworkingRouterV2:getNetworkingRouterV2", {
        "adminStateUp": args.adminStateUp,
        "description": args.description,
        "distributed": args.distributed,
        "enableSnat": args.enableSnat,
        "id": args.id,
        "name": args.name,
        "region": args.region,
        "routerId": args.routerId,
        "status": args.status,
        "tags": args.tags,
        "tenantId": args.tenantId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkingRouterV2.
 */
export interface GetNetworkingRouterV2Args {
    adminStateUp?: boolean;
    description?: string;
    distributed?: boolean;
    enableSnat?: boolean;
    id?: string;
    name?: string;
    region?: string;
    routerId?: string;
    status?: string;
    tags?: string[];
    tenantId?: string;
}

/**
 * A collection of values returned by getNetworkingRouterV2.
 */
export interface GetNetworkingRouterV2Result {
    readonly adminStateUp?: boolean;
    readonly allTags: string[];
    readonly availabilityZoneHints: string[];
    readonly description?: string;
    readonly distributed?: boolean;
    readonly enableSnat: boolean;
    readonly externalFixedIps: outputs.GetNetworkingRouterV2ExternalFixedIp[];
    readonly externalNetworkId: string;
    readonly id: string;
    readonly name?: string;
    readonly region?: string;
    readonly routerId?: string;
    readonly status?: string;
    readonly tags?: string[];
    readonly tenantId?: string;
}
export function getNetworkingRouterV2Output(args?: GetNetworkingRouterV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkingRouterV2Result> {
    return pulumi.output(args).apply((a: any) => getNetworkingRouterV2(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkingRouterV2.
 */
export interface GetNetworkingRouterV2OutputArgs {
    adminStateUp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    distributed?: pulumi.Input<boolean>;
    enableSnat?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routerId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
}
