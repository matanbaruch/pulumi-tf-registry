// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbQuotaV2 extends pulumi.CustomResource {
    /**
     * Get an existing LbQuotaV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbQuotaV2State, opts?: pulumi.CustomResourceOptions): LbQuotaV2 {
        return new LbQuotaV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/lbQuotaV2:LbQuotaV2';

    /**
     * Returns true if the given object is an instance of LbQuotaV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbQuotaV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbQuotaV2.__pulumiType;
    }

    public readonly healthMonitor!: pulumi.Output<number>;
    public readonly l7Policy!: pulumi.Output<number>;
    public readonly l7Rule!: pulumi.Output<number>;
    public readonly listener!: pulumi.Output<number>;
    public readonly loadbalancer!: pulumi.Output<number>;
    public readonly member!: pulumi.Output<number>;
    public readonly pool!: pulumi.Output<number>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbQuotaV2Timeouts | undefined>;

    /**
     * Create a LbQuotaV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbQuotaV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbQuotaV2Args | LbQuotaV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbQuotaV2State | undefined;
            resourceInputs["healthMonitor"] = state ? state.healthMonitor : undefined;
            resourceInputs["l7Policy"] = state ? state.l7Policy : undefined;
            resourceInputs["l7Rule"] = state ? state.l7Rule : undefined;
            resourceInputs["listener"] = state ? state.listener : undefined;
            resourceInputs["loadbalancer"] = state ? state.loadbalancer : undefined;
            resourceInputs["member"] = state ? state.member : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LbQuotaV2Args | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["healthMonitor"] = args ? args.healthMonitor : undefined;
            resourceInputs["l7Policy"] = args ? args.l7Policy : undefined;
            resourceInputs["l7Rule"] = args ? args.l7Rule : undefined;
            resourceInputs["listener"] = args ? args.listener : undefined;
            resourceInputs["loadbalancer"] = args ? args.loadbalancer : undefined;
            resourceInputs["member"] = args ? args.member : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbQuotaV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbQuotaV2 resources.
 */
export interface LbQuotaV2State {
    healthMonitor?: pulumi.Input<number>;
    l7Policy?: pulumi.Input<number>;
    l7Rule?: pulumi.Input<number>;
    listener?: pulumi.Input<number>;
    loadbalancer?: pulumi.Input<number>;
    member?: pulumi.Input<number>;
    pool?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbQuotaV2Timeouts>;
}

/**
 * The set of arguments for constructing a LbQuotaV2 resource.
 */
export interface LbQuotaV2Args {
    healthMonitor?: pulumi.Input<number>;
    l7Policy?: pulumi.Input<number>;
    l7Rule?: pulumi.Input<number>;
    listener?: pulumi.Input<number>;
    loadbalancer?: pulumi.Input<number>;
    member?: pulumi.Input<number>;
    pool?: pulumi.Input<number>;
    projectId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbQuotaV2Timeouts>;
}
