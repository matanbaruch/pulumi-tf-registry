// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeymanagerContainerV1 extends pulumi.CustomResource {
    /**
     * Get an existing KeymanagerContainerV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeymanagerContainerV1State, opts?: pulumi.CustomResourceOptions): KeymanagerContainerV1 {
        return new KeymanagerContainerV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/keymanagerContainerV1:KeymanagerContainerV1';

    /**
     * Returns true if the given object is an instance of KeymanagerContainerV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeymanagerContainerV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeymanagerContainerV1.__pulumiType;
    }

    public readonly acl!: pulumi.Output<outputs.KeymanagerContainerV1Acl | undefined>;
    public /*out*/ readonly consumers!: pulumi.Output<outputs.KeymanagerContainerV1Consumer[]>;
    public /*out*/ readonly containerRef!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly creatorId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly secretRefs!: pulumi.Output<outputs.KeymanagerContainerV1SecretRef[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KeymanagerContainerV1Timeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a KeymanagerContainerV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeymanagerContainerV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeymanagerContainerV1Args | KeymanagerContainerV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeymanagerContainerV1State | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["consumers"] = state ? state.consumers : undefined;
            resourceInputs["containerRef"] = state ? state.containerRef : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["creatorId"] = state ? state.creatorId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretRefs"] = state ? state.secretRefs : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as KeymanagerContainerV1Args | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretRefs"] = args ? args.secretRefs : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["consumers"] = undefined /*out*/;
            resourceInputs["containerRef"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["creatorId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeymanagerContainerV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeymanagerContainerV1 resources.
 */
export interface KeymanagerContainerV1State {
    acl?: pulumi.Input<inputs.KeymanagerContainerV1Acl>;
    consumers?: pulumi.Input<pulumi.Input<inputs.KeymanagerContainerV1Consumer>[]>;
    containerRef?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    creatorId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretRefs?: pulumi.Input<pulumi.Input<inputs.KeymanagerContainerV1SecretRef>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeymanagerContainerV1Timeouts>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeymanagerContainerV1 resource.
 */
export interface KeymanagerContainerV1Args {
    acl?: pulumi.Input<inputs.KeymanagerContainerV1Acl>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretRefs?: pulumi.Input<pulumi.Input<inputs.KeymanagerContainerV1SecretRef>[]>;
    timeouts?: pulumi.Input<inputs.KeymanagerContainerV1Timeouts>;
    type: pulumi.Input<string>;
}
