// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnsTransferRequestV2 extends pulumi.CustomResource {
    /**
     * Get an existing DnsTransferRequestV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsTransferRequestV2State, opts?: pulumi.CustomResourceOptions): DnsTransferRequestV2 {
        return new DnsTransferRequestV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/dnsTransferRequestV2:DnsTransferRequestV2';

    /**
     * Returns true if the given object is an instance of DnsTransferRequestV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsTransferRequestV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsTransferRequestV2.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disableStatusCheck!: pulumi.Output<boolean | undefined>;
    public readonly key!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly targetProjectId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DnsTransferRequestV2Timeouts | undefined>;
    public readonly valueSpecs!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DnsTransferRequestV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsTransferRequestV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsTransferRequestV2Args | DnsTransferRequestV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsTransferRequestV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableStatusCheck"] = state ? state.disableStatusCheck : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["targetProjectId"] = state ? state.targetProjectId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DnsTransferRequestV2Args | undefined;
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableStatusCheck"] = args ? args.disableStatusCheck : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["targetProjectId"] = args ? args.targetProjectId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsTransferRequestV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnsTransferRequestV2 resources.
 */
export interface DnsTransferRequestV2State {
    description?: pulumi.Input<string>;
    disableStatusCheck?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    targetProjectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsTransferRequestV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsTransferRequestV2 resource.
 */
export interface DnsTransferRequestV2Args {
    description?: pulumi.Input<string>;
    disableStatusCheck?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    targetProjectId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DnsTransferRequestV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    zoneId: pulumi.Input<string>;
}
