// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbPoolV1 extends pulumi.CustomResource {
    /**
     * Get an existing LbPoolV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbPoolV1State, opts?: pulumi.CustomResourceOptions): LbPoolV1 {
        return new LbPoolV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/lbPoolV1:LbPoolV1';

    /**
     * Returns true if the given object is an instance of LbPoolV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbPoolV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbPoolV1.__pulumiType;
    }

    public readonly lbMethod!: pulumi.Output<string>;
    public readonly lbProvider!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly members!: pulumi.Output<string[] | undefined>;
    public readonly monitorIds!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbPoolV1Timeouts | undefined>;

    /**
     * Create a LbPoolV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbPoolV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbPoolV1Args | LbPoolV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbPoolV1State | undefined;
            resourceInputs["lbMethod"] = state ? state.lbMethod : undefined;
            resourceInputs["lbProvider"] = state ? state.lbProvider : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["monitorIds"] = state ? state.monitorIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LbPoolV1Args | undefined;
            if ((!args || args.lbMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbMethod'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["lbMethod"] = args ? args.lbMethod : undefined;
            resourceInputs["lbProvider"] = args ? args.lbProvider : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["monitorIds"] = args ? args.monitorIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbPoolV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbPoolV1 resources.
 */
export interface LbPoolV1State {
    lbMethod?: pulumi.Input<string>;
    lbProvider?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    monitorIds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbPoolV1Timeouts>;
}

/**
 * The set of arguments for constructing a LbPoolV1 resource.
 */
export interface LbPoolV1Args {
    lbMethod: pulumi.Input<string>;
    lbProvider?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    monitorIds?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbPoolV1Timeouts>;
}
