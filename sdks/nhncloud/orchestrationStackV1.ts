// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrchestrationStackV1 extends pulumi.CustomResource {
    /**
     * Get an existing OrchestrationStackV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrchestrationStackV1State, opts?: pulumi.CustomResourceOptions): OrchestrationStackV1 {
        return new OrchestrationStackV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/orchestrationStackV1:OrchestrationStackV1';

    /**
     * Returns true if the given object is an instance of OrchestrationStackV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrchestrationStackV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrchestrationStackV1.__pulumiType;
    }

    public readonly capabilities!: pulumi.Output<string[]>;
    public readonly creationTime!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly disableRollback!: pulumi.Output<boolean>;
    public readonly environmentOpts!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationTopics!: pulumi.Output<string[]>;
    public readonly outputs!: pulumi.Output<outputs.OrchestrationStackV1Output[] | undefined>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly status!: pulumi.Output<string>;
    public readonly statusReason!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[]>;
    public readonly templateDescription!: pulumi.Output<string>;
    public readonly templateOpts!: pulumi.Output<{[key: string]: string}>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.OrchestrationStackV1Timeouts | undefined>;
    public readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a OrchestrationStackV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrchestrationStackV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrchestrationStackV1Args | OrchestrationStackV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrchestrationStackV1State | undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableRollback"] = state ? state.disableRollback : undefined;
            resourceInputs["environmentOpts"] = state ? state.environmentOpts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTopics"] = state ? state.notificationTopics : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusReason"] = state ? state.statusReason : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateDescription"] = state ? state.templateDescription : undefined;
            resourceInputs["templateOpts"] = state ? state.templateOpts : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as OrchestrationStackV1Args | undefined;
            if ((!args || args.templateOpts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateOpts'");
            }
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["creationTime"] = args ? args.creationTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableRollback"] = args ? args.disableRollback : undefined;
            resourceInputs["environmentOpts"] = args ? args.environmentOpts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTopics"] = args ? args.notificationTopics : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["statusReason"] = args ? args.statusReason : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateDescription"] = args ? args.templateDescription : undefined;
            resourceInputs["templateOpts"] = args ? args.templateOpts : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["updatedTime"] = args ? args.updatedTime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrchestrationStackV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrchestrationStackV1 resources.
 */
export interface OrchestrationStackV1State {
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    creationTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableRollback?: pulumi.Input<boolean>;
    environmentOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    notificationTopics?: pulumi.Input<pulumi.Input<string>[]>;
    outputs?: pulumi.Input<pulumi.Input<inputs.OrchestrationStackV1Output>[]>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusReason?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    templateDescription?: pulumi.Input<string>;
    templateOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.OrchestrationStackV1Timeouts>;
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrchestrationStackV1 resource.
 */
export interface OrchestrationStackV1Args {
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    creationTime?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disableRollback?: pulumi.Input<boolean>;
    environmentOpts?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    notificationTopics?: pulumi.Input<pulumi.Input<string>[]>;
    outputs?: pulumi.Input<pulumi.Input<inputs.OrchestrationStackV1Output>[]>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusReason?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    templateDescription?: pulumi.Input<string>;
    templateOpts: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.OrchestrationStackV1Timeouts>;
    updatedTime?: pulumi.Input<string>;
}
