// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkingQuotaV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingQuotaV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingQuotaV2State, opts?: pulumi.CustomResourceOptions): NetworkingQuotaV2 {
        return new NetworkingQuotaV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/networkingQuotaV2:NetworkingQuotaV2';

    /**
     * Returns true if the given object is an instance of NetworkingQuotaV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingQuotaV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingQuotaV2.__pulumiType;
    }

    public readonly floatingip!: pulumi.Output<number>;
    public readonly network!: pulumi.Output<number>;
    public readonly port!: pulumi.Output<number>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly rbacPolicy!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly router!: pulumi.Output<number>;
    public readonly securityGroup!: pulumi.Output<number>;
    public readonly securityGroupRule!: pulumi.Output<number>;
    public readonly subnet!: pulumi.Output<number>;
    public readonly subnetpool!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkingQuotaV2Timeouts | undefined>;

    /**
     * Create a NetworkingQuotaV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingQuotaV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingQuotaV2Args | NetworkingQuotaV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingQuotaV2State | undefined;
            resourceInputs["floatingip"] = state ? state.floatingip : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["rbacPolicy"] = state ? state.rbacPolicy : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["router"] = state ? state.router : undefined;
            resourceInputs["securityGroup"] = state ? state.securityGroup : undefined;
            resourceInputs["securityGroupRule"] = state ? state.securityGroupRule : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["subnetpool"] = state ? state.subnetpool : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkingQuotaV2Args | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["floatingip"] = args ? args.floatingip : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["rbacPolicy"] = args ? args.rbacPolicy : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["router"] = args ? args.router : undefined;
            resourceInputs["securityGroup"] = args ? args.securityGroup : undefined;
            resourceInputs["securityGroupRule"] = args ? args.securityGroupRule : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["subnetpool"] = args ? args.subnetpool : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingQuotaV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkingQuotaV2 resources.
 */
export interface NetworkingQuotaV2State {
    floatingip?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    rbacPolicy?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    router?: pulumi.Input<number>;
    securityGroup?: pulumi.Input<number>;
    securityGroupRule?: pulumi.Input<number>;
    subnet?: pulumi.Input<number>;
    subnetpool?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NetworkingQuotaV2Timeouts>;
}

/**
 * The set of arguments for constructing a NetworkingQuotaV2 resource.
 */
export interface NetworkingQuotaV2Args {
    floatingip?: pulumi.Input<number>;
    network?: pulumi.Input<number>;
    port?: pulumi.Input<number>;
    projectId: pulumi.Input<string>;
    rbacPolicy?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    router?: pulumi.Input<number>;
    securityGroup?: pulumi.Input<number>;
    securityGroupRule?: pulumi.Input<number>;
    subnet?: pulumi.Input<number>;
    subnetpool?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NetworkingQuotaV2Timeouts>;
}
