// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getBlockstorageVolumeV2(args?: GetBlockstorageVolumeV2Args, opts?: pulumi.InvokeOptions): Promise<GetBlockstorageVolumeV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nhncloud:index/getBlockstorageVolumeV2:getBlockstorageVolumeV2", {
        "bootable": args.bootable,
        "id": args.id,
        "metadata": args.metadata,
        "name": args.name,
        "region": args.region,
        "status": args.status,
        "volumeType": args.volumeType,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBlockstorageVolumeV2.
 */
export interface GetBlockstorageVolumeV2Args {
    bootable?: string;
    id?: string;
    metadata?: {[key: string]: string};
    name?: string;
    region?: string;
    status?: string;
    volumeType?: string;
}

/**
 * A collection of values returned by getBlockstorageVolumeV2.
 */
export interface GetBlockstorageVolumeV2Result {
    readonly bootable: string;
    readonly id: string;
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly region: string;
    readonly size: number;
    readonly sourceVolumeId: string;
    readonly status: string;
    readonly volumeType: string;
}
export function getBlockstorageVolumeV2Output(args?: GetBlockstorageVolumeV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBlockstorageVolumeV2Result> {
    return pulumi.output(args).apply((a: any) => getBlockstorageVolumeV2(a, opts))
}

/**
 * A collection of arguments for invoking getBlockstorageVolumeV2.
 */
export interface GetBlockstorageVolumeV2OutputArgs {
    bootable?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
}
