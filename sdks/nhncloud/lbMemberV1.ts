// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbMemberV1 extends pulumi.CustomResource {
    /**
     * Get an existing LbMemberV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbMemberV1State, opts?: pulumi.CustomResourceOptions): LbMemberV1 {
        return new LbMemberV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/lbMemberV1:LbMemberV1';

    /**
     * Returns true if the given object is an instance of LbMemberV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbMemberV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbMemberV1.__pulumiType;
    }

    public readonly address!: pulumi.Output<string>;
    public readonly adminStateUp!: pulumi.Output<boolean>;
    public readonly poolId!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LbMemberV1Timeouts | undefined>;
    public readonly weight!: pulumi.Output<number>;

    /**
     * Create a LbMemberV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbMemberV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbMemberV1Args | LbMemberV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbMemberV1State | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as LbMemberV1Args | undefined;
            if ((!args || args.address === undefined) && !opts.urn) {
                throw new Error("Missing required property 'address'");
            }
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbMemberV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbMemberV1 resources.
 */
export interface LbMemberV1State {
    address?: pulumi.Input<string>;
    adminStateUp?: pulumi.Input<boolean>;
    poolId?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbMemberV1Timeouts>;
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LbMemberV1 resource.
 */
export interface LbMemberV1Args {
    address: pulumi.Input<string>;
    adminStateUp?: pulumi.Input<boolean>;
    poolId: pulumi.Input<string>;
    port: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbMemberV1Timeouts>;
    weight?: pulumi.Input<number>;
}
