// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockstorageVolumeAttachV2 extends pulumi.CustomResource {
    /**
     * Get an existing BlockstorageVolumeAttachV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockstorageVolumeAttachV2State, opts?: pulumi.CustomResourceOptions): BlockstorageVolumeAttachV2 {
        return new BlockstorageVolumeAttachV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/blockstorageVolumeAttachV2:BlockstorageVolumeAttachV2';

    /**
     * Returns true if the given object is an instance of BlockstorageVolumeAttachV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockstorageVolumeAttachV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockstorageVolumeAttachV2.__pulumiType;
    }

    public readonly attachMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly data!: pulumi.Output<{[key: string]: string}>;
    public readonly device!: pulumi.Output<string | undefined>;
    public /*out*/ readonly driverVolumeType!: pulumi.Output<string>;
    public readonly hostName!: pulumi.Output<string>;
    public readonly initiator!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly instanceId!: pulumi.Output<string | undefined>;
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    public /*out*/ readonly mountPointBase!: pulumi.Output<string>;
    public readonly multipath!: pulumi.Output<boolean | undefined>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly platform!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BlockstorageVolumeAttachV2Timeouts | undefined>;
    public readonly volumeId!: pulumi.Output<string>;
    public readonly wwnn!: pulumi.Output<string | undefined>;
    public readonly wwpns!: pulumi.Output<string[] | undefined>;

    /**
     * Create a BlockstorageVolumeAttachV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockstorageVolumeAttachV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockstorageVolumeAttachV2Args | BlockstorageVolumeAttachV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockstorageVolumeAttachV2State | undefined;
            resourceInputs["attachMode"] = state ? state.attachMode : undefined;
            resourceInputs["data"] = state ? state.data : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["driverVolumeType"] = state ? state.driverVolumeType : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["initiator"] = state ? state.initiator : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["mountPointBase"] = state ? state.mountPointBase : undefined;
            resourceInputs["multipath"] = state ? state.multipath : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["wwnn"] = state ? state.wwnn : undefined;
            resourceInputs["wwpns"] = state ? state.wwpns : undefined;
        } else {
            const args = argsOrState as BlockstorageVolumeAttachV2Args | undefined;
            if ((!args || args.hostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostName'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["attachMode"] = args ? args.attachMode : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["initiator"] = args ? args.initiator : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["multipath"] = args ? args.multipath : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["wwnn"] = args ? args.wwnn : undefined;
            resourceInputs["wwpns"] = args ? args.wwpns : undefined;
            resourceInputs["data"] = undefined /*out*/;
            resourceInputs["driverVolumeType"] = undefined /*out*/;
            resourceInputs["mountPointBase"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["data"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BlockstorageVolumeAttachV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockstorageVolumeAttachV2 resources.
 */
export interface BlockstorageVolumeAttachV2State {
    attachMode?: pulumi.Input<string>;
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    device?: pulumi.Input<string>;
    driverVolumeType?: pulumi.Input<string>;
    hostName?: pulumi.Input<string>;
    initiator?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceId?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    mountPointBase?: pulumi.Input<string>;
    multipath?: pulumi.Input<boolean>;
    osType?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockstorageVolumeAttachV2Timeouts>;
    volumeId?: pulumi.Input<string>;
    wwnn?: pulumi.Input<string>;
    wwpns?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a BlockstorageVolumeAttachV2 resource.
 */
export interface BlockstorageVolumeAttachV2Args {
    attachMode?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    hostName: pulumi.Input<string>;
    initiator?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    instanceId?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    multipath?: pulumi.Input<boolean>;
    osType?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockstorageVolumeAttachV2Timeouts>;
    volumeId: pulumi.Input<string>;
    wwnn?: pulumi.Input<string>;
    wwpns?: pulumi.Input<pulumi.Input<string>[]>;
}
