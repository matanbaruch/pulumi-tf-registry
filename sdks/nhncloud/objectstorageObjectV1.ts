// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectstorageObjectV1 extends pulumi.CustomResource {
    /**
     * Get an existing ObjectstorageObjectV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectstorageObjectV1State, opts?: pulumi.CustomResourceOptions): ObjectstorageObjectV1 {
        return new ObjectstorageObjectV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/objectstorageObjectV1:ObjectstorageObjectV1';

    /**
     * Returns true if the given object is an instance of ObjectstorageObjectV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectstorageObjectV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectstorageObjectV1.__pulumiType;
    }

    public readonly containerName!: pulumi.Output<string>;
    public readonly content!: pulumi.Output<string | undefined>;
    public readonly contentDisposition!: pulumi.Output<string>;
    public readonly contentEncoding!: pulumi.Output<string>;
    public /*out*/ readonly contentLength!: pulumi.Output<number>;
    public readonly contentType!: pulumi.Output<string>;
    public readonly copyFrom!: pulumi.Output<string | undefined>;
    public /*out*/ readonly date!: pulumi.Output<string>;
    public readonly deleteAfter!: pulumi.Output<number | undefined>;
    public readonly deleteAt!: pulumi.Output<string>;
    public readonly detectContentType!: pulumi.Output<boolean | undefined>;
    public readonly etag!: pulumi.Output<string>;
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly objectManifest!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly source!: pulumi.Output<string | undefined>;
    public /*out*/ readonly transId!: pulumi.Output<string>;

    /**
     * Create a ObjectstorageObjectV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectstorageObjectV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectstorageObjectV1Args | ObjectstorageObjectV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectstorageObjectV1State | undefined;
            resourceInputs["containerName"] = state ? state.containerName : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentDisposition"] = state ? state.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = state ? state.contentEncoding : undefined;
            resourceInputs["contentLength"] = state ? state.contentLength : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["copyFrom"] = state ? state.copyFrom : undefined;
            resourceInputs["date"] = state ? state.date : undefined;
            resourceInputs["deleteAfter"] = state ? state.deleteAfter : undefined;
            resourceInputs["deleteAt"] = state ? state.deleteAt : undefined;
            resourceInputs["detectContentType"] = state ? state.detectContentType : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectManifest"] = state ? state.objectManifest : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["transId"] = state ? state.transId : undefined;
        } else {
            const args = argsOrState as ObjectstorageObjectV1Args | undefined;
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            resourceInputs["containerName"] = args ? args.containerName : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentDisposition"] = args ? args.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = args ? args.contentEncoding : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["copyFrom"] = args ? args.copyFrom : undefined;
            resourceInputs["deleteAfter"] = args ? args.deleteAfter : undefined;
            resourceInputs["deleteAt"] = args ? args.deleteAt : undefined;
            resourceInputs["detectContentType"] = args ? args.detectContentType : undefined;
            resourceInputs["etag"] = args ? args.etag : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectManifest"] = args ? args.objectManifest : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["contentLength"] = undefined /*out*/;
            resourceInputs["date"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["transId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectstorageObjectV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectstorageObjectV1 resources.
 */
export interface ObjectstorageObjectV1State {
    containerName?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentDisposition?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    contentLength?: pulumi.Input<number>;
    contentType?: pulumi.Input<string>;
    copyFrom?: pulumi.Input<string>;
    date?: pulumi.Input<string>;
    deleteAfter?: pulumi.Input<number>;
    deleteAt?: pulumi.Input<string>;
    detectContentType?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    lastModified?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    objectManifest?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    transId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectstorageObjectV1 resource.
 */
export interface ObjectstorageObjectV1Args {
    containerName: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentDisposition?: pulumi.Input<string>;
    contentEncoding?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    copyFrom?: pulumi.Input<string>;
    deleteAfter?: pulumi.Input<number>;
    deleteAt?: pulumi.Input<string>;
    detectContentType?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    objectManifest?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
}
