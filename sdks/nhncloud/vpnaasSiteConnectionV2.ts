// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnaasSiteConnectionV2 extends pulumi.CustomResource {
    /**
     * Get an existing VpnaasSiteConnectionV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnaasSiteConnectionV2State, opts?: pulumi.CustomResourceOptions): VpnaasSiteConnectionV2 {
        return new VpnaasSiteConnectionV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/vpnaasSiteConnectionV2:VpnaasSiteConnectionV2';

    /**
     * Returns true if the given object is an instance of VpnaasSiteConnectionV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnaasSiteConnectionV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnaasSiteConnectionV2.__pulumiType;
    }

    public readonly adminStateUp!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dpds!: pulumi.Output<outputs.VpnaasSiteConnectionV2Dpd[] | undefined>;
    public readonly ikepolicyId!: pulumi.Output<string>;
    public readonly initiator!: pulumi.Output<string>;
    public readonly ipsecpolicyId!: pulumi.Output<string>;
    public readonly localEpGroupId!: pulumi.Output<string | undefined>;
    public readonly localId!: pulumi.Output<string | undefined>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly peerAddress!: pulumi.Output<string>;
    public readonly peerCidrs!: pulumi.Output<string[] | undefined>;
    public readonly peerEpGroupId!: pulumi.Output<string | undefined>;
    public readonly peerId!: pulumi.Output<string>;
    public readonly psk!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpnaasSiteConnectionV2Timeouts | undefined>;
    public readonly valueSpecs!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly vpnserviceId!: pulumi.Output<string>;

    /**
     * Create a VpnaasSiteConnectionV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnaasSiteConnectionV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnaasSiteConnectionV2Args | VpnaasSiteConnectionV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnaasSiteConnectionV2State | undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dpds"] = state ? state.dpds : undefined;
            resourceInputs["ikepolicyId"] = state ? state.ikepolicyId : undefined;
            resourceInputs["initiator"] = state ? state.initiator : undefined;
            resourceInputs["ipsecpolicyId"] = state ? state.ipsecpolicyId : undefined;
            resourceInputs["localEpGroupId"] = state ? state.localEpGroupId : undefined;
            resourceInputs["localId"] = state ? state.localId : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerAddress"] = state ? state.peerAddress : undefined;
            resourceInputs["peerCidrs"] = state ? state.peerCidrs : undefined;
            resourceInputs["peerEpGroupId"] = state ? state.peerEpGroupId : undefined;
            resourceInputs["peerId"] = state ? state.peerId : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
            resourceInputs["vpnserviceId"] = state ? state.vpnserviceId : undefined;
        } else {
            const args = argsOrState as VpnaasSiteConnectionV2Args | undefined;
            if ((!args || args.ikepolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ikepolicyId'");
            }
            if ((!args || args.ipsecpolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipsecpolicyId'");
            }
            if ((!args || args.peerAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAddress'");
            }
            if ((!args || args.peerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerId'");
            }
            if ((!args || args.psk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'psk'");
            }
            if ((!args || args.vpnserviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnserviceId'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dpds"] = args ? args.dpds : undefined;
            resourceInputs["ikepolicyId"] = args ? args.ikepolicyId : undefined;
            resourceInputs["initiator"] = args ? args.initiator : undefined;
            resourceInputs["ipsecpolicyId"] = args ? args.ipsecpolicyId : undefined;
            resourceInputs["localEpGroupId"] = args ? args.localEpGroupId : undefined;
            resourceInputs["localId"] = args ? args.localId : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerAddress"] = args ? args.peerAddress : undefined;
            resourceInputs["peerCidrs"] = args ? args.peerCidrs : undefined;
            resourceInputs["peerEpGroupId"] = args ? args.peerEpGroupId : undefined;
            resourceInputs["peerId"] = args ? args.peerId : undefined;
            resourceInputs["psk"] = args ? args.psk : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
            resourceInputs["vpnserviceId"] = args ? args.vpnserviceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnaasSiteConnectionV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnaasSiteConnectionV2 resources.
 */
export interface VpnaasSiteConnectionV2State {
    adminStateUp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dpds?: pulumi.Input<pulumi.Input<inputs.VpnaasSiteConnectionV2Dpd>[]>;
    ikepolicyId?: pulumi.Input<string>;
    initiator?: pulumi.Input<string>;
    ipsecpolicyId?: pulumi.Input<string>;
    localEpGroupId?: pulumi.Input<string>;
    localId?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    peerAddress?: pulumi.Input<string>;
    peerCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    peerEpGroupId?: pulumi.Input<string>;
    peerId?: pulumi.Input<string>;
    psk?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnaasSiteConnectionV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpnserviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnaasSiteConnectionV2 resource.
 */
export interface VpnaasSiteConnectionV2Args {
    adminStateUp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    dpds?: pulumi.Input<pulumi.Input<inputs.VpnaasSiteConnectionV2Dpd>[]>;
    ikepolicyId: pulumi.Input<string>;
    initiator?: pulumi.Input<string>;
    ipsecpolicyId: pulumi.Input<string>;
    localEpGroupId?: pulumi.Input<string>;
    localId?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    peerAddress: pulumi.Input<string>;
    peerCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    peerEpGroupId?: pulumi.Input<string>;
    peerId: pulumi.Input<string>;
    psk: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnaasSiteConnectionV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpnserviceId: pulumi.Input<string>;
}
