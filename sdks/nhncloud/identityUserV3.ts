// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityUserV3 extends pulumi.CustomResource {
    /**
     * Get an existing IdentityUserV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityUserV3State, opts?: pulumi.CustomResourceOptions): IdentityUserV3 {
        return new IdentityUserV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/identityUserV3:IdentityUserV3';

    /**
     * Returns true if the given object is an instance of IdentityUserV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityUserV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityUserV3.__pulumiType;
    }

    public readonly defaultProjectId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly domainId!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly extra!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly ignoreChangePasswordUponFirstUse!: pulumi.Output<boolean | undefined>;
    public readonly ignoreLockoutFailureAttempts!: pulumi.Output<boolean | undefined>;
    public readonly ignorePasswordExpiry!: pulumi.Output<boolean | undefined>;
    public readonly multiFactorAuthEnabled!: pulumi.Output<boolean | undefined>;
    public readonly multiFactorAuthRules!: pulumi.Output<outputs.IdentityUserV3MultiFactorAuthRule[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a IdentityUserV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IdentityUserV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityUserV3Args | IdentityUserV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityUserV3State | undefined;
            resourceInputs["defaultProjectId"] = state ? state.defaultProjectId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["extra"] = state ? state.extra : undefined;
            resourceInputs["ignoreChangePasswordUponFirstUse"] = state ? state.ignoreChangePasswordUponFirstUse : undefined;
            resourceInputs["ignoreLockoutFailureAttempts"] = state ? state.ignoreLockoutFailureAttempts : undefined;
            resourceInputs["ignorePasswordExpiry"] = state ? state.ignorePasswordExpiry : undefined;
            resourceInputs["multiFactorAuthEnabled"] = state ? state.multiFactorAuthEnabled : undefined;
            resourceInputs["multiFactorAuthRules"] = state ? state.multiFactorAuthRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as IdentityUserV3Args | undefined;
            resourceInputs["defaultProjectId"] = args ? args.defaultProjectId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["extra"] = args ? args.extra : undefined;
            resourceInputs["ignoreChangePasswordUponFirstUse"] = args ? args.ignoreChangePasswordUponFirstUse : undefined;
            resourceInputs["ignoreLockoutFailureAttempts"] = args ? args.ignoreLockoutFailureAttempts : undefined;
            resourceInputs["ignorePasswordExpiry"] = args ? args.ignorePasswordExpiry : undefined;
            resourceInputs["multiFactorAuthEnabled"] = args ? args.multiFactorAuthEnabled : undefined;
            resourceInputs["multiFactorAuthRules"] = args ? args.multiFactorAuthRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityUserV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityUserV3 resources.
 */
export interface IdentityUserV3State {
    defaultProjectId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    extra?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ignoreChangePasswordUponFirstUse?: pulumi.Input<boolean>;
    ignoreLockoutFailureAttempts?: pulumi.Input<boolean>;
    ignorePasswordExpiry?: pulumi.Input<boolean>;
    multiFactorAuthEnabled?: pulumi.Input<boolean>;
    multiFactorAuthRules?: pulumi.Input<pulumi.Input<inputs.IdentityUserV3MultiFactorAuthRule>[]>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityUserV3 resource.
 */
export interface IdentityUserV3Args {
    defaultProjectId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    extra?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ignoreChangePasswordUponFirstUse?: pulumi.Input<boolean>;
    ignoreLockoutFailureAttempts?: pulumi.Input<boolean>;
    ignorePasswordExpiry?: pulumi.Input<boolean>;
    multiFactorAuthEnabled?: pulumi.Input<boolean>;
    multiFactorAuthRules?: pulumi.Input<pulumi.Input<inputs.IdentityUserV3MultiFactorAuthRule>[]>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
