// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNetworkingVpcsubnetV2(args?: GetNetworkingVpcsubnetV2Args, opts?: pulumi.InvokeOptions): Promise<GetNetworkingVpcsubnetV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nhncloud:index/getNetworkingVpcsubnetV2:getNetworkingVpcsubnetV2", {
        "cidr": args.cidr,
        "id": args.id,
        "name": args.name,
        "region": args.region,
        "shared": args.shared,
        "tenantId": args.tenantId,
        "vpcId": args.vpcId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkingVpcsubnetV2.
 */
export interface GetNetworkingVpcsubnetV2Args {
    cidr?: string;
    id?: string;
    name?: string;
    region?: string;
    shared?: boolean;
    tenantId?: string;
    vpcId?: string;
}

/**
 * A collection of values returned by getNetworkingVpcsubnetV2.
 */
export interface GetNetworkingVpcsubnetV2Result {
    readonly availableIpCount: number;
    readonly cidr: string;
    readonly createTime: string;
    readonly external: boolean;
    readonly gateway: string;
    readonly id: string;
    readonly name: string;
    readonly region: string;
    readonly routes: outputs.GetNetworkingVpcsubnetV2Route[];
    readonly routingtableDefaultTable: boolean;
    readonly routingtableExplicit: boolean;
    readonly routingtableGatewayId: string;
    readonly routingtableId: string;
    readonly routingtableName: string;
    readonly shared: boolean;
    readonly state: string;
    readonly tenantId: string;
    readonly vpcCidrv4: string;
    readonly vpcId: string;
    readonly vpcName: string;
    readonly vpcShared: boolean;
    readonly vpcState: string;
}
export function getNetworkingVpcsubnetV2Output(args?: GetNetworkingVpcsubnetV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkingVpcsubnetV2Result> {
    return pulumi.output(args).apply((a: any) => getNetworkingVpcsubnetV2(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkingVpcsubnetV2.
 */
export interface GetNetworkingVpcsubnetV2OutputArgs {
    cidr?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shared?: pulumi.Input<boolean>;
    tenantId?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}
