// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbL7ruleV2 extends pulumi.CustomResource {
    /**
     * Get an existing LbL7ruleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbL7ruleV2State, opts?: pulumi.CustomResourceOptions): LbL7ruleV2 {
        return new LbL7ruleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/lbL7ruleV2:LbL7ruleV2';

    /**
     * Returns true if the given object is an instance of LbL7ruleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbL7ruleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbL7ruleV2.__pulumiType;
    }

    public readonly adminStateUp!: pulumi.Output<boolean | undefined>;
    public readonly compareType!: pulumi.Output<string>;
    public readonly invert!: pulumi.Output<boolean | undefined>;
    public readonly key!: pulumi.Output<string | undefined>;
    public readonly l7policyId!: pulumi.Output<string>;
    public /*out*/ readonly listenerId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbL7ruleV2Timeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a LbL7ruleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbL7ruleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbL7ruleV2Args | LbL7ruleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbL7ruleV2State | undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["compareType"] = state ? state.compareType : undefined;
            resourceInputs["invert"] = state ? state.invert : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["l7policyId"] = state ? state.l7policyId : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as LbL7ruleV2Args | undefined;
            if ((!args || args.compareType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compareType'");
            }
            if ((!args || args.l7policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'l7policyId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["compareType"] = args ? args.compareType : undefined;
            resourceInputs["invert"] = args ? args.invert : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["l7policyId"] = args ? args.l7policyId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["listenerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbL7ruleV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbL7ruleV2 resources.
 */
export interface LbL7ruleV2State {
    adminStateUp?: pulumi.Input<boolean>;
    compareType?: pulumi.Input<string>;
    invert?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    l7policyId?: pulumi.Input<string>;
    listenerId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbL7ruleV2Timeouts>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbL7ruleV2 resource.
 */
export interface LbL7ruleV2Args {
    adminStateUp?: pulumi.Input<boolean>;
    compareType: pulumi.Input<string>;
    invert?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    l7policyId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbL7ruleV2Timeouts>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
