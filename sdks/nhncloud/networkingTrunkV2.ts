// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkingTrunkV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingTrunkV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingTrunkV2State, opts?: pulumi.CustomResourceOptions): NetworkingTrunkV2 {
        return new NetworkingTrunkV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/networkingTrunkV2:NetworkingTrunkV2';

    /**
     * Returns true if the given object is an instance of NetworkingTrunkV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingTrunkV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingTrunkV2.__pulumiType;
    }

    public readonly adminStateUp!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly allTags!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly portId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly subPorts!: pulumi.Output<outputs.NetworkingTrunkV2SubPort[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkingTrunkV2Timeouts | undefined>;

    /**
     * Create a NetworkingTrunkV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingTrunkV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingTrunkV2Args | NetworkingTrunkV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingTrunkV2State | undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["allTags"] = state ? state.allTags : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portId"] = state ? state.portId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["subPorts"] = state ? state.subPorts : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkingTrunkV2Args | undefined;
            if ((!args || args.portId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portId'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portId"] = args ? args.portId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subPorts"] = args ? args.subPorts : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["allTags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingTrunkV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkingTrunkV2 resources.
 */
export interface NetworkingTrunkV2State {
    adminStateUp?: pulumi.Input<boolean>;
    allTags?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    subPorts?: pulumi.Input<pulumi.Input<inputs.NetworkingTrunkV2SubPort>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingTrunkV2Timeouts>;
}

/**
 * The set of arguments for constructing a NetworkingTrunkV2 resource.
 */
export interface NetworkingTrunkV2Args {
    adminStateUp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    portId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    subPorts?: pulumi.Input<pulumi.Input<inputs.NetworkingTrunkV2SubPort>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingTrunkV2Timeouts>;
}
