// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerinfraClustertemplateV1 extends pulumi.CustomResource {
    /**
     * Get an existing ContainerinfraClustertemplateV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerinfraClustertemplateV1State, opts?: pulumi.CustomResourceOptions): ContainerinfraClustertemplateV1 {
        return new ContainerinfraClustertemplateV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/containerinfraClustertemplateV1:ContainerinfraClustertemplateV1';

    /**
     * Returns true if the given object is an instance of ContainerinfraClustertemplateV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerinfraClustertemplateV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerinfraClustertemplateV1.__pulumiType;
    }

    public readonly apiserverPort!: pulumi.Output<number | undefined>;
    public readonly clusterDistro!: pulumi.Output<string>;
    public readonly coe!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly dnsNameserver!: pulumi.Output<string | undefined>;
    public readonly dockerStorageDriver!: pulumi.Output<string | undefined>;
    public readonly dockerVolumeSize!: pulumi.Output<number | undefined>;
    public readonly externalNetworkId!: pulumi.Output<string | undefined>;
    public readonly fixedNetwork!: pulumi.Output<string | undefined>;
    public readonly fixedSubnet!: pulumi.Output<string | undefined>;
    public readonly flavor!: pulumi.Output<string | undefined>;
    public readonly floatingIpEnabled!: pulumi.Output<boolean | undefined>;
    public readonly hidden!: pulumi.Output<boolean | undefined>;
    public readonly httpProxy!: pulumi.Output<string | undefined>;
    public readonly httpsProxy!: pulumi.Output<string | undefined>;
    public readonly image!: pulumi.Output<string>;
    public readonly insecureRegistry!: pulumi.Output<string | undefined>;
    public readonly keypairId!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly masterFlavor!: pulumi.Output<string | undefined>;
    public readonly masterLbEnabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkDriver!: pulumi.Output<string>;
    public readonly noProxy!: pulumi.Output<string | undefined>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public readonly public!: pulumi.Output<boolean | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly registryEnabled!: pulumi.Output<boolean | undefined>;
    public readonly serverType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerinfraClustertemplateV1Timeouts | undefined>;
    public readonly tlsDisabled!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public /*out*/ readonly userId!: pulumi.Output<string>;
    public readonly volumeDriver!: pulumi.Output<string | undefined>;

    /**
     * Create a ContainerinfraClustertemplateV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerinfraClustertemplateV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerinfraClustertemplateV1Args | ContainerinfraClustertemplateV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerinfraClustertemplateV1State | undefined;
            resourceInputs["apiserverPort"] = state ? state.apiserverPort : undefined;
            resourceInputs["clusterDistro"] = state ? state.clusterDistro : undefined;
            resourceInputs["coe"] = state ? state.coe : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dnsNameserver"] = state ? state.dnsNameserver : undefined;
            resourceInputs["dockerStorageDriver"] = state ? state.dockerStorageDriver : undefined;
            resourceInputs["dockerVolumeSize"] = state ? state.dockerVolumeSize : undefined;
            resourceInputs["externalNetworkId"] = state ? state.externalNetworkId : undefined;
            resourceInputs["fixedNetwork"] = state ? state.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = state ? state.fixedSubnet : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = state ? state.floatingIpEnabled : undefined;
            resourceInputs["hidden"] = state ? state.hidden : undefined;
            resourceInputs["httpProxy"] = state ? state.httpProxy : undefined;
            resourceInputs["httpsProxy"] = state ? state.httpsProxy : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["insecureRegistry"] = state ? state.insecureRegistry : undefined;
            resourceInputs["keypairId"] = state ? state.keypairId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["masterFlavor"] = state ? state.masterFlavor : undefined;
            resourceInputs["masterLbEnabled"] = state ? state.masterLbEnabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkDriver"] = state ? state.networkDriver : undefined;
            resourceInputs["noProxy"] = state ? state.noProxy : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["registryEnabled"] = state ? state.registryEnabled : undefined;
            resourceInputs["serverType"] = state ? state.serverType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsDisabled"] = state ? state.tlsDisabled : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["volumeDriver"] = state ? state.volumeDriver : undefined;
        } else {
            const args = argsOrState as ContainerinfraClustertemplateV1Args | undefined;
            if ((!args || args.coe === undefined) && !opts.urn) {
                throw new Error("Missing required property 'coe'");
            }
            if ((!args || args.image === undefined) && !opts.urn) {
                throw new Error("Missing required property 'image'");
            }
            resourceInputs["apiserverPort"] = args ? args.apiserverPort : undefined;
            resourceInputs["clusterDistro"] = args ? args.clusterDistro : undefined;
            resourceInputs["coe"] = args ? args.coe : undefined;
            resourceInputs["dnsNameserver"] = args ? args.dnsNameserver : undefined;
            resourceInputs["dockerStorageDriver"] = args ? args.dockerStorageDriver : undefined;
            resourceInputs["dockerVolumeSize"] = args ? args.dockerVolumeSize : undefined;
            resourceInputs["externalNetworkId"] = args ? args.externalNetworkId : undefined;
            resourceInputs["fixedNetwork"] = args ? args.fixedNetwork : undefined;
            resourceInputs["fixedSubnet"] = args ? args.fixedSubnet : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["floatingIpEnabled"] = args ? args.floatingIpEnabled : undefined;
            resourceInputs["hidden"] = args ? args.hidden : undefined;
            resourceInputs["httpProxy"] = args ? args.httpProxy : undefined;
            resourceInputs["httpsProxy"] = args ? args.httpsProxy : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["insecureRegistry"] = args ? args.insecureRegistry : undefined;
            resourceInputs["keypairId"] = args ? args.keypairId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["masterFlavor"] = args ? args.masterFlavor : undefined;
            resourceInputs["masterLbEnabled"] = args ? args.masterLbEnabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkDriver"] = args ? args.networkDriver : undefined;
            resourceInputs["noProxy"] = args ? args.noProxy : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["registryEnabled"] = args ? args.registryEnabled : undefined;
            resourceInputs["serverType"] = args ? args.serverType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsDisabled"] = args ? args.tlsDisabled : undefined;
            resourceInputs["volumeDriver"] = args ? args.volumeDriver : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerinfraClustertemplateV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerinfraClustertemplateV1 resources.
 */
export interface ContainerinfraClustertemplateV1State {
    apiserverPort?: pulumi.Input<number>;
    clusterDistro?: pulumi.Input<string>;
    coe?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    dnsNameserver?: pulumi.Input<string>;
    dockerStorageDriver?: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    externalNetworkId?: pulumi.Input<string>;
    fixedNetwork?: pulumi.Input<string>;
    fixedSubnet?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    floatingIpEnabled?: pulumi.Input<boolean>;
    hidden?: pulumi.Input<boolean>;
    httpProxy?: pulumi.Input<string>;
    httpsProxy?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    insecureRegistry?: pulumi.Input<string>;
    keypairId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    masterFlavor?: pulumi.Input<string>;
    masterLbEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkDriver?: pulumi.Input<string>;
    noProxy?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    public?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    registryEnabled?: pulumi.Input<boolean>;
    serverType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerinfraClustertemplateV1Timeouts>;
    tlsDisabled?: pulumi.Input<boolean>;
    updatedAt?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    volumeDriver?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerinfraClustertemplateV1 resource.
 */
export interface ContainerinfraClustertemplateV1Args {
    apiserverPort?: pulumi.Input<number>;
    clusterDistro?: pulumi.Input<string>;
    coe: pulumi.Input<string>;
    dnsNameserver?: pulumi.Input<string>;
    dockerStorageDriver?: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    externalNetworkId?: pulumi.Input<string>;
    fixedNetwork?: pulumi.Input<string>;
    fixedSubnet?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    floatingIpEnabled?: pulumi.Input<boolean>;
    hidden?: pulumi.Input<boolean>;
    httpProxy?: pulumi.Input<string>;
    httpsProxy?: pulumi.Input<string>;
    image: pulumi.Input<string>;
    insecureRegistry?: pulumi.Input<string>;
    keypairId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    masterFlavor?: pulumi.Input<string>;
    masterLbEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkDriver?: pulumi.Input<string>;
    noProxy?: pulumi.Input<string>;
    public?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    registryEnabled?: pulumi.Input<boolean>;
    serverType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerinfraClustertemplateV1Timeouts>;
    tlsDisabled?: pulumi.Input<boolean>;
    volumeDriver?: pulumi.Input<string>;
}
