// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeFloatingipAssociateV2 extends pulumi.CustomResource {
    /**
     * Get an existing ComputeFloatingipAssociateV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeFloatingipAssociateV2State, opts?: pulumi.CustomResourceOptions): ComputeFloatingipAssociateV2 {
        return new ComputeFloatingipAssociateV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/computeFloatingipAssociateV2:ComputeFloatingipAssociateV2';

    /**
     * Returns true if the given object is an instance of ComputeFloatingipAssociateV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeFloatingipAssociateV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeFloatingipAssociateV2.__pulumiType;
    }

    public readonly fixedIp!: pulumi.Output<string | undefined>;
    public readonly floatingIp!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeFloatingipAssociateV2Timeouts | undefined>;
    public readonly waitUntilAssociated!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ComputeFloatingipAssociateV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeFloatingipAssociateV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeFloatingipAssociateV2Args | ComputeFloatingipAssociateV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeFloatingipAssociateV2State | undefined;
            resourceInputs["fixedIp"] = state ? state.fixedIp : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitUntilAssociated"] = state ? state.waitUntilAssociated : undefined;
        } else {
            const args = argsOrState as ComputeFloatingipAssociateV2Args | undefined;
            if ((!args || args.floatingIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'floatingIp'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["fixedIp"] = args ? args.fixedIp : undefined;
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitUntilAssociated"] = args ? args.waitUntilAssociated : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeFloatingipAssociateV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeFloatingipAssociateV2 resources.
 */
export interface ComputeFloatingipAssociateV2State {
    fixedIp?: pulumi.Input<string>;
    floatingIp?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeFloatingipAssociateV2Timeouts>;
    waitUntilAssociated?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ComputeFloatingipAssociateV2 resource.
 */
export interface ComputeFloatingipAssociateV2Args {
    fixedIp?: pulumi.Input<string>;
    floatingIp: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeFloatingipAssociateV2Timeouts>;
    waitUntilAssociated?: pulumi.Input<boolean>;
}
