// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SharedfilesystemSecurityserviceV2 extends pulumi.CustomResource {
    /**
     * Get an existing SharedfilesystemSecurityserviceV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedfilesystemSecurityserviceV2State, opts?: pulumi.CustomResourceOptions): SharedfilesystemSecurityserviceV2 {
        return new SharedfilesystemSecurityserviceV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/sharedfilesystemSecurityserviceV2:SharedfilesystemSecurityserviceV2';

    /**
     * Returns true if the given object is an instance of SharedfilesystemSecurityserviceV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedfilesystemSecurityserviceV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedfilesystemSecurityserviceV2.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dnsIp!: pulumi.Output<string | undefined>;
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ou!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly server!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.SharedfilesystemSecurityserviceV2Timeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a SharedfilesystemSecurityserviceV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedfilesystemSecurityserviceV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedfilesystemSecurityserviceV2Args | SharedfilesystemSecurityserviceV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedfilesystemSecurityserviceV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsIp"] = state ? state.dnsIp : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ou"] = state ? state.ou : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as SharedfilesystemSecurityserviceV2Args | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsIp"] = args ? args.dnsIp : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ou"] = args ? args.ou : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["projectId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SharedfilesystemSecurityserviceV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SharedfilesystemSecurityserviceV2 resources.
 */
export interface SharedfilesystemSecurityserviceV2State {
    description?: pulumi.Input<string>;
    dnsIp?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ou?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SharedfilesystemSecurityserviceV2Timeouts>;
    type?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SharedfilesystemSecurityserviceV2 resource.
 */
export interface SharedfilesystemSecurityserviceV2Args {
    description?: pulumi.Input<string>;
    dnsIp?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ou?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    server?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SharedfilesystemSecurityserviceV2Timeouts>;
    type: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}
