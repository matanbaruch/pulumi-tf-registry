// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbListenerV2 extends pulumi.CustomResource {
    /**
     * Get an existing LbListenerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbListenerV2State, opts?: pulumi.CustomResourceOptions): LbListenerV2 {
        return new LbListenerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/lbListenerV2:LbListenerV2';

    /**
     * Returns true if the given object is an instance of LbListenerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbListenerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbListenerV2.__pulumiType;
    }

    public readonly adminStateUp!: pulumi.Output<boolean | undefined>;
    public readonly allowedCidrs!: pulumi.Output<string[] | undefined>;
    public readonly connectionLimit!: pulumi.Output<number>;
    public readonly defaultPoolId!: pulumi.Output<string>;
    public readonly defaultTlsContainerRef!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly insertHeaders!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly loadbalancerId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly protocolPort!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly sniContainerRefs!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeoutClientData!: pulumi.Output<number>;
    public readonly timeoutMemberConnect!: pulumi.Output<number>;
    public readonly timeoutMemberData!: pulumi.Output<number>;
    public readonly timeoutTcpInspect!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.LbListenerV2Timeouts | undefined>;

    /**
     * Create a LbListenerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbListenerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbListenerV2Args | LbListenerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbListenerV2State | undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["allowedCidrs"] = state ? state.allowedCidrs : undefined;
            resourceInputs["connectionLimit"] = state ? state.connectionLimit : undefined;
            resourceInputs["defaultPoolId"] = state ? state.defaultPoolId : undefined;
            resourceInputs["defaultTlsContainerRef"] = state ? state.defaultTlsContainerRef : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["insertHeaders"] = state ? state.insertHeaders : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["protocolPort"] = state ? state.protocolPort : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sniContainerRefs"] = state ? state.sniContainerRefs : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeoutClientData"] = state ? state.timeoutClientData : undefined;
            resourceInputs["timeoutMemberConnect"] = state ? state.timeoutMemberConnect : undefined;
            resourceInputs["timeoutMemberData"] = state ? state.timeoutMemberData : undefined;
            resourceInputs["timeoutTcpInspect"] = state ? state.timeoutTcpInspect : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LbListenerV2Args | undefined;
            if ((!args || args.loadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.protocolPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolPort'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["allowedCidrs"] = args ? args.allowedCidrs : undefined;
            resourceInputs["connectionLimit"] = args ? args.connectionLimit : undefined;
            resourceInputs["defaultPoolId"] = args ? args.defaultPoolId : undefined;
            resourceInputs["defaultTlsContainerRef"] = args ? args.defaultTlsContainerRef : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["insertHeaders"] = args ? args.insertHeaders : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["protocolPort"] = args ? args.protocolPort : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["sniContainerRefs"] = args ? args.sniContainerRefs : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeoutClientData"] = args ? args.timeoutClientData : undefined;
            resourceInputs["timeoutMemberConnect"] = args ? args.timeoutMemberConnect : undefined;
            resourceInputs["timeoutMemberData"] = args ? args.timeoutMemberData : undefined;
            resourceInputs["timeoutTcpInspect"] = args ? args.timeoutTcpInspect : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbListenerV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbListenerV2 resources.
 */
export interface LbListenerV2State {
    adminStateUp?: pulumi.Input<boolean>;
    allowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    connectionLimit?: pulumi.Input<number>;
    defaultPoolId?: pulumi.Input<string>;
    defaultTlsContainerRef?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    insertHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadbalancerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    protocolPort?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    sniContainerRefs?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
    timeoutClientData?: pulumi.Input<number>;
    timeoutMemberConnect?: pulumi.Input<number>;
    timeoutMemberData?: pulumi.Input<number>;
    timeoutTcpInspect?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LbListenerV2Timeouts>;
}

/**
 * The set of arguments for constructing a LbListenerV2 resource.
 */
export interface LbListenerV2Args {
    adminStateUp?: pulumi.Input<boolean>;
    allowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    connectionLimit?: pulumi.Input<number>;
    defaultPoolId?: pulumi.Input<string>;
    defaultTlsContainerRef?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    insertHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadbalancerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    protocolPort: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    sniContainerRefs?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
    timeoutClientData?: pulumi.Input<number>;
    timeoutMemberConnect?: pulumi.Input<number>;
    timeoutMemberData?: pulumi.Input<number>;
    timeoutTcpInspect?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LbListenerV2Timeouts>;
}
