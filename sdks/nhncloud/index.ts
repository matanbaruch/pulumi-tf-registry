// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BlockstorageQosAssociationV3Args, BlockstorageQosAssociationV3State } from "./blockstorageQosAssociationV3";
export type BlockstorageQosAssociationV3 = import("./blockstorageQosAssociationV3").BlockstorageQosAssociationV3;
export const BlockstorageQosAssociationV3: typeof import("./blockstorageQosAssociationV3").BlockstorageQosAssociationV3 = null as any;
utilities.lazyLoad(exports, ["BlockstorageQosAssociationV3"], () => require("./blockstorageQosAssociationV3"));

export { BlockstorageQosV3Args, BlockstorageQosV3State } from "./blockstorageQosV3";
export type BlockstorageQosV3 = import("./blockstorageQosV3").BlockstorageQosV3;
export const BlockstorageQosV3: typeof import("./blockstorageQosV3").BlockstorageQosV3 = null as any;
utilities.lazyLoad(exports, ["BlockstorageQosV3"], () => require("./blockstorageQosV3"));

export { BlockstorageQuotasetV2Args, BlockstorageQuotasetV2State } from "./blockstorageQuotasetV2";
export type BlockstorageQuotasetV2 = import("./blockstorageQuotasetV2").BlockstorageQuotasetV2;
export const BlockstorageQuotasetV2: typeof import("./blockstorageQuotasetV2").BlockstorageQuotasetV2 = null as any;
utilities.lazyLoad(exports, ["BlockstorageQuotasetV2"], () => require("./blockstorageQuotasetV2"));

export { BlockstorageQuotasetV3Args, BlockstorageQuotasetV3State } from "./blockstorageQuotasetV3";
export type BlockstorageQuotasetV3 = import("./blockstorageQuotasetV3").BlockstorageQuotasetV3;
export const BlockstorageQuotasetV3: typeof import("./blockstorageQuotasetV3").BlockstorageQuotasetV3 = null as any;
utilities.lazyLoad(exports, ["BlockstorageQuotasetV3"], () => require("./blockstorageQuotasetV3"));

export { BlockstorageVolumeAttachV2Args, BlockstorageVolumeAttachV2State } from "./blockstorageVolumeAttachV2";
export type BlockstorageVolumeAttachV2 = import("./blockstorageVolumeAttachV2").BlockstorageVolumeAttachV2;
export const BlockstorageVolumeAttachV2: typeof import("./blockstorageVolumeAttachV2").BlockstorageVolumeAttachV2 = null as any;
utilities.lazyLoad(exports, ["BlockstorageVolumeAttachV2"], () => require("./blockstorageVolumeAttachV2"));

export { BlockstorageVolumeAttachV3Args, BlockstorageVolumeAttachV3State } from "./blockstorageVolumeAttachV3";
export type BlockstorageVolumeAttachV3 = import("./blockstorageVolumeAttachV3").BlockstorageVolumeAttachV3;
export const BlockstorageVolumeAttachV3: typeof import("./blockstorageVolumeAttachV3").BlockstorageVolumeAttachV3 = null as any;
utilities.lazyLoad(exports, ["BlockstorageVolumeAttachV3"], () => require("./blockstorageVolumeAttachV3"));

export { BlockstorageVolumeTypeAccessV3Args, BlockstorageVolumeTypeAccessV3State } from "./blockstorageVolumeTypeAccessV3";
export type BlockstorageVolumeTypeAccessV3 = import("./blockstorageVolumeTypeAccessV3").BlockstorageVolumeTypeAccessV3;
export const BlockstorageVolumeTypeAccessV3: typeof import("./blockstorageVolumeTypeAccessV3").BlockstorageVolumeTypeAccessV3 = null as any;
utilities.lazyLoad(exports, ["BlockstorageVolumeTypeAccessV3"], () => require("./blockstorageVolumeTypeAccessV3"));

export { BlockstorageVolumeTypeV3Args, BlockstorageVolumeTypeV3State } from "./blockstorageVolumeTypeV3";
export type BlockstorageVolumeTypeV3 = import("./blockstorageVolumeTypeV3").BlockstorageVolumeTypeV3;
export const BlockstorageVolumeTypeV3: typeof import("./blockstorageVolumeTypeV3").BlockstorageVolumeTypeV3 = null as any;
utilities.lazyLoad(exports, ["BlockstorageVolumeTypeV3"], () => require("./blockstorageVolumeTypeV3"));

export { BlockstorageVolumeV1Args, BlockstorageVolumeV1State } from "./blockstorageVolumeV1";
export type BlockstorageVolumeV1 = import("./blockstorageVolumeV1").BlockstorageVolumeV1;
export const BlockstorageVolumeV1: typeof import("./blockstorageVolumeV1").BlockstorageVolumeV1 = null as any;
utilities.lazyLoad(exports, ["BlockstorageVolumeV1"], () => require("./blockstorageVolumeV1"));

export { BlockstorageVolumeV2Args, BlockstorageVolumeV2State } from "./blockstorageVolumeV2";
export type BlockstorageVolumeV2 = import("./blockstorageVolumeV2").BlockstorageVolumeV2;
export const BlockstorageVolumeV2: typeof import("./blockstorageVolumeV2").BlockstorageVolumeV2 = null as any;
utilities.lazyLoad(exports, ["BlockstorageVolumeV2"], () => require("./blockstorageVolumeV2"));

export { BlockstorageVolumeV3Args, BlockstorageVolumeV3State } from "./blockstorageVolumeV3";
export type BlockstorageVolumeV3 = import("./blockstorageVolumeV3").BlockstorageVolumeV3;
export const BlockstorageVolumeV3: typeof import("./blockstorageVolumeV3").BlockstorageVolumeV3 = null as any;
utilities.lazyLoad(exports, ["BlockstorageVolumeV3"], () => require("./blockstorageVolumeV3"));

export { ComputeAggregateV2Args, ComputeAggregateV2State } from "./computeAggregateV2";
export type ComputeAggregateV2 = import("./computeAggregateV2").ComputeAggregateV2;
export const ComputeAggregateV2: typeof import("./computeAggregateV2").ComputeAggregateV2 = null as any;
utilities.lazyLoad(exports, ["ComputeAggregateV2"], () => require("./computeAggregateV2"));

export { ComputeFlavorAccessV2Args, ComputeFlavorAccessV2State } from "./computeFlavorAccessV2";
export type ComputeFlavorAccessV2 = import("./computeFlavorAccessV2").ComputeFlavorAccessV2;
export const ComputeFlavorAccessV2: typeof import("./computeFlavorAccessV2").ComputeFlavorAccessV2 = null as any;
utilities.lazyLoad(exports, ["ComputeFlavorAccessV2"], () => require("./computeFlavorAccessV2"));

export { ComputeFlavorV2Args, ComputeFlavorV2State } from "./computeFlavorV2";
export type ComputeFlavorV2 = import("./computeFlavorV2").ComputeFlavorV2;
export const ComputeFlavorV2: typeof import("./computeFlavorV2").ComputeFlavorV2 = null as any;
utilities.lazyLoad(exports, ["ComputeFlavorV2"], () => require("./computeFlavorV2"));

export { ComputeFloatingipAssociateV2Args, ComputeFloatingipAssociateV2State } from "./computeFloatingipAssociateV2";
export type ComputeFloatingipAssociateV2 = import("./computeFloatingipAssociateV2").ComputeFloatingipAssociateV2;
export const ComputeFloatingipAssociateV2: typeof import("./computeFloatingipAssociateV2").ComputeFloatingipAssociateV2 = null as any;
utilities.lazyLoad(exports, ["ComputeFloatingipAssociateV2"], () => require("./computeFloatingipAssociateV2"));

export { ComputeFloatingipV2Args, ComputeFloatingipV2State } from "./computeFloatingipV2";
export type ComputeFloatingipV2 = import("./computeFloatingipV2").ComputeFloatingipV2;
export const ComputeFloatingipV2: typeof import("./computeFloatingipV2").ComputeFloatingipV2 = null as any;
utilities.lazyLoad(exports, ["ComputeFloatingipV2"], () => require("./computeFloatingipV2"));

export { ComputeInstanceV2Args, ComputeInstanceV2State } from "./computeInstanceV2";
export type ComputeInstanceV2 = import("./computeInstanceV2").ComputeInstanceV2;
export const ComputeInstanceV2: typeof import("./computeInstanceV2").ComputeInstanceV2 = null as any;
utilities.lazyLoad(exports, ["ComputeInstanceV2"], () => require("./computeInstanceV2"));

export { ComputeInterfaceAttachV2Args, ComputeInterfaceAttachV2State } from "./computeInterfaceAttachV2";
export type ComputeInterfaceAttachV2 = import("./computeInterfaceAttachV2").ComputeInterfaceAttachV2;
export const ComputeInterfaceAttachV2: typeof import("./computeInterfaceAttachV2").ComputeInterfaceAttachV2 = null as any;
utilities.lazyLoad(exports, ["ComputeInterfaceAttachV2"], () => require("./computeInterfaceAttachV2"));

export { ComputeKeypairV2Args, ComputeKeypairV2State } from "./computeKeypairV2";
export type ComputeKeypairV2 = import("./computeKeypairV2").ComputeKeypairV2;
export const ComputeKeypairV2: typeof import("./computeKeypairV2").ComputeKeypairV2 = null as any;
utilities.lazyLoad(exports, ["ComputeKeypairV2"], () => require("./computeKeypairV2"));

export { ComputeQuotasetV2Args, ComputeQuotasetV2State } from "./computeQuotasetV2";
export type ComputeQuotasetV2 = import("./computeQuotasetV2").ComputeQuotasetV2;
export const ComputeQuotasetV2: typeof import("./computeQuotasetV2").ComputeQuotasetV2 = null as any;
utilities.lazyLoad(exports, ["ComputeQuotasetV2"], () => require("./computeQuotasetV2"));

export { ComputeSecgroupV2Args, ComputeSecgroupV2State } from "./computeSecgroupV2";
export type ComputeSecgroupV2 = import("./computeSecgroupV2").ComputeSecgroupV2;
export const ComputeSecgroupV2: typeof import("./computeSecgroupV2").ComputeSecgroupV2 = null as any;
utilities.lazyLoad(exports, ["ComputeSecgroupV2"], () => require("./computeSecgroupV2"));

export { ComputeServergroupV2Args, ComputeServergroupV2State } from "./computeServergroupV2";
export type ComputeServergroupV2 = import("./computeServergroupV2").ComputeServergroupV2;
export const ComputeServergroupV2: typeof import("./computeServergroupV2").ComputeServergroupV2 = null as any;
utilities.lazyLoad(exports, ["ComputeServergroupV2"], () => require("./computeServergroupV2"));

export { ComputeVolumeAttachV2Args, ComputeVolumeAttachV2State } from "./computeVolumeAttachV2";
export type ComputeVolumeAttachV2 = import("./computeVolumeAttachV2").ComputeVolumeAttachV2;
export const ComputeVolumeAttachV2: typeof import("./computeVolumeAttachV2").ComputeVolumeAttachV2 = null as any;
utilities.lazyLoad(exports, ["ComputeVolumeAttachV2"], () => require("./computeVolumeAttachV2"));

export { ContainerinfraClusterV1Args, ContainerinfraClusterV1State } from "./containerinfraClusterV1";
export type ContainerinfraClusterV1 = import("./containerinfraClusterV1").ContainerinfraClusterV1;
export const ContainerinfraClusterV1: typeof import("./containerinfraClusterV1").ContainerinfraClusterV1 = null as any;
utilities.lazyLoad(exports, ["ContainerinfraClusterV1"], () => require("./containerinfraClusterV1"));

export { ContainerinfraClustertemplateV1Args, ContainerinfraClustertemplateV1State } from "./containerinfraClustertemplateV1";
export type ContainerinfraClustertemplateV1 = import("./containerinfraClustertemplateV1").ContainerinfraClustertemplateV1;
export const ContainerinfraClustertemplateV1: typeof import("./containerinfraClustertemplateV1").ContainerinfraClustertemplateV1 = null as any;
utilities.lazyLoad(exports, ["ContainerinfraClustertemplateV1"], () => require("./containerinfraClustertemplateV1"));

export { ContainerinfraNodegroupV1Args, ContainerinfraNodegroupV1State } from "./containerinfraNodegroupV1";
export type ContainerinfraNodegroupV1 = import("./containerinfraNodegroupV1").ContainerinfraNodegroupV1;
export const ContainerinfraNodegroupV1: typeof import("./containerinfraNodegroupV1").ContainerinfraNodegroupV1 = null as any;
utilities.lazyLoad(exports, ["ContainerinfraNodegroupV1"], () => require("./containerinfraNodegroupV1"));

export { DbConfigurationV1Args, DbConfigurationV1State } from "./dbConfigurationV1";
export type DbConfigurationV1 = import("./dbConfigurationV1").DbConfigurationV1;
export const DbConfigurationV1: typeof import("./dbConfigurationV1").DbConfigurationV1 = null as any;
utilities.lazyLoad(exports, ["DbConfigurationV1"], () => require("./dbConfigurationV1"));

export { DbDatabaseV1Args, DbDatabaseV1State } from "./dbDatabaseV1";
export type DbDatabaseV1 = import("./dbDatabaseV1").DbDatabaseV1;
export const DbDatabaseV1: typeof import("./dbDatabaseV1").DbDatabaseV1 = null as any;
utilities.lazyLoad(exports, ["DbDatabaseV1"], () => require("./dbDatabaseV1"));

export { DbInstanceV1Args, DbInstanceV1State } from "./dbInstanceV1";
export type DbInstanceV1 = import("./dbInstanceV1").DbInstanceV1;
export const DbInstanceV1: typeof import("./dbInstanceV1").DbInstanceV1 = null as any;
utilities.lazyLoad(exports, ["DbInstanceV1"], () => require("./dbInstanceV1"));

export { DbUserV1Args, DbUserV1State } from "./dbUserV1";
export type DbUserV1 = import("./dbUserV1").DbUserV1;
export const DbUserV1: typeof import("./dbUserV1").DbUserV1 = null as any;
utilities.lazyLoad(exports, ["DbUserV1"], () => require("./dbUserV1"));

export { DnsRecordsetV2Args, DnsRecordsetV2State } from "./dnsRecordsetV2";
export type DnsRecordsetV2 = import("./dnsRecordsetV2").DnsRecordsetV2;
export const DnsRecordsetV2: typeof import("./dnsRecordsetV2").DnsRecordsetV2 = null as any;
utilities.lazyLoad(exports, ["DnsRecordsetV2"], () => require("./dnsRecordsetV2"));

export { DnsTransferAcceptV2Args, DnsTransferAcceptV2State } from "./dnsTransferAcceptV2";
export type DnsTransferAcceptV2 = import("./dnsTransferAcceptV2").DnsTransferAcceptV2;
export const DnsTransferAcceptV2: typeof import("./dnsTransferAcceptV2").DnsTransferAcceptV2 = null as any;
utilities.lazyLoad(exports, ["DnsTransferAcceptV2"], () => require("./dnsTransferAcceptV2"));

export { DnsTransferRequestV2Args, DnsTransferRequestV2State } from "./dnsTransferRequestV2";
export type DnsTransferRequestV2 = import("./dnsTransferRequestV2").DnsTransferRequestV2;
export const DnsTransferRequestV2: typeof import("./dnsTransferRequestV2").DnsTransferRequestV2 = null as any;
utilities.lazyLoad(exports, ["DnsTransferRequestV2"], () => require("./dnsTransferRequestV2"));

export { DnsZoneV2Args, DnsZoneV2State } from "./dnsZoneV2";
export type DnsZoneV2 = import("./dnsZoneV2").DnsZoneV2;
export const DnsZoneV2: typeof import("./dnsZoneV2").DnsZoneV2 = null as any;
utilities.lazyLoad(exports, ["DnsZoneV2"], () => require("./dnsZoneV2"));

export { FwFirewallV1Args, FwFirewallV1State } from "./fwFirewallV1";
export type FwFirewallV1 = import("./fwFirewallV1").FwFirewallV1;
export const FwFirewallV1: typeof import("./fwFirewallV1").FwFirewallV1 = null as any;
utilities.lazyLoad(exports, ["FwFirewallV1"], () => require("./fwFirewallV1"));

export { FwPolicyV1Args, FwPolicyV1State } from "./fwPolicyV1";
export type FwPolicyV1 = import("./fwPolicyV1").FwPolicyV1;
export const FwPolicyV1: typeof import("./fwPolicyV1").FwPolicyV1 = null as any;
utilities.lazyLoad(exports, ["FwPolicyV1"], () => require("./fwPolicyV1"));

export { FwRuleV1Args, FwRuleV1State } from "./fwRuleV1";
export type FwRuleV1 = import("./fwRuleV1").FwRuleV1;
export const FwRuleV1: typeof import("./fwRuleV1").FwRuleV1 = null as any;
utilities.lazyLoad(exports, ["FwRuleV1"], () => require("./fwRuleV1"));

export { GetBlockstorageAvailabilityZonesV3Args, GetBlockstorageAvailabilityZonesV3Result, GetBlockstorageAvailabilityZonesV3OutputArgs } from "./getBlockstorageAvailabilityZonesV3";
export const getBlockstorageAvailabilityZonesV3: typeof import("./getBlockstorageAvailabilityZonesV3").getBlockstorageAvailabilityZonesV3 = null as any;
export const getBlockstorageAvailabilityZonesV3Output: typeof import("./getBlockstorageAvailabilityZonesV3").getBlockstorageAvailabilityZonesV3Output = null as any;
utilities.lazyLoad(exports, ["getBlockstorageAvailabilityZonesV3","getBlockstorageAvailabilityZonesV3Output"], () => require("./getBlockstorageAvailabilityZonesV3"));

export { GetBlockstorageQuotasetV3Args, GetBlockstorageQuotasetV3Result, GetBlockstorageQuotasetV3OutputArgs } from "./getBlockstorageQuotasetV3";
export const getBlockstorageQuotasetV3: typeof import("./getBlockstorageQuotasetV3").getBlockstorageQuotasetV3 = null as any;
export const getBlockstorageQuotasetV3Output: typeof import("./getBlockstorageQuotasetV3").getBlockstorageQuotasetV3Output = null as any;
utilities.lazyLoad(exports, ["getBlockstorageQuotasetV3","getBlockstorageQuotasetV3Output"], () => require("./getBlockstorageQuotasetV3"));

export { GetBlockstorageSnapshotV2Args, GetBlockstorageSnapshotV2Result, GetBlockstorageSnapshotV2OutputArgs } from "./getBlockstorageSnapshotV2";
export const getBlockstorageSnapshotV2: typeof import("./getBlockstorageSnapshotV2").getBlockstorageSnapshotV2 = null as any;
export const getBlockstorageSnapshotV2Output: typeof import("./getBlockstorageSnapshotV2").getBlockstorageSnapshotV2Output = null as any;
utilities.lazyLoad(exports, ["getBlockstorageSnapshotV2","getBlockstorageSnapshotV2Output"], () => require("./getBlockstorageSnapshotV2"));

export { GetBlockstorageSnapshotV3Args, GetBlockstorageSnapshotV3Result, GetBlockstorageSnapshotV3OutputArgs } from "./getBlockstorageSnapshotV3";
export const getBlockstorageSnapshotV3: typeof import("./getBlockstorageSnapshotV3").getBlockstorageSnapshotV3 = null as any;
export const getBlockstorageSnapshotV3Output: typeof import("./getBlockstorageSnapshotV3").getBlockstorageSnapshotV3Output = null as any;
utilities.lazyLoad(exports, ["getBlockstorageSnapshotV3","getBlockstorageSnapshotV3Output"], () => require("./getBlockstorageSnapshotV3"));

export { GetBlockstorageVolumeV2Args, GetBlockstorageVolumeV2Result, GetBlockstorageVolumeV2OutputArgs } from "./getBlockstorageVolumeV2";
export const getBlockstorageVolumeV2: typeof import("./getBlockstorageVolumeV2").getBlockstorageVolumeV2 = null as any;
export const getBlockstorageVolumeV2Output: typeof import("./getBlockstorageVolumeV2").getBlockstorageVolumeV2Output = null as any;
utilities.lazyLoad(exports, ["getBlockstorageVolumeV2","getBlockstorageVolumeV2Output"], () => require("./getBlockstorageVolumeV2"));

export { GetBlockstorageVolumeV3Args, GetBlockstorageVolumeV3Result, GetBlockstorageVolumeV3OutputArgs } from "./getBlockstorageVolumeV3";
export const getBlockstorageVolumeV3: typeof import("./getBlockstorageVolumeV3").getBlockstorageVolumeV3 = null as any;
export const getBlockstorageVolumeV3Output: typeof import("./getBlockstorageVolumeV3").getBlockstorageVolumeV3Output = null as any;
utilities.lazyLoad(exports, ["getBlockstorageVolumeV3","getBlockstorageVolumeV3Output"], () => require("./getBlockstorageVolumeV3"));

export { GetComputeAggregateV2Args, GetComputeAggregateV2Result, GetComputeAggregateV2OutputArgs } from "./getComputeAggregateV2";
export const getComputeAggregateV2: typeof import("./getComputeAggregateV2").getComputeAggregateV2 = null as any;
export const getComputeAggregateV2Output: typeof import("./getComputeAggregateV2").getComputeAggregateV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeAggregateV2","getComputeAggregateV2Output"], () => require("./getComputeAggregateV2"));

export { GetComputeAvailabilityZonesV2Args, GetComputeAvailabilityZonesV2Result, GetComputeAvailabilityZonesV2OutputArgs } from "./getComputeAvailabilityZonesV2";
export const getComputeAvailabilityZonesV2: typeof import("./getComputeAvailabilityZonesV2").getComputeAvailabilityZonesV2 = null as any;
export const getComputeAvailabilityZonesV2Output: typeof import("./getComputeAvailabilityZonesV2").getComputeAvailabilityZonesV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeAvailabilityZonesV2","getComputeAvailabilityZonesV2Output"], () => require("./getComputeAvailabilityZonesV2"));

export { GetComputeFlavorV2Args, GetComputeFlavorV2Result, GetComputeFlavorV2OutputArgs } from "./getComputeFlavorV2";
export const getComputeFlavorV2: typeof import("./getComputeFlavorV2").getComputeFlavorV2 = null as any;
export const getComputeFlavorV2Output: typeof import("./getComputeFlavorV2").getComputeFlavorV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeFlavorV2","getComputeFlavorV2Output"], () => require("./getComputeFlavorV2"));

export { GetComputeHypervisorV2Args, GetComputeHypervisorV2Result, GetComputeHypervisorV2OutputArgs } from "./getComputeHypervisorV2";
export const getComputeHypervisorV2: typeof import("./getComputeHypervisorV2").getComputeHypervisorV2 = null as any;
export const getComputeHypervisorV2Output: typeof import("./getComputeHypervisorV2").getComputeHypervisorV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeHypervisorV2","getComputeHypervisorV2Output"], () => require("./getComputeHypervisorV2"));

export { GetComputeInstanceV2Args, GetComputeInstanceV2Result, GetComputeInstanceV2OutputArgs } from "./getComputeInstanceV2";
export const getComputeInstanceV2: typeof import("./getComputeInstanceV2").getComputeInstanceV2 = null as any;
export const getComputeInstanceV2Output: typeof import("./getComputeInstanceV2").getComputeInstanceV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeInstanceV2","getComputeInstanceV2Output"], () => require("./getComputeInstanceV2"));

export { GetComputeKeypairV2Args, GetComputeKeypairV2Result, GetComputeKeypairV2OutputArgs } from "./getComputeKeypairV2";
export const getComputeKeypairV2: typeof import("./getComputeKeypairV2").getComputeKeypairV2 = null as any;
export const getComputeKeypairV2Output: typeof import("./getComputeKeypairV2").getComputeKeypairV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeKeypairV2","getComputeKeypairV2Output"], () => require("./getComputeKeypairV2"));

export { GetComputeLimitsV2Args, GetComputeLimitsV2Result, GetComputeLimitsV2OutputArgs } from "./getComputeLimitsV2";
export const getComputeLimitsV2: typeof import("./getComputeLimitsV2").getComputeLimitsV2 = null as any;
export const getComputeLimitsV2Output: typeof import("./getComputeLimitsV2").getComputeLimitsV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeLimitsV2","getComputeLimitsV2Output"], () => require("./getComputeLimitsV2"));

export { GetComputeQuotasetV2Args, GetComputeQuotasetV2Result, GetComputeQuotasetV2OutputArgs } from "./getComputeQuotasetV2";
export const getComputeQuotasetV2: typeof import("./getComputeQuotasetV2").getComputeQuotasetV2 = null as any;
export const getComputeQuotasetV2Output: typeof import("./getComputeQuotasetV2").getComputeQuotasetV2Output = null as any;
utilities.lazyLoad(exports, ["getComputeQuotasetV2","getComputeQuotasetV2Output"], () => require("./getComputeQuotasetV2"));

export { GetContainerinfraClusterV1Args, GetContainerinfraClusterV1Result, GetContainerinfraClusterV1OutputArgs } from "./getContainerinfraClusterV1";
export const getContainerinfraClusterV1: typeof import("./getContainerinfraClusterV1").getContainerinfraClusterV1 = null as any;
export const getContainerinfraClusterV1Output: typeof import("./getContainerinfraClusterV1").getContainerinfraClusterV1Output = null as any;
utilities.lazyLoad(exports, ["getContainerinfraClusterV1","getContainerinfraClusterV1Output"], () => require("./getContainerinfraClusterV1"));

export { GetContainerinfraClustertemplateV1Args, GetContainerinfraClustertemplateV1Result, GetContainerinfraClustertemplateV1OutputArgs } from "./getContainerinfraClustertemplateV1";
export const getContainerinfraClustertemplateV1: typeof import("./getContainerinfraClustertemplateV1").getContainerinfraClustertemplateV1 = null as any;
export const getContainerinfraClustertemplateV1Output: typeof import("./getContainerinfraClustertemplateV1").getContainerinfraClustertemplateV1Output = null as any;
utilities.lazyLoad(exports, ["getContainerinfraClustertemplateV1","getContainerinfraClustertemplateV1Output"], () => require("./getContainerinfraClustertemplateV1"));

export { GetContainerinfraNodegroupV1Args, GetContainerinfraNodegroupV1Result, GetContainerinfraNodegroupV1OutputArgs } from "./getContainerinfraNodegroupV1";
export const getContainerinfraNodegroupV1: typeof import("./getContainerinfraNodegroupV1").getContainerinfraNodegroupV1 = null as any;
export const getContainerinfraNodegroupV1Output: typeof import("./getContainerinfraNodegroupV1").getContainerinfraNodegroupV1Output = null as any;
utilities.lazyLoad(exports, ["getContainerinfraNodegroupV1","getContainerinfraNodegroupV1Output"], () => require("./getContainerinfraNodegroupV1"));

export { GetDnsZoneV2Args, GetDnsZoneV2Result, GetDnsZoneV2OutputArgs } from "./getDnsZoneV2";
export const getDnsZoneV2: typeof import("./getDnsZoneV2").getDnsZoneV2 = null as any;
export const getDnsZoneV2Output: typeof import("./getDnsZoneV2").getDnsZoneV2Output = null as any;
utilities.lazyLoad(exports, ["getDnsZoneV2","getDnsZoneV2Output"], () => require("./getDnsZoneV2"));

export { GetFwPolicyV1Args, GetFwPolicyV1Result, GetFwPolicyV1OutputArgs } from "./getFwPolicyV1";
export const getFwPolicyV1: typeof import("./getFwPolicyV1").getFwPolicyV1 = null as any;
export const getFwPolicyV1Output: typeof import("./getFwPolicyV1").getFwPolicyV1Output = null as any;
utilities.lazyLoad(exports, ["getFwPolicyV1","getFwPolicyV1Output"], () => require("./getFwPolicyV1"));

export { GetIdentityAuthScopeV3Args, GetIdentityAuthScopeV3Result, GetIdentityAuthScopeV3OutputArgs } from "./getIdentityAuthScopeV3";
export const getIdentityAuthScopeV3: typeof import("./getIdentityAuthScopeV3").getIdentityAuthScopeV3 = null as any;
export const getIdentityAuthScopeV3Output: typeof import("./getIdentityAuthScopeV3").getIdentityAuthScopeV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityAuthScopeV3","getIdentityAuthScopeV3Output"], () => require("./getIdentityAuthScopeV3"));

export { GetIdentityEndpointV3Args, GetIdentityEndpointV3Result, GetIdentityEndpointV3OutputArgs } from "./getIdentityEndpointV3";
export const getIdentityEndpointV3: typeof import("./getIdentityEndpointV3").getIdentityEndpointV3 = null as any;
export const getIdentityEndpointV3Output: typeof import("./getIdentityEndpointV3").getIdentityEndpointV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityEndpointV3","getIdentityEndpointV3Output"], () => require("./getIdentityEndpointV3"));

export { GetIdentityGroupV3Args, GetIdentityGroupV3Result, GetIdentityGroupV3OutputArgs } from "./getIdentityGroupV3";
export const getIdentityGroupV3: typeof import("./getIdentityGroupV3").getIdentityGroupV3 = null as any;
export const getIdentityGroupV3Output: typeof import("./getIdentityGroupV3").getIdentityGroupV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityGroupV3","getIdentityGroupV3Output"], () => require("./getIdentityGroupV3"));

export { GetIdentityProjectV3Args, GetIdentityProjectV3Result, GetIdentityProjectV3OutputArgs } from "./getIdentityProjectV3";
export const getIdentityProjectV3: typeof import("./getIdentityProjectV3").getIdentityProjectV3 = null as any;
export const getIdentityProjectV3Output: typeof import("./getIdentityProjectV3").getIdentityProjectV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityProjectV3","getIdentityProjectV3Output"], () => require("./getIdentityProjectV3"));

export { GetIdentityRoleV3Args, GetIdentityRoleV3Result, GetIdentityRoleV3OutputArgs } from "./getIdentityRoleV3";
export const getIdentityRoleV3: typeof import("./getIdentityRoleV3").getIdentityRoleV3 = null as any;
export const getIdentityRoleV3Output: typeof import("./getIdentityRoleV3").getIdentityRoleV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityRoleV3","getIdentityRoleV3Output"], () => require("./getIdentityRoleV3"));

export { GetIdentityServiceV3Args, GetIdentityServiceV3Result, GetIdentityServiceV3OutputArgs } from "./getIdentityServiceV3";
export const getIdentityServiceV3: typeof import("./getIdentityServiceV3").getIdentityServiceV3 = null as any;
export const getIdentityServiceV3Output: typeof import("./getIdentityServiceV3").getIdentityServiceV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityServiceV3","getIdentityServiceV3Output"], () => require("./getIdentityServiceV3"));

export { GetIdentityUserV3Args, GetIdentityUserV3Result, GetIdentityUserV3OutputArgs } from "./getIdentityUserV3";
export const getIdentityUserV3: typeof import("./getIdentityUserV3").getIdentityUserV3 = null as any;
export const getIdentityUserV3Output: typeof import("./getIdentityUserV3").getIdentityUserV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityUserV3","getIdentityUserV3Output"], () => require("./getIdentityUserV3"));

export { GetImagesImageIdsV2Args, GetImagesImageIdsV2Result, GetImagesImageIdsV2OutputArgs } from "./getImagesImageIdsV2";
export const getImagesImageIdsV2: typeof import("./getImagesImageIdsV2").getImagesImageIdsV2 = null as any;
export const getImagesImageIdsV2Output: typeof import("./getImagesImageIdsV2").getImagesImageIdsV2Output = null as any;
utilities.lazyLoad(exports, ["getImagesImageIdsV2","getImagesImageIdsV2Output"], () => require("./getImagesImageIdsV2"));

export { GetImagesImageV2Args, GetImagesImageV2Result, GetImagesImageV2OutputArgs } from "./getImagesImageV2";
export const getImagesImageV2: typeof import("./getImagesImageV2").getImagesImageV2 = null as any;
export const getImagesImageV2Output: typeof import("./getImagesImageV2").getImagesImageV2Output = null as any;
utilities.lazyLoad(exports, ["getImagesImageV2","getImagesImageV2Output"], () => require("./getImagesImageV2"));

export { GetKeymanagerContainerV1Args, GetKeymanagerContainerV1Result, GetKeymanagerContainerV1OutputArgs } from "./getKeymanagerContainerV1";
export const getKeymanagerContainerV1: typeof import("./getKeymanagerContainerV1").getKeymanagerContainerV1 = null as any;
export const getKeymanagerContainerV1Output: typeof import("./getKeymanagerContainerV1").getKeymanagerContainerV1Output = null as any;
utilities.lazyLoad(exports, ["getKeymanagerContainerV1","getKeymanagerContainerV1Output"], () => require("./getKeymanagerContainerV1"));

export { GetKeymanagerSecretV1Args, GetKeymanagerSecretV1Result, GetKeymanagerSecretV1OutputArgs } from "./getKeymanagerSecretV1";
export const getKeymanagerSecretV1: typeof import("./getKeymanagerSecretV1").getKeymanagerSecretV1 = null as any;
export const getKeymanagerSecretV1Output: typeof import("./getKeymanagerSecretV1").getKeymanagerSecretV1Output = null as any;
utilities.lazyLoad(exports, ["getKeymanagerSecretV1","getKeymanagerSecretV1Output"], () => require("./getKeymanagerSecretV1"));

export { GetNetworkingAddressscopeV2Args, GetNetworkingAddressscopeV2Result, GetNetworkingAddressscopeV2OutputArgs } from "./getNetworkingAddressscopeV2";
export const getNetworkingAddressscopeV2: typeof import("./getNetworkingAddressscopeV2").getNetworkingAddressscopeV2 = null as any;
export const getNetworkingAddressscopeV2Output: typeof import("./getNetworkingAddressscopeV2").getNetworkingAddressscopeV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingAddressscopeV2","getNetworkingAddressscopeV2Output"], () => require("./getNetworkingAddressscopeV2"));

export { GetNetworkingFloatingipV2Args, GetNetworkingFloatingipV2Result, GetNetworkingFloatingipV2OutputArgs } from "./getNetworkingFloatingipV2";
export const getNetworkingFloatingipV2: typeof import("./getNetworkingFloatingipV2").getNetworkingFloatingipV2 = null as any;
export const getNetworkingFloatingipV2Output: typeof import("./getNetworkingFloatingipV2").getNetworkingFloatingipV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingFloatingipV2","getNetworkingFloatingipV2Output"], () => require("./getNetworkingFloatingipV2"));

export { GetNetworkingNetworkV2Args, GetNetworkingNetworkV2Result, GetNetworkingNetworkV2OutputArgs } from "./getNetworkingNetworkV2";
export const getNetworkingNetworkV2: typeof import("./getNetworkingNetworkV2").getNetworkingNetworkV2 = null as any;
export const getNetworkingNetworkV2Output: typeof import("./getNetworkingNetworkV2").getNetworkingNetworkV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingNetworkV2","getNetworkingNetworkV2Output"], () => require("./getNetworkingNetworkV2"));

export { GetNetworkingPortIdsV2Args, GetNetworkingPortIdsV2Result, GetNetworkingPortIdsV2OutputArgs } from "./getNetworkingPortIdsV2";
export const getNetworkingPortIdsV2: typeof import("./getNetworkingPortIdsV2").getNetworkingPortIdsV2 = null as any;
export const getNetworkingPortIdsV2Output: typeof import("./getNetworkingPortIdsV2").getNetworkingPortIdsV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingPortIdsV2","getNetworkingPortIdsV2Output"], () => require("./getNetworkingPortIdsV2"));

export { GetNetworkingPortV2Args, GetNetworkingPortV2Result, GetNetworkingPortV2OutputArgs } from "./getNetworkingPortV2";
export const getNetworkingPortV2: typeof import("./getNetworkingPortV2").getNetworkingPortV2 = null as any;
export const getNetworkingPortV2Output: typeof import("./getNetworkingPortV2").getNetworkingPortV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingPortV2","getNetworkingPortV2Output"], () => require("./getNetworkingPortV2"));

export { GetNetworkingQosBandwidthLimitRuleV2Args, GetNetworkingQosBandwidthLimitRuleV2Result, GetNetworkingQosBandwidthLimitRuleV2OutputArgs } from "./getNetworkingQosBandwidthLimitRuleV2";
export const getNetworkingQosBandwidthLimitRuleV2: typeof import("./getNetworkingQosBandwidthLimitRuleV2").getNetworkingQosBandwidthLimitRuleV2 = null as any;
export const getNetworkingQosBandwidthLimitRuleV2Output: typeof import("./getNetworkingQosBandwidthLimitRuleV2").getNetworkingQosBandwidthLimitRuleV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingQosBandwidthLimitRuleV2","getNetworkingQosBandwidthLimitRuleV2Output"], () => require("./getNetworkingQosBandwidthLimitRuleV2"));

export { GetNetworkingQosDscpMarkingRuleV2Args, GetNetworkingQosDscpMarkingRuleV2Result, GetNetworkingQosDscpMarkingRuleV2OutputArgs } from "./getNetworkingQosDscpMarkingRuleV2";
export const getNetworkingQosDscpMarkingRuleV2: typeof import("./getNetworkingQosDscpMarkingRuleV2").getNetworkingQosDscpMarkingRuleV2 = null as any;
export const getNetworkingQosDscpMarkingRuleV2Output: typeof import("./getNetworkingQosDscpMarkingRuleV2").getNetworkingQosDscpMarkingRuleV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingQosDscpMarkingRuleV2","getNetworkingQosDscpMarkingRuleV2Output"], () => require("./getNetworkingQosDscpMarkingRuleV2"));

export { GetNetworkingQosMinimumBandwidthRuleV2Args, GetNetworkingQosMinimumBandwidthRuleV2Result, GetNetworkingQosMinimumBandwidthRuleV2OutputArgs } from "./getNetworkingQosMinimumBandwidthRuleV2";
export const getNetworkingQosMinimumBandwidthRuleV2: typeof import("./getNetworkingQosMinimumBandwidthRuleV2").getNetworkingQosMinimumBandwidthRuleV2 = null as any;
export const getNetworkingQosMinimumBandwidthRuleV2Output: typeof import("./getNetworkingQosMinimumBandwidthRuleV2").getNetworkingQosMinimumBandwidthRuleV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingQosMinimumBandwidthRuleV2","getNetworkingQosMinimumBandwidthRuleV2Output"], () => require("./getNetworkingQosMinimumBandwidthRuleV2"));

export { GetNetworkingQosPolicyV2Args, GetNetworkingQosPolicyV2Result, GetNetworkingQosPolicyV2OutputArgs } from "./getNetworkingQosPolicyV2";
export const getNetworkingQosPolicyV2: typeof import("./getNetworkingQosPolicyV2").getNetworkingQosPolicyV2 = null as any;
export const getNetworkingQosPolicyV2Output: typeof import("./getNetworkingQosPolicyV2").getNetworkingQosPolicyV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingQosPolicyV2","getNetworkingQosPolicyV2Output"], () => require("./getNetworkingQosPolicyV2"));

export { GetNetworkingQuotaV2Args, GetNetworkingQuotaV2Result, GetNetworkingQuotaV2OutputArgs } from "./getNetworkingQuotaV2";
export const getNetworkingQuotaV2: typeof import("./getNetworkingQuotaV2").getNetworkingQuotaV2 = null as any;
export const getNetworkingQuotaV2Output: typeof import("./getNetworkingQuotaV2").getNetworkingQuotaV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingQuotaV2","getNetworkingQuotaV2Output"], () => require("./getNetworkingQuotaV2"));

export { GetNetworkingRouterV2Args, GetNetworkingRouterV2Result, GetNetworkingRouterV2OutputArgs } from "./getNetworkingRouterV2";
export const getNetworkingRouterV2: typeof import("./getNetworkingRouterV2").getNetworkingRouterV2 = null as any;
export const getNetworkingRouterV2Output: typeof import("./getNetworkingRouterV2").getNetworkingRouterV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingRouterV2","getNetworkingRouterV2Output"], () => require("./getNetworkingRouterV2"));

export { GetNetworkingRoutingtableV2Args, GetNetworkingRoutingtableV2Result, GetNetworkingRoutingtableV2OutputArgs } from "./getNetworkingRoutingtableV2";
export const getNetworkingRoutingtableV2: typeof import("./getNetworkingRoutingtableV2").getNetworkingRoutingtableV2 = null as any;
export const getNetworkingRoutingtableV2Output: typeof import("./getNetworkingRoutingtableV2").getNetworkingRoutingtableV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingRoutingtableV2","getNetworkingRoutingtableV2Output"], () => require("./getNetworkingRoutingtableV2"));

export { GetNetworkingSecgroupV2Args, GetNetworkingSecgroupV2Result, GetNetworkingSecgroupV2OutputArgs } from "./getNetworkingSecgroupV2";
export const getNetworkingSecgroupV2: typeof import("./getNetworkingSecgroupV2").getNetworkingSecgroupV2 = null as any;
export const getNetworkingSecgroupV2Output: typeof import("./getNetworkingSecgroupV2").getNetworkingSecgroupV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingSecgroupV2","getNetworkingSecgroupV2Output"], () => require("./getNetworkingSecgroupV2"));

export { GetNetworkingSubnetIdsV2Args, GetNetworkingSubnetIdsV2Result, GetNetworkingSubnetIdsV2OutputArgs } from "./getNetworkingSubnetIdsV2";
export const getNetworkingSubnetIdsV2: typeof import("./getNetworkingSubnetIdsV2").getNetworkingSubnetIdsV2 = null as any;
export const getNetworkingSubnetIdsV2Output: typeof import("./getNetworkingSubnetIdsV2").getNetworkingSubnetIdsV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingSubnetIdsV2","getNetworkingSubnetIdsV2Output"], () => require("./getNetworkingSubnetIdsV2"));

export { GetNetworkingSubnetV2Args, GetNetworkingSubnetV2Result, GetNetworkingSubnetV2OutputArgs } from "./getNetworkingSubnetV2";
export const getNetworkingSubnetV2: typeof import("./getNetworkingSubnetV2").getNetworkingSubnetV2 = null as any;
export const getNetworkingSubnetV2Output: typeof import("./getNetworkingSubnetV2").getNetworkingSubnetV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingSubnetV2","getNetworkingSubnetV2Output"], () => require("./getNetworkingSubnetV2"));

export { GetNetworkingSubnetpoolV2Args, GetNetworkingSubnetpoolV2Result, GetNetworkingSubnetpoolV2OutputArgs } from "./getNetworkingSubnetpoolV2";
export const getNetworkingSubnetpoolV2: typeof import("./getNetworkingSubnetpoolV2").getNetworkingSubnetpoolV2 = null as any;
export const getNetworkingSubnetpoolV2Output: typeof import("./getNetworkingSubnetpoolV2").getNetworkingSubnetpoolV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingSubnetpoolV2","getNetworkingSubnetpoolV2Output"], () => require("./getNetworkingSubnetpoolV2"));

export { GetNetworkingTrunkV2Args, GetNetworkingTrunkV2Result, GetNetworkingTrunkV2OutputArgs } from "./getNetworkingTrunkV2";
export const getNetworkingTrunkV2: typeof import("./getNetworkingTrunkV2").getNetworkingTrunkV2 = null as any;
export const getNetworkingTrunkV2Output: typeof import("./getNetworkingTrunkV2").getNetworkingTrunkV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingTrunkV2","getNetworkingTrunkV2Output"], () => require("./getNetworkingTrunkV2"));

export { GetNetworkingVpcV2Args, GetNetworkingVpcV2Result, GetNetworkingVpcV2OutputArgs } from "./getNetworkingVpcV2";
export const getNetworkingVpcV2: typeof import("./getNetworkingVpcV2").getNetworkingVpcV2 = null as any;
export const getNetworkingVpcV2Output: typeof import("./getNetworkingVpcV2").getNetworkingVpcV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingVpcV2","getNetworkingVpcV2Output"], () => require("./getNetworkingVpcV2"));

export { GetNetworkingVpcsubnetV2Args, GetNetworkingVpcsubnetV2Result, GetNetworkingVpcsubnetV2OutputArgs } from "./getNetworkingVpcsubnetV2";
export const getNetworkingVpcsubnetV2: typeof import("./getNetworkingVpcsubnetV2").getNetworkingVpcsubnetV2 = null as any;
export const getNetworkingVpcsubnetV2Output: typeof import("./getNetworkingVpcsubnetV2").getNetworkingVpcsubnetV2Output = null as any;
utilities.lazyLoad(exports, ["getNetworkingVpcsubnetV2","getNetworkingVpcsubnetV2Output"], () => require("./getNetworkingVpcsubnetV2"));

export { GetSharedfilesystemAvailabilityZonesV2Args, GetSharedfilesystemAvailabilityZonesV2Result, GetSharedfilesystemAvailabilityZonesV2OutputArgs } from "./getSharedfilesystemAvailabilityZonesV2";
export const getSharedfilesystemAvailabilityZonesV2: typeof import("./getSharedfilesystemAvailabilityZonesV2").getSharedfilesystemAvailabilityZonesV2 = null as any;
export const getSharedfilesystemAvailabilityZonesV2Output: typeof import("./getSharedfilesystemAvailabilityZonesV2").getSharedfilesystemAvailabilityZonesV2Output = null as any;
utilities.lazyLoad(exports, ["getSharedfilesystemAvailabilityZonesV2","getSharedfilesystemAvailabilityZonesV2Output"], () => require("./getSharedfilesystemAvailabilityZonesV2"));

export { GetSharedfilesystemShareV2Args, GetSharedfilesystemShareV2Result, GetSharedfilesystemShareV2OutputArgs } from "./getSharedfilesystemShareV2";
export const getSharedfilesystemShareV2: typeof import("./getSharedfilesystemShareV2").getSharedfilesystemShareV2 = null as any;
export const getSharedfilesystemShareV2Output: typeof import("./getSharedfilesystemShareV2").getSharedfilesystemShareV2Output = null as any;
utilities.lazyLoad(exports, ["getSharedfilesystemShareV2","getSharedfilesystemShareV2Output"], () => require("./getSharedfilesystemShareV2"));

export { GetSharedfilesystemSharenetworkV2Args, GetSharedfilesystemSharenetworkV2Result, GetSharedfilesystemSharenetworkV2OutputArgs } from "./getSharedfilesystemSharenetworkV2";
export const getSharedfilesystemSharenetworkV2: typeof import("./getSharedfilesystemSharenetworkV2").getSharedfilesystemSharenetworkV2 = null as any;
export const getSharedfilesystemSharenetworkV2Output: typeof import("./getSharedfilesystemSharenetworkV2").getSharedfilesystemSharenetworkV2Output = null as any;
utilities.lazyLoad(exports, ["getSharedfilesystemSharenetworkV2","getSharedfilesystemSharenetworkV2Output"], () => require("./getSharedfilesystemSharenetworkV2"));

export { GetSharedfilesystemSnapshotV2Args, GetSharedfilesystemSnapshotV2Result, GetSharedfilesystemSnapshotV2OutputArgs } from "./getSharedfilesystemSnapshotV2";
export const getSharedfilesystemSnapshotV2: typeof import("./getSharedfilesystemSnapshotV2").getSharedfilesystemSnapshotV2 = null as any;
export const getSharedfilesystemSnapshotV2Output: typeof import("./getSharedfilesystemSnapshotV2").getSharedfilesystemSnapshotV2Output = null as any;
utilities.lazyLoad(exports, ["getSharedfilesystemSnapshotV2","getSharedfilesystemSnapshotV2Output"], () => require("./getSharedfilesystemSnapshotV2"));

export { IdentityApplicationCredentialV3Args, IdentityApplicationCredentialV3State } from "./identityApplicationCredentialV3";
export type IdentityApplicationCredentialV3 = import("./identityApplicationCredentialV3").IdentityApplicationCredentialV3;
export const IdentityApplicationCredentialV3: typeof import("./identityApplicationCredentialV3").IdentityApplicationCredentialV3 = null as any;
utilities.lazyLoad(exports, ["IdentityApplicationCredentialV3"], () => require("./identityApplicationCredentialV3"));

export { IdentityEc2CredentialV3Args, IdentityEc2CredentialV3State } from "./identityEc2CredentialV3";
export type IdentityEc2CredentialV3 = import("./identityEc2CredentialV3").IdentityEc2CredentialV3;
export const IdentityEc2CredentialV3: typeof import("./identityEc2CredentialV3").IdentityEc2CredentialV3 = null as any;
utilities.lazyLoad(exports, ["IdentityEc2CredentialV3"], () => require("./identityEc2CredentialV3"));

export { IdentityEndpointV3Args, IdentityEndpointV3State } from "./identityEndpointV3";
export type IdentityEndpointV3 = import("./identityEndpointV3").IdentityEndpointV3;
export const IdentityEndpointV3: typeof import("./identityEndpointV3").IdentityEndpointV3 = null as any;
utilities.lazyLoad(exports, ["IdentityEndpointV3"], () => require("./identityEndpointV3"));

export { IdentityGroupV3Args, IdentityGroupV3State } from "./identityGroupV3";
export type IdentityGroupV3 = import("./identityGroupV3").IdentityGroupV3;
export const IdentityGroupV3: typeof import("./identityGroupV3").IdentityGroupV3 = null as any;
utilities.lazyLoad(exports, ["IdentityGroupV3"], () => require("./identityGroupV3"));

export { IdentityProjectV3Args, IdentityProjectV3State } from "./identityProjectV3";
export type IdentityProjectV3 = import("./identityProjectV3").IdentityProjectV3;
export const IdentityProjectV3: typeof import("./identityProjectV3").IdentityProjectV3 = null as any;
utilities.lazyLoad(exports, ["IdentityProjectV3"], () => require("./identityProjectV3"));

export { IdentityRoleAssignmentV3Args, IdentityRoleAssignmentV3State } from "./identityRoleAssignmentV3";
export type IdentityRoleAssignmentV3 = import("./identityRoleAssignmentV3").IdentityRoleAssignmentV3;
export const IdentityRoleAssignmentV3: typeof import("./identityRoleAssignmentV3").IdentityRoleAssignmentV3 = null as any;
utilities.lazyLoad(exports, ["IdentityRoleAssignmentV3"], () => require("./identityRoleAssignmentV3"));

export { IdentityRoleV3Args, IdentityRoleV3State } from "./identityRoleV3";
export type IdentityRoleV3 = import("./identityRoleV3").IdentityRoleV3;
export const IdentityRoleV3: typeof import("./identityRoleV3").IdentityRoleV3 = null as any;
utilities.lazyLoad(exports, ["IdentityRoleV3"], () => require("./identityRoleV3"));

export { IdentityServiceV3Args, IdentityServiceV3State } from "./identityServiceV3";
export type IdentityServiceV3 = import("./identityServiceV3").IdentityServiceV3;
export const IdentityServiceV3: typeof import("./identityServiceV3").IdentityServiceV3 = null as any;
utilities.lazyLoad(exports, ["IdentityServiceV3"], () => require("./identityServiceV3"));

export { IdentityUserMembershipV3Args, IdentityUserMembershipV3State } from "./identityUserMembershipV3";
export type IdentityUserMembershipV3 = import("./identityUserMembershipV3").IdentityUserMembershipV3;
export const IdentityUserMembershipV3: typeof import("./identityUserMembershipV3").IdentityUserMembershipV3 = null as any;
utilities.lazyLoad(exports, ["IdentityUserMembershipV3"], () => require("./identityUserMembershipV3"));

export { IdentityUserV3Args, IdentityUserV3State } from "./identityUserV3";
export type IdentityUserV3 = import("./identityUserV3").IdentityUserV3;
export const IdentityUserV3: typeof import("./identityUserV3").IdentityUserV3 = null as any;
utilities.lazyLoad(exports, ["IdentityUserV3"], () => require("./identityUserV3"));

export { ImagesImageAccessAcceptV2Args, ImagesImageAccessAcceptV2State } from "./imagesImageAccessAcceptV2";
export type ImagesImageAccessAcceptV2 = import("./imagesImageAccessAcceptV2").ImagesImageAccessAcceptV2;
export const ImagesImageAccessAcceptV2: typeof import("./imagesImageAccessAcceptV2").ImagesImageAccessAcceptV2 = null as any;
utilities.lazyLoad(exports, ["ImagesImageAccessAcceptV2"], () => require("./imagesImageAccessAcceptV2"));

export { ImagesImageAccessV2Args, ImagesImageAccessV2State } from "./imagesImageAccessV2";
export type ImagesImageAccessV2 = import("./imagesImageAccessV2").ImagesImageAccessV2;
export const ImagesImageAccessV2: typeof import("./imagesImageAccessV2").ImagesImageAccessV2 = null as any;
utilities.lazyLoad(exports, ["ImagesImageAccessV2"], () => require("./imagesImageAccessV2"));

export { ImagesImageV2Args, ImagesImageV2State } from "./imagesImageV2";
export type ImagesImageV2 = import("./imagesImageV2").ImagesImageV2;
export const ImagesImageV2: typeof import("./imagesImageV2").ImagesImageV2 = null as any;
utilities.lazyLoad(exports, ["ImagesImageV2"], () => require("./imagesImageV2"));

export { KeymanagerContainerV1Args, KeymanagerContainerV1State } from "./keymanagerContainerV1";
export type KeymanagerContainerV1 = import("./keymanagerContainerV1").KeymanagerContainerV1;
export const KeymanagerContainerV1: typeof import("./keymanagerContainerV1").KeymanagerContainerV1 = null as any;
utilities.lazyLoad(exports, ["KeymanagerContainerV1"], () => require("./keymanagerContainerV1"));

export { KeymanagerOrderV1Args, KeymanagerOrderV1State } from "./keymanagerOrderV1";
export type KeymanagerOrderV1 = import("./keymanagerOrderV1").KeymanagerOrderV1;
export const KeymanagerOrderV1: typeof import("./keymanagerOrderV1").KeymanagerOrderV1 = null as any;
utilities.lazyLoad(exports, ["KeymanagerOrderV1"], () => require("./keymanagerOrderV1"));

export { KeymanagerSecretV1Args, KeymanagerSecretV1State } from "./keymanagerSecretV1";
export type KeymanagerSecretV1 = import("./keymanagerSecretV1").KeymanagerSecretV1;
export const KeymanagerSecretV1: typeof import("./keymanagerSecretV1").KeymanagerSecretV1 = null as any;
utilities.lazyLoad(exports, ["KeymanagerSecretV1"], () => require("./keymanagerSecretV1"));

export { LbL7policyV2Args, LbL7policyV2State } from "./lbL7policyV2";
export type LbL7policyV2 = import("./lbL7policyV2").LbL7policyV2;
export const LbL7policyV2: typeof import("./lbL7policyV2").LbL7policyV2 = null as any;
utilities.lazyLoad(exports, ["LbL7policyV2"], () => require("./lbL7policyV2"));

export { LbL7ruleV2Args, LbL7ruleV2State } from "./lbL7ruleV2";
export type LbL7ruleV2 = import("./lbL7ruleV2").LbL7ruleV2;
export const LbL7ruleV2: typeof import("./lbL7ruleV2").LbL7ruleV2 = null as any;
utilities.lazyLoad(exports, ["LbL7ruleV2"], () => require("./lbL7ruleV2"));

export { LbListenerV2Args, LbListenerV2State } from "./lbListenerV2";
export type LbListenerV2 = import("./lbListenerV2").LbListenerV2;
export const LbListenerV2: typeof import("./lbListenerV2").LbListenerV2 = null as any;
utilities.lazyLoad(exports, ["LbListenerV2"], () => require("./lbListenerV2"));

export { LbLoadbalancerV2Args, LbLoadbalancerV2State } from "./lbLoadbalancerV2";
export type LbLoadbalancerV2 = import("./lbLoadbalancerV2").LbLoadbalancerV2;
export const LbLoadbalancerV2: typeof import("./lbLoadbalancerV2").LbLoadbalancerV2 = null as any;
utilities.lazyLoad(exports, ["LbLoadbalancerV2"], () => require("./lbLoadbalancerV2"));

export { LbMemberV1Args, LbMemberV1State } from "./lbMemberV1";
export type LbMemberV1 = import("./lbMemberV1").LbMemberV1;
export const LbMemberV1: typeof import("./lbMemberV1").LbMemberV1 = null as any;
utilities.lazyLoad(exports, ["LbMemberV1"], () => require("./lbMemberV1"));

export { LbMemberV2Args, LbMemberV2State } from "./lbMemberV2";
export type LbMemberV2 = import("./lbMemberV2").LbMemberV2;
export const LbMemberV2: typeof import("./lbMemberV2").LbMemberV2 = null as any;
utilities.lazyLoad(exports, ["LbMemberV2"], () => require("./lbMemberV2"));

export { LbMembersV2Args, LbMembersV2State } from "./lbMembersV2";
export type LbMembersV2 = import("./lbMembersV2").LbMembersV2;
export const LbMembersV2: typeof import("./lbMembersV2").LbMembersV2 = null as any;
utilities.lazyLoad(exports, ["LbMembersV2"], () => require("./lbMembersV2"));

export { LbMonitorV1Args, LbMonitorV1State } from "./lbMonitorV1";
export type LbMonitorV1 = import("./lbMonitorV1").LbMonitorV1;
export const LbMonitorV1: typeof import("./lbMonitorV1").LbMonitorV1 = null as any;
utilities.lazyLoad(exports, ["LbMonitorV1"], () => require("./lbMonitorV1"));

export { LbMonitorV2Args, LbMonitorV2State } from "./lbMonitorV2";
export type LbMonitorV2 = import("./lbMonitorV2").LbMonitorV2;
export const LbMonitorV2: typeof import("./lbMonitorV2").LbMonitorV2 = null as any;
utilities.lazyLoad(exports, ["LbMonitorV2"], () => require("./lbMonitorV2"));

export { LbPoolV1Args, LbPoolV1State } from "./lbPoolV1";
export type LbPoolV1 = import("./lbPoolV1").LbPoolV1;
export const LbPoolV1: typeof import("./lbPoolV1").LbPoolV1 = null as any;
utilities.lazyLoad(exports, ["LbPoolV1"], () => require("./lbPoolV1"));

export { LbPoolV2Args, LbPoolV2State } from "./lbPoolV2";
export type LbPoolV2 = import("./lbPoolV2").LbPoolV2;
export const LbPoolV2: typeof import("./lbPoolV2").LbPoolV2 = null as any;
utilities.lazyLoad(exports, ["LbPoolV2"], () => require("./lbPoolV2"));

export { LbQuotaV2Args, LbQuotaV2State } from "./lbQuotaV2";
export type LbQuotaV2 = import("./lbQuotaV2").LbQuotaV2;
export const LbQuotaV2: typeof import("./lbQuotaV2").LbQuotaV2 = null as any;
utilities.lazyLoad(exports, ["LbQuotaV2"], () => require("./lbQuotaV2"));

export { LbVipV1Args, LbVipV1State } from "./lbVipV1";
export type LbVipV1 = import("./lbVipV1").LbVipV1;
export const LbVipV1: typeof import("./lbVipV1").LbVipV1 = null as any;
utilities.lazyLoad(exports, ["LbVipV1"], () => require("./lbVipV1"));

export { NetworkingAddressscopeV2Args, NetworkingAddressscopeV2State } from "./networkingAddressscopeV2";
export type NetworkingAddressscopeV2 = import("./networkingAddressscopeV2").NetworkingAddressscopeV2;
export const NetworkingAddressscopeV2: typeof import("./networkingAddressscopeV2").NetworkingAddressscopeV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingAddressscopeV2"], () => require("./networkingAddressscopeV2"));

export { NetworkingFloatingipAssociateV2Args, NetworkingFloatingipAssociateV2State } from "./networkingFloatingipAssociateV2";
export type NetworkingFloatingipAssociateV2 = import("./networkingFloatingipAssociateV2").NetworkingFloatingipAssociateV2;
export const NetworkingFloatingipAssociateV2: typeof import("./networkingFloatingipAssociateV2").NetworkingFloatingipAssociateV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingFloatingipAssociateV2"], () => require("./networkingFloatingipAssociateV2"));

export { NetworkingFloatingipV2Args, NetworkingFloatingipV2State } from "./networkingFloatingipV2";
export type NetworkingFloatingipV2 = import("./networkingFloatingipV2").NetworkingFloatingipV2;
export const NetworkingFloatingipV2: typeof import("./networkingFloatingipV2").NetworkingFloatingipV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingFloatingipV2"], () => require("./networkingFloatingipV2"));

export { NetworkingNetworkV2Args, NetworkingNetworkV2State } from "./networkingNetworkV2";
export type NetworkingNetworkV2 = import("./networkingNetworkV2").NetworkingNetworkV2;
export const NetworkingNetworkV2: typeof import("./networkingNetworkV2").NetworkingNetworkV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingNetworkV2"], () => require("./networkingNetworkV2"));

export { NetworkingPortSecgroupAssociateV2Args, NetworkingPortSecgroupAssociateV2State } from "./networkingPortSecgroupAssociateV2";
export type NetworkingPortSecgroupAssociateV2 = import("./networkingPortSecgroupAssociateV2").NetworkingPortSecgroupAssociateV2;
export const NetworkingPortSecgroupAssociateV2: typeof import("./networkingPortSecgroupAssociateV2").NetworkingPortSecgroupAssociateV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingPortSecgroupAssociateV2"], () => require("./networkingPortSecgroupAssociateV2"));

export { NetworkingPortV2Args, NetworkingPortV2State } from "./networkingPortV2";
export type NetworkingPortV2 = import("./networkingPortV2").NetworkingPortV2;
export const NetworkingPortV2: typeof import("./networkingPortV2").NetworkingPortV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingPortV2"], () => require("./networkingPortV2"));

export { NetworkingPortforwardingV2Args, NetworkingPortforwardingV2State } from "./networkingPortforwardingV2";
export type NetworkingPortforwardingV2 = import("./networkingPortforwardingV2").NetworkingPortforwardingV2;
export const NetworkingPortforwardingV2: typeof import("./networkingPortforwardingV2").NetworkingPortforwardingV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingPortforwardingV2"], () => require("./networkingPortforwardingV2"));

export { NetworkingQosBandwidthLimitRuleV2Args, NetworkingQosBandwidthLimitRuleV2State } from "./networkingQosBandwidthLimitRuleV2";
export type NetworkingQosBandwidthLimitRuleV2 = import("./networkingQosBandwidthLimitRuleV2").NetworkingQosBandwidthLimitRuleV2;
export const NetworkingQosBandwidthLimitRuleV2: typeof import("./networkingQosBandwidthLimitRuleV2").NetworkingQosBandwidthLimitRuleV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingQosBandwidthLimitRuleV2"], () => require("./networkingQosBandwidthLimitRuleV2"));

export { NetworkingQosDscpMarkingRuleV2Args, NetworkingQosDscpMarkingRuleV2State } from "./networkingQosDscpMarkingRuleV2";
export type NetworkingQosDscpMarkingRuleV2 = import("./networkingQosDscpMarkingRuleV2").NetworkingQosDscpMarkingRuleV2;
export const NetworkingQosDscpMarkingRuleV2: typeof import("./networkingQosDscpMarkingRuleV2").NetworkingQosDscpMarkingRuleV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingQosDscpMarkingRuleV2"], () => require("./networkingQosDscpMarkingRuleV2"));

export { NetworkingQosMinimumBandwidthRuleV2Args, NetworkingQosMinimumBandwidthRuleV2State } from "./networkingQosMinimumBandwidthRuleV2";
export type NetworkingQosMinimumBandwidthRuleV2 = import("./networkingQosMinimumBandwidthRuleV2").NetworkingQosMinimumBandwidthRuleV2;
export const NetworkingQosMinimumBandwidthRuleV2: typeof import("./networkingQosMinimumBandwidthRuleV2").NetworkingQosMinimumBandwidthRuleV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingQosMinimumBandwidthRuleV2"], () => require("./networkingQosMinimumBandwidthRuleV2"));

export { NetworkingQosPolicyV2Args, NetworkingQosPolicyV2State } from "./networkingQosPolicyV2";
export type NetworkingQosPolicyV2 = import("./networkingQosPolicyV2").NetworkingQosPolicyV2;
export const NetworkingQosPolicyV2: typeof import("./networkingQosPolicyV2").NetworkingQosPolicyV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingQosPolicyV2"], () => require("./networkingQosPolicyV2"));

export { NetworkingQuotaV2Args, NetworkingQuotaV2State } from "./networkingQuotaV2";
export type NetworkingQuotaV2 = import("./networkingQuotaV2").NetworkingQuotaV2;
export const NetworkingQuotaV2: typeof import("./networkingQuotaV2").NetworkingQuotaV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingQuotaV2"], () => require("./networkingQuotaV2"));

export { NetworkingRbacPolicyV2Args, NetworkingRbacPolicyV2State } from "./networkingRbacPolicyV2";
export type NetworkingRbacPolicyV2 = import("./networkingRbacPolicyV2").NetworkingRbacPolicyV2;
export const NetworkingRbacPolicyV2: typeof import("./networkingRbacPolicyV2").NetworkingRbacPolicyV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingRbacPolicyV2"], () => require("./networkingRbacPolicyV2"));

export { NetworkingRouterInterfaceV2Args, NetworkingRouterInterfaceV2State } from "./networkingRouterInterfaceV2";
export type NetworkingRouterInterfaceV2 = import("./networkingRouterInterfaceV2").NetworkingRouterInterfaceV2;
export const NetworkingRouterInterfaceV2: typeof import("./networkingRouterInterfaceV2").NetworkingRouterInterfaceV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingRouterInterfaceV2"], () => require("./networkingRouterInterfaceV2"));

export { NetworkingRouterRouteV2Args, NetworkingRouterRouteV2State } from "./networkingRouterRouteV2";
export type NetworkingRouterRouteV2 = import("./networkingRouterRouteV2").NetworkingRouterRouteV2;
export const NetworkingRouterRouteV2: typeof import("./networkingRouterRouteV2").NetworkingRouterRouteV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingRouterRouteV2"], () => require("./networkingRouterRouteV2"));

export { NetworkingRouterV2Args, NetworkingRouterV2State } from "./networkingRouterV2";
export type NetworkingRouterV2 = import("./networkingRouterV2").NetworkingRouterV2;
export const NetworkingRouterV2: typeof import("./networkingRouterV2").NetworkingRouterV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingRouterV2"], () => require("./networkingRouterV2"));

export { NetworkingRoutingtableV2Args, NetworkingRoutingtableV2State } from "./networkingRoutingtableV2";
export type NetworkingRoutingtableV2 = import("./networkingRoutingtableV2").NetworkingRoutingtableV2;
export const NetworkingRoutingtableV2: typeof import("./networkingRoutingtableV2").NetworkingRoutingtableV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingRoutingtableV2"], () => require("./networkingRoutingtableV2"));

export { NetworkingSecgroupRuleV2Args, NetworkingSecgroupRuleV2State } from "./networkingSecgroupRuleV2";
export type NetworkingSecgroupRuleV2 = import("./networkingSecgroupRuleV2").NetworkingSecgroupRuleV2;
export const NetworkingSecgroupRuleV2: typeof import("./networkingSecgroupRuleV2").NetworkingSecgroupRuleV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingSecgroupRuleV2"], () => require("./networkingSecgroupRuleV2"));

export { NetworkingSecgroupV2Args, NetworkingSecgroupV2State } from "./networkingSecgroupV2";
export type NetworkingSecgroupV2 = import("./networkingSecgroupV2").NetworkingSecgroupV2;
export const NetworkingSecgroupV2: typeof import("./networkingSecgroupV2").NetworkingSecgroupV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingSecgroupV2"], () => require("./networkingSecgroupV2"));

export { NetworkingSubnetRouteV2Args, NetworkingSubnetRouteV2State } from "./networkingSubnetRouteV2";
export type NetworkingSubnetRouteV2 = import("./networkingSubnetRouteV2").NetworkingSubnetRouteV2;
export const NetworkingSubnetRouteV2: typeof import("./networkingSubnetRouteV2").NetworkingSubnetRouteV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingSubnetRouteV2"], () => require("./networkingSubnetRouteV2"));

export { NetworkingSubnetV2Args, NetworkingSubnetV2State } from "./networkingSubnetV2";
export type NetworkingSubnetV2 = import("./networkingSubnetV2").NetworkingSubnetV2;
export const NetworkingSubnetV2: typeof import("./networkingSubnetV2").NetworkingSubnetV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingSubnetV2"], () => require("./networkingSubnetV2"));

export { NetworkingSubnetpoolV2Args, NetworkingSubnetpoolV2State } from "./networkingSubnetpoolV2";
export type NetworkingSubnetpoolV2 = import("./networkingSubnetpoolV2").NetworkingSubnetpoolV2;
export const NetworkingSubnetpoolV2: typeof import("./networkingSubnetpoolV2").NetworkingSubnetpoolV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingSubnetpoolV2"], () => require("./networkingSubnetpoolV2"));

export { NetworkingTrunkV2Args, NetworkingTrunkV2State } from "./networkingTrunkV2";
export type NetworkingTrunkV2 = import("./networkingTrunkV2").NetworkingTrunkV2;
export const NetworkingTrunkV2: typeof import("./networkingTrunkV2").NetworkingTrunkV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingTrunkV2"], () => require("./networkingTrunkV2"));

export { NetworkingVpcV2Args, NetworkingVpcV2State } from "./networkingVpcV2";
export type NetworkingVpcV2 = import("./networkingVpcV2").NetworkingVpcV2;
export const NetworkingVpcV2: typeof import("./networkingVpcV2").NetworkingVpcV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingVpcV2"], () => require("./networkingVpcV2"));

export { NetworkingVpcsubnetV2Args, NetworkingVpcsubnetV2State } from "./networkingVpcsubnetV2";
export type NetworkingVpcsubnetV2 = import("./networkingVpcsubnetV2").NetworkingVpcsubnetV2;
export const NetworkingVpcsubnetV2: typeof import("./networkingVpcsubnetV2").NetworkingVpcsubnetV2 = null as any;
utilities.lazyLoad(exports, ["NetworkingVpcsubnetV2"], () => require("./networkingVpcsubnetV2"));

export { ObjectstorageContainerV1Args, ObjectstorageContainerV1State } from "./objectstorageContainerV1";
export type ObjectstorageContainerV1 = import("./objectstorageContainerV1").ObjectstorageContainerV1;
export const ObjectstorageContainerV1: typeof import("./objectstorageContainerV1").ObjectstorageContainerV1 = null as any;
utilities.lazyLoad(exports, ["ObjectstorageContainerV1"], () => require("./objectstorageContainerV1"));

export { ObjectstorageObjectV1Args, ObjectstorageObjectV1State } from "./objectstorageObjectV1";
export type ObjectstorageObjectV1 = import("./objectstorageObjectV1").ObjectstorageObjectV1;
export const ObjectstorageObjectV1: typeof import("./objectstorageObjectV1").ObjectstorageObjectV1 = null as any;
utilities.lazyLoad(exports, ["ObjectstorageObjectV1"], () => require("./objectstorageObjectV1"));

export { ObjectstorageTempurlV1Args, ObjectstorageTempurlV1State } from "./objectstorageTempurlV1";
export type ObjectstorageTempurlV1 = import("./objectstorageTempurlV1").ObjectstorageTempurlV1;
export const ObjectstorageTempurlV1: typeof import("./objectstorageTempurlV1").ObjectstorageTempurlV1 = null as any;
utilities.lazyLoad(exports, ["ObjectstorageTempurlV1"], () => require("./objectstorageTempurlV1"));

export { OrchestrationStackV1Args, OrchestrationStackV1State } from "./orchestrationStackV1";
export type OrchestrationStackV1 = import("./orchestrationStackV1").OrchestrationStackV1;
export const OrchestrationStackV1: typeof import("./orchestrationStackV1").OrchestrationStackV1 = null as any;
utilities.lazyLoad(exports, ["OrchestrationStackV1"], () => require("./orchestrationStackV1"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SharedfilesystemSecurityserviceV2Args, SharedfilesystemSecurityserviceV2State } from "./sharedfilesystemSecurityserviceV2";
export type SharedfilesystemSecurityserviceV2 = import("./sharedfilesystemSecurityserviceV2").SharedfilesystemSecurityserviceV2;
export const SharedfilesystemSecurityserviceV2: typeof import("./sharedfilesystemSecurityserviceV2").SharedfilesystemSecurityserviceV2 = null as any;
utilities.lazyLoad(exports, ["SharedfilesystemSecurityserviceV2"], () => require("./sharedfilesystemSecurityserviceV2"));

export { SharedfilesystemShareAccessV2Args, SharedfilesystemShareAccessV2State } from "./sharedfilesystemShareAccessV2";
export type SharedfilesystemShareAccessV2 = import("./sharedfilesystemShareAccessV2").SharedfilesystemShareAccessV2;
export const SharedfilesystemShareAccessV2: typeof import("./sharedfilesystemShareAccessV2").SharedfilesystemShareAccessV2 = null as any;
utilities.lazyLoad(exports, ["SharedfilesystemShareAccessV2"], () => require("./sharedfilesystemShareAccessV2"));

export { SharedfilesystemShareV2Args, SharedfilesystemShareV2State } from "./sharedfilesystemShareV2";
export type SharedfilesystemShareV2 = import("./sharedfilesystemShareV2").SharedfilesystemShareV2;
export const SharedfilesystemShareV2: typeof import("./sharedfilesystemShareV2").SharedfilesystemShareV2 = null as any;
utilities.lazyLoad(exports, ["SharedfilesystemShareV2"], () => require("./sharedfilesystemShareV2"));

export { SharedfilesystemSharenetworkV2Args, SharedfilesystemSharenetworkV2State } from "./sharedfilesystemSharenetworkV2";
export type SharedfilesystemSharenetworkV2 = import("./sharedfilesystemSharenetworkV2").SharedfilesystemSharenetworkV2;
export const SharedfilesystemSharenetworkV2: typeof import("./sharedfilesystemSharenetworkV2").SharedfilesystemSharenetworkV2 = null as any;
utilities.lazyLoad(exports, ["SharedfilesystemSharenetworkV2"], () => require("./sharedfilesystemSharenetworkV2"));

export { VpnaasEndpointGroupV2Args, VpnaasEndpointGroupV2State } from "./vpnaasEndpointGroupV2";
export type VpnaasEndpointGroupV2 = import("./vpnaasEndpointGroupV2").VpnaasEndpointGroupV2;
export const VpnaasEndpointGroupV2: typeof import("./vpnaasEndpointGroupV2").VpnaasEndpointGroupV2 = null as any;
utilities.lazyLoad(exports, ["VpnaasEndpointGroupV2"], () => require("./vpnaasEndpointGroupV2"));

export { VpnaasIkePolicyV2Args, VpnaasIkePolicyV2State } from "./vpnaasIkePolicyV2";
export type VpnaasIkePolicyV2 = import("./vpnaasIkePolicyV2").VpnaasIkePolicyV2;
export const VpnaasIkePolicyV2: typeof import("./vpnaasIkePolicyV2").VpnaasIkePolicyV2 = null as any;
utilities.lazyLoad(exports, ["VpnaasIkePolicyV2"], () => require("./vpnaasIkePolicyV2"));

export { VpnaasIpsecPolicyV2Args, VpnaasIpsecPolicyV2State } from "./vpnaasIpsecPolicyV2";
export type VpnaasIpsecPolicyV2 = import("./vpnaasIpsecPolicyV2").VpnaasIpsecPolicyV2;
export const VpnaasIpsecPolicyV2: typeof import("./vpnaasIpsecPolicyV2").VpnaasIpsecPolicyV2 = null as any;
utilities.lazyLoad(exports, ["VpnaasIpsecPolicyV2"], () => require("./vpnaasIpsecPolicyV2"));

export { VpnaasServiceV2Args, VpnaasServiceV2State } from "./vpnaasServiceV2";
export type VpnaasServiceV2 = import("./vpnaasServiceV2").VpnaasServiceV2;
export const VpnaasServiceV2: typeof import("./vpnaasServiceV2").VpnaasServiceV2 = null as any;
utilities.lazyLoad(exports, ["VpnaasServiceV2"], () => require("./vpnaasServiceV2"));

export { VpnaasSiteConnectionV2Args, VpnaasSiteConnectionV2State } from "./vpnaasSiteConnectionV2";
export type VpnaasSiteConnectionV2 = import("./vpnaasSiteConnectionV2").VpnaasSiteConnectionV2;
export const VpnaasSiteConnectionV2: typeof import("./vpnaasSiteConnectionV2").VpnaasSiteConnectionV2 = null as any;
utilities.lazyLoad(exports, ["VpnaasSiteConnectionV2"], () => require("./vpnaasSiteConnectionV2"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nhncloud:index/blockstorageQosAssociationV3:BlockstorageQosAssociationV3":
                return new BlockstorageQosAssociationV3(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageQosV3:BlockstorageQosV3":
                return new BlockstorageQosV3(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageQuotasetV2:BlockstorageQuotasetV2":
                return new BlockstorageQuotasetV2(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageQuotasetV3:BlockstorageQuotasetV3":
                return new BlockstorageQuotasetV3(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageVolumeAttachV2:BlockstorageVolumeAttachV2":
                return new BlockstorageVolumeAttachV2(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageVolumeAttachV3:BlockstorageVolumeAttachV3":
                return new BlockstorageVolumeAttachV3(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageVolumeTypeAccessV3:BlockstorageVolumeTypeAccessV3":
                return new BlockstorageVolumeTypeAccessV3(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageVolumeTypeV3:BlockstorageVolumeTypeV3":
                return new BlockstorageVolumeTypeV3(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageVolumeV1:BlockstorageVolumeV1":
                return new BlockstorageVolumeV1(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageVolumeV2:BlockstorageVolumeV2":
                return new BlockstorageVolumeV2(name, <any>undefined, { urn })
            case "nhncloud:index/blockstorageVolumeV3:BlockstorageVolumeV3":
                return new BlockstorageVolumeV3(name, <any>undefined, { urn })
            case "nhncloud:index/computeAggregateV2:ComputeAggregateV2":
                return new ComputeAggregateV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeFlavorAccessV2:ComputeFlavorAccessV2":
                return new ComputeFlavorAccessV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeFlavorV2:ComputeFlavorV2":
                return new ComputeFlavorV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeFloatingipAssociateV2:ComputeFloatingipAssociateV2":
                return new ComputeFloatingipAssociateV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeFloatingipV2:ComputeFloatingipV2":
                return new ComputeFloatingipV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeInstanceV2:ComputeInstanceV2":
                return new ComputeInstanceV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeInterfaceAttachV2:ComputeInterfaceAttachV2":
                return new ComputeInterfaceAttachV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeKeypairV2:ComputeKeypairV2":
                return new ComputeKeypairV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeQuotasetV2:ComputeQuotasetV2":
                return new ComputeQuotasetV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeSecgroupV2:ComputeSecgroupV2":
                return new ComputeSecgroupV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeServergroupV2:ComputeServergroupV2":
                return new ComputeServergroupV2(name, <any>undefined, { urn })
            case "nhncloud:index/computeVolumeAttachV2:ComputeVolumeAttachV2":
                return new ComputeVolumeAttachV2(name, <any>undefined, { urn })
            case "nhncloud:index/containerinfraClusterV1:ContainerinfraClusterV1":
                return new ContainerinfraClusterV1(name, <any>undefined, { urn })
            case "nhncloud:index/containerinfraClustertemplateV1:ContainerinfraClustertemplateV1":
                return new ContainerinfraClustertemplateV1(name, <any>undefined, { urn })
            case "nhncloud:index/containerinfraNodegroupV1:ContainerinfraNodegroupV1":
                return new ContainerinfraNodegroupV1(name, <any>undefined, { urn })
            case "nhncloud:index/dbConfigurationV1:DbConfigurationV1":
                return new DbConfigurationV1(name, <any>undefined, { urn })
            case "nhncloud:index/dbDatabaseV1:DbDatabaseV1":
                return new DbDatabaseV1(name, <any>undefined, { urn })
            case "nhncloud:index/dbInstanceV1:DbInstanceV1":
                return new DbInstanceV1(name, <any>undefined, { urn })
            case "nhncloud:index/dbUserV1:DbUserV1":
                return new DbUserV1(name, <any>undefined, { urn })
            case "nhncloud:index/dnsRecordsetV2:DnsRecordsetV2":
                return new DnsRecordsetV2(name, <any>undefined, { urn })
            case "nhncloud:index/dnsTransferAcceptV2:DnsTransferAcceptV2":
                return new DnsTransferAcceptV2(name, <any>undefined, { urn })
            case "nhncloud:index/dnsTransferRequestV2:DnsTransferRequestV2":
                return new DnsTransferRequestV2(name, <any>undefined, { urn })
            case "nhncloud:index/dnsZoneV2:DnsZoneV2":
                return new DnsZoneV2(name, <any>undefined, { urn })
            case "nhncloud:index/fwFirewallV1:FwFirewallV1":
                return new FwFirewallV1(name, <any>undefined, { urn })
            case "nhncloud:index/fwPolicyV1:FwPolicyV1":
                return new FwPolicyV1(name, <any>undefined, { urn })
            case "nhncloud:index/fwRuleV1:FwRuleV1":
                return new FwRuleV1(name, <any>undefined, { urn })
            case "nhncloud:index/identityApplicationCredentialV3:IdentityApplicationCredentialV3":
                return new IdentityApplicationCredentialV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityEc2CredentialV3:IdentityEc2CredentialV3":
                return new IdentityEc2CredentialV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityEndpointV3:IdentityEndpointV3":
                return new IdentityEndpointV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityGroupV3:IdentityGroupV3":
                return new IdentityGroupV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityProjectV3:IdentityProjectV3":
                return new IdentityProjectV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityRoleAssignmentV3:IdentityRoleAssignmentV3":
                return new IdentityRoleAssignmentV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityRoleV3:IdentityRoleV3":
                return new IdentityRoleV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityServiceV3:IdentityServiceV3":
                return new IdentityServiceV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityUserMembershipV3:IdentityUserMembershipV3":
                return new IdentityUserMembershipV3(name, <any>undefined, { urn })
            case "nhncloud:index/identityUserV3:IdentityUserV3":
                return new IdentityUserV3(name, <any>undefined, { urn })
            case "nhncloud:index/imagesImageAccessAcceptV2:ImagesImageAccessAcceptV2":
                return new ImagesImageAccessAcceptV2(name, <any>undefined, { urn })
            case "nhncloud:index/imagesImageAccessV2:ImagesImageAccessV2":
                return new ImagesImageAccessV2(name, <any>undefined, { urn })
            case "nhncloud:index/imagesImageV2:ImagesImageV2":
                return new ImagesImageV2(name, <any>undefined, { urn })
            case "nhncloud:index/keymanagerContainerV1:KeymanagerContainerV1":
                return new KeymanagerContainerV1(name, <any>undefined, { urn })
            case "nhncloud:index/keymanagerOrderV1:KeymanagerOrderV1":
                return new KeymanagerOrderV1(name, <any>undefined, { urn })
            case "nhncloud:index/keymanagerSecretV1:KeymanagerSecretV1":
                return new KeymanagerSecretV1(name, <any>undefined, { urn })
            case "nhncloud:index/lbL7policyV2:LbL7policyV2":
                return new LbL7policyV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbL7ruleV2:LbL7ruleV2":
                return new LbL7ruleV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbListenerV2:LbListenerV2":
                return new LbListenerV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbLoadbalancerV2:LbLoadbalancerV2":
                return new LbLoadbalancerV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbMemberV1:LbMemberV1":
                return new LbMemberV1(name, <any>undefined, { urn })
            case "nhncloud:index/lbMemberV2:LbMemberV2":
                return new LbMemberV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbMembersV2:LbMembersV2":
                return new LbMembersV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbMonitorV1:LbMonitorV1":
                return new LbMonitorV1(name, <any>undefined, { urn })
            case "nhncloud:index/lbMonitorV2:LbMonitorV2":
                return new LbMonitorV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbPoolV1:LbPoolV1":
                return new LbPoolV1(name, <any>undefined, { urn })
            case "nhncloud:index/lbPoolV2:LbPoolV2":
                return new LbPoolV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbQuotaV2:LbQuotaV2":
                return new LbQuotaV2(name, <any>undefined, { urn })
            case "nhncloud:index/lbVipV1:LbVipV1":
                return new LbVipV1(name, <any>undefined, { urn })
            case "nhncloud:index/networkingAddressscopeV2:NetworkingAddressscopeV2":
                return new NetworkingAddressscopeV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingFloatingipAssociateV2:NetworkingFloatingipAssociateV2":
                return new NetworkingFloatingipAssociateV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingFloatingipV2:NetworkingFloatingipV2":
                return new NetworkingFloatingipV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingNetworkV2:NetworkingNetworkV2":
                return new NetworkingNetworkV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingPortSecgroupAssociateV2:NetworkingPortSecgroupAssociateV2":
                return new NetworkingPortSecgroupAssociateV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingPortV2:NetworkingPortV2":
                return new NetworkingPortV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingPortforwardingV2:NetworkingPortforwardingV2":
                return new NetworkingPortforwardingV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingQosBandwidthLimitRuleV2:NetworkingQosBandwidthLimitRuleV2":
                return new NetworkingQosBandwidthLimitRuleV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingQosDscpMarkingRuleV2:NetworkingQosDscpMarkingRuleV2":
                return new NetworkingQosDscpMarkingRuleV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingQosMinimumBandwidthRuleV2:NetworkingQosMinimumBandwidthRuleV2":
                return new NetworkingQosMinimumBandwidthRuleV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingQosPolicyV2:NetworkingQosPolicyV2":
                return new NetworkingQosPolicyV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingQuotaV2:NetworkingQuotaV2":
                return new NetworkingQuotaV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingRbacPolicyV2:NetworkingRbacPolicyV2":
                return new NetworkingRbacPolicyV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingRouterInterfaceV2:NetworkingRouterInterfaceV2":
                return new NetworkingRouterInterfaceV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingRouterRouteV2:NetworkingRouterRouteV2":
                return new NetworkingRouterRouteV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingRouterV2:NetworkingRouterV2":
                return new NetworkingRouterV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingRoutingtableV2:NetworkingRoutingtableV2":
                return new NetworkingRoutingtableV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingSecgroupRuleV2:NetworkingSecgroupRuleV2":
                return new NetworkingSecgroupRuleV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingSecgroupV2:NetworkingSecgroupV2":
                return new NetworkingSecgroupV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingSubnetRouteV2:NetworkingSubnetRouteV2":
                return new NetworkingSubnetRouteV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingSubnetV2:NetworkingSubnetV2":
                return new NetworkingSubnetV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingSubnetpoolV2:NetworkingSubnetpoolV2":
                return new NetworkingSubnetpoolV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingTrunkV2:NetworkingTrunkV2":
                return new NetworkingTrunkV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingVpcV2:NetworkingVpcV2":
                return new NetworkingVpcV2(name, <any>undefined, { urn })
            case "nhncloud:index/networkingVpcsubnetV2:NetworkingVpcsubnetV2":
                return new NetworkingVpcsubnetV2(name, <any>undefined, { urn })
            case "nhncloud:index/objectstorageContainerV1:ObjectstorageContainerV1":
                return new ObjectstorageContainerV1(name, <any>undefined, { urn })
            case "nhncloud:index/objectstorageObjectV1:ObjectstorageObjectV1":
                return new ObjectstorageObjectV1(name, <any>undefined, { urn })
            case "nhncloud:index/objectstorageTempurlV1:ObjectstorageTempurlV1":
                return new ObjectstorageTempurlV1(name, <any>undefined, { urn })
            case "nhncloud:index/orchestrationStackV1:OrchestrationStackV1":
                return new OrchestrationStackV1(name, <any>undefined, { urn })
            case "nhncloud:index/sharedfilesystemSecurityserviceV2:SharedfilesystemSecurityserviceV2":
                return new SharedfilesystemSecurityserviceV2(name, <any>undefined, { urn })
            case "nhncloud:index/sharedfilesystemShareAccessV2:SharedfilesystemShareAccessV2":
                return new SharedfilesystemShareAccessV2(name, <any>undefined, { urn })
            case "nhncloud:index/sharedfilesystemShareV2:SharedfilesystemShareV2":
                return new SharedfilesystemShareV2(name, <any>undefined, { urn })
            case "nhncloud:index/sharedfilesystemSharenetworkV2:SharedfilesystemSharenetworkV2":
                return new SharedfilesystemSharenetworkV2(name, <any>undefined, { urn })
            case "nhncloud:index/vpnaasEndpointGroupV2:VpnaasEndpointGroupV2":
                return new VpnaasEndpointGroupV2(name, <any>undefined, { urn })
            case "nhncloud:index/vpnaasIkePolicyV2:VpnaasIkePolicyV2":
                return new VpnaasIkePolicyV2(name, <any>undefined, { urn })
            case "nhncloud:index/vpnaasIpsecPolicyV2:VpnaasIpsecPolicyV2":
                return new VpnaasIpsecPolicyV2(name, <any>undefined, { urn })
            case "nhncloud:index/vpnaasServiceV2:VpnaasServiceV2":
                return new VpnaasServiceV2(name, <any>undefined, { urn })
            case "nhncloud:index/vpnaasSiteConnectionV2:VpnaasSiteConnectionV2":
                return new VpnaasSiteConnectionV2(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageQosAssociationV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageQosV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageQuotasetV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageQuotasetV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageVolumeAttachV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageVolumeAttachV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageVolumeTypeAccessV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageVolumeTypeV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageVolumeV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageVolumeV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/blockstorageVolumeV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeAggregateV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeFlavorAccessV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeFlavorV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeFloatingipAssociateV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeFloatingipV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeInstanceV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeInterfaceAttachV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeKeypairV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeQuotasetV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeSecgroupV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeServergroupV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/computeVolumeAttachV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/containerinfraClusterV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/containerinfraClustertemplateV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/containerinfraNodegroupV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dbConfigurationV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dbDatabaseV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dbInstanceV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dbUserV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dnsRecordsetV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dnsTransferAcceptV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dnsTransferRequestV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/dnsZoneV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/fwFirewallV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/fwPolicyV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/fwRuleV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityApplicationCredentialV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityEc2CredentialV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityEndpointV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityGroupV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityProjectV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityRoleAssignmentV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityRoleV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityServiceV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityUserMembershipV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/identityUserV3", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/imagesImageAccessAcceptV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/imagesImageAccessV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/imagesImageV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/keymanagerContainerV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/keymanagerOrderV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/keymanagerSecretV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbL7policyV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbL7ruleV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbListenerV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbLoadbalancerV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbMemberV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbMemberV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbMembersV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbMonitorV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbMonitorV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbPoolV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbPoolV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbQuotaV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/lbVipV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingAddressscopeV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingFloatingipAssociateV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingFloatingipV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingNetworkV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingPortSecgroupAssociateV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingPortV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingPortforwardingV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingQosBandwidthLimitRuleV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingQosDscpMarkingRuleV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingQosMinimumBandwidthRuleV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingQosPolicyV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingQuotaV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingRbacPolicyV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingRouterInterfaceV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingRouterRouteV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingRouterV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingRoutingtableV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingSecgroupRuleV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingSecgroupV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingSubnetRouteV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingSubnetV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingSubnetpoolV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingTrunkV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingVpcV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/networkingVpcsubnetV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/objectstorageContainerV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/objectstorageObjectV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/objectstorageTempurlV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/orchestrationStackV1", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/sharedfilesystemSecurityserviceV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/sharedfilesystemShareAccessV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/sharedfilesystemShareV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/sharedfilesystemSharenetworkV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/vpnaasEndpointGroupV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/vpnaasIkePolicyV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/vpnaasIpsecPolicyV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/vpnaasServiceV2", _module)
pulumi.runtime.registerResourceModule("nhncloud", "index/vpnaasSiteConnectionV2", _module)
pulumi.runtime.registerResourcePackage("nhncloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nhncloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
