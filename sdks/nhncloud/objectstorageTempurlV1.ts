// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ObjectstorageTempurlV1 extends pulumi.CustomResource {
    /**
     * Get an existing ObjectstorageTempurlV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectstorageTempurlV1State, opts?: pulumi.CustomResourceOptions): ObjectstorageTempurlV1 {
        return new ObjectstorageTempurlV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/objectstorageTempurlV1:ObjectstorageTempurlV1';

    /**
     * Returns true if the given object is an instance of ObjectstorageTempurlV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectstorageTempurlV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectstorageTempurlV1.__pulumiType;
    }

    public readonly container!: pulumi.Output<string>;
    public readonly method!: pulumi.Output<string | undefined>;
    public readonly object!: pulumi.Output<string>;
    public readonly regenerate!: pulumi.Output<boolean | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly split!: pulumi.Output<string | undefined>;
    public readonly ttl!: pulumi.Output<number>;
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a ObjectstorageTempurlV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectstorageTempurlV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectstorageTempurlV1Args | ObjectstorageTempurlV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectstorageTempurlV1State | undefined;
            resourceInputs["container"] = state ? state.container : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["object"] = state ? state.object : undefined;
            resourceInputs["regenerate"] = state ? state.regenerate : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["split"] = state ? state.split : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ObjectstorageTempurlV1Args | undefined;
            if ((!args || args.container === undefined) && !opts.urn) {
                throw new Error("Missing required property 'container'");
            }
            if ((!args || args.object === undefined) && !opts.urn) {
                throw new Error("Missing required property 'object'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            resourceInputs["container"] = args ? args.container : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["object"] = args ? args.object : undefined;
            resourceInputs["regenerate"] = args ? args.regenerate : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["split"] = args ? args.split : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["url"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectstorageTempurlV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectstorageTempurlV1 resources.
 */
export interface ObjectstorageTempurlV1State {
    container?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    object?: pulumi.Input<string>;
    regenerate?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    split?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectstorageTempurlV1 resource.
 */
export interface ObjectstorageTempurlV1Args {
    container: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    object: pulumi.Input<string>;
    regenerate?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    split?: pulumi.Input<string>;
    ttl: pulumi.Input<number>;
}
