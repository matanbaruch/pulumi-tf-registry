// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkingPortV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingPortV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingPortV2State, opts?: pulumi.CustomResourceOptions): NetworkingPortV2 {
        return new NetworkingPortV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/networkingPortV2:NetworkingPortV2';

    /**
     * Returns true if the given object is an instance of NetworkingPortV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingPortV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingPortV2.__pulumiType;
    }

    public readonly adminStateUp!: pulumi.Output<boolean>;
    public /*out*/ readonly allFixedIps!: pulumi.Output<string[]>;
    public /*out*/ readonly allSecurityGroupIds!: pulumi.Output<string[]>;
    public /*out*/ readonly allTags!: pulumi.Output<string[]>;
    public readonly allowedAddressPairs!: pulumi.Output<outputs.NetworkingPortV2AllowedAddressPair[] | undefined>;
    public readonly binding!: pulumi.Output<outputs.NetworkingPortV2Binding | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceId!: pulumi.Output<string>;
    public readonly deviceOwner!: pulumi.Output<string>;
    public /*out*/ readonly dnsAssignments!: pulumi.Output<{[key: string]: string}[]>;
    public readonly dnsName!: pulumi.Output<string>;
    public readonly extraDhcpOptions!: pulumi.Output<outputs.NetworkingPortV2ExtraDhcpOption[] | undefined>;
    public readonly fixedIps!: pulumi.Output<outputs.NetworkingPortV2FixedIp[] | undefined>;
    public readonly macAddress!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkId!: pulumi.Output<string>;
    public readonly noFixedIp!: pulumi.Output<boolean | undefined>;
    public readonly noSecurityGroups!: pulumi.Output<boolean | undefined>;
    public readonly portSecurityEnabled!: pulumi.Output<boolean>;
    public readonly qosPolicyId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkingPortV2Timeouts | undefined>;
    public readonly valueSpecs!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a NetworkingPortV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingPortV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingPortV2Args | NetworkingPortV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingPortV2State | undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["allFixedIps"] = state ? state.allFixedIps : undefined;
            resourceInputs["allSecurityGroupIds"] = state ? state.allSecurityGroupIds : undefined;
            resourceInputs["allTags"] = state ? state.allTags : undefined;
            resourceInputs["allowedAddressPairs"] = state ? state.allowedAddressPairs : undefined;
            resourceInputs["binding"] = state ? state.binding : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["deviceOwner"] = state ? state.deviceOwner : undefined;
            resourceInputs["dnsAssignments"] = state ? state.dnsAssignments : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["extraDhcpOptions"] = state ? state.extraDhcpOptions : undefined;
            resourceInputs["fixedIps"] = state ? state.fixedIps : undefined;
            resourceInputs["macAddress"] = state ? state.macAddress : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["noFixedIp"] = state ? state.noFixedIp : undefined;
            resourceInputs["noSecurityGroups"] = state ? state.noSecurityGroups : undefined;
            resourceInputs["portSecurityEnabled"] = state ? state.portSecurityEnabled : undefined;
            resourceInputs["qosPolicyId"] = state ? state.qosPolicyId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        } else {
            const args = argsOrState as NetworkingPortV2Args | undefined;
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["allowedAddressPairs"] = args ? args.allowedAddressPairs : undefined;
            resourceInputs["binding"] = args ? args.binding : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["deviceOwner"] = args ? args.deviceOwner : undefined;
            resourceInputs["dnsName"] = args ? args.dnsName : undefined;
            resourceInputs["extraDhcpOptions"] = args ? args.extraDhcpOptions : undefined;
            resourceInputs["fixedIps"] = args ? args.fixedIps : undefined;
            resourceInputs["macAddress"] = args ? args.macAddress : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["noFixedIp"] = args ? args.noFixedIp : undefined;
            resourceInputs["noSecurityGroups"] = args ? args.noSecurityGroups : undefined;
            resourceInputs["portSecurityEnabled"] = args ? args.portSecurityEnabled : undefined;
            resourceInputs["qosPolicyId"] = args ? args.qosPolicyId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
            resourceInputs["allFixedIps"] = undefined /*out*/;
            resourceInputs["allSecurityGroupIds"] = undefined /*out*/;
            resourceInputs["allTags"] = undefined /*out*/;
            resourceInputs["dnsAssignments"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingPortV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkingPortV2 resources.
 */
export interface NetworkingPortV2State {
    adminStateUp?: pulumi.Input<boolean>;
    allFixedIps?: pulumi.Input<pulumi.Input<string>[]>;
    allSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    allTags?: pulumi.Input<pulumi.Input<string>[]>;
    allowedAddressPairs?: pulumi.Input<pulumi.Input<inputs.NetworkingPortV2AllowedAddressPair>[]>;
    binding?: pulumi.Input<inputs.NetworkingPortV2Binding>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    deviceOwner?: pulumi.Input<string>;
    dnsAssignments?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    dnsName?: pulumi.Input<string>;
    extraDhcpOptions?: pulumi.Input<pulumi.Input<inputs.NetworkingPortV2ExtraDhcpOption>[]>;
    fixedIps?: pulumi.Input<pulumi.Input<inputs.NetworkingPortV2FixedIp>[]>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    noFixedIp?: pulumi.Input<boolean>;
    noSecurityGroups?: pulumi.Input<boolean>;
    portSecurityEnabled?: pulumi.Input<boolean>;
    qosPolicyId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingPortV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a NetworkingPortV2 resource.
 */
export interface NetworkingPortV2Args {
    adminStateUp?: pulumi.Input<boolean>;
    allowedAddressPairs?: pulumi.Input<pulumi.Input<inputs.NetworkingPortV2AllowedAddressPair>[]>;
    binding?: pulumi.Input<inputs.NetworkingPortV2Binding>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    deviceOwner?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    extraDhcpOptions?: pulumi.Input<pulumi.Input<inputs.NetworkingPortV2ExtraDhcpOption>[]>;
    fixedIps?: pulumi.Input<pulumi.Input<inputs.NetworkingPortV2FixedIp>[]>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    noFixedIp?: pulumi.Input<boolean>;
    noSecurityGroups?: pulumi.Input<boolean>;
    portSecurityEnabled?: pulumi.Input<boolean>;
    qosPolicyId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingPortV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
