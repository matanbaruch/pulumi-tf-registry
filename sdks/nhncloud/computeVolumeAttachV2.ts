// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ComputeVolumeAttachV2 extends pulumi.CustomResource {
    /**
     * Get an existing ComputeVolumeAttachV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeVolumeAttachV2State, opts?: pulumi.CustomResourceOptions): ComputeVolumeAttachV2 {
        return new ComputeVolumeAttachV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/computeVolumeAttachV2:ComputeVolumeAttachV2';

    /**
     * Returns true if the given object is an instance of ComputeVolumeAttachV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeVolumeAttachV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeVolumeAttachV2.__pulumiType;
    }

    public readonly device!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly multiattach!: pulumi.Output<boolean | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ComputeVolumeAttachV2Timeouts | undefined>;
    public readonly vendorOptions!: pulumi.Output<outputs.ComputeVolumeAttachV2VendorOptions | undefined>;
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a ComputeVolumeAttachV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeVolumeAttachV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeVolumeAttachV2Args | ComputeVolumeAttachV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeVolumeAttachV2State | undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["multiattach"] = state ? state.multiattach : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vendorOptions"] = state ? state.vendorOptions : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as ComputeVolumeAttachV2Args | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["multiattach"] = args ? args.multiattach : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vendorOptions"] = args ? args.vendorOptions : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeVolumeAttachV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeVolumeAttachV2 resources.
 */
export interface ComputeVolumeAttachV2State {
    device?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    multiattach?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeVolumeAttachV2Timeouts>;
    vendorOptions?: pulumi.Input<inputs.ComputeVolumeAttachV2VendorOptions>;
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeVolumeAttachV2 resource.
 */
export interface ComputeVolumeAttachV2Args {
    device?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    multiattach?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ComputeVolumeAttachV2Timeouts>;
    vendorOptions?: pulumi.Input<inputs.ComputeVolumeAttachV2VendorOptions>;
    volumeId: pulumi.Input<string>;
}
