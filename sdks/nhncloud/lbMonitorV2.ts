// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbMonitorV2 extends pulumi.CustomResource {
    /**
     * Get an existing LbMonitorV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbMonitorV2State, opts?: pulumi.CustomResourceOptions): LbMonitorV2 {
        return new LbMonitorV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/lbMonitorV2:LbMonitorV2';

    /**
     * Returns true if the given object is an instance of LbMonitorV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbMonitorV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbMonitorV2.__pulumiType;
    }

    public readonly adminStateUp!: pulumi.Output<boolean | undefined>;
    public readonly delay!: pulumi.Output<number>;
    public readonly expectedCodes!: pulumi.Output<string>;
    public readonly httpMethod!: pulumi.Output<string>;
    public readonly maxRetries!: pulumi.Output<number>;
    public readonly maxRetriesDown!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly poolId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.LbMonitorV2Timeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly urlPath!: pulumi.Output<string>;

    /**
     * Create a LbMonitorV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbMonitorV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbMonitorV2Args | LbMonitorV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbMonitorV2State | undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["expectedCodes"] = state ? state.expectedCodes : undefined;
            resourceInputs["httpMethod"] = state ? state.httpMethod : undefined;
            resourceInputs["maxRetries"] = state ? state.maxRetries : undefined;
            resourceInputs["maxRetriesDown"] = state ? state.maxRetriesDown : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["urlPath"] = state ? state.urlPath : undefined;
        } else {
            const args = argsOrState as LbMonitorV2Args | undefined;
            if ((!args || args.delay === undefined) && !opts.urn) {
                throw new Error("Missing required property 'delay'");
            }
            if ((!args || args.maxRetries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxRetries'");
            }
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["expectedCodes"] = args ? args.expectedCodes : undefined;
            resourceInputs["httpMethod"] = args ? args.httpMethod : undefined;
            resourceInputs["maxRetries"] = args ? args.maxRetries : undefined;
            resourceInputs["maxRetriesDown"] = args ? args.maxRetriesDown : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["urlPath"] = args ? args.urlPath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbMonitorV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbMonitorV2 resources.
 */
export interface LbMonitorV2State {
    adminStateUp?: pulumi.Input<boolean>;
    delay?: pulumi.Input<number>;
    expectedCodes?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    maxRetries?: pulumi.Input<number>;
    maxRetriesDown?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    poolId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LbMonitorV2Timeouts>;
    type?: pulumi.Input<string>;
    urlPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LbMonitorV2 resource.
 */
export interface LbMonitorV2Args {
    adminStateUp?: pulumi.Input<boolean>;
    delay: pulumi.Input<number>;
    expectedCodes?: pulumi.Input<string>;
    httpMethod?: pulumi.Input<string>;
    maxRetries: pulumi.Input<number>;
    maxRetriesDown?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    poolId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeout: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.LbMonitorV2Timeouts>;
    type: pulumi.Input<string>;
    urlPath?: pulumi.Input<string>;
}
