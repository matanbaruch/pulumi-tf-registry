// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockstorageQuotasetV3 extends pulumi.CustomResource {
    /**
     * Get an existing BlockstorageQuotasetV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockstorageQuotasetV3State, opts?: pulumi.CustomResourceOptions): BlockstorageQuotasetV3 {
        return new BlockstorageQuotasetV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/blockstorageQuotasetV3:BlockstorageQuotasetV3';

    /**
     * Returns true if the given object is an instance of BlockstorageQuotasetV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockstorageQuotasetV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockstorageQuotasetV3.__pulumiType;
    }

    public readonly backupGigabytes!: pulumi.Output<number>;
    public readonly backups!: pulumi.Output<number>;
    public readonly gigabytes!: pulumi.Output<number>;
    public readonly groups!: pulumi.Output<number>;
    public readonly perVolumeGigabytes!: pulumi.Output<number>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly snapshots!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.BlockstorageQuotasetV3Timeouts | undefined>;
    public readonly volumeTypeQuota!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly volumes!: pulumi.Output<number>;

    /**
     * Create a BlockstorageQuotasetV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockstorageQuotasetV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockstorageQuotasetV3Args | BlockstorageQuotasetV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockstorageQuotasetV3State | undefined;
            resourceInputs["backupGigabytes"] = state ? state.backupGigabytes : undefined;
            resourceInputs["backups"] = state ? state.backups : undefined;
            resourceInputs["gigabytes"] = state ? state.gigabytes : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["perVolumeGigabytes"] = state ? state.perVolumeGigabytes : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["snapshots"] = state ? state.snapshots : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeTypeQuota"] = state ? state.volumeTypeQuota : undefined;
            resourceInputs["volumes"] = state ? state.volumes : undefined;
        } else {
            const args = argsOrState as BlockstorageQuotasetV3Args | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["backupGigabytes"] = args ? args.backupGigabytes : undefined;
            resourceInputs["backups"] = args ? args.backups : undefined;
            resourceInputs["gigabytes"] = args ? args.gigabytes : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["perVolumeGigabytes"] = args ? args.perVolumeGigabytes : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["snapshots"] = args ? args.snapshots : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeTypeQuota"] = args ? args.volumeTypeQuota : undefined;
            resourceInputs["volumes"] = args ? args.volumes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockstorageQuotasetV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockstorageQuotasetV3 resources.
 */
export interface BlockstorageQuotasetV3State {
    backupGigabytes?: pulumi.Input<number>;
    backups?: pulumi.Input<number>;
    gigabytes?: pulumi.Input<number>;
    groups?: pulumi.Input<number>;
    perVolumeGigabytes?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    snapshots?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.BlockstorageQuotasetV3Timeouts>;
    volumeTypeQuota?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    volumes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BlockstorageQuotasetV3 resource.
 */
export interface BlockstorageQuotasetV3Args {
    backupGigabytes?: pulumi.Input<number>;
    backups?: pulumi.Input<number>;
    gigabytes?: pulumi.Input<number>;
    groups?: pulumi.Input<number>;
    perVolumeGigabytes?: pulumi.Input<number>;
    projectId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    snapshots?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.BlockstorageQuotasetV3Timeouts>;
    volumeTypeQuota?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    volumes?: pulumi.Input<number>;
}
