// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbVipV1 extends pulumi.CustomResource {
    /**
     * Get an existing LbVipV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbVipV1State, opts?: pulumi.CustomResourceOptions): LbVipV1 {
        return new LbVipV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/lbVipV1:LbVipV1';

    /**
     * Returns true if the given object is an instance of LbVipV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbVipV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbVipV1.__pulumiType;
    }

    public readonly address!: pulumi.Output<string>;
    public readonly adminStateUp!: pulumi.Output<boolean>;
    public readonly connLimit!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string>;
    public readonly floatingIp!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly persistence!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly poolId!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public /*out*/ readonly portId!: pulumi.Output<string>;
    public readonly protocol!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbVipV1Timeouts | undefined>;

    /**
     * Create a LbVipV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbVipV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbVipV1Args | LbVipV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbVipV1State | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["adminStateUp"] = state ? state.adminStateUp : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["persistence"] = state ? state.persistence : undefined;
            resourceInputs["poolId"] = state ? state.poolId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portId"] = state ? state.portId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LbVipV1Args | undefined;
            if ((!args || args.poolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["adminStateUp"] = args ? args.adminStateUp : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistence"] = args ? args.persistence : undefined;
            resourceInputs["poolId"] = args ? args.poolId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["portId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbVipV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbVipV1 resources.
 */
export interface LbVipV1State {
    address?: pulumi.Input<string>;
    adminStateUp?: pulumi.Input<boolean>;
    connLimit?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    floatingIp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    persistence?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    poolId?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    portId?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbVipV1Timeouts>;
}

/**
 * The set of arguments for constructing a LbVipV1 resource.
 */
export interface LbVipV1Args {
    address?: pulumi.Input<string>;
    adminStateUp?: pulumi.Input<boolean>;
    connLimit?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    floatingIp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    persistence?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    poolId: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbVipV1Timeouts>;
}
