// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObjectstorageContainerV1 extends pulumi.CustomResource {
    /**
     * Get an existing ObjectstorageContainerV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectstorageContainerV1State, opts?: pulumi.CustomResourceOptions): ObjectstorageContainerV1 {
        return new ObjectstorageContainerV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/objectstorageContainerV1:ObjectstorageContainerV1';

    /**
     * Returns true if the given object is an instance of ObjectstorageContainerV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectstorageContainerV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectstorageContainerV1.__pulumiType;
    }

    public readonly containerRead!: pulumi.Output<string | undefined>;
    public readonly containerSyncKey!: pulumi.Output<string | undefined>;
    public readonly containerSyncTo!: pulumi.Output<string | undefined>;
    public readonly containerWrite!: pulumi.Output<string | undefined>;
    public readonly contentType!: pulumi.Output<string | undefined>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly storagePolicy!: pulumi.Output<string>;
    public readonly versioning!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly versioningLegacy!: pulumi.Output<outputs.ObjectstorageContainerV1VersioningLegacy | undefined>;

    /**
     * Create a ObjectstorageContainerV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ObjectstorageContainerV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectstorageContainerV1Args | ObjectstorageContainerV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectstorageContainerV1State | undefined;
            resourceInputs["containerRead"] = state ? state.containerRead : undefined;
            resourceInputs["containerSyncKey"] = state ? state.containerSyncKey : undefined;
            resourceInputs["containerSyncTo"] = state ? state.containerSyncTo : undefined;
            resourceInputs["containerWrite"] = state ? state.containerWrite : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["storagePolicy"] = state ? state.storagePolicy : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
            resourceInputs["versioningLegacy"] = state ? state.versioningLegacy : undefined;
        } else {
            const args = argsOrState as ObjectstorageContainerV1Args | undefined;
            resourceInputs["containerRead"] = args ? args.containerRead : undefined;
            resourceInputs["containerSyncKey"] = args ? args.containerSyncKey : undefined;
            resourceInputs["containerSyncTo"] = args ? args.containerSyncTo : undefined;
            resourceInputs["containerWrite"] = args ? args.containerWrite : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["storagePolicy"] = args ? args.storagePolicy : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["versioningLegacy"] = args ? args.versioningLegacy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObjectstorageContainerV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ObjectstorageContainerV1 resources.
 */
export interface ObjectstorageContainerV1State {
    containerRead?: pulumi.Input<string>;
    containerSyncKey?: pulumi.Input<string>;
    containerSyncTo?: pulumi.Input<string>;
    containerWrite?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    storagePolicy?: pulumi.Input<string>;
    versioning?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    versioningLegacy?: pulumi.Input<inputs.ObjectstorageContainerV1VersioningLegacy>;
}

/**
 * The set of arguments for constructing a ObjectstorageContainerV1 resource.
 */
export interface ObjectstorageContainerV1Args {
    containerRead?: pulumi.Input<string>;
    containerSyncKey?: pulumi.Input<string>;
    containerSyncTo?: pulumi.Input<string>;
    containerWrite?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    storagePolicy?: pulumi.Input<string>;
    versioning?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    versioningLegacy?: pulumi.Input<inputs.ObjectstorageContainerV1VersioningLegacy>;
}
