// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BlockstorageQuotasetV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BlockstorageQuotasetV3Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BlockstorageVolumeAttachV2Timeouts {
    create?: string;
    delete?: string;
}

export interface BlockstorageVolumeAttachV3Timeouts {
    create?: string;
    delete?: string;
}

export interface BlockstorageVolumeV1Attachment {
    device: string;
    id: string;
    instanceId: string;
}

export interface BlockstorageVolumeV1Timeouts {
    create?: string;
    delete?: string;
}

export interface BlockstorageVolumeV2Attachment {
    device: string;
    id: string;
    instanceId: string;
}

export interface BlockstorageVolumeV2NhnEncryption {
    skmAppkey: string;
    skmKeyId: string;
}

export interface BlockstorageVolumeV2SchedulerHint {
    additionalProperties?: {[key: string]: string};
    differentHosts?: string[];
    localToInstance?: string;
    query?: string;
    sameHosts?: string[];
}

export interface BlockstorageVolumeV2Timeouts {
    create?: string;
    delete?: string;
}

export interface BlockstorageVolumeV3Attachment {
    device: string;
    id: string;
    instanceId: string;
}

export interface BlockstorageVolumeV3SchedulerHint {
    additionalProperties?: {[key: string]: string};
    differentHosts?: string[];
    localToInstance?: string;
    query?: string;
    sameHosts?: string[];
}

export interface BlockstorageVolumeV3Timeouts {
    create?: string;
    delete?: string;
}

export interface ComputeAggregateV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ComputeFloatingipAssociateV2Timeouts {
    create?: string;
}

export interface ComputeInstanceV2BlockDevice {
    bootIndex?: number;
    deleteOnTermination?: boolean;
    destinationType?: string;
    deviceType?: string;
    diskBus?: string;
    guestFormat?: string;
    nhnEncryptions?: outputs.ComputeInstanceV2BlockDeviceNhnEncryption[];
    sourceType: string;
    test?: string;
    uuid?: string;
    volumeSize?: number;
    volumeType?: string;
}

export interface ComputeInstanceV2BlockDeviceNhnEncryption {
    skmAppkey: string;
    skmKeyId: string;
}

export interface ComputeInstanceV2Network {
    accessNetwork?: boolean;
    fixedIpV4: string;
    fixedIpV6: string;
    /**
     * @deprecated Deprecated
     */
    floatingIp: string;
    mac: string;
    name: string;
    port: string;
    uuid: string;
}

export interface ComputeInstanceV2Personality {
    content: string;
    file: string;
}

export interface ComputeInstanceV2SchedulerHint {
    additionalProperties?: {[key: string]: string};
    buildNearHostIp?: string;
    differentCells?: string[];
    differentHosts?: string[];
    group?: string;
    queries?: string[];
    sameHosts?: string[];
    targetCell?: string;
}

export interface ComputeInstanceV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ComputeInstanceV2VendorOptions {
    detachPortsBeforeDestroy?: boolean;
    ignoreResizeConfirmation?: boolean;
}

export interface ComputeInstanceV2Volume {
    device: string;
    id: string;
    volumeId: string;
}

export interface ComputeInterfaceAttachV2Timeouts {
    create?: string;
    delete?: string;
}

export interface ComputeQuotasetV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ComputeSecgroupV2Rule {
    cidr?: string;
    fromGroupId?: string;
    fromPort: number;
    id: string;
    ipProtocol: string;
    self?: boolean;
    toPort: number;
}

export interface ComputeSecgroupV2Timeouts {
    delete?: string;
}

export interface ComputeServergroupV2Rules {
    maxServerPerHost?: number;
}

export interface ComputeVolumeAttachV2Timeouts {
    create?: string;
    delete?: string;
}

export interface ComputeVolumeAttachV2VendorOptions {
    ignoreVolumeConfirmation?: boolean;
}

export interface ContainerinfraClusterV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ContainerinfraClustertemplateV1Timeouts {
    create?: string;
    delete?: string;
}

export interface ContainerinfraNodegroupV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DbConfigurationV1Configuration {
    name: string;
    stringType?: boolean;
    value: string;
}

export interface DbConfigurationV1Datastore {
    type: string;
    version: string;
}

export interface DbConfigurationV1Timeouts {
    create?: string;
    delete?: string;
}

export interface DbDatabaseV1Timeouts {
    create?: string;
    delete?: string;
}

export interface DbInstanceV1Database {
    charset?: string;
    collate?: string;
    name: string;
}

export interface DbInstanceV1Datastore {
    type: string;
    version: string;
}

export interface DbInstanceV1Network {
    fixedIpV4?: string;
    fixedIpV6?: string;
    port?: string;
    uuid?: string;
}

export interface DbInstanceV1Timeouts {
    create?: string;
    delete?: string;
}

export interface DbInstanceV1User {
    databases?: string[];
    host?: string;
    name: string;
    password?: string;
}

export interface DbUserV1Timeouts {
    create?: string;
    delete?: string;
}

export interface DnsRecordsetV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsTransferAcceptV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsTransferRequestV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface DnsZoneV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FwFirewallV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FwPolicyV1Timeouts {
    create?: string;
    delete?: string;
}

export interface GetComputeInstanceV2Network {
    fixedIpV4: string;
    fixedIpV6: string;
    mac: string;
    name: string;
    port: string;
    uuid: string;
}

export interface GetIdentityAuthScopeV3Role {
    roleId: string;
    roleName: string;
}

export interface GetIdentityAuthScopeV3ServiceCatalog {
    endpoints: outputs.GetIdentityAuthScopeV3ServiceCatalogEndpoint[];
    id: string;
    name: string;
    type: string;
}

export interface GetIdentityAuthScopeV3ServiceCatalogEndpoint {
    id: string;
    interface: string;
    region: string;
    regionId: string;
    url: string;
}

export interface GetKeymanagerContainerV1Acl {
    reads: outputs.GetKeymanagerContainerV1AclRead[];
}

export interface GetKeymanagerContainerV1AclRead {
    createdAt: string;
    projectAccess: boolean;
    updatedAt: string;
    users: string[];
}

export interface GetKeymanagerContainerV1Consumer {
    name: string;
    url: string;
}

export interface GetKeymanagerContainerV1SecretRef {
    name: string;
    secretRef: string;
}

export interface GetKeymanagerSecretV1Acl {
    reads: outputs.GetKeymanagerSecretV1AclRead[];
}

export interface GetKeymanagerSecretV1AclRead {
    createdAt: string;
    projectAccess: boolean;
    updatedAt: string;
    users: string[];
}

export interface GetNetworkingNetworkV2Segment {
    networkType: string;
    physicalNetwork: string;
    segmentationId: number;
}

export interface GetNetworkingPortV2AllowedAddressPair {
    ipAddress: string;
    macAddress: string;
}

export interface GetNetworkingPortV2Binding {
    hostId: string;
    profile: string;
    vifDetails: {[key: string]: string};
    vifType: string;
    vnicType: string;
}

export interface GetNetworkingPortV2ExtraDhcpOption {
    ipVersion: number;
    name: string;
    value: string;
}

export interface GetNetworkingRouterV2ExternalFixedIp {
    ipAddress: string;
    subnetId: string;
}

export interface GetNetworkingRoutingtableV2Route {
    cidr: string;
    gateway: string;
    gatewayId: string;
    id: string;
    mask: number;
    routingtableId: string;
    tenantId: string;
}

export interface GetNetworkingSubnetV2AllocationPool {
    end: string;
    start: string;
}

export interface GetNetworkingSubnetV2HostRoute {
    destinationCidr: string;
    nextHop: string;
}

export interface GetNetworkingTrunkV2SubPort {
    portId: string;
    segmentationId: number;
    segmentationType: string;
}

export interface GetNetworkingVpcV2Routingtable {
    defaultTable: boolean;
    id: string;
    name: string;
}

export interface GetNetworkingVpcV2Subnet {
    availableIpCount: number;
    cidr: string;
    createTime: string;
    enableDhcp: boolean;
    external: boolean;
    gateway: string;
    id: string;
    name: string;
    routes: outputs.GetNetworkingVpcV2SubnetRoute[];
    routingtableDefaultTable: boolean;
    routingtableExplicit: boolean;
    routingtableGatewayId: string;
    routingtableId: string;
    routingtableName: string;
    shared: boolean;
    state: string;
    tenantId: string;
    vpcCidrv4: string;
    vpcId: string;
    vpcName: string;
    vpcShared: boolean;
    vpcState: string;
}

export interface GetNetworkingVpcV2SubnetRoute {
    cidr: string;
    gateway: string;
    id: string;
    mask: number;
    subnetId: string;
    tenantId: string;
}

export interface GetNetworkingVpcsubnetV2Route {
    cidr: string;
    gateway: string;
    id: string;
    mask: number;
    subnetId: string;
    tenantId: string;
}

export interface GetSharedfilesystemShareV2ExportLocation {
    path: string;
    preferred: string;
}

export interface IdentityApplicationCredentialV3AccessRule {
    id: string;
    method: string;
    path: string;
    service: string;
}

export interface IdentityUserV3MultiFactorAuthRule {
    rules: string[];
}

export interface ImagesImageV2Timeouts {
    create?: string;
}

export interface KeymanagerContainerV1Acl {
    read?: outputs.KeymanagerContainerV1AclRead;
}

export interface KeymanagerContainerV1AclRead {
    createdAt: string;
    projectAccess?: boolean;
    updatedAt: string;
    users?: string[];
}

export interface KeymanagerContainerV1Consumer {
    name: string;
    url: string;
}

export interface KeymanagerContainerV1SecretRef {
    name?: string;
    secretRef: string;
}

export interface KeymanagerContainerV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface KeymanagerOrderV1Meta {
    algorithm: string;
    bitLength: number;
    expiration?: string;
    mode?: string;
    name?: string;
    payloadContentType?: string;
}

export interface KeymanagerOrderV1Timeouts {
    create?: string;
    delete?: string;
}

export interface KeymanagerSecretV1Acl {
    read?: outputs.KeymanagerSecretV1AclRead;
}

export interface KeymanagerSecretV1AclRead {
    createdAt: string;
    projectAccess?: boolean;
    updatedAt: string;
    users?: string[];
}

export interface KeymanagerSecretV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbL7policyV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbL7ruleV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbListenerV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbLoadbalancerV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbMemberV1Timeouts {
    create?: string;
    delete?: string;
}

export interface LbMemberV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbMembersV2Member {
    address: string;
    adminStateUp?: boolean;
    backup?: boolean;
    id: string;
    monitorAddress?: string;
    monitorPort?: number;
    name?: string;
    protocolPort: number;
    subnetId?: string;
    weight?: number;
}

export interface LbMembersV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbMonitorV1Timeouts {
    create?: string;
    delete?: string;
}

export interface LbMonitorV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbPoolV1Timeouts {
    create?: string;
    delete?: string;
}

export interface LbPoolV2Persistence {
    cookieName?: string;
    type: string;
}

export interface LbPoolV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbQuotaV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbVipV1Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingAddressscopeV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingFloatingipV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingNetworkV2Segment {
    networkType?: string;
    physicalNetwork?: string;
    segmentationId?: number;
}

export interface NetworkingNetworkV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingPortV2AllowedAddressPair {
    ipAddress: string;
    macAddress?: string;
}

export interface NetworkingPortV2Binding {
    hostId: string;
    profile?: string;
    vifDetails: {[key: string]: string};
    vifType: string;
    vnicType?: string;
}

export interface NetworkingPortV2ExtraDhcpOption {
    ipVersion?: number;
    name: string;
    value: string;
}

export interface NetworkingPortV2FixedIp {
    ipAddress?: string;
    subnetId: string;
}

export interface NetworkingPortV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingPortforwardingV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingQosBandwidthLimitRuleV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingQosDscpMarkingRuleV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingQosMinimumBandwidthRuleV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingQosPolicyV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingQuotaV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkingRouterInterfaceV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingRouterV2ExternalFixedIp {
    ipAddress: string;
    subnetId?: string;
}

export interface NetworkingRouterV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingRouterV2VendorOptions {
    setRouterGatewayAfterCreate?: boolean;
}

export interface NetworkingRoutingtableV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingSecgroupRuleV2Timeouts {
    delete?: string;
}

export interface NetworkingSecgroupV2Timeouts {
    delete?: string;
}

export interface NetworkingSubnetV2AllocationPool {
    end: string;
    start: string;
}

export interface NetworkingSubnetV2HostRoute {
    destinationCidr: string;
    nextHop: string;
}

export interface NetworkingSubnetV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingSubnetpoolV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingTrunkV2SubPort {
    portId: string;
    segmentationId: number;
    segmentationType: string;
}

export interface NetworkingTrunkV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingVpcV2Timeouts {
    create?: string;
    delete?: string;
}

export interface NetworkingVpcsubnetV2Route {
    cidr: string;
    gateway: string;
    id: string;
    mask: number;
    subnetId: string;
    tenantId: string;
}

export interface NetworkingVpcsubnetV2Timeouts {
    create?: string;
    delete?: string;
}

export interface ObjectstorageContainerV1VersioningLegacy {
    location: string;
    type: string;
}

export interface OrchestrationStackV1Output {
    description: string;
    outputKey: string;
    outputValue: string;
}

export interface OrchestrationStackV1Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SharedfilesystemSecurityserviceV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SharedfilesystemShareAccessV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SharedfilesystemShareV2ExportLocation {
    path: string;
    preferred: string;
}

export interface SharedfilesystemShareV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SharedfilesystemSharenetworkV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VpnaasEndpointGroupV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VpnaasIkePolicyV2Lifetime {
    units: string;
    value: number;
}

export interface VpnaasIkePolicyV2Timeouts {
    create?: string;
}

export interface VpnaasIpsecPolicyV2Lifetime {
    units: string;
    value: number;
}

export interface VpnaasIpsecPolicyV2Timeouts {
    create?: string;
}

export interface VpnaasServiceV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VpnaasSiteConnectionV2Dpd {
    action: string;
    interval: number;
    timeout: number;
}

export interface VpnaasSiteConnectionV2Timeouts {
    create?: string;
    delete?: string;
    update?: string;
}

