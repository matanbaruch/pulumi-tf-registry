// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BlockstorageQuotasetV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface BlockstorageQuotasetV3Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface BlockstorageVolumeAttachV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface BlockstorageVolumeAttachV3Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface BlockstorageVolumeV1Attachment {
    device: pulumi.Input<string>;
    id: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
}

export interface BlockstorageVolumeV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface BlockstorageVolumeV2Attachment {
    device: pulumi.Input<string>;
    id: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
}

export interface BlockstorageVolumeV2NhnEncryption {
    skmAppkey: pulumi.Input<string>;
    skmKeyId: pulumi.Input<string>;
}

export interface BlockstorageVolumeV2SchedulerHint {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    differentHosts?: pulumi.Input<pulumi.Input<string>[]>;
    localToInstance?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    sameHosts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BlockstorageVolumeV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface BlockstorageVolumeV3Attachment {
    device: pulumi.Input<string>;
    id: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
}

export interface BlockstorageVolumeV3SchedulerHint {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    differentHosts?: pulumi.Input<pulumi.Input<string>[]>;
    localToInstance?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    sameHosts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BlockstorageVolumeV3Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ComputeAggregateV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeFloatingipAssociateV2Timeouts {
    create?: pulumi.Input<string>;
}

export interface ComputeInstanceV2BlockDevice {
    bootIndex?: pulumi.Input<number>;
    deleteOnTermination?: pulumi.Input<boolean>;
    destinationType?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    diskBus?: pulumi.Input<string>;
    guestFormat?: pulumi.Input<string>;
    nhnEncryptions?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceV2BlockDeviceNhnEncryption>[]>;
    sourceType: pulumi.Input<string>;
    test?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
    volumeSize?: pulumi.Input<number>;
    volumeType?: pulumi.Input<string>;
}

export interface ComputeInstanceV2BlockDeviceNhnEncryption {
    skmAppkey: pulumi.Input<string>;
    skmKeyId: pulumi.Input<string>;
}

export interface ComputeInstanceV2Network {
    accessNetwork?: pulumi.Input<boolean>;
    fixedIpV4?: pulumi.Input<string>;
    fixedIpV6?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    floatingIp?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface ComputeInstanceV2Personality {
    content: pulumi.Input<string>;
    file: pulumi.Input<string>;
}

export interface ComputeInstanceV2SchedulerHint {
    additionalProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    buildNearHostIp?: pulumi.Input<string>;
    differentCells?: pulumi.Input<pulumi.Input<string>[]>;
    differentHosts?: pulumi.Input<pulumi.Input<string>[]>;
    group?: pulumi.Input<string>;
    queries?: pulumi.Input<pulumi.Input<string>[]>;
    sameHosts?: pulumi.Input<pulumi.Input<string>[]>;
    targetCell?: pulumi.Input<string>;
}

export interface ComputeInstanceV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeInstanceV2VendorOptions {
    detachPortsBeforeDestroy?: pulumi.Input<boolean>;
    ignoreResizeConfirmation?: pulumi.Input<boolean>;
}

export interface ComputeInstanceV2Volume {
    device?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    volumeId: pulumi.Input<string>;
}

export interface ComputeInterfaceAttachV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ComputeQuotasetV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ComputeSecgroupV2Rule {
    cidr?: pulumi.Input<string>;
    fromGroupId?: pulumi.Input<string>;
    fromPort: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    ipProtocol: pulumi.Input<string>;
    self?: pulumi.Input<boolean>;
    toPort: pulumi.Input<number>;
}

export interface ComputeSecgroupV2Timeouts {
    delete?: pulumi.Input<string>;
}

export interface ComputeServergroupV2Rules {
    maxServerPerHost?: pulumi.Input<number>;
}

export interface ComputeVolumeAttachV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ComputeVolumeAttachV2VendorOptions {
    ignoreVolumeConfirmation?: pulumi.Input<boolean>;
}

export interface ContainerinfraClusterV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface ContainerinfraClustertemplateV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ContainerinfraNodegroupV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DbConfigurationV1Configuration {
    name: pulumi.Input<string>;
    stringType?: pulumi.Input<boolean>;
    value: pulumi.Input<string>;
}

export interface DbConfigurationV1Datastore {
    type: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface DbConfigurationV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DbDatabaseV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DbInstanceV1Database {
    charset?: pulumi.Input<string>;
    collate?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface DbInstanceV1Datastore {
    type: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface DbInstanceV1Network {
    fixedIpV4?: pulumi.Input<string>;
    fixedIpV6?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface DbInstanceV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DbInstanceV1User {
    databases?: pulumi.Input<pulumi.Input<string>[]>;
    host?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    password?: pulumi.Input<string>;
}

export interface DbUserV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface DnsRecordsetV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsTransferAcceptV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsTransferRequestV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface DnsZoneV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface FwFirewallV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface FwPolicyV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface GetComputeInstanceV2Network {
    fixedIpV4?: string;
    fixedIpV6?: string;
    mac?: string;
    name?: string;
    port?: string;
    uuid?: string;
}

export interface GetComputeInstanceV2NetworkArgs {
    fixedIpV4?: pulumi.Input<string>;
    fixedIpV6?: pulumi.Input<string>;
    mac?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    uuid?: pulumi.Input<string>;
}

export interface GetNetworkingRoutingtableV2Route {
    cidr?: string;
    gateway?: string;
    gatewayId?: string;
    id?: string;
    mask?: number;
    routingtableId?: string;
    tenantId?: string;
}

export interface GetNetworkingRoutingtableV2RouteArgs {
    cidr?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    mask?: pulumi.Input<number>;
    routingtableId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
}

export interface IdentityApplicationCredentialV3AccessRule {
    id?: pulumi.Input<string>;
    method: pulumi.Input<string>;
    path: pulumi.Input<string>;
    service: pulumi.Input<string>;
}

export interface IdentityUserV3MultiFactorAuthRule {
    rules: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ImagesImageV2Timeouts {
    create?: pulumi.Input<string>;
}

export interface KeymanagerContainerV1Acl {
    read?: pulumi.Input<inputs.KeymanagerContainerV1AclRead>;
}

export interface KeymanagerContainerV1AclRead {
    createdAt?: pulumi.Input<string>;
    projectAccess?: pulumi.Input<boolean>;
    updatedAt?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KeymanagerContainerV1Consumer {
    name: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface KeymanagerContainerV1SecretRef {
    name?: pulumi.Input<string>;
    secretRef: pulumi.Input<string>;
}

export interface KeymanagerContainerV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface KeymanagerOrderV1Meta {
    algorithm: pulumi.Input<string>;
    bitLength: pulumi.Input<number>;
    expiration?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    payloadContentType?: pulumi.Input<string>;
}

export interface KeymanagerOrderV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface KeymanagerSecretV1Acl {
    read?: pulumi.Input<inputs.KeymanagerSecretV1AclRead>;
}

export interface KeymanagerSecretV1AclRead {
    createdAt?: pulumi.Input<string>;
    projectAccess?: pulumi.Input<boolean>;
    updatedAt?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KeymanagerSecretV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbL7policyV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbL7ruleV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbListenerV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbLoadbalancerV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbMemberV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface LbMemberV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbMembersV2Member {
    address: pulumi.Input<string>;
    adminStateUp?: pulumi.Input<boolean>;
    backup?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    monitorAddress?: pulumi.Input<string>;
    monitorPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocolPort: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface LbMembersV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbMonitorV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface LbMonitorV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbPoolV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface LbPoolV2Persistence {
    cookieName?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface LbPoolV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbQuotaV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbVipV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingAddressscopeV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingFloatingipV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingNetworkV2Segment {
    networkType?: pulumi.Input<string>;
    physicalNetwork?: pulumi.Input<string>;
    segmentationId?: pulumi.Input<number>;
}

export interface NetworkingNetworkV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingPortV2AllowedAddressPair {
    ipAddress: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
}

export interface NetworkingPortV2Binding {
    hostId?: pulumi.Input<string>;
    profile?: pulumi.Input<string>;
    vifDetails?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vifType?: pulumi.Input<string>;
    vnicType?: pulumi.Input<string>;
}

export interface NetworkingPortV2ExtraDhcpOption {
    ipVersion?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface NetworkingPortV2FixedIp {
    ipAddress?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface NetworkingPortV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingPortforwardingV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingQosBandwidthLimitRuleV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingQosDscpMarkingRuleV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingQosMinimumBandwidthRuleV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingQosPolicyV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingQuotaV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface NetworkingRouterInterfaceV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingRouterV2ExternalFixedIp {
    ipAddress?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface NetworkingRouterV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingRouterV2VendorOptions {
    setRouterGatewayAfterCreate?: pulumi.Input<boolean>;
}

export interface NetworkingRoutingtableV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingSecgroupRuleV2Timeouts {
    delete?: pulumi.Input<string>;
}

export interface NetworkingSecgroupV2Timeouts {
    delete?: pulumi.Input<string>;
}

export interface NetworkingSubnetV2AllocationPool {
    end: pulumi.Input<string>;
    start: pulumi.Input<string>;
}

export interface NetworkingSubnetV2HostRoute {
    destinationCidr: pulumi.Input<string>;
    nextHop: pulumi.Input<string>;
}

export interface NetworkingSubnetV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingSubnetpoolV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingTrunkV2SubPort {
    portId: pulumi.Input<string>;
    segmentationId: pulumi.Input<number>;
    segmentationType: pulumi.Input<string>;
}

export interface NetworkingTrunkV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingVpcV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface NetworkingVpcsubnetV2Route {
    cidr: pulumi.Input<string>;
    gateway: pulumi.Input<string>;
    id: pulumi.Input<string>;
    mask: pulumi.Input<number>;
    subnetId: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
}

export interface NetworkingVpcsubnetV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
}

export interface ObjectstorageContainerV1VersioningLegacy {
    location: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface OrchestrationStackV1Output {
    description?: pulumi.Input<string>;
    outputKey: pulumi.Input<string>;
    outputValue: pulumi.Input<string>;
}

export interface OrchestrationStackV1Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SharedfilesystemSecurityserviceV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SharedfilesystemShareAccessV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SharedfilesystemShareV2ExportLocation {
    path: pulumi.Input<string>;
    preferred: pulumi.Input<string>;
}

export interface SharedfilesystemShareV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface SharedfilesystemSharenetworkV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpnaasEndpointGroupV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpnaasIkePolicyV2Lifetime {
    units?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface VpnaasIkePolicyV2Timeouts {
    create?: pulumi.Input<string>;
}

export interface VpnaasIpsecPolicyV2Lifetime {
    units?: pulumi.Input<string>;
    value?: pulumi.Input<number>;
}

export interface VpnaasIpsecPolicyV2Timeouts {
    create?: pulumi.Input<string>;
}

export interface VpnaasServiceV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpnaasSiteConnectionV2Dpd {
    action?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
}

export interface VpnaasSiteConnectionV2Timeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}
