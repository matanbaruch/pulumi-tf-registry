// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ComputeFlavorV2 extends pulumi.CustomResource {
    /**
     * Get an existing ComputeFlavorV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeFlavorV2State, opts?: pulumi.CustomResourceOptions): ComputeFlavorV2 {
        return new ComputeFlavorV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/computeFlavorV2:ComputeFlavorV2';

    /**
     * Returns true if the given object is an instance of ComputeFlavorV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeFlavorV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeFlavorV2.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disk!: pulumi.Output<number>;
    public readonly ephemeral!: pulumi.Output<number | undefined>;
    public readonly extraSpecs!: pulumi.Output<{[key: string]: string}>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly isPublic!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly ram!: pulumi.Output<number>;
    public readonly region!: pulumi.Output<string>;
    public readonly rxTxFactor!: pulumi.Output<number | undefined>;
    public readonly swap!: pulumi.Output<number | undefined>;
    public readonly vcpus!: pulumi.Output<number>;

    /**
     * Create a ComputeFlavorV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeFlavorV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeFlavorV2Args | ComputeFlavorV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeFlavorV2State | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["ephemeral"] = state ? state.ephemeral : undefined;
            resourceInputs["extraSpecs"] = state ? state.extraSpecs : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ram"] = state ? state.ram : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rxTxFactor"] = state ? state.rxTxFactor : undefined;
            resourceInputs["swap"] = state ? state.swap : undefined;
            resourceInputs["vcpus"] = state ? state.vcpus : undefined;
        } else {
            const args = argsOrState as ComputeFlavorV2Args | undefined;
            if ((!args || args.disk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disk'");
            }
            if ((!args || args.ram === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ram'");
            }
            if ((!args || args.vcpus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcpus'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["ephemeral"] = args ? args.ephemeral : undefined;
            resourceInputs["extraSpecs"] = args ? args.extraSpecs : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ram"] = args ? args.ram : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rxTxFactor"] = args ? args.rxTxFactor : undefined;
            resourceInputs["swap"] = args ? args.swap : undefined;
            resourceInputs["vcpus"] = args ? args.vcpus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeFlavorV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ComputeFlavorV2 resources.
 */
export interface ComputeFlavorV2State {
    description?: pulumi.Input<string>;
    disk?: pulumi.Input<number>;
    ephemeral?: pulumi.Input<number>;
    extraSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    flavorId?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    ram?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    rxTxFactor?: pulumi.Input<number>;
    swap?: pulumi.Input<number>;
    vcpus?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ComputeFlavorV2 resource.
 */
export interface ComputeFlavorV2Args {
    description?: pulumi.Input<string>;
    disk: pulumi.Input<number>;
    ephemeral?: pulumi.Input<number>;
    extraSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    flavorId?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    ram: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    rxTxFactor?: pulumi.Input<number>;
    swap?: pulumi.Input<number>;
    vcpus: pulumi.Input<number>;
}
