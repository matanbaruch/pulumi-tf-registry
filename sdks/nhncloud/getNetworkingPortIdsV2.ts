// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getNetworkingPortIdsV2(args?: GetNetworkingPortIdsV2Args, opts?: pulumi.InvokeOptions): Promise<GetNetworkingPortIdsV2Result> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nhncloud:index/getNetworkingPortIdsV2:getNetworkingPortIdsV2", {
        "adminStateUp": args.adminStateUp,
        "description": args.description,
        "deviceId": args.deviceId,
        "deviceOwner": args.deviceOwner,
        "dnsName": args.dnsName,
        "fixedIp": args.fixedIp,
        "id": args.id,
        "macAddress": args.macAddress,
        "name": args.name,
        "networkId": args.networkId,
        "projectId": args.projectId,
        "region": args.region,
        "securityGroupIds": args.securityGroupIds,
        "sortDirection": args.sortDirection,
        "sortKey": args.sortKey,
        "status": args.status,
        "tags": args.tags,
        "tenantId": args.tenantId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNetworkingPortIdsV2.
 */
export interface GetNetworkingPortIdsV2Args {
    adminStateUp?: boolean;
    description?: string;
    deviceId?: string;
    deviceOwner?: string;
    dnsName?: string;
    fixedIp?: string;
    id?: string;
    macAddress?: string;
    name?: string;
    networkId?: string;
    projectId?: string;
    region?: string;
    securityGroupIds?: string[];
    sortDirection?: string;
    sortKey?: string;
    status?: string;
    tags?: string[];
    tenantId?: string;
}

/**
 * A collection of values returned by getNetworkingPortIdsV2.
 */
export interface GetNetworkingPortIdsV2Result {
    readonly adminStateUp?: boolean;
    readonly description?: string;
    readonly deviceId?: string;
    readonly deviceOwner?: string;
    readonly dnsName?: string;
    readonly fixedIp?: string;
    readonly id: string;
    readonly ids: string[];
    readonly macAddress?: string;
    readonly name?: string;
    readonly networkId?: string;
    readonly projectId?: string;
    readonly region?: string;
    readonly securityGroupIds?: string[];
    readonly sortDirection?: string;
    readonly sortKey?: string;
    readonly status?: string;
    readonly tags?: string[];
    readonly tenantId?: string;
}
export function getNetworkingPortIdsV2Output(args?: GetNetworkingPortIdsV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNetworkingPortIdsV2Result> {
    return pulumi.output(args).apply((a: any) => getNetworkingPortIdsV2(a, opts))
}

/**
 * A collection of arguments for invoking getNetworkingPortIdsV2.
 */
export interface GetNetworkingPortIdsV2OutputArgs {
    adminStateUp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    deviceId?: pulumi.Input<string>;
    deviceOwner?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    fixedIp?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    sortDirection?: pulumi.Input<string>;
    sortKey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    tenantId?: pulumi.Input<string>;
}
