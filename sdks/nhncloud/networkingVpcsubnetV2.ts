// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkingVpcsubnetV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingVpcsubnetV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingVpcsubnetV2State, opts?: pulumi.CustomResourceOptions): NetworkingVpcsubnetV2 {
        return new NetworkingVpcsubnetV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/networkingVpcsubnetV2:NetworkingVpcsubnetV2';

    /**
     * Returns true if the given object is an instance of NetworkingVpcsubnetV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingVpcsubnetV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingVpcsubnetV2.__pulumiType;
    }

    public /*out*/ readonly availableIpCount!: pulumi.Output<number>;
    public readonly cidr!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public /*out*/ readonly external!: pulumi.Output<boolean>;
    public /*out*/ readonly gateway!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly routes!: pulumi.Output<outputs.NetworkingVpcsubnetV2Route[]>;
    public /*out*/ readonly routingtableDefaultTable!: pulumi.Output<boolean>;
    public /*out*/ readonly routingtableExplicit!: pulumi.Output<boolean>;
    public /*out*/ readonly routingtableGatewayId!: pulumi.Output<string>;
    public readonly routingtableId!: pulumi.Output<string>;
    public /*out*/ readonly routingtableName!: pulumi.Output<string>;
    public /*out*/ readonly shared!: pulumi.Output<boolean>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkingVpcsubnetV2Timeouts | undefined>;
    public /*out*/ readonly vpcCidrv4!: pulumi.Output<string>;
    public readonly vpcId!: pulumi.Output<string>;
    public /*out*/ readonly vpcName!: pulumi.Output<string>;
    public /*out*/ readonly vpcShared!: pulumi.Output<boolean>;
    public /*out*/ readonly vpcState!: pulumi.Output<string>;

    /**
     * Create a NetworkingVpcsubnetV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingVpcsubnetV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingVpcsubnetV2Args | NetworkingVpcsubnetV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingVpcsubnetV2State | undefined;
            resourceInputs["availableIpCount"] = state ? state.availableIpCount : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["routingtableDefaultTable"] = state ? state.routingtableDefaultTable : undefined;
            resourceInputs["routingtableExplicit"] = state ? state.routingtableExplicit : undefined;
            resourceInputs["routingtableGatewayId"] = state ? state.routingtableGatewayId : undefined;
            resourceInputs["routingtableId"] = state ? state.routingtableId : undefined;
            resourceInputs["routingtableName"] = state ? state.routingtableName : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcCidrv4"] = state ? state.vpcCidrv4 : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcName"] = state ? state.vpcName : undefined;
            resourceInputs["vpcShared"] = state ? state.vpcShared : undefined;
            resourceInputs["vpcState"] = state ? state.vpcState : undefined;
        } else {
            const args = argsOrState as NetworkingVpcsubnetV2Args | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routingtableId"] = args ? args.routingtableId : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["availableIpCount"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["external"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
            resourceInputs["routingtableDefaultTable"] = undefined /*out*/;
            resourceInputs["routingtableExplicit"] = undefined /*out*/;
            resourceInputs["routingtableGatewayId"] = undefined /*out*/;
            resourceInputs["routingtableName"] = undefined /*out*/;
            resourceInputs["shared"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vpcCidrv4"] = undefined /*out*/;
            resourceInputs["vpcName"] = undefined /*out*/;
            resourceInputs["vpcShared"] = undefined /*out*/;
            resourceInputs["vpcState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingVpcsubnetV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkingVpcsubnetV2 resources.
 */
export interface NetworkingVpcsubnetV2State {
    availableIpCount?: pulumi.Input<number>;
    cidr?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    external?: pulumi.Input<boolean>;
    gateway?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.NetworkingVpcsubnetV2Route>[]>;
    routingtableDefaultTable?: pulumi.Input<boolean>;
    routingtableExplicit?: pulumi.Input<boolean>;
    routingtableGatewayId?: pulumi.Input<string>;
    routingtableId?: pulumi.Input<string>;
    routingtableName?: pulumi.Input<string>;
    shared?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingVpcsubnetV2Timeouts>;
    vpcCidrv4?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    vpcName?: pulumi.Input<string>;
    vpcShared?: pulumi.Input<boolean>;
    vpcState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkingVpcsubnetV2 resource.
 */
export interface NetworkingVpcsubnetV2Args {
    cidr: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingtableId?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkingVpcsubnetV2Timeouts>;
    vpcId: pulumi.Input<string>;
}
