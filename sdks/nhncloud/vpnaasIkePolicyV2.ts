// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnaasIkePolicyV2 extends pulumi.CustomResource {
    /**
     * Get an existing VpnaasIkePolicyV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnaasIkePolicyV2State, opts?: pulumi.CustomResourceOptions): VpnaasIkePolicyV2 {
        return new VpnaasIkePolicyV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/vpnaasIkePolicyV2:VpnaasIkePolicyV2';

    /**
     * Returns true if the given object is an instance of VpnaasIkePolicyV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnaasIkePolicyV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnaasIkePolicyV2.__pulumiType;
    }

    public readonly authAlgorithm!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly encryptionAlgorithm!: pulumi.Output<string | undefined>;
    public readonly ikeVersion!: pulumi.Output<string | undefined>;
    public readonly lifetimes!: pulumi.Output<outputs.VpnaasIkePolicyV2Lifetime[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pfs!: pulumi.Output<string | undefined>;
    public readonly phase1NegotiationMode!: pulumi.Output<string | undefined>;
    public readonly region!: pulumi.Output<string>;
    public readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.VpnaasIkePolicyV2Timeouts | undefined>;
    public readonly valueSpecs!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a VpnaasIkePolicyV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnaasIkePolicyV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnaasIkePolicyV2Args | VpnaasIkePolicyV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnaasIkePolicyV2State | undefined;
            resourceInputs["authAlgorithm"] = state ? state.authAlgorithm : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionAlgorithm"] = state ? state.encryptionAlgorithm : undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["lifetimes"] = state ? state.lifetimes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pfs"] = state ? state.pfs : undefined;
            resourceInputs["phase1NegotiationMode"] = state ? state.phase1NegotiationMode : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["valueSpecs"] = state ? state.valueSpecs : undefined;
        } else {
            const args = argsOrState as VpnaasIkePolicyV2Args | undefined;
            resourceInputs["authAlgorithm"] = args ? args.authAlgorithm : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionAlgorithm"] = args ? args.encryptionAlgorithm : undefined;
            resourceInputs["ikeVersion"] = args ? args.ikeVersion : undefined;
            resourceInputs["lifetimes"] = args ? args.lifetimes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pfs"] = args ? args.pfs : undefined;
            resourceInputs["phase1NegotiationMode"] = args ? args.phase1NegotiationMode : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["valueSpecs"] = args ? args.valueSpecs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnaasIkePolicyV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnaasIkePolicyV2 resources.
 */
export interface VpnaasIkePolicyV2State {
    authAlgorithm?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionAlgorithm?: pulumi.Input<string>;
    ikeVersion?: pulumi.Input<string>;
    lifetimes?: pulumi.Input<pulumi.Input<inputs.VpnaasIkePolicyV2Lifetime>[]>;
    name?: pulumi.Input<string>;
    pfs?: pulumi.Input<string>;
    phase1NegotiationMode?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnaasIkePolicyV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a VpnaasIkePolicyV2 resource.
 */
export interface VpnaasIkePolicyV2Args {
    authAlgorithm?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionAlgorithm?: pulumi.Input<string>;
    ikeVersion?: pulumi.Input<string>;
    lifetimes?: pulumi.Input<pulumi.Input<inputs.VpnaasIkePolicyV2Lifetime>[]>;
    name?: pulumi.Input<string>;
    pfs?: pulumi.Input<string>;
    phase1NegotiationMode?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VpnaasIkePolicyV2Timeouts>;
    valueSpecs?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
