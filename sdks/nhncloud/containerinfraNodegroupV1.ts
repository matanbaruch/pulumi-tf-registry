// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerinfraNodegroupV1 extends pulumi.CustomResource {
    /**
     * Get an existing ContainerinfraNodegroupV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerinfraNodegroupV1State, opts?: pulumi.CustomResourceOptions): ContainerinfraNodegroupV1 {
        return new ContainerinfraNodegroupV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/containerinfraNodegroupV1:ContainerinfraNodegroupV1';

    /**
     * Returns true if the given object is an instance of ContainerinfraNodegroupV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerinfraNodegroupV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerinfraNodegroupV1.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly dockerVolumeSize!: pulumi.Output<number>;
    public readonly flavorId!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly maxNodeCount!: pulumi.Output<number | undefined>;
    public readonly mergeLabels!: pulumi.Output<boolean | undefined>;
    public readonly minNodeCount!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeCount!: pulumi.Output<number | undefined>;
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerinfraNodegroupV1Timeouts | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ContainerinfraNodegroupV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerinfraNodegroupV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerinfraNodegroupV1Args | ContainerinfraNodegroupV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerinfraNodegroupV1State | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dockerVolumeSize"] = state ? state.dockerVolumeSize : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxNodeCount"] = state ? state.maxNodeCount : undefined;
            resourceInputs["mergeLabels"] = state ? state.mergeLabels : undefined;
            resourceInputs["minNodeCount"] = state ? state.minNodeCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ContainerinfraNodegroupV1Args | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dockerVolumeSize"] = args ? args.dockerVolumeSize : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxNodeCount"] = args ? args.maxNodeCount : undefined;
            resourceInputs["mergeLabels"] = args ? args.mergeLabels : undefined;
            resourceInputs["minNodeCount"] = args ? args.minNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerinfraNodegroupV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerinfraNodegroupV1 resources.
 */
export interface ContainerinfraNodegroupV1State {
    clusterId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    flavorId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxNodeCount?: pulumi.Input<number>;
    mergeLabels?: pulumi.Input<boolean>;
    minNodeCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerinfraNodegroupV1Timeouts>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerinfraNodegroupV1 resource.
 */
export interface ContainerinfraNodegroupV1Args {
    clusterId: pulumi.Input<string>;
    dockerVolumeSize?: pulumi.Input<number>;
    flavorId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxNodeCount?: pulumi.Input<number>;
    mergeLabels?: pulumi.Input<boolean>;
    minNodeCount?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    nodeCount?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerinfraNodegroupV1Timeouts>;
}
