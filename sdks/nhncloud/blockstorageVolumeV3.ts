// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockstorageVolumeV3 extends pulumi.CustomResource {
    /**
     * Get an existing BlockstorageVolumeV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockstorageVolumeV3State, opts?: pulumi.CustomResourceOptions): BlockstorageVolumeV3 {
        return new BlockstorageVolumeV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/blockstorageVolumeV3:BlockstorageVolumeV3';

    /**
     * Returns true if the given object is an instance of BlockstorageVolumeV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockstorageVolumeV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockstorageVolumeV3.__pulumiType;
    }

    public /*out*/ readonly attachments!: pulumi.Output<outputs.BlockstorageVolumeV3Attachment[]>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly consistencyGroupId!: pulumi.Output<string | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enableOnlineResize!: pulumi.Output<boolean | undefined>;
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    public readonly multiattach!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly schedulerHints!: pulumi.Output<outputs.BlockstorageVolumeV3SchedulerHint[] | undefined>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    public readonly sourceReplica!: pulumi.Output<string | undefined>;
    public readonly sourceVolId!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BlockstorageVolumeV3Timeouts | undefined>;
    public readonly volumeType!: pulumi.Output<string>;

    /**
     * Create a BlockstorageVolumeV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockstorageVolumeV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockstorageVolumeV3Args | BlockstorageVolumeV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockstorageVolumeV3State | undefined;
            resourceInputs["attachments"] = state ? state.attachments : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["consistencyGroupId"] = state ? state.consistencyGroupId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableOnlineResize"] = state ? state.enableOnlineResize : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["multiattach"] = state ? state.multiattach : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schedulerHints"] = state ? state.schedulerHints : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["sourceReplica"] = state ? state.sourceReplica : undefined;
            resourceInputs["sourceVolId"] = state ? state.sourceVolId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as BlockstorageVolumeV3Args | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["consistencyGroupId"] = args ? args.consistencyGroupId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableOnlineResize"] = args ? args.enableOnlineResize : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["multiattach"] = args ? args.multiattach : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["schedulerHints"] = args ? args.schedulerHints : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["sourceReplica"] = args ? args.sourceReplica : undefined;
            resourceInputs["sourceVolId"] = args ? args.sourceVolId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["attachments"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockstorageVolumeV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockstorageVolumeV3 resources.
 */
export interface BlockstorageVolumeV3State {
    attachments?: pulumi.Input<pulumi.Input<inputs.BlockstorageVolumeV3Attachment>[]>;
    availabilityZone?: pulumi.Input<string>;
    consistencyGroupId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enableOnlineResize?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    multiattach?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.BlockstorageVolumeV3SchedulerHint>[]>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    sourceReplica?: pulumi.Input<string>;
    sourceVolId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockstorageVolumeV3Timeouts>;
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockstorageVolumeV3 resource.
 */
export interface BlockstorageVolumeV3Args {
    availabilityZone?: pulumi.Input<string>;
    consistencyGroupId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enableOnlineResize?: pulumi.Input<boolean>;
    imageId?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    multiattach?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.BlockstorageVolumeV3SchedulerHint>[]>;
    size: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    sourceReplica?: pulumi.Input<string>;
    sourceVolId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockstorageVolumeV3Timeouts>;
    volumeType?: pulumi.Input<string>;
}
