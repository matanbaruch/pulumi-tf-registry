// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeymanagerOrderV1 extends pulumi.CustomResource {
    /**
     * Get an existing KeymanagerOrderV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeymanagerOrderV1State, opts?: pulumi.CustomResourceOptions): KeymanagerOrderV1 {
        return new KeymanagerOrderV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nhncloud:index/keymanagerOrderV1:KeymanagerOrderV1';

    /**
     * Returns true if the given object is an instance of KeymanagerOrderV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeymanagerOrderV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeymanagerOrderV1.__pulumiType;
    }

    public /*out*/ readonly containerRef!: pulumi.Output<string>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public /*out*/ readonly creatorId!: pulumi.Output<string>;
    public readonly meta!: pulumi.Output<outputs.KeymanagerOrderV1Meta>;
    public /*out*/ readonly orderRef!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly secretRef!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly subStatus!: pulumi.Output<string>;
    public /*out*/ readonly subStatusMessage!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KeymanagerOrderV1Timeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updated!: pulumi.Output<string>;

    /**
     * Create a KeymanagerOrderV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeymanagerOrderV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeymanagerOrderV1Args | KeymanagerOrderV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeymanagerOrderV1State | undefined;
            resourceInputs["containerRef"] = state ? state.containerRef : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["creatorId"] = state ? state.creatorId : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["orderRef"] = state ? state.orderRef : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretRef"] = state ? state.secretRef : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subStatus"] = state ? state.subStatus : undefined;
            resourceInputs["subStatusMessage"] = state ? state.subStatusMessage : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as KeymanagerOrderV1Args | undefined;
            if ((!args || args.meta === undefined) && !opts.urn) {
                throw new Error("Missing required property 'meta'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["containerRef"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["creatorId"] = undefined /*out*/;
            resourceInputs["orderRef"] = undefined /*out*/;
            resourceInputs["secretRef"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subStatus"] = undefined /*out*/;
            resourceInputs["subStatusMessage"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeymanagerOrderV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeymanagerOrderV1 resources.
 */
export interface KeymanagerOrderV1State {
    containerRef?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    creatorId?: pulumi.Input<string>;
    meta?: pulumi.Input<inputs.KeymanagerOrderV1Meta>;
    orderRef?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretRef?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subStatus?: pulumi.Input<string>;
    subStatusMessage?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeymanagerOrderV1Timeouts>;
    type?: pulumi.Input<string>;
    updated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeymanagerOrderV1 resource.
 */
export interface KeymanagerOrderV1Args {
    meta: pulumi.Input<inputs.KeymanagerOrderV1Meta>;
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KeymanagerOrderV1Timeouts>;
    type: pulumi.Input<string>;
}
