// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetAssetsAsset {
    /**
     * The annotations/tags of the asset.
     */
    annotations: outputs.GetAssetsAssetAnnotation[];
    /**
     * The type of the asset.
     */
    assetType: string;
    /**
     * The unique identifier of the asset.
     */
    id: string;
    /**
     * The unique Mondoo Resource Name (MRN) of the asset.
     */
    mrn: string;
    /**
     * The name of the asset.
     */
    name: string;
    /**
     * The reference IDs of the asset.
     */
    referenceIds: string[];
    /**
     * The overall score of the asset.
     */
    score: outputs.GetAssetsAssetScore;
    /**
     * The current state of the asset.
     */
    state: string;
    /**
     * The timestamp when the asset was last updated.
     */
    updatedAt: string;
}

export interface GetAssetsAssetAnnotation {
    /**
     * The key of the annotation.
     */
    key: string;
    /**
     * The value of the annotation.
     */
    value: string;
}

export interface GetAssetsAssetScore {
    /**
     * The grade of the asset.
     */
    grade: string;
    /**
     * The score value of the asset.
     */
    value: number;
}

export interface GetFrameworksFramework {
    /**
     * List of authors
     */
    authors: outputs.GetFrameworksFrameworkAuthor[];
    /**
     * Compliance framework MRN
     */
    mrn: string;
    /**
     * Compliance framework name
     */
    name: string;
    /**
     * List of previous completion scores
     */
    previousCompletionScores: outputs.GetFrameworksFrameworkPreviousCompletionScore[];
    /**
     * Compliance framework state is either `PREVIEW` or `ACTIVE`
     */
    state: string;
    /**
     * List of tags
     */
    tags: outputs.GetFrameworksFrameworkTag[];
}

export interface GetFrameworksFrameworkAuthor {
    /**
     * Author email
     */
    email: string;
    /**
     * Author name
     */
    name: string;
}

export interface GetFrameworksFrameworkPreviousCompletionScore {
    /**
     * Score
     */
    score: number;
    /**
     * Timestamp
     */
    timestamp: string;
}

export interface GetFrameworksFrameworkTag {
    /**
     * Tag key
     */
    key: string;
    /**
     * Tag value
     */
    value: string;
}

export interface GetPoliciesPolicy {
    /**
     * Policies can be set to `Null`, `IGNORE` or `ACTIVE`
     */
    action: string;
    /**
     * Determines if a policy is enabled or disabled
     */
    assigned: boolean;
    /**
     * Timestamp of policy creation
     */
    createdAt: string;
    /**
     * Determines if a policy is public or private
     */
    isPublic: boolean;
    /**
     * Unique policy Mondoo Resource Name
     */
    policyMrn: string;
    /**
     * Policy name
     */
    policyName: string;
    /**
     * Timestamp of policy update
     */
    updatedAt: string;
    /**
     * Version
     */
    version: string;
}

export interface IntegrationAwsCredentials {
    key?: outputs.IntegrationAwsCredentialsKey;
    role?: outputs.IntegrationAwsCredentialsRole;
}

export interface IntegrationAwsCredentialsKey {
    accessKey: string;
    secretKey: string;
}

export interface IntegrationAwsCredentialsRole {
    externalId?: string;
    roleArn: string;
}

export interface IntegrationAwsServerlessScanConfiguration {
    /**
     * Cron scan in hours.
     */
    cronScanInHours?: number;
    /**
     * Enable EC2 scan.
     */
    ec2Scan?: boolean;
    ec2ScanOptions: outputs.IntegrationAwsServerlessScanConfigurationEc2ScanOptions;
    /**
     * Enable ECR scan.
     */
    ecrScan?: boolean;
    /**
     * Enable ECS scan.
     */
    ecsScan?: boolean;
    eventScanTriggers?: outputs.IntegrationAwsServerlessScanConfigurationEventScanTriggers;
}

export interface IntegrationAwsServerlessScanConfigurationEc2ScanOptions {
    ebsScanOptions: outputs.IntegrationAwsServerlessScanConfigurationEc2ScanOptionsEbsScanOptions;
    /**
     * Enable EBS volume scan.
     */
    ebsVolumeScan?: boolean;
    /**
     * Enable instance connect.
     */
    instanceConnect?: boolean;
    /**
     * List of instance IDs filter.
     */
    instanceIdsFilters?: string[];
    /**
     * List of regions filter.
     */
    regionsFilters?: string[];
    /**
     * Enable SSM.
     */
    ssm?: boolean;
    /**
     * Tags filter.
     */
    tagsFilter?: {[key: string]: string};
}

export interface IntegrationAwsServerlessScanConfigurationEc2ScanOptionsEbsScanOptions {
    /**
     * Max ASG instances.
     */
    maxAsgInstances?: number;
    /**
     * Target instances per scanner.
     */
    targetInstancesPerScanner?: number;
}

export interface IntegrationAwsServerlessScanConfigurationEventScanTriggers {
    /**
     * Event detail type.
     */
    eventDetailType?: string;
    /**
     * Event source.
     */
    eventSource?: string;
    /**
     * Scan type.
     */
    scanType?: string;
}

export interface IntegrationAzureCredentials {
    /**
     * PEM file for Azure integration.
     */
    pemFile: string;
}

export interface IntegrationGcpCredentials {
    privateKey: string;
}

export interface IntegrationGithubCredentials {
    /**
     * Token for GitHub integration.
     */
    token: string;
}

export interface IntegrationMs365Credentials {
    /**
     * PEM file for Ms365 integration.
     */
    pemFile: string;
}

export interface IntegrationOciTenantCredentials {
    fingerprint: string;
    privateKey: string;
}

export interface ScimGroupMappingMapping {
    iamRole: string;
    orgMrn?: string;
    spaceMrn?: string;
}

