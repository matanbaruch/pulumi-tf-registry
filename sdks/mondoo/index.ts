// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CustomFrameworkArgs, CustomFrameworkState } from "./customFramework";
export type CustomFramework = import("./customFramework").CustomFramework;
export const CustomFramework: typeof import("./customFramework").CustomFramework = null as any;
utilities.lazyLoad(exports, ["CustomFramework"], () => require("./customFramework"));

export { CustomPolicyArgs, CustomPolicyState } from "./customPolicy";
export type CustomPolicy = import("./customPolicy").CustomPolicy;
export const CustomPolicy: typeof import("./customPolicy").CustomPolicy = null as any;
utilities.lazyLoad(exports, ["CustomPolicy"], () => require("./customPolicy"));

export { CustomQuerypackArgs, CustomQuerypackState } from "./customQuerypack";
export type CustomQuerypack = import("./customQuerypack").CustomQuerypack;
export const CustomQuerypack: typeof import("./customQuerypack").CustomQuerypack = null as any;
utilities.lazyLoad(exports, ["CustomQuerypack"], () => require("./customQuerypack"));

export { FrameworkAssignmentArgs, FrameworkAssignmentState } from "./frameworkAssignment";
export type FrameworkAssignment = import("./frameworkAssignment").FrameworkAssignment;
export const FrameworkAssignment: typeof import("./frameworkAssignment").FrameworkAssignment = null as any;
utilities.lazyLoad(exports, ["FrameworkAssignment"], () => require("./frameworkAssignment"));

export { GetAssetsArgs, GetAssetsResult, GetAssetsOutputArgs } from "./getAssets";
export const getAssets: typeof import("./getAssets").getAssets = null as any;
export const getAssetsOutput: typeof import("./getAssets").getAssetsOutput = null as any;
utilities.lazyLoad(exports, ["getAssets","getAssetsOutput"], () => require("./getAssets"));

export { GetFrameworksArgs, GetFrameworksResult, GetFrameworksOutputArgs } from "./getFrameworks";
export const getFrameworks: typeof import("./getFrameworks").getFrameworks = null as any;
export const getFrameworksOutput: typeof import("./getFrameworks").getFrameworksOutput = null as any;
utilities.lazyLoad(exports, ["getFrameworks","getFrameworksOutput"], () => require("./getFrameworks"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetPoliciesArgs, GetPoliciesResult, GetPoliciesOutputArgs } from "./getPolicies";
export const getPolicies: typeof import("./getPolicies").getPolicies = null as any;
export const getPoliciesOutput: typeof import("./getPolicies").getPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getPolicies","getPoliciesOutput"], () => require("./getPolicies"));

export { GetSpaceArgs, GetSpaceResult, GetSpaceOutputArgs } from "./getSpace";
export const getSpace: typeof import("./getSpace").getSpace = null as any;
export const getSpaceOutput: typeof import("./getSpace").getSpaceOutput = null as any;
utilities.lazyLoad(exports, ["getSpace","getSpaceOutput"], () => require("./getSpace"));

export { IntegrationAwsArgs, IntegrationAwsState } from "./integrationAws";
export type IntegrationAws = import("./integrationAws").IntegrationAws;
export const IntegrationAws: typeof import("./integrationAws").IntegrationAws = null as any;
utilities.lazyLoad(exports, ["IntegrationAws"], () => require("./integrationAws"));

export { IntegrationAwsServerlessArgs, IntegrationAwsServerlessState } from "./integrationAwsServerless";
export type IntegrationAwsServerless = import("./integrationAwsServerless").IntegrationAwsServerless;
export const IntegrationAwsServerless: typeof import("./integrationAwsServerless").IntegrationAwsServerless = null as any;
utilities.lazyLoad(exports, ["IntegrationAwsServerless"], () => require("./integrationAwsServerless"));

export { IntegrationAzureArgs, IntegrationAzureState } from "./integrationAzure";
export type IntegrationAzure = import("./integrationAzure").IntegrationAzure;
export const IntegrationAzure: typeof import("./integrationAzure").IntegrationAzure = null as any;
utilities.lazyLoad(exports, ["IntegrationAzure"], () => require("./integrationAzure"));

export { IntegrationDomainArgs, IntegrationDomainState } from "./integrationDomain";
export type IntegrationDomain = import("./integrationDomain").IntegrationDomain;
export const IntegrationDomain: typeof import("./integrationDomain").IntegrationDomain = null as any;
utilities.lazyLoad(exports, ["IntegrationDomain"], () => require("./integrationDomain"));

export { IntegrationGcpArgs, IntegrationGcpState } from "./integrationGcp";
export type IntegrationGcp = import("./integrationGcp").IntegrationGcp;
export const IntegrationGcp: typeof import("./integrationGcp").IntegrationGcp = null as any;
utilities.lazyLoad(exports, ["IntegrationGcp"], () => require("./integrationGcp"));

export { IntegrationGithubArgs, IntegrationGithubState } from "./integrationGithub";
export type IntegrationGithub = import("./integrationGithub").IntegrationGithub;
export const IntegrationGithub: typeof import("./integrationGithub").IntegrationGithub = null as any;
utilities.lazyLoad(exports, ["IntegrationGithub"], () => require("./integrationGithub"));

export { IntegrationMs365Args, IntegrationMs365State } from "./integrationMs365";
export type IntegrationMs365 = import("./integrationMs365").IntegrationMs365;
export const IntegrationMs365: typeof import("./integrationMs365").IntegrationMs365 = null as any;
utilities.lazyLoad(exports, ["IntegrationMs365"], () => require("./integrationMs365"));

export { IntegrationOciTenantArgs, IntegrationOciTenantState } from "./integrationOciTenant";
export type IntegrationOciTenant = import("./integrationOciTenant").IntegrationOciTenant;
export const IntegrationOciTenant: typeof import("./integrationOciTenant").IntegrationOciTenant = null as any;
utilities.lazyLoad(exports, ["IntegrationOciTenant"], () => require("./integrationOciTenant"));

export { IntegrationSlackArgs, IntegrationSlackState } from "./integrationSlack";
export type IntegrationSlack = import("./integrationSlack").IntegrationSlack;
export const IntegrationSlack: typeof import("./integrationSlack").IntegrationSlack = null as any;
utilities.lazyLoad(exports, ["IntegrationSlack"], () => require("./integrationSlack"));

export { PolicyAssignmentArgs, PolicyAssignmentState } from "./policyAssignment";
export type PolicyAssignment = import("./policyAssignment").PolicyAssignment;
export const PolicyAssignment: typeof import("./policyAssignment").PolicyAssignment = null as any;
utilities.lazyLoad(exports, ["PolicyAssignment"], () => require("./policyAssignment"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QuerypackAssignmentArgs, QuerypackAssignmentState } from "./querypackAssignment";
export type QuerypackAssignment = import("./querypackAssignment").QuerypackAssignment;
export const QuerypackAssignment: typeof import("./querypackAssignment").QuerypackAssignment = null as any;
utilities.lazyLoad(exports, ["QuerypackAssignment"], () => require("./querypackAssignment"));

export { RegistrationTokenArgs, RegistrationTokenState } from "./registrationToken";
export type RegistrationToken = import("./registrationToken").RegistrationToken;
export const RegistrationToken: typeof import("./registrationToken").RegistrationToken = null as any;
utilities.lazyLoad(exports, ["RegistrationToken"], () => require("./registrationToken"));

export { ScimGroupMappingArgs, ScimGroupMappingState } from "./scimGroupMapping";
export type ScimGroupMapping = import("./scimGroupMapping").ScimGroupMapping;
export const ScimGroupMapping: typeof import("./scimGroupMapping").ScimGroupMapping = null as any;
utilities.lazyLoad(exports, ["ScimGroupMapping"], () => require("./scimGroupMapping"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { SpaceArgs, SpaceState } from "./space";
export type Space = import("./space").Space;
export const Space: typeof import("./space").Space = null as any;
utilities.lazyLoad(exports, ["Space"], () => require("./space"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mondoo:index/customFramework:CustomFramework":
                return new CustomFramework(name, <any>undefined, { urn })
            case "mondoo:index/customPolicy:CustomPolicy":
                return new CustomPolicy(name, <any>undefined, { urn })
            case "mondoo:index/customQuerypack:CustomQuerypack":
                return new CustomQuerypack(name, <any>undefined, { urn })
            case "mondoo:index/frameworkAssignment:FrameworkAssignment":
                return new FrameworkAssignment(name, <any>undefined, { urn })
            case "mondoo:index/integrationAws:IntegrationAws":
                return new IntegrationAws(name, <any>undefined, { urn })
            case "mondoo:index/integrationAwsServerless:IntegrationAwsServerless":
                return new IntegrationAwsServerless(name, <any>undefined, { urn })
            case "mondoo:index/integrationAzure:IntegrationAzure":
                return new IntegrationAzure(name, <any>undefined, { urn })
            case "mondoo:index/integrationDomain:IntegrationDomain":
                return new IntegrationDomain(name, <any>undefined, { urn })
            case "mondoo:index/integrationGcp:IntegrationGcp":
                return new IntegrationGcp(name, <any>undefined, { urn })
            case "mondoo:index/integrationGithub:IntegrationGithub":
                return new IntegrationGithub(name, <any>undefined, { urn })
            case "mondoo:index/integrationMs365:IntegrationMs365":
                return new IntegrationMs365(name, <any>undefined, { urn })
            case "mondoo:index/integrationOciTenant:IntegrationOciTenant":
                return new IntegrationOciTenant(name, <any>undefined, { urn })
            case "mondoo:index/integrationSlack:IntegrationSlack":
                return new IntegrationSlack(name, <any>undefined, { urn })
            case "mondoo:index/policyAssignment:PolicyAssignment":
                return new PolicyAssignment(name, <any>undefined, { urn })
            case "mondoo:index/querypackAssignment:QuerypackAssignment":
                return new QuerypackAssignment(name, <any>undefined, { urn })
            case "mondoo:index/registrationToken:RegistrationToken":
                return new RegistrationToken(name, <any>undefined, { urn })
            case "mondoo:index/scimGroupMapping:ScimGroupMapping":
                return new ScimGroupMapping(name, <any>undefined, { urn })
            case "mondoo:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "mondoo:index/space:Space":
                return new Space(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mondoo", "index/customFramework", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/customPolicy", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/customQuerypack", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/frameworkAssignment", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationAws", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationAwsServerless", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationAzure", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationDomain", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationGcp", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationGithub", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationMs365", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationOciTenant", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/integrationSlack", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/policyAssignment", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/querypackAssignment", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/registrationToken", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/scimGroupMapping", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("mondoo", "index/space", _module)
pulumi.runtime.registerResourcePackage("mondoo", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:mondoo") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
