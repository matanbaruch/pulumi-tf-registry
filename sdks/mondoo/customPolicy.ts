// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CustomPolicy extends pulumi.CustomResource {
    /**
     * Get an existing CustomPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomPolicyState, opts?: pulumi.CustomResourceOptions): CustomPolicy {
        return new CustomPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mondoo:index/customPolicy:CustomPolicy';

    /**
     * Returns true if the given object is an instance of CustomPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomPolicy.__pulumiType;
    }

    /**
     * Data as string to be uploaded. Must be defined if source is not. Note: The content field is marked as sensitive. To view
     * the raw contents of the object, please define an output.
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * Base 64 CRC32 hash of the uploaded data.
     */
    public /*out*/ readonly crc32c!: pulumi.Output<string>;
    /**
     * The Mondoo Resource Name (MRN) of the created policies
     */
    public /*out*/ readonly mrns!: pulumi.Output<string[]>;
    /**
     * If set to true, existing policies are overwritten.
     */
    public readonly overwrite!: pulumi.Output<boolean>;
    /**
     * A path to the data you want to upload. Must be defined if content is not.
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * Mondoo Space Identifier.
     */
    public readonly spaceId!: pulumi.Output<string>;

    /**
     * Create a CustomPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomPolicyArgs | CustomPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomPolicyState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["crc32c"] = state ? state.crc32c : undefined;
            resourceInputs["mrns"] = state ? state.mrns : undefined;
            resourceInputs["overwrite"] = state ? state.overwrite : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
        } else {
            const args = argsOrState as CustomPolicyArgs | undefined;
            if ((!args || args.spaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spaceId'");
            }
            resourceInputs["content"] = args?.content ? pulumi.secret(args.content) : undefined;
            resourceInputs["overwrite"] = args ? args.overwrite : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["crc32c"] = undefined /*out*/;
            resourceInputs["mrns"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["content"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CustomPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomPolicy resources.
 */
export interface CustomPolicyState {
    /**
     * Data as string to be uploaded. Must be defined if source is not. Note: The content field is marked as sensitive. To view
     * the raw contents of the object, please define an output.
     */
    content?: pulumi.Input<string>;
    /**
     * Base 64 CRC32 hash of the uploaded data.
     */
    crc32c?: pulumi.Input<string>;
    /**
     * The Mondoo Resource Name (MRN) of the created policies
     */
    mrns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set to true, existing policies are overwritten.
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * A path to the data you want to upload. Must be defined if content is not.
     */
    source?: pulumi.Input<string>;
    /**
     * Mondoo Space Identifier.
     */
    spaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomPolicy resource.
 */
export interface CustomPolicyArgs {
    /**
     * Data as string to be uploaded. Must be defined if source is not. Note: The content field is marked as sensitive. To view
     * the raw contents of the object, please define an output.
     */
    content?: pulumi.Input<string>;
    /**
     * If set to true, existing policies are overwritten.
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * A path to the data you want to upload. Must be defined if content is not.
     */
    source?: pulumi.Input<string>;
    /**
     * Mondoo Space Identifier.
     */
    spaceId: pulumi.Input<string>;
}
