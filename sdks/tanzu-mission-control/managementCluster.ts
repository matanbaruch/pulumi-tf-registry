// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagementCluster extends pulumi.CustomResource {
    /**
     * Get an existing ManagementCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagementClusterState, opts?: pulumi.CustomResourceOptions): ManagementCluster {
        return new ManagementCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tanzu-mission-control:index/managementCluster:ManagementCluster';

    /**
     * Returns true if the given object is an instance of ManagementCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagementCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementCluster.__pulumiType;
    }

    /**
     * Metadata for the resource
     */
    public readonly meta!: pulumi.Output<outputs.ManagementClusterMeta | undefined>;
    /**
     * Name of this management cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of Organization.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Wait timeout duration.
     */
    public readonly readyWaitTimeout!: pulumi.Output<string | undefined>;
    public readonly registerManagementCluster!: pulumi.Output<outputs.ManagementClusterRegisterManagementCluster | undefined>;
    public readonly spec!: pulumi.Output<outputs.ManagementClusterSpec | undefined>;
    /**
     * Status of the management cluster
     */
    public /*out*/ readonly status!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a ManagementCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagementClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagementClusterArgs | ManagementClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagementClusterState | undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["readyWaitTimeout"] = state ? state.readyWaitTimeout : undefined;
            resourceInputs["registerManagementCluster"] = state ? state.registerManagementCluster : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ManagementClusterArgs | undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["readyWaitTimeout"] = args ? args.readyWaitTimeout : undefined;
            resourceInputs["registerManagementCluster"] = args ? args.registerManagementCluster : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagementCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagementCluster resources.
 */
export interface ManagementClusterState {
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.ManagementClusterMeta>;
    /**
     * Name of this management cluster
     */
    name?: pulumi.Input<string>;
    /**
     * ID of Organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Wait timeout duration.
     */
    readyWaitTimeout?: pulumi.Input<string>;
    registerManagementCluster?: pulumi.Input<inputs.ManagementClusterRegisterManagementCluster>;
    spec?: pulumi.Input<inputs.ManagementClusterSpec>;
    /**
     * Status of the management cluster
     */
    status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ManagementCluster resource.
 */
export interface ManagementClusterArgs {
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.ManagementClusterMeta>;
    /**
     * Name of this management cluster
     */
    name?: pulumi.Input<string>;
    /**
     * ID of Organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Wait timeout duration.
     */
    readyWaitTimeout?: pulumi.Input<string>;
    registerManagementCluster?: pulumi.Input<inputs.ManagementClusterRegisterManagementCluster>;
    spec?: pulumi.Input<inputs.ManagementClusterSpec>;
}
