// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AksclusterArgs, AksclusterState } from "./akscluster";
export type Akscluster = import("./akscluster").Akscluster;
export const Akscluster: typeof import("./akscluster").Akscluster = null as any;
utilities.lazyLoad(exports, ["Akscluster"], () => require("./akscluster"));

export { BackupScheduleArgs, BackupScheduleState } from "./backupSchedule";
export type BackupSchedule = import("./backupSchedule").BackupSchedule;
export const BackupSchedule: typeof import("./backupSchedule").BackupSchedule = null as any;
utilities.lazyLoad(exports, ["BackupSchedule"], () => require("./backupSchedule"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterGroupArgs, ClusterGroupState } from "./clusterGroup";
export type ClusterGroup = import("./clusterGroup").ClusterGroup;
export const ClusterGroup: typeof import("./clusterGroup").ClusterGroup = null as any;
utilities.lazyLoad(exports, ["ClusterGroup"], () => require("./clusterGroup"));

export { ClusterNodePoolArgs, ClusterNodePoolState } from "./clusterNodePool";
export type ClusterNodePool = import("./clusterNodePool").ClusterNodePool;
export const ClusterNodePool: typeof import("./clusterNodePool").ClusterNodePool = null as any;
utilities.lazyLoad(exports, ["ClusterNodePool"], () => require("./clusterNodePool"));

export { CredentialArgs, CredentialState } from "./credential";
export type Credential = import("./credential").Credential;
export const Credential: typeof import("./credential").Credential = null as any;
utilities.lazyLoad(exports, ["Credential"], () => require("./credential"));

export { CustomIamRoleArgs, CustomIamRoleState } from "./customIamRole";
export type CustomIamRole = import("./customIamRole").CustomIamRole;
export const CustomIamRole: typeof import("./customIamRole").CustomIamRole = null as any;
utilities.lazyLoad(exports, ["CustomIamRole"], () => require("./customIamRole"));

export { CustomPolicyArgs, CustomPolicyState } from "./customPolicy";
export type CustomPolicy = import("./customPolicy").CustomPolicy;
export const CustomPolicy: typeof import("./customPolicy").CustomPolicy = null as any;
utilities.lazyLoad(exports, ["CustomPolicy"], () => require("./customPolicy"));

export { CustomPolicyTemplateArgs, CustomPolicyTemplateState } from "./customPolicyTemplate";
export type CustomPolicyTemplate = import("./customPolicyTemplate").CustomPolicyTemplate;
export const CustomPolicyTemplate: typeof import("./customPolicyTemplate").CustomPolicyTemplate = null as any;
utilities.lazyLoad(exports, ["CustomPolicyTemplate"], () => require("./customPolicyTemplate"));

export { EksclusterArgs, EksclusterState } from "./ekscluster";
export type Ekscluster = import("./ekscluster").Ekscluster;
export const Ekscluster: typeof import("./ekscluster").Ekscluster = null as any;
utilities.lazyLoad(exports, ["Ekscluster"], () => require("./ekscluster"));

export { EnableDataProtectionArgs, EnableDataProtectionState } from "./enableDataProtection";
export type EnableDataProtection = import("./enableDataProtection").EnableDataProtection;
export const EnableDataProtection: typeof import("./enableDataProtection").EnableDataProtection = null as any;
utilities.lazyLoad(exports, ["EnableDataProtection"], () => require("./enableDataProtection"));

export { GetAksclusterArgs, GetAksclusterResult, GetAksclusterOutputArgs } from "./getAkscluster";
export const getAkscluster: typeof import("./getAkscluster").getAkscluster = null as any;
export const getAksclusterOutput: typeof import("./getAkscluster").getAksclusterOutput = null as any;
utilities.lazyLoad(exports, ["getAkscluster","getAksclusterOutput"], () => require("./getAkscluster"));

export { GetBackupScheduleArgs, GetBackupScheduleResult, GetBackupScheduleOutputArgs } from "./getBackupSchedule";
export const getBackupSchedule: typeof import("./getBackupSchedule").getBackupSchedule = null as any;
export const getBackupScheduleOutput: typeof import("./getBackupSchedule").getBackupScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getBackupSchedule","getBackupScheduleOutput"], () => require("./getBackupSchedule"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterClassArgs, GetClusterClassResult, GetClusterClassOutputArgs } from "./getClusterClass";
export const getClusterClass: typeof import("./getClusterClass").getClusterClass = null as any;
export const getClusterClassOutput: typeof import("./getClusterClass").getClusterClassOutput = null as any;
utilities.lazyLoad(exports, ["getClusterClass","getClusterClassOutput"], () => require("./getClusterClass"));

export { GetClusterGroupArgs, GetClusterGroupResult, GetClusterGroupOutputArgs } from "./getClusterGroup";
export const getClusterGroup: typeof import("./getClusterGroup").getClusterGroup = null as any;
export const getClusterGroupOutput: typeof import("./getClusterGroup").getClusterGroupOutput = null as any;
utilities.lazyLoad(exports, ["getClusterGroup","getClusterGroupOutput"], () => require("./getClusterGroup"));

export { GetClusterNodePoolArgs, GetClusterNodePoolResult, GetClusterNodePoolOutputArgs } from "./getClusterNodePool";
export const getClusterNodePool: typeof import("./getClusterNodePool").getClusterNodePool = null as any;
export const getClusterNodePoolOutput: typeof import("./getClusterNodePool").getClusterNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getClusterNodePool","getClusterNodePoolOutput"], () => require("./getClusterNodePool"));

export { GetCredentialArgs, GetCredentialResult, GetCredentialOutputArgs } from "./getCredential";
export const getCredential: typeof import("./getCredential").getCredential = null as any;
export const getCredentialOutput: typeof import("./getCredential").getCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getCredential","getCredentialOutput"], () => require("./getCredential"));

export { GetEksclusterArgs, GetEksclusterResult, GetEksclusterOutputArgs } from "./getEkscluster";
export const getEkscluster: typeof import("./getEkscluster").getEkscluster = null as any;
export const getEksclusterOutput: typeof import("./getEkscluster").getEksclusterOutput = null as any;
utilities.lazyLoad(exports, ["getEkscluster","getEksclusterOutput"], () => require("./getEkscluster"));

export { GetGitRepositoryArgs, GetGitRepositoryResult, GetGitRepositoryOutputArgs } from "./getGitRepository";
export const getGitRepository: typeof import("./getGitRepository").getGitRepository = null as any;
export const getGitRepositoryOutput: typeof import("./getGitRepository").getGitRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getGitRepository","getGitRepositoryOutput"], () => require("./getGitRepository"));

export { GetHelmChartsArgs, GetHelmChartsResult, GetHelmChartsOutputArgs } from "./getHelmCharts";
export const getHelmCharts: typeof import("./getHelmCharts").getHelmCharts = null as any;
export const getHelmChartsOutput: typeof import("./getHelmCharts").getHelmChartsOutput = null as any;
utilities.lazyLoad(exports, ["getHelmCharts","getHelmChartsOutput"], () => require("./getHelmCharts"));

export { GetHelmFeatureArgs, GetHelmFeatureResult, GetHelmFeatureOutputArgs } from "./getHelmFeature";
export const getHelmFeature: typeof import("./getHelmFeature").getHelmFeature = null as any;
export const getHelmFeatureOutput: typeof import("./getHelmFeature").getHelmFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getHelmFeature","getHelmFeatureOutput"], () => require("./getHelmFeature"));

export { GetHelmRepositoryArgs, GetHelmRepositoryResult, GetHelmRepositoryOutputArgs } from "./getHelmRepository";
export const getHelmRepository: typeof import("./getHelmRepository").getHelmRepository = null as any;
export const getHelmRepositoryOutput: typeof import("./getHelmRepository").getHelmRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getHelmRepository","getHelmRepositoryOutput"], () => require("./getHelmRepository"));

export { GetInspectionResultsArgs, GetInspectionResultsResult, GetInspectionResultsOutputArgs } from "./getInspectionResults";
export const getInspectionResults: typeof import("./getInspectionResults").getInspectionResults = null as any;
export const getInspectionResultsOutput: typeof import("./getInspectionResults").getInspectionResultsOutput = null as any;
utilities.lazyLoad(exports, ["getInspectionResults","getInspectionResultsOutput"], () => require("./getInspectionResults"));

export { GetInspectionsArgs, GetInspectionsResult, GetInspectionsOutputArgs } from "./getInspections";
export const getInspections: typeof import("./getInspections").getInspections = null as any;
export const getInspectionsOutput: typeof import("./getInspections").getInspectionsOutput = null as any;
utilities.lazyLoad(exports, ["getInspections","getInspectionsOutput"], () => require("./getInspections"));

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));

export { GetKubernetesSecretArgs, GetKubernetesSecretResult, GetKubernetesSecretOutputArgs } from "./getKubernetesSecret";
export const getKubernetesSecret: typeof import("./getKubernetesSecret").getKubernetesSecret = null as any;
export const getKubernetesSecretOutput: typeof import("./getKubernetesSecret").getKubernetesSecretOutput = null as any;
utilities.lazyLoad(exports, ["getKubernetesSecret","getKubernetesSecretOutput"], () => require("./getKubernetesSecret"));

export { GetManagementClusterArgs, GetManagementClusterResult, GetManagementClusterOutputArgs } from "./getManagementCluster";
export const getManagementCluster: typeof import("./getManagementCluster").getManagementCluster = null as any;
export const getManagementClusterOutput: typeof import("./getManagementCluster").getManagementClusterOutput = null as any;
utilities.lazyLoad(exports, ["getManagementCluster","getManagementClusterOutput"], () => require("./getManagementCluster"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetPackageArgs, GetPackageResult, GetPackageOutputArgs } from "./getPackage";
export const getPackage: typeof import("./getPackage").getPackage = null as any;
export const getPackageOutput: typeof import("./getPackage").getPackageOutput = null as any;
utilities.lazyLoad(exports, ["getPackage","getPackageOutput"], () => require("./getPackage"));

export { GetPackageInstallArgs, GetPackageInstallResult, GetPackageInstallOutputArgs } from "./getPackageInstall";
export const getPackageInstall: typeof import("./getPackageInstall").getPackageInstall = null as any;
export const getPackageInstallOutput: typeof import("./getPackageInstall").getPackageInstallOutput = null as any;
utilities.lazyLoad(exports, ["getPackageInstall","getPackageInstallOutput"], () => require("./getPackageInstall"));

export { GetPackageRepositoryArgs, GetPackageRepositoryResult, GetPackageRepositoryOutputArgs } from "./getPackageRepository";
export const getPackageRepository: typeof import("./getPackageRepository").getPackageRepository = null as any;
export const getPackageRepositoryOutput: typeof import("./getPackageRepository").getPackageRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getPackageRepository","getPackageRepositoryOutput"], () => require("./getPackageRepository"));

export { GetPackagesArgs, GetPackagesResult, GetPackagesOutputArgs } from "./getPackages";
export const getPackages: typeof import("./getPackages").getPackages = null as any;
export const getPackagesOutput: typeof import("./getPackages").getPackagesOutput = null as any;
utilities.lazyLoad(exports, ["getPackages","getPackagesOutput"], () => require("./getPackages"));

export { GetPermissionTemplateArgs, GetPermissionTemplateResult, GetPermissionTemplateOutputArgs } from "./getPermissionTemplate";
export const getPermissionTemplate: typeof import("./getPermissionTemplate").getPermissionTemplate = null as any;
export const getPermissionTemplateOutput: typeof import("./getPermissionTemplate").getPermissionTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionTemplate","getPermissionTemplateOutput"], () => require("./getPermissionTemplate"));

export { GetProvisionerArgs, GetProvisionerResult, GetProvisionerOutputArgs } from "./getProvisioner";
export const getProvisioner: typeof import("./getProvisioner").getProvisioner = null as any;
export const getProvisionerOutput: typeof import("./getProvisioner").getProvisionerOutput = null as any;
utilities.lazyLoad(exports, ["getProvisioner","getProvisionerOutput"], () => require("./getProvisioner"));

export { GetRepositoryCredentialArgs, GetRepositoryCredentialResult, GetRepositoryCredentialOutputArgs } from "./getRepositoryCredential";
export const getRepositoryCredential: typeof import("./getRepositoryCredential").getRepositoryCredential = null as any;
export const getRepositoryCredentialOutput: typeof import("./getRepositoryCredential").getRepositoryCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCredential","getRepositoryCredentialOutput"], () => require("./getRepositoryCredential"));

export { GetTargetLocationArgs, GetTargetLocationResult, GetTargetLocationOutputArgs } from "./getTargetLocation";
export const getTargetLocation: typeof import("./getTargetLocation").getTargetLocation = null as any;
export const getTargetLocationOutput: typeof import("./getTargetLocation").getTargetLocationOutput = null as any;
utilities.lazyLoad(exports, ["getTargetLocation","getTargetLocationOutput"], () => require("./getTargetLocation"));

export { GetWorkspaceArgs, GetWorkspaceResult, GetWorkspaceOutputArgs } from "./getWorkspace";
export const getWorkspace: typeof import("./getWorkspace").getWorkspace = null as any;
export const getWorkspaceOutput: typeof import("./getWorkspace").getWorkspaceOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspace","getWorkspaceOutput"], () => require("./getWorkspace"));

export { GitRepositoryArgs, GitRepositoryState } from "./gitRepository";
export type GitRepository = import("./gitRepository").GitRepository;
export const GitRepository: typeof import("./gitRepository").GitRepository = null as any;
utilities.lazyLoad(exports, ["GitRepository"], () => require("./gitRepository"));

export { HelmFeatureArgs, HelmFeatureState } from "./helmFeature";
export type HelmFeature = import("./helmFeature").HelmFeature;
export const HelmFeature: typeof import("./helmFeature").HelmFeature = null as any;
utilities.lazyLoad(exports, ["HelmFeature"], () => require("./helmFeature"));

export { HelmReleaseArgs, HelmReleaseState } from "./helmRelease";
export type HelmRelease = import("./helmRelease").HelmRelease;
export const HelmRelease: typeof import("./helmRelease").HelmRelease = null as any;
utilities.lazyLoad(exports, ["HelmRelease"], () => require("./helmRelease"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { ImagePolicyArgs, ImagePolicyState } from "./imagePolicy";
export type ImagePolicy = import("./imagePolicy").ImagePolicy;
export const ImagePolicy: typeof import("./imagePolicy").ImagePolicy = null as any;
utilities.lazyLoad(exports, ["ImagePolicy"], () => require("./imagePolicy"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { KubernetesSecretArgs, KubernetesSecretState } from "./kubernetesSecret";
export type KubernetesSecret = import("./kubernetesSecret").KubernetesSecret;
export const KubernetesSecret: typeof import("./kubernetesSecret").KubernetesSecret = null as any;
utilities.lazyLoad(exports, ["KubernetesSecret"], () => require("./kubernetesSecret"));

export { KustomizationArgs, KustomizationState } from "./kustomization";
export type Kustomization = import("./kustomization").Kustomization;
export const Kustomization: typeof import("./kustomization").Kustomization = null as any;
utilities.lazyLoad(exports, ["Kustomization"], () => require("./kustomization"));

export { ManagementClusterArgs, ManagementClusterState } from "./managementCluster";
export type ManagementCluster = import("./managementCluster").ManagementCluster;
export const ManagementCluster: typeof import("./managementCluster").ManagementCluster = null as any;
utilities.lazyLoad(exports, ["ManagementCluster"], () => require("./managementCluster"));

export { MutationPolicyArgs, MutationPolicyState } from "./mutationPolicy";
export type MutationPolicy = import("./mutationPolicy").MutationPolicy;
export const MutationPolicy: typeof import("./mutationPolicy").MutationPolicy = null as any;
utilities.lazyLoad(exports, ["MutationPolicy"], () => require("./mutationPolicy"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceQuotaPolicyArgs, NamespaceQuotaPolicyState } from "./namespaceQuotaPolicy";
export type NamespaceQuotaPolicy = import("./namespaceQuotaPolicy").NamespaceQuotaPolicy;
export const NamespaceQuotaPolicy: typeof import("./namespaceQuotaPolicy").NamespaceQuotaPolicy = null as any;
utilities.lazyLoad(exports, ["NamespaceQuotaPolicy"], () => require("./namespaceQuotaPolicy"));

export { NetworkPolicyArgs, NetworkPolicyState } from "./networkPolicy";
export type NetworkPolicy = import("./networkPolicy").NetworkPolicy;
export const NetworkPolicy: typeof import("./networkPolicy").NetworkPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkPolicy"], () => require("./networkPolicy"));

export { PackageInstallArgs, PackageInstallState } from "./packageInstall";
export type PackageInstall = import("./packageInstall").PackageInstall;
export const PackageInstall: typeof import("./packageInstall").PackageInstall = null as any;
utilities.lazyLoad(exports, ["PackageInstall"], () => require("./packageInstall"));

export { PackageRepositoryArgs, PackageRepositoryState } from "./packageRepository";
export type PackageRepository = import("./packageRepository").PackageRepository;
export const PackageRepository: typeof import("./packageRepository").PackageRepository = null as any;
utilities.lazyLoad(exports, ["PackageRepository"], () => require("./packageRepository"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProvisionerArgs, ProvisionerState } from "./provisioner";
export type Provisioner = import("./provisioner").Provisioner;
export const Provisioner: typeof import("./provisioner").Provisioner = null as any;
utilities.lazyLoad(exports, ["Provisioner"], () => require("./provisioner"));

export { RepositoryCredentialArgs, RepositoryCredentialState } from "./repositoryCredential";
export type RepositoryCredential = import("./repositoryCredential").RepositoryCredential;
export const RepositoryCredential: typeof import("./repositoryCredential").RepositoryCredential = null as any;
utilities.lazyLoad(exports, ["RepositoryCredential"], () => require("./repositoryCredential"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { TanzuKubernetesClusterArgs, TanzuKubernetesClusterState } from "./tanzuKubernetesCluster";
export type TanzuKubernetesCluster = import("./tanzuKubernetesCluster").TanzuKubernetesCluster;
export const TanzuKubernetesCluster: typeof import("./tanzuKubernetesCluster").TanzuKubernetesCluster = null as any;
utilities.lazyLoad(exports, ["TanzuKubernetesCluster"], () => require("./tanzuKubernetesCluster"));

export { TargetLocationArgs, TargetLocationState } from "./targetLocation";
export type TargetLocation = import("./targetLocation").TargetLocation;
export const TargetLocation: typeof import("./targetLocation").TargetLocation = null as any;
utilities.lazyLoad(exports, ["TargetLocation"], () => require("./targetLocation"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "tanzu-mission-control:index/akscluster:Akscluster":
                return new Akscluster(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/backupSchedule:BackupSchedule":
                return new BackupSchedule(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/clusterGroup:ClusterGroup":
                return new ClusterGroup(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/clusterNodePool:ClusterNodePool":
                return new ClusterNodePool(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/credential:Credential":
                return new Credential(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/customIamRole:CustomIamRole":
                return new CustomIamRole(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/customPolicy:CustomPolicy":
                return new CustomPolicy(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/customPolicyTemplate:CustomPolicyTemplate":
                return new CustomPolicyTemplate(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/ekscluster:Ekscluster":
                return new Ekscluster(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/enableDataProtection:EnableDataProtection":
                return new EnableDataProtection(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/gitRepository:GitRepository":
                return new GitRepository(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/helmFeature:HelmFeature":
                return new HelmFeature(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/helmRelease:HelmRelease":
                return new HelmRelease(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/imagePolicy:ImagePolicy":
                return new ImagePolicy(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/kubernetesSecret:KubernetesSecret":
                return new KubernetesSecret(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/kustomization:Kustomization":
                return new Kustomization(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/managementCluster:ManagementCluster":
                return new ManagementCluster(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/mutationPolicy:MutationPolicy":
                return new MutationPolicy(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/namespaceQuotaPolicy:NamespaceQuotaPolicy":
                return new NamespaceQuotaPolicy(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/networkPolicy:NetworkPolicy":
                return new NetworkPolicy(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/packageInstall:PackageInstall":
                return new PackageInstall(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/packageRepository:PackageRepository":
                return new PackageRepository(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/provisioner:Provisioner":
                return new Provisioner(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/repositoryCredential:RepositoryCredential":
                return new RepositoryCredential(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/tanzuKubernetesCluster:TanzuKubernetesCluster":
                return new TanzuKubernetesCluster(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/targetLocation:TargetLocation":
                return new TargetLocation(name, <any>undefined, { urn })
            case "tanzu-mission-control:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/akscluster", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/backupSchedule", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/cluster", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/clusterGroup", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/clusterNodePool", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/credential", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/customIamRole", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/customPolicy", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/customPolicyTemplate", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/ekscluster", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/enableDataProtection", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/gitRepository", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/helmFeature", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/helmRelease", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/iamPolicy", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/imagePolicy", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/integration", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/kubernetesSecret", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/kustomization", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/managementCluster", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/mutationPolicy", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/namespace", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/namespaceQuotaPolicy", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/networkPolicy", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/packageInstall", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/packageRepository", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/provisioner", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/repositoryCredential", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/securityPolicy", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/tanzuKubernetesCluster", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/targetLocation", _module)
pulumi.runtime.registerResourceModule("tanzu-mission-control", "index/workspace", _module)
pulumi.runtime.registerResourcePackage("tanzu-mission-control", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:tanzu-mission-control") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
