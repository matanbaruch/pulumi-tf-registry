// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Credential extends pulumi.CustomResource {
    /**
     * Get an existing Credential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialState, opts?: pulumi.CustomResourceOptions): Credential {
        return new Credential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tanzu-mission-control:index/credential:Credential';

    /**
     * Returns true if the given object is an instance of Credential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Credential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Credential.__pulumiType;
    }

    /**
     * Metadata for the resource
     */
    public readonly meta!: pulumi.Output<outputs.CredentialMeta | undefined>;
    /**
     * Name of this credential
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Wait timeout duration until credential resource reaches VALID state. Accepted timeout duration values like 5s, 5m, or
     * 1h, higher than zero.
     */
    public readonly readyWaitTimeout!: pulumi.Output<string | undefined>;
    /**
     * Spec of credential resource
     */
    public readonly spec!: pulumi.Output<outputs.CredentialSpec | undefined>;
    /**
     * Status of credential resource
     */
    public /*out*/ readonly status!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Credential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialArgs | CredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialState | undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readyWaitTimeout"] = state ? state.readyWaitTimeout : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as CredentialArgs | undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readyWaitTimeout"] = args ? args.readyWaitTimeout : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Credential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Credential resources.
 */
export interface CredentialState {
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.CredentialMeta>;
    /**
     * Name of this credential
     */
    name?: pulumi.Input<string>;
    /**
     * Wait timeout duration until credential resource reaches VALID state. Accepted timeout duration values like 5s, 5m, or
     * 1h, higher than zero.
     */
    readyWaitTimeout?: pulumi.Input<string>;
    /**
     * Spec of credential resource
     */
    spec?: pulumi.Input<inputs.CredentialSpec>;
    /**
     * Status of credential resource
     */
    status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Credential resource.
 */
export interface CredentialArgs {
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.CredentialMeta>;
    /**
     * Name of this credential
     */
    name?: pulumi.Input<string>;
    /**
     * Wait timeout duration until credential resource reaches VALID state. Accepted timeout duration values like 5s, 5m, or
     * 1h, higher than zero.
     */
    readyWaitTimeout?: pulumi.Input<string>;
    /**
     * Spec of credential resource
     */
    spec?: pulumi.Input<inputs.CredentialSpec>;
}
