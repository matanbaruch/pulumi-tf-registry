// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getHelmRepository(args: GetHelmRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetHelmRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tanzu-mission-control:index/getHelmRepository:getHelmRepository", {
        "id": args.id,
        "meta": args.meta,
        "name": args.name,
        "namespaceName": args.namespaceName,
        "scope": args.scope,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getHelmRepository.
 */
export interface GetHelmRepositoryArgs {
    id?: string;
    meta?: inputs.GetHelmRepositoryMeta;
    name?: string;
    namespaceName?: string;
    scope: inputs.GetHelmRepositoryScope;
}

/**
 * A collection of values returned by getHelmRepository.
 */
export interface GetHelmRepositoryResult {
    readonly id: string;
    readonly meta?: outputs.GetHelmRepositoryMeta;
    readonly name?: string;
    readonly namespaceName?: string;
    readonly scope: outputs.GetHelmRepositoryScope;
    readonly specs: outputs.GetHelmRepositorySpec[];
    readonly status: {[key: string]: string};
}
export function getHelmRepositoryOutput(args: GetHelmRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetHelmRepositoryResult> {
    return pulumi.output(args).apply((a: any) => getHelmRepository(a, opts))
}

/**
 * A collection of arguments for invoking getHelmRepository.
 */
export interface GetHelmRepositoryOutputArgs {
    id?: pulumi.Input<string>;
    meta?: pulumi.Input<inputs.GetHelmRepositoryMetaArgs>;
    name?: pulumi.Input<string>;
    namespaceName?: pulumi.Input<string>;
    scope: pulumi.Input<inputs.GetHelmRepositoryScopeArgs>;
}
