// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AksclusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface AksclusterSpec {
    /**
     * Name of the cluster in TMC
     */
    agentName?: pulumi.Input<string>;
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: pulumi.Input<string>;
    /**
     * AKS config for the cluster control plane
     */
    config: pulumi.Input<inputs.AksclusterSpecConfig>;
    /**
     * Nodepool definitions for the cluster
     */
    nodepools: pulumi.Input<pulumi.Input<inputs.AksclusterSpecNodepool>[]>;
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: pulumi.Input<string>;
    /**
     * Resource ID of the cluster in Azure.
     */
    resourceId?: pulumi.Input<string>;
}

export interface AksclusterSpecConfig {
    /**
     * Access config
     */
    accessConfig?: pulumi.Input<inputs.AksclusterSpecConfigAccessConfig>;
    /**
     * Addons Config
     */
    addonConfig?: pulumi.Input<inputs.AksclusterSpecConfigAddonConfig>;
    /**
     * API Server Access Config
     */
    apiServerAccessConfig?: pulumi.Input<inputs.AksclusterSpecConfigApiServerAccessConfig>;
    /**
     * Auto Upgrade Config
     */
    autoUpgradeConfig?: pulumi.Input<inputs.AksclusterSpecConfigAutoUpgradeConfig>;
    /**
     * Resource ID of the disk encryption set to use for enabling
     */
    diskEncryptionSet?: pulumi.Input<string>;
    /**
     * Managed Identity Config
     */
    identityConfig?: pulumi.Input<inputs.AksclusterSpecConfigIdentityConfig>;
    /**
     * Kubernetes version of the cluster
     */
    kubernetesVersion: pulumi.Input<string>;
    /**
     * Linux Config
     */
    linuxConfig?: pulumi.Input<inputs.AksclusterSpecConfigLinuxConfig>;
    /**
     * The geo-location where the resource lives for the cluster.
     */
    location: pulumi.Input<string>;
    /**
     * Network Config
     */
    networkConfig: pulumi.Input<inputs.AksclusterSpecConfigNetworkConfig>;
    /**
     * Name of the resource group containing nodepools.
     */
    nodeResourceGroupName?: pulumi.Input<string>;
    /**
     * Azure Kubernetes Service SKU
     */
    sku?: pulumi.Input<inputs.AksclusterSpecConfigSku>;
    /**
     * Storage Config
     */
    storageConfig?: pulumi.Input<inputs.AksclusterSpecConfigStorageConfig>;
    /**
     * Metadata to apply to the cluster to assist with categorization and organization
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface AksclusterSpecConfigAccessConfig {
    /**
     * Azure Active Directory config
     */
    aadConfig?: pulumi.Input<inputs.AksclusterSpecConfigAccessConfigAadConfig>;
    /**
     * Disable local accounts
     */
    disableLocalAccounts?: pulumi.Input<boolean>;
    /**
     * Enable kubernetes RBAC
     */
    enableRbac?: pulumi.Input<boolean>;
}

export interface AksclusterSpecConfigAccessConfigAadConfig {
    /**
     * List of AAD group object IDs that will have admin role of the cluster.
     */
    adminGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable Azure RBAC for Kubernetes authorization
     */
    enableAzureRbac?: pulumi.Input<boolean>;
    /**
     * Enable Managed RBAC
     */
    managed?: pulumi.Input<boolean>;
    /**
     * AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
     */
    tenantId?: pulumi.Input<string>;
}

export interface AksclusterSpecConfigAddonConfig {
    /**
     * Keyvault secrets provider addon
     */
    azureKeyvaultSecretsProviderAddonConfigs?: pulumi.Input<pulumi.Input<inputs.AksclusterSpecConfigAddonConfigAzureKeyvaultSecretsProviderAddonConfig>[]>;
    /**
     * Azure policy addon
     */
    azurePolicyAddonConfigs?: pulumi.Input<pulumi.Input<inputs.AksclusterSpecConfigAddonConfigAzurePolicyAddonConfig>[]>;
    /**
     * Monitor addon
     */
    monitorAddonConfigs?: pulumi.Input<pulumi.Input<inputs.AksclusterSpecConfigAddonConfigMonitorAddonConfig>[]>;
}

export interface AksclusterSpecConfigAddonConfigAzureKeyvaultSecretsProviderAddonConfig {
    /**
     * Enable Azure Key Vault Secrets Provider
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Enable secrets rotation
     */
    enableSecretRotation?: pulumi.Input<boolean>;
    /**
     * Secret rotation interval
     */
    rotationPollInterval?: pulumi.Input<string>;
}

export interface AksclusterSpecConfigAddonConfigAzurePolicyAddonConfig {
    /**
     * Enable policy addon
     */
    enable?: pulumi.Input<boolean>;
}

export interface AksclusterSpecConfigAddonConfigMonitorAddonConfig {
    /**
     * Enable monitor
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Log analytics workspace ID for the monitoring addon
     */
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface AksclusterSpecConfigApiServerAccessConfig {
    /**
     * IP ranges authorized to access the Kubernetes API server
     */
    authorizedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable Private Cluster
     */
    enablePrivateCluster: pulumi.Input<boolean>;
}

export interface AksclusterSpecConfigAutoUpgradeConfig {
    /**
     * Upgrade Channel. Allowed values include: NONE, PATCH, STABLE, RAPID or NODE_IMAGE
     */
    upgradeChannel?: pulumi.Input<string>;
}

export interface AksclusterSpecConfigIdentityConfig {
    /**
     * Type of managed identity used by the cluster (default IDENTITY_TYPE_SYSTEM_ASSIGNED). Allowed values include: IDENTITY_TYPE_SYSTEM_ASSIGNED or IDENTITY_TYPE_USER_ASSIGNED
     */
    type?: pulumi.Input<string>;
    /**
     * User Assigned Managed Identity Config
     */
    userAssigned?: pulumi.Input<inputs.AksclusterSpecConfigIdentityConfigUserAssigned>;
}

export interface AksclusterSpecConfigIdentityConfigUserAssigned {
    /**
     * The ARM resource ID of user assigned identity in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'
     */
    resourceId: pulumi.Input<string>;
}

export interface AksclusterSpecConfigLinuxConfig {
    /**
     * Administrator username to use for Linux VMs
     */
    adminUsername: pulumi.Input<string>;
    /**
     * Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AksclusterSpecConfigNetworkConfig {
    /**
     * DNS prefix of the cluster
     */
    dnsPrefix: pulumi.Input<string>;
    /**
     * IP address assigned to the Kubernetes DNS service. This key can only be set when the network_config.network_plugin key is set to 'azure'.
     */
    dnsServiceIp?: pulumi.Input<string>;
    /**
     * A CIDR notation IP range assigned to the Docker bridge network
     */
    dockerBridgeCidr?: pulumi.Input<string>;
    /**
     * Load balancer SKU
     */
    loadBalancerSku?: pulumi.Input<string>;
    /**
     * Network plugin. It is used for building Kubernetes network. Allowed values: azure, kubenet. Specify 'azure' for routable pod IPs from VNET, 'kubenet' for non-routable pod IPs with an overlay network, Defaults to 'kubenet'
     */
    networkPlugin?: pulumi.Input<string>;
    /**
     * Network plugin mode. Allowed values: overlay. Used to control the mode the network plugin should operate in. For example, 'overlay' used with networkPlugin=azure will use an overlay network (non-VNET IPs) for pods in the cluster.
     */
    networkPluginMode?: pulumi.Input<string>;
    /**
     * Network policy
     */
    networkPolicy?: pulumi.Input<string>;
    /**
     * CIDR notation IP ranges from which to assign pod IPs
     */
    podCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CIDR notation IP ranges from which to assign service cluster IP. This key can only be set when the network_config.network_plugin key is set to 'azure'.
     */
    serviceCidrs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AksclusterSpecConfigSku {
    /**
     * Name of the cluster SKU. Allowed values include: BASIC.
     */
    name?: pulumi.Input<string>;
    /**
     * Tier of the cluster SKU. Allowed values include: FREE or PAID.
     */
    tier?: pulumi.Input<string>;
}

export interface AksclusterSpecConfigStorageConfig {
    /**
     * Enable the azure disk CSI driver for the storage
     */
    enableDiskCsiDriver?: pulumi.Input<boolean>;
    /**
     * Enable the azure file CSI driver for the storage
     */
    enableFileCsiDriver?: pulumi.Input<boolean>;
    /**
     * Enable the snapshot controller for the storage
     */
    enableSnapshotController?: pulumi.Input<boolean>;
}

export interface AksclusterSpecNodepool {
    /**
     * Name of the nodepool, immutable
     */
    name: pulumi.Input<string>;
    /**
     * Spec for the nodepool
     */
    spec: pulumi.Input<inputs.AksclusterSpecNodepoolSpec>;
}

export interface AksclusterSpecNodepoolSpec {
    /**
     * Auto scaling config.
     */
    autoScalingConfig?: pulumi.Input<inputs.AksclusterSpecNodepoolSpecAutoScalingConfig>;
    /**
     * The list of Availability zones to use for nodepool. This can only be specified if the type of the nodepool is AvailabilitySet.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Count is the number of nodes
     */
    count: pulumi.Input<number>;
    /**
     * Whether each node is allocated its own public IP
     */
    enableNodePublicIp?: pulumi.Input<boolean>;
    /**
     * The maximum number of pods that can run on a node
     */
    maxPods?: pulumi.Input<number>;
    /**
     * The mode of the nodepool. Allowed values include: SYSTEM or USER. A cluster must have at least one 'SYSTEM' nodepool at all times.
     */
    mode: pulumi.Input<string>;
    /**
     * The node image version of the nodepool.
     */
    nodeImageVersion?: pulumi.Input<string>;
    /**
     * The node labels to be persisted across all nodes in nodepool
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * OS Disk Size in GB to be used to specify the disk size for every machine in the nodepool. If you specify 0, it will apply the default osDisk size according to the vmSize specified
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * OS Disk Type. Allowed values include: EPHEMERAL or MANAGED.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * The OS type of the nodepool. Allowed values include: LINUX.
     */
    osType?: pulumi.Input<string>;
    /**
     * The ID of a subnet in an existing VNet into which to assign pods in the cluster. Requires network-plugin to be azure and not compatible with network-plugin-mode overlay
     */
    podSubnetId?: pulumi.Input<string>;
    /**
     * Scale set eviction policy, Allowed values include: DELETE or DEALLOCATE.
     */
    scaleSetEvictionPolicy?: pulumi.Input<string>;
    /**
     * Scale set priority. Allowed values include: REGULAR or SPOT.
     */
    scaleSetPriority?: pulumi.Input<string>;
    /**
     * Max spot price
     */
    spotMaxPrice?: pulumi.Input<number>;
    /**
     * AKS specific node tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The taints added to new nodes during nodepool create and scale
     */
    taints?: pulumi.Input<pulumi.Input<inputs.AksclusterSpecNodepoolSpecTaint>[]>;
    /**
     * The Nodepool type. Allowed values include: VIRTUAL_MACHINE_SCALE_SETS or AVAILABILITY_SET.
     */
    type?: pulumi.Input<string>;
    /**
     * upgrade config
     */
    upgradeConfig?: pulumi.Input<inputs.AksclusterSpecNodepoolSpecUpgradeConfig>;
    /**
     * Virtual Machine Size
     */
    vmSize: pulumi.Input<string>;
    /**
     * The ID of a subnet in an existing VNet into which to deploy the cluster. If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes
     */
    vnetSubnetId?: pulumi.Input<string>;
}

export interface AksclusterSpecNodepoolSpecAutoScalingConfig {
    /**
     * Enable auto scaling
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Maximum node count
     */
    maxCount?: pulumi.Input<number>;
    /**
     * Minimum node count
     */
    minCount?: pulumi.Input<number>;
}

export interface AksclusterSpecNodepoolSpecTaint {
    /**
     * Current effect state of the node pool
     */
    effect?: pulumi.Input<string>;
    /**
     * The taint key to be applied to a node
     */
    key?: pulumi.Input<string>;
    /**
     * The taint value corresponding to the taint key
     */
    value?: pulumi.Input<string>;
}

export interface AksclusterSpecNodepoolSpecUpgradeConfig {
    /**
     * Max Surge
     */
    maxSurge?: pulumi.Input<string>;
}

export interface BackupScheduleMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface BackupScheduleScope {
    /**
     * Cluster scope block
     */
    cluster?: pulumi.Input<inputs.BackupScheduleScopeCluster>;
    /**
     * Cluster group scope block
     */
    clusterGroup?: pulumi.Input<inputs.BackupScheduleScopeClusterGroup>;
}

export interface BackupScheduleScopeCluster {
    /**
     * Cluster name
     */
    clusterName: pulumi.Input<string>;
    /**
     * Management cluster name
     */
    managementClusterName: pulumi.Input<string>;
    /**
     * Cluster provisioner name
     */
    provisionerName: pulumi.Input<string>;
}

export interface BackupScheduleScopeClusterGroup {
    /**
     * Cluster group name
     */
    clusterGroupName: pulumi.Input<string>;
}

export interface BackupScheduleSelector {
    /**
     * Specifies the name of excluded clusters.
     */
    excludedNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The label selector to selectively adding individual clusters to the cluster group backup schedule.
     * If not specified, all clusters are included.
     */
    labelSelector?: pulumi.Input<inputs.BackupScheduleSelectorLabelSelector>;
    /**
     * Specifies name of cluster to be selected.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupScheduleSelectorLabelSelector {
    /**
     * (Repeatable Block) A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSelectorLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the map is equivalent to an element of match_expressions, whose key field is "key", the operator is "In" and the values array contains only "value".
     * The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface BackupScheduleSelectorLabelSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to.
     */
    key: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values.
     * Valid operators are "In", "NotIn", "Exists" and "DoesNotExist".
     */
    operator: pulumi.Input<string>;
    /**
     * Values is an array of string values.
     * If the operator is "In" or "NotIn", the values array must be non-empty.
     * If the operator is "Exists" or "DoesNotExist", the values array must be empty.
     * This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupScheduleSpec {
    /**
     * Paused specifies whether the schedule is paused or not. (Default: False)
     */
    paused?: pulumi.Input<boolean>;
    /**
     * Schedule block
     */
    schedule: pulumi.Input<inputs.BackupScheduleSpecSchedule>;
    /**
     * Backup schedule template block, backup definition to be run on the provided schedule
     */
    template?: pulumi.Input<inputs.BackupScheduleSpecTemplate>;
}

export interface BackupScheduleSpecSchedule {
    /**
     * Cron expression of backup schedule rate/interval
     */
    rate: pulumi.Input<string>;
}

export interface BackupScheduleSpecTemplate {
    /**
     * The backup retention period.
     */
    backupTtl?: pulumi.Input<string>;
    /**
     * Specifies the time used to wait for CSI VolumeSnapshot status turns to ReadyToUse during creation, before returning error as timeout.
     * The default value is 10 minute.
     * Format is the time number and time sign, example: "50s" (50 seconds)
     */
    csiSnapshotTimeout?: pulumi.Input<string>;
    /**
     * Specifies whether all pod volumes should be backed up via file system backup by default.
     * (Default: True)
     */
    defaultVolumesToFsBackup?: pulumi.Input<boolean>;
    /**
     * Specifies whether restic should be used to take a backup of all pod volumes by default.
     * (Default: False)
     */
    defaultVolumesToRestic?: pulumi.Input<boolean>;
    /**
     * List of cluster-scoped resource type names to exclude from the backup.
     * If set to "*", all cluster-scoped resource types are excluded.
     */
    excludedClusterScopedResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of of namespace-scoped resource type names to exclude from the backup.
     * If set to "*", all namespace-scoped resource types are excluded.
     */
    excludedNamespaceScopedResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The namespaces to be excluded in the backup.
     * Can't be used if scope is SET_NAMESPACES.
     */
    excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name list for the resources to be excluded in backup.
     */
    excludedResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Hooks block represent custom actions that should be executed at different phases of the backup.
     */
    hooks?: pulumi.Input<inputs.BackupScheduleSpecTemplateHooks>;
    /**
     * A flag which specifies whether cluster-scoped resources should be included for consideration in the backup.
     * If set to true, all cluster-scoped resources will be backed up. If set to false, all cluster-scoped resources will be excluded from the backup.
     * If unset, all cluster-scoped resources are included if and only if all namespaces are included and there are no excluded namespaces.
     * Otherwise, only cluster-scoped resources associated with namespace-scoped resources included in the backup spec are backed up.
     * For example, if a PersistentVolumeClaim is included in the backup, its associated PersistentVolume (which is cluster-scoped) would also be backed up.
     * (Default: False)
     */
    includeClusterResources?: pulumi.Input<boolean>;
    /**
     * List of cluster-scoped resource type names to include in the backup.
     * If set to "*", all cluster-scoped resource types are included.
     *   The default value is empty, which means only related cluster-scoped resources are included.
     */
    includedClusterScopedResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of of namespace-scoped resource type names to include in the backup.
     * The default value is "*".
     */
    includedNamespaceScopedResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The namespace to be included for backup from.
     * If empty, all namespaces are included.
     * Can't be used if scope is FULL_CLUSTER.
     * Required if scope is SET_NAMESPACES.
     */
    includedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name list for the resources to be included into backup. If empty, all resources are included.
     */
    includedResources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The label selector to selectively adding individual objects to the backup schedule.
     * If not specified, all objects are included.
     * Can't be used if scope is FULL_CLUSTER or SET_NAMESPACES.
     * Required if scope is LABEL_SELECTOR and Or Label Selectors are not defined
     */
    labelSelector?: pulumi.Input<inputs.BackupScheduleSpecTemplateLabelSelector>;
    /**
     * (Repeatable Block) A list of label selectors to filter with when adding individual objects to the backup.
     * If multiple provided they will be joined by the OR operator.
     * LabelSelector as well as OrLabelSelectors cannot co-exist in backup request, only one of them can be used.
     * Can't be used if scope is FULL_CLUSTER or SET_NAMESPACES.
     * Required if scope is LABEL_SELECTOR and Label Selector is not defined
     */
    orLabelSelectors?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSpecTemplateOrLabelSelector>[]>;
    /**
     * Specifies the backup order of resources of specific Kind. The map key is the Kind name and value is a list of resource names separated by commas.
     * Each resource name has format "namespace/resourcename".
     * For cluster resources, simply use "resourcename".
     */
    orderedResources?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies whether snapshot data should be moved to the target location.(Default:False)
     */
    snapshotMoveData?: pulumi.Input<boolean>;
    /**
     * A flag which specifies whether to take cloud snapshots of any PV's referenced in the set of objects included in the Backup.
     * If set to true, snapshots will be taken, otherwise, snapshots will be skipped.
     * If left unset, snapshots will be attempted if volume snapshots are configured for the cluster.
     */
    snapshotVolumes?: pulumi.Input<boolean>;
    /**
     * The name of a BackupStorageLocation where the backup should be stored.
     */
    storageLocation?: pulumi.Input<string>;
    /**
     * System excluded namespaces for state.
     */
    sysExcludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list containing names of VolumeSnapshotLocations associated with this backup.
     */
    volumeSnapshotLocations?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupScheduleSpecTemplateHooks {
    /**
     * (Repeatable Block) Resources are hooks that should be executed when backing up individual instances of a resource.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSpecTemplateHooksResource>[]>;
}

export interface BackupScheduleSpecTemplateHooksResource {
    /**
     * Specifies the namespaces to which this hook spec does not apply.
     */
    excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the namespaces to which this hook spec applies.
     * If empty, it applies to all namespaces.
     */
    includedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The label selector to selectively adding individual objects to the hook resource.
     * If not specified, all objects are included.
     */
    labelSelector?: pulumi.Input<inputs.BackupScheduleSpecTemplateHooksResourceLabelSelector>;
    /**
     * The name of the hook resource.
     */
    name: pulumi.Input<string>;
    /**
     * (Repeatable Block) A list of backup hooks to execute after storing the item in the backup.
     * These are executed after all "additional items" from item actions are processed.
     */
    postHooks?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSpecTemplateHooksResourcePostHook>[]>;
    /**
     * (Repeatable Block) A list of backup hooks to execute after storing the item in the backup.
     * These are executed after all "additional items" from item actions are processed.
     */
    preHooks?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSpecTemplateHooksResourcePreHook>[]>;
}

export interface BackupScheduleSpecTemplateHooksResourceLabelSelector {
    /**
     * (Repeatable Block) A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSpecTemplateHooksResourceLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the map is equivalent to an element of match_expressions, whose key field is "key", the operator is "In" and the values array contains only "value".
     * The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface BackupScheduleSpecTemplateHooksResourceLabelSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to.
     */
    key: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values.
     * Valid operators are "In", "NotIn", "Exists" and "DoesNotExist".
     */
    operator: pulumi.Input<string>;
    /**
     * Values is an array of string values.
     * If the operator is "In" or "NotIn", the values array must be non-empty.
     * If the operator is "Exists" or "DoesNotExist", the values array must be empty.
     * This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupScheduleSpecTemplateHooksResourcePostHook {
    /**
     * Exec block defines an exec hook.
     */
    exec: pulumi.Input<inputs.BackupScheduleSpecTemplateHooksResourcePostHookExec>;
}

export interface BackupScheduleSpecTemplateHooksResourcePostHookExec {
    /**
     * The command and arguments to execute.
     */
    commands: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The container in the pod where the command should be executed.
     * If not specified, the pod's first container is used.
     */
    container: pulumi.Input<string>;
    /**
     * Specifies how Velero should behave if it encounters an error executing this hook.
     * Valid values are (FAIL, CONTINUE)
     */
    onError?: pulumi.Input<string>;
    /**
     * Defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
     */
    timeout?: pulumi.Input<string>;
}

export interface BackupScheduleSpecTemplateHooksResourcePreHook {
    /**
     * Exec block defines an exec hook.
     */
    exec: pulumi.Input<inputs.BackupScheduleSpecTemplateHooksResourcePreHookExec>;
}

export interface BackupScheduleSpecTemplateHooksResourcePreHookExec {
    /**
     * The command and arguments to execute.
     */
    commands: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The container in the pod where the command should be executed.
     * If not specified, the pod's first container is used.
     */
    container: pulumi.Input<string>;
    /**
     * Specifies how Velero should behave if it encounters an error executing this hook.
     * Valid values are (FAIL, CONTINUE)
     */
    onError?: pulumi.Input<string>;
    /**
     * Defines the maximum amount of time Velero should wait for the hook to complete before considering the execution a failure.
     */
    timeout?: pulumi.Input<string>;
}

export interface BackupScheduleSpecTemplateLabelSelector {
    /**
     * (Repeatable Block) A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSpecTemplateLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the map is equivalent to an element of match_expressions, whose key field is "key", the operator is "In" and the values array contains only "value".
     * The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface BackupScheduleSpecTemplateLabelSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to.
     */
    key: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values.
     * Valid operators are "In", "NotIn", "Exists" and "DoesNotExist".
     */
    operator: pulumi.Input<string>;
    /**
     * Values is an array of string values.
     * If the operator is "In" or "NotIn", the values array must be non-empty.
     * If the operator is "Exists" or "DoesNotExist", the values array must be empty.
     * This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface BackupScheduleSpecTemplateOrLabelSelector {
    /**
     * (Repeatable Block) A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSpecTemplateOrLabelSelectorMatchExpression>[]>;
    /**
     * A map of {key,value} pairs. A single {key,value} in the map is equivalent to an element of match_expressions, whose key field is "key", the operator is "In" and the values array contains only "value".
     * The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface BackupScheduleSpecTemplateOrLabelSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to.
     */
    key: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values.
     * Valid operators are "In", "NotIn", "Exists" and "DoesNotExist".
     */
    operator: pulumi.Input<string>;
    /**
     * Values is an array of string values.
     * If the operator is "In" or "NotIn", the values array must be non-empty.
     * If the operator is "Exists" or "DoesNotExist", the values array must be empty.
     * This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterAttachK8sCluster {
    /**
     * Attach cluster description
     */
    description?: pulumi.Input<string>;
    /**
     * Attach cluster KUBECONFIG path
     */
    kubeconfigFile?: pulumi.Input<string>;
    /**
     * Attach cluster KUBECONFIG
     */
    kubeconfigRaw?: pulumi.Input<string>;
}

export interface ClusterGroupMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface ClusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface ClusterNodePoolMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface ClusterNodePoolSpec {
    /**
     * Cloud labels
     */
    cloudLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Node labels
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * TKGAWSNodepool is the nodepool spec for TKG AWS cluster
     */
    tkgAws?: pulumi.Input<pulumi.Input<inputs.ClusterNodePoolSpecTkgAw>[]>;
    /**
     * TKGServiceVsphereNodepool is the nodepool spec for TKG service vsphere cluster
     */
    tkgServiceVspheres?: pulumi.Input<pulumi.Input<inputs.ClusterNodePoolSpecTkgServiceVsphere>[]>;
    /**
     * TkgVsphereNodepool is the nodepool config for the TKG vsphere cluster
     */
    tkgVspheres?: pulumi.Input<pulumi.Input<inputs.ClusterNodePoolSpecTkgVsphere>[]>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount: pulumi.Input<string>;
}

export interface ClusterNodePoolSpecTkgAw {
    /**
     * Nodepool instance type
     */
    class?: pulumi.Input<string>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystem of the nodes
     */
    storageClass?: pulumi.Input<string>;
}

export interface ClusterNodePoolSpecTkgServiceVsphere {
    /**
     * Nodepool instance type
     */
    class: pulumi.Input<string>;
    /**
     * Configure the failure domain of node pool. The potential values could be found using cluster:options api. This parameter will be ignored by the backend if the TKG service vsphere cluster doesn't support.
     */
    failureDomain?: pulumi.Input<string>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystem of the nodes
     */
    storageClass: pulumi.Input<string>;
    /**
     * Configurable volumes for nodepool nodes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.ClusterNodePoolSpecTkgServiceVsphereVolume>[]>;
}

export interface ClusterNodePoolSpecTkgServiceVsphereVolume {
    /**
     * Volume capacity is in gib
     */
    capacity?: pulumi.Input<number>;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: pulumi.Input<string>;
    /**
     * It is the volume name
     */
    name?: pulumi.Input<string>;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: pulumi.Input<string>;
}

export interface ClusterNodePoolSpecTkgVsphere {
    /**
     * VM specific configuration
     */
    vmConfig: pulumi.Input<inputs.ClusterNodePoolSpecTkgVsphereVmConfig>;
}

export interface ClusterNodePoolSpecTkgVsphereVmConfig {
    /**
     * Number of CPUs per node
     */
    cpu?: pulumi.Input<string>;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: pulumi.Input<string>;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: pulumi.Input<string>;
}

export interface ClusterSpec {
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: pulumi.Input<string>;
    /**
     * Optional image registry name is the name of the image registry to be used for the cluster
     */
    imageRegistry?: pulumi.Input<string>;
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: pulumi.Input<string>;
    /**
     * The Tanzu Kubernetes Grid (TKGm) AWS cluster spec
     */
    tkgAws?: pulumi.Input<inputs.ClusterSpecTkgAws>;
    /**
     * The Tanzu Kubernetes Grid Service (TKGs) cluster spec
     */
    tkgServiceVsphere?: pulumi.Input<inputs.ClusterSpecTkgServiceVsphere>;
    /**
     * The Tanzu Kubernetes Grid (TKGm) vSphere cluster spec
     */
    tkgVsphere?: pulumi.Input<inputs.ClusterSpecTkgVsphere>;
}

export interface ClusterSpecTkgAws {
    /**
     * Advanced configuration for TKGm cluster
     */
    advancedConfigs?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgAwsAdvancedConfig>[]>;
    /**
     * Kubernetes version distribution for the cluster
     */
    distribution: pulumi.Input<inputs.ClusterSpecTkgAwsDistribution>;
    /**
     * AWS related settings for workload cluster
     */
    settings: pulumi.Input<inputs.ClusterSpecTkgAwsSettings>;
    /**
     * Topology configuration of the cluster
     */
    topology: pulumi.Input<inputs.ClusterSpecTkgAwsTopology>;
}

export interface ClusterSpecTkgAwsAdvancedConfig {
    /**
     * The key of the advanced configuration parameters
     */
    key: pulumi.Input<string>;
    /**
     * The value of the advanced configuration parameters
     */
    value: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsDistribution {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: pulumi.Input<string>;
    /**
     * Name of the OS used for the cluster
     */
    osName?: pulumi.Input<string>;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Specifies name of the account in which to create the cluster
     */
    provisionerCredentialName?: pulumi.Input<string>;
    /**
     * Specifies region of the cluster
     */
    region: pulumi.Input<string>;
    /**
     * Specifies version of the cluster
     */
    version: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsSettings {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: pulumi.Input<inputs.ClusterSpecTkgAwsSettingsNetwork>;
    /**
     * Security Settings specifies security-related settings for the cluster
     */
    security: pulumi.Input<inputs.ClusterSpecTkgAwsSettingsSecurity>;
}

export interface ClusterSpecTkgAwsSettingsNetwork {
    /**
     * Cluster network specifies kubernetes network information for the cluster
     */
    cluster: pulumi.Input<inputs.ClusterSpecTkgAwsSettingsNetworkCluster>;
    /**
     * Provider Network specifies provider specific network information for the cluster
     */
    providers: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgAwsSettingsNetworkProvider>[]>;
}

export interface ClusterSpecTkgAwsSettingsNetworkCluster {
    /**
     * APIServerPort specifies the port address for the cluster that defaults to 6443.
     */
    apiServerPort?: pulumi.Input<number>;
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgAwsSettingsNetworkClusterPod>[]>;
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgAwsSettingsNetworkClusterService>[]>;
}

export interface ClusterSpecTkgAwsSettingsNetworkClusterPod {
    /**
     * CIDRBlocks specifies one or more of IP address ranges
     */
    cidrBlocks: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsSettingsNetworkClusterService {
    /**
     * CIDRBlocks specifies one or more of IP address ranges
     */
    cidrBlocks: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsSettingsNetworkProvider {
    /**
     * Optional list of subnets used to place the nodes in the cluster
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgAwsSettingsNetworkProviderSubnet>[]>;
    /**
     * AWS VPC configuration for the cluster
     */
    vpc: pulumi.Input<inputs.ClusterSpecTkgAwsSettingsNetworkProviderVpc>;
}

export interface ClusterSpecTkgAwsSettingsNetworkProviderSubnet {
    /**
     * AWS availability zone e.g. us-west-2a
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * CIDR for AWS subnet which must be in the range of AWS VPC CIDR block
     */
    cidrBlockSubnet?: pulumi.Input<string>;
    /**
     * Describes if it is public subnet or private subnet
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * This is the subnet ID of AWS. The rest of the fields are ignored if this field is specified
     */
    subnetId?: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsSettingsNetworkProviderVpc {
    /**
     * CIDR for AWS VPC. A valid example is 10.0.0.0/16
     */
    cidrBlockVpc?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsSettingsSecurity {
    /**
     * SSH key for provisioning and accessing the cluster VMs
     */
    sshKey: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsTopology {
    /**
     * AWS specific control plane configuration for workload cluster object
     */
    controlPlane: pulumi.Input<inputs.ClusterSpecTkgAwsTopologyControlPlane>;
    /**
     * Nodepool specific configuration
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgAwsTopologyNodePool>[]>;
}

export interface ClusterSpecTkgAwsTopologyControlPlane {
    /**
     * List of availability zones for the control plane nodes
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag which controls if the cluster needs to be highly available. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: pulumi.Input<boolean>;
    /**
     * Control plane instance type
     */
    instanceType: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsTopologyNodePool {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: pulumi.Input<inputs.ClusterSpecTkgAwsTopologyNodePoolInfo>;
    /**
     * Spec for the cluster nodepool
     */
    spec?: pulumi.Input<inputs.ClusterSpecTkgAwsTopologyNodePoolSpec>;
}

export interface ClusterSpecTkgAwsTopologyNodePoolInfo {
    /**
     * Description of the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool
     */
    name: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsTopologyNodePoolSpec {
    /**
     * Nodepool config for tkg aws
     */
    tkgAws?: pulumi.Input<inputs.ClusterSpecTkgAwsTopologyNodePoolSpecTkgAws>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsTopologyNodePoolSpecTkgAws {
    /**
     * Availability zone for the nodepool that is to be used when you are creating a nodepool for cluster in TMC hosted AWS solution
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Nodepool instance type whose potential values could be found using cluster:options api
     */
    instanceType: pulumi.Input<string>;
    /**
     * List of Availability Zones to place the AWS nodes on. Please use this field to provision a nodepool for workload cluster on an attached TKG AWS management cluster
     */
    nodePlacement: pulumi.Input<inputs.ClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsNodePlacement>;
    /**
     * Subnet ID of the private subnet in which you want the nodes to be created in
     */
    nodepoolSubnetId?: pulumi.Input<string>;
    /**
     * Kubernetes version of the node pool
     */
    version: pulumi.Input<string>;
}

export interface ClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsNodePlacement {
    /**
     * The Availability Zone where the AWS nodes are placed
     */
    awsAvailabilityZone: pulumi.Input<string>;
}

export interface ClusterSpecTkgServiceVsphere {
    /**
     * VSphere specific distribution
     */
    distribution: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereDistribution>;
    /**
     * VSphere related settings for workload cluster
     */
    settings: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereSettings>;
    /**
     * Topology specific configuration
     */
    topology: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopology>;
}

export interface ClusterSpecTkgServiceVsphereDistribution {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: pulumi.Input<string>;
    /**
     * Name of the OS used for the cluster
     */
    osName?: pulumi.Input<string>;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Version of the cluster
     */
    version: pulumi.Input<string>;
}

export interface ClusterSpecTkgServiceVsphereSettings {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereSettingsNetwork>;
    /**
     * StorageSettings specifies storage-related settings for the cluster
     */
    storage?: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereSettingsStorage>;
}

export interface ClusterSpecTkgServiceVsphereSettingsNetwork {
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgServiceVsphereSettingsNetworkPod>[]>;
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgServiceVsphereSettingsNetworkService>[]>;
}

export interface ClusterSpecTkgServiceVsphereSettingsNetworkPod {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterSpecTkgServiceVsphereSettingsNetworkService {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterSpecTkgServiceVsphereSettingsStorage {
    /**
     * Classes is a list of storage classes from the supervisor namespace to expose within a cluster. If omitted, all storage classes from the supervisor namespace will be exposed within the cluster.
     */
    classes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * DefaultClass is the valid storage class name which is treated as the default storage class within a cluster. If omitted, no default storage class is set.
     */
    defaultClass?: pulumi.Input<string>;
}

export interface ClusterSpecTkgServiceVsphereTopology {
    /**
     * Control plane specific configuration
     */
    controlPlane: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopologyControlPlane>;
    /**
     * Nodepool specific configuration
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopologyNodePool>[]>;
}

export interface ClusterSpecTkgServiceVsphereTopologyControlPlane {
    /**
     * Control plane instance type
     */
    class: pulumi.Input<string>;
    /**
     * High Availability or Non High Availability Cluster. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: pulumi.Input<boolean>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystems of the nodes
     */
    storageClass: pulumi.Input<string>;
    /**
     * Configurable volumes for control plane nodes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopologyControlPlaneVolume>[]>;
}

export interface ClusterSpecTkgServiceVsphereTopologyControlPlaneVolume {
    /**
     * Volume capacity is in gib
     */
    capacity?: pulumi.Input<number>;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: pulumi.Input<string>;
    /**
     * It is the volume name
     */
    name?: pulumi.Input<string>;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: pulumi.Input<string>;
}

export interface ClusterSpecTkgServiceVsphereTopologyNodePool {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopologyNodePoolInfo>;
    /**
     * Spec for the cluster nodepool
     */
    spec?: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopologyNodePoolSpec>;
}

export interface ClusterSpecTkgServiceVsphereTopologyNodePoolInfo {
    /**
     * Description for the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool
     */
    name?: pulumi.Input<string>;
}

export interface ClusterSpecTkgServiceVsphereTopologyNodePoolSpec {
    /**
     * Cloud labels
     */
    cloudLabel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Node labels
     */
    nodeLabel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Nodepool config for tkg service vsphere
     */
    tkgServiceVsphere?: pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphere>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: pulumi.Input<string>;
}

export interface ClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphere {
    /**
     * Control plane instance type
     */
    class: pulumi.Input<string>;
    /**
     * Configure the failure domain of node pool. The potential values could be found using cluster:options api.
     */
    failureDomain?: pulumi.Input<string>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystems of the nodes
     */
    storageClass: pulumi.Input<string>;
    /**
     * Configurable volumes for control plane nodes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereVolume>[]>;
}

export interface ClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereVolume {
    /**
     * Volume capacity is in gib
     */
    capacity?: pulumi.Input<number>;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: pulumi.Input<string>;
    /**
     * It is the volume name
     */
    name?: pulumi.Input<string>;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: pulumi.Input<string>;
}

export interface ClusterSpecTkgVsphere {
    /**
     * Advanced configuration for TKGm cluster
     */
    advancedConfigs?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgVsphereAdvancedConfig>[]>;
    /**
     * VSphere specific distribution
     */
    distribution: pulumi.Input<inputs.ClusterSpecTkgVsphereDistribution>;
    /**
     * VSphere related settings for workload cluster
     */
    settings: pulumi.Input<inputs.ClusterSpecTkgVsphereSettings>;
    /**
     * Topology specific configuration
     */
    topology: pulumi.Input<inputs.ClusterSpecTkgVsphereTopology>;
}

export interface ClusterSpecTkgVsphereAdvancedConfig {
    /**
     * The key of the advanced configuration parameters
     */
    key: pulumi.Input<string>;
    /**
     * The value of the advanced configuration parameters
     */
    value: pulumi.Input<string>;
}

export interface ClusterSpecTkgVsphereDistribution {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: pulumi.Input<string>;
    /**
     * Name of the OS used for the cluster
     */
    osName?: pulumi.Input<string>;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Version specifies the version of the Kubernetes cluster
     */
    version: pulumi.Input<string>;
    /**
     * Workspace defines a workspace configuration for the vSphere cloud provider
     */
    workspace: pulumi.Input<inputs.ClusterSpecTkgVsphereDistributionWorkspace>;
}

export interface ClusterSpecTkgVsphereDistributionWorkspace {
    datacenter: pulumi.Input<string>;
    datastore: pulumi.Input<string>;
    folder: pulumi.Input<string>;
    resourcePool: pulumi.Input<string>;
    workspaceNetwork: pulumi.Input<string>;
}

export interface ClusterSpecTkgVsphereSettings {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: pulumi.Input<inputs.ClusterSpecTkgVsphereSettingsNetwork>;
    /**
     * Security Settings specifies security-related settings for the cluster
     */
    security: pulumi.Input<inputs.ClusterSpecTkgVsphereSettingsSecurity>;
}

export interface ClusterSpecTkgVsphereSettingsNetwork {
    /**
     * APIServerPort specifies the port address for the cluster that defaults to 6443.
     */
    apiServerPort?: pulumi.Input<number>;
    /**
     * ControlPlaneEndpoint specifies the control plane virtual IP address. The value should be unique for every create request, else cluster creation shall fail. This field is not needed when AVI enabled while creating a legacy cluster on TKGm.
     */
    controlPlaneEndPoint?: pulumi.Input<string>;
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgVsphereSettingsNetworkPod>[]>;
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgVsphereSettingsNetworkService>[]>;
}

export interface ClusterSpecTkgVsphereSettingsNetworkPod {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterSpecTkgVsphereSettingsNetworkService {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterSpecTkgVsphereSettingsSecurity {
    /**
     * SSH key for provisioning and accessing the cluster VMs
     */
    sshKey: pulumi.Input<string>;
}

export interface ClusterSpecTkgVsphereTopology {
    /**
     * VSphere specific control plane configuration for workload cluster object
     */
    controlPlane: pulumi.Input<inputs.ClusterSpecTkgVsphereTopologyControlPlane>;
    /**
     * Nodepool specific configuration
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.ClusterSpecTkgVsphereTopologyNodePool>[]>;
}

export interface ClusterSpecTkgVsphereTopologyControlPlane {
    /**
     * High Availability or Non High Availability Cluster. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: pulumi.Input<boolean>;
    /**
     * VM specific configuration
     */
    vmConfig: pulumi.Input<inputs.ClusterSpecTkgVsphereTopologyControlPlaneVmConfig>;
}

export interface ClusterSpecTkgVsphereTopologyControlPlaneVmConfig {
    /**
     * Number of CPUs per node
     */
    cpu?: pulumi.Input<string>;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: pulumi.Input<string>;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: pulumi.Input<string>;
}

export interface ClusterSpecTkgVsphereTopologyNodePool {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: pulumi.Input<inputs.ClusterSpecTkgVsphereTopologyNodePoolInfo>;
    /**
     * Spec for the cluster nodepool
     */
    spec?: pulumi.Input<inputs.ClusterSpecTkgVsphereTopologyNodePoolSpec>;
}

export interface ClusterSpecTkgVsphereTopologyNodePoolInfo {
    /**
     * Description of the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool
     */
    name: pulumi.Input<string>;
}

export interface ClusterSpecTkgVsphereTopologyNodePoolSpec {
    /**
     * Nodepool config for tkgm vsphere
     */
    tkgVsphere?: pulumi.Input<inputs.ClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphere>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: pulumi.Input<string>;
}

export interface ClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphere {
    /**
     * VM specific configuration
     */
    vmConfig: pulumi.Input<inputs.ClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereVmConfig>;
}

export interface ClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereVmConfig {
    /**
     * Number of CPUs per node
     */
    cpu?: pulumi.Input<string>;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: pulumi.Input<string>;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: pulumi.Input<string>;
}

export interface CredentialMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface CredentialSpec {
    /**
     * The Tanzu capability for which the credential shall be used. Value must be in list [DATA_PROTECTION TANZU_OBSERVABILITY TANZU_SERVICE_MESH PROXY_CONFIG MANAGED_K8S_PROVIDER IMAGE_REGISTRY]
     */
    capability?: pulumi.Input<string>;
    /**
     * Holds credentials sensitive data
     */
    data?: pulumi.Input<inputs.CredentialSpecData>;
    /**
     * The Tanzu provider for which describes credential data type. Value must be in list [PROVIDER_UNSPECIFIED,AWS_EC2,GENERIC_S3,AZURE_AD,AWS_EKS,AZURE_AKS,GENERIC_KEY_VALUE]
     */
    provider?: pulumi.Input<string>;
}

export interface CredentialSpecData {
    /**
     * AWS credential data type
     */
    awsCredential?: pulumi.Input<inputs.CredentialSpecDataAwsCredential>;
    /**
     * Azure credential
     */
    azureCredential?: pulumi.Input<inputs.CredentialSpecDataAzureCredential>;
    /**
     * Generic credential data type used to hold a blob of data represented as string
     */
    genericCredential?: pulumi.Input<string>;
    /**
     * Key Value credential
     */
    keyValue?: pulumi.Input<inputs.CredentialSpecDataKeyValue>;
}

export interface CredentialSpecDataAwsCredential {
    /**
     * Account ID of the AWS credential
     */
    accountId?: pulumi.Input<string>;
    /**
     * Generic credential
     */
    genericCredential?: pulumi.Input<string>;
    /**
     * AWS IAM role ARN and external ID
     */
    iamRole?: pulumi.Input<inputs.CredentialSpecDataAwsCredentialIamRole>;
}

export interface CredentialSpecDataAwsCredentialIamRole {
    /**
     * AWS IAM role ARN
     */
    arn?: pulumi.Input<string>;
    /**
     * An external ID used to assume an AWS IAM role
     */
    extId?: pulumi.Input<string>;
}

export interface CredentialSpecDataAzureCredential {
    /**
     * Azure service principal
     */
    servicePrincipal?: pulumi.Input<inputs.CredentialSpecDataAzureCredentialServicePrincipal>;
    /**
     * Azure service principal
     */
    servicePrincipalWithCertificate?: pulumi.Input<inputs.CredentialSpecDataAzureCredentialServicePrincipalWithCertificate>;
}

export interface CredentialSpecDataAzureCredentialServicePrincipal {
    /**
     * Azure Cloud name
     */
    azureCloudName?: pulumi.Input<string>;
    /**
     * Client ID of the Service Principal
     */
    clientId: pulumi.Input<string>;
    /**
     * Client Secret of the Service Principal
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Resource Group name
     */
    resourceGroup: pulumi.Input<string>;
    /**
     * Subscription ID of the Azure credential
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * Tenant ID of the Azure credential
     */
    tenantId: pulumi.Input<string>;
}

export interface CredentialSpecDataAzureCredentialServicePrincipalWithCertificate {
    /**
     * Azure Cloud name
     */
    azureCloudName?: pulumi.Input<string>;
    /**
     * Client certificate of the Service Principal
     */
    clientCertificate: pulumi.Input<string>;
    /**
     * Client ID of the Service Principal
     */
    clientId: pulumi.Input<string>;
    /**
     * IDs of the Azure Subscriptions that the Service Principal can manage
     */
    managedSubscriptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subscription ID of the Azure credential
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * Tenant ID of the Azure credential
     */
    tenantId: pulumi.Input<string>;
}

export interface CredentialSpecDataKeyValue {
    /**
     * Data secret data in the format of key-value pair
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of Secret data, usually mapped to k8s secret type. Supported types: [SECRET_TYPE_UNSPECIFIED,OPAQUE_SECRET_TYPE,DOCKERCONFIGJSON_SECRET_TYPE]
     */
    type?: pulumi.Input<string>;
}

export interface CustomIamRoleMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface CustomIamRoleSpec {
    /**
     * Aggregation rules for the iam role.
     */
    aggregationRule?: pulumi.Input<inputs.CustomIamRoleSpecAggregationRule>;
    /**
     * The allowed scopes for the iam role.
     * Valid values are (ORGANIZATION, MANAGEMENT_CLUSTER, PROVISIONER, CLUSTER_GROUP, CLUSTER, WORKSPACE, NAMESPACE)
     */
    allowedScopes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag representing whether role is deprecated.
     */
    isDeprecated?: pulumi.Input<boolean>;
    /**
     * Kubernetes permissions for the iam role.
     */
    kubernetesPermissions?: pulumi.Input<inputs.CustomIamRoleSpecKubernetesPermissions>;
    /**
     * Tanzu-specific permissions for the role.
     */
    tanzuPermissions?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomIamRoleSpecAggregationRule {
    /**
     * Cluster role selector for the iam role.
     */
    clusterRoleSelectors: pulumi.Input<pulumi.Input<inputs.CustomIamRoleSpecAggregationRuleClusterRoleSelector>[]>;
}

export interface CustomIamRoleSpecAggregationRuleClusterRoleSelector {
    /**
     * List of label selector requirements.
     * The requirements are ANDed.
     */
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.CustomIamRoleSpecAggregationRuleClusterRoleSelectorMatchExpression>[]>;
    /**
     * Map of {key,value} pairs.
     * A single {key,value} in the match_labels map is equivalent to an element of match_expression, whose key field is "key", the operator is "In", and the values array contains only "value". 
     * The requirements are ANDed.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface CustomIamRoleSpecAggregationRuleClusterRoleSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to.
     */
    key: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values.
     * Valid operators are "In", "NotIn", "Exists" and "DoesNotExist".
     */
    operator: pulumi.Input<string>;
    /**
     * Values is an array of string values.
     * If the operator is "In" or "NotIn", the values array must be non-empty.
     * If the operator is "Exists" or "DoesNotExist", the values array must be empty.
     * This array is replaced during a strategic merge patch.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomIamRoleSpecKubernetesPermissions {
    /**
     * Kubernetes rules.
     */
    rules: pulumi.Input<pulumi.Input<inputs.CustomIamRoleSpecKubernetesPermissionsRule>[]>;
}

export interface CustomIamRoleSpecKubernetesPermissionsRule {
    /**
     * API groups.
     */
    apiGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Restricts the rule to resources by name.
     */
    resourceNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Resources for the role.
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Non-resource urls for the role.
     */
    urlPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Verbs.
     */
    verbs: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicyMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface CustomPolicyScope {
    /**
     * The schema for cluster policy full name
     */
    cluster?: pulumi.Input<inputs.CustomPolicyScopeCluster>;
    /**
     * The schema for cluster group policy full name
     */
    clusterGroup?: pulumi.Input<inputs.CustomPolicyScopeClusterGroup>;
    /**
     * The schema for organization policy full name
     */
    organization?: pulumi.Input<inputs.CustomPolicyScopeOrganization>;
    /**
     * The schema for workspace policy full name
     */
    workspace?: pulumi.Input<inputs.CustomPolicyScopeWorkspace>;
}

export interface CustomPolicyScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface CustomPolicyScopeClusterGroup {
    /**
     * Name of this cluster group
     */
    clusterGroup: pulumi.Input<string>;
}

export interface CustomPolicyScopeOrganization {
    /**
     * ID of this organization
     */
    organization: pulumi.Input<string>;
}

export interface CustomPolicyScopeWorkspace {
    /**
     * Name of this workspace
     */
    workspace: pulumi.Input<string>;
}

export interface CustomPolicySpec {
    /**
     * Input for the custom policy, having one of the valid recipes: [tmc_block_nodeport_service tmc_block_resources tmc_block_rolebinding_subjects tmc_external_ips tmc_https_ingress tmc_require_labels custom].
     */
    input: pulumi.Input<inputs.CustomPolicySpecInput>;
    /**
     * Label based Namespace Selector for the policy
     */
    namespaceSelector?: pulumi.Input<inputs.CustomPolicySpecNamespaceSelector>;
}

export interface CustomPolicySpecInput {
    /**
     * The input schema for custom policy tmc_external_ips recipe version v1
     */
    custom?: pulumi.Input<inputs.CustomPolicySpecInputCustom>;
    /**
     * The input schema for custom policy tmc_block_nodeport_service recipe version v1
     */
    tmcBlockNodeportService?: pulumi.Input<inputs.CustomPolicySpecInputTmcBlockNodeportService>;
    /**
     * The input schema for custom policy tmc_block_resources recipe version v1
     */
    tmcBlockResources?: pulumi.Input<inputs.CustomPolicySpecInputTmcBlockResources>;
    /**
     * The input schema for custom policy tmc_block_rolebinding_subjects recipe version v1
     */
    tmcBlockRolebindingSubjects?: pulumi.Input<inputs.CustomPolicySpecInputTmcBlockRolebindingSubjects>;
    /**
     * The input schema for custom policy tmc_external_ips recipe version v1
     */
    tmcExternalIps?: pulumi.Input<inputs.CustomPolicySpecInputTmcExternalIps>;
    /**
     * The input schema for custom policy tmc_https_ingress recipe version v1
     */
    tmcHttpsIngress?: pulumi.Input<inputs.CustomPolicySpecInputTmcHttpsIngress>;
    /**
     * The input schema for custom policy tmc_require_labels recipe version v1
     */
    tmcRequireLabels?: pulumi.Input<inputs.CustomPolicySpecInputTmcRequireLabels>;
}

export interface CustomPolicySpecInputCustom {
    /**
     * Audit (dry-run).
     */
    audit?: pulumi.Input<boolean>;
    /**
     * JSON encoded template parameters.
     */
    parameters?: pulumi.Input<string>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputCustomTargetKubernetesResource>[]>;
    /**
     * Name of custom template.
     */
    templateName: pulumi.Input<string>;
}

export interface CustomPolicySpecInputCustomTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecInputTmcBlockNodeportService {
    /**
     * Audit (dry-run).
     */
    audit?: pulumi.Input<boolean>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcBlockNodeportServiceTargetKubernetesResource>[]>;
}

export interface CustomPolicySpecInputTmcBlockNodeportServiceTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecInputTmcBlockResources {
    /**
     * Audit (dry-run).
     */
    audit?: pulumi.Input<boolean>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcBlockResourcesTargetKubernetesResource>[]>;
}

export interface CustomPolicySpecInputTmcBlockResourcesTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecInputTmcBlockRolebindingSubjects {
    /**
     * Audit (dry-run).
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Parameters.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcBlockRolebindingSubjectsParameter>[]>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcBlockRolebindingSubjectsTargetKubernetesResource>[]>;
}

export interface CustomPolicySpecInputTmcBlockRolebindingSubjectsParameter {
    /**
     * Disallowed Subjects.
     */
    disallowedSubjects: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcBlockRolebindingSubjectsParameterDisallowedSubject>[]>;
}

export interface CustomPolicySpecInputTmcBlockRolebindingSubjectsParameterDisallowedSubject {
    /**
     * The kind of subject to disallow, can be User/Group/ServiceAccount.
     */
    kind: pulumi.Input<string>;
    /**
     * The name of the subject to disallow.
     */
    name: pulumi.Input<string>;
}

export interface CustomPolicySpecInputTmcBlockRolebindingSubjectsTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecInputTmcExternalIps {
    /**
     * Audit (dry-run).
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Parameters.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcExternalIpsParameter>[]>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcExternalIpsTargetKubernetesResource>[]>;
}

export interface CustomPolicySpecInputTmcExternalIpsParameter {
    /**
     * Allowed IPs.
     */
    allowedIps: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecInputTmcExternalIpsTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecInputTmcHttpsIngress {
    /**
     * Audit (dry-run).
     */
    audit?: pulumi.Input<boolean>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcHttpsIngressTargetKubernetesResource>[]>;
}

export interface CustomPolicySpecInputTmcHttpsIngressTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecInputTmcRequireLabels {
    /**
     * Audit (dry-run).
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Parameters.
     */
    parameters: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcRequireLabelsParameter>[]>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcRequireLabelsTargetKubernetesResource>[]>;
}

export interface CustomPolicySpecInputTmcRequireLabelsParameter {
    /**
     * Labels.
     */
    labels: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecInputTmcRequireLabelsParameterLabel>[]>;
}

export interface CustomPolicySpecInputTmcRequireLabelsParameterLabel {
    /**
     * The label key to enforce.
     */
    key: pulumi.Input<string>;
    /**
     * Optional label value to enforce (if left empty, only key will be enforced).
     */
    value?: pulumi.Input<string>;
}

export interface CustomPolicySpecInputTmcRequireLabelsTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicySpecNamespaceSelector {
    /**
     * Match expressions is a list of label selector requirements, the requirements are ANDed
     */
    matchExpressions: pulumi.Input<pulumi.Input<inputs.CustomPolicySpecNamespaceSelectorMatchExpression>[]>;
}

export interface CustomPolicySpecNamespaceSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomPolicyTemplateMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface CustomPolicyTemplateSpec {
    /**
     * List of Kubernetes api-resource kinds that need to be synced/replicated in Gatekeeper in order to enforce policy rules on those resources.
     * Note: This is used for OPAGatekeeper based templates, and should be used if the policy enforcement logic in Rego code uses cached data using "data.inventory" fields.
     */
    dataInventories?: pulumi.Input<pulumi.Input<inputs.CustomPolicyTemplateSpecDataInventory>[]>;
    /**
     * Flag representing whether the custom policy template is deprecated.
     */
    isDeprecated?: pulumi.Input<boolean>;
    /**
     * The type of Kubernetes resource encoded in Object.
     * Currently, we only support OPAGatekeeper based 'ConstraintTemplate' object.
     */
    objectType?: pulumi.Input<string>;
    /**
     * YAML formatted Kubernetes resource.
     * The Kubernetes object has to be of the type defined in ObjectType ('ConstraintTemplate').
     * The object name must match the name of the wrapping policy template.
     * This will be applied on the cluster after a policy is created using this version of the template.
     * This contains the latest version of the object. For previous versions, check Versions API.
     */
    templateManifest: pulumi.Input<string>;
    /**
     * The type of policy template.
     * Currently, we only support 'OPAGatekeeper' based policy templates.
     */
    templateType?: pulumi.Input<string>;
}

export interface CustomPolicyTemplateSpecDataInventory {
    /**
     * API resource group
     */
    group: pulumi.Input<string>;
    /**
     * API resource kind
     */
    kind: pulumi.Input<string>;
    /**
     * API resource version
     */
    version: pulumi.Input<string>;
}

export interface EksclusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface EksclusterSpec {
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: pulumi.Input<string>;
    /**
     * EKS config for the cluster control plane
     */
    config: pulumi.Input<inputs.EksclusterSpecConfig>;
    /**
     * Nodepool definitions for the cluster
     */
    nodepools: pulumi.Input<pulumi.Input<inputs.EksclusterSpecNodepool>[]>;
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: pulumi.Input<string>;
}

export interface EksclusterSpecConfig {
    /**
     * Addons config contains the configuration for all the addons of the cluster, which support customization of addon configuration
     */
    addonsConfig?: pulumi.Input<inputs.EksclusterSpecConfigAddonsConfig>;
    /**
     * Kubernetes Network Config
     */
    kubernetesNetworkConfig?: pulumi.Input<inputs.EksclusterSpecConfigKubernetesNetworkConfig>;
    /**
     * Kubernetes version of the cluster
     */
    kubernetesVersion: pulumi.Input<string>;
    /**
     * EKS logging configuration
     */
    logging?: pulumi.Input<inputs.EksclusterSpecConfigLogging>;
    /**
     * ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations
     */
    roleArn: pulumi.Input<string>;
    /**
     * The metadata to apply to the cluster to assist with categorization and organization
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC config
     */
    vpc: pulumi.Input<inputs.EksclusterSpecConfigVpc>;
}

export interface EksclusterSpecConfigAddonsConfig {
    /**
     * VPC CNI addon config contains the configuration for the VPC CNI addon of the cluster
     */
    vpcCniConfig?: pulumi.Input<inputs.EksclusterSpecConfigAddonsConfigVpcCniConfig>;
}

export interface EksclusterSpecConfigAddonsConfigVpcCniConfig {
    /**
     * ENI config for the VPC CNI addon
     */
    eniConfigs?: pulumi.Input<pulumi.Input<inputs.EksclusterSpecConfigAddonsConfigVpcCniConfigEniConfig>[]>;
}

export interface EksclusterSpecConfigAddonsConfigVpcCniConfigEniConfig {
    /**
     * Subnet id for the ENI
     */
    id: pulumi.Input<string>;
    /**
     * Security groups for the ENI
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EksclusterSpecConfigKubernetesNetworkConfig {
    /**
     * Service CIDR for Kubernetes services
     */
    serviceCidr: pulumi.Input<string>;
}

export interface EksclusterSpecConfigLogging {
    /**
     * Enable API server logs
     */
    apiServer?: pulumi.Input<boolean>;
    /**
     * Enable audit logs
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Enable authenticator logs
     */
    authenticator?: pulumi.Input<boolean>;
    /**
     * Enable controller manager logs
     */
    controllerManager?: pulumi.Input<boolean>;
    /**
     * Enable scheduler logs
     */
    scheduler?: pulumi.Input<boolean>;
}

export interface EksclusterSpecConfigVpc {
    /**
     * Enable Kubernetes API requests within your cluster's VPC (such as node to control plane communication) use the private VPC endpoint (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    enablePrivateAccess?: pulumi.Input<boolean>;
    /**
     * Enable cluster API server access from the internet. You can, optionally, limit the CIDR blocks that can access the public endpoint using public_access_cidrs (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    enablePublicAccess?: pulumi.Input<boolean>;
    /**
     * Specify which addresses from the internet can communicate to the public endpoint, if public endpoint is enabled (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    publicAccessCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Security groups for the cluster VMs
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet ids used by the cluster (see [Amazon EKS VPC and subnet requirements and considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html#network-requirements-subnets))
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EksclusterSpecNodepool {
    /**
     * Info for the nodepool
     */
    info: pulumi.Input<inputs.EksclusterSpecNodepoolInfo>;
    /**
     * Spec for the cluster
     */
    spec: pulumi.Input<inputs.EksclusterSpecNodepoolSpec>;
}

export interface EksclusterSpecNodepoolInfo {
    /**
     * Description for the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool, immutable
     */
    name: pulumi.Input<string>;
}

export interface EksclusterSpecNodepoolSpec {
    /**
     * AMI info for the nodepool if AMI type is specified as CUSTOM
     */
    amiInfo?: pulumi.Input<inputs.EksclusterSpecNodepoolSpecAmiInfo>;
    /**
     * AMI type, immutable
     */
    amiType?: pulumi.Input<string>;
    /**
     * Capacity Type
     */
    capacityType?: pulumi.Input<string>;
    /**
     * Nodepool instance types, immutable
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Launch template for the nodepool
     */
    launchTemplate?: pulumi.Input<inputs.EksclusterSpecNodepoolSpecLaunchTemplate>;
    /**
     * Kubernetes node labels
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AMI release version
     */
    releaseVersion?: pulumi.Input<string>;
    /**
     * Remote access to worker nodes, immutable
     */
    remoteAccess?: pulumi.Input<inputs.EksclusterSpecNodepoolSpecRemoteAccess>;
    /**
     * ARN of the IAM role that provides permissions for the Kubernetes nodepool to make calls to AWS API operations, immutable
     */
    roleArn: pulumi.Input<string>;
    /**
     * Root disk size in GiB, immutable
     */
    rootDiskSize?: pulumi.Input<number>;
    /**
     * Nodepool scaling config
     */
    scalingConfig?: pulumi.Input<inputs.EksclusterSpecNodepoolSpecScalingConfig>;
    /**
     * Subnets required for the nodepool
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * EKS specific tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If specified, the node's taints
     */
    taints?: pulumi.Input<pulumi.Input<inputs.EksclusterSpecNodepoolSpecTaint>[]>;
    /**
     * Update config for the nodepool
     */
    updateConfig?: pulumi.Input<inputs.EksclusterSpecNodepoolSpecUpdateConfig>;
}

export interface EksclusterSpecNodepoolSpecAmiInfo {
    /**
     * ID of the AMI to be used
     */
    amiId?: pulumi.Input<string>;
    /**
     * Override bootstrap command for the custom AMI
     */
    overrideBootstrapCmd?: pulumi.Input<string>;
}

export interface EksclusterSpecNodepoolSpecLaunchTemplate {
    /**
     * The ID of the launch template
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the launch template
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the launch template to use
     */
    version?: pulumi.Input<string>;
}

export interface EksclusterSpecNodepoolSpecRemoteAccess {
    /**
     * Security groups for the VMs
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SSH key allows you to connect to your instances and gather diagnostic information if there are issues.
     */
    sshKey?: pulumi.Input<string>;
}

export interface EksclusterSpecNodepoolSpecScalingConfig {
    /**
     * Desired size of nodepool
     */
    desiredSize?: pulumi.Input<number>;
    /**
     * Maximum size of nodepool
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Minimum size of nodepool
     */
    minSize?: pulumi.Input<number>;
}

export interface EksclusterSpecNodepoolSpecTaint {
    /**
     * Current effect state of the node pool
     */
    effect?: pulumi.Input<string>;
    /**
     * The taint key to be applied to a node
     */
    key?: pulumi.Input<string>;
    /**
     * The taint value corresponding to the taint key
     */
    value?: pulumi.Input<string>;
}

export interface EksclusterSpecNodepoolSpecUpdateConfig {
    /**
     * Maximum number of nodes unavailable at once during a version update
     */
    maxUnavailableNodes?: pulumi.Input<string>;
    /**
     * Maximum percentage of nodes unavailable during a version update
     */
    maxUnavailablePercentage?: pulumi.Input<string>;
}

export interface EnableDataProtectionDeletionPolicy {
    /**
     * Destroy backups upon deleting data protection.
     * (default: false)
     */
    deleteBackups?: pulumi.Input<boolean>;
    /**
     * Disable data protection on all clusters in the cluster group even if cluster level schedules present.
     */
    force?: pulumi.Input<boolean>;
}

export interface EnableDataProtectionMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface EnableDataProtectionScope {
    /**
     * Cluster scope block
     */
    cluster?: pulumi.Input<inputs.EnableDataProtectionScopeCluster>;
    /**
     * Cluster group scope block
     */
    clusterGroup?: pulumi.Input<inputs.EnableDataProtectionScopeClusterGroup>;
}

export interface EnableDataProtectionScopeCluster {
    /**
     * Cluster name
     */
    clusterName: pulumi.Input<string>;
    /**
     * Management cluster name
     */
    managementClusterName: pulumi.Input<string>;
    /**
     * Cluster provisioner name
     */
    provisionerName: pulumi.Input<string>;
}

export interface EnableDataProtectionScopeClusterGroup {
    /**
     * Cluster group name
     */
    clusterGroupName: pulumi.Input<string>;
}

export interface EnableDataProtectionSpec {
    /**
     * A flag to indicate whether to skip installation of restic server (https://github.com/restic/restic).
     * Otherwise, restic would be enabled by default as part of Data Protection installation.
     * (Default: False)
     */
    disableRestic?: pulumi.Input<boolean>;
    /**
     * A flag to indicate whether to backup all the supported API Group versions of a resource on the cluster.
     * (Default: False)
     */
    enableAllApiGroupVersionsBackup?: pulumi.Input<boolean>;
    /**
     * A flag to indicate whether to install CSI snapshotting related capabilities.
     * (Default: False)
     */
    enableCsiSnapshots?: pulumi.Input<boolean>;
    /**
     * A selector to include/exclude specific clusters in a cluster group (optional)
     */
    selector?: pulumi.Input<inputs.EnableDataProtectionSpecSelector>;
    /**
     * A flag to indicate whether to install the node agent daemonset which is responsible for volume data transfer to the target location.
     */
    useNodeAgent?: pulumi.Input<boolean>;
}

export interface EnableDataProtectionSpecSelector {
    excludednames?: pulumi.Input<pulumi.Input<string>[]>;
    labelselectors?: pulumi.Input<pulumi.Input<inputs.EnableDataProtectionSpecSelectorLabelselector>[]>;
    names?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EnableDataProtectionSpecSelectorLabelselector {
    matchexpressions?: pulumi.Input<pulumi.Input<inputs.EnableDataProtectionSpecSelectorLabelselectorMatchexpression>[]>;
}

export interface EnableDataProtectionSpecSelectorLabelselectorMatchexpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetAksclusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetAksclusterMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetAksclusterSpec {
    /**
     * Name of the cluster in TMC
     */
    agentName?: string;
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: string;
    /**
     * AKS config for the cluster control plane
     */
    config: inputs.GetAksclusterSpecConfig;
    /**
     * Nodepool definitions for the cluster
     */
    nodepools: inputs.GetAksclusterSpecNodepool[];
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: string;
    /**
     * Resource ID of the cluster in Azure.
     */
    resourceId?: string;
}

export interface GetAksclusterSpecArgs {
    /**
     * Name of the cluster in TMC
     */
    agentName?: pulumi.Input<string>;
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: pulumi.Input<string>;
    /**
     * AKS config for the cluster control plane
     */
    config: pulumi.Input<inputs.GetAksclusterSpecConfigArgs>;
    /**
     * Nodepool definitions for the cluster
     */
    nodepools: pulumi.Input<pulumi.Input<inputs.GetAksclusterSpecNodepoolArgs>[]>;
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: pulumi.Input<string>;
    /**
     * Resource ID of the cluster in Azure.
     */
    resourceId?: pulumi.Input<string>;
}

export interface GetAksclusterSpecConfig {
    /**
     * Access config
     */
    accessConfig?: inputs.GetAksclusterSpecConfigAccessConfig;
    /**
     * Addons Config
     */
    addonConfig?: inputs.GetAksclusterSpecConfigAddonConfig;
    /**
     * API Server Access Config
     */
    apiServerAccessConfig?: inputs.GetAksclusterSpecConfigApiServerAccessConfig;
    /**
     * Auto Upgrade Config
     */
    autoUpgradeConfig?: inputs.GetAksclusterSpecConfigAutoUpgradeConfig;
    /**
     * Resource ID of the disk encryption set to use for enabling
     */
    diskEncryptionSet?: string;
    /**
     * Managed Identity Config
     */
    identityConfig?: inputs.GetAksclusterSpecConfigIdentityConfig;
    /**
     * Kubernetes version of the cluster
     */
    kubernetesVersion: string;
    /**
     * Linux Config
     */
    linuxConfig?: inputs.GetAksclusterSpecConfigLinuxConfig;
    /**
     * The geo-location where the resource lives for the cluster.
     */
    location: string;
    /**
     * Network Config
     */
    networkConfig: inputs.GetAksclusterSpecConfigNetworkConfig;
    /**
     * Name of the resource group containing nodepools.
     */
    nodeResourceGroupName?: string;
    /**
     * Azure Kubernetes Service SKU
     */
    sku?: inputs.GetAksclusterSpecConfigSku;
    /**
     * Storage Config
     */
    storageConfig?: inputs.GetAksclusterSpecConfigStorageConfig;
    /**
     * Metadata to apply to the cluster to assist with categorization and organization
     */
    tags?: {[key: string]: string};
}

export interface GetAksclusterSpecConfigArgs {
    /**
     * Access config
     */
    accessConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigAccessConfigArgs>;
    /**
     * Addons Config
     */
    addonConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigAddonConfigArgs>;
    /**
     * API Server Access Config
     */
    apiServerAccessConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigApiServerAccessConfigArgs>;
    /**
     * Auto Upgrade Config
     */
    autoUpgradeConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigAutoUpgradeConfigArgs>;
    /**
     * Resource ID of the disk encryption set to use for enabling
     */
    diskEncryptionSet?: pulumi.Input<string>;
    /**
     * Managed Identity Config
     */
    identityConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigIdentityConfigArgs>;
    /**
     * Kubernetes version of the cluster
     */
    kubernetesVersion: pulumi.Input<string>;
    /**
     * Linux Config
     */
    linuxConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigLinuxConfigArgs>;
    /**
     * The geo-location where the resource lives for the cluster.
     */
    location: pulumi.Input<string>;
    /**
     * Network Config
     */
    networkConfig: pulumi.Input<inputs.GetAksclusterSpecConfigNetworkConfigArgs>;
    /**
     * Name of the resource group containing nodepools.
     */
    nodeResourceGroupName?: pulumi.Input<string>;
    /**
     * Azure Kubernetes Service SKU
     */
    sku?: pulumi.Input<inputs.GetAksclusterSpecConfigSkuArgs>;
    /**
     * Storage Config
     */
    storageConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigStorageConfigArgs>;
    /**
     * Metadata to apply to the cluster to assist with categorization and organization
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetAksclusterSpecConfigAccessConfig {
    /**
     * Azure Active Directory config
     */
    aadConfig?: inputs.GetAksclusterSpecConfigAccessConfigAadConfig;
    /**
     * Disable local accounts
     */
    disableLocalAccounts?: boolean;
    /**
     * Enable kubernetes RBAC
     */
    enableRbac?: boolean;
}

export interface GetAksclusterSpecConfigAccessConfigArgs {
    /**
     * Azure Active Directory config
     */
    aadConfig?: pulumi.Input<inputs.GetAksclusterSpecConfigAccessConfigAadConfigArgs>;
    /**
     * Disable local accounts
     */
    disableLocalAccounts?: pulumi.Input<boolean>;
    /**
     * Enable kubernetes RBAC
     */
    enableRbac?: pulumi.Input<boolean>;
}

export interface GetAksclusterSpecConfigAccessConfigAadConfig {
    /**
     * List of AAD group object IDs that will have admin role of the cluster.
     */
    adminGroupIds?: string[];
    /**
     * Enable Azure RBAC for Kubernetes authorization
     */
    enableAzureRbac?: boolean;
    /**
     * Enable Managed RBAC
     */
    managed?: boolean;
    /**
     * AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
     */
    tenantId?: string;
}

export interface GetAksclusterSpecConfigAccessConfigAadConfigArgs {
    /**
     * List of AAD group object IDs that will have admin role of the cluster.
     */
    adminGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable Azure RBAC for Kubernetes authorization
     */
    enableAzureRbac?: pulumi.Input<boolean>;
    /**
     * Enable Managed RBAC
     */
    managed?: pulumi.Input<boolean>;
    /**
     * AAD tenant ID to use for authentication. If not specified, will use the tenant of the deployment subscription.
     */
    tenantId?: pulumi.Input<string>;
}

export interface GetAksclusterSpecConfigAddonConfig {
    /**
     * Keyvault secrets provider addon
     */
    azureKeyvaultSecretsProviderAddonConfigs?: inputs.GetAksclusterSpecConfigAddonConfigAzureKeyvaultSecretsProviderAddonConfig[];
    /**
     * Azure policy addon
     */
    azurePolicyAddonConfigs?: inputs.GetAksclusterSpecConfigAddonConfigAzurePolicyAddonConfig[];
    /**
     * Monitor addon
     */
    monitorAddonConfigs?: inputs.GetAksclusterSpecConfigAddonConfigMonitorAddonConfig[];
}

export interface GetAksclusterSpecConfigAddonConfigArgs {
    /**
     * Keyvault secrets provider addon
     */
    azureKeyvaultSecretsProviderAddonConfigs?: pulumi.Input<pulumi.Input<inputs.GetAksclusterSpecConfigAddonConfigAzureKeyvaultSecretsProviderAddonConfigArgs>[]>;
    /**
     * Azure policy addon
     */
    azurePolicyAddonConfigs?: pulumi.Input<pulumi.Input<inputs.GetAksclusterSpecConfigAddonConfigAzurePolicyAddonConfigArgs>[]>;
    /**
     * Monitor addon
     */
    monitorAddonConfigs?: pulumi.Input<pulumi.Input<inputs.GetAksclusterSpecConfigAddonConfigMonitorAddonConfigArgs>[]>;
}

export interface GetAksclusterSpecConfigAddonConfigAzureKeyvaultSecretsProviderAddonConfig {
    /**
     * Enable Azure Key Vault Secrets Provider
     */
    enable?: boolean;
    /**
     * Enable secrets rotation
     */
    enableSecretRotation?: boolean;
    /**
     * Secret rotation interval
     */
    rotationPollInterval?: string;
}

export interface GetAksclusterSpecConfigAddonConfigAzureKeyvaultSecretsProviderAddonConfigArgs {
    /**
     * Enable Azure Key Vault Secrets Provider
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Enable secrets rotation
     */
    enableSecretRotation?: pulumi.Input<boolean>;
    /**
     * Secret rotation interval
     */
    rotationPollInterval?: pulumi.Input<string>;
}

export interface GetAksclusterSpecConfigAddonConfigAzurePolicyAddonConfig {
    /**
     * Enable policy addon
     */
    enable?: boolean;
}

export interface GetAksclusterSpecConfigAddonConfigAzurePolicyAddonConfigArgs {
    /**
     * Enable policy addon
     */
    enable?: pulumi.Input<boolean>;
}

export interface GetAksclusterSpecConfigAddonConfigMonitorAddonConfig {
    /**
     * Enable monitor
     */
    enable?: boolean;
    /**
     * Log analytics workspace ID for the monitoring addon
     */
    logAnalyticsWorkspaceId?: string;
}

export interface GetAksclusterSpecConfigAddonConfigMonitorAddonConfigArgs {
    /**
     * Enable monitor
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Log analytics workspace ID for the monitoring addon
     */
    logAnalyticsWorkspaceId?: pulumi.Input<string>;
}

export interface GetAksclusterSpecConfigApiServerAccessConfig {
    /**
     * IP ranges authorized to access the Kubernetes API server
     */
    authorizedIpRanges?: string[];
    /**
     * Enable Private Cluster
     */
    enablePrivateCluster: boolean;
}

export interface GetAksclusterSpecConfigApiServerAccessConfigArgs {
    /**
     * IP ranges authorized to access the Kubernetes API server
     */
    authorizedIpRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable Private Cluster
     */
    enablePrivateCluster: pulumi.Input<boolean>;
}

export interface GetAksclusterSpecConfigAutoUpgradeConfig {
    /**
     * Upgrade Channel. Allowed values include: NONE, PATCH, STABLE, RAPID or NODE_IMAGE
     */
    upgradeChannel?: string;
}

export interface GetAksclusterSpecConfigAutoUpgradeConfigArgs {
    /**
     * Upgrade Channel. Allowed values include: NONE, PATCH, STABLE, RAPID or NODE_IMAGE
     */
    upgradeChannel?: pulumi.Input<string>;
}

export interface GetAksclusterSpecConfigIdentityConfig {
    /**
     * Type of managed identity used by the cluster (default IDENTITY_TYPE_SYSTEM_ASSIGNED). Allowed values include: IDENTITY_TYPE_SYSTEM_ASSIGNED or IDENTITY_TYPE_USER_ASSIGNED
     */
    type?: string;
    /**
     * User Assigned Managed Identity Config
     */
    userAssigned?: inputs.GetAksclusterSpecConfigIdentityConfigUserAssigned;
}

export interface GetAksclusterSpecConfigIdentityConfigArgs {
    /**
     * Type of managed identity used by the cluster (default IDENTITY_TYPE_SYSTEM_ASSIGNED). Allowed values include: IDENTITY_TYPE_SYSTEM_ASSIGNED or IDENTITY_TYPE_USER_ASSIGNED
     */
    type?: pulumi.Input<string>;
    /**
     * User Assigned Managed Identity Config
     */
    userAssigned?: pulumi.Input<inputs.GetAksclusterSpecConfigIdentityConfigUserAssignedArgs>;
}

export interface GetAksclusterSpecConfigIdentityConfigUserAssigned {
    /**
     * The ARM resource ID of user assigned identity in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'
     */
    resourceId: string;
}

export interface GetAksclusterSpecConfigIdentityConfigUserAssignedArgs {
    /**
     * The ARM resource ID of user assigned identity in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'
     */
    resourceId: pulumi.Input<string>;
}

export interface GetAksclusterSpecConfigLinuxConfig {
    /**
     * Administrator username to use for Linux VMs
     */
    adminUsername: string;
    /**
     * Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers
     */
    sshKeys?: string[];
}

export interface GetAksclusterSpecConfigLinuxConfigArgs {
    /**
     * Administrator username to use for Linux VMs
     */
    adminUsername: pulumi.Input<string>;
    /**
     * Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers
     */
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetAksclusterSpecConfigNetworkConfig {
    /**
     * DNS prefix of the cluster
     */
    dnsPrefix: string;
    /**
     * IP address assigned to the Kubernetes DNS service. This key can only be set when the network_config.network_plugin key is set to 'azure'.
     */
    dnsServiceIp?: string;
    /**
     * A CIDR notation IP range assigned to the Docker bridge network
     */
    dockerBridgeCidr?: string;
    /**
     * Load balancer SKU
     */
    loadBalancerSku?: string;
    /**
     * Network plugin. It is used for building Kubernetes network. Allowed values: azure, kubenet. Specify 'azure' for routable pod IPs from VNET, 'kubenet' for non-routable pod IPs with an overlay network, Defaults to 'kubenet'
     */
    networkPlugin?: string;
    /**
     * Network plugin mode. Allowed values: overlay. Used to control the mode the network plugin should operate in. For example, 'overlay' used with networkPlugin=azure will use an overlay network (non-VNET IPs) for pods in the cluster.
     */
    networkPluginMode?: string;
    /**
     * Network policy
     */
    networkPolicy?: string;
    /**
     * CIDR notation IP ranges from which to assign pod IPs
     */
    podCidrs?: string[];
    /**
     * CIDR notation IP ranges from which to assign service cluster IP. This key can only be set when the network_config.network_plugin key is set to 'azure'.
     */
    serviceCidrs?: string[];
}

export interface GetAksclusterSpecConfigNetworkConfigArgs {
    /**
     * DNS prefix of the cluster
     */
    dnsPrefix: pulumi.Input<string>;
    /**
     * IP address assigned to the Kubernetes DNS service. This key can only be set when the network_config.network_plugin key is set to 'azure'.
     */
    dnsServiceIp?: pulumi.Input<string>;
    /**
     * A CIDR notation IP range assigned to the Docker bridge network
     */
    dockerBridgeCidr?: pulumi.Input<string>;
    /**
     * Load balancer SKU
     */
    loadBalancerSku?: pulumi.Input<string>;
    /**
     * Network plugin. It is used for building Kubernetes network. Allowed values: azure, kubenet. Specify 'azure' for routable pod IPs from VNET, 'kubenet' for non-routable pod IPs with an overlay network, Defaults to 'kubenet'
     */
    networkPlugin?: pulumi.Input<string>;
    /**
     * Network plugin mode. Allowed values: overlay. Used to control the mode the network plugin should operate in. For example, 'overlay' used with networkPlugin=azure will use an overlay network (non-VNET IPs) for pods in the cluster.
     */
    networkPluginMode?: pulumi.Input<string>;
    /**
     * Network policy
     */
    networkPolicy?: pulumi.Input<string>;
    /**
     * CIDR notation IP ranges from which to assign pod IPs
     */
    podCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * CIDR notation IP ranges from which to assign service cluster IP. This key can only be set when the network_config.network_plugin key is set to 'azure'.
     */
    serviceCidrs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetAksclusterSpecConfigSku {
    /**
     * Name of the cluster SKU. Allowed values include: BASIC.
     */
    name?: string;
    /**
     * Tier of the cluster SKU. Allowed values include: FREE or PAID.
     */
    tier?: string;
}

export interface GetAksclusterSpecConfigSkuArgs {
    /**
     * Name of the cluster SKU. Allowed values include: BASIC.
     */
    name?: pulumi.Input<string>;
    /**
     * Tier of the cluster SKU. Allowed values include: FREE or PAID.
     */
    tier?: pulumi.Input<string>;
}

export interface GetAksclusterSpecConfigStorageConfig {
    /**
     * Enable the azure disk CSI driver for the storage
     */
    enableDiskCsiDriver?: boolean;
    /**
     * Enable the azure file CSI driver for the storage
     */
    enableFileCsiDriver?: boolean;
    /**
     * Enable the snapshot controller for the storage
     */
    enableSnapshotController?: boolean;
}

export interface GetAksclusterSpecConfigStorageConfigArgs {
    /**
     * Enable the azure disk CSI driver for the storage
     */
    enableDiskCsiDriver?: pulumi.Input<boolean>;
    /**
     * Enable the azure file CSI driver for the storage
     */
    enableFileCsiDriver?: pulumi.Input<boolean>;
    /**
     * Enable the snapshot controller for the storage
     */
    enableSnapshotController?: pulumi.Input<boolean>;
}

export interface GetAksclusterSpecNodepool {
    /**
     * Name of the nodepool, immutable
     */
    name: string;
    /**
     * Spec for the nodepool
     */
    spec: inputs.GetAksclusterSpecNodepoolSpec;
}

export interface GetAksclusterSpecNodepoolArgs {
    /**
     * Name of the nodepool, immutable
     */
    name: pulumi.Input<string>;
    /**
     * Spec for the nodepool
     */
    spec: pulumi.Input<inputs.GetAksclusterSpecNodepoolSpecArgs>;
}

export interface GetAksclusterSpecNodepoolSpec {
    /**
     * Auto scaling config.
     */
    autoScalingConfig?: inputs.GetAksclusterSpecNodepoolSpecAutoScalingConfig;
    /**
     * The list of Availability zones to use for nodepool. This can only be specified if the type of the nodepool is AvailabilitySet.
     */
    availabilityZones?: string[];
    /**
     * Count is the number of nodes
     */
    count: number;
    /**
     * Whether each node is allocated its own public IP
     */
    enableNodePublicIp?: boolean;
    /**
     * The maximum number of pods that can run on a node
     */
    maxPods?: number;
    /**
     * The mode of the nodepool. Allowed values include: SYSTEM or USER. A cluster must have at least one 'SYSTEM' nodepool at all times.
     */
    mode: string;
    /**
     * The node image version of the nodepool.
     */
    nodeImageVersion?: string;
    /**
     * The node labels to be persisted across all nodes in nodepool
     */
    nodeLabels?: {[key: string]: string};
    /**
     * OS Disk Size in GB to be used to specify the disk size for every machine in the nodepool. If you specify 0, it will apply the default osDisk size according to the vmSize specified
     */
    osDiskSizeGb?: number;
    /**
     * OS Disk Type. Allowed values include: EPHEMERAL or MANAGED.
     */
    osDiskType?: string;
    /**
     * The OS type of the nodepool. Allowed values include: LINUX.
     */
    osType?: string;
    /**
     * The ID of a subnet in an existing VNet into which to assign pods in the cluster. Requires network-plugin to be azure and not compatible with network-plugin-mode overlay
     */
    podSubnetId?: string;
    /**
     * Scale set eviction policy, Allowed values include: DELETE or DEALLOCATE.
     */
    scaleSetEvictionPolicy?: string;
    /**
     * Scale set priority. Allowed values include: REGULAR or SPOT.
     */
    scaleSetPriority?: string;
    /**
     * Max spot price
     */
    spotMaxPrice?: number;
    /**
     * AKS specific node tags
     */
    tags?: {[key: string]: string};
    /**
     * The taints added to new nodes during nodepool create and scale
     */
    taints?: inputs.GetAksclusterSpecNodepoolSpecTaint[];
    /**
     * The Nodepool type. Allowed values include: VIRTUAL_MACHINE_SCALE_SETS or AVAILABILITY_SET.
     */
    type?: string;
    /**
     * upgrade config
     */
    upgradeConfig?: inputs.GetAksclusterSpecNodepoolSpecUpgradeConfig;
    /**
     * Virtual Machine Size
     */
    vmSize: string;
    /**
     * The ID of a subnet in an existing VNet into which to deploy the cluster. If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes
     */
    vnetSubnetId?: string;
}

export interface GetAksclusterSpecNodepoolSpecArgs {
    /**
     * Auto scaling config.
     */
    autoScalingConfig?: pulumi.Input<inputs.GetAksclusterSpecNodepoolSpecAutoScalingConfigArgs>;
    /**
     * The list of Availability zones to use for nodepool. This can only be specified if the type of the nodepool is AvailabilitySet.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Count is the number of nodes
     */
    count: pulumi.Input<number>;
    /**
     * Whether each node is allocated its own public IP
     */
    enableNodePublicIp?: pulumi.Input<boolean>;
    /**
     * The maximum number of pods that can run on a node
     */
    maxPods?: pulumi.Input<number>;
    /**
     * The mode of the nodepool. Allowed values include: SYSTEM or USER. A cluster must have at least one 'SYSTEM' nodepool at all times.
     */
    mode: pulumi.Input<string>;
    /**
     * The node image version of the nodepool.
     */
    nodeImageVersion?: pulumi.Input<string>;
    /**
     * The node labels to be persisted across all nodes in nodepool
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * OS Disk Size in GB to be used to specify the disk size for every machine in the nodepool. If you specify 0, it will apply the default osDisk size according to the vmSize specified
     */
    osDiskSizeGb?: pulumi.Input<number>;
    /**
     * OS Disk Type. Allowed values include: EPHEMERAL or MANAGED.
     */
    osDiskType?: pulumi.Input<string>;
    /**
     * The OS type of the nodepool. Allowed values include: LINUX.
     */
    osType?: pulumi.Input<string>;
    /**
     * The ID of a subnet in an existing VNet into which to assign pods in the cluster. Requires network-plugin to be azure and not compatible with network-plugin-mode overlay
     */
    podSubnetId?: pulumi.Input<string>;
    /**
     * Scale set eviction policy, Allowed values include: DELETE or DEALLOCATE.
     */
    scaleSetEvictionPolicy?: pulumi.Input<string>;
    /**
     * Scale set priority. Allowed values include: REGULAR or SPOT.
     */
    scaleSetPriority?: pulumi.Input<string>;
    /**
     * Max spot price
     */
    spotMaxPrice?: pulumi.Input<number>;
    /**
     * AKS specific node tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The taints added to new nodes during nodepool create and scale
     */
    taints?: pulumi.Input<pulumi.Input<inputs.GetAksclusterSpecNodepoolSpecTaintArgs>[]>;
    /**
     * The Nodepool type. Allowed values include: VIRTUAL_MACHINE_SCALE_SETS or AVAILABILITY_SET.
     */
    type?: pulumi.Input<string>;
    /**
     * upgrade config
     */
    upgradeConfig?: pulumi.Input<inputs.GetAksclusterSpecNodepoolSpecUpgradeConfigArgs>;
    /**
     * Virtual Machine Size
     */
    vmSize: pulumi.Input<string>;
    /**
     * The ID of a subnet in an existing VNet into which to deploy the cluster. If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes
     */
    vnetSubnetId?: pulumi.Input<string>;
}

export interface GetAksclusterSpecNodepoolSpecAutoScalingConfig {
    /**
     * Enable auto scaling
     */
    enable?: boolean;
    /**
     * Maximum node count
     */
    maxCount?: number;
    /**
     * Minimum node count
     */
    minCount?: number;
}

export interface GetAksclusterSpecNodepoolSpecAutoScalingConfigArgs {
    /**
     * Enable auto scaling
     */
    enable?: pulumi.Input<boolean>;
    /**
     * Maximum node count
     */
    maxCount?: pulumi.Input<number>;
    /**
     * Minimum node count
     */
    minCount?: pulumi.Input<number>;
}

export interface GetAksclusterSpecNodepoolSpecTaint {
    /**
     * Current effect state of the node pool
     */
    effect?: string;
    /**
     * The taint key to be applied to a node
     */
    key?: string;
    /**
     * The taint value corresponding to the taint key
     */
    value?: string;
}

export interface GetAksclusterSpecNodepoolSpecTaintArgs {
    /**
     * Current effect state of the node pool
     */
    effect?: pulumi.Input<string>;
    /**
     * The taint key to be applied to a node
     */
    key?: pulumi.Input<string>;
    /**
     * The taint value corresponding to the taint key
     */
    value?: pulumi.Input<string>;
}

export interface GetAksclusterSpecNodepoolSpecUpgradeConfig {
    /**
     * Max Surge
     */
    maxSurge?: string;
}

export interface GetAksclusterSpecNodepoolSpecUpgradeConfigArgs {
    /**
     * Max Surge
     */
    maxSurge?: pulumi.Input<string>;
}

export interface GetBackupScheduleScope {
    /**
     * Cluster scope block
     */
    cluster?: inputs.GetBackupScheduleScopeCluster;
    /**
     * Cluster group scope block
     */
    clusterGroup?: inputs.GetBackupScheduleScopeClusterGroup;
}

export interface GetBackupScheduleScopeArgs {
    /**
     * Cluster scope block
     */
    cluster?: pulumi.Input<inputs.GetBackupScheduleScopeClusterArgs>;
    /**
     * Cluster group scope block
     */
    clusterGroup?: pulumi.Input<inputs.GetBackupScheduleScopeClusterGroupArgs>;
}

export interface GetBackupScheduleScopeCluster {
    /**
     * Cluster name
     */
    clusterName: string;
    /**
     * Management cluster name
     */
    managementClusterName?: string;
    /**
     * Cluster provisioner name
     */
    provisionerName?: string;
}

export interface GetBackupScheduleScopeClusterArgs {
    /**
     * Cluster name
     */
    clusterName: pulumi.Input<string>;
    /**
     * Management cluster name
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Cluster provisioner name
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetBackupScheduleScopeClusterGroup {
    /**
     * Cluster group name
     */
    clusterGroupName: string;
}

export interface GetBackupScheduleScopeClusterGroupArgs {
    /**
     * Cluster group name
     */
    clusterGroupName: pulumi.Input<string>;
}

export interface GetClusterAttachK8sCluster {
    /**
     * Attach cluster description
     */
    description?: string;
    /**
     * Attach cluster KUBECONFIG path
     */
    kubeconfigFile?: string;
    /**
     * Attach cluster KUBECONFIG
     */
    kubeconfigRaw?: string;
}

export interface GetClusterAttachK8sClusterArgs {
    /**
     * Attach cluster description
     */
    description?: pulumi.Input<string>;
    /**
     * Attach cluster KUBECONFIG path
     */
    kubeconfigFile?: pulumi.Input<string>;
    /**
     * Attach cluster KUBECONFIG
     */
    kubeconfigRaw?: pulumi.Input<string>;
}

export interface GetClusterGroupMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetClusterGroupMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetClusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetClusterMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetClusterNodePoolMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetClusterNodePoolMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetClusterNodePoolSpec {
    /**
     * Cloud labels
     */
    cloudLabels?: {[key: string]: string};
    /**
     * Node labels
     */
    nodeLabels?: {[key: string]: string};
    /**
     * TKGAWSNodepool is the nodepool spec for TKG AWS cluster
     */
    tkgAws?: inputs.GetClusterNodePoolSpecTkgAw[];
    /**
     * TKGServiceVsphereNodepool is the nodepool spec for TKG service vsphere cluster
     */
    tkgServiceVspheres?: inputs.GetClusterNodePoolSpecTkgServiceVsphere[];
    /**
     * TkgVsphereNodepool is the nodepool config for the TKG vsphere cluster
     */
    tkgVspheres?: inputs.GetClusterNodePoolSpecTkgVsphere[];
    /**
     * Count is the number of nodes
     */
    workerNodeCount: string;
}

export interface GetClusterNodePoolSpecArgs {
    /**
     * Cloud labels
     */
    cloudLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Node labels
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * TKGAWSNodepool is the nodepool spec for TKG AWS cluster
     */
    tkgAws?: pulumi.Input<pulumi.Input<inputs.GetClusterNodePoolSpecTkgAwArgs>[]>;
    /**
     * TKGServiceVsphereNodepool is the nodepool spec for TKG service vsphere cluster
     */
    tkgServiceVspheres?: pulumi.Input<pulumi.Input<inputs.GetClusterNodePoolSpecTkgServiceVsphereArgs>[]>;
    /**
     * TkgVsphereNodepool is the nodepool config for the TKG vsphere cluster
     */
    tkgVspheres?: pulumi.Input<pulumi.Input<inputs.GetClusterNodePoolSpecTkgVsphereArgs>[]>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount: pulumi.Input<string>;
}

export interface GetClusterNodePoolSpecTkgAw {
    /**
     * Nodepool instance type
     */
    class?: string;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystem of the nodes
     */
    storageClass?: string;
}

export interface GetClusterNodePoolSpecTkgAwArgs {
    /**
     * Nodepool instance type
     */
    class?: pulumi.Input<string>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystem of the nodes
     */
    storageClass?: pulumi.Input<string>;
}

export interface GetClusterNodePoolSpecTkgServiceVsphere {
    /**
     * Nodepool instance type
     */
    class: string;
    /**
     * Configure the failure domain of node pool. The potential values could be found using cluster:options api. This parameter will be ignored by the backend if the TKG service vsphere cluster doesn't support.
     */
    failureDomain?: string;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystem of the nodes
     */
    storageClass: string;
    /**
     * Configurable volumes for nodepool nodes
     */
    volumes?: inputs.GetClusterNodePoolSpecTkgServiceVsphereVolume[];
}

export interface GetClusterNodePoolSpecTkgServiceVsphereArgs {
    /**
     * Nodepool instance type
     */
    class: pulumi.Input<string>;
    /**
     * Configure the failure domain of node pool. The potential values could be found using cluster:options api. This parameter will be ignored by the backend if the TKG service vsphere cluster doesn't support.
     */
    failureDomain?: pulumi.Input<string>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystem of the nodes
     */
    storageClass: pulumi.Input<string>;
    /**
     * Configurable volumes for nodepool nodes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.GetClusterNodePoolSpecTkgServiceVsphereVolumeArgs>[]>;
}

export interface GetClusterNodePoolSpecTkgServiceVsphereVolume {
    /**
     * Volume capacity is in gib
     */
    capacity?: number;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: string;
    /**
     * It is the volume name
     */
    name?: string;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: string;
}

export interface GetClusterNodePoolSpecTkgServiceVsphereVolumeArgs {
    /**
     * Volume capacity is in gib
     */
    capacity?: pulumi.Input<number>;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: pulumi.Input<string>;
    /**
     * It is the volume name
     */
    name?: pulumi.Input<string>;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: pulumi.Input<string>;
}

export interface GetClusterNodePoolSpecTkgVsphere {
    /**
     * VM specific configuration
     */
    vmConfig: inputs.GetClusterNodePoolSpecTkgVsphereVmConfig;
}

export interface GetClusterNodePoolSpecTkgVsphereArgs {
    /**
     * VM specific configuration
     */
    vmConfig: pulumi.Input<inputs.GetClusterNodePoolSpecTkgVsphereVmConfigArgs>;
}

export interface GetClusterNodePoolSpecTkgVsphereVmConfig {
    /**
     * Number of CPUs per node
     */
    cpu?: string;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: string;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: string;
}

export interface GetClusterNodePoolSpecTkgVsphereVmConfigArgs {
    /**
     * Number of CPUs per node
     */
    cpu?: pulumi.Input<string>;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: pulumi.Input<string>;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: pulumi.Input<string>;
}

export interface GetClusterSpec {
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: string;
    /**
     * Optional image registry name is the name of the image registry to be used for the cluster
     */
    imageRegistry?: string;
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: string;
    /**
     * The Tanzu Kubernetes Grid (TKGm) AWS cluster spec
     */
    tkgAws?: inputs.GetClusterSpecTkgAws;
    /**
     * The Tanzu Kubernetes Grid Service (TKGs) cluster spec
     */
    tkgServiceVsphere?: inputs.GetClusterSpecTkgServiceVsphere;
    /**
     * The Tanzu Kubernetes Grid (TKGm) vSphere cluster spec
     */
    tkgVsphere?: inputs.GetClusterSpecTkgVsphere;
}

export interface GetClusterSpecArgs {
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: pulumi.Input<string>;
    /**
     * Optional image registry name is the name of the image registry to be used for the cluster
     */
    imageRegistry?: pulumi.Input<string>;
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: pulumi.Input<string>;
    /**
     * The Tanzu Kubernetes Grid (TKGm) AWS cluster spec
     */
    tkgAws?: pulumi.Input<inputs.GetClusterSpecTkgAwsArgs>;
    /**
     * The Tanzu Kubernetes Grid Service (TKGs) cluster spec
     */
    tkgServiceVsphere?: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereArgs>;
    /**
     * The Tanzu Kubernetes Grid (TKGm) vSphere cluster spec
     */
    tkgVsphere?: pulumi.Input<inputs.GetClusterSpecTkgVsphereArgs>;
}

export interface GetClusterSpecTkgAws {
    /**
     * Advanced configuration for TKGm cluster
     */
    advancedConfigs?: inputs.GetClusterSpecTkgAwsAdvancedConfig[];
    /**
     * Kubernetes version distribution for the cluster
     */
    distribution: inputs.GetClusterSpecTkgAwsDistribution;
    /**
     * AWS related settings for workload cluster
     */
    settings: inputs.GetClusterSpecTkgAwsSettings;
    /**
     * Topology configuration of the cluster
     */
    topology: inputs.GetClusterSpecTkgAwsTopology;
}

export interface GetClusterSpecTkgAwsArgs {
    /**
     * Advanced configuration for TKGm cluster
     */
    advancedConfigs?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgAwsAdvancedConfigArgs>[]>;
    /**
     * Kubernetes version distribution for the cluster
     */
    distribution: pulumi.Input<inputs.GetClusterSpecTkgAwsDistributionArgs>;
    /**
     * AWS related settings for workload cluster
     */
    settings: pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsArgs>;
    /**
     * Topology configuration of the cluster
     */
    topology: pulumi.Input<inputs.GetClusterSpecTkgAwsTopologyArgs>;
}

export interface GetClusterSpecTkgAwsAdvancedConfig {
    /**
     * The key of the advanced configuration parameters
     */
    key: string;
    /**
     * The value of the advanced configuration parameters
     */
    value: string;
}

export interface GetClusterSpecTkgAwsAdvancedConfigArgs {
    /**
     * The key of the advanced configuration parameters
     */
    key: pulumi.Input<string>;
    /**
     * The value of the advanced configuration parameters
     */
    value: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsDistribution {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: string;
    /**
     * Name of the OS used for the cluster
     */
    osName?: string;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: string;
    /**
     * Specifies name of the account in which to create the cluster
     */
    provisionerCredentialName?: string;
    /**
     * Specifies region of the cluster
     */
    region: string;
    /**
     * Specifies version of the cluster
     */
    version: string;
}

export interface GetClusterSpecTkgAwsDistributionArgs {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: pulumi.Input<string>;
    /**
     * Name of the OS used for the cluster
     */
    osName?: pulumi.Input<string>;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Specifies name of the account in which to create the cluster
     */
    provisionerCredentialName?: pulumi.Input<string>;
    /**
     * Specifies region of the cluster
     */
    region: pulumi.Input<string>;
    /**
     * Specifies version of the cluster
     */
    version: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsSettings {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: inputs.GetClusterSpecTkgAwsSettingsNetwork;
    /**
     * Security Settings specifies security-related settings for the cluster
     */
    security: inputs.GetClusterSpecTkgAwsSettingsSecurity;
}

export interface GetClusterSpecTkgAwsSettingsArgs {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsNetworkArgs>;
    /**
     * Security Settings specifies security-related settings for the cluster
     */
    security: pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsSecurityArgs>;
}

export interface GetClusterSpecTkgAwsSettingsNetwork {
    /**
     * Cluster network specifies kubernetes network information for the cluster
     */
    cluster: inputs.GetClusterSpecTkgAwsSettingsNetworkCluster;
    /**
     * Provider Network specifies provider specific network information for the cluster
     */
    providers: inputs.GetClusterSpecTkgAwsSettingsNetworkProvider[];
}

export interface GetClusterSpecTkgAwsSettingsNetworkArgs {
    /**
     * Cluster network specifies kubernetes network information for the cluster
     */
    cluster: pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsNetworkClusterArgs>;
    /**
     * Provider Network specifies provider specific network information for the cluster
     */
    providers: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsNetworkProviderArgs>[]>;
}

export interface GetClusterSpecTkgAwsSettingsNetworkCluster {
    /**
     * APIServerPort specifies the port address for the cluster that defaults to 6443.
     */
    apiServerPort?: number;
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: inputs.GetClusterSpecTkgAwsSettingsNetworkClusterPod[];
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: inputs.GetClusterSpecTkgAwsSettingsNetworkClusterService[];
}

export interface GetClusterSpecTkgAwsSettingsNetworkClusterArgs {
    /**
     * APIServerPort specifies the port address for the cluster that defaults to 6443.
     */
    apiServerPort?: pulumi.Input<number>;
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsNetworkClusterPodArgs>[]>;
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsNetworkClusterServiceArgs>[]>;
}

export interface GetClusterSpecTkgAwsSettingsNetworkClusterPod {
    /**
     * CIDRBlocks specifies one or more of IP address ranges
     */
    cidrBlocks: string;
}

export interface GetClusterSpecTkgAwsSettingsNetworkClusterPodArgs {
    /**
     * CIDRBlocks specifies one or more of IP address ranges
     */
    cidrBlocks: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsSettingsNetworkClusterService {
    /**
     * CIDRBlocks specifies one or more of IP address ranges
     */
    cidrBlocks: string;
}

export interface GetClusterSpecTkgAwsSettingsNetworkClusterServiceArgs {
    /**
     * CIDRBlocks specifies one or more of IP address ranges
     */
    cidrBlocks: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsSettingsNetworkProvider {
    /**
     * Optional list of subnets used to place the nodes in the cluster
     */
    subnets?: inputs.GetClusterSpecTkgAwsSettingsNetworkProviderSubnet[];
    /**
     * AWS VPC configuration for the cluster
     */
    vpc: inputs.GetClusterSpecTkgAwsSettingsNetworkProviderVpc;
}

export interface GetClusterSpecTkgAwsSettingsNetworkProviderArgs {
    /**
     * Optional list of subnets used to place the nodes in the cluster
     */
    subnets?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsNetworkProviderSubnetArgs>[]>;
    /**
     * AWS VPC configuration for the cluster
     */
    vpc: pulumi.Input<inputs.GetClusterSpecTkgAwsSettingsNetworkProviderVpcArgs>;
}

export interface GetClusterSpecTkgAwsSettingsNetworkProviderSubnet {
    /**
     * AWS availability zone e.g. us-west-2a
     */
    availabilityZone?: string;
    /**
     * CIDR for AWS subnet which must be in the range of AWS VPC CIDR block
     */
    cidrBlockSubnet?: string;
    /**
     * Describes if it is public subnet or private subnet
     */
    isPublic?: boolean;
    /**
     * This is the subnet ID of AWS. The rest of the fields are ignored if this field is specified
     */
    subnetId?: string;
}

export interface GetClusterSpecTkgAwsSettingsNetworkProviderSubnetArgs {
    /**
     * AWS availability zone e.g. us-west-2a
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * CIDR for AWS subnet which must be in the range of AWS VPC CIDR block
     */
    cidrBlockSubnet?: pulumi.Input<string>;
    /**
     * Describes if it is public subnet or private subnet
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * This is the subnet ID of AWS. The rest of the fields are ignored if this field is specified
     */
    subnetId?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsSettingsNetworkProviderVpc {
    /**
     * CIDR for AWS VPC. A valid example is 10.0.0.0/16
     */
    cidrBlockVpc?: string;
    vpcId?: string;
}

export interface GetClusterSpecTkgAwsSettingsNetworkProviderVpcArgs {
    /**
     * CIDR for AWS VPC. A valid example is 10.0.0.0/16
     */
    cidrBlockVpc?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsSettingsSecurity {
    /**
     * SSH key for provisioning and accessing the cluster VMs
     */
    sshKey: string;
}

export interface GetClusterSpecTkgAwsSettingsSecurityArgs {
    /**
     * SSH key for provisioning and accessing the cluster VMs
     */
    sshKey: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsTopology {
    /**
     * AWS specific control plane configuration for workload cluster object
     */
    controlPlane: inputs.GetClusterSpecTkgAwsTopologyControlPlane;
    /**
     * Nodepool specific configuration
     */
    nodePools?: inputs.GetClusterSpecTkgAwsTopologyNodePool[];
}

export interface GetClusterSpecTkgAwsTopologyArgs {
    /**
     * AWS specific control plane configuration for workload cluster object
     */
    controlPlane: pulumi.Input<inputs.GetClusterSpecTkgAwsTopologyControlPlaneArgs>;
    /**
     * Nodepool specific configuration
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgAwsTopologyNodePoolArgs>[]>;
}

export interface GetClusterSpecTkgAwsTopologyControlPlane {
    /**
     * List of availability zones for the control plane nodes
     */
    availabilityZones: string[];
    /**
     * Flag which controls if the cluster needs to be highly available. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: boolean;
    /**
     * Control plane instance type
     */
    instanceType: string;
}

export interface GetClusterSpecTkgAwsTopologyControlPlaneArgs {
    /**
     * List of availability zones for the control plane nodes
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flag which controls if the cluster needs to be highly available. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: pulumi.Input<boolean>;
    /**
     * Control plane instance type
     */
    instanceType: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsTopologyNodePool {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: inputs.GetClusterSpecTkgAwsTopologyNodePoolInfo;
    /**
     * Spec for the cluster nodepool
     */
    spec?: inputs.GetClusterSpecTkgAwsTopologyNodePoolSpec;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolArgs {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: pulumi.Input<inputs.GetClusterSpecTkgAwsTopologyNodePoolInfoArgs>;
    /**
     * Spec for the cluster nodepool
     */
    spec?: pulumi.Input<inputs.GetClusterSpecTkgAwsTopologyNodePoolSpecArgs>;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolInfo {
    /**
     * Description of the nodepool
     */
    description?: string;
    /**
     * Name of the nodepool
     */
    name: string;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolInfoArgs {
    /**
     * Description of the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool
     */
    name: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolSpec {
    /**
     * Nodepool config for tkg aws
     */
    tkgAws?: inputs.GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAws;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: string;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolSpecArgs {
    /**
     * Nodepool config for tkg aws
     */
    tkgAws?: pulumi.Input<inputs.GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsArgs>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAws {
    /**
     * Availability zone for the nodepool that is to be used when you are creating a nodepool for cluster in TMC hosted AWS solution
     */
    availabilityZone?: string;
    /**
     * Nodepool instance type whose potential values could be found using cluster:options api
     */
    instanceType: string;
    /**
     * List of Availability Zones to place the AWS nodes on. Please use this field to provision a nodepool for workload cluster on an attached TKG AWS management cluster
     */
    nodePlacement: inputs.GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsNodePlacement;
    /**
     * Subnet ID of the private subnet in which you want the nodes to be created in
     */
    nodepoolSubnetId?: string;
    /**
     * Kubernetes version of the node pool
     */
    version: string;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsArgs {
    /**
     * Availability zone for the nodepool that is to be used when you are creating a nodepool for cluster in TMC hosted AWS solution
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Nodepool instance type whose potential values could be found using cluster:options api
     */
    instanceType: pulumi.Input<string>;
    /**
     * List of Availability Zones to place the AWS nodes on. Please use this field to provision a nodepool for workload cluster on an attached TKG AWS management cluster
     */
    nodePlacement: pulumi.Input<inputs.GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsNodePlacementArgs>;
    /**
     * Subnet ID of the private subnet in which you want the nodes to be created in
     */
    nodepoolSubnetId?: pulumi.Input<string>;
    /**
     * Kubernetes version of the node pool
     */
    version: pulumi.Input<string>;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsNodePlacement {
    /**
     * The Availability Zone where the AWS nodes are placed
     */
    awsAvailabilityZone: string;
}

export interface GetClusterSpecTkgAwsTopologyNodePoolSpecTkgAwsNodePlacementArgs {
    /**
     * The Availability Zone where the AWS nodes are placed
     */
    awsAvailabilityZone: pulumi.Input<string>;
}

export interface GetClusterSpecTkgServiceVsphere {
    /**
     * VSphere specific distribution
     */
    distribution: inputs.GetClusterSpecTkgServiceVsphereDistribution;
    /**
     * VSphere related settings for workload cluster
     */
    settings: inputs.GetClusterSpecTkgServiceVsphereSettings;
    /**
     * Topology specific configuration
     */
    topology: inputs.GetClusterSpecTkgServiceVsphereTopology;
}

export interface GetClusterSpecTkgServiceVsphereArgs {
    /**
     * VSphere specific distribution
     */
    distribution: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereDistributionArgs>;
    /**
     * VSphere related settings for workload cluster
     */
    settings: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereSettingsArgs>;
    /**
     * Topology specific configuration
     */
    topology: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyArgs>;
}

export interface GetClusterSpecTkgServiceVsphereDistribution {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: string;
    /**
     * Name of the OS used for the cluster
     */
    osName?: string;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: string;
    /**
     * Version of the cluster
     */
    version: string;
}

export interface GetClusterSpecTkgServiceVsphereDistributionArgs {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: pulumi.Input<string>;
    /**
     * Name of the OS used for the cluster
     */
    osName?: pulumi.Input<string>;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Version of the cluster
     */
    version: pulumi.Input<string>;
}

export interface GetClusterSpecTkgServiceVsphereSettings {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: inputs.GetClusterSpecTkgServiceVsphereSettingsNetwork;
    /**
     * StorageSettings specifies storage-related settings for the cluster
     */
    storage?: inputs.GetClusterSpecTkgServiceVsphereSettingsStorage;
}

export interface GetClusterSpecTkgServiceVsphereSettingsArgs {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereSettingsNetworkArgs>;
    /**
     * StorageSettings specifies storage-related settings for the cluster
     */
    storage?: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereSettingsStorageArgs>;
}

export interface GetClusterSpecTkgServiceVsphereSettingsNetwork {
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: inputs.GetClusterSpecTkgServiceVsphereSettingsNetworkPod[];
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: inputs.GetClusterSpecTkgServiceVsphereSettingsNetworkService[];
}

export interface GetClusterSpecTkgServiceVsphereSettingsNetworkArgs {
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereSettingsNetworkPodArgs>[]>;
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereSettingsNetworkServiceArgs>[]>;
}

export interface GetClusterSpecTkgServiceVsphereSettingsNetworkPod {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: string[];
}

export interface GetClusterSpecTkgServiceVsphereSettingsNetworkPodArgs {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetClusterSpecTkgServiceVsphereSettingsNetworkService {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: string[];
}

export interface GetClusterSpecTkgServiceVsphereSettingsNetworkServiceArgs {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetClusterSpecTkgServiceVsphereSettingsStorage {
    /**
     * Classes is a list of storage classes from the supervisor namespace to expose within a cluster. If omitted, all storage classes from the supervisor namespace will be exposed within the cluster.
     */
    classes?: string[];
    /**
     * DefaultClass is the valid storage class name which is treated as the default storage class within a cluster. If omitted, no default storage class is set.
     */
    defaultClass?: string;
}

export interface GetClusterSpecTkgServiceVsphereSettingsStorageArgs {
    /**
     * Classes is a list of storage classes from the supervisor namespace to expose within a cluster. If omitted, all storage classes from the supervisor namespace will be exposed within the cluster.
     */
    classes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * DefaultClass is the valid storage class name which is treated as the default storage class within a cluster. If omitted, no default storage class is set.
     */
    defaultClass?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgServiceVsphereTopology {
    /**
     * Control plane specific configuration
     */
    controlPlane: inputs.GetClusterSpecTkgServiceVsphereTopologyControlPlane;
    /**
     * Nodepool specific configuration
     */
    nodePools?: inputs.GetClusterSpecTkgServiceVsphereTopologyNodePool[];
}

export interface GetClusterSpecTkgServiceVsphereTopologyArgs {
    /**
     * Control plane specific configuration
     */
    controlPlane: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyControlPlaneArgs>;
    /**
     * Nodepool specific configuration
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolArgs>[]>;
}

export interface GetClusterSpecTkgServiceVsphereTopologyControlPlane {
    /**
     * Control plane instance type
     */
    class: string;
    /**
     * High Availability or Non High Availability Cluster. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: boolean;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystems of the nodes
     */
    storageClass: string;
    /**
     * Configurable volumes for control plane nodes
     */
    volumes?: inputs.GetClusterSpecTkgServiceVsphereTopologyControlPlaneVolume[];
}

export interface GetClusterSpecTkgServiceVsphereTopologyControlPlaneArgs {
    /**
     * Control plane instance type
     */
    class: pulumi.Input<string>;
    /**
     * High Availability or Non High Availability Cluster. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: pulumi.Input<boolean>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystems of the nodes
     */
    storageClass: pulumi.Input<string>;
    /**
     * Configurable volumes for control plane nodes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyControlPlaneVolumeArgs>[]>;
}

export interface GetClusterSpecTkgServiceVsphereTopologyControlPlaneVolume {
    /**
     * Volume capacity is in gib
     */
    capacity?: number;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: string;
    /**
     * It is the volume name
     */
    name?: string;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: string;
}

export interface GetClusterSpecTkgServiceVsphereTopologyControlPlaneVolumeArgs {
    /**
     * Volume capacity is in gib
     */
    capacity?: pulumi.Input<number>;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: pulumi.Input<string>;
    /**
     * It is the volume name
     */
    name?: pulumi.Input<string>;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePool {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolInfo;
    /**
     * Spec for the cluster nodepool
     */
    spec?: inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolSpec;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolArgs {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolInfoArgs>;
    /**
     * Spec for the cluster nodepool
     */
    spec?: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecArgs>;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolInfo {
    /**
     * Description for the nodepool
     */
    description?: string;
    /**
     * Name of the nodepool
     */
    name?: string;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolInfoArgs {
    /**
     * Description for the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool
     */
    name?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolSpec {
    /**
     * Cloud labels
     */
    cloudLabel?: {[key: string]: string};
    /**
     * Node labels
     */
    nodeLabel?: {[key: string]: string};
    /**
     * Nodepool config for tkg service vsphere
     */
    tkgServiceVsphere?: inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphere;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: string;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecArgs {
    /**
     * Cloud labels
     */
    cloudLabel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Node labels
     */
    nodeLabel?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Nodepool config for tkg service vsphere
     */
    tkgServiceVsphere?: pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereArgs>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphere {
    /**
     * Control plane instance type
     */
    class: string;
    /**
     * Configure the failure domain of node pool. The potential values could be found using cluster:options api.
     */
    failureDomain?: string;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystems of the nodes
     */
    storageClass: string;
    /**
     * Configurable volumes for control plane nodes
     */
    volumes?: inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereVolume[];
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereArgs {
    /**
     * Control plane instance type
     */
    class: pulumi.Input<string>;
    /**
     * Configure the failure domain of node pool. The potential values could be found using cluster:options api.
     */
    failureDomain?: pulumi.Input<string>;
    /**
     * Storage Class to be used for storage of the disks which store the root filesystems of the nodes
     */
    storageClass: pulumi.Input<string>;
    /**
     * Configurable volumes for control plane nodes
     */
    volumes?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereVolumeArgs>[]>;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereVolume {
    /**
     * Volume capacity is in gib
     */
    capacity?: number;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: string;
    /**
     * It is the volume name
     */
    name?: string;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: string;
}

export interface GetClusterSpecTkgServiceVsphereTopologyNodePoolSpecTkgServiceVsphereVolumeArgs {
    /**
     * Volume capacity is in gib
     */
    capacity?: pulumi.Input<number>;
    /**
     * It is the directory where the volume device is to be mounted
     */
    mountPath?: pulumi.Input<string>;
    /**
     * It is the volume name
     */
    name?: pulumi.Input<string>;
    /**
     * This is the storage class for PVC which in case omitted, default storage class will be used for the disks
     */
    pvcStorageClass?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgVsphere {
    /**
     * Advanced configuration for TKGm cluster
     */
    advancedConfigs?: inputs.GetClusterSpecTkgVsphereAdvancedConfig[];
    /**
     * VSphere specific distribution
     */
    distribution: inputs.GetClusterSpecTkgVsphereDistribution;
    /**
     * VSphere related settings for workload cluster
     */
    settings: inputs.GetClusterSpecTkgVsphereSettings;
    /**
     * Topology specific configuration
     */
    topology: inputs.GetClusterSpecTkgVsphereTopology;
}

export interface GetClusterSpecTkgVsphereArgs {
    /**
     * Advanced configuration for TKGm cluster
     */
    advancedConfigs?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgVsphereAdvancedConfigArgs>[]>;
    /**
     * VSphere specific distribution
     */
    distribution: pulumi.Input<inputs.GetClusterSpecTkgVsphereDistributionArgs>;
    /**
     * VSphere related settings for workload cluster
     */
    settings: pulumi.Input<inputs.GetClusterSpecTkgVsphereSettingsArgs>;
    /**
     * Topology specific configuration
     */
    topology: pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyArgs>;
}

export interface GetClusterSpecTkgVsphereAdvancedConfig {
    /**
     * The key of the advanced configuration parameters
     */
    key: string;
    /**
     * The value of the advanced configuration parameters
     */
    value: string;
}

export interface GetClusterSpecTkgVsphereAdvancedConfigArgs {
    /**
     * The key of the advanced configuration parameters
     */
    key: pulumi.Input<string>;
    /**
     * The value of the advanced configuration parameters
     */
    value: pulumi.Input<string>;
}

export interface GetClusterSpecTkgVsphereDistribution {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: string;
    /**
     * Name of the OS used for the cluster
     */
    osName?: string;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: string;
    /**
     * Version specifies the version of the Kubernetes cluster
     */
    version: string;
    /**
     * Workspace defines a workspace configuration for the vSphere cloud provider
     */
    workspace: inputs.GetClusterSpecTkgVsphereDistributionWorkspace;
}

export interface GetClusterSpecTkgVsphereDistributionArgs {
    /**
     * Arch of the OS used for the cluster
     */
    osArch?: pulumi.Input<string>;
    /**
     * Name of the OS used for the cluster
     */
    osName?: pulumi.Input<string>;
    /**
     * Version of the OS used for the cluster
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Version specifies the version of the Kubernetes cluster
     */
    version: pulumi.Input<string>;
    /**
     * Workspace defines a workspace configuration for the vSphere cloud provider
     */
    workspace: pulumi.Input<inputs.GetClusterSpecTkgVsphereDistributionWorkspaceArgs>;
}

export interface GetClusterSpecTkgVsphereDistributionWorkspace {
    datacenter: string;
    datastore: string;
    folder: string;
    resourcePool: string;
    workspaceNetwork: string;
}

export interface GetClusterSpecTkgVsphereDistributionWorkspaceArgs {
    datacenter: pulumi.Input<string>;
    datastore: pulumi.Input<string>;
    folder: pulumi.Input<string>;
    resourcePool: pulumi.Input<string>;
    workspaceNetwork: pulumi.Input<string>;
}

export interface GetClusterSpecTkgVsphereSettings {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: inputs.GetClusterSpecTkgVsphereSettingsNetwork;
    /**
     * Security Settings specifies security-related settings for the cluster
     */
    security: inputs.GetClusterSpecTkgVsphereSettingsSecurity;
}

export interface GetClusterSpecTkgVsphereSettingsArgs {
    /**
     * Network Settings specifies network-related settings for the cluster
     */
    network: pulumi.Input<inputs.GetClusterSpecTkgVsphereSettingsNetworkArgs>;
    /**
     * Security Settings specifies security-related settings for the cluster
     */
    security: pulumi.Input<inputs.GetClusterSpecTkgVsphereSettingsSecurityArgs>;
}

export interface GetClusterSpecTkgVsphereSettingsNetwork {
    /**
     * APIServerPort specifies the port address for the cluster that defaults to 6443.
     */
    apiServerPort?: number;
    /**
     * ControlPlaneEndpoint specifies the control plane virtual IP address. The value should be unique for every create request, else cluster creation shall fail. This field is not needed when AVI enabled while creating a legacy cluster on TKGm.
     */
    controlPlaneEndPoint?: string;
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: inputs.GetClusterSpecTkgVsphereSettingsNetworkPod[];
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: inputs.GetClusterSpecTkgVsphereSettingsNetworkService[];
}

export interface GetClusterSpecTkgVsphereSettingsNetworkArgs {
    /**
     * APIServerPort specifies the port address for the cluster that defaults to 6443.
     */
    apiServerPort?: pulumi.Input<number>;
    /**
     * ControlPlaneEndpoint specifies the control plane virtual IP address. The value should be unique for every create request, else cluster creation shall fail. This field is not needed when AVI enabled while creating a legacy cluster on TKGm.
     */
    controlPlaneEndPoint?: pulumi.Input<string>;
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16
     */
    pods: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgVsphereSettingsNetworkPodArgs>[]>;
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12
     */
    services: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgVsphereSettingsNetworkServiceArgs>[]>;
}

export interface GetClusterSpecTkgVsphereSettingsNetworkPod {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: string[];
}

export interface GetClusterSpecTkgVsphereSettingsNetworkPodArgs {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetClusterSpecTkgVsphereSettingsNetworkService {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: string[];
}

export interface GetClusterSpecTkgVsphereSettingsNetworkServiceArgs {
    /**
     * CIDRBlocks specifies one or more ranges of IP addresses
     */
    cidrBlocks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetClusterSpecTkgVsphereSettingsSecurity {
    /**
     * SSH key for provisioning and accessing the cluster VMs
     */
    sshKey: string;
}

export interface GetClusterSpecTkgVsphereSettingsSecurityArgs {
    /**
     * SSH key for provisioning and accessing the cluster VMs
     */
    sshKey: pulumi.Input<string>;
}

export interface GetClusterSpecTkgVsphereTopology {
    /**
     * VSphere specific control plane configuration for workload cluster object
     */
    controlPlane: inputs.GetClusterSpecTkgVsphereTopologyControlPlane;
    /**
     * Nodepool specific configuration
     */
    nodePools?: inputs.GetClusterSpecTkgVsphereTopologyNodePool[];
}

export interface GetClusterSpecTkgVsphereTopologyArgs {
    /**
     * VSphere specific control plane configuration for workload cluster object
     */
    controlPlane: pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyControlPlaneArgs>;
    /**
     * Nodepool specific configuration
     */
    nodePools?: pulumi.Input<pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyNodePoolArgs>[]>;
}

export interface GetClusterSpecTkgVsphereTopologyControlPlane {
    /**
     * High Availability or Non High Availability Cluster. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: boolean;
    /**
     * VM specific configuration
     */
    vmConfig: inputs.GetClusterSpecTkgVsphereTopologyControlPlaneVmConfig;
}

export interface GetClusterSpecTkgVsphereTopologyControlPlaneArgs {
    /**
     * High Availability or Non High Availability Cluster. HA cluster creates three controlplane machines, and non HA creates just one
     */
    highAvailability?: pulumi.Input<boolean>;
    /**
     * VM specific configuration
     */
    vmConfig: pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyControlPlaneVmConfigArgs>;
}

export interface GetClusterSpecTkgVsphereTopologyControlPlaneVmConfig {
    /**
     * Number of CPUs per node
     */
    cpu?: string;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: string;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: string;
}

export interface GetClusterSpecTkgVsphereTopologyControlPlaneVmConfigArgs {
    /**
     * Number of CPUs per node
     */
    cpu?: pulumi.Input<string>;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: pulumi.Input<string>;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgVsphereTopologyNodePool {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: inputs.GetClusterSpecTkgVsphereTopologyNodePoolInfo;
    /**
     * Spec for the cluster nodepool
     */
    spec?: inputs.GetClusterSpecTkgVsphereTopologyNodePoolSpec;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolArgs {
    /**
     * Info is the meta information of nodepool for cluster
     */
    info: pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyNodePoolInfoArgs>;
    /**
     * Spec for the cluster nodepool
     */
    spec?: pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyNodePoolSpecArgs>;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolInfo {
    /**
     * Description of the nodepool
     */
    description?: string;
    /**
     * Name of the nodepool
     */
    name: string;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolInfoArgs {
    /**
     * Description of the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool
     */
    name: pulumi.Input<string>;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolSpec {
    /**
     * Nodepool config for tkgm vsphere
     */
    tkgVsphere?: inputs.GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphere;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: string;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolSpecArgs {
    /**
     * Nodepool config for tkgm vsphere
     */
    tkgVsphere?: pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereArgs>;
    /**
     * Count is the number of nodes
     */
    workerNodeCount?: pulumi.Input<string>;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphere {
    /**
     * VM specific configuration
     */
    vmConfig: inputs.GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereVmConfig;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereArgs {
    /**
     * VM specific configuration
     */
    vmConfig: pulumi.Input<inputs.GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereVmConfigArgs>;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereVmConfig {
    /**
     * Number of CPUs per node
     */
    cpu?: string;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: string;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: string;
}

export interface GetClusterSpecTkgVsphereTopologyNodePoolSpecTkgVsphereVmConfigArgs {
    /**
     * Number of CPUs per node
     */
    cpu?: pulumi.Input<string>;
    /**
     * Root disk size in gigabytes for the VM
     */
    diskSize?: pulumi.Input<string>;
    /**
     * Memory associated with the node in megabytes
     */
    memory?: pulumi.Input<string>;
}

export interface GetCredentialMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetCredentialMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetCredentialSpec {
    /**
     * The Tanzu capability for which the credential shall be used. Value must be in list [DATA_PROTECTION TANZU_OBSERVABILITY TANZU_SERVICE_MESH PROXY_CONFIG MANAGED_K8S_PROVIDER IMAGE_REGISTRY]
     */
    capability?: string;
    /**
     * Holds credentials sensitive data
     */
    data?: inputs.GetCredentialSpecData;
    /**
     * The Tanzu provider for which describes credential data type. Value must be in list [PROVIDER_UNSPECIFIED,AWS_EC2,GENERIC_S3,AZURE_AD,AWS_EKS,AZURE_AKS,GENERIC_KEY_VALUE]
     */
    provider?: string;
}

export interface GetCredentialSpecArgs {
    /**
     * The Tanzu capability for which the credential shall be used. Value must be in list [DATA_PROTECTION TANZU_OBSERVABILITY TANZU_SERVICE_MESH PROXY_CONFIG MANAGED_K8S_PROVIDER IMAGE_REGISTRY]
     */
    capability?: pulumi.Input<string>;
    /**
     * Holds credentials sensitive data
     */
    data?: pulumi.Input<inputs.GetCredentialSpecDataArgs>;
    /**
     * The Tanzu provider for which describes credential data type. Value must be in list [PROVIDER_UNSPECIFIED,AWS_EC2,GENERIC_S3,AZURE_AD,AWS_EKS,AZURE_AKS,GENERIC_KEY_VALUE]
     */
    provider?: pulumi.Input<string>;
}

export interface GetCredentialSpecData {
    /**
     * AWS credential data type
     */
    awsCredential?: inputs.GetCredentialSpecDataAwsCredential;
    /**
     * Azure credential
     */
    azureCredential?: inputs.GetCredentialSpecDataAzureCredential;
    /**
     * Generic credential data type used to hold a blob of data represented as string
     */
    genericCredential?: string;
    /**
     * Key Value credential
     */
    keyValue?: inputs.GetCredentialSpecDataKeyValue;
}

export interface GetCredentialSpecDataArgs {
    /**
     * AWS credential data type
     */
    awsCredential?: pulumi.Input<inputs.GetCredentialSpecDataAwsCredentialArgs>;
    /**
     * Azure credential
     */
    azureCredential?: pulumi.Input<inputs.GetCredentialSpecDataAzureCredentialArgs>;
    /**
     * Generic credential data type used to hold a blob of data represented as string
     */
    genericCredential?: pulumi.Input<string>;
    /**
     * Key Value credential
     */
    keyValue?: pulumi.Input<inputs.GetCredentialSpecDataKeyValueArgs>;
}

export interface GetCredentialSpecDataAwsCredential {
    /**
     * Account ID of the AWS credential
     */
    accountId?: string;
    /**
     * Generic credential
     */
    genericCredential?: string;
    /**
     * AWS IAM role ARN and external ID
     */
    iamRole?: inputs.GetCredentialSpecDataAwsCredentialIamRole;
}

export interface GetCredentialSpecDataAwsCredentialArgs {
    /**
     * Account ID of the AWS credential
     */
    accountId?: pulumi.Input<string>;
    /**
     * Generic credential
     */
    genericCredential?: pulumi.Input<string>;
    /**
     * AWS IAM role ARN and external ID
     */
    iamRole?: pulumi.Input<inputs.GetCredentialSpecDataAwsCredentialIamRoleArgs>;
}

export interface GetCredentialSpecDataAwsCredentialIamRole {
    /**
     * AWS IAM role ARN
     */
    arn?: string;
    /**
     * An external ID used to assume an AWS IAM role
     */
    extId?: string;
}

export interface GetCredentialSpecDataAwsCredentialIamRoleArgs {
    /**
     * AWS IAM role ARN
     */
    arn?: pulumi.Input<string>;
    /**
     * An external ID used to assume an AWS IAM role
     */
    extId?: pulumi.Input<string>;
}

export interface GetCredentialSpecDataAzureCredential {
    /**
     * Azure service principal
     */
    servicePrincipal?: inputs.GetCredentialSpecDataAzureCredentialServicePrincipal;
    /**
     * Azure service principal
     */
    servicePrincipalWithCertificate?: inputs.GetCredentialSpecDataAzureCredentialServicePrincipalWithCertificate;
}

export interface GetCredentialSpecDataAzureCredentialArgs {
    /**
     * Azure service principal
     */
    servicePrincipal?: pulumi.Input<inputs.GetCredentialSpecDataAzureCredentialServicePrincipalArgs>;
    /**
     * Azure service principal
     */
    servicePrincipalWithCertificate?: pulumi.Input<inputs.GetCredentialSpecDataAzureCredentialServicePrincipalWithCertificateArgs>;
}

export interface GetCredentialSpecDataAzureCredentialServicePrincipal {
    /**
     * Azure Cloud name
     */
    azureCloudName?: string;
    /**
     * Client ID of the Service Principal
     */
    clientId: string;
    /**
     * Client Secret of the Service Principal
     */
    clientSecret?: string;
    /**
     * Resource Group name
     */
    resourceGroup: string;
    /**
     * Subscription ID of the Azure credential
     */
    subscriptionId: string;
    /**
     * Tenant ID of the Azure credential
     */
    tenantId: string;
}

export interface GetCredentialSpecDataAzureCredentialServicePrincipalArgs {
    /**
     * Azure Cloud name
     */
    azureCloudName?: pulumi.Input<string>;
    /**
     * Client ID of the Service Principal
     */
    clientId: pulumi.Input<string>;
    /**
     * Client Secret of the Service Principal
     */
    clientSecret?: pulumi.Input<string>;
    /**
     * Resource Group name
     */
    resourceGroup: pulumi.Input<string>;
    /**
     * Subscription ID of the Azure credential
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * Tenant ID of the Azure credential
     */
    tenantId: pulumi.Input<string>;
}

export interface GetCredentialSpecDataAzureCredentialServicePrincipalWithCertificate {
    /**
     * Azure Cloud name
     */
    azureCloudName?: string;
    /**
     * Client certificate of the Service Principal
     */
    clientCertificate: string;
    /**
     * Client ID of the Service Principal
     */
    clientId: string;
    /**
     * IDs of the Azure Subscriptions that the Service Principal can manage
     */
    managedSubscriptions?: string[];
    /**
     * Subscription ID of the Azure credential
     */
    subscriptionId: string;
    /**
     * Tenant ID of the Azure credential
     */
    tenantId: string;
}

export interface GetCredentialSpecDataAzureCredentialServicePrincipalWithCertificateArgs {
    /**
     * Azure Cloud name
     */
    azureCloudName?: pulumi.Input<string>;
    /**
     * Client certificate of the Service Principal
     */
    clientCertificate: pulumi.Input<string>;
    /**
     * Client ID of the Service Principal
     */
    clientId: pulumi.Input<string>;
    /**
     * IDs of the Azure Subscriptions that the Service Principal can manage
     */
    managedSubscriptions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subscription ID of the Azure credential
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * Tenant ID of the Azure credential
     */
    tenantId: pulumi.Input<string>;
}

export interface GetCredentialSpecDataKeyValue {
    /**
     * Data secret data in the format of key-value pair
     */
    data?: {[key: string]: string};
    /**
     * Type of Secret data, usually mapped to k8s secret type. Supported types: [SECRET_TYPE_UNSPECIFIED,OPAQUE_SECRET_TYPE,DOCKERCONFIGJSON_SECRET_TYPE]
     */
    type?: string;
}

export interface GetCredentialSpecDataKeyValueArgs {
    /**
     * Data secret data in the format of key-value pair
     */
    data?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Type of Secret data, usually mapped to k8s secret type. Supported types: [SECRET_TYPE_UNSPECIFIED,OPAQUE_SECRET_TYPE,DOCKERCONFIGJSON_SECRET_TYPE]
     */
    type?: pulumi.Input<string>;
}

export interface GetEksclusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetEksclusterMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetEksclusterSpec {
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: string;
    /**
     * EKS config for the cluster control plane
     */
    config: inputs.GetEksclusterSpecConfig;
    /**
     * Nodepool definitions for the cluster
     */
    nodepools: inputs.GetEksclusterSpecNodepool[];
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: string;
}

export interface GetEksclusterSpecArgs {
    /**
     * Name of the cluster group to which this cluster belongs
     */
    clusterGroup?: pulumi.Input<string>;
    /**
     * EKS config for the cluster control plane
     */
    config: pulumi.Input<inputs.GetEksclusterSpecConfigArgs>;
    /**
     * Nodepool definitions for the cluster
     */
    nodepools: pulumi.Input<pulumi.Input<inputs.GetEksclusterSpecNodepoolArgs>[]>;
    /**
     * Optional proxy name is the name of the Proxy Config to be used for the cluster
     */
    proxy?: pulumi.Input<string>;
}

export interface GetEksclusterSpecConfig {
    /**
     * Addons config contains the configuration for all the addons of the cluster, which support customization of addon configuration
     */
    addonsConfig?: inputs.GetEksclusterSpecConfigAddonsConfig;
    /**
     * Kubernetes Network Config
     */
    kubernetesNetworkConfig?: inputs.GetEksclusterSpecConfigKubernetesNetworkConfig;
    /**
     * Kubernetes version of the cluster
     */
    kubernetesVersion: string;
    /**
     * EKS logging configuration
     */
    logging?: inputs.GetEksclusterSpecConfigLogging;
    /**
     * ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations
     */
    roleArn: string;
    /**
     * The metadata to apply to the cluster to assist with categorization and organization
     */
    tags?: {[key: string]: string};
    /**
     * VPC config
     */
    vpc: inputs.GetEksclusterSpecConfigVpc;
}

export interface GetEksclusterSpecConfigArgs {
    /**
     * Addons config contains the configuration for all the addons of the cluster, which support customization of addon configuration
     */
    addonsConfig?: pulumi.Input<inputs.GetEksclusterSpecConfigAddonsConfigArgs>;
    /**
     * Kubernetes Network Config
     */
    kubernetesNetworkConfig?: pulumi.Input<inputs.GetEksclusterSpecConfigKubernetesNetworkConfigArgs>;
    /**
     * Kubernetes version of the cluster
     */
    kubernetesVersion: pulumi.Input<string>;
    /**
     * EKS logging configuration
     */
    logging?: pulumi.Input<inputs.GetEksclusterSpecConfigLoggingArgs>;
    /**
     * ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations
     */
    roleArn: pulumi.Input<string>;
    /**
     * The metadata to apply to the cluster to assist with categorization and organization
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * VPC config
     */
    vpc: pulumi.Input<inputs.GetEksclusterSpecConfigVpcArgs>;
}

export interface GetEksclusterSpecConfigAddonsConfig {
    /**
     * VPC CNI addon config contains the configuration for the VPC CNI addon of the cluster
     */
    vpcCniConfig?: inputs.GetEksclusterSpecConfigAddonsConfigVpcCniConfig;
}

export interface GetEksclusterSpecConfigAddonsConfigArgs {
    /**
     * VPC CNI addon config contains the configuration for the VPC CNI addon of the cluster
     */
    vpcCniConfig?: pulumi.Input<inputs.GetEksclusterSpecConfigAddonsConfigVpcCniConfigArgs>;
}

export interface GetEksclusterSpecConfigAddonsConfigVpcCniConfig {
    /**
     * ENI config for the VPC CNI addon
     */
    eniConfigs?: inputs.GetEksclusterSpecConfigAddonsConfigVpcCniConfigEniConfig[];
}

export interface GetEksclusterSpecConfigAddonsConfigVpcCniConfigArgs {
    /**
     * ENI config for the VPC CNI addon
     */
    eniConfigs?: pulumi.Input<pulumi.Input<inputs.GetEksclusterSpecConfigAddonsConfigVpcCniConfigEniConfigArgs>[]>;
}

export interface GetEksclusterSpecConfigAddonsConfigVpcCniConfigEniConfig {
    /**
     * Subnet id for the ENI
     */
    id: string;
    /**
     * Security groups for the ENI
     */
    securityGroups?: string[];
}

export interface GetEksclusterSpecConfigAddonsConfigVpcCniConfigEniConfigArgs {
    /**
     * Subnet id for the ENI
     */
    id: pulumi.Input<string>;
    /**
     * Security groups for the ENI
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetEksclusterSpecConfigKubernetesNetworkConfig {
    /**
     * Service CIDR for Kubernetes services
     */
    serviceCidr: string;
}

export interface GetEksclusterSpecConfigKubernetesNetworkConfigArgs {
    /**
     * Service CIDR for Kubernetes services
     */
    serviceCidr: pulumi.Input<string>;
}

export interface GetEksclusterSpecConfigLogging {
    /**
     * Enable API server logs
     */
    apiServer?: boolean;
    /**
     * Enable audit logs
     */
    audit?: boolean;
    /**
     * Enable authenticator logs
     */
    authenticator?: boolean;
    /**
     * Enable controller manager logs
     */
    controllerManager?: boolean;
    /**
     * Enable scheduler logs
     */
    scheduler?: boolean;
}

export interface GetEksclusterSpecConfigLoggingArgs {
    /**
     * Enable API server logs
     */
    apiServer?: pulumi.Input<boolean>;
    /**
     * Enable audit logs
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Enable authenticator logs
     */
    authenticator?: pulumi.Input<boolean>;
    /**
     * Enable controller manager logs
     */
    controllerManager?: pulumi.Input<boolean>;
    /**
     * Enable scheduler logs
     */
    scheduler?: pulumi.Input<boolean>;
}

export interface GetEksclusterSpecConfigVpc {
    /**
     * Enable Kubernetes API requests within your cluster's VPC (such as node to control plane communication) use the private VPC endpoint (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    enablePrivateAccess?: boolean;
    /**
     * Enable cluster API server access from the internet. You can, optionally, limit the CIDR blocks that can access the public endpoint using public_access_cidrs (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    enablePublicAccess?: boolean;
    /**
     * Specify which addresses from the internet can communicate to the public endpoint, if public endpoint is enabled (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    publicAccessCidrs?: string[];
    /**
     * Security groups for the cluster VMs
     */
    securityGroups?: string[];
    /**
     * Subnet ids used by the cluster (see [Amazon EKS VPC and subnet requirements and considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html#network-requirements-subnets))
     */
    subnetIds: string[];
}

export interface GetEksclusterSpecConfigVpcArgs {
    /**
     * Enable Kubernetes API requests within your cluster's VPC (such as node to control plane communication) use the private VPC endpoint (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    enablePrivateAccess?: pulumi.Input<boolean>;
    /**
     * Enable cluster API server access from the internet. You can, optionally, limit the CIDR blocks that can access the public endpoint using public_access_cidrs (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    enablePublicAccess?: pulumi.Input<boolean>;
    /**
     * Specify which addresses from the internet can communicate to the public endpoint, if public endpoint is enabled (see [Amazon EKS cluster endpoint access control](https://docs.aws.amazon.com/eks/latest/userguide/cluster-endpoint.html))
     */
    publicAccessCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Security groups for the cluster VMs
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subnet ids used by the cluster (see [Amazon EKS VPC and subnet requirements and considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html#network-requirements-subnets))
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetEksclusterSpecNodepool {
    /**
     * Info for the nodepool
     */
    info: inputs.GetEksclusterSpecNodepoolInfo;
    /**
     * Spec for the cluster
     */
    spec: inputs.GetEksclusterSpecNodepoolSpec;
}

export interface GetEksclusterSpecNodepoolArgs {
    /**
     * Info for the nodepool
     */
    info: pulumi.Input<inputs.GetEksclusterSpecNodepoolInfoArgs>;
    /**
     * Spec for the cluster
     */
    spec: pulumi.Input<inputs.GetEksclusterSpecNodepoolSpecArgs>;
}

export interface GetEksclusterSpecNodepoolInfo {
    /**
     * Description for the nodepool
     */
    description?: string;
    /**
     * Name of the nodepool, immutable
     */
    name: string;
}

export interface GetEksclusterSpecNodepoolInfoArgs {
    /**
     * Description for the nodepool
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the nodepool, immutable
     */
    name: pulumi.Input<string>;
}

export interface GetEksclusterSpecNodepoolSpec {
    /**
     * AMI info for the nodepool if AMI type is specified as CUSTOM
     */
    amiInfo?: inputs.GetEksclusterSpecNodepoolSpecAmiInfo;
    /**
     * AMI type, immutable
     */
    amiType?: string;
    /**
     * Capacity Type
     */
    capacityType?: string;
    /**
     * Nodepool instance types, immutable
     */
    instanceTypes?: string[];
    /**
     * Launch template for the nodepool
     */
    launchTemplate?: inputs.GetEksclusterSpecNodepoolSpecLaunchTemplate;
    /**
     * Kubernetes node labels
     */
    nodeLabels?: {[key: string]: string};
    /**
     * AMI release version
     */
    releaseVersion?: string;
    /**
     * Remote access to worker nodes, immutable
     */
    remoteAccess?: inputs.GetEksclusterSpecNodepoolSpecRemoteAccess;
    /**
     * ARN of the IAM role that provides permissions for the Kubernetes nodepool to make calls to AWS API operations, immutable
     */
    roleArn: string;
    /**
     * Root disk size in GiB, immutable
     */
    rootDiskSize?: number;
    /**
     * Nodepool scaling config
     */
    scalingConfig?: inputs.GetEksclusterSpecNodepoolSpecScalingConfig;
    /**
     * Subnets required for the nodepool
     */
    subnetIds: string[];
    /**
     * EKS specific tags
     */
    tags?: {[key: string]: string};
    /**
     * If specified, the node's taints
     */
    taints?: inputs.GetEksclusterSpecNodepoolSpecTaint[];
    /**
     * Update config for the nodepool
     */
    updateConfig?: inputs.GetEksclusterSpecNodepoolSpecUpdateConfig;
}

export interface GetEksclusterSpecNodepoolSpecArgs {
    /**
     * AMI info for the nodepool if AMI type is specified as CUSTOM
     */
    amiInfo?: pulumi.Input<inputs.GetEksclusterSpecNodepoolSpecAmiInfoArgs>;
    /**
     * AMI type, immutable
     */
    amiType?: pulumi.Input<string>;
    /**
     * Capacity Type
     */
    capacityType?: pulumi.Input<string>;
    /**
     * Nodepool instance types, immutable
     */
    instanceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Launch template for the nodepool
     */
    launchTemplate?: pulumi.Input<inputs.GetEksclusterSpecNodepoolSpecLaunchTemplateArgs>;
    /**
     * Kubernetes node labels
     */
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * AMI release version
     */
    releaseVersion?: pulumi.Input<string>;
    /**
     * Remote access to worker nodes, immutable
     */
    remoteAccess?: pulumi.Input<inputs.GetEksclusterSpecNodepoolSpecRemoteAccessArgs>;
    /**
     * ARN of the IAM role that provides permissions for the Kubernetes nodepool to make calls to AWS API operations, immutable
     */
    roleArn: pulumi.Input<string>;
    /**
     * Root disk size in GiB, immutable
     */
    rootDiskSize?: pulumi.Input<number>;
    /**
     * Nodepool scaling config
     */
    scalingConfig?: pulumi.Input<inputs.GetEksclusterSpecNodepoolSpecScalingConfigArgs>;
    /**
     * Subnets required for the nodepool
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * EKS specific tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * If specified, the node's taints
     */
    taints?: pulumi.Input<pulumi.Input<inputs.GetEksclusterSpecNodepoolSpecTaintArgs>[]>;
    /**
     * Update config for the nodepool
     */
    updateConfig?: pulumi.Input<inputs.GetEksclusterSpecNodepoolSpecUpdateConfigArgs>;
}

export interface GetEksclusterSpecNodepoolSpecAmiInfo {
    /**
     * ID of the AMI to be used
     */
    amiId?: string;
    /**
     * Override bootstrap command for the custom AMI
     */
    overrideBootstrapCmd?: string;
}

export interface GetEksclusterSpecNodepoolSpecAmiInfoArgs {
    /**
     * ID of the AMI to be used
     */
    amiId?: pulumi.Input<string>;
    /**
     * Override bootstrap command for the custom AMI
     */
    overrideBootstrapCmd?: pulumi.Input<string>;
}

export interface GetEksclusterSpecNodepoolSpecLaunchTemplate {
    /**
     * The ID of the launch template
     */
    id?: string;
    /**
     * The name of the launch template
     */
    name?: string;
    /**
     * The version of the launch template to use
     */
    version?: string;
}

export interface GetEksclusterSpecNodepoolSpecLaunchTemplateArgs {
    /**
     * The ID of the launch template
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the launch template
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the launch template to use
     */
    version?: pulumi.Input<string>;
}

export interface GetEksclusterSpecNodepoolSpecRemoteAccess {
    /**
     * Security groups for the VMs
     */
    securityGroups?: string[];
    /**
     * SSH key allows you to connect to your instances and gather diagnostic information if there are issues.
     */
    sshKey?: string;
}

export interface GetEksclusterSpecNodepoolSpecRemoteAccessArgs {
    /**
     * Security groups for the VMs
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SSH key allows you to connect to your instances and gather diagnostic information if there are issues.
     */
    sshKey?: pulumi.Input<string>;
}

export interface GetEksclusterSpecNodepoolSpecScalingConfig {
    /**
     * Desired size of nodepool
     */
    desiredSize?: number;
    /**
     * Maximum size of nodepool
     */
    maxSize?: number;
    /**
     * Minimum size of nodepool
     */
    minSize?: number;
}

export interface GetEksclusterSpecNodepoolSpecScalingConfigArgs {
    /**
     * Desired size of nodepool
     */
    desiredSize?: pulumi.Input<number>;
    /**
     * Maximum size of nodepool
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Minimum size of nodepool
     */
    minSize?: pulumi.Input<number>;
}

export interface GetEksclusterSpecNodepoolSpecTaint {
    /**
     * Current effect state of the node pool
     */
    effect?: string;
    /**
     * The taint key to be applied to a node
     */
    key?: string;
    /**
     * The taint value corresponding to the taint key
     */
    value?: string;
}

export interface GetEksclusterSpecNodepoolSpecTaintArgs {
    /**
     * Current effect state of the node pool
     */
    effect?: pulumi.Input<string>;
    /**
     * The taint key to be applied to a node
     */
    key?: pulumi.Input<string>;
    /**
     * The taint value corresponding to the taint key
     */
    value?: pulumi.Input<string>;
}

export interface GetEksclusterSpecNodepoolSpecUpdateConfig {
    /**
     * Maximum number of nodes unavailable at once during a version update
     */
    maxUnavailableNodes?: string;
    /**
     * Maximum percentage of nodes unavailable during a version update
     */
    maxUnavailablePercentage?: string;
}

export interface GetEksclusterSpecNodepoolSpecUpdateConfigArgs {
    /**
     * Maximum number of nodes unavailable at once during a version update
     */
    maxUnavailableNodes?: pulumi.Input<string>;
    /**
     * Maximum percentage of nodes unavailable during a version update
     */
    maxUnavailablePercentage?: pulumi.Input<string>;
}

export interface GetGitRepositoryMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetGitRepositoryMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetGitRepositoryScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetGitRepositoryScopeCluster;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: inputs.GetGitRepositoryScopeClusterGroup;
}

export interface GetGitRepositoryScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetGitRepositoryScopeClusterArgs>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.GetGitRepositoryScopeClusterGroupArgs>;
}

export interface GetGitRepositoryScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetGitRepositoryScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetGitRepositoryScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: string;
}

export interface GetGitRepositoryScopeClusterGroupArgs {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface GetHelmFeatureMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetHelmFeatureMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetHelmFeatureScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetHelmFeatureScopeCluster;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: inputs.GetHelmFeatureScopeClusterGroup;
}

export interface GetHelmFeatureScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetHelmFeatureScopeClusterArgs>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.GetHelmFeatureScopeClusterGroupArgs>;
}

export interface GetHelmFeatureScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetHelmFeatureScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetHelmFeatureScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: string;
}

export interface GetHelmFeatureScopeClusterGroupArgs {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface GetHelmRepositoryMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetHelmRepositoryMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetHelmRepositoryScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetHelmRepositoryScopeCluster;
}

export interface GetHelmRepositoryScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetHelmRepositoryScopeClusterArgs>;
}

export interface GetHelmRepositoryScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetHelmRepositoryScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetIntegrationMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetIntegrationMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetIntegrationSpec {
    /**
     * Integration specific configurations in JSON format
     */
    configurations?: string;
}

export interface GetIntegrationSpecArgs {
    /**
     * Integration specific configurations in JSON format
     */
    configurations?: pulumi.Input<string>;
}

export interface GetKubernetesSecretMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetKubernetesSecretMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetKubernetesSecretScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetKubernetesSecretScopeCluster;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: inputs.GetKubernetesSecretScopeClusterGroup;
}

export interface GetKubernetesSecretScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetKubernetesSecretScopeClusterArgs>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.GetKubernetesSecretScopeClusterGroupArgs>;
}

export interface GetKubernetesSecretScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetKubernetesSecretScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetKubernetesSecretScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: string;
}

export interface GetKubernetesSecretScopeClusterGroupArgs {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface GetManagementClusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetManagementClusterMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetManagementClusterRegisterManagementCluster {
    /**
     * Register management cluster description for only TKGm
     */
    tkgmDescription?: string;
    /**
     * Register management cluster KUBECONFIG path for only TKGm
     */
    tkgmKubeconfigFile?: string;
    /**
     * Register management cluster KUBECONFIG for only TKGm
     */
    tkgmKubeconfigRaw?: string;
}

export interface GetManagementClusterRegisterManagementClusterArgs {
    /**
     * Register management cluster description for only TKGm
     */
    tkgmDescription?: pulumi.Input<string>;
    /**
     * Register management cluster KUBECONFIG path for only TKGm
     */
    tkgmKubeconfigFile?: pulumi.Input<string>;
    /**
     * Register management cluster KUBECONFIG for only TKGm
     */
    tkgmKubeconfigRaw?: pulumi.Input<string>;
}

export interface GetManagementClusterSpec {
    /**
     * Cluster group name to be used by default for workload clusters
     */
    clusterGroup: string;
    /**
     * Image registry which is only allowed for TKGm
     */
    imageRegistry?: string;
    /**
     * Kubernetes provider type
     */
    kubernetesProviderType: string;
    /**
     * Managed workload cluster image registry
     */
    managedWorkloadClusterImageRegistry?: string;
    /**
     * Managed workload cluster proxy name
     */
    managedWorkloadClusterProxyName?: string;
    /**
     * Management cluster proxy name
     */
    managementProxyName?: string;
}

export interface GetManagementClusterSpecArgs {
    /**
     * Cluster group name to be used by default for workload clusters
     */
    clusterGroup: pulumi.Input<string>;
    /**
     * Image registry which is only allowed for TKGm
     */
    imageRegistry?: pulumi.Input<string>;
    /**
     * Kubernetes provider type
     */
    kubernetesProviderType: pulumi.Input<string>;
    /**
     * Managed workload cluster image registry
     */
    managedWorkloadClusterImageRegistry?: pulumi.Input<string>;
    /**
     * Managed workload cluster proxy name
     */
    managedWorkloadClusterProxyName?: pulumi.Input<string>;
    /**
     * Management cluster proxy name
     */
    managementProxyName?: pulumi.Input<string>;
}

export interface GetNamespaceMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetNamespaceMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetNamespaceSpec {
    attach?: boolean;
    workspaceName?: string;
}

export interface GetNamespaceSpecArgs {
    attach?: pulumi.Input<boolean>;
    workspaceName?: pulumi.Input<string>;
}

export interface GetPackageInstallMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetPackageInstallMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetPackageInstallScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetPackageInstallScopeCluster;
}

export interface GetPackageInstallScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetPackageInstallScopeClusterArgs>;
}

export interface GetPackageInstallScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetPackageInstallScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetPackageMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetPackageMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetPackageRepositoryMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetPackageRepositoryMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetPackageRepositoryScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetPackageRepositoryScopeCluster;
}

export interface GetPackageRepositoryScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetPackageRepositoryScopeClusterArgs>;
}

export interface GetPackageRepositoryScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetPackageRepositoryScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetPackageScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetPackageScopeCluster;
}

export interface GetPackageScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetPackageScopeClusterArgs>;
}

export interface GetPackageScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetPackageScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetPackagesScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetPackagesScopeCluster;
}

export interface GetPackagesScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetPackagesScopeClusterArgs>;
}

export interface GetPackagesScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetPackagesScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetProvisionerProvisioner {
    /**
     * Name of the management cluster
     */
    managementCluster: string;
    /**
     * Metadata for the resource
     */
    meta?: inputs.GetProvisionerProvisionerMeta;
    /**
     * Name of the provisioner
     */
    name?: string;
    /**
     * ID of the organization
     */
    orgId?: string;
}

export interface GetProvisionerProvisionerArgs {
    /**
     * Name of the management cluster
     */
    managementCluster: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.GetProvisionerProvisionerMetaArgs>;
    /**
     * Name of the provisioner
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the organization
     */
    orgId?: pulumi.Input<string>;
}

export interface GetProvisionerProvisionerMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetProvisionerProvisionerMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetRepositoryCredentialMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetRepositoryCredentialMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GetRepositoryCredentialScope {
    /**
     * The schema for cluster full name
     */
    cluster?: inputs.GetRepositoryCredentialScopeCluster;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: inputs.GetRepositoryCredentialScopeClusterGroup;
}

export interface GetRepositoryCredentialScopeArgs {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GetRepositoryCredentialScopeClusterArgs>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.GetRepositoryCredentialScopeClusterGroupArgs>;
}

export interface GetRepositoryCredentialScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: string;
    /**
     * Name of this cluster
     */
    name: string;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: string;
}

export interface GetRepositoryCredentialScopeClusterArgs {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetRepositoryCredentialScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: string;
}

export interface GetRepositoryCredentialScopeClusterGroupArgs {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface GetTargetLocationScope {
    cluster?: inputs.GetTargetLocationScopeCluster;
    provider?: inputs.GetTargetLocationScopeProvider;
}

export interface GetTargetLocationScopeArgs {
    cluster?: pulumi.Input<inputs.GetTargetLocationScopeClusterArgs>;
    provider?: pulumi.Input<inputs.GetTargetLocationScopeProviderArgs>;
}

export interface GetTargetLocationScopeCluster {
    /**
     * Cluster name
     */
    clusterName: string;
    /**
     * Management cluster name
     */
    managementClusterName?: string;
    /**
     * The name of the target location
     */
    name?: string;
    /**
     * Cluster provisioner name
     */
    provisionerName?: string;
}

export interface GetTargetLocationScopeClusterArgs {
    /**
     * Cluster name
     */
    clusterName: pulumi.Input<string>;
    /**
     * Management cluster name
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * The name of the target location
     */
    name?: pulumi.Input<string>;
    /**
     * Cluster provisioner name
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GetTargetLocationScopeProvider {
    /**
     * A cluster or cluster group assigned for the target location.
     */
    assignedGroupName?: string;
    /**
     * The name of the credentials used for the target location.
     */
    credentialName?: string;
    /**
     * The name of the target location.
     */
    name?: string;
}

export interface GetTargetLocationScopeProviderArgs {
    /**
     * A cluster or cluster group assigned for the target location.
     */
    assignedGroupName?: pulumi.Input<string>;
    /**
     * The name of the credentials used for the target location.
     */
    credentialName?: pulumi.Input<string>;
    /**
     * The name of the target location.
     */
    name?: pulumi.Input<string>;
}

export interface GetWorkspaceMeta {
    /**
     * Annotations for the resource
     */
    annotations?: {[key: string]: string};
    /**
     * Description of the resource
     */
    description?: string;
    /**
     * Labels for the resource
     */
    labels?: {[key: string]: string};
    /**
     * Resource version of the resource
     */
    resourceVersion?: string;
    /**
     * UID of the resource
     */
    uid?: string;
}

export interface GetWorkspaceMetaArgs {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GitRepositoryMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface GitRepositoryScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.GitRepositoryScopeCluster>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.GitRepositoryScopeClusterGroup>;
}

export interface GitRepositoryScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface GitRepositoryScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface GitRepositorySpec {
    /**
     * GitImplementation specifies which client library implementation to use. go-git is the default git implementation.
     */
    gitImplementation?: pulumi.Input<string>;
    /**
     * Interval at which to check gitrepository for updates. This is the interval at which Tanzu Mission Control will attempt to reconcile changes in the repository to the cluster. A sync interval of 0 would result in no future syncs. If no value is entered, a default interval of 5 minutes will be applied as `5m`.
     */
    interval?: pulumi.Input<string>;
    /**
     * Reference specifies git reference to resolve.
     */
    ref?: pulumi.Input<inputs.GitRepositorySpecRef>;
    /**
     * Reference to the secret. Repository credential.
     */
    secretRef?: pulumi.Input<string>;
    /**
     * URL of the git repository. Repository URL should begin with http, https, or ssh
     */
    url: pulumi.Input<string>;
}

export interface GitRepositorySpecRef {
    /**
     * Branch from git to checkout. When branch is given, then that branch from the git repository will be checked out. If the given branch doesn’t exist in the git repository, then adding the git repository will fail. If no branch is given, the `master` branch will be used.
     */
    branch?: pulumi.Input<string>;
    /**
     * Commit SHA to checkout. Takes precedence over all other reference fields. When git_implementation is `GO_GIT`, this can be combined with branch to shallow clone branch in which the commit is expected to exist.
     */
    commit?: pulumi.Input<string>;
    /**
     * SemVer expression to checkout from git tags. Takes precedence over tag. When semver is given, then the latest tag matching that semver will be checked out from the git repository. If no tag in the git repository matches semver, then adding the git repository will fail. If semver is given, tag and branch will be ignored if they are populated.
     */
    semver?: pulumi.Input<string>;
    /**
     * Tag from git to checkout. Takes precedence over branch. When a tag is given, that tag from the git repository will be checked out. If the given tag doesn’t exist in the git repository, then adding the git repository will fail. If both tag and branch are given, tag overrides branch and the branch value will be ignored.
     */
    tag?: pulumi.Input<string>;
}

export interface HelmFeatureMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface HelmFeatureScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.HelmFeatureScopeCluster>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.HelmFeatureScopeClusterGroup>;
}

export interface HelmFeatureScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface HelmFeatureScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface HelmReleaseMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface HelmReleaseScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.HelmReleaseScopeCluster>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.HelmReleaseScopeClusterGroup>;
}

export interface HelmReleaseScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface HelmReleaseScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface HelmReleaseSpec {
    /**
     * Reference to the chart which will be installed.
     */
    chartRef: pulumi.Input<inputs.HelmReleaseSpecChartRef>;
    /**
     * File to read inline values from (in yaml format).User need to specify the file path for inline config
     */
    inlineConfig?: pulumi.Input<string>;
    /**
     * Interval at which to reconcile the Helm release. This is the interval at which Tanzu Mission Control will attempt to reconcile changes in the helm release to the cluster. A sync interval of 0 would result in no future syncs. If no value is entered, a default interval of 5 minutes will be applied as `5m`.
     */
    interval?: pulumi.Input<string>;
    /**
     * TargetNamespace sets or overrides the namespaces of resources yaml while applying on cluster.
     */
    targetNamespace?: pulumi.Input<string>;
}

export interface HelmReleaseSpecChartRef {
    /**
     * Git repository type spec.
     */
    gitRepository?: pulumi.Input<inputs.HelmReleaseSpecChartRefGitRepository>;
    /**
     * Helm repository type Spec.
     */
    helmRepository?: pulumi.Input<inputs.HelmReleaseSpecChartRefHelmRepository>;
}

export interface HelmReleaseSpecChartRefGitRepository {
    /**
     * Path of the chart in the git repository.
     */
    chartPath: pulumi.Input<string>;
    /**
     * Name of the Git repository.
     */
    repositoryName: pulumi.Input<string>;
    /**
     * Namespace Name for the Git repository.
     */
    repositoryNamespace: pulumi.Input<string>;
}

export interface HelmReleaseSpecChartRefHelmRepository {
    /**
     * Name of the chart in the helm repository.
     */
    chartName: pulumi.Input<string>;
    /**
     * Name of the Helm repository.
     */
    repositoryName: pulumi.Input<string>;
    /**
     * Namespace Name for the Helm repository.
     */
    repositoryNamespace: pulumi.Input<string>;
    /**
     * Chart version, applicable for helm repository type.
     */
    version: pulumi.Input<string>;
}

export interface HelmReleaseStatus {
    generatedResources: pulumi.Input<pulumi.Input<inputs.HelmReleaseStatusGeneratedResource>[]>;
    phase: pulumi.Input<string>;
}

export interface HelmReleaseStatusGeneratedResource {
    clusterRoleName: pulumi.Input<string>;
    roleBindingName: pulumi.Input<string>;
    serviceAccountName: pulumi.Input<string>;
}

export interface IamPolicyMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface IamPolicyRoleBinding {
    /**
     * Role for this rolebinding: max length for a role is 126 characters.
     */
    role: pulumi.Input<string>;
    /**
     * Subject for this rolebinding.
     */
    subjects: pulumi.Input<pulumi.Input<inputs.IamPolicyRoleBindingSubject>[]>;
}

export interface IamPolicyRoleBindingSubject {
    /**
     * Subject type, having one of the subject types: USER or GROUP or K8S_SERVICEACCOUNT
     */
    kind: pulumi.Input<string>;
    /**
     * Subject name: allow max characters for email - 320 characters.
     */
    name: pulumi.Input<string>;
}

export interface IamPolicyScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.IamPolicyScopeCluster>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.IamPolicyScopeClusterGroup>;
    /**
     * The schema for namespace iam policy full name
     */
    namespace?: pulumi.Input<inputs.IamPolicyScopeNamespace>;
    /**
     * The schema for organization iam policy full name
     */
    organization?: pulumi.Input<inputs.IamPolicyScopeOrganization>;
    /**
     * The schema for workspace iam policy full name
     */
    workspace?: pulumi.Input<inputs.IamPolicyScopeWorkspace>;
}

export interface IamPolicyScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface IamPolicyScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface IamPolicyScopeNamespace {
    /**
     * Name of Cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * Name of ManagementCluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of the Namespace
     */
    name: pulumi.Input<string>;
    /**
     * Name of Provisioner
     */
    provisionerName?: pulumi.Input<string>;
}

export interface IamPolicyScopeOrganization {
    /**
     * ID of the Organization
     */
    orgId: pulumi.Input<string>;
}

export interface IamPolicyScopeWorkspace {
    /**
     * Name of the workspace
     */
    name: pulumi.Input<string>;
}

export interface ImagePolicyMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface ImagePolicyScope {
    /**
     * The schema for cluster policy full name
     */
    cluster?: pulumi.Input<inputs.ImagePolicyScopeCluster>;
    /**
     * The schema for cluster group policy full name
     */
    clusterGroup?: pulumi.Input<inputs.ImagePolicyScopeClusterGroup>;
    /**
     * The schema for organization policy full name
     */
    organization?: pulumi.Input<inputs.ImagePolicyScopeOrganization>;
    /**
     * The schema for workspace policy full name
     */
    workspace?: pulumi.Input<inputs.ImagePolicyScopeWorkspace>;
}

export interface ImagePolicyScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface ImagePolicyScopeClusterGroup {
    /**
     * Name of this cluster group
     */
    clusterGroup: pulumi.Input<string>;
}

export interface ImagePolicyScopeOrganization {
    /**
     * ID of this organization
     */
    organization: pulumi.Input<string>;
}

export interface ImagePolicyScopeWorkspace {
    /**
     * Name of this workspace
     */
    workspace: pulumi.Input<string>;
}

export interface ImagePolicySpec {
    /**
     * Input for the image policy, having one of the valid recipes: allowed-name-tag, custom, block-latest-tag or require-digest.
     */
    input: pulumi.Input<inputs.ImagePolicySpecInput>;
    /**
     * Label based Namespace Selector for the policy
     */
    namespaceSelector?: pulumi.Input<inputs.ImagePolicySpecNamespaceSelector>;
}

export interface ImagePolicySpecInput {
    /**
     * The input schema for image policy allowed-name-tag recipe version v1
     */
    allowedNameTag?: pulumi.Input<inputs.ImagePolicySpecInputAllowedNameTag>;
    /**
     * The input schema for image policy block-latest-tag recipe version v1
     */
    blockLatestTag?: pulumi.Input<inputs.ImagePolicySpecInputBlockLatestTag>;
    /**
     * The input schema for image policy custom recipe version v1
     */
    custom?: pulumi.Input<inputs.ImagePolicySpecInputCustom>;
    /**
     * The input schema for image policy require-digest recipe version v1
     */
    requireDigest?: pulumi.Input<inputs.ImagePolicySpecInputRequireDigest>;
}

export interface ImagePolicySpecInputAllowedNameTag {
    /**
     * Audit (dry-run). Violations will be logged but not denied.
     */
    audit?: pulumi.Input<boolean>;
    /**
     * It specifies a list of rules that defines allowed image patterns.
     */
    rules: pulumi.Input<pulumi.Input<inputs.ImagePolicySpecInputAllowedNameTagRule>[]>;
}

export interface ImagePolicySpecInputAllowedNameTagRule {
    /**
     * Allowed image names, wildcards are supported(for example: fooservice/*). Empty field is equivalent to *.
     */
    imagename?: pulumi.Input<string>;
    /**
     * Allowed image tag, wildcards are supported (for example: v1.*). No validation is performed on tag if the field is empty.
     */
    tag?: pulumi.Input<inputs.ImagePolicySpecInputAllowedNameTagRuleTag>;
}

export interface ImagePolicySpecInputAllowedNameTagRuleTag {
    /**
     * The negate flag used to exclude certain tag patterns.
     */
    negate?: pulumi.Input<boolean>;
    /**
     * The value (support wildcard) is used to validate against the tag of the image.
     */
    value?: pulumi.Input<string>;
}

export interface ImagePolicySpecInputBlockLatestTag {
    /**
     * Audit (dry-run). Violations will be logged but not denied.
     */
    audit?: pulumi.Input<boolean>;
}

export interface ImagePolicySpecInputCustom {
    /**
     * Audit (dry-run). Violations will be logged but not denied.
     */
    audit?: pulumi.Input<boolean>;
    /**
     * It specifies a list of rules that defines allowed image patterns.
     */
    rules: pulumi.Input<pulumi.Input<inputs.ImagePolicySpecInputCustomRule>[]>;
}

export interface ImagePolicySpecInputCustomRule {
    /**
     * Allowed image hostnames, wildcards are supported(for example: *.mycompany.com). Empty field is equivalent to *.
     */
    hostname?: pulumi.Input<string>;
    /**
     * Allowed image names, wildcards are supported(for example: fooservice/*). Empty field is equivalent to *.
     */
    imagename?: pulumi.Input<string>;
    /**
     * Allowed port(if presented) of the image hostname, must associate with valid hostname. Wildcards are supported.
     */
    port?: pulumi.Input<string>;
    /**
     * The flag used to enforce digest to appear in container images.
     */
    requiredigest?: pulumi.Input<boolean>;
    /**
     * Allowed image tag, wildcards are supported (for example: v1.*). No validation is performed on tag if the field is empty.
     */
    tag?: pulumi.Input<inputs.ImagePolicySpecInputCustomRuleTag>;
}

export interface ImagePolicySpecInputCustomRuleTag {
    /**
     * The negate flag used to exclude certain tag patterns.
     */
    negate?: pulumi.Input<boolean>;
    /**
     * The value (support wildcard) is used to validate against the tag of the image.
     */
    value?: pulumi.Input<string>;
}

export interface ImagePolicySpecInputRequireDigest {
    /**
     * Audit (dry-run). Violations will be logged but not denied.
     */
    audit?: pulumi.Input<boolean>;
}

export interface ImagePolicySpecNamespaceSelector {
    /**
     * Match expressions is a list of label selector requirements, the requirements are ANDed
     */
    matchExpressions: pulumi.Input<pulumi.Input<inputs.ImagePolicySpecNamespaceSelectorMatchExpression>[]>;
}

export interface ImagePolicySpecNamespaceSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IntegrationMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface IntegrationSpec {
    /**
     * Integration specific configurations in JSON format
     */
    configurations?: pulumi.Input<string>;
}

export interface KubernetesSecretMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface KubernetesSecretScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.KubernetesSecretScopeCluster>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.KubernetesSecretScopeClusterGroup>;
}

export interface KubernetesSecretScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface KubernetesSecretScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface KubernetesSecretSpec {
    /**
     * SecretType definition - SECRET_TYPE_DOCKERCONFIGJSON, Kubernetes secrets type.
     */
    dockerConfigJsons?: pulumi.Input<pulumi.Input<inputs.KubernetesSecretSpecDockerConfigJson>[]>;
    /**
     * SecretType definition - SECRET_TYPE_OPAQUE, Kubernetes secrets type.
     */
    opaque?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface KubernetesSecretSpecDockerConfigJson {
    /**
     * SecretType definition - Server URL of the registry.
     */
    imageRegistryUrl: pulumi.Input<string>;
    /**
     * SecretType definition - Password of the registry.
     */
    password: pulumi.Input<string>;
    /**
     * SecretType definition - Username of the registry.
     */
    username: pulumi.Input<string>;
}

export interface KustomizationMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface KustomizationScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.KustomizationScopeCluster>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.KustomizationScopeClusterGroup>;
}

export interface KustomizationScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface KustomizationScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface KustomizationSpec {
    /**
     * Interval defines the interval at which to reconcile kustomization.
     */
    interval?: pulumi.Input<string>;
    /**
     * Path within the source from which configurations will be applied. The path must exactly match what is in the repository.
     */
    path: pulumi.Input<string>;
    /**
     * If true, the workloads will be deleted when the kustomization CR is deleted. When prune is enabled, removing the kustomization will trigger a removal of all kubernetes objects previously applied on all clusters of this cluster group by this kustomization.
     */
    prune?: pulumi.Input<boolean>;
    /**
     * Reference to the source from which the configurations will be applied. Please select an existing repository.
     */
    source: pulumi.Input<inputs.KustomizationSpecSource>;
    /**
     * TargetNamespace sets or overrides the namespaces of resources/kustomization yaml while applying on cluster. Namespace specified here must exist on cluster. It won't be created as a result of specifying here. Enter the name of the namespace you want the kustomization to be synced to. Entering a target namespace removes the need to specify a namespace in your kustomization. If the namespace does not exist in the cluster, syncing the kustomization will fail.
     */
    targetNamespace?: pulumi.Input<string>;
}

export interface KustomizationSpecSource {
    /**
     * Name of the repository.
     */
    name: pulumi.Input<string>;
    /**
     * Namespace of the repository.
     */
    namespace: pulumi.Input<string>;
}

export interface ManagementClusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface ManagementClusterRegisterManagementCluster {
    /**
     * Register management cluster description for only TKGm
     */
    tkgmDescription?: pulumi.Input<string>;
    /**
     * Register management cluster KUBECONFIG path for only TKGm
     */
    tkgmKubeconfigFile?: pulumi.Input<string>;
    /**
     * Register management cluster KUBECONFIG for only TKGm
     */
    tkgmKubeconfigRaw?: pulumi.Input<string>;
}

export interface ManagementClusterSpec {
    /**
     * Cluster group name to be used by default for workload clusters
     */
    clusterGroup: pulumi.Input<string>;
    /**
     * Image registry which is only allowed for TKGm
     */
    imageRegistry?: pulumi.Input<string>;
    /**
     * Kubernetes provider type
     */
    kubernetesProviderType: pulumi.Input<string>;
    /**
     * Managed workload cluster image registry
     */
    managedWorkloadClusterImageRegistry?: pulumi.Input<string>;
    /**
     * Managed workload cluster proxy name
     */
    managedWorkloadClusterProxyName?: pulumi.Input<string>;
    /**
     * Management cluster proxy name
     */
    managementProxyName?: pulumi.Input<string>;
}

export interface MutationPolicyMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface MutationPolicyScope {
    /**
     * The schema for cluster policy full name
     */
    cluster?: pulumi.Input<inputs.MutationPolicyScopeCluster>;
    /**
     * The schema for cluster group policy full name
     */
    clusterGroup?: pulumi.Input<inputs.MutationPolicyScopeClusterGroup>;
    /**
     * The schema for organization policy full name
     */
    organization?: pulumi.Input<inputs.MutationPolicyScopeOrganization>;
    /**
     * The schema for workspace policy full name
     */
    workspace?: pulumi.Input<inputs.MutationPolicyScopeWorkspace>;
}

export interface MutationPolicyScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface MutationPolicyScopeClusterGroup {
    /**
     * Name of this cluster group
     */
    clusterGroup: pulumi.Input<string>;
}

export interface MutationPolicyScopeOrganization {
    /**
     * ID of this organization
     */
    organization: pulumi.Input<string>;
}

export interface MutationPolicyScopeWorkspace {
    /**
     * Name of this workspace
     */
    workspace: pulumi.Input<string>;
}

export interface MutationPolicySpec {
    /**
     * Input for the mutation policy.
     */
    input: pulumi.Input<inputs.MutationPolicySpecInput>;
    /**
     * Label based Namespace Selector for the policy
     */
    namespaceSelector?: pulumi.Input<inputs.MutationPolicySpecNamespaceSelector>;
}

export interface MutationPolicySpecInput {
    /**
     * The input schema for custom policy tmc_block_nodeport_service recipe version v1
     */
    annotation?: pulumi.Input<inputs.MutationPolicySpecInputAnnotation>;
    /**
     * The input schema for custom policy tmc_block_nodeport_service recipe version v1
     */
    label?: pulumi.Input<inputs.MutationPolicySpecInputLabel>;
    /**
     * The pod security schema
     */
    podSecurity?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurity>;
}

export interface MutationPolicySpecInputAnnotation {
    annotation?: pulumi.Input<inputs.MutationPolicySpecInputAnnotationAnnotation>;
    /**
     * Scope
     */
    scope?: pulumi.Input<string>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.MutationPolicySpecInputAnnotationTargetKubernetesResource>[]>;
}

export interface MutationPolicySpecInputAnnotationAnnotation {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MutationPolicySpecInputAnnotationTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MutationPolicySpecInputLabel {
    label?: pulumi.Input<inputs.MutationPolicySpecInputLabelLabel>;
    /**
     * Scope
     */
    scope?: pulumi.Input<string>;
    /**
     * A list of kubernetes api resources on which the policy will be enforced, identified using apiGroups and kinds.
     */
    targetKubernetesResources: pulumi.Input<pulumi.Input<inputs.MutationPolicySpecInputLabelTargetKubernetesResource>[]>;
}

export interface MutationPolicySpecInputLabelLabel {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface MutationPolicySpecInputLabelTargetKubernetesResource {
    /**
     * APIGroup is a group containing the resource type.
     */
    apiGroups: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kind is the name of the object schema (resource type).
     */
    kinds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MutationPolicySpecInputPodSecurity {
    allowPrivilegeEscalation?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityAllowPrivilegeEscalation>;
    /**
     * Run as user
     */
    capabilitiesAdd?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityCapabilitiesAdd>;
    /**
     * Run as user
     */
    capabilitiesDrop?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityCapabilitiesDrop>;
    fsGroup?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityFsGroup>;
    privileged?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityPrivileged>;
    readOnlyRootFilesystem?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityReadOnlyRootFilesystem>;
    runAsGroup?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityRunAsGroup>;
    runAsNonRoot?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityRunAsNonRoot>;
    runAsUser?: pulumi.Input<inputs.MutationPolicySpecInputPodSecurityRunAsUser>;
    /**
     * Allowed selinux options
     */
    seLinuxOptions?: pulumi.Input<pulumi.Input<inputs.MutationPolicySpecInputPodSecuritySeLinuxOption>[]>;
    supplementalGroups?: pulumi.Input<inputs.MutationPolicySpecInputPodSecuritySupplementalGroups>;
}

export interface MutationPolicySpecInputPodSecurityAllowPrivilegeEscalation {
    condition: pulumi.Input<string>;
    value: pulumi.Input<boolean>;
}

export interface MutationPolicySpecInputPodSecurityCapabilitiesAdd {
    /**
     * Rule
     */
    operation?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MutationPolicySpecInputPodSecurityCapabilitiesDrop {
    /**
     * Rule
     */
    operation?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MutationPolicySpecInputPodSecurityFsGroup {
    condition: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface MutationPolicySpecInputPodSecurityPrivileged {
    condition: pulumi.Input<string>;
    value: pulumi.Input<boolean>;
}

export interface MutationPolicySpecInputPodSecurityReadOnlyRootFilesystem {
    condition: pulumi.Input<string>;
    value: pulumi.Input<boolean>;
}

export interface MutationPolicySpecInputPodSecurityRunAsGroup {
    condition: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface MutationPolicySpecInputPodSecurityRunAsNonRoot {
    condition: pulumi.Input<string>;
    value: pulumi.Input<boolean>;
}

export interface MutationPolicySpecInputPodSecurityRunAsUser {
    condition: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface MutationPolicySpecInputPodSecuritySeLinuxOption {
    /**
     * SELinux condition
     */
    condition?: pulumi.Input<string>;
    /**
     * SELinux level
     */
    level?: pulumi.Input<string>;
    /**
     * SELinux role
     */
    role?: pulumi.Input<string>;
    /**
     * SELinux type
     */
    type?: pulumi.Input<string>;
    /**
     * SELinux user
     */
    user?: pulumi.Input<string>;
}

export interface MutationPolicySpecInputPodSecuritySupplementalGroups {
    condition?: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<number>[]>;
}

export interface MutationPolicySpecNamespaceSelector {
    /**
     * Match expressions is a list of label selector requirements, the requirements are ANDed
     */
    matchExpressions: pulumi.Input<pulumi.Input<inputs.MutationPolicySpecNamespaceSelectorMatchExpression>[]>;
}

export interface MutationPolicySpecNamespaceSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NamespaceMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface NamespaceQuotaPolicyMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface NamespaceQuotaPolicyScope {
    /**
     * The schema for cluster policy full name
     */
    cluster?: pulumi.Input<inputs.NamespaceQuotaPolicyScopeCluster>;
    /**
     * The schema for cluster group policy full name
     */
    clusterGroup?: pulumi.Input<inputs.NamespaceQuotaPolicyScopeClusterGroup>;
    /**
     * The schema for organization policy full name
     */
    organization?: pulumi.Input<inputs.NamespaceQuotaPolicyScopeOrganization>;
    /**
     * The schema for workspace policy full name
     */
    workspace?: pulumi.Input<inputs.NamespaceQuotaPolicyScopeWorkspace>;
}

export interface NamespaceQuotaPolicyScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface NamespaceQuotaPolicyScopeClusterGroup {
    /**
     * Name of this cluster group
     */
    clusterGroup: pulumi.Input<string>;
}

export interface NamespaceQuotaPolicyScopeOrganization {
    /**
     * ID of this organization
     */
    organization: pulumi.Input<string>;
}

export interface NamespaceQuotaPolicyScopeWorkspace {
    /**
     * Name of this workspace
     */
    workspace: pulumi.Input<string>;
}

export interface NamespaceQuotaPolicySpec {
    /**
     * Input for the namespace quota policy, having one of the valid recipes: small, medium, large or custom.
     */
    input: pulumi.Input<inputs.NamespaceQuotaPolicySpecInput>;
    /**
     * Label based Namespace Selector for the policy
     */
    namespaceSelector?: pulumi.Input<inputs.NamespaceQuotaPolicySpecNamespaceSelector>;
}

export interface NamespaceQuotaPolicySpecInput {
    /**
     * The input schema for namespace quota policy custom recipe version v1
     */
    custom?: pulumi.Input<inputs.NamespaceQuotaPolicySpecInputCustom>;
    /**
     * The input schema for namespace quota policy large recipe version v1
     */
    large?: pulumi.Input<inputs.NamespaceQuotaPolicySpecInputLarge>;
    /**
     * The input schema for namespace quota policy medium recipe version v1
     */
    medium?: pulumi.Input<inputs.NamespaceQuotaPolicySpecInputMedium>;
    /**
     * The input schema for namespace quota policy small recipe version v1
     */
    small?: pulumi.Input<inputs.NamespaceQuotaPolicySpecInputSmall>;
}

export interface NamespaceQuotaPolicySpecInputCustom {
    /**
     * The sum of CPU limits across all pods in a non-terminal state cannot exceed this value
     */
    limitsCpu?: pulumi.Input<string>;
    /**
     * The sum of memory limits across all pods in a non-terminal state cannot exceed this value
     */
    limitsMemory?: pulumi.Input<string>;
    /**
     * The total number of PersistentVolumeClaims that can exist in a namespace
     */
    persistentVolumeClaims?: pulumi.Input<number>;
    /**
     * Across all persistent volume claims associated with each storage class, the total number of persistent volume claims that can exist in the namespace
     */
    persistentVolumeClaimsPerClass?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    /**
     * The sum of CPU requests across all pods in a non-terminal state cannot exceed this value
     */
    requestsCpu?: pulumi.Input<string>;
    /**
     * The sum of memory requests across all pods in a non-terminal state cannot exceed this value
     */
    requestsMemory?: pulumi.Input<string>;
    /**
     * The sum of storage requests across all persistent volume claims cannot exceed this value
     */
    requestsStorage?: pulumi.Input<string>;
    /**
     * Across all persistent volume claims associated with each storage class, the sum of storage requests cannot exceed this value
     */
    requestsStoragePerClass?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The total number of Services of the given type that can exist in a namespace
     */
    resourceCounts?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
}

export interface NamespaceQuotaPolicySpecInputLarge {
}

export interface NamespaceQuotaPolicySpecInputMedium {
}

export interface NamespaceQuotaPolicySpecInputSmall {
}

export interface NamespaceQuotaPolicySpecNamespaceSelector {
    /**
     * Match expressions is a list of label selector requirements, the requirements are ANDed
     */
    matchExpressions: pulumi.Input<pulumi.Input<inputs.NamespaceQuotaPolicySpecNamespaceSelectorMatchExpression>[]>;
}

export interface NamespaceQuotaPolicySpecNamespaceSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NamespaceSpec {
    attach?: pulumi.Input<boolean>;
    workspaceName?: pulumi.Input<string>;
}

export interface NetworkPolicyMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface NetworkPolicyScope {
    /**
     * The schema for cluster policy full name
     */
    cluster?: pulumi.Input<inputs.NetworkPolicyScopeCluster>;
    /**
     * The schema for cluster group policy full name
     */
    clusterGroup?: pulumi.Input<inputs.NetworkPolicyScopeClusterGroup>;
    /**
     * The schema for organization policy full name
     */
    organization?: pulumi.Input<inputs.NetworkPolicyScopeOrganization>;
    /**
     * The schema for workspace policy full name
     */
    workspace?: pulumi.Input<inputs.NetworkPolicyScopeWorkspace>;
}

export interface NetworkPolicyScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface NetworkPolicyScopeClusterGroup {
    /**
     * Name of this cluster group
     */
    clusterGroup: pulumi.Input<string>;
}

export interface NetworkPolicyScopeOrganization {
    /**
     * ID of this organization
     */
    organization: pulumi.Input<string>;
}

export interface NetworkPolicyScopeWorkspace {
    /**
     * Name of this workspace
     */
    workspace: pulumi.Input<string>;
}

export interface NetworkPolicySpec {
    /**
     * Input for the network policy, having one of the valid recipes: allow-all, allow-all-to-pods, allow-all-egress, deny-all, deny-all-to-pods, deny-all-egress, custom-egress or custom-ingress.
     */
    input: pulumi.Input<inputs.NetworkPolicySpecInput>;
    /**
     * Label based Namespace Selector for the policy
     */
    namespaceSelector?: pulumi.Input<inputs.NetworkPolicySpecNamespaceSelector>;
}

export interface NetworkPolicySpecInput {
    /**
     * The input schema for network policy allow-all recipe version v1
     */
    allowAll?: pulumi.Input<inputs.NetworkPolicySpecInputAllowAll>;
    /**
     * The input schema for network policy allow-all-egress recipe version v1
     */
    allowAllEgress?: pulumi.Input<inputs.NetworkPolicySpecInputAllowAllEgress>;
    /**
     * The input schema for network policy allow-all-to-pods recipe version v1
     */
    allowAllToPods?: pulumi.Input<inputs.NetworkPolicySpecInputAllowAllToPods>;
    /**
     * The input schema for network policy custom egress recipe version v1
     */
    customEgress?: pulumi.Input<inputs.NetworkPolicySpecInputCustomEgress>;
    /**
     * The input schema for network policy custom ingress recipe version v1
     */
    customIngress?: pulumi.Input<inputs.NetworkPolicySpecInputCustomIngress>;
    /**
     * The input schema for network policy deny-all recipe version v1
     */
    denyAll?: pulumi.Input<inputs.NetworkPolicySpecInputDenyAll>;
    /**
     * The input schema for network policy deny-all-egress recipe version v1
     */
    denyAllEgress?: pulumi.Input<inputs.NetworkPolicySpecInputDenyAllEgress>;
    /**
     * The input schema for network policy deny-all-to-pods recipe version v1
     */
    denyAllToPods?: pulumi.Input<inputs.NetworkPolicySpecInputDenyAllToPods>;
}

export interface NetworkPolicySpecInputAllowAll {
    /**
     * Allow traffic only from own namespace. Allow traffic only from pods in the same namespace as the destination pod.
     */
    fromOwnNamespace?: pulumi.Input<boolean>;
}

export interface NetworkPolicySpecInputAllowAllEgress {
}

export interface NetworkPolicySpecInputAllowAllToPods {
    /**
     * Allow traffic only from own namespace. Allow traffic only from pods in the same namespace as the destination pod.
     */
    fromOwnNamespace?: pulumi.Input<boolean>;
    /**
     * Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
     */
    toPodLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicySpecInputCustomEgress {
    /**
     * This specifies list of egress rules to be applied to the selected pods.
     */
    rules: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomEgressRule>[]>;
    /**
     * Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
     */
    toPodLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicySpecInputCustomEgressRule {
    /**
     * List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. Default is this rule matches all ports (traffic not restricted by port).
     */
    ports: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomEgressRulePort>[]>;
    /**
     * List of destinations for outgoing traffic of pods selected for this rule. Default is the rule matches all destinations (traffic not restricted by destinations).
     */
    ruleSpecs: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomEgressRuleRuleSpec>[]>;
}

export interface NetworkPolicySpecInputCustomEgressRulePort {
    /**
     * The port on the given protocol. This can either be a numerical or named port on a pod.
     */
    port?: pulumi.Input<string>;
    /**
     * The protocol (TCP or UDP) which traffic must match.
     */
    protocol?: pulumi.Input<string>;
}

export interface NetworkPolicySpecInputCustomEgressRuleRuleSpec {
    /**
     * The rule Spec (destination) for IP Block.
     */
    customIps?: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomEgressRuleRuleSpecCustomIp>[]>;
    /**
     * The rule Spec (destination) for Selectors.
     */
    customSelectors?: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomEgressRuleRuleSpecCustomSelector>[]>;
}

export interface NetworkPolicySpecInputCustomEgressRuleRuleSpecCustomIp {
    /**
     * IPBlock defines policy on a particular IPBlock. If this field is set then neither of the namespaceSelector and PodSelector can be set.
     */
    ipBlocks?: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomEgressRuleRuleSpecCustomIpIpBlock>[]>;
}

export interface NetworkPolicySpecInputCustomEgressRuleRuleSpecCustomIpIpBlock {
    /**
     * CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
     */
    cidr: pulumi.Input<string>;
    /**
     * Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
     */
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicySpecInputCustomEgressRuleRuleSpecCustomSelector {
    /**
     * Use a label selector to identify the namespaces to allow as egress destinations.
     */
    namespaceSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use a label selector to identify the pods to allow as egress destinations.
     */
    podSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicySpecInputCustomIngress {
    /**
     * This specifies list of ingress rules to be applied to the selected pods.
     */
    rules: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomIngressRule>[]>;
    /**
     * Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
     */
    toPodLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicySpecInputCustomIngressRule {
    /**
     * List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. Default is this rule matches all ports (traffic not restricted by port).
     */
    ports: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomIngressRulePort>[]>;
    /**
     * List of sources which should be able to access the pods selected for this rule. Default is the rule matches all sources (traffic not restricted by source). List of items of type V1alpha1CommonPolicySpecNetworkV1CustomIngressRulesRuleSpec0 OR V1alpha1CommonPolicySpecNetworkV1CustomIngressRulesRuleSpec1.
     */
    ruleSpecs: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomIngressRuleRuleSpec>[]>;
}

export interface NetworkPolicySpecInputCustomIngressRulePort {
    /**
     * The port on the given protocol. This can either be a numerical or named port on a pod.
     */
    port?: pulumi.Input<string>;
    /**
     * The protocol (TCP or UDP) which traffic must match.
     */
    protocol?: pulumi.Input<string>;
}

export interface NetworkPolicySpecInputCustomIngressRuleRuleSpec {
    /**
     * The rule Spec (source) for IP Block.
     */
    customIps?: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomIngressRuleRuleSpecCustomIp>[]>;
    /**
     * The rule Spec (source) for Selectors.
     */
    customSelectors?: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomIngressRuleRuleSpecCustomSelector>[]>;
}

export interface NetworkPolicySpecInputCustomIngressRuleRuleSpecCustomIp {
    /**
     * IPBlock defines policy on a particular IPBlock. If this field is set then neither of the namespaceSelector and PodSelector can be set.
     */
    ipBlocks?: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecInputCustomIngressRuleRuleSpecCustomIpIpBlock>[]>;
}

export interface NetworkPolicySpecInputCustomIngressRuleRuleSpecCustomIpIpBlock {
    /**
     * CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
     */
    cidr: pulumi.Input<string>;
    /**
     * Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
     */
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicySpecInputCustomIngressRuleRuleSpecCustomSelector {
    /**
     * Use a label selector to identify the namespaces to allow as egress destinations.
     */
    namespaceSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use a label selector to identify the pods to allow as egress destinations.
     */
    podSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicySpecInputDenyAll {
}

export interface NetworkPolicySpecInputDenyAllEgress {
}

export interface NetworkPolicySpecInputDenyAllToPods {
    /**
     * Pod Labels on which traffic should be allowed/denied. Use a label selector to identify the pods to which the policy applies.
     */
    toPodLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicySpecNamespaceSelector {
    /**
     * Match expressions is a list of label selector requirements, the requirements are ANDed
     */
    matchExpressions: pulumi.Input<pulumi.Input<inputs.NetworkPolicySpecNamespaceSelectorMatchExpression>[]>;
}

export interface NetworkPolicySpecNamespaceSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PackageInstallMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface PackageInstallScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.PackageInstallScopeCluster>;
}

export interface PackageInstallScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface PackageInstallSpec {
    /**
     * Inline values to configure the Package Install.
     */
    inlineValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Reference to the Package which will be installed.
     */
    packageRef: pulumi.Input<inputs.PackageInstallSpecPackageRef>;
    /**
     * Role binding scope for service account which will be used by Package Install.
     */
    roleBindingScope?: pulumi.Input<string>;
}

export interface PackageInstallSpecPackageRef {
    /**
     * Name of the Package Metadata.
     */
    packageMetadataName: pulumi.Input<string>;
    /**
     * Version Selection of the Package.
     */
    versionSelection: pulumi.Input<inputs.PackageInstallSpecPackageRefVersionSelection>;
}

export interface PackageInstallSpecPackageRefVersionSelection {
    /**
     * Constraints to select Package. Example: constraints: 'v1.2.3', constraints: '<v1.4.0' etc.
     */
    constraints: pulumi.Input<string>;
}

export interface PackageInstallStatus {
    generatedResources: pulumi.Input<pulumi.Input<inputs.PackageInstallStatusGeneratedResource>[]>;
    managed: pulumi.Input<boolean>;
    packageInstallPhase: pulumi.Input<string>;
    referredBies: pulumi.Input<pulumi.Input<string>[]>;
    resolvedVersion: pulumi.Input<string>;
}

export interface PackageInstallStatusGeneratedResource {
    clusterRoleName: pulumi.Input<string>;
    roleBindingName: pulumi.Input<string>;
    serviceAccountName: pulumi.Input<string>;
}

export interface PackageRepositoryMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface PackageRepositoryScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.PackageRepositoryScopeCluster>;
}

export interface PackageRepositoryScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface PackageRepositorySpec {
    /**
     * Docker image url; unqualified, tagged, or digest references supported.
     */
    imgpkgBundle?: pulumi.Input<inputs.PackageRepositorySpecImgpkgBundle>;
}

export interface PackageRepositorySpecImgpkgBundle {
    /**
     * image url string.
     */
    image: pulumi.Input<string>;
}

export interface PackageRepositoryState {
    disabled: pulumi.Input<boolean>;
    managed: pulumi.Input<boolean>;
    packageRepositoryPhase: pulumi.Input<string>;
    subscribed: pulumi.Input<boolean>;
}

export interface ProviderSelfManaged {
    /**
     * URL of the OpenID Connect (OIDC) issuer configured with self-managed Taznu mission control instance
     */
    oidcIssuer?: pulumi.Input<string>;
    /**
     * Password for the above mentioned Username field configured in the OIDC
     */
    password?: pulumi.Input<string>;
    /**
     * Username configured in the OIDC
     */
    username?: pulumi.Input<string>;
}

export interface ProvisionerMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface RepositoryCredentialMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface RepositoryCredentialScope {
    /**
     * The schema for cluster full name
     */
    cluster?: pulumi.Input<inputs.RepositoryCredentialScopeCluster>;
    /**
     * The schema for cluster group full name
     */
    clusterGroup?: pulumi.Input<inputs.RepositoryCredentialScopeClusterGroup>;
}

export interface RepositoryCredentialScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface RepositoryCredentialScopeClusterGroup {
    /**
     * Name of the cluster group
     */
    name: pulumi.Input<string>;
}

export interface RepositoryCredentialSpec {
    /**
     * The schema for spec credential type.
     */
    data: pulumi.Input<inputs.RepositoryCredentialSpecData>;
}

export interface RepositoryCredentialSpecData {
    /**
     * The schema for SSH credential type spec.
     */
    sshKey?: pulumi.Input<inputs.RepositoryCredentialSpecDataSshKey>;
    /**
     * The schema for Username/Password credential type spec.
     */
    usernamePassword?: pulumi.Input<inputs.RepositoryCredentialSpecDataUsernamePassword>;
}

export interface RepositoryCredentialSpecDataSshKey {
    /**
     * SSH Identity file.
     */
    identity: pulumi.Input<string>;
    /**
     * Known Hosts file path.
     */
    knownHosts: pulumi.Input<string>;
}

export interface RepositoryCredentialSpecDataUsernamePassword {
    /**
     * Password for the basic authorization.
     */
    password: pulumi.Input<string>;
    /**
     * Username for the basic authorization.
     */
    username: pulumi.Input<string>;
}

export interface SecurityPolicyMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface SecurityPolicyScope {
    /**
     * The schema for cluster policy full name
     */
    cluster?: pulumi.Input<inputs.SecurityPolicyScopeCluster>;
    /**
     * The schema for cluster group policy full name
     */
    clusterGroup?: pulumi.Input<inputs.SecurityPolicyScopeClusterGroup>;
    /**
     * The schema for organization policy full name
     */
    organization?: pulumi.Input<inputs.SecurityPolicyScopeOrganization>;
    /**
     * The schema for workspace policy full name
     */
    workspace?: pulumi.Input<inputs.SecurityPolicyScopeWorkspace>;
}

export interface SecurityPolicyScopeCluster {
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Name of this cluster
     */
    name: pulumi.Input<string>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
}

export interface SecurityPolicyScopeClusterGroup {
    /**
     * Name of this cluster group
     */
    clusterGroup: pulumi.Input<string>;
}

export interface SecurityPolicyScopeOrganization {
    /**
     * ID of this organization
     */
    organization: pulumi.Input<string>;
}

export interface SecurityPolicyScopeWorkspace {
    /**
     * Name of this workspace
     */
    workspace: pulumi.Input<string>;
}

export interface SecurityPolicySpec {
    /**
     * Input for the security policy, having one of the valid recipes: baseline, custom or strict.
     */
    input: pulumi.Input<inputs.SecurityPolicySpecInput>;
    /**
     * Label based Namespace Selector for the policy
     */
    namespaceSelector?: pulumi.Input<inputs.SecurityPolicySpecNamespaceSelector>;
}

export interface SecurityPolicySpecInput {
    /**
     * The input schema for security policy baseline recipe version v1
     */
    baseline?: pulumi.Input<inputs.SecurityPolicySpecInputBaseline>;
    /**
     * The input schema for security policy custom recipe version v1
     */
    custom?: pulumi.Input<inputs.SecurityPolicySpecInputCustom>;
    /**
     * The input schema for security policy strict recipe version v1
     */
    strict?: pulumi.Input<inputs.SecurityPolicySpecInputStrict>;
}

export interface SecurityPolicySpecInputBaseline {
    /**
     * Audit (dry-run)
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Disable native pod security policy
     */
    disableNativePsp?: pulumi.Input<boolean>;
}

export interface SecurityPolicySpecInputCustom {
    /**
     * Allow host namespace sharing
     */
    allowHostNamespaceSharing?: pulumi.Input<boolean>;
    /**
     * Allow host network
     */
    allowHostNetwork?: pulumi.Input<boolean>;
    /**
     * Allow privilege escalation
     */
    allowPrivilegeEscalation?: pulumi.Input<boolean>;
    /**
     * Allow privileged containers
     */
    allowPrivilegedContainers?: pulumi.Input<boolean>;
    /**
     * Allowed host paths
     */
    allowedHostPaths?: pulumi.Input<pulumi.Input<inputs.SecurityPolicySpecInputCustomAllowedHostPath>[]>;
    /**
     * Allowed host port range
     */
    allowedHostPortRange?: pulumi.Input<inputs.SecurityPolicySpecInputCustomAllowedHostPortRange>;
    /**
     * Allowed selinux options
     */
    allowedSeLinuxOptions?: pulumi.Input<pulumi.Input<inputs.SecurityPolicySpecInputCustomAllowedSeLinuxOption>[]>;
    /**
     * Allowed volumes
     */
    allowedVolumes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Audit (dry-run)
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Disable native pod security policy
     */
    disableNativePsp?: pulumi.Input<boolean>;
    /**
     * fsGroup
     */
    fsGroup?: pulumi.Input<inputs.SecurityPolicySpecInputCustomFsGroup>;
    /**
     * Linux capabilities
     */
    linuxCapabilities?: pulumi.Input<inputs.SecurityPolicySpecInputCustomLinuxCapabilities>;
    /**
     * Read only root file system
     */
    readOnlyRootFileSystem?: pulumi.Input<boolean>;
    /**
     * Run as group
     */
    runAsGroup?: pulumi.Input<inputs.SecurityPolicySpecInputCustomRunAsGroup>;
    /**
     * Run as user
     */
    runAsUser?: pulumi.Input<inputs.SecurityPolicySpecInputCustomRunAsUser>;
    /**
     * Seccomp
     */
    seccomp?: pulumi.Input<inputs.SecurityPolicySpecInputCustomSeccomp>;
    /**
     * supplemental groups
     */
    supplementalGroups?: pulumi.Input<inputs.SecurityPolicySpecInputCustomSupplementalGroups>;
    /**
     * Sysctls
     */
    sysctls?: pulumi.Input<inputs.SecurityPolicySpecInputCustomSysctls>;
}

export interface SecurityPolicySpecInputCustomAllowedHostPath {
    /**
     * Path prefix
     */
    pathPrefix?: pulumi.Input<string>;
    /**
     * Read only flag
     */
    readOnly?: pulumi.Input<boolean>;
}

export interface SecurityPolicySpecInputCustomAllowedHostPortRange {
    /**
     * Maximum allowed port
     */
    max?: pulumi.Input<number>;
    /**
     * Minimum allowed port
     */
    min?: pulumi.Input<number>;
}

export interface SecurityPolicySpecInputCustomAllowedSeLinuxOption {
    /**
     * SELinux level
     */
    level?: pulumi.Input<string>;
    /**
     * SELinux role
     */
    role?: pulumi.Input<string>;
    /**
     * SELinux type
     */
    type?: pulumi.Input<string>;
    /**
     * SELinux user
     */
    user?: pulumi.Input<string>;
}

export interface SecurityPolicySpecInputCustomFsGroup {
    /**
     * Allowed group id ranges
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.SecurityPolicySpecInputCustomFsGroupRange>[]>;
    /**
     * Rule
     */
    rule?: pulumi.Input<string>;
}

export interface SecurityPolicySpecInputCustomFsGroupRange {
    /**
     * Maximum group ID
     */
    max?: pulumi.Input<number>;
    /**
     * Minimum group ID
     */
    min?: pulumi.Input<number>;
}

export interface SecurityPolicySpecInputCustomLinuxCapabilities {
    /**
     * Allowed capabilities
     */
    allowedCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Required drop capabilities
     */
    requiredDropCapabilities?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicySpecInputCustomRunAsGroup {
    /**
     * Allowed group id ranges
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.SecurityPolicySpecInputCustomRunAsGroupRange>[]>;
    /**
     * Rule
     */
    rule?: pulumi.Input<string>;
}

export interface SecurityPolicySpecInputCustomRunAsGroupRange {
    /**
     * Maximum group ID
     */
    max?: pulumi.Input<number>;
    /**
     * Minimum group ID
     */
    min?: pulumi.Input<number>;
}

export interface SecurityPolicySpecInputCustomRunAsUser {
    /**
     * Allowed user id ranges
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.SecurityPolicySpecInputCustomRunAsUserRange>[]>;
    /**
     * Rule
     */
    rule?: pulumi.Input<string>;
}

export interface SecurityPolicySpecInputCustomRunAsUserRange {
    /**
     * Maximum user ID
     */
    max?: pulumi.Input<number>;
    /**
     * Minimum user ID
     */
    min?: pulumi.Input<number>;
}

export interface SecurityPolicySpecInputCustomSeccomp {
    /**
     * Allowed local host files
     */
    allowedLocalhostFiles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowed profiles
     */
    allowedProfiles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicySpecInputCustomSupplementalGroups {
    /**
     * Allowed group id ranges
     */
    ranges?: pulumi.Input<pulumi.Input<inputs.SecurityPolicySpecInputCustomSupplementalGroupsRange>[]>;
    /**
     * Rule
     */
    rule?: pulumi.Input<string>;
}

export interface SecurityPolicySpecInputCustomSupplementalGroupsRange {
    /**
     * Maximum group ID
     */
    max?: pulumi.Input<number>;
    /**
     * Minimum group ID
     */
    min?: pulumi.Input<number>;
}

export interface SecurityPolicySpecInputCustomSysctls {
    /**
     * Forbidden sysctls
     */
    forbiddenSysctls?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SecurityPolicySpecInputStrict {
    /**
     * Audit (dry-run)
     */
    audit?: pulumi.Input<boolean>;
    /**
     * Disable native pod security policy
     */
    disableNativePsp?: pulumi.Input<boolean>;
}

export interface SecurityPolicySpecNamespaceSelector {
    /**
     * Match expressions is a list of label selector requirements, the requirements are ANDed
     */
    matchExpressions: pulumi.Input<pulumi.Input<inputs.SecurityPolicySpecNamespaceSelectorMatchExpression>[]>;
}

export interface SecurityPolicySpecNamespaceSelectorMatchExpression {
    /**
     * Key is the label key that the selector applies to
     */
    key?: pulumi.Input<string>;
    /**
     * Operator represents a key's relationship to a set of values
     */
    operator?: pulumi.Input<string>;
    /**
     * Values is an array of string values
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TanzuKubernetesClusterMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterSpec {
    /**
     * Name of the cluster group to which this cluster belongs.
     */
    clusterGroupName?: pulumi.Input<string>;
    /**
     * Name of the image registry configuration to use.
     */
    imageRegistry?: pulumi.Input<string>;
    /**
     * Cluster's kubeconfig.
     */
    kubeconfig?: pulumi.Input<string>;
    /**
     * Name of the proxy configuration to use.
     */
    proxyName?: pulumi.Input<string>;
    /**
     * TMC-managed flag indicates if the cluster is managed by tmc.
     * (Default: False)
     */
    tmcManaged?: pulumi.Input<boolean>;
    /**
     * The cluster topology.
     */
    topology: pulumi.Input<inputs.TanzuKubernetesClusterSpecTopology>;
}

export interface TanzuKubernetesClusterSpecTopology {
    /**
     * The name of the cluster class for the cluster.
     */
    clusterClass?: pulumi.Input<string>;
    /**
     * Variables configuration for the cluster.
     */
    clusterVariables: pulumi.Input<string>;
    /**
     * Control plane specific configuration.
     */
    controlPlane: pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyControlPlane>;
    /**
     * (Repeatable Block) The core addons.
     */
    coreAddons?: pulumi.Input<pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyCoreAddon>[]>;
    /**
     * Network specific configuration.
     */
    network?: pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyNetwork>;
    /**
     * (Repeatable Block) Node pool definition for the cluster.
     */
    nodepools: pulumi.Input<pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyNodepool>[]>;
    /**
     * Kubernetes version of the cluster.
     */
    version: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterSpecTopologyControlPlane {
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyControlPlaneMeta>;
    /**
     * OS image block
     */
    osImage?: pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyControlPlaneOsImage>;
    /**
     * Number of replicas
     */
    replicas: pulumi.Input<number>;
}

export interface TanzuKubernetesClusterSpecTopologyControlPlaneMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterSpecTopologyControlPlaneOsImage {
    /**
     * The architecture of the OS image.
     */
    arch: pulumi.Input<string>;
    /**
     * The name of the OS image.
     */
    name: pulumi.Input<string>;
    /**
     * The version of the OS image.
     */
    version: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterSpecTopologyCoreAddon {
    /**
     * Provider of core add on
     */
    provider: pulumi.Input<string>;
    /**
     * Type of core add on
     */
    type: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterSpecTopologyNetwork {
    /**
     * Pod CIDR for Kubernetes pods defaults to 192.168.0.0/16.
     */
    podCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service CIDR for kubernetes services defaults to 10.96.0.0/12.
     */
    serviceCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domain name for services.
     */
    serviceDomain?: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterSpecTopologyNodepool {
    /**
     * Description of the node pool.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the node pool.
     */
    name: pulumi.Input<string>;
    /**
     * Spec for the node pool.
     */
    specs: pulumi.Input<pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyNodepoolSpec>[]>;
}

export interface TanzuKubernetesClusterSpecTopologyNodepoolSpec {
    /**
     * The failure domain the machines will be created in.
     */
    failureDomain?: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyNodepoolSpecMeta>;
    /**
     * OS image block
     */
    osImage?: pulumi.Input<inputs.TanzuKubernetesClusterSpecTopologyNodepoolSpecOsImage>;
    /**
     * Overrides can be used to override cluster level variables.
     */
    overrides?: pulumi.Input<string>;
    /**
     * Number of replicas
     */
    replicas: pulumi.Input<number>;
    /**
     * The name of the machine deployment class used to create the node pool.
     */
    workerClass: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterSpecTopologyNodepoolSpecMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface TanzuKubernetesClusterSpecTopologyNodepoolSpecOsImage {
    /**
     * The architecture of the OS image.
     */
    arch: pulumi.Input<string>;
    /**
     * The name of the OS image.
     */
    name: pulumi.Input<string>;
    /**
     * The version of the OS image.
     */
    version: pulumi.Input<string>;
}

export interface TanzuKubernetesClusterTimeoutPolicy {
    /**
     * Fail on timeout if timeout is reached and cluster is not ready. (Default = true)
     */
    failOnTimeout?: pulumi.Input<boolean>;
    /**
     * Timeout in minutes for tanzu kubernetes creation process. A value of 0 means that no timeout is set. (Default: 60)
     */
    timeout?: pulumi.Input<number>;
    /**
     * Wait for kubeconfig. (Default = true)
     */
    waitForKubeconfig?: pulumi.Input<boolean>;
}

export interface TargetLocationMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}

export interface TargetLocationSpec {
    /**
     * Assigned groups block for the target location.
     */
    assignedGroups?: pulumi.Input<inputs.TargetLocationSpecAssignedGroups>;
    /**
     * The bucket to use for object storage.
     */
    bucket?: pulumi.Input<string>;
    /**
     * A PEM-encoded certificate bundle to trust while connecting to the storage backend.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Target location config block.
     * Required only when target location is Self Managed and should contain either AWS or Azure blocks but not both.
     */
    config?: pulumi.Input<inputs.TargetLocationSpecConfig>;
    /**
     * Credentials block
     */
    credential: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The region of the bucket origin.
     * Required only when target location is AWS Self Managed.
     */
    region?: pulumi.Input<string>;
    /**
     * System bucket to use for object storage.
     * (Only used for Managed TMC)
     */
    sysBucketKey?: pulumi.Input<string>;
    /**
     * System bucket region (Only used for Managed TMC)
     */
    sysRegionKey?: pulumi.Input<string>;
    /**
     * The target provider of the backup storage.
     * Valid values are (AWS, AZURE)
     */
    targetProvider: pulumi.Input<string>;
}

export interface TargetLocationSpecAssignedGroups {
    /**
     * Cluster group names
     */
    clusterGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Repeatable Block) Cluster block.
     */
    clusters?: pulumi.Input<pulumi.Input<inputs.TargetLocationSpecAssignedGroupsCluster>[]>;
}

export interface TargetLocationSpecAssignedGroupsCluster {
    /**
     * Management cluster name
     */
    managementClusterName: pulumi.Input<string>;
    /**
     * Cluster name
     */
    name: pulumi.Input<string>;
    /**
     * Cluster provisioner name
     */
    provisionerName: pulumi.Input<string>;
}

export interface TargetLocationSpecConfig {
    /**
     * AWS S3 and S3-compatible target location config block.
     */
    aws?: pulumi.Input<inputs.TargetLocationSpecConfigAws>;
    /**
     * Azure target location config block.
     */
    azure?: pulumi.Input<inputs.TargetLocationSpecConfigAzure>;
}

export interface TargetLocationSpecConfigAws {
    /**
     * The service endpoint for non-AWS S3 storage solution.
     */
    s3BucketUrl?: pulumi.Input<string>;
    /**
     * A flag for whether to force path style URLs for S3 objects.
     * It is default to false and set it to true when using local storage service like Minio.
     */
    s3ForcePathStyle?: pulumi.Input<boolean>;
    /**
     * The service endpoint used for generating download URLs. This field is primarily for local storage services like Minio.
     */
    s3PublicUrl?: pulumi.Input<string>;
}

export interface TargetLocationSpecConfigAzure {
    /**
     * Name of the resource group containing the storage account for this backup storage location.
     */
    resourceGroup?: pulumi.Input<string>;
    /**
     * Subscription ID under which all the resources are being managed in azure.
     */
    storageAccount?: pulumi.Input<string>;
    /**
     * Name of the storage account for this backup storage location.
     */
    subscriptionId?: pulumi.Input<string>;
}

export interface WorkspaceMeta {
    /**
     * Annotations for the resource
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Description of the resource
     */
    description?: pulumi.Input<string>;
    /**
     * Labels for the resource
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Resource version of the resource
     */
    resourceVersion?: pulumi.Input<string>;
    /**
     * UID of the resource
     */
    uid?: pulumi.Input<string>;
}
export namespace config {
}
