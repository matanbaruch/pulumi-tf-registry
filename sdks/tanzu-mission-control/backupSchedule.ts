// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BackupSchedule extends pulumi.CustomResource {
    /**
     * Get an existing BackupSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupScheduleState, opts?: pulumi.CustomResourceOptions): BackupSchedule {
        return new BackupSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tanzu-mission-control:index/backupSchedule:BackupSchedule';

    /**
     * Returns true if the given object is an instance of BackupSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BackupSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BackupSchedule.__pulumiType;
    }

    /**
     * Scope for backup schedule. Valid values are (FULL_CLUSTER, SET_NAMESPACES, LABEL_SELECTOR)
     */
    public readonly backupScope!: pulumi.Output<string>;
    /**
     * Metadata for the resource
     */
    public readonly meta!: pulumi.Output<outputs.BackupScheduleMeta | undefined>;
    /**
     * The name of the backup schedule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Scope block for Back up schedule (cluster/cluster group)
     */
    public readonly scope!: pulumi.Output<outputs.BackupScheduleScope>;
    /**
     * Selector of the cluster group backup schedule
     */
    public readonly selectors!: pulumi.Output<outputs.BackupScheduleSelector[] | undefined>;
    /**
     * Backup schedule spec block
     */
    public readonly spec!: pulumi.Output<outputs.BackupScheduleSpec>;

    /**
     * Create a BackupSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupScheduleArgs | BackupScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupScheduleState | undefined;
            resourceInputs["backupScope"] = state ? state.backupScope : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["selectors"] = state ? state.selectors : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
        } else {
            const args = argsOrState as BackupScheduleArgs | undefined;
            if ((!args || args.backupScope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupScope'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["backupScope"] = args ? args.backupScope : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["selectors"] = args ? args.selectors : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BackupSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BackupSchedule resources.
 */
export interface BackupScheduleState {
    /**
     * Scope for backup schedule. Valid values are (FULL_CLUSTER, SET_NAMESPACES, LABEL_SELECTOR)
     */
    backupScope?: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.BackupScheduleMeta>;
    /**
     * The name of the backup schedule
     */
    name?: pulumi.Input<string>;
    /**
     * Scope block for Back up schedule (cluster/cluster group)
     */
    scope?: pulumi.Input<inputs.BackupScheduleScope>;
    /**
     * Selector of the cluster group backup schedule
     */
    selectors?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSelector>[]>;
    /**
     * Backup schedule spec block
     */
    spec?: pulumi.Input<inputs.BackupScheduleSpec>;
}

/**
 * The set of arguments for constructing a BackupSchedule resource.
 */
export interface BackupScheduleArgs {
    /**
     * Scope for backup schedule. Valid values are (FULL_CLUSTER, SET_NAMESPACES, LABEL_SELECTOR)
     */
    backupScope: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.BackupScheduleMeta>;
    /**
     * The name of the backup schedule
     */
    name?: pulumi.Input<string>;
    /**
     * Scope block for Back up schedule (cluster/cluster group)
     */
    scope: pulumi.Input<inputs.BackupScheduleScope>;
    /**
     * Selector of the cluster group backup schedule
     */
    selectors?: pulumi.Input<pulumi.Input<inputs.BackupScheduleSelector>[]>;
    /**
     * Backup schedule spec block
     */
    spec: pulumi.Input<inputs.BackupScheduleSpec>;
}
