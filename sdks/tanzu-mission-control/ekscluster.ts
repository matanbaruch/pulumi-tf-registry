// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Ekscluster extends pulumi.CustomResource {
    /**
     * Get an existing Ekscluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EksclusterState, opts?: pulumi.CustomResourceOptions): Ekscluster {
        return new Ekscluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tanzu-mission-control:index/ekscluster:Ekscluster';

    /**
     * Returns true if the given object is an instance of Ekscluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ekscluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ekscluster.__pulumiType;
    }

    /**
     * Name of the AWS Credential in Tanzu Mission Control
     */
    public readonly credentialName!: pulumi.Output<string>;
    /**
     * Kubeconfig for connecting to newly created cluster base64 encoded. This will only be returned if you have elected to
     * wait for kubeconfig.
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    /**
     * Metadata for the resource
     */
    public readonly meta!: pulumi.Output<outputs.EksclusterMeta | undefined>;
    /**
     * Name of this cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Wait timeout duration until cluster resource reaches READY state. Accepted timeout duration values like 5s, 45m, or 3h,
     * higher than zero
     */
    public readonly readyWaitTimeout!: pulumi.Output<string | undefined>;
    /**
     * AWS Region of this cluster
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Spec for the cluster
     */
    public readonly spec!: pulumi.Output<outputs.EksclusterSpec | undefined>;
    /**
     * Status of the cluster
     */
    public /*out*/ readonly status!: pulumi.Output<{[key: string]: string}>;
    /**
     * Wait until pinniped extension is ready to provide kubeconfig
     */
    public readonly waitForKubeconfig!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Ekscluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EksclusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EksclusterArgs | EksclusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EksclusterState | undefined;
            resourceInputs["credentialName"] = state ? state.credentialName : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readyWaitTimeout"] = state ? state.readyWaitTimeout : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["waitForKubeconfig"] = state ? state.waitForKubeconfig : undefined;
        } else {
            const args = argsOrState as EksclusterArgs | undefined;
            if ((!args || args.credentialName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialName'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["credentialName"] = args ? args.credentialName : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readyWaitTimeout"] = args ? args.readyWaitTimeout : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["waitForKubeconfig"] = args ? args.waitForKubeconfig : undefined;
            resourceInputs["kubeconfig"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ekscluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ekscluster resources.
 */
export interface EksclusterState {
    /**
     * Name of the AWS Credential in Tanzu Mission Control
     */
    credentialName?: pulumi.Input<string>;
    /**
     * Kubeconfig for connecting to newly created cluster base64 encoded. This will only be returned if you have elected to
     * wait for kubeconfig.
     */
    kubeconfig?: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.EksclusterMeta>;
    /**
     * Name of this cluster
     */
    name?: pulumi.Input<string>;
    /**
     * Wait timeout duration until cluster resource reaches READY state. Accepted timeout duration values like 5s, 45m, or 3h,
     * higher than zero
     */
    readyWaitTimeout?: pulumi.Input<string>;
    /**
     * AWS Region of this cluster
     */
    region?: pulumi.Input<string>;
    /**
     * Spec for the cluster
     */
    spec?: pulumi.Input<inputs.EksclusterSpec>;
    /**
     * Status of the cluster
     */
    status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Wait until pinniped extension is ready to provide kubeconfig
     */
    waitForKubeconfig?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Ekscluster resource.
 */
export interface EksclusterArgs {
    /**
     * Name of the AWS Credential in Tanzu Mission Control
     */
    credentialName: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.EksclusterMeta>;
    /**
     * Name of this cluster
     */
    name?: pulumi.Input<string>;
    /**
     * Wait timeout duration until cluster resource reaches READY state. Accepted timeout duration values like 5s, 45m, or 3h,
     * higher than zero
     */
    readyWaitTimeout?: pulumi.Input<string>;
    /**
     * AWS Region of this cluster
     */
    region: pulumi.Input<string>;
    /**
     * Spec for the cluster
     */
    spec?: pulumi.Input<inputs.EksclusterSpec>;
    /**
     * Wait until pinniped extension is ready to provide kubeconfig
     */
    waitForKubeconfig?: pulumi.Input<boolean>;
}
