// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getEkscluster(args: GetEksclusterArgs, opts?: pulumi.InvokeOptions): Promise<GetEksclusterResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tanzu-mission-control:index/getEkscluster:getEkscluster", {
        "credentialName": args.credentialName,
        "id": args.id,
        "meta": args.meta,
        "name": args.name,
        "readyWaitTimeout": args.readyWaitTimeout,
        "region": args.region,
        "spec": args.spec,
        "waitForKubeconfig": args.waitForKubeconfig,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEkscluster.
 */
export interface GetEksclusterArgs {
    credentialName: string;
    id?: string;
    meta?: inputs.GetEksclusterMeta;
    name: string;
    readyWaitTimeout?: string;
    region: string;
    spec?: inputs.GetEksclusterSpec;
    waitForKubeconfig?: boolean;
}

/**
 * A collection of values returned by getEkscluster.
 */
export interface GetEksclusterResult {
    readonly credentialName: string;
    readonly id: string;
    readonly kubeconfig: string;
    readonly meta?: outputs.GetEksclusterMeta;
    readonly name: string;
    readonly readyWaitTimeout?: string;
    readonly region: string;
    readonly spec?: outputs.GetEksclusterSpec;
    readonly status: {[key: string]: string};
    readonly waitForKubeconfig?: boolean;
}
export function getEksclusterOutput(args: GetEksclusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEksclusterResult> {
    return pulumi.output(args).apply((a: any) => getEkscluster(a, opts))
}

/**
 * A collection of arguments for invoking getEkscluster.
 */
export interface GetEksclusterOutputArgs {
    credentialName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    meta?: pulumi.Input<inputs.GetEksclusterMetaArgs>;
    name: pulumi.Input<string>;
    readyWaitTimeout?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.GetEksclusterSpecArgs>;
    waitForKubeconfig?: pulumi.Input<boolean>;
}
