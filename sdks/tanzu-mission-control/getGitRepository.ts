// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getGitRepository(args: GetGitRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetGitRepositoryResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("tanzu-mission-control:index/getGitRepository:getGitRepository", {
        "id": args.id,
        "meta": args.meta,
        "name": args.name,
        "namespaceName": args.namespaceName,
        "scope": args.scope,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getGitRepository.
 */
export interface GetGitRepositoryArgs {
    id?: string;
    meta?: inputs.GetGitRepositoryMeta;
    name: string;
    namespaceName: string;
    scope: inputs.GetGitRepositoryScope;
}

/**
 * A collection of values returned by getGitRepository.
 */
export interface GetGitRepositoryResult {
    readonly id: string;
    readonly meta?: outputs.GetGitRepositoryMeta;
    readonly name: string;
    readonly namespaceName: string;
    readonly scope: outputs.GetGitRepositoryScope;
    readonly specs: outputs.GetGitRepositorySpec[];
    readonly status: {[key: string]: string};
}
export function getGitRepositoryOutput(args: GetGitRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGitRepositoryResult> {
    return pulumi.output(args).apply((a: any) => getGitRepository(a, opts))
}

/**
 * A collection of arguments for invoking getGitRepository.
 */
export interface GetGitRepositoryOutputArgs {
    id?: pulumi.Input<string>;
    meta?: pulumi.Input<inputs.GetGitRepositoryMetaArgs>;
    name: pulumi.Input<string>;
    namespaceName: pulumi.Input<string>;
    scope: pulumi.Input<inputs.GetGitRepositoryScopeArgs>;
}
