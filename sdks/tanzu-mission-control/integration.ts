// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'tanzu-mission-control:index/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * Name of this cluster
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Name of the Integration; valid options are currently only ['tanzu-service-mesh']
     */
    public readonly integrationName!: pulumi.Output<string>;
    /**
     * Name of the management cluster
     */
    public readonly managementClusterName!: pulumi.Output<string | undefined>;
    /**
     * Metadata for the resource
     */
    public readonly meta!: pulumi.Output<outputs.IntegrationMeta | undefined>;
    /**
     * Provisioner of the cluster
     */
    public readonly provisionerName!: pulumi.Output<string | undefined>;
    /**
     * Specification for the Integration
     */
    public readonly spec!: pulumi.Output<outputs.IntegrationSpec>;
    /**
     * Status of Integration
     */
    public /*out*/ readonly status!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["integrationName"] = state ? state.integrationName : undefined;
            resourceInputs["managementClusterName"] = state ? state.managementClusterName : undefined;
            resourceInputs["meta"] = state ? state.meta : undefined;
            resourceInputs["provisionerName"] = state ? state.provisionerName : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.integrationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationName'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["integrationName"] = args ? args.integrationName : undefined;
            resourceInputs["managementClusterName"] = args ? args.managementClusterName : undefined;
            resourceInputs["meta"] = args ? args.meta : undefined;
            resourceInputs["provisionerName"] = args ? args.provisionerName : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Integration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * Name of this cluster
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Name of the Integration; valid options are currently only ['tanzu-service-mesh']
     */
    integrationName?: pulumi.Input<string>;
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.IntegrationMeta>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
    /**
     * Specification for the Integration
     */
    spec?: pulumi.Input<inputs.IntegrationSpec>;
    /**
     * Status of Integration
     */
    status?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * Name of this cluster
     */
    clusterName: pulumi.Input<string>;
    /**
     * Name of the Integration; valid options are currently only ['tanzu-service-mesh']
     */
    integrationName: pulumi.Input<string>;
    /**
     * Name of the management cluster
     */
    managementClusterName?: pulumi.Input<string>;
    /**
     * Metadata for the resource
     */
    meta?: pulumi.Input<inputs.IntegrationMeta>;
    /**
     * Provisioner of the cluster
     */
    provisionerName?: pulumi.Input<string>;
    /**
     * Specification for the Integration
     */
    spec: pulumi.Input<inputs.IntegrationSpec>;
}
