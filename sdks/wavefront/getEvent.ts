// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getEvent(args: GetEventArgs, opts?: pulumi.InvokeOptions): Promise<GetEventResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("wavefront:index/getEvent:getEvent", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getEvent.
 */
export interface GetEventArgs {
    id: string;
}

/**
 * A collection of values returned by getEvent.
 */
export interface GetEventResult {
    readonly annotations: {[key: string]: string};
    readonly details: string;
    readonly endtimeKey: number;
    readonly id: string;
    readonly isEphemeral: boolean;
    readonly name: string;
    readonly severity: string;
    readonly startTime: number;
    readonly tags: string[];
    readonly type: string;
}
export function getEventOutput(args: GetEventOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventResult> {
    return pulumi.output(args).apply((a: any) => getEvent(a, opts))
}

/**
 * A collection of arguments for invoking getEvent.
 */
export interface GetEventOutputArgs {
    id: pulumi.Input<string>;
}
