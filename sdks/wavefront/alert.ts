// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Alert extends pulumi.CustomResource {
    /**
     * Get an existing Alert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertState, opts?: pulumi.CustomResourceOptions): Alert {
        return new Alert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/alert:Alert';

    /**
     * Returns true if the given object is an instance of Alert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Alert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Alert.__pulumiType;
    }

    public readonly additionalInformation!: pulumi.Output<string | undefined>;
    public readonly alertTriageDashboards!: pulumi.Output<outputs.AlertAlertTriageDashboard[] | undefined>;
    public readonly alertType!: pulumi.Output<string | undefined>;
    public readonly canModifies!: pulumi.Output<string[]>;
    public readonly canViews!: pulumi.Output<string[] | undefined>;
    public readonly condition!: pulumi.Output<string | undefined>;
    public readonly conditions!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly displayExpression!: pulumi.Output<string | undefined>;
    public readonly minutes!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly notificationResendFrequencyMinutes!: pulumi.Output<number | undefined>;
    public readonly processRateMinutes!: pulumi.Output<number | undefined>;
    public readonly resolveAfterMinutes!: pulumi.Output<number | undefined>;
    public readonly runbookLinks!: pulumi.Output<string[] | undefined>;
    public readonly severity!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<string[]>;
    public readonly target!: pulumi.Output<string | undefined>;
    public readonly thresholdTargets!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Alert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertArgs | AlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertState | undefined;
            resourceInputs["additionalInformation"] = state ? state.additionalInformation : undefined;
            resourceInputs["alertTriageDashboards"] = state ? state.alertTriageDashboards : undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["canModifies"] = state ? state.canModifies : undefined;
            resourceInputs["canViews"] = state ? state.canViews : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["displayExpression"] = state ? state.displayExpression : undefined;
            resourceInputs["minutes"] = state ? state.minutes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationResendFrequencyMinutes"] = state ? state.notificationResendFrequencyMinutes : undefined;
            resourceInputs["processRateMinutes"] = state ? state.processRateMinutes : undefined;
            resourceInputs["resolveAfterMinutes"] = state ? state.resolveAfterMinutes : undefined;
            resourceInputs["runbookLinks"] = state ? state.runbookLinks : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["thresholdTargets"] = state ? state.thresholdTargets : undefined;
        } else {
            const args = argsOrState as AlertArgs | undefined;
            if ((!args || args.minutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minutes'");
            }
            if ((!args || args.tags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tags'");
            }
            resourceInputs["additionalInformation"] = args ? args.additionalInformation : undefined;
            resourceInputs["alertTriageDashboards"] = args ? args.alertTriageDashboards : undefined;
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["canModifies"] = args ? args.canModifies : undefined;
            resourceInputs["canViews"] = args ? args.canViews : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["displayExpression"] = args ? args.displayExpression : undefined;
            resourceInputs["minutes"] = args ? args.minutes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationResendFrequencyMinutes"] = args ? args.notificationResendFrequencyMinutes : undefined;
            resourceInputs["processRateMinutes"] = args ? args.processRateMinutes : undefined;
            resourceInputs["resolveAfterMinutes"] = args ? args.resolveAfterMinutes : undefined;
            resourceInputs["runbookLinks"] = args ? args.runbookLinks : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["thresholdTargets"] = args ? args.thresholdTargets : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Alert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Alert resources.
 */
export interface AlertState {
    additionalInformation?: pulumi.Input<string>;
    alertTriageDashboards?: pulumi.Input<pulumi.Input<inputs.AlertAlertTriageDashboard>[]>;
    alertType?: pulumi.Input<string>;
    canModifies?: pulumi.Input<pulumi.Input<string>[]>;
    canViews?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    conditions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayExpression?: pulumi.Input<string>;
    minutes?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    notificationResendFrequencyMinutes?: pulumi.Input<number>;
    processRateMinutes?: pulumi.Input<number>;
    resolveAfterMinutes?: pulumi.Input<number>;
    runbookLinks?: pulumi.Input<pulumi.Input<string>[]>;
    severity?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
    thresholdTargets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Alert resource.
 */
export interface AlertArgs {
    additionalInformation?: pulumi.Input<string>;
    alertTriageDashboards?: pulumi.Input<pulumi.Input<inputs.AlertAlertTriageDashboard>[]>;
    alertType?: pulumi.Input<string>;
    canModifies?: pulumi.Input<pulumi.Input<string>[]>;
    canViews?: pulumi.Input<pulumi.Input<string>[]>;
    condition?: pulumi.Input<string>;
    conditions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    displayExpression?: pulumi.Input<string>;
    minutes: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    notificationResendFrequencyMinutes?: pulumi.Input<number>;
    processRateMinutes?: pulumi.Input<number>;
    resolveAfterMinutes?: pulumi.Input<number>;
    runbookLinks?: pulumi.Input<pulumi.Input<string>[]>;
    severity?: pulumi.Input<string>;
    tags: pulumi.Input<pulumi.Input<string>[]>;
    target?: pulumi.Input<string>;
    thresholdTargets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
