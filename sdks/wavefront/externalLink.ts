// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ExternalLink extends pulumi.CustomResource {
    /**
     * Get an existing ExternalLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExternalLinkState, opts?: pulumi.CustomResourceOptions): ExternalLink {
        return new ExternalLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'wavefront:index/externalLink:ExternalLink';

    /**
     * Returns true if the given object is an instance of ExternalLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExternalLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExternalLink.__pulumiType;
    }

    public readonly description!: pulumi.Output<string>;
    public readonly isLogIntegration!: pulumi.Output<boolean | undefined>;
    public readonly metricFilterRegex!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly pointTagFilterRegexes!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly sourceFilterRegex!: pulumi.Output<string | undefined>;
    public readonly template!: pulumi.Output<string>;

    /**
     * Create a ExternalLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExternalLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExternalLinkArgs | ExternalLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExternalLinkState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isLogIntegration"] = state ? state.isLogIntegration : undefined;
            resourceInputs["metricFilterRegex"] = state ? state.metricFilterRegex : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pointTagFilterRegexes"] = state ? state.pointTagFilterRegexes : undefined;
            resourceInputs["sourceFilterRegex"] = state ? state.sourceFilterRegex : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as ExternalLinkArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isLogIntegration"] = args ? args.isLogIntegration : undefined;
            resourceInputs["metricFilterRegex"] = args ? args.metricFilterRegex : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pointTagFilterRegexes"] = args ? args.pointTagFilterRegexes : undefined;
            resourceInputs["sourceFilterRegex"] = args ? args.sourceFilterRegex : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExternalLink.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ExternalLink resources.
 */
export interface ExternalLinkState {
    description?: pulumi.Input<string>;
    isLogIntegration?: pulumi.Input<boolean>;
    metricFilterRegex?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pointTagFilterRegexes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sourceFilterRegex?: pulumi.Input<string>;
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExternalLink resource.
 */
export interface ExternalLinkArgs {
    description: pulumi.Input<string>;
    isLogIntegration?: pulumi.Input<boolean>;
    metricFilterRegex?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pointTagFilterRegexes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sourceFilterRegex?: pulumi.Input<string>;
    template: pulumi.Input<string>;
}
