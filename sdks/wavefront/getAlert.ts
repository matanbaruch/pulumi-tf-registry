// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getAlert(args: GetAlertArgs, opts?: pulumi.InvokeOptions): Promise<GetAlertResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("wavefront:index/getAlert:getAlert", {
        "id": args.id,
        "targets": args.targets,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAlert.
 */
export interface GetAlertArgs {
    id: string;
    targets?: {[key: string]: string};
}

/**
 * A collection of values returned by getAlert.
 */
export interface GetAlertResult {
    readonly additionalInformation: string;
    readonly alertTriageDashboards: outputs.GetAlertAlertTriageDashboard[];
    readonly alertType: string;
    readonly canModifies: string[];
    readonly canViews: string[];
    readonly condition: string;
    readonly conditions: {[key: string]: string};
    readonly displayExpression: string;
    readonly evaluateRealtimeData: boolean;
    readonly failingHostLabelPairs: outputs.GetAlertFailingHostLabelPair[];
    readonly id: string;
    readonly inMaintenanceHostLabelPairs: outputs.GetAlertInMaintenanceHostLabelPair[];
    readonly includeObsoleteMetrics: boolean;
    readonly minutes: number;
    readonly name: string;
    readonly notificationResendFrequencyMinutes: number;
    readonly processRateMinutes: number;
    readonly resolveAfterMinutes: number;
    readonly runbookLinks: string[];
    readonly severity: string;
    readonly severityLists: string[];
    readonly statuses: string[];
    readonly tags: string[];
    readonly target: string;
    readonly targets?: {[key: string]: string};
}
export function getAlertOutput(args: GetAlertOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAlertResult> {
    return pulumi.output(args).apply((a: any) => getAlert(a, opts))
}

/**
 * A collection of arguments for invoking getAlert.
 */
export interface GetAlertOutputArgs {
    id: pulumi.Input<string>;
    targets?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
