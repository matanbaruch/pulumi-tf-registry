// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDeployment(args: GetDeploymentArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ec:index/getDeployment:getDeployment", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDeployment.
 */
export interface GetDeploymentArgs {
    id: string;
}

/**
 * A collection of values returned by getDeployment.
 */
export interface GetDeploymentResult {
    readonly alias: string;
    readonly apms: outputs.GetDeploymentApm[];
    readonly deploymentTemplateId: string;
    readonly elasticsearches: outputs.GetDeploymentElasticsearch[];
    readonly enterpriseSearches: outputs.GetDeploymentEnterpriseSearch[];
    readonly healthy: boolean;
    readonly id: string;
    readonly integrationsServers: outputs.GetDeploymentIntegrationsServer[];
    readonly kibanas: outputs.GetDeploymentKibana[];
    readonly name: string;
    readonly observabilities: outputs.GetDeploymentObservability[];
    readonly region: string;
    readonly tags: {[key: string]: string};
    readonly trafficFilters: string[];
}
export function getDeploymentOutput(args: GetDeploymentOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentResult> {
    return pulumi.output(args).apply((a: any) => getDeployment(a, opts))
}

/**
 * A collection of arguments for invoking getDeployment.
 */
export interface GetDeploymentOutputArgs {
    id: pulumi.Input<string>;
}
