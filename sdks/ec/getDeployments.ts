// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDeployments(args?: GetDeploymentsArgs, opts?: pulumi.InvokeOptions): Promise<GetDeploymentsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ec:index/getDeployments:getDeployments", {
        "apms": args.apms,
        "deploymentTemplateId": args.deploymentTemplateId,
        "elasticsearches": args.elasticsearches,
        "enterpriseSearches": args.enterpriseSearches,
        "healthy": args.healthy,
        "integrationsServers": args.integrationsServers,
        "kibanas": args.kibanas,
        "name": args.name,
        "namePrefix": args.namePrefix,
        "size": args.size,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDeployments.
 */
export interface GetDeploymentsArgs {
    apms?: inputs.GetDeploymentsApm[];
    deploymentTemplateId?: string;
    elasticsearches?: inputs.GetDeploymentsElasticsearch[];
    enterpriseSearches?: inputs.GetDeploymentsEnterpriseSearch[];
    healthy?: string;
    integrationsServers?: inputs.GetDeploymentsIntegrationsServer[];
    kibanas?: inputs.GetDeploymentsKibana[];
    name?: string;
    namePrefix?: string;
    size?: number;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getDeployments.
 */
export interface GetDeploymentsResult {
    readonly apms?: outputs.GetDeploymentsApm[];
    readonly deploymentTemplateId?: string;
    readonly deployments: outputs.GetDeploymentsDeployment[];
    readonly elasticsearches?: outputs.GetDeploymentsElasticsearch[];
    readonly enterpriseSearches?: outputs.GetDeploymentsEnterpriseSearch[];
    readonly healthy?: string;
    readonly id: string;
    readonly integrationsServers?: outputs.GetDeploymentsIntegrationsServer[];
    readonly kibanas?: outputs.GetDeploymentsKibana[];
    readonly name?: string;
    readonly namePrefix?: string;
    readonly returnCount: number;
    readonly size?: number;
    readonly tags?: {[key: string]: string};
}
export function getDeploymentsOutput(args?: GetDeploymentsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDeploymentsResult> {
    return pulumi.output(args).apply((a: any) => getDeployments(a, opts))
}

/**
 * A collection of arguments for invoking getDeployments.
 */
export interface GetDeploymentsOutputArgs {
    apms?: pulumi.Input<pulumi.Input<inputs.GetDeploymentsApmArgs>[]>;
    deploymentTemplateId?: pulumi.Input<string>;
    elasticsearches?: pulumi.Input<pulumi.Input<inputs.GetDeploymentsElasticsearchArgs>[]>;
    enterpriseSearches?: pulumi.Input<pulumi.Input<inputs.GetDeploymentsEnterpriseSearchArgs>[]>;
    healthy?: pulumi.Input<string>;
    integrationsServers?: pulumi.Input<pulumi.Input<inputs.GetDeploymentsIntegrationsServerArgs>[]>;
    kibanas?: pulumi.Input<pulumi.Input<inputs.GetDeploymentsKibanaArgs>[]>;
    name?: pulumi.Input<string>;
    namePrefix?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
