// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getVolumes(args?: GetVolumesArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nomad:index/getVolumes:getVolumes", {
        "id": args.id,
        "namespace": args.namespace,
        "nodeId": args.nodeId,
        "pluginId": args.pluginId,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesArgs {
    id?: string;
    namespace?: string;
    nodeId?: string;
    pluginId?: string;
    type?: string;
}

/**
 * A collection of values returned by getVolumes.
 */
export interface GetVolumesResult {
    readonly id: string;
    readonly namespace?: string;
    readonly nodeId?: string;
    readonly pluginId?: string;
    readonly type?: string;
    readonly volumes: {[key: string]: string}[];
}
export function getVolumesOutput(args?: GetVolumesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVolumesResult> {
    return pulumi.output(args).apply((a: any) => getVolumes(a, opts))
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesOutputArgs {
    id?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    nodeId?: pulumi.Input<string>;
    pluginId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
