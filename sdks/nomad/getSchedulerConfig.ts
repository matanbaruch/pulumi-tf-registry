// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getSchedulerConfig(args?: GetSchedulerConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetSchedulerConfigResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("nomad:index/getSchedulerConfig:getSchedulerConfig", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSchedulerConfig.
 */
export interface GetSchedulerConfigArgs {
    id?: string;
}

/**
 * A collection of values returned by getSchedulerConfig.
 */
export interface GetSchedulerConfigResult {
    readonly id: string;
    readonly memoryOversubscriptionEnabled: boolean;
    readonly preemptionConfig: {[key: string]: boolean};
    readonly schedulerAlgorithm: string;
}
export function getSchedulerConfigOutput(args?: GetSchedulerConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSchedulerConfigResult> {
    return pulumi.output(args).apply((a: any) => getSchedulerConfig(a, opts))
}

/**
 * A collection of arguments for invoking getSchedulerConfig.
 */
export interface GetSchedulerConfigOutputArgs {
    id?: pulumi.Input<string>;
}
