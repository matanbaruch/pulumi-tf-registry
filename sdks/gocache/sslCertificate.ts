// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SslCertificate extends pulumi.CustomResource {
    /**
     * Get an existing SslCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslCertificateState, opts?: pulumi.CustomResourceOptions): SslCertificate {
        return new SslCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gocache:index/sslCertificate:SslCertificate';

    /**
     * Returns true if the given object is an instance of SslCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslCertificate.__pulumiType;
    }

    public readonly certificate!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean>;
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    public /*out*/ readonly issueDate!: pulumi.Output<string>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string>;

    /**
     * Create a SslCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslCertificateArgs | SslCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslCertificateState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["issueDate"] = state ? state.issueDate : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
        } else {
            const args = argsOrState as SslCertificateArgs | undefined;
            if ((!args || args.certificate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.privateKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["issueDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SslCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SslCertificate resources.
 */
export interface SslCertificateState {
    certificate?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    expirationDate?: pulumi.Input<string>;
    issueDate?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslCertificate resource.
 */
export interface SslCertificateArgs {
    certificate: pulumi.Input<string>;
    domain: pulumi.Input<string>;
    enabled: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    privateKey: pulumi.Input<string>;
}
