// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainDnssecArgs, DomainDnssecState } from "./domainDnssec";
export type DomainDnssec = import("./domainDnssec").DomainDnssec;
export const DomainDnssec: typeof import("./domainDnssec").DomainDnssec = null as any;
utilities.lazyLoad(exports, ["DomainDnssec"], () => require("./domainDnssec"));

export { GetIpRangesArgs, GetIpRangesResult, GetIpRangesOutputArgs } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RecordArgs, RecordState } from "./record";
export type Record = import("./record").Record;
export const Record: typeof import("./record").Record = null as any;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));

export { SmartRulesFirewallArgs, SmartRulesFirewallState } from "./smartRulesFirewall";
export type SmartRulesFirewall = import("./smartRulesFirewall").SmartRulesFirewall;
export const SmartRulesFirewall: typeof import("./smartRulesFirewall").SmartRulesFirewall = null as any;
utilities.lazyLoad(exports, ["SmartRulesFirewall"], () => require("./smartRulesFirewall"));

export { SmartRulesRatelimitArgs, SmartRulesRatelimitState } from "./smartRulesRatelimit";
export type SmartRulesRatelimit = import("./smartRulesRatelimit").SmartRulesRatelimit;
export const SmartRulesRatelimit: typeof import("./smartRulesRatelimit").SmartRulesRatelimit = null as any;
utilities.lazyLoad(exports, ["SmartRulesRatelimit"], () => require("./smartRulesRatelimit"));

export { SmartRulesRewriteArgs, SmartRulesRewriteState } from "./smartRulesRewrite";
export type SmartRulesRewrite = import("./smartRulesRewrite").SmartRulesRewrite;
export const SmartRulesRewrite: typeof import("./smartRulesRewrite").SmartRulesRewrite = null as any;
utilities.lazyLoad(exports, ["SmartRulesRewrite"], () => require("./smartRulesRewrite"));

export { SmartRulesSettingsArgs, SmartRulesSettingsState } from "./smartRulesSettings";
export type SmartRulesSettings = import("./smartRulesSettings").SmartRulesSettings;
export const SmartRulesSettings: typeof import("./smartRulesSettings").SmartRulesSettings = null as any;
utilities.lazyLoad(exports, ["SmartRulesSettings"], () => require("./smartRulesSettings"));

export { SslCertificateArgs, SslCertificateState } from "./sslCertificate";
export type SslCertificate = import("./sslCertificate").SslCertificate;
export const SslCertificate: typeof import("./sslCertificate").SslCertificate = null as any;
utilities.lazyLoad(exports, ["SslCertificate"], () => require("./sslCertificate"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "gocache:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "gocache:index/domainDnssec:DomainDnssec":
                return new DomainDnssec(name, <any>undefined, { urn })
            case "gocache:index/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "gocache:index/smartRulesFirewall:SmartRulesFirewall":
                return new SmartRulesFirewall(name, <any>undefined, { urn })
            case "gocache:index/smartRulesRatelimit:SmartRulesRatelimit":
                return new SmartRulesRatelimit(name, <any>undefined, { urn })
            case "gocache:index/smartRulesRewrite:SmartRulesRewrite":
                return new SmartRulesRewrite(name, <any>undefined, { urn })
            case "gocache:index/smartRulesSettings:SmartRulesSettings":
                return new SmartRulesSettings(name, <any>undefined, { urn })
            case "gocache:index/sslCertificate:SslCertificate":
                return new SslCertificate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("gocache", "index/domain", _module)
pulumi.runtime.registerResourceModule("gocache", "index/domainDnssec", _module)
pulumi.runtime.registerResourceModule("gocache", "index/record", _module)
pulumi.runtime.registerResourceModule("gocache", "index/smartRulesFirewall", _module)
pulumi.runtime.registerResourceModule("gocache", "index/smartRulesRatelimit", _module)
pulumi.runtime.registerResourceModule("gocache", "index/smartRulesRewrite", _module)
pulumi.runtime.registerResourceModule("gocache", "index/smartRulesSettings", _module)
pulumi.runtime.registerResourceModule("gocache", "index/sslCertificate", _module)
pulumi.runtime.registerResourcePackage("gocache", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:gocache") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
