// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DomainDnssec extends pulumi.CustomResource {
    /**
     * Get an existing DomainDnssec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainDnssecState, opts?: pulumi.CustomResourceOptions): DomainDnssec {
        return new DomainDnssec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'gocache:index/domainDnssec:DomainDnssec';

    /**
     * Returns true if the given object is an instance of DomainDnssec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainDnssec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainDnssec.__pulumiType;
    }

    public /*out*/ readonly algorithm!: pulumi.Output<number>;
    public /*out*/ readonly digest!: pulumi.Output<string>;
    public /*out*/ readonly digestType!: pulumi.Output<number>;
    public /*out*/ readonly digestTypeName!: pulumi.Output<string>;
    public readonly domain!: pulumi.Output<string>;
    public /*out*/ readonly keyTag!: pulumi.Output<number>;
    public readonly lastUpdated!: pulumi.Output<string>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;

    /**
     * Create a DomainDnssec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainDnssecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainDnssecArgs | DomainDnssecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainDnssecState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["digest"] = state ? state.digest : undefined;
            resourceInputs["digestType"] = state ? state.digestType : undefined;
            resourceInputs["digestTypeName"] = state ? state.digestTypeName : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["keyTag"] = state ? state.keyTag : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as DomainDnssecArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["lastUpdated"] = args ? args.lastUpdated : undefined;
            resourceInputs["algorithm"] = undefined /*out*/;
            resourceInputs["digest"] = undefined /*out*/;
            resourceInputs["digestType"] = undefined /*out*/;
            resourceInputs["digestTypeName"] = undefined /*out*/;
            resourceInputs["keyTag"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainDnssec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DomainDnssec resources.
 */
export interface DomainDnssecState {
    algorithm?: pulumi.Input<number>;
    digest?: pulumi.Input<string>;
    digestType?: pulumi.Input<number>;
    digestTypeName?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    keyTag?: pulumi.Input<number>;
    lastUpdated?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DomainDnssec resource.
 */
export interface DomainDnssecArgs {
    domain: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
}
