// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketState, opts?: pulumi.CustomResourceOptions): Bucket {
        return new Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'couchbase-capella:index/bucket:Bucket';

    /**
     * Returns true if the given object is an instance of Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bucket.__pulumiType;
    }

    public readonly bucketConflictResolution!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly durabilityLevel!: pulumi.Output<string>;
    public readonly evictionPolicy!: pulumi.Output<string>;
    public readonly flush!: pulumi.Output<boolean>;
    public readonly memoryAllocationInMb!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly organizationId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly replicas!: pulumi.Output<number>;
    public /*out*/ readonly stats!: pulumi.Output<outputs.BucketStats>;
    public readonly storageBackend!: pulumi.Output<string>;
    public readonly timeToLiveInSeconds!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketArgs | BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketState | undefined;
            resourceInputs["bucketConflictResolution"] = state ? state.bucketConflictResolution : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["durabilityLevel"] = state ? state.durabilityLevel : undefined;
            resourceInputs["evictionPolicy"] = state ? state.evictionPolicy : undefined;
            resourceInputs["flush"] = state ? state.flush : undefined;
            resourceInputs["memoryAllocationInMb"] = state ? state.memoryAllocationInMb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["stats"] = state ? state.stats : undefined;
            resourceInputs["storageBackend"] = state ? state.storageBackend : undefined;
            resourceInputs["timeToLiveInSeconds"] = state ? state.timeToLiveInSeconds : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as BucketArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["bucketConflictResolution"] = args ? args.bucketConflictResolution : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["durabilityLevel"] = args ? args.durabilityLevel : undefined;
            resourceInputs["evictionPolicy"] = args ? args.evictionPolicy : undefined;
            resourceInputs["flush"] = args ? args.flush : undefined;
            resourceInputs["memoryAllocationInMb"] = args ? args.memoryAllocationInMb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["storageBackend"] = args ? args.storageBackend : undefined;
            resourceInputs["timeToLiveInSeconds"] = args ? args.timeToLiveInSeconds : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["stats"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bucket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Bucket resources.
 */
export interface BucketState {
    bucketConflictResolution?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    durabilityLevel?: pulumi.Input<string>;
    evictionPolicy?: pulumi.Input<string>;
    flush?: pulumi.Input<boolean>;
    memoryAllocationInMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    stats?: pulumi.Input<inputs.BucketStats>;
    storageBackend?: pulumi.Input<string>;
    timeToLiveInSeconds?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Bucket resource.
 */
export interface BucketArgs {
    bucketConflictResolution?: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    durabilityLevel?: pulumi.Input<string>;
    evictionPolicy?: pulumi.Input<string>;
    flush?: pulumi.Input<boolean>;
    memoryAllocationInMb?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    storageBackend?: pulumi.Input<string>;
    timeToLiveInSeconds?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}
