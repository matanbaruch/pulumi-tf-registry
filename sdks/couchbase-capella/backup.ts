// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupState, opts?: pulumi.CustomResourceOptions): Backup {
        return new Backup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'couchbase-capella:index/backup:Backup';

    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }

    public /*out*/ readonly backupStats!: pulumi.Output<outputs.BackupBackupStats>;
    public readonly bucketId!: pulumi.Output<string>;
    public /*out*/ readonly bucketName!: pulumi.Output<string>;
    public /*out*/ readonly cloudProvider!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly cycleId!: pulumi.Output<string>;
    public /*out*/ readonly date!: pulumi.Output<string>;
    public /*out*/ readonly elapsedTimeInSeconds!: pulumi.Output<number>;
    public /*out*/ readonly method!: pulumi.Output<string>;
    public readonly organizationId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly restore!: pulumi.Output<outputs.BackupRestore | undefined>;
    public readonly restoreBefore!: pulumi.Output<string>;
    public readonly restoreTimes!: pulumi.Output<number | undefined>;
    public /*out*/ readonly scheduleInfo!: pulumi.Output<outputs.BackupScheduleInfo>;
    public /*out*/ readonly source!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Backup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupArgs | BackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupState | undefined;
            resourceInputs["backupStats"] = state ? state.backupStats : undefined;
            resourceInputs["bucketId"] = state ? state.bucketId : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["cycleId"] = state ? state.cycleId : undefined;
            resourceInputs["date"] = state ? state.date : undefined;
            resourceInputs["elapsedTimeInSeconds"] = state ? state.elapsedTimeInSeconds : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["restore"] = state ? state.restore : undefined;
            resourceInputs["restoreBefore"] = state ? state.restoreBefore : undefined;
            resourceInputs["restoreTimes"] = state ? state.restoreTimes : undefined;
            resourceInputs["scheduleInfo"] = state ? state.scheduleInfo : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as BackupArgs | undefined;
            if ((!args || args.bucketId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketId'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["bucketId"] = args ? args.bucketId : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["restore"] = args ? args.restore : undefined;
            resourceInputs["restoreBefore"] = args ? args.restoreBefore : undefined;
            resourceInputs["restoreTimes"] = args ? args.restoreTimes : undefined;
            resourceInputs["backupStats"] = undefined /*out*/;
            resourceInputs["bucketName"] = undefined /*out*/;
            resourceInputs["cloudProvider"] = undefined /*out*/;
            resourceInputs["cycleId"] = undefined /*out*/;
            resourceInputs["date"] = undefined /*out*/;
            resourceInputs["elapsedTimeInSeconds"] = undefined /*out*/;
            resourceInputs["method"] = undefined /*out*/;
            resourceInputs["scheduleInfo"] = undefined /*out*/;
            resourceInputs["source"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Backup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Backup resources.
 */
export interface BackupState {
    backupStats?: pulumi.Input<inputs.BackupBackupStats>;
    bucketId?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    cloudProvider?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    cycleId?: pulumi.Input<string>;
    date?: pulumi.Input<string>;
    elapsedTimeInSeconds?: pulumi.Input<number>;
    method?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.BackupRestore>;
    restoreBefore?: pulumi.Input<string>;
    restoreTimes?: pulumi.Input<number>;
    scheduleInfo?: pulumi.Input<inputs.BackupScheduleInfo>;
    source?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backup resource.
 */
export interface BackupArgs {
    bucketId: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.BackupRestore>;
    restoreBefore?: pulumi.Input<string>;
    restoreTimes?: pulumi.Input<number>;
}
