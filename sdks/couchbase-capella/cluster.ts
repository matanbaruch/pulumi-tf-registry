// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'couchbase-capella:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public /*out*/ readonly appServiceId!: pulumi.Output<string>;
    public /*out*/ readonly audit!: pulumi.Output<outputs.ClusterAudit>;
    public readonly availability!: pulumi.Output<outputs.ClusterAvailability>;
    public readonly cloudProvider!: pulumi.Output<outputs.ClusterCloudProvider>;
    public readonly configurationType!: pulumi.Output<string>;
    public readonly couchbaseServer!: pulumi.Output<outputs.ClusterCouchbaseServer>;
    public /*out*/ readonly currentState!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly etag!: pulumi.Output<string>;
    public readonly ifMatch!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly organizationId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly serviceGroups!: pulumi.Output<outputs.ClusterServiceGroup[]>;
    public readonly support!: pulumi.Output<outputs.ClusterSupport>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["appServiceId"] = state ? state.appServiceId : undefined;
            resourceInputs["audit"] = state ? state.audit : undefined;
            resourceInputs["availability"] = state ? state.availability : undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["configurationType"] = state ? state.configurationType : undefined;
            resourceInputs["couchbaseServer"] = state ? state.couchbaseServer : undefined;
            resourceInputs["currentState"] = state ? state.currentState : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["ifMatch"] = state ? state.ifMatch : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serviceGroups"] = state ? state.serviceGroups : undefined;
            resourceInputs["support"] = state ? state.support : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.availability === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availability'");
            }
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.serviceGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceGroups'");
            }
            if ((!args || args.support === undefined) && !opts.urn) {
                throw new Error("Missing required property 'support'");
            }
            resourceInputs["availability"] = args ? args.availability : undefined;
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["configurationType"] = args ? args.configurationType : undefined;
            resourceInputs["couchbaseServer"] = args ? args.couchbaseServer : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ifMatch"] = args ? args.ifMatch : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["serviceGroups"] = args ? args.serviceGroups : undefined;
            resourceInputs["support"] = args ? args.support : undefined;
            resourceInputs["appServiceId"] = undefined /*out*/;
            resourceInputs["audit"] = undefined /*out*/;
            resourceInputs["currentState"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    appServiceId?: pulumi.Input<string>;
    audit?: pulumi.Input<inputs.ClusterAudit>;
    availability?: pulumi.Input<inputs.ClusterAvailability>;
    cloudProvider?: pulumi.Input<inputs.ClusterCloudProvider>;
    configurationType?: pulumi.Input<string>;
    couchbaseServer?: pulumi.Input<inputs.ClusterCouchbaseServer>;
    currentState?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    ifMatch?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    serviceGroups?: pulumi.Input<pulumi.Input<inputs.ClusterServiceGroup>[]>;
    support?: pulumi.Input<inputs.ClusterSupport>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    availability: pulumi.Input<inputs.ClusterAvailability>;
    cloudProvider: pulumi.Input<inputs.ClusterCloudProvider>;
    configurationType?: pulumi.Input<string>;
    couchbaseServer?: pulumi.Input<inputs.ClusterCouchbaseServer>;
    description?: pulumi.Input<string>;
    ifMatch?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    serviceGroups: pulumi.Input<pulumi.Input<inputs.ClusterServiceGroup>[]>;
    support: pulumi.Input<inputs.ClusterSupport>;
}
