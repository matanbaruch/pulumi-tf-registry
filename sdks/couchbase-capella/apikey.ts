// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Apikey extends pulumi.CustomResource {
    /**
     * Get an existing Apikey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApikeyState, opts?: pulumi.CustomResourceOptions): Apikey {
        return new Apikey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'couchbase-capella:index/apikey:Apikey';

    /**
     * Returns true if the given object is an instance of Apikey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Apikey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Apikey.__pulumiType;
    }

    public readonly allowedCidrs!: pulumi.Output<string[]>;
    public /*out*/ readonly audit!: pulumi.Output<outputs.ApikeyAudit>;
    public readonly description!: pulumi.Output<string>;
    public readonly expiry!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly organizationId!: pulumi.Output<string>;
    public readonly organizationRoles!: pulumi.Output<string[]>;
    public readonly resources!: pulumi.Output<outputs.ApikeyResource[] | undefined>;
    public readonly rotate!: pulumi.Output<number>;
    public readonly secret!: pulumi.Output<string>;
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a Apikey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApikeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApikeyArgs | ApikeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApikeyState | undefined;
            resourceInputs["allowedCidrs"] = state ? state.allowedCidrs : undefined;
            resourceInputs["audit"] = state ? state.audit : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiry"] = state ? state.expiry : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["organizationRoles"] = state ? state.organizationRoles : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["rotate"] = state ? state.rotate : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as ApikeyArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.organizationRoles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationRoles'");
            }
            resourceInputs["allowedCidrs"] = args ? args.allowedCidrs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiry"] = args ? args.expiry : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["organizationRoles"] = args ? args.organizationRoles : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["rotate"] = args ? args.rotate : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["audit"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secret", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Apikey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Apikey resources.
 */
export interface ApikeyState {
    allowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    audit?: pulumi.Input<inputs.ApikeyAudit>;
    description?: pulumi.Input<string>;
    expiry?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    organizationRoles?: pulumi.Input<pulumi.Input<string>[]>;
    resources?: pulumi.Input<pulumi.Input<inputs.ApikeyResource>[]>;
    rotate?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Apikey resource.
 */
export interface ApikeyArgs {
    allowedCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    expiry?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    organizationRoles: pulumi.Input<pulumi.Input<string>[]>;
    resources?: pulumi.Input<pulumi.Input<inputs.ApikeyResource>[]>;
    rotate?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
}
