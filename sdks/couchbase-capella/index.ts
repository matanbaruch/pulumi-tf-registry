// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AllowlistArgs, AllowlistState } from "./allowlist";
export type Allowlist = import("./allowlist").Allowlist;
export const Allowlist: typeof import("./allowlist").Allowlist = null as any;
utilities.lazyLoad(exports, ["Allowlist"], () => require("./allowlist"));

export { ApikeyArgs, ApikeyState } from "./apikey";
export type Apikey = import("./apikey").Apikey;
export const Apikey: typeof import("./apikey").Apikey = null as any;
utilities.lazyLoad(exports, ["Apikey"], () => require("./apikey"));

export { AppServiceArgs, AppServiceState } from "./appService";
export type AppService = import("./appService").AppService;
export const AppService: typeof import("./appService").AppService = null as any;
utilities.lazyLoad(exports, ["AppService"], () => require("./appService"));

export { AppServiceOnoffOndemandArgs, AppServiceOnoffOndemandState } from "./appServiceOnoffOndemand";
export type AppServiceOnoffOndemand = import("./appServiceOnoffOndemand").AppServiceOnoffOndemand;
export const AppServiceOnoffOndemand: typeof import("./appServiceOnoffOndemand").AppServiceOnoffOndemand = null as any;
utilities.lazyLoad(exports, ["AppServiceOnoffOndemand"], () => require("./appServiceOnoffOndemand"));

export { AuditLogExportArgs, AuditLogExportState } from "./auditLogExport";
export type AuditLogExport = import("./auditLogExport").AuditLogExport;
export const AuditLogExport: typeof import("./auditLogExport").AuditLogExport = null as any;
utilities.lazyLoad(exports, ["AuditLogExport"], () => require("./auditLogExport"));

export { AuditLogSettingsArgs, AuditLogSettingsState } from "./auditLogSettings";
export type AuditLogSettings = import("./auditLogSettings").AuditLogSettings;
export const AuditLogSettings: typeof import("./auditLogSettings").AuditLogSettings = null as any;
utilities.lazyLoad(exports, ["AuditLogSettings"], () => require("./auditLogSettings"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupScheduleArgs, BackupScheduleState } from "./backupSchedule";
export type BackupSchedule = import("./backupSchedule").BackupSchedule;
export const BackupSchedule: typeof import("./backupSchedule").BackupSchedule = null as any;
utilities.lazyLoad(exports, ["BackupSchedule"], () => require("./backupSchedule"));

export { BucketArgs, BucketState } from "./bucket";
export type Bucket = import("./bucket").Bucket;
export const Bucket: typeof import("./bucket").Bucket = null as any;
utilities.lazyLoad(exports, ["Bucket"], () => require("./bucket"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterOnoffOndemandArgs, ClusterOnoffOndemandState } from "./clusterOnoffOndemand";
export type ClusterOnoffOndemand = import("./clusterOnoffOndemand").ClusterOnoffOndemand;
export const ClusterOnoffOndemand: typeof import("./clusterOnoffOndemand").ClusterOnoffOndemand = null as any;
utilities.lazyLoad(exports, ["ClusterOnoffOndemand"], () => require("./clusterOnoffOndemand"));

export { ClusterOnoffScheduleArgs, ClusterOnoffScheduleState } from "./clusterOnoffSchedule";
export type ClusterOnoffSchedule = import("./clusterOnoffSchedule").ClusterOnoffSchedule;
export const ClusterOnoffSchedule: typeof import("./clusterOnoffSchedule").ClusterOnoffSchedule = null as any;
utilities.lazyLoad(exports, ["ClusterOnoffSchedule"], () => require("./clusterOnoffSchedule"));

export { CollectionArgs, CollectionState } from "./collection";
export type Collection = import("./collection").Collection;
export const Collection: typeof import("./collection").Collection = null as any;
utilities.lazyLoad(exports, ["Collection"], () => require("./collection"));

export { DatabaseCredentialArgs, DatabaseCredentialState } from "./databaseCredential";
export type DatabaseCredential = import("./databaseCredential").DatabaseCredential;
export const DatabaseCredential: typeof import("./databaseCredential").DatabaseCredential = null as any;
utilities.lazyLoad(exports, ["DatabaseCredential"], () => require("./databaseCredential"));

export { GetAllowlistsArgs, GetAllowlistsResult, GetAllowlistsOutputArgs } from "./getAllowlists";
export const getAllowlists: typeof import("./getAllowlists").getAllowlists = null as any;
export const getAllowlistsOutput: typeof import("./getAllowlists").getAllowlistsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowlists","getAllowlistsOutput"], () => require("./getAllowlists"));

export { GetApikeysArgs, GetApikeysResult, GetApikeysOutputArgs } from "./getApikeys";
export const getApikeys: typeof import("./getApikeys").getApikeys = null as any;
export const getApikeysOutput: typeof import("./getApikeys").getApikeysOutput = null as any;
utilities.lazyLoad(exports, ["getApikeys","getApikeysOutput"], () => require("./getApikeys"));

export { GetAppServicesArgs, GetAppServicesResult, GetAppServicesOutputArgs } from "./getAppServices";
export const getAppServices: typeof import("./getAppServices").getAppServices = null as any;
export const getAppServicesOutput: typeof import("./getAppServices").getAppServicesOutput = null as any;
utilities.lazyLoad(exports, ["getAppServices","getAppServicesOutput"], () => require("./getAppServices"));

export { GetAuditLogEventIdsArgs, GetAuditLogEventIdsResult, GetAuditLogEventIdsOutputArgs } from "./getAuditLogEventIds";
export const getAuditLogEventIds: typeof import("./getAuditLogEventIds").getAuditLogEventIds = null as any;
export const getAuditLogEventIdsOutput: typeof import("./getAuditLogEventIds").getAuditLogEventIdsOutput = null as any;
utilities.lazyLoad(exports, ["getAuditLogEventIds","getAuditLogEventIdsOutput"], () => require("./getAuditLogEventIds"));

export { GetAuditLogExportArgs, GetAuditLogExportResult, GetAuditLogExportOutputArgs } from "./getAuditLogExport";
export const getAuditLogExport: typeof import("./getAuditLogExport").getAuditLogExport = null as any;
export const getAuditLogExportOutput: typeof import("./getAuditLogExport").getAuditLogExportOutput = null as any;
utilities.lazyLoad(exports, ["getAuditLogExport","getAuditLogExportOutput"], () => require("./getAuditLogExport"));

export { GetAuditLogSettingsArgs, GetAuditLogSettingsResult, GetAuditLogSettingsOutputArgs } from "./getAuditLogSettings";
export const getAuditLogSettings: typeof import("./getAuditLogSettings").getAuditLogSettings = null as any;
export const getAuditLogSettingsOutput: typeof import("./getAuditLogSettings").getAuditLogSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAuditLogSettings","getAuditLogSettingsOutput"], () => require("./getAuditLogSettings"));

export { GetBackupsArgs, GetBackupsResult, GetBackupsOutputArgs } from "./getBackups";
export const getBackups: typeof import("./getBackups").getBackups = null as any;
export const getBackupsOutput: typeof import("./getBackups").getBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBackups","getBackupsOutput"], () => require("./getBackups"));

export { GetBucketsArgs, GetBucketsResult, GetBucketsOutputArgs } from "./getBuckets";
export const getBuckets: typeof import("./getBuckets").getBuckets = null as any;
export const getBucketsOutput: typeof import("./getBuckets").getBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getBuckets","getBucketsOutput"], () => require("./getBuckets"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetClusterOnoffScheduleArgs, GetClusterOnoffScheduleResult, GetClusterOnoffScheduleOutputArgs } from "./getClusterOnoffSchedule";
export const getClusterOnoffSchedule: typeof import("./getClusterOnoffSchedule").getClusterOnoffSchedule = null as any;
export const getClusterOnoffScheduleOutput: typeof import("./getClusterOnoffSchedule").getClusterOnoffScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getClusterOnoffSchedule","getClusterOnoffScheduleOutput"], () => require("./getClusterOnoffSchedule"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetCollectionsArgs, GetCollectionsResult, GetCollectionsOutputArgs } from "./getCollections";
export const getCollections: typeof import("./getCollections").getCollections = null as any;
export const getCollectionsOutput: typeof import("./getCollections").getCollectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCollections","getCollectionsOutput"], () => require("./getCollections"));

export { GetDatabaseCredentialsArgs, GetDatabaseCredentialsResult, GetDatabaseCredentialsOutputArgs } from "./getDatabaseCredentials";
export const getDatabaseCredentials: typeof import("./getDatabaseCredentials").getDatabaseCredentials = null as any;
export const getDatabaseCredentialsOutput: typeof import("./getDatabaseCredentials").getDatabaseCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseCredentials","getDatabaseCredentialsOutput"], () => require("./getDatabaseCredentials"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetSampleBucketsArgs, GetSampleBucketsResult, GetSampleBucketsOutputArgs } from "./getSampleBuckets";
export const getSampleBuckets: typeof import("./getSampleBuckets").getSampleBuckets = null as any;
export const getSampleBucketsOutput: typeof import("./getSampleBuckets").getSampleBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getSampleBuckets","getSampleBucketsOutput"], () => require("./getSampleBuckets"));

export { GetScopesArgs, GetScopesResult, GetScopesOutputArgs } from "./getScopes";
export const getScopes: typeof import("./getScopes").getScopes = null as any;
export const getScopesOutput: typeof import("./getScopes").getScopesOutput = null as any;
utilities.lazyLoad(exports, ["getScopes","getScopesOutput"], () => require("./getScopes"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SampleBucketArgs, SampleBucketState } from "./sampleBucket";
export type SampleBucket = import("./sampleBucket").SampleBucket;
export const SampleBucket: typeof import("./sampleBucket").SampleBucket = null as any;
utilities.lazyLoad(exports, ["SampleBucket"], () => require("./sampleBucket"));

export { ScopeArgs, ScopeState } from "./scope";
export type Scope = import("./scope").Scope;
export const Scope: typeof import("./scope").Scope = null as any;
utilities.lazyLoad(exports, ["Scope"], () => require("./scope"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "couchbase-capella:index/allowlist:Allowlist":
                return new Allowlist(name, <any>undefined, { urn })
            case "couchbase-capella:index/apikey:Apikey":
                return new Apikey(name, <any>undefined, { urn })
            case "couchbase-capella:index/appService:AppService":
                return new AppService(name, <any>undefined, { urn })
            case "couchbase-capella:index/appServiceOnoffOndemand:AppServiceOnoffOndemand":
                return new AppServiceOnoffOndemand(name, <any>undefined, { urn })
            case "couchbase-capella:index/auditLogExport:AuditLogExport":
                return new AuditLogExport(name, <any>undefined, { urn })
            case "couchbase-capella:index/auditLogSettings:AuditLogSettings":
                return new AuditLogSettings(name, <any>undefined, { urn })
            case "couchbase-capella:index/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "couchbase-capella:index/backupSchedule:BackupSchedule":
                return new BackupSchedule(name, <any>undefined, { urn })
            case "couchbase-capella:index/bucket:Bucket":
                return new Bucket(name, <any>undefined, { urn })
            case "couchbase-capella:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "couchbase-capella:index/clusterOnoffOndemand:ClusterOnoffOndemand":
                return new ClusterOnoffOndemand(name, <any>undefined, { urn })
            case "couchbase-capella:index/clusterOnoffSchedule:ClusterOnoffSchedule":
                return new ClusterOnoffSchedule(name, <any>undefined, { urn })
            case "couchbase-capella:index/collection:Collection":
                return new Collection(name, <any>undefined, { urn })
            case "couchbase-capella:index/databaseCredential:DatabaseCredential":
                return new DatabaseCredential(name, <any>undefined, { urn })
            case "couchbase-capella:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "couchbase-capella:index/sampleBucket:SampleBucket":
                return new SampleBucket(name, <any>undefined, { urn })
            case "couchbase-capella:index/scope:Scope":
                return new Scope(name, <any>undefined, { urn })
            case "couchbase-capella:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("couchbase-capella", "index/allowlist", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/apikey", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/appService", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/appServiceOnoffOndemand", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/auditLogExport", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/auditLogSettings", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/backup", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/backupSchedule", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/bucket", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/cluster", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/clusterOnoffOndemand", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/clusterOnoffSchedule", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/collection", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/databaseCredential", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/project", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/sampleBucket", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/scope", _module)
pulumi.runtime.registerResourceModule("couchbase-capella", "index/user", _module)
pulumi.runtime.registerResourcePackage("couchbase-capella", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:couchbase-capella") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
