// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBuckets(args: GetBucketsArgs, opts?: pulumi.InvokeOptions): Promise<GetBucketsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("couchbase-capella:index/getBuckets:getBuckets", {
        "clusterId": args.clusterId,
        "organizationId": args.organizationId,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBuckets.
 */
export interface GetBucketsArgs {
    clusterId: string;
    organizationId: string;
    projectId: string;
}

/**
 * A collection of values returned by getBuckets.
 */
export interface GetBucketsResult {
    readonly clusterId: string;
    readonly datas: outputs.GetBucketsData[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly organizationId: string;
    readonly projectId: string;
}
export function getBucketsOutput(args: GetBucketsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBucketsResult> {
    return pulumi.output(args).apply((a: any) => getBuckets(a, opts))
}

/**
 * A collection of arguments for invoking getBuckets.
 */
export interface GetBucketsOutputArgs {
    clusterId: pulumi.Input<string>;
    organizationId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
