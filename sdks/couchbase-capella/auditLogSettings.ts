// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AuditLogSettings extends pulumi.CustomResource {
    /**
     * Get an existing AuditLogSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditLogSettingsState, opts?: pulumi.CustomResourceOptions): AuditLogSettings {
        return new AuditLogSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'couchbase-capella:index/auditLogSettings:AuditLogSettings';

    /**
     * Returns true if the given object is an instance of AuditLogSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuditLogSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuditLogSettings.__pulumiType;
    }

    public readonly auditEnabled!: pulumi.Output<boolean>;
    public readonly clusterId!: pulumi.Output<string>;
    public readonly disabledUsers!: pulumi.Output<outputs.AuditLogSettingsDisabledUser[]>;
    public readonly enabledEventIds!: pulumi.Output<number[]>;
    public readonly organizationId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a AuditLogSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuditLogSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditLogSettingsArgs | AuditLogSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditLogSettingsState | undefined;
            resourceInputs["auditEnabled"] = state ? state.auditEnabled : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["disabledUsers"] = state ? state.disabledUsers : undefined;
            resourceInputs["enabledEventIds"] = state ? state.enabledEventIds : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as AuditLogSettingsArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["auditEnabled"] = args ? args.auditEnabled : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["disabledUsers"] = args ? args.disabledUsers : undefined;
            resourceInputs["enabledEventIds"] = args ? args.enabledEventIds : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuditLogSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuditLogSettings resources.
 */
export interface AuditLogSettingsState {
    auditEnabled?: pulumi.Input<boolean>;
    clusterId?: pulumi.Input<string>;
    disabledUsers?: pulumi.Input<pulumi.Input<inputs.AuditLogSettingsDisabledUser>[]>;
    enabledEventIds?: pulumi.Input<pulumi.Input<number>[]>;
    organizationId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuditLogSettings resource.
 */
export interface AuditLogSettingsArgs {
    auditEnabled?: pulumi.Input<boolean>;
    clusterId: pulumi.Input<string>;
    disabledUsers?: pulumi.Input<pulumi.Input<inputs.AuditLogSettingsDisabledUser>[]>;
    enabledEventIds?: pulumi.Input<pulumi.Input<number>[]>;
    organizationId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
