// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AllowlistAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface ApikeyAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface ApikeyResource {
    id: string;
    roles: string[];
    type: string;
}

export interface AppServiceAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface AppServiceCompute {
    cpu: number;
    ram: number;
}

export interface AuditLogSettingsDisabledUser {
    domain: string;
    name: string;
}

export interface BackupBackupStats {
    cbas: number;
    event: number;
    fts: number;
    gsi: number;
    items: number;
    mutations: number;
    sizeInMb: number;
    tombstones: number;
}

export interface BackupRestore {
    autoRemoveCollections?: boolean;
    excludeData?: string;
    filterKeys?: string;
    filterValues?: string;
    forceUpdates?: boolean;
    includeData?: string;
    mapData?: string;
    replaceTtl?: string;
    replaceTtlWith?: string;
    services: string[];
    sourceClusterId: string;
    status: string;
    targetClusterId: string;
}

export interface BackupScheduleInfo {
    backupTime: string;
    backupType: string;
    increment: number;
    retention: string;
}

export interface BackupScheduleWeeklySchedule {
    costOptimizedRetention: boolean;
    dayOfWeek: string;
    incrementalEvery: number;
    retentionTime: string;
    startAt: number;
}

export interface BucketStats {
    diskUsedInMib: number;
    itemCount: number;
    memoryUsedInMib: number;
    opsPerSecond: number;
}

export interface ClusterAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface ClusterAvailability {
    type: string;
}

export interface ClusterCloudProvider {
    cidr: string;
    region: string;
    type: string;
}

export interface ClusterCouchbaseServer {
    version: string;
}

export interface ClusterOnoffScheduleDay {
    day: string;
    from?: outputs.ClusterOnoffScheduleDayFrom;
    state: string;
    to?: outputs.ClusterOnoffScheduleDayTo;
}

export interface ClusterOnoffScheduleDayFrom {
    hour: number;
    minute: number;
}

export interface ClusterOnoffScheduleDayTo {
    hour: number;
    minute: number;
}

export interface ClusterServiceGroup {
    node: outputs.ClusterServiceGroupNode;
    numOfNodes: number;
    services: string[];
}

export interface ClusterServiceGroupNode {
    compute: outputs.ClusterServiceGroupNodeCompute;
    /**
     * The 'storage' and 'IOPS' fields are required for AWS. For Azure, only the 'disktype' field is required, and for Ultra, you can provide all three fields. In the case of GCP, only 'pd ssd' disk type is available, and you cannot set the 'IOPS' field.
     */
    disk: outputs.ClusterServiceGroupNodeDisk;
}

export interface ClusterServiceGroupNodeCompute {
    cpu: number;
    ram: number;
}

export interface ClusterServiceGroupNodeDisk {
    autoexpansion: boolean;
    iops: number;
    storage: number;
    type: string;
}

export interface ClusterSupport {
    plan: string;
    timezone: string;
}

export interface DatabaseCredentialAccess {
    privileges: string[];
    resources?: outputs.DatabaseCredentialAccessResources;
}

export interface DatabaseCredentialAccessResources {
    buckets?: outputs.DatabaseCredentialAccessResourcesBucket[];
}

export interface DatabaseCredentialAccessResourcesBucket {
    name: string;
    scopes?: outputs.DatabaseCredentialAccessResourcesBucketScope[];
}

export interface DatabaseCredentialAccessResourcesBucketScope {
    collections?: string[];
    name: string;
}

export interface DatabaseCredentialAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetAllowlistsData {
    audit: outputs.GetAllowlistsDataAudit;
    cidr: string;
    clusterId: string;
    comment: string;
    expiresAt: string;
    id: string;
    organizationId: string;
    projectId: string;
}

export interface GetAllowlistsDataAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetApikeysData {
    allowedCidrs: string[];
    audit: outputs.GetApikeysDataAudit;
    description: string;
    expiry: number;
    id: string;
    name: string;
    organizationId: string;
    organizationRoles: string[];
    resources: outputs.GetApikeysDataResource[];
}

export interface GetApikeysDataAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetApikeysDataResource {
    id: string;
    roles: string[];
    type: string;
}

export interface GetAppServicesData {
    audit: outputs.GetAppServicesDataAudit;
    cloudProvider: string;
    clusterId: string;
    compute: outputs.GetAppServicesDataCompute;
    currentState: string;
    description: string;
    id: string;
    name: string;
    nodes: number;
    organizationId: string;
    version: string;
}

export interface GetAppServicesDataAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetAppServicesDataCompute {
    cpu: number;
    ram: number;
}

export interface GetAuditLogEventIdsData {
    description: string;
    id: number;
    module: string;
    name: string;
}

export interface GetAuditLogExportData {
    auditLogDownloadUrl: string;
    clusterId: string;
    createdAt: string;
    end: string;
    expiration: string;
    id: string;
    organizationId: string;
    projectId: string;
    start: string;
    status: string;
}

export interface GetAuditLogSettingsDisabledUser {
    domain: string;
    name: string;
}

export interface GetBackupsData {
    backupStats: outputs.GetBackupsDataBackupStats;
    bucketId: string;
    bucketName: string;
    cloudProvider: string;
    clusterId: string;
    cycleId: string;
    date: string;
    elapsedTimeInSeconds: number;
    id: string;
    method: string;
    organizationId: string;
    projectId: string;
    restoreBefore: string;
    scheduleInfo: outputs.GetBackupsDataScheduleInfo;
    source: string;
    status: string;
}

export interface GetBackupsDataBackupStats {
    cbas: number;
    event: number;
    fts: number;
    gsi: number;
    items: number;
    mutations: number;
    sizeInMb: number;
    tombstones: number;
}

export interface GetBackupsDataScheduleInfo {
    backupTime: string;
    backupType: string;
    increment: number;
    retention: string;
}

export interface GetBucketsData {
    bucketConflictResolution: string;
    clusterId: string;
    durabilityLevel: string;
    evictionPolicy: string;
    flush: boolean;
    id: string;
    memoryAllocationInMb: number;
    name: string;
    organizationId: string;
    projectId: string;
    replicas: number;
    stats: outputs.GetBucketsDataStats;
    storageBackend: string;
    timeToLiveInSeconds: number;
    type: string;
}

export interface GetBucketsDataStats {
    diskUsedInMib: number;
    itemCount: number;
    memoryUsedInMib: number;
    opsPerSecond: number;
}

export interface GetCertificateData {
    certificate: string;
}

export interface GetClusterOnoffScheduleDay {
    day: string;
    from?: outputs.GetClusterOnoffScheduleDayFrom;
    state: string;
    to?: outputs.GetClusterOnoffScheduleDayTo;
}

export interface GetClusterOnoffScheduleDayFrom {
    hour: number;
    minute: number;
}

export interface GetClusterOnoffScheduleDayTo {
    hour: number;
    minute: number;
}

export interface GetClustersData {
    appServiceId: string;
    audit: outputs.GetClustersDataAudit;
    availability: outputs.GetClustersDataAvailability;
    cloudProvider: outputs.GetClustersDataCloudProvider;
    couchbaseServer: outputs.GetClustersDataCouchbaseServer;
    currentState: string;
    description: string;
    id: string;
    name: string;
    organizationId: string;
    projectId: string;
    serviceGroups: outputs.GetClustersDataServiceGroup[];
    support: outputs.GetClustersDataSupport;
}

export interface GetClustersDataAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetClustersDataAvailability {
    type: string;
}

export interface GetClustersDataCloudProvider {
    cidr: string;
    region: string;
    type: string;
}

export interface GetClustersDataCouchbaseServer {
    version: string;
}

export interface GetClustersDataServiceGroup {
    node: outputs.GetClustersDataServiceGroupNode;
    numOfNodes: number;
    services: string[];
}

export interface GetClustersDataServiceGroupNode {
    compute: outputs.GetClustersDataServiceGroupNodeCompute;
    disk: outputs.GetClustersDataServiceGroupNodeDisk;
}

export interface GetClustersDataServiceGroupNodeCompute {
    cpu: number;
    ram: number;
}

export interface GetClustersDataServiceGroupNodeDisk {
    autoexpansion: boolean;
    iops: number;
    storage: number;
    type: string;
}

export interface GetClustersDataSupport {
    plan: string;
    timezone: string;
}

export interface GetCollectionsData {
    collectionName: string;
    maxTtl: number;
}

export interface GetDatabaseCredentialsData {
    accesses?: outputs.GetDatabaseCredentialsDataAccess[];
    audit: outputs.GetDatabaseCredentialsDataAudit;
    clusterId: string;
    id: string;
    name: string;
    organizationId: string;
    projectId: string;
}

export interface GetDatabaseCredentialsDataAccess {
    privileges: string[];
    resources?: outputs.GetDatabaseCredentialsDataAccessResources;
}

export interface GetDatabaseCredentialsDataAccessResources {
    buckets?: outputs.GetDatabaseCredentialsDataAccessResourcesBucket[];
}

export interface GetDatabaseCredentialsDataAccessResourcesBucket {
    name: string;
    scopes?: outputs.GetDatabaseCredentialsDataAccessResourcesBucketScope[];
}

export interface GetDatabaseCredentialsDataAccessResourcesBucketScope {
    collections?: string[];
    name: string;
}

export interface GetDatabaseCredentialsDataAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetOrganizationAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetOrganizationPreferences {
    sessionDuration: number;
}

export interface GetProjectsData {
    audit: outputs.GetProjectsDataAudit;
    description: string;
    etag: string;
    id: string;
    ifMatch: string;
    name: string;
    organizationId: string;
}

export interface GetProjectsDataAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetSampleBucketsData {
    bucketConflictResolution: string;
    clusterId: string;
    durabilityLevel: string;
    evictionPolicy: string;
    flush: boolean;
    id: string;
    memoryAllocationInMb: number;
    name: string;
    organizationId: string;
    projectId: string;
    replicas: number;
    stats: outputs.GetSampleBucketsDataStats;
    storageBackend: string;
    timeToLiveInSeconds: number;
    type: string;
}

export interface GetSampleBucketsDataStats {
    diskUsedInMib: number;
    itemCount: number;
    memoryUsedInMib: number;
    opsPerSecond: number;
}

export interface GetScopesScope {
    collections: outputs.GetScopesScopeCollection[];
    scopeName: string;
}

export interface GetScopesScopeCollection {
    maxTtl: number;
    name: string;
}

export interface GetUsersData {
    audit: outputs.GetUsersDataAudit;
    email: string;
    enableNotifications: boolean;
    expiresAt: string;
    id: string;
    inactive: boolean;
    lastLogin: string;
    name: string;
    organizationId: string;
    organizationRoles: string[];
    region: string;
    resources: outputs.GetUsersDataResource[];
    status: string;
    timeZone: string;
}

export interface GetUsersDataAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface GetUsersDataResource {
    id: string;
    roles: string[];
    type: string;
}

export interface ProjectAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface SampleBucketStats {
    diskUsedInMib: number;
    itemCount: number;
    memoryUsedInMib: number;
    opsPerSecond: number;
}

export interface ScopeCollection {
    maxTtl: number;
    name: string;
}

export interface UserAudit {
    createdAt: string;
    createdBy: string;
    modifiedAt: string;
    modifiedBy: string;
    version: number;
}

export interface UserResource {
    id: string;
    roles: string[];
    type: string;
}

