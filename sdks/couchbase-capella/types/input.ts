// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AllowlistAudit {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface ApikeyAudit {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface ApikeyResource {
    id: pulumi.Input<string>;
    roles: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}

export interface AppServiceAudit {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface AppServiceCompute {
    cpu: pulumi.Input<number>;
    ram: pulumi.Input<number>;
}

export interface AuditLogSettingsDisabledUser {
    domain: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface BackupBackupStats {
    cbas?: pulumi.Input<number>;
    event?: pulumi.Input<number>;
    fts?: pulumi.Input<number>;
    gsi?: pulumi.Input<number>;
    items?: pulumi.Input<number>;
    mutations?: pulumi.Input<number>;
    sizeInMb?: pulumi.Input<number>;
    tombstones?: pulumi.Input<number>;
}

export interface BackupRestore {
    autoRemoveCollections?: pulumi.Input<boolean>;
    excludeData?: pulumi.Input<string>;
    filterKeys?: pulumi.Input<string>;
    filterValues?: pulumi.Input<string>;
    forceUpdates?: pulumi.Input<boolean>;
    includeData?: pulumi.Input<string>;
    mapData?: pulumi.Input<string>;
    replaceTtl?: pulumi.Input<string>;
    replaceTtlWith?: pulumi.Input<string>;
    services: pulumi.Input<pulumi.Input<string>[]>;
    sourceClusterId: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    targetClusterId: pulumi.Input<string>;
}

export interface BackupScheduleInfo {
    backupTime?: pulumi.Input<string>;
    backupType?: pulumi.Input<string>;
    increment?: pulumi.Input<number>;
    retention?: pulumi.Input<string>;
}

export interface BackupScheduleWeeklySchedule {
    costOptimizedRetention: pulumi.Input<boolean>;
    dayOfWeek: pulumi.Input<string>;
    incrementalEvery: pulumi.Input<number>;
    retentionTime: pulumi.Input<string>;
    startAt: pulumi.Input<number>;
}

export interface BucketStats {
    diskUsedInMib?: pulumi.Input<number>;
    itemCount?: pulumi.Input<number>;
    memoryUsedInMib?: pulumi.Input<number>;
    opsPerSecond?: pulumi.Input<number>;
}

export interface ClusterAudit {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface ClusterAvailability {
    type: pulumi.Input<string>;
}

export interface ClusterCloudProvider {
    cidr: pulumi.Input<string>;
    region: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ClusterCouchbaseServer {
    version?: pulumi.Input<string>;
}

export interface ClusterOnoffScheduleDay {
    day: pulumi.Input<string>;
    from?: pulumi.Input<inputs.ClusterOnoffScheduleDayFrom>;
    state: pulumi.Input<string>;
    to?: pulumi.Input<inputs.ClusterOnoffScheduleDayTo>;
}

export interface ClusterOnoffScheduleDayFrom {
    hour?: pulumi.Input<number>;
    minute?: pulumi.Input<number>;
}

export interface ClusterOnoffScheduleDayTo {
    hour?: pulumi.Input<number>;
    minute?: pulumi.Input<number>;
}

export interface ClusterServiceGroup {
    node: pulumi.Input<inputs.ClusterServiceGroupNode>;
    numOfNodes: pulumi.Input<number>;
    services: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterServiceGroupNode {
    compute: pulumi.Input<inputs.ClusterServiceGroupNodeCompute>;
    /**
     * The 'storage' and 'IOPS' fields are required for AWS. For Azure, only the 'disktype' field is required, and for Ultra, you can provide all three fields. In the case of GCP, only 'pd ssd' disk type is available, and you cannot set the 'IOPS' field.
     */
    disk: pulumi.Input<inputs.ClusterServiceGroupNodeDisk>;
}

export interface ClusterServiceGroupNodeCompute {
    cpu: pulumi.Input<number>;
    ram: pulumi.Input<number>;
}

export interface ClusterServiceGroupNodeDisk {
    autoexpansion?: pulumi.Input<boolean>;
    iops?: pulumi.Input<number>;
    storage?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface ClusterSupport {
    plan: pulumi.Input<string>;
    timezone: pulumi.Input<string>;
}

export interface DatabaseCredentialAccess {
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    resources?: pulumi.Input<inputs.DatabaseCredentialAccessResources>;
}

export interface DatabaseCredentialAccessResources {
    buckets?: pulumi.Input<pulumi.Input<inputs.DatabaseCredentialAccessResourcesBucket>[]>;
}

export interface DatabaseCredentialAccessResourcesBucket {
    name: pulumi.Input<string>;
    scopes?: pulumi.Input<pulumi.Input<inputs.DatabaseCredentialAccessResourcesBucketScope>[]>;
}

export interface DatabaseCredentialAccessResourcesBucketScope {
    collections?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
}

export interface DatabaseCredentialAudit {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface ProjectAudit {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface SampleBucketStats {
    diskUsedInMib?: pulumi.Input<number>;
    itemCount?: pulumi.Input<number>;
    memoryUsedInMib?: pulumi.Input<number>;
    opsPerSecond?: pulumi.Input<number>;
}

export interface ScopeCollection {
    maxTtl?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}

export interface UserAudit {
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    modifiedAt?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<string>;
    version?: pulumi.Input<number>;
}

export interface UserResource {
    id: pulumi.Input<string>;
    roles: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
}
