// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUserManagement(args?: GetUserManagementArgs, opts?: pulumi.InvokeOptions): Promise<GetUserManagementResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getUserManagement:getUserManagement", {
        "authMethods": args.authMethods,
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUserManagement.
 */
export interface GetUserManagementArgs {
    authMethods?: string[];
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getUserManagement.
 */
export interface GetUserManagementResult {
    readonly adminUser: boolean;
    readonly authMethods?: string[];
    readonly comments: string;
    readonly departments: outputs.GetUserManagementDepartment[];
    readonly email: string;
    readonly groups: outputs.GetUserManagementGroup[];
    readonly id?: number;
    readonly isAuditor: string;
    readonly name?: string;
    readonly tempAuthEmail: string;
    readonly type: string;
}
export function getUserManagementOutput(args?: GetUserManagementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserManagementResult> {
    return pulumi.output(args).apply((a: any) => getUserManagement(a, opts))
}

/**
 * A collection of arguments for invoking getUserManagement.
 */
export interface GetUserManagementOutputArgs {
    authMethods?: pulumi.Input<pulumi.Input<string>[]>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
