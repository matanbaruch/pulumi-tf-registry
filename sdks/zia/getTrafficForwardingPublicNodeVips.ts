// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getTrafficForwardingPublicNodeVips(args?: GetTrafficForwardingPublicNodeVipsArgs, opts?: pulumi.InvokeOptions): Promise<GetTrafficForwardingPublicNodeVipsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getTrafficForwardingPublicNodeVips:getTrafficForwardingPublicNodeVips", {
        "datacenter": args.datacenter,
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTrafficForwardingPublicNodeVips.
 */
export interface GetTrafficForwardingPublicNodeVipsArgs {
    datacenter?: string;
    id?: string;
}

/**
 * A collection of values returned by getTrafficForwardingPublicNodeVips.
 */
export interface GetTrafficForwardingPublicNodeVipsResult {
    readonly city: string;
    readonly cloudName: string;
    readonly datacenter?: string;
    readonly greDomainName: string;
    readonly greIps: string[];
    readonly id: string;
    readonly location: string;
    readonly pacDomainName: string;
    readonly pacIps: string[];
    readonly region: string;
    readonly vpnDomainName: string;
    readonly vpnIps: string[];
}
export function getTrafficForwardingPublicNodeVipsOutput(args?: GetTrafficForwardingPublicNodeVipsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrafficForwardingPublicNodeVipsResult> {
    return pulumi.output(args).apply((a: any) => getTrafficForwardingPublicNodeVips(a, opts))
}

/**
 * A collection of arguments for invoking getTrafficForwardingPublicNodeVips.
 */
export interface GetTrafficForwardingPublicNodeVipsOutputArgs {
    datacenter?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
}
