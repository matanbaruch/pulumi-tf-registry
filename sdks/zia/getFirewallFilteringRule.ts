// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirewallFilteringRule(args?: GetFirewallFilteringRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallFilteringRuleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getFirewallFilteringRule:getFirewallFilteringRule", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getFirewallFilteringRule.
 */
export interface GetFirewallFilteringRuleArgs {
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getFirewallFilteringRule.
 */
export interface GetFirewallFilteringRuleResult {
    readonly accessControl: string;
    readonly action: string;
    readonly appServiceGroups: outputs.GetFirewallFilteringRuleAppServiceGroup[];
    readonly appServices: outputs.GetFirewallFilteringRuleAppService[];
    readonly defaultRule: boolean;
    readonly departments: outputs.GetFirewallFilteringRuleDepartment[];
    readonly description: string;
    readonly destAddresses: string[];
    readonly destCountries: string[];
    readonly destIpCategories: string[];
    readonly destIpGroups: outputs.GetFirewallFilteringRuleDestIpGroup[];
    readonly deviceGroups: outputs.GetFirewallFilteringRuleDeviceGroup[];
    readonly deviceTrustLevels: string[];
    readonly devices: outputs.GetFirewallFilteringRuleDevice[];
    readonly enableFullLogging: boolean;
    readonly groups: outputs.GetFirewallFilteringRuleGroup[];
    readonly id?: number;
    readonly labels: outputs.GetFirewallFilteringRuleLabel[];
    readonly lastModifiedBies: outputs.GetFirewallFilteringRuleLastModifiedBy[];
    readonly lastModifiedTime: number;
    readonly locationGroups: outputs.GetFirewallFilteringRuleLocationGroup[];
    readonly locations: outputs.GetFirewallFilteringRuleLocation[];
    readonly name?: string;
    readonly nwApplicationGroups: outputs.GetFirewallFilteringRuleNwApplicationGroup[];
    readonly nwApplications: string[];
    readonly nwServiceGroups: outputs.GetFirewallFilteringRuleNwServiceGroup[];
    readonly nwServices: outputs.GetFirewallFilteringRuleNwService[];
    readonly order: number;
    readonly predefined: boolean;
    readonly rank: number;
    readonly srcIpGroups: outputs.GetFirewallFilteringRuleSrcIpGroup[];
    readonly srcIps: string[];
    readonly state: string;
    readonly timeWindows: outputs.GetFirewallFilteringRuleTimeWindow[];
    readonly users: outputs.GetFirewallFilteringRuleUser[];
    readonly workloadGroups: outputs.GetFirewallFilteringRuleWorkloadGroup[];
    readonly zpaAppSegments: outputs.GetFirewallFilteringRuleZpaAppSegment[];
}
export function getFirewallFilteringRuleOutput(args?: GetFirewallFilteringRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFirewallFilteringRuleResult> {
    return pulumi.output(args).apply((a: any) => getFirewallFilteringRule(a, opts))
}

/**
 * A collection of arguments for invoking getFirewallFilteringRule.
 */
export interface GetFirewallFilteringRuleOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
