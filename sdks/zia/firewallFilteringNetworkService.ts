// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallFilteringNetworkService extends pulumi.CustomResource {
    /**
     * Get an existing FirewallFilteringNetworkService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallFilteringNetworkServiceState, opts?: pulumi.CustomResourceOptions): FirewallFilteringNetworkService {
        return new FirewallFilteringNetworkService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/firewallFilteringNetworkService:FirewallFilteringNetworkService';

    /**
     * Returns true if the given object is an instance of FirewallFilteringNetworkService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallFilteringNetworkService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallFilteringNetworkService.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * dest tcp ports
     */
    public readonly destTcpPorts!: pulumi.Output<outputs.FirewallFilteringNetworkServiceDestTcpPort[] | undefined>;
    /**
     * dest udp ports
     */
    public readonly destUdpPorts!: pulumi.Output<outputs.FirewallFilteringNetworkServiceDestUdpPort[] | undefined>;
    public readonly isNameL10nTag!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly networkServiceId!: pulumi.Output<number>;
    /**
     * src tcp ports
     */
    public readonly srcTcpPorts!: pulumi.Output<outputs.FirewallFilteringNetworkServiceSrcTcpPort[] | undefined>;
    /**
     * src udp ports
     */
    public readonly srcUdpPorts!: pulumi.Output<outputs.FirewallFilteringNetworkServiceSrcUdpPort[] | undefined>;
    public readonly tag!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a FirewallFilteringNetworkService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallFilteringNetworkServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallFilteringNetworkServiceArgs | FirewallFilteringNetworkServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallFilteringNetworkServiceState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destTcpPorts"] = state ? state.destTcpPorts : undefined;
            resourceInputs["destUdpPorts"] = state ? state.destUdpPorts : undefined;
            resourceInputs["isNameL10nTag"] = state ? state.isNameL10nTag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkServiceId"] = state ? state.networkServiceId : undefined;
            resourceInputs["srcTcpPorts"] = state ? state.srcTcpPorts : undefined;
            resourceInputs["srcUdpPorts"] = state ? state.srcUdpPorts : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FirewallFilteringNetworkServiceArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destTcpPorts"] = args ? args.destTcpPorts : undefined;
            resourceInputs["destUdpPorts"] = args ? args.destUdpPorts : undefined;
            resourceInputs["isNameL10nTag"] = args ? args.isNameL10nTag : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["srcTcpPorts"] = args ? args.srcTcpPorts : undefined;
            resourceInputs["srcUdpPorts"] = args ? args.srcUdpPorts : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["networkServiceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallFilteringNetworkService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FirewallFilteringNetworkService resources.
 */
export interface FirewallFilteringNetworkServiceState {
    description?: pulumi.Input<string>;
    /**
     * dest tcp ports
     */
    destTcpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceDestTcpPort>[]>;
    /**
     * dest udp ports
     */
    destUdpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceDestUdpPort>[]>;
    isNameL10nTag?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    networkServiceId?: pulumi.Input<number>;
    /**
     * src tcp ports
     */
    srcTcpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceSrcTcpPort>[]>;
    /**
     * src udp ports
     */
    srcUdpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceSrcUdpPort>[]>;
    tag?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FirewallFilteringNetworkService resource.
 */
export interface FirewallFilteringNetworkServiceArgs {
    description?: pulumi.Input<string>;
    /**
     * dest tcp ports
     */
    destTcpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceDestTcpPort>[]>;
    /**
     * dest udp ports
     */
    destUdpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceDestUdpPort>[]>;
    isNameL10nTag?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * src tcp ports
     */
    srcTcpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceSrcTcpPort>[]>;
    /**
     * src udp ports
     */
    srcUdpPorts?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringNetworkServiceSrcUdpPort>[]>;
    tag?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
