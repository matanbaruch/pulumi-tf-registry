// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getForwardingControlRule(args?: GetForwardingControlRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetForwardingControlRuleResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getForwardingControlRule:getForwardingControlRule", {
        "id": args.id,
        "name": args.name,
        "type": args.type,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getForwardingControlRule.
 */
export interface GetForwardingControlRuleArgs {
    id?: number;
    name?: string;
    type?: string;
}

/**
 * A collection of values returned by getForwardingControlRule.
 */
export interface GetForwardingControlRuleResult {
    readonly departments: outputs.GetForwardingControlRuleDepartment[];
    readonly description: string;
    readonly destAddresses: string[];
    readonly destCountries: string[];
    readonly destIpCategories: string[];
    readonly destIpGroups: outputs.GetForwardingControlRuleDestIpGroup[];
    readonly destIpv6Groups: outputs.GetForwardingControlRuleDestIpv6Group[];
    readonly deviceGroups: outputs.GetForwardingControlRuleDeviceGroup[];
    readonly devices: outputs.GetForwardingControlRuleDevice[];
    readonly ecGroups: outputs.GetForwardingControlRuleEcGroup[];
    readonly forwardMethod: string;
    readonly groups: outputs.GetForwardingControlRuleGroup[];
    readonly id?: number;
    readonly labels: outputs.GetForwardingControlRuleLabel[];
    readonly locationGroups: outputs.GetForwardingControlRuleLocationGroup[];
    readonly locations: outputs.GetForwardingControlRuleLocation[];
    readonly name?: string;
    readonly nwApplicationGroups: outputs.GetForwardingControlRuleNwApplicationGroup[];
    readonly nwApplications: string[];
    readonly nwServiceGroups: outputs.GetForwardingControlRuleNwServiceGroup[];
    readonly nwServices: outputs.GetForwardingControlRuleNwService[];
    readonly order: number;
    readonly proxyGateways: outputs.GetForwardingControlRuleProxyGateway[];
    readonly rank: number;
    readonly resCategories: string[];
    readonly srcIpGroups: outputs.GetForwardingControlRuleSrcIpGroup[];
    readonly srcIps: string[];
    readonly srcIpv6Groups: outputs.GetForwardingControlRuleSrcIpv6Group[];
    readonly state: string;
    readonly type?: string;
    readonly users: outputs.GetForwardingControlRuleUser[];
    readonly zpaAppSegments: outputs.GetForwardingControlRuleZpaAppSegment[];
    readonly zpaApplicationSegmentGroups: outputs.GetForwardingControlRuleZpaApplicationSegmentGroup[];
    readonly zpaApplicationSegments: outputs.GetForwardingControlRuleZpaApplicationSegment[];
    readonly zpaBrokerRule: boolean;
    readonly zpaGateways: outputs.GetForwardingControlRuleZpaGateway[];
}
export function getForwardingControlRuleOutput(args?: GetForwardingControlRuleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetForwardingControlRuleResult> {
    return pulumi.output(args).apply((a: any) => getForwardingControlRule(a, opts))
}

/**
 * A collection of arguments for invoking getForwardingControlRule.
 */
export interface GetForwardingControlRuleOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
