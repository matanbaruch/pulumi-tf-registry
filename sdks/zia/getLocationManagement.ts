// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLocationManagement(args?: GetLocationManagementArgs, opts?: pulumi.InvokeOptions): Promise<GetLocationManagementResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getLocationManagement:getLocationManagement", {
        "basicAuthEnabled": args.basicAuthEnabled,
        "id": args.id,
        "name": args.name,
        "parentName": args.parentName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLocationManagement.
 */
export interface GetLocationManagementArgs {
    basicAuthEnabled?: boolean;
    id?: number;
    name?: string;
    parentName?: string;
}

/**
 * A collection of values returned by getLocationManagement.
 */
export interface GetLocationManagementResult {
    readonly aupBlockInternetUntilAccepted: boolean;
    readonly aupEnabled: boolean;
    readonly aupForceSslInspection: boolean;
    readonly aupTimeoutInDays: number;
    readonly authRequired: boolean;
    readonly basicAuthEnabled: boolean;
    readonly cautionEnabled: boolean;
    readonly country: string;
    readonly description: string;
    readonly digestAuthEnabled: boolean;
    readonly displayTimeUnit: string;
    readonly dnBandwidth: number;
    readonly id?: number;
    readonly idleTimeInMinutes: number;
    readonly iotDiscoveryEnabled: boolean;
    readonly ipAddresses: string[];
    readonly ipsControl: boolean;
    readonly kerberosAuthEnabled: boolean;
    readonly name?: string;
    readonly ofwEnabled: boolean;
    readonly parentId: number;
    readonly parentName?: string;
    readonly ports: string[];
    readonly profile: string;
    readonly sslScanEnabled: boolean;
    readonly surrogateIp: boolean;
    readonly surrogateIpEnforcedForKnownBrowsers: boolean;
    readonly surrogateRefreshTimeInMinutes: number;
    readonly surrogateRefreshTimeUnit: string;
    readonly tz: string;
    readonly upBandwidth: number;
    readonly vpnCredentials: outputs.GetLocationManagementVpnCredential[];
    readonly xffForwardEnabled: boolean;
    readonly zappSslScanEnabled: boolean;
}
export function getLocationManagementOutput(args?: GetLocationManagementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLocationManagementResult> {
    return pulumi.output(args).apply((a: any) => getLocationManagement(a, opts))
}

/**
 * A collection of arguments for invoking getLocationManagement.
 */
export interface GetLocationManagementOutputArgs {
    basicAuthEnabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    parentName?: pulumi.Input<string>;
}
