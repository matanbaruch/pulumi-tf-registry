// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLocationLite(args?: GetLocationLiteArgs, opts?: pulumi.InvokeOptions): Promise<GetLocationLiteResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getLocationLite:getLocationLite", {
        "digestAuthEnabled": args.digestAuthEnabled,
        "kerberosAuth": args.kerberosAuth,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLocationLite.
 */
export interface GetLocationLiteArgs {
    digestAuthEnabled?: boolean;
    kerberosAuth?: boolean;
    name?: string;
}

/**
 * A collection of values returned by getLocationLite.
 */
export interface GetLocationLiteResult {
    readonly aupBlockInternetUntilAccepted: boolean;
    readonly aupEnabled: boolean;
    readonly aupForceSslInspection: boolean;
    readonly cautionEnabled: boolean;
    readonly digestAuthEnabled?: boolean;
    readonly ecLocation: boolean;
    readonly id: number;
    readonly ipsControl: boolean;
    readonly ipv6Enabled: boolean;
    readonly kerberosAuth?: boolean;
    readonly name?: string;
    readonly ofwEnabled: boolean;
    readonly other6SubLocation: boolean;
    readonly otherSubLocation: boolean;
    readonly parentId: number;
    readonly surrogateIp: boolean;
    readonly surrogateIpEnforcedForKnownBrowsers: boolean;
    readonly tz: string;
    readonly xffForwardEnabled: boolean;
    readonly zappSslScanEnabled: boolean;
}
export function getLocationLiteOutput(args?: GetLocationLiteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLocationLiteResult> {
    return pulumi.output(args).apply((a: any) => getLocationLite(a, opts))
}

/**
 * A collection of arguments for invoking getLocationLite.
 */
export interface GetLocationLiteOutputArgs {
    digestAuthEnabled?: pulumi.Input<boolean>;
    kerberosAuth?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
}
