// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getUrlFilteringRules(args?: GetUrlFilteringRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetUrlFilteringRulesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getUrlFilteringRules:getUrlFilteringRules", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUrlFilteringRules.
 */
export interface GetUrlFilteringRulesArgs {
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getUrlFilteringRules.
 */
export interface GetUrlFilteringRulesResult {
    readonly action: string;
    readonly blockOverride: boolean;
    readonly cbiProfiles: outputs.GetUrlFilteringRulesCbiProfile[];
    readonly ciparule: boolean;
    readonly departments: outputs.GetUrlFilteringRulesDepartment[];
    readonly description: string;
    readonly deviceGroups: outputs.GetUrlFilteringRulesDeviceGroup[];
    readonly deviceTrustLevels: string[];
    readonly devices: outputs.GetUrlFilteringRulesDevice[];
    readonly endUserNotificationUrl: string;
    readonly enforceTimeValidity: boolean;
    readonly groups: outputs.GetUrlFilteringRulesGroup[];
    readonly id?: number;
    readonly labels: outputs.GetUrlFilteringRulesLabel[];
    readonly lastModifiedBies: outputs.GetUrlFilteringRulesLastModifiedBy[];
    readonly lastModifiedTime: number;
    readonly locationGroups: outputs.GetUrlFilteringRulesLocationGroup[];
    readonly locations: outputs.GetUrlFilteringRulesLocation[];
    readonly name?: string;
    readonly order: number;
    readonly overrideGroups: outputs.GetUrlFilteringRulesOverrideGroup[];
    readonly overrideUsers: outputs.GetUrlFilteringRulesOverrideUser[];
    readonly protocols: string[];
    readonly rank: number;
    readonly requestMethods: string[];
    readonly sizeQuota: number;
    readonly sourceIpGroups: outputs.GetUrlFilteringRulesSourceIpGroup[];
    readonly state: string;
    readonly timeQuota: number;
    readonly timeWindows: outputs.GetUrlFilteringRulesTimeWindow[];
    readonly urlCategories: string[];
    readonly userAgentTypes: string[];
    readonly users: outputs.GetUrlFilteringRulesUser[];
    readonly validityEndTime: number;
    readonly validityStartTime: number;
    readonly validityTimeZoneId: string;
    readonly workloadGroups: outputs.GetUrlFilteringRulesWorkloadGroup[];
}
export function getUrlFilteringRulesOutput(args?: GetUrlFilteringRulesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUrlFilteringRulesResult> {
    return pulumi.output(args).apply((a: any) => getUrlFilteringRules(a, opts))
}

/**
 * A collection of arguments for invoking getUrlFilteringRules.
 */
export interface GetUrlFilteringRulesOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
