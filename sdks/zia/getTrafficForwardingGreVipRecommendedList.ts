// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTrafficForwardingGreVipRecommendedList(args?: GetTrafficForwardingGreVipRecommendedListArgs, opts?: pulumi.InvokeOptions): Promise<GetTrafficForwardingGreVipRecommendedListResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getTrafficForwardingGreVipRecommendedList:getTrafficForwardingGreVipRecommendedList", {
        "id": args.id,
        "includeCurrentVips": args.includeCurrentVips,
        "includePrivateServiceEdge": args.includePrivateServiceEdge,
        "latitude": args.latitude,
        "longitude": args.longitude,
        "requiredCount": args.requiredCount,
        "routableIp": args.routableIp,
        "sourceIp": args.sourceIp,
        "subcloud": args.subcloud,
        "withinCountryOnly": args.withinCountryOnly,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTrafficForwardingGreVipRecommendedList.
 */
export interface GetTrafficForwardingGreVipRecommendedListArgs {
    id?: string;
    includeCurrentVips?: boolean;
    includePrivateServiceEdge?: boolean;
    latitude?: number;
    longitude?: number;
    requiredCount?: number;
    routableIp?: boolean;
    sourceIp?: string;
    subcloud?: string;
    withinCountryOnly?: boolean;
}

/**
 * A collection of values returned by getTrafficForwardingGreVipRecommendedList.
 */
export interface GetTrafficForwardingGreVipRecommendedListResult {
    readonly id: string;
    readonly includeCurrentVips?: boolean;
    readonly includePrivateServiceEdge?: boolean;
    readonly latitude?: number;
    readonly lists: outputs.GetTrafficForwardingGreVipRecommendedListList[];
    readonly longitude?: number;
    readonly requiredCount?: number;
    readonly routableIp?: boolean;
    readonly sourceIp?: string;
    readonly subcloud?: string;
    readonly withinCountryOnly?: boolean;
}
export function getTrafficForwardingGreVipRecommendedListOutput(args?: GetTrafficForwardingGreVipRecommendedListOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrafficForwardingGreVipRecommendedListResult> {
    return pulumi.output(args).apply((a: any) => getTrafficForwardingGreVipRecommendedList(a, opts))
}

/**
 * A collection of arguments for invoking getTrafficForwardingGreVipRecommendedList.
 */
export interface GetTrafficForwardingGreVipRecommendedListOutputArgs {
    id?: pulumi.Input<string>;
    includeCurrentVips?: pulumi.Input<boolean>;
    includePrivateServiceEdge?: pulumi.Input<boolean>;
    latitude?: pulumi.Input<number>;
    longitude?: pulumi.Input<number>;
    requiredCount?: pulumi.Input<number>;
    routableIp?: pulumi.Input<boolean>;
    sourceIp?: pulumi.Input<string>;
    subcloud?: pulumi.Input<string>;
    withinCountryOnly?: pulumi.Input<boolean>;
}
