// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getTrafficForwardingGreTunnelInfo(args?: GetTrafficForwardingGreTunnelInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetTrafficForwardingGreTunnelInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getTrafficForwardingGreTunnelInfo:getTrafficForwardingGreTunnelInfo", {
        "greEnabled": args.greEnabled,
        "id": args.id,
        "ipAddress": args.ipAddress,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTrafficForwardingGreTunnelInfo.
 */
export interface GetTrafficForwardingGreTunnelInfoArgs {
    greEnabled?: boolean;
    id?: string;
    ipAddress?: string;
}

/**
 * A collection of values returned by getTrafficForwardingGreTunnelInfo.
 */
export interface GetTrafficForwardingGreTunnelInfoResult {
    readonly greEnabled?: boolean;
    readonly greRangePrimary: string;
    readonly greRangeSecondary: string;
    readonly greTunnelIp: string;
    readonly id: string;
    readonly ipAddress?: string;
    readonly primaryGw: string;
    readonly secondaryGw: string;
    readonly tunId: number;
}
export function getTrafficForwardingGreTunnelInfoOutput(args?: GetTrafficForwardingGreTunnelInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrafficForwardingGreTunnelInfoResult> {
    return pulumi.output(args).apply((a: any) => getTrafficForwardingGreTunnelInfo(a, opts))
}

/**
 * A collection of arguments for invoking getTrafficForwardingGreTunnelInfo.
 */
export interface GetTrafficForwardingGreTunnelInfoOutputArgs {
    greEnabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
}
