// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTrafficForwardingStaticIp(args?: GetTrafficForwardingStaticIpArgs, opts?: pulumi.InvokeOptions): Promise<GetTrafficForwardingStaticIpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getTrafficForwardingStaticIp:getTrafficForwardingStaticIp", {
        "id": args.id,
        "ipAddress": args.ipAddress,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTrafficForwardingStaticIp.
 */
export interface GetTrafficForwardingStaticIpArgs {
    id?: number;
    ipAddress?: string;
}

/**
 * A collection of values returned by getTrafficForwardingStaticIp.
 */
export interface GetTrafficForwardingStaticIpResult {
    readonly cities: outputs.GetTrafficForwardingStaticIpCity[];
    readonly comment: string;
    readonly geoOverride: boolean;
    readonly id: number;
    readonly ipAddress: string;
    readonly lastModificationTime: number;
    readonly lastModifiedBies: outputs.GetTrafficForwardingStaticIpLastModifiedBy[];
    readonly latitude: number;
    readonly longitude: number;
    readonly managedBies: outputs.GetTrafficForwardingStaticIpManagedBy[];
    readonly routableIp: boolean;
}
export function getTrafficForwardingStaticIpOutput(args?: GetTrafficForwardingStaticIpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTrafficForwardingStaticIpResult> {
    return pulumi.output(args).apply((a: any) => getTrafficForwardingStaticIp(a, opts))
}

/**
 * A collection of arguments for invoking getTrafficForwardingStaticIp.
 */
export interface GetTrafficForwardingStaticIpOutputArgs {
    id?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
}
