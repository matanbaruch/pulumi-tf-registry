// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAdminRoles(args?: GetAdminRolesArgs, opts?: pulumi.InvokeOptions): Promise<GetAdminRolesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getAdminRoles:getAdminRoles", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAdminRoles.
 */
export interface GetAdminRolesArgs {
    name?: string;
}

/**
 * A collection of values returned by getAdminRoles.
 */
export interface GetAdminRolesResult {
    readonly adminAcctAccess: string;
    readonly analysisAccess: string;
    readonly dashboardAccess: string;
    readonly id: number;
    readonly isAuditor: boolean;
    readonly isNonEditable: boolean;
    readonly logsLimit: string;
    readonly name?: string;
    readonly permissions: string[];
    readonly policyAccess: string;
    readonly rank: number;
    readonly reportAccess: string;
    readonly roleType: string;
    readonly usernameAccess: string;
}
export function getAdminRolesOutput(args?: GetAdminRolesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAdminRolesResult> {
    return pulumi.output(args).apply((a: any) => getAdminRoles(a, opts))
}

/**
 * A collection of arguments for invoking getAdminRoles.
 */
export interface GetAdminRolesOutputArgs {
    name?: pulumi.Input<string>;
}
