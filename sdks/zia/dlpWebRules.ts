// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DlpWebRules extends pulumi.CustomResource {
    /**
     * Get an existing DlpWebRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DlpWebRulesState, opts?: pulumi.CustomResourceOptions): DlpWebRules {
        return new DlpWebRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/dlpWebRules:DlpWebRules';

    /**
     * Returns true if the given object is an instance of DlpWebRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DlpWebRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DlpWebRules.__pulumiType;
    }

    /**
     * The action taken when traffic matches the DLP policy rule criteria.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The auditor to which the DLP policy rule must be applied.
     */
    public readonly auditors!: pulumi.Output<outputs.DlpWebRulesAuditor[] | undefined>;
    /**
     * The list of cloud applications to which the DLP policy rule must be applied.
     */
    public readonly cloudApplications!: pulumi.Output<string[]>;
    /**
     * The Name-ID pairs of departments to which the DLP policy rule must be applied.
     */
    public readonly departments!: pulumi.Output<outputs.DlpWebRulesDepartments | undefined>;
    /**
     * The description of the DLP policy rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    public readonly dlpDownloadScanEnabled!: pulumi.Output<boolean>;
    /**
     * The list of DLP engines to which the DLP policy rule must be applied.
     */
    public readonly dlpEngines!: pulumi.Output<outputs.DlpWebRulesDlpEngines | undefined>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    public readonly excludedDepartments!: pulumi.Output<outputs.DlpWebRulesExcludedDepartments | undefined>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    public readonly excludedDomainProfiles!: pulumi.Output<outputs.DlpWebRulesExcludedDomainProfiles | undefined>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    public readonly excludedGroups!: pulumi.Output<outputs.DlpWebRulesExcludedGroups | undefined>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    public readonly excludedUsers!: pulumi.Output<outputs.DlpWebRulesExcludedUsers | undefined>;
    /**
     * The email address of an external auditor to whom DLP email notifications are sent.
     */
    public readonly externalAuditorEmail!: pulumi.Output<string>;
    /**
     * The list of file types for which the DLP policy rule must be applied.
     */
    public readonly fileTypes!: pulumi.Output<string[]>;
    /**
     * The Name-ID pairs of groups to which the DLP policy rule must be applied.
     */
    public readonly groups!: pulumi.Output<outputs.DlpWebRulesGroups | undefined>;
    /**
     * The DLP server, using ICAP, to which the transaction content is forwarded.
     */
    public readonly icapServers!: pulumi.Output<outputs.DlpWebRulesIcapServer[] | undefined>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    public readonly includedDomainProfiles!: pulumi.Output<outputs.DlpWebRulesIncludedDomainProfiles | undefined>;
    /**
     * list of Labels that are applicable to the rule.
     */
    public readonly labels!: pulumi.Output<outputs.DlpWebRulesLabels | undefined>;
    /**
     * The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
     */
    public readonly locationGroups!: pulumi.Output<outputs.DlpWebRulesLocationGroups | undefined>;
    /**
     * The Name-ID pairs of locations to which the DLP policy rule must be applied.
     */
    public readonly locations!: pulumi.Output<outputs.DlpWebRulesLocations | undefined>;
    /**
     * The match only criteria for DLP engines.
     */
    public readonly matchOnly!: pulumi.Output<boolean>;
    /**
     * The minimum file size (in KB) used for evaluation of the DLP policy rule.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * The DLP policy rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The template used for DLP notification emails.
     */
    public readonly notificationTemplates!: pulumi.Output<outputs.DlpWebRulesNotificationTemplate[] | undefined>;
    /**
     * The rule order of execution for the DLP policy rule with respect to other rules.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * The unique identifier of the parent rule under which an exception rule is added
     */
    public readonly parentRule!: pulumi.Output<number>;
    /**
     * The protocol criteria specified for the DLP policy rule.
     */
    public readonly protocols!: pulumi.Output<string[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    public readonly rank!: pulumi.Output<number>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * Indicates the severity selected for the DLP rule violation
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * list of source ip groups
     */
    public readonly sourceIpGroups!: pulumi.Output<outputs.DlpWebRulesSourceIpGroups | undefined>;
    /**
     * Enables or disables the DLP policy rule.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * The list of exception rules added to a parent rule
     */
    public readonly subRules!: pulumi.Output<string[]>;
    /**
     * list of time interval during which rule must be enforced.
     */
    public readonly timeWindows!: pulumi.Output<outputs.DlpWebRulesTimeWindows | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.DlpWebRulesTimeouts | undefined>;
    /**
     * The list of URL categories to which the DLP policy rule must be applied.
     */
    public readonly urlCategories!: pulumi.Output<outputs.DlpWebRulesUrlCategories | undefined>;
    public readonly userRiskScoreLevels!: pulumi.Output<string[]>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    public readonly users!: pulumi.Output<outputs.DlpWebRulesUsers | undefined>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    public readonly withoutContentInspection!: pulumi.Output<boolean>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    public readonly workloadGroups!: pulumi.Output<outputs.DlpWebRulesWorkloadGroup[] | undefined>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    public readonly zccNotificationsEnabled!: pulumi.Output<boolean>;
    /**
     * Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
     */
    public readonly zscalerIncidentReceiver!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DlpWebRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DlpWebRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DlpWebRulesArgs | DlpWebRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DlpWebRulesState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["auditors"] = state ? state.auditors : undefined;
            resourceInputs["cloudApplications"] = state ? state.cloudApplications : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dlpDownloadScanEnabled"] = state ? state.dlpDownloadScanEnabled : undefined;
            resourceInputs["dlpEngines"] = state ? state.dlpEngines : undefined;
            resourceInputs["excludedDepartments"] = state ? state.excludedDepartments : undefined;
            resourceInputs["excludedDomainProfiles"] = state ? state.excludedDomainProfiles : undefined;
            resourceInputs["excludedGroups"] = state ? state.excludedGroups : undefined;
            resourceInputs["excludedUsers"] = state ? state.excludedUsers : undefined;
            resourceInputs["externalAuditorEmail"] = state ? state.externalAuditorEmail : undefined;
            resourceInputs["fileTypes"] = state ? state.fileTypes : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["icapServers"] = state ? state.icapServers : undefined;
            resourceInputs["includedDomainProfiles"] = state ? state.includedDomainProfiles : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["matchOnly"] = state ? state.matchOnly : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTemplates"] = state ? state.notificationTemplates : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["parentRule"] = state ? state.parentRule : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["sourceIpGroups"] = state ? state.sourceIpGroups : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subRules"] = state ? state.subRules : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["userRiskScoreLevels"] = state ? state.userRiskScoreLevels : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["withoutContentInspection"] = state ? state.withoutContentInspection : undefined;
            resourceInputs["workloadGroups"] = state ? state.workloadGroups : undefined;
            resourceInputs["zccNotificationsEnabled"] = state ? state.zccNotificationsEnabled : undefined;
            resourceInputs["zscalerIncidentReceiver"] = state ? state.zscalerIncidentReceiver : undefined;
        } else {
            const args = argsOrState as DlpWebRulesArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["auditors"] = args ? args.auditors : undefined;
            resourceInputs["cloudApplications"] = args ? args.cloudApplications : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dlpDownloadScanEnabled"] = args ? args.dlpDownloadScanEnabled : undefined;
            resourceInputs["dlpEngines"] = args ? args.dlpEngines : undefined;
            resourceInputs["excludedDepartments"] = args ? args.excludedDepartments : undefined;
            resourceInputs["excludedDomainProfiles"] = args ? args.excludedDomainProfiles : undefined;
            resourceInputs["excludedGroups"] = args ? args.excludedGroups : undefined;
            resourceInputs["excludedUsers"] = args ? args.excludedUsers : undefined;
            resourceInputs["externalAuditorEmail"] = args ? args.externalAuditorEmail : undefined;
            resourceInputs["fileTypes"] = args ? args.fileTypes : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["icapServers"] = args ? args.icapServers : undefined;
            resourceInputs["includedDomainProfiles"] = args ? args.includedDomainProfiles : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["matchOnly"] = args ? args.matchOnly : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTemplates"] = args ? args.notificationTemplates : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["parentRule"] = args ? args.parentRule : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["sourceIpGroups"] = args ? args.sourceIpGroups : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["subRules"] = args ? args.subRules : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["userRiskScoreLevels"] = args ? args.userRiskScoreLevels : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["withoutContentInspection"] = args ? args.withoutContentInspection : undefined;
            resourceInputs["workloadGroups"] = args ? args.workloadGroups : undefined;
            resourceInputs["zccNotificationsEnabled"] = args ? args.zccNotificationsEnabled : undefined;
            resourceInputs["zscalerIncidentReceiver"] = args ? args.zscalerIncidentReceiver : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DlpWebRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DlpWebRules resources.
 */
export interface DlpWebRulesState {
    /**
     * The action taken when traffic matches the DLP policy rule criteria.
     */
    action?: pulumi.Input<string>;
    /**
     * The auditor to which the DLP policy rule must be applied.
     */
    auditors?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesAuditor>[]>;
    /**
     * The list of cloud applications to which the DLP policy rule must be applied.
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of departments to which the DLP policy rule must be applied.
     */
    departments?: pulumi.Input<inputs.DlpWebRulesDepartments>;
    /**
     * The description of the DLP policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    dlpDownloadScanEnabled?: pulumi.Input<boolean>;
    /**
     * The list of DLP engines to which the DLP policy rule must be applied.
     */
    dlpEngines?: pulumi.Input<inputs.DlpWebRulesDlpEngines>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedDepartments?: pulumi.Input<inputs.DlpWebRulesExcludedDepartments>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedDomainProfiles?: pulumi.Input<inputs.DlpWebRulesExcludedDomainProfiles>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedGroups?: pulumi.Input<inputs.DlpWebRulesExcludedGroups>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedUsers?: pulumi.Input<inputs.DlpWebRulesExcludedUsers>;
    /**
     * The email address of an external auditor to whom DLP email notifications are sent.
     */
    externalAuditorEmail?: pulumi.Input<string>;
    /**
     * The list of file types for which the DLP policy rule must be applied.
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of groups to which the DLP policy rule must be applied.
     */
    groups?: pulumi.Input<inputs.DlpWebRulesGroups>;
    /**
     * The DLP server, using ICAP, to which the transaction content is forwarded.
     */
    icapServers?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesIcapServer>[]>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    includedDomainProfiles?: pulumi.Input<inputs.DlpWebRulesIncludedDomainProfiles>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.DlpWebRulesLabels>;
    /**
     * The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
     */
    locationGroups?: pulumi.Input<inputs.DlpWebRulesLocationGroups>;
    /**
     * The Name-ID pairs of locations to which the DLP policy rule must be applied.
     */
    locations?: pulumi.Input<inputs.DlpWebRulesLocations>;
    /**
     * The match only criteria for DLP engines.
     */
    matchOnly?: pulumi.Input<boolean>;
    /**
     * The minimum file size (in KB) used for evaluation of the DLP policy rule.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The DLP policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template used for DLP notification emails.
     */
    notificationTemplates?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesNotificationTemplate>[]>;
    /**
     * The rule order of execution for the DLP policy rule with respect to other rules.
     */
    order?: pulumi.Input<number>;
    /**
     * The unique identifier of the parent rule under which an exception rule is added
     */
    parentRule?: pulumi.Input<number>;
    /**
     * The protocol criteria specified for the DLP policy rule.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    /**
     * Indicates the severity selected for the DLP rule violation
     */
    severity?: pulumi.Input<string>;
    /**
     * list of source ip groups
     */
    sourceIpGroups?: pulumi.Input<inputs.DlpWebRulesSourceIpGroups>;
    /**
     * Enables or disables the DLP policy rule.
     */
    state?: pulumi.Input<string>;
    /**
     * The list of exception rules added to a parent rule
     */
    subRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of time interval during which rule must be enforced.
     */
    timeWindows?: pulumi.Input<inputs.DlpWebRulesTimeWindows>;
    timeouts?: pulumi.Input<inputs.DlpWebRulesTimeouts>;
    /**
     * The list of URL categories to which the DLP policy rule must be applied.
     */
    urlCategories?: pulumi.Input<inputs.DlpWebRulesUrlCategories>;
    userRiskScoreLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    users?: pulumi.Input<inputs.DlpWebRulesUsers>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    withoutContentInspection?: pulumi.Input<boolean>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesWorkloadGroup>[]>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    zccNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
     */
    zscalerIncidentReceiver?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DlpWebRules resource.
 */
export interface DlpWebRulesArgs {
    /**
     * The action taken when traffic matches the DLP policy rule criteria.
     */
    action?: pulumi.Input<string>;
    /**
     * The auditor to which the DLP policy rule must be applied.
     */
    auditors?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesAuditor>[]>;
    /**
     * The list of cloud applications to which the DLP policy rule must be applied.
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of departments to which the DLP policy rule must be applied.
     */
    departments?: pulumi.Input<inputs.DlpWebRulesDepartments>;
    /**
     * The description of the DLP policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    dlpDownloadScanEnabled?: pulumi.Input<boolean>;
    /**
     * The list of DLP engines to which the DLP policy rule must be applied.
     */
    dlpEngines?: pulumi.Input<inputs.DlpWebRulesDlpEngines>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedDepartments?: pulumi.Input<inputs.DlpWebRulesExcludedDepartments>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedDomainProfiles?: pulumi.Input<inputs.DlpWebRulesExcludedDomainProfiles>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedGroups?: pulumi.Input<inputs.DlpWebRulesExcludedGroups>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    excludedUsers?: pulumi.Input<inputs.DlpWebRulesExcludedUsers>;
    /**
     * The email address of an external auditor to whom DLP email notifications are sent.
     */
    externalAuditorEmail?: pulumi.Input<string>;
    /**
     * The list of file types for which the DLP policy rule must be applied.
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of groups to which the DLP policy rule must be applied.
     */
    groups?: pulumi.Input<inputs.DlpWebRulesGroups>;
    /**
     * The DLP server, using ICAP, to which the transaction content is forwarded.
     */
    icapServers?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesIcapServer>[]>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    includedDomainProfiles?: pulumi.Input<inputs.DlpWebRulesIncludedDomainProfiles>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.DlpWebRulesLabels>;
    /**
     * The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
     */
    locationGroups?: pulumi.Input<inputs.DlpWebRulesLocationGroups>;
    /**
     * The Name-ID pairs of locations to which the DLP policy rule must be applied.
     */
    locations?: pulumi.Input<inputs.DlpWebRulesLocations>;
    /**
     * The match only criteria for DLP engines.
     */
    matchOnly?: pulumi.Input<boolean>;
    /**
     * The minimum file size (in KB) used for evaluation of the DLP policy rule.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The DLP policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template used for DLP notification emails.
     */
    notificationTemplates?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesNotificationTemplate>[]>;
    /**
     * The rule order of execution for the DLP policy rule with respect to other rules.
     */
    order?: pulumi.Input<number>;
    /**
     * The unique identifier of the parent rule under which an exception rule is added
     */
    parentRule?: pulumi.Input<number>;
    /**
     * The protocol criteria specified for the DLP policy rule.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    /**
     * Indicates the severity selected for the DLP rule violation
     */
    severity?: pulumi.Input<string>;
    /**
     * list of source ip groups
     */
    sourceIpGroups?: pulumi.Input<inputs.DlpWebRulesSourceIpGroups>;
    /**
     * Enables or disables the DLP policy rule.
     */
    state?: pulumi.Input<string>;
    /**
     * The list of exception rules added to a parent rule
     */
    subRules?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of time interval during which rule must be enforced.
     */
    timeWindows?: pulumi.Input<inputs.DlpWebRulesTimeWindows>;
    timeouts?: pulumi.Input<inputs.DlpWebRulesTimeouts>;
    /**
     * The list of URL categories to which the DLP policy rule must be applied.
     */
    urlCategories?: pulumi.Input<inputs.DlpWebRulesUrlCategories>;
    userRiskScoreLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied.
     */
    users?: pulumi.Input<inputs.DlpWebRulesUsers>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    withoutContentInspection?: pulumi.Input<boolean>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.DlpWebRulesWorkloadGroup>[]>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    zccNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
     */
    zscalerIncidentReceiver?: pulumi.Input<boolean>;
}
