// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDlpEngines(args?: GetDlpEnginesArgs, opts?: pulumi.InvokeOptions): Promise<GetDlpEnginesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getDlpEngines:getDlpEngines", {
        "id": args.id,
        "name": args.name,
        "predefinedEngineName": args.predefinedEngineName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDlpEngines.
 */
export interface GetDlpEnginesArgs {
    id?: number;
    name?: string;
    predefinedEngineName?: string;
}

/**
 * A collection of values returned by getDlpEngines.
 */
export interface GetDlpEnginesResult {
    readonly customDlpEngine: boolean;
    readonly description: string;
    readonly engineExpression: string;
    readonly id?: number;
    readonly name?: string;
    readonly predefinedEngineName?: string;
}
export function getDlpEnginesOutput(args?: GetDlpEnginesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDlpEnginesResult> {
    return pulumi.output(args).apply((a: any) => getDlpEngines(a, opts))
}

/**
 * A collection of arguments for invoking getDlpEngines.
 */
export interface GetDlpEnginesOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    predefinedEngineName?: pulumi.Input<string>;
}
