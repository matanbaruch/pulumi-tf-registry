// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DlpNotificationTemplates extends pulumi.CustomResource {
    /**
     * Get an existing DlpNotificationTemplates resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DlpNotificationTemplatesState, opts?: pulumi.CustomResourceOptions): DlpNotificationTemplates {
        return new DlpNotificationTemplates(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/dlpNotificationTemplates:DlpNotificationTemplates';

    /**
     * Returns true if the given object is an instance of DlpNotificationTemplates.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DlpNotificationTemplates {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DlpNotificationTemplates.__pulumiType;
    }

    /**
     * f set to true, the content that is violation is attached to the DLP notification email
     */
    public readonly attachContent!: pulumi.Output<boolean | undefined>;
    /**
     * The template for the HTML message body that must be displayed in the DLP notification email
     */
    public readonly htmlMessage!: pulumi.Output<string>;
    /**
     * The DLP notification template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The template for the plain text UTF-8 message body that must be displayed in the DLP notification email
     */
    public readonly plainTextMessage!: pulumi.Output<string>;
    /**
     * The Subject line that is displayed within the DLP notification email
     */
    public readonly subject!: pulumi.Output<string>;
    /**
     * The unique identifier for a DLP notification template
     */
    public /*out*/ readonly templateId!: pulumi.Output<number>;
    /**
     * If set to true, TLS will be enabled
     */
    public readonly tlsEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DlpNotificationTemplates resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DlpNotificationTemplatesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DlpNotificationTemplatesArgs | DlpNotificationTemplatesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DlpNotificationTemplatesState | undefined;
            resourceInputs["attachContent"] = state ? state.attachContent : undefined;
            resourceInputs["htmlMessage"] = state ? state.htmlMessage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plainTextMessage"] = state ? state.plainTextMessage : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["tlsEnabled"] = state ? state.tlsEnabled : undefined;
        } else {
            const args = argsOrState as DlpNotificationTemplatesArgs | undefined;
            if ((!args || args.htmlMessage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'htmlMessage'");
            }
            if ((!args || args.plainTextMessage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plainTextMessage'");
            }
            if ((!args || args.subject === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subject'");
            }
            resourceInputs["attachContent"] = args ? args.attachContent : undefined;
            resourceInputs["htmlMessage"] = args ? args.htmlMessage : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plainTextMessage"] = args ? args.plainTextMessage : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
            resourceInputs["tlsEnabled"] = args ? args.tlsEnabled : undefined;
            resourceInputs["templateId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DlpNotificationTemplates.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DlpNotificationTemplates resources.
 */
export interface DlpNotificationTemplatesState {
    /**
     * f set to true, the content that is violation is attached to the DLP notification email
     */
    attachContent?: pulumi.Input<boolean>;
    /**
     * The template for the HTML message body that must be displayed in the DLP notification email
     */
    htmlMessage?: pulumi.Input<string>;
    /**
     * The DLP notification template name
     */
    name?: pulumi.Input<string>;
    /**
     * The template for the plain text UTF-8 message body that must be displayed in the DLP notification email
     */
    plainTextMessage?: pulumi.Input<string>;
    /**
     * The Subject line that is displayed within the DLP notification email
     */
    subject?: pulumi.Input<string>;
    /**
     * The unique identifier for a DLP notification template
     */
    templateId?: pulumi.Input<number>;
    /**
     * If set to true, TLS will be enabled
     */
    tlsEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DlpNotificationTemplates resource.
 */
export interface DlpNotificationTemplatesArgs {
    /**
     * f set to true, the content that is violation is attached to the DLP notification email
     */
    attachContent?: pulumi.Input<boolean>;
    /**
     * The template for the HTML message body that must be displayed in the DLP notification email
     */
    htmlMessage: pulumi.Input<string>;
    /**
     * The DLP notification template name
     */
    name?: pulumi.Input<string>;
    /**
     * The template for the plain text UTF-8 message body that must be displayed in the DLP notification email
     */
    plainTextMessage: pulumi.Input<string>;
    /**
     * The Subject line that is displayed within the DLP notification email
     */
    subject: pulumi.Input<string>;
    /**
     * If set to true, TLS will be enabled
     */
    tlsEnabled?: pulumi.Input<boolean>;
}
