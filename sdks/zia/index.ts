// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActivationStatusArgs, ActivationStatusState } from "./activationStatus";
export type ActivationStatus = import("./activationStatus").ActivationStatus;
export const ActivationStatus: typeof import("./activationStatus").ActivationStatus = null as any;
utilities.lazyLoad(exports, ["ActivationStatus"], () => require("./activationStatus"));

export { AdminUsersArgs, AdminUsersState } from "./adminUsers";
export type AdminUsers = import("./adminUsers").AdminUsers;
export const AdminUsers: typeof import("./adminUsers").AdminUsers = null as any;
utilities.lazyLoad(exports, ["AdminUsers"], () => require("./adminUsers"));

export { AuthSettingsUrlsArgs, AuthSettingsUrlsState } from "./authSettingsUrls";
export type AuthSettingsUrls = import("./authSettingsUrls").AuthSettingsUrls;
export const AuthSettingsUrls: typeof import("./authSettingsUrls").AuthSettingsUrls = null as any;
utilities.lazyLoad(exports, ["AuthSettingsUrls"], () => require("./authSettingsUrls"));

export { CloudAppControlRuleArgs, CloudAppControlRuleState } from "./cloudAppControlRule";
export type CloudAppControlRule = import("./cloudAppControlRule").CloudAppControlRule;
export const CloudAppControlRule: typeof import("./cloudAppControlRule").CloudAppControlRule = null as any;
utilities.lazyLoad(exports, ["CloudAppControlRule"], () => require("./cloudAppControlRule"));

export { DlpDictionariesArgs, DlpDictionariesState } from "./dlpDictionaries";
export type DlpDictionaries = import("./dlpDictionaries").DlpDictionaries;
export const DlpDictionaries: typeof import("./dlpDictionaries").DlpDictionaries = null as any;
utilities.lazyLoad(exports, ["DlpDictionaries"], () => require("./dlpDictionaries"));

export { DlpEnginesArgs, DlpEnginesState } from "./dlpEngines";
export type DlpEngines = import("./dlpEngines").DlpEngines;
export const DlpEngines: typeof import("./dlpEngines").DlpEngines = null as any;
utilities.lazyLoad(exports, ["DlpEngines"], () => require("./dlpEngines"));

export { DlpNotificationTemplatesArgs, DlpNotificationTemplatesState } from "./dlpNotificationTemplates";
export type DlpNotificationTemplates = import("./dlpNotificationTemplates").DlpNotificationTemplates;
export const DlpNotificationTemplates: typeof import("./dlpNotificationTemplates").DlpNotificationTemplates = null as any;
utilities.lazyLoad(exports, ["DlpNotificationTemplates"], () => require("./dlpNotificationTemplates"));

export { DlpWebRulesArgs, DlpWebRulesState } from "./dlpWebRules";
export type DlpWebRules = import("./dlpWebRules").DlpWebRules;
export const DlpWebRules: typeof import("./dlpWebRules").DlpWebRules = null as any;
utilities.lazyLoad(exports, ["DlpWebRules"], () => require("./dlpWebRules"));

export { FirewallFilteringDestinationGroupsArgs, FirewallFilteringDestinationGroupsState } from "./firewallFilteringDestinationGroups";
export type FirewallFilteringDestinationGroups = import("./firewallFilteringDestinationGroups").FirewallFilteringDestinationGroups;
export const FirewallFilteringDestinationGroups: typeof import("./firewallFilteringDestinationGroups").FirewallFilteringDestinationGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringDestinationGroups"], () => require("./firewallFilteringDestinationGroups"));

export { FirewallFilteringIpSourceGroupsArgs, FirewallFilteringIpSourceGroupsState } from "./firewallFilteringIpSourceGroups";
export type FirewallFilteringIpSourceGroups = import("./firewallFilteringIpSourceGroups").FirewallFilteringIpSourceGroups;
export const FirewallFilteringIpSourceGroups: typeof import("./firewallFilteringIpSourceGroups").FirewallFilteringIpSourceGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringIpSourceGroups"], () => require("./firewallFilteringIpSourceGroups"));

export { FirewallFilteringNetworkApplicationGroupsArgs, FirewallFilteringNetworkApplicationGroupsState } from "./firewallFilteringNetworkApplicationGroups";
export type FirewallFilteringNetworkApplicationGroups = import("./firewallFilteringNetworkApplicationGroups").FirewallFilteringNetworkApplicationGroups;
export const FirewallFilteringNetworkApplicationGroups: typeof import("./firewallFilteringNetworkApplicationGroups").FirewallFilteringNetworkApplicationGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringNetworkApplicationGroups"], () => require("./firewallFilteringNetworkApplicationGroups"));

export { FirewallFilteringNetworkServiceArgs, FirewallFilteringNetworkServiceState } from "./firewallFilteringNetworkService";
export type FirewallFilteringNetworkService = import("./firewallFilteringNetworkService").FirewallFilteringNetworkService;
export const FirewallFilteringNetworkService: typeof import("./firewallFilteringNetworkService").FirewallFilteringNetworkService = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringNetworkService"], () => require("./firewallFilteringNetworkService"));

export { FirewallFilteringNetworkServiceGroupsArgs, FirewallFilteringNetworkServiceGroupsState } from "./firewallFilteringNetworkServiceGroups";
export type FirewallFilteringNetworkServiceGroups = import("./firewallFilteringNetworkServiceGroups").FirewallFilteringNetworkServiceGroups;
export const FirewallFilteringNetworkServiceGroups: typeof import("./firewallFilteringNetworkServiceGroups").FirewallFilteringNetworkServiceGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringNetworkServiceGroups"], () => require("./firewallFilteringNetworkServiceGroups"));

export { FirewallFilteringRuleArgs, FirewallFilteringRuleState } from "./firewallFilteringRule";
export type FirewallFilteringRule = import("./firewallFilteringRule").FirewallFilteringRule;
export const FirewallFilteringRule: typeof import("./firewallFilteringRule").FirewallFilteringRule = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringRule"], () => require("./firewallFilteringRule"));

export { ForwardingControlRuleArgs, ForwardingControlRuleState } from "./forwardingControlRule";
export type ForwardingControlRule = import("./forwardingControlRule").ForwardingControlRule;
export const ForwardingControlRule: typeof import("./forwardingControlRule").ForwardingControlRule = null as any;
utilities.lazyLoad(exports, ["ForwardingControlRule"], () => require("./forwardingControlRule"));

export { ForwardingControlZpaGatewayArgs, ForwardingControlZpaGatewayState } from "./forwardingControlZpaGateway";
export type ForwardingControlZpaGateway = import("./forwardingControlZpaGateway").ForwardingControlZpaGateway;
export const ForwardingControlZpaGateway: typeof import("./forwardingControlZpaGateway").ForwardingControlZpaGateway = null as any;
utilities.lazyLoad(exports, ["ForwardingControlZpaGateway"], () => require("./forwardingControlZpaGateway"));

export { GetActivationStatusArgs, GetActivationStatusResult, GetActivationStatusOutputArgs } from "./getActivationStatus";
export const getActivationStatus: typeof import("./getActivationStatus").getActivationStatus = null as any;
export const getActivationStatusOutput: typeof import("./getActivationStatus").getActivationStatusOutput = null as any;
utilities.lazyLoad(exports, ["getActivationStatus","getActivationStatusOutput"], () => require("./getActivationStatus"));

export { GetAdminRolesArgs, GetAdminRolesResult, GetAdminRolesOutputArgs } from "./getAdminRoles";
export const getAdminRoles: typeof import("./getAdminRoles").getAdminRoles = null as any;
export const getAdminRolesOutput: typeof import("./getAdminRoles").getAdminRolesOutput = null as any;
utilities.lazyLoad(exports, ["getAdminRoles","getAdminRolesOutput"], () => require("./getAdminRoles"));

export { GetAdminUsersArgs, GetAdminUsersResult, GetAdminUsersOutputArgs } from "./getAdminUsers";
export const getAdminUsers: typeof import("./getAdminUsers").getAdminUsers = null as any;
export const getAdminUsersOutput: typeof import("./getAdminUsers").getAdminUsersOutput = null as any;
utilities.lazyLoad(exports, ["getAdminUsers","getAdminUsersOutput"], () => require("./getAdminUsers"));

export { GetAuthSettingsUrlsArgs, GetAuthSettingsUrlsResult, GetAuthSettingsUrlsOutputArgs } from "./getAuthSettingsUrls";
export const getAuthSettingsUrls: typeof import("./getAuthSettingsUrls").getAuthSettingsUrls = null as any;
export const getAuthSettingsUrlsOutput: typeof import("./getAuthSettingsUrls").getAuthSettingsUrlsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthSettingsUrls","getAuthSettingsUrlsOutput"], () => require("./getAuthSettingsUrls"));

export { GetCloudAppControlRuleArgs, GetCloudAppControlRuleResult, GetCloudAppControlRuleOutputArgs } from "./getCloudAppControlRule";
export const getCloudAppControlRule: typeof import("./getCloudAppControlRule").getCloudAppControlRule = null as any;
export const getCloudAppControlRuleOutput: typeof import("./getCloudAppControlRule").getCloudAppControlRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAppControlRule","getCloudAppControlRuleOutput"], () => require("./getCloudAppControlRule"));

export { GetCloudBrowserIsolationProfileArgs, GetCloudBrowserIsolationProfileResult, GetCloudBrowserIsolationProfileOutputArgs } from "./getCloudBrowserIsolationProfile";
export const getCloudBrowserIsolationProfile: typeof import("./getCloudBrowserIsolationProfile").getCloudBrowserIsolationProfile = null as any;
export const getCloudBrowserIsolationProfileOutput: typeof import("./getCloudBrowserIsolationProfile").getCloudBrowserIsolationProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBrowserIsolationProfile","getCloudBrowserIsolationProfileOutput"], () => require("./getCloudBrowserIsolationProfile"));

export { GetDepartmentManagementArgs, GetDepartmentManagementResult, GetDepartmentManagementOutputArgs } from "./getDepartmentManagement";
export const getDepartmentManagement: typeof import("./getDepartmentManagement").getDepartmentManagement = null as any;
export const getDepartmentManagementOutput: typeof import("./getDepartmentManagement").getDepartmentManagementOutput = null as any;
utilities.lazyLoad(exports, ["getDepartmentManagement","getDepartmentManagementOutput"], () => require("./getDepartmentManagement"));

export { GetDeviceGroupsArgs, GetDeviceGroupsResult, GetDeviceGroupsOutputArgs } from "./getDeviceGroups";
export const getDeviceGroups: typeof import("./getDeviceGroups").getDeviceGroups = null as any;
export const getDeviceGroupsOutput: typeof import("./getDeviceGroups").getDeviceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDeviceGroups","getDeviceGroupsOutput"], () => require("./getDeviceGroups"));

export { GetDevicesArgs, GetDevicesResult, GetDevicesOutputArgs } from "./getDevices";
export const getDevices: typeof import("./getDevices").getDevices = null as any;
export const getDevicesOutput: typeof import("./getDevices").getDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getDevices","getDevicesOutput"], () => require("./getDevices"));

export { GetDlpDictionariesArgs, GetDlpDictionariesResult, GetDlpDictionariesOutputArgs } from "./getDlpDictionaries";
export const getDlpDictionaries: typeof import("./getDlpDictionaries").getDlpDictionaries = null as any;
export const getDlpDictionariesOutput: typeof import("./getDlpDictionaries").getDlpDictionariesOutput = null as any;
utilities.lazyLoad(exports, ["getDlpDictionaries","getDlpDictionariesOutput"], () => require("./getDlpDictionaries"));

export { GetDlpDictionaryPredefinedIdentifiersArgs, GetDlpDictionaryPredefinedIdentifiersResult, GetDlpDictionaryPredefinedIdentifiersOutputArgs } from "./getDlpDictionaryPredefinedIdentifiers";
export const getDlpDictionaryPredefinedIdentifiers: typeof import("./getDlpDictionaryPredefinedIdentifiers").getDlpDictionaryPredefinedIdentifiers = null as any;
export const getDlpDictionaryPredefinedIdentifiersOutput: typeof import("./getDlpDictionaryPredefinedIdentifiers").getDlpDictionaryPredefinedIdentifiersOutput = null as any;
utilities.lazyLoad(exports, ["getDlpDictionaryPredefinedIdentifiers","getDlpDictionaryPredefinedIdentifiersOutput"], () => require("./getDlpDictionaryPredefinedIdentifiers"));

export { GetDlpEdmSchemaArgs, GetDlpEdmSchemaResult, GetDlpEdmSchemaOutputArgs } from "./getDlpEdmSchema";
export const getDlpEdmSchema: typeof import("./getDlpEdmSchema").getDlpEdmSchema = null as any;
export const getDlpEdmSchemaOutput: typeof import("./getDlpEdmSchema").getDlpEdmSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getDlpEdmSchema","getDlpEdmSchemaOutput"], () => require("./getDlpEdmSchema"));

export { GetDlpEnginesArgs, GetDlpEnginesResult, GetDlpEnginesOutputArgs } from "./getDlpEngines";
export const getDlpEngines: typeof import("./getDlpEngines").getDlpEngines = null as any;
export const getDlpEnginesOutput: typeof import("./getDlpEngines").getDlpEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getDlpEngines","getDlpEnginesOutput"], () => require("./getDlpEngines"));

export { GetDlpIcapServersArgs, GetDlpIcapServersResult, GetDlpIcapServersOutputArgs } from "./getDlpIcapServers";
export const getDlpIcapServers: typeof import("./getDlpIcapServers").getDlpIcapServers = null as any;
export const getDlpIcapServersOutput: typeof import("./getDlpIcapServers").getDlpIcapServersOutput = null as any;
utilities.lazyLoad(exports, ["getDlpIcapServers","getDlpIcapServersOutput"], () => require("./getDlpIcapServers"));

export { GetDlpIdmProfileLiteArgs, GetDlpIdmProfileLiteResult, GetDlpIdmProfileLiteOutputArgs } from "./getDlpIdmProfileLite";
export const getDlpIdmProfileLite: typeof import("./getDlpIdmProfileLite").getDlpIdmProfileLite = null as any;
export const getDlpIdmProfileLiteOutput: typeof import("./getDlpIdmProfileLite").getDlpIdmProfileLiteOutput = null as any;
utilities.lazyLoad(exports, ["getDlpIdmProfileLite","getDlpIdmProfileLiteOutput"], () => require("./getDlpIdmProfileLite"));

export { GetDlpIdmProfilesArgs, GetDlpIdmProfilesResult, GetDlpIdmProfilesOutputArgs } from "./getDlpIdmProfiles";
export const getDlpIdmProfiles: typeof import("./getDlpIdmProfiles").getDlpIdmProfiles = null as any;
export const getDlpIdmProfilesOutput: typeof import("./getDlpIdmProfiles").getDlpIdmProfilesOutput = null as any;
utilities.lazyLoad(exports, ["getDlpIdmProfiles","getDlpIdmProfilesOutput"], () => require("./getDlpIdmProfiles"));

export { GetDlpIncidentReceiverServersArgs, GetDlpIncidentReceiverServersResult, GetDlpIncidentReceiverServersOutputArgs } from "./getDlpIncidentReceiverServers";
export const getDlpIncidentReceiverServers: typeof import("./getDlpIncidentReceiverServers").getDlpIncidentReceiverServers = null as any;
export const getDlpIncidentReceiverServersOutput: typeof import("./getDlpIncidentReceiverServers").getDlpIncidentReceiverServersOutput = null as any;
utilities.lazyLoad(exports, ["getDlpIncidentReceiverServers","getDlpIncidentReceiverServersOutput"], () => require("./getDlpIncidentReceiverServers"));

export { GetDlpNotificationTemplatesArgs, GetDlpNotificationTemplatesResult, GetDlpNotificationTemplatesOutputArgs } from "./getDlpNotificationTemplates";
export const getDlpNotificationTemplates: typeof import("./getDlpNotificationTemplates").getDlpNotificationTemplates = null as any;
export const getDlpNotificationTemplatesOutput: typeof import("./getDlpNotificationTemplates").getDlpNotificationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getDlpNotificationTemplates","getDlpNotificationTemplatesOutput"], () => require("./getDlpNotificationTemplates"));

export { GetDlpWebRulesArgs, GetDlpWebRulesResult, GetDlpWebRulesOutputArgs } from "./getDlpWebRules";
export const getDlpWebRules: typeof import("./getDlpWebRules").getDlpWebRules = null as any;
export const getDlpWebRulesOutput: typeof import("./getDlpWebRules").getDlpWebRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDlpWebRules","getDlpWebRulesOutput"], () => require("./getDlpWebRules"));

export { GetFirewallFilteringApplicationServicesArgs, GetFirewallFilteringApplicationServicesResult, GetFirewallFilteringApplicationServicesOutputArgs } from "./getFirewallFilteringApplicationServices";
export const getFirewallFilteringApplicationServices: typeof import("./getFirewallFilteringApplicationServices").getFirewallFilteringApplicationServices = null as any;
export const getFirewallFilteringApplicationServicesOutput: typeof import("./getFirewallFilteringApplicationServices").getFirewallFilteringApplicationServicesOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringApplicationServices","getFirewallFilteringApplicationServicesOutput"], () => require("./getFirewallFilteringApplicationServices"));

export { GetFirewallFilteringApplicationServicesGroupArgs, GetFirewallFilteringApplicationServicesGroupResult, GetFirewallFilteringApplicationServicesGroupOutputArgs } from "./getFirewallFilteringApplicationServicesGroup";
export const getFirewallFilteringApplicationServicesGroup: typeof import("./getFirewallFilteringApplicationServicesGroup").getFirewallFilteringApplicationServicesGroup = null as any;
export const getFirewallFilteringApplicationServicesGroupOutput: typeof import("./getFirewallFilteringApplicationServicesGroup").getFirewallFilteringApplicationServicesGroupOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringApplicationServicesGroup","getFirewallFilteringApplicationServicesGroupOutput"], () => require("./getFirewallFilteringApplicationServicesGroup"));

export { GetFirewallFilteringDestinationGroupsArgs, GetFirewallFilteringDestinationGroupsResult, GetFirewallFilteringDestinationGroupsOutputArgs } from "./getFirewallFilteringDestinationGroups";
export const getFirewallFilteringDestinationGroups: typeof import("./getFirewallFilteringDestinationGroups").getFirewallFilteringDestinationGroups = null as any;
export const getFirewallFilteringDestinationGroupsOutput: typeof import("./getFirewallFilteringDestinationGroups").getFirewallFilteringDestinationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringDestinationGroups","getFirewallFilteringDestinationGroupsOutput"], () => require("./getFirewallFilteringDestinationGroups"));

export { GetFirewallFilteringIpSourceGroupsArgs, GetFirewallFilteringIpSourceGroupsResult, GetFirewallFilteringIpSourceGroupsOutputArgs } from "./getFirewallFilteringIpSourceGroups";
export const getFirewallFilteringIpSourceGroups: typeof import("./getFirewallFilteringIpSourceGroups").getFirewallFilteringIpSourceGroups = null as any;
export const getFirewallFilteringIpSourceGroupsOutput: typeof import("./getFirewallFilteringIpSourceGroups").getFirewallFilteringIpSourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringIpSourceGroups","getFirewallFilteringIpSourceGroupsOutput"], () => require("./getFirewallFilteringIpSourceGroups"));

export { GetFirewallFilteringNetworkApplicationArgs, GetFirewallFilteringNetworkApplicationResult, GetFirewallFilteringNetworkApplicationOutputArgs } from "./getFirewallFilteringNetworkApplication";
export const getFirewallFilteringNetworkApplication: typeof import("./getFirewallFilteringNetworkApplication").getFirewallFilteringNetworkApplication = null as any;
export const getFirewallFilteringNetworkApplicationOutput: typeof import("./getFirewallFilteringNetworkApplication").getFirewallFilteringNetworkApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringNetworkApplication","getFirewallFilteringNetworkApplicationOutput"], () => require("./getFirewallFilteringNetworkApplication"));

export { GetFirewallFilteringNetworkApplicationGroupsArgs, GetFirewallFilteringNetworkApplicationGroupsResult, GetFirewallFilteringNetworkApplicationGroupsOutputArgs } from "./getFirewallFilteringNetworkApplicationGroups";
export const getFirewallFilteringNetworkApplicationGroups: typeof import("./getFirewallFilteringNetworkApplicationGroups").getFirewallFilteringNetworkApplicationGroups = null as any;
export const getFirewallFilteringNetworkApplicationGroupsOutput: typeof import("./getFirewallFilteringNetworkApplicationGroups").getFirewallFilteringNetworkApplicationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringNetworkApplicationGroups","getFirewallFilteringNetworkApplicationGroupsOutput"], () => require("./getFirewallFilteringNetworkApplicationGroups"));

export { GetFirewallFilteringNetworkServiceArgs, GetFirewallFilteringNetworkServiceResult, GetFirewallFilteringNetworkServiceOutputArgs } from "./getFirewallFilteringNetworkService";
export const getFirewallFilteringNetworkService: typeof import("./getFirewallFilteringNetworkService").getFirewallFilteringNetworkService = null as any;
export const getFirewallFilteringNetworkServiceOutput: typeof import("./getFirewallFilteringNetworkService").getFirewallFilteringNetworkServiceOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringNetworkService","getFirewallFilteringNetworkServiceOutput"], () => require("./getFirewallFilteringNetworkService"));

export { GetFirewallFilteringNetworkServiceGroupsArgs, GetFirewallFilteringNetworkServiceGroupsResult, GetFirewallFilteringNetworkServiceGroupsOutputArgs } from "./getFirewallFilteringNetworkServiceGroups";
export const getFirewallFilteringNetworkServiceGroups: typeof import("./getFirewallFilteringNetworkServiceGroups").getFirewallFilteringNetworkServiceGroups = null as any;
export const getFirewallFilteringNetworkServiceGroupsOutput: typeof import("./getFirewallFilteringNetworkServiceGroups").getFirewallFilteringNetworkServiceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringNetworkServiceGroups","getFirewallFilteringNetworkServiceGroupsOutput"], () => require("./getFirewallFilteringNetworkServiceGroups"));

export { GetFirewallFilteringRuleArgs, GetFirewallFilteringRuleResult, GetFirewallFilteringRuleOutputArgs } from "./getFirewallFilteringRule";
export const getFirewallFilteringRule: typeof import("./getFirewallFilteringRule").getFirewallFilteringRule = null as any;
export const getFirewallFilteringRuleOutput: typeof import("./getFirewallFilteringRule").getFirewallFilteringRuleOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringRule","getFirewallFilteringRuleOutput"], () => require("./getFirewallFilteringRule"));

export { GetFirewallFilteringTimeWindowArgs, GetFirewallFilteringTimeWindowResult, GetFirewallFilteringTimeWindowOutputArgs } from "./getFirewallFilteringTimeWindow";
export const getFirewallFilteringTimeWindow: typeof import("./getFirewallFilteringTimeWindow").getFirewallFilteringTimeWindow = null as any;
export const getFirewallFilteringTimeWindowOutput: typeof import("./getFirewallFilteringTimeWindow").getFirewallFilteringTimeWindowOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringTimeWindow","getFirewallFilteringTimeWindowOutput"], () => require("./getFirewallFilteringTimeWindow"));

export { GetForwardingControlRuleArgs, GetForwardingControlRuleResult, GetForwardingControlRuleOutputArgs } from "./getForwardingControlRule";
export const getForwardingControlRule: typeof import("./getForwardingControlRule").getForwardingControlRule = null as any;
export const getForwardingControlRuleOutput: typeof import("./getForwardingControlRule").getForwardingControlRuleOutput = null as any;
utilities.lazyLoad(exports, ["getForwardingControlRule","getForwardingControlRuleOutput"], () => require("./getForwardingControlRule"));

export { GetForwardingControlZpaGatewayArgs, GetForwardingControlZpaGatewayResult, GetForwardingControlZpaGatewayOutputArgs } from "./getForwardingControlZpaGateway";
export const getForwardingControlZpaGateway: typeof import("./getForwardingControlZpaGateway").getForwardingControlZpaGateway = null as any;
export const getForwardingControlZpaGatewayOutput: typeof import("./getForwardingControlZpaGateway").getForwardingControlZpaGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getForwardingControlZpaGateway","getForwardingControlZpaGatewayOutput"], () => require("./getForwardingControlZpaGateway"));

export { GetGreInternalIpRangeListArgs, GetGreInternalIpRangeListResult, GetGreInternalIpRangeListOutputArgs } from "./getGreInternalIpRangeList";
export const getGreInternalIpRangeList: typeof import("./getGreInternalIpRangeList").getGreInternalIpRangeList = null as any;
export const getGreInternalIpRangeListOutput: typeof import("./getGreInternalIpRangeList").getGreInternalIpRangeListOutput = null as any;
utilities.lazyLoad(exports, ["getGreInternalIpRangeList","getGreInternalIpRangeListOutput"], () => require("./getGreInternalIpRangeList"));

export { GetGroupManagementArgs, GetGroupManagementResult, GetGroupManagementOutputArgs } from "./getGroupManagement";
export const getGroupManagement: typeof import("./getGroupManagement").getGroupManagement = null as any;
export const getGroupManagementOutput: typeof import("./getGroupManagement").getGroupManagementOutput = null as any;
utilities.lazyLoad(exports, ["getGroupManagement","getGroupManagementOutput"], () => require("./getGroupManagement"));

export { GetLocationGroupsArgs, GetLocationGroupsResult, GetLocationGroupsOutputArgs } from "./getLocationGroups";
export const getLocationGroups: typeof import("./getLocationGroups").getLocationGroups = null as any;
export const getLocationGroupsOutput: typeof import("./getLocationGroups").getLocationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getLocationGroups","getLocationGroupsOutput"], () => require("./getLocationGroups"));

export { GetLocationLiteArgs, GetLocationLiteResult, GetLocationLiteOutputArgs } from "./getLocationLite";
export const getLocationLite: typeof import("./getLocationLite").getLocationLite = null as any;
export const getLocationLiteOutput: typeof import("./getLocationLite").getLocationLiteOutput = null as any;
utilities.lazyLoad(exports, ["getLocationLite","getLocationLiteOutput"], () => require("./getLocationLite"));

export { GetLocationManagementArgs, GetLocationManagementResult, GetLocationManagementOutputArgs } from "./getLocationManagement";
export const getLocationManagement: typeof import("./getLocationManagement").getLocationManagement = null as any;
export const getLocationManagementOutput: typeof import("./getLocationManagement").getLocationManagementOutput = null as any;
utilities.lazyLoad(exports, ["getLocationManagement","getLocationManagementOutput"], () => require("./getLocationManagement"));

export { GetRuleLabelsArgs, GetRuleLabelsResult, GetRuleLabelsOutputArgs } from "./getRuleLabels";
export const getRuleLabels: typeof import("./getRuleLabels").getRuleLabels = null as any;
export const getRuleLabelsOutput: typeof import("./getRuleLabels").getRuleLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getRuleLabels","getRuleLabelsOutput"], () => require("./getRuleLabels"));

export { GetSandboxBehavioralAnalysisArgs, GetSandboxBehavioralAnalysisResult, GetSandboxBehavioralAnalysisOutputArgs } from "./getSandboxBehavioralAnalysis";
export const getSandboxBehavioralAnalysis: typeof import("./getSandboxBehavioralAnalysis").getSandboxBehavioralAnalysis = null as any;
export const getSandboxBehavioralAnalysisOutput: typeof import("./getSandboxBehavioralAnalysis").getSandboxBehavioralAnalysisOutput = null as any;
utilities.lazyLoad(exports, ["getSandboxBehavioralAnalysis","getSandboxBehavioralAnalysisOutput"], () => require("./getSandboxBehavioralAnalysis"));

export { GetSandboxReportArgs, GetSandboxReportResult, GetSandboxReportOutputArgs } from "./getSandboxReport";
export const getSandboxReport: typeof import("./getSandboxReport").getSandboxReport = null as any;
export const getSandboxReportOutput: typeof import("./getSandboxReport").getSandboxReportOutput = null as any;
utilities.lazyLoad(exports, ["getSandboxReport","getSandboxReportOutput"], () => require("./getSandboxReport"));

export { GetSecuritySettingsArgs, GetSecuritySettingsResult, GetSecuritySettingsOutputArgs } from "./getSecuritySettings";
export const getSecuritySettings: typeof import("./getSecuritySettings").getSecuritySettings = null as any;
export const getSecuritySettingsOutput: typeof import("./getSecuritySettings").getSecuritySettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritySettings","getSecuritySettingsOutput"], () => require("./getSecuritySettings"));

export { GetTrafficForwardingGreTunnelArgs, GetTrafficForwardingGreTunnelResult, GetTrafficForwardingGreTunnelOutputArgs } from "./getTrafficForwardingGreTunnel";
export const getTrafficForwardingGreTunnel: typeof import("./getTrafficForwardingGreTunnel").getTrafficForwardingGreTunnel = null as any;
export const getTrafficForwardingGreTunnelOutput: typeof import("./getTrafficForwardingGreTunnel").getTrafficForwardingGreTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficForwardingGreTunnel","getTrafficForwardingGreTunnelOutput"], () => require("./getTrafficForwardingGreTunnel"));

export { GetTrafficForwardingGreTunnelInfoArgs, GetTrafficForwardingGreTunnelInfoResult, GetTrafficForwardingGreTunnelInfoOutputArgs } from "./getTrafficForwardingGreTunnelInfo";
export const getTrafficForwardingGreTunnelInfo: typeof import("./getTrafficForwardingGreTunnelInfo").getTrafficForwardingGreTunnelInfo = null as any;
export const getTrafficForwardingGreTunnelInfoOutput: typeof import("./getTrafficForwardingGreTunnelInfo").getTrafficForwardingGreTunnelInfoOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficForwardingGreTunnelInfo","getTrafficForwardingGreTunnelInfoOutput"], () => require("./getTrafficForwardingGreTunnelInfo"));

export { GetTrafficForwardingGreVipRecommendedListArgs, GetTrafficForwardingGreVipRecommendedListResult, GetTrafficForwardingGreVipRecommendedListOutputArgs } from "./getTrafficForwardingGreVipRecommendedList";
export const getTrafficForwardingGreVipRecommendedList: typeof import("./getTrafficForwardingGreVipRecommendedList").getTrafficForwardingGreVipRecommendedList = null as any;
export const getTrafficForwardingGreVipRecommendedListOutput: typeof import("./getTrafficForwardingGreVipRecommendedList").getTrafficForwardingGreVipRecommendedListOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficForwardingGreVipRecommendedList","getTrafficForwardingGreVipRecommendedListOutput"], () => require("./getTrafficForwardingGreVipRecommendedList"));

export { GetTrafficForwardingPublicNodeVipsArgs, GetTrafficForwardingPublicNodeVipsResult, GetTrafficForwardingPublicNodeVipsOutputArgs } from "./getTrafficForwardingPublicNodeVips";
export const getTrafficForwardingPublicNodeVips: typeof import("./getTrafficForwardingPublicNodeVips").getTrafficForwardingPublicNodeVips = null as any;
export const getTrafficForwardingPublicNodeVipsOutput: typeof import("./getTrafficForwardingPublicNodeVips").getTrafficForwardingPublicNodeVipsOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficForwardingPublicNodeVips","getTrafficForwardingPublicNodeVipsOutput"], () => require("./getTrafficForwardingPublicNodeVips"));

export { GetTrafficForwardingStaticIpArgs, GetTrafficForwardingStaticIpResult, GetTrafficForwardingStaticIpOutputArgs } from "./getTrafficForwardingStaticIp";
export const getTrafficForwardingStaticIp: typeof import("./getTrafficForwardingStaticIp").getTrafficForwardingStaticIp = null as any;
export const getTrafficForwardingStaticIpOutput: typeof import("./getTrafficForwardingStaticIp").getTrafficForwardingStaticIpOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficForwardingStaticIp","getTrafficForwardingStaticIpOutput"], () => require("./getTrafficForwardingStaticIp"));

export { GetTrafficForwardingVpnCredentialsArgs, GetTrafficForwardingVpnCredentialsResult, GetTrafficForwardingVpnCredentialsOutputArgs } from "./getTrafficForwardingVpnCredentials";
export const getTrafficForwardingVpnCredentials: typeof import("./getTrafficForwardingVpnCredentials").getTrafficForwardingVpnCredentials = null as any;
export const getTrafficForwardingVpnCredentialsOutput: typeof import("./getTrafficForwardingVpnCredentials").getTrafficForwardingVpnCredentialsOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficForwardingVpnCredentials","getTrafficForwardingVpnCredentialsOutput"], () => require("./getTrafficForwardingVpnCredentials"));

export { GetUrlCategoriesArgs, GetUrlCategoriesResult, GetUrlCategoriesOutputArgs } from "./getUrlCategories";
export const getUrlCategories: typeof import("./getUrlCategories").getUrlCategories = null as any;
export const getUrlCategoriesOutput: typeof import("./getUrlCategories").getUrlCategoriesOutput = null as any;
utilities.lazyLoad(exports, ["getUrlCategories","getUrlCategoriesOutput"], () => require("./getUrlCategories"));

export { GetUrlFilteringRulesArgs, GetUrlFilteringRulesResult, GetUrlFilteringRulesOutputArgs } from "./getUrlFilteringRules";
export const getUrlFilteringRules: typeof import("./getUrlFilteringRules").getUrlFilteringRules = null as any;
export const getUrlFilteringRulesOutput: typeof import("./getUrlFilteringRules").getUrlFilteringRulesOutput = null as any;
utilities.lazyLoad(exports, ["getUrlFilteringRules","getUrlFilteringRulesOutput"], () => require("./getUrlFilteringRules"));

export { GetUserManagementArgs, GetUserManagementResult, GetUserManagementOutputArgs } from "./getUserManagement";
export const getUserManagement: typeof import("./getUserManagement").getUserManagement = null as any;
export const getUserManagementOutput: typeof import("./getUserManagement").getUserManagementOutput = null as any;
utilities.lazyLoad(exports, ["getUserManagement","getUserManagementOutput"], () => require("./getUserManagement"));

export { GetWorkloadGroupsArgs, GetWorkloadGroupsResult, GetWorkloadGroupsOutputArgs } from "./getWorkloadGroups";
export const getWorkloadGroups: typeof import("./getWorkloadGroups").getWorkloadGroups = null as any;
export const getWorkloadGroupsOutput: typeof import("./getWorkloadGroups").getWorkloadGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getWorkloadGroups","getWorkloadGroupsOutput"], () => require("./getWorkloadGroups"));

export { LocationManagementArgs, LocationManagementState } from "./locationManagement";
export type LocationManagement = import("./locationManagement").LocationManagement;
export const LocationManagement: typeof import("./locationManagement").LocationManagement = null as any;
utilities.lazyLoad(exports, ["LocationManagement"], () => require("./locationManagement"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuleLabelsArgs, RuleLabelsState } from "./ruleLabels";
export type RuleLabels = import("./ruleLabels").RuleLabels;
export const RuleLabels: typeof import("./ruleLabels").RuleLabels = null as any;
utilities.lazyLoad(exports, ["RuleLabels"], () => require("./ruleLabels"));

export { SandboxBehavioralAnalysisArgs, SandboxBehavioralAnalysisState } from "./sandboxBehavioralAnalysis";
export type SandboxBehavioralAnalysis = import("./sandboxBehavioralAnalysis").SandboxBehavioralAnalysis;
export const SandboxBehavioralAnalysis: typeof import("./sandboxBehavioralAnalysis").SandboxBehavioralAnalysis = null as any;
utilities.lazyLoad(exports, ["SandboxBehavioralAnalysis"], () => require("./sandboxBehavioralAnalysis"));

export { SandboxFileSubmissionArgs, SandboxFileSubmissionState } from "./sandboxFileSubmission";
export type SandboxFileSubmission = import("./sandboxFileSubmission").SandboxFileSubmission;
export const SandboxFileSubmission: typeof import("./sandboxFileSubmission").SandboxFileSubmission = null as any;
utilities.lazyLoad(exports, ["SandboxFileSubmission"], () => require("./sandboxFileSubmission"));

export { SecuritySettingsArgs, SecuritySettingsState } from "./securitySettings";
export type SecuritySettings = import("./securitySettings").SecuritySettings;
export const SecuritySettings: typeof import("./securitySettings").SecuritySettings = null as any;
utilities.lazyLoad(exports, ["SecuritySettings"], () => require("./securitySettings"));

export { TrafficForwardingGreTunnelArgs, TrafficForwardingGreTunnelState } from "./trafficForwardingGreTunnel";
export type TrafficForwardingGreTunnel = import("./trafficForwardingGreTunnel").TrafficForwardingGreTunnel;
export const TrafficForwardingGreTunnel: typeof import("./trafficForwardingGreTunnel").TrafficForwardingGreTunnel = null as any;
utilities.lazyLoad(exports, ["TrafficForwardingGreTunnel"], () => require("./trafficForwardingGreTunnel"));

export { TrafficForwardingStaticIpArgs, TrafficForwardingStaticIpState } from "./trafficForwardingStaticIp";
export type TrafficForwardingStaticIp = import("./trafficForwardingStaticIp").TrafficForwardingStaticIp;
export const TrafficForwardingStaticIp: typeof import("./trafficForwardingStaticIp").TrafficForwardingStaticIp = null as any;
utilities.lazyLoad(exports, ["TrafficForwardingStaticIp"], () => require("./trafficForwardingStaticIp"));

export { TrafficForwardingVpnCredentialsArgs, TrafficForwardingVpnCredentialsState } from "./trafficForwardingVpnCredentials";
export type TrafficForwardingVpnCredentials = import("./trafficForwardingVpnCredentials").TrafficForwardingVpnCredentials;
export const TrafficForwardingVpnCredentials: typeof import("./trafficForwardingVpnCredentials").TrafficForwardingVpnCredentials = null as any;
utilities.lazyLoad(exports, ["TrafficForwardingVpnCredentials"], () => require("./trafficForwardingVpnCredentials"));

export { UrlCategoriesArgs, UrlCategoriesState } from "./urlCategories";
export type UrlCategories = import("./urlCategories").UrlCategories;
export const UrlCategories: typeof import("./urlCategories").UrlCategories = null as any;
utilities.lazyLoad(exports, ["UrlCategories"], () => require("./urlCategories"));

export { UrlFilteringRulesArgs, UrlFilteringRulesState } from "./urlFilteringRules";
export type UrlFilteringRules = import("./urlFilteringRules").UrlFilteringRules;
export const UrlFilteringRules: typeof import("./urlFilteringRules").UrlFilteringRules = null as any;
utilities.lazyLoad(exports, ["UrlFilteringRules"], () => require("./urlFilteringRules"));

export { UserManagementArgs, UserManagementState } from "./userManagement";
export type UserManagement = import("./userManagement").UserManagement;
export const UserManagement: typeof import("./userManagement").UserManagement = null as any;
utilities.lazyLoad(exports, ["UserManagement"], () => require("./userManagement"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zia:index/activationStatus:ActivationStatus":
                return new ActivationStatus(name, <any>undefined, { urn })
            case "zia:index/adminUsers:AdminUsers":
                return new AdminUsers(name, <any>undefined, { urn })
            case "zia:index/authSettingsUrls:AuthSettingsUrls":
                return new AuthSettingsUrls(name, <any>undefined, { urn })
            case "zia:index/cloudAppControlRule:CloudAppControlRule":
                return new CloudAppControlRule(name, <any>undefined, { urn })
            case "zia:index/dlpDictionaries:DlpDictionaries":
                return new DlpDictionaries(name, <any>undefined, { urn })
            case "zia:index/dlpEngines:DlpEngines":
                return new DlpEngines(name, <any>undefined, { urn })
            case "zia:index/dlpNotificationTemplates:DlpNotificationTemplates":
                return new DlpNotificationTemplates(name, <any>undefined, { urn })
            case "zia:index/dlpWebRules:DlpWebRules":
                return new DlpWebRules(name, <any>undefined, { urn })
            case "zia:index/firewallFilteringDestinationGroups:FirewallFilteringDestinationGroups":
                return new FirewallFilteringDestinationGroups(name, <any>undefined, { urn })
            case "zia:index/firewallFilteringIpSourceGroups:FirewallFilteringIpSourceGroups":
                return new FirewallFilteringIpSourceGroups(name, <any>undefined, { urn })
            case "zia:index/firewallFilteringNetworkApplicationGroups:FirewallFilteringNetworkApplicationGroups":
                return new FirewallFilteringNetworkApplicationGroups(name, <any>undefined, { urn })
            case "zia:index/firewallFilteringNetworkService:FirewallFilteringNetworkService":
                return new FirewallFilteringNetworkService(name, <any>undefined, { urn })
            case "zia:index/firewallFilteringNetworkServiceGroups:FirewallFilteringNetworkServiceGroups":
                return new FirewallFilteringNetworkServiceGroups(name, <any>undefined, { urn })
            case "zia:index/firewallFilteringRule:FirewallFilteringRule":
                return new FirewallFilteringRule(name, <any>undefined, { urn })
            case "zia:index/forwardingControlRule:ForwardingControlRule":
                return new ForwardingControlRule(name, <any>undefined, { urn })
            case "zia:index/forwardingControlZpaGateway:ForwardingControlZpaGateway":
                return new ForwardingControlZpaGateway(name, <any>undefined, { urn })
            case "zia:index/locationManagement:LocationManagement":
                return new LocationManagement(name, <any>undefined, { urn })
            case "zia:index/ruleLabels:RuleLabels":
                return new RuleLabels(name, <any>undefined, { urn })
            case "zia:index/sandboxBehavioralAnalysis:SandboxBehavioralAnalysis":
                return new SandboxBehavioralAnalysis(name, <any>undefined, { urn })
            case "zia:index/sandboxFileSubmission:SandboxFileSubmission":
                return new SandboxFileSubmission(name, <any>undefined, { urn })
            case "zia:index/securitySettings:SecuritySettings":
                return new SecuritySettings(name, <any>undefined, { urn })
            case "zia:index/trafficForwardingGreTunnel:TrafficForwardingGreTunnel":
                return new TrafficForwardingGreTunnel(name, <any>undefined, { urn })
            case "zia:index/trafficForwardingStaticIp:TrafficForwardingStaticIp":
                return new TrafficForwardingStaticIp(name, <any>undefined, { urn })
            case "zia:index/trafficForwardingVpnCredentials:TrafficForwardingVpnCredentials":
                return new TrafficForwardingVpnCredentials(name, <any>undefined, { urn })
            case "zia:index/urlCategories:UrlCategories":
                return new UrlCategories(name, <any>undefined, { urn })
            case "zia:index/urlFilteringRules:UrlFilteringRules":
                return new UrlFilteringRules(name, <any>undefined, { urn })
            case "zia:index/userManagement:UserManagement":
                return new UserManagement(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zia", "index/activationStatus", _module)
pulumi.runtime.registerResourceModule("zia", "index/adminUsers", _module)
pulumi.runtime.registerResourceModule("zia", "index/authSettingsUrls", _module)
pulumi.runtime.registerResourceModule("zia", "index/cloudAppControlRule", _module)
pulumi.runtime.registerResourceModule("zia", "index/dlpDictionaries", _module)
pulumi.runtime.registerResourceModule("zia", "index/dlpEngines", _module)
pulumi.runtime.registerResourceModule("zia", "index/dlpNotificationTemplates", _module)
pulumi.runtime.registerResourceModule("zia", "index/dlpWebRules", _module)
pulumi.runtime.registerResourceModule("zia", "index/firewallFilteringDestinationGroups", _module)
pulumi.runtime.registerResourceModule("zia", "index/firewallFilteringIpSourceGroups", _module)
pulumi.runtime.registerResourceModule("zia", "index/firewallFilteringNetworkApplicationGroups", _module)
pulumi.runtime.registerResourceModule("zia", "index/firewallFilteringNetworkService", _module)
pulumi.runtime.registerResourceModule("zia", "index/firewallFilteringNetworkServiceGroups", _module)
pulumi.runtime.registerResourceModule("zia", "index/firewallFilteringRule", _module)
pulumi.runtime.registerResourceModule("zia", "index/forwardingControlRule", _module)
pulumi.runtime.registerResourceModule("zia", "index/forwardingControlZpaGateway", _module)
pulumi.runtime.registerResourceModule("zia", "index/locationManagement", _module)
pulumi.runtime.registerResourceModule("zia", "index/ruleLabels", _module)
pulumi.runtime.registerResourceModule("zia", "index/sandboxBehavioralAnalysis", _module)
pulumi.runtime.registerResourceModule("zia", "index/sandboxFileSubmission", _module)
pulumi.runtime.registerResourceModule("zia", "index/securitySettings", _module)
pulumi.runtime.registerResourceModule("zia", "index/trafficForwardingGreTunnel", _module)
pulumi.runtime.registerResourceModule("zia", "index/trafficForwardingStaticIp", _module)
pulumi.runtime.registerResourceModule("zia", "index/trafficForwardingVpnCredentials", _module)
pulumi.runtime.registerResourceModule("zia", "index/urlCategories", _module)
pulumi.runtime.registerResourceModule("zia", "index/urlFilteringRules", _module)
pulumi.runtime.registerResourceModule("zia", "index/userManagement", _module)
pulumi.runtime.registerResourcePackage("zia", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zia") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
