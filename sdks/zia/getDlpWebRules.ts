// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDlpWebRules(args?: GetDlpWebRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetDlpWebRulesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getDlpWebRules:getDlpWebRules", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDlpWebRules.
 */
export interface GetDlpWebRulesArgs {
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getDlpWebRules.
 */
export interface GetDlpWebRulesResult {
    readonly accessControl: string;
    readonly action: string;
    readonly cloudApplications: string[];
    readonly departments: outputs.GetDlpWebRulesDepartment[];
    readonly description: string;
    readonly dlpDownloadScanEnabled: boolean;
    readonly dlpEngines: outputs.GetDlpWebRulesDlpEngine[];
    readonly excludedDepartments: outputs.GetDlpWebRulesExcludedDepartment[];
    readonly excludedGroups: outputs.GetDlpWebRulesExcludedGroup[];
    readonly excludedUsers: outputs.GetDlpWebRulesExcludedUser[];
    readonly externalAuditorEmail: string;
    readonly fileTypes: string[];
    readonly groups: outputs.GetDlpWebRulesGroup[];
    readonly id?: number;
    readonly labels: outputs.GetDlpWebRulesLabel[];
    readonly lastModifiedBies: outputs.GetDlpWebRulesLastModifiedBy[];
    readonly lastModifiedTime: number;
    readonly locationGroups: outputs.GetDlpWebRulesLocationGroup[];
    readonly locations: outputs.GetDlpWebRulesLocation[];
    readonly matchOnly: boolean;
    readonly minSize: number;
    readonly name?: string;
    readonly order: number;
    readonly parentRule: number;
    readonly protocols: string[];
    readonly rank: number;
    readonly severity: string;
    readonly sourceIpGroups: outputs.GetDlpWebRulesSourceIpGroup[];
    readonly state: string;
    readonly subRules: string[];
    readonly timeWindows: outputs.GetDlpWebRulesTimeWindow[];
    readonly urlCategories: outputs.GetDlpWebRulesUrlCategory[];
    readonly users: outputs.GetDlpWebRulesUser[];
    readonly withoutContentInspection: boolean;
    readonly workloadGroups: outputs.GetDlpWebRulesWorkloadGroup[];
    readonly zccNotificationsEnabled: boolean;
    readonly zscalerIncidentReceiver: boolean;
}
export function getDlpWebRulesOutput(args?: GetDlpWebRulesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDlpWebRulesResult> {
    return pulumi.output(args).apply((a: any) => getDlpWebRules(a, opts))
}

/**
 * A collection of arguments for invoking getDlpWebRules.
 */
export interface GetDlpWebRulesOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
