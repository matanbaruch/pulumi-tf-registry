// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TrafficForwardingVpnCredentials extends pulumi.CustomResource {
    /**
     * Get an existing TrafficForwardingVpnCredentials resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficForwardingVpnCredentialsState, opts?: pulumi.CustomResourceOptions): TrafficForwardingVpnCredentials {
        return new TrafficForwardingVpnCredentials(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/trafficForwardingVpnCredentials:TrafficForwardingVpnCredentials';

    /**
     * Returns true if the given object is an instance of TrafficForwardingVpnCredentials.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficForwardingVpnCredentials {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficForwardingVpnCredentials.__pulumiType;
    }

    public readonly comments!: pulumi.Output<string | undefined>;
    public readonly fqdn!: pulumi.Output<string | undefined>;
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    public readonly preSharedKey!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public /*out*/ readonly vpnId!: pulumi.Output<number>;

    /**
     * Create a TrafficForwardingVpnCredentials resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TrafficForwardingVpnCredentialsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficForwardingVpnCredentialsArgs | TrafficForwardingVpnCredentialsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficForwardingVpnCredentialsState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["preSharedKey"] = state ? state.preSharedKey : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpnId"] = state ? state.vpnId : undefined;
        } else {
            const args = argsOrState as TrafficForwardingVpnCredentialsArgs | undefined;
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["preSharedKey"] = args?.preSharedKey ? pulumi.secret(args.preSharedKey) : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vpnId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["preSharedKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(TrafficForwardingVpnCredentials.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TrafficForwardingVpnCredentials resources.
 */
export interface TrafficForwardingVpnCredentialsState {
    comments?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    preSharedKey?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    vpnId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TrafficForwardingVpnCredentials resource.
 */
export interface TrafficForwardingVpnCredentialsArgs {
    comments?: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    ipAddress?: pulumi.Input<string>;
    preSharedKey?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
