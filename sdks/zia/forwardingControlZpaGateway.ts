// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ForwardingControlZpaGateway extends pulumi.CustomResource {
    /**
     * Get an existing ForwardingControlZpaGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForwardingControlZpaGatewayState, opts?: pulumi.CustomResourceOptions): ForwardingControlZpaGateway {
        return new ForwardingControlZpaGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/forwardingControlZpaGateway:ForwardingControlZpaGateway';

    /**
     * Returns true if the given object is an instance of ForwardingControlZpaGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ForwardingControlZpaGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ForwardingControlZpaGateway.__pulumiType;
    }

    /**
     * Additional details about the ZPA gateway
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly gatewayId!: pulumi.Output<number>;
    /**
     * The name of the ZPA gateway
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud
     * Connector (using option ECZPA)
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * All the Application Segments that are associated with the selected ZPA Server Group for which Source IP Anchoring is
     * enabled
     */
    public readonly zpaAppSegments!: pulumi.Output<outputs.ForwardingControlZpaGatewayZpaAppSegment[]>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    public readonly zpaServerGroup!: pulumi.Output<outputs.ForwardingControlZpaGatewayZpaServerGroup>;

    /**
     * Create a ForwardingControlZpaGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ForwardingControlZpaGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForwardingControlZpaGatewayArgs | ForwardingControlZpaGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForwardingControlZpaGatewayState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zpaAppSegments"] = state ? state.zpaAppSegments : undefined;
            resourceInputs["zpaServerGroup"] = state ? state.zpaServerGroup : undefined;
        } else {
            const args = argsOrState as ForwardingControlZpaGatewayArgs | undefined;
            if ((!args || args.zpaAppSegments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zpaAppSegments'");
            }
            if ((!args || args.zpaServerGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zpaServerGroup'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zpaAppSegments"] = args ? args.zpaAppSegments : undefined;
            resourceInputs["zpaServerGroup"] = args ? args.zpaServerGroup : undefined;
            resourceInputs["gatewayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ForwardingControlZpaGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ForwardingControlZpaGateway resources.
 */
export interface ForwardingControlZpaGatewayState {
    /**
     * Additional details about the ZPA gateway
     */
    description?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<number>;
    /**
     * The name of the ZPA gateway
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud
     * Connector (using option ECZPA)
     */
    type?: pulumi.Input<string>;
    /**
     * All the Application Segments that are associated with the selected ZPA Server Group for which Source IP Anchoring is
     * enabled
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.ForwardingControlZpaGatewayZpaAppSegment>[]>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    zpaServerGroup?: pulumi.Input<inputs.ForwardingControlZpaGatewayZpaServerGroup>;
}

/**
 * The set of arguments for constructing a ForwardingControlZpaGateway resource.
 */
export interface ForwardingControlZpaGatewayArgs {
    /**
     * Additional details about the ZPA gateway
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the ZPA gateway
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud
     * Connector (using option ECZPA)
     */
    type?: pulumi.Input<string>;
    /**
     * All the Application Segments that are associated with the selected ZPA Server Group for which Source IP Anchoring is
     * enabled
     */
    zpaAppSegments: pulumi.Input<pulumi.Input<inputs.ForwardingControlZpaGatewayZpaAppSegment>[]>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    zpaServerGroup: pulumi.Input<inputs.ForwardingControlZpaGatewayZpaServerGroup>;
}
