// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDlpNotificationTemplates(args?: GetDlpNotificationTemplatesArgs, opts?: pulumi.InvokeOptions): Promise<GetDlpNotificationTemplatesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getDlpNotificationTemplates:getDlpNotificationTemplates", {
        "id": args.id,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDlpNotificationTemplates.
 */
export interface GetDlpNotificationTemplatesArgs {
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getDlpNotificationTemplates.
 */
export interface GetDlpNotificationTemplatesResult {
    readonly attachContent: boolean;
    readonly htmlMessage: string;
    readonly id: number;
    readonly name: string;
    readonly plainTextMessage: string;
    readonly subject: string;
    readonly tlsEnabled: boolean;
}
export function getDlpNotificationTemplatesOutput(args?: GetDlpNotificationTemplatesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDlpNotificationTemplatesResult> {
    return pulumi.output(args).apply((a: any) => getDlpNotificationTemplates(a, opts))
}

/**
 * A collection of arguments for invoking getDlpNotificationTemplates.
 */
export interface GetDlpNotificationTemplatesOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
