// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IntegrationSlackChannel extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationSlackChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationSlackChannelState, opts?: pulumi.CustomResourceOptions): IntegrationSlackChannel {
        return new IntegrationSlackChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/integrationSlackChannel:IntegrationSlackChannel';

    /**
     * Returns true if the given object is an instance of IntegrationSlackChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationSlackChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationSlackChannel.__pulumiType;
    }

    /**
     * Slack account name.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * Slack channel name.
     */
    public readonly channelName!: pulumi.Output<string>;
    /**
     * Configuration options for what is shown in an alert event message.
     */
    public readonly display!: pulumi.Output<outputs.IntegrationSlackChannelDisplay>;

    /**
     * Create a IntegrationSlackChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationSlackChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationSlackChannelArgs | IntegrationSlackChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationSlackChannelState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["display"] = state ? state.display : undefined;
        } else {
            const args = argsOrState as IntegrationSlackChannelArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.channelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelName'");
            }
            if ((!args || args.display === undefined) && !opts.urn) {
                throw new Error("Missing required property 'display'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["display"] = args ? args.display : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IntegrationSlackChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationSlackChannel resources.
 */
export interface IntegrationSlackChannelState {
    /**
     * Slack account name.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Slack channel name.
     */
    channelName?: pulumi.Input<string>;
    /**
     * Configuration options for what is shown in an alert event message.
     */
    display?: pulumi.Input<inputs.IntegrationSlackChannelDisplay>;
}

/**
 * The set of arguments for constructing a IntegrationSlackChannel resource.
 */
export interface IntegrationSlackChannelArgs {
    /**
     * Slack account name.
     */
    accountName: pulumi.Input<string>;
    /**
     * Slack channel name.
     */
    channelName: pulumi.Input<string>;
    /**
     * Configuration options for what is shown in an alert event message.
     */
    display: pulumi.Input<inputs.IntegrationSlackChannelDisplay>;
}
