// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServiceLevelObjective(args?: GetServiceLevelObjectiveArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLevelObjectiveResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("datadog:index/getServiceLevelObjective:getServiceLevelObjective", {
        "id": args.id,
        "metricsQuery": args.metricsQuery,
        "nameQuery": args.nameQuery,
        "tagsQuery": args.tagsQuery,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServiceLevelObjective.
 */
export interface GetServiceLevelObjectiveArgs {
    id?: string;
    metricsQuery?: string;
    nameQuery?: string;
    tagsQuery?: string;
}

/**
 * A collection of values returned by getServiceLevelObjective.
 */
export interface GetServiceLevelObjectiveResult {
    readonly description: string;
    readonly id?: string;
    readonly metricsQuery?: string;
    readonly name: string;
    readonly nameQuery?: string;
    readonly queries: outputs.GetServiceLevelObjectiveQuery[];
    readonly tagsQuery?: string;
    readonly targetThreshold: number;
    readonly timeframe: string;
    readonly type: string;
    readonly warningThreshold: number;
}
export function getServiceLevelObjectiveOutput(args?: GetServiceLevelObjectiveOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceLevelObjectiveResult> {
    return pulumi.output(args).apply((a: any) => getServiceLevelObjective(a, opts))
}

/**
 * A collection of arguments for invoking getServiceLevelObjective.
 */
export interface GetServiceLevelObjectiveOutputArgs {
    id?: pulumi.Input<string>;
    metricsQuery?: pulumi.Input<string>;
    nameQuery?: pulumi.Input<string>;
    tagsQuery?: pulumi.Input<string>;
}
