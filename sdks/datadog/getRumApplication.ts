// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRumApplication(args?: GetRumApplicationArgs, opts?: pulumi.InvokeOptions): Promise<GetRumApplicationResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("datadog:index/getRumApplication:getRumApplication", {
        "id": args.id,
        "nameFilter": args.nameFilter,
        "typeFilter": args.typeFilter,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getRumApplication.
 */
export interface GetRumApplicationArgs {
    id?: string;
    nameFilter?: string;
    typeFilter?: string;
}

/**
 * A collection of values returned by getRumApplication.
 */
export interface GetRumApplicationResult {
    readonly clientToken: string;
    readonly id: string;
    readonly name: string;
    readonly nameFilter?: string;
    readonly type: string;
    readonly typeFilter?: string;
}
export function getRumApplicationOutput(args?: GetRumApplicationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRumApplicationResult> {
    return pulumi.output(args).apply((a: any) => getRumApplication(a, opts))
}

/**
 * A collection of arguments for invoking getRumApplication.
 */
export interface GetRumApplicationOutputArgs {
    id?: pulumi.Input<string>;
    nameFilter?: pulumi.Input<string>;
    typeFilter?: pulumi.Input<string>;
}
