// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IntegrationCloudflareAccount extends pulumi.CustomResource {
    /**
     * Get an existing IntegrationCloudflareAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationCloudflareAccountState, opts?: pulumi.CustomResourceOptions): IntegrationCloudflareAccount {
        return new IntegrationCloudflareAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/integrationCloudflareAccount:IntegrationCloudflareAccount';

    /**
     * Returns true if the given object is an instance of IntegrationCloudflareAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IntegrationCloudflareAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationCloudflareAccount.__pulumiType;
    }

    /**
     * The API key (or token) for the Cloudflare account.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also
     * required.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * The name of the Cloudflare account.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a IntegrationCloudflareAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationCloudflareAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationCloudflareAccountArgs | IntegrationCloudflareAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationCloudflareAccountState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as IntegrationCloudflareAccountArgs | undefined;
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IntegrationCloudflareAccount.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IntegrationCloudflareAccount resources.
 */
export interface IntegrationCloudflareAccountState {
    /**
     * The API key (or token) for the Cloudflare account.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also
     * required.
     */
    email?: pulumi.Input<string>;
    /**
     * The name of the Cloudflare account.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IntegrationCloudflareAccount resource.
 */
export interface IntegrationCloudflareAccountArgs {
    /**
     * The API key (or token) for the Cloudflare account.
     */
    apiKey: pulumi.Input<string>;
    /**
     * The email associated with the Cloudflare account. If an API key is provided (and not a token), this field is also
     * required.
     */
    email?: pulumi.Input<string>;
    /**
     * The name of the Cloudflare account.
     */
    name?: pulumi.Input<string>;
}
