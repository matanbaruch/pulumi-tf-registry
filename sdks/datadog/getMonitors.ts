// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMonitors(args?: GetMonitorsArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("datadog:index/getMonitors:getMonitors", {
        "id": args.id,
        "monitorTagsFilters": args.monitorTagsFilters,
        "nameFilter": args.nameFilter,
        "tagsFilters": args.tagsFilters,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitors.
 */
export interface GetMonitorsArgs {
    id?: string;
    monitorTagsFilters?: string[];
    nameFilter?: string;
    tagsFilters?: string[];
}

/**
 * A collection of values returned by getMonitors.
 */
export interface GetMonitorsResult {
    readonly id: string;
    readonly monitorTagsFilters?: string[];
    readonly monitors: outputs.GetMonitorsMonitor[];
    readonly nameFilter?: string;
    readonly tagsFilters?: string[];
}
export function getMonitorsOutput(args?: GetMonitorsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorsResult> {
    return pulumi.output(args).apply((a: any) => getMonitors(a, opts))
}

/**
 * A collection of arguments for invoking getMonitors.
 */
export interface GetMonitorsOutputArgs {
    id?: pulumi.Input<string>;
    monitorTagsFilters?: pulumi.Input<pulumi.Input<string>[]>;
    nameFilter?: pulumi.Input<string>;
    tagsFilters?: pulumi.Input<pulumi.Input<string>[]>;
}
