// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SesCluster extends pulumi.CustomResource {
    /**
     * Get an existing SesCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SesClusterState, opts?: pulumi.CustomResourceOptions): SesCluster {
        return new SesCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/sesCluster:SesCluster';

    /**
     * Returns true if the given object is an instance of SesCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SesCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SesCluster.__pulumiType;
    }

    public readonly clusterName!: pulumi.Output<string>;
    public /*out*/ readonly clusterNodeLists!: pulumi.Output<outputs.SesClusterClusterNodeList[]>;
    public readonly dataNode!: pulumi.Output<outputs.SesClusterDataNode>;
    public readonly loginKeyName!: pulumi.Output<string>;
    public readonly managerNode!: pulumi.Output<outputs.SesClusterManagerNode>;
    public /*out*/ readonly managerNodeInstanceNoLists!: pulumi.Output<number[]>;
    public readonly masterNode!: pulumi.Output<outputs.SesClusterMasterNode | undefined>;
    public readonly osImageCode!: pulumi.Output<string>;
    public readonly searchEngine!: pulumi.Output<outputs.SesClusterSearchEngine>;
    public /*out*/ readonly serviceGroupInstanceNo!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SesClusterTimeouts | undefined>;
    public readonly vpcNo!: pulumi.Output<number>;

    /**
     * Create a SesCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SesClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SesClusterArgs | SesClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SesClusterState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterNodeLists"] = state ? state.clusterNodeLists : undefined;
            resourceInputs["dataNode"] = state ? state.dataNode : undefined;
            resourceInputs["loginKeyName"] = state ? state.loginKeyName : undefined;
            resourceInputs["managerNode"] = state ? state.managerNode : undefined;
            resourceInputs["managerNodeInstanceNoLists"] = state ? state.managerNodeInstanceNoLists : undefined;
            resourceInputs["masterNode"] = state ? state.masterNode : undefined;
            resourceInputs["osImageCode"] = state ? state.osImageCode : undefined;
            resourceInputs["searchEngine"] = state ? state.searchEngine : undefined;
            resourceInputs["serviceGroupInstanceNo"] = state ? state.serviceGroupInstanceNo : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
        } else {
            const args = argsOrState as SesClusterArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.dataNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataNode'");
            }
            if ((!args || args.loginKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginKeyName'");
            }
            if ((!args || args.managerNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managerNode'");
            }
            if ((!args || args.osImageCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osImageCode'");
            }
            if ((!args || args.searchEngine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchEngine'");
            }
            if ((!args || args.vpcNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcNo'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["dataNode"] = args ? args.dataNode : undefined;
            resourceInputs["loginKeyName"] = args ? args.loginKeyName : undefined;
            resourceInputs["managerNode"] = args ? args.managerNode : undefined;
            resourceInputs["masterNode"] = args ? args.masterNode : undefined;
            resourceInputs["osImageCode"] = args ? args.osImageCode : undefined;
            resourceInputs["searchEngine"] = args ? args.searchEngine : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcNo"] = args ? args.vpcNo : undefined;
            resourceInputs["clusterNodeLists"] = undefined /*out*/;
            resourceInputs["managerNodeInstanceNoLists"] = undefined /*out*/;
            resourceInputs["serviceGroupInstanceNo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SesCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SesCluster resources.
 */
export interface SesClusterState {
    clusterName?: pulumi.Input<string>;
    clusterNodeLists?: pulumi.Input<pulumi.Input<inputs.SesClusterClusterNodeList>[]>;
    dataNode?: pulumi.Input<inputs.SesClusterDataNode>;
    loginKeyName?: pulumi.Input<string>;
    managerNode?: pulumi.Input<inputs.SesClusterManagerNode>;
    managerNodeInstanceNoLists?: pulumi.Input<pulumi.Input<number>[]>;
    masterNode?: pulumi.Input<inputs.SesClusterMasterNode>;
    osImageCode?: pulumi.Input<string>;
    searchEngine?: pulumi.Input<inputs.SesClusterSearchEngine>;
    serviceGroupInstanceNo?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SesClusterTimeouts>;
    vpcNo?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SesCluster resource.
 */
export interface SesClusterArgs {
    clusterName: pulumi.Input<string>;
    dataNode: pulumi.Input<inputs.SesClusterDataNode>;
    loginKeyName: pulumi.Input<string>;
    managerNode: pulumi.Input<inputs.SesClusterManagerNode>;
    masterNode?: pulumi.Input<inputs.SesClusterMasterNode>;
    osImageCode: pulumi.Input<string>;
    searchEngine: pulumi.Input<inputs.SesClusterSearchEngine>;
    timeouts?: pulumi.Input<inputs.SesClusterTimeouts>;
    vpcNo: pulumi.Input<number>;
}
