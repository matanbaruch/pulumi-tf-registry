// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdssCluster extends pulumi.CustomResource {
    /**
     * Get an existing CdssCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdssClusterState, opts?: pulumi.CustomResourceOptions): CdssCluster {
        return new CdssCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/cdssCluster:CdssCluster';

    /**
     * Returns true if the given object is an instance of CdssCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdssCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdssCluster.__pulumiType;
    }

    public readonly brokerNodes!: pulumi.Output<outputs.CdssClusterBrokerNodes>;
    public readonly cmak!: pulumi.Output<outputs.CdssClusterCmak>;
    public readonly configGroupNo!: pulumi.Output<string>;
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.CdssClusterEndpoint[]>;
    public readonly kafkaVersionCode!: pulumi.Output<string>;
    public readonly managerNode!: pulumi.Output<outputs.CdssClusterManagerNode>;
    public readonly name!: pulumi.Output<string>;
    public readonly osImage!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.CdssClusterTimeouts | undefined>;
    public readonly vpcNo!: pulumi.Output<string>;

    /**
     * Create a CdssCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdssClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdssClusterArgs | CdssClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdssClusterState | undefined;
            resourceInputs["brokerNodes"] = state ? state.brokerNodes : undefined;
            resourceInputs["cmak"] = state ? state.cmak : undefined;
            resourceInputs["configGroupNo"] = state ? state.configGroupNo : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["kafkaVersionCode"] = state ? state.kafkaVersionCode : undefined;
            resourceInputs["managerNode"] = state ? state.managerNode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osImage"] = state ? state.osImage : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
        } else {
            const args = argsOrState as CdssClusterArgs | undefined;
            if ((!args || args.brokerNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'brokerNodes'");
            }
            if ((!args || args.cmak === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cmak'");
            }
            if ((!args || args.configGroupNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configGroupNo'");
            }
            if ((!args || args.kafkaVersionCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaVersionCode'");
            }
            if ((!args || args.managerNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managerNode'");
            }
            if ((!args || args.osImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osImage'");
            }
            if ((!args || args.vpcNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcNo'");
            }
            resourceInputs["brokerNodes"] = args ? args.brokerNodes : undefined;
            resourceInputs["cmak"] = args ? args.cmak : undefined;
            resourceInputs["configGroupNo"] = args ? args.configGroupNo : undefined;
            resourceInputs["kafkaVersionCode"] = args ? args.kafkaVersionCode : undefined;
            resourceInputs["managerNode"] = args ? args.managerNode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osImage"] = args ? args.osImage : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcNo"] = args ? args.vpcNo : undefined;
            resourceInputs["endpoints"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CdssCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdssCluster resources.
 */
export interface CdssClusterState {
    brokerNodes?: pulumi.Input<inputs.CdssClusterBrokerNodes>;
    cmak?: pulumi.Input<inputs.CdssClusterCmak>;
    configGroupNo?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.CdssClusterEndpoint>[]>;
    kafkaVersionCode?: pulumi.Input<string>;
    managerNode?: pulumi.Input<inputs.CdssClusterManagerNode>;
    name?: pulumi.Input<string>;
    osImage?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CdssClusterTimeouts>;
    vpcNo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CdssCluster resource.
 */
export interface CdssClusterArgs {
    brokerNodes: pulumi.Input<inputs.CdssClusterBrokerNodes>;
    cmak: pulumi.Input<inputs.CdssClusterCmak>;
    configGroupNo: pulumi.Input<string>;
    kafkaVersionCode: pulumi.Input<string>;
    managerNode: pulumi.Input<inputs.CdssClusterManagerNode>;
    name?: pulumi.Input<string>;
    osImage: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CdssClusterTimeouts>;
    vpcNo: pulumi.Input<string>;
}
