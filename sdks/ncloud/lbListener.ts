// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LbListener extends pulumi.CustomResource {
    /**
     * Get an existing LbListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbListenerState, opts?: pulumi.CustomResourceOptions): LbListener {
        return new LbListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/lbListener:LbListener';

    /**
     * Returns true if the given object is an instance of LbListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LbListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LbListener.__pulumiType;
    }

    public /*out*/ readonly listenerNo!: pulumi.Output<string>;
    public readonly loadBalancerNo!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly protocol!: pulumi.Output<string>;
    public /*out*/ readonly ruleNoLists!: pulumi.Output<string[]>;
    public readonly sslCertificateNo!: pulumi.Output<string | undefined>;
    public readonly targetGroupNo!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbListenerTimeouts | undefined>;
    public readonly tlsMinVersionType!: pulumi.Output<string | undefined>;
    public readonly useHttp2!: pulumi.Output<boolean>;

    /**
     * Create a LbListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbListenerArgs | LbListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbListenerState | undefined;
            resourceInputs["listenerNo"] = state ? state.listenerNo : undefined;
            resourceInputs["loadBalancerNo"] = state ? state.loadBalancerNo : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["ruleNoLists"] = state ? state.ruleNoLists : undefined;
            resourceInputs["sslCertificateNo"] = state ? state.sslCertificateNo : undefined;
            resourceInputs["targetGroupNo"] = state ? state.targetGroupNo : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["tlsMinVersionType"] = state ? state.tlsMinVersionType : undefined;
            resourceInputs["useHttp2"] = state ? state.useHttp2 : undefined;
        } else {
            const args = argsOrState as LbListenerArgs | undefined;
            if ((!args || args.loadBalancerNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerNo'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.targetGroupNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetGroupNo'");
            }
            resourceInputs["loadBalancerNo"] = args ? args.loadBalancerNo : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["sslCertificateNo"] = args ? args.sslCertificateNo : undefined;
            resourceInputs["targetGroupNo"] = args ? args.targetGroupNo : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["tlsMinVersionType"] = args ? args.tlsMinVersionType : undefined;
            resourceInputs["useHttp2"] = args ? args.useHttp2 : undefined;
            resourceInputs["listenerNo"] = undefined /*out*/;
            resourceInputs["ruleNoLists"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LbListener.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LbListener resources.
 */
export interface LbListenerState {
    listenerNo?: pulumi.Input<string>;
    loadBalancerNo?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    ruleNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    sslCertificateNo?: pulumi.Input<string>;
    targetGroupNo?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbListenerTimeouts>;
    tlsMinVersionType?: pulumi.Input<string>;
    useHttp2?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LbListener resource.
 */
export interface LbListenerArgs {
    loadBalancerNo: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    sslCertificateNo?: pulumi.Input<string>;
    targetGroupNo: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbListenerTimeouts>;
    tlsMinVersionType?: pulumi.Input<string>;
    useHttp2?: pulumi.Input<boolean>;
}
