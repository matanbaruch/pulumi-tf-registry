// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AutoScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing AutoScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoScalingPolicyState, opts?: pulumi.CustomResourceOptions): AutoScalingPolicy {
        return new AutoScalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/autoScalingPolicy:AutoScalingPolicy';

    /**
     * Returns true if the given object is an instance of AutoScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoScalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoScalingPolicy.__pulumiType;
    }

    public readonly adjustmentTypeCode!: pulumi.Output<string>;
    public readonly autoScalingGroupNo!: pulumi.Output<string>;
    public readonly cooldown!: pulumi.Output<number | undefined>;
    public readonly minAdjustmentStep!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly scalingAdjustment!: pulumi.Output<number>;

    /**
     * Create a AutoScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoScalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoScalingPolicyArgs | AutoScalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoScalingPolicyState | undefined;
            resourceInputs["adjustmentTypeCode"] = state ? state.adjustmentTypeCode : undefined;
            resourceInputs["autoScalingGroupNo"] = state ? state.autoScalingGroupNo : undefined;
            resourceInputs["cooldown"] = state ? state.cooldown : undefined;
            resourceInputs["minAdjustmentStep"] = state ? state.minAdjustmentStep : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scalingAdjustment"] = state ? state.scalingAdjustment : undefined;
        } else {
            const args = argsOrState as AutoScalingPolicyArgs | undefined;
            if ((!args || args.adjustmentTypeCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adjustmentTypeCode'");
            }
            if ((!args || args.autoScalingGroupNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupNo'");
            }
            if ((!args || args.scalingAdjustment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingAdjustment'");
            }
            resourceInputs["adjustmentTypeCode"] = args ? args.adjustmentTypeCode : undefined;
            resourceInputs["autoScalingGroupNo"] = args ? args.autoScalingGroupNo : undefined;
            resourceInputs["cooldown"] = args ? args.cooldown : undefined;
            resourceInputs["minAdjustmentStep"] = args ? args.minAdjustmentStep : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scalingAdjustment"] = args ? args.scalingAdjustment : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoScalingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoScalingPolicy resources.
 */
export interface AutoScalingPolicyState {
    adjustmentTypeCode?: pulumi.Input<string>;
    autoScalingGroupNo?: pulumi.Input<string>;
    cooldown?: pulumi.Input<number>;
    minAdjustmentStep?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    scalingAdjustment?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AutoScalingPolicy resource.
 */
export interface AutoScalingPolicyArgs {
    adjustmentTypeCode: pulumi.Input<string>;
    autoScalingGroupNo: pulumi.Input<string>;
    cooldown?: pulumi.Input<number>;
    minAdjustmentStep?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    scalingAdjustment: pulumi.Input<number>;
}
