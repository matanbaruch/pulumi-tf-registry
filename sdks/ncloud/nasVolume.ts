// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NasVolume extends pulumi.CustomResource {
    /**
     * Get an existing NasVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NasVolumeState, opts?: pulumi.CustomResourceOptions): NasVolume {
        return new NasVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/nasVolume:NasVolume';

    /**
     * Returns true if the given object is an instance of NasVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NasVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NasVolume.__pulumiType;
    }

    public readonly cifsUserName!: pulumi.Output<string | undefined>;
    public readonly cifsUserPassword!: pulumi.Output<string | undefined>;
    public readonly customIpLists!: pulumi.Output<string[]>;
    public readonly description!: pulumi.Output<string>;
    public readonly isEncryptedVolume!: pulumi.Output<boolean>;
    public /*out*/ readonly isEventConfiguration!: pulumi.Output<boolean>;
    public readonly isReturnProtection!: pulumi.Output<boolean>;
    public /*out*/ readonly isSnapshotConfiguration!: pulumi.Output<boolean>;
    public /*out*/ readonly mountInformation!: pulumi.Output<string>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly nasVolumeNo!: pulumi.Output<string>;
    public readonly serverInstanceNoLists!: pulumi.Output<string[]>;
    public /*out*/ readonly snapshotVolumeSize!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.NasVolumeTimeouts | undefined>;
    public readonly volumeAllotmentProtocolType!: pulumi.Output<string>;
    public readonly volumeNamePostfix!: pulumi.Output<string>;
    public readonly volumeSize!: pulumi.Output<number>;
    public /*out*/ readonly volumeTotalSize!: pulumi.Output<number>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a NasVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NasVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NasVolumeArgs | NasVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NasVolumeState | undefined;
            resourceInputs["cifsUserName"] = state ? state.cifsUserName : undefined;
            resourceInputs["cifsUserPassword"] = state ? state.cifsUserPassword : undefined;
            resourceInputs["customIpLists"] = state ? state.customIpLists : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isEncryptedVolume"] = state ? state.isEncryptedVolume : undefined;
            resourceInputs["isEventConfiguration"] = state ? state.isEventConfiguration : undefined;
            resourceInputs["isReturnProtection"] = state ? state.isReturnProtection : undefined;
            resourceInputs["isSnapshotConfiguration"] = state ? state.isSnapshotConfiguration : undefined;
            resourceInputs["mountInformation"] = state ? state.mountInformation : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nasVolumeNo"] = state ? state.nasVolumeNo : undefined;
            resourceInputs["serverInstanceNoLists"] = state ? state.serverInstanceNoLists : undefined;
            resourceInputs["snapshotVolumeSize"] = state ? state.snapshotVolumeSize : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeAllotmentProtocolType"] = state ? state.volumeAllotmentProtocolType : undefined;
            resourceInputs["volumeNamePostfix"] = state ? state.volumeNamePostfix : undefined;
            resourceInputs["volumeSize"] = state ? state.volumeSize : undefined;
            resourceInputs["volumeTotalSize"] = state ? state.volumeTotalSize : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NasVolumeArgs | undefined;
            if ((!args || args.volumeAllotmentProtocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeAllotmentProtocolType'");
            }
            if ((!args || args.volumeNamePostfix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeNamePostfix'");
            }
            if ((!args || args.volumeSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeSize'");
            }
            resourceInputs["cifsUserName"] = args ? args.cifsUserName : undefined;
            resourceInputs["cifsUserPassword"] = args ? args.cifsUserPassword : undefined;
            resourceInputs["customIpLists"] = args ? args.customIpLists : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["isEncryptedVolume"] = args ? args.isEncryptedVolume : undefined;
            resourceInputs["isReturnProtection"] = args ? args.isReturnProtection : undefined;
            resourceInputs["serverInstanceNoLists"] = args ? args.serverInstanceNoLists : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeAllotmentProtocolType"] = args ? args.volumeAllotmentProtocolType : undefined;
            resourceInputs["volumeNamePostfix"] = args ? args.volumeNamePostfix : undefined;
            resourceInputs["volumeSize"] = args ? args.volumeSize : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["isEventConfiguration"] = undefined /*out*/;
            resourceInputs["isSnapshotConfiguration"] = undefined /*out*/;
            resourceInputs["mountInformation"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nasVolumeNo"] = undefined /*out*/;
            resourceInputs["snapshotVolumeSize"] = undefined /*out*/;
            resourceInputs["volumeTotalSize"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NasVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NasVolume resources.
 */
export interface NasVolumeState {
    cifsUserName?: pulumi.Input<string>;
    cifsUserPassword?: pulumi.Input<string>;
    customIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    isEncryptedVolume?: pulumi.Input<boolean>;
    isEventConfiguration?: pulumi.Input<boolean>;
    isReturnProtection?: pulumi.Input<boolean>;
    isSnapshotConfiguration?: pulumi.Input<boolean>;
    mountInformation?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nasVolumeNo?: pulumi.Input<string>;
    serverInstanceNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotVolumeSize?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.NasVolumeTimeouts>;
    volumeAllotmentProtocolType?: pulumi.Input<string>;
    volumeNamePostfix?: pulumi.Input<string>;
    volumeSize?: pulumi.Input<number>;
    volumeTotalSize?: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NasVolume resource.
 */
export interface NasVolumeArgs {
    cifsUserName?: pulumi.Input<string>;
    cifsUserPassword?: pulumi.Input<string>;
    customIpLists?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    isEncryptedVolume?: pulumi.Input<boolean>;
    isReturnProtection?: pulumi.Input<boolean>;
    serverInstanceNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NasVolumeTimeouts>;
    volumeAllotmentProtocolType: pulumi.Input<string>;
    volumeNamePostfix: pulumi.Input<string>;
    volumeSize: pulumi.Input<number>;
    zone?: pulumi.Input<string>;
}
