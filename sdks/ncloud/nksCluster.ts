// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NksCluster extends pulumi.CustomResource {
    /**
     * Get an existing NksCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NksClusterState, opts?: pulumi.CustomResourceOptions): NksCluster {
        return new NksCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/nksCluster:NksCluster';

    /**
     * Returns true if the given object is an instance of NksCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NksCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NksCluster.__pulumiType;
    }

    public /*out*/ readonly acgNo!: pulumi.Output<string>;
    public readonly clusterType!: pulumi.Output<string>;
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    public readonly hypervisorCode!: pulumi.Output<string>;
    public readonly ipAclDefaultAction!: pulumi.Output<string>;
    public readonly ipAcls!: pulumi.Output<outputs.NksClusterIpAcl[] | undefined>;
    public readonly k8sVersion!: pulumi.Output<string>;
    public readonly kubeNetworkPlugin!: pulumi.Output<string>;
    public readonly lbPrivateSubnetNo!: pulumi.Output<string>;
    public readonly lbPublicSubnetNo!: pulumi.Output<string | undefined>;
    public readonly log!: pulumi.Output<outputs.NksClusterLog | undefined>;
    public readonly loginKeyName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly oidc!: pulumi.Output<outputs.NksClusterOidc | undefined>;
    public readonly publicNetwork!: pulumi.Output<boolean>;
    public readonly subnetNoLists!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.NksClusterTimeouts | undefined>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    public readonly vpcNo!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a NksCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NksClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NksClusterArgs | NksClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NksClusterState | undefined;
            resourceInputs["acgNo"] = state ? state.acgNo : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["hypervisorCode"] = state ? state.hypervisorCode : undefined;
            resourceInputs["ipAclDefaultAction"] = state ? state.ipAclDefaultAction : undefined;
            resourceInputs["ipAcls"] = state ? state.ipAcls : undefined;
            resourceInputs["k8sVersion"] = state ? state.k8sVersion : undefined;
            resourceInputs["kubeNetworkPlugin"] = state ? state.kubeNetworkPlugin : undefined;
            resourceInputs["lbPrivateSubnetNo"] = state ? state.lbPrivateSubnetNo : undefined;
            resourceInputs["lbPublicSubnetNo"] = state ? state.lbPublicSubnetNo : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["loginKeyName"] = state ? state.loginKeyName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oidc"] = state ? state.oidc : undefined;
            resourceInputs["publicNetwork"] = state ? state.publicNetwork : undefined;
            resourceInputs["subnetNoLists"] = state ? state.subnetNoLists : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as NksClusterArgs | undefined;
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.lbPrivateSubnetNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbPrivateSubnetNo'");
            }
            if ((!args || args.loginKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginKeyName'");
            }
            if ((!args || args.subnetNoLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetNoLists'");
            }
            if ((!args || args.vpcNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcNo'");
            }
            if ((!args || args.zone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zone'");
            }
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["hypervisorCode"] = args ? args.hypervisorCode : undefined;
            resourceInputs["ipAclDefaultAction"] = args ? args.ipAclDefaultAction : undefined;
            resourceInputs["ipAcls"] = args ? args.ipAcls : undefined;
            resourceInputs["k8sVersion"] = args ? args.k8sVersion : undefined;
            resourceInputs["kubeNetworkPlugin"] = args ? args.kubeNetworkPlugin : undefined;
            resourceInputs["lbPrivateSubnetNo"] = args ? args.lbPrivateSubnetNo : undefined;
            resourceInputs["lbPublicSubnetNo"] = args ? args.lbPublicSubnetNo : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["loginKeyName"] = args ? args.loginKeyName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oidc"] = args ? args.oidc : undefined;
            resourceInputs["publicNetwork"] = args ? args.publicNetwork : undefined;
            resourceInputs["subnetNoLists"] = args ? args.subnetNoLists : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcNo"] = args ? args.vpcNo : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["acgNo"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NksCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NksCluster resources.
 */
export interface NksClusterState {
    acgNo?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    hypervisorCode?: pulumi.Input<string>;
    ipAclDefaultAction?: pulumi.Input<string>;
    ipAcls?: pulumi.Input<pulumi.Input<inputs.NksClusterIpAcl>[]>;
    k8sVersion?: pulumi.Input<string>;
    kubeNetworkPlugin?: pulumi.Input<string>;
    lbPrivateSubnetNo?: pulumi.Input<string>;
    lbPublicSubnetNo?: pulumi.Input<string>;
    log?: pulumi.Input<inputs.NksClusterLog>;
    loginKeyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oidc?: pulumi.Input<inputs.NksClusterOidc>;
    publicNetwork?: pulumi.Input<boolean>;
    subnetNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NksClusterTimeouts>;
    uuid?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NksCluster resource.
 */
export interface NksClusterArgs {
    clusterType: pulumi.Input<string>;
    hypervisorCode?: pulumi.Input<string>;
    ipAclDefaultAction?: pulumi.Input<string>;
    ipAcls?: pulumi.Input<pulumi.Input<inputs.NksClusterIpAcl>[]>;
    k8sVersion?: pulumi.Input<string>;
    kubeNetworkPlugin?: pulumi.Input<string>;
    lbPrivateSubnetNo: pulumi.Input<string>;
    lbPublicSubnetNo?: pulumi.Input<string>;
    log?: pulumi.Input<inputs.NksClusterLog>;
    loginKeyName: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    oidc?: pulumi.Input<inputs.NksClusterOidc>;
    publicNetwork?: pulumi.Input<boolean>;
    subnetNoLists: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.NksClusterTimeouts>;
    vpcNo: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}
