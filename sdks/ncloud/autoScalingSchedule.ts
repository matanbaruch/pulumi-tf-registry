// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AutoScalingSchedule extends pulumi.CustomResource {
    /**
     * Get an existing AutoScalingSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoScalingScheduleState, opts?: pulumi.CustomResourceOptions): AutoScalingSchedule {
        return new AutoScalingSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/autoScalingSchedule:AutoScalingSchedule';

    /**
     * Returns true if the given object is an instance of AutoScalingSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoScalingSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoScalingSchedule.__pulumiType;
    }

    public readonly autoScalingGroupNo!: pulumi.Output<string>;
    public readonly desiredCapacity!: pulumi.Output<number>;
    public readonly endTime!: pulumi.Output<string | undefined>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly recurrence!: pulumi.Output<string | undefined>;
    public readonly startTime!: pulumi.Output<string | undefined>;
    public readonly timeZone!: pulumi.Output<string>;

    /**
     * Create a AutoScalingSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoScalingScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoScalingScheduleArgs | AutoScalingScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoScalingScheduleState | undefined;
            resourceInputs["autoScalingGroupNo"] = state ? state.autoScalingGroupNo : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recurrence"] = state ? state.recurrence : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        } else {
            const args = argsOrState as AutoScalingScheduleArgs | undefined;
            if ((!args || args.autoScalingGroupNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupNo'");
            }
            if ((!args || args.desiredCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desiredCapacity'");
            }
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            resourceInputs["autoScalingGroupNo"] = args ? args.autoScalingGroupNo : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recurrence"] = args ? args.recurrence : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoScalingSchedule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoScalingSchedule resources.
 */
export interface AutoScalingScheduleState {
    autoScalingGroupNo?: pulumi.Input<string>;
    desiredCapacity?: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    recurrence?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AutoScalingSchedule resource.
 */
export interface AutoScalingScheduleArgs {
    autoScalingGroupNo: pulumi.Input<string>;
    desiredCapacity: pulumi.Input<number>;
    endTime?: pulumi.Input<string>;
    maxSize: pulumi.Input<number>;
    minSize: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    recurrence?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
}
