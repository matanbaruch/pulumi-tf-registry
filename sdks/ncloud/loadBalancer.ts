// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    /**
     * Load balancer algorithm type code. The available algorithms are as follows: [ROUND ROBIN (RR) | LEAST_CONNECTION (LC)].
     * Default: ROUND ROBIN (RR)
     */
    public readonly algorithmType!: pulumi.Output<string>;
    public /*out*/ readonly certificateName!: pulumi.Output<string>;
    public /*out*/ readonly connectionTimeout!: pulumi.Output<number>;
    /**
     * Description of a load balancer to create
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly domainName!: pulumi.Output<string>;
    public /*out*/ readonly instanceNo!: pulumi.Output<string>;
    public /*out*/ readonly instanceOperation!: pulumi.Output<string>;
    public /*out*/ readonly instanceStatus!: pulumi.Output<string>;
    public /*out*/ readonly instanceStatusName!: pulumi.Output<string>;
    /**
     * Internet line identification code. PUBLC(Public), GLBL(Global). default : PUBLC(Public)
     *
     * @deprecated Deprecated
     */
    public readonly internetLineType!: pulumi.Output<string>;
    public /*out*/ readonly isHttpKeepAlive!: pulumi.Output<boolean>;
    public /*out*/ readonly loadBalancedServerInstanceLists!: pulumi.Output<string[]>;
    /**
     * Name of a load balancer to create. Default: Automatically specified by Ncloud.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network usage identification code. PBLIP(PublicIp), PRVT(PrivateIP). default : PBLIP(PublicIp)
     */
    public readonly networkUsageType!: pulumi.Output<string>;
    /**
     * Region code. Get available values using the `data ncloud.getRegions`.
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * Load balancer rules are required to create a load balancer.
     */
    public readonly ruleLists!: pulumi.Output<outputs.LoadBalancerRuleList[]>;
    /**
     * List of server instance numbers to be bound to the load balancer
     */
    public readonly serverInstanceNoLists!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerTimeouts | undefined>;
    public /*out*/ readonly virtualIp!: pulumi.Output<string>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["algorithmType"] = state ? state.algorithmType : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["instanceNo"] = state ? state.instanceNo : undefined;
            resourceInputs["instanceOperation"] = state ? state.instanceOperation : undefined;
            resourceInputs["instanceStatus"] = state ? state.instanceStatus : undefined;
            resourceInputs["instanceStatusName"] = state ? state.instanceStatusName : undefined;
            resourceInputs["internetLineType"] = state ? state.internetLineType : undefined;
            resourceInputs["isHttpKeepAlive"] = state ? state.isHttpKeepAlive : undefined;
            resourceInputs["loadBalancedServerInstanceLists"] = state ? state.loadBalancedServerInstanceLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkUsageType"] = state ? state.networkUsageType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["ruleLists"] = state ? state.ruleLists : undefined;
            resourceInputs["serverInstanceNoLists"] = state ? state.serverInstanceNoLists : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["virtualIp"] = state ? state.virtualIp : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if ((!args || args.ruleLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleLists'");
            }
            resourceInputs["algorithmType"] = args ? args.algorithmType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["internetLineType"] = args ? args.internetLineType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkUsageType"] = args ? args.networkUsageType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["ruleLists"] = args ? args.ruleLists : undefined;
            resourceInputs["serverInstanceNoLists"] = args ? args.serverInstanceNoLists : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["certificateName"] = undefined /*out*/;
            resourceInputs["connectionTimeout"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["instanceNo"] = undefined /*out*/;
            resourceInputs["instanceOperation"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["instanceStatusName"] = undefined /*out*/;
            resourceInputs["isHttpKeepAlive"] = undefined /*out*/;
            resourceInputs["loadBalancedServerInstanceLists"] = undefined /*out*/;
            resourceInputs["virtualIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * Load balancer algorithm type code. The available algorithms are as follows: [ROUND ROBIN (RR) | LEAST_CONNECTION (LC)].
     * Default: ROUND ROBIN (RR)
     */
    algorithmType?: pulumi.Input<string>;
    certificateName?: pulumi.Input<string>;
    connectionTimeout?: pulumi.Input<number>;
    /**
     * Description of a load balancer to create
     */
    description?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    instanceNo?: pulumi.Input<string>;
    instanceOperation?: pulumi.Input<string>;
    instanceStatus?: pulumi.Input<string>;
    instanceStatusName?: pulumi.Input<string>;
    /**
     * Internet line identification code. PUBLC(Public), GLBL(Global). default : PUBLC(Public)
     *
     * @deprecated Deprecated
     */
    internetLineType?: pulumi.Input<string>;
    isHttpKeepAlive?: pulumi.Input<boolean>;
    loadBalancedServerInstanceLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of a load balancer to create. Default: Automatically specified by Ncloud.
     */
    name?: pulumi.Input<string>;
    /**
     * Network usage identification code. PBLIP(PublicIp), PRVT(PrivateIP). default : PBLIP(PublicIp)
     */
    networkUsageType?: pulumi.Input<string>;
    /**
     * Region code. Get available values using the `data ncloud.getRegions`.
     */
    region?: pulumi.Input<string>;
    /**
     * Load balancer rules are required to create a load balancer.
     */
    ruleLists?: pulumi.Input<pulumi.Input<inputs.LoadBalancerRuleList>[]>;
    /**
     * List of server instance numbers to be bound to the load balancer
     */
    serverInstanceNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.LoadBalancerTimeouts>;
    virtualIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * Load balancer algorithm type code. The available algorithms are as follows: [ROUND ROBIN (RR) | LEAST_CONNECTION (LC)].
     * Default: ROUND ROBIN (RR)
     */
    algorithmType?: pulumi.Input<string>;
    /**
     * Description of a load balancer to create
     */
    description?: pulumi.Input<string>;
    /**
     * Internet line identification code. PUBLC(Public), GLBL(Global). default : PUBLC(Public)
     *
     * @deprecated Deprecated
     */
    internetLineType?: pulumi.Input<string>;
    /**
     * Name of a load balancer to create. Default: Automatically specified by Ncloud.
     */
    name?: pulumi.Input<string>;
    /**
     * Network usage identification code. PBLIP(PublicIp), PRVT(PrivateIP). default : PBLIP(PublicIp)
     */
    networkUsageType?: pulumi.Input<string>;
    /**
     * Region code. Get available values using the `data ncloud.getRegions`.
     */
    region?: pulumi.Input<string>;
    /**
     * Load balancer rules are required to create a load balancer.
     */
    ruleLists: pulumi.Input<pulumi.Input<inputs.LoadBalancerRuleList>[]>;
    /**
     * List of server instance numbers to be bound to the load balancer
     */
    serverInstanceNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.LoadBalancerTimeouts>;
}
