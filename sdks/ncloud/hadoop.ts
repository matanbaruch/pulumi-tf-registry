// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Hadoop extends pulumi.CustomResource {
    /**
     * Get an existing Hadoop resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HadoopState, opts?: pulumi.CustomResourceOptions): Hadoop {
        return new Hadoop(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/hadoop:Hadoop';

    /**
     * Returns true if the given object is an instance of Hadoop.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hadoop {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hadoop.__pulumiType;
    }

    public /*out*/ readonly accessControlGroupNoLists!: pulumi.Output<string[]>;
    /**
     * this attribute can used over 1.5 version
     */
    public readonly addOnCodeLists!: pulumi.Output<string[] | undefined>;
    public readonly adminUserName!: pulumi.Output<string>;
    public readonly adminUserPassword!: pulumi.Output<string>;
    public /*out*/ readonly ambariServerHost!: pulumi.Output<string>;
    public readonly bootstrapScript!: pulumi.Output<string | undefined>;
    public readonly bucketName!: pulumi.Output<string>;
    public /*out*/ readonly clusterDirectAccessAccount!: pulumi.Output<string>;
    public readonly clusterName!: pulumi.Output<string>;
    public readonly clusterTypeCode!: pulumi.Output<string>;
    public /*out*/ readonly domain!: pulumi.Output<string>;
    /**
     * default: minimum spec
     */
    public readonly edgeNodeProductCode!: pulumi.Output<string>;
    public readonly edgeNodeSubnetNo!: pulumi.Output<string>;
    public /*out*/ readonly hadoopServerLists!: pulumi.Output<outputs.HadoopHadoopServerList[]>;
    /**
     * default: latest version
     */
    public readonly imageProductCode!: pulumi.Output<string>;
    public /*out*/ readonly isHa!: pulumi.Output<boolean>;
    public readonly kdcPassword!: pulumi.Output<string | undefined>;
    public readonly kdcRealm!: pulumi.Output<string | undefined>;
    public readonly loginKeyName!: pulumi.Output<string>;
    public readonly masterNodeDataStorageSize!: pulumi.Output<number>;
    /**
     * default: SSD
     */
    public readonly masterNodeDataStorageType!: pulumi.Output<string>;
    /**
     * default: minimum spec
     */
    public readonly masterNodeProductCode!: pulumi.Output<string>;
    public readonly masterNodeSubnetNo!: pulumi.Output<string>;
    public /*out*/ readonly regionCode!: pulumi.Output<string>;
    /**
     * default: false
     */
    public readonly useBootstrapScript!: pulumi.Output<boolean | undefined>;
    /**
     * this attribute can used over 2.0 version
     */
    public readonly useDataCatalog!: pulumi.Output<boolean | undefined>;
    public readonly useKdc!: pulumi.Output<boolean>;
    public /*out*/ readonly version!: pulumi.Output<string>;
    public readonly vpcNo!: pulumi.Output<string>;
    public readonly workerNodeCount!: pulumi.Output<number>;
    public readonly workerNodeDataStorageSize!: pulumi.Output<number>;
    /**
     * default: SSD
     */
    public readonly workerNodeDataStorageType!: pulumi.Output<string>;
    /**
     * default: minimum spec
     */
    public readonly workerNodeProductCode!: pulumi.Output<string>;
    public readonly workerNodeSubnetNo!: pulumi.Output<string>;

    /**
     * Create a Hadoop resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HadoopArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HadoopArgs | HadoopState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HadoopState | undefined;
            resourceInputs["accessControlGroupNoLists"] = state ? state.accessControlGroupNoLists : undefined;
            resourceInputs["addOnCodeLists"] = state ? state.addOnCodeLists : undefined;
            resourceInputs["adminUserName"] = state ? state.adminUserName : undefined;
            resourceInputs["adminUserPassword"] = state ? state.adminUserPassword : undefined;
            resourceInputs["ambariServerHost"] = state ? state.ambariServerHost : undefined;
            resourceInputs["bootstrapScript"] = state ? state.bootstrapScript : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["clusterDirectAccessAccount"] = state ? state.clusterDirectAccessAccount : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterTypeCode"] = state ? state.clusterTypeCode : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["edgeNodeProductCode"] = state ? state.edgeNodeProductCode : undefined;
            resourceInputs["edgeNodeSubnetNo"] = state ? state.edgeNodeSubnetNo : undefined;
            resourceInputs["hadoopServerLists"] = state ? state.hadoopServerLists : undefined;
            resourceInputs["imageProductCode"] = state ? state.imageProductCode : undefined;
            resourceInputs["isHa"] = state ? state.isHa : undefined;
            resourceInputs["kdcPassword"] = state ? state.kdcPassword : undefined;
            resourceInputs["kdcRealm"] = state ? state.kdcRealm : undefined;
            resourceInputs["loginKeyName"] = state ? state.loginKeyName : undefined;
            resourceInputs["masterNodeDataStorageSize"] = state ? state.masterNodeDataStorageSize : undefined;
            resourceInputs["masterNodeDataStorageType"] = state ? state.masterNodeDataStorageType : undefined;
            resourceInputs["masterNodeProductCode"] = state ? state.masterNodeProductCode : undefined;
            resourceInputs["masterNodeSubnetNo"] = state ? state.masterNodeSubnetNo : undefined;
            resourceInputs["regionCode"] = state ? state.regionCode : undefined;
            resourceInputs["useBootstrapScript"] = state ? state.useBootstrapScript : undefined;
            resourceInputs["useDataCatalog"] = state ? state.useDataCatalog : undefined;
            resourceInputs["useKdc"] = state ? state.useKdc : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
            resourceInputs["workerNodeCount"] = state ? state.workerNodeCount : undefined;
            resourceInputs["workerNodeDataStorageSize"] = state ? state.workerNodeDataStorageSize : undefined;
            resourceInputs["workerNodeDataStorageType"] = state ? state.workerNodeDataStorageType : undefined;
            resourceInputs["workerNodeProductCode"] = state ? state.workerNodeProductCode : undefined;
            resourceInputs["workerNodeSubnetNo"] = state ? state.workerNodeSubnetNo : undefined;
        } else {
            const args = argsOrState as HadoopArgs | undefined;
            if ((!args || args.adminUserName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUserName'");
            }
            if ((!args || args.adminUserPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminUserPassword'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.clusterTypeCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterTypeCode'");
            }
            if ((!args || args.edgeNodeSubnetNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'edgeNodeSubnetNo'");
            }
            if ((!args || args.loginKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginKeyName'");
            }
            if ((!args || args.masterNodeDataStorageSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeDataStorageSize'");
            }
            if ((!args || args.masterNodeDataStorageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeDataStorageType'");
            }
            if ((!args || args.masterNodeSubnetNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeSubnetNo'");
            }
            if ((!args || args.vpcNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcNo'");
            }
            if ((!args || args.workerNodeDataStorageSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerNodeDataStorageSize'");
            }
            if ((!args || args.workerNodeDataStorageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerNodeDataStorageType'");
            }
            if ((!args || args.workerNodeSubnetNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workerNodeSubnetNo'");
            }
            resourceInputs["addOnCodeLists"] = args ? args.addOnCodeLists : undefined;
            resourceInputs["adminUserName"] = args ? args.adminUserName : undefined;
            resourceInputs["adminUserPassword"] = args?.adminUserPassword ? pulumi.secret(args.adminUserPassword) : undefined;
            resourceInputs["bootstrapScript"] = args ? args.bootstrapScript : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterTypeCode"] = args ? args.clusterTypeCode : undefined;
            resourceInputs["edgeNodeProductCode"] = args ? args.edgeNodeProductCode : undefined;
            resourceInputs["edgeNodeSubnetNo"] = args ? args.edgeNodeSubnetNo : undefined;
            resourceInputs["imageProductCode"] = args ? args.imageProductCode : undefined;
            resourceInputs["kdcPassword"] = args?.kdcPassword ? pulumi.secret(args.kdcPassword) : undefined;
            resourceInputs["kdcRealm"] = args ? args.kdcRealm : undefined;
            resourceInputs["loginKeyName"] = args ? args.loginKeyName : undefined;
            resourceInputs["masterNodeDataStorageSize"] = args ? args.masterNodeDataStorageSize : undefined;
            resourceInputs["masterNodeDataStorageType"] = args ? args.masterNodeDataStorageType : undefined;
            resourceInputs["masterNodeProductCode"] = args ? args.masterNodeProductCode : undefined;
            resourceInputs["masterNodeSubnetNo"] = args ? args.masterNodeSubnetNo : undefined;
            resourceInputs["useBootstrapScript"] = args ? args.useBootstrapScript : undefined;
            resourceInputs["useDataCatalog"] = args ? args.useDataCatalog : undefined;
            resourceInputs["useKdc"] = args ? args.useKdc : undefined;
            resourceInputs["vpcNo"] = args ? args.vpcNo : undefined;
            resourceInputs["workerNodeCount"] = args ? args.workerNodeCount : undefined;
            resourceInputs["workerNodeDataStorageSize"] = args ? args.workerNodeDataStorageSize : undefined;
            resourceInputs["workerNodeDataStorageType"] = args ? args.workerNodeDataStorageType : undefined;
            resourceInputs["workerNodeProductCode"] = args ? args.workerNodeProductCode : undefined;
            resourceInputs["workerNodeSubnetNo"] = args ? args.workerNodeSubnetNo : undefined;
            resourceInputs["accessControlGroupNoLists"] = undefined /*out*/;
            resourceInputs["ambariServerHost"] = undefined /*out*/;
            resourceInputs["clusterDirectAccessAccount"] = undefined /*out*/;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["hadoopServerLists"] = undefined /*out*/;
            resourceInputs["isHa"] = undefined /*out*/;
            resourceInputs["regionCode"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminUserPassword", "kdcPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Hadoop.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Hadoop resources.
 */
export interface HadoopState {
    accessControlGroupNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * this attribute can used over 1.5 version
     */
    addOnCodeLists?: pulumi.Input<pulumi.Input<string>[]>;
    adminUserName?: pulumi.Input<string>;
    adminUserPassword?: pulumi.Input<string>;
    ambariServerHost?: pulumi.Input<string>;
    bootstrapScript?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    clusterDirectAccessAccount?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterTypeCode?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    /**
     * default: minimum spec
     */
    edgeNodeProductCode?: pulumi.Input<string>;
    edgeNodeSubnetNo?: pulumi.Input<string>;
    hadoopServerLists?: pulumi.Input<pulumi.Input<inputs.HadoopHadoopServerList>[]>;
    /**
     * default: latest version
     */
    imageProductCode?: pulumi.Input<string>;
    isHa?: pulumi.Input<boolean>;
    kdcPassword?: pulumi.Input<string>;
    kdcRealm?: pulumi.Input<string>;
    loginKeyName?: pulumi.Input<string>;
    masterNodeDataStorageSize?: pulumi.Input<number>;
    /**
     * default: SSD
     */
    masterNodeDataStorageType?: pulumi.Input<string>;
    /**
     * default: minimum spec
     */
    masterNodeProductCode?: pulumi.Input<string>;
    masterNodeSubnetNo?: pulumi.Input<string>;
    regionCode?: pulumi.Input<string>;
    /**
     * default: false
     */
    useBootstrapScript?: pulumi.Input<boolean>;
    /**
     * this attribute can used over 2.0 version
     */
    useDataCatalog?: pulumi.Input<boolean>;
    useKdc?: pulumi.Input<boolean>;
    version?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
    workerNodeCount?: pulumi.Input<number>;
    workerNodeDataStorageSize?: pulumi.Input<number>;
    /**
     * default: SSD
     */
    workerNodeDataStorageType?: pulumi.Input<string>;
    /**
     * default: minimum spec
     */
    workerNodeProductCode?: pulumi.Input<string>;
    workerNodeSubnetNo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hadoop resource.
 */
export interface HadoopArgs {
    /**
     * this attribute can used over 1.5 version
     */
    addOnCodeLists?: pulumi.Input<pulumi.Input<string>[]>;
    adminUserName: pulumi.Input<string>;
    adminUserPassword: pulumi.Input<string>;
    bootstrapScript?: pulumi.Input<string>;
    bucketName: pulumi.Input<string>;
    clusterName: pulumi.Input<string>;
    clusterTypeCode: pulumi.Input<string>;
    /**
     * default: minimum spec
     */
    edgeNodeProductCode?: pulumi.Input<string>;
    edgeNodeSubnetNo: pulumi.Input<string>;
    /**
     * default: latest version
     */
    imageProductCode?: pulumi.Input<string>;
    kdcPassword?: pulumi.Input<string>;
    kdcRealm?: pulumi.Input<string>;
    loginKeyName: pulumi.Input<string>;
    masterNodeDataStorageSize: pulumi.Input<number>;
    /**
     * default: SSD
     */
    masterNodeDataStorageType: pulumi.Input<string>;
    /**
     * default: minimum spec
     */
    masterNodeProductCode?: pulumi.Input<string>;
    masterNodeSubnetNo: pulumi.Input<string>;
    /**
     * default: false
     */
    useBootstrapScript?: pulumi.Input<boolean>;
    /**
     * this attribute can used over 2.0 version
     */
    useDataCatalog?: pulumi.Input<boolean>;
    useKdc?: pulumi.Input<boolean>;
    vpcNo: pulumi.Input<string>;
    workerNodeCount?: pulumi.Input<number>;
    workerNodeDataStorageSize: pulumi.Input<number>;
    /**
     * default: SSD
     */
    workerNodeDataStorageType: pulumi.Input<string>;
    /**
     * default: minimum spec
     */
    workerNodeProductCode?: pulumi.Input<string>;
    workerNodeSubnetNo: pulumi.Input<string>;
}
