// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SourcebuildProject extends pulumi.CustomResource {
    /**
     * Get an existing SourcebuildProject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourcebuildProjectState, opts?: pulumi.CustomResourceOptions): SourcebuildProject {
        return new SourcebuildProject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/sourcebuildProject:SourcebuildProject';

    /**
     * Returns true if the given object is an instance of SourcebuildProject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourcebuildProject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourcebuildProject.__pulumiType;
    }

    public readonly artifact!: pulumi.Output<outputs.SourcebuildProjectArtifact | undefined>;
    public readonly buildCommand!: pulumi.Output<outputs.SourcebuildProjectBuildCommand | undefined>;
    public readonly buildImageUpload!: pulumi.Output<outputs.SourcebuildProjectBuildImageUpload | undefined>;
    public /*out*/ readonly createds!: pulumi.Output<outputs.SourcebuildProjectCreated[]>;
    public readonly description!: pulumi.Output<string>;
    public readonly env!: pulumi.Output<outputs.SourcebuildProjectEnv>;
    public /*out*/ readonly lastBuilds!: pulumi.Output<outputs.SourcebuildProjectLastBuild[]>;
    public readonly linked!: pulumi.Output<outputs.SourcebuildProjectLinked | undefined>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly projectNo!: pulumi.Output<number>;
    public readonly source!: pulumi.Output<outputs.SourcebuildProjectSource>;
    public readonly timeouts!: pulumi.Output<outputs.SourcebuildProjectTimeouts | undefined>;

    /**
     * Create a SourcebuildProject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourcebuildProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourcebuildProjectArgs | SourcebuildProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourcebuildProjectState | undefined;
            resourceInputs["artifact"] = state ? state.artifact : undefined;
            resourceInputs["buildCommand"] = state ? state.buildCommand : undefined;
            resourceInputs["buildImageUpload"] = state ? state.buildImageUpload : undefined;
            resourceInputs["createds"] = state ? state.createds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["lastBuilds"] = state ? state.lastBuilds : undefined;
            resourceInputs["linked"] = state ? state.linked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectNo"] = state ? state.projectNo : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SourcebuildProjectArgs | undefined;
            if ((!args || args.env === undefined) && !opts.urn) {
                throw new Error("Missing required property 'env'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["artifact"] = args ? args.artifact : undefined;
            resourceInputs["buildCommand"] = args ? args.buildCommand : undefined;
            resourceInputs["buildImageUpload"] = args ? args.buildImageUpload : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["linked"] = args ? args.linked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createds"] = undefined /*out*/;
            resourceInputs["lastBuilds"] = undefined /*out*/;
            resourceInputs["projectNo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourcebuildProject.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourcebuildProject resources.
 */
export interface SourcebuildProjectState {
    artifact?: pulumi.Input<inputs.SourcebuildProjectArtifact>;
    buildCommand?: pulumi.Input<inputs.SourcebuildProjectBuildCommand>;
    buildImageUpload?: pulumi.Input<inputs.SourcebuildProjectBuildImageUpload>;
    createds?: pulumi.Input<pulumi.Input<inputs.SourcebuildProjectCreated>[]>;
    description?: pulumi.Input<string>;
    env?: pulumi.Input<inputs.SourcebuildProjectEnv>;
    lastBuilds?: pulumi.Input<pulumi.Input<inputs.SourcebuildProjectLastBuild>[]>;
    linked?: pulumi.Input<inputs.SourcebuildProjectLinked>;
    name?: pulumi.Input<string>;
    projectNo?: pulumi.Input<number>;
    source?: pulumi.Input<inputs.SourcebuildProjectSource>;
    timeouts?: pulumi.Input<inputs.SourcebuildProjectTimeouts>;
}

/**
 * The set of arguments for constructing a SourcebuildProject resource.
 */
export interface SourcebuildProjectArgs {
    artifact?: pulumi.Input<inputs.SourcebuildProjectArtifact>;
    buildCommand?: pulumi.Input<inputs.SourcebuildProjectBuildCommand>;
    buildImageUpload?: pulumi.Input<inputs.SourcebuildProjectBuildImageUpload>;
    description?: pulumi.Input<string>;
    env: pulumi.Input<inputs.SourcebuildProjectEnv>;
    linked?: pulumi.Input<inputs.SourcebuildProjectLinked>;
    name?: pulumi.Input<string>;
    source: pulumi.Input<inputs.SourcebuildProjectSource>;
    timeouts?: pulumi.Input<inputs.SourcebuildProjectTimeouts>;
}
