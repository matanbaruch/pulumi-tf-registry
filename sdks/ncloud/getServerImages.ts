// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getServerImages(args?: GetServerImagesArgs, opts?: pulumi.InvokeOptions): Promise<GetServerImagesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ncloud:index/getServerImages:getServerImages", {
        "blockStorageSize": args.blockStorageSize,
        "exclusionProductCode": args.exclusionProductCode,
        "filters": args.filters,
        "id": args.id,
        "infraResourceDetailTypeCode": args.infraResourceDetailTypeCode,
        "outputFile": args.outputFile,
        "platformType": args.platformType,
        "productCode": args.productCode,
        "productNameRegex": args.productNameRegex,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getServerImages.
 */
export interface GetServerImagesArgs {
    /**
     * @deprecated Deprecated
     */
    blockStorageSize?: number;
    /**
     * @deprecated Deprecated
     */
    exclusionProductCode?: string;
    filters?: inputs.GetServerImagesFilter[];
    id?: string;
    infraResourceDetailTypeCode?: string;
    outputFile?: string;
    platformType?: string;
    productCode?: string;
    /**
     * @deprecated Deprecated
     */
    productNameRegex?: string;
    /**
     * @deprecated Deprecated
     */
    region?: string;
}

/**
 * A collection of values returned by getServerImages.
 */
export interface GetServerImagesResult {
    /**
     * @deprecated Deprecated
     */
    readonly blockStorageSize?: number;
    /**
     * @deprecated Deprecated
     */
    readonly exclusionProductCode?: string;
    readonly filters?: outputs.GetServerImagesFilter[];
    readonly id: string;
    readonly ids: string[];
    readonly infraResourceDetailTypeCode: string;
    readonly outputFile?: string;
    readonly platformType: string;
    readonly productCode: string;
    /**
     * @deprecated Deprecated
     */
    readonly productNameRegex?: string;
    /**
     * @deprecated Deprecated
     */
    readonly region?: string;
    readonly serverImages: outputs.GetServerImagesServerImage[];
}
export function getServerImagesOutput(args?: GetServerImagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerImagesResult> {
    return pulumi.output(args).apply((a: any) => getServerImages(a, opts))
}

/**
 * A collection of arguments for invoking getServerImages.
 */
export interface GetServerImagesOutputArgs {
    /**
     * @deprecated Deprecated
     */
    blockStorageSize?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    exclusionProductCode?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetServerImagesFilterArgs>[]>;
    id?: pulumi.Input<string>;
    infraResourceDetailTypeCode?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
    platformType?: pulumi.Input<string>;
    productCode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    productNameRegex?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    region?: pulumi.Input<string>;
}
