// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AccessControlGroupRuleInbound {
    description: string;
    ipBlock: string;
    portRange: string;
    protocol: string;
    sourceAccessControlGroupNo: string;
}

export interface AccessControlGroupRuleOutbound {
    description: string;
    ipBlock: string;
    portRange: string;
    protocol: string;
    sourceAccessControlGroupNo: string;
}

export interface AccessControlGroupRuleTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BlockStorageSnapshotTimeouts {
    create?: string;
    delete?: string;
}

export interface BlockStorageTimeouts {
    create?: string;
    delete?: string;
}

export interface CdssClusterBrokerNodes {
    nodeCount: number;
    nodeProductCode: string;
    storageSize: number;
    subnetNo: string;
}

export interface CdssClusterCmak {
    userName: string;
    userPassword: string;
}

export interface CdssClusterEndpoint {
    hostsPrivateEndpointTls: string[];
    hostsPublicEndpointTls: string[];
    plaintexts: string[];
    publicEndpointPlaintextListenerPorts: string[];
    publicEndpointPlaintexts: string[];
    publicEndpointTls: string[];
    publicEndpointTlsListenerPorts: string[];
    tls: string[];
    zookeepers: string[];
}

export interface CdssClusterManagerNode {
    nodeProductCode: string;
    subnetNo: string;
}

export interface CdssClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface GetAccessControlGroupFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAutoScalingAdjustmentTypesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAutoScalingAdjustmentTypesType {
    code: string;
    codeName: string;
}

export interface GetAutoScalingGroupFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAutoScalingPolicyFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetAutoScalingScheduleFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBlockStorageFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetBlockStorageSnapshotFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCdssClusterBrokerNode {
    nodeCount?: string;
    nodeProductCode?: string;
    storageSize?: string;
    subnetNo?: string;
}

export interface GetCdssClusterCmak {
    userName?: string;
    userPassword?: string;
}

export interface GetCdssClusterEndpoint {
    hostsPrivateEndpointTls: string[];
    hostsPublicEndpointTls: string[];
    plaintexts: string[];
    publicEndpointPlaintextListenerPorts: string[];
    publicEndpointPlaintexts: string[];
    publicEndpointTls: string[];
    publicEndpointTlsListenerPorts: string[];
    tls: string[];
    zookeepers: string[];
}

export interface GetCdssClusterFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCdssClusterManagerNode {
    nodeProductCode?: string;
    subnetNo?: string;
}

export interface GetCdssConfigGroupFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCdssKafkaVersionFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCdssKafkaVersionsKafkaVersion {
    id: string;
    name: string;
}

export interface GetCdssNodeProductFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCdssNodeProductsNodeProduct {
    cpuCount: string;
    id: string;
    memorySize: string;
    productType: string;
}

export interface GetCdssOsImageFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetCdssOsImagesOsImage {
    id: string;
    imageName: string;
}

export interface GetHadoopHadoopServerList {
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    dataStorageType: string;
    isPublicSubnet: boolean;
    memorySize: number;
    productCode: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    subnetNo: string;
    uptime: string;
    zoneCode: string;
}

export interface GetHadoopImageProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetHadoopImageProductsImageProductList {
    generationCode: string;
    osInformation: string;
    platformType: string;
    productCode: string;
    productName: string;
    productType: string;
}

export interface GetHadoopProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetHadoopProductsProductList {
    cpuCount: number;
    diskType: string;
    infraResourceDetailType: string;
    infraResourceType: string;
    memorySize: number;
    productCode: string;
    productDescription: string;
    productName: string;
    productType: string;
}

export interface GetInitScriptFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLaunchConfigurationFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLbFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLbListenerFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLbTargetGroupFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetLbTargetGroupHealthCheck {
    cycle: number;
    downThreshold: number;
    httpMethod: string;
    port: number;
    protocol: string;
    upThreshold: number;
    urlPath: string;
}

export interface GetMemberServerImageFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMemberServerImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMongodbImageProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMongodbImageProductsImageProductList {
    generationCode: string;
    osInformation: string;
    platformType: string;
    productCode: string;
    productName: string;
    productType: string;
}

export interface GetMongodbMongodbServerList {
    clusterRole: string;
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    memorySize: number;
    privateDomain: string;
    productCode: string;
    publicDomain: string;
    replicaSetName: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    uptime: string;
}

export interface GetMongodbProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMongodbProductsProductList {
    cpuCount: number;
    diskType: string;
    infraResourceDetailType: string;
    infraResourceType: string;
    memorySize: number;
    productCode: string;
    productDescription: string;
    productName: string;
    productType: string;
}

export interface GetMssqlImageProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMssqlImageProductsImageProductList {
    generationCode: string;
    osInformation: string;
    platformType: string;
    productCode: string;
    productName: string;
    productType: string;
}

export interface GetMssqlMssqlServerList {
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    isPublicSubnet: boolean;
    memorySize: number;
    privateDomain: string;
    productCode: string;
    publicDomain: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    subnetNo: string;
    uptime: string;
    usedDataStorageSize: number;
    zoneCode: string;
}

export interface GetMssqlProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMssqlProductsProductList {
    cpuCount: number;
    diskType: string;
    infraResourceType: string;
    memorySize: number;
    productCode: string;
    productDescription: string;
    productName: string;
    productType: string;
}

export interface GetMysqlImageProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlImageProductsImageProductList {
    generationCode: string;
    osInformation: string;
    platformType: string;
    productCode: string;
    productName: string;
    productType: string;
}

export interface GetMysqlMysqlServerList {
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    isPublicSubnet: boolean;
    memorySize: number;
    privateDomain: string;
    productCode: string;
    publicDomain: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    subnetNo: string;
    uptime: string;
    usedDataStorageSize: number;
    zoneCode: string;
}

export interface GetMysqlProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetMysqlProductsProductList {
    cpuCount: number;
    diskType: string;
    infraResourceType: string;
    memorySize: number;
    productCode: string;
    productDescription: string;
    productName: string;
    productType: string;
}

export interface GetNasVolumeFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNasVolumesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNasVolumesNasVolume {
    customIpLists: string[];
    description: string;
    id: string;
    isEncryptedVolume: boolean;
    isEventConfiguration: boolean;
    isReturnProtection: boolean;
    isSnapshotConfiguration: boolean;
    mountInformation: string;
    name: string;
    nasVolumeNo: string;
    serverInstanceNoLists: string[];
    snapshotVolumeSize: number;
    volumeAllotmentProtocolType: string;
    volumeNamePostfix: string;
    volumeSize: number;
    volumeTotalSize: number;
    zone: string;
}

export interface GetNatGatewayFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkAclDenyAllowGroupsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkAclDenyAllowGroupsNetworkAclDenyAllowGroup {
    description: string;
    id: string;
    ipLists: string[];
    name: string;
    networkAclDenyAllowGroupNo: string;
    vpcNo: string;
}

export interface GetNetworkAclsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkAclsNetworkAcl {
    description: string;
    id: string;
    isDefault: boolean;
    name: string;
    networkAclNo: string;
    vpcNo: string;
}

export interface GetNetworkInterfaceFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkInterfacesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNetworkInterfacesNetworkInterface {
    accessControlGroups: string[];
    description: string;
    id: string;
    instanceType: string;
    isDefault: boolean;
    name: string;
    networkInterfaceNo: string;
    privateIp: string;
    serverInstanceNo: string;
    status: string;
    subnetNo: string;
}

export interface GetNksClusterIpAcl {
    action: string;
    address: string;
    comment: string;
}

export interface GetNksClusterLog {
    audit: boolean;
}

export interface GetNksClusterOidc {
    clientId: string;
    groupsClaim?: string;
    groupsPrefix?: string;
    issuerUrl: string;
    requiredClaim?: string;
    usernameClaim?: string;
    usernamePrefix?: string;
}

export interface GetNksNodePoolAutoscale {
    enabled: boolean;
    max: number;
    min: number;
}

export interface GetNksNodePoolLabel {
    key: string;
    value: string;
}

export interface GetNksNodePoolNode {
    containerVersion: string;
    instanceNo: number;
    kernelVersion: string;
    name: string;
    nodeStatus: string;
    privateIp: string;
    publicIp: string;
    spec: string;
}

export interface GetNksNodePoolTaint {
    effect: string;
    key: string;
    value: string;
}

export interface GetNksServerImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNksServerImagesImage {
    label: string;
    value: string;
}

export interface GetNksServerProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNksServerProductsProduct {
    cpuCount: string;
    details: outputs.GetNksServerProductsProductDetail[];
    gpuCount: string;
    gpuMemorySize: string;
    label: string;
    memorySize: string;
    productCode: string;
    productEnglishDesc: string;
    productKoreanDesc: string;
    productType: string;
    value: string;
}

export interface GetNksServerProductsProductDetail {
    cpuCount: string;
    gpuCount: string;
    gpuMemorySize: string;
    memorySize: string;
    productCode: string;
    productEnglishDesc: string;
    productKoreanDesc: string;
    productType: string;
}

export interface GetNksVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetNksVersionsVersion {
    label: string;
    value: string;
}

export interface GetPlacementGroupFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetPortForwardingRulesPortForwardingRuleList {
    portForwardingExternalPort: string;
    portForwardingInternalPort: string;
    portForwardingPublicIp: string;
    serverInstanceNo: string;
}

export interface GetPublicIpFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRedisImageProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRedisImageProductsImageProductList {
    generationCode: string;
    osInformation: string;
    platformType: string;
    productCode: string;
    productName: string;
    productType: string;
}

export interface GetRedisProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRedisProductsProductList {
    cpuCount: number;
    diskType: string;
    infraResourceType: string;
    memorySize: number;
    productCode: string;
    productDescription: string;
    productName: string;
    productType: string;
}

export interface GetRedisRedisServerList {
    createDate: string;
    memorySize: number;
    osMemorySize: number;
    privateDomain: string;
    redisServerInstanceNo: string;
    redisServerName: string;
    redisServerRole: string;
    uptime: string;
}

export interface GetRegionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRegionsRegion {
    regionCode: string;
    regionName: string;
    regionNo: string;
}

export interface GetRouteTableFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRouteTablesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetRouteTablesRouteTable {
    description: string;
    id: string;
    isDefault: boolean;
    name: string;
    routeTableNo: string;
    supportedSubnetType: string;
    vpcNo: string;
}

export interface GetServerFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServerImageFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServerImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServerImagesServerImage {
    baseBlockStorageSize: string;
    id: string;
    infraResourceDetailTypeCode: string;
    infraResourceType: string;
    osInformation: string;
    platformType: string;
    productCode: string;
    productDescription: string;
    productName: string;
    productType: string;
}

export interface GetServerNetworkInterface {
    networkInterfaceNo: string;
    order: number;
    privateIp: string;
    subnetNo: string;
}

export interface GetServerProductFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServerProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetServerProductsServerProduct {
    baseBlockStorageSize: string;
    cpuCount: number;
    diskType: string;
    generationCode: string;
    id: string;
    infraResourceType: string;
    memorySize: string;
    productCode: string;
    productDescription: string;
    productName: string;
    productType: string;
    serverImageProductCode: string;
}

export interface GetServersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSesClusterClusterNodeList {
    computeInstanceName: string;
    computeInstanceNo: number;
    nodeType: string;
    privateIp: string;
    serverStatus: string;
    subnet: string;
}

export interface GetSesClusterDataNode {
    acgId: number;
    acgName: string;
    count: number;
    productCode: string;
    storageSize: number;
    subnetNo: number;
}

export interface GetSesClusterManagerNode {
    acgId: number;
    acgName: string;
    count: number;
    isDualManager: boolean;
    productCode: string;
    subnetNo: number;
}

export interface GetSesClusterMasterNode {
    acgId: number;
    acgName: string;
    count: number;
    productCode: string;
    subnetNo: number;
}

export interface GetSesClusterSearchEngine {
    dashboardPort: string;
    port: string;
    userName: string;
    versionCode: string;
}

export interface GetSesClustersCluster {
    clusterName: string;
    id: string;
    serviceGroupInstanceNo: string;
}

export interface GetSesClustersFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSesNodeOsImagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSesNodeOsImagesImage {
    id: string;
    name: string;
}

export interface GetSesNodeProductsCode {
    cpuCount: string;
    id: string;
    memorySize: string;
    name: string;
}

export interface GetSesNodeProductsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSesVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSesVersionsVersion {
    id: string;
    name: string;
    type: string;
    version: string;
}

export interface GetSourcebuildProjectArtifact {
    backup: boolean;
    objectStorageToUploads: outputs.GetSourcebuildProjectArtifactObjectStorageToUpload[];
    paths: string[];
    use: boolean;
}

export interface GetSourcebuildProjectArtifactObjectStorageToUpload {
    bucket: string;
    filename: string;
    path: string;
}

export interface GetSourcebuildProjectBuildCommand {
    dockerImageBuilds: outputs.GetSourcebuildProjectBuildCommandDockerImageBuild[];
    inBuilds: string[];
    postBuilds: string[];
    preBuilds: string[];
}

export interface GetSourcebuildProjectBuildCommandDockerImageBuild {
    dockerfile: string;
    image: string;
    latest: boolean;
    registry: string;
    tag: string;
    use: boolean;
}

export interface GetSourcebuildProjectBuildImageUpload {
    containerRegistryName: string;
    imageName: string;
    latest: boolean;
    tag: string;
    use: boolean;
}

export interface GetSourcebuildProjectComputesCompute {
    cpu: number;
    id: number;
    mem: number;
}

export interface GetSourcebuildProjectComputesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcebuildProjectCreated {
    timestamp: number;
    user: string;
}

export interface GetSourcebuildProjectDockerEnginesDockerEngine {
    id: number;
    name: string;
}

export interface GetSourcebuildProjectDockerEnginesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcebuildProjectEnv {
    computes: outputs.GetSourcebuildProjectEnvCompute[];
    dockerEngines: outputs.GetSourcebuildProjectEnvDockerEngine[];
    envVars: outputs.GetSourcebuildProjectEnvEnvVar[];
    platforms: outputs.GetSourcebuildProjectEnvPlatform[];
    timeout: number;
}

export interface GetSourcebuildProjectEnvCompute {
    cpu: number;
    id: number;
    mem: number;
}

export interface GetSourcebuildProjectEnvDockerEngine {
    id: number;
    name: string;
    use: boolean;
}

export interface GetSourcebuildProjectEnvEnvVar {
    key: string;
    value: string;
}

export interface GetSourcebuildProjectEnvPlatform {
    configs: outputs.GetSourcebuildProjectEnvPlatformConfig[];
    type: string;
}

export interface GetSourcebuildProjectEnvPlatformConfig {
    image: string;
    os: outputs.GetSourcebuildProjectEnvPlatformConfigO[];
    registry: string;
    runtimes: outputs.GetSourcebuildProjectEnvPlatformConfigRuntime[];
    tag: string;
}

export interface GetSourcebuildProjectEnvPlatformConfigO {
    archi: string;
    id: number;
    name: string;
    version: string;
}

export interface GetSourcebuildProjectEnvPlatformConfigRuntime {
    id: number;
    name: string;
    versions: outputs.GetSourcebuildProjectEnvPlatformConfigRuntimeVersion[];
}

export interface GetSourcebuildProjectEnvPlatformConfigRuntimeVersion {
    id: number;
    name: string;
}

export interface GetSourcebuildProjectLastBuild {
    id: string;
    status: string;
    timestamp: number;
}

export interface GetSourcebuildProjectLinked {
    cloudLogAnalytics: boolean;
    fileSafer: boolean;
}

export interface GetSourcebuildProjectOsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcebuildProjectOsO {
    archi: string;
    id: number;
    name: string;
    version: string;
}

export interface GetSourcebuildProjectOsRuntimeVersionsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcebuildProjectOsRuntimeVersionsRuntimeVersion {
    id: number;
    name: string;
}

export interface GetSourcebuildProjectOsRuntimesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcebuildProjectOsRuntimesRuntime {
    id: number;
    name: string;
}

export interface GetSourcebuildProjectSource {
    configs: outputs.GetSourcebuildProjectSourceConfig[];
    type: string;
}

export interface GetSourcebuildProjectSourceConfig {
    branch: string;
    repositoryName: string;
}

export interface GetSourcebuildProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcebuildProjectsProject {
    actionName: string;
    id: number;
    name: string;
    permission: string;
    projectNo: number;
}

export interface GetSourcecommitRepositoriesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcecommitRepositoriesRepository {
    actionName: string;
    id: number;
    name: string;
    permission: string;
    repositoryNo: number;
}

export interface GetSourcedeployProjectStageConfig {
    autoScalingGroupName: string;
    autoScalingGroupNo: number;
    bucketName: string;
    clusterName: string;
    clusterUuid: string;
    servers: outputs.GetSourcedeployProjectStageConfigServer[];
}

export interface GetSourcedeployProjectStageConfigServer {
    id: string;
    name: string;
}

export interface GetSourcedeployProjectStageScenarioConfig {
    canaryConfigs: outputs.GetSourcedeployProjectStageScenarioConfigCanaryConfig[];
    deployCommands: outputs.GetSourcedeployProjectStageScenarioConfigDeployCommand[];
    files: outputs.GetSourcedeployProjectStageScenarioConfigFile[];
    loadBalancers: outputs.GetSourcedeployProjectStageScenarioConfigLoadBalancer[];
    manifests: outputs.GetSourcedeployProjectStageScenarioConfigManifest[];
    paths: outputs.GetSourcedeployProjectStageScenarioConfigPath[];
    rollback: boolean;
    strategy: string;
}

export interface GetSourcedeployProjectStageScenarioConfigCanaryConfig {
    analysisConfigs: outputs.GetSourcedeployProjectStageScenarioConfigCanaryConfigAnalysisConfig[];
    analysisType: string;
    canaryCount: number;
    envs: outputs.GetSourcedeployProjectStageScenarioConfigCanaryConfigEnv[];
    metrics: outputs.GetSourcedeployProjectStageScenarioConfigCanaryConfigMetric[];
    passScore: number;
    prometheus: string;
    timeout: number;
}

export interface GetSourcedeployProjectStageScenarioConfigCanaryConfigAnalysisConfig {
    delay: number;
    duration: number;
    interval: number;
    step: number;
}

export interface GetSourcedeployProjectStageScenarioConfigCanaryConfigEnv {
    baseline: string;
    canary: string;
}

export interface GetSourcedeployProjectStageScenarioConfigCanaryConfigMetric {
    filter: string;
    metric: string;
    name: string;
    query: string;
    queryType: string;
    successCriteria: string;
    weight: number;
}

export interface GetSourcedeployProjectStageScenarioConfigDeployCommand {
    paths: outputs.GetSourcedeployProjectStageScenarioConfigDeployCommandPath[];
    postDeploys: outputs.GetSourcedeployProjectStageScenarioConfigDeployCommandPostDeploy[];
    preDeploys: outputs.GetSourcedeployProjectStageScenarioConfigDeployCommandPreDeploy[];
}

export interface GetSourcedeployProjectStageScenarioConfigDeployCommandPath {
    deployPath: string;
    sourcePath: string;
}

export interface GetSourcedeployProjectStageScenarioConfigDeployCommandPostDeploy {
    command: string;
    user: string;
}

export interface GetSourcedeployProjectStageScenarioConfigDeployCommandPreDeploy {
    command: string;
    user: string;
}

export interface GetSourcedeployProjectStageScenarioConfigFile {
    objectStorages: outputs.GetSourcedeployProjectStageScenarioConfigFileObjectStorage[];
    sourceBuilds: outputs.GetSourcedeployProjectStageScenarioConfigFileSourceBuild[];
    type: string;
}

export interface GetSourcedeployProjectStageScenarioConfigFileObjectStorage {
    bucket: string;
    object: string;
}

export interface GetSourcedeployProjectStageScenarioConfigFileSourceBuild {
    id: number;
    name: string;
}

export interface GetSourcedeployProjectStageScenarioConfigLoadBalancer {
    deleteServer: boolean;
    loadBalancerTargetGroupName: string;
    loadBalancerTargetGroupNo: number;
}

export interface GetSourcedeployProjectStageScenarioConfigManifest {
    branch: string;
    paths: string[];
    repositoryName: string;
    type: string;
}

export interface GetSourcedeployProjectStageScenarioConfigPath {
    deployPaths: string[];
    sourcePaths: string[];
}

export interface GetSourcedeployProjectStageScenariosFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcedeployProjectStageScenariosScenario {
    id: number;
    name: string;
}

export interface GetSourcedeployProjectStagesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcedeployProjectStagesStage {
    id: number;
    name: string;
}

export interface GetSourcedeployProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcedeployProjectsProject {
    id: number;
    name: string;
}

export interface GetSourcepipelineProjectTask {
    configs: outputs.GetSourcepipelineProjectTaskConfig[];
    linkedTasks: string[];
    name: string;
    type: string;
}

export interface GetSourcepipelineProjectTaskConfig {
    projectId: number;
    scenarioId: number;
    stageId: number;
    targets: outputs.GetSourcepipelineProjectTaskConfigTarget[];
}

export interface GetSourcepipelineProjectTaskConfigTarget {
    file: string;
    fullManifest: string;
    manifest: string;
    projectName: string;
    repositoryBranch: string;
    repositoryName: string;
    type: string;
}

export interface GetSourcepipelineProjectTrigger {
    repositories: outputs.GetSourcepipelineProjectTriggerRepository[];
    schedules: outputs.GetSourcepipelineProjectTriggerSchedule[];
    sourcepipelines: outputs.GetSourcepipelineProjectTriggerSourcepipeline[];
}

export interface GetSourcepipelineProjectTriggerRepository {
    branch: string;
    name: string;
    type: string;
}

export interface GetSourcepipelineProjectTriggerSchedule {
    days: string[];
    executeOnlyWithChange: boolean;
    time: string;
    timezone: string;
}

export interface GetSourcepipelineProjectTriggerSourcepipeline {
    id: number;
    name: string;
}

export interface GetSourcepipelineProjectsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSourcepipelineProjectsProject {
    id: number;
    name: string;
}

export interface GetSubnetFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSubnetsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetSubnetsSubnet {
    id: string;
    name: string;
    networkAclNo: string;
    subnet: string;
    subnetNo: string;
    subnetType: string;
    usageType: string;
    vpcNo: string;
    zone: string;
}

export interface GetVpcFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVpcPeeringFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVpcsFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetVpcsVpc {
    defaultAccessControlGroupNo: string;
    defaultNetworkAclNo: string;
    defaultPrivateRouteTableNo: string;
    defaultPublicRouteTableNo: string;
    id: string;
    ipv4CidrBlock: string;
    name: string;
    vpcNo: string;
}

export interface GetZonesFilter {
    name: string;
    regex?: boolean;
    values: string[];
}

export interface GetZonesZone {
    regionCode: string;
    regionNo: string;
    zoneCode: string;
    zoneDescription: string;
    zoneName: string;
    zoneNo: string;
}

export interface HadoopHadoopServerList {
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    dataStorageType: string;
    isPublicSubnet: boolean;
    memorySize: number;
    productCode: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    subnetNo: string;
    uptime: string;
    zoneCode: string;
}

export interface LbListenerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbTargetGroupAttachmentTimeouts {
    create?: string;
    delete?: string;
}

export interface LbTargetGroupHealthCheck {
    cycle?: number;
    downThreshold?: number;
    httpMethod?: string;
    port?: number;
    protocol: string;
    upThreshold?: number;
    urlPath: string;
}

export interface LbTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LoadBalancerRuleList {
    /**
     * Load balancer SSL certificate. Required when the protocol_type value is SSL/HTTPS.
     */
    certificateName?: string;
    /**
     * Health check path of load balancer rules. Required when the protocol_type is HTTP/HTTPS.
     */
    l7HealthCheckPath?: string;
    /**
     * Load balancer port of load balancer rules
     */
    loadBalancerPort: number;
    /**
     * Protocol type code of load balancer rules. The following codes are available. [HTTP | HTTPS | TCP | SSL]
     */
    protocolType: string;
    /**
     * Use 'Y' if you want to check client IP addresses by enabling the proxy protocol while you select TCP or SSL.
     */
    proxyProtocolUseYn?: string;
    /**
     * Server port of load balancer rules
     */
    serverPort: number;
}

export interface LoadBalancerSslCertificateTimeouts {
    create?: string;
    delete?: string;
}

export interface LoadBalancerTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface MongodbMongodbServerList {
    clusterRole: string;
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    memorySize: number;
    privateDomain: string;
    productCode: string;
    publicDomain: string;
    replicaSetName: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    uptime: string;
}

export interface MssqlMssqlServerList {
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    isPublicSubnet: boolean;
    memorySize: number;
    privateDomain: string;
    productCode: string;
    publicDomain: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    subnetNo: string;
    uptime: string;
    usedDataStorageSize: number;
    zoneCode: string;
}

export interface MysqlMysqlServerList {
    cpuCount: number;
    createDate: string;
    dataStorageSize: number;
    isPublicSubnet: boolean;
    memorySize: number;
    privateDomain: string;
    productCode: string;
    publicDomain: string;
    serverInstanceNo: string;
    serverName: string;
    serverRole: string;
    subnetNo: string;
    uptime: string;
    usedDataStorageSize: number;
    zoneCode: string;
}

export interface NasVolumeTimeouts {
    create?: string;
    delete?: string;
}

export interface NetworkAclRuleInbound {
    denyAllowGroupNo: string;
    description: string;
    ipBlock: string;
    portRange: string;
    priority: number;
    protocol: string;
    ruleAction: string;
}

export interface NetworkAclRuleOutbound {
    denyAllowGroupNo: string;
    description: string;
    ipBlock: string;
    portRange: string;
    priority: number;
    protocol: string;
    ruleAction: string;
}

export interface NksClusterIpAcl {
    action: string;
    address: string;
    comment: string;
}

export interface NksClusterLog {
    audit: boolean;
}

export interface NksClusterOidc {
    clientId: string;
    groupsClaim?: string;
    groupsPrefix?: string;
    issuerUrl: string;
    requiredClaim?: string;
    usernameClaim?: string;
    usernamePrefix?: string;
}

export interface NksClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NksNodePoolAutoscale {
    enabled: boolean;
    max: number;
    min: number;
}

export interface NksNodePoolLabel {
    key: string;
    value: string;
}

export interface NksNodePoolNode {
    containerVersion: string;
    instanceNo: number;
    kernelVersion: string;
    name: string;
    nodeStatus: string;
    privateIp: string;
    publicIp: string;
    spec: string;
}

export interface NksNodePoolTaint {
    effect: string;
    key: string;
    value: string;
}

export interface NksNodePoolTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface PortForwardingRuleTimeouts {
    create?: string;
    delete?: string;
}

export interface RedisRedisServerList {
    createDate: string;
    memorySize: number;
    osMemorySize: number;
    privateDomain: string;
    redisServerInstanceNo: string;
    redisServerName: string;
    redisServerRole: string;
    uptime: string;
}

export interface ServerNetworkInterface {
    networkInterfaceNo: string;
    order: number;
    privateIp: string;
    subnetNo: string;
}

export interface ServerTagList {
    tagKey?: string;
    tagValue?: string;
}

export interface ServerTimeouts {
    create?: string;
    delete?: string;
}

export interface SesClusterClusterNodeList {
    computeInstanceName: string;
    computeInstanceNo: number;
    nodeType: string;
    privateIp: string;
    serverStatus: string;
    subnet: string;
}

export interface SesClusterDataNode {
    acgId: number;
    acgName: string;
    count: number;
    productCode: string;
    storageSize: number;
    subnetNo: number;
}

export interface SesClusterManagerNode {
    acgId: number;
    acgName: string;
    count: number;
    isDualManager: boolean;
    productCode: string;
    subnetNo: number;
}

export interface SesClusterMasterNode {
    acgId: number;
    acgName: string;
    count?: number;
    productCode?: string;
    subnetNo?: number;
}

export interface SesClusterSearchEngine {
    dashboardPort: string;
    port: string;
    userName: string;
    userPassword: string;
    versionCode: string;
}

export interface SesClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SourcebuildProjectArtifact {
    backup?: boolean;
    objectStorageToUpload?: outputs.SourcebuildProjectArtifactObjectStorageToUpload;
    paths?: string[];
    use?: boolean;
}

export interface SourcebuildProjectArtifactObjectStorageToUpload {
    bucket?: string;
    filename?: string;
    path?: string;
}

export interface SourcebuildProjectBuildCommand {
    dockerImageBuild?: outputs.SourcebuildProjectBuildCommandDockerImageBuild;
    inBuilds?: string[];
    postBuilds?: string[];
    preBuilds?: string[];
}

export interface SourcebuildProjectBuildCommandDockerImageBuild {
    dockerfile?: string;
    image?: string;
    latest?: boolean;
    registry?: string;
    tag?: string;
    use?: boolean;
}

export interface SourcebuildProjectBuildImageUpload {
    containerRegistryName?: string;
    imageName?: string;
    latest?: boolean;
    tag?: string;
    use?: boolean;
}

export interface SourcebuildProjectCreated {
    timestamp: number;
    user: string;
}

export interface SourcebuildProjectEnv {
    compute: outputs.SourcebuildProjectEnvCompute;
    dockerEngine?: outputs.SourcebuildProjectEnvDockerEngine;
    envVars?: outputs.SourcebuildProjectEnvEnvVar[];
    platform: outputs.SourcebuildProjectEnvPlatform;
    timeout: number;
}

export interface SourcebuildProjectEnvCompute {
    cpu: number;
    id: number;
    mem: number;
}

export interface SourcebuildProjectEnvDockerEngine {
    id?: number;
    name: string;
    use?: boolean;
}

export interface SourcebuildProjectEnvEnvVar {
    key: string;
    value: string;
}

export interface SourcebuildProjectEnvPlatform {
    config: outputs.SourcebuildProjectEnvPlatformConfig;
    type: string;
}

export interface SourcebuildProjectEnvPlatformConfig {
    image?: string;
    os?: outputs.SourcebuildProjectEnvPlatformConfigOs;
    registry?: string;
    runtime?: outputs.SourcebuildProjectEnvPlatformConfigRuntime;
    tag?: string;
}

export interface SourcebuildProjectEnvPlatformConfigOs {
    archi: string;
    id?: number;
    name: string;
    version: string;
}

export interface SourcebuildProjectEnvPlatformConfigRuntime {
    id?: number;
    name: string;
    version: outputs.SourcebuildProjectEnvPlatformConfigRuntimeVersion;
}

export interface SourcebuildProjectEnvPlatformConfigRuntimeVersion {
    id?: number;
    name: string;
}

export interface SourcebuildProjectLastBuild {
    id: string;
    status: string;
    timestamp: number;
}

export interface SourcebuildProjectLinked {
    cloudLogAnalytics?: boolean;
    fileSafer?: boolean;
}

export interface SourcebuildProjectSource {
    config: outputs.SourcebuildProjectSourceConfig;
    type: string;
}

export interface SourcebuildProjectSourceConfig {
    branch: string;
    repositoryName: string;
}

export interface SourcebuildProjectTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SourcecommitRepositoryTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SourcedeployProjectStageConfig {
    autoScalingGroupName: string;
    autoScalingGroupNo?: number;
    bucketName?: string;
    clusterName: string;
    clusterUuid?: string;
    servers?: outputs.SourcedeployProjectStageConfigServer[];
}

export interface SourcedeployProjectStageConfigServer {
    id?: string;
    name: string;
}

export interface SourcedeployProjectStageScenarioConfig {
    canaryConfig?: outputs.SourcedeployProjectStageScenarioConfigCanaryConfig;
    deployCommand?: outputs.SourcedeployProjectStageScenarioConfigDeployCommand;
    file?: outputs.SourcedeployProjectStageScenarioConfigFile;
    loadBalancer?: outputs.SourcedeployProjectStageScenarioConfigLoadBalancer;
    manifest?: outputs.SourcedeployProjectStageScenarioConfigManifest;
    path?: outputs.SourcedeployProjectStageScenarioConfigPath;
    rollback?: boolean;
    strategy?: string;
}

export interface SourcedeployProjectStageScenarioConfigCanaryConfig {
    analysisConfig?: outputs.SourcedeployProjectStageScenarioConfigCanaryConfigAnalysisConfig;
    analysisType?: string;
    canaryCount?: number;
    env?: outputs.SourcedeployProjectStageScenarioConfigCanaryConfigEnv;
    metrics?: outputs.SourcedeployProjectStageScenarioConfigCanaryConfigMetric[];
    passScore?: number;
    prometheus?: string;
    timeout?: number;
}

export interface SourcedeployProjectStageScenarioConfigCanaryConfigAnalysisConfig {
    delay?: number;
    duration?: number;
    interval?: number;
    step?: number;
}

export interface SourcedeployProjectStageScenarioConfigCanaryConfigEnv {
    baseline?: string;
    canary?: string;
}

export interface SourcedeployProjectStageScenarioConfigCanaryConfigMetric {
    filter?: string;
    metric?: string;
    name?: string;
    query?: string;
    queryType?: string;
    successCriteria?: string;
    weight?: number;
}

export interface SourcedeployProjectStageScenarioConfigDeployCommand {
    paths?: outputs.SourcedeployProjectStageScenarioConfigDeployCommandPath[];
    postDeploys?: outputs.SourcedeployProjectStageScenarioConfigDeployCommandPostDeploy[];
    preDeploys?: outputs.SourcedeployProjectStageScenarioConfigDeployCommandPreDeploy[];
}

export interface SourcedeployProjectStageScenarioConfigDeployCommandPath {
    deployPath?: string;
    sourcePath?: string;
}

export interface SourcedeployProjectStageScenarioConfigDeployCommandPostDeploy {
    command?: string;
    user?: string;
}

export interface SourcedeployProjectStageScenarioConfigDeployCommandPreDeploy {
    command?: string;
    user?: string;
}

export interface SourcedeployProjectStageScenarioConfigFile {
    objectStorage?: outputs.SourcedeployProjectStageScenarioConfigFileObjectStorage;
    sourceBuild?: outputs.SourcedeployProjectStageScenarioConfigFileSourceBuild;
    type?: string;
}

export interface SourcedeployProjectStageScenarioConfigFileObjectStorage {
    bucket?: string;
    object?: string;
}

export interface SourcedeployProjectStageScenarioConfigFileSourceBuild {
    id?: number;
    name: string;
}

export interface SourcedeployProjectStageScenarioConfigLoadBalancer {
    deleteServer?: boolean;
    loadBalancerTargetGroupName: string;
    loadBalancerTargetGroupNo?: number;
}

export interface SourcedeployProjectStageScenarioConfigManifest {
    branch?: string;
    paths?: string[];
    repositoryName?: string;
    type?: string;
}

export interface SourcedeployProjectStageScenarioConfigPath {
    deployPath?: string;
    sourcePath?: string;
}

export interface SourcedeployProjectStageScenarioTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SourcedeployProjectStageTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SourcedeployProjectTimeouts {
    create?: string;
    delete?: string;
    read?: string;
    update?: string;
}

export interface SourcepipelineProjectTask {
    config: outputs.SourcepipelineProjectTaskConfig;
    linkedTasks: string[];
    name: string;
    type: string;
}

export interface SourcepipelineProjectTaskConfig {
    projectId: number;
    scenarioId?: number;
    stageId?: number;
    target?: outputs.SourcepipelineProjectTaskConfigTarget;
}

export interface SourcepipelineProjectTaskConfigTarget {
    file: string;
    fullManifest: string;
    manifest: string;
    projectName: string;
    repositoryBranch: string;
    repositoryName: string;
    type: string;
}

export interface SourcepipelineProjectTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface SourcepipelineProjectTriggers {
    repositories?: outputs.SourcepipelineProjectTriggersRepository[];
    schedules?: outputs.SourcepipelineProjectTriggersSchedule[];
    sourcepipelines?: outputs.SourcepipelineProjectTriggersSourcepipeline[];
}

export interface SourcepipelineProjectTriggersRepository {
    branch: string;
    name: string;
    type: string;
}

export interface SourcepipelineProjectTriggersSchedule {
    days: string[];
    executeOnlyWithChange: boolean;
    time: string;
    timezone: string;
}

export interface SourcepipelineProjectTriggersSourcepipeline {
    id: number;
    name: string;
}

