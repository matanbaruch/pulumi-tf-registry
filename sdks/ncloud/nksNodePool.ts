// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NksNodePool extends pulumi.CustomResource {
    /**
     * Get an existing NksNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NksNodePoolState, opts?: pulumi.CustomResourceOptions): NksNodePool {
        return new NksNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/nksNodePool:NksNodePool';

    /**
     * Returns true if the given object is an instance of NksNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NksNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NksNodePool.__pulumiType;
    }

    public readonly autoscale!: pulumi.Output<outputs.NksNodePoolAutoscale | undefined>;
    public readonly clusterUuid!: pulumi.Output<string>;
    public /*out*/ readonly instanceNo!: pulumi.Output<string>;
    public readonly k8sVersion!: pulumi.Output<string>;
    public readonly labels!: pulumi.Output<outputs.NksNodePoolLabel[] | undefined>;
    public readonly nodeCount!: pulumi.Output<number>;
    public readonly nodePoolName!: pulumi.Output<string>;
    public /*out*/ readonly nodes!: pulumi.Output<outputs.NksNodePoolNode[]>;
    public readonly productCode!: pulumi.Output<string>;
    public readonly serverSpecCode!: pulumi.Output<string | undefined>;
    public readonly softwareCode!: pulumi.Output<string>;
    public readonly storageSize!: pulumi.Output<number>;
    /**
     * @deprecated Deprecated
     */
    public readonly subnetNo!: pulumi.Output<string | undefined>;
    public readonly subnetNoLists!: pulumi.Output<string[] | undefined>;
    public readonly taints!: pulumi.Output<outputs.NksNodePoolTaint[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.NksNodePoolTimeouts | undefined>;

    /**
     * Create a NksNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NksNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NksNodePoolArgs | NksNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NksNodePoolState | undefined;
            resourceInputs["autoscale"] = state ? state.autoscale : undefined;
            resourceInputs["clusterUuid"] = state ? state.clusterUuid : undefined;
            resourceInputs["instanceNo"] = state ? state.instanceNo : undefined;
            resourceInputs["k8sVersion"] = state ? state.k8sVersion : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["nodeCount"] = state ? state.nodeCount : undefined;
            resourceInputs["nodePoolName"] = state ? state.nodePoolName : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["productCode"] = state ? state.productCode : undefined;
            resourceInputs["serverSpecCode"] = state ? state.serverSpecCode : undefined;
            resourceInputs["softwareCode"] = state ? state.softwareCode : undefined;
            resourceInputs["storageSize"] = state ? state.storageSize : undefined;
            resourceInputs["subnetNo"] = state ? state.subnetNo : undefined;
            resourceInputs["subnetNoLists"] = state ? state.subnetNoLists : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NksNodePoolArgs | undefined;
            if ((!args || args.clusterUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterUuid'");
            }
            if ((!args || args.nodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if ((!args || args.nodePoolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodePoolName'");
            }
            resourceInputs["autoscale"] = args ? args.autoscale : undefined;
            resourceInputs["clusterUuid"] = args ? args.clusterUuid : undefined;
            resourceInputs["k8sVersion"] = args ? args.k8sVersion : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["nodeCount"] = args ? args.nodeCount : undefined;
            resourceInputs["nodePoolName"] = args ? args.nodePoolName : undefined;
            resourceInputs["productCode"] = args ? args.productCode : undefined;
            resourceInputs["serverSpecCode"] = args ? args.serverSpecCode : undefined;
            resourceInputs["softwareCode"] = args ? args.softwareCode : undefined;
            resourceInputs["storageSize"] = args ? args.storageSize : undefined;
            resourceInputs["subnetNo"] = args ? args.subnetNo : undefined;
            resourceInputs["subnetNoLists"] = args ? args.subnetNoLists : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["instanceNo"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NksNodePool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NksNodePool resources.
 */
export interface NksNodePoolState {
    autoscale?: pulumi.Input<inputs.NksNodePoolAutoscale>;
    clusterUuid?: pulumi.Input<string>;
    instanceNo?: pulumi.Input<string>;
    k8sVersion?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.NksNodePoolLabel>[]>;
    nodeCount?: pulumi.Input<number>;
    nodePoolName?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.NksNodePoolNode>[]>;
    productCode?: pulumi.Input<string>;
    serverSpecCode?: pulumi.Input<string>;
    softwareCode?: pulumi.Input<string>;
    storageSize?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    subnetNo?: pulumi.Input<string>;
    subnetNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.NksNodePoolTaint>[]>;
    timeouts?: pulumi.Input<inputs.NksNodePoolTimeouts>;
}

/**
 * The set of arguments for constructing a NksNodePool resource.
 */
export interface NksNodePoolArgs {
    autoscale?: pulumi.Input<inputs.NksNodePoolAutoscale>;
    clusterUuid: pulumi.Input<string>;
    k8sVersion?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.NksNodePoolLabel>[]>;
    nodeCount: pulumi.Input<number>;
    nodePoolName: pulumi.Input<string>;
    productCode?: pulumi.Input<string>;
    serverSpecCode?: pulumi.Input<string>;
    softwareCode?: pulumi.Input<string>;
    storageSize?: pulumi.Input<number>;
    /**
     * @deprecated Deprecated
     */
    subnetNo?: pulumi.Input<string>;
    subnetNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.NksNodePoolTaint>[]>;
    timeouts?: pulumi.Input<inputs.NksNodePoolTimeouts>;
}
