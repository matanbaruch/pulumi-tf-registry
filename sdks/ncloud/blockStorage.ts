// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockStorage extends pulumi.CustomResource {
    /**
     * Get an existing BlockStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockStorageState, opts?: pulumi.CustomResourceOptions): BlockStorage {
        return new BlockStorage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/blockStorage:BlockStorage';

    /**
     * Returns true if the given object is an instance of BlockStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockStorage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockStorage.__pulumiType;
    }

    public /*out*/ readonly blockStorageNo!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly deviceName!: pulumi.Output<string>;
    public readonly diskDetailType!: pulumi.Output<string>;
    public /*out*/ readonly diskType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly productCode!: pulumi.Output<string>;
    public readonly serverInstanceNo!: pulumi.Output<string | undefined>;
    public /*out*/ readonly serverName!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotNo!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly stopInstanceBeforeDetaching!: pulumi.Output<boolean | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BlockStorageTimeouts | undefined>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a BlockStorage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockStorageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockStorageArgs | BlockStorageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockStorageState | undefined;
            resourceInputs["blockStorageNo"] = state ? state.blockStorageNo : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceName"] = state ? state.deviceName : undefined;
            resourceInputs["diskDetailType"] = state ? state.diskDetailType : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productCode"] = state ? state.productCode : undefined;
            resourceInputs["serverInstanceNo"] = state ? state.serverInstanceNo : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotNo"] = state ? state.snapshotNo : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stopInstanceBeforeDetaching"] = state ? state.stopInstanceBeforeDetaching : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as BlockStorageArgs | undefined;
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskDetailType"] = args ? args.diskDetailType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverInstanceNo"] = args ? args.serverInstanceNo : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotNo"] = args ? args.snapshotNo : undefined;
            resourceInputs["stopInstanceBeforeDetaching"] = args ? args.stopInstanceBeforeDetaching : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["blockStorageNo"] = undefined /*out*/;
            resourceInputs["deviceName"] = undefined /*out*/;
            resourceInputs["diskType"] = undefined /*out*/;
            resourceInputs["productCode"] = undefined /*out*/;
            resourceInputs["serverName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockStorage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockStorage resources.
 */
export interface BlockStorageState {
    blockStorageNo?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceName?: pulumi.Input<string>;
    diskDetailType?: pulumi.Input<string>;
    diskType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    productCode?: pulumi.Input<string>;
    serverInstanceNo?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotNo?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stopInstanceBeforeDetaching?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.BlockStorageTimeouts>;
    type?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockStorage resource.
 */
export interface BlockStorageArgs {
    description?: pulumi.Input<string>;
    diskDetailType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverInstanceNo?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    snapshotNo?: pulumi.Input<string>;
    stopInstanceBeforeDetaching?: pulumi.Input<boolean>;
    timeouts?: pulumi.Input<inputs.BlockStorageTimeouts>;
    zone?: pulumi.Input<string>;
}
