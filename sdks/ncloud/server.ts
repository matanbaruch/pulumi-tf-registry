// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    public readonly accessControlGroupConfigurationNoLists!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly baseBlockStorageDiskDetailType!: pulumi.Output<string>;
    public /*out*/ readonly baseBlockStorageDiskType!: pulumi.Output<string>;
    public /*out*/ readonly baseBlockStorageSize!: pulumi.Output<number>;
    public /*out*/ readonly cpuCount!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string>;
    public readonly feeSystemTypeCode!: pulumi.Output<string | undefined>;
    public readonly initScriptNo!: pulumi.Output<string>;
    public /*out*/ readonly instanceNo!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly internetLineType!: pulumi.Output<string>;
    public readonly isEncryptedBaseBlockStorageVolume!: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly isFeeChargingMonitoring!: pulumi.Output<boolean>;
    public readonly isProtectServerTermination!: pulumi.Output<boolean>;
    public readonly loginKeyName!: pulumi.Output<string>;
    public readonly memberServerImageNo!: pulumi.Output<string | undefined>;
    public /*out*/ readonly memorySize!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterfaces!: pulumi.Output<outputs.ServerNetworkInterface[] | undefined>;
    public readonly placementGroupNo!: pulumi.Output<string>;
    public /*out*/ readonly platformType!: pulumi.Output<string>;
    public /*out*/ readonly portForwardingExternalPort!: pulumi.Output<number>;
    public /*out*/ readonly portForwardingInternalPort!: pulumi.Output<number>;
    public /*out*/ readonly portForwardingPublicIp!: pulumi.Output<string>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    public readonly raidTypeName!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    public /*out*/ readonly serverImageName!: pulumi.Output<string>;
    public readonly serverImageProductCode!: pulumi.Output<string>;
    public readonly serverProductCode!: pulumi.Output<string>;
    public readonly subnetNo!: pulumi.Output<string>;
    public readonly tagLists!: pulumi.Output<outputs.ServerTagList[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ServerTimeouts | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;
    public /*out*/ readonly vpcNo!: pulumi.Output<string>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["accessControlGroupConfigurationNoLists"] = state ? state.accessControlGroupConfigurationNoLists : undefined;
            resourceInputs["baseBlockStorageDiskDetailType"] = state ? state.baseBlockStorageDiskDetailType : undefined;
            resourceInputs["baseBlockStorageDiskType"] = state ? state.baseBlockStorageDiskType : undefined;
            resourceInputs["baseBlockStorageSize"] = state ? state.baseBlockStorageSize : undefined;
            resourceInputs["cpuCount"] = state ? state.cpuCount : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["feeSystemTypeCode"] = state ? state.feeSystemTypeCode : undefined;
            resourceInputs["initScriptNo"] = state ? state.initScriptNo : undefined;
            resourceInputs["instanceNo"] = state ? state.instanceNo : undefined;
            resourceInputs["internetLineType"] = state ? state.internetLineType : undefined;
            resourceInputs["isEncryptedBaseBlockStorageVolume"] = state ? state.isEncryptedBaseBlockStorageVolume : undefined;
            resourceInputs["isFeeChargingMonitoring"] = state ? state.isFeeChargingMonitoring : undefined;
            resourceInputs["isProtectServerTermination"] = state ? state.isProtectServerTermination : undefined;
            resourceInputs["loginKeyName"] = state ? state.loginKeyName : undefined;
            resourceInputs["memberServerImageNo"] = state ? state.memberServerImageNo : undefined;
            resourceInputs["memorySize"] = state ? state.memorySize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            resourceInputs["placementGroupNo"] = state ? state.placementGroupNo : undefined;
            resourceInputs["platformType"] = state ? state.platformType : undefined;
            resourceInputs["portForwardingExternalPort"] = state ? state.portForwardingExternalPort : undefined;
            resourceInputs["portForwardingInternalPort"] = state ? state.portForwardingInternalPort : undefined;
            resourceInputs["portForwardingPublicIp"] = state ? state.portForwardingPublicIp : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["raidTypeName"] = state ? state.raidTypeName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serverImageName"] = state ? state.serverImageName : undefined;
            resourceInputs["serverImageProductCode"] = state ? state.serverImageProductCode : undefined;
            resourceInputs["serverProductCode"] = state ? state.serverProductCode : undefined;
            resourceInputs["subnetNo"] = state ? state.subnetNo : undefined;
            resourceInputs["tagLists"] = state ? state.tagLists : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            resourceInputs["accessControlGroupConfigurationNoLists"] = args ? args.accessControlGroupConfigurationNoLists : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["feeSystemTypeCode"] = args ? args.feeSystemTypeCode : undefined;
            resourceInputs["initScriptNo"] = args ? args.initScriptNo : undefined;
            resourceInputs["internetLineType"] = args ? args.internetLineType : undefined;
            resourceInputs["isEncryptedBaseBlockStorageVolume"] = args ? args.isEncryptedBaseBlockStorageVolume : undefined;
            resourceInputs["isProtectServerTermination"] = args ? args.isProtectServerTermination : undefined;
            resourceInputs["loginKeyName"] = args ? args.loginKeyName : undefined;
            resourceInputs["memberServerImageNo"] = args ? args.memberServerImageNo : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            resourceInputs["placementGroupNo"] = args ? args.placementGroupNo : undefined;
            resourceInputs["raidTypeName"] = args ? args.raidTypeName : undefined;
            resourceInputs["serverImageProductCode"] = args ? args.serverImageProductCode : undefined;
            resourceInputs["serverProductCode"] = args ? args.serverProductCode : undefined;
            resourceInputs["subnetNo"] = args ? args.subnetNo : undefined;
            resourceInputs["tagLists"] = args ? args.tagLists : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["baseBlockStorageDiskDetailType"] = undefined /*out*/;
            resourceInputs["baseBlockStorageDiskType"] = undefined /*out*/;
            resourceInputs["baseBlockStorageSize"] = undefined /*out*/;
            resourceInputs["cpuCount"] = undefined /*out*/;
            resourceInputs["instanceNo"] = undefined /*out*/;
            resourceInputs["isFeeChargingMonitoring"] = undefined /*out*/;
            resourceInputs["memorySize"] = undefined /*out*/;
            resourceInputs["platformType"] = undefined /*out*/;
            resourceInputs["portForwardingExternalPort"] = undefined /*out*/;
            resourceInputs["portForwardingInternalPort"] = undefined /*out*/;
            resourceInputs["portForwardingPublicIp"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["serverImageName"] = undefined /*out*/;
            resourceInputs["vpcNo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    accessControlGroupConfigurationNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    baseBlockStorageDiskDetailType?: pulumi.Input<string>;
    baseBlockStorageDiskType?: pulumi.Input<string>;
    baseBlockStorageSize?: pulumi.Input<number>;
    cpuCount?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    feeSystemTypeCode?: pulumi.Input<string>;
    initScriptNo?: pulumi.Input<string>;
    instanceNo?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    internetLineType?: pulumi.Input<string>;
    isEncryptedBaseBlockStorageVolume?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    isFeeChargingMonitoring?: pulumi.Input<boolean>;
    isProtectServerTermination?: pulumi.Input<boolean>;
    loginKeyName?: pulumi.Input<string>;
    memberServerImageNo?: pulumi.Input<string>;
    memorySize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ServerNetworkInterface>[]>;
    placementGroupNo?: pulumi.Input<string>;
    platformType?: pulumi.Input<string>;
    portForwardingExternalPort?: pulumi.Input<number>;
    portForwardingInternalPort?: pulumi.Input<number>;
    portForwardingPublicIp?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    raidTypeName?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    region?: pulumi.Input<string>;
    serverImageName?: pulumi.Input<string>;
    serverImageProductCode?: pulumi.Input<string>;
    serverProductCode?: pulumi.Input<string>;
    subnetNo?: pulumi.Input<string>;
    tagLists?: pulumi.Input<pulumi.Input<inputs.ServerTagList>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    userData?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    accessControlGroupConfigurationNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    feeSystemTypeCode?: pulumi.Input<string>;
    initScriptNo?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    internetLineType?: pulumi.Input<string>;
    isEncryptedBaseBlockStorageVolume?: pulumi.Input<boolean>;
    isProtectServerTermination?: pulumi.Input<boolean>;
    loginKeyName?: pulumi.Input<string>;
    memberServerImageNo?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ServerNetworkInterface>[]>;
    placementGroupNo?: pulumi.Input<string>;
    raidTypeName?: pulumi.Input<string>;
    serverImageProductCode?: pulumi.Input<string>;
    serverProductCode?: pulumi.Input<string>;
    subnetNo?: pulumi.Input<string>;
    tagLists?: pulumi.Input<pulumi.Input<inputs.ServerTagList>[]>;
    timeouts?: pulumi.Input<inputs.ServerTimeouts>;
    userData?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
