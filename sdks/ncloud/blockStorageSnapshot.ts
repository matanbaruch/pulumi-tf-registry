// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockStorageSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing BlockStorageSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockStorageSnapshotState, opts?: pulumi.CustomResourceOptions): BlockStorageSnapshot {
        return new BlockStorageSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/blockStorageSnapshot:BlockStorageSnapshot';

    /**
     * Returns true if the given object is an instance of BlockStorageSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockStorageSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockStorageSnapshot.__pulumiType;
    }

    /**
     * Block storage instance No for creating snapshot.
     */
    public readonly blockStorageInstanceNo!: pulumi.Output<string>;
    /**
     * Descriptions on a snapshot to create
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Block Storage Snapshot Instance Description
     */
    public /*out*/ readonly instanceDescription!: pulumi.Output<string>;
    /**
     * Block Storage Snapshot Instance Number
     */
    public /*out*/ readonly instanceNo!: pulumi.Output<string>;
    /**
     * Block Storage Snapshot Instance Operation
     */
    public /*out*/ readonly instanceOperation!: pulumi.Output<string>;
    /**
     * Block Storage Snapshot Instance Status
     */
    public readonly instanceStatus!: pulumi.Output<string>;
    /**
     * Block Storage Snapshot Instance Status Name
     */
    public readonly instanceStatusName!: pulumi.Output<string>;
    /**
     * Block storage snapshot name to create. default : Ncloud assigns default values.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Original Block Storage Instance Number
     */
    public /*out*/ readonly originalBlockStorageInstanceNo!: pulumi.Output<string>;
    /**
     * Original Block Storage Name
     */
    public /*out*/ readonly originalBlockStorageName!: pulumi.Output<string>;
    /**
     * OS Information
     */
    public /*out*/ readonly osInformation!: pulumi.Output<string>;
    /**
     * Server Image Product Code
     */
    public /*out*/ readonly serverImageProductCode!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BlockStorageSnapshotTimeouts | undefined>;
    /**
     * Block Storage Snapshot Volume Size
     */
    public /*out*/ readonly volumeSize!: pulumi.Output<number>;

    /**
     * Create a BlockStorageSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockStorageSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockStorageSnapshotArgs | BlockStorageSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockStorageSnapshotState | undefined;
            resourceInputs["blockStorageInstanceNo"] = state ? state.blockStorageInstanceNo : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceDescription"] = state ? state.instanceDescription : undefined;
            resourceInputs["instanceNo"] = state ? state.instanceNo : undefined;
            resourceInputs["instanceOperation"] = state ? state.instanceOperation : undefined;
            resourceInputs["instanceStatus"] = state ? state.instanceStatus : undefined;
            resourceInputs["instanceStatusName"] = state ? state.instanceStatusName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["originalBlockStorageInstanceNo"] = state ? state.originalBlockStorageInstanceNo : undefined;
            resourceInputs["originalBlockStorageName"] = state ? state.originalBlockStorageName : undefined;
            resourceInputs["osInformation"] = state ? state.osInformation : undefined;
            resourceInputs["serverImageProductCode"] = state ? state.serverImageProductCode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeSize"] = state ? state.volumeSize : undefined;
        } else {
            const args = argsOrState as BlockStorageSnapshotArgs | undefined;
            if ((!args || args.blockStorageInstanceNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockStorageInstanceNo'");
            }
            resourceInputs["blockStorageInstanceNo"] = args ? args.blockStorageInstanceNo : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceStatus"] = args ? args.instanceStatus : undefined;
            resourceInputs["instanceStatusName"] = args ? args.instanceStatusName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["instanceDescription"] = undefined /*out*/;
            resourceInputs["instanceNo"] = undefined /*out*/;
            resourceInputs["instanceOperation"] = undefined /*out*/;
            resourceInputs["originalBlockStorageInstanceNo"] = undefined /*out*/;
            resourceInputs["originalBlockStorageName"] = undefined /*out*/;
            resourceInputs["osInformation"] = undefined /*out*/;
            resourceInputs["serverImageProductCode"] = undefined /*out*/;
            resourceInputs["volumeSize"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockStorageSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockStorageSnapshot resources.
 */
export interface BlockStorageSnapshotState {
    /**
     * Block storage instance No for creating snapshot.
     */
    blockStorageInstanceNo?: pulumi.Input<string>;
    /**
     * Descriptions on a snapshot to create
     */
    description?: pulumi.Input<string>;
    /**
     * Block Storage Snapshot Instance Description
     */
    instanceDescription?: pulumi.Input<string>;
    /**
     * Block Storage Snapshot Instance Number
     */
    instanceNo?: pulumi.Input<string>;
    /**
     * Block Storage Snapshot Instance Operation
     */
    instanceOperation?: pulumi.Input<string>;
    /**
     * Block Storage Snapshot Instance Status
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * Block Storage Snapshot Instance Status Name
     */
    instanceStatusName?: pulumi.Input<string>;
    /**
     * Block storage snapshot name to create. default : Ncloud assigns default values.
     */
    name?: pulumi.Input<string>;
    /**
     * Original Block Storage Instance Number
     */
    originalBlockStorageInstanceNo?: pulumi.Input<string>;
    /**
     * Original Block Storage Name
     */
    originalBlockStorageName?: pulumi.Input<string>;
    /**
     * OS Information
     */
    osInformation?: pulumi.Input<string>;
    /**
     * Server Image Product Code
     */
    serverImageProductCode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockStorageSnapshotTimeouts>;
    /**
     * Block Storage Snapshot Volume Size
     */
    volumeSize?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BlockStorageSnapshot resource.
 */
export interface BlockStorageSnapshotArgs {
    /**
     * Block storage instance No for creating snapshot.
     */
    blockStorageInstanceNo: pulumi.Input<string>;
    /**
     * Descriptions on a snapshot to create
     */
    description?: pulumi.Input<string>;
    /**
     * Block Storage Snapshot Instance Status
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * Block Storage Snapshot Instance Status Name
     */
    instanceStatusName?: pulumi.Input<string>;
    /**
     * Block storage snapshot name to create. default : Ncloud assigns default values.
     */
    name?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockStorageSnapshotTimeouts>;
}
