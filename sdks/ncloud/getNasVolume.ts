// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getNasVolume(args?: GetNasVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetNasVolumeResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ncloud:index/getNasVolume:getNasVolume", {
        "filters": args.filters,
        "id": args.id,
        "isEventConfiguration": args.isEventConfiguration,
        "isSnapshotConfiguration": args.isSnapshotConfiguration,
        "volumeAllotmentProtocolTypeCode": args.volumeAllotmentProtocolTypeCode,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getNasVolume.
 */
export interface GetNasVolumeArgs {
    filters?: inputs.GetNasVolumeFilter[];
    id?: string;
    isEventConfiguration?: boolean;
    isSnapshotConfiguration?: boolean;
    volumeAllotmentProtocolTypeCode?: string;
    zone?: string;
}

/**
 * A collection of values returned by getNasVolume.
 */
export interface GetNasVolumeResult {
    readonly customIpLists: string[];
    readonly description: string;
    readonly filters?: outputs.GetNasVolumeFilter[];
    readonly id: string;
    readonly isEncryptedVolume: boolean;
    readonly isEventConfiguration: boolean;
    readonly isReturnProtection: boolean;
    readonly isSnapshotConfiguration: boolean;
    readonly mountInformation: string;
    readonly name: string;
    readonly nasVolumeNo: string;
    readonly serverInstanceNoLists: string[];
    readonly snapshotVolumeSize: number;
    readonly volumeAllotmentProtocolType: string;
    readonly volumeAllotmentProtocolTypeCode: string;
    readonly volumeNamePostfix: string;
    readonly volumeSize: number;
    readonly volumeTotalSize: number;
    readonly zone: string;
}
export function getNasVolumeOutput(args?: GetNasVolumeOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNasVolumeResult> {
    return pulumi.output(args).apply((a: any) => getNasVolume(a, opts))
}

/**
 * A collection of arguments for invoking getNasVolume.
 */
export interface GetNasVolumeOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetNasVolumeFilterArgs>[]>;
    id?: pulumi.Input<string>;
    isEventConfiguration?: pulumi.Input<boolean>;
    isSnapshotConfiguration?: pulumi.Input<boolean>;
    volumeAllotmentProtocolTypeCode?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
