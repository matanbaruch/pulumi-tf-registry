// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Lb extends pulumi.CustomResource {
    /**
     * Get an existing Lb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LbState, opts?: pulumi.CustomResourceOptions): Lb {
        return new Lb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/lb:Lb';

    /**
     * Returns true if the given object is an instance of Lb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Lb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Lb.__pulumiType;
    }

    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly domain!: pulumi.Output<string>;
    public readonly idleTimeout!: pulumi.Output<number>;
    public /*out*/ readonly ipLists!: pulumi.Output<string[]>;
    public /*out*/ readonly listenerNoLists!: pulumi.Output<string[]>;
    public /*out*/ readonly loadBalancerNo!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly subnetNoLists!: pulumi.Output<string[]>;
    public readonly throughputType!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LbTimeouts | undefined>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly vpcNo!: pulumi.Output<string>;

    /**
     * Create a Lb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LbArgs | LbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LbState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["ipLists"] = state ? state.ipLists : undefined;
            resourceInputs["listenerNoLists"] = state ? state.listenerNoLists : undefined;
            resourceInputs["loadBalancerNo"] = state ? state.loadBalancerNo : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["subnetNoLists"] = state ? state.subnetNoLists : undefined;
            resourceInputs["throughputType"] = state ? state.throughputType : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
        } else {
            const args = argsOrState as LbArgs | undefined;
            if ((!args || args.subnetNoLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetNoLists'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["subnetNoLists"] = args ? args.subnetNoLists : undefined;
            resourceInputs["throughputType"] = args ? args.throughputType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["domain"] = undefined /*out*/;
            resourceInputs["ipLists"] = undefined /*out*/;
            resourceInputs["listenerNoLists"] = undefined /*out*/;
            resourceInputs["loadBalancerNo"] = undefined /*out*/;
            resourceInputs["vpcNo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Lb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Lb resources.
 */
export interface LbState {
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    ipLists?: pulumi.Input<pulumi.Input<string>[]>;
    listenerNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    loadBalancerNo?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    subnetNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    throughputType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbTimeouts>;
    type?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Lb resource.
 */
export interface LbArgs {
    description?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    subnetNoLists: pulumi.Input<pulumi.Input<string>[]>;
    throughputType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LbTimeouts>;
    type: pulumi.Input<string>;
}
