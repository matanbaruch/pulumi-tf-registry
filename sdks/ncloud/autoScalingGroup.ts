// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AutoScalingGroup extends pulumi.CustomResource {
    /**
     * Get an existing AutoScalingGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutoScalingGroupState, opts?: pulumi.CustomResourceOptions): AutoScalingGroup {
        return new AutoScalingGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/autoScalingGroup:AutoScalingGroup';

    /**
     * Returns true if the given object is an instance of AutoScalingGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AutoScalingGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoScalingGroup.__pulumiType;
    }

    public readonly accessControlGroupNoLists!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly autoScalingGroupNo!: pulumi.Output<string>;
    public readonly defaultCooldown!: pulumi.Output<number | undefined>;
    public readonly desiredCapacity!: pulumi.Output<number>;
    public readonly healthCheckGracePeriod!: pulumi.Output<number | undefined>;
    public readonly healthCheckTypeCode!: pulumi.Output<string>;
    public readonly ignoreCapacityChanges!: pulumi.Output<boolean | undefined>;
    public readonly launchConfigurationNo!: pulumi.Output<string>;
    public readonly maxSize!: pulumi.Output<number>;
    public readonly minSize!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly serverInstanceNoLists!: pulumi.Output<string[]>;
    public readonly serverNamePrefix!: pulumi.Output<string>;
    public readonly subnetNo!: pulumi.Output<string | undefined>;
    public readonly targetGroupLists!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly vpcNo!: pulumi.Output<string>;
    public readonly waitForCapacityTimeout!: pulumi.Output<string | undefined>;
    public readonly zoneNoLists!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AutoScalingGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutoScalingGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutoScalingGroupArgs | AutoScalingGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutoScalingGroupState | undefined;
            resourceInputs["accessControlGroupNoLists"] = state ? state.accessControlGroupNoLists : undefined;
            resourceInputs["autoScalingGroupNo"] = state ? state.autoScalingGroupNo : undefined;
            resourceInputs["defaultCooldown"] = state ? state.defaultCooldown : undefined;
            resourceInputs["desiredCapacity"] = state ? state.desiredCapacity : undefined;
            resourceInputs["healthCheckGracePeriod"] = state ? state.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckTypeCode"] = state ? state.healthCheckTypeCode : undefined;
            resourceInputs["ignoreCapacityChanges"] = state ? state.ignoreCapacityChanges : undefined;
            resourceInputs["launchConfigurationNo"] = state ? state.launchConfigurationNo : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverInstanceNoLists"] = state ? state.serverInstanceNoLists : undefined;
            resourceInputs["serverNamePrefix"] = state ? state.serverNamePrefix : undefined;
            resourceInputs["subnetNo"] = state ? state.subnetNo : undefined;
            resourceInputs["targetGroupLists"] = state ? state.targetGroupLists : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
            resourceInputs["waitForCapacityTimeout"] = state ? state.waitForCapacityTimeout : undefined;
            resourceInputs["zoneNoLists"] = state ? state.zoneNoLists : undefined;
        } else {
            const args = argsOrState as AutoScalingGroupArgs | undefined;
            if ((!args || args.launchConfigurationNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'launchConfigurationNo'");
            }
            if ((!args || args.maxSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxSize'");
            }
            if ((!args || args.minSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minSize'");
            }
            resourceInputs["accessControlGroupNoLists"] = args ? args.accessControlGroupNoLists : undefined;
            resourceInputs["defaultCooldown"] = args ? args.defaultCooldown : undefined;
            resourceInputs["desiredCapacity"] = args ? args.desiredCapacity : undefined;
            resourceInputs["healthCheckGracePeriod"] = args ? args.healthCheckGracePeriod : undefined;
            resourceInputs["healthCheckTypeCode"] = args ? args.healthCheckTypeCode : undefined;
            resourceInputs["ignoreCapacityChanges"] = args ? args.ignoreCapacityChanges : undefined;
            resourceInputs["launchConfigurationNo"] = args ? args.launchConfigurationNo : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverNamePrefix"] = args ? args.serverNamePrefix : undefined;
            resourceInputs["subnetNo"] = args ? args.subnetNo : undefined;
            resourceInputs["targetGroupLists"] = args ? args.targetGroupLists : undefined;
            resourceInputs["waitForCapacityTimeout"] = args ? args.waitForCapacityTimeout : undefined;
            resourceInputs["zoneNoLists"] = args ? args.zoneNoLists : undefined;
            resourceInputs["autoScalingGroupNo"] = undefined /*out*/;
            resourceInputs["serverInstanceNoLists"] = undefined /*out*/;
            resourceInputs["vpcNo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoScalingGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AutoScalingGroup resources.
 */
export interface AutoScalingGroupState {
    accessControlGroupNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    autoScalingGroupNo?: pulumi.Input<string>;
    defaultCooldown?: pulumi.Input<number>;
    desiredCapacity?: pulumi.Input<number>;
    healthCheckGracePeriod?: pulumi.Input<number>;
    healthCheckTypeCode?: pulumi.Input<string>;
    ignoreCapacityChanges?: pulumi.Input<boolean>;
    launchConfigurationNo?: pulumi.Input<string>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serverInstanceNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    serverNamePrefix?: pulumi.Input<string>;
    subnetNo?: pulumi.Input<string>;
    targetGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
    vpcNo?: pulumi.Input<string>;
    waitForCapacityTimeout?: pulumi.Input<string>;
    zoneNoLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AutoScalingGroup resource.
 */
export interface AutoScalingGroupArgs {
    accessControlGroupNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    defaultCooldown?: pulumi.Input<number>;
    desiredCapacity?: pulumi.Input<number>;
    healthCheckGracePeriod?: pulumi.Input<number>;
    healthCheckTypeCode?: pulumi.Input<string>;
    ignoreCapacityChanges?: pulumi.Input<boolean>;
    launchConfigurationNo: pulumi.Input<string>;
    maxSize: pulumi.Input<number>;
    minSize: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    serverNamePrefix?: pulumi.Input<string>;
    subnetNo?: pulumi.Input<string>;
    targetGroupLists?: pulumi.Input<pulumi.Input<string>[]>;
    waitForCapacityTimeout?: pulumi.Input<string>;
    zoneNoLists?: pulumi.Input<pulumi.Input<string>[]>;
}
