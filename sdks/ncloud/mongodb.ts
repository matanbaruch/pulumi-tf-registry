// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Mongodb extends pulumi.CustomResource {
    /**
     * Get an existing Mongodb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongodbState, opts?: pulumi.CustomResourceOptions): Mongodb {
        return new Mongodb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/mongodb:Mongodb';

    /**
     * Returns true if the given object is an instance of Mongodb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mongodb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mongodb.__pulumiType;
    }

    public /*out*/ readonly accessControlGroupNoLists!: pulumi.Output<string[]>;
    public /*out*/ readonly arbiterPort!: pulumi.Output<number>;
    public readonly arbiterProductCode!: pulumi.Output<string>;
    public readonly arbiterServerCount!: pulumi.Output<number>;
    public readonly backupFileRetentionPeriod!: pulumi.Output<number>;
    public readonly backupTime!: pulumi.Output<string>;
    public readonly clusterTypeCode!: pulumi.Output<string>;
    public readonly compressCode!: pulumi.Output<string>;
    public readonly configPort!: pulumi.Output<number>;
    public readonly configProductCode!: pulumi.Output<string>;
    public readonly configServerCount!: pulumi.Output<number>;
    public readonly dataStorageType!: pulumi.Output<string>;
    public /*out*/ readonly engineVersion!: pulumi.Output<string>;
    public readonly imageProductCode!: pulumi.Output<string>;
    public readonly memberPort!: pulumi.Output<number>;
    public readonly memberProductCode!: pulumi.Output<string>;
    public readonly memberServerCount!: pulumi.Output<number>;
    public /*out*/ readonly mongodbServerLists!: pulumi.Output<outputs.MongodbMongodbServerList[]>;
    public readonly mongosPort!: pulumi.Output<number>;
    public readonly mongosProductCode!: pulumi.Output<string>;
    public readonly mongosServerCount!: pulumi.Output<number>;
    public /*out*/ readonly regionCode!: pulumi.Output<string>;
    public readonly serverNamePrefix!: pulumi.Output<string>;
    /**
     * Service Name of Cloud DB for MongoDb instance.
     */
    public readonly serviceName!: pulumi.Output<string>;
    public readonly shardCount!: pulumi.Output<number>;
    public readonly subnetNo!: pulumi.Output<string>;
    /**
     * Access username, which will be used for DB admin.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * Access password for user, which will be used for DB admin.
     */
    public readonly userPassword!: pulumi.Output<string>;
    public readonly vpcNo!: pulumi.Output<string>;
    public /*out*/ readonly zoneCode!: pulumi.Output<string>;

    /**
     * Create a Mongodb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongodbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongodbArgs | MongodbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongodbState | undefined;
            resourceInputs["accessControlGroupNoLists"] = state ? state.accessControlGroupNoLists : undefined;
            resourceInputs["arbiterPort"] = state ? state.arbiterPort : undefined;
            resourceInputs["arbiterProductCode"] = state ? state.arbiterProductCode : undefined;
            resourceInputs["arbiterServerCount"] = state ? state.arbiterServerCount : undefined;
            resourceInputs["backupFileRetentionPeriod"] = state ? state.backupFileRetentionPeriod : undefined;
            resourceInputs["backupTime"] = state ? state.backupTime : undefined;
            resourceInputs["clusterTypeCode"] = state ? state.clusterTypeCode : undefined;
            resourceInputs["compressCode"] = state ? state.compressCode : undefined;
            resourceInputs["configPort"] = state ? state.configPort : undefined;
            resourceInputs["configProductCode"] = state ? state.configProductCode : undefined;
            resourceInputs["configServerCount"] = state ? state.configServerCount : undefined;
            resourceInputs["dataStorageType"] = state ? state.dataStorageType : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["imageProductCode"] = state ? state.imageProductCode : undefined;
            resourceInputs["memberPort"] = state ? state.memberPort : undefined;
            resourceInputs["memberProductCode"] = state ? state.memberProductCode : undefined;
            resourceInputs["memberServerCount"] = state ? state.memberServerCount : undefined;
            resourceInputs["mongodbServerLists"] = state ? state.mongodbServerLists : undefined;
            resourceInputs["mongosPort"] = state ? state.mongosPort : undefined;
            resourceInputs["mongosProductCode"] = state ? state.mongosProductCode : undefined;
            resourceInputs["mongosServerCount"] = state ? state.mongosServerCount : undefined;
            resourceInputs["regionCode"] = state ? state.regionCode : undefined;
            resourceInputs["serverNamePrefix"] = state ? state.serverNamePrefix : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["subnetNo"] = state ? state.subnetNo : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userPassword"] = state ? state.userPassword : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
            resourceInputs["zoneCode"] = state ? state.zoneCode : undefined;
        } else {
            const args = argsOrState as MongodbArgs | undefined;
            if ((!args || args.clusterTypeCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterTypeCode'");
            }
            if ((!args || args.serverNamePrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverNamePrefix'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.subnetNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetNo'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if ((!args || args.userPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            if ((!args || args.vpcNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcNo'");
            }
            resourceInputs["arbiterProductCode"] = args ? args.arbiterProductCode : undefined;
            resourceInputs["arbiterServerCount"] = args ? args.arbiterServerCount : undefined;
            resourceInputs["backupFileRetentionPeriod"] = args ? args.backupFileRetentionPeriod : undefined;
            resourceInputs["backupTime"] = args ? args.backupTime : undefined;
            resourceInputs["clusterTypeCode"] = args ? args.clusterTypeCode : undefined;
            resourceInputs["compressCode"] = args ? args.compressCode : undefined;
            resourceInputs["configPort"] = args ? args.configPort : undefined;
            resourceInputs["configProductCode"] = args ? args.configProductCode : undefined;
            resourceInputs["configServerCount"] = args ? args.configServerCount : undefined;
            resourceInputs["dataStorageType"] = args ? args.dataStorageType : undefined;
            resourceInputs["imageProductCode"] = args ? args.imageProductCode : undefined;
            resourceInputs["memberPort"] = args ? args.memberPort : undefined;
            resourceInputs["memberProductCode"] = args ? args.memberProductCode : undefined;
            resourceInputs["memberServerCount"] = args ? args.memberServerCount : undefined;
            resourceInputs["mongosPort"] = args ? args.mongosPort : undefined;
            resourceInputs["mongosProductCode"] = args ? args.mongosProductCode : undefined;
            resourceInputs["mongosServerCount"] = args ? args.mongosServerCount : undefined;
            resourceInputs["serverNamePrefix"] = args ? args.serverNamePrefix : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["subnetNo"] = args ? args.subnetNo : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["vpcNo"] = args ? args.vpcNo : undefined;
            resourceInputs["accessControlGroupNoLists"] = undefined /*out*/;
            resourceInputs["arbiterPort"] = undefined /*out*/;
            resourceInputs["engineVersion"] = undefined /*out*/;
            resourceInputs["mongodbServerLists"] = undefined /*out*/;
            resourceInputs["regionCode"] = undefined /*out*/;
            resourceInputs["zoneCode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Mongodb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Mongodb resources.
 */
export interface MongodbState {
    accessControlGroupNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    arbiterPort?: pulumi.Input<number>;
    arbiterProductCode?: pulumi.Input<string>;
    arbiterServerCount?: pulumi.Input<number>;
    backupFileRetentionPeriod?: pulumi.Input<number>;
    backupTime?: pulumi.Input<string>;
    clusterTypeCode?: pulumi.Input<string>;
    compressCode?: pulumi.Input<string>;
    configPort?: pulumi.Input<number>;
    configProductCode?: pulumi.Input<string>;
    configServerCount?: pulumi.Input<number>;
    dataStorageType?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    imageProductCode?: pulumi.Input<string>;
    memberPort?: pulumi.Input<number>;
    memberProductCode?: pulumi.Input<string>;
    memberServerCount?: pulumi.Input<number>;
    mongodbServerLists?: pulumi.Input<pulumi.Input<inputs.MongodbMongodbServerList>[]>;
    mongosPort?: pulumi.Input<number>;
    mongosProductCode?: pulumi.Input<string>;
    mongosServerCount?: pulumi.Input<number>;
    regionCode?: pulumi.Input<string>;
    serverNamePrefix?: pulumi.Input<string>;
    /**
     * Service Name of Cloud DB for MongoDb instance.
     */
    serviceName?: pulumi.Input<string>;
    shardCount?: pulumi.Input<number>;
    subnetNo?: pulumi.Input<string>;
    /**
     * Access username, which will be used for DB admin.
     */
    userName?: pulumi.Input<string>;
    /**
     * Access password for user, which will be used for DB admin.
     */
    userPassword?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
    zoneCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mongodb resource.
 */
export interface MongodbArgs {
    arbiterProductCode?: pulumi.Input<string>;
    arbiterServerCount?: pulumi.Input<number>;
    backupFileRetentionPeriod?: pulumi.Input<number>;
    backupTime?: pulumi.Input<string>;
    clusterTypeCode: pulumi.Input<string>;
    compressCode?: pulumi.Input<string>;
    configPort?: pulumi.Input<number>;
    configProductCode?: pulumi.Input<string>;
    configServerCount?: pulumi.Input<number>;
    dataStorageType?: pulumi.Input<string>;
    imageProductCode?: pulumi.Input<string>;
    memberPort?: pulumi.Input<number>;
    memberProductCode?: pulumi.Input<string>;
    memberServerCount?: pulumi.Input<number>;
    mongosPort?: pulumi.Input<number>;
    mongosProductCode?: pulumi.Input<string>;
    mongosServerCount?: pulumi.Input<number>;
    serverNamePrefix: pulumi.Input<string>;
    /**
     * Service Name of Cloud DB for MongoDb instance.
     */
    serviceName: pulumi.Input<string>;
    shardCount?: pulumi.Input<number>;
    subnetNo: pulumi.Input<string>;
    /**
     * Access username, which will be used for DB admin.
     */
    userName: pulumi.Input<string>;
    /**
     * Access password for user, which will be used for DB admin.
     */
    userPassword: pulumi.Input<string>;
    vpcNo: pulumi.Input<string>;
}
