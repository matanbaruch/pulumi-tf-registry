// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Redis extends pulumi.CustomResource {
    /**
     * Get an existing Redis resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisState, opts?: pulumi.CustomResourceOptions): Redis {
        return new Redis(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/redis:Redis';

    /**
     * Returns true if the given object is an instance of Redis.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Redis {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Redis.__pulumiType;
    }

    public /*out*/ readonly accessControlGroupNoLists!: pulumi.Output<string[]>;
    /**
     * default: 1
     */
    public readonly backupFileRetentionPeriod!: pulumi.Output<number>;
    public /*out*/ readonly backupSchedule!: pulumi.Output<string>;
    /**
     * ex) 01:15
     */
    public readonly backupTime!: pulumi.Output<string>;
    public readonly configGroupNo!: pulumi.Output<string>;
    public readonly imageProductCode!: pulumi.Output<string>;
    public readonly isAutomaticBackup!: pulumi.Output<boolean | undefined>;
    /**
     * default: false
     */
    public readonly isBackup!: pulumi.Output<boolean>;
    /**
     * default: true
     */
    public readonly isHa!: pulumi.Output<boolean>;
    public readonly mode!: pulumi.Output<string>;
    /**
     * default: 6379
     */
    public readonly port!: pulumi.Output<number>;
    public readonly productCode!: pulumi.Output<string>;
    public /*out*/ readonly redisServerLists!: pulumi.Output<outputs.RedisRedisServerList[]>;
    public /*out*/ readonly regionCode!: pulumi.Output<string>;
    public readonly serverNamePrefix!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * default: 0
     */
    public readonly shardCopyCount!: pulumi.Output<number | undefined>;
    /**
     * default: 3
     */
    public readonly shardCount!: pulumi.Output<number | undefined>;
    public readonly subnetNo!: pulumi.Output<string>;
    public readonly userName!: pulumi.Output<string | undefined>;
    public readonly userPassword!: pulumi.Output<string | undefined>;
    public readonly vpcNo!: pulumi.Output<string>;

    /**
     * Create a Redis resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisArgs | RedisState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisState | undefined;
            resourceInputs["accessControlGroupNoLists"] = state ? state.accessControlGroupNoLists : undefined;
            resourceInputs["backupFileRetentionPeriod"] = state ? state.backupFileRetentionPeriod : undefined;
            resourceInputs["backupSchedule"] = state ? state.backupSchedule : undefined;
            resourceInputs["backupTime"] = state ? state.backupTime : undefined;
            resourceInputs["configGroupNo"] = state ? state.configGroupNo : undefined;
            resourceInputs["imageProductCode"] = state ? state.imageProductCode : undefined;
            resourceInputs["isAutomaticBackup"] = state ? state.isAutomaticBackup : undefined;
            resourceInputs["isBackup"] = state ? state.isBackup : undefined;
            resourceInputs["isHa"] = state ? state.isHa : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["productCode"] = state ? state.productCode : undefined;
            resourceInputs["redisServerLists"] = state ? state.redisServerLists : undefined;
            resourceInputs["regionCode"] = state ? state.regionCode : undefined;
            resourceInputs["serverNamePrefix"] = state ? state.serverNamePrefix : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["shardCopyCount"] = state ? state.shardCopyCount : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["subnetNo"] = state ? state.subnetNo : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userPassword"] = state ? state.userPassword : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
        } else {
            const args = argsOrState as RedisArgs | undefined;
            if ((!args || args.configGroupNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configGroupNo'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.serverNamePrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverNamePrefix'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.subnetNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetNo'");
            }
            if ((!args || args.vpcNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcNo'");
            }
            resourceInputs["backupFileRetentionPeriod"] = args ? args.backupFileRetentionPeriod : undefined;
            resourceInputs["backupTime"] = args ? args.backupTime : undefined;
            resourceInputs["configGroupNo"] = args ? args.configGroupNo : undefined;
            resourceInputs["imageProductCode"] = args ? args.imageProductCode : undefined;
            resourceInputs["isAutomaticBackup"] = args ? args.isAutomaticBackup : undefined;
            resourceInputs["isBackup"] = args ? args.isBackup : undefined;
            resourceInputs["isHa"] = args ? args.isHa : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["productCode"] = args ? args.productCode : undefined;
            resourceInputs["serverNamePrefix"] = args ? args.serverNamePrefix : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["shardCopyCount"] = args ? args.shardCopyCount : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["subnetNo"] = args ? args.subnetNo : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["vpcNo"] = args ? args.vpcNo : undefined;
            resourceInputs["accessControlGroupNoLists"] = undefined /*out*/;
            resourceInputs["backupSchedule"] = undefined /*out*/;
            resourceInputs["redisServerLists"] = undefined /*out*/;
            resourceInputs["regionCode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Redis.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Redis resources.
 */
export interface RedisState {
    accessControlGroupNoLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * default: 1
     */
    backupFileRetentionPeriod?: pulumi.Input<number>;
    backupSchedule?: pulumi.Input<string>;
    /**
     * ex) 01:15
     */
    backupTime?: pulumi.Input<string>;
    configGroupNo?: pulumi.Input<string>;
    imageProductCode?: pulumi.Input<string>;
    isAutomaticBackup?: pulumi.Input<boolean>;
    /**
     * default: false
     */
    isBackup?: pulumi.Input<boolean>;
    /**
     * default: true
     */
    isHa?: pulumi.Input<boolean>;
    mode?: pulumi.Input<string>;
    /**
     * default: 6379
     */
    port?: pulumi.Input<number>;
    productCode?: pulumi.Input<string>;
    redisServerLists?: pulumi.Input<pulumi.Input<inputs.RedisRedisServerList>[]>;
    regionCode?: pulumi.Input<string>;
    serverNamePrefix?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    /**
     * default: 0
     */
    shardCopyCount?: pulumi.Input<number>;
    /**
     * default: 3
     */
    shardCount?: pulumi.Input<number>;
    subnetNo?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    userPassword?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Redis resource.
 */
export interface RedisArgs {
    /**
     * default: 1
     */
    backupFileRetentionPeriod?: pulumi.Input<number>;
    /**
     * ex) 01:15
     */
    backupTime?: pulumi.Input<string>;
    configGroupNo: pulumi.Input<string>;
    imageProductCode?: pulumi.Input<string>;
    isAutomaticBackup?: pulumi.Input<boolean>;
    /**
     * default: false
     */
    isBackup?: pulumi.Input<boolean>;
    /**
     * default: true
     */
    isHa?: pulumi.Input<boolean>;
    mode: pulumi.Input<string>;
    /**
     * default: 6379
     */
    port?: pulumi.Input<number>;
    productCode?: pulumi.Input<string>;
    serverNamePrefix: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    /**
     * default: 0
     */
    shardCopyCount?: pulumi.Input<number>;
    /**
     * default: 3
     */
    shardCount?: pulumi.Input<number>;
    subnetNo: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    userPassword?: pulumi.Input<string>;
    vpcNo: pulumi.Input<string>;
}
