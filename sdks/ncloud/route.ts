// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ncloud:index/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    public readonly destinationCidrBlock!: pulumi.Output<string>;
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    public readonly routeTableNo!: pulumi.Output<string>;
    public readonly targetName!: pulumi.Output<string>;
    public readonly targetNo!: pulumi.Output<string>;
    public readonly targetType!: pulumi.Output<string>;
    public /*out*/ readonly vpcNo!: pulumi.Output<string>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["routeTableNo"] = state ? state.routeTableNo : undefined;
            resourceInputs["targetName"] = state ? state.targetName : undefined;
            resourceInputs["targetNo"] = state ? state.targetNo : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["vpcNo"] = state ? state.vpcNo : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.routeTableNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableNo'");
            }
            if ((!args || args.targetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetName'");
            }
            if ((!args || args.targetNo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetNo'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["routeTableNo"] = args ? args.routeTableNo : undefined;
            resourceInputs["targetName"] = args ? args.targetName : undefined;
            resourceInputs["targetNo"] = args ? args.targetNo : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["vpcNo"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    destinationCidrBlock?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    routeTableNo?: pulumi.Input<string>;
    targetName?: pulumi.Input<string>;
    targetNo?: pulumi.Input<string>;
    targetType?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    destinationCidrBlock: pulumi.Input<string>;
    routeTableNo: pulumi.Input<string>;
    targetName: pulumi.Input<string>;
    targetNo: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
}
