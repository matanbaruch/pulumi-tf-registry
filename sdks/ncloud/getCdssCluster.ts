// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCdssCluster(args?: GetCdssClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetCdssClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ncloud:index/getCdssCluster:getCdssCluster", {
        "brokerNodes": args.brokerNodes,
        "cmaks": args.cmaks,
        "configGroupNo": args.configGroupNo,
        "filters": args.filters,
        "kafkaVersionCode": args.kafkaVersionCode,
        "managerNodes": args.managerNodes,
        "name": args.name,
        "osImage": args.osImage,
        "vpcNo": args.vpcNo,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCdssCluster.
 */
export interface GetCdssClusterArgs {
    brokerNodes?: inputs.GetCdssClusterBrokerNode[];
    cmaks?: inputs.GetCdssClusterCmak[];
    configGroupNo?: string;
    filters?: inputs.GetCdssClusterFilter[];
    kafkaVersionCode?: string;
    managerNodes?: inputs.GetCdssClusterManagerNode[];
    name?: string;
    osImage?: string;
    vpcNo?: string;
}

/**
 * A collection of values returned by getCdssCluster.
 */
export interface GetCdssClusterResult {
    readonly brokerNodes?: outputs.GetCdssClusterBrokerNode[];
    readonly cmaks?: outputs.GetCdssClusterCmak[];
    readonly configGroupNo?: string;
    readonly endpoints: outputs.GetCdssClusterEndpoint[];
    readonly filters?: outputs.GetCdssClusterFilter[];
    readonly id: string;
    readonly kafkaVersionCode?: string;
    readonly managerNodes?: outputs.GetCdssClusterManagerNode[];
    readonly name?: string;
    readonly osImage?: string;
    readonly serviceGroupInstanceNo: string;
    readonly vpcNo?: string;
}
export function getCdssClusterOutput(args?: GetCdssClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCdssClusterResult> {
    return pulumi.output(args).apply((a: any) => getCdssCluster(a, opts))
}

/**
 * A collection of arguments for invoking getCdssCluster.
 */
export interface GetCdssClusterOutputArgs {
    brokerNodes?: pulumi.Input<pulumi.Input<inputs.GetCdssClusterBrokerNodeArgs>[]>;
    cmaks?: pulumi.Input<pulumi.Input<inputs.GetCdssClusterCmakArgs>[]>;
    configGroupNo?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetCdssClusterFilterArgs>[]>;
    kafkaVersionCode?: pulumi.Input<string>;
    managerNodes?: pulumi.Input<pulumi.Input<inputs.GetCdssClusterManagerNodeArgs>[]>;
    name?: pulumi.Input<string>;
    osImage?: pulumi.Input<string>;
    vpcNo?: pulumi.Input<string>;
}
