// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessControlGroupArgs, AccessControlGroupState } from "./accessControlGroup";
export type AccessControlGroup = import("./accessControlGroup").AccessControlGroup;
export const AccessControlGroup: typeof import("./accessControlGroup").AccessControlGroup = null as any;
utilities.lazyLoad(exports, ["AccessControlGroup"], () => require("./accessControlGroup"));

export { AccessControlGroupRuleArgs, AccessControlGroupRuleState } from "./accessControlGroupRule";
export type AccessControlGroupRule = import("./accessControlGroupRule").AccessControlGroupRule;
export const AccessControlGroupRule: typeof import("./accessControlGroupRule").AccessControlGroupRule = null as any;
utilities.lazyLoad(exports, ["AccessControlGroupRule"], () => require("./accessControlGroupRule"));

export { AutoScalingGroupArgs, AutoScalingGroupState } from "./autoScalingGroup";
export type AutoScalingGroup = import("./autoScalingGroup").AutoScalingGroup;
export const AutoScalingGroup: typeof import("./autoScalingGroup").AutoScalingGroup = null as any;
utilities.lazyLoad(exports, ["AutoScalingGroup"], () => require("./autoScalingGroup"));

export { AutoScalingPolicyArgs, AutoScalingPolicyState } from "./autoScalingPolicy";
export type AutoScalingPolicy = import("./autoScalingPolicy").AutoScalingPolicy;
export const AutoScalingPolicy: typeof import("./autoScalingPolicy").AutoScalingPolicy = null as any;
utilities.lazyLoad(exports, ["AutoScalingPolicy"], () => require("./autoScalingPolicy"));

export { AutoScalingScheduleArgs, AutoScalingScheduleState } from "./autoScalingSchedule";
export type AutoScalingSchedule = import("./autoScalingSchedule").AutoScalingSchedule;
export const AutoScalingSchedule: typeof import("./autoScalingSchedule").AutoScalingSchedule = null as any;
utilities.lazyLoad(exports, ["AutoScalingSchedule"], () => require("./autoScalingSchedule"));

export { BlockStorageArgs, BlockStorageState } from "./blockStorage";
export type BlockStorage = import("./blockStorage").BlockStorage;
export const BlockStorage: typeof import("./blockStorage").BlockStorage = null as any;
utilities.lazyLoad(exports, ["BlockStorage"], () => require("./blockStorage"));

export { BlockStorageSnapshotArgs, BlockStorageSnapshotState } from "./blockStorageSnapshot";
export type BlockStorageSnapshot = import("./blockStorageSnapshot").BlockStorageSnapshot;
export const BlockStorageSnapshot: typeof import("./blockStorageSnapshot").BlockStorageSnapshot = null as any;
utilities.lazyLoad(exports, ["BlockStorageSnapshot"], () => require("./blockStorageSnapshot"));

export { CdssClusterArgs, CdssClusterState } from "./cdssCluster";
export type CdssCluster = import("./cdssCluster").CdssCluster;
export const CdssCluster: typeof import("./cdssCluster").CdssCluster = null as any;
utilities.lazyLoad(exports, ["CdssCluster"], () => require("./cdssCluster"));

export { CdssConfigGroupArgs, CdssConfigGroupState } from "./cdssConfigGroup";
export type CdssConfigGroup = import("./cdssConfigGroup").CdssConfigGroup;
export const CdssConfigGroup: typeof import("./cdssConfigGroup").CdssConfigGroup = null as any;
utilities.lazyLoad(exports, ["CdssConfigGroup"], () => require("./cdssConfigGroup"));

export { GetAccessControlGroupArgs, GetAccessControlGroupResult, GetAccessControlGroupOutputArgs } from "./getAccessControlGroup";
export const getAccessControlGroup: typeof import("./getAccessControlGroup").getAccessControlGroup = null as any;
export const getAccessControlGroupOutput: typeof import("./getAccessControlGroup").getAccessControlGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlGroup","getAccessControlGroupOutput"], () => require("./getAccessControlGroup"));

export { GetAccessControlGroupsArgs, GetAccessControlGroupsResult, GetAccessControlGroupsOutputArgs } from "./getAccessControlGroups";
export const getAccessControlGroups: typeof import("./getAccessControlGroups").getAccessControlGroups = null as any;
export const getAccessControlGroupsOutput: typeof import("./getAccessControlGroups").getAccessControlGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlGroups","getAccessControlGroupsOutput"], () => require("./getAccessControlGroups"));

export { GetAccessControlRuleArgs, GetAccessControlRuleResult, GetAccessControlRuleOutputArgs } from "./getAccessControlRule";
export const getAccessControlRule: typeof import("./getAccessControlRule").getAccessControlRule = null as any;
export const getAccessControlRuleOutput: typeof import("./getAccessControlRule").getAccessControlRuleOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlRule","getAccessControlRuleOutput"], () => require("./getAccessControlRule"));

export { GetAccessControlRulesArgs, GetAccessControlRulesResult, GetAccessControlRulesOutputArgs } from "./getAccessControlRules";
export const getAccessControlRules: typeof import("./getAccessControlRules").getAccessControlRules = null as any;
export const getAccessControlRulesOutput: typeof import("./getAccessControlRules").getAccessControlRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlRules","getAccessControlRulesOutput"], () => require("./getAccessControlRules"));

export { GetAutoScalingAdjustmentTypesArgs, GetAutoScalingAdjustmentTypesResult, GetAutoScalingAdjustmentTypesOutputArgs } from "./getAutoScalingAdjustmentTypes";
export const getAutoScalingAdjustmentTypes: typeof import("./getAutoScalingAdjustmentTypes").getAutoScalingAdjustmentTypes = null as any;
export const getAutoScalingAdjustmentTypesOutput: typeof import("./getAutoScalingAdjustmentTypes").getAutoScalingAdjustmentTypesOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingAdjustmentTypes","getAutoScalingAdjustmentTypesOutput"], () => require("./getAutoScalingAdjustmentTypes"));

export { GetAutoScalingGroupArgs, GetAutoScalingGroupResult, GetAutoScalingGroupOutputArgs } from "./getAutoScalingGroup";
export const getAutoScalingGroup: typeof import("./getAutoScalingGroup").getAutoScalingGroup = null as any;
export const getAutoScalingGroupOutput: typeof import("./getAutoScalingGroup").getAutoScalingGroupOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingGroup","getAutoScalingGroupOutput"], () => require("./getAutoScalingGroup"));

export { GetAutoScalingPolicyArgs, GetAutoScalingPolicyResult, GetAutoScalingPolicyOutputArgs } from "./getAutoScalingPolicy";
export const getAutoScalingPolicy: typeof import("./getAutoScalingPolicy").getAutoScalingPolicy = null as any;
export const getAutoScalingPolicyOutput: typeof import("./getAutoScalingPolicy").getAutoScalingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingPolicy","getAutoScalingPolicyOutput"], () => require("./getAutoScalingPolicy"));

export { GetAutoScalingScheduleArgs, GetAutoScalingScheduleResult, GetAutoScalingScheduleOutputArgs } from "./getAutoScalingSchedule";
export const getAutoScalingSchedule: typeof import("./getAutoScalingSchedule").getAutoScalingSchedule = null as any;
export const getAutoScalingScheduleOutput: typeof import("./getAutoScalingSchedule").getAutoScalingScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getAutoScalingSchedule","getAutoScalingScheduleOutput"], () => require("./getAutoScalingSchedule"));

export { GetBlockStorageArgs, GetBlockStorageResult, GetBlockStorageOutputArgs } from "./getBlockStorage";
export const getBlockStorage: typeof import("./getBlockStorage").getBlockStorage = null as any;
export const getBlockStorageOutput: typeof import("./getBlockStorage").getBlockStorageOutput = null as any;
utilities.lazyLoad(exports, ["getBlockStorage","getBlockStorageOutput"], () => require("./getBlockStorage"));

export { GetBlockStorageSnapshotArgs, GetBlockStorageSnapshotResult, GetBlockStorageSnapshotOutputArgs } from "./getBlockStorageSnapshot";
export const getBlockStorageSnapshot: typeof import("./getBlockStorageSnapshot").getBlockStorageSnapshot = null as any;
export const getBlockStorageSnapshotOutput: typeof import("./getBlockStorageSnapshot").getBlockStorageSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getBlockStorageSnapshot","getBlockStorageSnapshotOutput"], () => require("./getBlockStorageSnapshot"));

export { GetCdssClusterArgs, GetCdssClusterResult, GetCdssClusterOutputArgs } from "./getCdssCluster";
export const getCdssCluster: typeof import("./getCdssCluster").getCdssCluster = null as any;
export const getCdssClusterOutput: typeof import("./getCdssCluster").getCdssClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCdssCluster","getCdssClusterOutput"], () => require("./getCdssCluster"));

export { GetCdssConfigGroupArgs, GetCdssConfigGroupResult, GetCdssConfigGroupOutputArgs } from "./getCdssConfigGroup";
export const getCdssConfigGroup: typeof import("./getCdssConfigGroup").getCdssConfigGroup = null as any;
export const getCdssConfigGroupOutput: typeof import("./getCdssConfigGroup").getCdssConfigGroupOutput = null as any;
utilities.lazyLoad(exports, ["getCdssConfigGroup","getCdssConfigGroupOutput"], () => require("./getCdssConfigGroup"));

export { GetCdssKafkaVersionArgs, GetCdssKafkaVersionResult, GetCdssKafkaVersionOutputArgs } from "./getCdssKafkaVersion";
export const getCdssKafkaVersion: typeof import("./getCdssKafkaVersion").getCdssKafkaVersion = null as any;
export const getCdssKafkaVersionOutput: typeof import("./getCdssKafkaVersion").getCdssKafkaVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCdssKafkaVersion","getCdssKafkaVersionOutput"], () => require("./getCdssKafkaVersion"));

export { GetCdssKafkaVersionsArgs, GetCdssKafkaVersionsResult, GetCdssKafkaVersionsOutputArgs } from "./getCdssKafkaVersions";
export const getCdssKafkaVersions: typeof import("./getCdssKafkaVersions").getCdssKafkaVersions = null as any;
export const getCdssKafkaVersionsOutput: typeof import("./getCdssKafkaVersions").getCdssKafkaVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getCdssKafkaVersions","getCdssKafkaVersionsOutput"], () => require("./getCdssKafkaVersions"));

export { GetCdssNodeProductArgs, GetCdssNodeProductResult, GetCdssNodeProductOutputArgs } from "./getCdssNodeProduct";
export const getCdssNodeProduct: typeof import("./getCdssNodeProduct").getCdssNodeProduct = null as any;
export const getCdssNodeProductOutput: typeof import("./getCdssNodeProduct").getCdssNodeProductOutput = null as any;
utilities.lazyLoad(exports, ["getCdssNodeProduct","getCdssNodeProductOutput"], () => require("./getCdssNodeProduct"));

export { GetCdssNodeProductsArgs, GetCdssNodeProductsResult, GetCdssNodeProductsOutputArgs } from "./getCdssNodeProducts";
export const getCdssNodeProducts: typeof import("./getCdssNodeProducts").getCdssNodeProducts = null as any;
export const getCdssNodeProductsOutput: typeof import("./getCdssNodeProducts").getCdssNodeProductsOutput = null as any;
utilities.lazyLoad(exports, ["getCdssNodeProducts","getCdssNodeProductsOutput"], () => require("./getCdssNodeProducts"));

export { GetCdssOsImageArgs, GetCdssOsImageResult, GetCdssOsImageOutputArgs } from "./getCdssOsImage";
export const getCdssOsImage: typeof import("./getCdssOsImage").getCdssOsImage = null as any;
export const getCdssOsImageOutput: typeof import("./getCdssOsImage").getCdssOsImageOutput = null as any;
utilities.lazyLoad(exports, ["getCdssOsImage","getCdssOsImageOutput"], () => require("./getCdssOsImage"));

export { GetCdssOsImagesArgs, GetCdssOsImagesResult, GetCdssOsImagesOutputArgs } from "./getCdssOsImages";
export const getCdssOsImages: typeof import("./getCdssOsImages").getCdssOsImages = null as any;
export const getCdssOsImagesOutput: typeof import("./getCdssOsImages").getCdssOsImagesOutput = null as any;
utilities.lazyLoad(exports, ["getCdssOsImages","getCdssOsImagesOutput"], () => require("./getCdssOsImages"));

export { GetHadoopArgs, GetHadoopResult, GetHadoopOutputArgs } from "./getHadoop";
export const getHadoop: typeof import("./getHadoop").getHadoop = null as any;
export const getHadoopOutput: typeof import("./getHadoop").getHadoopOutput = null as any;
utilities.lazyLoad(exports, ["getHadoop","getHadoopOutput"], () => require("./getHadoop"));

export { GetHadoopAddOnArgs, GetHadoopAddOnResult, GetHadoopAddOnOutputArgs } from "./getHadoopAddOn";
export const getHadoopAddOn: typeof import("./getHadoopAddOn").getHadoopAddOn = null as any;
export const getHadoopAddOnOutput: typeof import("./getHadoopAddOn").getHadoopAddOnOutput = null as any;
utilities.lazyLoad(exports, ["getHadoopAddOn","getHadoopAddOnOutput"], () => require("./getHadoopAddOn"));

export { GetHadoopBucketArgs, GetHadoopBucketResult, GetHadoopBucketOutputArgs } from "./getHadoopBucket";
export const getHadoopBucket: typeof import("./getHadoopBucket").getHadoopBucket = null as any;
export const getHadoopBucketOutput: typeof import("./getHadoopBucket").getHadoopBucketOutput = null as any;
utilities.lazyLoad(exports, ["getHadoopBucket","getHadoopBucketOutput"], () => require("./getHadoopBucket"));

export { GetHadoopImageProductsArgs, GetHadoopImageProductsResult, GetHadoopImageProductsOutputArgs } from "./getHadoopImageProducts";
export const getHadoopImageProducts: typeof import("./getHadoopImageProducts").getHadoopImageProducts = null as any;
export const getHadoopImageProductsOutput: typeof import("./getHadoopImageProducts").getHadoopImageProductsOutput = null as any;
utilities.lazyLoad(exports, ["getHadoopImageProducts","getHadoopImageProductsOutput"], () => require("./getHadoopImageProducts"));

export { GetHadoopProductsArgs, GetHadoopProductsResult, GetHadoopProductsOutputArgs } from "./getHadoopProducts";
export const getHadoopProducts: typeof import("./getHadoopProducts").getHadoopProducts = null as any;
export const getHadoopProductsOutput: typeof import("./getHadoopProducts").getHadoopProductsOutput = null as any;
utilities.lazyLoad(exports, ["getHadoopProducts","getHadoopProductsOutput"], () => require("./getHadoopProducts"));

export { GetInitScriptArgs, GetInitScriptResult, GetInitScriptOutputArgs } from "./getInitScript";
export const getInitScript: typeof import("./getInitScript").getInitScript = null as any;
export const getInitScriptOutput: typeof import("./getInitScript").getInitScriptOutput = null as any;
utilities.lazyLoad(exports, ["getInitScript","getInitScriptOutput"], () => require("./getInitScript"));

export { GetLaunchConfigurationArgs, GetLaunchConfigurationResult, GetLaunchConfigurationOutputArgs } from "./getLaunchConfiguration";
export const getLaunchConfiguration: typeof import("./getLaunchConfiguration").getLaunchConfiguration = null as any;
export const getLaunchConfigurationOutput: typeof import("./getLaunchConfiguration").getLaunchConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchConfiguration","getLaunchConfigurationOutput"], () => require("./getLaunchConfiguration"));

export { GetLbArgs, GetLbResult, GetLbOutputArgs } from "./getLb";
export const getLb: typeof import("./getLb").getLb = null as any;
export const getLbOutput: typeof import("./getLb").getLbOutput = null as any;
utilities.lazyLoad(exports, ["getLb","getLbOutput"], () => require("./getLb"));

export { GetLbListenerArgs, GetLbListenerResult, GetLbListenerOutputArgs } from "./getLbListener";
export const getLbListener: typeof import("./getLbListener").getLbListener = null as any;
export const getLbListenerOutput: typeof import("./getLbListener").getLbListenerOutput = null as any;
utilities.lazyLoad(exports, ["getLbListener","getLbListenerOutput"], () => require("./getLbListener"));

export { GetLbTargetGroupArgs, GetLbTargetGroupResult, GetLbTargetGroupOutputArgs } from "./getLbTargetGroup";
export const getLbTargetGroup: typeof import("./getLbTargetGroup").getLbTargetGroup = null as any;
export const getLbTargetGroupOutput: typeof import("./getLbTargetGroup").getLbTargetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getLbTargetGroup","getLbTargetGroupOutput"], () => require("./getLbTargetGroup"));

export { GetMemberServerImageArgs, GetMemberServerImageResult, GetMemberServerImageOutputArgs } from "./getMemberServerImage";
export const getMemberServerImage: typeof import("./getMemberServerImage").getMemberServerImage = null as any;
export const getMemberServerImageOutput: typeof import("./getMemberServerImage").getMemberServerImageOutput = null as any;
utilities.lazyLoad(exports, ["getMemberServerImage","getMemberServerImageOutput"], () => require("./getMemberServerImage"));

export { GetMemberServerImagesArgs, GetMemberServerImagesResult, GetMemberServerImagesOutputArgs } from "./getMemberServerImages";
export const getMemberServerImages: typeof import("./getMemberServerImages").getMemberServerImages = null as any;
export const getMemberServerImagesOutput: typeof import("./getMemberServerImages").getMemberServerImagesOutput = null as any;
utilities.lazyLoad(exports, ["getMemberServerImages","getMemberServerImagesOutput"], () => require("./getMemberServerImages"));

export { GetMongodbArgs, GetMongodbResult, GetMongodbOutputArgs } from "./getMongodb";
export const getMongodb: typeof import("./getMongodb").getMongodb = null as any;
export const getMongodbOutput: typeof import("./getMongodb").getMongodbOutput = null as any;
utilities.lazyLoad(exports, ["getMongodb","getMongodbOutput"], () => require("./getMongodb"));

export { GetMongodbImageProductsArgs, GetMongodbImageProductsResult, GetMongodbImageProductsOutputArgs } from "./getMongodbImageProducts";
export const getMongodbImageProducts: typeof import("./getMongodbImageProducts").getMongodbImageProducts = null as any;
export const getMongodbImageProductsOutput: typeof import("./getMongodbImageProducts").getMongodbImageProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbImageProducts","getMongodbImageProductsOutput"], () => require("./getMongodbImageProducts"));

export { GetMongodbProductsArgs, GetMongodbProductsResult, GetMongodbProductsOutputArgs } from "./getMongodbProducts";
export const getMongodbProducts: typeof import("./getMongodbProducts").getMongodbProducts = null as any;
export const getMongodbProductsOutput: typeof import("./getMongodbProducts").getMongodbProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbProducts","getMongodbProductsOutput"], () => require("./getMongodbProducts"));

export { GetMssqlArgs, GetMssqlResult, GetMssqlOutputArgs } from "./getMssql";
export const getMssql: typeof import("./getMssql").getMssql = null as any;
export const getMssqlOutput: typeof import("./getMssql").getMssqlOutput = null as any;
utilities.lazyLoad(exports, ["getMssql","getMssqlOutput"], () => require("./getMssql"));

export { GetMssqlImageProductsArgs, GetMssqlImageProductsResult, GetMssqlImageProductsOutputArgs } from "./getMssqlImageProducts";
export const getMssqlImageProducts: typeof import("./getMssqlImageProducts").getMssqlImageProducts = null as any;
export const getMssqlImageProductsOutput: typeof import("./getMssqlImageProducts").getMssqlImageProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMssqlImageProducts","getMssqlImageProductsOutput"], () => require("./getMssqlImageProducts"));

export { GetMssqlProductsArgs, GetMssqlProductsResult, GetMssqlProductsOutputArgs } from "./getMssqlProducts";
export const getMssqlProducts: typeof import("./getMssqlProducts").getMssqlProducts = null as any;
export const getMssqlProductsOutput: typeof import("./getMssqlProducts").getMssqlProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMssqlProducts","getMssqlProductsOutput"], () => require("./getMssqlProducts"));

export { GetMysqlArgs, GetMysqlResult, GetMysqlOutputArgs } from "./getMysql";
export const getMysql: typeof import("./getMysql").getMysql = null as any;
export const getMysqlOutput: typeof import("./getMysql").getMysqlOutput = null as any;
utilities.lazyLoad(exports, ["getMysql","getMysqlOutput"], () => require("./getMysql"));

export { GetMysqlImageProductsArgs, GetMysqlImageProductsResult, GetMysqlImageProductsOutputArgs } from "./getMysqlImageProducts";
export const getMysqlImageProducts: typeof import("./getMysqlImageProducts").getMysqlImageProducts = null as any;
export const getMysqlImageProductsOutput: typeof import("./getMysqlImageProducts").getMysqlImageProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlImageProducts","getMysqlImageProductsOutput"], () => require("./getMysqlImageProducts"));

export { GetMysqlProductsArgs, GetMysqlProductsResult, GetMysqlProductsOutputArgs } from "./getMysqlProducts";
export const getMysqlProducts: typeof import("./getMysqlProducts").getMysqlProducts = null as any;
export const getMysqlProductsOutput: typeof import("./getMysqlProducts").getMysqlProductsOutput = null as any;
utilities.lazyLoad(exports, ["getMysqlProducts","getMysqlProductsOutput"], () => require("./getMysqlProducts"));

export { GetNasVolumeArgs, GetNasVolumeResult, GetNasVolumeOutputArgs } from "./getNasVolume";
export const getNasVolume: typeof import("./getNasVolume").getNasVolume = null as any;
export const getNasVolumeOutput: typeof import("./getNasVolume").getNasVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getNasVolume","getNasVolumeOutput"], () => require("./getNasVolume"));

export { GetNasVolumesArgs, GetNasVolumesResult, GetNasVolumesOutputArgs } from "./getNasVolumes";
export const getNasVolumes: typeof import("./getNasVolumes").getNasVolumes = null as any;
export const getNasVolumesOutput: typeof import("./getNasVolumes").getNasVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getNasVolumes","getNasVolumesOutput"], () => require("./getNasVolumes"));

export { GetNatGatewayArgs, GetNatGatewayResult, GetNatGatewayOutputArgs } from "./getNatGateway";
export const getNatGateway: typeof import("./getNatGateway").getNatGateway = null as any;
export const getNatGatewayOutput: typeof import("./getNatGateway").getNatGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateway","getNatGatewayOutput"], () => require("./getNatGateway"));

export { GetNetworkAclDenyAllowGroupsArgs, GetNetworkAclDenyAllowGroupsResult, GetNetworkAclDenyAllowGroupsOutputArgs } from "./getNetworkAclDenyAllowGroups";
export const getNetworkAclDenyAllowGroups: typeof import("./getNetworkAclDenyAllowGroups").getNetworkAclDenyAllowGroups = null as any;
export const getNetworkAclDenyAllowGroupsOutput: typeof import("./getNetworkAclDenyAllowGroups").getNetworkAclDenyAllowGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAclDenyAllowGroups","getNetworkAclDenyAllowGroupsOutput"], () => require("./getNetworkAclDenyAllowGroups"));

export { GetNetworkAclsArgs, GetNetworkAclsResult, GetNetworkAclsOutputArgs } from "./getNetworkAcls";
export const getNetworkAcls: typeof import("./getNetworkAcls").getNetworkAcls = null as any;
export const getNetworkAclsOutput: typeof import("./getNetworkAcls").getNetworkAclsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkAcls","getNetworkAclsOutput"], () => require("./getNetworkAcls"));

export { GetNetworkInterfaceArgs, GetNetworkInterfaceResult, GetNetworkInterfaceOutputArgs } from "./getNetworkInterface";
export const getNetworkInterface: typeof import("./getNetworkInterface").getNetworkInterface = null as any;
export const getNetworkInterfaceOutput: typeof import("./getNetworkInterface").getNetworkInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterface","getNetworkInterfaceOutput"], () => require("./getNetworkInterface"));

export { GetNetworkInterfacesArgs, GetNetworkInterfacesResult, GetNetworkInterfacesOutputArgs } from "./getNetworkInterfaces";
export const getNetworkInterfaces: typeof import("./getNetworkInterfaces").getNetworkInterfaces = null as any;
export const getNetworkInterfacesOutput: typeof import("./getNetworkInterfaces").getNetworkInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkInterfaces","getNetworkInterfacesOutput"], () => require("./getNetworkInterfaces"));

export { GetNksClusterArgs, GetNksClusterResult, GetNksClusterOutputArgs } from "./getNksCluster";
export const getNksCluster: typeof import("./getNksCluster").getNksCluster = null as any;
export const getNksClusterOutput: typeof import("./getNksCluster").getNksClusterOutput = null as any;
utilities.lazyLoad(exports, ["getNksCluster","getNksClusterOutput"], () => require("./getNksCluster"));

export { GetNksClustersArgs, GetNksClustersResult, GetNksClustersOutputArgs } from "./getNksClusters";
export const getNksClusters: typeof import("./getNksClusters").getNksClusters = null as any;
export const getNksClustersOutput: typeof import("./getNksClusters").getNksClustersOutput = null as any;
utilities.lazyLoad(exports, ["getNksClusters","getNksClustersOutput"], () => require("./getNksClusters"));

export { GetNksKubeConfigArgs, GetNksKubeConfigResult, GetNksKubeConfigOutputArgs } from "./getNksKubeConfig";
export const getNksKubeConfig: typeof import("./getNksKubeConfig").getNksKubeConfig = null as any;
export const getNksKubeConfigOutput: typeof import("./getNksKubeConfig").getNksKubeConfigOutput = null as any;
utilities.lazyLoad(exports, ["getNksKubeConfig","getNksKubeConfigOutput"], () => require("./getNksKubeConfig"));

export { GetNksNodePoolArgs, GetNksNodePoolResult, GetNksNodePoolOutputArgs } from "./getNksNodePool";
export const getNksNodePool: typeof import("./getNksNodePool").getNksNodePool = null as any;
export const getNksNodePoolOutput: typeof import("./getNksNodePool").getNksNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getNksNodePool","getNksNodePoolOutput"], () => require("./getNksNodePool"));

export { GetNksNodePoolsArgs, GetNksNodePoolsResult, GetNksNodePoolsOutputArgs } from "./getNksNodePools";
export const getNksNodePools: typeof import("./getNksNodePools").getNksNodePools = null as any;
export const getNksNodePoolsOutput: typeof import("./getNksNodePools").getNksNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getNksNodePools","getNksNodePoolsOutput"], () => require("./getNksNodePools"));

export { GetNksServerImagesArgs, GetNksServerImagesResult, GetNksServerImagesOutputArgs } from "./getNksServerImages";
export const getNksServerImages: typeof import("./getNksServerImages").getNksServerImages = null as any;
export const getNksServerImagesOutput: typeof import("./getNksServerImages").getNksServerImagesOutput = null as any;
utilities.lazyLoad(exports, ["getNksServerImages","getNksServerImagesOutput"], () => require("./getNksServerImages"));

export { GetNksServerProductsArgs, GetNksServerProductsResult, GetNksServerProductsOutputArgs } from "./getNksServerProducts";
export const getNksServerProducts: typeof import("./getNksServerProducts").getNksServerProducts = null as any;
export const getNksServerProductsOutput: typeof import("./getNksServerProducts").getNksServerProductsOutput = null as any;
utilities.lazyLoad(exports, ["getNksServerProducts","getNksServerProductsOutput"], () => require("./getNksServerProducts"));

export { GetNksVersionsArgs, GetNksVersionsResult, GetNksVersionsOutputArgs } from "./getNksVersions";
export const getNksVersions: typeof import("./getNksVersions").getNksVersions = null as any;
export const getNksVersionsOutput: typeof import("./getNksVersions").getNksVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getNksVersions","getNksVersionsOutput"], () => require("./getNksVersions"));

export { GetPlacementGroupArgs, GetPlacementGroupResult, GetPlacementGroupOutputArgs } from "./getPlacementGroup";
export const getPlacementGroup: typeof import("./getPlacementGroup").getPlacementGroup = null as any;
export const getPlacementGroupOutput: typeof import("./getPlacementGroup").getPlacementGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPlacementGroup","getPlacementGroupOutput"], () => require("./getPlacementGroup"));

export { GetPortForwardingRuleArgs, GetPortForwardingRuleResult, GetPortForwardingRuleOutputArgs } from "./getPortForwardingRule";
export const getPortForwardingRule: typeof import("./getPortForwardingRule").getPortForwardingRule = null as any;
export const getPortForwardingRuleOutput: typeof import("./getPortForwardingRule").getPortForwardingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getPortForwardingRule","getPortForwardingRuleOutput"], () => require("./getPortForwardingRule"));

export { GetPortForwardingRulesArgs, GetPortForwardingRulesResult, GetPortForwardingRulesOutputArgs } from "./getPortForwardingRules";
export const getPortForwardingRules: typeof import("./getPortForwardingRules").getPortForwardingRules = null as any;
export const getPortForwardingRulesOutput: typeof import("./getPortForwardingRules").getPortForwardingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getPortForwardingRules","getPortForwardingRulesOutput"], () => require("./getPortForwardingRules"));

export { GetPublicIpArgs, GetPublicIpResult, GetPublicIpOutputArgs } from "./getPublicIp";
export const getPublicIp: typeof import("./getPublicIp").getPublicIp = null as any;
export const getPublicIpOutput: typeof import("./getPublicIp").getPublicIpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIp","getPublicIpOutput"], () => require("./getPublicIp"));

export { GetRedisArgs, GetRedisResult, GetRedisOutputArgs } from "./getRedis";
export const getRedis: typeof import("./getRedis").getRedis = null as any;
export const getRedisOutput: typeof import("./getRedis").getRedisOutput = null as any;
utilities.lazyLoad(exports, ["getRedis","getRedisOutput"], () => require("./getRedis"));

export { GetRedisConfigGroupArgs, GetRedisConfigGroupResult, GetRedisConfigGroupOutputArgs } from "./getRedisConfigGroup";
export const getRedisConfigGroup: typeof import("./getRedisConfigGroup").getRedisConfigGroup = null as any;
export const getRedisConfigGroupOutput: typeof import("./getRedisConfigGroup").getRedisConfigGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRedisConfigGroup","getRedisConfigGroupOutput"], () => require("./getRedisConfigGroup"));

export { GetRedisImageProductsArgs, GetRedisImageProductsResult, GetRedisImageProductsOutputArgs } from "./getRedisImageProducts";
export const getRedisImageProducts: typeof import("./getRedisImageProducts").getRedisImageProducts = null as any;
export const getRedisImageProductsOutput: typeof import("./getRedisImageProducts").getRedisImageProductsOutput = null as any;
utilities.lazyLoad(exports, ["getRedisImageProducts","getRedisImageProductsOutput"], () => require("./getRedisImageProducts"));

export { GetRedisProductsArgs, GetRedisProductsResult, GetRedisProductsOutputArgs } from "./getRedisProducts";
export const getRedisProducts: typeof import("./getRedisProducts").getRedisProducts = null as any;
export const getRedisProductsOutput: typeof import("./getRedisProducts").getRedisProductsOutput = null as any;
utilities.lazyLoad(exports, ["getRedisProducts","getRedisProductsOutput"], () => require("./getRedisProducts"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetRootPasswordArgs, GetRootPasswordResult, GetRootPasswordOutputArgs } from "./getRootPassword";
export const getRootPassword: typeof import("./getRootPassword").getRootPassword = null as any;
export const getRootPasswordOutput: typeof import("./getRootPassword").getRootPasswordOutput = null as any;
utilities.lazyLoad(exports, ["getRootPassword","getRootPasswordOutput"], () => require("./getRootPassword"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetRouteTablesArgs, GetRouteTablesResult, GetRouteTablesOutputArgs } from "./getRouteTables";
export const getRouteTables: typeof import("./getRouteTables").getRouteTables = null as any;
export const getRouteTablesOutput: typeof import("./getRouteTables").getRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTables","getRouteTablesOutput"], () => require("./getRouteTables"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServerImageArgs, GetServerImageResult, GetServerImageOutputArgs } from "./getServerImage";
export const getServerImage: typeof import("./getServerImage").getServerImage = null as any;
export const getServerImageOutput: typeof import("./getServerImage").getServerImageOutput = null as any;
utilities.lazyLoad(exports, ["getServerImage","getServerImageOutput"], () => require("./getServerImage"));

export { GetServerImagesArgs, GetServerImagesResult, GetServerImagesOutputArgs } from "./getServerImages";
export const getServerImages: typeof import("./getServerImages").getServerImages = null as any;
export const getServerImagesOutput: typeof import("./getServerImages").getServerImagesOutput = null as any;
utilities.lazyLoad(exports, ["getServerImages","getServerImagesOutput"], () => require("./getServerImages"));

export { GetServerProductArgs, GetServerProductResult, GetServerProductOutputArgs } from "./getServerProduct";
export const getServerProduct: typeof import("./getServerProduct").getServerProduct = null as any;
export const getServerProductOutput: typeof import("./getServerProduct").getServerProductOutput = null as any;
utilities.lazyLoad(exports, ["getServerProduct","getServerProductOutput"], () => require("./getServerProduct"));

export { GetServerProductsArgs, GetServerProductsResult, GetServerProductsOutputArgs } from "./getServerProducts";
export const getServerProducts: typeof import("./getServerProducts").getServerProducts = null as any;
export const getServerProductsOutput: typeof import("./getServerProducts").getServerProductsOutput = null as any;
utilities.lazyLoad(exports, ["getServerProducts","getServerProductsOutput"], () => require("./getServerProducts"));

export { GetServersArgs, GetServersResult, GetServersOutputArgs } from "./getServers";
export const getServers: typeof import("./getServers").getServers = null as any;
export const getServersOutput: typeof import("./getServers").getServersOutput = null as any;
utilities.lazyLoad(exports, ["getServers","getServersOutput"], () => require("./getServers"));

export { GetSesClusterArgs, GetSesClusterResult, GetSesClusterOutputArgs } from "./getSesCluster";
export const getSesCluster: typeof import("./getSesCluster").getSesCluster = null as any;
export const getSesClusterOutput: typeof import("./getSesCluster").getSesClusterOutput = null as any;
utilities.lazyLoad(exports, ["getSesCluster","getSesClusterOutput"], () => require("./getSesCluster"));

export { GetSesClustersArgs, GetSesClustersResult, GetSesClustersOutputArgs } from "./getSesClusters";
export const getSesClusters: typeof import("./getSesClusters").getSesClusters = null as any;
export const getSesClustersOutput: typeof import("./getSesClusters").getSesClustersOutput = null as any;
utilities.lazyLoad(exports, ["getSesClusters","getSesClustersOutput"], () => require("./getSesClusters"));

export { GetSesNodeOsImagesArgs, GetSesNodeOsImagesResult, GetSesNodeOsImagesOutputArgs } from "./getSesNodeOsImages";
export const getSesNodeOsImages: typeof import("./getSesNodeOsImages").getSesNodeOsImages = null as any;
export const getSesNodeOsImagesOutput: typeof import("./getSesNodeOsImages").getSesNodeOsImagesOutput = null as any;
utilities.lazyLoad(exports, ["getSesNodeOsImages","getSesNodeOsImagesOutput"], () => require("./getSesNodeOsImages"));

export { GetSesNodeProductsArgs, GetSesNodeProductsResult, GetSesNodeProductsOutputArgs } from "./getSesNodeProducts";
export const getSesNodeProducts: typeof import("./getSesNodeProducts").getSesNodeProducts = null as any;
export const getSesNodeProductsOutput: typeof import("./getSesNodeProducts").getSesNodeProductsOutput = null as any;
utilities.lazyLoad(exports, ["getSesNodeProducts","getSesNodeProductsOutput"], () => require("./getSesNodeProducts"));

export { GetSesVersionsArgs, GetSesVersionsResult, GetSesVersionsOutputArgs } from "./getSesVersions";
export const getSesVersions: typeof import("./getSesVersions").getSesVersions = null as any;
export const getSesVersionsOutput: typeof import("./getSesVersions").getSesVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSesVersions","getSesVersionsOutput"], () => require("./getSesVersions"));

export { GetSourcebuildProjectArgs, GetSourcebuildProjectResult, GetSourcebuildProjectOutputArgs } from "./getSourcebuildProject";
export const getSourcebuildProject: typeof import("./getSourcebuildProject").getSourcebuildProject = null as any;
export const getSourcebuildProjectOutput: typeof import("./getSourcebuildProject").getSourcebuildProjectOutput = null as any;
utilities.lazyLoad(exports, ["getSourcebuildProject","getSourcebuildProjectOutput"], () => require("./getSourcebuildProject"));

export { GetSourcebuildProjectComputesArgs, GetSourcebuildProjectComputesResult, GetSourcebuildProjectComputesOutputArgs } from "./getSourcebuildProjectComputes";
export const getSourcebuildProjectComputes: typeof import("./getSourcebuildProjectComputes").getSourcebuildProjectComputes = null as any;
export const getSourcebuildProjectComputesOutput: typeof import("./getSourcebuildProjectComputes").getSourcebuildProjectComputesOutput = null as any;
utilities.lazyLoad(exports, ["getSourcebuildProjectComputes","getSourcebuildProjectComputesOutput"], () => require("./getSourcebuildProjectComputes"));

export { GetSourcebuildProjectDockerEnginesArgs, GetSourcebuildProjectDockerEnginesResult, GetSourcebuildProjectDockerEnginesOutputArgs } from "./getSourcebuildProjectDockerEngines";
export const getSourcebuildProjectDockerEngines: typeof import("./getSourcebuildProjectDockerEngines").getSourcebuildProjectDockerEngines = null as any;
export const getSourcebuildProjectDockerEnginesOutput: typeof import("./getSourcebuildProjectDockerEngines").getSourcebuildProjectDockerEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getSourcebuildProjectDockerEngines","getSourcebuildProjectDockerEnginesOutput"], () => require("./getSourcebuildProjectDockerEngines"));

export { GetSourcebuildProjectOsArgs, GetSourcebuildProjectOsResult, GetSourcebuildProjectOsOutputArgs } from "./getSourcebuildProjectOs";
export const getSourcebuildProjectOs: typeof import("./getSourcebuildProjectOs").getSourcebuildProjectOs = null as any;
export const getSourcebuildProjectOsOutput: typeof import("./getSourcebuildProjectOs").getSourcebuildProjectOsOutput = null as any;
utilities.lazyLoad(exports, ["getSourcebuildProjectOs","getSourcebuildProjectOsOutput"], () => require("./getSourcebuildProjectOs"));

export { GetSourcebuildProjectOsRuntimeVersionsArgs, GetSourcebuildProjectOsRuntimeVersionsResult, GetSourcebuildProjectOsRuntimeVersionsOutputArgs } from "./getSourcebuildProjectOsRuntimeVersions";
export const getSourcebuildProjectOsRuntimeVersions: typeof import("./getSourcebuildProjectOsRuntimeVersions").getSourcebuildProjectOsRuntimeVersions = null as any;
export const getSourcebuildProjectOsRuntimeVersionsOutput: typeof import("./getSourcebuildProjectOsRuntimeVersions").getSourcebuildProjectOsRuntimeVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getSourcebuildProjectOsRuntimeVersions","getSourcebuildProjectOsRuntimeVersionsOutput"], () => require("./getSourcebuildProjectOsRuntimeVersions"));

export { GetSourcebuildProjectOsRuntimesArgs, GetSourcebuildProjectOsRuntimesResult, GetSourcebuildProjectOsRuntimesOutputArgs } from "./getSourcebuildProjectOsRuntimes";
export const getSourcebuildProjectOsRuntimes: typeof import("./getSourcebuildProjectOsRuntimes").getSourcebuildProjectOsRuntimes = null as any;
export const getSourcebuildProjectOsRuntimesOutput: typeof import("./getSourcebuildProjectOsRuntimes").getSourcebuildProjectOsRuntimesOutput = null as any;
utilities.lazyLoad(exports, ["getSourcebuildProjectOsRuntimes","getSourcebuildProjectOsRuntimesOutput"], () => require("./getSourcebuildProjectOsRuntimes"));

export { GetSourcebuildProjectsArgs, GetSourcebuildProjectsResult, GetSourcebuildProjectsOutputArgs } from "./getSourcebuildProjects";
export const getSourcebuildProjects: typeof import("./getSourcebuildProjects").getSourcebuildProjects = null as any;
export const getSourcebuildProjectsOutput: typeof import("./getSourcebuildProjects").getSourcebuildProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getSourcebuildProjects","getSourcebuildProjectsOutput"], () => require("./getSourcebuildProjects"));

export { GetSourcecommitRepositoriesArgs, GetSourcecommitRepositoriesResult, GetSourcecommitRepositoriesOutputArgs } from "./getSourcecommitRepositories";
export const getSourcecommitRepositories: typeof import("./getSourcecommitRepositories").getSourcecommitRepositories = null as any;
export const getSourcecommitRepositoriesOutput: typeof import("./getSourcecommitRepositories").getSourcecommitRepositoriesOutput = null as any;
utilities.lazyLoad(exports, ["getSourcecommitRepositories","getSourcecommitRepositoriesOutput"], () => require("./getSourcecommitRepositories"));

export { GetSourcecommitRepositoryArgs, GetSourcecommitRepositoryResult, GetSourcecommitRepositoryOutputArgs } from "./getSourcecommitRepository";
export const getSourcecommitRepository: typeof import("./getSourcecommitRepository").getSourcecommitRepository = null as any;
export const getSourcecommitRepositoryOutput: typeof import("./getSourcecommitRepository").getSourcecommitRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getSourcecommitRepository","getSourcecommitRepositoryOutput"], () => require("./getSourcecommitRepository"));

export { GetSourcedeployProjectStageArgs, GetSourcedeployProjectStageResult, GetSourcedeployProjectStageOutputArgs } from "./getSourcedeployProjectStage";
export const getSourcedeployProjectStage: typeof import("./getSourcedeployProjectStage").getSourcedeployProjectStage = null as any;
export const getSourcedeployProjectStageOutput: typeof import("./getSourcedeployProjectStage").getSourcedeployProjectStageOutput = null as any;
utilities.lazyLoad(exports, ["getSourcedeployProjectStage","getSourcedeployProjectStageOutput"], () => require("./getSourcedeployProjectStage"));

export { GetSourcedeployProjectStageScenarioArgs, GetSourcedeployProjectStageScenarioResult, GetSourcedeployProjectStageScenarioOutputArgs } from "./getSourcedeployProjectStageScenario";
export const getSourcedeployProjectStageScenario: typeof import("./getSourcedeployProjectStageScenario").getSourcedeployProjectStageScenario = null as any;
export const getSourcedeployProjectStageScenarioOutput: typeof import("./getSourcedeployProjectStageScenario").getSourcedeployProjectStageScenarioOutput = null as any;
utilities.lazyLoad(exports, ["getSourcedeployProjectStageScenario","getSourcedeployProjectStageScenarioOutput"], () => require("./getSourcedeployProjectStageScenario"));

export { GetSourcedeployProjectStageScenariosArgs, GetSourcedeployProjectStageScenariosResult, GetSourcedeployProjectStageScenariosOutputArgs } from "./getSourcedeployProjectStageScenarios";
export const getSourcedeployProjectStageScenarios: typeof import("./getSourcedeployProjectStageScenarios").getSourcedeployProjectStageScenarios = null as any;
export const getSourcedeployProjectStageScenariosOutput: typeof import("./getSourcedeployProjectStageScenarios").getSourcedeployProjectStageScenariosOutput = null as any;
utilities.lazyLoad(exports, ["getSourcedeployProjectStageScenarios","getSourcedeployProjectStageScenariosOutput"], () => require("./getSourcedeployProjectStageScenarios"));

export { GetSourcedeployProjectStagesArgs, GetSourcedeployProjectStagesResult, GetSourcedeployProjectStagesOutputArgs } from "./getSourcedeployProjectStages";
export const getSourcedeployProjectStages: typeof import("./getSourcedeployProjectStages").getSourcedeployProjectStages = null as any;
export const getSourcedeployProjectStagesOutput: typeof import("./getSourcedeployProjectStages").getSourcedeployProjectStagesOutput = null as any;
utilities.lazyLoad(exports, ["getSourcedeployProjectStages","getSourcedeployProjectStagesOutput"], () => require("./getSourcedeployProjectStages"));

export { GetSourcedeployProjectsArgs, GetSourcedeployProjectsResult, GetSourcedeployProjectsOutputArgs } from "./getSourcedeployProjects";
export const getSourcedeployProjects: typeof import("./getSourcedeployProjects").getSourcedeployProjects = null as any;
export const getSourcedeployProjectsOutput: typeof import("./getSourcedeployProjects").getSourcedeployProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getSourcedeployProjects","getSourcedeployProjectsOutput"], () => require("./getSourcedeployProjects"));

export { GetSourcepipelineProjectArgs, GetSourcepipelineProjectResult, GetSourcepipelineProjectOutputArgs } from "./getSourcepipelineProject";
export const getSourcepipelineProject: typeof import("./getSourcepipelineProject").getSourcepipelineProject = null as any;
export const getSourcepipelineProjectOutput: typeof import("./getSourcepipelineProject").getSourcepipelineProjectOutput = null as any;
utilities.lazyLoad(exports, ["getSourcepipelineProject","getSourcepipelineProjectOutput"], () => require("./getSourcepipelineProject"));

export { GetSourcepipelineProjectsArgs, GetSourcepipelineProjectsResult, GetSourcepipelineProjectsOutputArgs } from "./getSourcepipelineProjects";
export const getSourcepipelineProjects: typeof import("./getSourcepipelineProjects").getSourcepipelineProjects = null as any;
export const getSourcepipelineProjectsOutput: typeof import("./getSourcepipelineProjects").getSourcepipelineProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getSourcepipelineProjects","getSourcepipelineProjectsOutput"], () => require("./getSourcepipelineProjects"));

export { GetSourcepipelineTriggerTimezoneArgs, GetSourcepipelineTriggerTimezoneResult, GetSourcepipelineTriggerTimezoneOutputArgs } from "./getSourcepipelineTriggerTimezone";
export const getSourcepipelineTriggerTimezone: typeof import("./getSourcepipelineTriggerTimezone").getSourcepipelineTriggerTimezone = null as any;
export const getSourcepipelineTriggerTimezoneOutput: typeof import("./getSourcepipelineTriggerTimezone").getSourcepipelineTriggerTimezoneOutput = null as any;
utilities.lazyLoad(exports, ["getSourcepipelineTriggerTimezone","getSourcepipelineTriggerTimezoneOutput"], () => require("./getSourcepipelineTriggerTimezone"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcPeeringArgs, GetVpcPeeringResult, GetVpcPeeringOutputArgs } from "./getVpcPeering";
export const getVpcPeering: typeof import("./getVpcPeering").getVpcPeering = null as any;
export const getVpcPeeringOutput: typeof import("./getVpcPeering").getVpcPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getVpcPeering","getVpcPeeringOutput"], () => require("./getVpcPeering"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { HadoopArgs, HadoopState } from "./hadoop";
export type Hadoop = import("./hadoop").Hadoop;
export const Hadoop: typeof import("./hadoop").Hadoop = null as any;
utilities.lazyLoad(exports, ["Hadoop"], () => require("./hadoop"));

export { InitScriptArgs, InitScriptState } from "./initScript";
export type InitScript = import("./initScript").InitScript;
export const InitScript: typeof import("./initScript").InitScript = null as any;
utilities.lazyLoad(exports, ["InitScript"], () => require("./initScript"));

export { LaunchConfigurationArgs, LaunchConfigurationState } from "./launchConfiguration";
export type LaunchConfiguration = import("./launchConfiguration").LaunchConfiguration;
export const LaunchConfiguration: typeof import("./launchConfiguration").LaunchConfiguration = null as any;
utilities.lazyLoad(exports, ["LaunchConfiguration"], () => require("./launchConfiguration"));

export { LbArgs, LbState } from "./lb";
export type Lb = import("./lb").Lb;
export const Lb: typeof import("./lb").Lb = null as any;
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));

export { LbListenerArgs, LbListenerState } from "./lbListener";
export type LbListener = import("./lbListener").LbListener;
export const LbListener: typeof import("./lbListener").LbListener = null as any;
utilities.lazyLoad(exports, ["LbListener"], () => require("./lbListener"));

export { LbTargetGroupArgs, LbTargetGroupState } from "./lbTargetGroup";
export type LbTargetGroup = import("./lbTargetGroup").LbTargetGroup;
export const LbTargetGroup: typeof import("./lbTargetGroup").LbTargetGroup = null as any;
utilities.lazyLoad(exports, ["LbTargetGroup"], () => require("./lbTargetGroup"));

export { LbTargetGroupAttachmentArgs, LbTargetGroupAttachmentState } from "./lbTargetGroupAttachment";
export type LbTargetGroupAttachment = import("./lbTargetGroupAttachment").LbTargetGroupAttachment;
export const LbTargetGroupAttachment: typeof import("./lbTargetGroupAttachment").LbTargetGroupAttachment = null as any;
utilities.lazyLoad(exports, ["LbTargetGroupAttachment"], () => require("./lbTargetGroupAttachment"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { LoadBalancerSslCertificateArgs, LoadBalancerSslCertificateState } from "./loadBalancerSslCertificate";
export type LoadBalancerSslCertificate = import("./loadBalancerSslCertificate").LoadBalancerSslCertificate;
export const LoadBalancerSslCertificate: typeof import("./loadBalancerSslCertificate").LoadBalancerSslCertificate = null as any;
utilities.lazyLoad(exports, ["LoadBalancerSslCertificate"], () => require("./loadBalancerSslCertificate"));

export { LoginKeyArgs, LoginKeyState } from "./loginKey";
export type LoginKey = import("./loginKey").LoginKey;
export const LoginKey: typeof import("./loginKey").LoginKey = null as any;
utilities.lazyLoad(exports, ["LoginKey"], () => require("./loginKey"));

export { MongodbArgs, MongodbState } from "./mongodb";
export type Mongodb = import("./mongodb").Mongodb;
export const Mongodb: typeof import("./mongodb").Mongodb = null as any;
utilities.lazyLoad(exports, ["Mongodb"], () => require("./mongodb"));

export { MssqlArgs, MssqlState } from "./mssql";
export type Mssql = import("./mssql").Mssql;
export const Mssql: typeof import("./mssql").Mssql = null as any;
utilities.lazyLoad(exports, ["Mssql"], () => require("./mssql"));

export { MysqlArgs, MysqlState } from "./mysql";
export type Mysql = import("./mysql").Mysql;
export const Mysql: typeof import("./mysql").Mysql = null as any;
utilities.lazyLoad(exports, ["Mysql"], () => require("./mysql"));

export { NasVolumeArgs, NasVolumeState } from "./nasVolume";
export type NasVolume = import("./nasVolume").NasVolume;
export const NasVolume: typeof import("./nasVolume").NasVolume = null as any;
utilities.lazyLoad(exports, ["NasVolume"], () => require("./nasVolume"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NetworkAclArgs, NetworkAclState } from "./networkAcl";
export type NetworkAcl = import("./networkAcl").NetworkAcl;
export const NetworkAcl: typeof import("./networkAcl").NetworkAcl = null as any;
utilities.lazyLoad(exports, ["NetworkAcl"], () => require("./networkAcl"));

export { NetworkAclDenyAllowGroupArgs, NetworkAclDenyAllowGroupState } from "./networkAclDenyAllowGroup";
export type NetworkAclDenyAllowGroup = import("./networkAclDenyAllowGroup").NetworkAclDenyAllowGroup;
export const NetworkAclDenyAllowGroup: typeof import("./networkAclDenyAllowGroup").NetworkAclDenyAllowGroup = null as any;
utilities.lazyLoad(exports, ["NetworkAclDenyAllowGroup"], () => require("./networkAclDenyAllowGroup"));

export { NetworkAclRuleArgs, NetworkAclRuleState } from "./networkAclRule";
export type NetworkAclRule = import("./networkAclRule").NetworkAclRule;
export const NetworkAclRule: typeof import("./networkAclRule").NetworkAclRule = null as any;
utilities.lazyLoad(exports, ["NetworkAclRule"], () => require("./networkAclRule"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NksClusterArgs, NksClusterState } from "./nksCluster";
export type NksCluster = import("./nksCluster").NksCluster;
export const NksCluster: typeof import("./nksCluster").NksCluster = null as any;
utilities.lazyLoad(exports, ["NksCluster"], () => require("./nksCluster"));

export { NksNodePoolArgs, NksNodePoolState } from "./nksNodePool";
export type NksNodePool = import("./nksNodePool").NksNodePool;
export const NksNodePool: typeof import("./nksNodePool").NksNodePool = null as any;
utilities.lazyLoad(exports, ["NksNodePool"], () => require("./nksNodePool"));

export { PlacementGroupArgs, PlacementGroupState } from "./placementGroup";
export type PlacementGroup = import("./placementGroup").PlacementGroup;
export const PlacementGroup: typeof import("./placementGroup").PlacementGroup = null as any;
utilities.lazyLoad(exports, ["PlacementGroup"], () => require("./placementGroup"));

export { PortForwardingRuleArgs, PortForwardingRuleState } from "./portForwardingRule";
export type PortForwardingRule = import("./portForwardingRule").PortForwardingRule;
export const PortForwardingRule: typeof import("./portForwardingRule").PortForwardingRule = null as any;
utilities.lazyLoad(exports, ["PortForwardingRule"], () => require("./portForwardingRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { RedisArgs, RedisState } from "./redis";
export type Redis = import("./redis").Redis;
export const Redis: typeof import("./redis").Redis = null as any;
utilities.lazyLoad(exports, ["Redis"], () => require("./redis"));

export { RedisConfigGroupArgs, RedisConfigGroupState } from "./redisConfigGroup";
export type RedisConfigGroup = import("./redisConfigGroup").RedisConfigGroup;
export const RedisConfigGroup: typeof import("./redisConfigGroup").RedisConfigGroup = null as any;
utilities.lazyLoad(exports, ["RedisConfigGroup"], () => require("./redisConfigGroup"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAssociationArgs, RouteTableAssociationState } from "./routeTableAssociation";
export type RouteTableAssociation = import("./routeTableAssociation").RouteTableAssociation;
export const RouteTableAssociation: typeof import("./routeTableAssociation").RouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { SesClusterArgs, SesClusterState } from "./sesCluster";
export type SesCluster = import("./sesCluster").SesCluster;
export const SesCluster: typeof import("./sesCluster").SesCluster = null as any;
utilities.lazyLoad(exports, ["SesCluster"], () => require("./sesCluster"));

export { SourcebuildProjectArgs, SourcebuildProjectState } from "./sourcebuildProject";
export type SourcebuildProject = import("./sourcebuildProject").SourcebuildProject;
export const SourcebuildProject: typeof import("./sourcebuildProject").SourcebuildProject = null as any;
utilities.lazyLoad(exports, ["SourcebuildProject"], () => require("./sourcebuildProject"));

export { SourcecommitRepositoryArgs, SourcecommitRepositoryState } from "./sourcecommitRepository";
export type SourcecommitRepository = import("./sourcecommitRepository").SourcecommitRepository;
export const SourcecommitRepository: typeof import("./sourcecommitRepository").SourcecommitRepository = null as any;
utilities.lazyLoad(exports, ["SourcecommitRepository"], () => require("./sourcecommitRepository"));

export { SourcedeployProjectArgs, SourcedeployProjectState } from "./sourcedeployProject";
export type SourcedeployProject = import("./sourcedeployProject").SourcedeployProject;
export const SourcedeployProject: typeof import("./sourcedeployProject").SourcedeployProject = null as any;
utilities.lazyLoad(exports, ["SourcedeployProject"], () => require("./sourcedeployProject"));

export { SourcedeployProjectStageArgs, SourcedeployProjectStageState } from "./sourcedeployProjectStage";
export type SourcedeployProjectStage = import("./sourcedeployProjectStage").SourcedeployProjectStage;
export const SourcedeployProjectStage: typeof import("./sourcedeployProjectStage").SourcedeployProjectStage = null as any;
utilities.lazyLoad(exports, ["SourcedeployProjectStage"], () => require("./sourcedeployProjectStage"));

export { SourcedeployProjectStageScenarioArgs, SourcedeployProjectStageScenarioState } from "./sourcedeployProjectStageScenario";
export type SourcedeployProjectStageScenario = import("./sourcedeployProjectStageScenario").SourcedeployProjectStageScenario;
export const SourcedeployProjectStageScenario: typeof import("./sourcedeployProjectStageScenario").SourcedeployProjectStageScenario = null as any;
utilities.lazyLoad(exports, ["SourcedeployProjectStageScenario"], () => require("./sourcedeployProjectStageScenario"));

export { SourcepipelineProjectArgs, SourcepipelineProjectState } from "./sourcepipelineProject";
export type SourcepipelineProject = import("./sourcepipelineProject").SourcepipelineProject;
export const SourcepipelineProject: typeof import("./sourcepipelineProject").SourcepipelineProject = null as any;
utilities.lazyLoad(exports, ["SourcepipelineProject"], () => require("./sourcepipelineProject"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcPeeringArgs, VpcPeeringState } from "./vpcPeering";
export type VpcPeering = import("./vpcPeering").VpcPeering;
export const VpcPeering: typeof import("./vpcPeering").VpcPeering = null as any;
utilities.lazyLoad(exports, ["VpcPeering"], () => require("./vpcPeering"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ncloud:index/accessControlGroup:AccessControlGroup":
                return new AccessControlGroup(name, <any>undefined, { urn })
            case "ncloud:index/accessControlGroupRule:AccessControlGroupRule":
                return new AccessControlGroupRule(name, <any>undefined, { urn })
            case "ncloud:index/autoScalingGroup:AutoScalingGroup":
                return new AutoScalingGroup(name, <any>undefined, { urn })
            case "ncloud:index/autoScalingPolicy:AutoScalingPolicy":
                return new AutoScalingPolicy(name, <any>undefined, { urn })
            case "ncloud:index/autoScalingSchedule:AutoScalingSchedule":
                return new AutoScalingSchedule(name, <any>undefined, { urn })
            case "ncloud:index/blockStorage:BlockStorage":
                return new BlockStorage(name, <any>undefined, { urn })
            case "ncloud:index/blockStorageSnapshot:BlockStorageSnapshot":
                return new BlockStorageSnapshot(name, <any>undefined, { urn })
            case "ncloud:index/cdssCluster:CdssCluster":
                return new CdssCluster(name, <any>undefined, { urn })
            case "ncloud:index/cdssConfigGroup:CdssConfigGroup":
                return new CdssConfigGroup(name, <any>undefined, { urn })
            case "ncloud:index/hadoop:Hadoop":
                return new Hadoop(name, <any>undefined, { urn })
            case "ncloud:index/initScript:InitScript":
                return new InitScript(name, <any>undefined, { urn })
            case "ncloud:index/launchConfiguration:LaunchConfiguration":
                return new LaunchConfiguration(name, <any>undefined, { urn })
            case "ncloud:index/lb:Lb":
                return new Lb(name, <any>undefined, { urn })
            case "ncloud:index/lbListener:LbListener":
                return new LbListener(name, <any>undefined, { urn })
            case "ncloud:index/lbTargetGroup:LbTargetGroup":
                return new LbTargetGroup(name, <any>undefined, { urn })
            case "ncloud:index/lbTargetGroupAttachment:LbTargetGroupAttachment":
                return new LbTargetGroupAttachment(name, <any>undefined, { urn })
            case "ncloud:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "ncloud:index/loadBalancerSslCertificate:LoadBalancerSslCertificate":
                return new LoadBalancerSslCertificate(name, <any>undefined, { urn })
            case "ncloud:index/loginKey:LoginKey":
                return new LoginKey(name, <any>undefined, { urn })
            case "ncloud:index/mongodb:Mongodb":
                return new Mongodb(name, <any>undefined, { urn })
            case "ncloud:index/mssql:Mssql":
                return new Mssql(name, <any>undefined, { urn })
            case "ncloud:index/mysql:Mysql":
                return new Mysql(name, <any>undefined, { urn })
            case "ncloud:index/nasVolume:NasVolume":
                return new NasVolume(name, <any>undefined, { urn })
            case "ncloud:index/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "ncloud:index/networkAcl:NetworkAcl":
                return new NetworkAcl(name, <any>undefined, { urn })
            case "ncloud:index/networkAclDenyAllowGroup:NetworkAclDenyAllowGroup":
                return new NetworkAclDenyAllowGroup(name, <any>undefined, { urn })
            case "ncloud:index/networkAclRule:NetworkAclRule":
                return new NetworkAclRule(name, <any>undefined, { urn })
            case "ncloud:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "ncloud:index/nksCluster:NksCluster":
                return new NksCluster(name, <any>undefined, { urn })
            case "ncloud:index/nksNodePool:NksNodePool":
                return new NksNodePool(name, <any>undefined, { urn })
            case "ncloud:index/placementGroup:PlacementGroup":
                return new PlacementGroup(name, <any>undefined, { urn })
            case "ncloud:index/portForwardingRule:PortForwardingRule":
                return new PortForwardingRule(name, <any>undefined, { urn })
            case "ncloud:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "ncloud:index/redis:Redis":
                return new Redis(name, <any>undefined, { urn })
            case "ncloud:index/redisConfigGroup:RedisConfigGroup":
                return new RedisConfigGroup(name, <any>undefined, { urn })
            case "ncloud:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "ncloud:index/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "ncloud:index/routeTableAssociation:RouteTableAssociation":
                return new RouteTableAssociation(name, <any>undefined, { urn })
            case "ncloud:index/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "ncloud:index/sesCluster:SesCluster":
                return new SesCluster(name, <any>undefined, { urn })
            case "ncloud:index/sourcebuildProject:SourcebuildProject":
                return new SourcebuildProject(name, <any>undefined, { urn })
            case "ncloud:index/sourcecommitRepository:SourcecommitRepository":
                return new SourcecommitRepository(name, <any>undefined, { urn })
            case "ncloud:index/sourcedeployProject:SourcedeployProject":
                return new SourcedeployProject(name, <any>undefined, { urn })
            case "ncloud:index/sourcedeployProjectStage:SourcedeployProjectStage":
                return new SourcedeployProjectStage(name, <any>undefined, { urn })
            case "ncloud:index/sourcedeployProjectStageScenario:SourcedeployProjectStageScenario":
                return new SourcedeployProjectStageScenario(name, <any>undefined, { urn })
            case "ncloud:index/sourcepipelineProject:SourcepipelineProject":
                return new SourcepipelineProject(name, <any>undefined, { urn })
            case "ncloud:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "ncloud:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "ncloud:index/vpcPeering:VpcPeering":
                return new VpcPeering(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ncloud", "index/accessControlGroup", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/accessControlGroupRule", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/autoScalingGroup", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/autoScalingPolicy", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/autoScalingSchedule", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/blockStorage", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/blockStorageSnapshot", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/cdssCluster", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/cdssConfigGroup", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/hadoop", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/initScript", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/launchConfiguration", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/lb", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/lbListener", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/lbTargetGroup", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/lbTargetGroupAttachment", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/loadBalancerSslCertificate", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/loginKey", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/mongodb", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/mssql", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/mysql", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/nasVolume", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/natGateway", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/networkAcl", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/networkAclDenyAllowGroup", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/networkAclRule", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/nksCluster", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/nksNodePool", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/placementGroup", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/portForwardingRule", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/redis", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/redisConfigGroup", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/route", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/routeTable", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/routeTableAssociation", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/server", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/sesCluster", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/sourcebuildProject", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/sourcecommitRepository", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/sourcedeployProject", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/sourcedeployProjectStage", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/sourcedeployProjectStageScenario", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/sourcepipelineProject", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/subnet", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/vpc", _module)
pulumi.runtime.registerResourceModule("ncloud", "index/vpcPeering", _module)
pulumi.runtime.registerResourcePackage("ncloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ncloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
