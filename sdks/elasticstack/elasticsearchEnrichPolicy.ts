// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticsearchEnrichPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ElasticsearchEnrichPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticsearchEnrichPolicyState, opts?: pulumi.CustomResourceOptions): ElasticsearchEnrichPolicy {
        return new ElasticsearchEnrichPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/elasticsearchEnrichPolicy:ElasticsearchEnrichPolicy';

    /**
     * Returns true if the given object is an instance of ElasticsearchEnrichPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticsearchEnrichPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticsearchEnrichPolicy.__pulumiType;
    }

    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.ElasticsearchEnrichPolicyElasticsearchConnection | undefined>;
    /**
     * Fields to add to matching incoming documents. These fields must be present in the source indices.
     */
    public readonly enrichFields!: pulumi.Output<string[]>;
    /**
     * Whether to call the execute API function in order to create the enrich index.
     */
    public readonly execute!: pulumi.Output<boolean | undefined>;
    /**
     * Array of one or more source indices used to create the enrich index.
     */
    public readonly indices!: pulumi.Output<string[]>;
    /**
     * Field in source indices used to match incoming documents.
     */
    public readonly matchField!: pulumi.Output<string>;
    /**
     * Name of the enrich policy to manage.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The type of enrich policy, can be one of geo_match, match, range.
     */
    public readonly policyType!: pulumi.Output<string>;
    /**
     * Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich
     * incoming documents. Defaults to a match_all query.
     */
    public readonly query!: pulumi.Output<string | undefined>;

    /**
     * Create a ElasticsearchEnrichPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticsearchEnrichPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticsearchEnrichPolicyArgs | ElasticsearchEnrichPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticsearchEnrichPolicyState | undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["enrichFields"] = state ? state.enrichFields : undefined;
            resourceInputs["execute"] = state ? state.execute : undefined;
            resourceInputs["indices"] = state ? state.indices : undefined;
            resourceInputs["matchField"] = state ? state.matchField : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
        } else {
            const args = argsOrState as ElasticsearchEnrichPolicyArgs | undefined;
            if ((!args || args.enrichFields === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enrichFields'");
            }
            if ((!args || args.indices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indices'");
            }
            if ((!args || args.matchField === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matchField'");
            }
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["enrichFields"] = args ? args.enrichFields : undefined;
            resourceInputs["execute"] = args ? args.execute : undefined;
            resourceInputs["indices"] = args ? args.indices : undefined;
            resourceInputs["matchField"] = args ? args.matchField : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticsearchEnrichPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticsearchEnrichPolicy resources.
 */
export interface ElasticsearchEnrichPolicyState {
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchEnrichPolicyElasticsearchConnection>;
    /**
     * Fields to add to matching incoming documents. These fields must be present in the source indices.
     */
    enrichFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to call the execute API function in order to create the enrich index.
     */
    execute?: pulumi.Input<boolean>;
    /**
     * Array of one or more source indices used to create the enrich index.
     */
    indices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Field in source indices used to match incoming documents.
     */
    matchField?: pulumi.Input<string>;
    /**
     * Name of the enrich policy to manage.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of enrich policy, can be one of geo_match, match, range.
     */
    policyType?: pulumi.Input<string>;
    /**
     * Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich
     * incoming documents. Defaults to a match_all query.
     */
    query?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElasticsearchEnrichPolicy resource.
 */
export interface ElasticsearchEnrichPolicyArgs {
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchEnrichPolicyElasticsearchConnection>;
    /**
     * Fields to add to matching incoming documents. These fields must be present in the source indices.
     */
    enrichFields: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to call the execute API function in order to create the enrich index.
     */
    execute?: pulumi.Input<boolean>;
    /**
     * Array of one or more source indices used to create the enrich index.
     */
    indices: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Field in source indices used to match incoming documents.
     */
    matchField: pulumi.Input<string>;
    /**
     * Name of the enrich policy to manage.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of enrich policy, can be one of geo_match, match, range.
     */
    policyType: pulumi.Input<string>;
    /**
     * Query used to filter documents in the enrich index. The policy only uses documents matching this query to enrich
     * incoming documents. Defaults to a match_all query.
     */
    query?: pulumi.Input<string>;
}
