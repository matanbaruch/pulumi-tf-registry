// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ElasticsearchWatch extends pulumi.CustomResource {
    /**
     * Get an existing ElasticsearchWatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticsearchWatchState, opts?: pulumi.CustomResourceOptions): ElasticsearchWatch {
        return new ElasticsearchWatch(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/elasticsearchWatch:ElasticsearchWatch';

    /**
     * Returns true if the given object is an instance of ElasticsearchWatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticsearchWatch {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticsearchWatch.__pulumiType;
    }

    /**
     * The list of actions that will be run if the condition matches.
     */
    public readonly actions!: pulumi.Output<string | undefined>;
    /**
     * Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active
     * by default.
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * The condition that defines if the actions should be run.
     */
    public readonly condition!: pulumi.Output<string | undefined>;
    /**
     * The input that defines the input that loads the data for the watch.
     */
    public readonly input!: pulumi.Output<string | undefined>;
    /**
     * Metadata json that will be copied into the history entries.
     */
    public readonly metadata!: pulumi.Output<string | undefined>;
    /**
     * Minimum time in milliseconds between actions being run. Defaults to 5000.
     */
    public readonly throttlePeriodInMillis!: pulumi.Output<number | undefined>;
    /**
     * Processes the watch payload to prepare it for the watch actions.
     */
    public readonly transform!: pulumi.Output<string | undefined>;
    /**
     * The trigger that defines when the watch should run.
     */
    public readonly trigger!: pulumi.Output<string>;
    /**
     * Identifier for the watch.
     */
    public readonly watchId!: pulumi.Output<string>;

    /**
     * Create a ElasticsearchWatch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticsearchWatchArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticsearchWatchArgs | ElasticsearchWatchState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticsearchWatchState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["input"] = state ? state.input : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["throttlePeriodInMillis"] = state ? state.throttlePeriodInMillis : undefined;
            resourceInputs["transform"] = state ? state.transform : undefined;
            resourceInputs["trigger"] = state ? state.trigger : undefined;
            resourceInputs["watchId"] = state ? state.watchId : undefined;
        } else {
            const args = argsOrState as ElasticsearchWatchArgs | undefined;
            if ((!args || args.trigger === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trigger'");
            }
            if ((!args || args.watchId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'watchId'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["input"] = args ? args.input : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["throttlePeriodInMillis"] = args ? args.throttlePeriodInMillis : undefined;
            resourceInputs["transform"] = args ? args.transform : undefined;
            resourceInputs["trigger"] = args ? args.trigger : undefined;
            resourceInputs["watchId"] = args ? args.watchId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticsearchWatch.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticsearchWatch resources.
 */
export interface ElasticsearchWatchState {
    /**
     * The list of actions that will be run if the condition matches.
     */
    actions?: pulumi.Input<string>;
    /**
     * Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active
     * by default.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The condition that defines if the actions should be run.
     */
    condition?: pulumi.Input<string>;
    /**
     * The input that defines the input that loads the data for the watch.
     */
    input?: pulumi.Input<string>;
    /**
     * Metadata json that will be copied into the history entries.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Minimum time in milliseconds between actions being run. Defaults to 5000.
     */
    throttlePeriodInMillis?: pulumi.Input<number>;
    /**
     * Processes the watch payload to prepare it for the watch actions.
     */
    transform?: pulumi.Input<string>;
    /**
     * The trigger that defines when the watch should run.
     */
    trigger?: pulumi.Input<string>;
    /**
     * Identifier for the watch.
     */
    watchId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElasticsearchWatch resource.
 */
export interface ElasticsearchWatchArgs {
    /**
     * The list of actions that will be run if the condition matches.
     */
    actions?: pulumi.Input<string>;
    /**
     * Defines whether the watch is active or inactive by default. The default value is true, which means the watch is active
     * by default.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The condition that defines if the actions should be run.
     */
    condition?: pulumi.Input<string>;
    /**
     * The input that defines the input that loads the data for the watch.
     */
    input?: pulumi.Input<string>;
    /**
     * Metadata json that will be copied into the history entries.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Minimum time in milliseconds between actions being run. Defaults to 5000.
     */
    throttlePeriodInMillis?: pulumi.Input<number>;
    /**
     * Processes the watch payload to prepare it for the watch actions.
     */
    transform?: pulumi.Input<string>;
    /**
     * The trigger that defines when the watch should run.
     */
    trigger: pulumi.Input<string>;
    /**
     * Identifier for the watch.
     */
    watchId: pulumi.Input<string>;
}
