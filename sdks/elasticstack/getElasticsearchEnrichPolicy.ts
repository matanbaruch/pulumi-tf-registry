// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getElasticsearchEnrichPolicy(args: GetElasticsearchEnrichPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticsearchEnrichPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getElasticsearchEnrichPolicy:getElasticsearchEnrichPolicy", {
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getElasticsearchEnrichPolicy.
 */
export interface GetElasticsearchEnrichPolicyArgs {
    name: string;
}

/**
 * A collection of values returned by getElasticsearchEnrichPolicy.
 */
export interface GetElasticsearchEnrichPolicyResult {
    readonly enrichFields: string[];
    readonly id: string;
    readonly indices: string[];
    readonly matchField: string;
    readonly name: string;
    readonly policyType: string;
    readonly query: string;
}
export function getElasticsearchEnrichPolicyOutput(args: GetElasticsearchEnrichPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticsearchEnrichPolicyResult> {
    return pulumi.output(args).apply((a: any) => getElasticsearchEnrichPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getElasticsearchEnrichPolicy.
 */
export interface GetElasticsearchEnrichPolicyOutputArgs {
    name: pulumi.Input<string>;
}
