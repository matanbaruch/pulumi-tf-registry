// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticsearchSecurityApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ElasticsearchSecurityApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticsearchSecurityApiKeyState, opts?: pulumi.CustomResourceOptions): ElasticsearchSecurityApiKey {
        return new ElasticsearchSecurityApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/elasticsearchSecurityApiKey:ElasticsearchSecurityApiKey';

    /**
     * Returns true if the given object is an instance of ElasticsearchSecurityApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticsearchSecurityApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticsearchSecurityApiKey.__pulumiType;
    }

    /**
     * Generated API Key.
     */
    public /*out*/ readonly apiKey!: pulumi.Output<string>;
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.ElasticsearchSecurityApiKeyElasticsearchConnection | undefined>;
    /**
     * API key credentials which is the Base64-encoding of the UTF-8 representation of the id and api_key joined by a colon
     * (:).
     */
    public /*out*/ readonly encoded!: pulumi.Output<string>;
    /**
     * Expiration time for the API key. By default, API keys never expire.
     */
    public readonly expiration!: pulumi.Output<string | undefined>;
    /**
     * Expiration time in milliseconds for the API key. By default, API keys never expire.
     */
    public /*out*/ readonly expirationTimestamp!: pulumi.Output<number>;
    /**
     * Arbitrary metadata that you want to associate with the API key.
     */
    public readonly metadata!: pulumi.Output<string>;
    /**
     * Specifies the name for this API key.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Role descriptors for this API key.
     */
    public readonly roleDescriptors!: pulumi.Output<string | undefined>;

    /**
     * Create a ElasticsearchSecurityApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ElasticsearchSecurityApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticsearchSecurityApiKeyArgs | ElasticsearchSecurityApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticsearchSecurityApiKeyState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["encoded"] = state ? state.encoded : undefined;
            resourceInputs["expiration"] = state ? state.expiration : undefined;
            resourceInputs["expirationTimestamp"] = state ? state.expirationTimestamp : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleDescriptors"] = state ? state.roleDescriptors : undefined;
        } else {
            const args = argsOrState as ElasticsearchSecurityApiKeyArgs | undefined;
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["expiration"] = args ? args.expiration : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleDescriptors"] = args ? args.roleDescriptors : undefined;
            resourceInputs["apiKey"] = undefined /*out*/;
            resourceInputs["encoded"] = undefined /*out*/;
            resourceInputs["expirationTimestamp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "encoded"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ElasticsearchSecurityApiKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticsearchSecurityApiKey resources.
 */
export interface ElasticsearchSecurityApiKeyState {
    /**
     * Generated API Key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchSecurityApiKeyElasticsearchConnection>;
    /**
     * API key credentials which is the Base64-encoding of the UTF-8 representation of the id and api_key joined by a colon
     * (:).
     */
    encoded?: pulumi.Input<string>;
    /**
     * Expiration time for the API key. By default, API keys never expire.
     */
    expiration?: pulumi.Input<string>;
    /**
     * Expiration time in milliseconds for the API key. By default, API keys never expire.
     */
    expirationTimestamp?: pulumi.Input<number>;
    /**
     * Arbitrary metadata that you want to associate with the API key.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Specifies the name for this API key.
     */
    name?: pulumi.Input<string>;
    /**
     * Role descriptors for this API key.
     */
    roleDescriptors?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElasticsearchSecurityApiKey resource.
 */
export interface ElasticsearchSecurityApiKeyArgs {
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchSecurityApiKeyElasticsearchConnection>;
    /**
     * Expiration time for the API key. By default, API keys never expire.
     */
    expiration?: pulumi.Input<string>;
    /**
     * Arbitrary metadata that you want to associate with the API key.
     */
    metadata?: pulumi.Input<string>;
    /**
     * Specifies the name for this API key.
     */
    name?: pulumi.Input<string>;
    /**
     * Role descriptors for this API key.
     */
    roleDescriptors?: pulumi.Input<string>;
}
