// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getElasticsearchIngestProcessorCommunityId(args?: GetElasticsearchIngestProcessorCommunityIdArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticsearchIngestProcessorCommunityIdResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getElasticsearchIngestProcessorCommunityId:getElasticsearchIngestProcessorCommunityId", {
        "description": args.description,
        "destinationIp": args.destinationIp,
        "destinationPort": args.destinationPort,
        "ianaNumber": args.ianaNumber,
        "icmpCode": args.icmpCode,
        "icmpType": args.icmpType,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "ignoreMissing": args.ignoreMissing,
        "onFailures": args.onFailures,
        "seed": args.seed,
        "sourceIp": args.sourceIp,
        "sourcePort": args.sourcePort,
        "tag": args.tag,
        "targetField": args.targetField,
        "transport": args.transport,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getElasticsearchIngestProcessorCommunityId.
 */
export interface GetElasticsearchIngestProcessorCommunityIdArgs {
    description?: string;
    destinationIp?: string;
    destinationPort?: number;
    ianaNumber?: number;
    icmpCode?: number;
    icmpType?: number;
    if?: string;
    ignoreFailure?: boolean;
    ignoreMissing?: boolean;
    onFailures?: string[];
    seed?: number;
    sourceIp?: string;
    sourcePort?: number;
    tag?: string;
    targetField?: string;
    transport?: string;
}

/**
 * A collection of values returned by getElasticsearchIngestProcessorCommunityId.
 */
export interface GetElasticsearchIngestProcessorCommunityIdResult {
    readonly description?: string;
    readonly destinationIp?: string;
    readonly destinationPort?: number;
    readonly ianaNumber?: number;
    readonly icmpCode?: number;
    readonly icmpType?: number;
    readonly id: string;
    readonly if?: string;
    readonly ignoreFailure?: boolean;
    readonly ignoreMissing?: boolean;
    readonly json: string;
    readonly onFailures?: string[];
    readonly seed?: number;
    readonly sourceIp?: string;
    readonly sourcePort?: number;
    readonly tag?: string;
    readonly targetField?: string;
    readonly transport?: string;
}
export function getElasticsearchIngestProcessorCommunityIdOutput(args?: GetElasticsearchIngestProcessorCommunityIdOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticsearchIngestProcessorCommunityIdResult> {
    return pulumi.output(args).apply((a: any) => getElasticsearchIngestProcessorCommunityId(a, opts))
}

/**
 * A collection of arguments for invoking getElasticsearchIngestProcessorCommunityId.
 */
export interface GetElasticsearchIngestProcessorCommunityIdOutputArgs {
    description?: pulumi.Input<string>;
    destinationIp?: pulumi.Input<string>;
    destinationPort?: pulumi.Input<number>;
    ianaNumber?: pulumi.Input<number>;
    icmpCode?: pulumi.Input<number>;
    icmpType?: pulumi.Input<number>;
    if?: pulumi.Input<string>;
    ignoreFailure?: pulumi.Input<boolean>;
    ignoreMissing?: pulumi.Input<boolean>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    seed?: pulumi.Input<number>;
    sourceIp?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<number>;
    tag?: pulumi.Input<string>;
    targetField?: pulumi.Input<string>;
    transport?: pulumi.Input<string>;
}
