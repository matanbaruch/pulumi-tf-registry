// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FleetIntegrationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FleetIntegrationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FleetIntegrationPolicyState, opts?: pulumi.CustomResourceOptions): FleetIntegrationPolicy {
        return new FleetIntegrationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/fleetIntegrationPolicy:FleetIntegrationPolicy';

    /**
     * Returns true if the given object is an instance of FleetIntegrationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FleetIntegrationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FleetIntegrationPolicy.__pulumiType;
    }

    /**
     * ID of the agent policy.
     */
    public readonly agentPolicyId!: pulumi.Output<string>;
    /**
     * The description of the integration policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable the integration policy.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Force operations, such as creation and deletion, to occur.
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly inputs!: pulumi.Output<outputs.FleetIntegrationPolicyInput[] | undefined>;
    /**
     * The name of the integration package.
     */
    public readonly integrationName!: pulumi.Output<string>;
    /**
     * The version of the integration package.
     */
    public readonly integrationVersion!: pulumi.Output<string>;
    /**
     * The name of the integration policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace of the integration policy.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Unique identifier of the integration policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * Integration-level variables as JSON.
     */
    public readonly varsJson!: pulumi.Output<string>;

    /**
     * Create a FleetIntegrationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetIntegrationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FleetIntegrationPolicyArgs | FleetIntegrationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FleetIntegrationPolicyState | undefined;
            resourceInputs["agentPolicyId"] = state ? state.agentPolicyId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["integrationName"] = state ? state.integrationName : undefined;
            resourceInputs["integrationVersion"] = state ? state.integrationVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["varsJson"] = state ? state.varsJson : undefined;
        } else {
            const args = argsOrState as FleetIntegrationPolicyArgs | undefined;
            if ((!args || args.agentPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentPolicyId'");
            }
            if ((!args || args.integrationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationName'");
            }
            if ((!args || args.integrationVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationVersion'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["agentPolicyId"] = args ? args.agentPolicyId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["integrationName"] = args ? args.integrationName : undefined;
            resourceInputs["integrationVersion"] = args ? args.integrationVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["varsJson"] = args?.varsJson ? pulumi.secret(args.varsJson) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["varsJson"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(FleetIntegrationPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FleetIntegrationPolicy resources.
 */
export interface FleetIntegrationPolicyState {
    /**
     * ID of the agent policy.
     */
    agentPolicyId?: pulumi.Input<string>;
    /**
     * The description of the integration policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable the integration policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Force operations, such as creation and deletion, to occur.
     */
    force?: pulumi.Input<boolean>;
    inputs?: pulumi.Input<pulumi.Input<inputs.FleetIntegrationPolicyInput>[]>;
    /**
     * The name of the integration package.
     */
    integrationName?: pulumi.Input<string>;
    /**
     * The version of the integration package.
     */
    integrationVersion?: pulumi.Input<string>;
    /**
     * The name of the integration policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the integration policy.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier of the integration policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Integration-level variables as JSON.
     */
    varsJson?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FleetIntegrationPolicy resource.
 */
export interface FleetIntegrationPolicyArgs {
    /**
     * ID of the agent policy.
     */
    agentPolicyId: pulumi.Input<string>;
    /**
     * The description of the integration policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Enable the integration policy.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Force operations, such as creation and deletion, to occur.
     */
    force?: pulumi.Input<boolean>;
    inputs?: pulumi.Input<pulumi.Input<inputs.FleetIntegrationPolicyInput>[]>;
    /**
     * The name of the integration package.
     */
    integrationName: pulumi.Input<string>;
    /**
     * The version of the integration package.
     */
    integrationVersion: pulumi.Input<string>;
    /**
     * The name of the integration policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the integration policy.
     */
    namespace: pulumi.Input<string>;
    /**
     * Unique identifier of the integration policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Integration-level variables as JSON.
     */
    varsJson?: pulumi.Input<string>;
}
