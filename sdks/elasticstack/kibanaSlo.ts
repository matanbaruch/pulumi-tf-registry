// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KibanaSlo extends pulumi.CustomResource {
    /**
     * Get an existing KibanaSlo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KibanaSloState, opts?: pulumi.CustomResourceOptions): KibanaSlo {
        return new KibanaSlo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/kibanaSlo:KibanaSlo';

    /**
     * Returns true if the given object is an instance of KibanaSlo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KibanaSlo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KibanaSlo.__pulumiType;
    }

    public readonly apmAvailabilityIndicator!: pulumi.Output<outputs.KibanaSloApmAvailabilityIndicator | undefined>;
    public readonly apmLatencyIndicator!: pulumi.Output<outputs.KibanaSloApmLatencyIndicator | undefined>;
    /**
     * An `occurrences` budgeting method uses the number of good and total events during the time window. A `timeslices`
     * budgeting method uses the number of good slices and total slices during the time window. A slice is an arbitrary time
     * window (smaller than the overall SLO time window) that is either considered good or bad, calculated from the timeslice
     * threshold and the ratio of good over total events that happened during the slice window. A budgeting method is required
     * and must be either occurrences or timeslices.
     */
    public readonly budgetingMethod!: pulumi.Output<string>;
    /**
     * A description for the SLO.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Optional group by field to use to generate an SLO per distinct value.
     */
    public readonly groupBy!: pulumi.Output<string | undefined>;
    public readonly histogramCustomIndicator!: pulumi.Output<outputs.KibanaSloHistogramCustomIndicator | undefined>;
    public readonly kqlCustomIndicator!: pulumi.Output<outputs.KibanaSloKqlCustomIndicator | undefined>;
    public readonly metricCustomIndicator!: pulumi.Output<outputs.KibanaSloMetricCustomIndicator | undefined>;
    /**
     * The name of the SLO.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The target objective is the value the SLO needs to meet during the time window. If a timeslices budgeting method is
     * used, we also need to define the timesliceTarget which can be different than the overall SLO target.
     */
    public readonly objective!: pulumi.Output<outputs.KibanaSloObjective>;
    /**
     * The default settings should be sufficient for most users, but if needed, these properties can be overwritten.
     */
    public readonly settings!: pulumi.Output<outputs.KibanaSloSettings | undefined>;
    /**
     * An ID (8 and 36 characters). If omitted, a UUIDv1 will be generated server-side.
     */
    public readonly sloId!: pulumi.Output<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    public readonly spaceId!: pulumi.Output<string | undefined>;
    /**
     * The tags for the SLO.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Currently support `calendarAligned` and `rolling` time windows. Any duration greater than 1 day can be used: days,
     * weeks, months, quarters, years. Rolling time window requires a duration, e.g. `1w` for one week, and type: `rolling`.
     * SLOs defined with such time window, will only consider the SLI data from the last duration period as a moving window.
     * Calendar aligned time window requires a duration, limited to `1M` for monthly or `1w` for weekly, and type:
     * `calendarAligned`.
     */
    public readonly timeWindow!: pulumi.Output<outputs.KibanaSloTimeWindow>;

    /**
     * Create a KibanaSlo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KibanaSloArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KibanaSloArgs | KibanaSloState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KibanaSloState | undefined;
            resourceInputs["apmAvailabilityIndicator"] = state ? state.apmAvailabilityIndicator : undefined;
            resourceInputs["apmLatencyIndicator"] = state ? state.apmLatencyIndicator : undefined;
            resourceInputs["budgetingMethod"] = state ? state.budgetingMethod : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groupBy"] = state ? state.groupBy : undefined;
            resourceInputs["histogramCustomIndicator"] = state ? state.histogramCustomIndicator : undefined;
            resourceInputs["kqlCustomIndicator"] = state ? state.kqlCustomIndicator : undefined;
            resourceInputs["metricCustomIndicator"] = state ? state.metricCustomIndicator : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objective"] = state ? state.objective : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["sloId"] = state ? state.sloId : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeWindow"] = state ? state.timeWindow : undefined;
        } else {
            const args = argsOrState as KibanaSloArgs | undefined;
            if ((!args || args.budgetingMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'budgetingMethod'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.objective === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objective'");
            }
            if ((!args || args.timeWindow === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeWindow'");
            }
            resourceInputs["apmAvailabilityIndicator"] = args ? args.apmAvailabilityIndicator : undefined;
            resourceInputs["apmLatencyIndicator"] = args ? args.apmLatencyIndicator : undefined;
            resourceInputs["budgetingMethod"] = args ? args.budgetingMethod : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["groupBy"] = args ? args.groupBy : undefined;
            resourceInputs["histogramCustomIndicator"] = args ? args.histogramCustomIndicator : undefined;
            resourceInputs["kqlCustomIndicator"] = args ? args.kqlCustomIndicator : undefined;
            resourceInputs["metricCustomIndicator"] = args ? args.metricCustomIndicator : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objective"] = args ? args.objective : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["sloId"] = args ? args.sloId : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeWindow"] = args ? args.timeWindow : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KibanaSlo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KibanaSlo resources.
 */
export interface KibanaSloState {
    apmAvailabilityIndicator?: pulumi.Input<inputs.KibanaSloApmAvailabilityIndicator>;
    apmLatencyIndicator?: pulumi.Input<inputs.KibanaSloApmLatencyIndicator>;
    /**
     * An `occurrences` budgeting method uses the number of good and total events during the time window. A `timeslices`
     * budgeting method uses the number of good slices and total slices during the time window. A slice is an arbitrary time
     * window (smaller than the overall SLO time window) that is either considered good or bad, calculated from the timeslice
     * threshold and the ratio of good over total events that happened during the slice window. A budgeting method is required
     * and must be either occurrences or timeslices.
     */
    budgetingMethod?: pulumi.Input<string>;
    /**
     * A description for the SLO.
     */
    description?: pulumi.Input<string>;
    /**
     * Optional group by field to use to generate an SLO per distinct value.
     */
    groupBy?: pulumi.Input<string>;
    histogramCustomIndicator?: pulumi.Input<inputs.KibanaSloHistogramCustomIndicator>;
    kqlCustomIndicator?: pulumi.Input<inputs.KibanaSloKqlCustomIndicator>;
    metricCustomIndicator?: pulumi.Input<inputs.KibanaSloMetricCustomIndicator>;
    /**
     * The name of the SLO.
     */
    name?: pulumi.Input<string>;
    /**
     * The target objective is the value the SLO needs to meet during the time window. If a timeslices budgeting method is
     * used, we also need to define the timesliceTarget which can be different than the overall SLO target.
     */
    objective?: pulumi.Input<inputs.KibanaSloObjective>;
    /**
     * The default settings should be sufficient for most users, but if needed, these properties can be overwritten.
     */
    settings?: pulumi.Input<inputs.KibanaSloSettings>;
    /**
     * An ID (8 and 36 characters). If omitted, a UUIDv1 will be generated server-side.
     */
    sloId?: pulumi.Input<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The tags for the SLO.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Currently support `calendarAligned` and `rolling` time windows. Any duration greater than 1 day can be used: days,
     * weeks, months, quarters, years. Rolling time window requires a duration, e.g. `1w` for one week, and type: `rolling`.
     * SLOs defined with such time window, will only consider the SLI data from the last duration period as a moving window.
     * Calendar aligned time window requires a duration, limited to `1M` for monthly or `1w` for weekly, and type:
     * `calendarAligned`.
     */
    timeWindow?: pulumi.Input<inputs.KibanaSloTimeWindow>;
}

/**
 * The set of arguments for constructing a KibanaSlo resource.
 */
export interface KibanaSloArgs {
    apmAvailabilityIndicator?: pulumi.Input<inputs.KibanaSloApmAvailabilityIndicator>;
    apmLatencyIndicator?: pulumi.Input<inputs.KibanaSloApmLatencyIndicator>;
    /**
     * An `occurrences` budgeting method uses the number of good and total events during the time window. A `timeslices`
     * budgeting method uses the number of good slices and total slices during the time window. A slice is an arbitrary time
     * window (smaller than the overall SLO time window) that is either considered good or bad, calculated from the timeslice
     * threshold and the ratio of good over total events that happened during the slice window. A budgeting method is required
     * and must be either occurrences or timeslices.
     */
    budgetingMethod: pulumi.Input<string>;
    /**
     * A description for the SLO.
     */
    description: pulumi.Input<string>;
    /**
     * Optional group by field to use to generate an SLO per distinct value.
     */
    groupBy?: pulumi.Input<string>;
    histogramCustomIndicator?: pulumi.Input<inputs.KibanaSloHistogramCustomIndicator>;
    kqlCustomIndicator?: pulumi.Input<inputs.KibanaSloKqlCustomIndicator>;
    metricCustomIndicator?: pulumi.Input<inputs.KibanaSloMetricCustomIndicator>;
    /**
     * The name of the SLO.
     */
    name?: pulumi.Input<string>;
    /**
     * The target objective is the value the SLO needs to meet during the time window. If a timeslices budgeting method is
     * used, we also need to define the timesliceTarget which can be different than the overall SLO target.
     */
    objective: pulumi.Input<inputs.KibanaSloObjective>;
    /**
     * The default settings should be sufficient for most users, but if needed, these properties can be overwritten.
     */
    settings?: pulumi.Input<inputs.KibanaSloSettings>;
    /**
     * An ID (8 and 36 characters). If omitted, a UUIDv1 will be generated server-side.
     */
    sloId?: pulumi.Input<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * The tags for the SLO.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Currently support `calendarAligned` and `rolling` time windows. Any duration greater than 1 day can be used: days,
     * weeks, months, quarters, years. Rolling time window requires a duration, e.g. `1w` for one week, and type: `rolling`.
     * SLOs defined with such time window, will only consider the SLI data from the last duration period as a moving window.
     * Calendar aligned time window requires a duration, limited to `1M` for monthly or `1w` for weekly, and type:
     * `calendarAligned`.
     */
    timeWindow: pulumi.Input<inputs.KibanaSloTimeWindow>;
}
