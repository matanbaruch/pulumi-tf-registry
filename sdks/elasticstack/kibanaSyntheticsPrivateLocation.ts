// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KibanaSyntheticsPrivateLocation extends pulumi.CustomResource {
    /**
     * Get an existing KibanaSyntheticsPrivateLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KibanaSyntheticsPrivateLocationState, opts?: pulumi.CustomResourceOptions): KibanaSyntheticsPrivateLocation {
        return new KibanaSyntheticsPrivateLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/kibanaSyntheticsPrivateLocation:KibanaSyntheticsPrivateLocation';

    /**
     * Returns true if the given object is an instance of KibanaSyntheticsPrivateLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KibanaSyntheticsPrivateLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KibanaSyntheticsPrivateLocation.__pulumiType;
    }

    /**
     * The ID of the agent policy associated with the private location. To create a private location for synthetics monitor you
     * need to create an agent policy in fleet and use its agentPolicyId
     */
    public readonly agentPolicyId!: pulumi.Output<string>;
    /**
     * Geographic coordinates (WGS84) for the location
     */
    public readonly geo!: pulumi.Output<outputs.KibanaSyntheticsPrivateLocationGeo | undefined>;
    /**
     * A label for the private location, used as unique identifier
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    public readonly spaceId!: pulumi.Output<string | undefined>;
    /**
     * An array of tags to categorize the private location.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a KibanaSyntheticsPrivateLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KibanaSyntheticsPrivateLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KibanaSyntheticsPrivateLocationArgs | KibanaSyntheticsPrivateLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KibanaSyntheticsPrivateLocationState | undefined;
            resourceInputs["agentPolicyId"] = state ? state.agentPolicyId : undefined;
            resourceInputs["geo"] = state ? state.geo : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KibanaSyntheticsPrivateLocationArgs | undefined;
            if ((!args || args.agentPolicyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentPolicyId'");
            }
            if ((!args || args.label === undefined) && !opts.urn) {
                throw new Error("Missing required property 'label'");
            }
            resourceInputs["agentPolicyId"] = args ? args.agentPolicyId : undefined;
            resourceInputs["geo"] = args ? args.geo : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KibanaSyntheticsPrivateLocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KibanaSyntheticsPrivateLocation resources.
 */
export interface KibanaSyntheticsPrivateLocationState {
    /**
     * The ID of the agent policy associated with the private location. To create a private location for synthetics monitor you
     * need to create an agent policy in fleet and use its agentPolicyId
     */
    agentPolicyId?: pulumi.Input<string>;
    /**
     * Geographic coordinates (WGS84) for the location
     */
    geo?: pulumi.Input<inputs.KibanaSyntheticsPrivateLocationGeo>;
    /**
     * A label for the private location, used as unique identifier
     */
    label?: pulumi.Input<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * An array of tags to categorize the private location.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a KibanaSyntheticsPrivateLocation resource.
 */
export interface KibanaSyntheticsPrivateLocationArgs {
    /**
     * The ID of the agent policy associated with the private location. To create a private location for synthetics monitor you
     * need to create an agent policy in fleet and use its agentPolicyId
     */
    agentPolicyId: pulumi.Input<string>;
    /**
     * Geographic coordinates (WGS84) for the location
     */
    geo?: pulumi.Input<inputs.KibanaSyntheticsPrivateLocationGeo>;
    /**
     * A label for the private location, used as unique identifier
     */
    label: pulumi.Input<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * An array of tags to categorize the private location.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
