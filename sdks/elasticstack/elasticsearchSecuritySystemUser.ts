// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticsearchSecuritySystemUser extends pulumi.CustomResource {
    /**
     * Get an existing ElasticsearchSecuritySystemUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticsearchSecuritySystemUserState, opts?: pulumi.CustomResourceOptions): ElasticsearchSecuritySystemUser {
        return new ElasticsearchSecuritySystemUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/elasticsearchSecuritySystemUser:ElasticsearchSecuritySystemUser';

    /**
     * Returns true if the given object is an instance of ElasticsearchSecuritySystemUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticsearchSecuritySystemUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticsearchSecuritySystemUser.__pulumiType;
    }

    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.ElasticsearchSecuritySystemUserElasticsearchConnection | undefined>;
    /**
     * Specifies whether the user is enabled. The default value is true.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The user’s password. Passwords must be at least 6 characters long.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for
     * password storage (see
     * https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
     */
    public readonly passwordHash!: pulumi.Output<string | undefined>;
    /**
     * An identifier for the system user (see
     * https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ElasticsearchSecuritySystemUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElasticsearchSecuritySystemUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticsearchSecuritySystemUserArgs | ElasticsearchSecuritySystemUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticsearchSecuritySystemUserState | undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordHash"] = state ? state.passwordHash : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ElasticsearchSecuritySystemUserArgs | undefined;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordHash"] = args?.passwordHash ? pulumi.secret(args.passwordHash) : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "passwordHash"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ElasticsearchSecuritySystemUser.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticsearchSecuritySystemUser resources.
 */
export interface ElasticsearchSecuritySystemUserState {
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchSecuritySystemUserElasticsearchConnection>;
    /**
     * Specifies whether the user is enabled. The default value is true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The user’s password. Passwords must be at least 6 characters long.
     */
    password?: pulumi.Input<string>;
    /**
     * A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for
     * password storage (see
     * https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
     */
    passwordHash?: pulumi.Input<string>;
    /**
     * An identifier for the system user (see
     * https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElasticsearchSecuritySystemUser resource.
 */
export interface ElasticsearchSecuritySystemUserArgs {
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchSecuritySystemUserElasticsearchConnection>;
    /**
     * Specifies whether the user is enabled. The default value is true.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The user’s password. Passwords must be at least 6 characters long.
     */
    password?: pulumi.Input<string>;
    /**
     * A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for
     * password storage (see
     * https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
     */
    passwordHash?: pulumi.Input<string>;
    /**
     * An identifier for the system user (see
     * https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html).
     */
    username: pulumi.Input<string>;
}
