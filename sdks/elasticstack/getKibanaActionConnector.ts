// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getKibanaActionConnector(args: GetKibanaActionConnectorArgs, opts?: pulumi.InvokeOptions): Promise<GetKibanaActionConnectorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getKibanaActionConnector:getKibanaActionConnector", {
        "connectorTypeId": args.connectorTypeId,
        "id": args.id,
        "name": args.name,
        "spaceId": args.spaceId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKibanaActionConnector.
 */
export interface GetKibanaActionConnectorArgs {
    connectorTypeId?: string;
    id?: string;
    name: string;
    spaceId?: string;
}

/**
 * A collection of values returned by getKibanaActionConnector.
 */
export interface GetKibanaActionConnectorResult {
    readonly config: string;
    readonly connectorId: string;
    readonly connectorTypeId?: string;
    readonly id: string;
    readonly isDeprecated: boolean;
    readonly isMissingSecrets: boolean;
    readonly isPreconfigured: boolean;
    readonly name: string;
    readonly spaceId?: string;
}
export function getKibanaActionConnectorOutput(args: GetKibanaActionConnectorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKibanaActionConnectorResult> {
    return pulumi.output(args).apply((a: any) => getKibanaActionConnector(a, opts))
}

/**
 * A collection of arguments for invoking getKibanaActionConnector.
 */
export interface GetKibanaActionConnectorOutputArgs {
    connectorTypeId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    spaceId?: pulumi.Input<string>;
}
