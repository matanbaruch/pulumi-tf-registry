// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KibanaSyntheticsMonitor extends pulumi.CustomResource {
    /**
     * Get an existing KibanaSyntheticsMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KibanaSyntheticsMonitorState, opts?: pulumi.CustomResourceOptions): KibanaSyntheticsMonitor {
        return new KibanaSyntheticsMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/kibanaSyntheticsMonitor:KibanaSyntheticsMonitor';

    /**
     * Returns true if the given object is an instance of KibanaSyntheticsMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KibanaSyntheticsMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KibanaSyntheticsMonitor.__pulumiType;
    }

    /**
     * Alert configuration. Default: `{ status: { enabled: true }, tls: { enabled: true } }`.
     */
    public readonly alert!: pulumi.Output<outputs.KibanaSyntheticsMonitorAlert | undefined>;
    /**
     * Whether the monitor is enabled. Default: `true`
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * HTTP Monitor specific fields
     */
    public readonly http!: pulumi.Output<outputs.KibanaSyntheticsMonitorHttp | undefined>;
    /**
     * Where to deploy the monitor. Monitors can be deployed in multiple locations so that you can detect differences in
     * availability and response times across those locations.
     */
    public readonly locations!: pulumi.Output<string[] | undefined>;
    /**
     * The monitor’s name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Monitor parameters. Raw JSON object, use `jsonencode` function to represent JSON
     */
    public readonly params!: pulumi.Output<string | undefined>;
    /**
     * These Private Locations refer to locations hosted and managed by you, whereas locations are hosted by Elastic. You can
     * specify a Private Location using the location’s name.
     */
    public readonly privateLocations!: pulumi.Output<string[] | undefined>;
    /**
     * Enable or disable retesting when a monitor fails. By default, monitors are automatically retested if the monitor goes
     * from "up" to "down". If the result of the retest is also "down", an error will be created, and if configured, an alert
     * sent. Then the monitor will resume running according to the defined schedule. Using retest_on_failure can reduce noise
     * related to transient problems. Default: `true`.
     */
    public readonly retestOnFailure!: pulumi.Output<boolean | undefined>;
    /**
     * The monitor’s schedule in minutes. Supported values are 1, 3, 5, 10, 15, 30, 60, 120 and 240.
     */
    public readonly schedule!: pulumi.Output<number | undefined>;
    /**
     * The APM service name.
     */
    public readonly serviceName!: pulumi.Output<string | undefined>;
    /**
     * The namespace field should be lowercase and not contain spaces. The namespace must not include any of the following
     * characters: *, \, /, ?, ", <, >, |, whitespace, ,, #, :, or -. Default: `default`
     */
    public readonly spaceId!: pulumi.Output<string | undefined>;
    /**
     * An array of tags.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * TCP Monitor specific fields
     */
    public readonly tcp!: pulumi.Output<outputs.KibanaSyntheticsMonitorTcp | undefined>;
    /**
     * The monitor timeout in seconds, monitor will fail if it doesn’t complete within this time. Default: `16`
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a KibanaSyntheticsMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KibanaSyntheticsMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KibanaSyntheticsMonitorArgs | KibanaSyntheticsMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KibanaSyntheticsMonitorState | undefined;
            resourceInputs["alert"] = state ? state.alert : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["http"] = state ? state.http : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["privateLocations"] = state ? state.privateLocations : undefined;
            resourceInputs["retestOnFailure"] = state ? state.retestOnFailure : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as KibanaSyntheticsMonitorArgs | undefined;
            resourceInputs["alert"] = args ? args.alert : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["http"] = args ? args.http : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["privateLocations"] = args ? args.privateLocations : undefined;
            resourceInputs["retestOnFailure"] = args ? args.retestOnFailure : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KibanaSyntheticsMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KibanaSyntheticsMonitor resources.
 */
export interface KibanaSyntheticsMonitorState {
    /**
     * Alert configuration. Default: `{ status: { enabled: true }, tls: { enabled: true } }`.
     */
    alert?: pulumi.Input<inputs.KibanaSyntheticsMonitorAlert>;
    /**
     * Whether the monitor is enabled. Default: `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * HTTP Monitor specific fields
     */
    http?: pulumi.Input<inputs.KibanaSyntheticsMonitorHttp>;
    /**
     * Where to deploy the monitor. Monitors can be deployed in multiple locations so that you can detect differences in
     * availability and response times across those locations.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The monitor’s name.
     */
    name?: pulumi.Input<string>;
    /**
     * Monitor parameters. Raw JSON object, use `jsonencode` function to represent JSON
     */
    params?: pulumi.Input<string>;
    /**
     * These Private Locations refer to locations hosted and managed by you, whereas locations are hosted by Elastic. You can
     * specify a Private Location using the location’s name.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable or disable retesting when a monitor fails. By default, monitors are automatically retested if the monitor goes
     * from "up" to "down". If the result of the retest is also "down", an error will be created, and if configured, an alert
     * sent. Then the monitor will resume running according to the defined schedule. Using retest_on_failure can reduce noise
     * related to transient problems. Default: `true`.
     */
    retestOnFailure?: pulumi.Input<boolean>;
    /**
     * The monitor’s schedule in minutes. Supported values are 1, 3, 5, 10, 15, 30, 60, 120 and 240.
     */
    schedule?: pulumi.Input<number>;
    /**
     * The APM service name.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The namespace field should be lowercase and not contain spaces. The namespace must not include any of the following
     * characters: *, \, /, ?, ", <, >, |, whitespace, ,, #, :, or -. Default: `default`
     */
    spaceId?: pulumi.Input<string>;
    /**
     * An array of tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * TCP Monitor specific fields
     */
    tcp?: pulumi.Input<inputs.KibanaSyntheticsMonitorTcp>;
    /**
     * The monitor timeout in seconds, monitor will fail if it doesn’t complete within this time. Default: `16`
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KibanaSyntheticsMonitor resource.
 */
export interface KibanaSyntheticsMonitorArgs {
    /**
     * Alert configuration. Default: `{ status: { enabled: true }, tls: { enabled: true } }`.
     */
    alert?: pulumi.Input<inputs.KibanaSyntheticsMonitorAlert>;
    /**
     * Whether the monitor is enabled. Default: `true`
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * HTTP Monitor specific fields
     */
    http?: pulumi.Input<inputs.KibanaSyntheticsMonitorHttp>;
    /**
     * Where to deploy the monitor. Monitors can be deployed in multiple locations so that you can detect differences in
     * availability and response times across those locations.
     */
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The monitor’s name.
     */
    name?: pulumi.Input<string>;
    /**
     * Monitor parameters. Raw JSON object, use `jsonencode` function to represent JSON
     */
    params?: pulumi.Input<string>;
    /**
     * These Private Locations refer to locations hosted and managed by you, whereas locations are hosted by Elastic. You can
     * specify a Private Location using the location’s name.
     */
    privateLocations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable or disable retesting when a monitor fails. By default, monitors are automatically retested if the monitor goes
     * from "up" to "down". If the result of the retest is also "down", an error will be created, and if configured, an alert
     * sent. Then the monitor will resume running according to the defined schedule. Using retest_on_failure can reduce noise
     * related to transient problems. Default: `true`.
     */
    retestOnFailure?: pulumi.Input<boolean>;
    /**
     * The monitor’s schedule in minutes. Supported values are 1, 3, 5, 10, 15, 30, 60, 120 and 240.
     */
    schedule?: pulumi.Input<number>;
    /**
     * The APM service name.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The namespace field should be lowercase and not contain spaces. The namespace must not include any of the following
     * characters: *, \, /, ?, ", <, >, |, whitespace, ,, #, :, or -. Default: `default`
     */
    spaceId?: pulumi.Input<string>;
    /**
     * An array of tags.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * TCP Monitor specific fields
     */
    tcp?: pulumi.Input<inputs.KibanaSyntheticsMonitorTcp>;
    /**
     * The monitor timeout in seconds, monitor will fail if it doesn’t complete within this time. Default: `16`
     */
    timeout?: pulumi.Input<number>;
}
