// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KibanaImportSavedObjects extends pulumi.CustomResource {
    /**
     * Get an existing KibanaImportSavedObjects resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KibanaImportSavedObjectsState, opts?: pulumi.CustomResourceOptions): KibanaImportSavedObjects {
        return new KibanaImportSavedObjects(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/kibanaImportSavedObjects:KibanaImportSavedObjects';

    /**
     * Returns true if the given object is an instance of KibanaImportSavedObjects.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KibanaImportSavedObjects {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KibanaImportSavedObjects.__pulumiType;
    }

    public /*out*/ readonly errors!: pulumi.Output<outputs.KibanaImportSavedObjectsError[]>;
    /**
     * The contents of the exported saved objects file.
     */
    public readonly fileContents!: pulumi.Output<string>;
    /**
     * If set to true, errors during the import process will not fail the configuration application
     */
    public readonly ignoreImportErrors!: pulumi.Output<boolean | undefined>;
    /**
     * Overwrites saved objects when they already exist. When used, potential conflict errors are automatically resolved by
     * overwriting the destination object.
     */
    public readonly overwrite!: pulumi.Output<boolean | undefined>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    public readonly spaceId!: pulumi.Output<string | undefined>;
    /**
     * Indicates when the import was successfully completed. When set to false, some objects may not have been created. For
     * additional information, refer to the errors and success_results properties.
     */
    public /*out*/ readonly success!: pulumi.Output<boolean>;
    /**
     * Indicates the number of successfully imported records.
     */
    public /*out*/ readonly successCount!: pulumi.Output<number>;
    public /*out*/ readonly successResults!: pulumi.Output<outputs.KibanaImportSavedObjectsSuccessResult[]>;

    /**
     * Create a KibanaImportSavedObjects resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KibanaImportSavedObjectsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KibanaImportSavedObjectsArgs | KibanaImportSavedObjectsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KibanaImportSavedObjectsState | undefined;
            resourceInputs["errors"] = state ? state.errors : undefined;
            resourceInputs["fileContents"] = state ? state.fileContents : undefined;
            resourceInputs["ignoreImportErrors"] = state ? state.ignoreImportErrors : undefined;
            resourceInputs["overwrite"] = state ? state.overwrite : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
            resourceInputs["success"] = state ? state.success : undefined;
            resourceInputs["successCount"] = state ? state.successCount : undefined;
            resourceInputs["successResults"] = state ? state.successResults : undefined;
        } else {
            const args = argsOrState as KibanaImportSavedObjectsArgs | undefined;
            if ((!args || args.fileContents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileContents'");
            }
            resourceInputs["fileContents"] = args ? args.fileContents : undefined;
            resourceInputs["ignoreImportErrors"] = args ? args.ignoreImportErrors : undefined;
            resourceInputs["overwrite"] = args ? args.overwrite : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["errors"] = undefined /*out*/;
            resourceInputs["success"] = undefined /*out*/;
            resourceInputs["successCount"] = undefined /*out*/;
            resourceInputs["successResults"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KibanaImportSavedObjects.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KibanaImportSavedObjects resources.
 */
export interface KibanaImportSavedObjectsState {
    errors?: pulumi.Input<pulumi.Input<inputs.KibanaImportSavedObjectsError>[]>;
    /**
     * The contents of the exported saved objects file.
     */
    fileContents?: pulumi.Input<string>;
    /**
     * If set to true, errors during the import process will not fail the configuration application
     */
    ignoreImportErrors?: pulumi.Input<boolean>;
    /**
     * Overwrites saved objects when they already exist. When used, potential conflict errors are automatically resolved by
     * overwriting the destination object.
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
    /**
     * Indicates when the import was successfully completed. When set to false, some objects may not have been created. For
     * additional information, refer to the errors and success_results properties.
     */
    success?: pulumi.Input<boolean>;
    /**
     * Indicates the number of successfully imported records.
     */
    successCount?: pulumi.Input<number>;
    successResults?: pulumi.Input<pulumi.Input<inputs.KibanaImportSavedObjectsSuccessResult>[]>;
}

/**
 * The set of arguments for constructing a KibanaImportSavedObjects resource.
 */
export interface KibanaImportSavedObjectsArgs {
    /**
     * The contents of the exported saved objects file.
     */
    fileContents: pulumi.Input<string>;
    /**
     * If set to true, errors during the import process will not fail the configuration application
     */
    ignoreImportErrors?: pulumi.Input<boolean>;
    /**
     * Overwrites saved objects when they already exist. When used, potential conflict errors are automatically resolved by
     * overwriting the destination object.
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
}
