// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KibanaActionConnector extends pulumi.CustomResource {
    /**
     * Get an existing KibanaActionConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KibanaActionConnectorState, opts?: pulumi.CustomResourceOptions): KibanaActionConnector {
        return new KibanaActionConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/kibanaActionConnector:KibanaActionConnector';

    /**
     * Returns true if the given object is an instance of KibanaActionConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KibanaActionConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KibanaActionConnector.__pulumiType;
    }

    /**
     * The configuration for the connector. Configuration properties vary depending on the connector type.
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * A UUID v1 or v4 to use instead of a randomly generated ID.
     */
    public readonly connectorId!: pulumi.Output<string>;
    /**
     * The ID of the connector type, e.g. `.index`.
     */
    public readonly connectorTypeId!: pulumi.Output<string>;
    /**
     * Indicates whether the connector type is deprecated.
     */
    public /*out*/ readonly isDeprecated!: pulumi.Output<boolean>;
    /**
     * Indicates whether secrets are missing for the connector.
     */
    public /*out*/ readonly isMissingSecrets!: pulumi.Output<boolean>;
    /**
     * Indicates whether it is a preconfigured connector.
     */
    public /*out*/ readonly isPreconfigured!: pulumi.Output<boolean>;
    /**
     * The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a
     * connector.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type.
     */
    public readonly secrets!: pulumi.Output<string | undefined>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    public readonly spaceId!: pulumi.Output<string | undefined>;

    /**
     * Create a KibanaActionConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KibanaActionConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KibanaActionConnectorArgs | KibanaActionConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KibanaActionConnectorState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["connectorId"] = state ? state.connectorId : undefined;
            resourceInputs["connectorTypeId"] = state ? state.connectorTypeId : undefined;
            resourceInputs["isDeprecated"] = state ? state.isDeprecated : undefined;
            resourceInputs["isMissingSecrets"] = state ? state.isMissingSecrets : undefined;
            resourceInputs["isPreconfigured"] = state ? state.isPreconfigured : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["secrets"] = state ? state.secrets : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
        } else {
            const args = argsOrState as KibanaActionConnectorArgs | undefined;
            if ((!args || args.connectorTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectorTypeId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["connectorId"] = args ? args.connectorId : undefined;
            resourceInputs["connectorTypeId"] = args ? args.connectorTypeId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
            resourceInputs["isDeprecated"] = undefined /*out*/;
            resourceInputs["isMissingSecrets"] = undefined /*out*/;
            resourceInputs["isPreconfigured"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KibanaActionConnector.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KibanaActionConnector resources.
 */
export interface KibanaActionConnectorState {
    /**
     * The configuration for the connector. Configuration properties vary depending on the connector type.
     */
    config?: pulumi.Input<string>;
    /**
     * A UUID v1 or v4 to use instead of a randomly generated ID.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * The ID of the connector type, e.g. `.index`.
     */
    connectorTypeId?: pulumi.Input<string>;
    /**
     * Indicates whether the connector type is deprecated.
     */
    isDeprecated?: pulumi.Input<boolean>;
    /**
     * Indicates whether secrets are missing for the connector.
     */
    isMissingSecrets?: pulumi.Input<boolean>;
    /**
     * Indicates whether it is a preconfigured connector.
     */
    isPreconfigured?: pulumi.Input<boolean>;
    /**
     * The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a
     * connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type.
     */
    secrets?: pulumi.Input<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KibanaActionConnector resource.
 */
export interface KibanaActionConnectorArgs {
    /**
     * The configuration for the connector. Configuration properties vary depending on the connector type.
     */
    config?: pulumi.Input<string>;
    /**
     * A UUID v1 or v4 to use instead of a randomly generated ID.
     */
    connectorId?: pulumi.Input<string>;
    /**
     * The ID of the connector type, e.g. `.index`.
     */
    connectorTypeId: pulumi.Input<string>;
    /**
     * The name of the connector. While this name does not have to be unique, a distinctive name can help you identify a
     * connector.
     */
    name?: pulumi.Input<string>;
    /**
     * The secrets configuration for the connector. Secrets configuration properties vary depending on the connector type.
     */
    secrets?: pulumi.Input<string>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
}
