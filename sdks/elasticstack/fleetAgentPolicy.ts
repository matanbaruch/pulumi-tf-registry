// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FleetAgentPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FleetAgentPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FleetAgentPolicyState, opts?: pulumi.CustomResourceOptions): FleetAgentPolicy {
        return new FleetAgentPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/fleetAgentPolicy:FleetAgentPolicy';

    /**
     * Returns true if the given object is an instance of FleetAgentPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FleetAgentPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FleetAgentPolicy.__pulumiType;
    }

    /**
     * The identifier for the data output.
     */
    public readonly dataOutputId!: pulumi.Output<string | undefined>;
    /**
     * The description of the agent policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the Elastic Agent binary download server.
     */
    public readonly downloadSourceId!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the Fleet server host.
     */
    public readonly fleetServerHostId!: pulumi.Output<string | undefined>;
    /**
     * Enable collection of agent logs.
     */
    public readonly monitorLogs!: pulumi.Output<boolean | undefined>;
    /**
     * Enable collection of agent metrics.
     */
    public readonly monitorMetrics!: pulumi.Output<boolean | undefined>;
    /**
     * The identifier for monitoring output.
     */
    public readonly monitoringOutputId!: pulumi.Output<string | undefined>;
    /**
     * The name of the agent policy.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace of the agent policy.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * Unique identifier of the agent policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    public readonly skipDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * Enable collection of system logs and metrics.
     */
    public readonly sysMonitoring!: pulumi.Output<boolean | undefined>;

    /**
     * Create a FleetAgentPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetAgentPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FleetAgentPolicyArgs | FleetAgentPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FleetAgentPolicyState | undefined;
            resourceInputs["dataOutputId"] = state ? state.dataOutputId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["downloadSourceId"] = state ? state.downloadSourceId : undefined;
            resourceInputs["fleetServerHostId"] = state ? state.fleetServerHostId : undefined;
            resourceInputs["monitorLogs"] = state ? state.monitorLogs : undefined;
            resourceInputs["monitorMetrics"] = state ? state.monitorMetrics : undefined;
            resourceInputs["monitoringOutputId"] = state ? state.monitoringOutputId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["skipDestroy"] = state ? state.skipDestroy : undefined;
            resourceInputs["sysMonitoring"] = state ? state.sysMonitoring : undefined;
        } else {
            const args = argsOrState as FleetAgentPolicyArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["dataOutputId"] = args ? args.dataOutputId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["downloadSourceId"] = args ? args.downloadSourceId : undefined;
            resourceInputs["fleetServerHostId"] = args ? args.fleetServerHostId : undefined;
            resourceInputs["monitorLogs"] = args ? args.monitorLogs : undefined;
            resourceInputs["monitorMetrics"] = args ? args.monitorMetrics : undefined;
            resourceInputs["monitoringOutputId"] = args ? args.monitoringOutputId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["skipDestroy"] = args ? args.skipDestroy : undefined;
            resourceInputs["sysMonitoring"] = args ? args.sysMonitoring : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FleetAgentPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FleetAgentPolicy resources.
 */
export interface FleetAgentPolicyState {
    /**
     * The identifier for the data output.
     */
    dataOutputId?: pulumi.Input<string>;
    /**
     * The description of the agent policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier for the Elastic Agent binary download server.
     */
    downloadSourceId?: pulumi.Input<string>;
    /**
     * The identifier for the Fleet server host.
     */
    fleetServerHostId?: pulumi.Input<string>;
    /**
     * Enable collection of agent logs.
     */
    monitorLogs?: pulumi.Input<boolean>;
    /**
     * Enable collection of agent metrics.
     */
    monitorMetrics?: pulumi.Input<boolean>;
    /**
     * The identifier for monitoring output.
     */
    monitoringOutputId?: pulumi.Input<string>;
    /**
     * The name of the agent policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the agent policy.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Unique identifier of the agent policy.
     */
    policyId?: pulumi.Input<string>;
    skipDestroy?: pulumi.Input<boolean>;
    /**
     * Enable collection of system logs and metrics.
     */
    sysMonitoring?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a FleetAgentPolicy resource.
 */
export interface FleetAgentPolicyArgs {
    /**
     * The identifier for the data output.
     */
    dataOutputId?: pulumi.Input<string>;
    /**
     * The description of the agent policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The identifier for the Elastic Agent binary download server.
     */
    downloadSourceId?: pulumi.Input<string>;
    /**
     * The identifier for the Fleet server host.
     */
    fleetServerHostId?: pulumi.Input<string>;
    /**
     * Enable collection of agent logs.
     */
    monitorLogs?: pulumi.Input<boolean>;
    /**
     * Enable collection of agent metrics.
     */
    monitorMetrics?: pulumi.Input<boolean>;
    /**
     * The identifier for monitoring output.
     */
    monitoringOutputId?: pulumi.Input<string>;
    /**
     * The name of the agent policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace of the agent policy.
     */
    namespace: pulumi.Input<string>;
    /**
     * Unique identifier of the agent policy.
     */
    policyId?: pulumi.Input<string>;
    skipDestroy?: pulumi.Input<boolean>;
    /**
     * Enable collection of system logs and metrics.
     */
    sysMonitoring?: pulumi.Input<boolean>;
}
