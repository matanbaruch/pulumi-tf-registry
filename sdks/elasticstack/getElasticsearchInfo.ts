// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getElasticsearchInfo(args?: GetElasticsearchInfoArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticsearchInfoResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getElasticsearchInfo:getElasticsearchInfo", {
        "id": args.id,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getElasticsearchInfo.
 */
export interface GetElasticsearchInfoArgs {
    id?: string;
}

/**
 * A collection of values returned by getElasticsearchInfo.
 */
export interface GetElasticsearchInfoResult {
    readonly clusterName: string;
    readonly clusterUuid: string;
    readonly id: string;
    readonly name: string;
    readonly tagline: string;
    readonly versions: outputs.GetElasticsearchInfoVersion[];
}
export function getElasticsearchInfoOutput(args?: GetElasticsearchInfoOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticsearchInfoResult> {
    return pulumi.output(args).apply((a: any) => getElasticsearchInfo(a, opts))
}

/**
 * A collection of arguments for invoking getElasticsearchInfo.
 */
export interface GetElasticsearchInfoOutputArgs {
    id?: pulumi.Input<string>;
}
