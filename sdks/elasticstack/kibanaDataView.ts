// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KibanaDataView extends pulumi.CustomResource {
    /**
     * Get an existing KibanaDataView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KibanaDataViewState, opts?: pulumi.CustomResourceOptions): KibanaDataView {
        return new KibanaDataView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/kibanaDataView:KibanaDataView';

    /**
     * Returns true if the given object is an instance of KibanaDataView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KibanaDataView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KibanaDataView.__pulumiType;
    }

    public readonly dataView!: pulumi.Output<outputs.KibanaDataViewDataView>;
    /**
     * Overrides an existing data view if a data view with the provided title already exists.
     */
    public readonly override!: pulumi.Output<boolean>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    public readonly spaceId!: pulumi.Output<string>;

    /**
     * Create a KibanaDataView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KibanaDataViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KibanaDataViewArgs | KibanaDataViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KibanaDataViewState | undefined;
            resourceInputs["dataView"] = state ? state.dataView : undefined;
            resourceInputs["override"] = state ? state.override : undefined;
            resourceInputs["spaceId"] = state ? state.spaceId : undefined;
        } else {
            const args = argsOrState as KibanaDataViewArgs | undefined;
            if ((!args || args.dataView === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataView'");
            }
            resourceInputs["dataView"] = args ? args.dataView : undefined;
            resourceInputs["override"] = args ? args.override : undefined;
            resourceInputs["spaceId"] = args ? args.spaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KibanaDataView.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KibanaDataView resources.
 */
export interface KibanaDataViewState {
    dataView?: pulumi.Input<inputs.KibanaDataViewDataView>;
    /**
     * Overrides an existing data view if a data view with the provided title already exists.
     */
    override?: pulumi.Input<boolean>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KibanaDataView resource.
 */
export interface KibanaDataViewArgs {
    dataView: pulumi.Input<inputs.KibanaDataViewDataView>;
    /**
     * Overrides an existing data view if a data view with the provided title already exists.
     */
    override?: pulumi.Input<boolean>;
    /**
     * An identifier for the space. If space_id is not provided, the default space is used.
     */
    spaceId?: pulumi.Input<string>;
}
