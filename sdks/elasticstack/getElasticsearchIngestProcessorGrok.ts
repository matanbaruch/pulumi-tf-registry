// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getElasticsearchIngestProcessorGrok(args: GetElasticsearchIngestProcessorGrokArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticsearchIngestProcessorGrokResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getElasticsearchIngestProcessorGrok:getElasticsearchIngestProcessorGrok", {
        "description": args.description,
        "ecsCompatibility": args.ecsCompatibility,
        "field": args.field,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "ignoreMissing": args.ignoreMissing,
        "onFailures": args.onFailures,
        "patternDefinitions": args.patternDefinitions,
        "patterns": args.patterns,
        "tag": args.tag,
        "traceMatch": args.traceMatch,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getElasticsearchIngestProcessorGrok.
 */
export interface GetElasticsearchIngestProcessorGrokArgs {
    description?: string;
    ecsCompatibility?: string;
    field: string;
    if?: string;
    ignoreFailure?: boolean;
    ignoreMissing?: boolean;
    onFailures?: string[];
    patternDefinitions?: {[key: string]: string};
    patterns: string[];
    tag?: string;
    traceMatch?: boolean;
}

/**
 * A collection of values returned by getElasticsearchIngestProcessorGrok.
 */
export interface GetElasticsearchIngestProcessorGrokResult {
    readonly description?: string;
    readonly ecsCompatibility?: string;
    readonly field: string;
    readonly id: string;
    readonly if?: string;
    readonly ignoreFailure?: boolean;
    readonly ignoreMissing?: boolean;
    readonly json: string;
    readonly onFailures?: string[];
    readonly patternDefinitions?: {[key: string]: string};
    readonly patterns: string[];
    readonly tag?: string;
    readonly traceMatch?: boolean;
}
export function getElasticsearchIngestProcessorGrokOutput(args: GetElasticsearchIngestProcessorGrokOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticsearchIngestProcessorGrokResult> {
    return pulumi.output(args).apply((a: any) => getElasticsearchIngestProcessorGrok(a, opts))
}

/**
 * A collection of arguments for invoking getElasticsearchIngestProcessorGrok.
 */
export interface GetElasticsearchIngestProcessorGrokOutputArgs {
    description?: pulumi.Input<string>;
    ecsCompatibility?: pulumi.Input<string>;
    field: pulumi.Input<string>;
    if?: pulumi.Input<string>;
    ignoreFailure?: pulumi.Input<boolean>;
    ignoreMissing?: pulumi.Input<boolean>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    patternDefinitions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    patterns: pulumi.Input<pulumi.Input<string>[]>;
    tag?: pulumi.Input<string>;
    traceMatch?: pulumi.Input<boolean>;
}
