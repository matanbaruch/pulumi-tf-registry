// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ElasticsearchClusterSettingsElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchClusterSettingsPersistent {
    /**
     * Defines the setting in the cluster.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ElasticsearchClusterSettingsPersistentSetting>[]>;
}

export interface ElasticsearchClusterSettingsPersistentSetting {
    /**
     * The name of the setting to set and track.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the setting to set and track.
     */
    value?: pulumi.Input<string>;
    /**
     * The list of values to be set for the key, where the list is required.
     */
    valueLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchClusterSettingsTransient {
    /**
     * Defines the setting in the cluster.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ElasticsearchClusterSettingsTransientSetting>[]>;
}

export interface ElasticsearchClusterSettingsTransientSetting {
    /**
     * The name of the setting to set and track.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the setting to set and track.
     */
    value?: pulumi.Input<string>;
    /**
     * The list of values to be set for the key, where the list is required.
     */
    valueLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchComponentTemplateElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchComponentTemplateTemplate {
    /**
     * Alias to add.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.ElasticsearchComponentTemplateTemplateAlias>[]>;
    /**
     * Mapping for fields in the index. Should be specified as a JSON object of field mappings. See the documentation (https://www.elastic.co/guide/en/elasticsearch/reference/current/explicit-mapping.html) for more details
     */
    mappings?: pulumi.Input<string>;
    /**
     * Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings
     */
    settings?: pulumi.Input<string>;
}

export interface ElasticsearchComponentTemplateTemplateAlias {
    /**
     * Query used to limit documents the alias can access.
     */
    filter?: pulumi.Input<string>;
    /**
     * Value used to route indexing operations to a specific shard. If specified, this overwrites the routing value for indexing operations.
     */
    indexRouting?: pulumi.Input<string>;
    /**
     * If true, the alias is hidden.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * If true, the index is the write index for the alias.
     */
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * The alias name. Index alias names support date math. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/date-math-index-names.html
     */
    name: pulumi.Input<string>;
    /**
     * Value used to route indexing and search operations to a specific shard.
     */
    routing?: pulumi.Input<string>;
    /**
     * Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.
     */
    searchRouting?: pulumi.Input<string>;
}

export interface ElasticsearchDataStreamElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchDataStreamIndex {
    indexName: pulumi.Input<string>;
    indexUuid: pulumi.Input<string>;
}

export interface ElasticsearchEnrichPolicyElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchIndexAlias {
    /**
     * Query used to limit documents the alias can access.
     */
    filter?: pulumi.Input<string>;
    /**
     * Value used to route indexing operations to a specific shard. If specified, this overwrites the `routing` value for indexing operations.
     */
    indexRouting?: pulumi.Input<string>;
    /**
     * If true, the alias is hidden.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * If true, the index is the write index for the alias.
     */
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * Index alias name.
     */
    name: pulumi.Input<string>;
    /**
     * Value used to route indexing and search operations to a specific shard.
     */
    routing?: pulumi.Input<string>;
    /**
     * Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.
     */
    searchRouting?: pulumi.Input<string>;
}

export interface ElasticsearchIndexElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleCold {
    /**
     * Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
     */
    allocate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdAllocate>;
    /**
     * Roll up documents within a fixed interval to a single summary document. Reduces the index footprint by storing time series data at reduced granularity.
     */
    downsample?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdDownsample>;
    /**
     * Freeze the index to minimize its memory footprint.
     */
    freeze?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdFreeze>;
    /**
     * Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
     */
    migrate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdMigrate>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdReadonly>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdSearchableSnapshot>;
    /**
     * Sets the priority of the index as soon as the policy enters the hot, warm, or cold phase. Higher priority indices are recovered before indices with lower priorities following a node restart. Default priority is 1.
     */
    setPriority?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdSetPriority>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdUnfollow>;
}

export interface ElasticsearchIndexLifecycleColdAllocate {
    /**
     * Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
     */
    exclude?: pulumi.Input<string>;
    /**
     * Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
     */
    include?: pulumi.Input<string>;
    /**
     * Number of replicas to assign to the index. Default: `0`
     */
    numberOfReplicas?: pulumi.Input<number>;
    /**
     * Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
     */
    require?: pulumi.Input<string>;
    /**
     * The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
     */
    totalShardsPerNode?: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleColdDownsample {
    /**
     * Downsampling interval
     */
    fixedInterval: pulumi.Input<string>;
    /**
     * Downsampling interval
     */
    waitTimeout?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleColdFreeze {
    /**
     * Controls whether ILM freezes the index.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleColdMigrate {
    /**
     * Controls whether ILM automatically migrates the index during this phase.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleColdReadonly {
    /**
     * Controls whether ILM makes the index read-only.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleColdSearchableSnapshot {
    /**
     * Force merges the managed index to one segment.
     */
    forceMergeIndex?: pulumi.Input<boolean>;
    /**
     * Repository used to store the snapshot.
     */
    snapshotRepository: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleColdSetPriority {
    /**
     * The priority for the index. Must be 0 or greater.
     */
    priority: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleColdUnfollow {
    /**
     * Controls whether ILM makes the follower index a regular one.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleDelete {
    /**
     * Permanently removes the index.
     */
    delete?: pulumi.Input<inputs.ElasticsearchIndexLifecycleDeleteDelete>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.
     */
    waitForSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleDeleteWaitForSnapshot>;
}

export interface ElasticsearchIndexLifecycleDeleteDelete {
    /**
     * Deletes the searchable snapshot created in a previous phase.
     */
    deleteSearchableSnapshot?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleDeleteWaitForSnapshot {
    /**
     * Name of the SLM policy that the delete action should wait for.
     */
    policy: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleFrozen {
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleFrozenSearchableSnapshot>;
}

export interface ElasticsearchIndexLifecycleFrozenSearchableSnapshot {
    /**
     * Force merges the managed index to one segment.
     */
    forceMergeIndex?: pulumi.Input<boolean>;
    /**
     * Repository used to store the snapshot.
     */
    snapshotRepository: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleHot {
    /**
     * Roll up documents within a fixed interval to a single summary document. Reduces the index footprint by storing time series data at reduced granularity.
     */
    downsample?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotDownsample>;
    /**
     * Force merges the index into the specified maximum number of segments. This action makes the index read-only.
     */
    forcemerge?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotForcemerge>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotReadonly>;
    /**
     * Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.
     */
    rollover?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotRollover>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotSearchableSnapshot>;
    /**
     * Sets the priority of the index as soon as the policy enters the hot, warm, or cold phase. Higher priority indices are recovered before indices with lower priorities following a node restart. Default priority is 1.
     */
    setPriority?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotSetPriority>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    shrink?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotShrink>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotUnfollow>;
}

export interface ElasticsearchIndexLifecycleHotDownsample {
    /**
     * Downsampling interval
     */
    fixedInterval: pulumi.Input<string>;
    /**
     * Downsampling interval
     */
    waitTimeout?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleHotForcemerge {
    /**
     * Codec used to compress the document store.
     */
    indexCodec?: pulumi.Input<string>;
    /**
     * Number of segments to merge to. To fully merge the index, set to 1.
     */
    maxNumSegments: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleHotReadonly {
    /**
     * Controls whether ILM makes the index read-only.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleHotRollover {
    /**
     * Triggers rollover after the maximum elapsed time from index creation is reached.
     */
    maxAge?: pulumi.Input<string>;
    /**
     * Triggers rollover after the specified maximum number of documents is reached.
     */
    maxDocs?: pulumi.Input<number>;
    /**
     * Triggers rollover when the largest primary shard in the index reaches a certain size.
     */
    maxPrimaryShardSize?: pulumi.Input<string>;
    /**
     * Triggers rollover when the index reaches a certain size.
     */
    maxSize?: pulumi.Input<string>;
    /**
     * Prevents rollover until after the minimum elapsed time from index creation is reached. Supported from Elasticsearch version **8.4**
     */
    minAge?: pulumi.Input<string>;
    /**
     * Prevents rollover until after the specified minimum number of documents is reached. Supported from Elasticsearch version **8.4**
     */
    minDocs?: pulumi.Input<number>;
    /**
     * Prevents rollover until the largest primary shard in the index reaches a certain number of documents. Supported from Elasticsearch version **8.4**
     */
    minPrimaryShardDocs?: pulumi.Input<number>;
    /**
     * Prevents rollover until the largest primary shard in the index reaches a certain size. Supported from Elasticsearch version **8.4**
     */
    minPrimaryShardSize?: pulumi.Input<string>;
    /**
     * Prevents rollover until the index reaches a certain size.
     */
    minSize?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleHotSearchableSnapshot {
    /**
     * Force merges the managed index to one segment.
     */
    forceMergeIndex?: pulumi.Input<boolean>;
    /**
     * Repository used to store the snapshot.
     */
    snapshotRepository: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleHotSetPriority {
    /**
     * The priority for the index. Must be 0 or greater.
     */
    priority: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleHotShrink {
    /**
     * If true, the shrunken index is made writable by removing the write block.
     */
    allowWriteAfterShrink?: pulumi.Input<boolean>;
    /**
     * The max primary shard size for the target index.
     */
    maxPrimaryShardSize?: pulumi.Input<string>;
    /**
     * Number of shards to shrink to.
     */
    numberOfShards?: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleHotUnfollow {
    /**
     * Controls whether ILM makes the follower index a regular one.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleWarm {
    /**
     * Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
     */
    allocate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmAllocate>;
    /**
     * Roll up documents within a fixed interval to a single summary document. Reduces the index footprint by storing time series data at reduced granularity.
     */
    downsample?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmDownsample>;
    /**
     * Force merges the index into the specified maximum number of segments. This action makes the index read-only.
     */
    forcemerge?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmForcemerge>;
    /**
     * Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include._tier_preference" index setting.
     */
    migrate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmMigrate>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmReadonly>;
    /**
     * Sets the priority of the index as soon as the policy enters the hot, warm, or cold phase. Higher priority indices are recovered before indices with lower priorities following a node restart. Default priority is 1.
     */
    setPriority?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmSetPriority>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    shrink?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmShrink>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmUnfollow>;
}

export interface ElasticsearchIndexLifecycleWarmAllocate {
    /**
     * Assigns an index to nodes that have none of the specified custom attributes. Must be valid JSON document.
     */
    exclude?: pulumi.Input<string>;
    /**
     * Assigns an index to nodes that have at least one of the specified custom attributes. Must be valid JSON document.
     */
    include?: pulumi.Input<string>;
    /**
     * Number of replicas to assign to the index. Default: `0`
     */
    numberOfReplicas?: pulumi.Input<number>;
    /**
     * Assigns an index to nodes that have all of the specified custom attributes. Must be valid JSON document.
     */
    require?: pulumi.Input<string>;
    /**
     * The maximum number of shards for the index on a single Elasticsearch node. Defaults to `-1` (unlimited). Supported from Elasticsearch version **7.16**
     */
    totalShardsPerNode?: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleWarmDownsample {
    /**
     * Downsampling interval
     */
    fixedInterval: pulumi.Input<string>;
    /**
     * Downsampling interval
     */
    waitTimeout?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleWarmForcemerge {
    /**
     * Codec used to compress the document store.
     */
    indexCodec?: pulumi.Input<string>;
    /**
     * Number of segments to merge to. To fully merge the index, set to 1.
     */
    maxNumSegments: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleWarmMigrate {
    /**
     * Controls whether ILM automatically migrates the index during this phase.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleWarmReadonly {
    /**
     * Controls whether ILM makes the index read-only.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleWarmSetPriority {
    /**
     * The priority for the index. Must be 0 or greater.
     */
    priority: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleWarmShrink {
    /**
     * If true, the shrunken index is made writable by removing the write block.
     */
    allowWriteAfterShrink?: pulumi.Input<boolean>;
    /**
     * The max primary shard size for the target index.
     */
    maxPrimaryShardSize?: pulumi.Input<string>;
    /**
     * Number of shards to shrink to.
     */
    numberOfShards?: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleWarmUnfollow {
    /**
     * Controls whether ILM makes the follower index a regular one.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexSettings {
    /**
     * Defines the setting for the index.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ElasticsearchIndexSettingsSetting>[]>;
}

export interface ElasticsearchIndexSettingsSetting {
    /**
     * The name of the setting to set and track.
     */
    name: pulumi.Input<string>;
    /**
     * The value of the setting to set and track.
     */
    value: pulumi.Input<string>;
}

export interface ElasticsearchIndexTemplateDataStream {
    /**
     * If `true`, the data stream supports custom routing. Defaults to `false`. Available only in **8.x**
     */
    allowCustomRouting?: pulumi.Input<boolean>;
    /**
     * If true, the data stream is hidden.
     */
    hidden?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexTemplateElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchIndexTemplateTemplate {
    /**
     * Alias to add.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.ElasticsearchIndexTemplateTemplateAlias>[]>;
    /**
     * Mapping for fields in the index. Should be specified as a JSON object of field mappings. See the documentation (https://www.elastic.co/guide/en/elasticsearch/reference/current/explicit-mapping.html) for more details
     */
    mappings?: pulumi.Input<string>;
    /**
     * Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings
     */
    settings?: pulumi.Input<string>;
}

export interface ElasticsearchIndexTemplateTemplateAlias {
    /**
     * Query used to limit documents the alias can access.
     */
    filter?: pulumi.Input<string>;
    /**
     * Value used to route indexing operations to a specific shard. If specified, this overwrites the `routing` value for indexing operations.
     */
    indexRouting?: pulumi.Input<string>;
    /**
     * If true, the alias is hidden.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * If true, the index is the write index for the alias.
     */
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * The alias name.
     */
    name: pulumi.Input<string>;
    /**
     * Value used to route indexing and search operations to a specific shard.
     */
    routing?: pulumi.Input<string>;
    /**
     * Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.
     */
    searchRouting?: pulumi.Input<string>;
}

export interface ElasticsearchIngestPipelineElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchLogstashPipelineElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchScriptElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityApiKeyElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityRoleApplication {
    /**
     * The name of the application to which this entry applies.
     */
    application: pulumi.Input<string>;
    /**
     * A list of strings, where each element is the name of an application privilege or action.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list resources to which the privileges are applied.
     */
    resources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchSecurityRoleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityRoleIndex {
    /**
     * Include matching restricted indices in names parameter. Usage is strongly discouraged as it can grant unrestricted operations on critical data, make the entire system unstable or leak sensitive information.
     */
    allowRestrictedIndices?: pulumi.Input<boolean>;
    /**
     * The document fields that the owners of the role have read access to.
     */
    fieldSecurity?: pulumi.Input<inputs.ElasticsearchSecurityRoleIndexFieldSecurity>;
    /**
     * A list of indices (or index name patterns) to which the permissions in this entry apply.
     */
    names: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The index level privileges that the owners of the role have on the specified indices.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A search query that defines the documents the owners of the role have read access to.
     */
    query?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityRoleIndexFieldSecurity {
    /**
     * List of the fields to which the grants will not be applied.
     */
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of the fields to grant the access to.
     */
    grants?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchSecurityRoleMappingElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSecuritySystemUserElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityUserElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotLifecycleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryAzure {
    /**
     * Specifies the path within the container to the repository data.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * Azure named client to use.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Container name. You must create the Azure container before creating the repository.
     */
    container: pulumi.Input<string>;
    /**
     * Location mode. `primary_only` or `secondary_only`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
     */
    locationMode?: pulumi.Input<string>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface ElasticsearchSnapshotRepositoryElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryFs {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Location of the shared filesystem used to store and retrieve snapshots.
     */
    location: pulumi.Input<string>;
    /**
     * Maximum number of snapshots the repository can contain.
     */
    maxNumberOfSnapshots?: pulumi.Input<number>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface ElasticsearchSnapshotRepositoryGcs {
    /**
     * Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The name of the bucket to be used for snapshots.
     */
    bucket: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * The name of the client to use to connect to Google Cloud Storage.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface ElasticsearchSnapshotRepositoryHdfs {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Whether to load the default Hadoop configuration or not.
     */
    loadDefaults?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * The file path within the filesystem where data is stored/loaded.
     */
    path: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * The uri address for hdfs. ex: "hdfs://<host>:<port>/".
     */
    uri: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryS3 {
    /**
     * Specifies the path to the repository data within its bucket.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Name of the S3 bucket to use for snapshots.
     */
    bucket: pulumi.Input<string>;
    /**
     * Minimum threshold below which the chunk is uploaded using a single request.
     */
    bufferSize?: pulumi.Input<string>;
    /**
     * The S3 repository supports all S3 canned ACLs.
     */
    cannedAcl?: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * The name of the S3 client to use to connect to S3.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, path style access pattern will be used.
     */
    pathStyleAccess?: pulumi.Input<boolean>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * When true, files are encrypted server-side using AES-256 algorithm.
     */
    serverSideEncryption?: pulumi.Input<boolean>;
    /**
     * Sets the S3 storage class for objects stored in the snapshot repository.
     */
    storageClass?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryUrl {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum number of retries for http and https URLs.
     */
    httpMaxRetries?: pulumi.Input<number>;
    /**
     * Maximum wait time for data transfers over a connection.
     */
    httpSocketTimeout?: pulumi.Input<string>;
    /**
     * Maximum number of snapshots the repository can contain.
     */
    maxNumberOfSnapshots?: pulumi.Input<number>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * URL location of the root of the shared filesystem repository.
     */
    url: pulumi.Input<string>;
}

export interface ElasticsearchTransformDestination {
    /**
     * The destination index for the transform.
     */
    index: pulumi.Input<string>;
    /**
     * The unique identifier for an ingest pipeline.
     */
    pipeline?: pulumi.Input<string>;
}

export interface ElasticsearchTransformRetentionPolicy {
    /**
     * Specifies that the transform uses a time field to set the retention policy. This is currently the only supported option.
     */
    time: pulumi.Input<inputs.ElasticsearchTransformRetentionPolicyTime>;
}

export interface ElasticsearchTransformRetentionPolicyTime {
    /**
     * The date field that is used to calculate the age of the document.
     */
    field: pulumi.Input<string>;
    /**
     * Specifies the maximum age of a document in the destination index.
     */
    maxAge: pulumi.Input<string>;
}

export interface ElasticsearchTransformSource {
    /**
     * The source indices for the transform.
     */
    indices: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A query clause that retrieves a subset of data from the source index.
     */
    query?: pulumi.Input<string>;
    /**
     * Definitions of search-time runtime fields that can be used by the transform.
     */
    runtimeMappings?: pulumi.Input<string>;
}

export interface ElasticsearchTransformSync {
    /**
     * Specifies that the transform uses a time field to synchronize the source and destination indices. This is currently the only supported option.
     */
    time: pulumi.Input<inputs.ElasticsearchTransformSyncTime>;
}

export interface ElasticsearchTransformSyncTime {
    /**
     * The time delay between the current time and the latest input data time. The default value is 60s.
     */
    delay?: pulumi.Input<string>;
    /**
     * The date field that is used to identify new documents in the source.
     */
    field: pulumi.Input<string>;
}

export interface FleetIntegrationPolicyInput {
    /**
     * Enable the input.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The identifier of the input.
     */
    inputId: pulumi.Input<string>;
    /**
     * Input streams as JSON.
     */
    streamsJson?: pulumi.Input<string>;
    /**
     * Input variables as JSON.
     */
    varsJson?: pulumi.Input<string>;
}

export interface FleetOutputSsl {
    /**
     * Client SSL certificate.
     */
    certificate: pulumi.Input<string>;
    /**
     * Server SSL certificate authorities.
     */
    certificateAuthorities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Client SSL certificate key.
     */
    key: pulumi.Input<string>;
}

export interface GetElasticsearchSecurityRoleElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: string;
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetElasticsearchSecurityRoleElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface GetElasticsearchSecurityRoleMappingElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: string;
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetElasticsearchSecurityRoleMappingElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface GetElasticsearchSecurityUserElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: string;
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetElasticsearchSecurityUserElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface GetElasticsearchSnapshotRepositoryElasticsearchConnection {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: string;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: string;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: string;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: string;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: string;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: string;
    endpoints?: string[];
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: string;
    /**
     * Disable TLS certificate validation
     */
    insecure?: boolean;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: string;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: string;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: string;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: string;
}

export interface GetElasticsearchSnapshotRepositoryElasticsearchConnectionArgs {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface KibanaAlertingRuleAction {
    /**
     * The group name, which affects when the action runs (for example, when the threshold is met or when the alert is recovered). Each rule type has a list of valid action group names.
     */
    group?: pulumi.Input<string>;
    /**
     * The identifier for the connector saved object.
     */
    id: pulumi.Input<string>;
    /**
     * The parameters for the action, which are sent to the connector.
     */
    params: pulumi.Input<string>;
}

export interface KibanaDataViewDataView {
    /**
     * Allows the Data view saved object to exist before the data is available.
     */
    allowNoIndex?: pulumi.Input<boolean>;
    /**
     * Map of field attributes by field name.
     */
    fieldAttrs?: pulumi.Input<{[key: string]: pulumi.Input<inputs.KibanaDataViewDataViewFieldAttrs>}>;
    /**
     * Map of field formats by field name.
     */
    fieldFormats?: pulumi.Input<{[key: string]: pulumi.Input<inputs.KibanaDataViewDataViewFieldFormats>}>;
    /**
     * Saved object ID.
     */
    id?: pulumi.Input<string>;
    /**
     * The Data view name.
     */
    name?: pulumi.Input<string>;
    /**
     * Array of space IDs for sharing the Data view between multiple spaces.
     */
    namespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Map of runtime field definitions by field name.
     */
    runtimeFieldMap?: pulumi.Input<{[key: string]: pulumi.Input<inputs.KibanaDataViewDataViewRuntimeFieldMap>}>;
    /**
     * List of field names you want to filter out in Discover.
     */
    sourceFilters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Timestamp field name, which you use for time-based Data views.
     */
    timeFieldName?: pulumi.Input<string>;
    /**
     * Comma-separated list of data streams, indices, and aliases that you want to search. Supports wildcards (*).
     */
    title: pulumi.Input<string>;
}

export interface KibanaDataViewDataViewFieldAttrs {
    /**
     * Popularity count for the field.
     */
    count?: pulumi.Input<number>;
    /**
     * Custom label for the field.
     */
    customLabel?: pulumi.Input<string>;
}

export interface KibanaDataViewDataViewFieldFormats {
    id: pulumi.Input<string>;
    params?: pulumi.Input<inputs.KibanaDataViewDataViewFieldFormatsParams>;
}

export interface KibanaDataViewDataViewFieldFormatsParams {
    pattern?: pulumi.Input<string>;
}

export interface KibanaDataViewDataViewRuntimeFieldMap {
    /**
     * Script of the runtime field.
     */
    scriptSource: pulumi.Input<string>;
    /**
     * Mapping type of the runtime field. For more information, check [Field data types](https://www.elastic.co/guide/en/elasticsearch/reference/8.11/mapping-types.html).
     */
    type: pulumi.Input<string>;
}

export interface KibanaImportSavedObjectsError {
    error: pulumi.Input<inputs.KibanaImportSavedObjectsErrorError>;
    id: pulumi.Input<string>;
    meta: pulumi.Input<inputs.KibanaImportSavedObjectsErrorMeta>;
    title: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface KibanaImportSavedObjectsErrorError {
    type: pulumi.Input<string>;
}

export interface KibanaImportSavedObjectsErrorMeta {
    icon: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface KibanaImportSavedObjectsSuccessResult {
    destinationId: pulumi.Input<string>;
    id: pulumi.Input<string>;
    meta: pulumi.Input<inputs.KibanaImportSavedObjectsSuccessResultMeta>;
    type: pulumi.Input<string>;
}

export interface KibanaImportSavedObjectsSuccessResultMeta {
    icon: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface KibanaSecurityRoleElasticsearch {
    /**
     * List of the cluster privileges.
     */
    clusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of indices permissions entries.
     */
    indices?: pulumi.Input<pulumi.Input<inputs.KibanaSecurityRoleElasticsearchIndex>[]>;
    /**
     * A list of usernames the owners of this role can impersonate.
     */
    runAs?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KibanaSecurityRoleElasticsearchIndex {
    /**
     * The document fields that the owners of the role have read access to.
     */
    fieldSecurity?: pulumi.Input<inputs.KibanaSecurityRoleElasticsearchIndexFieldSecurity>;
    /**
     * A list of indices (or index name patterns) to which the permissions in this entry apply.
     */
    names: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The index level privileges that the owners of the role have on the specified indices.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A search query that defines the documents the owners of the role have read access to.
     */
    query?: pulumi.Input<string>;
}

export interface KibanaSecurityRoleElasticsearchIndexFieldSecurity {
    /**
     * List of the fields to which the grants will not be applied.
     */
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of the fields to grant the access to.
     */
    grants?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KibanaSecurityRoleKibana {
    /**
     * A base privilege. When specified, the base must be ["all"] or ["read"]. When the base privileges are specified, you are unable to use the "feature" section.
     */
    bases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of privileges for specific features. When the feature privileges are specified, you are unable to use the "base" section.
     */
    features?: pulumi.Input<pulumi.Input<inputs.KibanaSecurityRoleKibanaFeature>[]>;
    /**
     * The spaces to apply the privileges to. To grant access to all spaces, set to ["*"], or omit the value.
     */
    spaces: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KibanaSecurityRoleKibanaFeature {
    /**
     * Feature name.
     */
    name: pulumi.Input<string>;
    /**
     * Feature privileges.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KibanaSloApmAvailabilityIndicator {
    environment: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    service: pulumi.Input<string>;
    transactionName: pulumi.Input<string>;
    transactionType: pulumi.Input<string>;
}

export interface KibanaSloApmLatencyIndicator {
    environment: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    service: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    transactionName: pulumi.Input<string>;
    transactionType: pulumi.Input<string>;
}

export interface KibanaSloHistogramCustomIndicator {
    filter?: pulumi.Input<string>;
    good: pulumi.Input<inputs.KibanaSloHistogramCustomIndicatorGood>;
    index: pulumi.Input<string>;
    timestampField?: pulumi.Input<string>;
    total: pulumi.Input<inputs.KibanaSloHistogramCustomIndicatorTotal>;
}

export interface KibanaSloHistogramCustomIndicatorGood {
    aggregation: pulumi.Input<string>;
    field: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    from?: pulumi.Input<number>;
    to?: pulumi.Input<number>;
}

export interface KibanaSloHistogramCustomIndicatorTotal {
    aggregation: pulumi.Input<string>;
    field: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    from?: pulumi.Input<number>;
    to?: pulumi.Input<number>;
}

export interface KibanaSloKqlCustomIndicator {
    filter?: pulumi.Input<string>;
    good?: pulumi.Input<string>;
    index: pulumi.Input<string>;
    timestampField?: pulumi.Input<string>;
    total?: pulumi.Input<string>;
}

export interface KibanaSloMetricCustomIndicator {
    filter?: pulumi.Input<string>;
    good: pulumi.Input<inputs.KibanaSloMetricCustomIndicatorGood>;
    index: pulumi.Input<string>;
    timestampField?: pulumi.Input<string>;
    total: pulumi.Input<inputs.KibanaSloMetricCustomIndicatorTotal>;
}

export interface KibanaSloMetricCustomIndicatorGood {
    equation: pulumi.Input<string>;
    metrics: pulumi.Input<pulumi.Input<inputs.KibanaSloMetricCustomIndicatorGoodMetric>[]>;
}

export interface KibanaSloMetricCustomIndicatorGoodMetric {
    aggregation: pulumi.Input<string>;
    field: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface KibanaSloMetricCustomIndicatorTotal {
    equation: pulumi.Input<string>;
    metrics: pulumi.Input<pulumi.Input<inputs.KibanaSloMetricCustomIndicatorTotalMetric>[]>;
}

export interface KibanaSloMetricCustomIndicatorTotalMetric {
    aggregation: pulumi.Input<string>;
    field: pulumi.Input<string>;
    filter?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface KibanaSloObjective {
    target: pulumi.Input<number>;
    timesliceTarget?: pulumi.Input<number>;
    timesliceWindow?: pulumi.Input<string>;
}

export interface KibanaSloSettings {
    frequency?: pulumi.Input<string>;
    syncDelay?: pulumi.Input<string>;
}

export interface KibanaSloTimeWindow {
    duration: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface KibanaSyntheticsMonitorAlert {
    status?: pulumi.Input<inputs.KibanaSyntheticsMonitorAlertStatus>;
    tls?: pulumi.Input<inputs.KibanaSyntheticsMonitorAlertTls>;
}

export interface KibanaSyntheticsMonitorAlertStatus {
    enabled?: pulumi.Input<boolean>;
}

export interface KibanaSyntheticsMonitorAlertTls {
    enabled?: pulumi.Input<boolean>;
}

export interface KibanaSyntheticsMonitorHttp {
    /**
     * The check request settings.. Raw JSON object, use `jsonencode` function to represent JSON
     */
    check?: pulumi.Input<string>;
    /**
     * Whether to ping using the ipv4 protocol.
     */
    ipv4?: pulumi.Input<boolean>;
    /**
     * Whether to ping using the ipv6 protocol.
     */
    ipv6?: pulumi.Input<boolean>;
    /**
     * The maximum number of redirects to follow. Default: `0`
     */
    maxRedirects?: pulumi.Input<number>;
    /**
     * The mode of the monitor. Can be "all" or "any". If you’re using a DNS-load balancer and want to ping every IP address for the specified hostname, you should use all.
     */
    mode?: pulumi.Input<string>;
    /**
     * The password for authenticating with the server. The credentials are passed with the request.
     */
    password?: pulumi.Input<string>;
    /**
     * Additional headers to send to proxies during CONNECT requests.. Raw JSON object, use `jsonencode` function to represent JSON
     */
    proxyHeader?: pulumi.Input<string>;
    /**
     * The URL of the proxy to use for this monitor.
     */
    proxyUrl?: pulumi.Input<string>;
    /**
     * Controls the indexing of the HTTP response body contents to the `http.response.body.contents` field.. Raw JSON object, use `jsonencode` function to represent JSON
     */
    response?: pulumi.Input<string>;
    /**
     * List of allowed SSL/TLS versions.
     */
    sslSupportedProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Controls the verification of server certificates.
     */
    sslVerificationMode?: pulumi.Input<string>;
    /**
     * URL to monitor.
     */
    url: pulumi.Input<string>;
    /**
     * The username for authenticating with the server. The credentials are passed with the request.
     */
    username?: pulumi.Input<string>;
}

export interface KibanaSyntheticsMonitorTcp {
    /**
     * The expected answer.
     */
    checkReceive?: pulumi.Input<string>;
    /**
     * An optional payload string to send to the remote host.
     */
    checkSend?: pulumi.Input<string>;
    /**
     * The host to monitor; it can be an IP address or a hostname. The host can include the port using a colon (e.g., "example.com:9200").
     */
    host: pulumi.Input<string>;
    /**
     * The URL of the SOCKS5 proxy to use when connecting to the server. The value must be a URL with a scheme of `socks5://`. If the SOCKS5 proxy server requires client authentication, then a username and password can be embedded in the URL. When using a proxy, hostnames are resolved on the proxy server instead of on the client. You can change this behavior by setting the `proxy_use_local_resolver` option.
     */
    proxyUrl?: pulumi.Input<string>;
    /**
     * A Boolean value that determines whether hostnames are resolved locally instead of being resolved on the proxy server. The default value is false, which means that name resolution occurs on the proxy server.
     */
    proxyUseLocalResolver?: pulumi.Input<boolean>;
    /**
     * List of allowed SSL/TLS versions.
     */
    sslSupportedProtocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Controls the verification of server certificates.
     */
    sslVerificationMode?: pulumi.Input<string>;
}

export interface KibanaSyntheticsPrivateLocationGeo {
    /**
     * The latitude of the location.
     */
    lat: pulumi.Input<number>;
    /**
     * The longitude of the location.
     */
    lon: pulumi.Input<number>;
}

export interface ProviderElasticsearch {
    /**
     * API Key to use for authentication to Elasticsearch
     */
    apiKey?: pulumi.Input<string>;
    /**
     * Bearer Token to use for authentication to Elasticsearch
     */
    bearerToken?: pulumi.Input<string>;
    /**
     * PEM-encoded custom Certificate Authority certificate
     */
    caData?: pulumi.Input<string>;
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    /**
     * PEM encoded certificate for client auth
     */
    certData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded certificate for client auth
     */
    certFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ES Client Authentication field to be used with the bearer token
     */
    esClientAuthentication?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * PEM encoded private key for client auth
     */
    keyData?: pulumi.Input<string>;
    /**
     * Path to a file containing the PEM encoded private key for client auth
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ProviderFleet {
    /**
     * API Key to use for authentication to Fleet.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * A list of paths to CA certificates to validate the certificate presented by the Fleet server.
     */
    caCerts?: pulumi.Input<pulumi.Input<string>[]>;
    endpoint?: pulumi.Input<string>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Password to use for API authentication to Fleet.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Fleet.
     */
    username?: pulumi.Input<string>;
}

export interface ProviderKibana {
    /**
     * API Key to use for authentication to Kibana
     */
    apiKey?: pulumi.Input<string>;
    /**
     * A list of paths to CA certificates to validate the certificate presented by the Kibana server.
     */
    caCerts?: pulumi.Input<pulumi.Input<string>[]>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * Password to use for API authentication to Kibana.
     */
    password?: pulumi.Input<string>;
    /**
     * Username to use for API authentication to Kibana.
     */
    username?: pulumi.Input<string>;
}
export namespace config {
}
