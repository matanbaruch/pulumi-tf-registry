// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getElasticsearchIngestProcessorPipeline(args: GetElasticsearchIngestProcessorPipelineArgs, opts?: pulumi.InvokeOptions): Promise<GetElasticsearchIngestProcessorPipelineResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("elasticstack:index/getElasticsearchIngestProcessorPipeline:getElasticsearchIngestProcessorPipeline", {
        "description": args.description,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "name": args.name,
        "onFailures": args.onFailures,
        "tag": args.tag,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getElasticsearchIngestProcessorPipeline.
 */
export interface GetElasticsearchIngestProcessorPipelineArgs {
    description?: string;
    if?: string;
    ignoreFailure?: boolean;
    name: string;
    onFailures?: string[];
    tag?: string;
}

/**
 * A collection of values returned by getElasticsearchIngestProcessorPipeline.
 */
export interface GetElasticsearchIngestProcessorPipelineResult {
    readonly description?: string;
    readonly id: string;
    readonly if?: string;
    readonly ignoreFailure?: boolean;
    readonly json: string;
    readonly name: string;
    readonly onFailures?: string[];
    readonly tag?: string;
}
export function getElasticsearchIngestProcessorPipelineOutput(args: GetElasticsearchIngestProcessorPipelineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetElasticsearchIngestProcessorPipelineResult> {
    return pulumi.output(args).apply((a: any) => getElasticsearchIngestProcessorPipeline(a, opts))
}

/**
 * A collection of arguments for invoking getElasticsearchIngestProcessorPipeline.
 */
export interface GetElasticsearchIngestProcessorPipelineOutputArgs {
    description?: pulumi.Input<string>;
    if?: pulumi.Input<string>;
    ignoreFailure?: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    tag?: pulumi.Input<string>;
}
