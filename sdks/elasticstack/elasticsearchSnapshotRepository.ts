// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElasticsearchSnapshotRepository extends pulumi.CustomResource {
    /**
     * Get an existing ElasticsearchSnapshotRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElasticsearchSnapshotRepositoryState, opts?: pulumi.CustomResourceOptions): ElasticsearchSnapshotRepository {
        return new ElasticsearchSnapshotRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'elasticstack:index/elasticsearchSnapshotRepository:ElasticsearchSnapshotRepository';

    /**
     * Returns true if the given object is an instance of ElasticsearchSnapshotRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElasticsearchSnapshotRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElasticsearchSnapshotRepository.__pulumiType;
    }

    /**
     * Support for using Azure Blob storage as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
     */
    public readonly azure!: pulumi.Output<outputs.ElasticsearchSnapshotRepositoryAzure | undefined>;
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    public readonly elasticsearchConnection!: pulumi.Output<outputs.ElasticsearchSnapshotRepositoryElasticsearchConnection | undefined>;
    /**
     * Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must
     * be accessible to all master and data nodes in the cluster.
     */
    public readonly fs!: pulumi.Output<outputs.ElasticsearchSnapshotRepositoryFs | undefined>;
    /**
     * Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
     */
    public readonly gcs!: pulumi.Output<outputs.ElasticsearchSnapshotRepositoryGcs | undefined>;
    /**
     * Support for using HDFS File System as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
     */
    public readonly hdfs!: pulumi.Output<outputs.ElasticsearchSnapshotRepositoryHdfs | undefined>;
    /**
     * Name of the snapshot repository to register or update.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Support for using AWS S3 as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
     */
    public readonly s3!: pulumi.Output<outputs.ElasticsearchSnapshotRepositoryS3 | undefined>;
    /**
     * URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore
     * snapshots from the repository but cannot write or create snapshots in it.
     */
    public readonly url!: pulumi.Output<outputs.ElasticsearchSnapshotRepositoryUrl | undefined>;
    /**
     * If true, the request verifies the repository is functional on all master and data nodes in the cluster.
     */
    public readonly verify!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ElasticsearchSnapshotRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ElasticsearchSnapshotRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElasticsearchSnapshotRepositoryArgs | ElasticsearchSnapshotRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElasticsearchSnapshotRepositoryState | undefined;
            resourceInputs["azure"] = state ? state.azure : undefined;
            resourceInputs["elasticsearchConnection"] = state ? state.elasticsearchConnection : undefined;
            resourceInputs["fs"] = state ? state.fs : undefined;
            resourceInputs["gcs"] = state ? state.gcs : undefined;
            resourceInputs["hdfs"] = state ? state.hdfs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["s3"] = state ? state.s3 : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["verify"] = state ? state.verify : undefined;
        } else {
            const args = argsOrState as ElasticsearchSnapshotRepositoryArgs | undefined;
            resourceInputs["azure"] = args ? args.azure : undefined;
            resourceInputs["elasticsearchConnection"] = args ? args.elasticsearchConnection : undefined;
            resourceInputs["fs"] = args ? args.fs : undefined;
            resourceInputs["gcs"] = args ? args.gcs : undefined;
            resourceInputs["hdfs"] = args ? args.hdfs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["s3"] = args ? args.s3 : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["verify"] = args ? args.verify : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElasticsearchSnapshotRepository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ElasticsearchSnapshotRepository resources.
 */
export interface ElasticsearchSnapshotRepositoryState {
    /**
     * Support for using Azure Blob storage as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
     */
    azure?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryAzure>;
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryElasticsearchConnection>;
    /**
     * Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must
     * be accessible to all master and data nodes in the cluster.
     */
    fs?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryFs>;
    /**
     * Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
     */
    gcs?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryGcs>;
    /**
     * Support for using HDFS File System as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
     */
    hdfs?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryHdfs>;
    /**
     * Name of the snapshot repository to register or update.
     */
    name?: pulumi.Input<string>;
    /**
     * Support for using AWS S3 as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
     */
    s3?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryS3>;
    /**
     * URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore
     * snapshots from the repository but cannot write or create snapshots in it.
     */
    url?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryUrl>;
    /**
     * If true, the request verifies the repository is functional on all master and data nodes in the cluster.
     */
    verify?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ElasticsearchSnapshotRepository resource.
 */
export interface ElasticsearchSnapshotRepositoryArgs {
    /**
     * Support for using Azure Blob storage as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
     */
    azure?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryAzure>;
    /**
     * Elasticsearch connection configuration block. This property will be removed in a future provider version. Configure the
     * Elasticsearch connection via the provider configuration instead.
     *
     * @deprecated Deprecated
     */
    elasticsearchConnection?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryElasticsearchConnection>;
    /**
     * Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must
     * be accessible to all master and data nodes in the cluster.
     */
    fs?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryFs>;
    /**
     * Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
     */
    gcs?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryGcs>;
    /**
     * Support for using HDFS File System as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
     */
    hdfs?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryHdfs>;
    /**
     * Name of the snapshot repository to register or update.
     */
    name?: pulumi.Input<string>;
    /**
     * Support for using AWS S3 as a repository for Snapshot/Restore. See:
     * https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
     */
    s3?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryS3>;
    /**
     * URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore
     * snapshots from the repository but cannot write or create snapshots in it.
     */
    url?: pulumi.Input<inputs.ElasticsearchSnapshotRepositoryUrl>;
    /**
     * If true, the request verifies the repository is functional on all master and data nodes in the cluster.
     */
    verify?: pulumi.Input<boolean>;
}
