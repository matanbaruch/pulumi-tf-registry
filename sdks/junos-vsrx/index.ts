// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationsApplicationDestinationPortArgs, ApplicationsApplicationDestinationPortState } from "./applicationsApplicationDestinationPort";
export type ApplicationsApplicationDestinationPort = import("./applicationsApplicationDestinationPort").ApplicationsApplicationDestinationPort;
export const ApplicationsApplicationDestinationPort: typeof import("./applicationsApplicationDestinationPort").ApplicationsApplicationDestinationPort = null as any;
utilities.lazyLoad(exports, ["ApplicationsApplicationDestinationPort"], () => require("./applicationsApplicationDestinationPort"));

export { ApplicationsApplicationProtocolArgs, ApplicationsApplicationProtocolState } from "./applicationsApplicationProtocol";
export type ApplicationsApplicationProtocol = import("./applicationsApplicationProtocol").ApplicationsApplicationProtocol;
export const ApplicationsApplicationProtocol: typeof import("./applicationsApplicationProtocol").ApplicationsApplicationProtocol = null as any;
utilities.lazyLoad(exports, ["ApplicationsApplicationProtocol"], () => require("./applicationsApplicationProtocol"));

export { CommitArgs, CommitState } from "./commit";
export type Commit = import("./commit").Commit;
export const Commit: typeof import("./commit").Commit = null as any;
utilities.lazyLoad(exports, ["Commit"], () => require("./commit"));

export { DestroycommitArgs, DestroycommitState } from "./destroycommit";
export type Destroycommit = import("./destroycommit").Destroycommit;
export const Destroycommit: typeof import("./destroycommit").Destroycommit = null as any;
utilities.lazyLoad(exports, ["Destroycommit"], () => require("./destroycommit"));

export { FirewallFilterTermFromProtocolArgs, FirewallFilterTermFromProtocolState } from "./firewallFilterTermFromProtocol";
export type FirewallFilterTermFromProtocol = import("./firewallFilterTermFromProtocol").FirewallFilterTermFromProtocol;
export const FirewallFilterTermFromProtocol: typeof import("./firewallFilterTermFromProtocol").FirewallFilterTermFromProtocol = null as any;
utilities.lazyLoad(exports, ["FirewallFilterTermFromProtocol"], () => require("./firewallFilterTermFromProtocol"));

export { FirewallFilterTermThenAcceptArgs, FirewallFilterTermThenAcceptState } from "./firewallFilterTermThenAccept";
export type FirewallFilterTermThenAccept = import("./firewallFilterTermThenAccept").FirewallFilterTermThenAccept;
export const FirewallFilterTermThenAccept: typeof import("./firewallFilterTermThenAccept").FirewallFilterTermThenAccept = null as any;
utilities.lazyLoad(exports, ["FirewallFilterTermThenAccept"], () => require("./firewallFilterTermThenAccept"));

export { FirewallFilterTermThenSampleArgs, FirewallFilterTermThenSampleState } from "./firewallFilterTermThenSample";
export type FirewallFilterTermThenSample = import("./firewallFilterTermThenSample").FirewallFilterTermThenSample;
export const FirewallFilterTermThenSample: typeof import("./firewallFilterTermThenSample").FirewallFilterTermThenSample = null as any;
utilities.lazyLoad(exports, ["FirewallFilterTermThenSample"], () => require("./firewallFilterTermThenSample"));

export { ForwardingOptionsSamplingFamilyInetOutputFileFilenameArgs, ForwardingOptionsSamplingFamilyInetOutputFileFilenameState } from "./forwardingOptionsSamplingFamilyInetOutputFileFilename";
export type ForwardingOptionsSamplingFamilyInetOutputFileFilename = import("./forwardingOptionsSamplingFamilyInetOutputFileFilename").ForwardingOptionsSamplingFamilyInetOutputFileFilename;
export const ForwardingOptionsSamplingFamilyInetOutputFileFilename: typeof import("./forwardingOptionsSamplingFamilyInetOutputFileFilename").ForwardingOptionsSamplingFamilyInetOutputFileFilename = null as any;
utilities.lazyLoad(exports, ["ForwardingOptionsSamplingFamilyInetOutputFileFilename"], () => require("./forwardingOptionsSamplingFamilyInetOutputFileFilename"));

export { ForwardingOptionsSamplingInputRateArgs, ForwardingOptionsSamplingInputRateState } from "./forwardingOptionsSamplingInputRate";
export type ForwardingOptionsSamplingInputRate = import("./forwardingOptionsSamplingInputRate").ForwardingOptionsSamplingInputRate;
export const ForwardingOptionsSamplingInputRate: typeof import("./forwardingOptionsSamplingInputRate").ForwardingOptionsSamplingInputRate = null as any;
utilities.lazyLoad(exports, ["ForwardingOptionsSamplingInputRate"], () => require("./forwardingOptionsSamplingInputRate"));

export { InterfacesInterfaceDescriptionArgs, InterfacesInterfaceDescriptionState } from "./interfacesInterfaceDescription";
export type InterfacesInterfaceDescription = import("./interfacesInterfaceDescription").InterfacesInterfaceDescription;
export const InterfacesInterfaceDescription: typeof import("./interfacesInterfaceDescription").InterfacesInterfaceDescription = null as any;
utilities.lazyLoad(exports, ["InterfacesInterfaceDescription"], () => require("./interfacesInterfaceDescription"));

export { InterfacesInterfaceUnitFamilyInetAddressNameArgs, InterfacesInterfaceUnitFamilyInetAddressNameState } from "./interfacesInterfaceUnitFamilyInetAddressName";
export type InterfacesInterfaceUnitFamilyInetAddressName = import("./interfacesInterfaceUnitFamilyInetAddressName").InterfacesInterfaceUnitFamilyInetAddressName;
export const InterfacesInterfaceUnitFamilyInetAddressName: typeof import("./interfacesInterfaceUnitFamilyInetAddressName").InterfacesInterfaceUnitFamilyInetAddressName = null as any;
utilities.lazyLoad(exports, ["InterfacesInterfaceUnitFamilyInetAddressName"], () => require("./interfacesInterfaceUnitFamilyInetAddressName"));

export { PolicyOptionsPolicyStatementTermFromInstanceArgs, PolicyOptionsPolicyStatementTermFromInstanceState } from "./policyOptionsPolicyStatementTermFromInstance";
export type PolicyOptionsPolicyStatementTermFromInstance = import("./policyOptionsPolicyStatementTermFromInstance").PolicyOptionsPolicyStatementTermFromInstance;
export const PolicyOptionsPolicyStatementTermFromInstance: typeof import("./policyOptionsPolicyStatementTermFromInstance").PolicyOptionsPolicyStatementTermFromInstance = null as any;
utilities.lazyLoad(exports, ["PolicyOptionsPolicyStatementTermFromInstance"], () => require("./policyOptionsPolicyStatementTermFromInstance"));

export { PolicyOptionsPolicyStatementTermFromRouteFilterAddressArgs, PolicyOptionsPolicyStatementTermFromRouteFilterAddressState } from "./policyOptionsPolicyStatementTermFromRouteFilterAddress";
export type PolicyOptionsPolicyStatementTermFromRouteFilterAddress = import("./policyOptionsPolicyStatementTermFromRouteFilterAddress").PolicyOptionsPolicyStatementTermFromRouteFilterAddress;
export const PolicyOptionsPolicyStatementTermFromRouteFilterAddress: typeof import("./policyOptionsPolicyStatementTermFromRouteFilterAddress").PolicyOptionsPolicyStatementTermFromRouteFilterAddress = null as any;
utilities.lazyLoad(exports, ["PolicyOptionsPolicyStatementTermFromRouteFilterAddress"], () => require("./policyOptionsPolicyStatementTermFromRouteFilterAddress"));

export { PolicyOptionsPolicyStatementTermThenAcceptArgs, PolicyOptionsPolicyStatementTermThenAcceptState } from "./policyOptionsPolicyStatementTermThenAccept";
export type PolicyOptionsPolicyStatementTermThenAccept = import("./policyOptionsPolicyStatementTermThenAccept").PolicyOptionsPolicyStatementTermThenAccept;
export const PolicyOptionsPolicyStatementTermThenAccept: typeof import("./policyOptionsPolicyStatementTermThenAccept").PolicyOptionsPolicyStatementTermThenAccept = null as any;
utilities.lazyLoad(exports, ["PolicyOptionsPolicyStatementTermThenAccept"], () => require("./policyOptionsPolicyStatementTermThenAccept"));

export { PolicyOptionsPolicyStatementTermThenRejectArgs, PolicyOptionsPolicyStatementTermThenRejectState } from "./policyOptionsPolicyStatementTermThenReject";
export type PolicyOptionsPolicyStatementTermThenReject = import("./policyOptionsPolicyStatementTermThenReject").PolicyOptionsPolicyStatementTermThenReject;
export const PolicyOptionsPolicyStatementTermThenReject: typeof import("./policyOptionsPolicyStatementTermThenReject").PolicyOptionsPolicyStatementTermThenReject = null as any;
utilities.lazyLoad(exports, ["PolicyOptionsPolicyStatementTermThenReject"], () => require("./policyOptionsPolicyStatementTermThenReject"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoutingInstancesInstanceInstanceTypeArgs, RoutingInstancesInstanceInstanceTypeState } from "./routingInstancesInstanceInstanceType";
export type RoutingInstancesInstanceInstanceType = import("./routingInstancesInstanceInstanceType").RoutingInstancesInstanceInstanceType;
export const RoutingInstancesInstanceInstanceType: typeof import("./routingInstancesInstanceInstanceType").RoutingInstancesInstanceInstanceType = null as any;
utilities.lazyLoad(exports, ["RoutingInstancesInstanceInstanceType"], () => require("./routingInstancesInstanceInstanceType"));

export { RoutingInstancesInstanceInterfaceNameArgs, RoutingInstancesInstanceInterfaceNameState } from "./routingInstancesInstanceInterfaceName";
export type RoutingInstancesInstanceInterfaceName = import("./routingInstancesInstanceInterfaceName").RoutingInstancesInstanceInterfaceName;
export const RoutingInstancesInstanceInterfaceName: typeof import("./routingInstancesInstanceInterfaceName").RoutingInstancesInstanceInterfaceName = null as any;
utilities.lazyLoad(exports, ["RoutingInstancesInstanceInterfaceName"], () => require("./routingInstancesInstanceInterfaceName"));

export { RoutingInstancesInstanceRoutingOptionsInstanceImportArgs, RoutingInstancesInstanceRoutingOptionsInstanceImportState } from "./routingInstancesInstanceRoutingOptionsInstanceImport";
export type RoutingInstancesInstanceRoutingOptionsInstanceImport = import("./routingInstancesInstanceRoutingOptionsInstanceImport").RoutingInstancesInstanceRoutingOptionsInstanceImport;
export const RoutingInstancesInstanceRoutingOptionsInstanceImport: typeof import("./routingInstancesInstanceRoutingOptionsInstanceImport").RoutingInstancesInstanceRoutingOptionsInstanceImport = null as any;
utilities.lazyLoad(exports, ["RoutingInstancesInstanceRoutingOptionsInstanceImport"], () => require("./routingInstancesInstanceRoutingOptionsInstanceImport"));

export { RoutingInstancesInstanceRoutingOptionsStaticRouteNextHopArgs, RoutingInstancesInstanceRoutingOptionsStaticRouteNextHopState } from "./routingInstancesInstanceRoutingOptionsStaticRouteNextHop";
export type RoutingInstancesInstanceRoutingOptionsStaticRouteNextHop = import("./routingInstancesInstanceRoutingOptionsStaticRouteNextHop").RoutingInstancesInstanceRoutingOptionsStaticRouteNextHop;
export const RoutingInstancesInstanceRoutingOptionsStaticRouteNextHop: typeof import("./routingInstancesInstanceRoutingOptionsStaticRouteNextHop").RoutingInstancesInstanceRoutingOptionsStaticRouteNextHop = null as any;
utilities.lazyLoad(exports, ["RoutingInstancesInstanceRoutingOptionsStaticRouteNextHop"], () => require("./routingInstancesInstanceRoutingOptionsStaticRouteNextHop"));

export { RoutingInstancesInstanceRoutingOptionsStaticRouteNextTableArgs, RoutingInstancesInstanceRoutingOptionsStaticRouteNextTableState } from "./routingInstancesInstanceRoutingOptionsStaticRouteNextTable";
export type RoutingInstancesInstanceRoutingOptionsStaticRouteNextTable = import("./routingInstancesInstanceRoutingOptionsStaticRouteNextTable").RoutingInstancesInstanceRoutingOptionsStaticRouteNextTable;
export const RoutingInstancesInstanceRoutingOptionsStaticRouteNextTable: typeof import("./routingInstancesInstanceRoutingOptionsStaticRouteNextTable").RoutingInstancesInstanceRoutingOptionsStaticRouteNextTable = null as any;
utilities.lazyLoad(exports, ["RoutingInstancesInstanceRoutingOptionsStaticRouteNextTable"], () => require("./routingInstancesInstanceRoutingOptionsStaticRouteNextTable"));

export { SecurityAddressBookAddressIpPrefixArgs, SecurityAddressBookAddressIpPrefixState } from "./securityAddressBookAddressIpPrefix";
export type SecurityAddressBookAddressIpPrefix = import("./securityAddressBookAddressIpPrefix").SecurityAddressBookAddressIpPrefix;
export const SecurityAddressBookAddressIpPrefix: typeof import("./securityAddressBookAddressIpPrefix").SecurityAddressBookAddressIpPrefix = null as any;
utilities.lazyLoad(exports, ["SecurityAddressBookAddressIpPrefix"], () => require("./securityAddressBookAddressIpPrefix"));

export { SecurityAddressBookAddressRangeAddressToRangeHighArgs, SecurityAddressBookAddressRangeAddressToRangeHighState } from "./securityAddressBookAddressRangeAddressToRangeHigh";
export type SecurityAddressBookAddressRangeAddressToRangeHigh = import("./securityAddressBookAddressRangeAddressToRangeHigh").SecurityAddressBookAddressRangeAddressToRangeHigh;
export const SecurityAddressBookAddressRangeAddressToRangeHigh: typeof import("./securityAddressBookAddressRangeAddressToRangeHigh").SecurityAddressBookAddressRangeAddressToRangeHigh = null as any;
utilities.lazyLoad(exports, ["SecurityAddressBookAddressRangeAddressToRangeHigh"], () => require("./securityAddressBookAddressRangeAddressToRangeHigh"));

export { SecurityAddressBookAddressSetAddressNameArgs, SecurityAddressBookAddressSetAddressNameState } from "./securityAddressBookAddressSetAddressName";
export type SecurityAddressBookAddressSetAddressName = import("./securityAddressBookAddressSetAddressName").SecurityAddressBookAddressSetAddressName;
export const SecurityAddressBookAddressSetAddressName: typeof import("./securityAddressBookAddressSetAddressName").SecurityAddressBookAddressSetAddressName = null as any;
utilities.lazyLoad(exports, ["SecurityAddressBookAddressSetAddressName"], () => require("./securityAddressBookAddressSetAddressName"));

export { SecurityNatDestinationPoolAddressIpaddrArgs, SecurityNatDestinationPoolAddressIpaddrState } from "./securityNatDestinationPoolAddressIpaddr";
export type SecurityNatDestinationPoolAddressIpaddr = import("./securityNatDestinationPoolAddressIpaddr").SecurityNatDestinationPoolAddressIpaddr;
export const SecurityNatDestinationPoolAddressIpaddr: typeof import("./securityNatDestinationPoolAddressIpaddr").SecurityNatDestinationPoolAddressIpaddr = null as any;
utilities.lazyLoad(exports, ["SecurityNatDestinationPoolAddressIpaddr"], () => require("./securityNatDestinationPoolAddressIpaddr"));

export { SecurityNatDestinationPoolAddressPortArgs, SecurityNatDestinationPoolAddressPortState } from "./securityNatDestinationPoolAddressPort";
export type SecurityNatDestinationPoolAddressPort = import("./securityNatDestinationPoolAddressPort").SecurityNatDestinationPoolAddressPort;
export const SecurityNatDestinationPoolAddressPort: typeof import("./securityNatDestinationPoolAddressPort").SecurityNatDestinationPoolAddressPort = null as any;
utilities.lazyLoad(exports, ["SecurityNatDestinationPoolAddressPort"], () => require("./securityNatDestinationPoolAddressPort"));

export { SecurityNatDestinationPoolRoutingInstanceRiNameArgs, SecurityNatDestinationPoolRoutingInstanceRiNameState } from "./securityNatDestinationPoolRoutingInstanceRiName";
export type SecurityNatDestinationPoolRoutingInstanceRiName = import("./securityNatDestinationPoolRoutingInstanceRiName").SecurityNatDestinationPoolRoutingInstanceRiName;
export const SecurityNatDestinationPoolRoutingInstanceRiName: typeof import("./securityNatDestinationPoolRoutingInstanceRiName").SecurityNatDestinationPoolRoutingInstanceRiName = null as any;
utilities.lazyLoad(exports, ["SecurityNatDestinationPoolRoutingInstanceRiName"], () => require("./securityNatDestinationPoolRoutingInstanceRiName"));

export { SecurityNatDestinationRuleSetFromInterfaceArgs, SecurityNatDestinationRuleSetFromInterfaceState } from "./securityNatDestinationRuleSetFromInterface";
export type SecurityNatDestinationRuleSetFromInterface = import("./securityNatDestinationRuleSetFromInterface").SecurityNatDestinationRuleSetFromInterface;
export const SecurityNatDestinationRuleSetFromInterface: typeof import("./securityNatDestinationRuleSetFromInterface").SecurityNatDestinationRuleSetFromInterface = null as any;
utilities.lazyLoad(exports, ["SecurityNatDestinationRuleSetFromInterface"], () => require("./securityNatDestinationRuleSetFromInterface"));

export { SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddrArgs, SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddrState } from "./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr";
export type SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr = import("./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr").SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr;
export const SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr: typeof import("./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr").SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr = null as any;
utilities.lazyLoad(exports, ["SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr"], () => require("./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr"));

export { SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortNameArgs, SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortNameState } from "./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName";
export type SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName = import("./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName").SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName;
export const SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName: typeof import("./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName").SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName = null as any;
utilities.lazyLoad(exports, ["SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName"], () => require("./securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName"));

export { SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolNameArgs, SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolNameState } from "./securityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName";
export type SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName = import("./securityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName").SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName;
export const SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName: typeof import("./securityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName").SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName = null as any;
utilities.lazyLoad(exports, ["SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName"], () => require("./securityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName"));

export { SecurityNatProxyArpInterfaceAddressToIpaddrArgs, SecurityNatProxyArpInterfaceAddressToIpaddrState } from "./securityNatProxyArpInterfaceAddressToIpaddr";
export type SecurityNatProxyArpInterfaceAddressToIpaddr = import("./securityNatProxyArpInterfaceAddressToIpaddr").SecurityNatProxyArpInterfaceAddressToIpaddr;
export const SecurityNatProxyArpInterfaceAddressToIpaddr: typeof import("./securityNatProxyArpInterfaceAddressToIpaddr").SecurityNatProxyArpInterfaceAddressToIpaddr = null as any;
utilities.lazyLoad(exports, ["SecurityNatProxyArpInterfaceAddressToIpaddr"], () => require("./securityNatProxyArpInterfaceAddressToIpaddr"));

export { SecurityNatSourcePoolAddressToIpaddrArgs, SecurityNatSourcePoolAddressToIpaddrState } from "./securityNatSourcePoolAddressToIpaddr";
export type SecurityNatSourcePoolAddressToIpaddr = import("./securityNatSourcePoolAddressToIpaddr").SecurityNatSourcePoolAddressToIpaddr;
export const SecurityNatSourcePoolAddressToIpaddr: typeof import("./securityNatSourcePoolAddressToIpaddr").SecurityNatSourcePoolAddressToIpaddr = null as any;
utilities.lazyLoad(exports, ["SecurityNatSourcePoolAddressToIpaddr"], () => require("./securityNatSourcePoolAddressToIpaddr"));

export { SecurityNatSourceRuleSetFromZoneArgs, SecurityNatSourceRuleSetFromZoneState } from "./securityNatSourceRuleSetFromZone";
export type SecurityNatSourceRuleSetFromZone = import("./securityNatSourceRuleSetFromZone").SecurityNatSourceRuleSetFromZone;
export const SecurityNatSourceRuleSetFromZone: typeof import("./securityNatSourceRuleSetFromZone").SecurityNatSourceRuleSetFromZone = null as any;
utilities.lazyLoad(exports, ["SecurityNatSourceRuleSetFromZone"], () => require("./securityNatSourceRuleSetFromZone"));

export { SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddressArgs, SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddressState } from "./securityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress";
export type SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress = import("./securityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress").SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress;
export const SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress: typeof import("./securityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress").SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress = null as any;
utilities.lazyLoad(exports, ["SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress"], () => require("./securityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress"));

export { SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolNameArgs, SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolNameState } from "./securityNatSourceRuleSetRuleThenSourceNatPoolPoolName";
export type SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolName = import("./securityNatSourceRuleSetRuleThenSourceNatPoolPoolName").SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolName;
export const SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolName: typeof import("./securityNatSourceRuleSetRuleThenSourceNatPoolPoolName").SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolName = null as any;
utilities.lazyLoad(exports, ["SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolName"], () => require("./securityNatSourceRuleSetRuleThenSourceNatPoolPoolName"));

export { SecurityNatSourceRuleSetToZoneArgs, SecurityNatSourceRuleSetToZoneState } from "./securityNatSourceRuleSetToZone";
export type SecurityNatSourceRuleSetToZone = import("./securityNatSourceRuleSetToZone").SecurityNatSourceRuleSetToZone;
export const SecurityNatSourceRuleSetToZone: typeof import("./securityNatSourceRuleSetToZone").SecurityNatSourceRuleSetToZone = null as any;
utilities.lazyLoad(exports, ["SecurityNatSourceRuleSetToZone"], () => require("./securityNatSourceRuleSetToZone"));

export { SecurityPoliciesPolicyPolicyMatchApplicationArgs, SecurityPoliciesPolicyPolicyMatchApplicationState } from "./securityPoliciesPolicyPolicyMatchApplication";
export type SecurityPoliciesPolicyPolicyMatchApplication = import("./securityPoliciesPolicyPolicyMatchApplication").SecurityPoliciesPolicyPolicyMatchApplication;
export const SecurityPoliciesPolicyPolicyMatchApplication: typeof import("./securityPoliciesPolicyPolicyMatchApplication").SecurityPoliciesPolicyPolicyMatchApplication = null as any;
utilities.lazyLoad(exports, ["SecurityPoliciesPolicyPolicyMatchApplication"], () => require("./securityPoliciesPolicyPolicyMatchApplication"));

export { SecurityPoliciesPolicyPolicyMatchDestinationAddressArgs, SecurityPoliciesPolicyPolicyMatchDestinationAddressState } from "./securityPoliciesPolicyPolicyMatchDestinationAddress";
export type SecurityPoliciesPolicyPolicyMatchDestinationAddress = import("./securityPoliciesPolicyPolicyMatchDestinationAddress").SecurityPoliciesPolicyPolicyMatchDestinationAddress;
export const SecurityPoliciesPolicyPolicyMatchDestinationAddress: typeof import("./securityPoliciesPolicyPolicyMatchDestinationAddress").SecurityPoliciesPolicyPolicyMatchDestinationAddress = null as any;
utilities.lazyLoad(exports, ["SecurityPoliciesPolicyPolicyMatchDestinationAddress"], () => require("./securityPoliciesPolicyPolicyMatchDestinationAddress"));

export { SecurityPoliciesPolicyPolicyMatchSourceAddressArgs, SecurityPoliciesPolicyPolicyMatchSourceAddressState } from "./securityPoliciesPolicyPolicyMatchSourceAddress";
export type SecurityPoliciesPolicyPolicyMatchSourceAddress = import("./securityPoliciesPolicyPolicyMatchSourceAddress").SecurityPoliciesPolicyPolicyMatchSourceAddress;
export const SecurityPoliciesPolicyPolicyMatchSourceAddress: typeof import("./securityPoliciesPolicyPolicyMatchSourceAddress").SecurityPoliciesPolicyPolicyMatchSourceAddress = null as any;
utilities.lazyLoad(exports, ["SecurityPoliciesPolicyPolicyMatchSourceAddress"], () => require("./securityPoliciesPolicyPolicyMatchSourceAddress"));

export { SecurityPoliciesPolicyPolicyThenCountApplyGroupsArgs, SecurityPoliciesPolicyPolicyThenCountApplyGroupsState } from "./securityPoliciesPolicyPolicyThenCountApplyGroups";
export type SecurityPoliciesPolicyPolicyThenCountApplyGroups = import("./securityPoliciesPolicyPolicyThenCountApplyGroups").SecurityPoliciesPolicyPolicyThenCountApplyGroups;
export const SecurityPoliciesPolicyPolicyThenCountApplyGroups: typeof import("./securityPoliciesPolicyPolicyThenCountApplyGroups").SecurityPoliciesPolicyPolicyThenCountApplyGroups = null as any;
utilities.lazyLoad(exports, ["SecurityPoliciesPolicyPolicyThenCountApplyGroups"], () => require("./securityPoliciesPolicyPolicyThenCountApplyGroups"));

export { SecurityPoliciesPolicyPolicyThenDenyArgs, SecurityPoliciesPolicyPolicyThenDenyState } from "./securityPoliciesPolicyPolicyThenDeny";
export type SecurityPoliciesPolicyPolicyThenDeny = import("./securityPoliciesPolicyPolicyThenDeny").SecurityPoliciesPolicyPolicyThenDeny;
export const SecurityPoliciesPolicyPolicyThenDeny: typeof import("./securityPoliciesPolicyPolicyThenDeny").SecurityPoliciesPolicyPolicyThenDeny = null as any;
utilities.lazyLoad(exports, ["SecurityPoliciesPolicyPolicyThenDeny"], () => require("./securityPoliciesPolicyPolicyThenDeny"));

export { SecurityPoliciesPolicyPolicyThenLogSessionInitArgs, SecurityPoliciesPolicyPolicyThenLogSessionInitState } from "./securityPoliciesPolicyPolicyThenLogSessionInit";
export type SecurityPoliciesPolicyPolicyThenLogSessionInit = import("./securityPoliciesPolicyPolicyThenLogSessionInit").SecurityPoliciesPolicyPolicyThenLogSessionInit;
export const SecurityPoliciesPolicyPolicyThenLogSessionInit: typeof import("./securityPoliciesPolicyPolicyThenLogSessionInit").SecurityPoliciesPolicyPolicyThenLogSessionInit = null as any;
utilities.lazyLoad(exports, ["SecurityPoliciesPolicyPolicyThenLogSessionInit"], () => require("./securityPoliciesPolicyPolicyThenLogSessionInit"));

export { SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicyArgs, SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicyState } from "./securityPoliciesPolicyPolicyThenPermitTunnelPairPolicy";
export type SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicy = import("./securityPoliciesPolicyPolicyThenPermitTunnelPairPolicy").SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicy;
export const SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicy: typeof import("./securityPoliciesPolicyPolicyThenPermitTunnelPairPolicy").SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicy"], () => require("./securityPoliciesPolicyPolicyThenPermitTunnelPairPolicy"));

export { SecurityZonesSecurityZoneHostInboundTrafficSystemServicesNameArgs, SecurityZonesSecurityZoneHostInboundTrafficSystemServicesNameState } from "./securityZonesSecurityZoneHostInboundTrafficSystemServicesName";
export type SecurityZonesSecurityZoneHostInboundTrafficSystemServicesName = import("./securityZonesSecurityZoneHostInboundTrafficSystemServicesName").SecurityZonesSecurityZoneHostInboundTrafficSystemServicesName;
export const SecurityZonesSecurityZoneHostInboundTrafficSystemServicesName: typeof import("./securityZonesSecurityZoneHostInboundTrafficSystemServicesName").SecurityZonesSecurityZoneHostInboundTrafficSystemServicesName = null as any;
utilities.lazyLoad(exports, ["SecurityZonesSecurityZoneHostInboundTrafficSystemServicesName"], () => require("./securityZonesSecurityZoneHostInboundTrafficSystemServicesName"));

export { SecurityZonesSecurityZoneInterfacesNameArgs, SecurityZonesSecurityZoneInterfacesNameState } from "./securityZonesSecurityZoneInterfacesName";
export type SecurityZonesSecurityZoneInterfacesName = import("./securityZonesSecurityZoneInterfacesName").SecurityZonesSecurityZoneInterfacesName;
export const SecurityZonesSecurityZoneInterfacesName: typeof import("./securityZonesSecurityZoneInterfacesName").SecurityZonesSecurityZoneInterfacesName = null as any;
utilities.lazyLoad(exports, ["SecurityZonesSecurityZoneInterfacesName"], () => require("./securityZonesSecurityZoneInterfacesName"));

export { SystemRootAuthenticationEncryptedPasswordArgs, SystemRootAuthenticationEncryptedPasswordState } from "./systemRootAuthenticationEncryptedPassword";
export type SystemRootAuthenticationEncryptedPassword = import("./systemRootAuthenticationEncryptedPassword").SystemRootAuthenticationEncryptedPassword;
export const SystemRootAuthenticationEncryptedPassword: typeof import("./systemRootAuthenticationEncryptedPassword").SystemRootAuthenticationEncryptedPassword = null as any;
utilities.lazyLoad(exports, ["SystemRootAuthenticationEncryptedPassword"], () => require("./systemRootAuthenticationEncryptedPassword"));

export { SystemServicesSshPortArgs, SystemServicesSshPortState } from "./systemServicesSshPort";
export type SystemServicesSshPort = import("./systemServicesSshPort").SystemServicesSshPort;
export const SystemServicesSshPort: typeof import("./systemServicesSshPort").SystemServicesSshPort = null as any;
utilities.lazyLoad(exports, ["SystemServicesSshPort"], () => require("./systemServicesSshPort"));

export { SystemServicesWebManagementHttpInterfaceArgs, SystemServicesWebManagementHttpInterfaceState } from "./systemServicesWebManagementHttpInterface";
export type SystemServicesWebManagementHttpInterface = import("./systemServicesWebManagementHttpInterface").SystemServicesWebManagementHttpInterface;
export const SystemServicesWebManagementHttpInterface: typeof import("./systemServicesWebManagementHttpInterface").SystemServicesWebManagementHttpInterface = null as any;
utilities.lazyLoad(exports, ["SystemServicesWebManagementHttpInterface"], () => require("./systemServicesWebManagementHttpInterface"));

export { SystemServicesWebManagementHttpsInterfaceArgs, SystemServicesWebManagementHttpsInterfaceState } from "./systemServicesWebManagementHttpsInterface";
export type SystemServicesWebManagementHttpsInterface = import("./systemServicesWebManagementHttpsInterface").SystemServicesWebManagementHttpsInterface;
export const SystemServicesWebManagementHttpsInterface: typeof import("./systemServicesWebManagementHttpsInterface").SystemServicesWebManagementHttpsInterface = null as any;
utilities.lazyLoad(exports, ["SystemServicesWebManagementHttpsInterface"], () => require("./systemServicesWebManagementHttpsInterface"));

export { SystemServicesWebManagementHttpsSystemGeneratedCertificateArgs, SystemServicesWebManagementHttpsSystemGeneratedCertificateState } from "./systemServicesWebManagementHttpsSystemGeneratedCertificate";
export type SystemServicesWebManagementHttpsSystemGeneratedCertificate = import("./systemServicesWebManagementHttpsSystemGeneratedCertificate").SystemServicesWebManagementHttpsSystemGeneratedCertificate;
export const SystemServicesWebManagementHttpsSystemGeneratedCertificate: typeof import("./systemServicesWebManagementHttpsSystemGeneratedCertificate").SystemServicesWebManagementHttpsSystemGeneratedCertificate = null as any;
utilities.lazyLoad(exports, ["SystemServicesWebManagementHttpsSystemGeneratedCertificate"], () => require("./systemServicesWebManagementHttpsSystemGeneratedCertificate"));

export { SystemSyslogFileContentsAnyArgs, SystemSyslogFileContentsAnyState } from "./systemSyslogFileContentsAny";
export type SystemSyslogFileContentsAny = import("./systemSyslogFileContentsAny").SystemSyslogFileContentsAny;
export const SystemSyslogFileContentsAny: typeof import("./systemSyslogFileContentsAny").SystemSyslogFileContentsAny = null as any;
utilities.lazyLoad(exports, ["SystemSyslogFileContentsAny"], () => require("./systemSyslogFileContentsAny"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "junos-vsrx:index/applicationsApplicationDestinationPort:ApplicationsApplicationDestinationPort":
                return new ApplicationsApplicationDestinationPort(name, <any>undefined, { urn })
            case "junos-vsrx:index/applicationsApplicationProtocol:ApplicationsApplicationProtocol":
                return new ApplicationsApplicationProtocol(name, <any>undefined, { urn })
            case "junos-vsrx:index/commit:Commit":
                return new Commit(name, <any>undefined, { urn })
            case "junos-vsrx:index/destroycommit:Destroycommit":
                return new Destroycommit(name, <any>undefined, { urn })
            case "junos-vsrx:index/firewallFilterTermFromProtocol:FirewallFilterTermFromProtocol":
                return new FirewallFilterTermFromProtocol(name, <any>undefined, { urn })
            case "junos-vsrx:index/firewallFilterTermThenAccept:FirewallFilterTermThenAccept":
                return new FirewallFilterTermThenAccept(name, <any>undefined, { urn })
            case "junos-vsrx:index/firewallFilterTermThenSample:FirewallFilterTermThenSample":
                return new FirewallFilterTermThenSample(name, <any>undefined, { urn })
            case "junos-vsrx:index/forwardingOptionsSamplingFamilyInetOutputFileFilename:ForwardingOptionsSamplingFamilyInetOutputFileFilename":
                return new ForwardingOptionsSamplingFamilyInetOutputFileFilename(name, <any>undefined, { urn })
            case "junos-vsrx:index/forwardingOptionsSamplingInputRate:ForwardingOptionsSamplingInputRate":
                return new ForwardingOptionsSamplingInputRate(name, <any>undefined, { urn })
            case "junos-vsrx:index/interfacesInterfaceDescription:InterfacesInterfaceDescription":
                return new InterfacesInterfaceDescription(name, <any>undefined, { urn })
            case "junos-vsrx:index/interfacesInterfaceUnitFamilyInetAddressName:InterfacesInterfaceUnitFamilyInetAddressName":
                return new InterfacesInterfaceUnitFamilyInetAddressName(name, <any>undefined, { urn })
            case "junos-vsrx:index/policyOptionsPolicyStatementTermFromInstance:PolicyOptionsPolicyStatementTermFromInstance":
                return new PolicyOptionsPolicyStatementTermFromInstance(name, <any>undefined, { urn })
            case "junos-vsrx:index/policyOptionsPolicyStatementTermFromRouteFilterAddress:PolicyOptionsPolicyStatementTermFromRouteFilterAddress":
                return new PolicyOptionsPolicyStatementTermFromRouteFilterAddress(name, <any>undefined, { urn })
            case "junos-vsrx:index/policyOptionsPolicyStatementTermThenAccept:PolicyOptionsPolicyStatementTermThenAccept":
                return new PolicyOptionsPolicyStatementTermThenAccept(name, <any>undefined, { urn })
            case "junos-vsrx:index/policyOptionsPolicyStatementTermThenReject:PolicyOptionsPolicyStatementTermThenReject":
                return new PolicyOptionsPolicyStatementTermThenReject(name, <any>undefined, { urn })
            case "junos-vsrx:index/routingInstancesInstanceInstanceType:RoutingInstancesInstanceInstanceType":
                return new RoutingInstancesInstanceInstanceType(name, <any>undefined, { urn })
            case "junos-vsrx:index/routingInstancesInstanceInterfaceName:RoutingInstancesInstanceInterfaceName":
                return new RoutingInstancesInstanceInterfaceName(name, <any>undefined, { urn })
            case "junos-vsrx:index/routingInstancesInstanceRoutingOptionsInstanceImport:RoutingInstancesInstanceRoutingOptionsInstanceImport":
                return new RoutingInstancesInstanceRoutingOptionsInstanceImport(name, <any>undefined, { urn })
            case "junos-vsrx:index/routingInstancesInstanceRoutingOptionsStaticRouteNextHop:RoutingInstancesInstanceRoutingOptionsStaticRouteNextHop":
                return new RoutingInstancesInstanceRoutingOptionsStaticRouteNextHop(name, <any>undefined, { urn })
            case "junos-vsrx:index/routingInstancesInstanceRoutingOptionsStaticRouteNextTable:RoutingInstancesInstanceRoutingOptionsStaticRouteNextTable":
                return new RoutingInstancesInstanceRoutingOptionsStaticRouteNextTable(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityAddressBookAddressIpPrefix:SecurityAddressBookAddressIpPrefix":
                return new SecurityAddressBookAddressIpPrefix(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityAddressBookAddressRangeAddressToRangeHigh:SecurityAddressBookAddressRangeAddressToRangeHigh":
                return new SecurityAddressBookAddressRangeAddressToRangeHigh(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityAddressBookAddressSetAddressName:SecurityAddressBookAddressSetAddressName":
                return new SecurityAddressBookAddressSetAddressName(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatDestinationPoolAddressIpaddr:SecurityNatDestinationPoolAddressIpaddr":
                return new SecurityNatDestinationPoolAddressIpaddr(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatDestinationPoolAddressPort:SecurityNatDestinationPoolAddressPort":
                return new SecurityNatDestinationPoolAddressPort(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatDestinationPoolRoutingInstanceRiName:SecurityNatDestinationPoolRoutingInstanceRiName":
                return new SecurityNatDestinationPoolRoutingInstanceRiName(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatDestinationRuleSetFromInterface:SecurityNatDestinationRuleSetFromInterface":
                return new SecurityNatDestinationRuleSetFromInterface(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr:SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr":
                return new SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName:SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName":
                return new SecurityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName:SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName":
                return new SecurityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatProxyArpInterfaceAddressToIpaddr:SecurityNatProxyArpInterfaceAddressToIpaddr":
                return new SecurityNatProxyArpInterfaceAddressToIpaddr(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatSourcePoolAddressToIpaddr:SecurityNatSourcePoolAddressToIpaddr":
                return new SecurityNatSourcePoolAddressToIpaddr(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatSourceRuleSetFromZone:SecurityNatSourceRuleSetFromZone":
                return new SecurityNatSourceRuleSetFromZone(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress:SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress":
                return new SecurityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatSourceRuleSetRuleThenSourceNatPoolPoolName:SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolName":
                return new SecurityNatSourceRuleSetRuleThenSourceNatPoolPoolName(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityNatSourceRuleSetToZone:SecurityNatSourceRuleSetToZone":
                return new SecurityNatSourceRuleSetToZone(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityPoliciesPolicyPolicyMatchApplication:SecurityPoliciesPolicyPolicyMatchApplication":
                return new SecurityPoliciesPolicyPolicyMatchApplication(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityPoliciesPolicyPolicyMatchDestinationAddress:SecurityPoliciesPolicyPolicyMatchDestinationAddress":
                return new SecurityPoliciesPolicyPolicyMatchDestinationAddress(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityPoliciesPolicyPolicyMatchSourceAddress:SecurityPoliciesPolicyPolicyMatchSourceAddress":
                return new SecurityPoliciesPolicyPolicyMatchSourceAddress(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityPoliciesPolicyPolicyThenCountApplyGroups:SecurityPoliciesPolicyPolicyThenCountApplyGroups":
                return new SecurityPoliciesPolicyPolicyThenCountApplyGroups(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityPoliciesPolicyPolicyThenDeny:SecurityPoliciesPolicyPolicyThenDeny":
                return new SecurityPoliciesPolicyPolicyThenDeny(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityPoliciesPolicyPolicyThenLogSessionInit:SecurityPoliciesPolicyPolicyThenLogSessionInit":
                return new SecurityPoliciesPolicyPolicyThenLogSessionInit(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityPoliciesPolicyPolicyThenPermitTunnelPairPolicy:SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicy":
                return new SecurityPoliciesPolicyPolicyThenPermitTunnelPairPolicy(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityZonesSecurityZoneHostInboundTrafficSystemServicesName:SecurityZonesSecurityZoneHostInboundTrafficSystemServicesName":
                return new SecurityZonesSecurityZoneHostInboundTrafficSystemServicesName(name, <any>undefined, { urn })
            case "junos-vsrx:index/securityZonesSecurityZoneInterfacesName:SecurityZonesSecurityZoneInterfacesName":
                return new SecurityZonesSecurityZoneInterfacesName(name, <any>undefined, { urn })
            case "junos-vsrx:index/systemRootAuthenticationEncryptedPassword:SystemRootAuthenticationEncryptedPassword":
                return new SystemRootAuthenticationEncryptedPassword(name, <any>undefined, { urn })
            case "junos-vsrx:index/systemServicesSshPort:SystemServicesSshPort":
                return new SystemServicesSshPort(name, <any>undefined, { urn })
            case "junos-vsrx:index/systemServicesWebManagementHttpInterface:SystemServicesWebManagementHttpInterface":
                return new SystemServicesWebManagementHttpInterface(name, <any>undefined, { urn })
            case "junos-vsrx:index/systemServicesWebManagementHttpsInterface:SystemServicesWebManagementHttpsInterface":
                return new SystemServicesWebManagementHttpsInterface(name, <any>undefined, { urn })
            case "junos-vsrx:index/systemServicesWebManagementHttpsSystemGeneratedCertificate:SystemServicesWebManagementHttpsSystemGeneratedCertificate":
                return new SystemServicesWebManagementHttpsSystemGeneratedCertificate(name, <any>undefined, { urn })
            case "junos-vsrx:index/systemSyslogFileContentsAny:SystemSyslogFileContentsAny":
                return new SystemSyslogFileContentsAny(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("junos-vsrx", "index/applicationsApplicationDestinationPort", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/applicationsApplicationProtocol", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/commit", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/destroycommit", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/firewallFilterTermFromProtocol", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/firewallFilterTermThenAccept", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/firewallFilterTermThenSample", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/forwardingOptionsSamplingFamilyInetOutputFileFilename", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/forwardingOptionsSamplingInputRate", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/interfacesInterfaceDescription", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/interfacesInterfaceUnitFamilyInetAddressName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/policyOptionsPolicyStatementTermFromInstance", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/policyOptionsPolicyStatementTermFromRouteFilterAddress", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/policyOptionsPolicyStatementTermThenAccept", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/policyOptionsPolicyStatementTermThenReject", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/routingInstancesInstanceInstanceType", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/routingInstancesInstanceInterfaceName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/routingInstancesInstanceRoutingOptionsInstanceImport", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/routingInstancesInstanceRoutingOptionsStaticRouteNextHop", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/routingInstancesInstanceRoutingOptionsStaticRouteNextTable", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityAddressBookAddressIpPrefix", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityAddressBookAddressRangeAddressToRangeHigh", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityAddressBookAddressSetAddressName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatDestinationPoolAddressIpaddr", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatDestinationPoolAddressPort", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatDestinationPoolRoutingInstanceRiName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatDestinationRuleSetFromInterface", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationAddressDstAddr", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatDestinationRuleSetRuleDestNatRuleMatchDestinationPortName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatDestinationRuleSetRuleThenDestinationNatPoolPoolName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatProxyArpInterfaceAddressToIpaddr", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatSourcePoolAddressToIpaddr", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatSourceRuleSetFromZone", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatSourceRuleSetRuleSrcNatRuleMatchSourceAddress", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatSourceRuleSetRuleThenSourceNatPoolPoolName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityNatSourceRuleSetToZone", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityPoliciesPolicyPolicyMatchApplication", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityPoliciesPolicyPolicyMatchDestinationAddress", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityPoliciesPolicyPolicyMatchSourceAddress", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityPoliciesPolicyPolicyThenCountApplyGroups", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityPoliciesPolicyPolicyThenDeny", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityPoliciesPolicyPolicyThenLogSessionInit", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityPoliciesPolicyPolicyThenPermitTunnelPairPolicy", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityZonesSecurityZoneHostInboundTrafficSystemServicesName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/securityZonesSecurityZoneInterfacesName", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/systemRootAuthenticationEncryptedPassword", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/systemServicesSshPort", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/systemServicesWebManagementHttpInterface", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/systemServicesWebManagementHttpsInterface", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/systemServicesWebManagementHttpsSystemGeneratedCertificate", _module)
pulumi.runtime.registerResourceModule("junos-vsrx", "index/systemSyslogFileContentsAny", _module)
pulumi.runtime.registerResourcePackage("junos-vsrx", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:junos-vsrx") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
