// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SantaEnrollment extends pulumi.CustomResource {
    /**
     * Get an existing SantaEnrollment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SantaEnrollmentState, opts?: pulumi.CustomResourceOptions): SantaEnrollment {
        return new SantaEnrollment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/santaEnrollment:SantaEnrollment';

    /**
     * Returns true if the given object is an instance of SantaEnrollment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SantaEnrollment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SantaEnrollment.__pulumiType;
    }

    /**
     * `ID` of the Santa configuration.
     */
    public readonly configurationId!: pulumi.Output<number>;
    /**
     * Configuration profile download URL.
     */
    public /*out*/ readonly configurationProfileUrl!: pulumi.Output<string>;
    /**
     * The `ID` of the meta business unit the machine will be assigned to at enrollment.
     */
    public readonly metaBusinessUnitId!: pulumi.Output<number>;
    /**
     * Plist download URL.
     */
    public /*out*/ readonly plistUrl!: pulumi.Output<string>;
    /**
     * The number of time the enrollment can be used.
     */
    public readonly quota!: pulumi.Output<number | undefined>;
    /**
     * Enrollment secret.
     */
    public /*out*/ readonly secret!: pulumi.Output<string>;
    /**
     * The serial numbers the enrollment is restricted to.
     */
    public readonly serialNumbers!: pulumi.Output<string[]>;
    /**
     * The `ID`s of the tags that the machine will get at enrollment.
     */
    public readonly tagIds!: pulumi.Output<number[]>;
    /**
     * The `UDID`s the enrollment is restricted to.
     */
    public readonly udids!: pulumi.Output<string[]>;
    /**
     * Enrollment version.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a SantaEnrollment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SantaEnrollmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SantaEnrollmentArgs | SantaEnrollmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SantaEnrollmentState | undefined;
            resourceInputs["configurationId"] = state ? state.configurationId : undefined;
            resourceInputs["configurationProfileUrl"] = state ? state.configurationProfileUrl : undefined;
            resourceInputs["metaBusinessUnitId"] = state ? state.metaBusinessUnitId : undefined;
            resourceInputs["plistUrl"] = state ? state.plistUrl : undefined;
            resourceInputs["quota"] = state ? state.quota : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["serialNumbers"] = state ? state.serialNumbers : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["udids"] = state ? state.udids : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SantaEnrollmentArgs | undefined;
            if ((!args || args.configurationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationId'");
            }
            if ((!args || args.metaBusinessUnitId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metaBusinessUnitId'");
            }
            resourceInputs["configurationId"] = args ? args.configurationId : undefined;
            resourceInputs["metaBusinessUnitId"] = args ? args.metaBusinessUnitId : undefined;
            resourceInputs["quota"] = args ? args.quota : undefined;
            resourceInputs["serialNumbers"] = args ? args.serialNumbers : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["udids"] = args ? args.udids : undefined;
            resourceInputs["configurationProfileUrl"] = undefined /*out*/;
            resourceInputs["plistUrl"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SantaEnrollment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SantaEnrollment resources.
 */
export interface SantaEnrollmentState {
    /**
     * `ID` of the Santa configuration.
     */
    configurationId?: pulumi.Input<number>;
    /**
     * Configuration profile download URL.
     */
    configurationProfileUrl?: pulumi.Input<string>;
    /**
     * The `ID` of the meta business unit the machine will be assigned to at enrollment.
     */
    metaBusinessUnitId?: pulumi.Input<number>;
    /**
     * Plist download URL.
     */
    plistUrl?: pulumi.Input<string>;
    /**
     * The number of time the enrollment can be used.
     */
    quota?: pulumi.Input<number>;
    /**
     * Enrollment secret.
     */
    secret?: pulumi.Input<string>;
    /**
     * The serial numbers the enrollment is restricted to.
     */
    serialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the tags that the machine will get at enrollment.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The `UDID`s the enrollment is restricted to.
     */
    udids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enrollment version.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SantaEnrollment resource.
 */
export interface SantaEnrollmentArgs {
    /**
     * `ID` of the Santa configuration.
     */
    configurationId: pulumi.Input<number>;
    /**
     * The `ID` of the meta business unit the machine will be assigned to at enrollment.
     */
    metaBusinessUnitId: pulumi.Input<number>;
    /**
     * The number of time the enrollment can be used.
     */
    quota?: pulumi.Input<number>;
    /**
     * The serial numbers the enrollment is restricted to.
     */
    serialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the tags that the machine will get at enrollment.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The `UDID`s the enrollment is restricted to.
     */
    udids?: pulumi.Input<pulumi.Input<string>[]>;
}
