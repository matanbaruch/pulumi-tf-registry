// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OsqueryConfigurationPack extends pulumi.CustomResource {
    /**
     * Get an existing OsqueryConfigurationPack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsqueryConfigurationPackState, opts?: pulumi.CustomResourceOptions): OsqueryConfigurationPack {
        return new OsqueryConfigurationPack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/osqueryConfigurationPack:OsqueryConfigurationPack';

    /**
     * Returns true if the given object is an instance of OsqueryConfigurationPack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsqueryConfigurationPack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsqueryConfigurationPack.__pulumiType;
    }

    /**
     * ID of the configuration.
     */
    public readonly configurationId!: pulumi.Output<number>;
    /**
     * ID of the pack.
     */
    public readonly packId!: pulumi.Output<number>;
    /**
     * The `ID`s of the tags used to scope the pack.
     */
    public readonly tagIds!: pulumi.Output<number[]>;

    /**
     * Create a OsqueryConfigurationPack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OsqueryConfigurationPackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsqueryConfigurationPackArgs | OsqueryConfigurationPackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsqueryConfigurationPackState | undefined;
            resourceInputs["configurationId"] = state ? state.configurationId : undefined;
            resourceInputs["packId"] = state ? state.packId : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
        } else {
            const args = argsOrState as OsqueryConfigurationPackArgs | undefined;
            if ((!args || args.configurationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationId'");
            }
            if ((!args || args.packId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packId'");
            }
            resourceInputs["configurationId"] = args ? args.configurationId : undefined;
            resourceInputs["packId"] = args ? args.packId : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsqueryConfigurationPack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsqueryConfigurationPack resources.
 */
export interface OsqueryConfigurationPackState {
    /**
     * ID of the configuration.
     */
    configurationId?: pulumi.Input<number>;
    /**
     * ID of the pack.
     */
    packId?: pulumi.Input<number>;
    /**
     * The `ID`s of the tags used to scope the pack.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a OsqueryConfigurationPack resource.
 */
export interface OsqueryConfigurationPackArgs {
    /**
     * ID of the configuration.
     */
    configurationId: pulumi.Input<number>;
    /**
     * ID of the pack.
     */
    packId: pulumi.Input<number>;
    /**
     * The `ID`s of the tags used to scope the pack.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
}
