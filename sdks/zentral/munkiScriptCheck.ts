// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MunkiScriptCheck extends pulumi.CustomResource {
    /**
     * Get an existing MunkiScriptCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MunkiScriptCheckState, opts?: pulumi.CustomResourceOptions): MunkiScriptCheck {
        return new MunkiScriptCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/munkiScriptCheck:MunkiScriptCheck';

    /**
     * Returns true if the given object is an instance of MunkiScriptCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MunkiScriptCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MunkiScriptCheck.__pulumiType;
    }

    /**
     * If `true`, this Munki script check will be scheduled on Intel machines. Defaults to `true`.
     */
    public readonly archAmd64!: pulumi.Output<boolean>;
    /**
     * If `true`, this Munki script check will be scheduled on Apple Silicon machines. Defaults to `true`.
     */
    public readonly archArm64!: pulumi.Output<boolean>;
    /**
     * Description of the Munki script check.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The IDs of the tags this Munki script check is not scoped to.
     */
    public readonly excludedTagIds!: pulumi.Output<number[]>;
    /**
     * Expected result of the Munki script check.
     */
    public readonly expectedResult!: pulumi.Output<string>;
    /**
     * This Munki script check will be scheduled on machines with an OS version lower than this value.
     */
    public readonly maxOsVersion!: pulumi.Output<string>;
    /**
     * This Munki script check will be scheduled on machines with an OS version higher or equal to this value.
     */
    public readonly minOsVersion!: pulumi.Output<string>;
    /**
     * Name of the Munki script check.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Source of the Munki script check.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * The IDs of the tags this Munki script check is restricted to.
     */
    public readonly tagIds!: pulumi.Output<number[]>;
    /**
     * Type of the script check. Can be `ZSH_STR`, `ZSH_INT` or `ZSH_BOOL`. Defaults to `ZSH_STR`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Version of the Munki script check.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a MunkiScriptCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MunkiScriptCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MunkiScriptCheckArgs | MunkiScriptCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MunkiScriptCheckState | undefined;
            resourceInputs["archAmd64"] = state ? state.archAmd64 : undefined;
            resourceInputs["archArm64"] = state ? state.archArm64 : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excludedTagIds"] = state ? state.excludedTagIds : undefined;
            resourceInputs["expectedResult"] = state ? state.expectedResult : undefined;
            resourceInputs["maxOsVersion"] = state ? state.maxOsVersion : undefined;
            resourceInputs["minOsVersion"] = state ? state.minOsVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MunkiScriptCheckArgs | undefined;
            if ((!args || args.expectedResult === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expectedResult'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["archAmd64"] = args ? args.archAmd64 : undefined;
            resourceInputs["archArm64"] = args ? args.archArm64 : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excludedTagIds"] = args ? args.excludedTagIds : undefined;
            resourceInputs["expectedResult"] = args ? args.expectedResult : undefined;
            resourceInputs["maxOsVersion"] = args ? args.maxOsVersion : undefined;
            resourceInputs["minOsVersion"] = args ? args.minOsVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MunkiScriptCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MunkiScriptCheck resources.
 */
export interface MunkiScriptCheckState {
    /**
     * If `true`, this Munki script check will be scheduled on Intel machines. Defaults to `true`.
     */
    archAmd64?: pulumi.Input<boolean>;
    /**
     * If `true`, this Munki script check will be scheduled on Apple Silicon machines. Defaults to `true`.
     */
    archArm64?: pulumi.Input<boolean>;
    /**
     * Description of the Munki script check.
     */
    description?: pulumi.Input<string>;
    /**
     * The IDs of the tags this Munki script check is not scoped to.
     */
    excludedTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Expected result of the Munki script check.
     */
    expectedResult?: pulumi.Input<string>;
    /**
     * This Munki script check will be scheduled on machines with an OS version lower than this value.
     */
    maxOsVersion?: pulumi.Input<string>;
    /**
     * This Munki script check will be scheduled on machines with an OS version higher or equal to this value.
     */
    minOsVersion?: pulumi.Input<string>;
    /**
     * Name of the Munki script check.
     */
    name?: pulumi.Input<string>;
    /**
     * Source of the Munki script check.
     */
    source?: pulumi.Input<string>;
    /**
     * The IDs of the tags this Munki script check is restricted to.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Type of the script check. Can be `ZSH_STR`, `ZSH_INT` or `ZSH_BOOL`. Defaults to `ZSH_STR`.
     */
    type?: pulumi.Input<string>;
    /**
     * Version of the Munki script check.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MunkiScriptCheck resource.
 */
export interface MunkiScriptCheckArgs {
    /**
     * If `true`, this Munki script check will be scheduled on Intel machines. Defaults to `true`.
     */
    archAmd64?: pulumi.Input<boolean>;
    /**
     * If `true`, this Munki script check will be scheduled on Apple Silicon machines. Defaults to `true`.
     */
    archArm64?: pulumi.Input<boolean>;
    /**
     * Description of the Munki script check.
     */
    description?: pulumi.Input<string>;
    /**
     * The IDs of the tags this Munki script check is not scoped to.
     */
    excludedTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Expected result of the Munki script check.
     */
    expectedResult: pulumi.Input<string>;
    /**
     * This Munki script check will be scheduled on machines with an OS version lower than this value.
     */
    maxOsVersion?: pulumi.Input<string>;
    /**
     * This Munki script check will be scheduled on machines with an OS version higher or equal to this value.
     */
    minOsVersion?: pulumi.Input<string>;
    /**
     * Name of the Munki script check.
     */
    name?: pulumi.Input<string>;
    /**
     * Source of the Munki script check.
     */
    source: pulumi.Input<string>;
    /**
     * The IDs of the tags this Munki script check is restricted to.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Type of the script check. Can be `ZSH_STR`, `ZSH_INT` or `ZSH_BOOL`. Defaults to `ZSH_STR`.
     */
    type?: pulumi.Input<string>;
}
