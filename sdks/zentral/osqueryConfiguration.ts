// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OsqueryConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing OsqueryConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsqueryConfigurationState, opts?: pulumi.CustomResourceOptions): OsqueryConfiguration {
        return new OsqueryConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/osqueryConfiguration:OsqueryConfiguration';

    /**
     * Returns true if the given object is an instance of OsqueryConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsqueryConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsqueryConfiguration.__pulumiType;
    }

    /**
     * List of the IDs of the ATCs to include in this configuration.
     */
    public readonly atcIds!: pulumi.Output<number[]>;
    /**
     * Description of the Osquery configuration.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of the IDs of the file categories to include in this configuration.
     */
    public readonly fileCategoryIds!: pulumi.Output<number[]>;
    /**
     * If `true`, Osquery is configured to collect inventory data. Defaults to `true`.
     */
    public readonly inventory!: pulumi.Output<boolean>;
    /**
     * If `true`, Osquery is configured to collect the applications. Defaults to `false`.
     */
    public readonly inventoryApps!: pulumi.Output<boolean>;
    /**
     * If `true`, Osquery is configured to collect the EC2 metadata. Defaults to `false`.
     */
    public readonly inventoryEc2!: pulumi.Output<boolean>;
    /**
     * Number of seconds to wait between collecting the inventory data.
     */
    public readonly inventoryInterval!: pulumi.Output<number>;
    /**
     * Name of the Osquery configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A map of extra options to pass to Osquery in the flag file.
     */
    public readonly options!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a OsqueryConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OsqueryConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsqueryConfigurationArgs | OsqueryConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsqueryConfigurationState | undefined;
            resourceInputs["atcIds"] = state ? state.atcIds : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileCategoryIds"] = state ? state.fileCategoryIds : undefined;
            resourceInputs["inventory"] = state ? state.inventory : undefined;
            resourceInputs["inventoryApps"] = state ? state.inventoryApps : undefined;
            resourceInputs["inventoryEc2"] = state ? state.inventoryEc2 : undefined;
            resourceInputs["inventoryInterval"] = state ? state.inventoryInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
        } else {
            const args = argsOrState as OsqueryConfigurationArgs | undefined;
            resourceInputs["atcIds"] = args ? args.atcIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileCategoryIds"] = args ? args.fileCategoryIds : undefined;
            resourceInputs["inventory"] = args ? args.inventory : undefined;
            resourceInputs["inventoryApps"] = args ? args.inventoryApps : undefined;
            resourceInputs["inventoryEc2"] = args ? args.inventoryEc2 : undefined;
            resourceInputs["inventoryInterval"] = args ? args.inventoryInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsqueryConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsqueryConfiguration resources.
 */
export interface OsqueryConfigurationState {
    /**
     * List of the IDs of the ATCs to include in this configuration.
     */
    atcIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Description of the Osquery configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * List of the IDs of the file categories to include in this configuration.
     */
    fileCategoryIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If `true`, Osquery is configured to collect inventory data. Defaults to `true`.
     */
    inventory?: pulumi.Input<boolean>;
    /**
     * If `true`, Osquery is configured to collect the applications. Defaults to `false`.
     */
    inventoryApps?: pulumi.Input<boolean>;
    /**
     * If `true`, Osquery is configured to collect the EC2 metadata. Defaults to `false`.
     */
    inventoryEc2?: pulumi.Input<boolean>;
    /**
     * Number of seconds to wait between collecting the inventory data.
     */
    inventoryInterval?: pulumi.Input<number>;
    /**
     * Name of the Osquery configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of extra options to pass to Osquery in the flag file.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a OsqueryConfiguration resource.
 */
export interface OsqueryConfigurationArgs {
    /**
     * List of the IDs of the ATCs to include in this configuration.
     */
    atcIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Description of the Osquery configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * List of the IDs of the file categories to include in this configuration.
     */
    fileCategoryIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If `true`, Osquery is configured to collect inventory data. Defaults to `true`.
     */
    inventory?: pulumi.Input<boolean>;
    /**
     * If `true`, Osquery is configured to collect the applications. Defaults to `false`.
     */
    inventoryApps?: pulumi.Input<boolean>;
    /**
     * If `true`, Osquery is configured to collect the EC2 metadata. Defaults to `false`.
     */
    inventoryEc2?: pulumi.Input<boolean>;
    /**
     * Number of seconds to wait between collecting the inventory data.
     */
    inventoryInterval?: pulumi.Input<number>;
    /**
     * Name of the Osquery configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * A map of extra options to pass to Osquery in the flag file.
     */
    options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
