// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MonolithSubManifestPkgInfo extends pulumi.CustomResource {
    /**
     * Get an existing MonolithSubManifestPkgInfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonolithSubManifestPkgInfoState, opts?: pulumi.CustomResourceOptions): MonolithSubManifestPkgInfo {
        return new MonolithSubManifestPkgInfo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/monolithSubManifestPkgInfo:MonolithSubManifestPkgInfo';

    /**
     * Returns true if the given object is an instance of MonolithSubManifestPkgInfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonolithSubManifestPkgInfo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonolithSubManifestPkgInfo.__pulumiType;
    }

    /**
     * The `ID` of the condition that is evaluated to decide if this pkg info is included.
     */
    public readonly conditionId!: pulumi.Output<number | undefined>;
    /**
     * The default shard value. Defaults to `100`.
     */
    public readonly defaultShard!: pulumi.Output<number>;
    /**
     * Machines tagged with one of these tags will not receive the pkg info.
     */
    public readonly excludedTagIds!: pulumi.Output<number[]>;
    /**
     * If `true`, this pkg info will be displayed in the featured items section in Managed Software Center. Defaults to
     * `false`.
     */
    public readonly featuredItem!: pulumi.Output<boolean>;
    /**
     * Sub manifest key under which this pkg info will be included.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * The name of the pkg info to include.
     */
    public readonly pkgInfoName!: pulumi.Output<string>;
    /**
     * The modulo used to calculate the shards. Defaults to `100`.
     */
    public readonly shardModulo!: pulumi.Output<number>;
    /**
     * The `ID` of the sub manifest this pkg info is attached to.
     */
    public readonly subManifestId!: pulumi.Output<number>;
    /**
     * A set of tag shard values different from the default shard, to determine if the tagged machines will receive the pkg
     * info.
     */
    public readonly tagShards!: pulumi.Output<outputs.MonolithSubManifestPkgInfoTagShard[]>;

    /**
     * Create a MonolithSubManifestPkgInfo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonolithSubManifestPkgInfoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonolithSubManifestPkgInfoArgs | MonolithSubManifestPkgInfoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonolithSubManifestPkgInfoState | undefined;
            resourceInputs["conditionId"] = state ? state.conditionId : undefined;
            resourceInputs["defaultShard"] = state ? state.defaultShard : undefined;
            resourceInputs["excludedTagIds"] = state ? state.excludedTagIds : undefined;
            resourceInputs["featuredItem"] = state ? state.featuredItem : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["pkgInfoName"] = state ? state.pkgInfoName : undefined;
            resourceInputs["shardModulo"] = state ? state.shardModulo : undefined;
            resourceInputs["subManifestId"] = state ? state.subManifestId : undefined;
            resourceInputs["tagShards"] = state ? state.tagShards : undefined;
        } else {
            const args = argsOrState as MonolithSubManifestPkgInfoArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.pkgInfoName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pkgInfoName'");
            }
            if ((!args || args.subManifestId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subManifestId'");
            }
            resourceInputs["conditionId"] = args ? args.conditionId : undefined;
            resourceInputs["defaultShard"] = args ? args.defaultShard : undefined;
            resourceInputs["excludedTagIds"] = args ? args.excludedTagIds : undefined;
            resourceInputs["featuredItem"] = args ? args.featuredItem : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["pkgInfoName"] = args ? args.pkgInfoName : undefined;
            resourceInputs["shardModulo"] = args ? args.shardModulo : undefined;
            resourceInputs["subManifestId"] = args ? args.subManifestId : undefined;
            resourceInputs["tagShards"] = args ? args.tagShards : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonolithSubManifestPkgInfo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MonolithSubManifestPkgInfo resources.
 */
export interface MonolithSubManifestPkgInfoState {
    /**
     * The `ID` of the condition that is evaluated to decide if this pkg info is included.
     */
    conditionId?: pulumi.Input<number>;
    /**
     * The default shard value. Defaults to `100`.
     */
    defaultShard?: pulumi.Input<number>;
    /**
     * Machines tagged with one of these tags will not receive the pkg info.
     */
    excludedTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If `true`, this pkg info will be displayed in the featured items section in Managed Software Center. Defaults to
     * `false`.
     */
    featuredItem?: pulumi.Input<boolean>;
    /**
     * Sub manifest key under which this pkg info will be included.
     */
    key?: pulumi.Input<string>;
    /**
     * The name of the pkg info to include.
     */
    pkgInfoName?: pulumi.Input<string>;
    /**
     * The modulo used to calculate the shards. Defaults to `100`.
     */
    shardModulo?: pulumi.Input<number>;
    /**
     * The `ID` of the sub manifest this pkg info is attached to.
     */
    subManifestId?: pulumi.Input<number>;
    /**
     * A set of tag shard values different from the default shard, to determine if the tagged machines will receive the pkg
     * info.
     */
    tagShards?: pulumi.Input<pulumi.Input<inputs.MonolithSubManifestPkgInfoTagShard>[]>;
}

/**
 * The set of arguments for constructing a MonolithSubManifestPkgInfo resource.
 */
export interface MonolithSubManifestPkgInfoArgs {
    /**
     * The `ID` of the condition that is evaluated to decide if this pkg info is included.
     */
    conditionId?: pulumi.Input<number>;
    /**
     * The default shard value. Defaults to `100`.
     */
    defaultShard?: pulumi.Input<number>;
    /**
     * Machines tagged with one of these tags will not receive the pkg info.
     */
    excludedTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * If `true`, this pkg info will be displayed in the featured items section in Managed Software Center. Defaults to
     * `false`.
     */
    featuredItem?: pulumi.Input<boolean>;
    /**
     * Sub manifest key under which this pkg info will be included.
     */
    key: pulumi.Input<string>;
    /**
     * The name of the pkg info to include.
     */
    pkgInfoName: pulumi.Input<string>;
    /**
     * The modulo used to calculate the shards. Defaults to `100`.
     */
    shardModulo?: pulumi.Input<number>;
    /**
     * The `ID` of the sub manifest this pkg info is attached to.
     */
    subManifestId: pulumi.Input<number>;
    /**
     * A set of tag shard values different from the default shard, to determine if the tagged machines will receive the pkg
     * info.
     */
    tagShards?: pulumi.Input<pulumi.Input<inputs.MonolithSubManifestPkgInfoTagShard>[]>;
}
