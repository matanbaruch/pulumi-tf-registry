// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MdmBlueprint extends pulumi.CustomResource {
    /**
     * Get an existing MdmBlueprint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdmBlueprintState, opts?: pulumi.CustomResourceOptions): MdmBlueprint {
        return new MdmBlueprint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/mdmBlueprint:MdmBlueprint';

    /**
     * Returns true if the given object is an instance of MdmBlueprint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdmBlueprint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdmBlueprint.__pulumiType;
    }

    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    public readonly collectApps!: pulumi.Output<string>;
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    public readonly collectCertificates!: pulumi.Output<string>;
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    public readonly collectProfiles!: pulumi.Output<string>;
    /**
     * The `ID` of the attached FileVault configuration.
     */
    public readonly filevaultConfigId!: pulumi.Output<number | undefined>;
    /**
     * In seconds, the minimum interval between two inventory collection. Minimum 4h, maximum 7d, default 1d.
     */
    public readonly inventoryInterval!: pulumi.Output<number>;
    /**
     * Name of the blueprint.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The `ID` of the attached recovery password configuration.
     */
    public readonly recoveryPasswordConfigId!: pulumi.Output<number | undefined>;
    /**
     * The `ID`s of the software update enforcements.
     */
    public readonly softwareUpdateEnforcementIds!: pulumi.Output<number[]>;

    /**
     * Create a MdmBlueprint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MdmBlueprintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdmBlueprintArgs | MdmBlueprintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdmBlueprintState | undefined;
            resourceInputs["collectApps"] = state ? state.collectApps : undefined;
            resourceInputs["collectCertificates"] = state ? state.collectCertificates : undefined;
            resourceInputs["collectProfiles"] = state ? state.collectProfiles : undefined;
            resourceInputs["filevaultConfigId"] = state ? state.filevaultConfigId : undefined;
            resourceInputs["inventoryInterval"] = state ? state.inventoryInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recoveryPasswordConfigId"] = state ? state.recoveryPasswordConfigId : undefined;
            resourceInputs["softwareUpdateEnforcementIds"] = state ? state.softwareUpdateEnforcementIds : undefined;
        } else {
            const args = argsOrState as MdmBlueprintArgs | undefined;
            resourceInputs["collectApps"] = args ? args.collectApps : undefined;
            resourceInputs["collectCertificates"] = args ? args.collectCertificates : undefined;
            resourceInputs["collectProfiles"] = args ? args.collectProfiles : undefined;
            resourceInputs["filevaultConfigId"] = args ? args.filevaultConfigId : undefined;
            resourceInputs["inventoryInterval"] = args ? args.inventoryInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recoveryPasswordConfigId"] = args ? args.recoveryPasswordConfigId : undefined;
            resourceInputs["softwareUpdateEnforcementIds"] = args ? args.softwareUpdateEnforcementIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdmBlueprint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdmBlueprint resources.
 */
export interface MdmBlueprintState {
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    collectApps?: pulumi.Input<string>;
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    collectCertificates?: pulumi.Input<string>;
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    collectProfiles?: pulumi.Input<string>;
    /**
     * The `ID` of the attached FileVault configuration.
     */
    filevaultConfigId?: pulumi.Input<number>;
    /**
     * In seconds, the minimum interval between two inventory collection. Minimum 4h, maximum 7d, default 1d.
     */
    inventoryInterval?: pulumi.Input<number>;
    /**
     * Name of the blueprint.
     */
    name?: pulumi.Input<string>;
    /**
     * The `ID` of the attached recovery password configuration.
     */
    recoveryPasswordConfigId?: pulumi.Input<number>;
    /**
     * The `ID`s of the software update enforcements.
     */
    softwareUpdateEnforcementIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a MdmBlueprint resource.
 */
export interface MdmBlueprintArgs {
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    collectApps?: pulumi.Input<string>;
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    collectCertificates?: pulumi.Input<string>;
    /**
     * Possible values: `NO`, `MANAGED_ONLY`, `ALL`.
     */
    collectProfiles?: pulumi.Input<string>;
    /**
     * The `ID` of the attached FileVault configuration.
     */
    filevaultConfigId?: pulumi.Input<number>;
    /**
     * In seconds, the minimum interval between two inventory collection. Minimum 4h, maximum 7d, default 1d.
     */
    inventoryInterval?: pulumi.Input<number>;
    /**
     * Name of the blueprint.
     */
    name?: pulumi.Input<string>;
    /**
     * The `ID` of the attached recovery password configuration.
     */
    recoveryPasswordConfigId?: pulumi.Input<number>;
    /**
     * The `ID`s of the software update enforcements.
     */
    softwareUpdateEnforcementIds?: pulumi.Input<pulumi.Input<number>[]>;
}
