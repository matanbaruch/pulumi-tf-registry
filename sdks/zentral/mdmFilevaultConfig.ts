// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MdmFilevaultConfig extends pulumi.CustomResource {
    /**
     * Get an existing MdmFilevaultConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdmFilevaultConfigState, opts?: pulumi.CustomResourceOptions): MdmFilevaultConfig {
        return new MdmFilevaultConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/mdmFilevaultConfig:MdmFilevaultConfig';

    /**
     * Returns true if the given object is an instance of MdmFilevaultConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdmFilevaultConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdmFilevaultConfig.__pulumiType;
    }

    /**
     * If `true`, prevents requests for enabling FileVault at user logout time. Defaults to `false`.
     */
    public readonly atLoginOnly!: pulumi.Output<boolean>;
    /**
     * The maximum number of times users can bypass enabling FileVault before being required to enable it to log in.
     */
    public readonly bypassAttempts!: pulumi.Output<number>;
    /**
     * Set to `true` to prevent storing the FileVault key across restarts. Defaults to `false`.
     */
    public readonly destroyKeyOnStandby!: pulumi.Output<boolean>;
    /**
     * Description of the location where the FDE PRK will be escrowed. This text will be inserted into the message the user
     * sees when enabling FileVault.
     */
    public readonly escrowLocationDisplayName!: pulumi.Output<string>;
    /**
     * Name of the FileVault configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The automatic PRK rotation interval in days. It has a maximum value of `365`. Defaults to `0` (no automatic rotation).
     */
    public readonly prkRotationIntervalDays!: pulumi.Output<number>;
    /**
     * If `false`, prevents display of the personal recovery key to the user after FileVault is enabled. Defaults to `false`.
     */
    public readonly showRecoveryKey!: pulumi.Output<boolean>;

    /**
     * Create a MdmFilevaultConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdmFilevaultConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdmFilevaultConfigArgs | MdmFilevaultConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdmFilevaultConfigState | undefined;
            resourceInputs["atLoginOnly"] = state ? state.atLoginOnly : undefined;
            resourceInputs["bypassAttempts"] = state ? state.bypassAttempts : undefined;
            resourceInputs["destroyKeyOnStandby"] = state ? state.destroyKeyOnStandby : undefined;
            resourceInputs["escrowLocationDisplayName"] = state ? state.escrowLocationDisplayName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["prkRotationIntervalDays"] = state ? state.prkRotationIntervalDays : undefined;
            resourceInputs["showRecoveryKey"] = state ? state.showRecoveryKey : undefined;
        } else {
            const args = argsOrState as MdmFilevaultConfigArgs | undefined;
            if ((!args || args.escrowLocationDisplayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'escrowLocationDisplayName'");
            }
            resourceInputs["atLoginOnly"] = args ? args.atLoginOnly : undefined;
            resourceInputs["bypassAttempts"] = args ? args.bypassAttempts : undefined;
            resourceInputs["destroyKeyOnStandby"] = args ? args.destroyKeyOnStandby : undefined;
            resourceInputs["escrowLocationDisplayName"] = args ? args.escrowLocationDisplayName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prkRotationIntervalDays"] = args ? args.prkRotationIntervalDays : undefined;
            resourceInputs["showRecoveryKey"] = args ? args.showRecoveryKey : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdmFilevaultConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdmFilevaultConfig resources.
 */
export interface MdmFilevaultConfigState {
    /**
     * If `true`, prevents requests for enabling FileVault at user logout time. Defaults to `false`.
     */
    atLoginOnly?: pulumi.Input<boolean>;
    /**
     * The maximum number of times users can bypass enabling FileVault before being required to enable it to log in.
     */
    bypassAttempts?: pulumi.Input<number>;
    /**
     * Set to `true` to prevent storing the FileVault key across restarts. Defaults to `false`.
     */
    destroyKeyOnStandby?: pulumi.Input<boolean>;
    /**
     * Description of the location where the FDE PRK will be escrowed. This text will be inserted into the message the user
     * sees when enabling FileVault.
     */
    escrowLocationDisplayName?: pulumi.Input<string>;
    /**
     * Name of the FileVault configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * The automatic PRK rotation interval in days. It has a maximum value of `365`. Defaults to `0` (no automatic rotation).
     */
    prkRotationIntervalDays?: pulumi.Input<number>;
    /**
     * If `false`, prevents display of the personal recovery key to the user after FileVault is enabled. Defaults to `false`.
     */
    showRecoveryKey?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a MdmFilevaultConfig resource.
 */
export interface MdmFilevaultConfigArgs {
    /**
     * If `true`, prevents requests for enabling FileVault at user logout time. Defaults to `false`.
     */
    atLoginOnly?: pulumi.Input<boolean>;
    /**
     * The maximum number of times users can bypass enabling FileVault before being required to enable it to log in.
     */
    bypassAttempts?: pulumi.Input<number>;
    /**
     * Set to `true` to prevent storing the FileVault key across restarts. Defaults to `false`.
     */
    destroyKeyOnStandby?: pulumi.Input<boolean>;
    /**
     * Description of the location where the FDE PRK will be escrowed. This text will be inserted into the message the user
     * sees when enabling FileVault.
     */
    escrowLocationDisplayName: pulumi.Input<string>;
    /**
     * Name of the FileVault configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * The automatic PRK rotation interval in days. It has a maximum value of `365`. Defaults to `0` (no automatic rotation).
     */
    prkRotationIntervalDays?: pulumi.Input<number>;
    /**
     * If `false`, prevents display of the personal recovery key to the user after FileVault is enabled. Defaults to `false`.
     */
    showRecoveryKey?: pulumi.Input<boolean>;
}
