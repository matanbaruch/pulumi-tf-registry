// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetJmespathCheckArgs, GetJmespathCheckResult, GetJmespathCheckOutputArgs } from "./getJmespathCheck";
export const getJmespathCheck: typeof import("./getJmespathCheck").getJmespathCheck = null as any;
export const getJmespathCheckOutput: typeof import("./getJmespathCheck").getJmespathCheckOutput = null as any;
utilities.lazyLoad(exports, ["getJmespathCheck","getJmespathCheckOutput"], () => require("./getJmespathCheck"));

export { GetMdmArtifactArgs, GetMdmArtifactResult, GetMdmArtifactOutputArgs } from "./getMdmArtifact";
export const getMdmArtifact: typeof import("./getMdmArtifact").getMdmArtifact = null as any;
export const getMdmArtifactOutput: typeof import("./getMdmArtifact").getMdmArtifactOutput = null as any;
utilities.lazyLoad(exports, ["getMdmArtifact","getMdmArtifactOutput"], () => require("./getMdmArtifact"));

export { GetMdmBlueprintArgs, GetMdmBlueprintResult, GetMdmBlueprintOutputArgs } from "./getMdmBlueprint";
export const getMdmBlueprint: typeof import("./getMdmBlueprint").getMdmBlueprint = null as any;
export const getMdmBlueprintOutput: typeof import("./getMdmBlueprint").getMdmBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getMdmBlueprint","getMdmBlueprintOutput"], () => require("./getMdmBlueprint"));

export { GetMdmFilevaultConfigArgs, GetMdmFilevaultConfigResult, GetMdmFilevaultConfigOutputArgs } from "./getMdmFilevaultConfig";
export const getMdmFilevaultConfig: typeof import("./getMdmFilevaultConfig").getMdmFilevaultConfig = null as any;
export const getMdmFilevaultConfigOutput: typeof import("./getMdmFilevaultConfig").getMdmFilevaultConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMdmFilevaultConfig","getMdmFilevaultConfigOutput"], () => require("./getMdmFilevaultConfig"));

export { GetMdmOtaEnrollmentArgs, GetMdmOtaEnrollmentResult, GetMdmOtaEnrollmentOutputArgs } from "./getMdmOtaEnrollment";
export const getMdmOtaEnrollment: typeof import("./getMdmOtaEnrollment").getMdmOtaEnrollment = null as any;
export const getMdmOtaEnrollmentOutput: typeof import("./getMdmOtaEnrollment").getMdmOtaEnrollmentOutput = null as any;
utilities.lazyLoad(exports, ["getMdmOtaEnrollment","getMdmOtaEnrollmentOutput"], () => require("./getMdmOtaEnrollment"));

export { GetMdmPushCertificateArgs, GetMdmPushCertificateResult, GetMdmPushCertificateOutputArgs } from "./getMdmPushCertificate";
export const getMdmPushCertificate: typeof import("./getMdmPushCertificate").getMdmPushCertificate = null as any;
export const getMdmPushCertificateOutput: typeof import("./getMdmPushCertificate").getMdmPushCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getMdmPushCertificate","getMdmPushCertificateOutput"], () => require("./getMdmPushCertificate"));

export { GetMdmRecoveryPasswordConfigArgs, GetMdmRecoveryPasswordConfigResult, GetMdmRecoveryPasswordConfigOutputArgs } from "./getMdmRecoveryPasswordConfig";
export const getMdmRecoveryPasswordConfig: typeof import("./getMdmRecoveryPasswordConfig").getMdmRecoveryPasswordConfig = null as any;
export const getMdmRecoveryPasswordConfigOutput: typeof import("./getMdmRecoveryPasswordConfig").getMdmRecoveryPasswordConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMdmRecoveryPasswordConfig","getMdmRecoveryPasswordConfigOutput"], () => require("./getMdmRecoveryPasswordConfig"));

export { GetMdmScepConfigArgs, GetMdmScepConfigResult, GetMdmScepConfigOutputArgs } from "./getMdmScepConfig";
export const getMdmScepConfig: typeof import("./getMdmScepConfig").getMdmScepConfig = null as any;
export const getMdmScepConfigOutput: typeof import("./getMdmScepConfig").getMdmScepConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMdmScepConfig","getMdmScepConfigOutput"], () => require("./getMdmScepConfig"));

export { GetMdmSoftwareUpdateEnforcementArgs, GetMdmSoftwareUpdateEnforcementResult, GetMdmSoftwareUpdateEnforcementOutputArgs } from "./getMdmSoftwareUpdateEnforcement";
export const getMdmSoftwareUpdateEnforcement: typeof import("./getMdmSoftwareUpdateEnforcement").getMdmSoftwareUpdateEnforcement = null as any;
export const getMdmSoftwareUpdateEnforcementOutput: typeof import("./getMdmSoftwareUpdateEnforcement").getMdmSoftwareUpdateEnforcementOutput = null as any;
utilities.lazyLoad(exports, ["getMdmSoftwareUpdateEnforcement","getMdmSoftwareUpdateEnforcementOutput"], () => require("./getMdmSoftwareUpdateEnforcement"));

export { GetMetaBusinessUnitArgs, GetMetaBusinessUnitResult, GetMetaBusinessUnitOutputArgs } from "./getMetaBusinessUnit";
export const getMetaBusinessUnit: typeof import("./getMetaBusinessUnit").getMetaBusinessUnit = null as any;
export const getMetaBusinessUnitOutput: typeof import("./getMetaBusinessUnit").getMetaBusinessUnitOutput = null as any;
utilities.lazyLoad(exports, ["getMetaBusinessUnit","getMetaBusinessUnitOutput"], () => require("./getMetaBusinessUnit"));

export { GetMonolithCatalogArgs, GetMonolithCatalogResult, GetMonolithCatalogOutputArgs } from "./getMonolithCatalog";
export const getMonolithCatalog: typeof import("./getMonolithCatalog").getMonolithCatalog = null as any;
export const getMonolithCatalogOutput: typeof import("./getMonolithCatalog").getMonolithCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getMonolithCatalog","getMonolithCatalogOutput"], () => require("./getMonolithCatalog"));

export { GetMonolithConditionArgs, GetMonolithConditionResult, GetMonolithConditionOutputArgs } from "./getMonolithCondition";
export const getMonolithCondition: typeof import("./getMonolithCondition").getMonolithCondition = null as any;
export const getMonolithConditionOutput: typeof import("./getMonolithCondition").getMonolithConditionOutput = null as any;
utilities.lazyLoad(exports, ["getMonolithCondition","getMonolithConditionOutput"], () => require("./getMonolithCondition"));

export { GetMonolithEnrollmentArgs, GetMonolithEnrollmentResult, GetMonolithEnrollmentOutputArgs } from "./getMonolithEnrollment";
export const getMonolithEnrollment: typeof import("./getMonolithEnrollment").getMonolithEnrollment = null as any;
export const getMonolithEnrollmentOutput: typeof import("./getMonolithEnrollment").getMonolithEnrollmentOutput = null as any;
utilities.lazyLoad(exports, ["getMonolithEnrollment","getMonolithEnrollmentOutput"], () => require("./getMonolithEnrollment"));

export { GetMonolithManifestArgs, GetMonolithManifestResult, GetMonolithManifestOutputArgs } from "./getMonolithManifest";
export const getMonolithManifest: typeof import("./getMonolithManifest").getMonolithManifest = null as any;
export const getMonolithManifestOutput: typeof import("./getMonolithManifest").getMonolithManifestOutput = null as any;
utilities.lazyLoad(exports, ["getMonolithManifest","getMonolithManifestOutput"], () => require("./getMonolithManifest"));

export { GetMonolithRepositoryArgs, GetMonolithRepositoryResult, GetMonolithRepositoryOutputArgs } from "./getMonolithRepository";
export const getMonolithRepository: typeof import("./getMonolithRepository").getMonolithRepository = null as any;
export const getMonolithRepositoryOutput: typeof import("./getMonolithRepository").getMonolithRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getMonolithRepository","getMonolithRepositoryOutput"], () => require("./getMonolithRepository"));

export { GetMonolithSubManifestArgs, GetMonolithSubManifestResult, GetMonolithSubManifestOutputArgs } from "./getMonolithSubManifest";
export const getMonolithSubManifest: typeof import("./getMonolithSubManifest").getMonolithSubManifest = null as any;
export const getMonolithSubManifestOutput: typeof import("./getMonolithSubManifest").getMonolithSubManifestOutput = null as any;
utilities.lazyLoad(exports, ["getMonolithSubManifest","getMonolithSubManifestOutput"], () => require("./getMonolithSubManifest"));

export { GetMunkiConfigurationArgs, GetMunkiConfigurationResult, GetMunkiConfigurationOutputArgs } from "./getMunkiConfiguration";
export const getMunkiConfiguration: typeof import("./getMunkiConfiguration").getMunkiConfiguration = null as any;
export const getMunkiConfigurationOutput: typeof import("./getMunkiConfiguration").getMunkiConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getMunkiConfiguration","getMunkiConfigurationOutput"], () => require("./getMunkiConfiguration"));

export { GetMunkiEnrollmentArgs, GetMunkiEnrollmentResult, GetMunkiEnrollmentOutputArgs } from "./getMunkiEnrollment";
export const getMunkiEnrollment: typeof import("./getMunkiEnrollment").getMunkiEnrollment = null as any;
export const getMunkiEnrollmentOutput: typeof import("./getMunkiEnrollment").getMunkiEnrollmentOutput = null as any;
utilities.lazyLoad(exports, ["getMunkiEnrollment","getMunkiEnrollmentOutput"], () => require("./getMunkiEnrollment"));

export { GetMunkiScriptCheckArgs, GetMunkiScriptCheckResult, GetMunkiScriptCheckOutputArgs } from "./getMunkiScriptCheck";
export const getMunkiScriptCheck: typeof import("./getMunkiScriptCheck").getMunkiScriptCheck = null as any;
export const getMunkiScriptCheckOutput: typeof import("./getMunkiScriptCheck").getMunkiScriptCheckOutput = null as any;
utilities.lazyLoad(exports, ["getMunkiScriptCheck","getMunkiScriptCheckOutput"], () => require("./getMunkiScriptCheck"));

export { GetOsqueryAtcArgs, GetOsqueryAtcResult, GetOsqueryAtcOutputArgs } from "./getOsqueryAtc";
export const getOsqueryAtc: typeof import("./getOsqueryAtc").getOsqueryAtc = null as any;
export const getOsqueryAtcOutput: typeof import("./getOsqueryAtc").getOsqueryAtcOutput = null as any;
utilities.lazyLoad(exports, ["getOsqueryAtc","getOsqueryAtcOutput"], () => require("./getOsqueryAtc"));

export { GetOsqueryConfigurationArgs, GetOsqueryConfigurationResult, GetOsqueryConfigurationOutputArgs } from "./getOsqueryConfiguration";
export const getOsqueryConfiguration: typeof import("./getOsqueryConfiguration").getOsqueryConfiguration = null as any;
export const getOsqueryConfigurationOutput: typeof import("./getOsqueryConfiguration").getOsqueryConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getOsqueryConfiguration","getOsqueryConfigurationOutput"], () => require("./getOsqueryConfiguration"));

export { GetOsqueryEnrollmentArgs, GetOsqueryEnrollmentResult, GetOsqueryEnrollmentOutputArgs } from "./getOsqueryEnrollment";
export const getOsqueryEnrollment: typeof import("./getOsqueryEnrollment").getOsqueryEnrollment = null as any;
export const getOsqueryEnrollmentOutput: typeof import("./getOsqueryEnrollment").getOsqueryEnrollmentOutput = null as any;
utilities.lazyLoad(exports, ["getOsqueryEnrollment","getOsqueryEnrollmentOutput"], () => require("./getOsqueryEnrollment"));

export { GetOsqueryFileCategoryArgs, GetOsqueryFileCategoryResult, GetOsqueryFileCategoryOutputArgs } from "./getOsqueryFileCategory";
export const getOsqueryFileCategory: typeof import("./getOsqueryFileCategory").getOsqueryFileCategory = null as any;
export const getOsqueryFileCategoryOutput: typeof import("./getOsqueryFileCategory").getOsqueryFileCategoryOutput = null as any;
utilities.lazyLoad(exports, ["getOsqueryFileCategory","getOsqueryFileCategoryOutput"], () => require("./getOsqueryFileCategory"));

export { GetOsqueryPackArgs, GetOsqueryPackResult, GetOsqueryPackOutputArgs } from "./getOsqueryPack";
export const getOsqueryPack: typeof import("./getOsqueryPack").getOsqueryPack = null as any;
export const getOsqueryPackOutput: typeof import("./getOsqueryPack").getOsqueryPackOutput = null as any;
utilities.lazyLoad(exports, ["getOsqueryPack","getOsqueryPackOutput"], () => require("./getOsqueryPack"));

export { GetOsqueryQueryArgs, GetOsqueryQueryResult, GetOsqueryQueryOutputArgs } from "./getOsqueryQuery";
export const getOsqueryQuery: typeof import("./getOsqueryQuery").getOsqueryQuery = null as any;
export const getOsqueryQueryOutput: typeof import("./getOsqueryQuery").getOsqueryQueryOutput = null as any;
utilities.lazyLoad(exports, ["getOsqueryQuery","getOsqueryQueryOutput"], () => require("./getOsqueryQuery"));

export { GetRealmArgs, GetRealmResult, GetRealmOutputArgs } from "./getRealm";
export const getRealm: typeof import("./getRealm").getRealm = null as any;
export const getRealmOutput: typeof import("./getRealm").getRealmOutput = null as any;
utilities.lazyLoad(exports, ["getRealm","getRealmOutput"], () => require("./getRealm"));

export { GetSantaConfigurationArgs, GetSantaConfigurationResult, GetSantaConfigurationOutputArgs } from "./getSantaConfiguration";
export const getSantaConfiguration: typeof import("./getSantaConfiguration").getSantaConfiguration = null as any;
export const getSantaConfigurationOutput: typeof import("./getSantaConfiguration").getSantaConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getSantaConfiguration","getSantaConfigurationOutput"], () => require("./getSantaConfiguration"));

export { GetSantaEnrollmentArgs, GetSantaEnrollmentResult, GetSantaEnrollmentOutputArgs } from "./getSantaEnrollment";
export const getSantaEnrollment: typeof import("./getSantaEnrollment").getSantaEnrollment = null as any;
export const getSantaEnrollmentOutput: typeof import("./getSantaEnrollment").getSantaEnrollmentOutput = null as any;
utilities.lazyLoad(exports, ["getSantaEnrollment","getSantaEnrollmentOutput"], () => require("./getSantaEnrollment"));

export { GetSantaRuleArgs, GetSantaRuleResult, GetSantaRuleOutputArgs } from "./getSantaRule";
export const getSantaRule: typeof import("./getSantaRule").getSantaRule = null as any;
export const getSantaRuleOutput: typeof import("./getSantaRule").getSantaRuleOutput = null as any;
utilities.lazyLoad(exports, ["getSantaRule","getSantaRuleOutput"], () => require("./getSantaRule"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetTaxonomyArgs, GetTaxonomyResult, GetTaxonomyOutputArgs } from "./getTaxonomy";
export const getTaxonomy: typeof import("./getTaxonomy").getTaxonomy = null as any;
export const getTaxonomyOutput: typeof import("./getTaxonomy").getTaxonomyOutput = null as any;
utilities.lazyLoad(exports, ["getTaxonomy","getTaxonomyOutput"], () => require("./getTaxonomy"));

export { JmespathCheckArgs, JmespathCheckState } from "./jmespathCheck";
export type JmespathCheck = import("./jmespathCheck").JmespathCheck;
export const JmespathCheck: typeof import("./jmespathCheck").JmespathCheck = null as any;
utilities.lazyLoad(exports, ["JmespathCheck"], () => require("./jmespathCheck"));

export { MdmArtifactArgs, MdmArtifactState } from "./mdmArtifact";
export type MdmArtifact = import("./mdmArtifact").MdmArtifact;
export const MdmArtifact: typeof import("./mdmArtifact").MdmArtifact = null as any;
utilities.lazyLoad(exports, ["MdmArtifact"], () => require("./mdmArtifact"));

export { MdmBlueprintArgs, MdmBlueprintState } from "./mdmBlueprint";
export type MdmBlueprint = import("./mdmBlueprint").MdmBlueprint;
export const MdmBlueprint: typeof import("./mdmBlueprint").MdmBlueprint = null as any;
utilities.lazyLoad(exports, ["MdmBlueprint"], () => require("./mdmBlueprint"));

export { MdmBlueprintArtifactArgs, MdmBlueprintArtifactState } from "./mdmBlueprintArtifact";
export type MdmBlueprintArtifact = import("./mdmBlueprintArtifact").MdmBlueprintArtifact;
export const MdmBlueprintArtifact: typeof import("./mdmBlueprintArtifact").MdmBlueprintArtifact = null as any;
utilities.lazyLoad(exports, ["MdmBlueprintArtifact"], () => require("./mdmBlueprintArtifact"));

export { MdmEnterpriseAppArgs, MdmEnterpriseAppState } from "./mdmEnterpriseApp";
export type MdmEnterpriseApp = import("./mdmEnterpriseApp").MdmEnterpriseApp;
export const MdmEnterpriseApp: typeof import("./mdmEnterpriseApp").MdmEnterpriseApp = null as any;
utilities.lazyLoad(exports, ["MdmEnterpriseApp"], () => require("./mdmEnterpriseApp"));

export { MdmFilevaultConfigArgs, MdmFilevaultConfigState } from "./mdmFilevaultConfig";
export type MdmFilevaultConfig = import("./mdmFilevaultConfig").MdmFilevaultConfig;
export const MdmFilevaultConfig: typeof import("./mdmFilevaultConfig").MdmFilevaultConfig = null as any;
utilities.lazyLoad(exports, ["MdmFilevaultConfig"], () => require("./mdmFilevaultConfig"));

export { MdmOtaEnrollmentArgs, MdmOtaEnrollmentState } from "./mdmOtaEnrollment";
export type MdmOtaEnrollment = import("./mdmOtaEnrollment").MdmOtaEnrollment;
export const MdmOtaEnrollment: typeof import("./mdmOtaEnrollment").MdmOtaEnrollment = null as any;
utilities.lazyLoad(exports, ["MdmOtaEnrollment"], () => require("./mdmOtaEnrollment"));

export { MdmProfileArgs, MdmProfileState } from "./mdmProfile";
export type MdmProfile = import("./mdmProfile").MdmProfile;
export const MdmProfile: typeof import("./mdmProfile").MdmProfile = null as any;
utilities.lazyLoad(exports, ["MdmProfile"], () => require("./mdmProfile"));

export { MdmRecoveryPasswordConfigArgs, MdmRecoveryPasswordConfigState } from "./mdmRecoveryPasswordConfig";
export type MdmRecoveryPasswordConfig = import("./mdmRecoveryPasswordConfig").MdmRecoveryPasswordConfig;
export const MdmRecoveryPasswordConfig: typeof import("./mdmRecoveryPasswordConfig").MdmRecoveryPasswordConfig = null as any;
utilities.lazyLoad(exports, ["MdmRecoveryPasswordConfig"], () => require("./mdmRecoveryPasswordConfig"));

export { MdmSoftwareUpdateEnforcementArgs, MdmSoftwareUpdateEnforcementState } from "./mdmSoftwareUpdateEnforcement";
export type MdmSoftwareUpdateEnforcement = import("./mdmSoftwareUpdateEnforcement").MdmSoftwareUpdateEnforcement;
export const MdmSoftwareUpdateEnforcement: typeof import("./mdmSoftwareUpdateEnforcement").MdmSoftwareUpdateEnforcement = null as any;
utilities.lazyLoad(exports, ["MdmSoftwareUpdateEnforcement"], () => require("./mdmSoftwareUpdateEnforcement"));

export { MetaBusinessUnitArgs, MetaBusinessUnitState } from "./metaBusinessUnit";
export type MetaBusinessUnit = import("./metaBusinessUnit").MetaBusinessUnit;
export const MetaBusinessUnit: typeof import("./metaBusinessUnit").MetaBusinessUnit = null as any;
utilities.lazyLoad(exports, ["MetaBusinessUnit"], () => require("./metaBusinessUnit"));

export { MonolithCatalogArgs, MonolithCatalogState } from "./monolithCatalog";
export type MonolithCatalog = import("./monolithCatalog").MonolithCatalog;
export const MonolithCatalog: typeof import("./monolithCatalog").MonolithCatalog = null as any;
utilities.lazyLoad(exports, ["MonolithCatalog"], () => require("./monolithCatalog"));

export { MonolithConditionArgs, MonolithConditionState } from "./monolithCondition";
export type MonolithCondition = import("./monolithCondition").MonolithCondition;
export const MonolithCondition: typeof import("./monolithCondition").MonolithCondition = null as any;
utilities.lazyLoad(exports, ["MonolithCondition"], () => require("./monolithCondition"));

export { MonolithEnrollmentArgs, MonolithEnrollmentState } from "./monolithEnrollment";
export type MonolithEnrollment = import("./monolithEnrollment").MonolithEnrollment;
export const MonolithEnrollment: typeof import("./monolithEnrollment").MonolithEnrollment = null as any;
utilities.lazyLoad(exports, ["MonolithEnrollment"], () => require("./monolithEnrollment"));

export { MonolithManifestArgs, MonolithManifestState } from "./monolithManifest";
export type MonolithManifest = import("./monolithManifest").MonolithManifest;
export const MonolithManifest: typeof import("./monolithManifest").MonolithManifest = null as any;
utilities.lazyLoad(exports, ["MonolithManifest"], () => require("./monolithManifest"));

export { MonolithManifestCatalogArgs, MonolithManifestCatalogState } from "./monolithManifestCatalog";
export type MonolithManifestCatalog = import("./monolithManifestCatalog").MonolithManifestCatalog;
export const MonolithManifestCatalog: typeof import("./monolithManifestCatalog").MonolithManifestCatalog = null as any;
utilities.lazyLoad(exports, ["MonolithManifestCatalog"], () => require("./monolithManifestCatalog"));

export { MonolithManifestEnrollmentPackageArgs, MonolithManifestEnrollmentPackageState } from "./monolithManifestEnrollmentPackage";
export type MonolithManifestEnrollmentPackage = import("./monolithManifestEnrollmentPackage").MonolithManifestEnrollmentPackage;
export const MonolithManifestEnrollmentPackage: typeof import("./monolithManifestEnrollmentPackage").MonolithManifestEnrollmentPackage = null as any;
utilities.lazyLoad(exports, ["MonolithManifestEnrollmentPackage"], () => require("./monolithManifestEnrollmentPackage"));

export { MonolithManifestSubManifestArgs, MonolithManifestSubManifestState } from "./monolithManifestSubManifest";
export type MonolithManifestSubManifest = import("./monolithManifestSubManifest").MonolithManifestSubManifest;
export const MonolithManifestSubManifest: typeof import("./monolithManifestSubManifest").MonolithManifestSubManifest = null as any;
utilities.lazyLoad(exports, ["MonolithManifestSubManifest"], () => require("./monolithManifestSubManifest"));

export { MonolithRepositoryArgs, MonolithRepositoryState } from "./monolithRepository";
export type MonolithRepository = import("./monolithRepository").MonolithRepository;
export const MonolithRepository: typeof import("./monolithRepository").MonolithRepository = null as any;
utilities.lazyLoad(exports, ["MonolithRepository"], () => require("./monolithRepository"));

export { MonolithSubManifestArgs, MonolithSubManifestState } from "./monolithSubManifest";
export type MonolithSubManifest = import("./monolithSubManifest").MonolithSubManifest;
export const MonolithSubManifest: typeof import("./monolithSubManifest").MonolithSubManifest = null as any;
utilities.lazyLoad(exports, ["MonolithSubManifest"], () => require("./monolithSubManifest"));

export { MonolithSubManifestPkgInfoArgs, MonolithSubManifestPkgInfoState } from "./monolithSubManifestPkgInfo";
export type MonolithSubManifestPkgInfo = import("./monolithSubManifestPkgInfo").MonolithSubManifestPkgInfo;
export const MonolithSubManifestPkgInfo: typeof import("./monolithSubManifestPkgInfo").MonolithSubManifestPkgInfo = null as any;
utilities.lazyLoad(exports, ["MonolithSubManifestPkgInfo"], () => require("./monolithSubManifestPkgInfo"));

export { MunkiConfigurationArgs, MunkiConfigurationState } from "./munkiConfiguration";
export type MunkiConfiguration = import("./munkiConfiguration").MunkiConfiguration;
export const MunkiConfiguration: typeof import("./munkiConfiguration").MunkiConfiguration = null as any;
utilities.lazyLoad(exports, ["MunkiConfiguration"], () => require("./munkiConfiguration"));

export { MunkiEnrollmentArgs, MunkiEnrollmentState } from "./munkiEnrollment";
export type MunkiEnrollment = import("./munkiEnrollment").MunkiEnrollment;
export const MunkiEnrollment: typeof import("./munkiEnrollment").MunkiEnrollment = null as any;
utilities.lazyLoad(exports, ["MunkiEnrollment"], () => require("./munkiEnrollment"));

export { MunkiScriptCheckArgs, MunkiScriptCheckState } from "./munkiScriptCheck";
export type MunkiScriptCheck = import("./munkiScriptCheck").MunkiScriptCheck;
export const MunkiScriptCheck: typeof import("./munkiScriptCheck").MunkiScriptCheck = null as any;
utilities.lazyLoad(exports, ["MunkiScriptCheck"], () => require("./munkiScriptCheck"));

export { OsqueryAtcArgs, OsqueryAtcState } from "./osqueryAtc";
export type OsqueryAtc = import("./osqueryAtc").OsqueryAtc;
export const OsqueryAtc: typeof import("./osqueryAtc").OsqueryAtc = null as any;
utilities.lazyLoad(exports, ["OsqueryAtc"], () => require("./osqueryAtc"));

export { OsqueryConfigurationArgs, OsqueryConfigurationState } from "./osqueryConfiguration";
export type OsqueryConfiguration = import("./osqueryConfiguration").OsqueryConfiguration;
export const OsqueryConfiguration: typeof import("./osqueryConfiguration").OsqueryConfiguration = null as any;
utilities.lazyLoad(exports, ["OsqueryConfiguration"], () => require("./osqueryConfiguration"));

export { OsqueryConfigurationPackArgs, OsqueryConfigurationPackState } from "./osqueryConfigurationPack";
export type OsqueryConfigurationPack = import("./osqueryConfigurationPack").OsqueryConfigurationPack;
export const OsqueryConfigurationPack: typeof import("./osqueryConfigurationPack").OsqueryConfigurationPack = null as any;
utilities.lazyLoad(exports, ["OsqueryConfigurationPack"], () => require("./osqueryConfigurationPack"));

export { OsqueryEnrollmentArgs, OsqueryEnrollmentState } from "./osqueryEnrollment";
export type OsqueryEnrollment = import("./osqueryEnrollment").OsqueryEnrollment;
export const OsqueryEnrollment: typeof import("./osqueryEnrollment").OsqueryEnrollment = null as any;
utilities.lazyLoad(exports, ["OsqueryEnrollment"], () => require("./osqueryEnrollment"));

export { OsqueryFileCategoryArgs, OsqueryFileCategoryState } from "./osqueryFileCategory";
export type OsqueryFileCategory = import("./osqueryFileCategory").OsqueryFileCategory;
export const OsqueryFileCategory: typeof import("./osqueryFileCategory").OsqueryFileCategory = null as any;
utilities.lazyLoad(exports, ["OsqueryFileCategory"], () => require("./osqueryFileCategory"));

export { OsqueryPackArgs, OsqueryPackState } from "./osqueryPack";
export type OsqueryPack = import("./osqueryPack").OsqueryPack;
export const OsqueryPack: typeof import("./osqueryPack").OsqueryPack = null as any;
utilities.lazyLoad(exports, ["OsqueryPack"], () => require("./osqueryPack"));

export { OsqueryQueryArgs, OsqueryQueryState } from "./osqueryQuery";
export type OsqueryQuery = import("./osqueryQuery").OsqueryQuery;
export const OsqueryQuery: typeof import("./osqueryQuery").OsqueryQuery = null as any;
utilities.lazyLoad(exports, ["OsqueryQuery"], () => require("./osqueryQuery"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SantaConfigurationArgs, SantaConfigurationState } from "./santaConfiguration";
export type SantaConfiguration = import("./santaConfiguration").SantaConfiguration;
export const SantaConfiguration: typeof import("./santaConfiguration").SantaConfiguration = null as any;
utilities.lazyLoad(exports, ["SantaConfiguration"], () => require("./santaConfiguration"));

export { SantaEnrollmentArgs, SantaEnrollmentState } from "./santaEnrollment";
export type SantaEnrollment = import("./santaEnrollment").SantaEnrollment;
export const SantaEnrollment: typeof import("./santaEnrollment").SantaEnrollment = null as any;
utilities.lazyLoad(exports, ["SantaEnrollment"], () => require("./santaEnrollment"));

export { SantaRuleArgs, SantaRuleState } from "./santaRule";
export type SantaRule = import("./santaRule").SantaRule;
export const SantaRule: typeof import("./santaRule").SantaRule = null as any;
utilities.lazyLoad(exports, ["SantaRule"], () => require("./santaRule"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { TaxonomyArgs, TaxonomyState } from "./taxonomy";
export type Taxonomy = import("./taxonomy").Taxonomy;
export const Taxonomy: typeof import("./taxonomy").Taxonomy = null as any;
utilities.lazyLoad(exports, ["Taxonomy"], () => require("./taxonomy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zentral:index/jmespathCheck:JmespathCheck":
                return new JmespathCheck(name, <any>undefined, { urn })
            case "zentral:index/mdmArtifact:MdmArtifact":
                return new MdmArtifact(name, <any>undefined, { urn })
            case "zentral:index/mdmBlueprint:MdmBlueprint":
                return new MdmBlueprint(name, <any>undefined, { urn })
            case "zentral:index/mdmBlueprintArtifact:MdmBlueprintArtifact":
                return new MdmBlueprintArtifact(name, <any>undefined, { urn })
            case "zentral:index/mdmEnterpriseApp:MdmEnterpriseApp":
                return new MdmEnterpriseApp(name, <any>undefined, { urn })
            case "zentral:index/mdmFilevaultConfig:MdmFilevaultConfig":
                return new MdmFilevaultConfig(name, <any>undefined, { urn })
            case "zentral:index/mdmOtaEnrollment:MdmOtaEnrollment":
                return new MdmOtaEnrollment(name, <any>undefined, { urn })
            case "zentral:index/mdmProfile:MdmProfile":
                return new MdmProfile(name, <any>undefined, { urn })
            case "zentral:index/mdmRecoveryPasswordConfig:MdmRecoveryPasswordConfig":
                return new MdmRecoveryPasswordConfig(name, <any>undefined, { urn })
            case "zentral:index/mdmSoftwareUpdateEnforcement:MdmSoftwareUpdateEnforcement":
                return new MdmSoftwareUpdateEnforcement(name, <any>undefined, { urn })
            case "zentral:index/metaBusinessUnit:MetaBusinessUnit":
                return new MetaBusinessUnit(name, <any>undefined, { urn })
            case "zentral:index/monolithCatalog:MonolithCatalog":
                return new MonolithCatalog(name, <any>undefined, { urn })
            case "zentral:index/monolithCondition:MonolithCondition":
                return new MonolithCondition(name, <any>undefined, { urn })
            case "zentral:index/monolithEnrollment:MonolithEnrollment":
                return new MonolithEnrollment(name, <any>undefined, { urn })
            case "zentral:index/monolithManifest:MonolithManifest":
                return new MonolithManifest(name, <any>undefined, { urn })
            case "zentral:index/monolithManifestCatalog:MonolithManifestCatalog":
                return new MonolithManifestCatalog(name, <any>undefined, { urn })
            case "zentral:index/monolithManifestEnrollmentPackage:MonolithManifestEnrollmentPackage":
                return new MonolithManifestEnrollmentPackage(name, <any>undefined, { urn })
            case "zentral:index/monolithManifestSubManifest:MonolithManifestSubManifest":
                return new MonolithManifestSubManifest(name, <any>undefined, { urn })
            case "zentral:index/monolithRepository:MonolithRepository":
                return new MonolithRepository(name, <any>undefined, { urn })
            case "zentral:index/monolithSubManifest:MonolithSubManifest":
                return new MonolithSubManifest(name, <any>undefined, { urn })
            case "zentral:index/monolithSubManifestPkgInfo:MonolithSubManifestPkgInfo":
                return new MonolithSubManifestPkgInfo(name, <any>undefined, { urn })
            case "zentral:index/munkiConfiguration:MunkiConfiguration":
                return new MunkiConfiguration(name, <any>undefined, { urn })
            case "zentral:index/munkiEnrollment:MunkiEnrollment":
                return new MunkiEnrollment(name, <any>undefined, { urn })
            case "zentral:index/munkiScriptCheck:MunkiScriptCheck":
                return new MunkiScriptCheck(name, <any>undefined, { urn })
            case "zentral:index/osqueryAtc:OsqueryAtc":
                return new OsqueryAtc(name, <any>undefined, { urn })
            case "zentral:index/osqueryConfiguration:OsqueryConfiguration":
                return new OsqueryConfiguration(name, <any>undefined, { urn })
            case "zentral:index/osqueryConfigurationPack:OsqueryConfigurationPack":
                return new OsqueryConfigurationPack(name, <any>undefined, { urn })
            case "zentral:index/osqueryEnrollment:OsqueryEnrollment":
                return new OsqueryEnrollment(name, <any>undefined, { urn })
            case "zentral:index/osqueryFileCategory:OsqueryFileCategory":
                return new OsqueryFileCategory(name, <any>undefined, { urn })
            case "zentral:index/osqueryPack:OsqueryPack":
                return new OsqueryPack(name, <any>undefined, { urn })
            case "zentral:index/osqueryQuery:OsqueryQuery":
                return new OsqueryQuery(name, <any>undefined, { urn })
            case "zentral:index/santaConfiguration:SantaConfiguration":
                return new SantaConfiguration(name, <any>undefined, { urn })
            case "zentral:index/santaEnrollment:SantaEnrollment":
                return new SantaEnrollment(name, <any>undefined, { urn })
            case "zentral:index/santaRule:SantaRule":
                return new SantaRule(name, <any>undefined, { urn })
            case "zentral:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "zentral:index/taxonomy:Taxonomy":
                return new Taxonomy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zentral", "index/jmespathCheck", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmArtifact", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmBlueprint", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmBlueprintArtifact", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmEnterpriseApp", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmFilevaultConfig", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmOtaEnrollment", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmProfile", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmRecoveryPasswordConfig", _module)
pulumi.runtime.registerResourceModule("zentral", "index/mdmSoftwareUpdateEnforcement", _module)
pulumi.runtime.registerResourceModule("zentral", "index/metaBusinessUnit", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithCatalog", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithCondition", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithEnrollment", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithManifest", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithManifestCatalog", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithManifestEnrollmentPackage", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithManifestSubManifest", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithRepository", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithSubManifest", _module)
pulumi.runtime.registerResourceModule("zentral", "index/monolithSubManifestPkgInfo", _module)
pulumi.runtime.registerResourceModule("zentral", "index/munkiConfiguration", _module)
pulumi.runtime.registerResourceModule("zentral", "index/munkiEnrollment", _module)
pulumi.runtime.registerResourceModule("zentral", "index/munkiScriptCheck", _module)
pulumi.runtime.registerResourceModule("zentral", "index/osqueryAtc", _module)
pulumi.runtime.registerResourceModule("zentral", "index/osqueryConfiguration", _module)
pulumi.runtime.registerResourceModule("zentral", "index/osqueryConfigurationPack", _module)
pulumi.runtime.registerResourceModule("zentral", "index/osqueryEnrollment", _module)
pulumi.runtime.registerResourceModule("zentral", "index/osqueryFileCategory", _module)
pulumi.runtime.registerResourceModule("zentral", "index/osqueryPack", _module)
pulumi.runtime.registerResourceModule("zentral", "index/osqueryQuery", _module)
pulumi.runtime.registerResourceModule("zentral", "index/santaConfiguration", _module)
pulumi.runtime.registerResourceModule("zentral", "index/santaEnrollment", _module)
pulumi.runtime.registerResourceModule("zentral", "index/santaRule", _module)
pulumi.runtime.registerResourceModule("zentral", "index/tag", _module)
pulumi.runtime.registerResourceModule("zentral", "index/taxonomy", _module)
pulumi.runtime.registerResourcePackage("zentral", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:zentral") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
