// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OsqueryPack extends pulumi.CustomResource {
    /**
     * Get an existing OsqueryPack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsqueryPackState, opts?: pulumi.CustomResourceOptions): OsqueryPack {
        return new OsqueryPack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/osqueryPack:OsqueryPack';

    /**
     * Returns true if the given object is an instance of OsqueryPack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsqueryPack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsqueryPack.__pulumiType;
    }

    /**
     * Description of the pack.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of osquery queries which control whether or not the pack will execute.
     */
    public readonly discoveryQueries!: pulumi.Output<string[]>;
    /**
     * Routing key added to the metadata of the events that the queries of this pack generate.
     */
    public readonly eventRoutingKey!: pulumi.Output<string>;
    /**
     * Name of the pack.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Restrict the pack to a percentage (1-100) of target hosts.
     */
    public readonly shard!: pulumi.Output<number | undefined>;
    /**
     * Slug of the pack.
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;

    /**
     * Create a OsqueryPack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OsqueryPackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsqueryPackArgs | OsqueryPackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsqueryPackState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discoveryQueries"] = state ? state.discoveryQueries : undefined;
            resourceInputs["eventRoutingKey"] = state ? state.eventRoutingKey : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["shard"] = state ? state.shard : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
        } else {
            const args = argsOrState as OsqueryPackArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discoveryQueries"] = args ? args.discoveryQueries : undefined;
            resourceInputs["eventRoutingKey"] = args ? args.eventRoutingKey : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["shard"] = args ? args.shard : undefined;
            resourceInputs["slug"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsqueryPack.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsqueryPack resources.
 */
export interface OsqueryPackState {
    /**
     * Description of the pack.
     */
    description?: pulumi.Input<string>;
    /**
     * List of osquery queries which control whether or not the pack will execute.
     */
    discoveryQueries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Routing key added to the metadata of the events that the queries of this pack generate.
     */
    eventRoutingKey?: pulumi.Input<string>;
    /**
     * Name of the pack.
     */
    name?: pulumi.Input<string>;
    /**
     * Restrict the pack to a percentage (1-100) of target hosts.
     */
    shard?: pulumi.Input<number>;
    /**
     * Slug of the pack.
     */
    slug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsqueryPack resource.
 */
export interface OsqueryPackArgs {
    /**
     * Description of the pack.
     */
    description?: pulumi.Input<string>;
    /**
     * List of osquery queries which control whether or not the pack will execute.
     */
    discoveryQueries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Routing key added to the metadata of the events that the queries of this pack generate.
     */
    eventRoutingKey?: pulumi.Input<string>;
    /**
     * Name of the pack.
     */
    name?: pulumi.Input<string>;
    /**
     * Restrict the pack to a percentage (1-100) of target hosts.
     */
    shard?: pulumi.Input<number>;
}
