// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OsqueryFileCategory extends pulumi.CustomResource {
    /**
     * Get an existing OsqueryFileCategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OsqueryFileCategoryState, opts?: pulumi.CustomResourceOptions): OsqueryFileCategory {
        return new OsqueryFileCategory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/osqueryFileCategory:OsqueryFileCategory';

    /**
     * Returns true if the given object is an instance of OsqueryFileCategory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OsqueryFileCategory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OsqueryFileCategory.__pulumiType;
    }

    /**
     * If `true`, FIM will include file access for this file category. Defaults to `false`.
     */
    public readonly accessMonitoring!: pulumi.Output<boolean>;
    /**
     * Description of the Osquery file category.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Set of paths to exclude from the Osquery file category.
     */
    public readonly excludePaths!: pulumi.Output<string[]>;
    /**
     * Set of paths to include in the Osquery file category.
     */
    public readonly filePaths!: pulumi.Output<string[]>;
    /**
     * Set of queries returning paths to monitor as path columns in the results.
     */
    public readonly filePathsQueries!: pulumi.Output<string[]>;
    /**
     * Name of the Osquery file category.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a OsqueryFileCategory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OsqueryFileCategoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OsqueryFileCategoryArgs | OsqueryFileCategoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OsqueryFileCategoryState | undefined;
            resourceInputs["accessMonitoring"] = state ? state.accessMonitoring : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excludePaths"] = state ? state.excludePaths : undefined;
            resourceInputs["filePaths"] = state ? state.filePaths : undefined;
            resourceInputs["filePathsQueries"] = state ? state.filePathsQueries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as OsqueryFileCategoryArgs | undefined;
            resourceInputs["accessMonitoring"] = args ? args.accessMonitoring : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excludePaths"] = args ? args.excludePaths : undefined;
            resourceInputs["filePaths"] = args ? args.filePaths : undefined;
            resourceInputs["filePathsQueries"] = args ? args.filePathsQueries : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OsqueryFileCategory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OsqueryFileCategory resources.
 */
export interface OsqueryFileCategoryState {
    /**
     * If `true`, FIM will include file access for this file category. Defaults to `false`.
     */
    accessMonitoring?: pulumi.Input<boolean>;
    /**
     * Description of the Osquery file category.
     */
    description?: pulumi.Input<string>;
    /**
     * Set of paths to exclude from the Osquery file category.
     */
    excludePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of paths to include in the Osquery file category.
     */
    filePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of queries returning paths to monitor as path columns in the results.
     */
    filePathsQueries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Osquery file category.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OsqueryFileCategory resource.
 */
export interface OsqueryFileCategoryArgs {
    /**
     * If `true`, FIM will include file access for this file category. Defaults to `false`.
     */
    accessMonitoring?: pulumi.Input<boolean>;
    /**
     * Description of the Osquery file category.
     */
    description?: pulumi.Input<string>;
    /**
     * Set of paths to exclude from the Osquery file category.
     */
    excludePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of paths to include in the Osquery file category.
     */
    filePaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of queries returning paths to monitor as path columns in the results.
     */
    filePathsQueries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Osquery file category.
     */
    name?: pulumi.Input<string>;
}
