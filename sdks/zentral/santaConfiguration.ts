// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SantaConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SantaConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SantaConfigurationState, opts?: pulumi.CustomResourceOptions): SantaConfiguration {
        return new SantaConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/santaConfiguration:SantaConfiguration';

    /**
     * Returns true if the given object is an instance of SantaConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SantaConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SantaConfiguration.__pulumiType;
    }

    /**
     * Restrict the reporting of 'Allow Unknown' events to a percentage (0-100) of hosts.
     */
    public readonly allowUnknownShard!: pulumi.Output<number>;
    /**
     * A regex to allow if the binary, certificate, or Team ID scopes did not allow/block execution.
     */
    public readonly allowedPathRegex!: pulumi.Output<string>;
    /**
     * The number of rules to download or events to upload per request.
     */
    public readonly batchSize!: pulumi.Output<number>;
    /**
     * If set to `true` blocking USB Mass storage feature is enabled.
     */
    public readonly blockUsbMount!: pulumi.Output<boolean>;
    /**
     * A regex to block if the binary, certificate, or Team ID scopes did not allow/block an execution.
     */
    public readonly blockedPathRegex!: pulumi.Output<string>;
    /**
     * If `true`, mTLS is required between Santa and Zentral.
     */
    public readonly clientCertificateAuth!: pulumi.Output<boolean>;
    /**
     * Client mode of the Santa configuration. Valid values are `MONITOR` and `LOCKDOWN`. Defaults to `MONITOR`.
     */
    public readonly clientMode!: pulumi.Output<string>;
    /**
     * Restrict the upload of all execution events to Zentral, including those that were explicitly allowed, to a percentage
     * (0-100) of hosts
     */
    public readonly enableAllEventUploadShard!: pulumi.Output<number>;
    /**
     * If set to `true` the bundle scanning feature is enabled.
     */
    public readonly enableBundles!: pulumi.Output<boolean>;
    /**
     * If set to `true` the transitive rule feature is enabled.
     */
    public readonly enableTransitiveRules!: pulumi.Output<boolean>;
    /**
     * The max time to wait before performing a full sync with the server.
     */
    public readonly fullSyncInterval!: pulumi.Output<number>;
    /**
     * Name of the Santa configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Array of strings for arguments to pass to `mount -o`.
     */
    public readonly remountUsbModes!: pulumi.Output<string[]>;
    /**
     * If 100, 200, 300, incidents will be automatically opened and closed when the santa agent rules are out of sync.
     */
    public readonly syncIncidentSeverity!: pulumi.Output<number>;

    /**
     * Create a SantaConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SantaConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SantaConfigurationArgs | SantaConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SantaConfigurationState | undefined;
            resourceInputs["allowUnknownShard"] = state ? state.allowUnknownShard : undefined;
            resourceInputs["allowedPathRegex"] = state ? state.allowedPathRegex : undefined;
            resourceInputs["batchSize"] = state ? state.batchSize : undefined;
            resourceInputs["blockUsbMount"] = state ? state.blockUsbMount : undefined;
            resourceInputs["blockedPathRegex"] = state ? state.blockedPathRegex : undefined;
            resourceInputs["clientCertificateAuth"] = state ? state.clientCertificateAuth : undefined;
            resourceInputs["clientMode"] = state ? state.clientMode : undefined;
            resourceInputs["enableAllEventUploadShard"] = state ? state.enableAllEventUploadShard : undefined;
            resourceInputs["enableBundles"] = state ? state.enableBundles : undefined;
            resourceInputs["enableTransitiveRules"] = state ? state.enableTransitiveRules : undefined;
            resourceInputs["fullSyncInterval"] = state ? state.fullSyncInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remountUsbModes"] = state ? state.remountUsbModes : undefined;
            resourceInputs["syncIncidentSeverity"] = state ? state.syncIncidentSeverity : undefined;
        } else {
            const args = argsOrState as SantaConfigurationArgs | undefined;
            resourceInputs["allowUnknownShard"] = args ? args.allowUnknownShard : undefined;
            resourceInputs["allowedPathRegex"] = args ? args.allowedPathRegex : undefined;
            resourceInputs["batchSize"] = args ? args.batchSize : undefined;
            resourceInputs["blockUsbMount"] = args ? args.blockUsbMount : undefined;
            resourceInputs["blockedPathRegex"] = args ? args.blockedPathRegex : undefined;
            resourceInputs["clientCertificateAuth"] = args ? args.clientCertificateAuth : undefined;
            resourceInputs["clientMode"] = args ? args.clientMode : undefined;
            resourceInputs["enableAllEventUploadShard"] = args ? args.enableAllEventUploadShard : undefined;
            resourceInputs["enableBundles"] = args ? args.enableBundles : undefined;
            resourceInputs["enableTransitiveRules"] = args ? args.enableTransitiveRules : undefined;
            resourceInputs["fullSyncInterval"] = args ? args.fullSyncInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remountUsbModes"] = args ? args.remountUsbModes : undefined;
            resourceInputs["syncIncidentSeverity"] = args ? args.syncIncidentSeverity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SantaConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SantaConfiguration resources.
 */
export interface SantaConfigurationState {
    /**
     * Restrict the reporting of 'Allow Unknown' events to a percentage (0-100) of hosts.
     */
    allowUnknownShard?: pulumi.Input<number>;
    /**
     * A regex to allow if the binary, certificate, or Team ID scopes did not allow/block execution.
     */
    allowedPathRegex?: pulumi.Input<string>;
    /**
     * The number of rules to download or events to upload per request.
     */
    batchSize?: pulumi.Input<number>;
    /**
     * If set to `true` blocking USB Mass storage feature is enabled.
     */
    blockUsbMount?: pulumi.Input<boolean>;
    /**
     * A regex to block if the binary, certificate, or Team ID scopes did not allow/block an execution.
     */
    blockedPathRegex?: pulumi.Input<string>;
    /**
     * If `true`, mTLS is required between Santa and Zentral.
     */
    clientCertificateAuth?: pulumi.Input<boolean>;
    /**
     * Client mode of the Santa configuration. Valid values are `MONITOR` and `LOCKDOWN`. Defaults to `MONITOR`.
     */
    clientMode?: pulumi.Input<string>;
    /**
     * Restrict the upload of all execution events to Zentral, including those that were explicitly allowed, to a percentage
     * (0-100) of hosts
     */
    enableAllEventUploadShard?: pulumi.Input<number>;
    /**
     * If set to `true` the bundle scanning feature is enabled.
     */
    enableBundles?: pulumi.Input<boolean>;
    /**
     * If set to `true` the transitive rule feature is enabled.
     */
    enableTransitiveRules?: pulumi.Input<boolean>;
    /**
     * The max time to wait before performing a full sync with the server.
     */
    fullSyncInterval?: pulumi.Input<number>;
    /**
     * Name of the Santa configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Array of strings for arguments to pass to `mount -o`.
     */
    remountUsbModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If 100, 200, 300, incidents will be automatically opened and closed when the santa agent rules are out of sync.
     */
    syncIncidentSeverity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SantaConfiguration resource.
 */
export interface SantaConfigurationArgs {
    /**
     * Restrict the reporting of 'Allow Unknown' events to a percentage (0-100) of hosts.
     */
    allowUnknownShard?: pulumi.Input<number>;
    /**
     * A regex to allow if the binary, certificate, or Team ID scopes did not allow/block execution.
     */
    allowedPathRegex?: pulumi.Input<string>;
    /**
     * The number of rules to download or events to upload per request.
     */
    batchSize?: pulumi.Input<number>;
    /**
     * If set to `true` blocking USB Mass storage feature is enabled.
     */
    blockUsbMount?: pulumi.Input<boolean>;
    /**
     * A regex to block if the binary, certificate, or Team ID scopes did not allow/block an execution.
     */
    blockedPathRegex?: pulumi.Input<string>;
    /**
     * If `true`, mTLS is required between Santa and Zentral.
     */
    clientCertificateAuth?: pulumi.Input<boolean>;
    /**
     * Client mode of the Santa configuration. Valid values are `MONITOR` and `LOCKDOWN`. Defaults to `MONITOR`.
     */
    clientMode?: pulumi.Input<string>;
    /**
     * Restrict the upload of all execution events to Zentral, including those that were explicitly allowed, to a percentage
     * (0-100) of hosts
     */
    enableAllEventUploadShard?: pulumi.Input<number>;
    /**
     * If set to `true` the bundle scanning feature is enabled.
     */
    enableBundles?: pulumi.Input<boolean>;
    /**
     * If set to `true` the transitive rule feature is enabled.
     */
    enableTransitiveRules?: pulumi.Input<boolean>;
    /**
     * The max time to wait before performing a full sync with the server.
     */
    fullSyncInterval?: pulumi.Input<number>;
    /**
     * Name of the Santa configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Array of strings for arguments to pass to `mount -o`.
     */
    remountUsbModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If 100, 200, 300, incidents will be automatically opened and closed when the santa agent rules are out of sync.
     */
    syncIncidentSeverity?: pulumi.Input<number>;
}
