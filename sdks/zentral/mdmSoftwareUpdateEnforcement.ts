// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MdmSoftwareUpdateEnforcement extends pulumi.CustomResource {
    /**
     * Get an existing MdmSoftwareUpdateEnforcement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdmSoftwareUpdateEnforcementState, opts?: pulumi.CustomResourceOptions): MdmSoftwareUpdateEnforcement {
        return new MdmSoftwareUpdateEnforcement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/mdmSoftwareUpdateEnforcement:MdmSoftwareUpdateEnforcement';

    /**
     * Returns true if the given object is an instance of MdmSoftwareUpdateEnforcement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdmSoftwareUpdateEnforcement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdmSoftwareUpdateEnforcement.__pulumiType;
    }

    /**
     * The target build version to update the device to by the appropriate time.
     */
    public readonly buildVersion!: pulumi.Output<string>;
    /**
     * Number of days after a software update release before the device force installs it.
     */
    public readonly delayDays!: pulumi.Output<number>;
    /**
     * The URL of a web page that shows details that the organization provides about the enforced update.
     */
    public readonly detailsUrl!: pulumi.Output<string>;
    /**
     * The local date time value that specifies when to force install the software update.
     */
    public readonly localDatetime!: pulumi.Output<string | undefined>;
    /**
     * The local time value that specifies when to force install the software update.
     */
    public readonly localTime!: pulumi.Output<string>;
    /**
     * The maximum (excluded) target OS version to update the device to by the appropriate time.
     */
    public readonly maxOsVersion!: pulumi.Output<string>;
    /**
     * Name of the software update enforcement.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The target OS version to update the device to by the appropriate time.
     */
    public readonly osVersion!: pulumi.Output<string>;
    /**
     * Restrict the software update enforcement to some platforms.
     */
    public readonly platforms!: pulumi.Output<string[]>;
    /**
     * The `ID`s of the tags used to scope the software update enforcement.
     */
    public readonly tagIds!: pulumi.Output<number[]>;

    /**
     * Create a MdmSoftwareUpdateEnforcement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdmSoftwareUpdateEnforcementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdmSoftwareUpdateEnforcementArgs | MdmSoftwareUpdateEnforcementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdmSoftwareUpdateEnforcementState | undefined;
            resourceInputs["buildVersion"] = state ? state.buildVersion : undefined;
            resourceInputs["delayDays"] = state ? state.delayDays : undefined;
            resourceInputs["detailsUrl"] = state ? state.detailsUrl : undefined;
            resourceInputs["localDatetime"] = state ? state.localDatetime : undefined;
            resourceInputs["localTime"] = state ? state.localTime : undefined;
            resourceInputs["maxOsVersion"] = state ? state.maxOsVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
        } else {
            const args = argsOrState as MdmSoftwareUpdateEnforcementArgs | undefined;
            if ((!args || args.platforms === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platforms'");
            }
            resourceInputs["buildVersion"] = args ? args.buildVersion : undefined;
            resourceInputs["delayDays"] = args ? args.delayDays : undefined;
            resourceInputs["detailsUrl"] = args ? args.detailsUrl : undefined;
            resourceInputs["localDatetime"] = args ? args.localDatetime : undefined;
            resourceInputs["localTime"] = args ? args.localTime : undefined;
            resourceInputs["maxOsVersion"] = args ? args.maxOsVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osVersion"] = args ? args.osVersion : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdmSoftwareUpdateEnforcement.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MdmSoftwareUpdateEnforcement resources.
 */
export interface MdmSoftwareUpdateEnforcementState {
    /**
     * The target build version to update the device to by the appropriate time.
     */
    buildVersion?: pulumi.Input<string>;
    /**
     * Number of days after a software update release before the device force installs it.
     */
    delayDays?: pulumi.Input<number>;
    /**
     * The URL of a web page that shows details that the organization provides about the enforced update.
     */
    detailsUrl?: pulumi.Input<string>;
    /**
     * The local date time value that specifies when to force install the software update.
     */
    localDatetime?: pulumi.Input<string>;
    /**
     * The local time value that specifies when to force install the software update.
     */
    localTime?: pulumi.Input<string>;
    /**
     * The maximum (excluded) target OS version to update the device to by the appropriate time.
     */
    maxOsVersion?: pulumi.Input<string>;
    /**
     * Name of the software update enforcement.
     */
    name?: pulumi.Input<string>;
    /**
     * The target OS version to update the device to by the appropriate time.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Restrict the software update enforcement to some platforms.
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the tags used to scope the software update enforcement.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a MdmSoftwareUpdateEnforcement resource.
 */
export interface MdmSoftwareUpdateEnforcementArgs {
    /**
     * The target build version to update the device to by the appropriate time.
     */
    buildVersion?: pulumi.Input<string>;
    /**
     * Number of days after a software update release before the device force installs it.
     */
    delayDays?: pulumi.Input<number>;
    /**
     * The URL of a web page that shows details that the organization provides about the enforced update.
     */
    detailsUrl?: pulumi.Input<string>;
    /**
     * The local date time value that specifies when to force install the software update.
     */
    localDatetime?: pulumi.Input<string>;
    /**
     * The local time value that specifies when to force install the software update.
     */
    localTime?: pulumi.Input<string>;
    /**
     * The maximum (excluded) target OS version to update the device to by the appropriate time.
     */
    maxOsVersion?: pulumi.Input<string>;
    /**
     * Name of the software update enforcement.
     */
    name?: pulumi.Input<string>;
    /**
     * The target OS version to update the device to by the appropriate time.
     */
    osVersion?: pulumi.Input<string>;
    /**
     * Restrict the software update enforcement to some platforms.
     */
    platforms: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the tags used to scope the software update enforcement.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
}
