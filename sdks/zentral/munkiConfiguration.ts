// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MunkiConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing MunkiConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MunkiConfigurationState, opts?: pulumi.CustomResourceOptions): MunkiConfiguration {
        return new MunkiConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/munkiConfiguration:MunkiConfiguration';

    /**
     * Returns true if the given object is an instance of MunkiConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MunkiConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MunkiConfiguration.__pulumiType;
    }

    /**
     * If `true`, incidents will be managed automatically when package failed installs are observed. Defaults to `false`.
     */
    public readonly autoFailedInstallIncidents!: pulumi.Output<boolean>;
    /**
     * If `true`, incidents will be managed automatically when package reinstalls are observed. Defaults to `false`.
     */
    public readonly autoReinstallIncidents!: pulumi.Output<boolean>;
    /**
     * Set of the condition keys to collect.
     */
    public readonly collectedConditionKeys!: pulumi.Output<string[]>;
    /**
     * Description of the Munki configuration.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Percentage of machines configured to collect the full inventory apps information. Defaults to `100`.
     */
    public readonly inventoryAppsFullInfoShard!: pulumi.Output<number>;
    /**
     * Interval in days between full managed installs sync. Defaults to 7 days.
     */
    public readonly managedInstallsSyncIntervalDays!: pulumi.Output<number>;
    /**
     * Name of the Munki configuration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set of principal user detection domains.
     */
    public readonly principalUserDetectionDomains!: pulumi.Output<string[]>;
    /**
     * List of principal user detection sources.
     */
    public readonly principalUserDetectionSources!: pulumi.Output<string[]>;
    /**
     * Interval in seconds between script checks runs. Defaults to 86400 seconds (1 day).
     */
    public readonly scriptChecksRunIntervalSeconds!: pulumi.Output<number>;
    /**
     * Version of the Munki configuration.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a MunkiConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MunkiConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MunkiConfigurationArgs | MunkiConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MunkiConfigurationState | undefined;
            resourceInputs["autoFailedInstallIncidents"] = state ? state.autoFailedInstallIncidents : undefined;
            resourceInputs["autoReinstallIncidents"] = state ? state.autoReinstallIncidents : undefined;
            resourceInputs["collectedConditionKeys"] = state ? state.collectedConditionKeys : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inventoryAppsFullInfoShard"] = state ? state.inventoryAppsFullInfoShard : undefined;
            resourceInputs["managedInstallsSyncIntervalDays"] = state ? state.managedInstallsSyncIntervalDays : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["principalUserDetectionDomains"] = state ? state.principalUserDetectionDomains : undefined;
            resourceInputs["principalUserDetectionSources"] = state ? state.principalUserDetectionSources : undefined;
            resourceInputs["scriptChecksRunIntervalSeconds"] = state ? state.scriptChecksRunIntervalSeconds : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as MunkiConfigurationArgs | undefined;
            resourceInputs["autoFailedInstallIncidents"] = args ? args.autoFailedInstallIncidents : undefined;
            resourceInputs["autoReinstallIncidents"] = args ? args.autoReinstallIncidents : undefined;
            resourceInputs["collectedConditionKeys"] = args ? args.collectedConditionKeys : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inventoryAppsFullInfoShard"] = args ? args.inventoryAppsFullInfoShard : undefined;
            resourceInputs["managedInstallsSyncIntervalDays"] = args ? args.managedInstallsSyncIntervalDays : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["principalUserDetectionDomains"] = args ? args.principalUserDetectionDomains : undefined;
            resourceInputs["principalUserDetectionSources"] = args ? args.principalUserDetectionSources : undefined;
            resourceInputs["scriptChecksRunIntervalSeconds"] = args ? args.scriptChecksRunIntervalSeconds : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MunkiConfiguration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MunkiConfiguration resources.
 */
export interface MunkiConfigurationState {
    /**
     * If `true`, incidents will be managed automatically when package failed installs are observed. Defaults to `false`.
     */
    autoFailedInstallIncidents?: pulumi.Input<boolean>;
    /**
     * If `true`, incidents will be managed automatically when package reinstalls are observed. Defaults to `false`.
     */
    autoReinstallIncidents?: pulumi.Input<boolean>;
    /**
     * Set of the condition keys to collect.
     */
    collectedConditionKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the Munki configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Percentage of machines configured to collect the full inventory apps information. Defaults to `100`.
     */
    inventoryAppsFullInfoShard?: pulumi.Input<number>;
    /**
     * Interval in days between full managed installs sync. Defaults to 7 days.
     */
    managedInstallsSyncIntervalDays?: pulumi.Input<number>;
    /**
     * Name of the Munki configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Set of principal user detection domains.
     */
    principalUserDetectionDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of principal user detection sources.
     */
    principalUserDetectionSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interval in seconds between script checks runs. Defaults to 86400 seconds (1 day).
     */
    scriptChecksRunIntervalSeconds?: pulumi.Input<number>;
    /**
     * Version of the Munki configuration.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MunkiConfiguration resource.
 */
export interface MunkiConfigurationArgs {
    /**
     * If `true`, incidents will be managed automatically when package failed installs are observed. Defaults to `false`.
     */
    autoFailedInstallIncidents?: pulumi.Input<boolean>;
    /**
     * If `true`, incidents will be managed automatically when package reinstalls are observed. Defaults to `false`.
     */
    autoReinstallIncidents?: pulumi.Input<boolean>;
    /**
     * Set of the condition keys to collect.
     */
    collectedConditionKeys?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the Munki configuration.
     */
    description?: pulumi.Input<string>;
    /**
     * Percentage of machines configured to collect the full inventory apps information. Defaults to `100`.
     */
    inventoryAppsFullInfoShard?: pulumi.Input<number>;
    /**
     * Interval in days between full managed installs sync. Defaults to 7 days.
     */
    managedInstallsSyncIntervalDays?: pulumi.Input<number>;
    /**
     * Name of the Munki configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Set of principal user detection domains.
     */
    principalUserDetectionDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of principal user detection sources.
     */
    principalUserDetectionSources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Interval in seconds between script checks runs. Defaults to 86400 seconds (1 day).
     */
    scriptChecksRunIntervalSeconds?: pulumi.Input<number>;
}
