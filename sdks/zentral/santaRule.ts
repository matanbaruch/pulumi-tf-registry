// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SantaRule extends pulumi.CustomResource {
    /**
     * Get an existing SantaRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SantaRuleState, opts?: pulumi.CustomResourceOptions): SantaRule {
        return new SantaRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/santaRule:SantaRule';

    /**
     * Returns true if the given object is an instance of SantaRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SantaRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SantaRule.__pulumiType;
    }

    /**
     * `ID` of the Santa configuration.
     */
    public readonly configurationId!: pulumi.Output<number>;
    /**
     * Custom message displayed in the popover when a binary is blocked.
     */
    public readonly customMessage!: pulumi.Output<string>;
    /**
     * Description of the rule. Only displayed in the Zentral GUI.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The excluded primary users used to scope the rule.
     */
    public readonly excludedPrimaryUsers!: pulumi.Output<string[]>;
    /**
     * The excluded serial numbers used to scope the rule.
     */
    public readonly excludedSerialNumbers!: pulumi.Output<string[]>;
    /**
     * The `ID`s of the excluded tags used to scope the rule.
     */
    public readonly excludedTagIds!: pulumi.Output<number[]>;
    /**
     * Policy. Valid values are `ALLOWLIST`, `BLOCKLIST`, `SILENT_BLOCKLIST` and `ALLOWLIST_COMPILER`.
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * The primary users used to scope the rule.
     */
    public readonly primaryUsers!: pulumi.Output<string[]>;
    /**
     * `ID` of the Santa ruleset.
     */
    public /*out*/ readonly rulesetId!: pulumi.Output<number>;
    /**
     * The serial numbers used to scope the rule.
     */
    public readonly serialNumbers!: pulumi.Output<string[]>;
    /**
     * The `ID`s of the tags used to scope the rule.
     */
    public readonly tagIds!: pulumi.Output<number[]>;
    /**
     * Target identifier: binary, bundle, certificate sha256 or team ID.
     */
    public readonly targetIdentifier!: pulumi.Output<string>;
    /**
     * Target type. Valid values are `BINARY`, `BUNDLE`, `CDHASH`, `CERTIFICATE`, `SIGNINGID` and `TEAMID`.
     */
    public readonly targetType!: pulumi.Output<string>;
    /**
     * Rule version.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a SantaRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SantaRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SantaRuleArgs | SantaRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SantaRuleState | undefined;
            resourceInputs["configurationId"] = state ? state.configurationId : undefined;
            resourceInputs["customMessage"] = state ? state.customMessage : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excludedPrimaryUsers"] = state ? state.excludedPrimaryUsers : undefined;
            resourceInputs["excludedSerialNumbers"] = state ? state.excludedSerialNumbers : undefined;
            resourceInputs["excludedTagIds"] = state ? state.excludedTagIds : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["primaryUsers"] = state ? state.primaryUsers : undefined;
            resourceInputs["rulesetId"] = state ? state.rulesetId : undefined;
            resourceInputs["serialNumbers"] = state ? state.serialNumbers : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["targetIdentifier"] = state ? state.targetIdentifier : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SantaRuleArgs | undefined;
            if ((!args || args.configurationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationId'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.targetIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetIdentifier'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["configurationId"] = args ? args.configurationId : undefined;
            resourceInputs["customMessage"] = args ? args.customMessage : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excludedPrimaryUsers"] = args ? args.excludedPrimaryUsers : undefined;
            resourceInputs["excludedSerialNumbers"] = args ? args.excludedSerialNumbers : undefined;
            resourceInputs["excludedTagIds"] = args ? args.excludedTagIds : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["primaryUsers"] = args ? args.primaryUsers : undefined;
            resourceInputs["serialNumbers"] = args ? args.serialNumbers : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["targetIdentifier"] = args ? args.targetIdentifier : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
            resourceInputs["rulesetId"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SantaRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SantaRule resources.
 */
export interface SantaRuleState {
    /**
     * `ID` of the Santa configuration.
     */
    configurationId?: pulumi.Input<number>;
    /**
     * Custom message displayed in the popover when a binary is blocked.
     */
    customMessage?: pulumi.Input<string>;
    /**
     * Description of the rule. Only displayed in the Zentral GUI.
     */
    description?: pulumi.Input<string>;
    /**
     * The excluded primary users used to scope the rule.
     */
    excludedPrimaryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The excluded serial numbers used to scope the rule.
     */
    excludedSerialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the excluded tags used to scope the rule.
     */
    excludedTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Policy. Valid values are `ALLOWLIST`, `BLOCKLIST`, `SILENT_BLOCKLIST` and `ALLOWLIST_COMPILER`.
     */
    policy?: pulumi.Input<string>;
    /**
     * The primary users used to scope the rule.
     */
    primaryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * `ID` of the Santa ruleset.
     */
    rulesetId?: pulumi.Input<number>;
    /**
     * The serial numbers used to scope the rule.
     */
    serialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the tags used to scope the rule.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Target identifier: binary, bundle, certificate sha256 or team ID.
     */
    targetIdentifier?: pulumi.Input<string>;
    /**
     * Target type. Valid values are `BINARY`, `BUNDLE`, `CDHASH`, `CERTIFICATE`, `SIGNINGID` and `TEAMID`.
     */
    targetType?: pulumi.Input<string>;
    /**
     * Rule version.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SantaRule resource.
 */
export interface SantaRuleArgs {
    /**
     * `ID` of the Santa configuration.
     */
    configurationId: pulumi.Input<number>;
    /**
     * Custom message displayed in the popover when a binary is blocked.
     */
    customMessage?: pulumi.Input<string>;
    /**
     * Description of the rule. Only displayed in the Zentral GUI.
     */
    description?: pulumi.Input<string>;
    /**
     * The excluded primary users used to scope the rule.
     */
    excludedPrimaryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The excluded serial numbers used to scope the rule.
     */
    excludedSerialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the excluded tags used to scope the rule.
     */
    excludedTagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Policy. Valid values are `ALLOWLIST`, `BLOCKLIST`, `SILENT_BLOCKLIST` and `ALLOWLIST_COMPILER`.
     */
    policy: pulumi.Input<string>;
    /**
     * The primary users used to scope the rule.
     */
    primaryUsers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The serial numbers used to scope the rule.
     */
    serialNumbers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The `ID`s of the tags used to scope the rule.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Target identifier: binary, bundle, certificate sha256 or team ID.
     */
    targetIdentifier: pulumi.Input<string>;
    /**
     * Target type. Valid values are `BINARY`, `BUNDLE`, `CDHASH`, `CERTIFICATE`, `SIGNINGID` and `TEAMID`.
     */
    targetType: pulumi.Input<string>;
}
