// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class JmespathCheck extends pulumi.CustomResource {
    /**
     * Get an existing JmespathCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JmespathCheckState, opts?: pulumi.CustomResourceOptions): JmespathCheck {
        return new JmespathCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zentral:index/jmespathCheck:JmespathCheck';

    /**
     * Returns true if the given object is an instance of JmespathCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JmespathCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JmespathCheck.__pulumiType;
    }

    /**
     * Description of the JMESPath compliance check.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The JMESPath compliance check expression.
     */
    public readonly jmespathExpression!: pulumi.Output<string>;
    /**
     * Name of the JMESPath compliance check.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The platforms the JMESPath compliance check is restricted to.
     */
    public readonly platforms!: pulumi.Output<string[]>;
    /**
     * The name of the inventory source the JMESPath compliance check is restricted to.
     */
    public readonly sourceName!: pulumi.Output<string>;
    /**
     * The IDs of the tags the JMESPath compliance check is restricted to.
     */
    public readonly tagIds!: pulumi.Output<number[]>;
    /**
     * The JMESPath compliance check version.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a JmespathCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JmespathCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JmespathCheckArgs | JmespathCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JmespathCheckState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["jmespathExpression"] = state ? state.jmespathExpression : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["sourceName"] = state ? state.sourceName : undefined;
            resourceInputs["tagIds"] = state ? state.tagIds : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as JmespathCheckArgs | undefined;
            if ((!args || args.jmespathExpression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'jmespathExpression'");
            }
            if ((!args || args.sourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["jmespathExpression"] = args ? args.jmespathExpression : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["sourceName"] = args ? args.sourceName : undefined;
            resourceInputs["tagIds"] = args ? args.tagIds : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JmespathCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JmespathCheck resources.
 */
export interface JmespathCheckState {
    /**
     * Description of the JMESPath compliance check.
     */
    description?: pulumi.Input<string>;
    /**
     * The JMESPath compliance check expression.
     */
    jmespathExpression?: pulumi.Input<string>;
    /**
     * Name of the JMESPath compliance check.
     */
    name?: pulumi.Input<string>;
    /**
     * The platforms the JMESPath compliance check is restricted to.
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the inventory source the JMESPath compliance check is restricted to.
     */
    sourceName?: pulumi.Input<string>;
    /**
     * The IDs of the tags the JMESPath compliance check is restricted to.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The JMESPath compliance check version.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a JmespathCheck resource.
 */
export interface JmespathCheckArgs {
    /**
     * Description of the JMESPath compliance check.
     */
    description?: pulumi.Input<string>;
    /**
     * The JMESPath compliance check expression.
     */
    jmespathExpression: pulumi.Input<string>;
    /**
     * Name of the JMESPath compliance check.
     */
    name?: pulumi.Input<string>;
    /**
     * The platforms the JMESPath compliance check is restricted to.
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the inventory source the JMESPath compliance check is restricted to.
     */
    sourceName: pulumi.Input<string>;
    /**
     * The IDs of the tags the JMESPath compliance check is restricted to.
     */
    tagIds?: pulumi.Input<pulumi.Input<number>[]>;
}
