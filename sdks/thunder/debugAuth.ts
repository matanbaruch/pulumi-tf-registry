// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DebugAuth extends pulumi.CustomResource {
    /**
     * Get an existing DebugAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugAuthState, opts?: pulumi.CustomResourceOptions): DebugAuth {
        return new DebugAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugAuth:DebugAuth';

    /**
     * Returns true if the given object is an instance of DebugAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugAuth.__pulumiType;
    }

    /**
     * enable detail authd log
     */
    public readonly authd!: pulumi.Output<number | undefined>;
    /**
     * Filter SAML logs by client IP address
     */
    public readonly clientAddr!: pulumi.Output<string | undefined>;
    /**
     * '1': Diagnose Problems; '2': Detail packet flow;
     */
    public readonly level!: pulumi.Output<string | undefined>;
    /**
     * Enable debug SAML authentication logs
     */
    public readonly saml!: pulumi.Output<number | undefined>;
    /**
     * Filter SAML logs by SAML service provider name (SAML SP name)
     */
    public readonly samlSp!: pulumi.Output<string | undefined>;
    /**
     * Show the logs of specific username (User name)
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Show the logs of specific virtual-server (Virtual-server name)
     */
    public readonly virtualServer!: pulumi.Output<string | undefined>;

    /**
     * Create a DebugAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugAuthArgs | DebugAuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugAuthState | undefined;
            resourceInputs["authd"] = state ? state.authd : undefined;
            resourceInputs["clientAddr"] = state ? state.clientAddr : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["saml"] = state ? state.saml : undefined;
            resourceInputs["samlSp"] = state ? state.samlSp : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["virtualServer"] = state ? state.virtualServer : undefined;
        } else {
            const args = argsOrState as DebugAuthArgs | undefined;
            resourceInputs["authd"] = args ? args.authd : undefined;
            resourceInputs["clientAddr"] = args ? args.clientAddr : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["saml"] = args ? args.saml : undefined;
            resourceInputs["samlSp"] = args ? args.samlSp : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["virtualServer"] = args ? args.virtualServer : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugAuth.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugAuth resources.
 */
export interface DebugAuthState {
    /**
     * enable detail authd log
     */
    authd?: pulumi.Input<number>;
    /**
     * Filter SAML logs by client IP address
     */
    clientAddr?: pulumi.Input<string>;
    /**
     * '1': Diagnose Problems; '2': Detail packet flow;
     */
    level?: pulumi.Input<string>;
    /**
     * Enable debug SAML authentication logs
     */
    saml?: pulumi.Input<number>;
    /**
     * Filter SAML logs by SAML service provider name (SAML SP name)
     */
    samlSp?: pulumi.Input<string>;
    /**
     * Show the logs of specific username (User name)
     */
    username?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Show the logs of specific virtual-server (Virtual-server name)
     */
    virtualServer?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DebugAuth resource.
 */
export interface DebugAuthArgs {
    /**
     * enable detail authd log
     */
    authd?: pulumi.Input<number>;
    /**
     * Filter SAML logs by client IP address
     */
    clientAddr?: pulumi.Input<string>;
    /**
     * '1': Diagnose Problems; '2': Detail packet flow;
     */
    level?: pulumi.Input<string>;
    /**
     * Enable debug SAML authentication logs
     */
    saml?: pulumi.Input<number>;
    /**
     * Filter SAML logs by SAML service provider name (SAML SP name)
     */
    samlSp?: pulumi.Input<string>;
    /**
     * Show the logs of specific username (User name)
     */
    username?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Show the logs of specific virtual-server (Virtual-server name)
     */
    virtualServer?: pulumi.Input<string>;
}
