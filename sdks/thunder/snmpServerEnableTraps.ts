// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnmpServerEnableTraps extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerEnableTraps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerEnableTrapsState, opts?: pulumi.CustomResourceOptions): SnmpServerEnableTraps {
        return new SnmpServerEnableTraps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerEnableTraps:SnmpServerEnableTraps';

    /**
     * Returns true if the given object is an instance of SnmpServerEnableTraps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerEnableTraps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerEnableTraps.__pulumiType;
    }

    /**
     * Enable all SNMP traps
     */
    public readonly all!: pulumi.Output<number | undefined>;
    public readonly gslb!: pulumi.Output<outputs.SnmpServerEnableTrapsGslb | undefined>;
    /**
     * Enable lldp traps
     */
    public readonly lldp!: pulumi.Output<number | undefined>;
    public readonly lsn!: pulumi.Output<outputs.SnmpServerEnableTrapsLsn | undefined>;
    public readonly network!: pulumi.Output<outputs.SnmpServerEnableTrapsNetwork | undefined>;
    public readonly routing!: pulumi.Output<outputs.SnmpServerEnableTrapsRouting | undefined>;
    public readonly scaleout!: pulumi.Output<outputs.SnmpServerEnableTrapsScaleout | undefined>;
    public readonly slb!: pulumi.Output<outputs.SnmpServerEnableTrapsSlb | undefined>;
    public readonly slbChange!: pulumi.Output<outputs.SnmpServerEnableTrapsSlbChange | undefined>;
    public readonly snmp!: pulumi.Output<outputs.SnmpServerEnableTrapsSnmp | undefined>;
    public readonly ssl!: pulumi.Output<outputs.SnmpServerEnableTrapsSsl | undefined>;
    public readonly system!: pulumi.Output<outputs.SnmpServerEnableTrapsSystem | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly vcs!: pulumi.Output<outputs.SnmpServerEnableTrapsVcs | undefined>;
    public readonly vrrpA!: pulumi.Output<outputs.SnmpServerEnableTrapsVrrpA | undefined>;

    /**
     * Create a SnmpServerEnableTraps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpServerEnableTrapsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerEnableTrapsArgs | SnmpServerEnableTrapsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerEnableTrapsState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["gslb"] = state ? state.gslb : undefined;
            resourceInputs["lldp"] = state ? state.lldp : undefined;
            resourceInputs["lsn"] = state ? state.lsn : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["routing"] = state ? state.routing : undefined;
            resourceInputs["scaleout"] = state ? state.scaleout : undefined;
            resourceInputs["slb"] = state ? state.slb : undefined;
            resourceInputs["slbChange"] = state ? state.slbChange : undefined;
            resourceInputs["snmp"] = state ? state.snmp : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["system"] = state ? state.system : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vcs"] = state ? state.vcs : undefined;
            resourceInputs["vrrpA"] = state ? state.vrrpA : undefined;
        } else {
            const args = argsOrState as SnmpServerEnableTrapsArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["gslb"] = args ? args.gslb : undefined;
            resourceInputs["lldp"] = args ? args.lldp : undefined;
            resourceInputs["lsn"] = args ? args.lsn : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["routing"] = args ? args.routing : undefined;
            resourceInputs["scaleout"] = args ? args.scaleout : undefined;
            resourceInputs["slb"] = args ? args.slb : undefined;
            resourceInputs["slbChange"] = args ? args.slbChange : undefined;
            resourceInputs["snmp"] = args ? args.snmp : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["system"] = args ? args.system : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vcs"] = args ? args.vcs : undefined;
            resourceInputs["vrrpA"] = args ? args.vrrpA : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerEnableTraps.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerEnableTraps resources.
 */
export interface SnmpServerEnableTrapsState {
    /**
     * Enable all SNMP traps
     */
    all?: pulumi.Input<number>;
    gslb?: pulumi.Input<inputs.SnmpServerEnableTrapsGslb>;
    /**
     * Enable lldp traps
     */
    lldp?: pulumi.Input<number>;
    lsn?: pulumi.Input<inputs.SnmpServerEnableTrapsLsn>;
    network?: pulumi.Input<inputs.SnmpServerEnableTrapsNetwork>;
    routing?: pulumi.Input<inputs.SnmpServerEnableTrapsRouting>;
    scaleout?: pulumi.Input<inputs.SnmpServerEnableTrapsScaleout>;
    slb?: pulumi.Input<inputs.SnmpServerEnableTrapsSlb>;
    slbChange?: pulumi.Input<inputs.SnmpServerEnableTrapsSlbChange>;
    snmp?: pulumi.Input<inputs.SnmpServerEnableTrapsSnmp>;
    ssl?: pulumi.Input<inputs.SnmpServerEnableTrapsSsl>;
    system?: pulumi.Input<inputs.SnmpServerEnableTrapsSystem>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vcs?: pulumi.Input<inputs.SnmpServerEnableTrapsVcs>;
    vrrpA?: pulumi.Input<inputs.SnmpServerEnableTrapsVrrpA>;
}

/**
 * The set of arguments for constructing a SnmpServerEnableTraps resource.
 */
export interface SnmpServerEnableTrapsArgs {
    /**
     * Enable all SNMP traps
     */
    all?: pulumi.Input<number>;
    gslb?: pulumi.Input<inputs.SnmpServerEnableTrapsGslb>;
    /**
     * Enable lldp traps
     */
    lldp?: pulumi.Input<number>;
    lsn?: pulumi.Input<inputs.SnmpServerEnableTrapsLsn>;
    network?: pulumi.Input<inputs.SnmpServerEnableTrapsNetwork>;
    routing?: pulumi.Input<inputs.SnmpServerEnableTrapsRouting>;
    scaleout?: pulumi.Input<inputs.SnmpServerEnableTrapsScaleout>;
    slb?: pulumi.Input<inputs.SnmpServerEnableTrapsSlb>;
    slbChange?: pulumi.Input<inputs.SnmpServerEnableTrapsSlbChange>;
    snmp?: pulumi.Input<inputs.SnmpServerEnableTrapsSnmp>;
    ssl?: pulumi.Input<inputs.SnmpServerEnableTrapsSsl>;
    system?: pulumi.Input<inputs.SnmpServerEnableTrapsSystem>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vcs?: pulumi.Input<inputs.SnmpServerEnableTrapsVcs>;
    vrrpA?: pulumi.Input<inputs.SnmpServerEnableTrapsVrrpA>;
}
