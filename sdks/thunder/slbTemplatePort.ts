// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbTemplatePort extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplatePort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplatePortState, opts?: pulumi.CustomResourceOptions): SlbTemplatePort {
        return new SlbTemplatePort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplatePort:SlbTemplatePort';

    /**
     * Returns true if the given object is an instance of SlbTemplatePort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplatePort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplatePort.__pulumiType;
    }

    /**
     * Slow start connection limit add by a number every interval (Add by this number every interval)
     */
    public readonly add!: pulumi.Output<number | undefined>;
    /**
     * Configure bandwidth rate limit on real server port (Bandwidth rate limit in Kbps)
     */
    public readonly bwRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Duration in seconds the observed rate needs to honor
     */
    public readonly bwRateLimitDuration!: pulumi.Output<number | undefined>;
    /**
     * Do not log bandwidth rate limit related state transitions
     */
    public readonly bwRateLimitNoLogging!: pulumi.Output<number | undefined>;
    /**
     * Resume server selection after bandwidth drops below this threshold (in Kbps) (Bandwidth rate limit resume threshold (in
     * Kbps))
     */
    public readonly bwRateLimitResume!: pulumi.Output<number | undefined>;
    /**
     * Connection limit
     */
    public readonly connLimit!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly connLimitNoLogging!: pulumi.Output<number | undefined>;
    /**
     * Connection rate limit
     */
    public readonly connRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly connRateLimitNoLogging!: pulumi.Output<number | undefined>;
    /**
     * service dampening flaps count (max-flaps allowed in flap period)
     */
    public readonly dampeningFlaps!: pulumi.Output<number | undefined>;
    /**
     * Decrease after every round of DNS query (default is 0)
     */
    public readonly decrement!: pulumi.Output<number | undefined>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    public readonly delSessionOnServerDown!: pulumi.Output<number | undefined>;
    /**
     * Destination NAT
     */
    public readonly destNat!: pulumi.Output<number | undefined>;
    /**
     * Port down grace period (Down grace period in seconds)
     */
    public readonly downGracePeriod!: pulumi.Output<number | undefined>;
    /**
     * The timer to bring the marked down server/port to up (default is 0, never bring up) (The timer to bring up server (in
     * second, default is 0))
     */
    public readonly downTimer!: pulumi.Output<number | undefined>;
    /**
     * Differentiated Services Code Point (DSCP to Real Server IP Mapping Value)
     */
    public readonly dscp!: pulumi.Output<number | undefined>;
    /**
     * Set dynamic member's priority (Initial priority (default is 16))
     */
    public readonly dynamicMemberPriority!: pulumi.Output<number | undefined>;
    /**
     * Slow start connection limit increment interval (default 10)
     */
    public readonly every!: pulumi.Output<number | undefined>;
    /**
     * Enable extended statistics on real server port
     */
    public readonly extendedStats!: pulumi.Output<number | undefined>;
    /**
     * take service out of rotation if max-flaps exceeded within time in seconds
     */
    public readonly flapPeriod!: pulumi.Output<number | undefined>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    /**
     * Disable configured health check configuration
     */
    public readonly healthCheckDisable!: pulumi.Output<number | undefined>;
    /**
     * Use inband traffic to detect port's health status
     */
    public readonly inbandHealthCheck!: pulumi.Output<number | undefined>;
    /**
     * Initial slow start connection limit (default 128)
     */
    public readonly initialSlowStart!: pulumi.Output<number | undefined>;
    /**
     * Port template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * No SSL
     */
    public readonly noSsl!: pulumi.Output<number | undefined>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    public readonly rateInterval!: pulumi.Output<string | undefined>;
    /**
     * Maximum reassign times before declear the server/port down (default is 25) (The maximum reassign number)
     */
    public readonly reassign!: pulumi.Output<number | undefined>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    public readonly requestRateInterval!: pulumi.Output<string | undefined>;
    /**
     * Request rate limit
     */
    public readonly requestRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly requestRateNoLogging!: pulumi.Output<number | undefined>;
    /**
     * When receiving reset from server, do the server/port reselection (default is 0, don't do reselection)
     */
    public readonly reselOnReset!: pulumi.Output<number | undefined>;
    /**
     * Send client reset when connection rate over limit
     */
    public readonly reset!: pulumi.Output<number | undefined>;
    /**
     * put the service back to the rotation after time in seconds
     */
    public readonly restoreSvcTime!: pulumi.Output<number | undefined>;
    /**
     * Resume accepting new connection after connection number drops below threshold (Connection resume threshold)
     */
    public readonly resume!: pulumi.Output<number | undefined>;
    /**
     * Maximum retry times before reassign this connection to another server/port (default is 2) (The maximum retry number)
     */
    public readonly retry!: pulumi.Output<number | undefined>;
    /**
     * Reference a NAT pool or pool-group from shared partition
     */
    public readonly sharedPartitionPool!: pulumi.Output<number | undefined>;
    /**
     * Slowly ramp up the connection number after port is up
     */
    public readonly slowStart!: pulumi.Output<number | undefined>;
    /**
     * Source NAT (IP NAT Pool or pool group name)
     */
    public readonly sourceNat!: pulumi.Output<string | undefined>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server port; 'stats-data-disable': Disable statistical
     * data collection for real server port;
     */
    public readonly statsDataAction!: pulumi.Output<string | undefined>;
    /**
     * Divide service group members into different sub groups (Sub group ID (default is 0))
     */
    public readonly subGroup!: pulumi.Output<number | undefined>;
    /**
     * Source NAT (IP NAT Pool or pool group name)
     */
    public readonly templatePortPoolShared!: pulumi.Output<string | undefined>;
    /**
     * Slow start ends when slow start connection limit reaches a number (default 4096) (Slow start ends when connection limit
     * reaches this number)
     */
    public readonly till!: pulumi.Output<number | undefined>;
    /**
     * Slow start connection limit multiply by a number every interval (default 2) (Multiply by this number every interval)
     */
    public readonly times!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Weight (port weight)
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbTemplatePort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplatePortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplatePortArgs | SlbTemplatePortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplatePortState | undefined;
            resourceInputs["add"] = state ? state.add : undefined;
            resourceInputs["bwRateLimit"] = state ? state.bwRateLimit : undefined;
            resourceInputs["bwRateLimitDuration"] = state ? state.bwRateLimitDuration : undefined;
            resourceInputs["bwRateLimitNoLogging"] = state ? state.bwRateLimitNoLogging : undefined;
            resourceInputs["bwRateLimitResume"] = state ? state.bwRateLimitResume : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["connLimitNoLogging"] = state ? state.connLimitNoLogging : undefined;
            resourceInputs["connRateLimit"] = state ? state.connRateLimit : undefined;
            resourceInputs["connRateLimitNoLogging"] = state ? state.connRateLimitNoLogging : undefined;
            resourceInputs["dampeningFlaps"] = state ? state.dampeningFlaps : undefined;
            resourceInputs["decrement"] = state ? state.decrement : undefined;
            resourceInputs["delSessionOnServerDown"] = state ? state.delSessionOnServerDown : undefined;
            resourceInputs["destNat"] = state ? state.destNat : undefined;
            resourceInputs["downGracePeriod"] = state ? state.downGracePeriod : undefined;
            resourceInputs["downTimer"] = state ? state.downTimer : undefined;
            resourceInputs["dscp"] = state ? state.dscp : undefined;
            resourceInputs["dynamicMemberPriority"] = state ? state.dynamicMemberPriority : undefined;
            resourceInputs["every"] = state ? state.every : undefined;
            resourceInputs["extendedStats"] = state ? state.extendedStats : undefined;
            resourceInputs["flapPeriod"] = state ? state.flapPeriod : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = state ? state.healthCheckDisable : undefined;
            resourceInputs["inbandHealthCheck"] = state ? state.inbandHealthCheck : undefined;
            resourceInputs["initialSlowStart"] = state ? state.initialSlowStart : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noSsl"] = state ? state.noSsl : undefined;
            resourceInputs["rateInterval"] = state ? state.rateInterval : undefined;
            resourceInputs["reassign"] = state ? state.reassign : undefined;
            resourceInputs["requestRateInterval"] = state ? state.requestRateInterval : undefined;
            resourceInputs["requestRateLimit"] = state ? state.requestRateLimit : undefined;
            resourceInputs["requestRateNoLogging"] = state ? state.requestRateNoLogging : undefined;
            resourceInputs["reselOnReset"] = state ? state.reselOnReset : undefined;
            resourceInputs["reset"] = state ? state.reset : undefined;
            resourceInputs["restoreSvcTime"] = state ? state.restoreSvcTime : undefined;
            resourceInputs["resume"] = state ? state.resume : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["sharedPartitionPool"] = state ? state.sharedPartitionPool : undefined;
            resourceInputs["slowStart"] = state ? state.slowStart : undefined;
            resourceInputs["sourceNat"] = state ? state.sourceNat : undefined;
            resourceInputs["statsDataAction"] = state ? state.statsDataAction : undefined;
            resourceInputs["subGroup"] = state ? state.subGroup : undefined;
            resourceInputs["templatePortPoolShared"] = state ? state.templatePortPoolShared : undefined;
            resourceInputs["till"] = state ? state.till : undefined;
            resourceInputs["times"] = state ? state.times : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as SlbTemplatePortArgs | undefined;
            resourceInputs["add"] = args ? args.add : undefined;
            resourceInputs["bwRateLimit"] = args ? args.bwRateLimit : undefined;
            resourceInputs["bwRateLimitDuration"] = args ? args.bwRateLimitDuration : undefined;
            resourceInputs["bwRateLimitNoLogging"] = args ? args.bwRateLimitNoLogging : undefined;
            resourceInputs["bwRateLimitResume"] = args ? args.bwRateLimitResume : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["connLimitNoLogging"] = args ? args.connLimitNoLogging : undefined;
            resourceInputs["connRateLimit"] = args ? args.connRateLimit : undefined;
            resourceInputs["connRateLimitNoLogging"] = args ? args.connRateLimitNoLogging : undefined;
            resourceInputs["dampeningFlaps"] = args ? args.dampeningFlaps : undefined;
            resourceInputs["decrement"] = args ? args.decrement : undefined;
            resourceInputs["delSessionOnServerDown"] = args ? args.delSessionOnServerDown : undefined;
            resourceInputs["destNat"] = args ? args.destNat : undefined;
            resourceInputs["downGracePeriod"] = args ? args.downGracePeriod : undefined;
            resourceInputs["downTimer"] = args ? args.downTimer : undefined;
            resourceInputs["dscp"] = args ? args.dscp : undefined;
            resourceInputs["dynamicMemberPriority"] = args ? args.dynamicMemberPriority : undefined;
            resourceInputs["every"] = args ? args.every : undefined;
            resourceInputs["extendedStats"] = args ? args.extendedStats : undefined;
            resourceInputs["flapPeriod"] = args ? args.flapPeriod : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = args ? args.healthCheckDisable : undefined;
            resourceInputs["inbandHealthCheck"] = args ? args.inbandHealthCheck : undefined;
            resourceInputs["initialSlowStart"] = args ? args.initialSlowStart : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noSsl"] = args ? args.noSsl : undefined;
            resourceInputs["rateInterval"] = args ? args.rateInterval : undefined;
            resourceInputs["reassign"] = args ? args.reassign : undefined;
            resourceInputs["requestRateInterval"] = args ? args.requestRateInterval : undefined;
            resourceInputs["requestRateLimit"] = args ? args.requestRateLimit : undefined;
            resourceInputs["requestRateNoLogging"] = args ? args.requestRateNoLogging : undefined;
            resourceInputs["reselOnReset"] = args ? args.reselOnReset : undefined;
            resourceInputs["reset"] = args ? args.reset : undefined;
            resourceInputs["restoreSvcTime"] = args ? args.restoreSvcTime : undefined;
            resourceInputs["resume"] = args ? args.resume : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["sharedPartitionPool"] = args ? args.sharedPartitionPool : undefined;
            resourceInputs["slowStart"] = args ? args.slowStart : undefined;
            resourceInputs["sourceNat"] = args ? args.sourceNat : undefined;
            resourceInputs["statsDataAction"] = args ? args.statsDataAction : undefined;
            resourceInputs["subGroup"] = args ? args.subGroup : undefined;
            resourceInputs["templatePortPoolShared"] = args ? args.templatePortPoolShared : undefined;
            resourceInputs["till"] = args ? args.till : undefined;
            resourceInputs["times"] = args ? args.times : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplatePort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplatePort resources.
 */
export interface SlbTemplatePortState {
    /**
     * Slow start connection limit add by a number every interval (Add by this number every interval)
     */
    add?: pulumi.Input<number>;
    /**
     * Configure bandwidth rate limit on real server port (Bandwidth rate limit in Kbps)
     */
    bwRateLimit?: pulumi.Input<number>;
    /**
     * Duration in seconds the observed rate needs to honor
     */
    bwRateLimitDuration?: pulumi.Input<number>;
    /**
     * Do not log bandwidth rate limit related state transitions
     */
    bwRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * Resume server selection after bandwidth drops below this threshold (in Kbps) (Bandwidth rate limit resume threshold (in
     * Kbps))
     */
    bwRateLimitResume?: pulumi.Input<number>;
    /**
     * Connection limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connLimitNoLogging?: pulumi.Input<number>;
    /**
     * Connection rate limit
     */
    connRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * service dampening flaps count (max-flaps allowed in flap period)
     */
    dampeningFlaps?: pulumi.Input<number>;
    /**
     * Decrease after every round of DNS query (default is 0)
     */
    decrement?: pulumi.Input<number>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    delSessionOnServerDown?: pulumi.Input<number>;
    /**
     * Destination NAT
     */
    destNat?: pulumi.Input<number>;
    /**
     * Port down grace period (Down grace period in seconds)
     */
    downGracePeriod?: pulumi.Input<number>;
    /**
     * The timer to bring the marked down server/port to up (default is 0, never bring up) (The timer to bring up server (in
     * second, default is 0))
     */
    downTimer?: pulumi.Input<number>;
    /**
     * Differentiated Services Code Point (DSCP to Real Server IP Mapping Value)
     */
    dscp?: pulumi.Input<number>;
    /**
     * Set dynamic member's priority (Initial priority (default is 16))
     */
    dynamicMemberPriority?: pulumi.Input<number>;
    /**
     * Slow start connection limit increment interval (default 10)
     */
    every?: pulumi.Input<number>;
    /**
     * Enable extended statistics on real server port
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * take service out of rotation if max-flaps exceeded within time in seconds
     */
    flapPeriod?: pulumi.Input<number>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Use inband traffic to detect port's health status
     */
    inbandHealthCheck?: pulumi.Input<number>;
    /**
     * Initial slow start connection limit (default 128)
     */
    initialSlowStart?: pulumi.Input<number>;
    /**
     * Port template name
     */
    name?: pulumi.Input<string>;
    /**
     * No SSL
     */
    noSsl?: pulumi.Input<number>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Maximum reassign times before declear the server/port down (default is 25) (The maximum reassign number)
     */
    reassign?: pulumi.Input<number>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    requestRateInterval?: pulumi.Input<string>;
    /**
     * Request rate limit
     */
    requestRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    requestRateNoLogging?: pulumi.Input<number>;
    /**
     * When receiving reset from server, do the server/port reselection (default is 0, don't do reselection)
     */
    reselOnReset?: pulumi.Input<number>;
    /**
     * Send client reset when connection rate over limit
     */
    reset?: pulumi.Input<number>;
    /**
     * put the service back to the rotation after time in seconds
     */
    restoreSvcTime?: pulumi.Input<number>;
    /**
     * Resume accepting new connection after connection number drops below threshold (Connection resume threshold)
     */
    resume?: pulumi.Input<number>;
    /**
     * Maximum retry times before reassign this connection to another server/port (default is 2) (The maximum retry number)
     */
    retry?: pulumi.Input<number>;
    /**
     * Reference a NAT pool or pool-group from shared partition
     */
    sharedPartitionPool?: pulumi.Input<number>;
    /**
     * Slowly ramp up the connection number after port is up
     */
    slowStart?: pulumi.Input<number>;
    /**
     * Source NAT (IP NAT Pool or pool group name)
     */
    sourceNat?: pulumi.Input<string>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server port; 'stats-data-disable': Disable statistical
     * data collection for real server port;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Divide service group members into different sub groups (Sub group ID (default is 0))
     */
    subGroup?: pulumi.Input<number>;
    /**
     * Source NAT (IP NAT Pool or pool group name)
     */
    templatePortPoolShared?: pulumi.Input<string>;
    /**
     * Slow start ends when slow start connection limit reaches a number (default 4096) (Slow start ends when connection limit
     * reaches this number)
     */
    till?: pulumi.Input<number>;
    /**
     * Slow start connection limit multiply by a number every interval (default 2) (Multiply by this number every interval)
     */
    times?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Weight (port weight)
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbTemplatePort resource.
 */
export interface SlbTemplatePortArgs {
    /**
     * Slow start connection limit add by a number every interval (Add by this number every interval)
     */
    add?: pulumi.Input<number>;
    /**
     * Configure bandwidth rate limit on real server port (Bandwidth rate limit in Kbps)
     */
    bwRateLimit?: pulumi.Input<number>;
    /**
     * Duration in seconds the observed rate needs to honor
     */
    bwRateLimitDuration?: pulumi.Input<number>;
    /**
     * Do not log bandwidth rate limit related state transitions
     */
    bwRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * Resume server selection after bandwidth drops below this threshold (in Kbps) (Bandwidth rate limit resume threshold (in
     * Kbps))
     */
    bwRateLimitResume?: pulumi.Input<number>;
    /**
     * Connection limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connLimitNoLogging?: pulumi.Input<number>;
    /**
     * Connection rate limit
     */
    connRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * service dampening flaps count (max-flaps allowed in flap period)
     */
    dampeningFlaps?: pulumi.Input<number>;
    /**
     * Decrease after every round of DNS query (default is 0)
     */
    decrement?: pulumi.Input<number>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    delSessionOnServerDown?: pulumi.Input<number>;
    /**
     * Destination NAT
     */
    destNat?: pulumi.Input<number>;
    /**
     * Port down grace period (Down grace period in seconds)
     */
    downGracePeriod?: pulumi.Input<number>;
    /**
     * The timer to bring the marked down server/port to up (default is 0, never bring up) (The timer to bring up server (in
     * second, default is 0))
     */
    downTimer?: pulumi.Input<number>;
    /**
     * Differentiated Services Code Point (DSCP to Real Server IP Mapping Value)
     */
    dscp?: pulumi.Input<number>;
    /**
     * Set dynamic member's priority (Initial priority (default is 16))
     */
    dynamicMemberPriority?: pulumi.Input<number>;
    /**
     * Slow start connection limit increment interval (default 10)
     */
    every?: pulumi.Input<number>;
    /**
     * Enable extended statistics on real server port
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * take service out of rotation if max-flaps exceeded within time in seconds
     */
    flapPeriod?: pulumi.Input<number>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Use inband traffic to detect port's health status
     */
    inbandHealthCheck?: pulumi.Input<number>;
    /**
     * Initial slow start connection limit (default 128)
     */
    initialSlowStart?: pulumi.Input<number>;
    /**
     * Port template name
     */
    name?: pulumi.Input<string>;
    /**
     * No SSL
     */
    noSsl?: pulumi.Input<number>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Maximum reassign times before declear the server/port down (default is 25) (The maximum reassign number)
     */
    reassign?: pulumi.Input<number>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    requestRateInterval?: pulumi.Input<string>;
    /**
     * Request rate limit
     */
    requestRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    requestRateNoLogging?: pulumi.Input<number>;
    /**
     * When receiving reset from server, do the server/port reselection (default is 0, don't do reselection)
     */
    reselOnReset?: pulumi.Input<number>;
    /**
     * Send client reset when connection rate over limit
     */
    reset?: pulumi.Input<number>;
    /**
     * put the service back to the rotation after time in seconds
     */
    restoreSvcTime?: pulumi.Input<number>;
    /**
     * Resume accepting new connection after connection number drops below threshold (Connection resume threshold)
     */
    resume?: pulumi.Input<number>;
    /**
     * Maximum retry times before reassign this connection to another server/port (default is 2) (The maximum retry number)
     */
    retry?: pulumi.Input<number>;
    /**
     * Reference a NAT pool or pool-group from shared partition
     */
    sharedPartitionPool?: pulumi.Input<number>;
    /**
     * Slowly ramp up the connection number after port is up
     */
    slowStart?: pulumi.Input<number>;
    /**
     * Source NAT (IP NAT Pool or pool group name)
     */
    sourceNat?: pulumi.Input<string>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server port; 'stats-data-disable': Disable statistical
     * data collection for real server port;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Divide service group members into different sub groups (Sub group ID (default is 0))
     */
    subGroup?: pulumi.Input<number>;
    /**
     * Source NAT (IP NAT Pool or pool group name)
     */
    templatePortPoolShared?: pulumi.Input<string>;
    /**
     * Slow start ends when slow start connection limit reaches a number (default 4096) (Slow start ends when connection limit
     * reaches this number)
     */
    till?: pulumi.Input<number>;
    /**
     * Slow start connection limit multiply by a number every interval (default 2) (Multiply by this number every interval)
     */
    times?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Weight (port weight)
     */
    weight?: pulumi.Input<number>;
}
