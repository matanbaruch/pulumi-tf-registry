// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OverlayTunnelVtep extends pulumi.CustomResource {
    /**
     * Get an existing OverlayTunnelVtep resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OverlayTunnelVtepState, opts?: pulumi.CustomResourceOptions): OverlayTunnelVtep {
        return new OverlayTunnelVtep(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/overlayTunnelVtep:OverlayTunnelVtep';

    /**
     * Returns true if the given object is an instance of OverlayTunnelVtep.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OverlayTunnelVtep {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OverlayTunnelVtep.__pulumiType;
    }

    /**
     * Layer-4 Destination Port (Port Number)
     */
    public readonly destPort!: pulumi.Output<number | undefined>;
    /**
     * 'ip-encap': Tunnel encapsulation type is IP; 'gre': Tunnel encapsulation type is GRE; 'nvgre': Tunnel Encapsulation Type
     * is NVGRE; 'vxlan': Tunnel Encapsulation Type is VXLAN;
     */
    public readonly encap!: pulumi.Output<string | undefined>;
    public readonly hostLists!: pulumi.Output<outputs.OverlayTunnelVtepHostList[] | undefined>;
    /**
     * VTEP Identifier
     */
    public readonly id1!: pulumi.Output<number>;
    public readonly localIpAddress!: pulumi.Output<outputs.OverlayTunnelVtepLocalIpAddress | undefined>;
    public readonly localIpv6Address!: pulumi.Output<outputs.OverlayTunnelVtepLocalIpv6Address | undefined>;
    public readonly remoteIpAddressLists!: pulumi.Output<outputs.OverlayTunnelVtepRemoteIpAddressList[] | undefined>;
    public readonly remoteIpv6AddressLists!: pulumi.Output<outputs.OverlayTunnelVtepRemoteIpv6AddressList[] | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.OverlayTunnelVtepSamplingEnable[] | undefined>;
    public readonly srcPortRange!: pulumi.Output<outputs.OverlayTunnelVtepSrcPortRange | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a OverlayTunnelVtep resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OverlayTunnelVtepArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OverlayTunnelVtepArgs | OverlayTunnelVtepState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OverlayTunnelVtepState | undefined;
            resourceInputs["destPort"] = state ? state.destPort : undefined;
            resourceInputs["encap"] = state ? state.encap : undefined;
            resourceInputs["hostLists"] = state ? state.hostLists : undefined;
            resourceInputs["id1"] = state ? state.id1 : undefined;
            resourceInputs["localIpAddress"] = state ? state.localIpAddress : undefined;
            resourceInputs["localIpv6Address"] = state ? state.localIpv6Address : undefined;
            resourceInputs["remoteIpAddressLists"] = state ? state.remoteIpAddressLists : undefined;
            resourceInputs["remoteIpv6AddressLists"] = state ? state.remoteIpv6AddressLists : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["srcPortRange"] = state ? state.srcPortRange : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as OverlayTunnelVtepArgs | undefined;
            if ((!args || args.id1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'id1'");
            }
            resourceInputs["destPort"] = args ? args.destPort : undefined;
            resourceInputs["encap"] = args ? args.encap : undefined;
            resourceInputs["hostLists"] = args ? args.hostLists : undefined;
            resourceInputs["id1"] = args ? args.id1 : undefined;
            resourceInputs["localIpAddress"] = args ? args.localIpAddress : undefined;
            resourceInputs["localIpv6Address"] = args ? args.localIpv6Address : undefined;
            resourceInputs["remoteIpAddressLists"] = args ? args.remoteIpAddressLists : undefined;
            resourceInputs["remoteIpv6AddressLists"] = args ? args.remoteIpv6AddressLists : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["srcPortRange"] = args ? args.srcPortRange : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OverlayTunnelVtep.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OverlayTunnelVtep resources.
 */
export interface OverlayTunnelVtepState {
    /**
     * Layer-4 Destination Port (Port Number)
     */
    destPort?: pulumi.Input<number>;
    /**
     * 'ip-encap': Tunnel encapsulation type is IP; 'gre': Tunnel encapsulation type is GRE; 'nvgre': Tunnel Encapsulation Type
     * is NVGRE; 'vxlan': Tunnel Encapsulation Type is VXLAN;
     */
    encap?: pulumi.Input<string>;
    hostLists?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepHostList>[]>;
    /**
     * VTEP Identifier
     */
    id1?: pulumi.Input<number>;
    localIpAddress?: pulumi.Input<inputs.OverlayTunnelVtepLocalIpAddress>;
    localIpv6Address?: pulumi.Input<inputs.OverlayTunnelVtepLocalIpv6Address>;
    remoteIpAddressLists?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepRemoteIpAddressList>[]>;
    remoteIpv6AddressLists?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepRemoteIpv6AddressList>[]>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepSamplingEnable>[]>;
    srcPortRange?: pulumi.Input<inputs.OverlayTunnelVtepSrcPortRange>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OverlayTunnelVtep resource.
 */
export interface OverlayTunnelVtepArgs {
    /**
     * Layer-4 Destination Port (Port Number)
     */
    destPort?: pulumi.Input<number>;
    /**
     * 'ip-encap': Tunnel encapsulation type is IP; 'gre': Tunnel encapsulation type is GRE; 'nvgre': Tunnel Encapsulation Type
     * is NVGRE; 'vxlan': Tunnel Encapsulation Type is VXLAN;
     */
    encap?: pulumi.Input<string>;
    hostLists?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepHostList>[]>;
    /**
     * VTEP Identifier
     */
    id1: pulumi.Input<number>;
    localIpAddress?: pulumi.Input<inputs.OverlayTunnelVtepLocalIpAddress>;
    localIpv6Address?: pulumi.Input<inputs.OverlayTunnelVtepLocalIpv6Address>;
    remoteIpAddressLists?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepRemoteIpAddressList>[]>;
    remoteIpv6AddressLists?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepRemoteIpv6AddressList>[]>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.OverlayTunnelVtepSamplingEnable>[]>;
    srcPortRange?: pulumi.Input<inputs.OverlayTunnelVtepSrcPortRange>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
