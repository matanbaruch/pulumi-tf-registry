// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6TemplateDns extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6TemplateDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6TemplateDnsState, opts?: pulumi.CustomResourceOptions): Cgnv6TemplateDns {
        return new Cgnv6TemplateDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6TemplateDns:Cgnv6TemplateDns';

    /**
     * Returns true if the given object is an instance of Cgnv6TemplateDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6TemplateDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6TemplateDns.__pulumiType;
    }

    public readonly classList!: pulumi.Output<outputs.Cgnv6TemplateDnsClassList | undefined>;
    /**
     * 'nocache': Cache disable; 'cache': Cache enable;
     */
    public readonly defaultPolicy!: pulumi.Output<string | undefined>;
    /**
     * Disable DNS template
     */
    public readonly disableDnsTemplate!: pulumi.Output<number | undefined>;
    public readonly dns64!: pulumi.Output<outputs.Cgnv6TemplateDnsDns64 | undefined>;
    /**
     * Drop the malformed query
     */
    public readonly drop!: pulumi.Output<number | undefined>;
    /**
     * Forward to service group (Service group name)
     */
    public readonly forward!: pulumi.Output<string | undefined>;
    /**
     * Define maximum cache size (Maximum cache entry per VIP)
     */
    public readonly maxCacheSize!: pulumi.Output<number | undefined>;
    /**
     * DNS Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Period in minutes
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6TemplateDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6TemplateDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6TemplateDnsArgs | Cgnv6TemplateDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6TemplateDnsState | undefined;
            resourceInputs["classList"] = state ? state.classList : undefined;
            resourceInputs["defaultPolicy"] = state ? state.defaultPolicy : undefined;
            resourceInputs["disableDnsTemplate"] = state ? state.disableDnsTemplate : undefined;
            resourceInputs["dns64"] = state ? state.dns64 : undefined;
            resourceInputs["drop"] = state ? state.drop : undefined;
            resourceInputs["forward"] = state ? state.forward : undefined;
            resourceInputs["maxCacheSize"] = state ? state.maxCacheSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6TemplateDnsArgs | undefined;
            resourceInputs["classList"] = args ? args.classList : undefined;
            resourceInputs["defaultPolicy"] = args ? args.defaultPolicy : undefined;
            resourceInputs["disableDnsTemplate"] = args ? args.disableDnsTemplate : undefined;
            resourceInputs["dns64"] = args ? args.dns64 : undefined;
            resourceInputs["drop"] = args ? args.drop : undefined;
            resourceInputs["forward"] = args ? args.forward : undefined;
            resourceInputs["maxCacheSize"] = args ? args.maxCacheSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6TemplateDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6TemplateDns resources.
 */
export interface Cgnv6TemplateDnsState {
    classList?: pulumi.Input<inputs.Cgnv6TemplateDnsClassList>;
    /**
     * 'nocache': Cache disable; 'cache': Cache enable;
     */
    defaultPolicy?: pulumi.Input<string>;
    /**
     * Disable DNS template
     */
    disableDnsTemplate?: pulumi.Input<number>;
    dns64?: pulumi.Input<inputs.Cgnv6TemplateDnsDns64>;
    /**
     * Drop the malformed query
     */
    drop?: pulumi.Input<number>;
    /**
     * Forward to service group (Service group name)
     */
    forward?: pulumi.Input<string>;
    /**
     * Define maximum cache size (Maximum cache entry per VIP)
     */
    maxCacheSize?: pulumi.Input<number>;
    /**
     * DNS Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Period in minutes
     */
    period?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6TemplateDns resource.
 */
export interface Cgnv6TemplateDnsArgs {
    classList?: pulumi.Input<inputs.Cgnv6TemplateDnsClassList>;
    /**
     * 'nocache': Cache disable; 'cache': Cache enable;
     */
    defaultPolicy?: pulumi.Input<string>;
    /**
     * Disable DNS template
     */
    disableDnsTemplate?: pulumi.Input<number>;
    dns64?: pulumi.Input<inputs.Cgnv6TemplateDnsDns64>;
    /**
     * Drop the malformed query
     */
    drop?: pulumi.Input<number>;
    /**
     * Forward to service group (Service group name)
     */
    forward?: pulumi.Input<string>;
    /**
     * Define maximum cache size (Maximum cache entry per VIP)
     */
    maxCacheSize?: pulumi.Input<number>;
    /**
     * DNS Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Period in minutes
     */
    period?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
