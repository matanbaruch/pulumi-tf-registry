// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDdosDstZoneIpProtoProtoNumberOper(args: GetDdosDstZoneIpProtoProtoNumberOperArgs, opts?: pulumi.InvokeOptions): Promise<GetDdosDstZoneIpProtoProtoNumberOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getDdosDstZoneIpProtoProtoNumberOper:getDdosDstZoneIpProtoProtoNumberOper", {
        "id": args.id,
        "ipFilteringPolicyOper": args.ipFilteringPolicyOper,
        "oper": args.oper,
        "portInd": args.portInd,
        "progressionTracking": args.progressionTracking,
        "protocolNum": args.protocolNum,
        "topkDestinations": args.topkDestinations,
        "topkSources": args.topkSources,
        "zoneName": args.zoneName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDdosDstZoneIpProtoProtoNumberOper.
 */
export interface GetDdosDstZoneIpProtoProtoNumberOperArgs {
    id?: string;
    ipFilteringPolicyOper?: inputs.GetDdosDstZoneIpProtoProtoNumberOperIpFilteringPolicyOper;
    oper?: inputs.GetDdosDstZoneIpProtoProtoNumberOperOper;
    portInd?: inputs.GetDdosDstZoneIpProtoProtoNumberOperPortInd;
    progressionTracking?: inputs.GetDdosDstZoneIpProtoProtoNumberOperProgressionTracking;
    protocolNum: number;
    topkDestinations?: inputs.GetDdosDstZoneIpProtoProtoNumberOperTopkDestinations;
    topkSources?: inputs.GetDdosDstZoneIpProtoProtoNumberOperTopkSources;
    zoneName: string;
}

/**
 * A collection of values returned by getDdosDstZoneIpProtoProtoNumberOper.
 */
export interface GetDdosDstZoneIpProtoProtoNumberOperResult {
    readonly id: string;
    readonly ipFilteringPolicyOper?: outputs.GetDdosDstZoneIpProtoProtoNumberOperIpFilteringPolicyOper;
    readonly oper?: outputs.GetDdosDstZoneIpProtoProtoNumberOperOper;
    readonly portInd?: outputs.GetDdosDstZoneIpProtoProtoNumberOperPortInd;
    readonly progressionTracking?: outputs.GetDdosDstZoneIpProtoProtoNumberOperProgressionTracking;
    readonly protocolNum: number;
    readonly topkDestinations?: outputs.GetDdosDstZoneIpProtoProtoNumberOperTopkDestinations;
    readonly topkSources?: outputs.GetDdosDstZoneIpProtoProtoNumberOperTopkSources;
    readonly zoneName: string;
}
export function getDdosDstZoneIpProtoProtoNumberOperOutput(args: GetDdosDstZoneIpProtoProtoNumberOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDdosDstZoneIpProtoProtoNumberOperResult> {
    return pulumi.output(args).apply((a: any) => getDdosDstZoneIpProtoProtoNumberOper(a, opts))
}

/**
 * A collection of arguments for invoking getDdosDstZoneIpProtoProtoNumberOper.
 */
export interface GetDdosDstZoneIpProtoProtoNumberOperOutputArgs {
    id?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.GetDdosDstZoneIpProtoProtoNumberOperIpFilteringPolicyOperArgs>;
    oper?: pulumi.Input<inputs.GetDdosDstZoneIpProtoProtoNumberOperOperArgs>;
    portInd?: pulumi.Input<inputs.GetDdosDstZoneIpProtoProtoNumberOperPortIndArgs>;
    progressionTracking?: pulumi.Input<inputs.GetDdosDstZoneIpProtoProtoNumberOperProgressionTrackingArgs>;
    protocolNum: pulumi.Input<number>;
    topkDestinations?: pulumi.Input<inputs.GetDdosDstZoneIpProtoProtoNumberOperTopkDestinationsArgs>;
    topkSources?: pulumi.Input<inputs.GetDdosDstZoneIpProtoProtoNumberOperTopkSourcesArgs>;
    zoneName: pulumi.Input<string>;
}
