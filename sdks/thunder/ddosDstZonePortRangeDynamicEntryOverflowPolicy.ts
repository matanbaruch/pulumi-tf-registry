// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstZonePortRangeDynamicEntryOverflowPolicy extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstZonePortRangeDynamicEntryOverflowPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstZonePortRangeDynamicEntryOverflowPolicyState, opts?: pulumi.CustomResourceOptions): DdosDstZonePortRangeDynamicEntryOverflowPolicy {
        return new DdosDstZonePortRangeDynamicEntryOverflowPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstZonePortRangeDynamicEntryOverflowPolicy:DdosDstZonePortRangeDynamicEntryOverflowPolicy';

    /**
     * Returns true if the given object is an instance of DdosDstZonePortRangeDynamicEntryOverflowPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstZonePortRangeDynamicEntryOverflowPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstZonePortRangeDynamicEntryOverflowPolicy.__pulumiType;
    }

    /**
     * 'bypass': Always permit for the Source to bypass all feature & limit checks; 'deny': Blacklist incoming packets for
     * service;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * 'configuration': Configure overflow policy;
     */
    public readonly dummyName!: pulumi.Output<string>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    /**
     * Enable logging
     */
    public readonly logEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable log periodic
     */
    public readonly logPeriodic!: pulumi.Output<number | undefined>;
    /**
     * PortRangeEnd
     */
    public readonly portRangeEnd!: pulumi.Output<string>;
    /**
     * PortRangeStart
     */
    public readonly portRangeStart!: pulumi.Output<string>;
    /**
     * Protocol
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * ZoneName
     */
    public readonly zoneName!: pulumi.Output<string>;
    public readonly zoneTemplate!: pulumi.Output<outputs.DdosDstZonePortRangeDynamicEntryOverflowPolicyZoneTemplate | undefined>;

    /**
     * Create a DdosDstZonePortRangeDynamicEntryOverflowPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstZonePortRangeDynamicEntryOverflowPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstZonePortRangeDynamicEntryOverflowPolicyArgs | DdosDstZonePortRangeDynamicEntryOverflowPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstZonePortRangeDynamicEntryOverflowPolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["dummyName"] = state ? state.dummyName : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["logEnable"] = state ? state.logEnable : undefined;
            resourceInputs["logPeriodic"] = state ? state.logPeriodic : undefined;
            resourceInputs["portRangeEnd"] = state ? state.portRangeEnd : undefined;
            resourceInputs["portRangeStart"] = state ? state.portRangeStart : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
            resourceInputs["zoneTemplate"] = state ? state.zoneTemplate : undefined;
        } else {
            const args = argsOrState as DdosDstZonePortRangeDynamicEntryOverflowPolicyArgs | undefined;
            if ((!args || args.dummyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dummyName'");
            }
            if ((!args || args.portRangeEnd === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portRangeEnd'");
            }
            if ((!args || args.portRangeStart === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portRangeStart'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["dummyName"] = args ? args.dummyName : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["logEnable"] = args ? args.logEnable : undefined;
            resourceInputs["logPeriodic"] = args ? args.logPeriodic : undefined;
            resourceInputs["portRangeEnd"] = args ? args.portRangeEnd : undefined;
            resourceInputs["portRangeStart"] = args ? args.portRangeStart : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["zoneTemplate"] = args ? args.zoneTemplate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstZonePortRangeDynamicEntryOverflowPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstZonePortRangeDynamicEntryOverflowPolicy resources.
 */
export interface DdosDstZonePortRangeDynamicEntryOverflowPolicyState {
    /**
     * 'bypass': Always permit for the Source to bypass all feature & limit checks; 'deny': Blacklist incoming packets for
     * service;
     */
    action?: pulumi.Input<string>;
    /**
     * 'configuration': Configure overflow policy;
     */
    dummyName?: pulumi.Input<string>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * Enable logging
     */
    logEnable?: pulumi.Input<number>;
    /**
     * Enable log periodic
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * PortRangeEnd
     */
    portRangeEnd?: pulumi.Input<string>;
    /**
     * PortRangeStart
     */
    portRangeStart?: pulumi.Input<string>;
    /**
     * Protocol
     */
    protocol?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName?: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZonePortRangeDynamicEntryOverflowPolicyZoneTemplate>;
}

/**
 * The set of arguments for constructing a DdosDstZonePortRangeDynamicEntryOverflowPolicy resource.
 */
export interface DdosDstZonePortRangeDynamicEntryOverflowPolicyArgs {
    /**
     * 'bypass': Always permit for the Source to bypass all feature & limit checks; 'deny': Blacklist incoming packets for
     * service;
     */
    action?: pulumi.Input<string>;
    /**
     * 'configuration': Configure overflow policy;
     */
    dummyName: pulumi.Input<string>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * Enable logging
     */
    logEnable?: pulumi.Input<number>;
    /**
     * Enable log periodic
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * PortRangeEnd
     */
    portRangeEnd: pulumi.Input<string>;
    /**
     * PortRangeStart
     */
    portRangeStart: pulumi.Input<string>;
    /**
     * Protocol
     */
    protocol: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZonePortRangeDynamicEntryOverflowPolicyZoneTemplate>;
}
