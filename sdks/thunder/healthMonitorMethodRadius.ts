// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HealthMonitorMethodRadius extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodRadius resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodRadiusState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodRadius {
        return new HealthMonitorMethodRadius(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodRadius:HealthMonitorMethodRadius';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodRadius.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodRadius {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodRadius.__pulumiType;
    }

    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * RADIUS type
     */
    public readonly radius!: pulumi.Output<number | undefined>;
    /**
     * Specify what you expect from the response message
     */
    public readonly radiusExpect!: pulumi.Output<number | undefined>;
    /**
     * Configure password, '' means empty password
     */
    public readonly radiusPasswordString!: pulumi.Output<string | undefined>;
    /**
     * Specify the RADIUS port, default is 1812 (Port number (default 1812))
     */
    public readonly radiusPort!: pulumi.Output<number | undefined>;
    /**
     * Specify response code range (e.g. 2,4-7) (Format is xx,xx-xx (xx between [1, 13]))
     */
    public readonly radiusResponseCode!: pulumi.Output<string | undefined>;
    /**
     * Configure shared secret of RADIUS server
     */
    public readonly radiusSecret!: pulumi.Output<string | undefined>;
    /**
     * Specify the username
     */
    public readonly radiusUsername!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitorMethodRadius resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodRadiusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodRadiusArgs | HealthMonitorMethodRadiusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodRadiusState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["radius"] = state ? state.radius : undefined;
            resourceInputs["radiusExpect"] = state ? state.radiusExpect : undefined;
            resourceInputs["radiusPasswordString"] = state ? state.radiusPasswordString : undefined;
            resourceInputs["radiusPort"] = state ? state.radiusPort : undefined;
            resourceInputs["radiusResponseCode"] = state ? state.radiusResponseCode : undefined;
            resourceInputs["radiusSecret"] = state ? state.radiusSecret : undefined;
            resourceInputs["radiusUsername"] = state ? state.radiusUsername : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodRadiusArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["radius"] = args ? args.radius : undefined;
            resourceInputs["radiusExpect"] = args ? args.radiusExpect : undefined;
            resourceInputs["radiusPasswordString"] = args ? args.radiusPasswordString : undefined;
            resourceInputs["radiusPort"] = args ? args.radiusPort : undefined;
            resourceInputs["radiusResponseCode"] = args ? args.radiusResponseCode : undefined;
            resourceInputs["radiusSecret"] = args ? args.radiusSecret : undefined;
            resourceInputs["radiusUsername"] = args ? args.radiusUsername : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodRadius.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodRadius resources.
 */
export interface HealthMonitorMethodRadiusState {
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * RADIUS type
     */
    radius?: pulumi.Input<number>;
    /**
     * Specify what you expect from the response message
     */
    radiusExpect?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    radiusPasswordString?: pulumi.Input<string>;
    /**
     * Specify the RADIUS port, default is 1812 (Port number (default 1812))
     */
    radiusPort?: pulumi.Input<number>;
    /**
     * Specify response code range (e.g. 2,4-7) (Format is xx,xx-xx (xx between [1, 13]))
     */
    radiusResponseCode?: pulumi.Input<string>;
    /**
     * Configure shared secret of RADIUS server
     */
    radiusSecret?: pulumi.Input<string>;
    /**
     * Specify the username
     */
    radiusUsername?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodRadius resource.
 */
export interface HealthMonitorMethodRadiusArgs {
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * RADIUS type
     */
    radius?: pulumi.Input<number>;
    /**
     * Specify what you expect from the response message
     */
    radiusExpect?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    radiusPasswordString?: pulumi.Input<string>;
    /**
     * Specify the RADIUS port, default is 1812 (Port number (default 1812))
     */
    radiusPort?: pulumi.Input<number>;
    /**
     * Specify response code range (e.g. 2,4-7) (Format is xx,xx-xx (xx between [1, 13]))
     */
    radiusResponseCode?: pulumi.Input<string>;
    /**
     * Configure shared secret of RADIUS server
     */
    radiusSecret?: pulumi.Input<string>;
    /**
     * Specify the username
     */
    radiusUsername?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
