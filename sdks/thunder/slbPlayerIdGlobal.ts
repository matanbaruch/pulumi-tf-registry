// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbPlayerIdGlobal extends pulumi.CustomResource {
    /**
     * Get an existing SlbPlayerIdGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbPlayerIdGlobalState, opts?: pulumi.CustomResourceOptions): SlbPlayerIdGlobal {
        return new SlbPlayerIdGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbPlayerIdGlobal:SlbPlayerIdGlobal';

    /**
     * Returns true if the given object is an instance of SlbPlayerIdGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbPlayerIdGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbPlayerIdGlobal.__pulumiType;
    }

    /**
     * Absolute max record expiration value (default 10 minutes) (Absolute max record expiration time in minutes, default 10)
     */
    public readonly absMaxExpiration!: pulumi.Output<number | undefined>;
    /**
     * Enable 64 bit player id check. Default is 32 bit
     */
    public readonly enable64bitPlayerId!: pulumi.Output<number | undefined>;
    /**
     * Time to playerid enforcement after bootup (default 480 seconds) (Time to playerid enforcement in seconds, default 480)
     */
    public readonly enforcementTimer!: pulumi.Output<number | undefined>;
    /**
     * Forces the device to be in passive mode (Only stats and no packet drops)
     */
    public readonly forcePassive!: pulumi.Output<number | undefined>;
    /**
     * Minimum record expiration value (default 1 min) (Min record expiration time in minutes, default 1)
     */
    public readonly minExpiration!: pulumi.Output<number | undefined>;
    /**
     * Packet activity record expiration value (default 5 minutes) (Packet activity record expiration time in minutes, default
     * 5)
     */
    public readonly pktActivityExpiration!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.SlbPlayerIdGlobalSamplingEnable[] | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbPlayerIdGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbPlayerIdGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbPlayerIdGlobalArgs | SlbPlayerIdGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbPlayerIdGlobalState | undefined;
            resourceInputs["absMaxExpiration"] = state ? state.absMaxExpiration : undefined;
            resourceInputs["enable64bitPlayerId"] = state ? state.enable64bitPlayerId : undefined;
            resourceInputs["enforcementTimer"] = state ? state.enforcementTimer : undefined;
            resourceInputs["forcePassive"] = state ? state.forcePassive : undefined;
            resourceInputs["minExpiration"] = state ? state.minExpiration : undefined;
            resourceInputs["pktActivityExpiration"] = state ? state.pktActivityExpiration : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbPlayerIdGlobalArgs | undefined;
            resourceInputs["absMaxExpiration"] = args ? args.absMaxExpiration : undefined;
            resourceInputs["enable64bitPlayerId"] = args ? args.enable64bitPlayerId : undefined;
            resourceInputs["enforcementTimer"] = args ? args.enforcementTimer : undefined;
            resourceInputs["forcePassive"] = args ? args.forcePassive : undefined;
            resourceInputs["minExpiration"] = args ? args.minExpiration : undefined;
            resourceInputs["pktActivityExpiration"] = args ? args.pktActivityExpiration : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbPlayerIdGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbPlayerIdGlobal resources.
 */
export interface SlbPlayerIdGlobalState {
    /**
     * Absolute max record expiration value (default 10 minutes) (Absolute max record expiration time in minutes, default 10)
     */
    absMaxExpiration?: pulumi.Input<number>;
    /**
     * Enable 64 bit player id check. Default is 32 bit
     */
    enable64bitPlayerId?: pulumi.Input<number>;
    /**
     * Time to playerid enforcement after bootup (default 480 seconds) (Time to playerid enforcement in seconds, default 480)
     */
    enforcementTimer?: pulumi.Input<number>;
    /**
     * Forces the device to be in passive mode (Only stats and no packet drops)
     */
    forcePassive?: pulumi.Input<number>;
    /**
     * Minimum record expiration value (default 1 min) (Min record expiration time in minutes, default 1)
     */
    minExpiration?: pulumi.Input<number>;
    /**
     * Packet activity record expiration value (default 5 minutes) (Packet activity record expiration time in minutes, default
     * 5)
     */
    pktActivityExpiration?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbPlayerIdGlobalSamplingEnable>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbPlayerIdGlobal resource.
 */
export interface SlbPlayerIdGlobalArgs {
    /**
     * Absolute max record expiration value (default 10 minutes) (Absolute max record expiration time in minutes, default 10)
     */
    absMaxExpiration?: pulumi.Input<number>;
    /**
     * Enable 64 bit player id check. Default is 32 bit
     */
    enable64bitPlayerId?: pulumi.Input<number>;
    /**
     * Time to playerid enforcement after bootup (default 480 seconds) (Time to playerid enforcement in seconds, default 480)
     */
    enforcementTimer?: pulumi.Input<number>;
    /**
     * Forces the device to be in passive mode (Only stats and no packet drops)
     */
    forcePassive?: pulumi.Input<number>;
    /**
     * Minimum record expiration value (default 1 min) (Min record expiration time in minutes, default 1)
     */
    minExpiration?: pulumi.Input<number>;
    /**
     * Packet activity record expiration value (default 5 minutes) (Packet activity record expiration time in minutes, default
     * 5)
     */
    pktActivityExpiration?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbPlayerIdGlobalSamplingEnable>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
