// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6Nat64Global extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6Nat64Global resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6Nat64GlobalState, opts?: pulumi.CustomResourceOptions): Cgnv6Nat64Global {
        return new Cgnv6Nat64Global(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6Nat64Global:Cgnv6Nat64Global';

    /**
     * Returns true if the given object is an instance of Cgnv6Nat64Global.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6Nat64Global {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6Nat64Global.__pulumiType;
    }

    /**
     * All packet sizes
     */
    public readonly all!: pulumi.Output<number | undefined>;
    /**
     * Enable non-zero ID field in IPv4 header if no IPv6 fragment & IPv4 pkt size is more than 88 & less than or equal to 1280
     * bytes
     */
    public readonly forceNonZeroIpv4Id!: pulumi.Output<number | undefined>;
    public readonly icmp!: pulumi.Output<outputs.Cgnv6Nat64GlobalIcmp | undefined>;
    public readonly inside!: pulumi.Output<outputs.Cgnv6Nat64GlobalInside | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.Cgnv6Nat64GlobalSamplingEnable[] | undefined>;
    public readonly tcp!: pulumi.Output<outputs.Cgnv6Nat64GlobalTcp | undefined>;
    /**
     * User Quota Prefix Length (Default: 128)
     */
    public readonly userQuotaPrefixLength!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6Nat64Global resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6Nat64GlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6Nat64GlobalArgs | Cgnv6Nat64GlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6Nat64GlobalState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["forceNonZeroIpv4Id"] = state ? state.forceNonZeroIpv4Id : undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["inside"] = state ? state.inside : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["userQuotaPrefixLength"] = state ? state.userQuotaPrefixLength : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6Nat64GlobalArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["forceNonZeroIpv4Id"] = args ? args.forceNonZeroIpv4Id : undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["inside"] = args ? args.inside : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["userQuotaPrefixLength"] = args ? args.userQuotaPrefixLength : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6Nat64Global.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6Nat64Global resources.
 */
export interface Cgnv6Nat64GlobalState {
    /**
     * All packet sizes
     */
    all?: pulumi.Input<number>;
    /**
     * Enable non-zero ID field in IPv4 header if no IPv6 fragment & IPv4 pkt size is more than 88 & less than or equal to 1280
     * bytes
     */
    forceNonZeroIpv4Id?: pulumi.Input<number>;
    icmp?: pulumi.Input<inputs.Cgnv6Nat64GlobalIcmp>;
    inside?: pulumi.Input<inputs.Cgnv6Nat64GlobalInside>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6Nat64GlobalSamplingEnable>[]>;
    tcp?: pulumi.Input<inputs.Cgnv6Nat64GlobalTcp>;
    /**
     * User Quota Prefix Length (Default: 128)
     */
    userQuotaPrefixLength?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6Nat64Global resource.
 */
export interface Cgnv6Nat64GlobalArgs {
    /**
     * All packet sizes
     */
    all?: pulumi.Input<number>;
    /**
     * Enable non-zero ID field in IPv4 header if no IPv6 fragment & IPv4 pkt size is more than 88 & less than or equal to 1280
     * bytes
     */
    forceNonZeroIpv4Id?: pulumi.Input<number>;
    icmp?: pulumi.Input<inputs.Cgnv6Nat64GlobalIcmp>;
    inside?: pulumi.Input<inputs.Cgnv6Nat64GlobalInside>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6Nat64GlobalSamplingEnable>[]>;
    tcp?: pulumi.Input<inputs.Cgnv6Nat64GlobalTcp>;
    /**
     * User Quota Prefix Length (Default: 128)
     */
    userQuotaPrefixLength?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
