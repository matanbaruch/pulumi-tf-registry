// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6NatPool extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6NatPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6NatPoolState, opts?: pulumi.CustomResourceOptions): Cgnv6NatPool {
        return new Cgnv6NatPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6NatPool:Cgnv6NatPool';

    /**
     * Returns true if the given object is an instance of Cgnv6NatPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6NatPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6NatPool.__pulumiType;
    }

    /**
     * Share with all partitions
     */
    public readonly all!: pulumi.Output<number | undefined>;
    /**
     * Configure end IP address of NAT pool
     */
    public readonly endAddress!: pulumi.Output<string | undefined>;
    public readonly excludeIps!: pulumi.Output<outputs.Cgnv6NatPoolExcludeIp[] | undefined>;
    /**
     * Share with a partition group (Partition Group Name)
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Number of users that can be assigned to a NAT IP
     */
    public readonly maxUsersPerIp!: pulumi.Output<number | undefined>;
    /**
     * Configure mask for pool
     */
    public readonly netmask!: pulumi.Output<string | undefined>;
    /**
     * Share with a single partition (Partition Name)
     */
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * Configure warning log threshold for per batch port usage (default: disabled) (Number of ports)
     */
    public readonly perBatchPortUsageWarningThreshold!: pulumi.Output<number | undefined>;
    /**
     * Specify pool name
     */
    public readonly poolName!: pulumi.Output<string>;
    /**
     * '64': Allocate 64 ports at a time; '128': Allocate 128 ports at a time; '256': Allocate 256 ports at a time; '512':
     * Allocate 512 ports at a time; '1024': Allocate 1024 ports at a time; '2048': Allocate 2048 ports at a time; '4096':
     * Allocate 4096 ports at a time;
     */
    public readonly portBatchV2Size!: pulumi.Output<string | undefined>;
    /**
     * Share this pool with other partitions (default: not shared)
     */
    public readonly shared!: pulumi.Output<number | undefined>;
    /**
     * Allocate same TCP and UDP batches at once
     */
    public readonly simultaneousBatchAllocation!: pulumi.Output<number | undefined>;
    /**
     * Configure start IP address of NAT pool
     */
    public readonly startAddress!: pulumi.Output<string | undefined>;
    /**
     * Minutes before TCP NAT ports can be reused
     */
    public readonly tcpTimeWaitInterval!: pulumi.Output<number | undefined>;
    /**
     * Configure usable NAT ports
     */
    public readonly usableNatPorts!: pulumi.Output<number | undefined>;
    /**
     * End Port of Usable NAT Ports
     */
    public readonly usableNatPortsEnd!: pulumi.Output<number | undefined>;
    /**
     * Start Port of Usable NAT Ports (needs to be even)
     */
    public readonly usableNatPortsStart!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Configure VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    public readonly vrid!: pulumi.Output<number | undefined>;

    /**
     * Create a Cgnv6NatPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Cgnv6NatPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6NatPoolArgs | Cgnv6NatPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6NatPoolState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["endAddress"] = state ? state.endAddress : undefined;
            resourceInputs["excludeIps"] = state ? state.excludeIps : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["maxUsersPerIp"] = state ? state.maxUsersPerIp : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["perBatchPortUsageWarningThreshold"] = state ? state.perBatchPortUsageWarningThreshold : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["portBatchV2Size"] = state ? state.portBatchV2Size : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["simultaneousBatchAllocation"] = state ? state.simultaneousBatchAllocation : undefined;
            resourceInputs["startAddress"] = state ? state.startAddress : undefined;
            resourceInputs["tcpTimeWaitInterval"] = state ? state.tcpTimeWaitInterval : undefined;
            resourceInputs["usableNatPorts"] = state ? state.usableNatPorts : undefined;
            resourceInputs["usableNatPortsEnd"] = state ? state.usableNatPortsEnd : undefined;
            resourceInputs["usableNatPortsStart"] = state ? state.usableNatPortsStart : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as Cgnv6NatPoolArgs | undefined;
            if ((!args || args.poolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["endAddress"] = args ? args.endAddress : undefined;
            resourceInputs["excludeIps"] = args ? args.excludeIps : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["maxUsersPerIp"] = args ? args.maxUsersPerIp : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["perBatchPortUsageWarningThreshold"] = args ? args.perBatchPortUsageWarningThreshold : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["portBatchV2Size"] = args ? args.portBatchV2Size : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
            resourceInputs["simultaneousBatchAllocation"] = args ? args.simultaneousBatchAllocation : undefined;
            resourceInputs["startAddress"] = args ? args.startAddress : undefined;
            resourceInputs["tcpTimeWaitInterval"] = args ? args.tcpTimeWaitInterval : undefined;
            resourceInputs["usableNatPorts"] = args ? args.usableNatPorts : undefined;
            resourceInputs["usableNatPortsEnd"] = args ? args.usableNatPortsEnd : undefined;
            resourceInputs["usableNatPortsStart"] = args ? args.usableNatPortsStart : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6NatPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6NatPool resources.
 */
export interface Cgnv6NatPoolState {
    /**
     * Share with all partitions
     */
    all?: pulumi.Input<number>;
    /**
     * Configure end IP address of NAT pool
     */
    endAddress?: pulumi.Input<string>;
    excludeIps?: pulumi.Input<pulumi.Input<inputs.Cgnv6NatPoolExcludeIp>[]>;
    /**
     * Share with a partition group (Partition Group Name)
     */
    group?: pulumi.Input<string>;
    /**
     * Number of users that can be assigned to a NAT IP
     */
    maxUsersPerIp?: pulumi.Input<number>;
    /**
     * Configure mask for pool
     */
    netmask?: pulumi.Input<string>;
    /**
     * Share with a single partition (Partition Name)
     */
    partition?: pulumi.Input<string>;
    /**
     * Configure warning log threshold for per batch port usage (default: disabled) (Number of ports)
     */
    perBatchPortUsageWarningThreshold?: pulumi.Input<number>;
    /**
     * Specify pool name
     */
    poolName?: pulumi.Input<string>;
    /**
     * '64': Allocate 64 ports at a time; '128': Allocate 128 ports at a time; '256': Allocate 256 ports at a time; '512':
     * Allocate 512 ports at a time; '1024': Allocate 1024 ports at a time; '2048': Allocate 2048 ports at a time; '4096':
     * Allocate 4096 ports at a time;
     */
    portBatchV2Size?: pulumi.Input<string>;
    /**
     * Share this pool with other partitions (default: not shared)
     */
    shared?: pulumi.Input<number>;
    /**
     * Allocate same TCP and UDP batches at once
     */
    simultaneousBatchAllocation?: pulumi.Input<number>;
    /**
     * Configure start IP address of NAT pool
     */
    startAddress?: pulumi.Input<string>;
    /**
     * Minutes before TCP NAT ports can be reused
     */
    tcpTimeWaitInterval?: pulumi.Input<number>;
    /**
     * Configure usable NAT ports
     */
    usableNatPorts?: pulumi.Input<number>;
    /**
     * End Port of Usable NAT Ports
     */
    usableNatPortsEnd?: pulumi.Input<number>;
    /**
     * Start Port of Usable NAT Ports (needs to be even)
     */
    usableNatPortsStart?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cgnv6NatPool resource.
 */
export interface Cgnv6NatPoolArgs {
    /**
     * Share with all partitions
     */
    all?: pulumi.Input<number>;
    /**
     * Configure end IP address of NAT pool
     */
    endAddress?: pulumi.Input<string>;
    excludeIps?: pulumi.Input<pulumi.Input<inputs.Cgnv6NatPoolExcludeIp>[]>;
    /**
     * Share with a partition group (Partition Group Name)
     */
    group?: pulumi.Input<string>;
    /**
     * Number of users that can be assigned to a NAT IP
     */
    maxUsersPerIp?: pulumi.Input<number>;
    /**
     * Configure mask for pool
     */
    netmask?: pulumi.Input<string>;
    /**
     * Share with a single partition (Partition Name)
     */
    partition?: pulumi.Input<string>;
    /**
     * Configure warning log threshold for per batch port usage (default: disabled) (Number of ports)
     */
    perBatchPortUsageWarningThreshold?: pulumi.Input<number>;
    /**
     * Specify pool name
     */
    poolName: pulumi.Input<string>;
    /**
     * '64': Allocate 64 ports at a time; '128': Allocate 128 ports at a time; '256': Allocate 256 ports at a time; '512':
     * Allocate 512 ports at a time; '1024': Allocate 1024 ports at a time; '2048': Allocate 2048 ports at a time; '4096':
     * Allocate 4096 ports at a time;
     */
    portBatchV2Size?: pulumi.Input<string>;
    /**
     * Share this pool with other partitions (default: not shared)
     */
    shared?: pulumi.Input<number>;
    /**
     * Allocate same TCP and UDP batches at once
     */
    simultaneousBatchAllocation?: pulumi.Input<number>;
    /**
     * Configure start IP address of NAT pool
     */
    startAddress?: pulumi.Input<string>;
    /**
     * Minutes before TCP NAT ports can be reused
     */
    tcpTimeWaitInterval?: pulumi.Input<number>;
    /**
     * Configure usable NAT ports
     */
    usableNatPorts?: pulumi.Input<number>;
    /**
     * End Port of Usable NAT Ports
     */
    usableNatPortsEnd?: pulumi.Input<number>;
    /**
     * Start Port of Usable NAT Ports (needs to be even)
     */
    usableNatPortsStart?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}
