// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateTcp extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateTcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateTcpState, opts?: pulumi.CustomResourceOptions): SlbTemplateTcp {
        return new SlbTemplateTcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateTcp:SlbTemplateTcp';

    /**
     * Returns true if the given object is an instance of SlbTemplateTcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateTcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateTcp.__pulumiType;
    }

    /**
     * keep connection alive if active traffic
     */
    public readonly aliveIfActive!: pulumi.Output<number | undefined>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    public readonly delSessionOnServerDown!: pulumi.Output<number | undefined>;
    /**
     * send reset to client when server is disabled
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * send reset to client when server is down
     */
    public readonly down!: pulumi.Output<number | undefined>;
    /**
     * The maximum time that a session can stay in the system before being delete (number (second))
     */
    public readonly forceDeleteTimeout!: pulumi.Output<number | undefined>;
    /**
     * The maximum time that a session can stay in the system before being delete (number in 100ms)
     */
    public readonly forceDeleteTimeout100ms!: pulumi.Output<number | undefined>;
    /**
     * TCP Half Close Idle Timeout (sec), default off (half close idle timeout in second, default off)
     */
    public readonly halfCloseIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * TCP Half Open Idle Timeout (sec), default off (half open idle timeout in second, default off)
     */
    public readonly halfOpenIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Idle Timeout value (Interval of 60 seconds), default 120 seconds (idle timeout in second, default 120)
     */
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Set the initial window size (number)
     */
    public readonly initialWindowSize!: pulumi.Output<number | undefined>;
    /**
     * Insert client ip into TCP option
     */
    public readonly insertClientIp!: pulumi.Output<number | undefined>;
    /**
     * Enable fast TCP ack on LAN
     */
    public readonly lanFastAck!: pulumi.Output<number | undefined>;
    /**
     * 'init': init only log; 'term': termination only log; 'both': both initial and termination log;
     */
    public readonly logging!: pulumi.Output<string | undefined>;
    /**
     * Fast TCP Template Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly proxyHeader!: pulumi.Output<outputs.SlbTemplateTcpProxyHeader | undefined>;
    /**
     * QOS level (number)
     */
    public readonly qos!: pulumi.Output<number | undefined>;
    /**
     * re-select another server if service port is down
     */
    public readonly reSelectIfServerDown!: pulumi.Output<number | undefined>;
    /**
     * send reset to client or server upon receiving first fin
     */
    public readonly resetFollowFin!: pulumi.Output<number | undefined>;
    /**
     * send reset to server if error happens
     */
    public readonly resetFwd!: pulumi.Output<number | undefined>;
    /**
     * send reset to client if error happens
     */
    public readonly resetRev!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateTcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateTcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateTcpArgs | SlbTemplateTcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateTcpState | undefined;
            resourceInputs["aliveIfActive"] = state ? state.aliveIfActive : undefined;
            resourceInputs["delSessionOnServerDown"] = state ? state.delSessionOnServerDown : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["down"] = state ? state.down : undefined;
            resourceInputs["forceDeleteTimeout"] = state ? state.forceDeleteTimeout : undefined;
            resourceInputs["forceDeleteTimeout100ms"] = state ? state.forceDeleteTimeout100ms : undefined;
            resourceInputs["halfCloseIdleTimeout"] = state ? state.halfCloseIdleTimeout : undefined;
            resourceInputs["halfOpenIdleTimeout"] = state ? state.halfOpenIdleTimeout : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["initialWindowSize"] = state ? state.initialWindowSize : undefined;
            resourceInputs["insertClientIp"] = state ? state.insertClientIp : undefined;
            resourceInputs["lanFastAck"] = state ? state.lanFastAck : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyHeader"] = state ? state.proxyHeader : undefined;
            resourceInputs["qos"] = state ? state.qos : undefined;
            resourceInputs["reSelectIfServerDown"] = state ? state.reSelectIfServerDown : undefined;
            resourceInputs["resetFollowFin"] = state ? state.resetFollowFin : undefined;
            resourceInputs["resetFwd"] = state ? state.resetFwd : undefined;
            resourceInputs["resetRev"] = state ? state.resetRev : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateTcpArgs | undefined;
            resourceInputs["aliveIfActive"] = args ? args.aliveIfActive : undefined;
            resourceInputs["delSessionOnServerDown"] = args ? args.delSessionOnServerDown : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["down"] = args ? args.down : undefined;
            resourceInputs["forceDeleteTimeout"] = args ? args.forceDeleteTimeout : undefined;
            resourceInputs["forceDeleteTimeout100ms"] = args ? args.forceDeleteTimeout100ms : undefined;
            resourceInputs["halfCloseIdleTimeout"] = args ? args.halfCloseIdleTimeout : undefined;
            resourceInputs["halfOpenIdleTimeout"] = args ? args.halfOpenIdleTimeout : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["initialWindowSize"] = args ? args.initialWindowSize : undefined;
            resourceInputs["insertClientIp"] = args ? args.insertClientIp : undefined;
            resourceInputs["lanFastAck"] = args ? args.lanFastAck : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyHeader"] = args ? args.proxyHeader : undefined;
            resourceInputs["qos"] = args ? args.qos : undefined;
            resourceInputs["reSelectIfServerDown"] = args ? args.reSelectIfServerDown : undefined;
            resourceInputs["resetFollowFin"] = args ? args.resetFollowFin : undefined;
            resourceInputs["resetFwd"] = args ? args.resetFwd : undefined;
            resourceInputs["resetRev"] = args ? args.resetRev : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateTcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateTcp resources.
 */
export interface SlbTemplateTcpState {
    /**
     * keep connection alive if active traffic
     */
    aliveIfActive?: pulumi.Input<number>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    delSessionOnServerDown?: pulumi.Input<number>;
    /**
     * send reset to client when server is disabled
     */
    disable?: pulumi.Input<number>;
    /**
     * send reset to client when server is down
     */
    down?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being delete (number (second))
     */
    forceDeleteTimeout?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being delete (number in 100ms)
     */
    forceDeleteTimeout100ms?: pulumi.Input<number>;
    /**
     * TCP Half Close Idle Timeout (sec), default off (half close idle timeout in second, default off)
     */
    halfCloseIdleTimeout?: pulumi.Input<number>;
    /**
     * TCP Half Open Idle Timeout (sec), default off (half open idle timeout in second, default off)
     */
    halfOpenIdleTimeout?: pulumi.Input<number>;
    /**
     * Idle Timeout value (Interval of 60 seconds), default 120 seconds (idle timeout in second, default 120)
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Set the initial window size (number)
     */
    initialWindowSize?: pulumi.Input<number>;
    /**
     * Insert client ip into TCP option
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * Enable fast TCP ack on LAN
     */
    lanFastAck?: pulumi.Input<number>;
    /**
     * 'init': init only log; 'term': termination only log; 'both': both initial and termination log;
     */
    logging?: pulumi.Input<string>;
    /**
     * Fast TCP Template Name
     */
    name?: pulumi.Input<string>;
    proxyHeader?: pulumi.Input<inputs.SlbTemplateTcpProxyHeader>;
    /**
     * QOS level (number)
     */
    qos?: pulumi.Input<number>;
    /**
     * re-select another server if service port is down
     */
    reSelectIfServerDown?: pulumi.Input<number>;
    /**
     * send reset to client or server upon receiving first fin
     */
    resetFollowFin?: pulumi.Input<number>;
    /**
     * send reset to server if error happens
     */
    resetFwd?: pulumi.Input<number>;
    /**
     * send reset to client if error happens
     */
    resetRev?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateTcp resource.
 */
export interface SlbTemplateTcpArgs {
    /**
     * keep connection alive if active traffic
     */
    aliveIfActive?: pulumi.Input<number>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    delSessionOnServerDown?: pulumi.Input<number>;
    /**
     * send reset to client when server is disabled
     */
    disable?: pulumi.Input<number>;
    /**
     * send reset to client when server is down
     */
    down?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being delete (number (second))
     */
    forceDeleteTimeout?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being delete (number in 100ms)
     */
    forceDeleteTimeout100ms?: pulumi.Input<number>;
    /**
     * TCP Half Close Idle Timeout (sec), default off (half close idle timeout in second, default off)
     */
    halfCloseIdleTimeout?: pulumi.Input<number>;
    /**
     * TCP Half Open Idle Timeout (sec), default off (half open idle timeout in second, default off)
     */
    halfOpenIdleTimeout?: pulumi.Input<number>;
    /**
     * Idle Timeout value (Interval of 60 seconds), default 120 seconds (idle timeout in second, default 120)
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Set the initial window size (number)
     */
    initialWindowSize?: pulumi.Input<number>;
    /**
     * Insert client ip into TCP option
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * Enable fast TCP ack on LAN
     */
    lanFastAck?: pulumi.Input<number>;
    /**
     * 'init': init only log; 'term': termination only log; 'both': both initial and termination log;
     */
    logging?: pulumi.Input<string>;
    /**
     * Fast TCP Template Name
     */
    name?: pulumi.Input<string>;
    proxyHeader?: pulumi.Input<inputs.SlbTemplateTcpProxyHeader>;
    /**
     * QOS level (number)
     */
    qos?: pulumi.Input<number>;
    /**
     * re-select another server if service port is down
     */
    reSelectIfServerDown?: pulumi.Input<number>;
    /**
     * send reset to client or server upon receiving first fin
     */
    resetFollowFin?: pulumi.Input<number>;
    /**
     * send reset to server if error happens
     */
    resetFwd?: pulumi.Input<number>;
    /**
     * send reset to client if error happens
     */
    resetRev?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
