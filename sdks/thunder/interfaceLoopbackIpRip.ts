// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceLoopbackIpRip extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceLoopbackIpRip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceLoopbackIpRipState, opts?: pulumi.CustomResourceOptions): InterfaceLoopbackIpRip {
        return new InterfaceLoopbackIpRip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/interfaceLoopbackIpRip:InterfaceLoopbackIpRip';

    /**
     * Returns true if the given object is an instance of InterfaceLoopbackIpRip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceLoopbackIpRip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceLoopbackIpRip.__pulumiType;
    }

    public readonly authentication!: pulumi.Output<outputs.InterfaceLoopbackIpRipAuthentication | undefined>;
    /**
     * Ifnum
     */
    public readonly ifnum!: pulumi.Output<string>;
    public readonly receiveCfg!: pulumi.Output<outputs.InterfaceLoopbackIpRipReceiveCfg | undefined>;
    /**
     * Enable receiving packet through the specified interface
     */
    public readonly receivePacket!: pulumi.Output<number | undefined>;
    public readonly sendCfg!: pulumi.Output<outputs.InterfaceLoopbackIpRipSendCfg | undefined>;
    /**
     * Enable sending packets through the specified interface
     */
    public readonly sendPacket!: pulumi.Output<number | undefined>;
    public readonly splitHorizonCfg!: pulumi.Output<outputs.InterfaceLoopbackIpRipSplitHorizonCfg | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a InterfaceLoopbackIpRip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceLoopbackIpRipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceLoopbackIpRipArgs | InterfaceLoopbackIpRipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceLoopbackIpRipState | undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["receiveCfg"] = state ? state.receiveCfg : undefined;
            resourceInputs["receivePacket"] = state ? state.receivePacket : undefined;
            resourceInputs["sendCfg"] = state ? state.sendCfg : undefined;
            resourceInputs["sendPacket"] = state ? state.sendPacket : undefined;
            resourceInputs["splitHorizonCfg"] = state ? state.splitHorizonCfg : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as InterfaceLoopbackIpRipArgs | undefined;
            if ((!args || args.ifnum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifnum'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["receiveCfg"] = args ? args.receiveCfg : undefined;
            resourceInputs["receivePacket"] = args ? args.receivePacket : undefined;
            resourceInputs["sendCfg"] = args ? args.sendCfg : undefined;
            resourceInputs["sendPacket"] = args ? args.sendPacket : undefined;
            resourceInputs["splitHorizonCfg"] = args ? args.splitHorizonCfg : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceLoopbackIpRip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceLoopbackIpRip resources.
 */
export interface InterfaceLoopbackIpRipState {
    authentication?: pulumi.Input<inputs.InterfaceLoopbackIpRipAuthentication>;
    /**
     * Ifnum
     */
    ifnum?: pulumi.Input<string>;
    receiveCfg?: pulumi.Input<inputs.InterfaceLoopbackIpRipReceiveCfg>;
    /**
     * Enable receiving packet through the specified interface
     */
    receivePacket?: pulumi.Input<number>;
    sendCfg?: pulumi.Input<inputs.InterfaceLoopbackIpRipSendCfg>;
    /**
     * Enable sending packets through the specified interface
     */
    sendPacket?: pulumi.Input<number>;
    splitHorizonCfg?: pulumi.Input<inputs.InterfaceLoopbackIpRipSplitHorizonCfg>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceLoopbackIpRip resource.
 */
export interface InterfaceLoopbackIpRipArgs {
    authentication?: pulumi.Input<inputs.InterfaceLoopbackIpRipAuthentication>;
    /**
     * Ifnum
     */
    ifnum: pulumi.Input<string>;
    receiveCfg?: pulumi.Input<inputs.InterfaceLoopbackIpRipReceiveCfg>;
    /**
     * Enable receiving packet through the specified interface
     */
    receivePacket?: pulumi.Input<number>;
    sendCfg?: pulumi.Input<inputs.InterfaceLoopbackIpRipSendCfg>;
    /**
     * Enable sending packets through the specified interface
     */
    sendPacket?: pulumi.Input<number>;
    splitHorizonCfg?: pulumi.Input<inputs.InterfaceLoopbackIpRipSplitHorizonCfg>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
