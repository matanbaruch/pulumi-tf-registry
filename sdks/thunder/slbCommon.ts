// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbCommon extends pulumi.CustomResource {
    /**
     * Get an existing SlbCommon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbCommonState, opts?: pulumi.CustomResourceOptions): SlbCommon {
        return new SlbCommon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbCommon:SlbCommon';

    /**
     * Returns true if the given object is an instance of SlbCommon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbCommon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbCommon.__pulumiType;
    }

    /**
     * aFleX table entry aging interval in second
     */
    public readonly aflexTableEntryAgingInterval!: pulumi.Output<number | undefined>;
    public readonly aflexTableEntrySync!: pulumi.Output<outputs.SlbCommonAflexTableEntrySync | undefined>;
    /**
     * Graceful shutdown after disable server/port and/or virtual server/port
     */
    public readonly afterDisable!: pulumi.Output<number | undefined>;
    /**
     * Use source NAT gateway for L3 traffic for gateway mode
     */
    public readonly allowInGatewayMode!: pulumi.Output<number | undefined>;
    /**
     * Custom response code
     */
    public readonly attackRespCode!: pulumi.Output<number | undefined>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    public readonly autoNatNoIpRefresh!: pulumi.Output<string | undefined>;
    /**
     * Auto Translate Port range
     */
    public readonly autoTranslatePort!: pulumi.Output<number | undefined>;
    /**
     * Set buffer threshold
     */
    public readonly buffThresh!: pulumi.Output<number | undefined>;
    /**
     * Set hardware buffer threshold
     */
    public readonly buffThreshHwBuff!: pulumi.Output<number | undefined>;
    /**
     * Relieve threshold
     */
    public readonly buffThreshRelieveThresh!: pulumi.Output<number | undefined>;
    /**
     * Set high water mark of system buffer
     */
    public readonly buffThreshSysBuffHigh!: pulumi.Output<number | undefined>;
    /**
     * Set low water mark of system buffer
     */
    public readonly buffThreshSysBuffLow!: pulumi.Output<number | undefined>;
    /**
     * Cache expiration time, default is 1 minute
     */
    public readonly cacheExpireTime!: pulumi.Output<number | undefined>;
    /**
     * Set global cancel stream loop limit (cancel stream loop limit, default is 5)
     */
    public readonly cancelStreamLoopLimit!: pulumi.Output<number | undefined>;
    public readonly certPinning!: pulumi.Output<outputs.SlbCommonCertPinning | undefined>;
    /**
     * Clientside IP address
     */
    public readonly clientsideIp!: pulumi.Output<string | undefined>;
    /**
     * Clientside IPv6 address
     */
    public readonly clientsideIpv6!: pulumi.Output<string | undefined>;
    /**
     * Set compression block size (Compression block size in bytes)
     */
    public readonly compressBlockSize!: pulumi.Output<number | undefined>;
    public readonly connRateLimit!: pulumi.Output<outputs.SlbCommonConnRateLimit | undefined>;
    /**
     * Block message
     */
    public readonly customMessage!: pulumi.Output<string | undefined>;
    /**
     * Specify the custom webpage name
     */
    public readonly customPage!: pulumi.Output<string | undefined>;
    /**
     * Provide custom signal names
     */
    public readonly customSignalClist!: pulumi.Output<string | undefined>;
    /**
     * Set packet count threshold for DDOS, default is 100
     */
    public readonly ddosPktCountThresh!: pulumi.Output<number | undefined>;
    /**
     * Set data packet size threshold for DDOS, default is 64 bytes
     */
    public readonly ddosPktSizeThresh!: pulumi.Output<number | undefined>;
    public readonly ddosProtection!: pulumi.Output<outputs.SlbCommonDdosProtection | undefined>;
    /**
     * Disable adaptive resource check based on buffer usage
     */
    public readonly disableAdaptiveResourceCheck!: pulumi.Output<number | undefined>;
    /**
     * Disable Persist Scoring
     */
    public readonly disablePersistScoring!: pulumi.Output<number | undefined>;
    /**
     * Disable masking of ports for CPU hashing
     */
    public readonly disablePortMasking!: pulumi.Output<number | undefined>;
    /**
     * Disable auto reselection of server
     */
    public readonly disableServerAutoReselect!: pulumi.Output<number | undefined>;
    /**
     * Set DNS cache entry age, default is 300 seconds (1-1000000 seconds, default is 300 seconds)
     */
    public readonly dnsCacheAge!: pulumi.Output<number | undefined>;
    /**
     * Set DNS cache entry age minimum threshold, default is 0 seconds (1-1000000 seconds, default is 0 seconds)
     */
    public readonly dnsCacheAgeMinThreshold!: pulumi.Output<number | undefined>;
    /**
     * Set DNS cache entry weight, default is 1
     */
    public readonly dnsCacheAgingWeight!: pulumi.Output<number | undefined>;
    /**
     * Enable DNS cache
     */
    public readonly dnsCacheEnable!: pulumi.Output<number | undefined>;
    /**
     * Set DNS cache entry size, default is 256 bytes (1-4096 bytes, default is 256 bytes)
     */
    public readonly dnsCacheEntrySize!: pulumi.Output<number | undefined>;
    /**
     * Enable DNS cache HA sync
     */
    public readonly dnsCacheSync!: pulumi.Output<number | undefined>;
    /**
     * Only sync DNS cache with smaller size (1-4096 bytes, default is 256 bytes)
     */
    public readonly dnsCacheSyncEntrySize!: pulumi.Output<number | undefined>;
    /**
     * Only sync DNS cache with longer TTL (0-10000000 seconds, default is 0 second)
     */
    public readonly dnsCacheSyncTtlThreshold!: pulumi.Output<number | undefined>;
    /**
     * Enable DNS cache response ttl adjustment
     */
    public readonly dnsCacheTtlAdjustmentEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable DNS negative cache
     */
    public readonly dnsNegativeCacheEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable persistent DNS cache
     */
    public readonly dnsPersistentCacheEnable!: pulumi.Output<number | undefined>;
    /**
     * Only save DNS cache with larger hit count (0-10000000, default is 0)
     */
    public readonly dnsPersistentCacheHitThreshold!: pulumi.Output<number | undefined>;
    /**
     * Only save DNS cache with longer TTL (0-10000000 seconds, default is 0 second)
     */
    public readonly dnsPersistentCacheTtlThreshold!: pulumi.Output<number | undefined>;
    public readonly dnsResponseRateLimiting!: pulumi.Output<outputs.SlbCommonDnsResponseRateLimiting | undefined>;
    /**
     * Enable DNS VIP stateless mode
     */
    public readonly dnsVipStateless!: pulumi.Output<number | undefined>;
    /**
     * Drop ICMP to VIP when VIP down
     */
    public readonly dropIcmpToVipWhenVipDown!: pulumi.Output<number | undefined>;
    /**
     * Enable dsr-health-check (direct server return health check)
     */
    public readonly dsrHealthCheckEnable!: pulumi.Output<number | undefined>;
    /**
     * 'system-default': Use system default ecmp hashing algorithm; 'connection-based': Use connection information for hashing;
     */
    public readonly ecmpHash!: pulumi.Output<string | undefined>;
    /**
     * Enable DDoS protection
     */
    public readonly enableDdos!: pulumi.Output<number | undefined>;
    /**
     * Enable Fast-Path Rerouting
     */
    public readonly enableFastPathRerouting!: pulumi.Output<number | undefined>;
    /**
     * Enable L7 request accounting
     */
    public readonly enableL7ReqAcct!: pulumi.Output<number | undefined>;
    /**
     * 'server': Graceful shutdown server/port only; 'virtual-server': Graceful shutdown virtual server/port only;
     */
    public readonly entity!: pulumi.Output<string | undefined>;
    /**
     * 'local': Maximum local rate; 'remote': Maximum remote rate; (Maximum rates)
     */
    public readonly excludeDestination!: pulumi.Output<string | undefined>;
    /**
     * Enable global slb extended statistics
     */
    public readonly extendedStats!: pulumi.Output<number | undefined>;
    /**
     * Disable fast path in SLB processing
     */
    public readonly fastPathDisable!: pulumi.Output<number | undefined>;
    /**
     * Enable gateway health check
     */
    public readonly gatewayHealthCheck!: pulumi.Output<number | undefined>;
    /**
     * 1-65535, in unit of seconds
     */
    public readonly gracefulShutdown!: pulumi.Output<number | undefined>;
    /**
     * Enable graceful shutdown
     */
    public readonly gracefulShutdownEnable!: pulumi.Output<number | undefined>;
    public readonly healthCheckToAllVip!: pulumi.Output<number | undefined>;
    /**
     * Honor the server reponse TTL
     */
    public readonly honorServerResponseTtl!: pulumi.Output<number | undefined>;
    /**
     * Enable Http Fast in SLB processing
     */
    public readonly httpFastEnable!: pulumi.Output<number | undefined>;
    /**
     * Use hardware compression
     */
    public readonly hwCompression!: pulumi.Output<number | undefined>;
    /**
     * Configure hardware SYN round robin (range 1-500000)
     */
    public readonly hwSynRr!: pulumi.Output<number | undefined>;
    /**
     * Specify the healthcheck interval, default is 5 seconds (Interval Value, in seconds (default 5))
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * IPv4 Octet Offset for Hash
     */
    public readonly ipv4Offset!: pulumi.Output<number | undefined>;
    /**
     * IPv6 Octet Valid Subnet Length for Hash
     */
    public readonly ipv6Subnet!: pulumi.Output<number | undefined>;
    /**
     * Disable L2/L3 trunk LB
     */
    public readonly l2l3TrunkLbDisable!: pulumi.Output<number | undefined>;
    /**
     * Log when rate exceed
     */
    public readonly logForResetUnknownConn!: pulumi.Output<number | undefined>;
    /**
     * Enable low latency mode
     */
    public readonly lowLatency!: pulumi.Output<number | undefined>;
    /**
     * Set per connection buffer threshold (Buffer value range 128-4096)
     */
    public readonly maxBuffQueuedPerConn!: pulumi.Output<number | undefined>;
    /**
     * Set maximum number of HTTP headers allowed
     */
    public readonly maxHttpHeaderCount!: pulumi.Output<number | undefined>;
    /**
     * Set maximum local rate
     */
    public readonly maxLocalRate!: pulumi.Output<number | undefined>;
    /**
     * Define maximum persistent cache (Maximum persistent cache entry)
     */
    public readonly maxPersistentCache!: pulumi.Output<number | undefined>;
    /**
     * Set maximum remote rate
     */
    public readonly maxRemoteRate!: pulumi.Output<number | undefined>;
    /**
     * Enable NG-WAF monitor mode
     */
    public readonly monitorModeEnable!: pulumi.Output<number | undefined>;
    /**
     * Configure maximum session life, default is 2 seconds (1-39 seconds, default is 2 seconds)
     */
    public readonly mslTime!: pulumi.Output<number | undefined>;
    /**
     * Set MSS table (128-750, default is 536)
     */
    public readonly mssTable!: pulumi.Output<number | undefined>;
    /**
     * Specific NGWAF CPU
     */
    public readonly multiCpu!: pulumi.Output<number | undefined>;
    /**
     * HW assisted N5 SSL module with TLS 1.3 and TLS 1.2 support using OpenSSL 1.1.1
     */
    public readonly n5New!: pulumi.Output<number | undefined>;
    /**
     * HW assisted N5 SSL module with TLS 1.2 support using OpenSSL 0.9.7
     */
    public readonly n5Old!: pulumi.Output<number | undefined>;
    /**
     * IPv4 address
     */
    public readonly ngwafProxyIpv4!: pulumi.Output<string | undefined>;
    /**
     * IPv6 address
     */
    public readonly ngwafProxyIpv6!: pulumi.Output<string | undefined>;
    /**
     * Port
     */
    public readonly ngwafProxyPort!: pulumi.Output<number | undefined>;
    /**
     * Don't automatically mark vport up when aFleX is bound
     */
    public readonly noAutoUpOnAflex!: pulumi.Output<number | undefined>;
    /**
     * Enable odd even nat pool allocation in dual blade systems
     */
    public readonly oddEvenNatEnable!: pulumi.Output<number | undefined>;
    /**
     * One Server Conn Health Check Rate
     */
    public readonly oneServerConnHmRate!: pulumi.Output<number | undefined>;
    /**
     * Enable override port in DSR health check mode
     */
    public readonly overridePort!: pulumi.Output<number | undefined>;
    /**
     * Set global pbslb entry age (minute)
     */
    public readonly pbslbEntryAge!: pulumi.Output<number | undefined>;
    /**
     * Apply global limit id to overflow pbslb entry
     */
    public readonly pbslbOverflowGlid!: pulumi.Output<string | undefined>;
    /**
     * Percentage of default session count to use for per thread session table size
     */
    public readonly perThrPercent!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable ping sweep detection; 'disable': Disable ping sweep detection(default);
     */
    public readonly pingSweepDetection!: pulumi.Output<string | undefined>;
    public readonly pktRateForResetUnknownConn!: pulumi.Output<number | undefined>;
    /**
     * Enable the Player id check
     */
    public readonly playerIdCheckEnable!: pulumi.Output<number | undefined>;
    /**
     * Serverside port number for SNI transmission
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable port scan detection; 'disable': Disable port scan detection(default);
     */
    public readonly portScanDetection!: pulumi.Output<string | undefined>;
    /**
     * Enable NG-WAF pre-processing
     */
    public readonly preProcessEnable!: pulumi.Output<number | undefined>;
    /**
     * HW assisted QAT SSL module
     */
    public readonly qat!: pulumi.Output<number | undefined>;
    public readonly quic!: pulumi.Output<outputs.SlbCommonQuic | undefined>;
    /**
     * auto translate port range
     */
    public readonly range!: pulumi.Output<number | undefined>;
    /**
     * port range end
     */
    public readonly rangeEnd!: pulumi.Output<number | undefined>;
    /**
     * port range start
     */
    public readonly rangeStart!: pulumi.Output<number | undefined>;
    /**
     * Configure rate limit logging
     */
    public readonly rateLimitLogging!: pulumi.Output<number | undefined>;
    /**
     * 'honor-packet-ttl': Honor the lowest TTL among NS records in the server response; 'honor-age-config': Honor the ttl/age
     * settings based on acos dns cache configuration;
     */
    public readonly recursiveNsCache!: pulumi.Output<string | undefined>;
    /**
     * Send reset if session in delete queue receives a SYN packet
     */
    public readonly resetStaleSession!: pulumi.Output<number | undefined>;
    /**
     * Enable client port service port conflicts
     */
    public readonly resolvePortConflict!: pulumi.Output<number | undefined>;
    /**
     * 'single-answer': Only cache DNS response with single answer; 'round-robin': Round robin;
     */
    public readonly responseType!: pulumi.Output<string | undefined>;
    /**
     * Enable SLB scale out
     */
    public readonly scaleOut!: pulumi.Output<number | undefined>;
    /**
     * Set SLB scaleout traffic-map
     */
    public readonly scaleOutTrafficMap!: pulumi.Output<number | undefined>;
    /**
     * Serverside IP address
     */
    public readonly serversideIp!: pulumi.Output<string | undefined>;
    /**
     * Serverside IPv6 address
     */
    public readonly serversideIpv6!: pulumi.Output<string | undefined>;
    /**
     * 'allow-same': Allow the binding service-group on no-dest-nat virtual ports; 'enforce-different': Enforce that the same
     * service-group can not be bound on different no-dest-nat virtual ports;
     */
    public readonly serviceGroupOnNoDestNatVports!: pulumi.Output<string | undefined>;
    /**
     * Enable show slb server legacy command
     */
    public readonly showSlbServerLegacyCmd!: pulumi.Output<number | undefined>;
    /**
     * Enable show slb service-group legacy command
     */
    public readonly showSlbServiceGroupLegacyCmd!: pulumi.Output<number | undefined>;
    /**
     * Enable show slb virtual-server legacy command
     */
    public readonly showSlbVirtualServerLegacyCmd!: pulumi.Output<number | undefined>;
    /**
     * Use source NAT gateway for L3 traffic for transparent mode
     */
    public readonly snatGwyForL3!: pulumi.Output<number | undefined>;
    /**
     * Enable source NAT traffic against VIP
     */
    public readonly snatOnVip!: pulumi.Output<number | undefined>;
    public readonly snatPreserve!: pulumi.Output<outputs.SlbCommonSnatPreserve | undefined>;
    /**
     * Software
     */
    public readonly software!: pulumi.Output<number | undefined>;
    /**
     * Software TLS1.3
     */
    public readonly softwareTls13!: pulumi.Output<number | undefined>;
    /**
     * Software TLS1.3 with CPU Offload Support
     */
    public readonly softwareTls13Offload!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB sorting of resource names
     */
    public readonly sortRes!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL module usage calculations for QAT
     */
    public readonly sslModuleUsageEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable delay transmission for N5-new
     */
    public readonly sslN5DelayTxEnable!: pulumi.Output<number | undefined>;
    public readonly sslRatelimitCfg!: pulumi.Output<outputs.SlbCommonSslRatelimitCfg | undefined>;
    /**
     * SSLI asynchronized connection max number, default is 2000 (set to 0 for unlimited size)
     */
    public readonly ssliCertNotReadyInspectLimit!: pulumi.Output<number | undefined>;
    /**
     * SSLI asynchronized connection timeout, default is 10 seconds (seconds, set to 0 for never timeout)
     */
    public readonly ssliCertNotReadyInspectTimeout!: pulumi.Output<number | undefined>;
    /**
     * Terminate the SSLi sessions silently without sending RST/FIN packet
     */
    public readonly ssliSilentTerminationEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable SSLi SNI hash table
     */
    public readonly ssliSniHashEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable stateless service groups to be assigned to multiple L2/L3 DSR VIPs
     */
    public readonly statelessSgMultiBinding!: pulumi.Output<number | undefined>;
    /**
     * Disable global slb data statistics
     */
    public readonly statsDataDisable!: pulumi.Output<number | undefined>;
    /**
     * Substitute Source MAC Address to that of the outgoing interface
     */
    public readonly substituteSourceMac!: pulumi.Output<number | undefined>;
    /**
     * Specify the healthcheck timeout value, default is 15 seconds (Timeout Value, in seconds (default 15))
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * 'vport': traffic-map per vport; 'global': global traffic-map;
     */
    public readonly trafficMapType!: pulumi.Output<string | undefined>;
    /**
     * Only cache DNS response with longer TTL
     */
    public readonly ttlThreshold!: pulumi.Output<number | undefined>;
    /**
     * Use default session count
     */
    public readonly useDefaultSessCount!: pulumi.Output<number | undefined>;
    /**
     * NG-WAF connects to Cloud through proxy server
     */
    public readonly useHttpsProxy!: pulumi.Output<number | undefined>;
    /**
     * Use management port to connect
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * Use MSS based on internal table for SLB processing
     */
    public readonly useMssTab!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Configure periodic showtech vport paging global limit
     */
    public readonly vportGlobal!: pulumi.Output<number | undefined>;
    /**
     * Configure periodic showtech vport paging l3v limit
     */
    public readonly vportL3v!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbCommon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbCommonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbCommonArgs | SlbCommonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbCommonState | undefined;
            resourceInputs["aflexTableEntryAgingInterval"] = state ? state.aflexTableEntryAgingInterval : undefined;
            resourceInputs["aflexTableEntrySync"] = state ? state.aflexTableEntrySync : undefined;
            resourceInputs["afterDisable"] = state ? state.afterDisable : undefined;
            resourceInputs["allowInGatewayMode"] = state ? state.allowInGatewayMode : undefined;
            resourceInputs["attackRespCode"] = state ? state.attackRespCode : undefined;
            resourceInputs["autoNatNoIpRefresh"] = state ? state.autoNatNoIpRefresh : undefined;
            resourceInputs["autoTranslatePort"] = state ? state.autoTranslatePort : undefined;
            resourceInputs["buffThresh"] = state ? state.buffThresh : undefined;
            resourceInputs["buffThreshHwBuff"] = state ? state.buffThreshHwBuff : undefined;
            resourceInputs["buffThreshRelieveThresh"] = state ? state.buffThreshRelieveThresh : undefined;
            resourceInputs["buffThreshSysBuffHigh"] = state ? state.buffThreshSysBuffHigh : undefined;
            resourceInputs["buffThreshSysBuffLow"] = state ? state.buffThreshSysBuffLow : undefined;
            resourceInputs["cacheExpireTime"] = state ? state.cacheExpireTime : undefined;
            resourceInputs["cancelStreamLoopLimit"] = state ? state.cancelStreamLoopLimit : undefined;
            resourceInputs["certPinning"] = state ? state.certPinning : undefined;
            resourceInputs["clientsideIp"] = state ? state.clientsideIp : undefined;
            resourceInputs["clientsideIpv6"] = state ? state.clientsideIpv6 : undefined;
            resourceInputs["compressBlockSize"] = state ? state.compressBlockSize : undefined;
            resourceInputs["connRateLimit"] = state ? state.connRateLimit : undefined;
            resourceInputs["customMessage"] = state ? state.customMessage : undefined;
            resourceInputs["customPage"] = state ? state.customPage : undefined;
            resourceInputs["customSignalClist"] = state ? state.customSignalClist : undefined;
            resourceInputs["ddosPktCountThresh"] = state ? state.ddosPktCountThresh : undefined;
            resourceInputs["ddosPktSizeThresh"] = state ? state.ddosPktSizeThresh : undefined;
            resourceInputs["ddosProtection"] = state ? state.ddosProtection : undefined;
            resourceInputs["disableAdaptiveResourceCheck"] = state ? state.disableAdaptiveResourceCheck : undefined;
            resourceInputs["disablePersistScoring"] = state ? state.disablePersistScoring : undefined;
            resourceInputs["disablePortMasking"] = state ? state.disablePortMasking : undefined;
            resourceInputs["disableServerAutoReselect"] = state ? state.disableServerAutoReselect : undefined;
            resourceInputs["dnsCacheAge"] = state ? state.dnsCacheAge : undefined;
            resourceInputs["dnsCacheAgeMinThreshold"] = state ? state.dnsCacheAgeMinThreshold : undefined;
            resourceInputs["dnsCacheAgingWeight"] = state ? state.dnsCacheAgingWeight : undefined;
            resourceInputs["dnsCacheEnable"] = state ? state.dnsCacheEnable : undefined;
            resourceInputs["dnsCacheEntrySize"] = state ? state.dnsCacheEntrySize : undefined;
            resourceInputs["dnsCacheSync"] = state ? state.dnsCacheSync : undefined;
            resourceInputs["dnsCacheSyncEntrySize"] = state ? state.dnsCacheSyncEntrySize : undefined;
            resourceInputs["dnsCacheSyncTtlThreshold"] = state ? state.dnsCacheSyncTtlThreshold : undefined;
            resourceInputs["dnsCacheTtlAdjustmentEnable"] = state ? state.dnsCacheTtlAdjustmentEnable : undefined;
            resourceInputs["dnsNegativeCacheEnable"] = state ? state.dnsNegativeCacheEnable : undefined;
            resourceInputs["dnsPersistentCacheEnable"] = state ? state.dnsPersistentCacheEnable : undefined;
            resourceInputs["dnsPersistentCacheHitThreshold"] = state ? state.dnsPersistentCacheHitThreshold : undefined;
            resourceInputs["dnsPersistentCacheTtlThreshold"] = state ? state.dnsPersistentCacheTtlThreshold : undefined;
            resourceInputs["dnsResponseRateLimiting"] = state ? state.dnsResponseRateLimiting : undefined;
            resourceInputs["dnsVipStateless"] = state ? state.dnsVipStateless : undefined;
            resourceInputs["dropIcmpToVipWhenVipDown"] = state ? state.dropIcmpToVipWhenVipDown : undefined;
            resourceInputs["dsrHealthCheckEnable"] = state ? state.dsrHealthCheckEnable : undefined;
            resourceInputs["ecmpHash"] = state ? state.ecmpHash : undefined;
            resourceInputs["enableDdos"] = state ? state.enableDdos : undefined;
            resourceInputs["enableFastPathRerouting"] = state ? state.enableFastPathRerouting : undefined;
            resourceInputs["enableL7ReqAcct"] = state ? state.enableL7ReqAcct : undefined;
            resourceInputs["entity"] = state ? state.entity : undefined;
            resourceInputs["excludeDestination"] = state ? state.excludeDestination : undefined;
            resourceInputs["extendedStats"] = state ? state.extendedStats : undefined;
            resourceInputs["fastPathDisable"] = state ? state.fastPathDisable : undefined;
            resourceInputs["gatewayHealthCheck"] = state ? state.gatewayHealthCheck : undefined;
            resourceInputs["gracefulShutdown"] = state ? state.gracefulShutdown : undefined;
            resourceInputs["gracefulShutdownEnable"] = state ? state.gracefulShutdownEnable : undefined;
            resourceInputs["healthCheckToAllVip"] = state ? state.healthCheckToAllVip : undefined;
            resourceInputs["honorServerResponseTtl"] = state ? state.honorServerResponseTtl : undefined;
            resourceInputs["httpFastEnable"] = state ? state.httpFastEnable : undefined;
            resourceInputs["hwCompression"] = state ? state.hwCompression : undefined;
            resourceInputs["hwSynRr"] = state ? state.hwSynRr : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ipv4Offset"] = state ? state.ipv4Offset : undefined;
            resourceInputs["ipv6Subnet"] = state ? state.ipv6Subnet : undefined;
            resourceInputs["l2l3TrunkLbDisable"] = state ? state.l2l3TrunkLbDisable : undefined;
            resourceInputs["logForResetUnknownConn"] = state ? state.logForResetUnknownConn : undefined;
            resourceInputs["lowLatency"] = state ? state.lowLatency : undefined;
            resourceInputs["maxBuffQueuedPerConn"] = state ? state.maxBuffQueuedPerConn : undefined;
            resourceInputs["maxHttpHeaderCount"] = state ? state.maxHttpHeaderCount : undefined;
            resourceInputs["maxLocalRate"] = state ? state.maxLocalRate : undefined;
            resourceInputs["maxPersistentCache"] = state ? state.maxPersistentCache : undefined;
            resourceInputs["maxRemoteRate"] = state ? state.maxRemoteRate : undefined;
            resourceInputs["monitorModeEnable"] = state ? state.monitorModeEnable : undefined;
            resourceInputs["mslTime"] = state ? state.mslTime : undefined;
            resourceInputs["mssTable"] = state ? state.mssTable : undefined;
            resourceInputs["multiCpu"] = state ? state.multiCpu : undefined;
            resourceInputs["n5New"] = state ? state.n5New : undefined;
            resourceInputs["n5Old"] = state ? state.n5Old : undefined;
            resourceInputs["ngwafProxyIpv4"] = state ? state.ngwafProxyIpv4 : undefined;
            resourceInputs["ngwafProxyIpv6"] = state ? state.ngwafProxyIpv6 : undefined;
            resourceInputs["ngwafProxyPort"] = state ? state.ngwafProxyPort : undefined;
            resourceInputs["noAutoUpOnAflex"] = state ? state.noAutoUpOnAflex : undefined;
            resourceInputs["oddEvenNatEnable"] = state ? state.oddEvenNatEnable : undefined;
            resourceInputs["oneServerConnHmRate"] = state ? state.oneServerConnHmRate : undefined;
            resourceInputs["overridePort"] = state ? state.overridePort : undefined;
            resourceInputs["pbslbEntryAge"] = state ? state.pbslbEntryAge : undefined;
            resourceInputs["pbslbOverflowGlid"] = state ? state.pbslbOverflowGlid : undefined;
            resourceInputs["perThrPercent"] = state ? state.perThrPercent : undefined;
            resourceInputs["pingSweepDetection"] = state ? state.pingSweepDetection : undefined;
            resourceInputs["pktRateForResetUnknownConn"] = state ? state.pktRateForResetUnknownConn : undefined;
            resourceInputs["playerIdCheckEnable"] = state ? state.playerIdCheckEnable : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portScanDetection"] = state ? state.portScanDetection : undefined;
            resourceInputs["preProcessEnable"] = state ? state.preProcessEnable : undefined;
            resourceInputs["qat"] = state ? state.qat : undefined;
            resourceInputs["quic"] = state ? state.quic : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["rangeEnd"] = state ? state.rangeEnd : undefined;
            resourceInputs["rangeStart"] = state ? state.rangeStart : undefined;
            resourceInputs["rateLimitLogging"] = state ? state.rateLimitLogging : undefined;
            resourceInputs["recursiveNsCache"] = state ? state.recursiveNsCache : undefined;
            resourceInputs["resetStaleSession"] = state ? state.resetStaleSession : undefined;
            resourceInputs["resolvePortConflict"] = state ? state.resolvePortConflict : undefined;
            resourceInputs["responseType"] = state ? state.responseType : undefined;
            resourceInputs["scaleOut"] = state ? state.scaleOut : undefined;
            resourceInputs["scaleOutTrafficMap"] = state ? state.scaleOutTrafficMap : undefined;
            resourceInputs["serversideIp"] = state ? state.serversideIp : undefined;
            resourceInputs["serversideIpv6"] = state ? state.serversideIpv6 : undefined;
            resourceInputs["serviceGroupOnNoDestNatVports"] = state ? state.serviceGroupOnNoDestNatVports : undefined;
            resourceInputs["showSlbServerLegacyCmd"] = state ? state.showSlbServerLegacyCmd : undefined;
            resourceInputs["showSlbServiceGroupLegacyCmd"] = state ? state.showSlbServiceGroupLegacyCmd : undefined;
            resourceInputs["showSlbVirtualServerLegacyCmd"] = state ? state.showSlbVirtualServerLegacyCmd : undefined;
            resourceInputs["snatGwyForL3"] = state ? state.snatGwyForL3 : undefined;
            resourceInputs["snatOnVip"] = state ? state.snatOnVip : undefined;
            resourceInputs["snatPreserve"] = state ? state.snatPreserve : undefined;
            resourceInputs["software"] = state ? state.software : undefined;
            resourceInputs["softwareTls13"] = state ? state.softwareTls13 : undefined;
            resourceInputs["softwareTls13Offload"] = state ? state.softwareTls13Offload : undefined;
            resourceInputs["sortRes"] = state ? state.sortRes : undefined;
            resourceInputs["sslModuleUsageEnable"] = state ? state.sslModuleUsageEnable : undefined;
            resourceInputs["sslN5DelayTxEnable"] = state ? state.sslN5DelayTxEnable : undefined;
            resourceInputs["sslRatelimitCfg"] = state ? state.sslRatelimitCfg : undefined;
            resourceInputs["ssliCertNotReadyInspectLimit"] = state ? state.ssliCertNotReadyInspectLimit : undefined;
            resourceInputs["ssliCertNotReadyInspectTimeout"] = state ? state.ssliCertNotReadyInspectTimeout : undefined;
            resourceInputs["ssliSilentTerminationEnable"] = state ? state.ssliSilentTerminationEnable : undefined;
            resourceInputs["ssliSniHashEnable"] = state ? state.ssliSniHashEnable : undefined;
            resourceInputs["statelessSgMultiBinding"] = state ? state.statelessSgMultiBinding : undefined;
            resourceInputs["statsDataDisable"] = state ? state.statsDataDisable : undefined;
            resourceInputs["substituteSourceMac"] = state ? state.substituteSourceMac : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["trafficMapType"] = state ? state.trafficMapType : undefined;
            resourceInputs["ttlThreshold"] = state ? state.ttlThreshold : undefined;
            resourceInputs["useDefaultSessCount"] = state ? state.useDefaultSessCount : undefined;
            resourceInputs["useHttpsProxy"] = state ? state.useHttpsProxy : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["useMssTab"] = state ? state.useMssTab : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vportGlobal"] = state ? state.vportGlobal : undefined;
            resourceInputs["vportL3v"] = state ? state.vportL3v : undefined;
        } else {
            const args = argsOrState as SlbCommonArgs | undefined;
            resourceInputs["aflexTableEntryAgingInterval"] = args ? args.aflexTableEntryAgingInterval : undefined;
            resourceInputs["aflexTableEntrySync"] = args ? args.aflexTableEntrySync : undefined;
            resourceInputs["afterDisable"] = args ? args.afterDisable : undefined;
            resourceInputs["allowInGatewayMode"] = args ? args.allowInGatewayMode : undefined;
            resourceInputs["attackRespCode"] = args ? args.attackRespCode : undefined;
            resourceInputs["autoNatNoIpRefresh"] = args ? args.autoNatNoIpRefresh : undefined;
            resourceInputs["autoTranslatePort"] = args ? args.autoTranslatePort : undefined;
            resourceInputs["buffThresh"] = args ? args.buffThresh : undefined;
            resourceInputs["buffThreshHwBuff"] = args ? args.buffThreshHwBuff : undefined;
            resourceInputs["buffThreshRelieveThresh"] = args ? args.buffThreshRelieveThresh : undefined;
            resourceInputs["buffThreshSysBuffHigh"] = args ? args.buffThreshSysBuffHigh : undefined;
            resourceInputs["buffThreshSysBuffLow"] = args ? args.buffThreshSysBuffLow : undefined;
            resourceInputs["cacheExpireTime"] = args ? args.cacheExpireTime : undefined;
            resourceInputs["cancelStreamLoopLimit"] = args ? args.cancelStreamLoopLimit : undefined;
            resourceInputs["certPinning"] = args ? args.certPinning : undefined;
            resourceInputs["clientsideIp"] = args ? args.clientsideIp : undefined;
            resourceInputs["clientsideIpv6"] = args ? args.clientsideIpv6 : undefined;
            resourceInputs["compressBlockSize"] = args ? args.compressBlockSize : undefined;
            resourceInputs["connRateLimit"] = args ? args.connRateLimit : undefined;
            resourceInputs["customMessage"] = args ? args.customMessage : undefined;
            resourceInputs["customPage"] = args ? args.customPage : undefined;
            resourceInputs["customSignalClist"] = args ? args.customSignalClist : undefined;
            resourceInputs["ddosPktCountThresh"] = args ? args.ddosPktCountThresh : undefined;
            resourceInputs["ddosPktSizeThresh"] = args ? args.ddosPktSizeThresh : undefined;
            resourceInputs["ddosProtection"] = args ? args.ddosProtection : undefined;
            resourceInputs["disableAdaptiveResourceCheck"] = args ? args.disableAdaptiveResourceCheck : undefined;
            resourceInputs["disablePersistScoring"] = args ? args.disablePersistScoring : undefined;
            resourceInputs["disablePortMasking"] = args ? args.disablePortMasking : undefined;
            resourceInputs["disableServerAutoReselect"] = args ? args.disableServerAutoReselect : undefined;
            resourceInputs["dnsCacheAge"] = args ? args.dnsCacheAge : undefined;
            resourceInputs["dnsCacheAgeMinThreshold"] = args ? args.dnsCacheAgeMinThreshold : undefined;
            resourceInputs["dnsCacheAgingWeight"] = args ? args.dnsCacheAgingWeight : undefined;
            resourceInputs["dnsCacheEnable"] = args ? args.dnsCacheEnable : undefined;
            resourceInputs["dnsCacheEntrySize"] = args ? args.dnsCacheEntrySize : undefined;
            resourceInputs["dnsCacheSync"] = args ? args.dnsCacheSync : undefined;
            resourceInputs["dnsCacheSyncEntrySize"] = args ? args.dnsCacheSyncEntrySize : undefined;
            resourceInputs["dnsCacheSyncTtlThreshold"] = args ? args.dnsCacheSyncTtlThreshold : undefined;
            resourceInputs["dnsCacheTtlAdjustmentEnable"] = args ? args.dnsCacheTtlAdjustmentEnable : undefined;
            resourceInputs["dnsNegativeCacheEnable"] = args ? args.dnsNegativeCacheEnable : undefined;
            resourceInputs["dnsPersistentCacheEnable"] = args ? args.dnsPersistentCacheEnable : undefined;
            resourceInputs["dnsPersistentCacheHitThreshold"] = args ? args.dnsPersistentCacheHitThreshold : undefined;
            resourceInputs["dnsPersistentCacheTtlThreshold"] = args ? args.dnsPersistentCacheTtlThreshold : undefined;
            resourceInputs["dnsResponseRateLimiting"] = args ? args.dnsResponseRateLimiting : undefined;
            resourceInputs["dnsVipStateless"] = args ? args.dnsVipStateless : undefined;
            resourceInputs["dropIcmpToVipWhenVipDown"] = args ? args.dropIcmpToVipWhenVipDown : undefined;
            resourceInputs["dsrHealthCheckEnable"] = args ? args.dsrHealthCheckEnable : undefined;
            resourceInputs["ecmpHash"] = args ? args.ecmpHash : undefined;
            resourceInputs["enableDdos"] = args ? args.enableDdos : undefined;
            resourceInputs["enableFastPathRerouting"] = args ? args.enableFastPathRerouting : undefined;
            resourceInputs["enableL7ReqAcct"] = args ? args.enableL7ReqAcct : undefined;
            resourceInputs["entity"] = args ? args.entity : undefined;
            resourceInputs["excludeDestination"] = args ? args.excludeDestination : undefined;
            resourceInputs["extendedStats"] = args ? args.extendedStats : undefined;
            resourceInputs["fastPathDisable"] = args ? args.fastPathDisable : undefined;
            resourceInputs["gatewayHealthCheck"] = args ? args.gatewayHealthCheck : undefined;
            resourceInputs["gracefulShutdown"] = args ? args.gracefulShutdown : undefined;
            resourceInputs["gracefulShutdownEnable"] = args ? args.gracefulShutdownEnable : undefined;
            resourceInputs["healthCheckToAllVip"] = args ? args.healthCheckToAllVip : undefined;
            resourceInputs["honorServerResponseTtl"] = args ? args.honorServerResponseTtl : undefined;
            resourceInputs["httpFastEnable"] = args ? args.httpFastEnable : undefined;
            resourceInputs["hwCompression"] = args ? args.hwCompression : undefined;
            resourceInputs["hwSynRr"] = args ? args.hwSynRr : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ipv4Offset"] = args ? args.ipv4Offset : undefined;
            resourceInputs["ipv6Subnet"] = args ? args.ipv6Subnet : undefined;
            resourceInputs["l2l3TrunkLbDisable"] = args ? args.l2l3TrunkLbDisable : undefined;
            resourceInputs["logForResetUnknownConn"] = args ? args.logForResetUnknownConn : undefined;
            resourceInputs["lowLatency"] = args ? args.lowLatency : undefined;
            resourceInputs["maxBuffQueuedPerConn"] = args ? args.maxBuffQueuedPerConn : undefined;
            resourceInputs["maxHttpHeaderCount"] = args ? args.maxHttpHeaderCount : undefined;
            resourceInputs["maxLocalRate"] = args ? args.maxLocalRate : undefined;
            resourceInputs["maxPersistentCache"] = args ? args.maxPersistentCache : undefined;
            resourceInputs["maxRemoteRate"] = args ? args.maxRemoteRate : undefined;
            resourceInputs["monitorModeEnable"] = args ? args.monitorModeEnable : undefined;
            resourceInputs["mslTime"] = args ? args.mslTime : undefined;
            resourceInputs["mssTable"] = args ? args.mssTable : undefined;
            resourceInputs["multiCpu"] = args ? args.multiCpu : undefined;
            resourceInputs["n5New"] = args ? args.n5New : undefined;
            resourceInputs["n5Old"] = args ? args.n5Old : undefined;
            resourceInputs["ngwafProxyIpv4"] = args ? args.ngwafProxyIpv4 : undefined;
            resourceInputs["ngwafProxyIpv6"] = args ? args.ngwafProxyIpv6 : undefined;
            resourceInputs["ngwafProxyPort"] = args ? args.ngwafProxyPort : undefined;
            resourceInputs["noAutoUpOnAflex"] = args ? args.noAutoUpOnAflex : undefined;
            resourceInputs["oddEvenNatEnable"] = args ? args.oddEvenNatEnable : undefined;
            resourceInputs["oneServerConnHmRate"] = args ? args.oneServerConnHmRate : undefined;
            resourceInputs["overridePort"] = args ? args.overridePort : undefined;
            resourceInputs["pbslbEntryAge"] = args ? args.pbslbEntryAge : undefined;
            resourceInputs["pbslbOverflowGlid"] = args ? args.pbslbOverflowGlid : undefined;
            resourceInputs["perThrPercent"] = args ? args.perThrPercent : undefined;
            resourceInputs["pingSweepDetection"] = args ? args.pingSweepDetection : undefined;
            resourceInputs["pktRateForResetUnknownConn"] = args ? args.pktRateForResetUnknownConn : undefined;
            resourceInputs["playerIdCheckEnable"] = args ? args.playerIdCheckEnable : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["portScanDetection"] = args ? args.portScanDetection : undefined;
            resourceInputs["preProcessEnable"] = args ? args.preProcessEnable : undefined;
            resourceInputs["qat"] = args ? args.qat : undefined;
            resourceInputs["quic"] = args ? args.quic : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["rangeEnd"] = args ? args.rangeEnd : undefined;
            resourceInputs["rangeStart"] = args ? args.rangeStart : undefined;
            resourceInputs["rateLimitLogging"] = args ? args.rateLimitLogging : undefined;
            resourceInputs["recursiveNsCache"] = args ? args.recursiveNsCache : undefined;
            resourceInputs["resetStaleSession"] = args ? args.resetStaleSession : undefined;
            resourceInputs["resolvePortConflict"] = args ? args.resolvePortConflict : undefined;
            resourceInputs["responseType"] = args ? args.responseType : undefined;
            resourceInputs["scaleOut"] = args ? args.scaleOut : undefined;
            resourceInputs["scaleOutTrafficMap"] = args ? args.scaleOutTrafficMap : undefined;
            resourceInputs["serversideIp"] = args ? args.serversideIp : undefined;
            resourceInputs["serversideIpv6"] = args ? args.serversideIpv6 : undefined;
            resourceInputs["serviceGroupOnNoDestNatVports"] = args ? args.serviceGroupOnNoDestNatVports : undefined;
            resourceInputs["showSlbServerLegacyCmd"] = args ? args.showSlbServerLegacyCmd : undefined;
            resourceInputs["showSlbServiceGroupLegacyCmd"] = args ? args.showSlbServiceGroupLegacyCmd : undefined;
            resourceInputs["showSlbVirtualServerLegacyCmd"] = args ? args.showSlbVirtualServerLegacyCmd : undefined;
            resourceInputs["snatGwyForL3"] = args ? args.snatGwyForL3 : undefined;
            resourceInputs["snatOnVip"] = args ? args.snatOnVip : undefined;
            resourceInputs["snatPreserve"] = args ? args.snatPreserve : undefined;
            resourceInputs["software"] = args ? args.software : undefined;
            resourceInputs["softwareTls13"] = args ? args.softwareTls13 : undefined;
            resourceInputs["softwareTls13Offload"] = args ? args.softwareTls13Offload : undefined;
            resourceInputs["sortRes"] = args ? args.sortRes : undefined;
            resourceInputs["sslModuleUsageEnable"] = args ? args.sslModuleUsageEnable : undefined;
            resourceInputs["sslN5DelayTxEnable"] = args ? args.sslN5DelayTxEnable : undefined;
            resourceInputs["sslRatelimitCfg"] = args ? args.sslRatelimitCfg : undefined;
            resourceInputs["ssliCertNotReadyInspectLimit"] = args ? args.ssliCertNotReadyInspectLimit : undefined;
            resourceInputs["ssliCertNotReadyInspectTimeout"] = args ? args.ssliCertNotReadyInspectTimeout : undefined;
            resourceInputs["ssliSilentTerminationEnable"] = args ? args.ssliSilentTerminationEnable : undefined;
            resourceInputs["ssliSniHashEnable"] = args ? args.ssliSniHashEnable : undefined;
            resourceInputs["statelessSgMultiBinding"] = args ? args.statelessSgMultiBinding : undefined;
            resourceInputs["statsDataDisable"] = args ? args.statsDataDisable : undefined;
            resourceInputs["substituteSourceMac"] = args ? args.substituteSourceMac : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["trafficMapType"] = args ? args.trafficMapType : undefined;
            resourceInputs["ttlThreshold"] = args ? args.ttlThreshold : undefined;
            resourceInputs["useDefaultSessCount"] = args ? args.useDefaultSessCount : undefined;
            resourceInputs["useHttpsProxy"] = args ? args.useHttpsProxy : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["useMssTab"] = args ? args.useMssTab : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vportGlobal"] = args ? args.vportGlobal : undefined;
            resourceInputs["vportL3v"] = args ? args.vportL3v : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbCommon.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbCommon resources.
 */
export interface SlbCommonState {
    /**
     * aFleX table entry aging interval in second
     */
    aflexTableEntryAgingInterval?: pulumi.Input<number>;
    aflexTableEntrySync?: pulumi.Input<inputs.SlbCommonAflexTableEntrySync>;
    /**
     * Graceful shutdown after disable server/port and/or virtual server/port
     */
    afterDisable?: pulumi.Input<number>;
    /**
     * Use source NAT gateway for L3 traffic for gateway mode
     */
    allowInGatewayMode?: pulumi.Input<number>;
    /**
     * Custom response code
     */
    attackRespCode?: pulumi.Input<number>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    autoNatNoIpRefresh?: pulumi.Input<string>;
    /**
     * Auto Translate Port range
     */
    autoTranslatePort?: pulumi.Input<number>;
    /**
     * Set buffer threshold
     */
    buffThresh?: pulumi.Input<number>;
    /**
     * Set hardware buffer threshold
     */
    buffThreshHwBuff?: pulumi.Input<number>;
    /**
     * Relieve threshold
     */
    buffThreshRelieveThresh?: pulumi.Input<number>;
    /**
     * Set high water mark of system buffer
     */
    buffThreshSysBuffHigh?: pulumi.Input<number>;
    /**
     * Set low water mark of system buffer
     */
    buffThreshSysBuffLow?: pulumi.Input<number>;
    /**
     * Cache expiration time, default is 1 minute
     */
    cacheExpireTime?: pulumi.Input<number>;
    /**
     * Set global cancel stream loop limit (cancel stream loop limit, default is 5)
     */
    cancelStreamLoopLimit?: pulumi.Input<number>;
    certPinning?: pulumi.Input<inputs.SlbCommonCertPinning>;
    /**
     * Clientside IP address
     */
    clientsideIp?: pulumi.Input<string>;
    /**
     * Clientside IPv6 address
     */
    clientsideIpv6?: pulumi.Input<string>;
    /**
     * Set compression block size (Compression block size in bytes)
     */
    compressBlockSize?: pulumi.Input<number>;
    connRateLimit?: pulumi.Input<inputs.SlbCommonConnRateLimit>;
    /**
     * Block message
     */
    customMessage?: pulumi.Input<string>;
    /**
     * Specify the custom webpage name
     */
    customPage?: pulumi.Input<string>;
    /**
     * Provide custom signal names
     */
    customSignalClist?: pulumi.Input<string>;
    /**
     * Set packet count threshold for DDOS, default is 100
     */
    ddosPktCountThresh?: pulumi.Input<number>;
    /**
     * Set data packet size threshold for DDOS, default is 64 bytes
     */
    ddosPktSizeThresh?: pulumi.Input<number>;
    ddosProtection?: pulumi.Input<inputs.SlbCommonDdosProtection>;
    /**
     * Disable adaptive resource check based on buffer usage
     */
    disableAdaptiveResourceCheck?: pulumi.Input<number>;
    /**
     * Disable Persist Scoring
     */
    disablePersistScoring?: pulumi.Input<number>;
    /**
     * Disable masking of ports for CPU hashing
     */
    disablePortMasking?: pulumi.Input<number>;
    /**
     * Disable auto reselection of server
     */
    disableServerAutoReselect?: pulumi.Input<number>;
    /**
     * Set DNS cache entry age, default is 300 seconds (1-1000000 seconds, default is 300 seconds)
     */
    dnsCacheAge?: pulumi.Input<number>;
    /**
     * Set DNS cache entry age minimum threshold, default is 0 seconds (1-1000000 seconds, default is 0 seconds)
     */
    dnsCacheAgeMinThreshold?: pulumi.Input<number>;
    /**
     * Set DNS cache entry weight, default is 1
     */
    dnsCacheAgingWeight?: pulumi.Input<number>;
    /**
     * Enable DNS cache
     */
    dnsCacheEnable?: pulumi.Input<number>;
    /**
     * Set DNS cache entry size, default is 256 bytes (1-4096 bytes, default is 256 bytes)
     */
    dnsCacheEntrySize?: pulumi.Input<number>;
    /**
     * Enable DNS cache HA sync
     */
    dnsCacheSync?: pulumi.Input<number>;
    /**
     * Only sync DNS cache with smaller size (1-4096 bytes, default is 256 bytes)
     */
    dnsCacheSyncEntrySize?: pulumi.Input<number>;
    /**
     * Only sync DNS cache with longer TTL (0-10000000 seconds, default is 0 second)
     */
    dnsCacheSyncTtlThreshold?: pulumi.Input<number>;
    /**
     * Enable DNS cache response ttl adjustment
     */
    dnsCacheTtlAdjustmentEnable?: pulumi.Input<number>;
    /**
     * Enable DNS negative cache
     */
    dnsNegativeCacheEnable?: pulumi.Input<number>;
    /**
     * Enable persistent DNS cache
     */
    dnsPersistentCacheEnable?: pulumi.Input<number>;
    /**
     * Only save DNS cache with larger hit count (0-10000000, default is 0)
     */
    dnsPersistentCacheHitThreshold?: pulumi.Input<number>;
    /**
     * Only save DNS cache with longer TTL (0-10000000 seconds, default is 0 second)
     */
    dnsPersistentCacheTtlThreshold?: pulumi.Input<number>;
    dnsResponseRateLimiting?: pulumi.Input<inputs.SlbCommonDnsResponseRateLimiting>;
    /**
     * Enable DNS VIP stateless mode
     */
    dnsVipStateless?: pulumi.Input<number>;
    /**
     * Drop ICMP to VIP when VIP down
     */
    dropIcmpToVipWhenVipDown?: pulumi.Input<number>;
    /**
     * Enable dsr-health-check (direct server return health check)
     */
    dsrHealthCheckEnable?: pulumi.Input<number>;
    /**
     * 'system-default': Use system default ecmp hashing algorithm; 'connection-based': Use connection information for hashing;
     */
    ecmpHash?: pulumi.Input<string>;
    /**
     * Enable DDoS protection
     */
    enableDdos?: pulumi.Input<number>;
    /**
     * Enable Fast-Path Rerouting
     */
    enableFastPathRerouting?: pulumi.Input<number>;
    /**
     * Enable L7 request accounting
     */
    enableL7ReqAcct?: pulumi.Input<number>;
    /**
     * 'server': Graceful shutdown server/port only; 'virtual-server': Graceful shutdown virtual server/port only;
     */
    entity?: pulumi.Input<string>;
    /**
     * 'local': Maximum local rate; 'remote': Maximum remote rate; (Maximum rates)
     */
    excludeDestination?: pulumi.Input<string>;
    /**
     * Enable global slb extended statistics
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * Disable fast path in SLB processing
     */
    fastPathDisable?: pulumi.Input<number>;
    /**
     * Enable gateway health check
     */
    gatewayHealthCheck?: pulumi.Input<number>;
    /**
     * 1-65535, in unit of seconds
     */
    gracefulShutdown?: pulumi.Input<number>;
    /**
     * Enable graceful shutdown
     */
    gracefulShutdownEnable?: pulumi.Input<number>;
    healthCheckToAllVip?: pulumi.Input<number>;
    /**
     * Honor the server reponse TTL
     */
    honorServerResponseTtl?: pulumi.Input<number>;
    /**
     * Enable Http Fast in SLB processing
     */
    httpFastEnable?: pulumi.Input<number>;
    /**
     * Use hardware compression
     */
    hwCompression?: pulumi.Input<number>;
    /**
     * Configure hardware SYN round robin (range 1-500000)
     */
    hwSynRr?: pulumi.Input<number>;
    /**
     * Specify the healthcheck interval, default is 5 seconds (Interval Value, in seconds (default 5))
     */
    interval?: pulumi.Input<number>;
    /**
     * IPv4 Octet Offset for Hash
     */
    ipv4Offset?: pulumi.Input<number>;
    /**
     * IPv6 Octet Valid Subnet Length for Hash
     */
    ipv6Subnet?: pulumi.Input<number>;
    /**
     * Disable L2/L3 trunk LB
     */
    l2l3TrunkLbDisable?: pulumi.Input<number>;
    /**
     * Log when rate exceed
     */
    logForResetUnknownConn?: pulumi.Input<number>;
    /**
     * Enable low latency mode
     */
    lowLatency?: pulumi.Input<number>;
    /**
     * Set per connection buffer threshold (Buffer value range 128-4096)
     */
    maxBuffQueuedPerConn?: pulumi.Input<number>;
    /**
     * Set maximum number of HTTP headers allowed
     */
    maxHttpHeaderCount?: pulumi.Input<number>;
    /**
     * Set maximum local rate
     */
    maxLocalRate?: pulumi.Input<number>;
    /**
     * Define maximum persistent cache (Maximum persistent cache entry)
     */
    maxPersistentCache?: pulumi.Input<number>;
    /**
     * Set maximum remote rate
     */
    maxRemoteRate?: pulumi.Input<number>;
    /**
     * Enable NG-WAF monitor mode
     */
    monitorModeEnable?: pulumi.Input<number>;
    /**
     * Configure maximum session life, default is 2 seconds (1-39 seconds, default is 2 seconds)
     */
    mslTime?: pulumi.Input<number>;
    /**
     * Set MSS table (128-750, default is 536)
     */
    mssTable?: pulumi.Input<number>;
    /**
     * Specific NGWAF CPU
     */
    multiCpu?: pulumi.Input<number>;
    /**
     * HW assisted N5 SSL module with TLS 1.3 and TLS 1.2 support using OpenSSL 1.1.1
     */
    n5New?: pulumi.Input<number>;
    /**
     * HW assisted N5 SSL module with TLS 1.2 support using OpenSSL 0.9.7
     */
    n5Old?: pulumi.Input<number>;
    /**
     * IPv4 address
     */
    ngwafProxyIpv4?: pulumi.Input<string>;
    /**
     * IPv6 address
     */
    ngwafProxyIpv6?: pulumi.Input<string>;
    /**
     * Port
     */
    ngwafProxyPort?: pulumi.Input<number>;
    /**
     * Don't automatically mark vport up when aFleX is bound
     */
    noAutoUpOnAflex?: pulumi.Input<number>;
    /**
     * Enable odd even nat pool allocation in dual blade systems
     */
    oddEvenNatEnable?: pulumi.Input<number>;
    /**
     * One Server Conn Health Check Rate
     */
    oneServerConnHmRate?: pulumi.Input<number>;
    /**
     * Enable override port in DSR health check mode
     */
    overridePort?: pulumi.Input<number>;
    /**
     * Set global pbslb entry age (minute)
     */
    pbslbEntryAge?: pulumi.Input<number>;
    /**
     * Apply global limit id to overflow pbslb entry
     */
    pbslbOverflowGlid?: pulumi.Input<string>;
    /**
     * Percentage of default session count to use for per thread session table size
     */
    perThrPercent?: pulumi.Input<number>;
    /**
     * 'enable': Enable ping sweep detection; 'disable': Disable ping sweep detection(default);
     */
    pingSweepDetection?: pulumi.Input<string>;
    pktRateForResetUnknownConn?: pulumi.Input<number>;
    /**
     * Enable the Player id check
     */
    playerIdCheckEnable?: pulumi.Input<number>;
    /**
     * Serverside port number for SNI transmission
     */
    port?: pulumi.Input<number>;
    /**
     * 'enable': Enable port scan detection; 'disable': Disable port scan detection(default);
     */
    portScanDetection?: pulumi.Input<string>;
    /**
     * Enable NG-WAF pre-processing
     */
    preProcessEnable?: pulumi.Input<number>;
    /**
     * HW assisted QAT SSL module
     */
    qat?: pulumi.Input<number>;
    quic?: pulumi.Input<inputs.SlbCommonQuic>;
    /**
     * auto translate port range
     */
    range?: pulumi.Input<number>;
    /**
     * port range end
     */
    rangeEnd?: pulumi.Input<number>;
    /**
     * port range start
     */
    rangeStart?: pulumi.Input<number>;
    /**
     * Configure rate limit logging
     */
    rateLimitLogging?: pulumi.Input<number>;
    /**
     * 'honor-packet-ttl': Honor the lowest TTL among NS records in the server response; 'honor-age-config': Honor the ttl/age
     * settings based on acos dns cache configuration;
     */
    recursiveNsCache?: pulumi.Input<string>;
    /**
     * Send reset if session in delete queue receives a SYN packet
     */
    resetStaleSession?: pulumi.Input<number>;
    /**
     * Enable client port service port conflicts
     */
    resolvePortConflict?: pulumi.Input<number>;
    /**
     * 'single-answer': Only cache DNS response with single answer; 'round-robin': Round robin;
     */
    responseType?: pulumi.Input<string>;
    /**
     * Enable SLB scale out
     */
    scaleOut?: pulumi.Input<number>;
    /**
     * Set SLB scaleout traffic-map
     */
    scaleOutTrafficMap?: pulumi.Input<number>;
    /**
     * Serverside IP address
     */
    serversideIp?: pulumi.Input<string>;
    /**
     * Serverside IPv6 address
     */
    serversideIpv6?: pulumi.Input<string>;
    /**
     * 'allow-same': Allow the binding service-group on no-dest-nat virtual ports; 'enforce-different': Enforce that the same
     * service-group can not be bound on different no-dest-nat virtual ports;
     */
    serviceGroupOnNoDestNatVports?: pulumi.Input<string>;
    /**
     * Enable show slb server legacy command
     */
    showSlbServerLegacyCmd?: pulumi.Input<number>;
    /**
     * Enable show slb service-group legacy command
     */
    showSlbServiceGroupLegacyCmd?: pulumi.Input<number>;
    /**
     * Enable show slb virtual-server legacy command
     */
    showSlbVirtualServerLegacyCmd?: pulumi.Input<number>;
    /**
     * Use source NAT gateway for L3 traffic for transparent mode
     */
    snatGwyForL3?: pulumi.Input<number>;
    /**
     * Enable source NAT traffic against VIP
     */
    snatOnVip?: pulumi.Input<number>;
    snatPreserve?: pulumi.Input<inputs.SlbCommonSnatPreserve>;
    /**
     * Software
     */
    software?: pulumi.Input<number>;
    /**
     * Software TLS1.3
     */
    softwareTls13?: pulumi.Input<number>;
    /**
     * Software TLS1.3 with CPU Offload Support
     */
    softwareTls13Offload?: pulumi.Input<number>;
    /**
     * Enable SLB sorting of resource names
     */
    sortRes?: pulumi.Input<number>;
    /**
     * Enable SSL module usage calculations for QAT
     */
    sslModuleUsageEnable?: pulumi.Input<number>;
    /**
     * Enable delay transmission for N5-new
     */
    sslN5DelayTxEnable?: pulumi.Input<number>;
    sslRatelimitCfg?: pulumi.Input<inputs.SlbCommonSslRatelimitCfg>;
    /**
     * SSLI asynchronized connection max number, default is 2000 (set to 0 for unlimited size)
     */
    ssliCertNotReadyInspectLimit?: pulumi.Input<number>;
    /**
     * SSLI asynchronized connection timeout, default is 10 seconds (seconds, set to 0 for never timeout)
     */
    ssliCertNotReadyInspectTimeout?: pulumi.Input<number>;
    /**
     * Terminate the SSLi sessions silently without sending RST/FIN packet
     */
    ssliSilentTerminationEnable?: pulumi.Input<number>;
    /**
     * Enable SSLi SNI hash table
     */
    ssliSniHashEnable?: pulumi.Input<number>;
    /**
     * Enable stateless service groups to be assigned to multiple L2/L3 DSR VIPs
     */
    statelessSgMultiBinding?: pulumi.Input<number>;
    /**
     * Disable global slb data statistics
     */
    statsDataDisable?: pulumi.Input<number>;
    /**
     * Substitute Source MAC Address to that of the outgoing interface
     */
    substituteSourceMac?: pulumi.Input<number>;
    /**
     * Specify the healthcheck timeout value, default is 15 seconds (Timeout Value, in seconds (default 15))
     */
    timeout?: pulumi.Input<number>;
    /**
     * 'vport': traffic-map per vport; 'global': global traffic-map;
     */
    trafficMapType?: pulumi.Input<string>;
    /**
     * Only cache DNS response with longer TTL
     */
    ttlThreshold?: pulumi.Input<number>;
    /**
     * Use default session count
     */
    useDefaultSessCount?: pulumi.Input<number>;
    /**
     * NG-WAF connects to Cloud through proxy server
     */
    useHttpsProxy?: pulumi.Input<number>;
    /**
     * Use management port to connect
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * Use MSS based on internal table for SLB processing
     */
    useMssTab?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure periodic showtech vport paging global limit
     */
    vportGlobal?: pulumi.Input<number>;
    /**
     * Configure periodic showtech vport paging l3v limit
     */
    vportL3v?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbCommon resource.
 */
export interface SlbCommonArgs {
    /**
     * aFleX table entry aging interval in second
     */
    aflexTableEntryAgingInterval?: pulumi.Input<number>;
    aflexTableEntrySync?: pulumi.Input<inputs.SlbCommonAflexTableEntrySync>;
    /**
     * Graceful shutdown after disable server/port and/or virtual server/port
     */
    afterDisable?: pulumi.Input<number>;
    /**
     * Use source NAT gateway for L3 traffic for gateway mode
     */
    allowInGatewayMode?: pulumi.Input<number>;
    /**
     * Custom response code
     */
    attackRespCode?: pulumi.Input<number>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    autoNatNoIpRefresh?: pulumi.Input<string>;
    /**
     * Auto Translate Port range
     */
    autoTranslatePort?: pulumi.Input<number>;
    /**
     * Set buffer threshold
     */
    buffThresh?: pulumi.Input<number>;
    /**
     * Set hardware buffer threshold
     */
    buffThreshHwBuff?: pulumi.Input<number>;
    /**
     * Relieve threshold
     */
    buffThreshRelieveThresh?: pulumi.Input<number>;
    /**
     * Set high water mark of system buffer
     */
    buffThreshSysBuffHigh?: pulumi.Input<number>;
    /**
     * Set low water mark of system buffer
     */
    buffThreshSysBuffLow?: pulumi.Input<number>;
    /**
     * Cache expiration time, default is 1 minute
     */
    cacheExpireTime?: pulumi.Input<number>;
    /**
     * Set global cancel stream loop limit (cancel stream loop limit, default is 5)
     */
    cancelStreamLoopLimit?: pulumi.Input<number>;
    certPinning?: pulumi.Input<inputs.SlbCommonCertPinning>;
    /**
     * Clientside IP address
     */
    clientsideIp?: pulumi.Input<string>;
    /**
     * Clientside IPv6 address
     */
    clientsideIpv6?: pulumi.Input<string>;
    /**
     * Set compression block size (Compression block size in bytes)
     */
    compressBlockSize?: pulumi.Input<number>;
    connRateLimit?: pulumi.Input<inputs.SlbCommonConnRateLimit>;
    /**
     * Block message
     */
    customMessage?: pulumi.Input<string>;
    /**
     * Specify the custom webpage name
     */
    customPage?: pulumi.Input<string>;
    /**
     * Provide custom signal names
     */
    customSignalClist?: pulumi.Input<string>;
    /**
     * Set packet count threshold for DDOS, default is 100
     */
    ddosPktCountThresh?: pulumi.Input<number>;
    /**
     * Set data packet size threshold for DDOS, default is 64 bytes
     */
    ddosPktSizeThresh?: pulumi.Input<number>;
    ddosProtection?: pulumi.Input<inputs.SlbCommonDdosProtection>;
    /**
     * Disable adaptive resource check based on buffer usage
     */
    disableAdaptiveResourceCheck?: pulumi.Input<number>;
    /**
     * Disable Persist Scoring
     */
    disablePersistScoring?: pulumi.Input<number>;
    /**
     * Disable masking of ports for CPU hashing
     */
    disablePortMasking?: pulumi.Input<number>;
    /**
     * Disable auto reselection of server
     */
    disableServerAutoReselect?: pulumi.Input<number>;
    /**
     * Set DNS cache entry age, default is 300 seconds (1-1000000 seconds, default is 300 seconds)
     */
    dnsCacheAge?: pulumi.Input<number>;
    /**
     * Set DNS cache entry age minimum threshold, default is 0 seconds (1-1000000 seconds, default is 0 seconds)
     */
    dnsCacheAgeMinThreshold?: pulumi.Input<number>;
    /**
     * Set DNS cache entry weight, default is 1
     */
    dnsCacheAgingWeight?: pulumi.Input<number>;
    /**
     * Enable DNS cache
     */
    dnsCacheEnable?: pulumi.Input<number>;
    /**
     * Set DNS cache entry size, default is 256 bytes (1-4096 bytes, default is 256 bytes)
     */
    dnsCacheEntrySize?: pulumi.Input<number>;
    /**
     * Enable DNS cache HA sync
     */
    dnsCacheSync?: pulumi.Input<number>;
    /**
     * Only sync DNS cache with smaller size (1-4096 bytes, default is 256 bytes)
     */
    dnsCacheSyncEntrySize?: pulumi.Input<number>;
    /**
     * Only sync DNS cache with longer TTL (0-10000000 seconds, default is 0 second)
     */
    dnsCacheSyncTtlThreshold?: pulumi.Input<number>;
    /**
     * Enable DNS cache response ttl adjustment
     */
    dnsCacheTtlAdjustmentEnable?: pulumi.Input<number>;
    /**
     * Enable DNS negative cache
     */
    dnsNegativeCacheEnable?: pulumi.Input<number>;
    /**
     * Enable persistent DNS cache
     */
    dnsPersistentCacheEnable?: pulumi.Input<number>;
    /**
     * Only save DNS cache with larger hit count (0-10000000, default is 0)
     */
    dnsPersistentCacheHitThreshold?: pulumi.Input<number>;
    /**
     * Only save DNS cache with longer TTL (0-10000000 seconds, default is 0 second)
     */
    dnsPersistentCacheTtlThreshold?: pulumi.Input<number>;
    dnsResponseRateLimiting?: pulumi.Input<inputs.SlbCommonDnsResponseRateLimiting>;
    /**
     * Enable DNS VIP stateless mode
     */
    dnsVipStateless?: pulumi.Input<number>;
    /**
     * Drop ICMP to VIP when VIP down
     */
    dropIcmpToVipWhenVipDown?: pulumi.Input<number>;
    /**
     * Enable dsr-health-check (direct server return health check)
     */
    dsrHealthCheckEnable?: pulumi.Input<number>;
    /**
     * 'system-default': Use system default ecmp hashing algorithm; 'connection-based': Use connection information for hashing;
     */
    ecmpHash?: pulumi.Input<string>;
    /**
     * Enable DDoS protection
     */
    enableDdos?: pulumi.Input<number>;
    /**
     * Enable Fast-Path Rerouting
     */
    enableFastPathRerouting?: pulumi.Input<number>;
    /**
     * Enable L7 request accounting
     */
    enableL7ReqAcct?: pulumi.Input<number>;
    /**
     * 'server': Graceful shutdown server/port only; 'virtual-server': Graceful shutdown virtual server/port only;
     */
    entity?: pulumi.Input<string>;
    /**
     * 'local': Maximum local rate; 'remote': Maximum remote rate; (Maximum rates)
     */
    excludeDestination?: pulumi.Input<string>;
    /**
     * Enable global slb extended statistics
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * Disable fast path in SLB processing
     */
    fastPathDisable?: pulumi.Input<number>;
    /**
     * Enable gateway health check
     */
    gatewayHealthCheck?: pulumi.Input<number>;
    /**
     * 1-65535, in unit of seconds
     */
    gracefulShutdown?: pulumi.Input<number>;
    /**
     * Enable graceful shutdown
     */
    gracefulShutdownEnable?: pulumi.Input<number>;
    healthCheckToAllVip?: pulumi.Input<number>;
    /**
     * Honor the server reponse TTL
     */
    honorServerResponseTtl?: pulumi.Input<number>;
    /**
     * Enable Http Fast in SLB processing
     */
    httpFastEnable?: pulumi.Input<number>;
    /**
     * Use hardware compression
     */
    hwCompression?: pulumi.Input<number>;
    /**
     * Configure hardware SYN round robin (range 1-500000)
     */
    hwSynRr?: pulumi.Input<number>;
    /**
     * Specify the healthcheck interval, default is 5 seconds (Interval Value, in seconds (default 5))
     */
    interval?: pulumi.Input<number>;
    /**
     * IPv4 Octet Offset for Hash
     */
    ipv4Offset?: pulumi.Input<number>;
    /**
     * IPv6 Octet Valid Subnet Length for Hash
     */
    ipv6Subnet?: pulumi.Input<number>;
    /**
     * Disable L2/L3 trunk LB
     */
    l2l3TrunkLbDisable?: pulumi.Input<number>;
    /**
     * Log when rate exceed
     */
    logForResetUnknownConn?: pulumi.Input<number>;
    /**
     * Enable low latency mode
     */
    lowLatency?: pulumi.Input<number>;
    /**
     * Set per connection buffer threshold (Buffer value range 128-4096)
     */
    maxBuffQueuedPerConn?: pulumi.Input<number>;
    /**
     * Set maximum number of HTTP headers allowed
     */
    maxHttpHeaderCount?: pulumi.Input<number>;
    /**
     * Set maximum local rate
     */
    maxLocalRate?: pulumi.Input<number>;
    /**
     * Define maximum persistent cache (Maximum persistent cache entry)
     */
    maxPersistentCache?: pulumi.Input<number>;
    /**
     * Set maximum remote rate
     */
    maxRemoteRate?: pulumi.Input<number>;
    /**
     * Enable NG-WAF monitor mode
     */
    monitorModeEnable?: pulumi.Input<number>;
    /**
     * Configure maximum session life, default is 2 seconds (1-39 seconds, default is 2 seconds)
     */
    mslTime?: pulumi.Input<number>;
    /**
     * Set MSS table (128-750, default is 536)
     */
    mssTable?: pulumi.Input<number>;
    /**
     * Specific NGWAF CPU
     */
    multiCpu?: pulumi.Input<number>;
    /**
     * HW assisted N5 SSL module with TLS 1.3 and TLS 1.2 support using OpenSSL 1.1.1
     */
    n5New?: pulumi.Input<number>;
    /**
     * HW assisted N5 SSL module with TLS 1.2 support using OpenSSL 0.9.7
     */
    n5Old?: pulumi.Input<number>;
    /**
     * IPv4 address
     */
    ngwafProxyIpv4?: pulumi.Input<string>;
    /**
     * IPv6 address
     */
    ngwafProxyIpv6?: pulumi.Input<string>;
    /**
     * Port
     */
    ngwafProxyPort?: pulumi.Input<number>;
    /**
     * Don't automatically mark vport up when aFleX is bound
     */
    noAutoUpOnAflex?: pulumi.Input<number>;
    /**
     * Enable odd even nat pool allocation in dual blade systems
     */
    oddEvenNatEnable?: pulumi.Input<number>;
    /**
     * One Server Conn Health Check Rate
     */
    oneServerConnHmRate?: pulumi.Input<number>;
    /**
     * Enable override port in DSR health check mode
     */
    overridePort?: pulumi.Input<number>;
    /**
     * Set global pbslb entry age (minute)
     */
    pbslbEntryAge?: pulumi.Input<number>;
    /**
     * Apply global limit id to overflow pbslb entry
     */
    pbslbOverflowGlid?: pulumi.Input<string>;
    /**
     * Percentage of default session count to use for per thread session table size
     */
    perThrPercent?: pulumi.Input<number>;
    /**
     * 'enable': Enable ping sweep detection; 'disable': Disable ping sweep detection(default);
     */
    pingSweepDetection?: pulumi.Input<string>;
    pktRateForResetUnknownConn?: pulumi.Input<number>;
    /**
     * Enable the Player id check
     */
    playerIdCheckEnable?: pulumi.Input<number>;
    /**
     * Serverside port number for SNI transmission
     */
    port?: pulumi.Input<number>;
    /**
     * 'enable': Enable port scan detection; 'disable': Disable port scan detection(default);
     */
    portScanDetection?: pulumi.Input<string>;
    /**
     * Enable NG-WAF pre-processing
     */
    preProcessEnable?: pulumi.Input<number>;
    /**
     * HW assisted QAT SSL module
     */
    qat?: pulumi.Input<number>;
    quic?: pulumi.Input<inputs.SlbCommonQuic>;
    /**
     * auto translate port range
     */
    range?: pulumi.Input<number>;
    /**
     * port range end
     */
    rangeEnd?: pulumi.Input<number>;
    /**
     * port range start
     */
    rangeStart?: pulumi.Input<number>;
    /**
     * Configure rate limit logging
     */
    rateLimitLogging?: pulumi.Input<number>;
    /**
     * 'honor-packet-ttl': Honor the lowest TTL among NS records in the server response; 'honor-age-config': Honor the ttl/age
     * settings based on acos dns cache configuration;
     */
    recursiveNsCache?: pulumi.Input<string>;
    /**
     * Send reset if session in delete queue receives a SYN packet
     */
    resetStaleSession?: pulumi.Input<number>;
    /**
     * Enable client port service port conflicts
     */
    resolvePortConflict?: pulumi.Input<number>;
    /**
     * 'single-answer': Only cache DNS response with single answer; 'round-robin': Round robin;
     */
    responseType?: pulumi.Input<string>;
    /**
     * Enable SLB scale out
     */
    scaleOut?: pulumi.Input<number>;
    /**
     * Set SLB scaleout traffic-map
     */
    scaleOutTrafficMap?: pulumi.Input<number>;
    /**
     * Serverside IP address
     */
    serversideIp?: pulumi.Input<string>;
    /**
     * Serverside IPv6 address
     */
    serversideIpv6?: pulumi.Input<string>;
    /**
     * 'allow-same': Allow the binding service-group on no-dest-nat virtual ports; 'enforce-different': Enforce that the same
     * service-group can not be bound on different no-dest-nat virtual ports;
     */
    serviceGroupOnNoDestNatVports?: pulumi.Input<string>;
    /**
     * Enable show slb server legacy command
     */
    showSlbServerLegacyCmd?: pulumi.Input<number>;
    /**
     * Enable show slb service-group legacy command
     */
    showSlbServiceGroupLegacyCmd?: pulumi.Input<number>;
    /**
     * Enable show slb virtual-server legacy command
     */
    showSlbVirtualServerLegacyCmd?: pulumi.Input<number>;
    /**
     * Use source NAT gateway for L3 traffic for transparent mode
     */
    snatGwyForL3?: pulumi.Input<number>;
    /**
     * Enable source NAT traffic against VIP
     */
    snatOnVip?: pulumi.Input<number>;
    snatPreserve?: pulumi.Input<inputs.SlbCommonSnatPreserve>;
    /**
     * Software
     */
    software?: pulumi.Input<number>;
    /**
     * Software TLS1.3
     */
    softwareTls13?: pulumi.Input<number>;
    /**
     * Software TLS1.3 with CPU Offload Support
     */
    softwareTls13Offload?: pulumi.Input<number>;
    /**
     * Enable SLB sorting of resource names
     */
    sortRes?: pulumi.Input<number>;
    /**
     * Enable SSL module usage calculations for QAT
     */
    sslModuleUsageEnable?: pulumi.Input<number>;
    /**
     * Enable delay transmission for N5-new
     */
    sslN5DelayTxEnable?: pulumi.Input<number>;
    sslRatelimitCfg?: pulumi.Input<inputs.SlbCommonSslRatelimitCfg>;
    /**
     * SSLI asynchronized connection max number, default is 2000 (set to 0 for unlimited size)
     */
    ssliCertNotReadyInspectLimit?: pulumi.Input<number>;
    /**
     * SSLI asynchronized connection timeout, default is 10 seconds (seconds, set to 0 for never timeout)
     */
    ssliCertNotReadyInspectTimeout?: pulumi.Input<number>;
    /**
     * Terminate the SSLi sessions silently without sending RST/FIN packet
     */
    ssliSilentTerminationEnable?: pulumi.Input<number>;
    /**
     * Enable SSLi SNI hash table
     */
    ssliSniHashEnable?: pulumi.Input<number>;
    /**
     * Enable stateless service groups to be assigned to multiple L2/L3 DSR VIPs
     */
    statelessSgMultiBinding?: pulumi.Input<number>;
    /**
     * Disable global slb data statistics
     */
    statsDataDisable?: pulumi.Input<number>;
    /**
     * Substitute Source MAC Address to that of the outgoing interface
     */
    substituteSourceMac?: pulumi.Input<number>;
    /**
     * Specify the healthcheck timeout value, default is 15 seconds (Timeout Value, in seconds (default 15))
     */
    timeout?: pulumi.Input<number>;
    /**
     * 'vport': traffic-map per vport; 'global': global traffic-map;
     */
    trafficMapType?: pulumi.Input<string>;
    /**
     * Only cache DNS response with longer TTL
     */
    ttlThreshold?: pulumi.Input<number>;
    /**
     * Use default session count
     */
    useDefaultSessCount?: pulumi.Input<number>;
    /**
     * NG-WAF connects to Cloud through proxy server
     */
    useHttpsProxy?: pulumi.Input<number>;
    /**
     * Use management port to connect
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * Use MSS based on internal table for SLB processing
     */
    useMssTab?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure periodic showtech vport paging global limit
     */
    vportGlobal?: pulumi.Input<number>;
    /**
     * Configure periodic showtech vport paging l3v limit
     */
    vportL3v?: pulumi.Input<number>;
}
