// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbTemplateMqtt extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateMqtt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateMqttState, opts?: pulumi.CustomResourceOptions): SlbTemplateMqtt {
        return new SlbTemplateMqtt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateMqtt:SlbTemplateMqtt';

    /**
     * Returns true if the given object is an instance of SlbTemplateMqtt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateMqtt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateMqtt.__pulumiType;
    }

    /**
     * Use the begining part of client ID to calculate hash value (client ID string length to calculate hash value)
     */
    public readonly clientidHashFirst!: pulumi.Output<number | undefined>;
    /**
     * Use the end part of Client ID to calculate hash value (Client ID length to calculate hash value)
     */
    public readonly clientidHashLast!: pulumi.Output<number | undefined>;
    /**
     * Skip part of Client ID to calculate hash value (Offset of the Client ID)
     */
    public readonly clientidHashOffset!: pulumi.Output<number | undefined>;
    /**
     * Use Client ID's hash value to select server
     */
    public readonly clientidHashPersist!: pulumi.Output<number | undefined>;
    /**
     * MQTT Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateMqtt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateMqttArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateMqttArgs | SlbTemplateMqttState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateMqttState | undefined;
            resourceInputs["clientidHashFirst"] = state ? state.clientidHashFirst : undefined;
            resourceInputs["clientidHashLast"] = state ? state.clientidHashLast : undefined;
            resourceInputs["clientidHashOffset"] = state ? state.clientidHashOffset : undefined;
            resourceInputs["clientidHashPersist"] = state ? state.clientidHashPersist : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateMqttArgs | undefined;
            resourceInputs["clientidHashFirst"] = args ? args.clientidHashFirst : undefined;
            resourceInputs["clientidHashLast"] = args ? args.clientidHashLast : undefined;
            resourceInputs["clientidHashOffset"] = args ? args.clientidHashOffset : undefined;
            resourceInputs["clientidHashPersist"] = args ? args.clientidHashPersist : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateMqtt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateMqtt resources.
 */
export interface SlbTemplateMqttState {
    /**
     * Use the begining part of client ID to calculate hash value (client ID string length to calculate hash value)
     */
    clientidHashFirst?: pulumi.Input<number>;
    /**
     * Use the end part of Client ID to calculate hash value (Client ID length to calculate hash value)
     */
    clientidHashLast?: pulumi.Input<number>;
    /**
     * Skip part of Client ID to calculate hash value (Offset of the Client ID)
     */
    clientidHashOffset?: pulumi.Input<number>;
    /**
     * Use Client ID's hash value to select server
     */
    clientidHashPersist?: pulumi.Input<number>;
    /**
     * MQTT Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateMqtt resource.
 */
export interface SlbTemplateMqttArgs {
    /**
     * Use the begining part of client ID to calculate hash value (client ID string length to calculate hash value)
     */
    clientidHashFirst?: pulumi.Input<number>;
    /**
     * Use the end part of Client ID to calculate hash value (Client ID length to calculate hash value)
     */
    clientidHashLast?: pulumi.Input<number>;
    /**
     * Skip part of Client ID to calculate hash value (Offset of the Client ID)
     */
    clientidHashOffset?: pulumi.Input<number>;
    /**
     * Use Client ID's hash value to select server
     */
    clientidHashPersist?: pulumi.Input<number>;
    /**
     * MQTT Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
