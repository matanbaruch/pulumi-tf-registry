// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpServerHostIpv6Host extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerHostIpv6Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerHostIpv6HostState, opts?: pulumi.CustomResourceOptions): SnmpServerHostIpv6Host {
        return new SnmpServerHostIpv6Host(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerHostIpv6Host:SnmpServerHostIpv6Host';

    /**
     * Returns true if the given object is an instance of SnmpServerHostIpv6Host.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerHostIpv6Host {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerHostIpv6Host.__pulumiType;
    }

    /**
     * IPV6 address of SNMP trap host
     */
    public readonly ipv6Addr!: pulumi.Output<string>;
    /**
     * The trap host's UDP port number(default: 162)
     */
    public readonly udpPort!: pulumi.Output<number | undefined>;
    /**
     * SNMPv3 user to send traps (User Name)
     */
    public readonly user!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * SNMPv1/v2c community string
     */
    public readonly v1V2cComm!: pulumi.Output<string | undefined>;
    /**
     * 'v1': Use SNMPv1; 'v2c': Use SNMPv2c; 'v3': User SNMPv3;
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a SnmpServerHostIpv6Host resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnmpServerHostIpv6HostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerHostIpv6HostArgs | SnmpServerHostIpv6HostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerHostIpv6HostState | undefined;
            resourceInputs["ipv6Addr"] = state ? state.ipv6Addr : undefined;
            resourceInputs["udpPort"] = state ? state.udpPort : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["v1V2cComm"] = state ? state.v1V2cComm : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SnmpServerHostIpv6HostArgs | undefined;
            if ((!args || args.ipv6Addr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipv6Addr'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["ipv6Addr"] = args ? args.ipv6Addr : undefined;
            resourceInputs["udpPort"] = args ? args.udpPort : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["v1V2cComm"] = args ? args.v1V2cComm : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerHostIpv6Host.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerHostIpv6Host resources.
 */
export interface SnmpServerHostIpv6HostState {
    /**
     * IPV6 address of SNMP trap host
     */
    ipv6Addr?: pulumi.Input<string>;
    /**
     * The trap host's UDP port number(default: 162)
     */
    udpPort?: pulumi.Input<number>;
    /**
     * SNMPv3 user to send traps (User Name)
     */
    user?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * SNMPv1/v2c community string
     */
    v1V2cComm?: pulumi.Input<string>;
    /**
     * 'v1': Use SNMPv1; 'v2c': Use SNMPv2c; 'v3': User SNMPv3;
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnmpServerHostIpv6Host resource.
 */
export interface SnmpServerHostIpv6HostArgs {
    /**
     * IPV6 address of SNMP trap host
     */
    ipv6Addr: pulumi.Input<string>;
    /**
     * The trap host's UDP port number(default: 162)
     */
    udpPort?: pulumi.Input<number>;
    /**
     * SNMPv3 user to send traps (User Name)
     */
    user?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * SNMPv1/v2c community string
     */
    v1V2cComm?: pulumi.Input<string>;
    /**
     * 'v1': Use SNMPv1; 'v2c': Use SNMPv2c; 'v3': User SNMPv3;
     */
    version: pulumi.Input<string>;
}
