// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosSrcEntryL4Type extends pulumi.CustomResource {
    /**
     * Get an existing DdosSrcEntryL4Type resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosSrcEntryL4TypeState, opts?: pulumi.CustomResourceOptions): DdosSrcEntryL4Type {
        return new DdosSrcEntryL4Type(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosSrcEntryL4Type:DdosSrcEntryL4Type';

    /**
     * Returns true if the given object is an instance of DdosSrcEntryL4Type.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosSrcEntryL4Type {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosSrcEntryL4Type.__pulumiType;
    }

    /**
     * 'permit': Whitelist incoming packets for protocol; 'deny': Blacklist incoming packets for protocol;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    /**
     * 'tcp': tcp; 'udp': udp; 'icmp': icmp; 'other': other;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * SrcEntryName
     */
    public readonly srcEntryName!: pulumi.Output<string>;
    public readonly template!: pulumi.Output<outputs.DdosSrcEntryL4TypeTemplate | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosSrcEntryL4Type resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosSrcEntryL4TypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosSrcEntryL4TypeArgs | DdosSrcEntryL4TypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosSrcEntryL4TypeState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["srcEntryName"] = state ? state.srcEntryName : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosSrcEntryL4TypeArgs | undefined;
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.srcEntryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcEntryName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["srcEntryName"] = args ? args.srcEntryName : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosSrcEntryL4Type.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosSrcEntryL4Type resources.
 */
export interface DdosSrcEntryL4TypeState {
    /**
     * 'permit': Whitelist incoming packets for protocol; 'deny': Blacklist incoming packets for protocol;
     */
    action?: pulumi.Input<string>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * 'tcp': tcp; 'udp': udp; 'icmp': icmp; 'other': other;
     */
    protocol?: pulumi.Input<string>;
    /**
     * SrcEntryName
     */
    srcEntryName?: pulumi.Input<string>;
    template?: pulumi.Input<inputs.DdosSrcEntryL4TypeTemplate>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosSrcEntryL4Type resource.
 */
export interface DdosSrcEntryL4TypeArgs {
    /**
     * 'permit': Whitelist incoming packets for protocol; 'deny': Blacklist incoming packets for protocol;
     */
    action?: pulumi.Input<string>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * 'tcp': tcp; 'udp': udp; 'icmp': icmp; 'other': other;
     */
    protocol: pulumi.Input<string>;
    /**
     * SrcEntryName
     */
    srcEntryName: pulumi.Input<string>;
    template?: pulumi.Input<inputs.DdosSrcEntryL4TypeTemplate>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
