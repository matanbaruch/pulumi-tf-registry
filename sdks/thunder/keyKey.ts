// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KeyKey extends pulumi.CustomResource {
    /**
     * Get an existing KeyKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyKeyState, opts?: pulumi.CustomResourceOptions): KeyKey {
        return new KeyKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/keyKey:KeyKey';

    /**
     * Returns true if the given object is an instance of KeyKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyKey.__pulumiType;
    }

    /**
     * KeyChainFlag
     */
    public readonly keyChainFlag!: pulumi.Output<string>;
    /**
     * KeyChainName
     */
    public readonly keyChainName!: pulumi.Output<string>;
    /**
     * Key identifier number
     */
    public readonly keyNumber!: pulumi.Output<number>;
    /**
     * Set key string (The key)
     */
    public readonly keyString!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a KeyKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyKeyArgs | KeyKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyKeyState | undefined;
            resourceInputs["keyChainFlag"] = state ? state.keyChainFlag : undefined;
            resourceInputs["keyChainName"] = state ? state.keyChainName : undefined;
            resourceInputs["keyNumber"] = state ? state.keyNumber : undefined;
            resourceInputs["keyString"] = state ? state.keyString : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as KeyKeyArgs | undefined;
            if ((!args || args.keyChainFlag === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyChainFlag'");
            }
            if ((!args || args.keyChainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyChainName'");
            }
            if ((!args || args.keyNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyNumber'");
            }
            resourceInputs["keyChainFlag"] = args ? args.keyChainFlag : undefined;
            resourceInputs["keyChainName"] = args ? args.keyChainName : undefined;
            resourceInputs["keyNumber"] = args ? args.keyNumber : undefined;
            resourceInputs["keyString"] = args ? args.keyString : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyKey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeyKey resources.
 */
export interface KeyKeyState {
    /**
     * KeyChainFlag
     */
    keyChainFlag?: pulumi.Input<string>;
    /**
     * KeyChainName
     */
    keyChainName?: pulumi.Input<string>;
    /**
     * Key identifier number
     */
    keyNumber?: pulumi.Input<number>;
    /**
     * Set key string (The key)
     */
    keyString?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyKey resource.
 */
export interface KeyKeyArgs {
    /**
     * KeyChainFlag
     */
    keyChainFlag: pulumi.Input<string>;
    /**
     * KeyChainName
     */
    keyChainName: pulumi.Input<string>;
    /**
     * Key identifier number
     */
    keyNumber: pulumi.Input<number>;
    /**
     * Set key string (The key)
     */
    keyString?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
