// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpServerEnableTrapsSlb extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerEnableTrapsSlb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerEnableTrapsSlbState, opts?: pulumi.CustomResourceOptions): SnmpServerEnableTrapsSlb {
        return new SnmpServerEnableTrapsSlb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerEnableTrapsSlb:SnmpServerEnableTrapsSlb';

    /**
     * Returns true if the given object is an instance of SnmpServerEnableTrapsSlb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerEnableTrapsSlb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerEnableTrapsSlb.__pulumiType;
    }

    /**
     * Enable all SLB traps
     */
    public readonly all!: pulumi.Output<number | undefined>;
    /**
     * Enable application buffer reach limit trap
     */
    public readonly applicationBufferLimit!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server/port bandwidth rate limit exceed trap
     */
    public readonly bwRateLimitExceed!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server/port bandwidth rate limit resume trap
     */
    public readonly bwRateLimitResume!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server gateway down trap
     */
    public readonly gatewayDown!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server gateway up trap
     */
    public readonly gatewayUp!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server connection limit trap
     */
    public readonly serverConnLimit!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server connection resume trap
     */
    public readonly serverConnResume!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server-disabled trap
     */
    public readonly serverDisabled!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server-down trap
     */
    public readonly serverDown!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB server selection failure trap
     */
    public readonly serverSelectionFailure!: pulumi.Output<number | undefined>;
    /**
     * Enable slb server up trap
     */
    public readonly serverUp!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service connection limit trap
     */
    public readonly serviceConnLimit!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service connection resume trap
     */
    public readonly serviceConnResume!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service-down trap
     */
    public readonly serviceDown!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service-group-down trap
     */
    public readonly serviceGroupDown!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service-group-member-down trap
     */
    public readonly serviceGroupMemberDown!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service-group-member-up trap
     */
    public readonly serviceGroupMemberUp!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service-group-up trap
     */
    public readonly serviceGroupUp!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB service-up trap
     */
    public readonly serviceUp!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Enable the virtual server reach conn-limit trap
     */
    public readonly vipConnlimit!: pulumi.Output<number | undefined>;
    /**
     * Enable the virtual server reach conn-rate-limit trap
     */
    public readonly vipConnratelimit!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB virtual server down trap
     */
    public readonly vipDown!: pulumi.Output<number | undefined>;
    /**
     * Enable the virtual port reach conn-limit trap
     */
    public readonly vipPortConnlimit!: pulumi.Output<number | undefined>;
    /**
     * Enable the virtual port reach conn-rate-limit trap
     */
    public readonly vipPortConnratelimit!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB virtual port down trap
     */
    public readonly vipPortDown!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB virtual port up trap
     */
    public readonly vipPortUp!: pulumi.Output<number | undefined>;
    /**
     * Enable SLB virtual server up trap
     */
    public readonly vipUp!: pulumi.Output<number | undefined>;

    /**
     * Create a SnmpServerEnableTrapsSlb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpServerEnableTrapsSlbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerEnableTrapsSlbArgs | SnmpServerEnableTrapsSlbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerEnableTrapsSlbState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["applicationBufferLimit"] = state ? state.applicationBufferLimit : undefined;
            resourceInputs["bwRateLimitExceed"] = state ? state.bwRateLimitExceed : undefined;
            resourceInputs["bwRateLimitResume"] = state ? state.bwRateLimitResume : undefined;
            resourceInputs["gatewayDown"] = state ? state.gatewayDown : undefined;
            resourceInputs["gatewayUp"] = state ? state.gatewayUp : undefined;
            resourceInputs["serverConnLimit"] = state ? state.serverConnLimit : undefined;
            resourceInputs["serverConnResume"] = state ? state.serverConnResume : undefined;
            resourceInputs["serverDisabled"] = state ? state.serverDisabled : undefined;
            resourceInputs["serverDown"] = state ? state.serverDown : undefined;
            resourceInputs["serverSelectionFailure"] = state ? state.serverSelectionFailure : undefined;
            resourceInputs["serverUp"] = state ? state.serverUp : undefined;
            resourceInputs["serviceConnLimit"] = state ? state.serviceConnLimit : undefined;
            resourceInputs["serviceConnResume"] = state ? state.serviceConnResume : undefined;
            resourceInputs["serviceDown"] = state ? state.serviceDown : undefined;
            resourceInputs["serviceGroupDown"] = state ? state.serviceGroupDown : undefined;
            resourceInputs["serviceGroupMemberDown"] = state ? state.serviceGroupMemberDown : undefined;
            resourceInputs["serviceGroupMemberUp"] = state ? state.serviceGroupMemberUp : undefined;
            resourceInputs["serviceGroupUp"] = state ? state.serviceGroupUp : undefined;
            resourceInputs["serviceUp"] = state ? state.serviceUp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vipConnlimit"] = state ? state.vipConnlimit : undefined;
            resourceInputs["vipConnratelimit"] = state ? state.vipConnratelimit : undefined;
            resourceInputs["vipDown"] = state ? state.vipDown : undefined;
            resourceInputs["vipPortConnlimit"] = state ? state.vipPortConnlimit : undefined;
            resourceInputs["vipPortConnratelimit"] = state ? state.vipPortConnratelimit : undefined;
            resourceInputs["vipPortDown"] = state ? state.vipPortDown : undefined;
            resourceInputs["vipPortUp"] = state ? state.vipPortUp : undefined;
            resourceInputs["vipUp"] = state ? state.vipUp : undefined;
        } else {
            const args = argsOrState as SnmpServerEnableTrapsSlbArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["applicationBufferLimit"] = args ? args.applicationBufferLimit : undefined;
            resourceInputs["bwRateLimitExceed"] = args ? args.bwRateLimitExceed : undefined;
            resourceInputs["bwRateLimitResume"] = args ? args.bwRateLimitResume : undefined;
            resourceInputs["gatewayDown"] = args ? args.gatewayDown : undefined;
            resourceInputs["gatewayUp"] = args ? args.gatewayUp : undefined;
            resourceInputs["serverConnLimit"] = args ? args.serverConnLimit : undefined;
            resourceInputs["serverConnResume"] = args ? args.serverConnResume : undefined;
            resourceInputs["serverDisabled"] = args ? args.serverDisabled : undefined;
            resourceInputs["serverDown"] = args ? args.serverDown : undefined;
            resourceInputs["serverSelectionFailure"] = args ? args.serverSelectionFailure : undefined;
            resourceInputs["serverUp"] = args ? args.serverUp : undefined;
            resourceInputs["serviceConnLimit"] = args ? args.serviceConnLimit : undefined;
            resourceInputs["serviceConnResume"] = args ? args.serviceConnResume : undefined;
            resourceInputs["serviceDown"] = args ? args.serviceDown : undefined;
            resourceInputs["serviceGroupDown"] = args ? args.serviceGroupDown : undefined;
            resourceInputs["serviceGroupMemberDown"] = args ? args.serviceGroupMemberDown : undefined;
            resourceInputs["serviceGroupMemberUp"] = args ? args.serviceGroupMemberUp : undefined;
            resourceInputs["serviceGroupUp"] = args ? args.serviceGroupUp : undefined;
            resourceInputs["serviceUp"] = args ? args.serviceUp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vipConnlimit"] = args ? args.vipConnlimit : undefined;
            resourceInputs["vipConnratelimit"] = args ? args.vipConnratelimit : undefined;
            resourceInputs["vipDown"] = args ? args.vipDown : undefined;
            resourceInputs["vipPortConnlimit"] = args ? args.vipPortConnlimit : undefined;
            resourceInputs["vipPortConnratelimit"] = args ? args.vipPortConnratelimit : undefined;
            resourceInputs["vipPortDown"] = args ? args.vipPortDown : undefined;
            resourceInputs["vipPortUp"] = args ? args.vipPortUp : undefined;
            resourceInputs["vipUp"] = args ? args.vipUp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerEnableTrapsSlb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerEnableTrapsSlb resources.
 */
export interface SnmpServerEnableTrapsSlbState {
    /**
     * Enable all SLB traps
     */
    all?: pulumi.Input<number>;
    /**
     * Enable application buffer reach limit trap
     */
    applicationBufferLimit?: pulumi.Input<number>;
    /**
     * Enable SLB server/port bandwidth rate limit exceed trap
     */
    bwRateLimitExceed?: pulumi.Input<number>;
    /**
     * Enable SLB server/port bandwidth rate limit resume trap
     */
    bwRateLimitResume?: pulumi.Input<number>;
    /**
     * Enable SLB server gateway down trap
     */
    gatewayDown?: pulumi.Input<number>;
    /**
     * Enable SLB server gateway up trap
     */
    gatewayUp?: pulumi.Input<number>;
    /**
     * Enable SLB server connection limit trap
     */
    serverConnLimit?: pulumi.Input<number>;
    /**
     * Enable SLB server connection resume trap
     */
    serverConnResume?: pulumi.Input<number>;
    /**
     * Enable SLB server-disabled trap
     */
    serverDisabled?: pulumi.Input<number>;
    /**
     * Enable SLB server-down trap
     */
    serverDown?: pulumi.Input<number>;
    /**
     * Enable SLB server selection failure trap
     */
    serverSelectionFailure?: pulumi.Input<number>;
    /**
     * Enable slb server up trap
     */
    serverUp?: pulumi.Input<number>;
    /**
     * Enable SLB service connection limit trap
     */
    serviceConnLimit?: pulumi.Input<number>;
    /**
     * Enable SLB service connection resume trap
     */
    serviceConnResume?: pulumi.Input<number>;
    /**
     * Enable SLB service-down trap
     */
    serviceDown?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-down trap
     */
    serviceGroupDown?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-member-down trap
     */
    serviceGroupMemberDown?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-member-up trap
     */
    serviceGroupMemberUp?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-up trap
     */
    serviceGroupUp?: pulumi.Input<number>;
    /**
     * Enable SLB service-up trap
     */
    serviceUp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable the virtual server reach conn-limit trap
     */
    vipConnlimit?: pulumi.Input<number>;
    /**
     * Enable the virtual server reach conn-rate-limit trap
     */
    vipConnratelimit?: pulumi.Input<number>;
    /**
     * Enable SLB virtual server down trap
     */
    vipDown?: pulumi.Input<number>;
    /**
     * Enable the virtual port reach conn-limit trap
     */
    vipPortConnlimit?: pulumi.Input<number>;
    /**
     * Enable the virtual port reach conn-rate-limit trap
     */
    vipPortConnratelimit?: pulumi.Input<number>;
    /**
     * Enable SLB virtual port down trap
     */
    vipPortDown?: pulumi.Input<number>;
    /**
     * Enable SLB virtual port up trap
     */
    vipPortUp?: pulumi.Input<number>;
    /**
     * Enable SLB virtual server up trap
     */
    vipUp?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SnmpServerEnableTrapsSlb resource.
 */
export interface SnmpServerEnableTrapsSlbArgs {
    /**
     * Enable all SLB traps
     */
    all?: pulumi.Input<number>;
    /**
     * Enable application buffer reach limit trap
     */
    applicationBufferLimit?: pulumi.Input<number>;
    /**
     * Enable SLB server/port bandwidth rate limit exceed trap
     */
    bwRateLimitExceed?: pulumi.Input<number>;
    /**
     * Enable SLB server/port bandwidth rate limit resume trap
     */
    bwRateLimitResume?: pulumi.Input<number>;
    /**
     * Enable SLB server gateway down trap
     */
    gatewayDown?: pulumi.Input<number>;
    /**
     * Enable SLB server gateway up trap
     */
    gatewayUp?: pulumi.Input<number>;
    /**
     * Enable SLB server connection limit trap
     */
    serverConnLimit?: pulumi.Input<number>;
    /**
     * Enable SLB server connection resume trap
     */
    serverConnResume?: pulumi.Input<number>;
    /**
     * Enable SLB server-disabled trap
     */
    serverDisabled?: pulumi.Input<number>;
    /**
     * Enable SLB server-down trap
     */
    serverDown?: pulumi.Input<number>;
    /**
     * Enable SLB server selection failure trap
     */
    serverSelectionFailure?: pulumi.Input<number>;
    /**
     * Enable slb server up trap
     */
    serverUp?: pulumi.Input<number>;
    /**
     * Enable SLB service connection limit trap
     */
    serviceConnLimit?: pulumi.Input<number>;
    /**
     * Enable SLB service connection resume trap
     */
    serviceConnResume?: pulumi.Input<number>;
    /**
     * Enable SLB service-down trap
     */
    serviceDown?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-down trap
     */
    serviceGroupDown?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-member-down trap
     */
    serviceGroupMemberDown?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-member-up trap
     */
    serviceGroupMemberUp?: pulumi.Input<number>;
    /**
     * Enable SLB service-group-up trap
     */
    serviceGroupUp?: pulumi.Input<number>;
    /**
     * Enable SLB service-up trap
     */
    serviceUp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable the virtual server reach conn-limit trap
     */
    vipConnlimit?: pulumi.Input<number>;
    /**
     * Enable the virtual server reach conn-rate-limit trap
     */
    vipConnratelimit?: pulumi.Input<number>;
    /**
     * Enable SLB virtual server down trap
     */
    vipDown?: pulumi.Input<number>;
    /**
     * Enable the virtual port reach conn-limit trap
     */
    vipPortConnlimit?: pulumi.Input<number>;
    /**
     * Enable the virtual port reach conn-rate-limit trap
     */
    vipPortConnratelimit?: pulumi.Input<number>;
    /**
     * Enable SLB virtual port down trap
     */
    vipPortDown?: pulumi.Input<number>;
    /**
     * Enable SLB virtual port up trap
     */
    vipPortUp?: pulumi.Input<number>;
    /**
     * Enable SLB virtual server up trap
     */
    vipUp?: pulumi.Input<number>;
}
