// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VisibilityMonitorSecondaryMonitor extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityMonitorSecondaryMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityMonitorSecondaryMonitorState, opts?: pulumi.CustomResourceOptions): VisibilityMonitorSecondaryMonitor {
        return new VisibilityMonitorSecondaryMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityMonitorSecondaryMonitor:VisibilityMonitorSecondaryMonitor';

    /**
     * Returns true if the given object is an instance of VisibilityMonitorSecondaryMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityMonitorSecondaryMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityMonitorSecondaryMonitor.__pulumiType;
    }

    public readonly debugLists!: pulumi.Output<outputs.VisibilityMonitorSecondaryMonitorDebugList[] | undefined>;
    public readonly deleteDebugFile!: pulumi.Output<outputs.VisibilityMonitorSecondaryMonitorDeleteDebugFile | undefined>;
    /**
     * Enable topk for secondary entities
     */
    public readonly monEntityTopk!: pulumi.Output<number | undefined>;
    public readonly replayDebugFile!: pulumi.Output<outputs.VisibilityMonitorSecondaryMonitorReplayDebugFile | undefined>;
    /**
     * 'service': Monitor traffic to any service;
     */
    public readonly secondaryMonitoringKey!: pulumi.Output<string>;
    /**
     * Enable topk for sources to secondary-entities
     */
    public readonly sourceEntityTopk!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VisibilityMonitorSecondaryMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VisibilityMonitorSecondaryMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityMonitorSecondaryMonitorArgs | VisibilityMonitorSecondaryMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityMonitorSecondaryMonitorState | undefined;
            resourceInputs["debugLists"] = state ? state.debugLists : undefined;
            resourceInputs["deleteDebugFile"] = state ? state.deleteDebugFile : undefined;
            resourceInputs["monEntityTopk"] = state ? state.monEntityTopk : undefined;
            resourceInputs["replayDebugFile"] = state ? state.replayDebugFile : undefined;
            resourceInputs["secondaryMonitoringKey"] = state ? state.secondaryMonitoringKey : undefined;
            resourceInputs["sourceEntityTopk"] = state ? state.sourceEntityTopk : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VisibilityMonitorSecondaryMonitorArgs | undefined;
            if ((!args || args.secondaryMonitoringKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryMonitoringKey'");
            }
            resourceInputs["debugLists"] = args ? args.debugLists : undefined;
            resourceInputs["deleteDebugFile"] = args ? args.deleteDebugFile : undefined;
            resourceInputs["monEntityTopk"] = args ? args.monEntityTopk : undefined;
            resourceInputs["replayDebugFile"] = args ? args.replayDebugFile : undefined;
            resourceInputs["secondaryMonitoringKey"] = args ? args.secondaryMonitoringKey : undefined;
            resourceInputs["sourceEntityTopk"] = args ? args.sourceEntityTopk : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityMonitorSecondaryMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityMonitorSecondaryMonitor resources.
 */
export interface VisibilityMonitorSecondaryMonitorState {
    debugLists?: pulumi.Input<pulumi.Input<inputs.VisibilityMonitorSecondaryMonitorDebugList>[]>;
    deleteDebugFile?: pulumi.Input<inputs.VisibilityMonitorSecondaryMonitorDeleteDebugFile>;
    /**
     * Enable topk for secondary entities
     */
    monEntityTopk?: pulumi.Input<number>;
    replayDebugFile?: pulumi.Input<inputs.VisibilityMonitorSecondaryMonitorReplayDebugFile>;
    /**
     * 'service': Monitor traffic to any service;
     */
    secondaryMonitoringKey?: pulumi.Input<string>;
    /**
     * Enable topk for sources to secondary-entities
     */
    sourceEntityTopk?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VisibilityMonitorSecondaryMonitor resource.
 */
export interface VisibilityMonitorSecondaryMonitorArgs {
    debugLists?: pulumi.Input<pulumi.Input<inputs.VisibilityMonitorSecondaryMonitorDebugList>[]>;
    deleteDebugFile?: pulumi.Input<inputs.VisibilityMonitorSecondaryMonitorDeleteDebugFile>;
    /**
     * Enable topk for secondary entities
     */
    monEntityTopk?: pulumi.Input<number>;
    replayDebugFile?: pulumi.Input<inputs.VisibilityMonitorSecondaryMonitorReplayDebugFile>;
    /**
     * 'service': Monitor traffic to any service;
     */
    secondaryMonitoringKey: pulumi.Input<string>;
    /**
     * Enable topk for sources to secondary-entities
     */
    sourceEntityTopk?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
