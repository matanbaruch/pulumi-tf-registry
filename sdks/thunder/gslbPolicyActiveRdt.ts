// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GslbPolicyActiveRdt extends pulumi.CustomResource {
    /**
     * Get an existing GslbPolicyActiveRdt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbPolicyActiveRdtState, opts?: pulumi.CustomResourceOptions): GslbPolicyActiveRdt {
        return new GslbPolicyActiveRdt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/gslbPolicyActiveRdt:GslbPolicyActiveRdt';

    /**
     * Returns true if the given object is an instance of GslbPolicyActiveRdt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GslbPolicyActiveRdt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GslbPolicyActiveRdt.__pulumiType;
    }

    /**
     * Active round-delay-time by controller
     */
    public readonly controller!: pulumi.Output<number | undefined>;
    /**
     * The difference between the round-delay-time, default is 0
     */
    public readonly difference!: pulumi.Output<number | undefined>;
    /**
     * Enable the active rdt
     */
    public readonly enable!: pulumi.Output<number | undefined>;
    /**
     * Break when no valid RDT
     */
    public readonly failBreak!: pulumi.Output<number | undefined>;
    /**
     * Ignore IP Address specified in IP List by ID
     */
    public readonly ignoreId!: pulumi.Output<number | undefined>;
    /**
     * Keep tracking client even round-delay-time samples are ready
     */
    public readonly keepTracking!: pulumi.Output<number | undefined>;
    /**
     * Limit of allowed RDT, default is 16383 (Limit, unit: millisecond)
     */
    public readonly limit!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable the round-delay-time to the controller
     */
    public readonly protoRdtEnable!: pulumi.Output<number | undefined>;
    /**
     * Specify samples number for round-delay-time (Number of samples,default is 5)
     */
    public readonly samples!: pulumi.Output<number | undefined>;
    /**
     * Single Shot RDT
     */
    public readonly singleShot!: pulumi.Output<number | undefined>;
    /**
     * Skip query if round-delay-time samples are not ready (Specify maximum skip count,default is 3)
     */
    public readonly skip!: pulumi.Output<number | undefined>;
    /**
     * Specify timeout if round-delay-time samples are not ready (Specify timeout, unit:sec,default is 3)
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * The difference percentage between the round-delay-time, default is 10 (Tolerance)
     */
    public readonly tolerance!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a GslbPolicyActiveRdt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GslbPolicyActiveRdtArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbPolicyActiveRdtArgs | GslbPolicyActiveRdtState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbPolicyActiveRdtState | undefined;
            resourceInputs["controller"] = state ? state.controller : undefined;
            resourceInputs["difference"] = state ? state.difference : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["failBreak"] = state ? state.failBreak : undefined;
            resourceInputs["ignoreId"] = state ? state.ignoreId : undefined;
            resourceInputs["keepTracking"] = state ? state.keepTracking : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protoRdtEnable"] = state ? state.protoRdtEnable : undefined;
            resourceInputs["samples"] = state ? state.samples : undefined;
            resourceInputs["singleShot"] = state ? state.singleShot : undefined;
            resourceInputs["skip"] = state ? state.skip : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["tolerance"] = state ? state.tolerance : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GslbPolicyActiveRdtArgs | undefined;
            resourceInputs["controller"] = args ? args.controller : undefined;
            resourceInputs["difference"] = args ? args.difference : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["failBreak"] = args ? args.failBreak : undefined;
            resourceInputs["ignoreId"] = args ? args.ignoreId : undefined;
            resourceInputs["keepTracking"] = args ? args.keepTracking : undefined;
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protoRdtEnable"] = args ? args.protoRdtEnable : undefined;
            resourceInputs["samples"] = args ? args.samples : undefined;
            resourceInputs["singleShot"] = args ? args.singleShot : undefined;
            resourceInputs["skip"] = args ? args.skip : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["tolerance"] = args ? args.tolerance : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GslbPolicyActiveRdt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GslbPolicyActiveRdt resources.
 */
export interface GslbPolicyActiveRdtState {
    /**
     * Active round-delay-time by controller
     */
    controller?: pulumi.Input<number>;
    /**
     * The difference between the round-delay-time, default is 0
     */
    difference?: pulumi.Input<number>;
    /**
     * Enable the active rdt
     */
    enable?: pulumi.Input<number>;
    /**
     * Break when no valid RDT
     */
    failBreak?: pulumi.Input<number>;
    /**
     * Ignore IP Address specified in IP List by ID
     */
    ignoreId?: pulumi.Input<number>;
    /**
     * Keep tracking client even round-delay-time samples are ready
     */
    keepTracking?: pulumi.Input<number>;
    /**
     * Limit of allowed RDT, default is 16383 (Limit, unit: millisecond)
     */
    limit?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable the round-delay-time to the controller
     */
    protoRdtEnable?: pulumi.Input<number>;
    /**
     * Specify samples number for round-delay-time (Number of samples,default is 5)
     */
    samples?: pulumi.Input<number>;
    /**
     * Single Shot RDT
     */
    singleShot?: pulumi.Input<number>;
    /**
     * Skip query if round-delay-time samples are not ready (Specify maximum skip count,default is 3)
     */
    skip?: pulumi.Input<number>;
    /**
     * Specify timeout if round-delay-time samples are not ready (Specify timeout, unit:sec,default is 3)
     */
    timeout?: pulumi.Input<number>;
    /**
     * The difference percentage between the round-delay-time, default is 10 (Tolerance)
     */
    tolerance?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GslbPolicyActiveRdt resource.
 */
export interface GslbPolicyActiveRdtArgs {
    /**
     * Active round-delay-time by controller
     */
    controller?: pulumi.Input<number>;
    /**
     * The difference between the round-delay-time, default is 0
     */
    difference?: pulumi.Input<number>;
    /**
     * Enable the active rdt
     */
    enable?: pulumi.Input<number>;
    /**
     * Break when no valid RDT
     */
    failBreak?: pulumi.Input<number>;
    /**
     * Ignore IP Address specified in IP List by ID
     */
    ignoreId?: pulumi.Input<number>;
    /**
     * Keep tracking client even round-delay-time samples are ready
     */
    keepTracking?: pulumi.Input<number>;
    /**
     * Limit of allowed RDT, default is 16383 (Limit, unit: millisecond)
     */
    limit?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable the round-delay-time to the controller
     */
    protoRdtEnable?: pulumi.Input<number>;
    /**
     * Specify samples number for round-delay-time (Number of samples,default is 5)
     */
    samples?: pulumi.Input<number>;
    /**
     * Single Shot RDT
     */
    singleShot?: pulumi.Input<number>;
    /**
     * Skip query if round-delay-time samples are not ready (Specify maximum skip count,default is 3)
     */
    skip?: pulumi.Input<number>;
    /**
     * Specify timeout if round-delay-time samples are not ready (Specify timeout, unit:sec,default is 3)
     */
    timeout?: pulumi.Input<number>;
    /**
     * The difference percentage between the round-delay-time, default is 10 (Tolerance)
     */
    tolerance?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
