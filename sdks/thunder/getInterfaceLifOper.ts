// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInterfaceLifOper(args: GetInterfaceLifOperArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfaceLifOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getInterfaceLifOper:getInterfaceLifOper", {
        "id": args.id,
        "ifname": args.ifname,
        "oper": args.oper,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInterfaceLifOper.
 */
export interface GetInterfaceLifOperArgs {
    id?: string;
    ifname: string;
    oper?: inputs.GetInterfaceLifOperOper;
}

/**
 * A collection of values returned by getInterfaceLifOper.
 */
export interface GetInterfaceLifOperResult {
    readonly id: string;
    readonly ifname: string;
    readonly oper?: outputs.GetInterfaceLifOperOper;
}
export function getInterfaceLifOperOutput(args: GetInterfaceLifOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfaceLifOperResult> {
    return pulumi.output(args).apply((a: any) => getInterfaceLifOper(a, opts))
}

/**
 * A collection of arguments for invoking getInterfaceLifOper.
 */
export interface GetInterfaceLifOperOutputArgs {
    id?: pulumi.Input<string>;
    ifname: pulumi.Input<string>;
    oper?: pulumi.Input<inputs.GetInterfaceLifOperOperArgs>;
}
