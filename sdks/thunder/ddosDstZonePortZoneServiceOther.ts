// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstZonePortZoneServiceOther extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstZonePortZoneServiceOther resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstZonePortZoneServiceOtherState, opts?: pulumi.CustomResourceOptions): DdosDstZonePortZoneServiceOther {
        return new DdosDstZonePortZoneServiceOther(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstZonePortZoneServiceOther:DdosDstZonePortZoneServiceOther';

    /**
     * Returns true if the given object is an instance of DdosDstZonePortZoneServiceOther.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstZonePortZoneServiceOther {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstZonePortZoneServiceOther.__pulumiType;
    }

    /**
     * Idle age for ip entry
     */
    public readonly age!: pulumi.Output<number | undefined>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    public readonly applyPolicyOnOverflow!: pulumi.Output<number | undefined>;
    /**
     * Configure default-action-list
     */
    public readonly defaultActionList!: pulumi.Output<string | undefined>;
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    public readonly deny!: pulumi.Output<number | undefined>;
    public readonly dynamicEntryOverflowPolicyLists!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherDynamicEntryOverflowPolicyList[] | undefined>;
    /**
     * Apply class-list overflow policy upon exceeding dynamic entry count specified for this zone port or each class-list
     */
    public readonly enableClassListOverflow!: pulumi.Output<number | undefined>;
    /**
     * Enable ddos top-k source IP detection
     */
    public readonly enableTopK!: pulumi.Output<number | undefined>;
    /**
     * Enable ddos top-k destination IP detection
     */
    public readonly enableTopKDestination!: pulumi.Output<number | undefined>;
    /**
     * De-escalate faster in standalone mode
     */
    public readonly fasterDeEscalation!: pulumi.Output<number | undefined>;
    public readonly glidCfg!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherGlidCfg | undefined>;
    /**
     * Configure IP Filter
     */
    public readonly ipFilteringPolicy!: pulumi.Output<string | undefined>;
    public readonly ipFilteringPolicyOper!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherIpFilteringPolicyOper | undefined>;
    public readonly levelLists!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherLevelList[] | undefined>;
    /**
     * Toggle manual mode to use fix templates
     */
    public readonly manualModeEnable!: pulumi.Output<number | undefined>;
    public readonly manualModeLists!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherManualModeList[] | undefined>;
    /**
     * Maximum count for dynamic source zone service entry
     */
    public readonly maxDynamicEntryCount!: pulumi.Output<number | undefined>;
    /**
     * Only allow outbound traffic
     */
    public readonly outboundOnly!: pulumi.Output<number | undefined>;
    public readonly patternRecognition!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherPatternRecognition | undefined>;
    public readonly patternRecognitionPuDetails!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherPatternRecognitionPuDetails | undefined>;
    public readonly portInd!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherPortInd | undefined>;
    /**
     * 'other': other;
     */
    public readonly portOther!: pulumi.Output<string>;
    public readonly progressionTracking!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherProgressionTracking | undefined>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    public readonly setCounterBaseVal!: pulumi.Output<number | undefined>;
    /**
     * Enable all sFlow polling options under this zone port
     */
    public readonly sflowCommon!: pulumi.Output<number | undefined>;
    /**
     * Enable sFlow packet-level counter polling
     */
    public readonly sflowPackets!: pulumi.Output<number | undefined>;
    public readonly sflowTcp!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherSflowTcp | undefined>;
    public readonly srcBasedPolicyLists!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherSrcBasedPolicyList[] | undefined>;
    /**
     * Enable stateful tracking of sessions (Default is stateless)
     */
    public readonly stateful!: pulumi.Output<number | undefined>;
    public readonly topkDestinations!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherTopkDestinations | undefined>;
    /**
     * Maximum number of records to show in topk
     */
    public readonly topkDstNumRecords!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of records to show in topk
     */
    public readonly topkNumRecords!: pulumi.Output<number | undefined>;
    public readonly topkSources!: pulumi.Output<outputs.DdosDstZonePortZoneServiceOtherTopkSources | undefined>;
    /**
     * No limit for maximum dynamic src entry count
     */
    public readonly unlimitedDynamicEntryCount!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * ZoneName
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a DdosDstZonePortZoneServiceOther resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstZonePortZoneServiceOtherArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstZonePortZoneServiceOtherArgs | DdosDstZonePortZoneServiceOtherState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstZonePortZoneServiceOtherState | undefined;
            resourceInputs["age"] = state ? state.age : undefined;
            resourceInputs["applyPolicyOnOverflow"] = state ? state.applyPolicyOnOverflow : undefined;
            resourceInputs["defaultActionList"] = state ? state.defaultActionList : undefined;
            resourceInputs["deny"] = state ? state.deny : undefined;
            resourceInputs["dynamicEntryOverflowPolicyLists"] = state ? state.dynamicEntryOverflowPolicyLists : undefined;
            resourceInputs["enableClassListOverflow"] = state ? state.enableClassListOverflow : undefined;
            resourceInputs["enableTopK"] = state ? state.enableTopK : undefined;
            resourceInputs["enableTopKDestination"] = state ? state.enableTopKDestination : undefined;
            resourceInputs["fasterDeEscalation"] = state ? state.fasterDeEscalation : undefined;
            resourceInputs["glidCfg"] = state ? state.glidCfg : undefined;
            resourceInputs["ipFilteringPolicy"] = state ? state.ipFilteringPolicy : undefined;
            resourceInputs["ipFilteringPolicyOper"] = state ? state.ipFilteringPolicyOper : undefined;
            resourceInputs["levelLists"] = state ? state.levelLists : undefined;
            resourceInputs["manualModeEnable"] = state ? state.manualModeEnable : undefined;
            resourceInputs["manualModeLists"] = state ? state.manualModeLists : undefined;
            resourceInputs["maxDynamicEntryCount"] = state ? state.maxDynamicEntryCount : undefined;
            resourceInputs["outboundOnly"] = state ? state.outboundOnly : undefined;
            resourceInputs["patternRecognition"] = state ? state.patternRecognition : undefined;
            resourceInputs["patternRecognitionPuDetails"] = state ? state.patternRecognitionPuDetails : undefined;
            resourceInputs["portInd"] = state ? state.portInd : undefined;
            resourceInputs["portOther"] = state ? state.portOther : undefined;
            resourceInputs["progressionTracking"] = state ? state.progressionTracking : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["setCounterBaseVal"] = state ? state.setCounterBaseVal : undefined;
            resourceInputs["sflowCommon"] = state ? state.sflowCommon : undefined;
            resourceInputs["sflowPackets"] = state ? state.sflowPackets : undefined;
            resourceInputs["sflowTcp"] = state ? state.sflowTcp : undefined;
            resourceInputs["srcBasedPolicyLists"] = state ? state.srcBasedPolicyLists : undefined;
            resourceInputs["stateful"] = state ? state.stateful : undefined;
            resourceInputs["topkDestinations"] = state ? state.topkDestinations : undefined;
            resourceInputs["topkDstNumRecords"] = state ? state.topkDstNumRecords : undefined;
            resourceInputs["topkNumRecords"] = state ? state.topkNumRecords : undefined;
            resourceInputs["topkSources"] = state ? state.topkSources : undefined;
            resourceInputs["unlimitedDynamicEntryCount"] = state ? state.unlimitedDynamicEntryCount : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as DdosDstZonePortZoneServiceOtherArgs | undefined;
            if ((!args || args.portOther === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portOther'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["age"] = args ? args.age : undefined;
            resourceInputs["applyPolicyOnOverflow"] = args ? args.applyPolicyOnOverflow : undefined;
            resourceInputs["defaultActionList"] = args ? args.defaultActionList : undefined;
            resourceInputs["deny"] = args ? args.deny : undefined;
            resourceInputs["dynamicEntryOverflowPolicyLists"] = args ? args.dynamicEntryOverflowPolicyLists : undefined;
            resourceInputs["enableClassListOverflow"] = args ? args.enableClassListOverflow : undefined;
            resourceInputs["enableTopK"] = args ? args.enableTopK : undefined;
            resourceInputs["enableTopKDestination"] = args ? args.enableTopKDestination : undefined;
            resourceInputs["fasterDeEscalation"] = args ? args.fasterDeEscalation : undefined;
            resourceInputs["glidCfg"] = args ? args.glidCfg : undefined;
            resourceInputs["ipFilteringPolicy"] = args ? args.ipFilteringPolicy : undefined;
            resourceInputs["ipFilteringPolicyOper"] = args ? args.ipFilteringPolicyOper : undefined;
            resourceInputs["levelLists"] = args ? args.levelLists : undefined;
            resourceInputs["manualModeEnable"] = args ? args.manualModeEnable : undefined;
            resourceInputs["manualModeLists"] = args ? args.manualModeLists : undefined;
            resourceInputs["maxDynamicEntryCount"] = args ? args.maxDynamicEntryCount : undefined;
            resourceInputs["outboundOnly"] = args ? args.outboundOnly : undefined;
            resourceInputs["patternRecognition"] = args ? args.patternRecognition : undefined;
            resourceInputs["patternRecognitionPuDetails"] = args ? args.patternRecognitionPuDetails : undefined;
            resourceInputs["portInd"] = args ? args.portInd : undefined;
            resourceInputs["portOther"] = args ? args.portOther : undefined;
            resourceInputs["progressionTracking"] = args ? args.progressionTracking : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["setCounterBaseVal"] = args ? args.setCounterBaseVal : undefined;
            resourceInputs["sflowCommon"] = args ? args.sflowCommon : undefined;
            resourceInputs["sflowPackets"] = args ? args.sflowPackets : undefined;
            resourceInputs["sflowTcp"] = args ? args.sflowTcp : undefined;
            resourceInputs["srcBasedPolicyLists"] = args ? args.srcBasedPolicyLists : undefined;
            resourceInputs["stateful"] = args ? args.stateful : undefined;
            resourceInputs["topkDestinations"] = args ? args.topkDestinations : undefined;
            resourceInputs["topkDstNumRecords"] = args ? args.topkDstNumRecords : undefined;
            resourceInputs["topkNumRecords"] = args ? args.topkNumRecords : undefined;
            resourceInputs["topkSources"] = args ? args.topkSources : undefined;
            resourceInputs["unlimitedDynamicEntryCount"] = args ? args.unlimitedDynamicEntryCount : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstZonePortZoneServiceOther.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstZonePortZoneServiceOther resources.
 */
export interface DdosDstZonePortZoneServiceOtherState {
    /**
     * Idle age for ip entry
     */
    age?: pulumi.Input<number>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    applyPolicyOnOverflow?: pulumi.Input<number>;
    /**
     * Configure default-action-list
     */
    defaultActionList?: pulumi.Input<string>;
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    deny?: pulumi.Input<number>;
    dynamicEntryOverflowPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherDynamicEntryOverflowPolicyList>[]>;
    /**
     * Apply class-list overflow policy upon exceeding dynamic entry count specified for this zone port or each class-list
     */
    enableClassListOverflow?: pulumi.Input<number>;
    /**
     * Enable ddos top-k source IP detection
     */
    enableTopK?: pulumi.Input<number>;
    /**
     * Enable ddos top-k destination IP detection
     */
    enableTopKDestination?: pulumi.Input<number>;
    /**
     * De-escalate faster in standalone mode
     */
    fasterDeEscalation?: pulumi.Input<number>;
    glidCfg?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherGlidCfg>;
    /**
     * Configure IP Filter
     */
    ipFilteringPolicy?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherIpFilteringPolicyOper>;
    levelLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherLevelList>[]>;
    /**
     * Toggle manual mode to use fix templates
     */
    manualModeEnable?: pulumi.Input<number>;
    manualModeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherManualModeList>[]>;
    /**
     * Maximum count for dynamic source zone service entry
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    /**
     * Only allow outbound traffic
     */
    outboundOnly?: pulumi.Input<number>;
    patternRecognition?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherPatternRecognition>;
    patternRecognitionPuDetails?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherPatternRecognitionPuDetails>;
    portInd?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherPortInd>;
    /**
     * 'other': other;
     */
    portOther?: pulumi.Input<string>;
    progressionTracking?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherProgressionTracking>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    /**
     * Enable all sFlow polling options under this zone port
     */
    sflowCommon?: pulumi.Input<number>;
    /**
     * Enable sFlow packet-level counter polling
     */
    sflowPackets?: pulumi.Input<number>;
    sflowTcp?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherSflowTcp>;
    srcBasedPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherSrcBasedPolicyList>[]>;
    /**
     * Enable stateful tracking of sessions (Default is stateless)
     */
    stateful?: pulumi.Input<number>;
    topkDestinations?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherTopkDestinations>;
    /**
     * Maximum number of records to show in topk
     */
    topkDstNumRecords?: pulumi.Input<number>;
    /**
     * Maximum number of records to show in topk
     */
    topkNumRecords?: pulumi.Input<number>;
    topkSources?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherTopkSources>;
    /**
     * No limit for maximum dynamic src entry count
     */
    unlimitedDynamicEntryCount?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDstZonePortZoneServiceOther resource.
 */
export interface DdosDstZonePortZoneServiceOtherArgs {
    /**
     * Idle age for ip entry
     */
    age?: pulumi.Input<number>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    applyPolicyOnOverflow?: pulumi.Input<number>;
    /**
     * Configure default-action-list
     */
    defaultActionList?: pulumi.Input<string>;
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    deny?: pulumi.Input<number>;
    dynamicEntryOverflowPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherDynamicEntryOverflowPolicyList>[]>;
    /**
     * Apply class-list overflow policy upon exceeding dynamic entry count specified for this zone port or each class-list
     */
    enableClassListOverflow?: pulumi.Input<number>;
    /**
     * Enable ddos top-k source IP detection
     */
    enableTopK?: pulumi.Input<number>;
    /**
     * Enable ddos top-k destination IP detection
     */
    enableTopKDestination?: pulumi.Input<number>;
    /**
     * De-escalate faster in standalone mode
     */
    fasterDeEscalation?: pulumi.Input<number>;
    glidCfg?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherGlidCfg>;
    /**
     * Configure IP Filter
     */
    ipFilteringPolicy?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherIpFilteringPolicyOper>;
    levelLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherLevelList>[]>;
    /**
     * Toggle manual mode to use fix templates
     */
    manualModeEnable?: pulumi.Input<number>;
    manualModeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherManualModeList>[]>;
    /**
     * Maximum count for dynamic source zone service entry
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    /**
     * Only allow outbound traffic
     */
    outboundOnly?: pulumi.Input<number>;
    patternRecognition?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherPatternRecognition>;
    patternRecognitionPuDetails?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherPatternRecognitionPuDetails>;
    portInd?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherPortInd>;
    /**
     * 'other': other;
     */
    portOther: pulumi.Input<string>;
    progressionTracking?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherProgressionTracking>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    protocol: pulumi.Input<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    /**
     * Enable all sFlow polling options under this zone port
     */
    sflowCommon?: pulumi.Input<number>;
    /**
     * Enable sFlow packet-level counter polling
     */
    sflowPackets?: pulumi.Input<number>;
    sflowTcp?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherSflowTcp>;
    srcBasedPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherSrcBasedPolicyList>[]>;
    /**
     * Enable stateful tracking of sessions (Default is stateless)
     */
    stateful?: pulumi.Input<number>;
    topkDestinations?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherTopkDestinations>;
    /**
     * Maximum number of records to show in topk
     */
    topkDstNumRecords?: pulumi.Input<number>;
    /**
     * Maximum number of records to show in topk
     */
    topkNumRecords?: pulumi.Input<number>;
    topkSources?: pulumi.Input<inputs.DdosDstZonePortZoneServiceOtherTopkSources>;
    /**
     * No limit for maximum dynamic src entry count
     */
    unlimitedDynamicEntryCount?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName: pulumi.Input<string>;
}
