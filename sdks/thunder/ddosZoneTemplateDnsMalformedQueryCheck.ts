// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DdosZoneTemplateDnsMalformedQueryCheck extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneTemplateDnsMalformedQueryCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneTemplateDnsMalformedQueryCheckState, opts?: pulumi.CustomResourceOptions): DdosZoneTemplateDnsMalformedQueryCheck {
        return new DdosZoneTemplateDnsMalformedQueryCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneTemplateDnsMalformedQueryCheck:DdosZoneTemplateDnsMalformedQueryCheck';

    /**
     * Returns true if the given object is an instance of DdosZoneTemplateDnsMalformedQueryCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneTemplateDnsMalformedQueryCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneTemplateDnsMalformedQueryCheck.__pulumiType;
    }

    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'reset': Reset client
     * connection;
     */
    public readonly dnsMalformedQueryAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take
     */
    public readonly dnsMalformedQueryActionListName!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'disable': When malform check is enabled, TPS always drops DNS query with non query opcode, this option disables this
     * opcode check;
     */
    public readonly nonQueryOpcodeCheck!: pulumi.Output<string | undefined>;
    /**
     * Bypass DNS fragmented and TCP segmented Queries(Default: dropped)
     */
    public readonly skipMultiPacketCheck!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * 'basic-header-check': Basic header validation for DNS TCP/UDP queries; 'extended-header-check': Extended header/query
     * validation for DNS TCP/UDP queries; 'disable': Disable Malform query validation for DNS TCP/UDP;
     */
    public readonly validationType!: pulumi.Output<string | undefined>;

    /**
     * Create a DdosZoneTemplateDnsMalformedQueryCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosZoneTemplateDnsMalformedQueryCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneTemplateDnsMalformedQueryCheckArgs | DdosZoneTemplateDnsMalformedQueryCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneTemplateDnsMalformedQueryCheckState | undefined;
            resourceInputs["dnsMalformedQueryAction"] = state ? state.dnsMalformedQueryAction : undefined;
            resourceInputs["dnsMalformedQueryActionListName"] = state ? state.dnsMalformedQueryActionListName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonQueryOpcodeCheck"] = state ? state.nonQueryOpcodeCheck : undefined;
            resourceInputs["skipMultiPacketCheck"] = state ? state.skipMultiPacketCheck : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["validationType"] = state ? state.validationType : undefined;
        } else {
            const args = argsOrState as DdosZoneTemplateDnsMalformedQueryCheckArgs | undefined;
            resourceInputs["dnsMalformedQueryAction"] = args ? args.dnsMalformedQueryAction : undefined;
            resourceInputs["dnsMalformedQueryActionListName"] = args ? args.dnsMalformedQueryActionListName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonQueryOpcodeCheck"] = args ? args.nonQueryOpcodeCheck : undefined;
            resourceInputs["skipMultiPacketCheck"] = args ? args.skipMultiPacketCheck : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["validationType"] = args ? args.validationType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneTemplateDnsMalformedQueryCheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneTemplateDnsMalformedQueryCheck resources.
 */
export interface DdosZoneTemplateDnsMalformedQueryCheckState {
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'reset': Reset client
     * connection;
     */
    dnsMalformedQueryAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    dnsMalformedQueryActionListName?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'disable': When malform check is enabled, TPS always drops DNS query with non query opcode, this option disables this
     * opcode check;
     */
    nonQueryOpcodeCheck?: pulumi.Input<string>;
    /**
     * Bypass DNS fragmented and TCP segmented Queries(Default: dropped)
     */
    skipMultiPacketCheck?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'basic-header-check': Basic header validation for DNS TCP/UDP queries; 'extended-header-check': Extended header/query
     * validation for DNS TCP/UDP queries; 'disable': Disable Malform query validation for DNS TCP/UDP;
     */
    validationType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosZoneTemplateDnsMalformedQueryCheck resource.
 */
export interface DdosZoneTemplateDnsMalformedQueryCheckArgs {
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'reset': Reset client
     * connection;
     */
    dnsMalformedQueryAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    dnsMalformedQueryActionListName?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'disable': When malform check is enabled, TPS always drops DNS query with non query opcode, this option disables this
     * opcode check;
     */
    nonQueryOpcodeCheck?: pulumi.Input<string>;
    /**
     * Bypass DNS fragmented and TCP segmented Queries(Default: dropped)
     */
    skipMultiPacketCheck?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'basic-header-check': Basic header validation for DNS TCP/UDP queries; 'extended-header-check': Extended header/query
     * validation for DNS TCP/UDP queries; 'disable': Disable Malform query validation for DNS TCP/UDP;
     */
    validationType?: pulumi.Input<string>;
}
