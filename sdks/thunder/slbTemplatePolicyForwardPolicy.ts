// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplatePolicyForwardPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplatePolicyForwardPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplatePolicyForwardPolicyState, opts?: pulumi.CustomResourceOptions): SlbTemplatePolicyForwardPolicy {
        return new SlbTemplatePolicyForwardPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplatePolicyForwardPolicy:SlbTemplatePolicyForwardPolicy';

    /**
     * Returns true if the given object is an instance of SlbTemplatePolicyForwardPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplatePolicyForwardPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplatePolicyForwardPolicy.__pulumiType;
    }

    /**
     * Enable acos event logging
     */
    public readonly acosEventLog!: pulumi.Output<number | undefined>;
    public readonly actionLists!: pulumi.Output<outputs.SlbTemplatePolicyForwardPolicyActionList[] | undefined>;
    public readonly dualStackActionLists!: pulumi.Output<outputs.SlbTemplatePolicyForwardPolicyDualStackActionList[] | undefined>;
    /**
     * Enable adv-match rules and deactive all the other kinds of destination rules
     */
    public readonly enableAdvMatch!: pulumi.Output<number | undefined>;
    public readonly filterings!: pulumi.Output<outputs.SlbTemplatePolicyForwardPolicyFiltering[] | undefined>;
    /**
     * Forward HTTP CONNECT request to ICAP server
     */
    public readonly forwardHttpConnectToIcap!: pulumi.Output<number | undefined>;
    /**
     * Enable local logging
     */
    public readonly localLogging!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Inspects only first request of a connection
     */
    public readonly noClientConnReuse!: pulumi.Output<number | undefined>;
    /**
     * ICAP reqmod template (Reqmod ICAP Template Name)
     */
    public readonly reqmodIcap!: pulumi.Output<string | undefined>;
    /**
     * Wait for web category to be resolved before taking proxy decision
     */
    public readonly requireWebCategory!: pulumi.Output<number | undefined>;
    public readonly sanFilterings!: pulumi.Output<outputs.SlbTemplatePolicyForwardPolicySanFiltering[] | undefined>;
    public readonly sourceLists!: pulumi.Output<outputs.SlbTemplatePolicyForwardPolicySourceList[] | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplatePolicyForwardPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplatePolicyForwardPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplatePolicyForwardPolicyArgs | SlbTemplatePolicyForwardPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplatePolicyForwardPolicyState | undefined;
            resourceInputs["acosEventLog"] = state ? state.acosEventLog : undefined;
            resourceInputs["actionLists"] = state ? state.actionLists : undefined;
            resourceInputs["dualStackActionLists"] = state ? state.dualStackActionLists : undefined;
            resourceInputs["enableAdvMatch"] = state ? state.enableAdvMatch : undefined;
            resourceInputs["filterings"] = state ? state.filterings : undefined;
            resourceInputs["forwardHttpConnectToIcap"] = state ? state.forwardHttpConnectToIcap : undefined;
            resourceInputs["localLogging"] = state ? state.localLogging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noClientConnReuse"] = state ? state.noClientConnReuse : undefined;
            resourceInputs["reqmodIcap"] = state ? state.reqmodIcap : undefined;
            resourceInputs["requireWebCategory"] = state ? state.requireWebCategory : undefined;
            resourceInputs["sanFilterings"] = state ? state.sanFilterings : undefined;
            resourceInputs["sourceLists"] = state ? state.sourceLists : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplatePolicyForwardPolicyArgs | undefined;
            resourceInputs["acosEventLog"] = args ? args.acosEventLog : undefined;
            resourceInputs["actionLists"] = args ? args.actionLists : undefined;
            resourceInputs["dualStackActionLists"] = args ? args.dualStackActionLists : undefined;
            resourceInputs["enableAdvMatch"] = args ? args.enableAdvMatch : undefined;
            resourceInputs["filterings"] = args ? args.filterings : undefined;
            resourceInputs["forwardHttpConnectToIcap"] = args ? args.forwardHttpConnectToIcap : undefined;
            resourceInputs["localLogging"] = args ? args.localLogging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noClientConnReuse"] = args ? args.noClientConnReuse : undefined;
            resourceInputs["reqmodIcap"] = args ? args.reqmodIcap : undefined;
            resourceInputs["requireWebCategory"] = args ? args.requireWebCategory : undefined;
            resourceInputs["sanFilterings"] = args ? args.sanFilterings : undefined;
            resourceInputs["sourceLists"] = args ? args.sourceLists : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplatePolicyForwardPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplatePolicyForwardPolicy resources.
 */
export interface SlbTemplatePolicyForwardPolicyState {
    /**
     * Enable acos event logging
     */
    acosEventLog?: pulumi.Input<number>;
    actionLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyActionList>[]>;
    dualStackActionLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyDualStackActionList>[]>;
    /**
     * Enable adv-match rules and deactive all the other kinds of destination rules
     */
    enableAdvMatch?: pulumi.Input<number>;
    filterings?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyFiltering>[]>;
    /**
     * Forward HTTP CONNECT request to ICAP server
     */
    forwardHttpConnectToIcap?: pulumi.Input<number>;
    /**
     * Enable local logging
     */
    localLogging?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Inspects only first request of a connection
     */
    noClientConnReuse?: pulumi.Input<number>;
    /**
     * ICAP reqmod template (Reqmod ICAP Template Name)
     */
    reqmodIcap?: pulumi.Input<string>;
    /**
     * Wait for web category to be resolved before taking proxy decision
     */
    requireWebCategory?: pulumi.Input<number>;
    sanFilterings?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicySanFiltering>[]>;
    sourceLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicySourceList>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplatePolicyForwardPolicy resource.
 */
export interface SlbTemplatePolicyForwardPolicyArgs {
    /**
     * Enable acos event logging
     */
    acosEventLog?: pulumi.Input<number>;
    actionLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyActionList>[]>;
    dualStackActionLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyDualStackActionList>[]>;
    /**
     * Enable adv-match rules and deactive all the other kinds of destination rules
     */
    enableAdvMatch?: pulumi.Input<number>;
    filterings?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyFiltering>[]>;
    /**
     * Forward HTTP CONNECT request to ICAP server
     */
    forwardHttpConnectToIcap?: pulumi.Input<number>;
    /**
     * Enable local logging
     */
    localLogging?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Inspects only first request of a connection
     */
    noClientConnReuse?: pulumi.Input<number>;
    /**
     * ICAP reqmod template (Reqmod ICAP Template Name)
     */
    reqmodIcap?: pulumi.Input<string>;
    /**
     * Wait for web category to be resolved before taking proxy decision
     */
    requireWebCategory?: pulumi.Input<number>;
    sanFilterings?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicySanFiltering>[]>;
    sourceLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicySourceList>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
