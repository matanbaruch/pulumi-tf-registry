// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DebugHm extends pulumi.CustomResource {
    /**
     * Get an existing DebugHm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugHmState, opts?: pulumi.CustomResourceOptions): DebugHm {
        return new DebugHm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugHm:DebugHm';

    /**
     * Returns true if the given object is an instance of DebugHm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugHm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugHm.__pulumiType;
    }

    /**
     * Debug level (Level 1-3)
     */
    public readonly level!: pulumi.Output<number | undefined>;
    /**
     * 'icmp': ICMP type; 'tcp': TCP type; 'udp': UDP type; 'ftp': FTP type; 'http': HTTP type; 'snmp': SNMP type; 'smtp': SMTP
     * type; 'dns': DNS type; 'dns-tcp': DNS TCP type; 'pop3': POP3 type; 'imap': IMAP type; 'sip': SIP type; 'sip-tcp': SIP
     * TCP type; 'radius': RADIUS type; 'ldap': LDAP type; 'rtsp': RTSP type; 'kerberos-kdc': Kerberos KDC type; 'database':
     * DATABASE type; 'external': EXTERNAL type; 'https': HTTPS type; 'ntp': NTP type; 'compound': Compound type;
     */
    public readonly methodType!: pulumi.Output<string | undefined>;
    /**
     * Debug Pin Unique Id
     */
    public readonly pinUid!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DebugHm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugHmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugHmArgs | DebugHmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugHmState | undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["methodType"] = state ? state.methodType : undefined;
            resourceInputs["pinUid"] = state ? state.pinUid : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DebugHmArgs | undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["methodType"] = args ? args.methodType : undefined;
            resourceInputs["pinUid"] = args ? args.pinUid : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugHm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugHm resources.
 */
export interface DebugHmState {
    /**
     * Debug level (Level 1-3)
     */
    level?: pulumi.Input<number>;
    /**
     * 'icmp': ICMP type; 'tcp': TCP type; 'udp': UDP type; 'ftp': FTP type; 'http': HTTP type; 'snmp': SNMP type; 'smtp': SMTP
     * type; 'dns': DNS type; 'dns-tcp': DNS TCP type; 'pop3': POP3 type; 'imap': IMAP type; 'sip': SIP type; 'sip-tcp': SIP
     * TCP type; 'radius': RADIUS type; 'ldap': LDAP type; 'rtsp': RTSP type; 'kerberos-kdc': Kerberos KDC type; 'database':
     * DATABASE type; 'external': EXTERNAL type; 'https': HTTPS type; 'ntp': NTP type; 'compound': Compound type;
     */
    methodType?: pulumi.Input<string>;
    /**
     * Debug Pin Unique Id
     */
    pinUid?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DebugHm resource.
 */
export interface DebugHmArgs {
    /**
     * Debug level (Level 1-3)
     */
    level?: pulumi.Input<number>;
    /**
     * 'icmp': ICMP type; 'tcp': TCP type; 'udp': UDP type; 'ftp': FTP type; 'http': HTTP type; 'snmp': SNMP type; 'smtp': SMTP
     * type; 'dns': DNS type; 'dns-tcp': DNS TCP type; 'pop3': POP3 type; 'imap': IMAP type; 'sip': SIP type; 'sip-tcp': SIP
     * TCP type; 'radius': RADIUS type; 'ldap': LDAP type; 'rtsp': RTSP type; 'kerberos-kdc': Kerberos KDC type; 'database':
     * DATABASE type; 'external': EXTERNAL type; 'https': HTTPS type; 'ntp': NTP type; 'compound': Compound type;
     */
    methodType?: pulumi.Input<string>;
    /**
     * Debug Pin Unique Id
     */
    pinUid?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
