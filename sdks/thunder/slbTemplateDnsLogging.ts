// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateDnsLogging extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateDnsLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateDnsLoggingState, opts?: pulumi.CustomResourceOptions): SlbTemplateDnsLogging {
        return new SlbTemplateDnsLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateDnsLogging:SlbTemplateDnsLogging';

    /**
     * Returns true if the given object is an instance of SlbTemplateDnsLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateDnsLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateDnsLogging.__pulumiType;
    }

    /**
     * Disable DNS Logging template
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * 'both': Log DNS over tcp and udp; 'tcp': Log DNS over tcp; 'udp': Log DNS over udp;
     */
    public readonly dnsLoggingProtocol!: pulumi.Output<string | undefined>;
    /**
     * 'all': Log DNS header and question section; 'header': Log DNS header information; 'question': Log DNS question section;
     */
    public readonly dnsLoggingRequestSection!: pulumi.Output<string | undefined>;
    /**
     * 'all': Log DNS header information, answer, authority, additional section content; 'header': Log DNS header information;
     * 'answer': Log DNS header information and answer section content;
     */
    public readonly dnsLoggingResponseSection!: pulumi.Output<string | undefined>;
    /**
     * 'query': DNS Query Logging; 'response': DNS Response Logging; 'both': DNS Query and Response Logging;
     */
    public readonly dnsLoggingType!: pulumi.Output<string | undefined>;
    /**
     * DNS Logging Template Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly responseType!: pulumi.Output<outputs.SlbTemplateDnsLoggingResponseType | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateDnsLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateDnsLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateDnsLoggingArgs | SlbTemplateDnsLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateDnsLoggingState | undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dnsLoggingProtocol"] = state ? state.dnsLoggingProtocol : undefined;
            resourceInputs["dnsLoggingRequestSection"] = state ? state.dnsLoggingRequestSection : undefined;
            resourceInputs["dnsLoggingResponseSection"] = state ? state.dnsLoggingResponseSection : undefined;
            resourceInputs["dnsLoggingType"] = state ? state.dnsLoggingType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["responseType"] = state ? state.responseType : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateDnsLoggingArgs | undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["dnsLoggingProtocol"] = args ? args.dnsLoggingProtocol : undefined;
            resourceInputs["dnsLoggingRequestSection"] = args ? args.dnsLoggingRequestSection : undefined;
            resourceInputs["dnsLoggingResponseSection"] = args ? args.dnsLoggingResponseSection : undefined;
            resourceInputs["dnsLoggingType"] = args ? args.dnsLoggingType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["responseType"] = args ? args.responseType : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateDnsLogging.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateDnsLogging resources.
 */
export interface SlbTemplateDnsLoggingState {
    /**
     * Disable DNS Logging template
     */
    disable?: pulumi.Input<number>;
    /**
     * 'both': Log DNS over tcp and udp; 'tcp': Log DNS over tcp; 'udp': Log DNS over udp;
     */
    dnsLoggingProtocol?: pulumi.Input<string>;
    /**
     * 'all': Log DNS header and question section; 'header': Log DNS header information; 'question': Log DNS question section;
     */
    dnsLoggingRequestSection?: pulumi.Input<string>;
    /**
     * 'all': Log DNS header information, answer, authority, additional section content; 'header': Log DNS header information;
     * 'answer': Log DNS header information and answer section content;
     */
    dnsLoggingResponseSection?: pulumi.Input<string>;
    /**
     * 'query': DNS Query Logging; 'response': DNS Response Logging; 'both': DNS Query and Response Logging;
     */
    dnsLoggingType?: pulumi.Input<string>;
    /**
     * DNS Logging Template Name
     */
    name?: pulumi.Input<string>;
    responseType?: pulumi.Input<inputs.SlbTemplateDnsLoggingResponseType>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateDnsLogging resource.
 */
export interface SlbTemplateDnsLoggingArgs {
    /**
     * Disable DNS Logging template
     */
    disable?: pulumi.Input<number>;
    /**
     * 'both': Log DNS over tcp and udp; 'tcp': Log DNS over tcp; 'udp': Log DNS over udp;
     */
    dnsLoggingProtocol?: pulumi.Input<string>;
    /**
     * 'all': Log DNS header and question section; 'header': Log DNS header information; 'question': Log DNS question section;
     */
    dnsLoggingRequestSection?: pulumi.Input<string>;
    /**
     * 'all': Log DNS header information, answer, authority, additional section content; 'header': Log DNS header information;
     * 'answer': Log DNS header information and answer section content;
     */
    dnsLoggingResponseSection?: pulumi.Input<string>;
    /**
     * 'query': DNS Query Logging; 'response': DNS Response Logging; 'both': DNS Query and Response Logging;
     */
    dnsLoggingType?: pulumi.Input<string>;
    /**
     * DNS Logging Template Name
     */
    name?: pulumi.Input<string>;
    responseType?: pulumi.Input<inputs.SlbTemplateDnsLoggingResponseType>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
