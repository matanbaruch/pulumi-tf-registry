// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * Monitor buffer drop threshold (Threshold value)
     */
    public readonly bufferDrop!: pulumi.Output<number | undefined>;
    /**
     * Monitor IO buffer usage threshold (Threshold value)
     */
    public readonly bufferUsage!: pulumi.Output<number | undefined>;
    /**
     * Conn resource type 0 (Threshold value, default 32767)
     */
    public readonly connType0!: pulumi.Output<number | undefined>;
    /**
     * Conn resource type 1 (Threshold value, default 32767)
     */
    public readonly connType1!: pulumi.Output<number | undefined>;
    /**
     * Conn resource type 2 (Threshold value, default 32767)
     */
    public readonly connType2!: pulumi.Output<number | undefined>;
    /**
     * Conn resource type 3 (Threshold value, default 32767)
     */
    public readonly connType3!: pulumi.Output<number | undefined>;
    /**
     * Conn resource type 4 (Threshold value, default 32767)
     */
    public readonly connType4!: pulumi.Output<number | undefined>;
    /**
     * Monitor control CPU threshold (Threshold value in percentage, default 90)
     */
    public readonly ctrlCpu!: pulumi.Output<number | undefined>;
    /**
     * Monitor data CPU threshold (Threshold value in percentage, default 90)
     */
    public readonly dataCpu!: pulumi.Output<number | undefined>;
    /**
     * Monitor hard disk usage threshold (Threshold value in percentage, default 85)
     */
    public readonly disk!: pulumi.Output<number | undefined>;
    /**
     * Monitor memory usage threshold (Threshold value in percentage, default 95)
     */
    public readonly memory!: pulumi.Output<number | undefined>;
    /**
     * SMP resource type 0 (Threshold value, default 32767)
     */
    public readonly smpType0!: pulumi.Output<number | undefined>;
    /**
     * SMP resource type 1 (Threshold value, default 32767)
     */
    public readonly smpType1!: pulumi.Output<number | undefined>;
    /**
     * SMP resource type 2 (Threshold value, default 32767)
     */
    public readonly smpType2!: pulumi.Output<number | undefined>;
    /**
     * SMP resource type 3 (Threshold value, default 32767)
     */
    public readonly smpType3!: pulumi.Output<number | undefined>;
    /**
     * SMP resource type 4 (Threshold value, default 32767)
     */
    public readonly smpType4!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Monitor warning system temperature threshold (Threshold value in Celsius, default 1)
     */
    public readonly warnTemp!: pulumi.Output<number | undefined>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["bufferDrop"] = state ? state.bufferDrop : undefined;
            resourceInputs["bufferUsage"] = state ? state.bufferUsage : undefined;
            resourceInputs["connType0"] = state ? state.connType0 : undefined;
            resourceInputs["connType1"] = state ? state.connType1 : undefined;
            resourceInputs["connType2"] = state ? state.connType2 : undefined;
            resourceInputs["connType3"] = state ? state.connType3 : undefined;
            resourceInputs["connType4"] = state ? state.connType4 : undefined;
            resourceInputs["ctrlCpu"] = state ? state.ctrlCpu : undefined;
            resourceInputs["dataCpu"] = state ? state.dataCpu : undefined;
            resourceInputs["disk"] = state ? state.disk : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["smpType0"] = state ? state.smpType0 : undefined;
            resourceInputs["smpType1"] = state ? state.smpType1 : undefined;
            resourceInputs["smpType2"] = state ? state.smpType2 : undefined;
            resourceInputs["smpType3"] = state ? state.smpType3 : undefined;
            resourceInputs["smpType4"] = state ? state.smpType4 : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["warnTemp"] = state ? state.warnTemp : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            resourceInputs["bufferDrop"] = args ? args.bufferDrop : undefined;
            resourceInputs["bufferUsage"] = args ? args.bufferUsage : undefined;
            resourceInputs["connType0"] = args ? args.connType0 : undefined;
            resourceInputs["connType1"] = args ? args.connType1 : undefined;
            resourceInputs["connType2"] = args ? args.connType2 : undefined;
            resourceInputs["connType3"] = args ? args.connType3 : undefined;
            resourceInputs["connType4"] = args ? args.connType4 : undefined;
            resourceInputs["ctrlCpu"] = args ? args.ctrlCpu : undefined;
            resourceInputs["dataCpu"] = args ? args.dataCpu : undefined;
            resourceInputs["disk"] = args ? args.disk : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["smpType0"] = args ? args.smpType0 : undefined;
            resourceInputs["smpType1"] = args ? args.smpType1 : undefined;
            resourceInputs["smpType2"] = args ? args.smpType2 : undefined;
            resourceInputs["smpType3"] = args ? args.smpType3 : undefined;
            resourceInputs["smpType4"] = args ? args.smpType4 : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["warnTemp"] = args ? args.warnTemp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * Monitor buffer drop threshold (Threshold value)
     */
    bufferDrop?: pulumi.Input<number>;
    /**
     * Monitor IO buffer usage threshold (Threshold value)
     */
    bufferUsage?: pulumi.Input<number>;
    /**
     * Conn resource type 0 (Threshold value, default 32767)
     */
    connType0?: pulumi.Input<number>;
    /**
     * Conn resource type 1 (Threshold value, default 32767)
     */
    connType1?: pulumi.Input<number>;
    /**
     * Conn resource type 2 (Threshold value, default 32767)
     */
    connType2?: pulumi.Input<number>;
    /**
     * Conn resource type 3 (Threshold value, default 32767)
     */
    connType3?: pulumi.Input<number>;
    /**
     * Conn resource type 4 (Threshold value, default 32767)
     */
    connType4?: pulumi.Input<number>;
    /**
     * Monitor control CPU threshold (Threshold value in percentage, default 90)
     */
    ctrlCpu?: pulumi.Input<number>;
    /**
     * Monitor data CPU threshold (Threshold value in percentage, default 90)
     */
    dataCpu?: pulumi.Input<number>;
    /**
     * Monitor hard disk usage threshold (Threshold value in percentage, default 85)
     */
    disk?: pulumi.Input<number>;
    /**
     * Monitor memory usage threshold (Threshold value in percentage, default 95)
     */
    memory?: pulumi.Input<number>;
    /**
     * SMP resource type 0 (Threshold value, default 32767)
     */
    smpType0?: pulumi.Input<number>;
    /**
     * SMP resource type 1 (Threshold value, default 32767)
     */
    smpType1?: pulumi.Input<number>;
    /**
     * SMP resource type 2 (Threshold value, default 32767)
     */
    smpType2?: pulumi.Input<number>;
    /**
     * SMP resource type 3 (Threshold value, default 32767)
     */
    smpType3?: pulumi.Input<number>;
    /**
     * SMP resource type 4 (Threshold value, default 32767)
     */
    smpType4?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Monitor warning system temperature threshold (Threshold value in Celsius, default 1)
     */
    warnTemp?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * Monitor buffer drop threshold (Threshold value)
     */
    bufferDrop?: pulumi.Input<number>;
    /**
     * Monitor IO buffer usage threshold (Threshold value)
     */
    bufferUsage?: pulumi.Input<number>;
    /**
     * Conn resource type 0 (Threshold value, default 32767)
     */
    connType0?: pulumi.Input<number>;
    /**
     * Conn resource type 1 (Threshold value, default 32767)
     */
    connType1?: pulumi.Input<number>;
    /**
     * Conn resource type 2 (Threshold value, default 32767)
     */
    connType2?: pulumi.Input<number>;
    /**
     * Conn resource type 3 (Threshold value, default 32767)
     */
    connType3?: pulumi.Input<number>;
    /**
     * Conn resource type 4 (Threshold value, default 32767)
     */
    connType4?: pulumi.Input<number>;
    /**
     * Monitor control CPU threshold (Threshold value in percentage, default 90)
     */
    ctrlCpu?: pulumi.Input<number>;
    /**
     * Monitor data CPU threshold (Threshold value in percentage, default 90)
     */
    dataCpu?: pulumi.Input<number>;
    /**
     * Monitor hard disk usage threshold (Threshold value in percentage, default 85)
     */
    disk?: pulumi.Input<number>;
    /**
     * Monitor memory usage threshold (Threshold value in percentage, default 95)
     */
    memory?: pulumi.Input<number>;
    /**
     * SMP resource type 0 (Threshold value, default 32767)
     */
    smpType0?: pulumi.Input<number>;
    /**
     * SMP resource type 1 (Threshold value, default 32767)
     */
    smpType1?: pulumi.Input<number>;
    /**
     * SMP resource type 2 (Threshold value, default 32767)
     */
    smpType2?: pulumi.Input<number>;
    /**
     * SMP resource type 3 (Threshold value, default 32767)
     */
    smpType3?: pulumi.Input<number>;
    /**
     * SMP resource type 4 (Threshold value, default 32767)
     */
    smpType4?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Monitor warning system temperature threshold (Threshold value in Celsius, default 1)
     */
    warnTemp?: pulumi.Input<number>;
}
