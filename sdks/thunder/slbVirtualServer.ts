// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbVirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing SlbVirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbVirtualServerState, opts?: pulumi.CustomResourceOptions): SlbVirtualServer {
        return new SlbVirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbVirtualServer:SlbVirtualServer';

    /**
     * Returns true if the given object is an instance of SlbVirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbVirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbVirtualServer.__pulumiType;
    }

    /**
     * acl id
     */
    public readonly aclId!: pulumi.Output<number | undefined>;
    /**
     * acl id
     */
    public readonly aclIdShared!: pulumi.Output<number | undefined>;
    /**
     * Access List name (IPv4 Access List Name)
     */
    public readonly aclName!: pulumi.Output<string | undefined>;
    /**
     * Access List name (IPv4 Access List Name)
     */
    public readonly aclNameShared!: pulumi.Output<string | undefined>;
    /**
     * Disable Respond to Virtual Server ARP request
     */
    public readonly arpDisable!: pulumi.Output<number | undefined>;
    /**
     * Create a description for VIP
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Disable virtual server GARP
     */
    public readonly disableVipAdv!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable Virtual Server (default); 'disable': Disable Virtual Server; 'disable-when-all-ports-down': Disable
     * Virtual Server when all member ports are down; 'disable-when-any-port-down': Disable Virtual Server when any member port
     * is down;
     */
    public readonly enableDisableAction!: pulumi.Output<string | undefined>;
    /**
     * Ethernet interface
     */
    public readonly ethernet!: pulumi.Output<number | undefined>;
    /**
     * Enable extended statistics on virtual server
     */
    public readonly extendedStats!: pulumi.Output<number | undefined>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    public readonly gamingProtocolCompliance!: pulumi.Output<number | undefined>;
    /**
     * Dynamic failover based on vip status
     */
    public readonly haDynamic!: pulumi.Output<number | undefined>;
    /**
     * IP Address
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * ipv6 acl name
     */
    public readonly ipv6Acl!: pulumi.Output<string | undefined>;
    /**
     * ipv6 acl name
     */
    public readonly ipv6AclShared!: pulumi.Output<string | undefined>;
    /**
     * IPV6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    public readonly migrateVip!: pulumi.Output<outputs.SlbVirtualServerMigrateVip | undefined>;
    /**
     * SLB Virtual Server Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IP subnet mask
     */
    public readonly netmask!: pulumi.Output<string | undefined>;
    public readonly portLists!: pulumi.Output<outputs.SlbVirtualServerPortList[] | undefined>;
    /**
     * Route map reference (Name of route-map)
     */
    public readonly redistributeRouteMap!: pulumi.Output<string | undefined>;
    /**
     * Flag VIP for special redistribution handling
     */
    public readonly redistributionFlagged!: pulumi.Output<number | undefined>;
    /**
     * Reference a policy template from shared partition
     */
    public readonly sharedPartitionPolicyTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a virtual-server template from shared partition
     */
    public readonly sharedPartitionVsTemplate!: pulumi.Output<number | undefined>;
    /**
     * 'stats-data-enable': Enable statistical data collection for virtual server; 'stats-data-disable': Disable statistical
     * data collection for virtual server;
     */
    public readonly statsDataAction!: pulumi.Output<string | undefined>;
    /**
     * Suppress VIP internal loopback programming
     */
    public readonly suppressInternalLoopback!: pulumi.Output<number | undefined>;
    /**
     * NAT Logging template (NAT Logging template name)
     */
    public readonly templateLogging!: pulumi.Output<string | undefined>;
    /**
     * Policy template (Policy template name)
     */
    public readonly templatePolicy!: pulumi.Output<string | undefined>;
    /**
     * Policy Template Name
     */
    public readonly templatePolicyShared!: pulumi.Output<string | undefined>;
    /**
     * Scaleout template (Scaleout template name)
     */
    public readonly templateScaleout!: pulumi.Output<string | undefined>;
    /**
     * Virtual server template (Virtual server template name)
     */
    public readonly templateVirtualServer!: pulumi.Output<string | undefined>;
    /**
     * Virtual-Server Template Name
     */
    public readonly templateVirtualServerShared!: pulumi.Output<string | undefined>;
    /**
     * Use Interface IP
     */
    public readonly useIfIp!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * 'drop-packet': Drop packet for disabled virtual-port;
     */
    public readonly vportDisableAction!: pulumi.Output<string | undefined>;
    /**
     * Join a vrrp group (Specify ha VRRP-A vrid)
     */
    public readonly vrid!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbVirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbVirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbVirtualServerArgs | SlbVirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbVirtualServerState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["aclIdShared"] = state ? state.aclIdShared : undefined;
            resourceInputs["aclName"] = state ? state.aclName : undefined;
            resourceInputs["aclNameShared"] = state ? state.aclNameShared : undefined;
            resourceInputs["arpDisable"] = state ? state.arpDisable : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disableVipAdv"] = state ? state.disableVipAdv : undefined;
            resourceInputs["enableDisableAction"] = state ? state.enableDisableAction : undefined;
            resourceInputs["ethernet"] = state ? state.ethernet : undefined;
            resourceInputs["extendedStats"] = state ? state.extendedStats : undefined;
            resourceInputs["gamingProtocolCompliance"] = state ? state.gamingProtocolCompliance : undefined;
            resourceInputs["haDynamic"] = state ? state.haDynamic : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv6Acl"] = state ? state.ipv6Acl : undefined;
            resourceInputs["ipv6AclShared"] = state ? state.ipv6AclShared : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["migrateVip"] = state ? state.migrateVip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["portLists"] = state ? state.portLists : undefined;
            resourceInputs["redistributeRouteMap"] = state ? state.redistributeRouteMap : undefined;
            resourceInputs["redistributionFlagged"] = state ? state.redistributionFlagged : undefined;
            resourceInputs["sharedPartitionPolicyTemplate"] = state ? state.sharedPartitionPolicyTemplate : undefined;
            resourceInputs["sharedPartitionVsTemplate"] = state ? state.sharedPartitionVsTemplate : undefined;
            resourceInputs["statsDataAction"] = state ? state.statsDataAction : undefined;
            resourceInputs["suppressInternalLoopback"] = state ? state.suppressInternalLoopback : undefined;
            resourceInputs["templateLogging"] = state ? state.templateLogging : undefined;
            resourceInputs["templatePolicy"] = state ? state.templatePolicy : undefined;
            resourceInputs["templatePolicyShared"] = state ? state.templatePolicyShared : undefined;
            resourceInputs["templateScaleout"] = state ? state.templateScaleout : undefined;
            resourceInputs["templateVirtualServer"] = state ? state.templateVirtualServer : undefined;
            resourceInputs["templateVirtualServerShared"] = state ? state.templateVirtualServerShared : undefined;
            resourceInputs["useIfIp"] = state ? state.useIfIp : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vportDisableAction"] = state ? state.vportDisableAction : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as SlbVirtualServerArgs | undefined;
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["aclIdShared"] = args ? args.aclIdShared : undefined;
            resourceInputs["aclName"] = args ? args.aclName : undefined;
            resourceInputs["aclNameShared"] = args ? args.aclNameShared : undefined;
            resourceInputs["arpDisable"] = args ? args.arpDisable : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disableVipAdv"] = args ? args.disableVipAdv : undefined;
            resourceInputs["enableDisableAction"] = args ? args.enableDisableAction : undefined;
            resourceInputs["ethernet"] = args ? args.ethernet : undefined;
            resourceInputs["extendedStats"] = args ? args.extendedStats : undefined;
            resourceInputs["gamingProtocolCompliance"] = args ? args.gamingProtocolCompliance : undefined;
            resourceInputs["haDynamic"] = args ? args.haDynamic : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipv6Acl"] = args ? args.ipv6Acl : undefined;
            resourceInputs["ipv6AclShared"] = args ? args.ipv6AclShared : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["migrateVip"] = args ? args.migrateVip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["portLists"] = args ? args.portLists : undefined;
            resourceInputs["redistributeRouteMap"] = args ? args.redistributeRouteMap : undefined;
            resourceInputs["redistributionFlagged"] = args ? args.redistributionFlagged : undefined;
            resourceInputs["sharedPartitionPolicyTemplate"] = args ? args.sharedPartitionPolicyTemplate : undefined;
            resourceInputs["sharedPartitionVsTemplate"] = args ? args.sharedPartitionVsTemplate : undefined;
            resourceInputs["statsDataAction"] = args ? args.statsDataAction : undefined;
            resourceInputs["suppressInternalLoopback"] = args ? args.suppressInternalLoopback : undefined;
            resourceInputs["templateLogging"] = args ? args.templateLogging : undefined;
            resourceInputs["templatePolicy"] = args ? args.templatePolicy : undefined;
            resourceInputs["templatePolicyShared"] = args ? args.templatePolicyShared : undefined;
            resourceInputs["templateScaleout"] = args ? args.templateScaleout : undefined;
            resourceInputs["templateVirtualServer"] = args ? args.templateVirtualServer : undefined;
            resourceInputs["templateVirtualServerShared"] = args ? args.templateVirtualServerShared : undefined;
            resourceInputs["useIfIp"] = args ? args.useIfIp : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vportDisableAction"] = args ? args.vportDisableAction : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbVirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbVirtualServer resources.
 */
export interface SlbVirtualServerState {
    /**
     * acl id
     */
    aclId?: pulumi.Input<number>;
    /**
     * acl id
     */
    aclIdShared?: pulumi.Input<number>;
    /**
     * Access List name (IPv4 Access List Name)
     */
    aclName?: pulumi.Input<string>;
    /**
     * Access List name (IPv4 Access List Name)
     */
    aclNameShared?: pulumi.Input<string>;
    /**
     * Disable Respond to Virtual Server ARP request
     */
    arpDisable?: pulumi.Input<number>;
    /**
     * Create a description for VIP
     */
    description?: pulumi.Input<string>;
    /**
     * Disable virtual server GARP
     */
    disableVipAdv?: pulumi.Input<number>;
    /**
     * 'enable': Enable Virtual Server (default); 'disable': Disable Virtual Server; 'disable-when-all-ports-down': Disable
     * Virtual Server when all member ports are down; 'disable-when-any-port-down': Disable Virtual Server when any member port
     * is down;
     */
    enableDisableAction?: pulumi.Input<string>;
    /**
     * Ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * Enable extended statistics on virtual server
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    gamingProtocolCompliance?: pulumi.Input<number>;
    /**
     * Dynamic failover based on vip status
     */
    haDynamic?: pulumi.Input<number>;
    /**
     * IP Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * ipv6 acl name
     */
    ipv6Acl?: pulumi.Input<string>;
    /**
     * ipv6 acl name
     */
    ipv6AclShared?: pulumi.Input<string>;
    /**
     * IPV6 address
     */
    ipv6Address?: pulumi.Input<string>;
    migrateVip?: pulumi.Input<inputs.SlbVirtualServerMigrateVip>;
    /**
     * SLB Virtual Server Name
     */
    name?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    netmask?: pulumi.Input<string>;
    portLists?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortList>[]>;
    /**
     * Route map reference (Name of route-map)
     */
    redistributeRouteMap?: pulumi.Input<string>;
    /**
     * Flag VIP for special redistribution handling
     */
    redistributionFlagged?: pulumi.Input<number>;
    /**
     * Reference a policy template from shared partition
     */
    sharedPartitionPolicyTemplate?: pulumi.Input<number>;
    /**
     * Reference a virtual-server template from shared partition
     */
    sharedPartitionVsTemplate?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for virtual server; 'stats-data-disable': Disable statistical
     * data collection for virtual server;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Suppress VIP internal loopback programming
     */
    suppressInternalLoopback?: pulumi.Input<number>;
    /**
     * NAT Logging template (NAT Logging template name)
     */
    templateLogging?: pulumi.Input<string>;
    /**
     * Policy template (Policy template name)
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Policy Template Name
     */
    templatePolicyShared?: pulumi.Input<string>;
    /**
     * Scaleout template (Scaleout template name)
     */
    templateScaleout?: pulumi.Input<string>;
    /**
     * Virtual server template (Virtual server template name)
     */
    templateVirtualServer?: pulumi.Input<string>;
    /**
     * Virtual-Server Template Name
     */
    templateVirtualServerShared?: pulumi.Input<string>;
    /**
     * Use Interface IP
     */
    useIfIp?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'drop-packet': Drop packet for disabled virtual-port;
     */
    vportDisableAction?: pulumi.Input<string>;
    /**
     * Join a vrrp group (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbVirtualServer resource.
 */
export interface SlbVirtualServerArgs {
    /**
     * acl id
     */
    aclId?: pulumi.Input<number>;
    /**
     * acl id
     */
    aclIdShared?: pulumi.Input<number>;
    /**
     * Access List name (IPv4 Access List Name)
     */
    aclName?: pulumi.Input<string>;
    /**
     * Access List name (IPv4 Access List Name)
     */
    aclNameShared?: pulumi.Input<string>;
    /**
     * Disable Respond to Virtual Server ARP request
     */
    arpDisable?: pulumi.Input<number>;
    /**
     * Create a description for VIP
     */
    description?: pulumi.Input<string>;
    /**
     * Disable virtual server GARP
     */
    disableVipAdv?: pulumi.Input<number>;
    /**
     * 'enable': Enable Virtual Server (default); 'disable': Disable Virtual Server; 'disable-when-all-ports-down': Disable
     * Virtual Server when all member ports are down; 'disable-when-any-port-down': Disable Virtual Server when any member port
     * is down;
     */
    enableDisableAction?: pulumi.Input<string>;
    /**
     * Ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * Enable extended statistics on virtual server
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    gamingProtocolCompliance?: pulumi.Input<number>;
    /**
     * Dynamic failover based on vip status
     */
    haDynamic?: pulumi.Input<number>;
    /**
     * IP Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * ipv6 acl name
     */
    ipv6Acl?: pulumi.Input<string>;
    /**
     * ipv6 acl name
     */
    ipv6AclShared?: pulumi.Input<string>;
    /**
     * IPV6 address
     */
    ipv6Address?: pulumi.Input<string>;
    migrateVip?: pulumi.Input<inputs.SlbVirtualServerMigrateVip>;
    /**
     * SLB Virtual Server Name
     */
    name?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    netmask?: pulumi.Input<string>;
    portLists?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortList>[]>;
    /**
     * Route map reference (Name of route-map)
     */
    redistributeRouteMap?: pulumi.Input<string>;
    /**
     * Flag VIP for special redistribution handling
     */
    redistributionFlagged?: pulumi.Input<number>;
    /**
     * Reference a policy template from shared partition
     */
    sharedPartitionPolicyTemplate?: pulumi.Input<number>;
    /**
     * Reference a virtual-server template from shared partition
     */
    sharedPartitionVsTemplate?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for virtual server; 'stats-data-disable': Disable statistical
     * data collection for virtual server;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Suppress VIP internal loopback programming
     */
    suppressInternalLoopback?: pulumi.Input<number>;
    /**
     * NAT Logging template (NAT Logging template name)
     */
    templateLogging?: pulumi.Input<string>;
    /**
     * Policy template (Policy template name)
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Policy Template Name
     */
    templatePolicyShared?: pulumi.Input<string>;
    /**
     * Scaleout template (Scaleout template name)
     */
    templateScaleout?: pulumi.Input<string>;
    /**
     * Virtual server template (Virtual server template name)
     */
    templateVirtualServer?: pulumi.Input<string>;
    /**
     * Virtual-Server Template Name
     */
    templateVirtualServerShared?: pulumi.Input<string>;
    /**
     * Use Interface IP
     */
    useIfIp?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'drop-packet': Drop packet for disabled virtual-port;
     */
    vportDisableAction?: pulumi.Input<string>;
    /**
     * Join a vrrp group (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}
