// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GslbPolicyDns extends pulumi.CustomResource {
    /**
     * Get an existing GslbPolicyDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbPolicyDnsState, opts?: pulumi.CustomResourceOptions): GslbPolicyDns {
        return new GslbPolicyDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/gslbPolicyDns:GslbPolicyDns';

    /**
     * Returns true if the given object is an instance of GslbPolicyDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GslbPolicyDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GslbPolicyDns.__pulumiType;
    }

    /**
     * Apply DNS action for service
     */
    public readonly action!: pulumi.Output<number | undefined>;
    /**
     * 'drop': Drop query; 'reject': Send refuse response; 'ignore': Send empty response;
     */
    public readonly actionType!: pulumi.Output<string | undefined>;
    /**
     * Only keep active servers
     */
    public readonly activeOnly!: pulumi.Output<number | undefined>;
    /**
     * Continue if no candidate
     */
    public readonly activeOnlyFailSafe!: pulumi.Output<number | undefined>;
    /**
     * Specify aging-time, default is TTL in DNS record, unit: second (Aging time, default 0 means using TTL in DNS record as
     * aging time)
     */
    public readonly agingTime!: pulumi.Output<number | undefined>;
    /**
     * Return alias name when fail
     */
    public readonly backupAlias!: pulumi.Output<number | undefined>;
    /**
     * Return fallback server when fail
     */
    public readonly backupServer!: pulumi.Output<number | undefined>;
    /**
     * Specify Action
     */
    public readonly blockAction!: pulumi.Output<number | undefined>;
    public readonly blockType!: pulumi.Output<string | undefined>;
    public readonly blockValues!: pulumi.Output<outputs.GslbPolicyDnsBlockValue[] | undefined>;
    /**
     * Cache DNS Server response
     */
    public readonly cache!: pulumi.Output<number | undefined>;
    /**
     * Apply GSLB for DNS Server response when service is Canonical Name (CNAME)
     */
    public readonly cnameDetect!: pulumi.Output<number | undefined>;
    /**
     * Zone Delegation
     */
    public readonly delegation!: pulumi.Output<number | undefined>;
    /**
     * Append MX Records in Addition Section
     */
    public readonly dnsAdditionMx!: pulumi.Output<number | undefined>;
    /**
     * Automatically build DNS Infrastructure
     */
    public readonly dnsAutoMap!: pulumi.Output<number | undefined>;
    /**
     * Make dynamically change the preference
     */
    public readonly dynamicPreference!: pulumi.Output<number | undefined>;
    /**
     * dynamically change the weight
     */
    public readonly dynamicWeight!: pulumi.Output<number | undefined>;
    /**
     * Return DNS response with external IP address
     */
    public readonly externalIp!: pulumi.Output<number | undefined>;
    /**
     * Return DNS response with external SOA Record
     */
    public readonly externalSoa!: pulumi.Output<number | undefined>;
    /**
     * Apply DNS action by geo-location
     */
    public readonly geolocAction!: pulumi.Output<number | undefined>;
    /**
     * Return alias name by geo-location
     */
    public readonly geolocAlias!: pulumi.Output<number | undefined>;
    /**
     * Apply different policy by geo-location
     */
    public readonly geolocPolicy!: pulumi.Output<number | undefined>;
    /**
     * 'none': None; 'answer': Append Hint Records in DNS Answer Section; 'addition': Append Hint Records in DNS Addition
     * Section;
     */
    public readonly hint!: pulumi.Output<string | undefined>;
    /**
     * Replace DNS Server Response with GSLB Service-IPs
     */
    public readonly ipReplace!: pulumi.Output<number | undefined>;
    public readonly ipv6s!: pulumi.Output<outputs.GslbPolicyDnsIpv6[] | undefined>;
    /**
     * 'none': None; 'query': DNS Query; 'response': DNS Response; 'both': Both DNS Query and Response;
     */
    public readonly logging!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly proxyBlockPortRangeLists!: pulumi.Output<outputs.GslbPolicyDnsProxyBlockPortRangeList[] | undefined>;
    /**
     * Only keep selected servers
     */
    public readonly selectedOnly!: pulumi.Output<number | undefined>;
    /**
     * Answer Number
     */
    public readonly selectedOnlyValue!: pulumi.Output<number | undefined>;
    /**
     * Run GSLB as DNS server mode
     */
    public readonly server!: pulumi.Output<number | undefined>;
    /**
     * Append MX Records in Addition Section
     */
    public readonly serverAdditionMx!: pulumi.Output<number | undefined>;
    /**
     * Provide All Records
     */
    public readonly serverAny!: pulumi.Output<number | undefined>;
    /**
     * Provide All Records with GSLB Metrics applied to A/AAAA Records
     */
    public readonly serverAnyWithMetric!: pulumi.Output<number | undefined>;
    /**
     * As authoritative server
     */
    public readonly serverAuthoritative!: pulumi.Output<number | undefined>;
    /**
     * Provide A-Records for NS-Records automatically
     */
    public readonly serverAutoNs!: pulumi.Output<number | undefined>;
    /**
     * Provide PTR Records automatically
     */
    public readonly serverAutoPtr!: pulumi.Output<number | undefined>;
    /**
     * Provide CAA Records
     */
    public readonly serverCaa!: pulumi.Output<number | undefined>;
    /**
     * Provide CNAME Records
     */
    public readonly serverCname!: pulumi.Output<number | undefined>;
    /**
     * Provide Custom Records
     */
    public readonly serverCustom!: pulumi.Output<number | undefined>;
    /**
     * Append All A Records in Authoritative Section
     */
    public readonly serverFullList!: pulumi.Output<number | undefined>;
    /**
     * Only run GSLB as DNS server mode
     */
    public readonly serverModeOnly!: pulumi.Output<number | undefined>;
    /**
     * Provide MX Records
     */
    public readonly serverMx!: pulumi.Output<number | undefined>;
    /**
     * Provide NAPTR Records
     */
    public readonly serverNaptr!: pulumi.Output<number | undefined>;
    /**
     * Provide NS Records
     */
    public readonly serverNs!: pulumi.Output<number | undefined>;
    /**
     * Append All NS Records in Authoritative Section
     */
    public readonly serverNsList!: pulumi.Output<number | undefined>;
    /**
     * Provide PTR Records
     */
    public readonly serverPtr!: pulumi.Output<number | undefined>;
    /**
     * Provide DNSSEC support
     */
    public readonly serverSec!: pulumi.Output<number | undefined>;
    /**
     * Provide SRV Records
     */
    public readonly serverSrv!: pulumi.Output<number | undefined>;
    /**
     * Provide TXT Records
     */
    public readonly serverTxt!: pulumi.Output<number | undefined>;
    /**
     * Make DNS Record sticky for certain time
     */
    public readonly sticky!: pulumi.Output<number | undefined>;
    /**
     * Specify aging-time, unit: min, default is 5 (Aging time)
     */
    public readonly stickyAgingTime!: pulumi.Output<number | undefined>;
    /**
     * Specify IPv6 mask length, default is 128
     */
    public readonly stickyIpv6Mask!: pulumi.Output<number | undefined>;
    /**
     * Specify IP mask, default is /32
     */
    public readonly stickyMask!: pulumi.Output<string | undefined>;
    /**
     * Logging template (Logging Template Name)
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * Specify the TTL value contained in DNS record (TTL value, unit: second, default is 10)
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * Use DNS Server Response TTL value in GSLB Proxy mode
     */
    public readonly useServerTtl!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Only run GSLB as DNS server mode with zone ownership
     */
    public readonly zoneOwnerMode!: pulumi.Output<number | undefined>;

    /**
     * Create a GslbPolicyDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GslbPolicyDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbPolicyDnsArgs | GslbPolicyDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbPolicyDnsState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["actionType"] = state ? state.actionType : undefined;
            resourceInputs["activeOnly"] = state ? state.activeOnly : undefined;
            resourceInputs["activeOnlyFailSafe"] = state ? state.activeOnlyFailSafe : undefined;
            resourceInputs["agingTime"] = state ? state.agingTime : undefined;
            resourceInputs["backupAlias"] = state ? state.backupAlias : undefined;
            resourceInputs["backupServer"] = state ? state.backupServer : undefined;
            resourceInputs["blockAction"] = state ? state.blockAction : undefined;
            resourceInputs["blockType"] = state ? state.blockType : undefined;
            resourceInputs["blockValues"] = state ? state.blockValues : undefined;
            resourceInputs["cache"] = state ? state.cache : undefined;
            resourceInputs["cnameDetect"] = state ? state.cnameDetect : undefined;
            resourceInputs["delegation"] = state ? state.delegation : undefined;
            resourceInputs["dnsAdditionMx"] = state ? state.dnsAdditionMx : undefined;
            resourceInputs["dnsAutoMap"] = state ? state.dnsAutoMap : undefined;
            resourceInputs["dynamicPreference"] = state ? state.dynamicPreference : undefined;
            resourceInputs["dynamicWeight"] = state ? state.dynamicWeight : undefined;
            resourceInputs["externalIp"] = state ? state.externalIp : undefined;
            resourceInputs["externalSoa"] = state ? state.externalSoa : undefined;
            resourceInputs["geolocAction"] = state ? state.geolocAction : undefined;
            resourceInputs["geolocAlias"] = state ? state.geolocAlias : undefined;
            resourceInputs["geolocPolicy"] = state ? state.geolocPolicy : undefined;
            resourceInputs["hint"] = state ? state.hint : undefined;
            resourceInputs["ipReplace"] = state ? state.ipReplace : undefined;
            resourceInputs["ipv6s"] = state ? state.ipv6s : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyBlockPortRangeLists"] = state ? state.proxyBlockPortRangeLists : undefined;
            resourceInputs["selectedOnly"] = state ? state.selectedOnly : undefined;
            resourceInputs["selectedOnlyValue"] = state ? state.selectedOnlyValue : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serverAdditionMx"] = state ? state.serverAdditionMx : undefined;
            resourceInputs["serverAny"] = state ? state.serverAny : undefined;
            resourceInputs["serverAnyWithMetric"] = state ? state.serverAnyWithMetric : undefined;
            resourceInputs["serverAuthoritative"] = state ? state.serverAuthoritative : undefined;
            resourceInputs["serverAutoNs"] = state ? state.serverAutoNs : undefined;
            resourceInputs["serverAutoPtr"] = state ? state.serverAutoPtr : undefined;
            resourceInputs["serverCaa"] = state ? state.serverCaa : undefined;
            resourceInputs["serverCname"] = state ? state.serverCname : undefined;
            resourceInputs["serverCustom"] = state ? state.serverCustom : undefined;
            resourceInputs["serverFullList"] = state ? state.serverFullList : undefined;
            resourceInputs["serverModeOnly"] = state ? state.serverModeOnly : undefined;
            resourceInputs["serverMx"] = state ? state.serverMx : undefined;
            resourceInputs["serverNaptr"] = state ? state.serverNaptr : undefined;
            resourceInputs["serverNs"] = state ? state.serverNs : undefined;
            resourceInputs["serverNsList"] = state ? state.serverNsList : undefined;
            resourceInputs["serverPtr"] = state ? state.serverPtr : undefined;
            resourceInputs["serverSec"] = state ? state.serverSec : undefined;
            resourceInputs["serverSrv"] = state ? state.serverSrv : undefined;
            resourceInputs["serverTxt"] = state ? state.serverTxt : undefined;
            resourceInputs["sticky"] = state ? state.sticky : undefined;
            resourceInputs["stickyAgingTime"] = state ? state.stickyAgingTime : undefined;
            resourceInputs["stickyIpv6Mask"] = state ? state.stickyIpv6Mask : undefined;
            resourceInputs["stickyMask"] = state ? state.stickyMask : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["useServerTtl"] = state ? state.useServerTtl : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneOwnerMode"] = state ? state.zoneOwnerMode : undefined;
        } else {
            const args = argsOrState as GslbPolicyDnsArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["actionType"] = args ? args.actionType : undefined;
            resourceInputs["activeOnly"] = args ? args.activeOnly : undefined;
            resourceInputs["activeOnlyFailSafe"] = args ? args.activeOnlyFailSafe : undefined;
            resourceInputs["agingTime"] = args ? args.agingTime : undefined;
            resourceInputs["backupAlias"] = args ? args.backupAlias : undefined;
            resourceInputs["backupServer"] = args ? args.backupServer : undefined;
            resourceInputs["blockAction"] = args ? args.blockAction : undefined;
            resourceInputs["blockType"] = args ? args.blockType : undefined;
            resourceInputs["blockValues"] = args ? args.blockValues : undefined;
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["cnameDetect"] = args ? args.cnameDetect : undefined;
            resourceInputs["delegation"] = args ? args.delegation : undefined;
            resourceInputs["dnsAdditionMx"] = args ? args.dnsAdditionMx : undefined;
            resourceInputs["dnsAutoMap"] = args ? args.dnsAutoMap : undefined;
            resourceInputs["dynamicPreference"] = args ? args.dynamicPreference : undefined;
            resourceInputs["dynamicWeight"] = args ? args.dynamicWeight : undefined;
            resourceInputs["externalIp"] = args ? args.externalIp : undefined;
            resourceInputs["externalSoa"] = args ? args.externalSoa : undefined;
            resourceInputs["geolocAction"] = args ? args.geolocAction : undefined;
            resourceInputs["geolocAlias"] = args ? args.geolocAlias : undefined;
            resourceInputs["geolocPolicy"] = args ? args.geolocPolicy : undefined;
            resourceInputs["hint"] = args ? args.hint : undefined;
            resourceInputs["ipReplace"] = args ? args.ipReplace : undefined;
            resourceInputs["ipv6s"] = args ? args.ipv6s : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyBlockPortRangeLists"] = args ? args.proxyBlockPortRangeLists : undefined;
            resourceInputs["selectedOnly"] = args ? args.selectedOnly : undefined;
            resourceInputs["selectedOnlyValue"] = args ? args.selectedOnlyValue : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serverAdditionMx"] = args ? args.serverAdditionMx : undefined;
            resourceInputs["serverAny"] = args ? args.serverAny : undefined;
            resourceInputs["serverAnyWithMetric"] = args ? args.serverAnyWithMetric : undefined;
            resourceInputs["serverAuthoritative"] = args ? args.serverAuthoritative : undefined;
            resourceInputs["serverAutoNs"] = args ? args.serverAutoNs : undefined;
            resourceInputs["serverAutoPtr"] = args ? args.serverAutoPtr : undefined;
            resourceInputs["serverCaa"] = args ? args.serverCaa : undefined;
            resourceInputs["serverCname"] = args ? args.serverCname : undefined;
            resourceInputs["serverCustom"] = args ? args.serverCustom : undefined;
            resourceInputs["serverFullList"] = args ? args.serverFullList : undefined;
            resourceInputs["serverModeOnly"] = args ? args.serverModeOnly : undefined;
            resourceInputs["serverMx"] = args ? args.serverMx : undefined;
            resourceInputs["serverNaptr"] = args ? args.serverNaptr : undefined;
            resourceInputs["serverNs"] = args ? args.serverNs : undefined;
            resourceInputs["serverNsList"] = args ? args.serverNsList : undefined;
            resourceInputs["serverPtr"] = args ? args.serverPtr : undefined;
            resourceInputs["serverSec"] = args ? args.serverSec : undefined;
            resourceInputs["serverSrv"] = args ? args.serverSrv : undefined;
            resourceInputs["serverTxt"] = args ? args.serverTxt : undefined;
            resourceInputs["sticky"] = args ? args.sticky : undefined;
            resourceInputs["stickyAgingTime"] = args ? args.stickyAgingTime : undefined;
            resourceInputs["stickyIpv6Mask"] = args ? args.stickyIpv6Mask : undefined;
            resourceInputs["stickyMask"] = args ? args.stickyMask : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["useServerTtl"] = args ? args.useServerTtl : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneOwnerMode"] = args ? args.zoneOwnerMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GslbPolicyDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GslbPolicyDns resources.
 */
export interface GslbPolicyDnsState {
    /**
     * Apply DNS action for service
     */
    action?: pulumi.Input<number>;
    /**
     * 'drop': Drop query; 'reject': Send refuse response; 'ignore': Send empty response;
     */
    actionType?: pulumi.Input<string>;
    /**
     * Only keep active servers
     */
    activeOnly?: pulumi.Input<number>;
    /**
     * Continue if no candidate
     */
    activeOnlyFailSafe?: pulumi.Input<number>;
    /**
     * Specify aging-time, default is TTL in DNS record, unit: second (Aging time, default 0 means using TTL in DNS record as
     * aging time)
     */
    agingTime?: pulumi.Input<number>;
    /**
     * Return alias name when fail
     */
    backupAlias?: pulumi.Input<number>;
    /**
     * Return fallback server when fail
     */
    backupServer?: pulumi.Input<number>;
    /**
     * Specify Action
     */
    blockAction?: pulumi.Input<number>;
    blockType?: pulumi.Input<string>;
    blockValues?: pulumi.Input<pulumi.Input<inputs.GslbPolicyDnsBlockValue>[]>;
    /**
     * Cache DNS Server response
     */
    cache?: pulumi.Input<number>;
    /**
     * Apply GSLB for DNS Server response when service is Canonical Name (CNAME)
     */
    cnameDetect?: pulumi.Input<number>;
    /**
     * Zone Delegation
     */
    delegation?: pulumi.Input<number>;
    /**
     * Append MX Records in Addition Section
     */
    dnsAdditionMx?: pulumi.Input<number>;
    /**
     * Automatically build DNS Infrastructure
     */
    dnsAutoMap?: pulumi.Input<number>;
    /**
     * Make dynamically change the preference
     */
    dynamicPreference?: pulumi.Input<number>;
    /**
     * dynamically change the weight
     */
    dynamicWeight?: pulumi.Input<number>;
    /**
     * Return DNS response with external IP address
     */
    externalIp?: pulumi.Input<number>;
    /**
     * Return DNS response with external SOA Record
     */
    externalSoa?: pulumi.Input<number>;
    /**
     * Apply DNS action by geo-location
     */
    geolocAction?: pulumi.Input<number>;
    /**
     * Return alias name by geo-location
     */
    geolocAlias?: pulumi.Input<number>;
    /**
     * Apply different policy by geo-location
     */
    geolocPolicy?: pulumi.Input<number>;
    /**
     * 'none': None; 'answer': Append Hint Records in DNS Answer Section; 'addition': Append Hint Records in DNS Addition
     * Section;
     */
    hint?: pulumi.Input<string>;
    /**
     * Replace DNS Server Response with GSLB Service-IPs
     */
    ipReplace?: pulumi.Input<number>;
    ipv6s?: pulumi.Input<pulumi.Input<inputs.GslbPolicyDnsIpv6>[]>;
    /**
     * 'none': None; 'query': DNS Query; 'response': DNS Response; 'both': Both DNS Query and Response;
     */
    logging?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    proxyBlockPortRangeLists?: pulumi.Input<pulumi.Input<inputs.GslbPolicyDnsProxyBlockPortRangeList>[]>;
    /**
     * Only keep selected servers
     */
    selectedOnly?: pulumi.Input<number>;
    /**
     * Answer Number
     */
    selectedOnlyValue?: pulumi.Input<number>;
    /**
     * Run GSLB as DNS server mode
     */
    server?: pulumi.Input<number>;
    /**
     * Append MX Records in Addition Section
     */
    serverAdditionMx?: pulumi.Input<number>;
    /**
     * Provide All Records
     */
    serverAny?: pulumi.Input<number>;
    /**
     * Provide All Records with GSLB Metrics applied to A/AAAA Records
     */
    serverAnyWithMetric?: pulumi.Input<number>;
    /**
     * As authoritative server
     */
    serverAuthoritative?: pulumi.Input<number>;
    /**
     * Provide A-Records for NS-Records automatically
     */
    serverAutoNs?: pulumi.Input<number>;
    /**
     * Provide PTR Records automatically
     */
    serverAutoPtr?: pulumi.Input<number>;
    /**
     * Provide CAA Records
     */
    serverCaa?: pulumi.Input<number>;
    /**
     * Provide CNAME Records
     */
    serverCname?: pulumi.Input<number>;
    /**
     * Provide Custom Records
     */
    serverCustom?: pulumi.Input<number>;
    /**
     * Append All A Records in Authoritative Section
     */
    serverFullList?: pulumi.Input<number>;
    /**
     * Only run GSLB as DNS server mode
     */
    serverModeOnly?: pulumi.Input<number>;
    /**
     * Provide MX Records
     */
    serverMx?: pulumi.Input<number>;
    /**
     * Provide NAPTR Records
     */
    serverNaptr?: pulumi.Input<number>;
    /**
     * Provide NS Records
     */
    serverNs?: pulumi.Input<number>;
    /**
     * Append All NS Records in Authoritative Section
     */
    serverNsList?: pulumi.Input<number>;
    /**
     * Provide PTR Records
     */
    serverPtr?: pulumi.Input<number>;
    /**
     * Provide DNSSEC support
     */
    serverSec?: pulumi.Input<number>;
    /**
     * Provide SRV Records
     */
    serverSrv?: pulumi.Input<number>;
    /**
     * Provide TXT Records
     */
    serverTxt?: pulumi.Input<number>;
    /**
     * Make DNS Record sticky for certain time
     */
    sticky?: pulumi.Input<number>;
    /**
     * Specify aging-time, unit: min, default is 5 (Aging time)
     */
    stickyAgingTime?: pulumi.Input<number>;
    /**
     * Specify IPv6 mask length, default is 128
     */
    stickyIpv6Mask?: pulumi.Input<number>;
    /**
     * Specify IP mask, default is /32
     */
    stickyMask?: pulumi.Input<string>;
    /**
     * Logging template (Logging Template Name)
     */
    template?: pulumi.Input<string>;
    /**
     * Specify the TTL value contained in DNS record (TTL value, unit: second, default is 10)
     */
    ttl?: pulumi.Input<number>;
    /**
     * Use DNS Server Response TTL value in GSLB Proxy mode
     */
    useServerTtl?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Only run GSLB as DNS server mode with zone ownership
     */
    zoneOwnerMode?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GslbPolicyDns resource.
 */
export interface GslbPolicyDnsArgs {
    /**
     * Apply DNS action for service
     */
    action?: pulumi.Input<number>;
    /**
     * 'drop': Drop query; 'reject': Send refuse response; 'ignore': Send empty response;
     */
    actionType?: pulumi.Input<string>;
    /**
     * Only keep active servers
     */
    activeOnly?: pulumi.Input<number>;
    /**
     * Continue if no candidate
     */
    activeOnlyFailSafe?: pulumi.Input<number>;
    /**
     * Specify aging-time, default is TTL in DNS record, unit: second (Aging time, default 0 means using TTL in DNS record as
     * aging time)
     */
    agingTime?: pulumi.Input<number>;
    /**
     * Return alias name when fail
     */
    backupAlias?: pulumi.Input<number>;
    /**
     * Return fallback server when fail
     */
    backupServer?: pulumi.Input<number>;
    /**
     * Specify Action
     */
    blockAction?: pulumi.Input<number>;
    blockType?: pulumi.Input<string>;
    blockValues?: pulumi.Input<pulumi.Input<inputs.GslbPolicyDnsBlockValue>[]>;
    /**
     * Cache DNS Server response
     */
    cache?: pulumi.Input<number>;
    /**
     * Apply GSLB for DNS Server response when service is Canonical Name (CNAME)
     */
    cnameDetect?: pulumi.Input<number>;
    /**
     * Zone Delegation
     */
    delegation?: pulumi.Input<number>;
    /**
     * Append MX Records in Addition Section
     */
    dnsAdditionMx?: pulumi.Input<number>;
    /**
     * Automatically build DNS Infrastructure
     */
    dnsAutoMap?: pulumi.Input<number>;
    /**
     * Make dynamically change the preference
     */
    dynamicPreference?: pulumi.Input<number>;
    /**
     * dynamically change the weight
     */
    dynamicWeight?: pulumi.Input<number>;
    /**
     * Return DNS response with external IP address
     */
    externalIp?: pulumi.Input<number>;
    /**
     * Return DNS response with external SOA Record
     */
    externalSoa?: pulumi.Input<number>;
    /**
     * Apply DNS action by geo-location
     */
    geolocAction?: pulumi.Input<number>;
    /**
     * Return alias name by geo-location
     */
    geolocAlias?: pulumi.Input<number>;
    /**
     * Apply different policy by geo-location
     */
    geolocPolicy?: pulumi.Input<number>;
    /**
     * 'none': None; 'answer': Append Hint Records in DNS Answer Section; 'addition': Append Hint Records in DNS Addition
     * Section;
     */
    hint?: pulumi.Input<string>;
    /**
     * Replace DNS Server Response with GSLB Service-IPs
     */
    ipReplace?: pulumi.Input<number>;
    ipv6s?: pulumi.Input<pulumi.Input<inputs.GslbPolicyDnsIpv6>[]>;
    /**
     * 'none': None; 'query': DNS Query; 'response': DNS Response; 'both': Both DNS Query and Response;
     */
    logging?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    proxyBlockPortRangeLists?: pulumi.Input<pulumi.Input<inputs.GslbPolicyDnsProxyBlockPortRangeList>[]>;
    /**
     * Only keep selected servers
     */
    selectedOnly?: pulumi.Input<number>;
    /**
     * Answer Number
     */
    selectedOnlyValue?: pulumi.Input<number>;
    /**
     * Run GSLB as DNS server mode
     */
    server?: pulumi.Input<number>;
    /**
     * Append MX Records in Addition Section
     */
    serverAdditionMx?: pulumi.Input<number>;
    /**
     * Provide All Records
     */
    serverAny?: pulumi.Input<number>;
    /**
     * Provide All Records with GSLB Metrics applied to A/AAAA Records
     */
    serverAnyWithMetric?: pulumi.Input<number>;
    /**
     * As authoritative server
     */
    serverAuthoritative?: pulumi.Input<number>;
    /**
     * Provide A-Records for NS-Records automatically
     */
    serverAutoNs?: pulumi.Input<number>;
    /**
     * Provide PTR Records automatically
     */
    serverAutoPtr?: pulumi.Input<number>;
    /**
     * Provide CAA Records
     */
    serverCaa?: pulumi.Input<number>;
    /**
     * Provide CNAME Records
     */
    serverCname?: pulumi.Input<number>;
    /**
     * Provide Custom Records
     */
    serverCustom?: pulumi.Input<number>;
    /**
     * Append All A Records in Authoritative Section
     */
    serverFullList?: pulumi.Input<number>;
    /**
     * Only run GSLB as DNS server mode
     */
    serverModeOnly?: pulumi.Input<number>;
    /**
     * Provide MX Records
     */
    serverMx?: pulumi.Input<number>;
    /**
     * Provide NAPTR Records
     */
    serverNaptr?: pulumi.Input<number>;
    /**
     * Provide NS Records
     */
    serverNs?: pulumi.Input<number>;
    /**
     * Append All NS Records in Authoritative Section
     */
    serverNsList?: pulumi.Input<number>;
    /**
     * Provide PTR Records
     */
    serverPtr?: pulumi.Input<number>;
    /**
     * Provide DNSSEC support
     */
    serverSec?: pulumi.Input<number>;
    /**
     * Provide SRV Records
     */
    serverSrv?: pulumi.Input<number>;
    /**
     * Provide TXT Records
     */
    serverTxt?: pulumi.Input<number>;
    /**
     * Make DNS Record sticky for certain time
     */
    sticky?: pulumi.Input<number>;
    /**
     * Specify aging-time, unit: min, default is 5 (Aging time)
     */
    stickyAgingTime?: pulumi.Input<number>;
    /**
     * Specify IPv6 mask length, default is 128
     */
    stickyIpv6Mask?: pulumi.Input<number>;
    /**
     * Specify IP mask, default is /32
     */
    stickyMask?: pulumi.Input<string>;
    /**
     * Logging template (Logging Template Name)
     */
    template?: pulumi.Input<string>;
    /**
     * Specify the TTL value contained in DNS record (TTL value, unit: second, default is 10)
     */
    ttl?: pulumi.Input<number>;
    /**
     * Use DNS Server Response TTL value in GSLB Proxy mode
     */
    useServerTtl?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Only run GSLB as DNS server mode with zone ownership
     */
    zoneOwnerMode?: pulumi.Input<number>;
}
