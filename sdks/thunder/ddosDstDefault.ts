// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstDefault extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstDefault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstDefaultState, opts?: pulumi.CustomResourceOptions): DdosDstDefault {
        return new DdosDstDefault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstDefault:DdosDstDefault';

    /**
     * Returns true if the given object is an instance of DdosDstDefault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstDefault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstDefault.__pulumiType;
    }

    /**
     * Idle age for ip entry
     */
    public readonly age!: pulumi.Output<number | undefined>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    public readonly applyPolicyOnOverflow!: pulumi.Output<number | undefined>;
    /**
     * 'ip': ip; 'ipv6': ipv6;
     */
    public readonly defaultAddressType!: pulumi.Output<string>;
    /**
     * Blacklist and Drop all incoming packets
     */
    public readonly deny!: pulumi.Output<number | undefined>;
    /**
     * Disable
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * Disable certain drops during packet processing
     */
    public readonly dropDisable!: pulumi.Output<number | undefined>;
    /**
     * Immediately forward L4 drops
     */
    public readonly dropDisableFwdImmediate!: pulumi.Output<number | undefined>;
    /**
     * Drop fragmented packets
     */
    public readonly dropFragPkt!: pulumi.Output<number | undefined>;
    public readonly exceedLogCfg!: pulumi.Output<outputs.DdosDstDefaultExceedLogCfg | undefined>;
    public readonly exceedLogDepCfg!: pulumi.Output<outputs.DdosDstDefaultExceedLogDepCfg | undefined>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    /**
     * To set dscp value for inbound packets (DSCP Value for the clear traffic marking)
     */
    public readonly inboundForwardDscp!: pulumi.Output<number | undefined>;
    public readonly ipProtoLists!: pulumi.Output<outputs.DdosDstDefaultIpProtoList[] | undefined>;
    public readonly l4TypeLists!: pulumi.Output<outputs.DdosDstDefaultL4TypeList[] | undefined>;
    /**
     * Enable periodic log while event is continuing
     */
    public readonly logPeriodic!: pulumi.Output<number | undefined>;
    /**
     * Maximum count for dynamic dst entry
     */
    public readonly maxDynamicEntryCount!: pulumi.Output<number | undefined>;
    /**
     * To set dscp value for outbound
     */
    public readonly outboundForwardDscp!: pulumi.Output<number | undefined>;
    public readonly portLists!: pulumi.Output<outputs.DdosDstDefaultPortList[] | undefined>;
    public readonly srcPortLists!: pulumi.Output<outputs.DdosDstDefaultSrcPortList[] | undefined>;
    public readonly template!: pulumi.Output<outputs.DdosDstDefaultTemplate | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosDstDefault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstDefaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstDefaultArgs | DdosDstDefaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstDefaultState | undefined;
            resourceInputs["age"] = state ? state.age : undefined;
            resourceInputs["applyPolicyOnOverflow"] = state ? state.applyPolicyOnOverflow : undefined;
            resourceInputs["defaultAddressType"] = state ? state.defaultAddressType : undefined;
            resourceInputs["deny"] = state ? state.deny : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dropDisable"] = state ? state.dropDisable : undefined;
            resourceInputs["dropDisableFwdImmediate"] = state ? state.dropDisableFwdImmediate : undefined;
            resourceInputs["dropFragPkt"] = state ? state.dropFragPkt : undefined;
            resourceInputs["exceedLogCfg"] = state ? state.exceedLogCfg : undefined;
            resourceInputs["exceedLogDepCfg"] = state ? state.exceedLogDepCfg : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["inboundForwardDscp"] = state ? state.inboundForwardDscp : undefined;
            resourceInputs["ipProtoLists"] = state ? state.ipProtoLists : undefined;
            resourceInputs["l4TypeLists"] = state ? state.l4TypeLists : undefined;
            resourceInputs["logPeriodic"] = state ? state.logPeriodic : undefined;
            resourceInputs["maxDynamicEntryCount"] = state ? state.maxDynamicEntryCount : undefined;
            resourceInputs["outboundForwardDscp"] = state ? state.outboundForwardDscp : undefined;
            resourceInputs["portLists"] = state ? state.portLists : undefined;
            resourceInputs["srcPortLists"] = state ? state.srcPortLists : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosDstDefaultArgs | undefined;
            if ((!args || args.defaultAddressType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAddressType'");
            }
            resourceInputs["age"] = args ? args.age : undefined;
            resourceInputs["applyPolicyOnOverflow"] = args ? args.applyPolicyOnOverflow : undefined;
            resourceInputs["defaultAddressType"] = args ? args.defaultAddressType : undefined;
            resourceInputs["deny"] = args ? args.deny : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["dropDisable"] = args ? args.dropDisable : undefined;
            resourceInputs["dropDisableFwdImmediate"] = args ? args.dropDisableFwdImmediate : undefined;
            resourceInputs["dropFragPkt"] = args ? args.dropFragPkt : undefined;
            resourceInputs["exceedLogCfg"] = args ? args.exceedLogCfg : undefined;
            resourceInputs["exceedLogDepCfg"] = args ? args.exceedLogDepCfg : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["inboundForwardDscp"] = args ? args.inboundForwardDscp : undefined;
            resourceInputs["ipProtoLists"] = args ? args.ipProtoLists : undefined;
            resourceInputs["l4TypeLists"] = args ? args.l4TypeLists : undefined;
            resourceInputs["logPeriodic"] = args ? args.logPeriodic : undefined;
            resourceInputs["maxDynamicEntryCount"] = args ? args.maxDynamicEntryCount : undefined;
            resourceInputs["outboundForwardDscp"] = args ? args.outboundForwardDscp : undefined;
            resourceInputs["portLists"] = args ? args.portLists : undefined;
            resourceInputs["srcPortLists"] = args ? args.srcPortLists : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstDefault.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstDefault resources.
 */
export interface DdosDstDefaultState {
    /**
     * Idle age for ip entry
     */
    age?: pulumi.Input<number>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    applyPolicyOnOverflow?: pulumi.Input<number>;
    /**
     * 'ip': ip; 'ipv6': ipv6;
     */
    defaultAddressType?: pulumi.Input<string>;
    /**
     * Blacklist and Drop all incoming packets
     */
    deny?: pulumi.Input<number>;
    /**
     * Disable
     */
    disable?: pulumi.Input<number>;
    /**
     * Disable certain drops during packet processing
     */
    dropDisable?: pulumi.Input<number>;
    /**
     * Immediately forward L4 drops
     */
    dropDisableFwdImmediate?: pulumi.Input<number>;
    /**
     * Drop fragmented packets
     */
    dropFragPkt?: pulumi.Input<number>;
    exceedLogCfg?: pulumi.Input<inputs.DdosDstDefaultExceedLogCfg>;
    exceedLogDepCfg?: pulumi.Input<inputs.DdosDstDefaultExceedLogDepCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * To set dscp value for inbound packets (DSCP Value for the clear traffic marking)
     */
    inboundForwardDscp?: pulumi.Input<number>;
    ipProtoLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultIpProtoList>[]>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultL4TypeList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * Maximum count for dynamic dst entry
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    /**
     * To set dscp value for outbound
     */
    outboundForwardDscp?: pulumi.Input<number>;
    portLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultPortList>[]>;
    srcPortLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultSrcPortList>[]>;
    template?: pulumi.Input<inputs.DdosDstDefaultTemplate>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDstDefault resource.
 */
export interface DdosDstDefaultArgs {
    /**
     * Idle age for ip entry
     */
    age?: pulumi.Input<number>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    applyPolicyOnOverflow?: pulumi.Input<number>;
    /**
     * 'ip': ip; 'ipv6': ipv6;
     */
    defaultAddressType: pulumi.Input<string>;
    /**
     * Blacklist and Drop all incoming packets
     */
    deny?: pulumi.Input<number>;
    /**
     * Disable
     */
    disable?: pulumi.Input<number>;
    /**
     * Disable certain drops during packet processing
     */
    dropDisable?: pulumi.Input<number>;
    /**
     * Immediately forward L4 drops
     */
    dropDisableFwdImmediate?: pulumi.Input<number>;
    /**
     * Drop fragmented packets
     */
    dropFragPkt?: pulumi.Input<number>;
    exceedLogCfg?: pulumi.Input<inputs.DdosDstDefaultExceedLogCfg>;
    exceedLogDepCfg?: pulumi.Input<inputs.DdosDstDefaultExceedLogDepCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * To set dscp value for inbound packets (DSCP Value for the clear traffic marking)
     */
    inboundForwardDscp?: pulumi.Input<number>;
    ipProtoLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultIpProtoList>[]>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultL4TypeList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * Maximum count for dynamic dst entry
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    /**
     * To set dscp value for outbound
     */
    outboundForwardDscp?: pulumi.Input<number>;
    portLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultPortList>[]>;
    srcPortLists?: pulumi.Input<pulumi.Input<inputs.DdosDstDefaultSrcPortList>[]>;
    template?: pulumi.Input<inputs.DdosDstDefaultTemplate>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
