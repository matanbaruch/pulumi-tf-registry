// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbCommonQuic extends pulumi.CustomResource {
    /**
     * Get an existing SlbCommonQuic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbCommonQuicState, opts?: pulumi.CustomResourceOptions): SlbCommonQuic {
        return new SlbCommonQuic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbCommonQuic:SlbCommonQuic';

    /**
     * Returns true if the given object is an instance of SlbCommonQuic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbCommonQuic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbCommonQuic.__pulumiType;
    }

    /**
     * Length of CID
     */
    public readonly cidLen!: pulumi.Output<number | undefined>;
    /**
     * Offset for Encoded CPU
     */
    public readonly cpuOffset!: pulumi.Output<number | undefined>;
    /**
     * Enable CID Hashing
     */
    public readonly enableHash!: pulumi.Output<number | undefined>;
    /**
     * Enable CID Signature Validation
     */
    public readonly enableSignature!: pulumi.Output<number | undefined>;
    /**
     * Offset for QUIC-LB
     */
    public readonly quicLbOffset!: pulumi.Output<number | undefined>;
    /**
     * Set CID Signature
     */
    public readonly signature!: pulumi.Output<string | undefined>;
    /**
     * Offset for CID Signature
     */
    public readonly signatureLen!: pulumi.Output<number | undefined>;
    /**
     * Offset for CID Signature
     */
    public readonly signatureOffset!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbCommonQuic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbCommonQuicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbCommonQuicArgs | SlbCommonQuicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbCommonQuicState | undefined;
            resourceInputs["cidLen"] = state ? state.cidLen : undefined;
            resourceInputs["cpuOffset"] = state ? state.cpuOffset : undefined;
            resourceInputs["enableHash"] = state ? state.enableHash : undefined;
            resourceInputs["enableSignature"] = state ? state.enableSignature : undefined;
            resourceInputs["quicLbOffset"] = state ? state.quicLbOffset : undefined;
            resourceInputs["signature"] = state ? state.signature : undefined;
            resourceInputs["signatureLen"] = state ? state.signatureLen : undefined;
            resourceInputs["signatureOffset"] = state ? state.signatureOffset : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbCommonQuicArgs | undefined;
            resourceInputs["cidLen"] = args ? args.cidLen : undefined;
            resourceInputs["cpuOffset"] = args ? args.cpuOffset : undefined;
            resourceInputs["enableHash"] = args ? args.enableHash : undefined;
            resourceInputs["enableSignature"] = args ? args.enableSignature : undefined;
            resourceInputs["quicLbOffset"] = args ? args.quicLbOffset : undefined;
            resourceInputs["signature"] = args ? args.signature : undefined;
            resourceInputs["signatureLen"] = args ? args.signatureLen : undefined;
            resourceInputs["signatureOffset"] = args ? args.signatureOffset : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbCommonQuic.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbCommonQuic resources.
 */
export interface SlbCommonQuicState {
    /**
     * Length of CID
     */
    cidLen?: pulumi.Input<number>;
    /**
     * Offset for Encoded CPU
     */
    cpuOffset?: pulumi.Input<number>;
    /**
     * Enable CID Hashing
     */
    enableHash?: pulumi.Input<number>;
    /**
     * Enable CID Signature Validation
     */
    enableSignature?: pulumi.Input<number>;
    /**
     * Offset for QUIC-LB
     */
    quicLbOffset?: pulumi.Input<number>;
    /**
     * Set CID Signature
     */
    signature?: pulumi.Input<string>;
    /**
     * Offset for CID Signature
     */
    signatureLen?: pulumi.Input<number>;
    /**
     * Offset for CID Signature
     */
    signatureOffset?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbCommonQuic resource.
 */
export interface SlbCommonQuicArgs {
    /**
     * Length of CID
     */
    cidLen?: pulumi.Input<number>;
    /**
     * Offset for Encoded CPU
     */
    cpuOffset?: pulumi.Input<number>;
    /**
     * Enable CID Hashing
     */
    enableHash?: pulumi.Input<number>;
    /**
     * Enable CID Signature Validation
     */
    enableSignature?: pulumi.Input<number>;
    /**
     * Offset for QUIC-LB
     */
    quicLbOffset?: pulumi.Input<number>;
    /**
     * Set CID Signature
     */
    signature?: pulumi.Input<string>;
    /**
     * Offset for CID Signature
     */
    signatureLen?: pulumi.Input<number>;
    /**
     * Offset for CID Signature
     */
    signatureOffset?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
