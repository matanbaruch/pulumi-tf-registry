// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosZoneTemplateSipFilterHeader extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneTemplateSipFilterHeader resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneTemplateSipFilterHeaderState, opts?: pulumi.CustomResourceOptions): DdosZoneTemplateSipFilterHeader {
        return new DdosZoneTemplateSipFilterHeader(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneTemplateSipFilterHeader:DdosZoneTemplateSipFilterHeader';

    /**
     * Returns true if the given object is an instance of DdosZoneTemplateSipFilterHeader.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneTemplateSipFilterHeader {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneTemplateSipFilterHeader.__pulumiType;
    }

    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src; 'reset': Reset client connection(for sip-tcp);
     */
    public readonly sipFilterAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take
     */
    public readonly sipFilterActionListName!: pulumi.Output<string | undefined>;
    /**
     * Sequence number
     */
    public readonly sipFilterHeaderSeq!: pulumi.Output<number | undefined>;
    public readonly sipFilterName!: pulumi.Output<string>;
    public readonly sipHeaderCfg!: pulumi.Output<outputs.DdosZoneTemplateSipFilterHeaderSipHeaderCfg | undefined>;
    /**
     * SipTmplName
     */
    public readonly sipTmplName!: pulumi.Output<string>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosZoneTemplateSipFilterHeader resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneTemplateSipFilterHeaderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneTemplateSipFilterHeaderArgs | DdosZoneTemplateSipFilterHeaderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneTemplateSipFilterHeaderState | undefined;
            resourceInputs["sipFilterAction"] = state ? state.sipFilterAction : undefined;
            resourceInputs["sipFilterActionListName"] = state ? state.sipFilterActionListName : undefined;
            resourceInputs["sipFilterHeaderSeq"] = state ? state.sipFilterHeaderSeq : undefined;
            resourceInputs["sipFilterName"] = state ? state.sipFilterName : undefined;
            resourceInputs["sipHeaderCfg"] = state ? state.sipHeaderCfg : undefined;
            resourceInputs["sipTmplName"] = state ? state.sipTmplName : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosZoneTemplateSipFilterHeaderArgs | undefined;
            if ((!args || args.sipFilterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sipFilterName'");
            }
            if ((!args || args.sipTmplName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sipTmplName'");
            }
            resourceInputs["sipFilterAction"] = args ? args.sipFilterAction : undefined;
            resourceInputs["sipFilterActionListName"] = args ? args.sipFilterActionListName : undefined;
            resourceInputs["sipFilterHeaderSeq"] = args ? args.sipFilterHeaderSeq : undefined;
            resourceInputs["sipFilterName"] = args ? args.sipFilterName : undefined;
            resourceInputs["sipHeaderCfg"] = args ? args.sipHeaderCfg : undefined;
            resourceInputs["sipTmplName"] = args ? args.sipTmplName : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneTemplateSipFilterHeader.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneTemplateSipFilterHeader resources.
 */
export interface DdosZoneTemplateSipFilterHeaderState {
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src; 'reset': Reset client connection(for sip-tcp);
     */
    sipFilterAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    sipFilterActionListName?: pulumi.Input<string>;
    /**
     * Sequence number
     */
    sipFilterHeaderSeq?: pulumi.Input<number>;
    sipFilterName?: pulumi.Input<string>;
    sipHeaderCfg?: pulumi.Input<inputs.DdosZoneTemplateSipFilterHeaderSipHeaderCfg>;
    /**
     * SipTmplName
     */
    sipTmplName?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosZoneTemplateSipFilterHeader resource.
 */
export interface DdosZoneTemplateSipFilterHeaderArgs {
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src; 'reset': Reset client connection(for sip-tcp);
     */
    sipFilterAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    sipFilterActionListName?: pulumi.Input<string>;
    /**
     * Sequence number
     */
    sipFilterHeaderSeq?: pulumi.Input<number>;
    sipFilterName: pulumi.Input<string>;
    sipHeaderCfg?: pulumi.Input<inputs.DdosZoneTemplateSipFilterHeaderSipHeaderCfg>;
    /**
     * SipTmplName
     */
    sipTmplName: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
