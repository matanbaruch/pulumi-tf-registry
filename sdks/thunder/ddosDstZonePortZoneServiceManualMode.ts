// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstZonePortZoneServiceManualMode extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstZonePortZoneServiceManualMode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstZonePortZoneServiceManualModeState, opts?: pulumi.CustomResourceOptions): DdosDstZonePortZoneServiceManualMode {
        return new DdosDstZonePortZoneServiceManualMode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstZonePortZoneServiceManualMode:DdosDstZonePortZoneServiceManualMode';

    /**
     * Returns true if the given object is an instance of DdosDstZonePortZoneServiceManualMode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstZonePortZoneServiceManualMode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstZonePortZoneServiceManualMode.__pulumiType;
    }

    /**
     * Close session for unauthenticated sources
     */
    public readonly closeSessionsForUnauthSources!: pulumi.Output<number | undefined>;
    /**
     * 'configuration': Manual-mode configuration;
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * 'drop': Drop packets for glid exceed (Default); 'blacklist-src': Blacklist-src for glid exceed; 'ignore': Do nothing for
     * glid exceed;
     */
    public readonly glidAction!: pulumi.Output<string | undefined>;
    /**
     * PortNum
     */
    public readonly portNum!: pulumi.Output<string>;
    /**
     * Protocol
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Global limit ID
     */
    public readonly srcDefaultGlid!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * ZoneName
     */
    public readonly zoneName!: pulumi.Output<string>;
    public readonly zoneTemplate!: pulumi.Output<outputs.DdosDstZonePortZoneServiceManualModeZoneTemplate | undefined>;

    /**
     * Create a DdosDstZonePortZoneServiceManualMode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstZonePortZoneServiceManualModeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstZonePortZoneServiceManualModeArgs | DdosDstZonePortZoneServiceManualModeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstZonePortZoneServiceManualModeState | undefined;
            resourceInputs["closeSessionsForUnauthSources"] = state ? state.closeSessionsForUnauthSources : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["glidAction"] = state ? state.glidAction : undefined;
            resourceInputs["portNum"] = state ? state.portNum : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["srcDefaultGlid"] = state ? state.srcDefaultGlid : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
            resourceInputs["zoneTemplate"] = state ? state.zoneTemplate : undefined;
        } else {
            const args = argsOrState as DdosDstZonePortZoneServiceManualModeArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.portNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portNum'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["closeSessionsForUnauthSources"] = args ? args.closeSessionsForUnauthSources : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["glidAction"] = args ? args.glidAction : undefined;
            resourceInputs["portNum"] = args ? args.portNum : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["srcDefaultGlid"] = args ? args.srcDefaultGlid : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["zoneTemplate"] = args ? args.zoneTemplate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstZonePortZoneServiceManualMode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstZonePortZoneServiceManualMode resources.
 */
export interface DdosDstZonePortZoneServiceManualModeState {
    /**
     * Close session for unauthenticated sources
     */
    closeSessionsForUnauthSources?: pulumi.Input<number>;
    /**
     * 'configuration': Manual-mode configuration;
     */
    config?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for glid exceed (Default); 'blacklist-src': Blacklist-src for glid exceed; 'ignore': Do nothing for
     * glid exceed;
     */
    glidAction?: pulumi.Input<string>;
    /**
     * PortNum
     */
    portNum?: pulumi.Input<string>;
    /**
     * Protocol
     */
    protocol?: pulumi.Input<string>;
    /**
     * Global limit ID
     */
    srcDefaultGlid?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName?: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZonePortZoneServiceManualModeZoneTemplate>;
}

/**
 * The set of arguments for constructing a DdosDstZonePortZoneServiceManualMode resource.
 */
export interface DdosDstZonePortZoneServiceManualModeArgs {
    /**
     * Close session for unauthenticated sources
     */
    closeSessionsForUnauthSources?: pulumi.Input<number>;
    /**
     * 'configuration': Manual-mode configuration;
     */
    config: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for glid exceed (Default); 'blacklist-src': Blacklist-src for glid exceed; 'ignore': Do nothing for
     * glid exceed;
     */
    glidAction?: pulumi.Input<string>;
    /**
     * PortNum
     */
    portNum: pulumi.Input<string>;
    /**
     * Protocol
     */
    protocol: pulumi.Input<string>;
    /**
     * Global limit ID
     */
    srcDefaultGlid?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZonePortZoneServiceManualModeZoneTemplate>;
}
