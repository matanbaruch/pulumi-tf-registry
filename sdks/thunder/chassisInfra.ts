// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ChassisInfra extends pulumi.CustomResource {
    /**
     * Get an existing ChassisInfra resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChassisInfraState, opts?: pulumi.CustomResourceOptions): ChassisInfra {
        return new ChassisInfra(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/chassisInfra:ChassisInfra';

    /**
     * Returns true if the given object is an instance of ChassisInfra.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChassisInfra {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChassisInfra.__pulumiType;
    }

    /**
     * Disable chassis infrastruture debugging
     */
    public readonly debugDisable!: pulumi.Output<number | undefined>;
    /**
     * Enable chassis infrastruture debugging
     */
    public readonly debugEnable!: pulumi.Output<number | undefined>;
    /**
     * Show chassis infrastruture debugging status
     */
    public readonly debugStatus!: pulumi.Output<number | undefined>;
    /**
     * Give Chassis filesystem info( USED BY TAC ONLY )
     */
    public readonly detailed!: pulumi.Output<number | undefined>;
    /**
     * Synchronize the Master and Blade filesystems (For A10 TAC Use Only)
     */
    public readonly sysSync!: pulumi.Output<number | undefined>;
    /**
     * Validate chassis filesytem synchronization status (For A10 TAC Use Only)
     */
    public readonly systemSyncVerify!: pulumi.Output<number | undefined>;

    /**
     * Create a ChassisInfra resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ChassisInfraArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChassisInfraArgs | ChassisInfraState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChassisInfraState | undefined;
            resourceInputs["debugDisable"] = state ? state.debugDisable : undefined;
            resourceInputs["debugEnable"] = state ? state.debugEnable : undefined;
            resourceInputs["debugStatus"] = state ? state.debugStatus : undefined;
            resourceInputs["detailed"] = state ? state.detailed : undefined;
            resourceInputs["sysSync"] = state ? state.sysSync : undefined;
            resourceInputs["systemSyncVerify"] = state ? state.systemSyncVerify : undefined;
        } else {
            const args = argsOrState as ChassisInfraArgs | undefined;
            resourceInputs["debugDisable"] = args ? args.debugDisable : undefined;
            resourceInputs["debugEnable"] = args ? args.debugEnable : undefined;
            resourceInputs["debugStatus"] = args ? args.debugStatus : undefined;
            resourceInputs["detailed"] = args ? args.detailed : undefined;
            resourceInputs["sysSync"] = args ? args.sysSync : undefined;
            resourceInputs["systemSyncVerify"] = args ? args.systemSyncVerify : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ChassisInfra.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ChassisInfra resources.
 */
export interface ChassisInfraState {
    /**
     * Disable chassis infrastruture debugging
     */
    debugDisable?: pulumi.Input<number>;
    /**
     * Enable chassis infrastruture debugging
     */
    debugEnable?: pulumi.Input<number>;
    /**
     * Show chassis infrastruture debugging status
     */
    debugStatus?: pulumi.Input<number>;
    /**
     * Give Chassis filesystem info( USED BY TAC ONLY )
     */
    detailed?: pulumi.Input<number>;
    /**
     * Synchronize the Master and Blade filesystems (For A10 TAC Use Only)
     */
    sysSync?: pulumi.Input<number>;
    /**
     * Validate chassis filesytem synchronization status (For A10 TAC Use Only)
     */
    systemSyncVerify?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ChassisInfra resource.
 */
export interface ChassisInfraArgs {
    /**
     * Disable chassis infrastruture debugging
     */
    debugDisable?: pulumi.Input<number>;
    /**
     * Enable chassis infrastruture debugging
     */
    debugEnable?: pulumi.Input<number>;
    /**
     * Show chassis infrastruture debugging status
     */
    debugStatus?: pulumi.Input<number>;
    /**
     * Give Chassis filesystem info( USED BY TAC ONLY )
     */
    detailed?: pulumi.Input<number>;
    /**
     * Synchronize the Master and Blade filesystems (For A10 TAC Use Only)
     */
    sysSync?: pulumi.Input<number>;
    /**
     * Validate chassis filesytem synchronization status (For A10 TAC Use Only)
     */
    systemSyncVerify?: pulumi.Input<number>;
}
