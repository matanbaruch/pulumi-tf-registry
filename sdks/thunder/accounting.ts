// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Accounting extends pulumi.CustomResource {
    /**
     * Get an existing Accounting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccountingState, opts?: pulumi.CustomResourceOptions): Accounting {
        return new Accounting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/accounting:Accounting';

    /**
     * Returns true if the given object is an instance of Accounting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Accounting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Accounting.__pulumiType;
    }

    /**
     * Enable level for commands accounting
     */
    public readonly commands!: pulumi.Output<number | undefined>;
    /**
     * Specify the debug level for accounting (Debug level for command accounting. bitwise OR of the following: 1(common),
     * 2(packet),4(packet detail), 8(md5))
     */
    public readonly debug!: pulumi.Output<number | undefined>;
    public readonly exec!: pulumi.Output<outputs.AccountingExec | undefined>;
    /**
     * Record stop when service terminates
     */
    public readonly stopOnly!: pulumi.Output<number | undefined>;
    /**
     * Use TACACS+ servers for accounting
     */
    public readonly tacplus!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Accounting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AccountingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccountingArgs | AccountingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccountingState | undefined;
            resourceInputs["commands"] = state ? state.commands : undefined;
            resourceInputs["debug"] = state ? state.debug : undefined;
            resourceInputs["exec"] = state ? state.exec : undefined;
            resourceInputs["stopOnly"] = state ? state.stopOnly : undefined;
            resourceInputs["tacplus"] = state ? state.tacplus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AccountingArgs | undefined;
            resourceInputs["commands"] = args ? args.commands : undefined;
            resourceInputs["debug"] = args ? args.debug : undefined;
            resourceInputs["exec"] = args ? args.exec : undefined;
            resourceInputs["stopOnly"] = args ? args.stopOnly : undefined;
            resourceInputs["tacplus"] = args ? args.tacplus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Accounting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Accounting resources.
 */
export interface AccountingState {
    /**
     * Enable level for commands accounting
     */
    commands?: pulumi.Input<number>;
    /**
     * Specify the debug level for accounting (Debug level for command accounting. bitwise OR of the following: 1(common),
     * 2(packet),4(packet detail), 8(md5))
     */
    debug?: pulumi.Input<number>;
    exec?: pulumi.Input<inputs.AccountingExec>;
    /**
     * Record stop when service terminates
     */
    stopOnly?: pulumi.Input<number>;
    /**
     * Use TACACS+ servers for accounting
     */
    tacplus?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Accounting resource.
 */
export interface AccountingArgs {
    /**
     * Enable level for commands accounting
     */
    commands?: pulumi.Input<number>;
    /**
     * Specify the debug level for accounting (Debug level for command accounting. bitwise OR of the following: 1(common),
     * 2(packet),4(packet detail), 8(md5))
     */
    debug?: pulumi.Input<number>;
    exec?: pulumi.Input<inputs.AccountingExec>;
    /**
     * Record stop when service terminates
     */
    stopOnly?: pulumi.Input<number>;
    /**
     * Use TACACS+ servers for accounting
     */
    tacplus?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
