// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateDns extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateDnsState, opts?: pulumi.CustomResourceOptions): SlbTemplateDns {
        return new SlbTemplateDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateDns:SlbTemplateDns';

    /**
     * Returns true if the given object is an instance of SlbTemplateDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateDns.__pulumiType;
    }

    /**
     * 'block-length': Block-Length Padding; 'random-block-length': Random-Block-Length Padding;
     */
    public readonly addPaddingToClient!: pulumi.Output<string | undefined>;
    /**
     * 'global': Follow global cofiguration (Default); 'no-change': No change in record order; 'round-robin': Round-robin;
     */
    public readonly cacheRecordServingPolicy!: pulumi.Output<string | undefined>;
    /**
     * enable the ttl adjustment for dns cache response
     */
    public readonly cacheTtlAdjustmentEnable!: pulumi.Output<number | undefined>;
    public readonly classList!: pulumi.Output<outputs.SlbTemplateDnsClassList | undefined>;
    /**
     * 'nocache': Cache disable; 'cache': Cache enable;
     */
    public readonly defaultPolicy!: pulumi.Output<string | undefined>;
    /**
     * Disable DNS template
     */
    public readonly disableDnsTemplate!: pulumi.Output<number | undefined>;
    /**
     * Disable DNS recursive available flag in cached response
     */
    public readonly disableRaCachedResp!: pulumi.Output<number | undefined>;
    /**
     * Disable attaching SOA due to RPZ
     */
    public readonly disableRpzAttachSoa!: pulumi.Output<number | undefined>;
    public readonly dns64!: pulumi.Output<outputs.SlbTemplateDnsDns64 | undefined>;
    /**
     * dns logging template (DNS Logging template name)
     */
    public readonly dnsLogging!: pulumi.Output<string | undefined>;
    /**
     * Use different service group if DNSSEC DO bit set (Service Group Name)
     */
    public readonly dnssecServiceGroup!: pulumi.Output<string | undefined>;
    /**
     * Drop the malformed query
     */
    public readonly drop!: pulumi.Output<number | undefined>;
    /**
     * Enable DNS cache sharing
     */
    public readonly enableCacheSharing!: pulumi.Output<number | undefined>;
    /**
     * Forward to service group (Service group name)
     */
    public readonly forward!: pulumi.Output<string | undefined>;
    /**
     * prefix-length to insert for IPv4
     */
    public readonly insertIpv4!: pulumi.Output<number | undefined>;
    /**
     * prefix-length to insert for IPv6
     */
    public readonly insertIpv6!: pulumi.Output<number | undefined>;
    public readonly localDnsResolution!: pulumi.Output<outputs.SlbTemplateDnsLocalDnsResolution | undefined>;
    /**
     * Define maximum cache entry size (Maximum cache entry size per VIP (default 1024))
     */
    public readonly maxCacheEntrySize!: pulumi.Output<number | undefined>;
    /**
     * Define maximum cache size (Maximum cache entry per VIP)
     */
    public readonly maxCacheSize!: pulumi.Output<number | undefined>;
    /**
     * Define Maximum DNS Query Length, default is unlimited (Specify Maximum Length)
     */
    public readonly maxQueryLength!: pulumi.Output<number | undefined>;
    /**
     * DNS Template Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly negativeDnsCache!: pulumi.Output<outputs.SlbTemplateDnsNegativeDnsCache | undefined>;
    /**
     * Period in minutes
     */
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly queryClassFilter!: pulumi.Output<outputs.SlbTemplateDnsQueryClassFilter | undefined>;
    /**
     * Use DNS query ID to create sesion
     */
    public readonly queryIdSwitch!: pulumi.Output<number | undefined>;
    public readonly queryTypeFilter!: pulumi.Output<outputs.SlbTemplateDnsQueryTypeFilter | undefined>;
    public readonly recursiveDnsResolution!: pulumi.Output<outputs.SlbTemplateDnsRecursiveDnsResolution | undefined>;
    /**
     * Direct the client to retry with TCP for DNS UDP request
     */
    public readonly redirectToTcpPort!: pulumi.Output<number | undefined>;
    /**
     * Make answers created from cache non-authoritative
     */
    public readonly removeAaFlag!: pulumi.Output<number | undefined>;
    /**
     * Remove EDNS(0) client subnet from client queries
     */
    public readonly removeCsubnet!: pulumi.Output<number | undefined>;
    /**
     * Remove EDNS(0) padding to server
     */
    public readonly removePaddingToServer!: pulumi.Output<number | undefined>;
    public readonly responseRateLimiting!: pulumi.Output<outputs.SlbTemplateDnsResponseRateLimiting | undefined>;
    public readonly rpzLists!: pulumi.Output<outputs.SlbTemplateDnsRpzList[] | undefined>;
    public readonly udpRetransmit!: pulumi.Output<outputs.SlbTemplateDnsUdpRetransmit | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateDnsArgs | SlbTemplateDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateDnsState | undefined;
            resourceInputs["addPaddingToClient"] = state ? state.addPaddingToClient : undefined;
            resourceInputs["cacheRecordServingPolicy"] = state ? state.cacheRecordServingPolicy : undefined;
            resourceInputs["cacheTtlAdjustmentEnable"] = state ? state.cacheTtlAdjustmentEnable : undefined;
            resourceInputs["classList"] = state ? state.classList : undefined;
            resourceInputs["defaultPolicy"] = state ? state.defaultPolicy : undefined;
            resourceInputs["disableDnsTemplate"] = state ? state.disableDnsTemplate : undefined;
            resourceInputs["disableRaCachedResp"] = state ? state.disableRaCachedResp : undefined;
            resourceInputs["disableRpzAttachSoa"] = state ? state.disableRpzAttachSoa : undefined;
            resourceInputs["dns64"] = state ? state.dns64 : undefined;
            resourceInputs["dnsLogging"] = state ? state.dnsLogging : undefined;
            resourceInputs["dnssecServiceGroup"] = state ? state.dnssecServiceGroup : undefined;
            resourceInputs["drop"] = state ? state.drop : undefined;
            resourceInputs["enableCacheSharing"] = state ? state.enableCacheSharing : undefined;
            resourceInputs["forward"] = state ? state.forward : undefined;
            resourceInputs["insertIpv4"] = state ? state.insertIpv4 : undefined;
            resourceInputs["insertIpv6"] = state ? state.insertIpv6 : undefined;
            resourceInputs["localDnsResolution"] = state ? state.localDnsResolution : undefined;
            resourceInputs["maxCacheEntrySize"] = state ? state.maxCacheEntrySize : undefined;
            resourceInputs["maxCacheSize"] = state ? state.maxCacheSize : undefined;
            resourceInputs["maxQueryLength"] = state ? state.maxQueryLength : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negativeDnsCache"] = state ? state.negativeDnsCache : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["queryClassFilter"] = state ? state.queryClassFilter : undefined;
            resourceInputs["queryIdSwitch"] = state ? state.queryIdSwitch : undefined;
            resourceInputs["queryTypeFilter"] = state ? state.queryTypeFilter : undefined;
            resourceInputs["recursiveDnsResolution"] = state ? state.recursiveDnsResolution : undefined;
            resourceInputs["redirectToTcpPort"] = state ? state.redirectToTcpPort : undefined;
            resourceInputs["removeAaFlag"] = state ? state.removeAaFlag : undefined;
            resourceInputs["removeCsubnet"] = state ? state.removeCsubnet : undefined;
            resourceInputs["removePaddingToServer"] = state ? state.removePaddingToServer : undefined;
            resourceInputs["responseRateLimiting"] = state ? state.responseRateLimiting : undefined;
            resourceInputs["rpzLists"] = state ? state.rpzLists : undefined;
            resourceInputs["udpRetransmit"] = state ? state.udpRetransmit : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateDnsArgs | undefined;
            resourceInputs["addPaddingToClient"] = args ? args.addPaddingToClient : undefined;
            resourceInputs["cacheRecordServingPolicy"] = args ? args.cacheRecordServingPolicy : undefined;
            resourceInputs["cacheTtlAdjustmentEnable"] = args ? args.cacheTtlAdjustmentEnable : undefined;
            resourceInputs["classList"] = args ? args.classList : undefined;
            resourceInputs["defaultPolicy"] = args ? args.defaultPolicy : undefined;
            resourceInputs["disableDnsTemplate"] = args ? args.disableDnsTemplate : undefined;
            resourceInputs["disableRaCachedResp"] = args ? args.disableRaCachedResp : undefined;
            resourceInputs["disableRpzAttachSoa"] = args ? args.disableRpzAttachSoa : undefined;
            resourceInputs["dns64"] = args ? args.dns64 : undefined;
            resourceInputs["dnsLogging"] = args ? args.dnsLogging : undefined;
            resourceInputs["dnssecServiceGroup"] = args ? args.dnssecServiceGroup : undefined;
            resourceInputs["drop"] = args ? args.drop : undefined;
            resourceInputs["enableCacheSharing"] = args ? args.enableCacheSharing : undefined;
            resourceInputs["forward"] = args ? args.forward : undefined;
            resourceInputs["insertIpv4"] = args ? args.insertIpv4 : undefined;
            resourceInputs["insertIpv6"] = args ? args.insertIpv6 : undefined;
            resourceInputs["localDnsResolution"] = args ? args.localDnsResolution : undefined;
            resourceInputs["maxCacheEntrySize"] = args ? args.maxCacheEntrySize : undefined;
            resourceInputs["maxCacheSize"] = args ? args.maxCacheSize : undefined;
            resourceInputs["maxQueryLength"] = args ? args.maxQueryLength : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negativeDnsCache"] = args ? args.negativeDnsCache : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["queryClassFilter"] = args ? args.queryClassFilter : undefined;
            resourceInputs["queryIdSwitch"] = args ? args.queryIdSwitch : undefined;
            resourceInputs["queryTypeFilter"] = args ? args.queryTypeFilter : undefined;
            resourceInputs["recursiveDnsResolution"] = args ? args.recursiveDnsResolution : undefined;
            resourceInputs["redirectToTcpPort"] = args ? args.redirectToTcpPort : undefined;
            resourceInputs["removeAaFlag"] = args ? args.removeAaFlag : undefined;
            resourceInputs["removeCsubnet"] = args ? args.removeCsubnet : undefined;
            resourceInputs["removePaddingToServer"] = args ? args.removePaddingToServer : undefined;
            resourceInputs["responseRateLimiting"] = args ? args.responseRateLimiting : undefined;
            resourceInputs["rpzLists"] = args ? args.rpzLists : undefined;
            resourceInputs["udpRetransmit"] = args ? args.udpRetransmit : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateDns resources.
 */
export interface SlbTemplateDnsState {
    /**
     * 'block-length': Block-Length Padding; 'random-block-length': Random-Block-Length Padding;
     */
    addPaddingToClient?: pulumi.Input<string>;
    /**
     * 'global': Follow global cofiguration (Default); 'no-change': No change in record order; 'round-robin': Round-robin;
     */
    cacheRecordServingPolicy?: pulumi.Input<string>;
    /**
     * enable the ttl adjustment for dns cache response
     */
    cacheTtlAdjustmentEnable?: pulumi.Input<number>;
    classList?: pulumi.Input<inputs.SlbTemplateDnsClassList>;
    /**
     * 'nocache': Cache disable; 'cache': Cache enable;
     */
    defaultPolicy?: pulumi.Input<string>;
    /**
     * Disable DNS template
     */
    disableDnsTemplate?: pulumi.Input<number>;
    /**
     * Disable DNS recursive available flag in cached response
     */
    disableRaCachedResp?: pulumi.Input<number>;
    /**
     * Disable attaching SOA due to RPZ
     */
    disableRpzAttachSoa?: pulumi.Input<number>;
    dns64?: pulumi.Input<inputs.SlbTemplateDnsDns64>;
    /**
     * dns logging template (DNS Logging template name)
     */
    dnsLogging?: pulumi.Input<string>;
    /**
     * Use different service group if DNSSEC DO bit set (Service Group Name)
     */
    dnssecServiceGroup?: pulumi.Input<string>;
    /**
     * Drop the malformed query
     */
    drop?: pulumi.Input<number>;
    /**
     * Enable DNS cache sharing
     */
    enableCacheSharing?: pulumi.Input<number>;
    /**
     * Forward to service group (Service group name)
     */
    forward?: pulumi.Input<string>;
    /**
     * prefix-length to insert for IPv4
     */
    insertIpv4?: pulumi.Input<number>;
    /**
     * prefix-length to insert for IPv6
     */
    insertIpv6?: pulumi.Input<number>;
    localDnsResolution?: pulumi.Input<inputs.SlbTemplateDnsLocalDnsResolution>;
    /**
     * Define maximum cache entry size (Maximum cache entry size per VIP (default 1024))
     */
    maxCacheEntrySize?: pulumi.Input<number>;
    /**
     * Define maximum cache size (Maximum cache entry per VIP)
     */
    maxCacheSize?: pulumi.Input<number>;
    /**
     * Define Maximum DNS Query Length, default is unlimited (Specify Maximum Length)
     */
    maxQueryLength?: pulumi.Input<number>;
    /**
     * DNS Template Name
     */
    name?: pulumi.Input<string>;
    negativeDnsCache?: pulumi.Input<inputs.SlbTemplateDnsNegativeDnsCache>;
    /**
     * Period in minutes
     */
    period?: pulumi.Input<number>;
    queryClassFilter?: pulumi.Input<inputs.SlbTemplateDnsQueryClassFilter>;
    /**
     * Use DNS query ID to create sesion
     */
    queryIdSwitch?: pulumi.Input<number>;
    queryTypeFilter?: pulumi.Input<inputs.SlbTemplateDnsQueryTypeFilter>;
    recursiveDnsResolution?: pulumi.Input<inputs.SlbTemplateDnsRecursiveDnsResolution>;
    /**
     * Direct the client to retry with TCP for DNS UDP request
     */
    redirectToTcpPort?: pulumi.Input<number>;
    /**
     * Make answers created from cache non-authoritative
     */
    removeAaFlag?: pulumi.Input<number>;
    /**
     * Remove EDNS(0) client subnet from client queries
     */
    removeCsubnet?: pulumi.Input<number>;
    /**
     * Remove EDNS(0) padding to server
     */
    removePaddingToServer?: pulumi.Input<number>;
    responseRateLimiting?: pulumi.Input<inputs.SlbTemplateDnsResponseRateLimiting>;
    rpzLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateDnsRpzList>[]>;
    udpRetransmit?: pulumi.Input<inputs.SlbTemplateDnsUdpRetransmit>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateDns resource.
 */
export interface SlbTemplateDnsArgs {
    /**
     * 'block-length': Block-Length Padding; 'random-block-length': Random-Block-Length Padding;
     */
    addPaddingToClient?: pulumi.Input<string>;
    /**
     * 'global': Follow global cofiguration (Default); 'no-change': No change in record order; 'round-robin': Round-robin;
     */
    cacheRecordServingPolicy?: pulumi.Input<string>;
    /**
     * enable the ttl adjustment for dns cache response
     */
    cacheTtlAdjustmentEnable?: pulumi.Input<number>;
    classList?: pulumi.Input<inputs.SlbTemplateDnsClassList>;
    /**
     * 'nocache': Cache disable; 'cache': Cache enable;
     */
    defaultPolicy?: pulumi.Input<string>;
    /**
     * Disable DNS template
     */
    disableDnsTemplate?: pulumi.Input<number>;
    /**
     * Disable DNS recursive available flag in cached response
     */
    disableRaCachedResp?: pulumi.Input<number>;
    /**
     * Disable attaching SOA due to RPZ
     */
    disableRpzAttachSoa?: pulumi.Input<number>;
    dns64?: pulumi.Input<inputs.SlbTemplateDnsDns64>;
    /**
     * dns logging template (DNS Logging template name)
     */
    dnsLogging?: pulumi.Input<string>;
    /**
     * Use different service group if DNSSEC DO bit set (Service Group Name)
     */
    dnssecServiceGroup?: pulumi.Input<string>;
    /**
     * Drop the malformed query
     */
    drop?: pulumi.Input<number>;
    /**
     * Enable DNS cache sharing
     */
    enableCacheSharing?: pulumi.Input<number>;
    /**
     * Forward to service group (Service group name)
     */
    forward?: pulumi.Input<string>;
    /**
     * prefix-length to insert for IPv4
     */
    insertIpv4?: pulumi.Input<number>;
    /**
     * prefix-length to insert for IPv6
     */
    insertIpv6?: pulumi.Input<number>;
    localDnsResolution?: pulumi.Input<inputs.SlbTemplateDnsLocalDnsResolution>;
    /**
     * Define maximum cache entry size (Maximum cache entry size per VIP (default 1024))
     */
    maxCacheEntrySize?: pulumi.Input<number>;
    /**
     * Define maximum cache size (Maximum cache entry per VIP)
     */
    maxCacheSize?: pulumi.Input<number>;
    /**
     * Define Maximum DNS Query Length, default is unlimited (Specify Maximum Length)
     */
    maxQueryLength?: pulumi.Input<number>;
    /**
     * DNS Template Name
     */
    name?: pulumi.Input<string>;
    negativeDnsCache?: pulumi.Input<inputs.SlbTemplateDnsNegativeDnsCache>;
    /**
     * Period in minutes
     */
    period?: pulumi.Input<number>;
    queryClassFilter?: pulumi.Input<inputs.SlbTemplateDnsQueryClassFilter>;
    /**
     * Use DNS query ID to create sesion
     */
    queryIdSwitch?: pulumi.Input<number>;
    queryTypeFilter?: pulumi.Input<inputs.SlbTemplateDnsQueryTypeFilter>;
    recursiveDnsResolution?: pulumi.Input<inputs.SlbTemplateDnsRecursiveDnsResolution>;
    /**
     * Direct the client to retry with TCP for DNS UDP request
     */
    redirectToTcpPort?: pulumi.Input<number>;
    /**
     * Make answers created from cache non-authoritative
     */
    removeAaFlag?: pulumi.Input<number>;
    /**
     * Remove EDNS(0) client subnet from client queries
     */
    removeCsubnet?: pulumi.Input<number>;
    /**
     * Remove EDNS(0) padding to server
     */
    removePaddingToServer?: pulumi.Input<number>;
    responseRateLimiting?: pulumi.Input<inputs.SlbTemplateDnsResponseRateLimiting>;
    rpzLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateDnsRpzList>[]>;
    udpRetransmit?: pulumi.Input<inputs.SlbTemplateDnsUdpRetransmit>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
