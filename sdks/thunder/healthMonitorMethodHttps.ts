// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthMonitorMethodHttps extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodHttps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodHttpsState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodHttps {
        return new HealthMonitorMethodHttps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodHttps:HealthMonitorMethodHttps';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodHttps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodHttps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodHttps.__pulumiType;
    }

    /**
     * Specify client certificate (Certificate name)
     */
    public readonly cert!: pulumi.Output<string | undefined>;
    /**
     * Select shared partition
     */
    public readonly certKeyShared!: pulumi.Output<number | undefined>;
    /**
     * Disable SSLv2Hello for HTTPs
     */
    public readonly disableSslv2hello!: pulumi.Output<number | undefined>;
    /**
     * 'http-version2': HTTP version 2 for HTTPs; 'http-version3': HTTP version 3 for HTTPs;
     */
    public readonly httpVersion!: pulumi.Output<string | undefined>;
    /**
     * HTTPS type
     */
    public readonly https!: pulumi.Output<number | undefined>;
    /**
     * Specify what you expect from the response message
     */
    public readonly httpsExpect!: pulumi.Output<number | undefined>;
    /**
     * Specify "Host:" header used in request (enclose IPv6 address in [])
     */
    public readonly httpsHost!: pulumi.Output<string | undefined>;
    /**
     * Https Kerberos Auth
     */
    public readonly httpsKerberosAuth!: pulumi.Output<number | undefined>;
    public readonly httpsKerberosKdc!: pulumi.Output<outputs.HealthMonitorMethodHttpsHttpsKerberosKdc | undefined>;
    /**
     * Specify realm of Kerberos server
     */
    public readonly httpsKerberosRealm!: pulumi.Output<string | undefined>;
    /**
     * Specify response code for maintenance (Format is xx,xx-xx (xx between [100, 899])
     */
    public readonly httpsMaintenanceCode!: pulumi.Output<string | undefined>;
    /**
     * Specify the user password
     */
    public readonly httpsPassword!: pulumi.Output<number | undefined>;
    /**
     * Configure password, '' means empty password
     */
    public readonly httpsPasswordString!: pulumi.Output<string | undefined>;
    /**
     * Specify the HTTP post data (Input post data here)
     */
    public readonly httpsPostdata!: pulumi.Output<string | undefined>;
    /**
     * Specify the HTTP post data (Input post data file name here)
     */
    public readonly httpsPostfile!: pulumi.Output<string | undefined>;
    /**
     * Specify response code range (e.g. 200,400-430) (Format is xx,xx-xx (xx between [100, 899])
     */
    public readonly httpsResponseCode!: pulumi.Output<string | undefined>;
    /**
     * Expect Server Cert commonName
     */
    public readonly httpsServerCertName!: pulumi.Output<string | undefined>;
    /**
     * Specify text expected
     */
    public readonly httpsText!: pulumi.Output<string | undefined>;
    /**
     * Specify URL string, default is GET /
     */
    public readonly httpsUrl!: pulumi.Output<number | undefined>;
    /**
     * Specify the username
     */
    public readonly httpsUsername!: pulumi.Output<string | undefined>;
    /**
     * Specify client private key (Key name)
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Client private key password phrase
     */
    public readonly keyPassPhrase!: pulumi.Output<number | undefined>;
    /**
     * Password Phrase
     */
    public readonly keyPhrase!: pulumi.Output<string | undefined>;
    /**
     * Specify response text for maintenance
     */
    public readonly maintenance!: pulumi.Output<number | undefined>;
    /**
     * Specify text for maintenance
     */
    public readonly maintenanceText!: pulumi.Output<string | undefined>;
    /**
     * Specify Regex text for maintenance
     */
    public readonly maintenanceTextRegex!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify URL path, default is "/"
     */
    public readonly postPath!: pulumi.Output<string | undefined>;
    /**
     * 'postdata': Specify the HTTP post data; 'postfile': Specify the HTTP post data;
     */
    public readonly postType!: pulumi.Output<string | undefined>;
    /**
     * Specify response code range with Regex (code with Regex, such as [2-5][0-9][0-9])
     */
    public readonly responseCodeRegex!: pulumi.Output<string | undefined>;
    /**
     * Server Name Indication for HTTPs
     */
    public readonly sni!: pulumi.Output<number | undefined>;
    /**
     * Specify text expected with Regex
     */
    public readonly textRegex!: pulumi.Output<string | undefined>;
    /**
     * Specify URL path, default is "/"
     */
    public readonly urlPath!: pulumi.Output<string | undefined>;
    /**
     * 'GET': HTTP GET method; 'POST': HTTP POST method; 'HEAD': HTTP HEAD method;
     */
    public readonly urlType!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specify HTTPS port (Port Number (default 443))
     */
    public readonly webPort!: pulumi.Output<number | undefined>;

    /**
     * Create a HealthMonitorMethodHttps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodHttpsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodHttpsArgs | HealthMonitorMethodHttpsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodHttpsState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["certKeyShared"] = state ? state.certKeyShared : undefined;
            resourceInputs["disableSslv2hello"] = state ? state.disableSslv2hello : undefined;
            resourceInputs["httpVersion"] = state ? state.httpVersion : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["httpsExpect"] = state ? state.httpsExpect : undefined;
            resourceInputs["httpsHost"] = state ? state.httpsHost : undefined;
            resourceInputs["httpsKerberosAuth"] = state ? state.httpsKerberosAuth : undefined;
            resourceInputs["httpsKerberosKdc"] = state ? state.httpsKerberosKdc : undefined;
            resourceInputs["httpsKerberosRealm"] = state ? state.httpsKerberosRealm : undefined;
            resourceInputs["httpsMaintenanceCode"] = state ? state.httpsMaintenanceCode : undefined;
            resourceInputs["httpsPassword"] = state ? state.httpsPassword : undefined;
            resourceInputs["httpsPasswordString"] = state ? state.httpsPasswordString : undefined;
            resourceInputs["httpsPostdata"] = state ? state.httpsPostdata : undefined;
            resourceInputs["httpsPostfile"] = state ? state.httpsPostfile : undefined;
            resourceInputs["httpsResponseCode"] = state ? state.httpsResponseCode : undefined;
            resourceInputs["httpsServerCertName"] = state ? state.httpsServerCertName : undefined;
            resourceInputs["httpsText"] = state ? state.httpsText : undefined;
            resourceInputs["httpsUrl"] = state ? state.httpsUrl : undefined;
            resourceInputs["httpsUsername"] = state ? state.httpsUsername : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keyPassPhrase"] = state ? state.keyPassPhrase : undefined;
            resourceInputs["keyPhrase"] = state ? state.keyPhrase : undefined;
            resourceInputs["maintenance"] = state ? state.maintenance : undefined;
            resourceInputs["maintenanceText"] = state ? state.maintenanceText : undefined;
            resourceInputs["maintenanceTextRegex"] = state ? state.maintenanceTextRegex : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["postPath"] = state ? state.postPath : undefined;
            resourceInputs["postType"] = state ? state.postType : undefined;
            resourceInputs["responseCodeRegex"] = state ? state.responseCodeRegex : undefined;
            resourceInputs["sni"] = state ? state.sni : undefined;
            resourceInputs["textRegex"] = state ? state.textRegex : undefined;
            resourceInputs["urlPath"] = state ? state.urlPath : undefined;
            resourceInputs["urlType"] = state ? state.urlType : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["webPort"] = state ? state.webPort : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodHttpsArgs | undefined;
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["certKeyShared"] = args ? args.certKeyShared : undefined;
            resourceInputs["disableSslv2hello"] = args ? args.disableSslv2hello : undefined;
            resourceInputs["httpVersion"] = args ? args.httpVersion : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["httpsExpect"] = args ? args.httpsExpect : undefined;
            resourceInputs["httpsHost"] = args ? args.httpsHost : undefined;
            resourceInputs["httpsKerberosAuth"] = args ? args.httpsKerberosAuth : undefined;
            resourceInputs["httpsKerberosKdc"] = args ? args.httpsKerberosKdc : undefined;
            resourceInputs["httpsKerberosRealm"] = args ? args.httpsKerberosRealm : undefined;
            resourceInputs["httpsMaintenanceCode"] = args ? args.httpsMaintenanceCode : undefined;
            resourceInputs["httpsPassword"] = args ? args.httpsPassword : undefined;
            resourceInputs["httpsPasswordString"] = args ? args.httpsPasswordString : undefined;
            resourceInputs["httpsPostdata"] = args ? args.httpsPostdata : undefined;
            resourceInputs["httpsPostfile"] = args ? args.httpsPostfile : undefined;
            resourceInputs["httpsResponseCode"] = args ? args.httpsResponseCode : undefined;
            resourceInputs["httpsServerCertName"] = args ? args.httpsServerCertName : undefined;
            resourceInputs["httpsText"] = args ? args.httpsText : undefined;
            resourceInputs["httpsUrl"] = args ? args.httpsUrl : undefined;
            resourceInputs["httpsUsername"] = args ? args.httpsUsername : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["keyPassPhrase"] = args ? args.keyPassPhrase : undefined;
            resourceInputs["keyPhrase"] = args ? args.keyPhrase : undefined;
            resourceInputs["maintenance"] = args ? args.maintenance : undefined;
            resourceInputs["maintenanceText"] = args ? args.maintenanceText : undefined;
            resourceInputs["maintenanceTextRegex"] = args ? args.maintenanceTextRegex : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["postPath"] = args ? args.postPath : undefined;
            resourceInputs["postType"] = args ? args.postType : undefined;
            resourceInputs["responseCodeRegex"] = args ? args.responseCodeRegex : undefined;
            resourceInputs["sni"] = args ? args.sni : undefined;
            resourceInputs["textRegex"] = args ? args.textRegex : undefined;
            resourceInputs["urlPath"] = args ? args.urlPath : undefined;
            resourceInputs["urlType"] = args ? args.urlType : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["webPort"] = args ? args.webPort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodHttps.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodHttps resources.
 */
export interface HealthMonitorMethodHttpsState {
    /**
     * Specify client certificate (Certificate name)
     */
    cert?: pulumi.Input<string>;
    /**
     * Select shared partition
     */
    certKeyShared?: pulumi.Input<number>;
    /**
     * Disable SSLv2Hello for HTTPs
     */
    disableSslv2hello?: pulumi.Input<number>;
    /**
     * 'http-version2': HTTP version 2 for HTTPs; 'http-version3': HTTP version 3 for HTTPs;
     */
    httpVersion?: pulumi.Input<string>;
    /**
     * HTTPS type
     */
    https?: pulumi.Input<number>;
    /**
     * Specify what you expect from the response message
     */
    httpsExpect?: pulumi.Input<number>;
    /**
     * Specify "Host:" header used in request (enclose IPv6 address in [])
     */
    httpsHost?: pulumi.Input<string>;
    /**
     * Https Kerberos Auth
     */
    httpsKerberosAuth?: pulumi.Input<number>;
    httpsKerberosKdc?: pulumi.Input<inputs.HealthMonitorMethodHttpsHttpsKerberosKdc>;
    /**
     * Specify realm of Kerberos server
     */
    httpsKerberosRealm?: pulumi.Input<string>;
    /**
     * Specify response code for maintenance (Format is xx,xx-xx (xx between [100, 899])
     */
    httpsMaintenanceCode?: pulumi.Input<string>;
    /**
     * Specify the user password
     */
    httpsPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    httpsPasswordString?: pulumi.Input<string>;
    /**
     * Specify the HTTP post data (Input post data here)
     */
    httpsPostdata?: pulumi.Input<string>;
    /**
     * Specify the HTTP post data (Input post data file name here)
     */
    httpsPostfile?: pulumi.Input<string>;
    /**
     * Specify response code range (e.g. 200,400-430) (Format is xx,xx-xx (xx between [100, 899])
     */
    httpsResponseCode?: pulumi.Input<string>;
    /**
     * Expect Server Cert commonName
     */
    httpsServerCertName?: pulumi.Input<string>;
    /**
     * Specify text expected
     */
    httpsText?: pulumi.Input<string>;
    /**
     * Specify URL string, default is GET /
     */
    httpsUrl?: pulumi.Input<number>;
    /**
     * Specify the username
     */
    httpsUsername?: pulumi.Input<string>;
    /**
     * Specify client private key (Key name)
     */
    key?: pulumi.Input<string>;
    /**
     * Client private key password phrase
     */
    keyPassPhrase?: pulumi.Input<number>;
    /**
     * Password Phrase
     */
    keyPhrase?: pulumi.Input<string>;
    /**
     * Specify response text for maintenance
     */
    maintenance?: pulumi.Input<number>;
    /**
     * Specify text for maintenance
     */
    maintenanceText?: pulumi.Input<string>;
    /**
     * Specify Regex text for maintenance
     */
    maintenanceTextRegex?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    postPath?: pulumi.Input<string>;
    /**
     * 'postdata': Specify the HTTP post data; 'postfile': Specify the HTTP post data;
     */
    postType?: pulumi.Input<string>;
    /**
     * Specify response code range with Regex (code with Regex, such as [2-5][0-9][0-9])
     */
    responseCodeRegex?: pulumi.Input<string>;
    /**
     * Server Name Indication for HTTPs
     */
    sni?: pulumi.Input<number>;
    /**
     * Specify text expected with Regex
     */
    textRegex?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    urlPath?: pulumi.Input<string>;
    /**
     * 'GET': HTTP GET method; 'POST': HTTP POST method; 'HEAD': HTTP HEAD method;
     */
    urlType?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify HTTPS port (Port Number (default 443))
     */
    webPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodHttps resource.
 */
export interface HealthMonitorMethodHttpsArgs {
    /**
     * Specify client certificate (Certificate name)
     */
    cert?: pulumi.Input<string>;
    /**
     * Select shared partition
     */
    certKeyShared?: pulumi.Input<number>;
    /**
     * Disable SSLv2Hello for HTTPs
     */
    disableSslv2hello?: pulumi.Input<number>;
    /**
     * 'http-version2': HTTP version 2 for HTTPs; 'http-version3': HTTP version 3 for HTTPs;
     */
    httpVersion?: pulumi.Input<string>;
    /**
     * HTTPS type
     */
    https?: pulumi.Input<number>;
    /**
     * Specify what you expect from the response message
     */
    httpsExpect?: pulumi.Input<number>;
    /**
     * Specify "Host:" header used in request (enclose IPv6 address in [])
     */
    httpsHost?: pulumi.Input<string>;
    /**
     * Https Kerberos Auth
     */
    httpsKerberosAuth?: pulumi.Input<number>;
    httpsKerberosKdc?: pulumi.Input<inputs.HealthMonitorMethodHttpsHttpsKerberosKdc>;
    /**
     * Specify realm of Kerberos server
     */
    httpsKerberosRealm?: pulumi.Input<string>;
    /**
     * Specify response code for maintenance (Format is xx,xx-xx (xx between [100, 899])
     */
    httpsMaintenanceCode?: pulumi.Input<string>;
    /**
     * Specify the user password
     */
    httpsPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    httpsPasswordString?: pulumi.Input<string>;
    /**
     * Specify the HTTP post data (Input post data here)
     */
    httpsPostdata?: pulumi.Input<string>;
    /**
     * Specify the HTTP post data (Input post data file name here)
     */
    httpsPostfile?: pulumi.Input<string>;
    /**
     * Specify response code range (e.g. 200,400-430) (Format is xx,xx-xx (xx between [100, 899])
     */
    httpsResponseCode?: pulumi.Input<string>;
    /**
     * Expect Server Cert commonName
     */
    httpsServerCertName?: pulumi.Input<string>;
    /**
     * Specify text expected
     */
    httpsText?: pulumi.Input<string>;
    /**
     * Specify URL string, default is GET /
     */
    httpsUrl?: pulumi.Input<number>;
    /**
     * Specify the username
     */
    httpsUsername?: pulumi.Input<string>;
    /**
     * Specify client private key (Key name)
     */
    key?: pulumi.Input<string>;
    /**
     * Client private key password phrase
     */
    keyPassPhrase?: pulumi.Input<number>;
    /**
     * Password Phrase
     */
    keyPhrase?: pulumi.Input<string>;
    /**
     * Specify response text for maintenance
     */
    maintenance?: pulumi.Input<number>;
    /**
     * Specify text for maintenance
     */
    maintenanceText?: pulumi.Input<string>;
    /**
     * Specify Regex text for maintenance
     */
    maintenanceTextRegex?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    postPath?: pulumi.Input<string>;
    /**
     * 'postdata': Specify the HTTP post data; 'postfile': Specify the HTTP post data;
     */
    postType?: pulumi.Input<string>;
    /**
     * Specify response code range with Regex (code with Regex, such as [2-5][0-9][0-9])
     */
    responseCodeRegex?: pulumi.Input<string>;
    /**
     * Server Name Indication for HTTPs
     */
    sni?: pulumi.Input<number>;
    /**
     * Specify text expected with Regex
     */
    textRegex?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    urlPath?: pulumi.Input<string>;
    /**
     * 'GET': HTTP GET method; 'POST': HTTP POST method; 'HEAD': HTTP HEAD method;
     */
    urlType?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify HTTPS port (Port Number (default 443))
     */
    webPort?: pulumi.Input<number>;
}
