// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DebugSip extends pulumi.CustomResource {
    /**
     * Get an existing DebugSip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugSipState, opts?: pulumi.CustomResourceOptions): DebugSip {
        return new DebugSip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugSip:DebugSip';

    /**
     * Returns true if the given object is an instance of DebugSip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugSip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugSip.__pulumiType;
    }

    /**
     * Method ACK
     */
    public readonly ack!: pulumi.Output<number | undefined>;
    /**
     * SIP Method BYE
     */
    public readonly bye!: pulumi.Output<number | undefined>;
    /**
     * SIP Method CANCEL
     */
    public readonly cancel!: pulumi.Output<number | undefined>;
    /**
     * SIP Method INFO
     */
    public readonly info!: pulumi.Output<number | undefined>;
    /**
     * Method INVITE
     */
    public readonly invite!: pulumi.Output<number | undefined>;
    /**
     * SIP Method MESSAGE
     */
    public readonly message!: pulumi.Output<number | undefined>;
    /**
     * Set filter with SIP method types
     */
    public readonly method!: pulumi.Output<number | undefined>;
    /**
     * SIP Method NOTIFY
     */
    public readonly notify!: pulumi.Output<number | undefined>;
    /**
     * SIP Method OPTIONS
     */
    public readonly options!: pulumi.Output<number | undefined>;
    /**
     * SIP Method PRACK
     */
    public readonly prack!: pulumi.Output<number | undefined>;
    /**
     * SIP Method PUBLISH
     */
    public readonly publish!: pulumi.Output<number | undefined>;
    /**
     * SIP Method REFER
     */
    public readonly refer!: pulumi.Output<number | undefined>;
    /**
     * SIP Method REGISTER
     */
    public readonly register!: pulumi.Output<number | undefined>;
    /**
     * SIP Method SUBSCRIBE
     */
    public readonly subscribe!: pulumi.Output<number | undefined>;
    /**
     * SIP Method UPDATE
     */
    public readonly update!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DebugSip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugSipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugSipArgs | DebugSipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugSipState | undefined;
            resourceInputs["ack"] = state ? state.ack : undefined;
            resourceInputs["bye"] = state ? state.bye : undefined;
            resourceInputs["cancel"] = state ? state.cancel : undefined;
            resourceInputs["info"] = state ? state.info : undefined;
            resourceInputs["invite"] = state ? state.invite : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["notify"] = state ? state.notify : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["prack"] = state ? state.prack : undefined;
            resourceInputs["publish"] = state ? state.publish : undefined;
            resourceInputs["refer"] = state ? state.refer : undefined;
            resourceInputs["register"] = state ? state.register : undefined;
            resourceInputs["subscribe"] = state ? state.subscribe : undefined;
            resourceInputs["update"] = state ? state.update : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DebugSipArgs | undefined;
            resourceInputs["ack"] = args ? args.ack : undefined;
            resourceInputs["bye"] = args ? args.bye : undefined;
            resourceInputs["cancel"] = args ? args.cancel : undefined;
            resourceInputs["info"] = args ? args.info : undefined;
            resourceInputs["invite"] = args ? args.invite : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["notify"] = args ? args.notify : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["prack"] = args ? args.prack : undefined;
            resourceInputs["publish"] = args ? args.publish : undefined;
            resourceInputs["refer"] = args ? args.refer : undefined;
            resourceInputs["register"] = args ? args.register : undefined;
            resourceInputs["subscribe"] = args ? args.subscribe : undefined;
            resourceInputs["update"] = args ? args.update : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugSip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugSip resources.
 */
export interface DebugSipState {
    /**
     * Method ACK
     */
    ack?: pulumi.Input<number>;
    /**
     * SIP Method BYE
     */
    bye?: pulumi.Input<number>;
    /**
     * SIP Method CANCEL
     */
    cancel?: pulumi.Input<number>;
    /**
     * SIP Method INFO
     */
    info?: pulumi.Input<number>;
    /**
     * Method INVITE
     */
    invite?: pulumi.Input<number>;
    /**
     * SIP Method MESSAGE
     */
    message?: pulumi.Input<number>;
    /**
     * Set filter with SIP method types
     */
    method?: pulumi.Input<number>;
    /**
     * SIP Method NOTIFY
     */
    notify?: pulumi.Input<number>;
    /**
     * SIP Method OPTIONS
     */
    options?: pulumi.Input<number>;
    /**
     * SIP Method PRACK
     */
    prack?: pulumi.Input<number>;
    /**
     * SIP Method PUBLISH
     */
    publish?: pulumi.Input<number>;
    /**
     * SIP Method REFER
     */
    refer?: pulumi.Input<number>;
    /**
     * SIP Method REGISTER
     */
    register?: pulumi.Input<number>;
    /**
     * SIP Method SUBSCRIBE
     */
    subscribe?: pulumi.Input<number>;
    /**
     * SIP Method UPDATE
     */
    update?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DebugSip resource.
 */
export interface DebugSipArgs {
    /**
     * Method ACK
     */
    ack?: pulumi.Input<number>;
    /**
     * SIP Method BYE
     */
    bye?: pulumi.Input<number>;
    /**
     * SIP Method CANCEL
     */
    cancel?: pulumi.Input<number>;
    /**
     * SIP Method INFO
     */
    info?: pulumi.Input<number>;
    /**
     * Method INVITE
     */
    invite?: pulumi.Input<number>;
    /**
     * SIP Method MESSAGE
     */
    message?: pulumi.Input<number>;
    /**
     * Set filter with SIP method types
     */
    method?: pulumi.Input<number>;
    /**
     * SIP Method NOTIFY
     */
    notify?: pulumi.Input<number>;
    /**
     * SIP Method OPTIONS
     */
    options?: pulumi.Input<number>;
    /**
     * SIP Method PRACK
     */
    prack?: pulumi.Input<number>;
    /**
     * SIP Method PUBLISH
     */
    publish?: pulumi.Input<number>;
    /**
     * SIP Method REFER
     */
    refer?: pulumi.Input<number>;
    /**
     * SIP Method REGISTER
     */
    register?: pulumi.Input<number>;
    /**
     * SIP Method SUBSCRIBE
     */
    subscribe?: pulumi.Input<number>;
    /**
     * SIP Method UPDATE
     */
    update?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
