// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosZoneProfilePortRange extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneProfilePortRange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneProfilePortRangeState, opts?: pulumi.CustomResourceOptions): DdosZoneProfilePortRange {
        return new DdosZoneProfilePortRange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneProfilePortRange:DdosZoneProfilePortRange';

    /**
     * Returns true if the given object is an instance of DdosZoneProfilePortRange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneProfilePortRange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneProfilePortRange.__pulumiType;
    }

    public readonly indicatorLists!: pulumi.Output<outputs.DdosZoneProfilePortRangeIndicatorList[] | undefined>;
    /**
     * Port-Range End Port Number
     */
    public readonly portRangeEnd!: pulumi.Output<number>;
    /**
     * Port-Range Start Port Number
     */
    public readonly portRangeStart!: pulumi.Output<number>;
    /**
     * ProfileName
     */
    public readonly profileName!: pulumi.Output<string>;
    /**
     * 'dns-tcp': DNS-TCP Port; 'dns-udp': DNS-UDP Port; 'http': HTTP Port; 'tcp': TCP Port; 'udp': UDP Port; 'ssl-l4': SSL-L4
     * Port; 'sip-tcp': SIP-TCP Port; 'sip-udp': SIP-UDP Port; 'quic': QUIC Port;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosZoneProfilePortRange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneProfilePortRangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneProfilePortRangeArgs | DdosZoneProfilePortRangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneProfilePortRangeState | undefined;
            resourceInputs["indicatorLists"] = state ? state.indicatorLists : undefined;
            resourceInputs["portRangeEnd"] = state ? state.portRangeEnd : undefined;
            resourceInputs["portRangeStart"] = state ? state.portRangeStart : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosZoneProfilePortRangeArgs | undefined;
            if ((!args || args.portRangeEnd === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portRangeEnd'");
            }
            if ((!args || args.portRangeStart === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portRangeStart'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["indicatorLists"] = args ? args.indicatorLists : undefined;
            resourceInputs["portRangeEnd"] = args ? args.portRangeEnd : undefined;
            resourceInputs["portRangeStart"] = args ? args.portRangeStart : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneProfilePortRange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneProfilePortRange resources.
 */
export interface DdosZoneProfilePortRangeState {
    indicatorLists?: pulumi.Input<pulumi.Input<inputs.DdosZoneProfilePortRangeIndicatorList>[]>;
    /**
     * Port-Range End Port Number
     */
    portRangeEnd?: pulumi.Input<number>;
    /**
     * Port-Range Start Port Number
     */
    portRangeStart?: pulumi.Input<number>;
    /**
     * ProfileName
     */
    profileName?: pulumi.Input<string>;
    /**
     * 'dns-tcp': DNS-TCP Port; 'dns-udp': DNS-UDP Port; 'http': HTTP Port; 'tcp': TCP Port; 'udp': UDP Port; 'ssl-l4': SSL-L4
     * Port; 'sip-tcp': SIP-TCP Port; 'sip-udp': SIP-UDP Port; 'quic': QUIC Port;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosZoneProfilePortRange resource.
 */
export interface DdosZoneProfilePortRangeArgs {
    indicatorLists?: pulumi.Input<pulumi.Input<inputs.DdosZoneProfilePortRangeIndicatorList>[]>;
    /**
     * Port-Range End Port Number
     */
    portRangeEnd: pulumi.Input<number>;
    /**
     * Port-Range Start Port Number
     */
    portRangeStart: pulumi.Input<number>;
    /**
     * ProfileName
     */
    profileName: pulumi.Input<string>;
    /**
     * 'dns-tcp': DNS-TCP Port; 'dns-udp': DNS-UDP Port; 'http': HTTP Port; 'tcp': TCP Port; 'udp': UDP Port; 'ssl-l4': SSL-L4
     * Port; 'sip-tcp': SIP-TCP Port; 'sip-udp': SIP-UDP Port; 'quic': QUIC Port;
     */
    protocol: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
