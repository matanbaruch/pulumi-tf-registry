// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosZoneProfilePortIndicator extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneProfilePortIndicator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneProfilePortIndicatorState, opts?: pulumi.CustomResourceOptions): DdosZoneProfilePortIndicator {
        return new DdosZoneProfilePortIndicator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneProfilePortIndicator:DdosZoneProfilePortIndicator';

    /**
     * Returns true if the given object is an instance of DdosZoneProfilePortIndicator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneProfilePortIndicator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneProfilePortIndicator.__pulumiType;
    }

    /**
     * 'pkt-rate': pkt-rate; 'pkt-drop-rate': pkt-drop-rate; 'bit-rate': bit-rate; 'pkt-drop-ratio': pkt-drop-ratio;
     * 'bytes-to-bytes-from-ratio': bytes-to-bytes-from-ratio; 'concurrent-conns': concurrent-conns; 'conn-miss-rate':
     * conn-miss-rate; 'syn-rate': syn-rate; 'fin-rate': fin-rate; 'rst-rate': rst-rate; 'small-window-ack-rate':
     * small-window-ack-rate; 'empty-ack-rate': empty-ack-rate; 'small-payload-rate': small-payload-rate; 'syn-fin-ratio':
     * syn-fin-ratio; 'cpu-utilization': cpu-utilization; 'interface-utilization': interface-utilization;
     */
    public readonly indicatorName!: pulumi.Output<string>;
    /**
     * PortNum
     */
    public readonly portNum!: pulumi.Output<string>;
    /**
     * PortProtocol
     */
    public readonly portProtocol!: pulumi.Output<string>;
    /**
     * ProfileName
     */
    public readonly profileName!: pulumi.Output<string>;
    public readonly srcThresholdCfg!: pulumi.Output<outputs.DdosZoneProfilePortIndicatorSrcThresholdCfg | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly zoneThresholdCfg!: pulumi.Output<outputs.DdosZoneProfilePortIndicatorZoneThresholdCfg | undefined>;

    /**
     * Create a DdosZoneProfilePortIndicator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneProfilePortIndicatorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneProfilePortIndicatorArgs | DdosZoneProfilePortIndicatorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneProfilePortIndicatorState | undefined;
            resourceInputs["indicatorName"] = state ? state.indicatorName : undefined;
            resourceInputs["portNum"] = state ? state.portNum : undefined;
            resourceInputs["portProtocol"] = state ? state.portProtocol : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["srcThresholdCfg"] = state ? state.srcThresholdCfg : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneThresholdCfg"] = state ? state.zoneThresholdCfg : undefined;
        } else {
            const args = argsOrState as DdosZoneProfilePortIndicatorArgs | undefined;
            if ((!args || args.indicatorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indicatorName'");
            }
            if ((!args || args.portNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portNum'");
            }
            if ((!args || args.portProtocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portProtocol'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            resourceInputs["indicatorName"] = args ? args.indicatorName : undefined;
            resourceInputs["portNum"] = args ? args.portNum : undefined;
            resourceInputs["portProtocol"] = args ? args.portProtocol : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["srcThresholdCfg"] = args ? args.srcThresholdCfg : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneThresholdCfg"] = args ? args.zoneThresholdCfg : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneProfilePortIndicator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneProfilePortIndicator resources.
 */
export interface DdosZoneProfilePortIndicatorState {
    /**
     * 'pkt-rate': pkt-rate; 'pkt-drop-rate': pkt-drop-rate; 'bit-rate': bit-rate; 'pkt-drop-ratio': pkt-drop-ratio;
     * 'bytes-to-bytes-from-ratio': bytes-to-bytes-from-ratio; 'concurrent-conns': concurrent-conns; 'conn-miss-rate':
     * conn-miss-rate; 'syn-rate': syn-rate; 'fin-rate': fin-rate; 'rst-rate': rst-rate; 'small-window-ack-rate':
     * small-window-ack-rate; 'empty-ack-rate': empty-ack-rate; 'small-payload-rate': small-payload-rate; 'syn-fin-ratio':
     * syn-fin-ratio; 'cpu-utilization': cpu-utilization; 'interface-utilization': interface-utilization;
     */
    indicatorName?: pulumi.Input<string>;
    /**
     * PortNum
     */
    portNum?: pulumi.Input<string>;
    /**
     * PortProtocol
     */
    portProtocol?: pulumi.Input<string>;
    /**
     * ProfileName
     */
    profileName?: pulumi.Input<string>;
    srcThresholdCfg?: pulumi.Input<inputs.DdosZoneProfilePortIndicatorSrcThresholdCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    zoneThresholdCfg?: pulumi.Input<inputs.DdosZoneProfilePortIndicatorZoneThresholdCfg>;
}

/**
 * The set of arguments for constructing a DdosZoneProfilePortIndicator resource.
 */
export interface DdosZoneProfilePortIndicatorArgs {
    /**
     * 'pkt-rate': pkt-rate; 'pkt-drop-rate': pkt-drop-rate; 'bit-rate': bit-rate; 'pkt-drop-ratio': pkt-drop-ratio;
     * 'bytes-to-bytes-from-ratio': bytes-to-bytes-from-ratio; 'concurrent-conns': concurrent-conns; 'conn-miss-rate':
     * conn-miss-rate; 'syn-rate': syn-rate; 'fin-rate': fin-rate; 'rst-rate': rst-rate; 'small-window-ack-rate':
     * small-window-ack-rate; 'empty-ack-rate': empty-ack-rate; 'small-payload-rate': small-payload-rate; 'syn-fin-ratio':
     * syn-fin-ratio; 'cpu-utilization': cpu-utilization; 'interface-utilization': interface-utilization;
     */
    indicatorName: pulumi.Input<string>;
    /**
     * PortNum
     */
    portNum: pulumi.Input<string>;
    /**
     * PortProtocol
     */
    portProtocol: pulumi.Input<string>;
    /**
     * ProfileName
     */
    profileName: pulumi.Input<string>;
    srcThresholdCfg?: pulumi.Input<inputs.DdosZoneProfilePortIndicatorSrcThresholdCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    zoneThresholdCfg?: pulumi.Input<inputs.DdosZoneProfilePortIndicatorZoneThresholdCfg>;
}
