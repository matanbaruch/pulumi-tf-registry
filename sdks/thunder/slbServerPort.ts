// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbServerPort extends pulumi.CustomResource {
    /**
     * Get an existing SlbServerPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbServerPortState, opts?: pulumi.CustomResourceOptions): SlbServerPort {
        return new SlbServerPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbServerPort:SlbServerPort';

    /**
     * Returns true if the given object is an instance of SlbServerPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbServerPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbServerPort.__pulumiType;
    }

    /**
     * 'enable': enable; 'disable': disable; 'disable-with-health-check': disable port, but health check work;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly alternatePorts!: pulumi.Output<outputs.SlbServerPortAlternatePort[] | undefined>;
    public readonly authCfg!: pulumi.Output<outputs.SlbServerPortAuthCfg | undefined>;
    /**
     * Connection Limit
     */
    public readonly connLimit!: pulumi.Output<number | undefined>;
    /**
     * Connection Resume
     */
    public readonly connResume!: pulumi.Output<number | undefined>;
    /**
     * Enable extended statistics on real server port
     */
    public readonly extendedStats!: pulumi.Output<number | undefined>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    public readonly followPortProtocol!: pulumi.Output<string | undefined>;
    /**
     * Health Check (Monitor Name)
     */
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    /**
     * Disable health check
     */
    public readonly healthCheckDisable!: pulumi.Output<number | undefined>;
    /**
     * Specify which port to follow for health status (Port Number)
     */
    public readonly healthCheckFollowPort!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Do not log connection over limit event
     */
    public readonly noLogging!: pulumi.Output<number | undefined>;
    /**
     * No SSL
     */
    public readonly noSsl!: pulumi.Output<number | undefined>;
    /**
     * Force using HTTP/2 with Prior Knowledge all the time
     */
    public readonly only!: pulumi.Output<number | undefined>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    /**
     * Port Number
     */
    public readonly portNumber!: pulumi.Output<number>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Port range (Port range value - used for vip-to-rport-mapping and vport-rport range mapping)
     */
    public readonly range!: pulumi.Output<number | undefined>;
    /**
     * Health Check (Monitor Name)
     */
    public readonly rportHealthCheckShared!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.SlbServerPortSamplingEnable[] | undefined>;
    /**
     * Reference a port template from shared partition
     */
    public readonly sharedPartitionPortTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a health-check from shared partition
     */
    public readonly sharedRportHealthCheck!: pulumi.Output<number | undefined>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server port; 'stats-data-disable': Disable statistical
     * data collection for real server port;
     */
    public readonly statsDataAction!: pulumi.Output<string | undefined>;
    /**
     * Starting HTTP/2 with Prior Knowledge
     */
    public readonly supportHttp2!: pulumi.Output<number | undefined>;
    /**
     * Port template (Port template name)
     */
    public readonly templatePort!: pulumi.Output<string | undefined>;
    /**
     * Port Template Name
     */
    public readonly templatePortShared!: pulumi.Output<string | undefined>;
    /**
     * Server side SSL template (Server side SSL Name)
     */
    public readonly templateServerSsl!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Port Weight (Connection Weight)
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbServerPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlbServerPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbServerPortArgs | SlbServerPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbServerPortState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["alternatePorts"] = state ? state.alternatePorts : undefined;
            resourceInputs["authCfg"] = state ? state.authCfg : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["connResume"] = state ? state.connResume : undefined;
            resourceInputs["extendedStats"] = state ? state.extendedStats : undefined;
            resourceInputs["followPortProtocol"] = state ? state.followPortProtocol : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = state ? state.healthCheckDisable : undefined;
            resourceInputs["healthCheckFollowPort"] = state ? state.healthCheckFollowPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noLogging"] = state ? state.noLogging : undefined;
            resourceInputs["noSsl"] = state ? state.noSsl : undefined;
            resourceInputs["only"] = state ? state.only : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["portNumber"] = state ? state.portNumber : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["rportHealthCheckShared"] = state ? state.rportHealthCheckShared : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["sharedPartitionPortTemplate"] = state ? state.sharedPartitionPortTemplate : undefined;
            resourceInputs["sharedRportHealthCheck"] = state ? state.sharedRportHealthCheck : undefined;
            resourceInputs["statsDataAction"] = state ? state.statsDataAction : undefined;
            resourceInputs["supportHttp2"] = state ? state.supportHttp2 : undefined;
            resourceInputs["templatePort"] = state ? state.templatePort : undefined;
            resourceInputs["templatePortShared"] = state ? state.templatePortShared : undefined;
            resourceInputs["templateServerSsl"] = state ? state.templateServerSsl : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as SlbServerPortArgs | undefined;
            if ((!args || args.portNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portNumber'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["alternatePorts"] = args ? args.alternatePorts : undefined;
            resourceInputs["authCfg"] = args ? args.authCfg : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["connResume"] = args ? args.connResume : undefined;
            resourceInputs["extendedStats"] = args ? args.extendedStats : undefined;
            resourceInputs["followPortProtocol"] = args ? args.followPortProtocol : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = args ? args.healthCheckDisable : undefined;
            resourceInputs["healthCheckFollowPort"] = args ? args.healthCheckFollowPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noLogging"] = args ? args.noLogging : undefined;
            resourceInputs["noSsl"] = args ? args.noSsl : undefined;
            resourceInputs["only"] = args ? args.only : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["portNumber"] = args ? args.portNumber : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["rportHealthCheckShared"] = args ? args.rportHealthCheckShared : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["sharedPartitionPortTemplate"] = args ? args.sharedPartitionPortTemplate : undefined;
            resourceInputs["sharedRportHealthCheck"] = args ? args.sharedRportHealthCheck : undefined;
            resourceInputs["statsDataAction"] = args ? args.statsDataAction : undefined;
            resourceInputs["supportHttp2"] = args ? args.supportHttp2 : undefined;
            resourceInputs["templatePort"] = args ? args.templatePort : undefined;
            resourceInputs["templatePortShared"] = args ? args.templatePortShared : undefined;
            resourceInputs["templateServerSsl"] = args ? args.templateServerSsl : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbServerPort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbServerPort resources.
 */
export interface SlbServerPortState {
    /**
     * 'enable': enable; 'disable': disable; 'disable-with-health-check': disable port, but health check work;
     */
    action?: pulumi.Input<string>;
    alternatePorts?: pulumi.Input<pulumi.Input<inputs.SlbServerPortAlternatePort>[]>;
    authCfg?: pulumi.Input<inputs.SlbServerPortAuthCfg>;
    /**
     * Connection Limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Connection Resume
     */
    connResume?: pulumi.Input<number>;
    /**
     * Enable extended statistics on real server port
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    followPortProtocol?: pulumi.Input<string>;
    /**
     * Health Check (Monitor Name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable health check
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Specify which port to follow for health status (Port Number)
     */
    healthCheckFollowPort?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Do not log connection over limit event
     */
    noLogging?: pulumi.Input<number>;
    /**
     * No SSL
     */
    noSsl?: pulumi.Input<number>;
    /**
     * Force using HTTP/2 with Prior Knowledge all the time
     */
    only?: pulumi.Input<number>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Port Number
     */
    portNumber?: pulumi.Input<number>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Port range (Port range value - used for vip-to-rport-mapping and vport-rport range mapping)
     */
    range?: pulumi.Input<number>;
    /**
     * Health Check (Monitor Name)
     */
    rportHealthCheckShared?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbServerPortSamplingEnable>[]>;
    /**
     * Reference a port template from shared partition
     */
    sharedPartitionPortTemplate?: pulumi.Input<number>;
    /**
     * Reference a health-check from shared partition
     */
    sharedRportHealthCheck?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server port; 'stats-data-disable': Disable statistical
     * data collection for real server port;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Starting HTTP/2 with Prior Knowledge
     */
    supportHttp2?: pulumi.Input<number>;
    /**
     * Port template (Port template name)
     */
    templatePort?: pulumi.Input<string>;
    /**
     * Port Template Name
     */
    templatePortShared?: pulumi.Input<string>;
    /**
     * Server side SSL template (Server side SSL Name)
     */
    templateServerSsl?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Port Weight (Connection Weight)
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbServerPort resource.
 */
export interface SlbServerPortArgs {
    /**
     * 'enable': enable; 'disable': disable; 'disable-with-health-check': disable port, but health check work;
     */
    action?: pulumi.Input<string>;
    alternatePorts?: pulumi.Input<pulumi.Input<inputs.SlbServerPortAlternatePort>[]>;
    authCfg?: pulumi.Input<inputs.SlbServerPortAuthCfg>;
    /**
     * Connection Limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Connection Resume
     */
    connResume?: pulumi.Input<number>;
    /**
     * Enable extended statistics on real server port
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    followPortProtocol?: pulumi.Input<string>;
    /**
     * Health Check (Monitor Name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable health check
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Specify which port to follow for health status (Port Number)
     */
    healthCheckFollowPort?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Do not log connection over limit event
     */
    noLogging?: pulumi.Input<number>;
    /**
     * No SSL
     */
    noSsl?: pulumi.Input<number>;
    /**
     * Force using HTTP/2 with Prior Knowledge all the time
     */
    only?: pulumi.Input<number>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Port Number
     */
    portNumber: pulumi.Input<number>;
    /**
     * 'tcp': TCP Port; 'udp': UDP Port;
     */
    protocol: pulumi.Input<string>;
    /**
     * Port range (Port range value - used for vip-to-rport-mapping and vport-rport range mapping)
     */
    range?: pulumi.Input<number>;
    /**
     * Health Check (Monitor Name)
     */
    rportHealthCheckShared?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbServerPortSamplingEnable>[]>;
    /**
     * Reference a port template from shared partition
     */
    sharedPartitionPortTemplate?: pulumi.Input<number>;
    /**
     * Reference a health-check from shared partition
     */
    sharedRportHealthCheck?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server port; 'stats-data-disable': Disable statistical
     * data collection for real server port;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Starting HTTP/2 with Prior Knowledge
     */
    supportHttp2?: pulumi.Input<number>;
    /**
     * Port template (Port template name)
     */
    templatePort?: pulumi.Input<string>;
    /**
     * Port Template Name
     */
    templatePortShared?: pulumi.Input<string>;
    /**
     * Server side SSL template (Server side SSL Name)
     */
    templateServerSsl?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Port Weight (Connection Weight)
     */
    weight?: pulumi.Input<number>;
}
