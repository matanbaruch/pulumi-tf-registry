// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DebugIpv6Ospf extends pulumi.CustomResource {
    /**
     * Get an existing DebugIpv6Ospf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugIpv6OspfState, opts?: pulumi.CustomResourceOptions): DebugIpv6Ospf {
        return new DebugIpv6Ospf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugIpv6Ospf:DebugIpv6Ospf';

    /**
     * Returns true if the given object is an instance of DebugIpv6Ospf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugIpv6Ospf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugIpv6Ospf.__pulumiType;
    }

    public readonly all!: pulumi.Output<outputs.DebugIpv6OspfAll | undefined>;
    public readonly bfd!: pulumi.Output<outputs.DebugIpv6OspfBfd | undefined>;
    /**
     * Dummy
     */
    public readonly dumy!: pulumi.Output<number | undefined>;
    public readonly events!: pulumi.Output<outputs.DebugIpv6OspfEvents | undefined>;
    public readonly ifsm!: pulumi.Output<outputs.DebugIpv6OspfIfsm | undefined>;
    public readonly lsa!: pulumi.Output<outputs.DebugIpv6OspfLsa | undefined>;
    public readonly nfsm!: pulumi.Output<outputs.DebugIpv6OspfNfsm | undefined>;
    public readonly nsm!: pulumi.Output<outputs.DebugIpv6OspfNsm | undefined>;
    public readonly packet!: pulumi.Output<outputs.DebugIpv6OspfPacket | undefined>;
    public readonly route!: pulumi.Output<outputs.DebugIpv6OspfRoute | undefined>;

    /**
     * Create a DebugIpv6Ospf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugIpv6OspfArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugIpv6OspfArgs | DebugIpv6OspfState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugIpv6OspfState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["dumy"] = state ? state.dumy : undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["ifsm"] = state ? state.ifsm : undefined;
            resourceInputs["lsa"] = state ? state.lsa : undefined;
            resourceInputs["nfsm"] = state ? state.nfsm : undefined;
            resourceInputs["nsm"] = state ? state.nsm : undefined;
            resourceInputs["packet"] = state ? state.packet : undefined;
            resourceInputs["route"] = state ? state.route : undefined;
        } else {
            const args = argsOrState as DebugIpv6OspfArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["dumy"] = args ? args.dumy : undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["ifsm"] = args ? args.ifsm : undefined;
            resourceInputs["lsa"] = args ? args.lsa : undefined;
            resourceInputs["nfsm"] = args ? args.nfsm : undefined;
            resourceInputs["nsm"] = args ? args.nsm : undefined;
            resourceInputs["packet"] = args ? args.packet : undefined;
            resourceInputs["route"] = args ? args.route : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugIpv6Ospf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugIpv6Ospf resources.
 */
export interface DebugIpv6OspfState {
    all?: pulumi.Input<inputs.DebugIpv6OspfAll>;
    bfd?: pulumi.Input<inputs.DebugIpv6OspfBfd>;
    /**
     * Dummy
     */
    dumy?: pulumi.Input<number>;
    events?: pulumi.Input<inputs.DebugIpv6OspfEvents>;
    ifsm?: pulumi.Input<inputs.DebugIpv6OspfIfsm>;
    lsa?: pulumi.Input<inputs.DebugIpv6OspfLsa>;
    nfsm?: pulumi.Input<inputs.DebugIpv6OspfNfsm>;
    nsm?: pulumi.Input<inputs.DebugIpv6OspfNsm>;
    packet?: pulumi.Input<inputs.DebugIpv6OspfPacket>;
    route?: pulumi.Input<inputs.DebugIpv6OspfRoute>;
}

/**
 * The set of arguments for constructing a DebugIpv6Ospf resource.
 */
export interface DebugIpv6OspfArgs {
    all?: pulumi.Input<inputs.DebugIpv6OspfAll>;
    bfd?: pulumi.Input<inputs.DebugIpv6OspfBfd>;
    /**
     * Dummy
     */
    dumy?: pulumi.Input<number>;
    events?: pulumi.Input<inputs.DebugIpv6OspfEvents>;
    ifsm?: pulumi.Input<inputs.DebugIpv6OspfIfsm>;
    lsa?: pulumi.Input<inputs.DebugIpv6OspfLsa>;
    nfsm?: pulumi.Input<inputs.DebugIpv6OspfNfsm>;
    nsm?: pulumi.Input<inputs.DebugIpv6OspfNsm>;
    packet?: pulumi.Input<inputs.DebugIpv6OspfPacket>;
    route?: pulumi.Input<inputs.DebugIpv6OspfRoute>;
}
