// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosEventFilter extends pulumi.CustomResource {
    /**
     * Get an existing DdosEventFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosEventFilterState, opts?: pulumi.CustomResourceOptions): DdosEventFilter {
        return new DdosEventFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosEventFilter:DdosEventFilter';

    /**
     * Returns true if the given object is an instance of DdosEventFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosEventFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosEventFilter.__pulumiType;
    }

    public readonly blackList!: pulumi.Output<outputs.DdosEventFilterBlackList | undefined>;
    public readonly drop!: pulumi.Output<outputs.DdosEventFilterDrop | undefined>;
    public readonly filterName!: pulumi.Output<string>;
    public readonly l4TypeLists!: pulumi.Output<outputs.DdosEventFilterL4TypeList[] | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly whiteList!: pulumi.Output<outputs.DdosEventFilterWhiteList | undefined>;

    /**
     * Create a DdosEventFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosEventFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosEventFilterArgs | DdosEventFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosEventFilterState | undefined;
            resourceInputs["blackList"] = state ? state.blackList : undefined;
            resourceInputs["drop"] = state ? state.drop : undefined;
            resourceInputs["filterName"] = state ? state.filterName : undefined;
            resourceInputs["l4TypeLists"] = state ? state.l4TypeLists : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["whiteList"] = state ? state.whiteList : undefined;
        } else {
            const args = argsOrState as DdosEventFilterArgs | undefined;
            if ((!args || args.filterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterName'");
            }
            resourceInputs["blackList"] = args ? args.blackList : undefined;
            resourceInputs["drop"] = args ? args.drop : undefined;
            resourceInputs["filterName"] = args ? args.filterName : undefined;
            resourceInputs["l4TypeLists"] = args ? args.l4TypeLists : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["whiteList"] = args ? args.whiteList : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosEventFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosEventFilter resources.
 */
export interface DdosEventFilterState {
    blackList?: pulumi.Input<inputs.DdosEventFilterBlackList>;
    drop?: pulumi.Input<inputs.DdosEventFilterDrop>;
    filterName?: pulumi.Input<string>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosEventFilterL4TypeList>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    whiteList?: pulumi.Input<inputs.DdosEventFilterWhiteList>;
}

/**
 * The set of arguments for constructing a DdosEventFilter resource.
 */
export interface DdosEventFilterArgs {
    blackList?: pulumi.Input<inputs.DdosEventFilterBlackList>;
    drop?: pulumi.Input<inputs.DdosEventFilterDrop>;
    filterName: pulumi.Input<string>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosEventFilterL4TypeList>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    whiteList?: pulumi.Input<inputs.DdosEventFilterWhiteList>;
}
