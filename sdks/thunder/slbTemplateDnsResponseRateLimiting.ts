// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateDnsResponseRateLimiting extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateDnsResponseRateLimiting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateDnsResponseRateLimitingState, opts?: pulumi.CustomResourceOptions): SlbTemplateDnsResponseRateLimiting {
        return new SlbTemplateDnsResponseRateLimiting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateDnsResponseRateLimiting:SlbTemplateDnsResponseRateLimiting';

    /**
     * Returns true if the given object is an instance of SlbTemplateDnsResponseRateLimiting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateDnsResponseRateLimiting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateDnsResponseRateLimiting.__pulumiType;
    }

    /**
     * 'log-only': Only log rate-limiting, do not actually rate limit. Requires enable-log configuration; 'rate-limit':
     * Rate-Limit based on configuration (Default); 'whitelist': Whitelist, disable rate-limiting;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Enable logging
     */
    public readonly enableLog!: pulumi.Output<number | undefined>;
    /**
     * Maximum allowed request rate for the filter. This should match average traffic. (default 10 per seconds)
     */
    public readonly filterResponseRate!: pulumi.Output<number | undefined>;
    /**
     * IP subnet mask (response rate by IP subnet mask)
     */
    public readonly matchSubnet!: pulumi.Output<string | undefined>;
    /**
     * IPV6 subnet mask (response rate by IPv6 subnet mask)
     */
    public readonly matchSubnetV6!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Responses exceeding this rate within the window will be dropped (default 5 per second)
     */
    public readonly responseRate!: pulumi.Output<number | undefined>;
    public readonly rrlClassListLists!: pulumi.Output<outputs.SlbTemplateDnsResponseRateLimitingRrlClassListList[] | undefined>;
    /**
     * Every n'th response that would be rate-limited will be let through instead
     */
    public readonly slipRate!: pulumi.Output<number | undefined>;
    public readonly srcIpOnly!: pulumi.Output<number | undefined>;
    /**
     * Every n'th response that would be rate-limited will respond with TC bit
     */
    public readonly tcRate!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Rate-Limiting Interval in Seconds (default is one)
     */
    public readonly window!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbTemplateDnsResponseRateLimiting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateDnsResponseRateLimitingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateDnsResponseRateLimitingArgs | SlbTemplateDnsResponseRateLimitingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateDnsResponseRateLimitingState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["enableLog"] = state ? state.enableLog : undefined;
            resourceInputs["filterResponseRate"] = state ? state.filterResponseRate : undefined;
            resourceInputs["matchSubnet"] = state ? state.matchSubnet : undefined;
            resourceInputs["matchSubnetV6"] = state ? state.matchSubnetV6 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["responseRate"] = state ? state.responseRate : undefined;
            resourceInputs["rrlClassListLists"] = state ? state.rrlClassListLists : undefined;
            resourceInputs["slipRate"] = state ? state.slipRate : undefined;
            resourceInputs["srcIpOnly"] = state ? state.srcIpOnly : undefined;
            resourceInputs["tcRate"] = state ? state.tcRate : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["window"] = state ? state.window : undefined;
        } else {
            const args = argsOrState as SlbTemplateDnsResponseRateLimitingArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["enableLog"] = args ? args.enableLog : undefined;
            resourceInputs["filterResponseRate"] = args ? args.filterResponseRate : undefined;
            resourceInputs["matchSubnet"] = args ? args.matchSubnet : undefined;
            resourceInputs["matchSubnetV6"] = args ? args.matchSubnetV6 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["responseRate"] = args ? args.responseRate : undefined;
            resourceInputs["rrlClassListLists"] = args ? args.rrlClassListLists : undefined;
            resourceInputs["slipRate"] = args ? args.slipRate : undefined;
            resourceInputs["srcIpOnly"] = args ? args.srcIpOnly : undefined;
            resourceInputs["tcRate"] = args ? args.tcRate : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["window"] = args ? args.window : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateDnsResponseRateLimiting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateDnsResponseRateLimiting resources.
 */
export interface SlbTemplateDnsResponseRateLimitingState {
    /**
     * 'log-only': Only log rate-limiting, do not actually rate limit. Requires enable-log configuration; 'rate-limit':
     * Rate-Limit based on configuration (Default); 'whitelist': Whitelist, disable rate-limiting;
     */
    action?: pulumi.Input<string>;
    /**
     * Enable logging
     */
    enableLog?: pulumi.Input<number>;
    /**
     * Maximum allowed request rate for the filter. This should match average traffic. (default 10 per seconds)
     */
    filterResponseRate?: pulumi.Input<number>;
    /**
     * IP subnet mask (response rate by IP subnet mask)
     */
    matchSubnet?: pulumi.Input<string>;
    /**
     * IPV6 subnet mask (response rate by IPv6 subnet mask)
     */
    matchSubnetV6?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Responses exceeding this rate within the window will be dropped (default 5 per second)
     */
    responseRate?: pulumi.Input<number>;
    rrlClassListLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateDnsResponseRateLimitingRrlClassListList>[]>;
    /**
     * Every n'th response that would be rate-limited will be let through instead
     */
    slipRate?: pulumi.Input<number>;
    srcIpOnly?: pulumi.Input<number>;
    /**
     * Every n'th response that would be rate-limited will respond with TC bit
     */
    tcRate?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Rate-Limiting Interval in Seconds (default is one)
     */
    window?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbTemplateDnsResponseRateLimiting resource.
 */
export interface SlbTemplateDnsResponseRateLimitingArgs {
    /**
     * 'log-only': Only log rate-limiting, do not actually rate limit. Requires enable-log configuration; 'rate-limit':
     * Rate-Limit based on configuration (Default); 'whitelist': Whitelist, disable rate-limiting;
     */
    action?: pulumi.Input<string>;
    /**
     * Enable logging
     */
    enableLog?: pulumi.Input<number>;
    /**
     * Maximum allowed request rate for the filter. This should match average traffic. (default 10 per seconds)
     */
    filterResponseRate?: pulumi.Input<number>;
    /**
     * IP subnet mask (response rate by IP subnet mask)
     */
    matchSubnet?: pulumi.Input<string>;
    /**
     * IPV6 subnet mask (response rate by IPv6 subnet mask)
     */
    matchSubnetV6?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Responses exceeding this rate within the window will be dropped (default 5 per second)
     */
    responseRate?: pulumi.Input<number>;
    rrlClassListLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateDnsResponseRateLimitingRrlClassListList>[]>;
    /**
     * Every n'th response that would be rate-limited will be let through instead
     */
    slipRate?: pulumi.Input<number>;
    srcIpOnly?: pulumi.Input<number>;
    /**
     * Every n'th response that would be rate-limited will respond with TC bit
     */
    tcRate?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Rate-Limiting Interval in Seconds (default is one)
     */
    window?: pulumi.Input<number>;
}
