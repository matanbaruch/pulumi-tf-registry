// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LicenseManagerOverage extends pulumi.CustomResource {
    /**
     * Get an existing LicenseManagerOverage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseManagerOverageState, opts?: pulumi.CustomResourceOptions): LicenseManagerOverage {
        return new LicenseManagerOverage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/licenseManagerOverage:LicenseManagerOverage';

    /**
     * Returns true if the given object is an instance of LicenseManagerOverage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseManagerOverage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseManagerOverage.__pulumiType;
    }

    /**
     * Number of bytes
     */
    public readonly bytes!: pulumi.Output<number | undefined>;
    /**
     * Number of days
     */
    public readonly days!: pulumi.Output<number | undefined>;
    /**
     * Number of GB
     */
    public readonly gb!: pulumi.Output<number | undefined>;
    /**
     * Number of hours
     */
    public readonly hours!: pulumi.Output<number | undefined>;
    /**
     * Number of KB
     */
    public readonly kb!: pulumi.Output<number | undefined>;
    /**
     * Number of MB
     */
    public readonly mb!: pulumi.Output<number | undefined>;
    /**
     * Number of minutes
     */
    public readonly minutes!: pulumi.Output<number | undefined>;
    /**
     * Number of seconds
     */
    public readonly seconds!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a LicenseManagerOverage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LicenseManagerOverageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseManagerOverageArgs | LicenseManagerOverageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseManagerOverageState | undefined;
            resourceInputs["bytes"] = state ? state.bytes : undefined;
            resourceInputs["days"] = state ? state.days : undefined;
            resourceInputs["gb"] = state ? state.gb : undefined;
            resourceInputs["hours"] = state ? state.hours : undefined;
            resourceInputs["kb"] = state ? state.kb : undefined;
            resourceInputs["mb"] = state ? state.mb : undefined;
            resourceInputs["minutes"] = state ? state.minutes : undefined;
            resourceInputs["seconds"] = state ? state.seconds : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as LicenseManagerOverageArgs | undefined;
            resourceInputs["bytes"] = args ? args.bytes : undefined;
            resourceInputs["days"] = args ? args.days : undefined;
            resourceInputs["gb"] = args ? args.gb : undefined;
            resourceInputs["hours"] = args ? args.hours : undefined;
            resourceInputs["kb"] = args ? args.kb : undefined;
            resourceInputs["mb"] = args ? args.mb : undefined;
            resourceInputs["minutes"] = args ? args.minutes : undefined;
            resourceInputs["seconds"] = args ? args.seconds : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicenseManagerOverage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LicenseManagerOverage resources.
 */
export interface LicenseManagerOverageState {
    /**
     * Number of bytes
     */
    bytes?: pulumi.Input<number>;
    /**
     * Number of days
     */
    days?: pulumi.Input<number>;
    /**
     * Number of GB
     */
    gb?: pulumi.Input<number>;
    /**
     * Number of hours
     */
    hours?: pulumi.Input<number>;
    /**
     * Number of KB
     */
    kb?: pulumi.Input<number>;
    /**
     * Number of MB
     */
    mb?: pulumi.Input<number>;
    /**
     * Number of minutes
     */
    minutes?: pulumi.Input<number>;
    /**
     * Number of seconds
     */
    seconds?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicenseManagerOverage resource.
 */
export interface LicenseManagerOverageArgs {
    /**
     * Number of bytes
     */
    bytes?: pulumi.Input<number>;
    /**
     * Number of days
     */
    days?: pulumi.Input<number>;
    /**
     * Number of GB
     */
    gb?: pulumi.Input<number>;
    /**
     * Number of hours
     */
    hours?: pulumi.Input<number>;
    /**
     * Number of KB
     */
    kb?: pulumi.Input<number>;
    /**
     * Number of MB
     */
    mb?: pulumi.Input<number>;
    /**
     * Number of minutes
     */
    minutes?: pulumi.Input<number>;
    /**
     * Number of seconds
     */
    seconds?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
