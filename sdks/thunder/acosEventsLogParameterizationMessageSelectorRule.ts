// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AcosEventsLogParameterizationMessageSelectorRule extends pulumi.CustomResource {
    /**
     * Get an existing AcosEventsLogParameterizationMessageSelectorRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcosEventsLogParameterizationMessageSelectorRuleState, opts?: pulumi.CustomResourceOptions): AcosEventsLogParameterizationMessageSelectorRule {
        return new AcosEventsLogParameterizationMessageSelectorRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/acosEventsLogParameterizationMessageSelectorRule:AcosEventsLogParameterizationMessageSelectorRule';

    /**
     * Returns true if the given object is an instance of AcosEventsLogParameterizationMessageSelectorRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AcosEventsLogParameterizationMessageSelectorRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AcosEventsLogParameterizationMessageSelectorRule.__pulumiType;
    }

    /**
     * 'send': log messages selected by this rule will be sent (Default); 'drop': log messages selected by this rule will be
     * dropped;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Specify rule index - rules are applied in numeric order
     */
    public readonly index!: pulumi.Output<number>;
    /**
     * Select a specific message by message-id and optionally severity
     */
    public readonly messageId!: pulumi.Output<string | undefined>;
    /**
     * 'all': Log messages at this level and all sub-trees; 'node-only': Log messages at this node only; 'children-only': Log
     * messages at all sub-trees only; 'log-field-only': Log message for this Log Field only;
     */
    public readonly messageIdScope!: pulumi.Output<string | undefined>;
    /**
     * 'equal-and-higher': emergency is highest, debugging lowest; 'equal': single severity;
     */
    public readonly severityOper!: pulumi.Output<string | undefined>;
    /**
     * 'emergency': System unusable log messages (Most Important); 'alert': Action must be taken immediately; 'critical':
     * Critical conditions; 'error': Error conditions; 'warning': Warning conditions; 'notification': Normal but significant
     * conditions; 'information': Informational messages; 'debugging': Debug level messages (Least Important);
     */
    public readonly severityVal!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AcosEventsLogParameterizationMessageSelectorRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AcosEventsLogParameterizationMessageSelectorRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcosEventsLogParameterizationMessageSelectorRuleArgs | AcosEventsLogParameterizationMessageSelectorRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcosEventsLogParameterizationMessageSelectorRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["messageId"] = state ? state.messageId : undefined;
            resourceInputs["messageIdScope"] = state ? state.messageIdScope : undefined;
            resourceInputs["severityOper"] = state ? state.severityOper : undefined;
            resourceInputs["severityVal"] = state ? state.severityVal : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AcosEventsLogParameterizationMessageSelectorRuleArgs | undefined;
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["messageId"] = args ? args.messageId : undefined;
            resourceInputs["messageIdScope"] = args ? args.messageIdScope : undefined;
            resourceInputs["severityOper"] = args ? args.severityOper : undefined;
            resourceInputs["severityVal"] = args ? args.severityVal : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AcosEventsLogParameterizationMessageSelectorRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AcosEventsLogParameterizationMessageSelectorRule resources.
 */
export interface AcosEventsLogParameterizationMessageSelectorRuleState {
    /**
     * 'send': log messages selected by this rule will be sent (Default); 'drop': log messages selected by this rule will be
     * dropped;
     */
    action?: pulumi.Input<string>;
    /**
     * Specify rule index - rules are applied in numeric order
     */
    index?: pulumi.Input<number>;
    /**
     * Select a specific message by message-id and optionally severity
     */
    messageId?: pulumi.Input<string>;
    /**
     * 'all': Log messages at this level and all sub-trees; 'node-only': Log messages at this node only; 'children-only': Log
     * messages at all sub-trees only; 'log-field-only': Log message for this Log Field only;
     */
    messageIdScope?: pulumi.Input<string>;
    /**
     * 'equal-and-higher': emergency is highest, debugging lowest; 'equal': single severity;
     */
    severityOper?: pulumi.Input<string>;
    /**
     * 'emergency': System unusable log messages (Most Important); 'alert': Action must be taken immediately; 'critical':
     * Critical conditions; 'error': Error conditions; 'warning': Warning conditions; 'notification': Normal but significant
     * conditions; 'information': Informational messages; 'debugging': Debug level messages (Least Important);
     */
    severityVal?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AcosEventsLogParameterizationMessageSelectorRule resource.
 */
export interface AcosEventsLogParameterizationMessageSelectorRuleArgs {
    /**
     * 'send': log messages selected by this rule will be sent (Default); 'drop': log messages selected by this rule will be
     * dropped;
     */
    action?: pulumi.Input<string>;
    /**
     * Specify rule index - rules are applied in numeric order
     */
    index: pulumi.Input<number>;
    /**
     * Select a specific message by message-id and optionally severity
     */
    messageId?: pulumi.Input<string>;
    /**
     * 'all': Log messages at this level and all sub-trees; 'node-only': Log messages at this node only; 'children-only': Log
     * messages at all sub-trees only; 'log-field-only': Log message for this Log Field only;
     */
    messageIdScope?: pulumi.Input<string>;
    /**
     * 'equal-and-higher': emergency is highest, debugging lowest; 'equal': single severity;
     */
    severityOper?: pulumi.Input<string>;
    /**
     * 'emergency': System unusable log messages (Most Important); 'alert': Action must be taken immediately; 'critical':
     * Critical conditions; 'error': Error conditions; 'warning': Warning conditions; 'notification': Normal but significant
     * conditions; 'information': Informational messages; 'debugging': Debug level messages (Least Important);
     */
    severityVal?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
