// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstZoneDetection extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstZoneDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstZoneDetectionState, opts?: pulumi.CustomResourceOptions): DdosDstZoneDetection {
        return new DdosDstZoneDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstZoneDetection:DdosDstZoneDetection';

    /**
     * Returns true if the given object is an instance of DdosDstZoneDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstZoneDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstZoneDetection.__pulumiType;
    }

    public readonly notification!: pulumi.Output<outputs.DdosDstZoneDetectionNotification | undefined>;
    public readonly outboundDetection!: pulumi.Output<outputs.DdosDstZoneDetectionOutboundDetection | undefined>;
    public readonly packetAnomalyDetection!: pulumi.Output<outputs.DdosDstZoneDetectionPacketAnomalyDetection | undefined>;
    public readonly serviceDiscovery!: pulumi.Output<outputs.DdosDstZoneDetectionServiceDiscovery | undefined>;
    /**
     * 'settings': settings;
     */
    public readonly settings!: pulumi.Output<string>;
    /**
     * 'enable': Enable detection; 'disable': Disable detection;
     */
    public readonly toggle!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly victimIpDetection!: pulumi.Output<outputs.DdosDstZoneDetectionVictimIpDetection | undefined>;
    /**
     * ZoneName
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a DdosDstZoneDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstZoneDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstZoneDetectionArgs | DdosDstZoneDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstZoneDetectionState | undefined;
            resourceInputs["notification"] = state ? state.notification : undefined;
            resourceInputs["outboundDetection"] = state ? state.outboundDetection : undefined;
            resourceInputs["packetAnomalyDetection"] = state ? state.packetAnomalyDetection : undefined;
            resourceInputs["serviceDiscovery"] = state ? state.serviceDiscovery : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["toggle"] = state ? state.toggle : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["victimIpDetection"] = state ? state.victimIpDetection : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as DdosDstZoneDetectionArgs | undefined;
            if ((!args || args.settings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settings'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["notification"] = args ? args.notification : undefined;
            resourceInputs["outboundDetection"] = args ? args.outboundDetection : undefined;
            resourceInputs["packetAnomalyDetection"] = args ? args.packetAnomalyDetection : undefined;
            resourceInputs["serviceDiscovery"] = args ? args.serviceDiscovery : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["toggle"] = args ? args.toggle : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["victimIpDetection"] = args ? args.victimIpDetection : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstZoneDetection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstZoneDetection resources.
 */
export interface DdosDstZoneDetectionState {
    notification?: pulumi.Input<inputs.DdosDstZoneDetectionNotification>;
    outboundDetection?: pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetection>;
    packetAnomalyDetection?: pulumi.Input<inputs.DdosDstZoneDetectionPacketAnomalyDetection>;
    serviceDiscovery?: pulumi.Input<inputs.DdosDstZoneDetectionServiceDiscovery>;
    /**
     * 'settings': settings;
     */
    settings?: pulumi.Input<string>;
    /**
     * 'enable': Enable detection; 'disable': Disable detection;
     */
    toggle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    victimIpDetection?: pulumi.Input<inputs.DdosDstZoneDetectionVictimIpDetection>;
    /**
     * ZoneName
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDstZoneDetection resource.
 */
export interface DdosDstZoneDetectionArgs {
    notification?: pulumi.Input<inputs.DdosDstZoneDetectionNotification>;
    outboundDetection?: pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetection>;
    packetAnomalyDetection?: pulumi.Input<inputs.DdosDstZoneDetectionPacketAnomalyDetection>;
    serviceDiscovery?: pulumi.Input<inputs.DdosDstZoneDetectionServiceDiscovery>;
    /**
     * 'settings': settings;
     */
    settings: pulumi.Input<string>;
    /**
     * 'enable': Enable detection; 'disable': Disable detection;
     */
    toggle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    victimIpDetection?: pulumi.Input<inputs.DdosDstZoneDetectionVictimIpDetection>;
    /**
     * ZoneName
     */
    zoneName: pulumi.Input<string>;
}
