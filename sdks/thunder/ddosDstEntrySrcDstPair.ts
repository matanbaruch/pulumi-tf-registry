// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstEntrySrcDstPair extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstEntrySrcDstPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstEntrySrcDstPairState, opts?: pulumi.CustomResourceOptions): DdosDstEntrySrcDstPair {
        return new DdosDstEntrySrcDstPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstEntrySrcDstPair:DdosDstEntrySrcDstPair';

    /**
     * Returns true if the given object is an instance of DdosDstEntrySrcDstPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstEntrySrcDstPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstEntrySrcDstPair.__pulumiType;
    }

    public readonly appTypeSrcDstLists!: pulumi.Output<outputs.DdosDstEntrySrcDstPairAppTypeSrcDstList[] | undefined>;
    /**
     * Always permit for the Source to bypass all feature & limit checks
     */
    public readonly bypass!: pulumi.Output<number | undefined>;
    /**
     * Configure default
     */
    public readonly default!: pulumi.Output<number>;
    /**
     * DstEntryName
     */
    public readonly dstEntryName!: pulumi.Output<string>;
    public readonly exceedLogCfg!: pulumi.Output<outputs.DdosDstEntrySrcDstPairExceedLogCfg | undefined>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    public readonly l4TypeSrcDstLists!: pulumi.Output<outputs.DdosDstEntrySrcDstPairL4TypeSrcDstList[] | undefined>;
    /**
     * Enable periodic log while event is continuing
     */
    public readonly logPeriodic!: pulumi.Output<number | undefined>;
    public readonly template!: pulumi.Output<outputs.DdosDstEntrySrcDstPairTemplate | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosDstEntrySrcDstPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstEntrySrcDstPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstEntrySrcDstPairArgs | DdosDstEntrySrcDstPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstEntrySrcDstPairState | undefined;
            resourceInputs["appTypeSrcDstLists"] = state ? state.appTypeSrcDstLists : undefined;
            resourceInputs["bypass"] = state ? state.bypass : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["dstEntryName"] = state ? state.dstEntryName : undefined;
            resourceInputs["exceedLogCfg"] = state ? state.exceedLogCfg : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["l4TypeSrcDstLists"] = state ? state.l4TypeSrcDstLists : undefined;
            resourceInputs["logPeriodic"] = state ? state.logPeriodic : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosDstEntrySrcDstPairArgs | undefined;
            if ((!args || args.default === undefined) && !opts.urn) {
                throw new Error("Missing required property 'default'");
            }
            if ((!args || args.dstEntryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstEntryName'");
            }
            resourceInputs["appTypeSrcDstLists"] = args ? args.appTypeSrcDstLists : undefined;
            resourceInputs["bypass"] = args ? args.bypass : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["dstEntryName"] = args ? args.dstEntryName : undefined;
            resourceInputs["exceedLogCfg"] = args ? args.exceedLogCfg : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["l4TypeSrcDstLists"] = args ? args.l4TypeSrcDstLists : undefined;
            resourceInputs["logPeriodic"] = args ? args.logPeriodic : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstEntrySrcDstPair.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstEntrySrcDstPair resources.
 */
export interface DdosDstEntrySrcDstPairState {
    appTypeSrcDstLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairAppTypeSrcDstList>[]>;
    /**
     * Always permit for the Source to bypass all feature & limit checks
     */
    bypass?: pulumi.Input<number>;
    /**
     * Configure default
     */
    default?: pulumi.Input<number>;
    /**
     * DstEntryName
     */
    dstEntryName?: pulumi.Input<string>;
    exceedLogCfg?: pulumi.Input<inputs.DdosDstEntrySrcDstPairExceedLogCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    l4TypeSrcDstLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairL4TypeSrcDstList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.DdosDstEntrySrcDstPairTemplate>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDstEntrySrcDstPair resource.
 */
export interface DdosDstEntrySrcDstPairArgs {
    appTypeSrcDstLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairAppTypeSrcDstList>[]>;
    /**
     * Always permit for the Source to bypass all feature & limit checks
     */
    bypass?: pulumi.Input<number>;
    /**
     * Configure default
     */
    default: pulumi.Input<number>;
    /**
     * DstEntryName
     */
    dstEntryName: pulumi.Input<string>;
    exceedLogCfg?: pulumi.Input<inputs.DdosDstEntrySrcDstPairExceedLogCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    l4TypeSrcDstLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairL4TypeSrcDstList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.DdosDstEntrySrcDstPairTemplate>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
