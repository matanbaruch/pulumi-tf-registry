// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GslbPolicy extends pulumi.CustomResource {
    /**
     * Get an existing GslbPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbPolicyState, opts?: pulumi.CustomResourceOptions): GslbPolicy {
        return new GslbPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/gslbPolicy:GslbPolicy';

    /**
     * Returns true if the given object is an instance of GslbPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GslbPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GslbPolicy.__pulumiType;
    }

    public readonly activeRdt!: pulumi.Output<outputs.GslbPolicyActiveRdt | undefined>;
    /**
     * Enable Select Service-IP with the highest number of active servers
     */
    public readonly activeServersEnable!: pulumi.Output<number | undefined>;
    /**
     * Break when no active server
     */
    public readonly activeServersFailBreak!: pulumi.Output<number | undefined>;
    /**
     * Enable admin ip
     */
    public readonly adminIpEnable!: pulumi.Output<number | undefined>;
    /**
     * Return highest priority server only
     */
    public readonly adminIpTopOnly!: pulumi.Output<number | undefined>;
    /**
     * Select Service-IP for the device having maximum admin preference
     */
    public readonly adminPreference!: pulumi.Output<number | undefined>;
    /**
     * Select alias name having maximum admin preference
     */
    public readonly aliasAdminPreference!: pulumi.Output<number | undefined>;
    /**
     * Select record based on the amount of available service-ip
     */
    public readonly amountFirst!: pulumi.Output<number | undefined>;
    public readonly autoMap!: pulumi.Output<outputs.GslbPolicyAutoMap | undefined>;
    /**
     * Enable bw cost
     */
    public readonly bwCostEnable!: pulumi.Output<number | undefined>;
    /**
     * Break when exceed limit
     */
    public readonly bwCostFailBreak!: pulumi.Output<number | undefined>;
    public readonly capacity!: pulumi.Output<outputs.GslbPolicyCapacity | undefined>;
    public readonly connectionLoad!: pulumi.Output<outputs.GslbPolicyConnectionLoad | undefined>;
    public readonly dns!: pulumi.Output<outputs.GslbPolicyDns | undefined>;
    public readonly edns!: pulumi.Output<outputs.GslbPolicyEdns | undefined>;
    public readonly geoLocationLists!: pulumi.Output<outputs.GslbPolicyGeoLocationList[] | undefined>;
    public readonly geoLocationMatch!: pulumi.Output<outputs.GslbPolicyGeoLocationMatch | undefined>;
    /**
     * Select Service-IP by geographic
     */
    public readonly geographic!: pulumi.Output<number | undefined>;
    /**
     * Select Service-IP by health status
     */
    public readonly healthCheck!: pulumi.Output<number | undefined>;
    /**
     * Check health preference
     */
    public readonly healthCheckPreferenceEnable!: pulumi.Output<number | undefined>;
    /**
     * Only keep top n
     */
    public readonly healthPreferenceTop!: pulumi.Output<number | undefined>;
    /**
     * Specify IP List (IP List Name)
     */
    public readonly ipList!: pulumi.Output<string | undefined>;
    /**
     * Least response selection
     */
    public readonly leastResponse!: pulumi.Output<number | undefined>;
    /**
     * Break if no valid Service-IP
     */
    public readonly metricFailBreak!: pulumi.Output<number | undefined>;
    /**
     * Always check Service-IP for all enabled metrics
     */
    public readonly metricForceCheck!: pulumi.Output<number | undefined>;
    /**
     * Specify order of metric
     */
    public readonly metricOrder!: pulumi.Output<number | undefined>;
    public readonly metricType!: pulumi.Output<string | undefined>;
    /**
     * Specify policy name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable Select Service-IP for device having maximum number of available sessions
     */
    public readonly numSessionEnable!: pulumi.Output<number | undefined>;
    /**
     * The difference between the available sessions, default is 10 (Tolerance)
     */
    public readonly numSessionTolerance!: pulumi.Output<number | undefined>;
    /**
     * Return highest priority server only
     */
    public readonly orderedIpTopOnly!: pulumi.Output<number | undefined>;
    /**
     * Round robin selection, enabled by default
     */
    public readonly roundRobin!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Select alias name by weighted preference
     */
    public readonly weightedAlias!: pulumi.Output<number | undefined>;
    /**
     * Enable Select Service-IP by weighted preference
     */
    public readonly weightedIpEnable!: pulumi.Output<number | undefined>;
    /**
     * Weighted by total hits
     */
    public readonly weightedIpTotalHits!: pulumi.Output<number | undefined>;
    /**
     * Enable Select Service-IP by weighted site preference
     */
    public readonly weightedSiteEnable!: pulumi.Output<number | undefined>;
    /**
     * Weighted by total hits
     */
    public readonly weightedSiteTotalHits!: pulumi.Output<number | undefined>;

    /**
     * Create a GslbPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GslbPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbPolicyArgs | GslbPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbPolicyState | undefined;
            resourceInputs["activeRdt"] = state ? state.activeRdt : undefined;
            resourceInputs["activeServersEnable"] = state ? state.activeServersEnable : undefined;
            resourceInputs["activeServersFailBreak"] = state ? state.activeServersFailBreak : undefined;
            resourceInputs["adminIpEnable"] = state ? state.adminIpEnable : undefined;
            resourceInputs["adminIpTopOnly"] = state ? state.adminIpTopOnly : undefined;
            resourceInputs["adminPreference"] = state ? state.adminPreference : undefined;
            resourceInputs["aliasAdminPreference"] = state ? state.aliasAdminPreference : undefined;
            resourceInputs["amountFirst"] = state ? state.amountFirst : undefined;
            resourceInputs["autoMap"] = state ? state.autoMap : undefined;
            resourceInputs["bwCostEnable"] = state ? state.bwCostEnable : undefined;
            resourceInputs["bwCostFailBreak"] = state ? state.bwCostFailBreak : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["connectionLoad"] = state ? state.connectionLoad : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["edns"] = state ? state.edns : undefined;
            resourceInputs["geoLocationLists"] = state ? state.geoLocationLists : undefined;
            resourceInputs["geoLocationMatch"] = state ? state.geoLocationMatch : undefined;
            resourceInputs["geographic"] = state ? state.geographic : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckPreferenceEnable"] = state ? state.healthCheckPreferenceEnable : undefined;
            resourceInputs["healthPreferenceTop"] = state ? state.healthPreferenceTop : undefined;
            resourceInputs["ipList"] = state ? state.ipList : undefined;
            resourceInputs["leastResponse"] = state ? state.leastResponse : undefined;
            resourceInputs["metricFailBreak"] = state ? state.metricFailBreak : undefined;
            resourceInputs["metricForceCheck"] = state ? state.metricForceCheck : undefined;
            resourceInputs["metricOrder"] = state ? state.metricOrder : undefined;
            resourceInputs["metricType"] = state ? state.metricType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numSessionEnable"] = state ? state.numSessionEnable : undefined;
            resourceInputs["numSessionTolerance"] = state ? state.numSessionTolerance : undefined;
            resourceInputs["orderedIpTopOnly"] = state ? state.orderedIpTopOnly : undefined;
            resourceInputs["roundRobin"] = state ? state.roundRobin : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["weightedAlias"] = state ? state.weightedAlias : undefined;
            resourceInputs["weightedIpEnable"] = state ? state.weightedIpEnable : undefined;
            resourceInputs["weightedIpTotalHits"] = state ? state.weightedIpTotalHits : undefined;
            resourceInputs["weightedSiteEnable"] = state ? state.weightedSiteEnable : undefined;
            resourceInputs["weightedSiteTotalHits"] = state ? state.weightedSiteTotalHits : undefined;
        } else {
            const args = argsOrState as GslbPolicyArgs | undefined;
            resourceInputs["activeRdt"] = args ? args.activeRdt : undefined;
            resourceInputs["activeServersEnable"] = args ? args.activeServersEnable : undefined;
            resourceInputs["activeServersFailBreak"] = args ? args.activeServersFailBreak : undefined;
            resourceInputs["adminIpEnable"] = args ? args.adminIpEnable : undefined;
            resourceInputs["adminIpTopOnly"] = args ? args.adminIpTopOnly : undefined;
            resourceInputs["adminPreference"] = args ? args.adminPreference : undefined;
            resourceInputs["aliasAdminPreference"] = args ? args.aliasAdminPreference : undefined;
            resourceInputs["amountFirst"] = args ? args.amountFirst : undefined;
            resourceInputs["autoMap"] = args ? args.autoMap : undefined;
            resourceInputs["bwCostEnable"] = args ? args.bwCostEnable : undefined;
            resourceInputs["bwCostFailBreak"] = args ? args.bwCostFailBreak : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["connectionLoad"] = args ? args.connectionLoad : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["edns"] = args ? args.edns : undefined;
            resourceInputs["geoLocationLists"] = args ? args.geoLocationLists : undefined;
            resourceInputs["geoLocationMatch"] = args ? args.geoLocationMatch : undefined;
            resourceInputs["geographic"] = args ? args.geographic : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckPreferenceEnable"] = args ? args.healthCheckPreferenceEnable : undefined;
            resourceInputs["healthPreferenceTop"] = args ? args.healthPreferenceTop : undefined;
            resourceInputs["ipList"] = args ? args.ipList : undefined;
            resourceInputs["leastResponse"] = args ? args.leastResponse : undefined;
            resourceInputs["metricFailBreak"] = args ? args.metricFailBreak : undefined;
            resourceInputs["metricForceCheck"] = args ? args.metricForceCheck : undefined;
            resourceInputs["metricOrder"] = args ? args.metricOrder : undefined;
            resourceInputs["metricType"] = args ? args.metricType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numSessionEnable"] = args ? args.numSessionEnable : undefined;
            resourceInputs["numSessionTolerance"] = args ? args.numSessionTolerance : undefined;
            resourceInputs["orderedIpTopOnly"] = args ? args.orderedIpTopOnly : undefined;
            resourceInputs["roundRobin"] = args ? args.roundRobin : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["weightedAlias"] = args ? args.weightedAlias : undefined;
            resourceInputs["weightedIpEnable"] = args ? args.weightedIpEnable : undefined;
            resourceInputs["weightedIpTotalHits"] = args ? args.weightedIpTotalHits : undefined;
            resourceInputs["weightedSiteEnable"] = args ? args.weightedSiteEnable : undefined;
            resourceInputs["weightedSiteTotalHits"] = args ? args.weightedSiteTotalHits : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GslbPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GslbPolicy resources.
 */
export interface GslbPolicyState {
    activeRdt?: pulumi.Input<inputs.GslbPolicyActiveRdt>;
    /**
     * Enable Select Service-IP with the highest number of active servers
     */
    activeServersEnable?: pulumi.Input<number>;
    /**
     * Break when no active server
     */
    activeServersFailBreak?: pulumi.Input<number>;
    /**
     * Enable admin ip
     */
    adminIpEnable?: pulumi.Input<number>;
    /**
     * Return highest priority server only
     */
    adminIpTopOnly?: pulumi.Input<number>;
    /**
     * Select Service-IP for the device having maximum admin preference
     */
    adminPreference?: pulumi.Input<number>;
    /**
     * Select alias name having maximum admin preference
     */
    aliasAdminPreference?: pulumi.Input<number>;
    /**
     * Select record based on the amount of available service-ip
     */
    amountFirst?: pulumi.Input<number>;
    autoMap?: pulumi.Input<inputs.GslbPolicyAutoMap>;
    /**
     * Enable bw cost
     */
    bwCostEnable?: pulumi.Input<number>;
    /**
     * Break when exceed limit
     */
    bwCostFailBreak?: pulumi.Input<number>;
    capacity?: pulumi.Input<inputs.GslbPolicyCapacity>;
    connectionLoad?: pulumi.Input<inputs.GslbPolicyConnectionLoad>;
    dns?: pulumi.Input<inputs.GslbPolicyDns>;
    edns?: pulumi.Input<inputs.GslbPolicyEdns>;
    geoLocationLists?: pulumi.Input<pulumi.Input<inputs.GslbPolicyGeoLocationList>[]>;
    geoLocationMatch?: pulumi.Input<inputs.GslbPolicyGeoLocationMatch>;
    /**
     * Select Service-IP by geographic
     */
    geographic?: pulumi.Input<number>;
    /**
     * Select Service-IP by health status
     */
    healthCheck?: pulumi.Input<number>;
    /**
     * Check health preference
     */
    healthCheckPreferenceEnable?: pulumi.Input<number>;
    /**
     * Only keep top n
     */
    healthPreferenceTop?: pulumi.Input<number>;
    /**
     * Specify IP List (IP List Name)
     */
    ipList?: pulumi.Input<string>;
    /**
     * Least response selection
     */
    leastResponse?: pulumi.Input<number>;
    /**
     * Break if no valid Service-IP
     */
    metricFailBreak?: pulumi.Input<number>;
    /**
     * Always check Service-IP for all enabled metrics
     */
    metricForceCheck?: pulumi.Input<number>;
    /**
     * Specify order of metric
     */
    metricOrder?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    /**
     * Specify policy name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable Select Service-IP for device having maximum number of available sessions
     */
    numSessionEnable?: pulumi.Input<number>;
    /**
     * The difference between the available sessions, default is 10 (Tolerance)
     */
    numSessionTolerance?: pulumi.Input<number>;
    /**
     * Return highest priority server only
     */
    orderedIpTopOnly?: pulumi.Input<number>;
    /**
     * Round robin selection, enabled by default
     */
    roundRobin?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Select alias name by weighted preference
     */
    weightedAlias?: pulumi.Input<number>;
    /**
     * Enable Select Service-IP by weighted preference
     */
    weightedIpEnable?: pulumi.Input<number>;
    /**
     * Weighted by total hits
     */
    weightedIpTotalHits?: pulumi.Input<number>;
    /**
     * Enable Select Service-IP by weighted site preference
     */
    weightedSiteEnable?: pulumi.Input<number>;
    /**
     * Weighted by total hits
     */
    weightedSiteTotalHits?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GslbPolicy resource.
 */
export interface GslbPolicyArgs {
    activeRdt?: pulumi.Input<inputs.GslbPolicyActiveRdt>;
    /**
     * Enable Select Service-IP with the highest number of active servers
     */
    activeServersEnable?: pulumi.Input<number>;
    /**
     * Break when no active server
     */
    activeServersFailBreak?: pulumi.Input<number>;
    /**
     * Enable admin ip
     */
    adminIpEnable?: pulumi.Input<number>;
    /**
     * Return highest priority server only
     */
    adminIpTopOnly?: pulumi.Input<number>;
    /**
     * Select Service-IP for the device having maximum admin preference
     */
    adminPreference?: pulumi.Input<number>;
    /**
     * Select alias name having maximum admin preference
     */
    aliasAdminPreference?: pulumi.Input<number>;
    /**
     * Select record based on the amount of available service-ip
     */
    amountFirst?: pulumi.Input<number>;
    autoMap?: pulumi.Input<inputs.GslbPolicyAutoMap>;
    /**
     * Enable bw cost
     */
    bwCostEnable?: pulumi.Input<number>;
    /**
     * Break when exceed limit
     */
    bwCostFailBreak?: pulumi.Input<number>;
    capacity?: pulumi.Input<inputs.GslbPolicyCapacity>;
    connectionLoad?: pulumi.Input<inputs.GslbPolicyConnectionLoad>;
    dns?: pulumi.Input<inputs.GslbPolicyDns>;
    edns?: pulumi.Input<inputs.GslbPolicyEdns>;
    geoLocationLists?: pulumi.Input<pulumi.Input<inputs.GslbPolicyGeoLocationList>[]>;
    geoLocationMatch?: pulumi.Input<inputs.GslbPolicyGeoLocationMatch>;
    /**
     * Select Service-IP by geographic
     */
    geographic?: pulumi.Input<number>;
    /**
     * Select Service-IP by health status
     */
    healthCheck?: pulumi.Input<number>;
    /**
     * Check health preference
     */
    healthCheckPreferenceEnable?: pulumi.Input<number>;
    /**
     * Only keep top n
     */
    healthPreferenceTop?: pulumi.Input<number>;
    /**
     * Specify IP List (IP List Name)
     */
    ipList?: pulumi.Input<string>;
    /**
     * Least response selection
     */
    leastResponse?: pulumi.Input<number>;
    /**
     * Break if no valid Service-IP
     */
    metricFailBreak?: pulumi.Input<number>;
    /**
     * Always check Service-IP for all enabled metrics
     */
    metricForceCheck?: pulumi.Input<number>;
    /**
     * Specify order of metric
     */
    metricOrder?: pulumi.Input<number>;
    metricType?: pulumi.Input<string>;
    /**
     * Specify policy name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable Select Service-IP for device having maximum number of available sessions
     */
    numSessionEnable?: pulumi.Input<number>;
    /**
     * The difference between the available sessions, default is 10 (Tolerance)
     */
    numSessionTolerance?: pulumi.Input<number>;
    /**
     * Return highest priority server only
     */
    orderedIpTopOnly?: pulumi.Input<number>;
    /**
     * Round robin selection, enabled by default
     */
    roundRobin?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Select alias name by weighted preference
     */
    weightedAlias?: pulumi.Input<number>;
    /**
     * Enable Select Service-IP by weighted preference
     */
    weightedIpEnable?: pulumi.Input<number>;
    /**
     * Weighted by total hits
     */
    weightedIpTotalHits?: pulumi.Input<number>;
    /**
     * Enable Select Service-IP by weighted site preference
     */
    weightedSiteEnable?: pulumi.Input<number>;
    /**
     * Weighted by total hits
     */
    weightedSiteTotalHits?: pulumi.Input<number>;
}
