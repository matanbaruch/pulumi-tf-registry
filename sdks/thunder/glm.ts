// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Glm extends pulumi.CustomResource {
    /**
     * Get an existing Glm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlmState, opts?: pulumi.CustomResourceOptions): Glm {
        return new Glm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/glm:Glm';

    /**
     * Returns true if the given object is an instance of Glm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Glm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Glm.__pulumiType;
    }

    /**
     * Enter the requested bandwidth in Mbps for Capacity Pool
     */
    public readonly allocateBandwidth!: pulumi.Output<number | undefined>;
    /**
     * Helpful identifier for this appliance
     */
    public readonly applianceName!: pulumi.Output<string | undefined>;
    /**
     * Enable Burst License
     */
    public readonly burst!: pulumi.Output<number | undefined>;
    public readonly checkExpiration!: pulumi.Output<number | undefined>;
    public readonly createLicenseRequest!: pulumi.Output<outputs.GlmCreateLicenseRequest | undefined>;
    /**
     * Turn on periodic GLM license requests (default license retrieval interval is every 24 hours)
     */
    public readonly enableRequests!: pulumi.Output<number | undefined>;
    /**
     * Enter the ELM hostname, IP or [IPV6]
     */
    public readonly enterprise!: pulumi.Output<string | undefined>;
    public readonly enterpriseHaHostLists!: pulumi.Output<outputs.GlmEnterpriseHaHostList[] | undefined>;
    /**
     * 'fqdn': TLS verified with FQDN; 'self-signed': TLS verified with self signed certificate(Default);
     * 'self-signed-pull-cert': Request and use self signed certificate;
     */
    public readonly enterpriseRequestType!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * GLM license request interval (in hours)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    public readonly newLicense!: pulumi.Output<outputs.GlmNewLicense | undefined>;
    /**
     * License request port (default 443)
     */
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly proxyServer!: pulumi.Output<outputs.GlmProxyServer | undefined>;
    public readonly send!: pulumi.Output<outputs.GlmSend | undefined>;
    public readonly thunderCapacityLicense!: pulumi.Output<number | undefined>;
    /**
     * License entitlement token
     */
    public readonly token!: pulumi.Output<string | undefined>;
    /**
     * Use management port to connect to GLM
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Glm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlmArgs | GlmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlmState | undefined;
            resourceInputs["allocateBandwidth"] = state ? state.allocateBandwidth : undefined;
            resourceInputs["applianceName"] = state ? state.applianceName : undefined;
            resourceInputs["burst"] = state ? state.burst : undefined;
            resourceInputs["checkExpiration"] = state ? state.checkExpiration : undefined;
            resourceInputs["createLicenseRequest"] = state ? state.createLicenseRequest : undefined;
            resourceInputs["enableRequests"] = state ? state.enableRequests : undefined;
            resourceInputs["enterprise"] = state ? state.enterprise : undefined;
            resourceInputs["enterpriseHaHostLists"] = state ? state.enterpriseHaHostLists : undefined;
            resourceInputs["enterpriseRequestType"] = state ? state.enterpriseRequestType : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["newLicense"] = state ? state.newLicense : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["proxyServer"] = state ? state.proxyServer : undefined;
            resourceInputs["send"] = state ? state.send : undefined;
            resourceInputs["thunderCapacityLicense"] = state ? state.thunderCapacityLicense : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GlmArgs | undefined;
            resourceInputs["allocateBandwidth"] = args ? args.allocateBandwidth : undefined;
            resourceInputs["applianceName"] = args ? args.applianceName : undefined;
            resourceInputs["burst"] = args ? args.burst : undefined;
            resourceInputs["checkExpiration"] = args ? args.checkExpiration : undefined;
            resourceInputs["createLicenseRequest"] = args ? args.createLicenseRequest : undefined;
            resourceInputs["enableRequests"] = args ? args.enableRequests : undefined;
            resourceInputs["enterprise"] = args ? args.enterprise : undefined;
            resourceInputs["enterpriseHaHostLists"] = args ? args.enterpriseHaHostLists : undefined;
            resourceInputs["enterpriseRequestType"] = args ? args.enterpriseRequestType : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["newLicense"] = args ? args.newLicense : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["proxyServer"] = args ? args.proxyServer : undefined;
            resourceInputs["send"] = args ? args.send : undefined;
            resourceInputs["thunderCapacityLicense"] = args ? args.thunderCapacityLicense : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Glm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Glm resources.
 */
export interface GlmState {
    /**
     * Enter the requested bandwidth in Mbps for Capacity Pool
     */
    allocateBandwidth?: pulumi.Input<number>;
    /**
     * Helpful identifier for this appliance
     */
    applianceName?: pulumi.Input<string>;
    /**
     * Enable Burst License
     */
    burst?: pulumi.Input<number>;
    checkExpiration?: pulumi.Input<number>;
    createLicenseRequest?: pulumi.Input<inputs.GlmCreateLicenseRequest>;
    /**
     * Turn on periodic GLM license requests (default license retrieval interval is every 24 hours)
     */
    enableRequests?: pulumi.Input<number>;
    /**
     * Enter the ELM hostname, IP or [IPV6]
     */
    enterprise?: pulumi.Input<string>;
    enterpriseHaHostLists?: pulumi.Input<pulumi.Input<inputs.GlmEnterpriseHaHostList>[]>;
    /**
     * 'fqdn': TLS verified with FQDN; 'self-signed': TLS verified with self signed certificate(Default);
     * 'self-signed-pull-cert': Request and use self signed certificate;
     */
    enterpriseRequestType?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * GLM license request interval (in hours)
     */
    interval?: pulumi.Input<number>;
    newLicense?: pulumi.Input<inputs.GlmNewLicense>;
    /**
     * License request port (default 443)
     */
    port?: pulumi.Input<number>;
    proxyServer?: pulumi.Input<inputs.GlmProxyServer>;
    send?: pulumi.Input<inputs.GlmSend>;
    thunderCapacityLicense?: pulumi.Input<number>;
    /**
     * License entitlement token
     */
    token?: pulumi.Input<string>;
    /**
     * Use management port to connect to GLM
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Glm resource.
 */
export interface GlmArgs {
    /**
     * Enter the requested bandwidth in Mbps for Capacity Pool
     */
    allocateBandwidth?: pulumi.Input<number>;
    /**
     * Helpful identifier for this appliance
     */
    applianceName?: pulumi.Input<string>;
    /**
     * Enable Burst License
     */
    burst?: pulumi.Input<number>;
    checkExpiration?: pulumi.Input<number>;
    createLicenseRequest?: pulumi.Input<inputs.GlmCreateLicenseRequest>;
    /**
     * Turn on periodic GLM license requests (default license retrieval interval is every 24 hours)
     */
    enableRequests?: pulumi.Input<number>;
    /**
     * Enter the ELM hostname, IP or [IPV6]
     */
    enterprise?: pulumi.Input<string>;
    enterpriseHaHostLists?: pulumi.Input<pulumi.Input<inputs.GlmEnterpriseHaHostList>[]>;
    /**
     * 'fqdn': TLS verified with FQDN; 'self-signed': TLS verified with self signed certificate(Default);
     * 'self-signed-pull-cert': Request and use self signed certificate;
     */
    enterpriseRequestType?: pulumi.Input<string>;
    host?: pulumi.Input<string>;
    /**
     * GLM license request interval (in hours)
     */
    interval?: pulumi.Input<number>;
    newLicense?: pulumi.Input<inputs.GlmNewLicense>;
    /**
     * License request port (default 443)
     */
    port?: pulumi.Input<number>;
    proxyServer?: pulumi.Input<inputs.GlmProxyServer>;
    send?: pulumi.Input<inputs.GlmSend>;
    thunderCapacityLicense?: pulumi.Input<number>;
    /**
     * License entitlement token
     */
    token?: pulumi.Input<string>;
    /**
     * Use management port to connect to GLM
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
