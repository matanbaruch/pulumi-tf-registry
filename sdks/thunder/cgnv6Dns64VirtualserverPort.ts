// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6Dns64VirtualserverPort extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6Dns64VirtualserverPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6Dns64VirtualserverPortState, opts?: pulumi.CustomResourceOptions): Cgnv6Dns64VirtualserverPort {
        return new Cgnv6Dns64VirtualserverPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6Dns64VirtualserverPort:Cgnv6Dns64VirtualserverPort';

    /**
     * Returns true if the given object is an instance of Cgnv6Dns64VirtualserverPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6Dns64VirtualserverPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6Dns64VirtualserverPort.__pulumiType;
    }

    public readonly aclIdLists!: pulumi.Output<outputs.Cgnv6Dns64VirtualserverPortAclIdList[] | undefined>;
    public readonly aclNameLists!: pulumi.Output<outputs.Cgnv6Dns64VirtualserverPortAclNameList[] | undefined>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Configure auto NAT for the vport
     */
    public readonly auto!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    /**
     * Specify NAT pool or pool group
     */
    public readonly pool!: pulumi.Output<string | undefined>;
    /**
     * Port
     */
    public readonly portNumber!: pulumi.Output<number>;
    /**
     * Set auto NAT pool as higher precedence for source NAT
     */
    public readonly precedence!: pulumi.Output<number | undefined>;
    /**
     * 'dns-udp': DNS service over UDP;
     */
    public readonly protocol!: pulumi.Output<string>;
    public readonly samplingEnables!: pulumi.Output<outputs.Cgnv6Dns64VirtualserverPortSamplingEnable[] | undefined>;
    /**
     * Bind a Service Group to this Virtual Server (Service Group Name)
     */
    public readonly serviceGroup!: pulumi.Output<string | undefined>;
    /**
     * DNS template (DNS template name)
     */
    public readonly templateDns!: pulumi.Output<string | undefined>;
    /**
     * Policy Template (Policy template name)
     */
    public readonly templatePolicy!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6Dns64VirtualserverPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Cgnv6Dns64VirtualserverPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6Dns64VirtualserverPortArgs | Cgnv6Dns64VirtualserverPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6Dns64VirtualserverPortState | undefined;
            resourceInputs["aclIdLists"] = state ? state.aclIdLists : undefined;
            resourceInputs["aclNameLists"] = state ? state.aclNameLists : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["auto"] = state ? state.auto : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["portNumber"] = state ? state.portNumber : undefined;
            resourceInputs["precedence"] = state ? state.precedence : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["serviceGroup"] = state ? state.serviceGroup : undefined;
            resourceInputs["templateDns"] = state ? state.templateDns : undefined;
            resourceInputs["templatePolicy"] = state ? state.templatePolicy : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6Dns64VirtualserverPortArgs | undefined;
            if ((!args || args.portNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portNumber'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["aclIdLists"] = args ? args.aclIdLists : undefined;
            resourceInputs["aclNameLists"] = args ? args.aclNameLists : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["auto"] = args ? args.auto : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["portNumber"] = args ? args.portNumber : undefined;
            resourceInputs["precedence"] = args ? args.precedence : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["serviceGroup"] = args ? args.serviceGroup : undefined;
            resourceInputs["templateDns"] = args ? args.templateDns : undefined;
            resourceInputs["templatePolicy"] = args ? args.templatePolicy : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6Dns64VirtualserverPort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6Dns64VirtualserverPort resources.
 */
export interface Cgnv6Dns64VirtualserverPortState {
    aclIdLists?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortAclIdList>[]>;
    aclNameLists?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortAclNameList>[]>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    /**
     * Configure auto NAT for the vport
     */
    auto?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    pool?: pulumi.Input<string>;
    /**
     * Port
     */
    portNumber?: pulumi.Input<number>;
    /**
     * Set auto NAT pool as higher precedence for source NAT
     */
    precedence?: pulumi.Input<number>;
    /**
     * 'dns-udp': DNS service over UDP;
     */
    protocol?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortSamplingEnable>[]>;
    /**
     * Bind a Service Group to this Virtual Server (Service Group Name)
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * DNS template (DNS template name)
     */
    templateDns?: pulumi.Input<string>;
    /**
     * Policy Template (Policy template name)
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6Dns64VirtualserverPort resource.
 */
export interface Cgnv6Dns64VirtualserverPortArgs {
    aclIdLists?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortAclIdList>[]>;
    aclNameLists?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortAclNameList>[]>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    /**
     * Configure auto NAT for the vport
     */
    auto?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    pool?: pulumi.Input<string>;
    /**
     * Port
     */
    portNumber: pulumi.Input<number>;
    /**
     * Set auto NAT pool as higher precedence for source NAT
     */
    precedence?: pulumi.Input<number>;
    /**
     * 'dns-udp': DNS service over UDP;
     */
    protocol: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortSamplingEnable>[]>;
    /**
     * Bind a Service Group to this Virtual Server (Service Group Name)
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * DNS template (DNS template name)
     */
    templateDns?: pulumi.Input<string>;
    /**
     * Policy Template (Policy template name)
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
