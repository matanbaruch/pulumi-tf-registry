// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VcsDebug extends pulumi.CustomResource {
    /**
     * Get an existing VcsDebug resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VcsDebugState, opts?: pulumi.CustomResourceOptions): VcsDebug {
        return new VcsDebug(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vcsDebug:VcsDebug';

    /**
     * Returns true if the given object is an instance of VcsDebug.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VcsDebug {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VcsDebug.__pulumiType;
    }

    /**
     * Daemon component
     */
    public readonly daemon!: pulumi.Output<number | undefined>;
    /**
     * Daemon message component
     */
    public readonly daemonMsg!: pulumi.Output<number | undefined>;
    /**
     * Election component
     */
    public readonly election!: pulumi.Output<number | undefined>;
    /**
     * Election pdu component
     */
    public readonly electionPdu!: pulumi.Output<number | undefined>;
    /**
     * Encoder component
     */
    public readonly encoder!: pulumi.Output<number | undefined>;
    /**
     * Handler component
     */
    public readonly handler!: pulumi.Output<number | undefined>;
    /**
     * Information component
     */
    public readonly info!: pulumi.Output<number | undefined>;
    /**
     * Lib component
     */
    public readonly lib!: pulumi.Output<number | undefined>;
    /**
     * Net component
     */
    public readonly net!: pulumi.Output<number | undefined>;
    /**
     * SSL component
     */
    public readonly ssl!: pulumi.Output<number | undefined>;
    /**
     * Utility component
     */
    public readonly util!: pulumi.Output<number | undefined>;
    /**
     * vBlade component
     */
    public readonly vblade!: pulumi.Output<number | undefined>;
    /**
     * vBlade Message component
     */
    public readonly vbladeMsg!: pulumi.Output<number | undefined>;
    /**
     * vMaster component
     */
    public readonly vmaster!: pulumi.Output<number | undefined>;
    /**
     * vMaster Message component
     */
    public readonly vmasterMsg!: pulumi.Output<number | undefined>;

    /**
     * Create a VcsDebug resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VcsDebugArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VcsDebugArgs | VcsDebugState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VcsDebugState | undefined;
            resourceInputs["daemon"] = state ? state.daemon : undefined;
            resourceInputs["daemonMsg"] = state ? state.daemonMsg : undefined;
            resourceInputs["election"] = state ? state.election : undefined;
            resourceInputs["electionPdu"] = state ? state.electionPdu : undefined;
            resourceInputs["encoder"] = state ? state.encoder : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["info"] = state ? state.info : undefined;
            resourceInputs["lib"] = state ? state.lib : undefined;
            resourceInputs["net"] = state ? state.net : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["util"] = state ? state.util : undefined;
            resourceInputs["vblade"] = state ? state.vblade : undefined;
            resourceInputs["vbladeMsg"] = state ? state.vbladeMsg : undefined;
            resourceInputs["vmaster"] = state ? state.vmaster : undefined;
            resourceInputs["vmasterMsg"] = state ? state.vmasterMsg : undefined;
        } else {
            const args = argsOrState as VcsDebugArgs | undefined;
            resourceInputs["daemon"] = args ? args.daemon : undefined;
            resourceInputs["daemonMsg"] = args ? args.daemonMsg : undefined;
            resourceInputs["election"] = args ? args.election : undefined;
            resourceInputs["electionPdu"] = args ? args.electionPdu : undefined;
            resourceInputs["encoder"] = args ? args.encoder : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["info"] = args ? args.info : undefined;
            resourceInputs["lib"] = args ? args.lib : undefined;
            resourceInputs["net"] = args ? args.net : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["util"] = args ? args.util : undefined;
            resourceInputs["vblade"] = args ? args.vblade : undefined;
            resourceInputs["vbladeMsg"] = args ? args.vbladeMsg : undefined;
            resourceInputs["vmaster"] = args ? args.vmaster : undefined;
            resourceInputs["vmasterMsg"] = args ? args.vmasterMsg : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VcsDebug.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VcsDebug resources.
 */
export interface VcsDebugState {
    /**
     * Daemon component
     */
    daemon?: pulumi.Input<number>;
    /**
     * Daemon message component
     */
    daemonMsg?: pulumi.Input<number>;
    /**
     * Election component
     */
    election?: pulumi.Input<number>;
    /**
     * Election pdu component
     */
    electionPdu?: pulumi.Input<number>;
    /**
     * Encoder component
     */
    encoder?: pulumi.Input<number>;
    /**
     * Handler component
     */
    handler?: pulumi.Input<number>;
    /**
     * Information component
     */
    info?: pulumi.Input<number>;
    /**
     * Lib component
     */
    lib?: pulumi.Input<number>;
    /**
     * Net component
     */
    net?: pulumi.Input<number>;
    /**
     * SSL component
     */
    ssl?: pulumi.Input<number>;
    /**
     * Utility component
     */
    util?: pulumi.Input<number>;
    /**
     * vBlade component
     */
    vblade?: pulumi.Input<number>;
    /**
     * vBlade Message component
     */
    vbladeMsg?: pulumi.Input<number>;
    /**
     * vMaster component
     */
    vmaster?: pulumi.Input<number>;
    /**
     * vMaster Message component
     */
    vmasterMsg?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VcsDebug resource.
 */
export interface VcsDebugArgs {
    /**
     * Daemon component
     */
    daemon?: pulumi.Input<number>;
    /**
     * Daemon message component
     */
    daemonMsg?: pulumi.Input<number>;
    /**
     * Election component
     */
    election?: pulumi.Input<number>;
    /**
     * Election pdu component
     */
    electionPdu?: pulumi.Input<number>;
    /**
     * Encoder component
     */
    encoder?: pulumi.Input<number>;
    /**
     * Handler component
     */
    handler?: pulumi.Input<number>;
    /**
     * Information component
     */
    info?: pulumi.Input<number>;
    /**
     * Lib component
     */
    lib?: pulumi.Input<number>;
    /**
     * Net component
     */
    net?: pulumi.Input<number>;
    /**
     * SSL component
     */
    ssl?: pulumi.Input<number>;
    /**
     * Utility component
     */
    util?: pulumi.Input<number>;
    /**
     * vBlade component
     */
    vblade?: pulumi.Input<number>;
    /**
     * vBlade Message component
     */
    vbladeMsg?: pulumi.Input<number>;
    /**
     * vMaster component
     */
    vmaster?: pulumi.Input<number>;
    /**
     * vMaster Message component
     */
    vmasterMsg?: pulumi.Input<number>;
}
