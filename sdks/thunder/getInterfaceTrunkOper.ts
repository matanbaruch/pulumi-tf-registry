// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInterfaceTrunkOper(args: GetInterfaceTrunkOperArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfaceTrunkOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getInterfaceTrunkOper:getInterfaceTrunkOper", {
        "id": args.id,
        "ifnum": args.ifnum,
        "oper": args.oper,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInterfaceTrunkOper.
 */
export interface GetInterfaceTrunkOperArgs {
    id?: string;
    ifnum: number;
    oper?: inputs.GetInterfaceTrunkOperOper;
}

/**
 * A collection of values returned by getInterfaceTrunkOper.
 */
export interface GetInterfaceTrunkOperResult {
    readonly id: string;
    readonly ifnum: number;
    readonly oper?: outputs.GetInterfaceTrunkOperOper;
}
export function getInterfaceTrunkOperOutput(args: GetInterfaceTrunkOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfaceTrunkOperResult> {
    return pulumi.output(args).apply((a: any) => getInterfaceTrunkOper(a, opts))
}

/**
 * A collection of arguments for invoking getInterfaceTrunkOper.
 */
export interface GetInterfaceTrunkOperOutputArgs {
    id?: pulumi.Input<string>;
    ifnum: pulumi.Input<number>;
    oper?: pulumi.Input<inputs.GetInterfaceTrunkOperOperArgs>;
}
