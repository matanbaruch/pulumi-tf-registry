// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceTrunk extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceTrunk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceTrunkState, opts?: pulumi.CustomResourceOptions): InterfaceTrunk {
        return new InterfaceTrunk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/interfaceTrunk:InterfaceTrunk';

    /**
     * Returns true if the given object is an instance of InterfaceTrunk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceTrunk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceTrunk.__pulumiType;
    }

    public readonly accessList!: pulumi.Output<outputs.InterfaceTrunkAccessList | undefined>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly bfd!: pulumi.Output<outputs.InterfaceTrunkBfd | undefined>;
    public readonly ddos!: pulumi.Output<outputs.InterfaceTrunkDdos | undefined>;
    /**
     * (Only for LACP trunks) Attempt auto-recovery after ports-treshold is triggered
     */
    public readonly doAutoRecovery!: pulumi.Output<number | undefined>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    public readonly gamingProtocolCompliance!: pulumi.Output<number | undefined>;
    public readonly icmpRateLimit!: pulumi.Output<outputs.InterfaceTrunkIcmpRateLimit | undefined>;
    public readonly icmpv6RateLimit!: pulumi.Output<outputs.InterfaceTrunkIcmpv6RateLimit | undefined>;
    /**
     * Trunk interface number
     */
    public readonly ifnum!: pulumi.Output<number>;
    public readonly ip!: pulumi.Output<outputs.InterfaceTrunkIp | undefined>;
    public readonly ipv6!: pulumi.Output<outputs.InterfaceTrunkIpv6 | undefined>;
    public readonly isis!: pulumi.Output<outputs.InterfaceTrunkIsis | undefined>;
    /**
     * Disable L3 forwarding between VLANs
     */
    public readonly l3VlanFwdDisable!: pulumi.Output<number | undefined>;
    public readonly lw4o6!: pulumi.Output<outputs.InterfaceTrunkLw4o6 | undefined>;
    /**
     * 'enable': Enable MAC learning; 'disable': Disable MAC learning; 'dmac-only': Enable destination MAC learning only;
     */
    public readonly macLearning!: pulumi.Output<string | undefined>;
    public readonly map!: pulumi.Output<outputs.InterfaceTrunkMap | undefined>;
    /**
     * Interface mtu (Interface MTU, default 1 (min MTU is 1280 for IPv6))
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Name for the interface
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nptv6!: pulumi.Output<outputs.InterfaceTrunkNptv6 | undefined>;
    /**
     * Threshold for the minimum number of ports that need to be UP for the trunk to remain UP
     */
    public readonly portsThreshold!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.InterfaceTrunkSamplingEnable[] | undefined>;
    public readonly spanningTree!: pulumi.Output<outputs.InterfaceTrunkSpanningTree | undefined>;
    /**
     * Disable SYNC bit modify for ports-threshold do-auto-recovery
     */
    public readonly syncModifyDisable!: pulumi.Output<number | undefined>;
    /**
     * Timer to re-check the threshold under certain conditions (Time in seconds (Default: 10))
     */
    public readonly timer!: pulumi.Output<number | undefined>;
    /**
     * The trap source
     */
    public readonly trapSource!: pulumi.Output<number | undefined>;
    /**
     * Update and use received L2 information
     */
    public readonly updateL2Info!: pulumi.Output<number | undefined>;
    /**
     * Enable HW based load balacing decision rule
     */
    public readonly useHwHash!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Mark trunk as a virtual wire interface
     */
    public readonly virtualWire!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable VLAN learning; 'disable': Disable VLAN learning;
     */
    public readonly vlanLearning!: pulumi.Output<string | undefined>;

    /**
     * Create a InterfaceTrunk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceTrunkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceTrunkArgs | InterfaceTrunkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceTrunkState | undefined;
            resourceInputs["accessList"] = state ? state.accessList : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["ddos"] = state ? state.ddos : undefined;
            resourceInputs["doAutoRecovery"] = state ? state.doAutoRecovery : undefined;
            resourceInputs["gamingProtocolCompliance"] = state ? state.gamingProtocolCompliance : undefined;
            resourceInputs["icmpRateLimit"] = state ? state.icmpRateLimit : undefined;
            resourceInputs["icmpv6RateLimit"] = state ? state.icmpv6RateLimit : undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["isis"] = state ? state.isis : undefined;
            resourceInputs["l3VlanFwdDisable"] = state ? state.l3VlanFwdDisable : undefined;
            resourceInputs["lw4o6"] = state ? state.lw4o6 : undefined;
            resourceInputs["macLearning"] = state ? state.macLearning : undefined;
            resourceInputs["map"] = state ? state.map : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nptv6"] = state ? state.nptv6 : undefined;
            resourceInputs["portsThreshold"] = state ? state.portsThreshold : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["spanningTree"] = state ? state.spanningTree : undefined;
            resourceInputs["syncModifyDisable"] = state ? state.syncModifyDisable : undefined;
            resourceInputs["timer"] = state ? state.timer : undefined;
            resourceInputs["trapSource"] = state ? state.trapSource : undefined;
            resourceInputs["updateL2Info"] = state ? state.updateL2Info : undefined;
            resourceInputs["useHwHash"] = state ? state.useHwHash : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["virtualWire"] = state ? state.virtualWire : undefined;
            resourceInputs["vlanLearning"] = state ? state.vlanLearning : undefined;
        } else {
            const args = argsOrState as InterfaceTrunkArgs | undefined;
            if ((!args || args.ifnum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifnum'");
            }
            resourceInputs["accessList"] = args ? args.accessList : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["ddos"] = args ? args.ddos : undefined;
            resourceInputs["doAutoRecovery"] = args ? args.doAutoRecovery : undefined;
            resourceInputs["gamingProtocolCompliance"] = args ? args.gamingProtocolCompliance : undefined;
            resourceInputs["icmpRateLimit"] = args ? args.icmpRateLimit : undefined;
            resourceInputs["icmpv6RateLimit"] = args ? args.icmpv6RateLimit : undefined;
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["isis"] = args ? args.isis : undefined;
            resourceInputs["l3VlanFwdDisable"] = args ? args.l3VlanFwdDisable : undefined;
            resourceInputs["lw4o6"] = args ? args.lw4o6 : undefined;
            resourceInputs["macLearning"] = args ? args.macLearning : undefined;
            resourceInputs["map"] = args ? args.map : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nptv6"] = args ? args.nptv6 : undefined;
            resourceInputs["portsThreshold"] = args ? args.portsThreshold : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["spanningTree"] = args ? args.spanningTree : undefined;
            resourceInputs["syncModifyDisable"] = args ? args.syncModifyDisable : undefined;
            resourceInputs["timer"] = args ? args.timer : undefined;
            resourceInputs["trapSource"] = args ? args.trapSource : undefined;
            resourceInputs["updateL2Info"] = args ? args.updateL2Info : undefined;
            resourceInputs["useHwHash"] = args ? args.useHwHash : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["virtualWire"] = args ? args.virtualWire : undefined;
            resourceInputs["vlanLearning"] = args ? args.vlanLearning : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceTrunk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceTrunk resources.
 */
export interface InterfaceTrunkState {
    accessList?: pulumi.Input<inputs.InterfaceTrunkAccessList>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    bfd?: pulumi.Input<inputs.InterfaceTrunkBfd>;
    ddos?: pulumi.Input<inputs.InterfaceTrunkDdos>;
    /**
     * (Only for LACP trunks) Attempt auto-recovery after ports-treshold is triggered
     */
    doAutoRecovery?: pulumi.Input<number>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    gamingProtocolCompliance?: pulumi.Input<number>;
    icmpRateLimit?: pulumi.Input<inputs.InterfaceTrunkIcmpRateLimit>;
    icmpv6RateLimit?: pulumi.Input<inputs.InterfaceTrunkIcmpv6RateLimit>;
    /**
     * Trunk interface number
     */
    ifnum?: pulumi.Input<number>;
    ip?: pulumi.Input<inputs.InterfaceTrunkIp>;
    ipv6?: pulumi.Input<inputs.InterfaceTrunkIpv6>;
    isis?: pulumi.Input<inputs.InterfaceTrunkIsis>;
    /**
     * Disable L3 forwarding between VLANs
     */
    l3VlanFwdDisable?: pulumi.Input<number>;
    lw4o6?: pulumi.Input<inputs.InterfaceTrunkLw4o6>;
    /**
     * 'enable': Enable MAC learning; 'disable': Disable MAC learning; 'dmac-only': Enable destination MAC learning only;
     */
    macLearning?: pulumi.Input<string>;
    map?: pulumi.Input<inputs.InterfaceTrunkMap>;
    /**
     * Interface mtu (Interface MTU, default 1 (min MTU is 1280 for IPv6))
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name for the interface
     */
    name?: pulumi.Input<string>;
    nptv6?: pulumi.Input<inputs.InterfaceTrunkNptv6>;
    /**
     * Threshold for the minimum number of ports that need to be UP for the trunk to remain UP
     */
    portsThreshold?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.InterfaceTrunkSamplingEnable>[]>;
    spanningTree?: pulumi.Input<inputs.InterfaceTrunkSpanningTree>;
    /**
     * Disable SYNC bit modify for ports-threshold do-auto-recovery
     */
    syncModifyDisable?: pulumi.Input<number>;
    /**
     * Timer to re-check the threshold under certain conditions (Time in seconds (Default: 10))
     */
    timer?: pulumi.Input<number>;
    /**
     * The trap source
     */
    trapSource?: pulumi.Input<number>;
    /**
     * Update and use received L2 information
     */
    updateL2Info?: pulumi.Input<number>;
    /**
     * Enable HW based load balacing decision rule
     */
    useHwHash?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Mark trunk as a virtual wire interface
     */
    virtualWire?: pulumi.Input<number>;
    /**
     * 'enable': Enable VLAN learning; 'disable': Disable VLAN learning;
     */
    vlanLearning?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceTrunk resource.
 */
export interface InterfaceTrunkArgs {
    accessList?: pulumi.Input<inputs.InterfaceTrunkAccessList>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    bfd?: pulumi.Input<inputs.InterfaceTrunkBfd>;
    ddos?: pulumi.Input<inputs.InterfaceTrunkDdos>;
    /**
     * (Only for LACP trunks) Attempt auto-recovery after ports-treshold is triggered
     */
    doAutoRecovery?: pulumi.Input<number>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    gamingProtocolCompliance?: pulumi.Input<number>;
    icmpRateLimit?: pulumi.Input<inputs.InterfaceTrunkIcmpRateLimit>;
    icmpv6RateLimit?: pulumi.Input<inputs.InterfaceTrunkIcmpv6RateLimit>;
    /**
     * Trunk interface number
     */
    ifnum: pulumi.Input<number>;
    ip?: pulumi.Input<inputs.InterfaceTrunkIp>;
    ipv6?: pulumi.Input<inputs.InterfaceTrunkIpv6>;
    isis?: pulumi.Input<inputs.InterfaceTrunkIsis>;
    /**
     * Disable L3 forwarding between VLANs
     */
    l3VlanFwdDisable?: pulumi.Input<number>;
    lw4o6?: pulumi.Input<inputs.InterfaceTrunkLw4o6>;
    /**
     * 'enable': Enable MAC learning; 'disable': Disable MAC learning; 'dmac-only': Enable destination MAC learning only;
     */
    macLearning?: pulumi.Input<string>;
    map?: pulumi.Input<inputs.InterfaceTrunkMap>;
    /**
     * Interface mtu (Interface MTU, default 1 (min MTU is 1280 for IPv6))
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name for the interface
     */
    name?: pulumi.Input<string>;
    nptv6?: pulumi.Input<inputs.InterfaceTrunkNptv6>;
    /**
     * Threshold for the minimum number of ports that need to be UP for the trunk to remain UP
     */
    portsThreshold?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.InterfaceTrunkSamplingEnable>[]>;
    spanningTree?: pulumi.Input<inputs.InterfaceTrunkSpanningTree>;
    /**
     * Disable SYNC bit modify for ports-threshold do-auto-recovery
     */
    syncModifyDisable?: pulumi.Input<number>;
    /**
     * Timer to re-check the threshold under certain conditions (Time in seconds (Default: 10))
     */
    timer?: pulumi.Input<number>;
    /**
     * The trap source
     */
    trapSource?: pulumi.Input<number>;
    /**
     * Update and use received L2 information
     */
    updateL2Info?: pulumi.Input<number>;
    /**
     * Enable HW based load balacing decision rule
     */
    useHwHash?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Mark trunk as a virtual wire interface
     */
    virtualWire?: pulumi.Input<number>;
    /**
     * 'enable': Enable VLAN learning; 'disable': Disable VLAN learning;
     */
    vlanLearning?: pulumi.Input<string>;
}
