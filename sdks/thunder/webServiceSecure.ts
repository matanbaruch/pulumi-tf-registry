// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebServiceSecure extends pulumi.CustomResource {
    /**
     * Get an existing WebServiceSecure resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebServiceSecureState, opts?: pulumi.CustomResourceOptions): WebServiceSecure {
        return new WebServiceSecure(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/webServiceSecure:WebServiceSecure';

    /**
     * Returns true if the given object is an instance of WebServiceSecure.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebServiceSecure {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebServiceSecure.__pulumiType;
    }

    public readonly certificate!: pulumi.Output<outputs.WebServiceSecureCertificate | undefined>;
    public readonly generate!: pulumi.Output<outputs.WebServiceSecureGenerate | undefined>;
    public readonly privateKey!: pulumi.Output<outputs.WebServiceSecurePrivateKey | undefined>;
    public readonly regenerate!: pulumi.Output<outputs.WebServiceSecureRegenerate | undefined>;
    /**
     * Restart WEB service
     */
    public readonly restart!: pulumi.Output<number | undefined>;
    /**
     * Wipe WEB private-key and certificate
     */
    public readonly wipe!: pulumi.Output<number | undefined>;

    /**
     * Create a WebServiceSecure resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WebServiceSecureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebServiceSecureArgs | WebServiceSecureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebServiceSecureState | undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["generate"] = state ? state.generate : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["regenerate"] = state ? state.regenerate : undefined;
            resourceInputs["restart"] = state ? state.restart : undefined;
            resourceInputs["wipe"] = state ? state.wipe : undefined;
        } else {
            const args = argsOrState as WebServiceSecureArgs | undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["generate"] = args ? args.generate : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["regenerate"] = args ? args.regenerate : undefined;
            resourceInputs["restart"] = args ? args.restart : undefined;
            resourceInputs["wipe"] = args ? args.wipe : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebServiceSecure.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebServiceSecure resources.
 */
export interface WebServiceSecureState {
    certificate?: pulumi.Input<inputs.WebServiceSecureCertificate>;
    generate?: pulumi.Input<inputs.WebServiceSecureGenerate>;
    privateKey?: pulumi.Input<inputs.WebServiceSecurePrivateKey>;
    regenerate?: pulumi.Input<inputs.WebServiceSecureRegenerate>;
    /**
     * Restart WEB service
     */
    restart?: pulumi.Input<number>;
    /**
     * Wipe WEB private-key and certificate
     */
    wipe?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a WebServiceSecure resource.
 */
export interface WebServiceSecureArgs {
    certificate?: pulumi.Input<inputs.WebServiceSecureCertificate>;
    generate?: pulumi.Input<inputs.WebServiceSecureGenerate>;
    privateKey?: pulumi.Input<inputs.WebServiceSecurePrivateKey>;
    regenerate?: pulumi.Input<inputs.WebServiceSecureRegenerate>;
    /**
     * Restart WEB service
     */
    restart?: pulumi.Input<number>;
    /**
     * Wipe WEB private-key and certificate
     */
    wipe?: pulumi.Input<number>;
}
