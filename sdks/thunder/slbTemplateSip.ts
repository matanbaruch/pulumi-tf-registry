// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateSip extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateSip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateSipState, opts?: pulumi.CustomResourceOptions): SlbTemplateSip {
        return new SlbTemplateSip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateSip:SlbTemplateSip';

    /**
     * Returns true if the given object is an instance of SlbTemplateSip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateSip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateSip.__pulumiType;
    }

    /**
     * ACL id
     */
    public readonly aclId!: pulumi.Output<number | undefined>;
    /**
     * IPv4 Access List Name
     */
    public readonly aclNameValue!: pulumi.Output<string | undefined>;
    /**
     * Translate VIP to real server IP in SIP message when destination NAT is used
     */
    public readonly algDestNat!: pulumi.Output<number | undefined>;
    /**
     * Translate source IP to NAT IP in SIP message when source NAT is used
     */
    public readonly algSourceNat!: pulumi.Output<number | undefined>;
    /**
     * Disable call-ID persistence
     */
    public readonly callIdPersistDisable!: pulumi.Output<number | undefined>;
    /**
     * Respond client keep-alive packet directly instead of forwarding to server
     */
    public readonly clientKeepAlive!: pulumi.Output<number | undefined>;
    public readonly clientRequestHeaders!: pulumi.Output<outputs.SlbTemplateSipClientRequestHeader[] | undefined>;
    public readonly clientResponseHeaders!: pulumi.Output<outputs.SlbTemplateSipClientResponseHeader[] | undefined>;
    /**
     * Permit system processes dialog session
     */
    public readonly dialogAware!: pulumi.Output<number | undefined>;
    /**
     * Drop current SIP message when select client fail
     */
    public readonly dropWhenClientFail!: pulumi.Output<number | undefined>;
    /**
     * Drop current SIP message when select server fail
     */
    public readonly dropWhenServerFail!: pulumi.Output<number | undefined>;
    public readonly excludeTranslations!: pulumi.Output<outputs.SlbTemplateSipExcludeTranslation[] | undefined>;
    /**
     * Define action when select client fail
     */
    public readonly failedClientSelection!: pulumi.Output<number | undefined>;
    /**
     * Send SIP message (includs status code) to server when select client fail(Format: 3 digits(1XX~6XX) space reason)
     */
    public readonly failedClientSelectionMessage!: pulumi.Output<string | undefined>;
    /**
     * Define action when select server fail
     */
    public readonly failedServerSelection!: pulumi.Output<number | undefined>;
    /**
     * Send SIP message (includs status code) to client when select server fail(Format: 3 digits(1XX~6XX) space reason)
     */
    public readonly failedServerSelectionMessage!: pulumi.Output<string | undefined>;
    /**
     * Insert Client IP address into SIP header
     */
    public readonly insertClientIp!: pulumi.Output<number | undefined>;
    /**
     * The interval of keep-alive packet for each persist connection (second)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Use Real Server IP for addresses matching the ACL for a Call-Id
     */
    public readonly keepServerIpIfMatchAcl!: pulumi.Output<number | undefined>;
    /**
     * SIP Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * configure pstn gw host name for tel: uri translate to sip: uri (Hostname String, default is "pstn")
     */
    public readonly pstnGw!: pulumi.Output<string | undefined>;
    /**
     * Send server keep-alive packet for every persist connection when enable conn-reuse
     */
    public readonly serverKeepAlive!: pulumi.Output<number | undefined>;
    public readonly serverRequestHeaders!: pulumi.Output<outputs.SlbTemplateSipServerRequestHeader[] | undefined>;
    public readonly serverResponseHeaders!: pulumi.Output<outputs.SlbTemplateSipServerResponseHeader[] | undefined>;
    /**
     * Force server selection on every SIP request
     */
    public readonly serverSelectionPerRequest!: pulumi.Output<number | undefined>;
    /**
     * service group name
     */
    public readonly serviceGroup!: pulumi.Output<string | undefined>;
    /**
     * Create the across cpu call-id rtp session
     */
    public readonly smpCallIdRtpSession!: pulumi.Output<number | undefined>;
    /**
     * Time in minutes
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateSip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateSipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateSipArgs | SlbTemplateSipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateSipState | undefined;
            resourceInputs["aclId"] = state ? state.aclId : undefined;
            resourceInputs["aclNameValue"] = state ? state.aclNameValue : undefined;
            resourceInputs["algDestNat"] = state ? state.algDestNat : undefined;
            resourceInputs["algSourceNat"] = state ? state.algSourceNat : undefined;
            resourceInputs["callIdPersistDisable"] = state ? state.callIdPersistDisable : undefined;
            resourceInputs["clientKeepAlive"] = state ? state.clientKeepAlive : undefined;
            resourceInputs["clientRequestHeaders"] = state ? state.clientRequestHeaders : undefined;
            resourceInputs["clientResponseHeaders"] = state ? state.clientResponseHeaders : undefined;
            resourceInputs["dialogAware"] = state ? state.dialogAware : undefined;
            resourceInputs["dropWhenClientFail"] = state ? state.dropWhenClientFail : undefined;
            resourceInputs["dropWhenServerFail"] = state ? state.dropWhenServerFail : undefined;
            resourceInputs["excludeTranslations"] = state ? state.excludeTranslations : undefined;
            resourceInputs["failedClientSelection"] = state ? state.failedClientSelection : undefined;
            resourceInputs["failedClientSelectionMessage"] = state ? state.failedClientSelectionMessage : undefined;
            resourceInputs["failedServerSelection"] = state ? state.failedServerSelection : undefined;
            resourceInputs["failedServerSelectionMessage"] = state ? state.failedServerSelectionMessage : undefined;
            resourceInputs["insertClientIp"] = state ? state.insertClientIp : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["keepServerIpIfMatchAcl"] = state ? state.keepServerIpIfMatchAcl : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pstnGw"] = state ? state.pstnGw : undefined;
            resourceInputs["serverKeepAlive"] = state ? state.serverKeepAlive : undefined;
            resourceInputs["serverRequestHeaders"] = state ? state.serverRequestHeaders : undefined;
            resourceInputs["serverResponseHeaders"] = state ? state.serverResponseHeaders : undefined;
            resourceInputs["serverSelectionPerRequest"] = state ? state.serverSelectionPerRequest : undefined;
            resourceInputs["serviceGroup"] = state ? state.serviceGroup : undefined;
            resourceInputs["smpCallIdRtpSession"] = state ? state.smpCallIdRtpSession : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateSipArgs | undefined;
            resourceInputs["aclId"] = args ? args.aclId : undefined;
            resourceInputs["aclNameValue"] = args ? args.aclNameValue : undefined;
            resourceInputs["algDestNat"] = args ? args.algDestNat : undefined;
            resourceInputs["algSourceNat"] = args ? args.algSourceNat : undefined;
            resourceInputs["callIdPersistDisable"] = args ? args.callIdPersistDisable : undefined;
            resourceInputs["clientKeepAlive"] = args ? args.clientKeepAlive : undefined;
            resourceInputs["clientRequestHeaders"] = args ? args.clientRequestHeaders : undefined;
            resourceInputs["clientResponseHeaders"] = args ? args.clientResponseHeaders : undefined;
            resourceInputs["dialogAware"] = args ? args.dialogAware : undefined;
            resourceInputs["dropWhenClientFail"] = args ? args.dropWhenClientFail : undefined;
            resourceInputs["dropWhenServerFail"] = args ? args.dropWhenServerFail : undefined;
            resourceInputs["excludeTranslations"] = args ? args.excludeTranslations : undefined;
            resourceInputs["failedClientSelection"] = args ? args.failedClientSelection : undefined;
            resourceInputs["failedClientSelectionMessage"] = args ? args.failedClientSelectionMessage : undefined;
            resourceInputs["failedServerSelection"] = args ? args.failedServerSelection : undefined;
            resourceInputs["failedServerSelectionMessage"] = args ? args.failedServerSelectionMessage : undefined;
            resourceInputs["insertClientIp"] = args ? args.insertClientIp : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["keepServerIpIfMatchAcl"] = args ? args.keepServerIpIfMatchAcl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pstnGw"] = args ? args.pstnGw : undefined;
            resourceInputs["serverKeepAlive"] = args ? args.serverKeepAlive : undefined;
            resourceInputs["serverRequestHeaders"] = args ? args.serverRequestHeaders : undefined;
            resourceInputs["serverResponseHeaders"] = args ? args.serverResponseHeaders : undefined;
            resourceInputs["serverSelectionPerRequest"] = args ? args.serverSelectionPerRequest : undefined;
            resourceInputs["serviceGroup"] = args ? args.serviceGroup : undefined;
            resourceInputs["smpCallIdRtpSession"] = args ? args.smpCallIdRtpSession : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateSip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateSip resources.
 */
export interface SlbTemplateSipState {
    /**
     * ACL id
     */
    aclId?: pulumi.Input<number>;
    /**
     * IPv4 Access List Name
     */
    aclNameValue?: pulumi.Input<string>;
    /**
     * Translate VIP to real server IP in SIP message when destination NAT is used
     */
    algDestNat?: pulumi.Input<number>;
    /**
     * Translate source IP to NAT IP in SIP message when source NAT is used
     */
    algSourceNat?: pulumi.Input<number>;
    /**
     * Disable call-ID persistence
     */
    callIdPersistDisable?: pulumi.Input<number>;
    /**
     * Respond client keep-alive packet directly instead of forwarding to server
     */
    clientKeepAlive?: pulumi.Input<number>;
    clientRequestHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipClientRequestHeader>[]>;
    clientResponseHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipClientResponseHeader>[]>;
    /**
     * Permit system processes dialog session
     */
    dialogAware?: pulumi.Input<number>;
    /**
     * Drop current SIP message when select client fail
     */
    dropWhenClientFail?: pulumi.Input<number>;
    /**
     * Drop current SIP message when select server fail
     */
    dropWhenServerFail?: pulumi.Input<number>;
    excludeTranslations?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipExcludeTranslation>[]>;
    /**
     * Define action when select client fail
     */
    failedClientSelection?: pulumi.Input<number>;
    /**
     * Send SIP message (includs status code) to server when select client fail(Format: 3 digits(1XX~6XX) space reason)
     */
    failedClientSelectionMessage?: pulumi.Input<string>;
    /**
     * Define action when select server fail
     */
    failedServerSelection?: pulumi.Input<number>;
    /**
     * Send SIP message (includs status code) to client when select server fail(Format: 3 digits(1XX~6XX) space reason)
     */
    failedServerSelectionMessage?: pulumi.Input<string>;
    /**
     * Insert Client IP address into SIP header
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * The interval of keep-alive packet for each persist connection (second)
     */
    interval?: pulumi.Input<number>;
    /**
     * Use Real Server IP for addresses matching the ACL for a Call-Id
     */
    keepServerIpIfMatchAcl?: pulumi.Input<number>;
    /**
     * SIP Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * configure pstn gw host name for tel: uri translate to sip: uri (Hostname String, default is "pstn")
     */
    pstnGw?: pulumi.Input<string>;
    /**
     * Send server keep-alive packet for every persist connection when enable conn-reuse
     */
    serverKeepAlive?: pulumi.Input<number>;
    serverRequestHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipServerRequestHeader>[]>;
    serverResponseHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipServerResponseHeader>[]>;
    /**
     * Force server selection on every SIP request
     */
    serverSelectionPerRequest?: pulumi.Input<number>;
    /**
     * service group name
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * Create the across cpu call-id rtp session
     */
    smpCallIdRtpSession?: pulumi.Input<number>;
    /**
     * Time in minutes
     */
    timeout?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateSip resource.
 */
export interface SlbTemplateSipArgs {
    /**
     * ACL id
     */
    aclId?: pulumi.Input<number>;
    /**
     * IPv4 Access List Name
     */
    aclNameValue?: pulumi.Input<string>;
    /**
     * Translate VIP to real server IP in SIP message when destination NAT is used
     */
    algDestNat?: pulumi.Input<number>;
    /**
     * Translate source IP to NAT IP in SIP message when source NAT is used
     */
    algSourceNat?: pulumi.Input<number>;
    /**
     * Disable call-ID persistence
     */
    callIdPersistDisable?: pulumi.Input<number>;
    /**
     * Respond client keep-alive packet directly instead of forwarding to server
     */
    clientKeepAlive?: pulumi.Input<number>;
    clientRequestHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipClientRequestHeader>[]>;
    clientResponseHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipClientResponseHeader>[]>;
    /**
     * Permit system processes dialog session
     */
    dialogAware?: pulumi.Input<number>;
    /**
     * Drop current SIP message when select client fail
     */
    dropWhenClientFail?: pulumi.Input<number>;
    /**
     * Drop current SIP message when select server fail
     */
    dropWhenServerFail?: pulumi.Input<number>;
    excludeTranslations?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipExcludeTranslation>[]>;
    /**
     * Define action when select client fail
     */
    failedClientSelection?: pulumi.Input<number>;
    /**
     * Send SIP message (includs status code) to server when select client fail(Format: 3 digits(1XX~6XX) space reason)
     */
    failedClientSelectionMessage?: pulumi.Input<string>;
    /**
     * Define action when select server fail
     */
    failedServerSelection?: pulumi.Input<number>;
    /**
     * Send SIP message (includs status code) to client when select server fail(Format: 3 digits(1XX~6XX) space reason)
     */
    failedServerSelectionMessage?: pulumi.Input<string>;
    /**
     * Insert Client IP address into SIP header
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * The interval of keep-alive packet for each persist connection (second)
     */
    interval?: pulumi.Input<number>;
    /**
     * Use Real Server IP for addresses matching the ACL for a Call-Id
     */
    keepServerIpIfMatchAcl?: pulumi.Input<number>;
    /**
     * SIP Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * configure pstn gw host name for tel: uri translate to sip: uri (Hostname String, default is "pstn")
     */
    pstnGw?: pulumi.Input<string>;
    /**
     * Send server keep-alive packet for every persist connection when enable conn-reuse
     */
    serverKeepAlive?: pulumi.Input<number>;
    serverRequestHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipServerRequestHeader>[]>;
    serverResponseHeaders?: pulumi.Input<pulumi.Input<inputs.SlbTemplateSipServerResponseHeader>[]>;
    /**
     * Force server selection on every SIP request
     */
    serverSelectionPerRequest?: pulumi.Input<number>;
    /**
     * service group name
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * Create the across cpu call-id rtp session
     */
    smpCallIdRtpSession?: pulumi.Input<number>;
    /**
     * Time in minutes
     */
    timeout?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
