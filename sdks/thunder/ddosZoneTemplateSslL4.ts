// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosZoneTemplateSslL4 extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneTemplateSslL4 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneTemplateSslL4State, opts?: pulumi.CustomResourceOptions): DdosZoneTemplateSslL4 {
        return new DdosZoneTemplateSslL4(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneTemplateSslL4:DdosZoneTemplateSslL4';

    /**
     * Returns true if the given object is an instance of DdosZoneTemplateSslL4.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneTemplateSslL4 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneTemplateSslL4.__pulumiType;
    }

    /**
     * Allow Non-TLS (SSLv3 and lower) traffic (Warning: security may be compromised)
     */
    public readonly allowNonTls!: pulumi.Output<number | undefined>;
    public readonly authHandshake!: pulumi.Output<outputs.DdosZoneTemplateSslL4AuthHandshake | undefined>;
    /**
     * Disable this template
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    public readonly dst!: pulumi.Output<outputs.DdosZoneTemplateSslL4Dst | undefined>;
    public readonly multiPuThresholdDistribution!: pulumi.Output<outputs.DdosZoneTemplateSslL4MultiPuThresholdDistribution | undefined>;
    public readonly renegotiation!: pulumi.Output<outputs.DdosZoneTemplateSslL4Renegotiation | undefined>;
    public readonly src!: pulumi.Output<outputs.DdosZoneTemplateSslL4Src | undefined>;
    public readonly sslL4TmplName!: pulumi.Output<string>;
    public readonly sslTrafficCheck!: pulumi.Output<outputs.DdosZoneTemplateSslL4SslTrafficCheck | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosZoneTemplateSslL4 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneTemplateSslL4Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneTemplateSslL4Args | DdosZoneTemplateSslL4State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneTemplateSslL4State | undefined;
            resourceInputs["allowNonTls"] = state ? state.allowNonTls : undefined;
            resourceInputs["authHandshake"] = state ? state.authHandshake : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["multiPuThresholdDistribution"] = state ? state.multiPuThresholdDistribution : undefined;
            resourceInputs["renegotiation"] = state ? state.renegotiation : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["sslL4TmplName"] = state ? state.sslL4TmplName : undefined;
            resourceInputs["sslTrafficCheck"] = state ? state.sslTrafficCheck : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosZoneTemplateSslL4Args | undefined;
            if ((!args || args.sslL4TmplName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslL4TmplName'");
            }
            resourceInputs["allowNonTls"] = args ? args.allowNonTls : undefined;
            resourceInputs["authHandshake"] = args ? args.authHandshake : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["multiPuThresholdDistribution"] = args ? args.multiPuThresholdDistribution : undefined;
            resourceInputs["renegotiation"] = args ? args.renegotiation : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["sslL4TmplName"] = args ? args.sslL4TmplName : undefined;
            resourceInputs["sslTrafficCheck"] = args ? args.sslTrafficCheck : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneTemplateSslL4.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneTemplateSslL4 resources.
 */
export interface DdosZoneTemplateSslL4State {
    /**
     * Allow Non-TLS (SSLv3 and lower) traffic (Warning: security may be compromised)
     */
    allowNonTls?: pulumi.Input<number>;
    authHandshake?: pulumi.Input<inputs.DdosZoneTemplateSslL4AuthHandshake>;
    /**
     * Disable this template
     */
    disable?: pulumi.Input<number>;
    dst?: pulumi.Input<inputs.DdosZoneTemplateSslL4Dst>;
    multiPuThresholdDistribution?: pulumi.Input<inputs.DdosZoneTemplateSslL4MultiPuThresholdDistribution>;
    renegotiation?: pulumi.Input<inputs.DdosZoneTemplateSslL4Renegotiation>;
    src?: pulumi.Input<inputs.DdosZoneTemplateSslL4Src>;
    sslL4TmplName?: pulumi.Input<string>;
    sslTrafficCheck?: pulumi.Input<inputs.DdosZoneTemplateSslL4SslTrafficCheck>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosZoneTemplateSslL4 resource.
 */
export interface DdosZoneTemplateSslL4Args {
    /**
     * Allow Non-TLS (SSLv3 and lower) traffic (Warning: security may be compromised)
     */
    allowNonTls?: pulumi.Input<number>;
    authHandshake?: pulumi.Input<inputs.DdosZoneTemplateSslL4AuthHandshake>;
    /**
     * Disable this template
     */
    disable?: pulumi.Input<number>;
    dst?: pulumi.Input<inputs.DdosZoneTemplateSslL4Dst>;
    multiPuThresholdDistribution?: pulumi.Input<inputs.DdosZoneTemplateSslL4MultiPuThresholdDistribution>;
    renegotiation?: pulumi.Input<inputs.DdosZoneTemplateSslL4Renegotiation>;
    src?: pulumi.Input<inputs.DdosZoneTemplateSslL4Src>;
    sslL4TmplName: pulumi.Input<string>;
    sslTrafficCheck?: pulumi.Input<inputs.DdosZoneTemplateSslL4SslTrafficCheck>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
