// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbTemplateVirtualPort extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateVirtualPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateVirtualPortState, opts?: pulumi.CustomResourceOptions): SlbTemplateVirtualPort {
        return new SlbTemplateVirtualPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateVirtualPort:SlbTemplateVirtualPort';

    /**
     * Returns true if the given object is an instance of SlbTemplateVirtualPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateVirtualPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateVirtualPort.__pulumiType;
    }

    /**
     * Use aFlow to eliminate the traffic surge
     */
    public readonly aflow!: pulumi.Output<number | undefined>;
    /**
     * Allow initial SYN packet with other flags
     */
    public readonly allowSynOtherflags!: pulumi.Output<number | undefined>;
    /**
     * Allow mapping of VIP to real port
     */
    public readonly allowVipToRportMapping!: pulumi.Output<number | undefined>;
    /**
     * Connection limit
     */
    public readonly connLimit!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly connLimitNoLogging!: pulumi.Output<number | undefined>;
    /**
     * Send client reset when connection over limit
     */
    public readonly connLimitReset!: pulumi.Output<number | undefined>;
    /**
     * Connection rate limit
     */
    public readonly connRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly connRateLimitNoLogging!: pulumi.Output<number | undefined>;
    /**
     * Send client reset when connection rate over limit
     */
    public readonly connRateLimitReset!: pulumi.Output<number | undefined>;
    /**
     * Drop conection if receives TCP packet without SYN or RST flag and it does not belong to any existing connections
     */
    public readonly dropUnknownConn!: pulumi.Output<number | undefined>;
    /**
     * Differentiated Services Code Point (DSCP to Real Server IP Mapping Value)
     */
    public readonly dscp!: pulumi.Output<number | undefined>;
    /**
     * reclaim TCP resource immediately without MSL
     */
    public readonly ignoreTcpMsl!: pulumi.Output<number | undefined>;
    /**
     * 'no-logging': Do not log over limit event; 'no-repeat-logging': log once for over limit event. Default is log once per
     * minute;
     */
    public readonly logOptions!: pulumi.Output<string | undefined>;
    /**
     * Virtual port template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Allow initial TCP packet to be non-SYN
     */
    public readonly nonSynInitiation!: pulumi.Output<number | undefined>;
    /**
     * '100ms': Source IP and port rate limit per 100ms; 'second': Source IP and port rate limit per second (default);
     */
    public readonly pktRateInterval!: pulumi.Output<string | undefined>;
    /**
     * send client-side reset (reset after packet limit)
     */
    public readonly pktRateLimitReset!: pulumi.Output<number | undefined>;
    /**
     * 'src-ip-port': Source IP and port rate limit; 'src-port': Source port rate limit;
     */
    public readonly pktRateType!: pulumi.Output<string | undefined>;
    /**
     * Source IP and port rate limit (Packet rate limit)
     */
    public readonly rate!: pulumi.Output<number | undefined>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    public readonly rateInterval!: pulumi.Output<string | undefined>;
    /**
     * Send reset to L7 client and server connection upon a failover
     */
    public readonly resetL7OnFailover!: pulumi.Output<number | undefined>;
    /**
     * Send reset back if receives TCP packet without SYN or RST flag and it does not belong to any existing connections
     */
    public readonly resetUnknownConn!: pulumi.Output<number | undefined>;
    /**
     * Source NAT MSL (Source NAT MSL value (seconds))
     */
    public readonly snatMsl!: pulumi.Output<number | undefined>;
    /**
     * Source NAT Port Preservation
     */
    public readonly snatPortPreserve!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Only do rate limit if CPU RR triggered
     */
    public readonly whenRrEnable!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbTemplateVirtualPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateVirtualPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateVirtualPortArgs | SlbTemplateVirtualPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateVirtualPortState | undefined;
            resourceInputs["aflow"] = state ? state.aflow : undefined;
            resourceInputs["allowSynOtherflags"] = state ? state.allowSynOtherflags : undefined;
            resourceInputs["allowVipToRportMapping"] = state ? state.allowVipToRportMapping : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["connLimitNoLogging"] = state ? state.connLimitNoLogging : undefined;
            resourceInputs["connLimitReset"] = state ? state.connLimitReset : undefined;
            resourceInputs["connRateLimit"] = state ? state.connRateLimit : undefined;
            resourceInputs["connRateLimitNoLogging"] = state ? state.connRateLimitNoLogging : undefined;
            resourceInputs["connRateLimitReset"] = state ? state.connRateLimitReset : undefined;
            resourceInputs["dropUnknownConn"] = state ? state.dropUnknownConn : undefined;
            resourceInputs["dscp"] = state ? state.dscp : undefined;
            resourceInputs["ignoreTcpMsl"] = state ? state.ignoreTcpMsl : undefined;
            resourceInputs["logOptions"] = state ? state.logOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonSynInitiation"] = state ? state.nonSynInitiation : undefined;
            resourceInputs["pktRateInterval"] = state ? state.pktRateInterval : undefined;
            resourceInputs["pktRateLimitReset"] = state ? state.pktRateLimitReset : undefined;
            resourceInputs["pktRateType"] = state ? state.pktRateType : undefined;
            resourceInputs["rate"] = state ? state.rate : undefined;
            resourceInputs["rateInterval"] = state ? state.rateInterval : undefined;
            resourceInputs["resetL7OnFailover"] = state ? state.resetL7OnFailover : undefined;
            resourceInputs["resetUnknownConn"] = state ? state.resetUnknownConn : undefined;
            resourceInputs["snatMsl"] = state ? state.snatMsl : undefined;
            resourceInputs["snatPortPreserve"] = state ? state.snatPortPreserve : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["whenRrEnable"] = state ? state.whenRrEnable : undefined;
        } else {
            const args = argsOrState as SlbTemplateVirtualPortArgs | undefined;
            resourceInputs["aflow"] = args ? args.aflow : undefined;
            resourceInputs["allowSynOtherflags"] = args ? args.allowSynOtherflags : undefined;
            resourceInputs["allowVipToRportMapping"] = args ? args.allowVipToRportMapping : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["connLimitNoLogging"] = args ? args.connLimitNoLogging : undefined;
            resourceInputs["connLimitReset"] = args ? args.connLimitReset : undefined;
            resourceInputs["connRateLimit"] = args ? args.connRateLimit : undefined;
            resourceInputs["connRateLimitNoLogging"] = args ? args.connRateLimitNoLogging : undefined;
            resourceInputs["connRateLimitReset"] = args ? args.connRateLimitReset : undefined;
            resourceInputs["dropUnknownConn"] = args ? args.dropUnknownConn : undefined;
            resourceInputs["dscp"] = args ? args.dscp : undefined;
            resourceInputs["ignoreTcpMsl"] = args ? args.ignoreTcpMsl : undefined;
            resourceInputs["logOptions"] = args ? args.logOptions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonSynInitiation"] = args ? args.nonSynInitiation : undefined;
            resourceInputs["pktRateInterval"] = args ? args.pktRateInterval : undefined;
            resourceInputs["pktRateLimitReset"] = args ? args.pktRateLimitReset : undefined;
            resourceInputs["pktRateType"] = args ? args.pktRateType : undefined;
            resourceInputs["rate"] = args ? args.rate : undefined;
            resourceInputs["rateInterval"] = args ? args.rateInterval : undefined;
            resourceInputs["resetL7OnFailover"] = args ? args.resetL7OnFailover : undefined;
            resourceInputs["resetUnknownConn"] = args ? args.resetUnknownConn : undefined;
            resourceInputs["snatMsl"] = args ? args.snatMsl : undefined;
            resourceInputs["snatPortPreserve"] = args ? args.snatPortPreserve : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["whenRrEnable"] = args ? args.whenRrEnable : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateVirtualPort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateVirtualPort resources.
 */
export interface SlbTemplateVirtualPortState {
    /**
     * Use aFlow to eliminate the traffic surge
     */
    aflow?: pulumi.Input<number>;
    /**
     * Allow initial SYN packet with other flags
     */
    allowSynOtherflags?: pulumi.Input<number>;
    /**
     * Allow mapping of VIP to real port
     */
    allowVipToRportMapping?: pulumi.Input<number>;
    /**
     * Connection limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection over limit
     */
    connLimitReset?: pulumi.Input<number>;
    /**
     * Connection rate limit
     */
    connRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection rate over limit
     */
    connRateLimitReset?: pulumi.Input<number>;
    /**
     * Drop conection if receives TCP packet without SYN or RST flag and it does not belong to any existing connections
     */
    dropUnknownConn?: pulumi.Input<number>;
    /**
     * Differentiated Services Code Point (DSCP to Real Server IP Mapping Value)
     */
    dscp?: pulumi.Input<number>;
    /**
     * reclaim TCP resource immediately without MSL
     */
    ignoreTcpMsl?: pulumi.Input<number>;
    /**
     * 'no-logging': Do not log over limit event; 'no-repeat-logging': log once for over limit event. Default is log once per
     * minute;
     */
    logOptions?: pulumi.Input<string>;
    /**
     * Virtual port template name
     */
    name?: pulumi.Input<string>;
    /**
     * Allow initial TCP packet to be non-SYN
     */
    nonSynInitiation?: pulumi.Input<number>;
    /**
     * '100ms': Source IP and port rate limit per 100ms; 'second': Source IP and port rate limit per second (default);
     */
    pktRateInterval?: pulumi.Input<string>;
    /**
     * send client-side reset (reset after packet limit)
     */
    pktRateLimitReset?: pulumi.Input<number>;
    /**
     * 'src-ip-port': Source IP and port rate limit; 'src-port': Source port rate limit;
     */
    pktRateType?: pulumi.Input<string>;
    /**
     * Source IP and port rate limit (Packet rate limit)
     */
    rate?: pulumi.Input<number>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Send reset to L7 client and server connection upon a failover
     */
    resetL7OnFailover?: pulumi.Input<number>;
    /**
     * Send reset back if receives TCP packet without SYN or RST flag and it does not belong to any existing connections
     */
    resetUnknownConn?: pulumi.Input<number>;
    /**
     * Source NAT MSL (Source NAT MSL value (seconds))
     */
    snatMsl?: pulumi.Input<number>;
    /**
     * Source NAT Port Preservation
     */
    snatPortPreserve?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Only do rate limit if CPU RR triggered
     */
    whenRrEnable?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbTemplateVirtualPort resource.
 */
export interface SlbTemplateVirtualPortArgs {
    /**
     * Use aFlow to eliminate the traffic surge
     */
    aflow?: pulumi.Input<number>;
    /**
     * Allow initial SYN packet with other flags
     */
    allowSynOtherflags?: pulumi.Input<number>;
    /**
     * Allow mapping of VIP to real port
     */
    allowVipToRportMapping?: pulumi.Input<number>;
    /**
     * Connection limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection over limit
     */
    connLimitReset?: pulumi.Input<number>;
    /**
     * Connection rate limit
     */
    connRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection rate over limit
     */
    connRateLimitReset?: pulumi.Input<number>;
    /**
     * Drop conection if receives TCP packet without SYN or RST flag and it does not belong to any existing connections
     */
    dropUnknownConn?: pulumi.Input<number>;
    /**
     * Differentiated Services Code Point (DSCP to Real Server IP Mapping Value)
     */
    dscp?: pulumi.Input<number>;
    /**
     * reclaim TCP resource immediately without MSL
     */
    ignoreTcpMsl?: pulumi.Input<number>;
    /**
     * 'no-logging': Do not log over limit event; 'no-repeat-logging': log once for over limit event. Default is log once per
     * minute;
     */
    logOptions?: pulumi.Input<string>;
    /**
     * Virtual port template name
     */
    name?: pulumi.Input<string>;
    /**
     * Allow initial TCP packet to be non-SYN
     */
    nonSynInitiation?: pulumi.Input<number>;
    /**
     * '100ms': Source IP and port rate limit per 100ms; 'second': Source IP and port rate limit per second (default);
     */
    pktRateInterval?: pulumi.Input<string>;
    /**
     * send client-side reset (reset after packet limit)
     */
    pktRateLimitReset?: pulumi.Input<number>;
    /**
     * 'src-ip-port': Source IP and port rate limit; 'src-port': Source port rate limit;
     */
    pktRateType?: pulumi.Input<string>;
    /**
     * Source IP and port rate limit (Packet rate limit)
     */
    rate?: pulumi.Input<number>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Send reset to L7 client and server connection upon a failover
     */
    resetL7OnFailover?: pulumi.Input<number>;
    /**
     * Send reset back if receives TCP packet without SYN or RST flag and it does not belong to any existing connections
     */
    resetUnknownConn?: pulumi.Input<number>;
    /**
     * Source NAT MSL (Source NAT MSL value (seconds))
     */
    snatMsl?: pulumi.Input<number>;
    /**
     * Source NAT Port Preservation
     */
    snatPortPreserve?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Only do rate limit if CPU RR triggered
     */
    whenRrEnable?: pulumi.Input<number>;
}
