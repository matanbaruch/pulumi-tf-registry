// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DebugPacket extends pulumi.CustomResource {
    /**
     * Get an existing DebugPacket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugPacketState, opts?: pulumi.CustomResourceOptions): DebugPacket {
        return new DebugPacket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugPacket:DebugPacket';

    /**
     * Returns true if the given object is an instance of DebugPacket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugPacket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugPacket.__pulumiType;
    }

    /**
     * All
     */
    public readonly allIpv4!: pulumi.Output<number | undefined>;
    /**
     * All
     */
    public readonly allIpv6!: pulumi.Output<number | undefined>;
    /**
     * All
     */
    public readonly allSctpPorts!: pulumi.Output<number | undefined>;
    /**
     * All
     */
    public readonly allTcpPorts!: pulumi.Output<number | undefined>;
    /**
     * All
     */
    public readonly allUdpPorts!: pulumi.Output<number | undefined>;
    /**
     * ARP
     */
    public readonly arp!: pulumi.Output<number | undefined>;
    /**
     * Maximum packets to capture. Default is 3000 (Specify maximum packet number. For unlimited, specify 0)
     */
    public readonly count1!: pulumi.Output<number | undefined>;
    /**
     * Print packet content
     */
    public readonly detail!: pulumi.Output<number | undefined>;
    /**
     * Ethernet interface number
     */
    public readonly ethernet!: pulumi.Output<number | undefined>;
    public readonly icmp!: pulumi.Output<number | undefined>;
    public readonly icmpv6!: pulumi.Output<number | undefined>;
    /**
     * Interface to debug
     */
    public readonly interface!: pulumi.Output<number | undefined>;
    /**
     * IP
     */
    public readonly ip!: pulumi.Output<number | undefined>;
    /**
     * IP Address
     */
    public readonly ipv4ad!: pulumi.Output<string | undefined>;
    /**
     * IPV6
     */
    public readonly ipv6!: pulumi.Output<number | undefined>;
    /**
     * IPV6 Address
     */
    public readonly ipv6ad!: pulumi.Output<string | undefined>;
    /**
     * Layer 3 protocol
     */
    public readonly l3Protocol!: pulumi.Output<number | undefined>;
    /**
     * Layer 4 protocol
     */
    public readonly l4Protocol!: pulumi.Output<number | undefined>;
    /**
     * IPv6 Neighbor/Router
     */
    public readonly neighbor!: pulumi.Output<number | undefined>;
    /**
     * Port Number
     */
    public readonly portRange!: pulumi.Output<number | undefined>;
    public readonly sctp!: pulumi.Output<number | undefined>;
    public readonly tcp!: pulumi.Output<number | undefined>;
    /**
     * Print timestamp instead of jiffies
     */
    public readonly timestamp!: pulumi.Output<number | undefined>;
    public readonly udp!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * ve number
     */
    public readonly ve!: pulumi.Output<number | undefined>;

    /**
     * Create a DebugPacket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugPacketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugPacketArgs | DebugPacketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugPacketState | undefined;
            resourceInputs["allIpv4"] = state ? state.allIpv4 : undefined;
            resourceInputs["allIpv6"] = state ? state.allIpv6 : undefined;
            resourceInputs["allSctpPorts"] = state ? state.allSctpPorts : undefined;
            resourceInputs["allTcpPorts"] = state ? state.allTcpPorts : undefined;
            resourceInputs["allUdpPorts"] = state ? state.allUdpPorts : undefined;
            resourceInputs["arp"] = state ? state.arp : undefined;
            resourceInputs["count1"] = state ? state.count1 : undefined;
            resourceInputs["detail"] = state ? state.detail : undefined;
            resourceInputs["ethernet"] = state ? state.ethernet : undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["icmpv6"] = state ? state.icmpv6 : undefined;
            resourceInputs["interface"] = state ? state.interface : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipv4ad"] = state ? state.ipv4ad : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["ipv6ad"] = state ? state.ipv6ad : undefined;
            resourceInputs["l3Protocol"] = state ? state.l3Protocol : undefined;
            resourceInputs["l4Protocol"] = state ? state.l4Protocol : undefined;
            resourceInputs["neighbor"] = state ? state.neighbor : undefined;
            resourceInputs["portRange"] = state ? state.portRange : undefined;
            resourceInputs["sctp"] = state ? state.sctp : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["timestamp"] = state ? state.timestamp : undefined;
            resourceInputs["udp"] = state ? state.udp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["ve"] = state ? state.ve : undefined;
        } else {
            const args = argsOrState as DebugPacketArgs | undefined;
            resourceInputs["allIpv4"] = args ? args.allIpv4 : undefined;
            resourceInputs["allIpv6"] = args ? args.allIpv6 : undefined;
            resourceInputs["allSctpPorts"] = args ? args.allSctpPorts : undefined;
            resourceInputs["allTcpPorts"] = args ? args.allTcpPorts : undefined;
            resourceInputs["allUdpPorts"] = args ? args.allUdpPorts : undefined;
            resourceInputs["arp"] = args ? args.arp : undefined;
            resourceInputs["count1"] = args ? args.count1 : undefined;
            resourceInputs["detail"] = args ? args.detail : undefined;
            resourceInputs["ethernet"] = args ? args.ethernet : undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["icmpv6"] = args ? args.icmpv6 : undefined;
            resourceInputs["interface"] = args ? args.interface : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipv4ad"] = args ? args.ipv4ad : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["ipv6ad"] = args ? args.ipv6ad : undefined;
            resourceInputs["l3Protocol"] = args ? args.l3Protocol : undefined;
            resourceInputs["l4Protocol"] = args ? args.l4Protocol : undefined;
            resourceInputs["neighbor"] = args ? args.neighbor : undefined;
            resourceInputs["portRange"] = args ? args.portRange : undefined;
            resourceInputs["sctp"] = args ? args.sctp : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["timestamp"] = args ? args.timestamp : undefined;
            resourceInputs["udp"] = args ? args.udp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["ve"] = args ? args.ve : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugPacket.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugPacket resources.
 */
export interface DebugPacketState {
    /**
     * All
     */
    allIpv4?: pulumi.Input<number>;
    /**
     * All
     */
    allIpv6?: pulumi.Input<number>;
    /**
     * All
     */
    allSctpPorts?: pulumi.Input<number>;
    /**
     * All
     */
    allTcpPorts?: pulumi.Input<number>;
    /**
     * All
     */
    allUdpPorts?: pulumi.Input<number>;
    /**
     * ARP
     */
    arp?: pulumi.Input<number>;
    /**
     * Maximum packets to capture. Default is 3000 (Specify maximum packet number. For unlimited, specify 0)
     */
    count1?: pulumi.Input<number>;
    /**
     * Print packet content
     */
    detail?: pulumi.Input<number>;
    /**
     * Ethernet interface number
     */
    ethernet?: pulumi.Input<number>;
    icmp?: pulumi.Input<number>;
    icmpv6?: pulumi.Input<number>;
    /**
     * Interface to debug
     */
    interface?: pulumi.Input<number>;
    /**
     * IP
     */
    ip?: pulumi.Input<number>;
    /**
     * IP Address
     */
    ipv4ad?: pulumi.Input<string>;
    /**
     * IPV6
     */
    ipv6?: pulumi.Input<number>;
    /**
     * IPV6 Address
     */
    ipv6ad?: pulumi.Input<string>;
    /**
     * Layer 3 protocol
     */
    l3Protocol?: pulumi.Input<number>;
    /**
     * Layer 4 protocol
     */
    l4Protocol?: pulumi.Input<number>;
    /**
     * IPv6 Neighbor/Router
     */
    neighbor?: pulumi.Input<number>;
    /**
     * Port Number
     */
    portRange?: pulumi.Input<number>;
    sctp?: pulumi.Input<number>;
    tcp?: pulumi.Input<number>;
    /**
     * Print timestamp instead of jiffies
     */
    timestamp?: pulumi.Input<number>;
    udp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ve number
     */
    ve?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DebugPacket resource.
 */
export interface DebugPacketArgs {
    /**
     * All
     */
    allIpv4?: pulumi.Input<number>;
    /**
     * All
     */
    allIpv6?: pulumi.Input<number>;
    /**
     * All
     */
    allSctpPorts?: pulumi.Input<number>;
    /**
     * All
     */
    allTcpPorts?: pulumi.Input<number>;
    /**
     * All
     */
    allUdpPorts?: pulumi.Input<number>;
    /**
     * ARP
     */
    arp?: pulumi.Input<number>;
    /**
     * Maximum packets to capture. Default is 3000 (Specify maximum packet number. For unlimited, specify 0)
     */
    count1?: pulumi.Input<number>;
    /**
     * Print packet content
     */
    detail?: pulumi.Input<number>;
    /**
     * Ethernet interface number
     */
    ethernet?: pulumi.Input<number>;
    icmp?: pulumi.Input<number>;
    icmpv6?: pulumi.Input<number>;
    /**
     * Interface to debug
     */
    interface?: pulumi.Input<number>;
    /**
     * IP
     */
    ip?: pulumi.Input<number>;
    /**
     * IP Address
     */
    ipv4ad?: pulumi.Input<string>;
    /**
     * IPV6
     */
    ipv6?: pulumi.Input<number>;
    /**
     * IPV6 Address
     */
    ipv6ad?: pulumi.Input<string>;
    /**
     * Layer 3 protocol
     */
    l3Protocol?: pulumi.Input<number>;
    /**
     * Layer 4 protocol
     */
    l4Protocol?: pulumi.Input<number>;
    /**
     * IPv6 Neighbor/Router
     */
    neighbor?: pulumi.Input<number>;
    /**
     * Port Number
     */
    portRange?: pulumi.Input<number>;
    sctp?: pulumi.Input<number>;
    tcp?: pulumi.Input<number>;
    /**
     * Print timestamp instead of jiffies
     */
    timestamp?: pulumi.Input<number>;
    udp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ve number
     */
    ve?: pulumi.Input<number>;
}
