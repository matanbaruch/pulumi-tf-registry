// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VrrpAVridBladeParametersTrackingOptions extends pulumi.CustomResource {
    /**
     * Get an existing VrrpAVridBladeParametersTrackingOptions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrrpAVridBladeParametersTrackingOptionsState, opts?: pulumi.CustomResourceOptions): VrrpAVridBladeParametersTrackingOptions {
        return new VrrpAVridBladeParametersTrackingOptions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vrrpAVridBladeParametersTrackingOptions:VrrpAVridBladeParametersTrackingOptions';

    /**
     * Returns true if the given object is an instance of VrrpAVridBladeParametersTrackingOptions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VrrpAVridBladeParametersTrackingOptions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VrrpAVridBladeParametersTrackingOptions.__pulumiType;
    }

    public readonly bgp!: pulumi.Output<outputs.VrrpAVridBladeParametersTrackingOptionsBgp | undefined>;
    public readonly gateway!: pulumi.Output<outputs.VrrpAVridBladeParametersTrackingOptionsGateway | undefined>;
    public readonly interfaces!: pulumi.Output<outputs.VrrpAVridBladeParametersTrackingOptionsInterface[] | undefined>;
    public readonly route!: pulumi.Output<outputs.VrrpAVridBladeParametersTrackingOptionsRoute | undefined>;
    public readonly trunkCfgs!: pulumi.Output<outputs.VrrpAVridBladeParametersTrackingOptionsTrunkCfg[] | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly vlanCfgs!: pulumi.Output<outputs.VrrpAVridBladeParametersTrackingOptionsVlanCfg[] | undefined>;
    /**
     * VridVal
     */
    public readonly vridVal!: pulumi.Output<string>;

    /**
     * Create a VrrpAVridBladeParametersTrackingOptions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VrrpAVridBladeParametersTrackingOptionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrrpAVridBladeParametersTrackingOptionsArgs | VrrpAVridBladeParametersTrackingOptionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrrpAVridBladeParametersTrackingOptionsState | undefined;
            resourceInputs["bgp"] = state ? state.bgp : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["route"] = state ? state.route : undefined;
            resourceInputs["trunkCfgs"] = state ? state.trunkCfgs : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vlanCfgs"] = state ? state.vlanCfgs : undefined;
            resourceInputs["vridVal"] = state ? state.vridVal : undefined;
        } else {
            const args = argsOrState as VrrpAVridBladeParametersTrackingOptionsArgs | undefined;
            if ((!args || args.vridVal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vridVal'");
            }
            resourceInputs["bgp"] = args ? args.bgp : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["route"] = args ? args.route : undefined;
            resourceInputs["trunkCfgs"] = args ? args.trunkCfgs : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vlanCfgs"] = args ? args.vlanCfgs : undefined;
            resourceInputs["vridVal"] = args ? args.vridVal : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VrrpAVridBladeParametersTrackingOptions.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VrrpAVridBladeParametersTrackingOptions resources.
 */
export interface VrrpAVridBladeParametersTrackingOptionsState {
    bgp?: pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsBgp>;
    gateway?: pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsGateway>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsInterface>[]>;
    route?: pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsRoute>;
    trunkCfgs?: pulumi.Input<pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsTrunkCfg>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vlanCfgs?: pulumi.Input<pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsVlanCfg>[]>;
    /**
     * VridVal
     */
    vridVal?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VrrpAVridBladeParametersTrackingOptions resource.
 */
export interface VrrpAVridBladeParametersTrackingOptionsArgs {
    bgp?: pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsBgp>;
    gateway?: pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsGateway>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsInterface>[]>;
    route?: pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsRoute>;
    trunkCfgs?: pulumi.Input<pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsTrunkCfg>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vlanCfgs?: pulumi.Input<pulumi.Input<inputs.VrrpAVridBladeParametersTrackingOptionsVlanCfg>[]>;
    /**
     * VridVal
     */
    vridVal: pulumi.Input<string>;
}
