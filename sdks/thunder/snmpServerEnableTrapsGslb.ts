// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpServerEnableTrapsGslb extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerEnableTrapsGslb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerEnableTrapsGslbState, opts?: pulumi.CustomResourceOptions): SnmpServerEnableTrapsGslb {
        return new SnmpServerEnableTrapsGslb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerEnableTrapsGslb:SnmpServerEnableTrapsGslb';

    /**
     * Returns true if the given object is an instance of SnmpServerEnableTrapsGslb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerEnableTrapsGslb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerEnableTrapsGslb.__pulumiType;
    }

    /**
     * Enable all GSLB traps
     */
    public readonly all!: pulumi.Output<number | undefined>;
    /**
     * Enable GSLB group related traps
     */
    public readonly group!: pulumi.Output<number | undefined>;
    /**
     * Enable GSLB service-ip related traps
     */
    public readonly serviceIp!: pulumi.Output<number | undefined>;
    /**
     * Enable GSLB site related traps
     */
    public readonly site!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Enable GSLB zone related traps
     */
    public readonly zone!: pulumi.Output<number | undefined>;

    /**
     * Create a SnmpServerEnableTrapsGslb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpServerEnableTrapsGslbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerEnableTrapsGslbArgs | SnmpServerEnableTrapsGslbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerEnableTrapsGslbState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["serviceIp"] = state ? state.serviceIp : undefined;
            resourceInputs["site"] = state ? state.site : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as SnmpServerEnableTrapsGslbArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["serviceIp"] = args ? args.serviceIp : undefined;
            resourceInputs["site"] = args ? args.site : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerEnableTrapsGslb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerEnableTrapsGslb resources.
 */
export interface SnmpServerEnableTrapsGslbState {
    /**
     * Enable all GSLB traps
     */
    all?: pulumi.Input<number>;
    /**
     * Enable GSLB group related traps
     */
    group?: pulumi.Input<number>;
    /**
     * Enable GSLB service-ip related traps
     */
    serviceIp?: pulumi.Input<number>;
    /**
     * Enable GSLB site related traps
     */
    site?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable GSLB zone related traps
     */
    zone?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SnmpServerEnableTrapsGslb resource.
 */
export interface SnmpServerEnableTrapsGslbArgs {
    /**
     * Enable all GSLB traps
     */
    all?: pulumi.Input<number>;
    /**
     * Enable GSLB group related traps
     */
    group?: pulumi.Input<number>;
    /**
     * Enable GSLB service-ip related traps
     */
    serviceIp?: pulumi.Input<number>;
    /**
     * Enable GSLB site related traps
     */
    site?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable GSLB zone related traps
     */
    zone?: pulumi.Input<number>;
}
