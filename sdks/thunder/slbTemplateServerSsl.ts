// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateServerSsl extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateServerSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateServerSslState, opts?: pulumi.CustomResourceOptions): SlbTemplateServerSsl {
        return new SlbTemplateServerSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateServerSsl:SlbTemplateServerSsl';

    /**
     * Returns true if the given object is an instance of SlbTemplateServerSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateServerSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateServerSsl.__pulumiType;
    }

    /**
     * 'fatal': Log fatal alerts;
     */
    public readonly alertType!: pulumi.Output<string | undefined>;
    public readonly caCerts!: pulumi.Output<outputs.SlbTemplateServerSslCaCert[] | undefined>;
    public readonly certificate!: pulumi.Output<outputs.SlbTemplateServerSslCertificate | undefined>;
    /**
     * Cipher Template Name
     */
    public readonly cipherTemplate!: pulumi.Output<string | undefined>;
    public readonly cipherWithoutPrioLists!: pulumi.Output<outputs.SlbTemplateServerSslCipherWithoutPrioList[] | undefined>;
    /**
     * Send close notification when terminate connection
     */
    public readonly closeNotify!: pulumi.Output<number | undefined>;
    public readonly crlCerts!: pulumi.Output<outputs.SlbTemplateServerSslCrlCert[] | undefined>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    public readonly dgversion!: pulumi.Output<number | undefined>;
    /**
     * '1024': 1024; '1024-dsa': 1024-dsa; '2048': 2048;
     */
    public readonly dhType!: pulumi.Output<string | undefined>;
    /**
     * Enable TLS 1.3 early data (0-RTT)
     */
    public readonly earlyData!: pulumi.Output<number | undefined>;
    public readonly ecLists!: pulumi.Output<outputs.SlbTemplateServerSslEcList[] | undefined>;
    /**
     * Enable SSLi FTP over TLS support at which port
     */
    public readonly enableSsliFtpAlg!: pulumi.Output<number | undefined>;
    /**
     * Enable TLS alert logging
     */
    public readonly enableTlsAlertLogging!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL forward proxy
     */
    public readonly forwardProxyEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL handshake logging
     */
    public readonly handshakeLoggingEnable!: pulumi.Output<number | undefined>;
    /**
     * Server SSL Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable ocsp-stapling support
     */
    public readonly ocspStapling!: pulumi.Output<number | undefined>;
    /**
     * Disable SSL renegotiation
     */
    public readonly renegotiationDisable!: pulumi.Output<number | undefined>;
    public readonly serverCertificateErrors!: pulumi.Output<outputs.SlbTemplateServerSslServerCertificateError[] | undefined>;
    /**
     * Specify Server Name
     */
    public readonly serverName!: pulumi.Output<string | undefined>;
    /**
     * Session Cache Size (Maximum cache size. Default value 0 (Session ID reuse disabled))
     */
    public readonly sessionCacheSize!: pulumi.Output<number | undefined>;
    /**
     * Session Cache Timeout (Timeout value, in seconds. Default no timeout.)
     */
    public readonly sessionCacheTimeout!: pulumi.Output<number | undefined>;
    /**
     * Enable server side session ticket support
     */
    public readonly sessionTicketEnable!: pulumi.Output<number | undefined>;
    /**
     * Reference a cipher template from shared partition
     */
    public readonly sharedPartitionCipherTemplate!: pulumi.Output<number | undefined>;
    /**
     * SSLi logging level, default is error logging only
     */
    public readonly ssliLogging!: pulumi.Output<number | undefined>;
    /**
     * 'disable': Disable all logging; 'all': enable all logging(error, info);
     */
    public readonly sslilogging!: pulumi.Output<string | undefined>;
    /**
     * Cipher Template Name
     */
    public readonly templateCipherShared!: pulumi.Output<string | undefined>;
    /**
     * use client SNI
     */
    public readonly useClientSni!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * TLS/SSL version, default is the highest number supported (TLS/SSL version: 30-SSLv3.0, 31-TLSv1.0, 32-TLSv1.1,
     * 33-TLSv1.2 and 34-TLSv1.3)
     */
    public readonly version!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbTemplateServerSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateServerSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateServerSslArgs | SlbTemplateServerSslState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateServerSslState | undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["caCerts"] = state ? state.caCerts : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["cipherTemplate"] = state ? state.cipherTemplate : undefined;
            resourceInputs["cipherWithoutPrioLists"] = state ? state.cipherWithoutPrioLists : undefined;
            resourceInputs["closeNotify"] = state ? state.closeNotify : undefined;
            resourceInputs["crlCerts"] = state ? state.crlCerts : undefined;
            resourceInputs["dgversion"] = state ? state.dgversion : undefined;
            resourceInputs["dhType"] = state ? state.dhType : undefined;
            resourceInputs["earlyData"] = state ? state.earlyData : undefined;
            resourceInputs["ecLists"] = state ? state.ecLists : undefined;
            resourceInputs["enableSsliFtpAlg"] = state ? state.enableSsliFtpAlg : undefined;
            resourceInputs["enableTlsAlertLogging"] = state ? state.enableTlsAlertLogging : undefined;
            resourceInputs["forwardProxyEnable"] = state ? state.forwardProxyEnable : undefined;
            resourceInputs["handshakeLoggingEnable"] = state ? state.handshakeLoggingEnable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ocspStapling"] = state ? state.ocspStapling : undefined;
            resourceInputs["renegotiationDisable"] = state ? state.renegotiationDisable : undefined;
            resourceInputs["serverCertificateErrors"] = state ? state.serverCertificateErrors : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["sessionCacheSize"] = state ? state.sessionCacheSize : undefined;
            resourceInputs["sessionCacheTimeout"] = state ? state.sessionCacheTimeout : undefined;
            resourceInputs["sessionTicketEnable"] = state ? state.sessionTicketEnable : undefined;
            resourceInputs["sharedPartitionCipherTemplate"] = state ? state.sharedPartitionCipherTemplate : undefined;
            resourceInputs["ssliLogging"] = state ? state.ssliLogging : undefined;
            resourceInputs["sslilogging"] = state ? state.sslilogging : undefined;
            resourceInputs["templateCipherShared"] = state ? state.templateCipherShared : undefined;
            resourceInputs["useClientSni"] = state ? state.useClientSni : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SlbTemplateServerSslArgs | undefined;
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["caCerts"] = args ? args.caCerts : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["cipherTemplate"] = args ? args.cipherTemplate : undefined;
            resourceInputs["cipherWithoutPrioLists"] = args ? args.cipherWithoutPrioLists : undefined;
            resourceInputs["closeNotify"] = args ? args.closeNotify : undefined;
            resourceInputs["crlCerts"] = args ? args.crlCerts : undefined;
            resourceInputs["dgversion"] = args ? args.dgversion : undefined;
            resourceInputs["dhType"] = args ? args.dhType : undefined;
            resourceInputs["earlyData"] = args ? args.earlyData : undefined;
            resourceInputs["ecLists"] = args ? args.ecLists : undefined;
            resourceInputs["enableSsliFtpAlg"] = args ? args.enableSsliFtpAlg : undefined;
            resourceInputs["enableTlsAlertLogging"] = args ? args.enableTlsAlertLogging : undefined;
            resourceInputs["forwardProxyEnable"] = args ? args.forwardProxyEnable : undefined;
            resourceInputs["handshakeLoggingEnable"] = args ? args.handshakeLoggingEnable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ocspStapling"] = args ? args.ocspStapling : undefined;
            resourceInputs["renegotiationDisable"] = args ? args.renegotiationDisable : undefined;
            resourceInputs["serverCertificateErrors"] = args ? args.serverCertificateErrors : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["sessionCacheSize"] = args ? args.sessionCacheSize : undefined;
            resourceInputs["sessionCacheTimeout"] = args ? args.sessionCacheTimeout : undefined;
            resourceInputs["sessionTicketEnable"] = args ? args.sessionTicketEnable : undefined;
            resourceInputs["sharedPartitionCipherTemplate"] = args ? args.sharedPartitionCipherTemplate : undefined;
            resourceInputs["ssliLogging"] = args ? args.ssliLogging : undefined;
            resourceInputs["sslilogging"] = args ? args.sslilogging : undefined;
            resourceInputs["templateCipherShared"] = args ? args.templateCipherShared : undefined;
            resourceInputs["useClientSni"] = args ? args.useClientSni : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateServerSsl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateServerSsl resources.
 */
export interface SlbTemplateServerSslState {
    /**
     * 'fatal': Log fatal alerts;
     */
    alertType?: pulumi.Input<string>;
    caCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslCaCert>[]>;
    certificate?: pulumi.Input<inputs.SlbTemplateServerSslCertificate>;
    /**
     * Cipher Template Name
     */
    cipherTemplate?: pulumi.Input<string>;
    cipherWithoutPrioLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslCipherWithoutPrioList>[]>;
    /**
     * Send close notification when terminate connection
     */
    closeNotify?: pulumi.Input<number>;
    crlCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslCrlCert>[]>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    dgversion?: pulumi.Input<number>;
    /**
     * '1024': 1024; '1024-dsa': 1024-dsa; '2048': 2048;
     */
    dhType?: pulumi.Input<string>;
    /**
     * Enable TLS 1.3 early data (0-RTT)
     */
    earlyData?: pulumi.Input<number>;
    ecLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslEcList>[]>;
    /**
     * Enable SSLi FTP over TLS support at which port
     */
    enableSsliFtpAlg?: pulumi.Input<number>;
    /**
     * Enable TLS alert logging
     */
    enableTlsAlertLogging?: pulumi.Input<number>;
    /**
     * Enable SSL forward proxy
     */
    forwardProxyEnable?: pulumi.Input<number>;
    /**
     * Enable SSL handshake logging
     */
    handshakeLoggingEnable?: pulumi.Input<number>;
    /**
     * Server SSL Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable ocsp-stapling support
     */
    ocspStapling?: pulumi.Input<number>;
    /**
     * Disable SSL renegotiation
     */
    renegotiationDisable?: pulumi.Input<number>;
    serverCertificateErrors?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslServerCertificateError>[]>;
    /**
     * Specify Server Name
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Cache Size (Maximum cache size. Default value 0 (Session ID reuse disabled))
     */
    sessionCacheSize?: pulumi.Input<number>;
    /**
     * Session Cache Timeout (Timeout value, in seconds. Default no timeout.)
     */
    sessionCacheTimeout?: pulumi.Input<number>;
    /**
     * Enable server side session ticket support
     */
    sessionTicketEnable?: pulumi.Input<number>;
    /**
     * Reference a cipher template from shared partition
     */
    sharedPartitionCipherTemplate?: pulumi.Input<number>;
    /**
     * SSLi logging level, default is error logging only
     */
    ssliLogging?: pulumi.Input<number>;
    /**
     * 'disable': Disable all logging; 'all': enable all logging(error, info);
     */
    sslilogging?: pulumi.Input<string>;
    /**
     * Cipher Template Name
     */
    templateCipherShared?: pulumi.Input<string>;
    /**
     * use client SNI
     */
    useClientSni?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * TLS/SSL version, default is the highest number supported (TLS/SSL version: 30-SSLv3.0, 31-TLSv1.0, 32-TLSv1.1,
     * 33-TLSv1.2 and 34-TLSv1.3)
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbTemplateServerSsl resource.
 */
export interface SlbTemplateServerSslArgs {
    /**
     * 'fatal': Log fatal alerts;
     */
    alertType?: pulumi.Input<string>;
    caCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslCaCert>[]>;
    certificate?: pulumi.Input<inputs.SlbTemplateServerSslCertificate>;
    /**
     * Cipher Template Name
     */
    cipherTemplate?: pulumi.Input<string>;
    cipherWithoutPrioLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslCipherWithoutPrioList>[]>;
    /**
     * Send close notification when terminate connection
     */
    closeNotify?: pulumi.Input<number>;
    crlCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslCrlCert>[]>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    dgversion?: pulumi.Input<number>;
    /**
     * '1024': 1024; '1024-dsa': 1024-dsa; '2048': 2048;
     */
    dhType?: pulumi.Input<string>;
    /**
     * Enable TLS 1.3 early data (0-RTT)
     */
    earlyData?: pulumi.Input<number>;
    ecLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslEcList>[]>;
    /**
     * Enable SSLi FTP over TLS support at which port
     */
    enableSsliFtpAlg?: pulumi.Input<number>;
    /**
     * Enable TLS alert logging
     */
    enableTlsAlertLogging?: pulumi.Input<number>;
    /**
     * Enable SSL forward proxy
     */
    forwardProxyEnable?: pulumi.Input<number>;
    /**
     * Enable SSL handshake logging
     */
    handshakeLoggingEnable?: pulumi.Input<number>;
    /**
     * Server SSL Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable ocsp-stapling support
     */
    ocspStapling?: pulumi.Input<number>;
    /**
     * Disable SSL renegotiation
     */
    renegotiationDisable?: pulumi.Input<number>;
    serverCertificateErrors?: pulumi.Input<pulumi.Input<inputs.SlbTemplateServerSslServerCertificateError>[]>;
    /**
     * Specify Server Name
     */
    serverName?: pulumi.Input<string>;
    /**
     * Session Cache Size (Maximum cache size. Default value 0 (Session ID reuse disabled))
     */
    sessionCacheSize?: pulumi.Input<number>;
    /**
     * Session Cache Timeout (Timeout value, in seconds. Default no timeout.)
     */
    sessionCacheTimeout?: pulumi.Input<number>;
    /**
     * Enable server side session ticket support
     */
    sessionTicketEnable?: pulumi.Input<number>;
    /**
     * Reference a cipher template from shared partition
     */
    sharedPartitionCipherTemplate?: pulumi.Input<number>;
    /**
     * SSLi logging level, default is error logging only
     */
    ssliLogging?: pulumi.Input<number>;
    /**
     * 'disable': Disable all logging; 'all': enable all logging(error, info);
     */
    sslilogging?: pulumi.Input<string>;
    /**
     * Cipher Template Name
     */
    templateCipherShared?: pulumi.Input<string>;
    /**
     * use client SNI
     */
    useClientSni?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * TLS/SSL version, default is the highest number supported (TLS/SSL version: 30-SSLv3.0, 31-TLSv1.0, 32-TLSv1.1,
     * 33-TLSv1.2 and 34-TLSv1.3)
     */
    version?: pulumi.Input<number>;
}
