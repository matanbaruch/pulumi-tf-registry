// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SystemCpuLoadSharing extends pulumi.CustomResource {
    /**
     * Get an existing SystemCpuLoadSharing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemCpuLoadSharingState, opts?: pulumi.CustomResourceOptions): SystemCpuLoadSharing {
        return new SystemCpuLoadSharing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/systemCpuLoadSharing:SystemCpuLoadSharing';

    /**
     * Returns true if the given object is an instance of SystemCpuLoadSharing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemCpuLoadSharing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemCpuLoadSharing.__pulumiType;
    }

    public readonly cpuUsage!: pulumi.Output<outputs.SystemCpuLoadSharingCpuUsage | undefined>;
    /**
     * Disable CPU load sharing in overload situations
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * Disallow redistribution of new non TCP/UDP IP sessions
     */
    public readonly others!: pulumi.Output<number | undefined>;
    public readonly packetsPerSecond!: pulumi.Output<outputs.SystemCpuLoadSharingPacketsPerSecond | undefined>;
    /**
     * Disallow redistribution of new TCP sessions
     */
    public readonly tcp!: pulumi.Output<number | undefined>;
    /**
     * Disallow redistribution of new UDP sessions
     */
    public readonly udp!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SystemCpuLoadSharing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemCpuLoadSharingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemCpuLoadSharingArgs | SystemCpuLoadSharingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemCpuLoadSharingState | undefined;
            resourceInputs["cpuUsage"] = state ? state.cpuUsage : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["others"] = state ? state.others : undefined;
            resourceInputs["packetsPerSecond"] = state ? state.packetsPerSecond : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["udp"] = state ? state.udp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SystemCpuLoadSharingArgs | undefined;
            resourceInputs["cpuUsage"] = args ? args.cpuUsage : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["others"] = args ? args.others : undefined;
            resourceInputs["packetsPerSecond"] = args ? args.packetsPerSecond : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["udp"] = args ? args.udp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemCpuLoadSharing.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemCpuLoadSharing resources.
 */
export interface SystemCpuLoadSharingState {
    cpuUsage?: pulumi.Input<inputs.SystemCpuLoadSharingCpuUsage>;
    /**
     * Disable CPU load sharing in overload situations
     */
    disable?: pulumi.Input<number>;
    /**
     * Disallow redistribution of new non TCP/UDP IP sessions
     */
    others?: pulumi.Input<number>;
    packetsPerSecond?: pulumi.Input<inputs.SystemCpuLoadSharingPacketsPerSecond>;
    /**
     * Disallow redistribution of new TCP sessions
     */
    tcp?: pulumi.Input<number>;
    /**
     * Disallow redistribution of new UDP sessions
     */
    udp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemCpuLoadSharing resource.
 */
export interface SystemCpuLoadSharingArgs {
    cpuUsage?: pulumi.Input<inputs.SystemCpuLoadSharingCpuUsage>;
    /**
     * Disable CPU load sharing in overload situations
     */
    disable?: pulumi.Input<number>;
    /**
     * Disallow redistribution of new non TCP/UDP IP sessions
     */
    others?: pulumi.Input<number>;
    packetsPerSecond?: pulumi.Input<inputs.SystemCpuLoadSharingPacketsPerSecond>;
    /**
     * Disallow redistribution of new TCP sessions
     */
    tcp?: pulumi.Input<number>;
    /**
     * Disallow redistribution of new UDP sessions
     */
    udp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
