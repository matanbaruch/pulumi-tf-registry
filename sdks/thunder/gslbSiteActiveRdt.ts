// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GslbSiteActiveRdt extends pulumi.CustomResource {
    /**
     * Get an existing GslbSiteActiveRdt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbSiteActiveRdtState, opts?: pulumi.CustomResourceOptions): GslbSiteActiveRdt {
        return new GslbSiteActiveRdt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/gslbSiteActiveRdt:GslbSiteActiveRdt';

    /**
     * Returns true if the given object is an instance of GslbSiteActiveRdt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GslbSiteActiveRdt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GslbSiteActiveRdt.__pulumiType;
    }

    /**
     * Aging Time, Unit: min, default is 10
     */
    public readonly agingTime!: pulumi.Output<number | undefined>;
    /**
     * Bind RDT to geo-location
     */
    public readonly bindGeoloc!: pulumi.Output<number | undefined>;
    /**
     * Ignore count if RDT is out of range, default is 5
     */
    public readonly ignoreCount!: pulumi.Output<number | undefined>;
    /**
     * Client IPv6 subnet mask, default is 128
     */
    public readonly ipv6Mask!: pulumi.Output<number | undefined>;
    /**
     * Limit of valid RDT, default is 16383 (Limit, unit: millisecond)
     */
    public readonly limit!: pulumi.Output<number | undefined>;
    /**
     * Client IP subnet mask, default is 32
     */
    public readonly mask!: pulumi.Output<string | undefined>;
    /**
     * Enable overlap for geo-location to do longest match
     */
    public readonly overlap!: pulumi.Output<number | undefined>;
    /**
     * Factor of RDT Range, default is 25 (Range Factor of Smooth RDT)
     */
    public readonly rangeFactor!: pulumi.Output<number | undefined>;
    /**
     * SiteName
     */
    public readonly siteName!: pulumi.Output<string>;
    /**
     * Factor of Smooth RDT, default is 10
     */
    public readonly smoothFactor!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a GslbSiteActiveRdt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbSiteActiveRdtArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbSiteActiveRdtArgs | GslbSiteActiveRdtState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbSiteActiveRdtState | undefined;
            resourceInputs["agingTime"] = state ? state.agingTime : undefined;
            resourceInputs["bindGeoloc"] = state ? state.bindGeoloc : undefined;
            resourceInputs["ignoreCount"] = state ? state.ignoreCount : undefined;
            resourceInputs["ipv6Mask"] = state ? state.ipv6Mask : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["mask"] = state ? state.mask : undefined;
            resourceInputs["overlap"] = state ? state.overlap : undefined;
            resourceInputs["rangeFactor"] = state ? state.rangeFactor : undefined;
            resourceInputs["siteName"] = state ? state.siteName : undefined;
            resourceInputs["smoothFactor"] = state ? state.smoothFactor : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GslbSiteActiveRdtArgs | undefined;
            if ((!args || args.siteName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteName'");
            }
            resourceInputs["agingTime"] = args ? args.agingTime : undefined;
            resourceInputs["bindGeoloc"] = args ? args.bindGeoloc : undefined;
            resourceInputs["ignoreCount"] = args ? args.ignoreCount : undefined;
            resourceInputs["ipv6Mask"] = args ? args.ipv6Mask : undefined;
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["mask"] = args ? args.mask : undefined;
            resourceInputs["overlap"] = args ? args.overlap : undefined;
            resourceInputs["rangeFactor"] = args ? args.rangeFactor : undefined;
            resourceInputs["siteName"] = args ? args.siteName : undefined;
            resourceInputs["smoothFactor"] = args ? args.smoothFactor : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GslbSiteActiveRdt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GslbSiteActiveRdt resources.
 */
export interface GslbSiteActiveRdtState {
    /**
     * Aging Time, Unit: min, default is 10
     */
    agingTime?: pulumi.Input<number>;
    /**
     * Bind RDT to geo-location
     */
    bindGeoloc?: pulumi.Input<number>;
    /**
     * Ignore count if RDT is out of range, default is 5
     */
    ignoreCount?: pulumi.Input<number>;
    /**
     * Client IPv6 subnet mask, default is 128
     */
    ipv6Mask?: pulumi.Input<number>;
    /**
     * Limit of valid RDT, default is 16383 (Limit, unit: millisecond)
     */
    limit?: pulumi.Input<number>;
    /**
     * Client IP subnet mask, default is 32
     */
    mask?: pulumi.Input<string>;
    /**
     * Enable overlap for geo-location to do longest match
     */
    overlap?: pulumi.Input<number>;
    /**
     * Factor of RDT Range, default is 25 (Range Factor of Smooth RDT)
     */
    rangeFactor?: pulumi.Input<number>;
    /**
     * SiteName
     */
    siteName?: pulumi.Input<string>;
    /**
     * Factor of Smooth RDT, default is 10
     */
    smoothFactor?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GslbSiteActiveRdt resource.
 */
export interface GslbSiteActiveRdtArgs {
    /**
     * Aging Time, Unit: min, default is 10
     */
    agingTime?: pulumi.Input<number>;
    /**
     * Bind RDT to geo-location
     */
    bindGeoloc?: pulumi.Input<number>;
    /**
     * Ignore count if RDT is out of range, default is 5
     */
    ignoreCount?: pulumi.Input<number>;
    /**
     * Client IPv6 subnet mask, default is 128
     */
    ipv6Mask?: pulumi.Input<number>;
    /**
     * Limit of valid RDT, default is 16383 (Limit, unit: millisecond)
     */
    limit?: pulumi.Input<number>;
    /**
     * Client IP subnet mask, default is 32
     */
    mask?: pulumi.Input<string>;
    /**
     * Enable overlap for geo-location to do longest match
     */
    overlap?: pulumi.Input<number>;
    /**
     * Factor of RDT Range, default is 25 (Range Factor of Smooth RDT)
     */
    rangeFactor?: pulumi.Input<number>;
    /**
     * SiteName
     */
    siteName: pulumi.Input<string>;
    /**
     * Factor of Smooth RDT, default is 10
     */
    smoothFactor?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
