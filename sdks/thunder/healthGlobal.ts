// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HealthGlobal extends pulumi.CustomResource {
    /**
     * Get an existing HealthGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthGlobalState, opts?: pulumi.CustomResourceOptions): HealthGlobal {
        return new HealthGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthGlobal:HealthGlobal';

    /**
     * Returns true if the given object is an instance of HealthGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthGlobal.__pulumiType;
    }

    /**
     * Health Check Rate per 500ms (default 1000)
     */
    public readonly checkRate!: pulumi.Output<number | undefined>;
    /**
     * Disable the Health Check Rate Auto Adjustment
     */
    public readonly disableAutoAdjust!: pulumi.Output<number | undefined>;
    /**
     * Define the External Health Check Rate (Number of External Script Programs (default 2))
     */
    public readonly externalRate!: pulumi.Output<number | undefined>;
    /**
     * Specify the Healthcheck Interval (Interval Value, in seconds (default 5))
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Start Health Monitoring in Multi-Process Mode (Specify the number of multiple processes (default 1))
     */
    public readonly multiProcess!: pulumi.Output<number | undefined>;
    /**
     * Specify the Unit Time for the rate (Specify the Unit Time, multiple of 100ms)
     */
    public readonly per!: pulumi.Output<number | undefined>;
    /**
     * Specify the Healthcheck Retries (Retry Count (default 3))
     */
    public readonly retry!: pulumi.Output<number | undefined>;
    /**
     * Specify the Healthcheck Timeout (Timeout Value, in seconds (default 5), Timeout should be less than or equal to
     * interval)
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Specify the Healthcheck Retries before declaring target up (Up-retry count (default 1))
     */
    public readonly upRetry!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthGlobalArgs | HealthGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthGlobalState | undefined;
            resourceInputs["checkRate"] = state ? state.checkRate : undefined;
            resourceInputs["disableAutoAdjust"] = state ? state.disableAutoAdjust : undefined;
            resourceInputs["externalRate"] = state ? state.externalRate : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["multiProcess"] = state ? state.multiProcess : undefined;
            resourceInputs["per"] = state ? state.per : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["upRetry"] = state ? state.upRetry : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthGlobalArgs | undefined;
            resourceInputs["checkRate"] = args ? args.checkRate : undefined;
            resourceInputs["disableAutoAdjust"] = args ? args.disableAutoAdjust : undefined;
            resourceInputs["externalRate"] = args ? args.externalRate : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["multiProcess"] = args ? args.multiProcess : undefined;
            resourceInputs["per"] = args ? args.per : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["upRetry"] = args ? args.upRetry : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthGlobal resources.
 */
export interface HealthGlobalState {
    /**
     * Health Check Rate per 500ms (default 1000)
     */
    checkRate?: pulumi.Input<number>;
    /**
     * Disable the Health Check Rate Auto Adjustment
     */
    disableAutoAdjust?: pulumi.Input<number>;
    /**
     * Define the External Health Check Rate (Number of External Script Programs (default 2))
     */
    externalRate?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Interval (Interval Value, in seconds (default 5))
     */
    interval?: pulumi.Input<number>;
    /**
     * Start Health Monitoring in Multi-Process Mode (Specify the number of multiple processes (default 1))
     */
    multiProcess?: pulumi.Input<number>;
    /**
     * Specify the Unit Time for the rate (Specify the Unit Time, multiple of 100ms)
     */
    per?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Retries (Retry Count (default 3))
     */
    retry?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Timeout (Timeout Value, in seconds (default 5), Timeout should be less than or equal to
     * interval)
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Retries before declaring target up (Up-retry count (default 1))
     */
    upRetry?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthGlobal resource.
 */
export interface HealthGlobalArgs {
    /**
     * Health Check Rate per 500ms (default 1000)
     */
    checkRate?: pulumi.Input<number>;
    /**
     * Disable the Health Check Rate Auto Adjustment
     */
    disableAutoAdjust?: pulumi.Input<number>;
    /**
     * Define the External Health Check Rate (Number of External Script Programs (default 2))
     */
    externalRate?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Interval (Interval Value, in seconds (default 5))
     */
    interval?: pulumi.Input<number>;
    /**
     * Start Health Monitoring in Multi-Process Mode (Specify the number of multiple processes (default 1))
     */
    multiProcess?: pulumi.Input<number>;
    /**
     * Specify the Unit Time for the rate (Specify the Unit Time, multiple of 100ms)
     */
    per?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Retries (Retry Count (default 3))
     */
    retry?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Timeout (Timeout Value, in seconds (default 5), Timeout should be less than or equal to
     * interval)
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Retries before declaring target up (Up-retry count (default 1))
     */
    upRetry?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
