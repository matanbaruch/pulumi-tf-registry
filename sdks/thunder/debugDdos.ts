// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DebugDdos extends pulumi.CustomResource {
    /**
     * Get an existing DebugDdos resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugDdosState, opts?: pulumi.CustomResourceOptions): DebugDdos {
        return new DebugDdos(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugDdos:DebugDdos';

    /**
     * Returns true if the given object is an instance of DebugDdos.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugDdos {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugDdos.__pulumiType;
    }

    /**
     * Debug DDOS Control Var
     */
    public readonly controlVar!: pulumi.Output<number | undefined>;
    /**
     * Debug DDOS DNS Cache
     */
    public readonly dnsCache!: pulumi.Output<number | undefined>;
    /**
     * Debug DDOS event
     */
    public readonly event!: pulumi.Output<number | undefined>;
    /**
     * Set debug DDOS event filter
     */
    public readonly eventFilter!: pulumi.Output<string | undefined>;
    /**
     * Debug flow samples based DDOS detection
     */
    public readonly flowBasedDetection!: pulumi.Output<number | undefined>;
    /**
     * Debug level (Level 1-4)
     */
    public readonly level!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Debug DDOS zbar event
     */
    public readonly zbar!: pulumi.Output<number | undefined>;

    /**
     * Create a DebugDdos resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugDdosArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugDdosArgs | DebugDdosState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugDdosState | undefined;
            resourceInputs["controlVar"] = state ? state.controlVar : undefined;
            resourceInputs["dnsCache"] = state ? state.dnsCache : undefined;
            resourceInputs["event"] = state ? state.event : undefined;
            resourceInputs["eventFilter"] = state ? state.eventFilter : undefined;
            resourceInputs["flowBasedDetection"] = state ? state.flowBasedDetection : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zbar"] = state ? state.zbar : undefined;
        } else {
            const args = argsOrState as DebugDdosArgs | undefined;
            resourceInputs["controlVar"] = args ? args.controlVar : undefined;
            resourceInputs["dnsCache"] = args ? args.dnsCache : undefined;
            resourceInputs["event"] = args ? args.event : undefined;
            resourceInputs["eventFilter"] = args ? args.eventFilter : undefined;
            resourceInputs["flowBasedDetection"] = args ? args.flowBasedDetection : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zbar"] = args ? args.zbar : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugDdos.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugDdos resources.
 */
export interface DebugDdosState {
    /**
     * Debug DDOS Control Var
     */
    controlVar?: pulumi.Input<number>;
    /**
     * Debug DDOS DNS Cache
     */
    dnsCache?: pulumi.Input<number>;
    /**
     * Debug DDOS event
     */
    event?: pulumi.Input<number>;
    /**
     * Set debug DDOS event filter
     */
    eventFilter?: pulumi.Input<string>;
    /**
     * Debug flow samples based DDOS detection
     */
    flowBasedDetection?: pulumi.Input<number>;
    /**
     * Debug level (Level 1-4)
     */
    level?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Debug DDOS zbar event
     */
    zbar?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DebugDdos resource.
 */
export interface DebugDdosArgs {
    /**
     * Debug DDOS Control Var
     */
    controlVar?: pulumi.Input<number>;
    /**
     * Debug DDOS DNS Cache
     */
    dnsCache?: pulumi.Input<number>;
    /**
     * Debug DDOS event
     */
    event?: pulumi.Input<number>;
    /**
     * Set debug DDOS event filter
     */
    eventFilter?: pulumi.Input<string>;
    /**
     * Debug flow samples based DDOS detection
     */
    flowBasedDetection?: pulumi.Input<number>;
    /**
     * Debug level (Level 1-4)
     */
    level?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Debug DDOS zbar event
     */
    zbar?: pulumi.Input<number>;
}
