// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AamAuthorizationPolicyJwtClaimMap extends pulumi.CustomResource {
    /**
     * Get an existing AamAuthorizationPolicyJwtClaimMap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAuthorizationPolicyJwtClaimMapState, opts?: pulumi.CustomResourceOptions): AamAuthorizationPolicyJwtClaimMap {
        return new AamAuthorizationPolicyJwtClaimMap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAuthorizationPolicyJwtClaimMap:AamAuthorizationPolicyJwtClaimMap';

    /**
     * Returns true if the given object is an instance of AamAuthorizationPolicyJwtClaimMap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAuthorizationPolicyJwtClaimMap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAuthorizationPolicyJwtClaimMap.__pulumiType;
    }

    /**
     * Spcify attribute ID for claim mapping
     */
    public readonly attrNum!: pulumi.Output<number>;
    /**
     * 'true': True; 'false': False;
     */
    public readonly boolVal!: pulumi.Output<string | undefined>;
    /**
     * Claim type is boolean
     */
    public readonly booleanType!: pulumi.Output<number | undefined>;
    /**
     * Specify JWT claim name to map to.
     */
    public readonly claim!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify JWT claim value.
     */
    public readonly numVal!: pulumi.Output<number | undefined>;
    /**
     * Claim type is number
     */
    public readonly numberType!: pulumi.Output<number | undefined>;
    /**
     * Specify JWT claim value.
     */
    public readonly strVal!: pulumi.Output<string | undefined>;
    /**
     * Claim type is string
     */
    public readonly stringType!: pulumi.Output<number | undefined>;
    /**
     * Specify claim type
     */
    public readonly type!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AamAuthorizationPolicyJwtClaimMap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AamAuthorizationPolicyJwtClaimMapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAuthorizationPolicyJwtClaimMapArgs | AamAuthorizationPolicyJwtClaimMapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAuthorizationPolicyJwtClaimMapState | undefined;
            resourceInputs["attrNum"] = state ? state.attrNum : undefined;
            resourceInputs["boolVal"] = state ? state.boolVal : undefined;
            resourceInputs["booleanType"] = state ? state.booleanType : undefined;
            resourceInputs["claim"] = state ? state.claim : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numVal"] = state ? state.numVal : undefined;
            resourceInputs["numberType"] = state ? state.numberType : undefined;
            resourceInputs["strVal"] = state ? state.strVal : undefined;
            resourceInputs["stringType"] = state ? state.stringType : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AamAuthorizationPolicyJwtClaimMapArgs | undefined;
            if ((!args || args.attrNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attrNum'");
            }
            resourceInputs["attrNum"] = args ? args.attrNum : undefined;
            resourceInputs["boolVal"] = args ? args.boolVal : undefined;
            resourceInputs["booleanType"] = args ? args.booleanType : undefined;
            resourceInputs["claim"] = args ? args.claim : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numVal"] = args ? args.numVal : undefined;
            resourceInputs["numberType"] = args ? args.numberType : undefined;
            resourceInputs["strVal"] = args ? args.strVal : undefined;
            resourceInputs["stringType"] = args ? args.stringType : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAuthorizationPolicyJwtClaimMap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAuthorizationPolicyJwtClaimMap resources.
 */
export interface AamAuthorizationPolicyJwtClaimMapState {
    /**
     * Spcify attribute ID for claim mapping
     */
    attrNum?: pulumi.Input<number>;
    /**
     * 'true': True; 'false': False;
     */
    boolVal?: pulumi.Input<string>;
    /**
     * Claim type is boolean
     */
    booleanType?: pulumi.Input<number>;
    /**
     * Specify JWT claim name to map to.
     */
    claim?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify JWT claim value.
     */
    numVal?: pulumi.Input<number>;
    /**
     * Claim type is number
     */
    numberType?: pulumi.Input<number>;
    /**
     * Specify JWT claim value.
     */
    strVal?: pulumi.Input<string>;
    /**
     * Claim type is string
     */
    stringType?: pulumi.Input<number>;
    /**
     * Specify claim type
     */
    type?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAuthorizationPolicyJwtClaimMap resource.
 */
export interface AamAuthorizationPolicyJwtClaimMapArgs {
    /**
     * Spcify attribute ID for claim mapping
     */
    attrNum: pulumi.Input<number>;
    /**
     * 'true': True; 'false': False;
     */
    boolVal?: pulumi.Input<string>;
    /**
     * Claim type is boolean
     */
    booleanType?: pulumi.Input<number>;
    /**
     * Specify JWT claim name to map to.
     */
    claim?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify JWT claim value.
     */
    numVal?: pulumi.Input<number>;
    /**
     * Claim type is number
     */
    numberType?: pulumi.Input<number>;
    /**
     * Specify JWT claim value.
     */
    strVal?: pulumi.Input<string>;
    /**
     * Claim type is string
     */
    stringType?: pulumi.Input<number>;
    /**
     * Specify claim type
     */
    type?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
