// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DdosTemplateHttpFilterHeader extends pulumi.CustomResource {
    /**
     * Get an existing DdosTemplateHttpFilterHeader resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosTemplateHttpFilterHeaderState, opts?: pulumi.CustomResourceOptions): DdosTemplateHttpFilterHeader {
        return new DdosTemplateHttpFilterHeader(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosTemplateHttpFilterHeader:DdosTemplateHttpFilterHeader';

    /**
     * Returns true if the given object is an instance of DdosTemplateHttpFilterHeader.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosTemplateHttpFilterHeader {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosTemplateHttpFilterHeader.__pulumiType;
    }

    /**
     * Also blacklist the source when action is taken
     */
    public readonly httpFilterHeaderBlacklist!: pulumi.Output<number | undefined>;
    /**
     * Take no action and continue processing the next filter
     */
    public readonly httpFilterHeaderCountOnly!: pulumi.Output<number | undefined>;
    /**
     * Regex Expression
     */
    public readonly httpFilterHeaderRegex!: pulumi.Output<string | undefined>;
    /**
     * Sequence number
     */
    public readonly httpFilterHeaderSeq!: pulumi.Output<number>;
    /**
     * action taken when it does not match
     */
    public readonly httpFilterHeaderUnmatched!: pulumi.Output<number | undefined>;
    /**
     * Whitelist the source after filter passes, packets are dropped until then
     */
    public readonly httpFilterHeaderWhitelist!: pulumi.Output<number | undefined>;
    /**
     * HttpTmplName
     */
    public readonly httpTmplName!: pulumi.Output<string>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosTemplateHttpFilterHeader resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosTemplateHttpFilterHeaderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosTemplateHttpFilterHeaderArgs | DdosTemplateHttpFilterHeaderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosTemplateHttpFilterHeaderState | undefined;
            resourceInputs["httpFilterHeaderBlacklist"] = state ? state.httpFilterHeaderBlacklist : undefined;
            resourceInputs["httpFilterHeaderCountOnly"] = state ? state.httpFilterHeaderCountOnly : undefined;
            resourceInputs["httpFilterHeaderRegex"] = state ? state.httpFilterHeaderRegex : undefined;
            resourceInputs["httpFilterHeaderSeq"] = state ? state.httpFilterHeaderSeq : undefined;
            resourceInputs["httpFilterHeaderUnmatched"] = state ? state.httpFilterHeaderUnmatched : undefined;
            resourceInputs["httpFilterHeaderWhitelist"] = state ? state.httpFilterHeaderWhitelist : undefined;
            resourceInputs["httpTmplName"] = state ? state.httpTmplName : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosTemplateHttpFilterHeaderArgs | undefined;
            if ((!args || args.httpFilterHeaderSeq === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpFilterHeaderSeq'");
            }
            if ((!args || args.httpTmplName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpTmplName'");
            }
            resourceInputs["httpFilterHeaderBlacklist"] = args ? args.httpFilterHeaderBlacklist : undefined;
            resourceInputs["httpFilterHeaderCountOnly"] = args ? args.httpFilterHeaderCountOnly : undefined;
            resourceInputs["httpFilterHeaderRegex"] = args ? args.httpFilterHeaderRegex : undefined;
            resourceInputs["httpFilterHeaderSeq"] = args ? args.httpFilterHeaderSeq : undefined;
            resourceInputs["httpFilterHeaderUnmatched"] = args ? args.httpFilterHeaderUnmatched : undefined;
            resourceInputs["httpFilterHeaderWhitelist"] = args ? args.httpFilterHeaderWhitelist : undefined;
            resourceInputs["httpTmplName"] = args ? args.httpTmplName : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosTemplateHttpFilterHeader.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosTemplateHttpFilterHeader resources.
 */
export interface DdosTemplateHttpFilterHeaderState {
    /**
     * Also blacklist the source when action is taken
     */
    httpFilterHeaderBlacklist?: pulumi.Input<number>;
    /**
     * Take no action and continue processing the next filter
     */
    httpFilterHeaderCountOnly?: pulumi.Input<number>;
    /**
     * Regex Expression
     */
    httpFilterHeaderRegex?: pulumi.Input<string>;
    /**
     * Sequence number
     */
    httpFilterHeaderSeq?: pulumi.Input<number>;
    /**
     * action taken when it does not match
     */
    httpFilterHeaderUnmatched?: pulumi.Input<number>;
    /**
     * Whitelist the source after filter passes, packets are dropped until then
     */
    httpFilterHeaderWhitelist?: pulumi.Input<number>;
    /**
     * HttpTmplName
     */
    httpTmplName?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosTemplateHttpFilterHeader resource.
 */
export interface DdosTemplateHttpFilterHeaderArgs {
    /**
     * Also blacklist the source when action is taken
     */
    httpFilterHeaderBlacklist?: pulumi.Input<number>;
    /**
     * Take no action and continue processing the next filter
     */
    httpFilterHeaderCountOnly?: pulumi.Input<number>;
    /**
     * Regex Expression
     */
    httpFilterHeaderRegex?: pulumi.Input<string>;
    /**
     * Sequence number
     */
    httpFilterHeaderSeq: pulumi.Input<number>;
    /**
     * action taken when it does not match
     */
    httpFilterHeaderUnmatched?: pulumi.Input<number>;
    /**
     * Whitelist the source after filter passes, packets are dropped until then
     */
    httpFilterHeaderWhitelist?: pulumi.Input<number>;
    /**
     * HttpTmplName
     */
    httpTmplName: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
