// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpServerEnableTrapsSlbChange extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerEnableTrapsSlbChange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerEnableTrapsSlbChangeState, opts?: pulumi.CustomResourceOptions): SnmpServerEnableTrapsSlbChange {
        return new SnmpServerEnableTrapsSlbChange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerEnableTrapsSlbChange:SnmpServerEnableTrapsSlbChange';

    /**
     * Returns true if the given object is an instance of SnmpServerEnableTrapsSlbChange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerEnableTrapsSlbChange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerEnableTrapsSlbChange.__pulumiType;
    }

    /**
     * Enable all system group traps
     */
    public readonly all!: pulumi.Output<number | undefined>;
    /**
     * Enable system connection resource event trap
     */
    public readonly connectionResourceEvent!: pulumi.Output<number | undefined>;
    /**
     * Enable partition resource usage warning trap
     */
    public readonly resourceUsageWarning!: pulumi.Output<number | undefined>;
    /**
     * Enable slb server create/delete trap
     */
    public readonly server!: pulumi.Output<number | undefined>;
    /**
     * Enable slb server port create/delete trap
     */
    public readonly serverPort!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL certificate change trap
     */
    public readonly sslCertChange!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL certificate expiring trap
     */
    public readonly sslCertExpire!: pulumi.Output<number | undefined>;
    /**
     * Enable slb system threshold trap
     */
    public readonly systemThreshold!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Enable slb vip create/delete trap
     */
    public readonly vip!: pulumi.Output<number | undefined>;
    /**
     * Enable slb vip-port create/delete trap
     */
    public readonly vipPort!: pulumi.Output<number | undefined>;

    /**
     * Create a SnmpServerEnableTrapsSlbChange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpServerEnableTrapsSlbChangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerEnableTrapsSlbChangeArgs | SnmpServerEnableTrapsSlbChangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerEnableTrapsSlbChangeState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["connectionResourceEvent"] = state ? state.connectionResourceEvent : undefined;
            resourceInputs["resourceUsageWarning"] = state ? state.resourceUsageWarning : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serverPort"] = state ? state.serverPort : undefined;
            resourceInputs["sslCertChange"] = state ? state.sslCertChange : undefined;
            resourceInputs["sslCertExpire"] = state ? state.sslCertExpire : undefined;
            resourceInputs["systemThreshold"] = state ? state.systemThreshold : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vip"] = state ? state.vip : undefined;
            resourceInputs["vipPort"] = state ? state.vipPort : undefined;
        } else {
            const args = argsOrState as SnmpServerEnableTrapsSlbChangeArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["connectionResourceEvent"] = args ? args.connectionResourceEvent : undefined;
            resourceInputs["resourceUsageWarning"] = args ? args.resourceUsageWarning : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serverPort"] = args ? args.serverPort : undefined;
            resourceInputs["sslCertChange"] = args ? args.sslCertChange : undefined;
            resourceInputs["sslCertExpire"] = args ? args.sslCertExpire : undefined;
            resourceInputs["systemThreshold"] = args ? args.systemThreshold : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vip"] = args ? args.vip : undefined;
            resourceInputs["vipPort"] = args ? args.vipPort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerEnableTrapsSlbChange.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerEnableTrapsSlbChange resources.
 */
export interface SnmpServerEnableTrapsSlbChangeState {
    /**
     * Enable all system group traps
     */
    all?: pulumi.Input<number>;
    /**
     * Enable system connection resource event trap
     */
    connectionResourceEvent?: pulumi.Input<number>;
    /**
     * Enable partition resource usage warning trap
     */
    resourceUsageWarning?: pulumi.Input<number>;
    /**
     * Enable slb server create/delete trap
     */
    server?: pulumi.Input<number>;
    /**
     * Enable slb server port create/delete trap
     */
    serverPort?: pulumi.Input<number>;
    /**
     * Enable SSL certificate change trap
     */
    sslCertChange?: pulumi.Input<number>;
    /**
     * Enable SSL certificate expiring trap
     */
    sslCertExpire?: pulumi.Input<number>;
    /**
     * Enable slb system threshold trap
     */
    systemThreshold?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable slb vip create/delete trap
     */
    vip?: pulumi.Input<number>;
    /**
     * Enable slb vip-port create/delete trap
     */
    vipPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SnmpServerEnableTrapsSlbChange resource.
 */
export interface SnmpServerEnableTrapsSlbChangeArgs {
    /**
     * Enable all system group traps
     */
    all?: pulumi.Input<number>;
    /**
     * Enable system connection resource event trap
     */
    connectionResourceEvent?: pulumi.Input<number>;
    /**
     * Enable partition resource usage warning trap
     */
    resourceUsageWarning?: pulumi.Input<number>;
    /**
     * Enable slb server create/delete trap
     */
    server?: pulumi.Input<number>;
    /**
     * Enable slb server port create/delete trap
     */
    serverPort?: pulumi.Input<number>;
    /**
     * Enable SSL certificate change trap
     */
    sslCertChange?: pulumi.Input<number>;
    /**
     * Enable SSL certificate expiring trap
     */
    sslCertExpire?: pulumi.Input<number>;
    /**
     * Enable slb system threshold trap
     */
    systemThreshold?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable slb vip create/delete trap
     */
    vip?: pulumi.Input<number>;
    /**
     * Enable slb vip-port create/delete trap
     */
    vipPort?: pulumi.Input<number>;
}
