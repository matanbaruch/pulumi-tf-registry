// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpNatPool extends pulumi.CustomResource {
    /**
     * Get an existing IpNatPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpNatPoolState, opts?: pulumi.CustomResourceOptions): IpNatPool {
        return new IpNatPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ipNatPool:IpNatPool';

    /**
     * Returns true if the given object is an instance of IpNatPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpNatPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpNatPool.__pulumiType;
    }

    /**
     * Share NAT pool chunk across CPUs
     */
    public readonly chunkSharing!: pulumi.Output<number | undefined>;
    /**
     * Configure end IP address of NAT pool
     */
    public readonly endAddress!: pulumi.Output<string | undefined>;
    /**
     * Ethernet interface
     */
    public readonly ethernet!: pulumi.Output<number | undefined>;
    /**
     * Configure gateway IP
     */
    public readonly gateway!: pulumi.Output<string | undefined>;
    /**
     * Use IP address round-robin behavior
     */
    public readonly ipRr!: pulumi.Output<number | undefined>;
    /**
     * Configure mask for pool
     */
    public readonly netmask!: pulumi.Output<string | undefined>;
    /**
     * Specify pool name or pool group
     */
    public readonly poolName!: pulumi.Output<string>;
    /**
     * Nat Pool Port overload
     */
    public readonly portOverload!: pulumi.Output<number | undefined>;
    /**
     * Configure Scaleout device id to which this NAT pool is to be bound (Specify Scaleout device id)
     */
    public readonly scaleoutDeviceId!: pulumi.Output<number | undefined>;
    /**
     * Configure start IP address of NAT pool
     */
    public readonly startAddress!: pulumi.Output<string | undefined>;
    /**
     * Use Interface IP
     */
    public readonly useIfIp!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Configure VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    public readonly vrid!: pulumi.Output<number | undefined>;

    /**
     * Create a IpNatPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpNatPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpNatPoolArgs | IpNatPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpNatPoolState | undefined;
            resourceInputs["chunkSharing"] = state ? state.chunkSharing : undefined;
            resourceInputs["endAddress"] = state ? state.endAddress : undefined;
            resourceInputs["ethernet"] = state ? state.ethernet : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ipRr"] = state ? state.ipRr : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["poolName"] = state ? state.poolName : undefined;
            resourceInputs["portOverload"] = state ? state.portOverload : undefined;
            resourceInputs["scaleoutDeviceId"] = state ? state.scaleoutDeviceId : undefined;
            resourceInputs["startAddress"] = state ? state.startAddress : undefined;
            resourceInputs["useIfIp"] = state ? state.useIfIp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as IpNatPoolArgs | undefined;
            if ((!args || args.poolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            resourceInputs["chunkSharing"] = args ? args.chunkSharing : undefined;
            resourceInputs["endAddress"] = args ? args.endAddress : undefined;
            resourceInputs["ethernet"] = args ? args.ethernet : undefined;
            resourceInputs["gateway"] = args ? args.gateway : undefined;
            resourceInputs["ipRr"] = args ? args.ipRr : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["poolName"] = args ? args.poolName : undefined;
            resourceInputs["portOverload"] = args ? args.portOverload : undefined;
            resourceInputs["scaleoutDeviceId"] = args ? args.scaleoutDeviceId : undefined;
            resourceInputs["startAddress"] = args ? args.startAddress : undefined;
            resourceInputs["useIfIp"] = args ? args.useIfIp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpNatPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpNatPool resources.
 */
export interface IpNatPoolState {
    /**
     * Share NAT pool chunk across CPUs
     */
    chunkSharing?: pulumi.Input<number>;
    /**
     * Configure end IP address of NAT pool
     */
    endAddress?: pulumi.Input<string>;
    /**
     * Ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * Configure gateway IP
     */
    gateway?: pulumi.Input<string>;
    /**
     * Use IP address round-robin behavior
     */
    ipRr?: pulumi.Input<number>;
    /**
     * Configure mask for pool
     */
    netmask?: pulumi.Input<string>;
    /**
     * Specify pool name or pool group
     */
    poolName?: pulumi.Input<string>;
    /**
     * Nat Pool Port overload
     */
    portOverload?: pulumi.Input<number>;
    /**
     * Configure Scaleout device id to which this NAT pool is to be bound (Specify Scaleout device id)
     */
    scaleoutDeviceId?: pulumi.Input<number>;
    /**
     * Configure start IP address of NAT pool
     */
    startAddress?: pulumi.Input<string>;
    /**
     * Use Interface IP
     */
    useIfIp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IpNatPool resource.
 */
export interface IpNatPoolArgs {
    /**
     * Share NAT pool chunk across CPUs
     */
    chunkSharing?: pulumi.Input<number>;
    /**
     * Configure end IP address of NAT pool
     */
    endAddress?: pulumi.Input<string>;
    /**
     * Ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * Configure gateway IP
     */
    gateway?: pulumi.Input<string>;
    /**
     * Use IP address round-robin behavior
     */
    ipRr?: pulumi.Input<number>;
    /**
     * Configure mask for pool
     */
    netmask?: pulumi.Input<string>;
    /**
     * Specify pool name or pool group
     */
    poolName: pulumi.Input<string>;
    /**
     * Nat Pool Port overload
     */
    portOverload?: pulumi.Input<number>;
    /**
     * Configure Scaleout device id to which this NAT pool is to be bound (Specify Scaleout device id)
     */
    scaleoutDeviceId?: pulumi.Input<number>;
    /**
     * Configure start IP address of NAT pool
     */
    startAddress?: pulumi.Input<string>;
    /**
     * Use Interface IP
     */
    useIfIp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}
