// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbTemplateDohForwarder extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateDohForwarder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateDohForwarderState, opts?: pulumi.CustomResourceOptions): SlbTemplateDohForwarder {
        return new SlbTemplateDohForwarder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateDohForwarder:SlbTemplateDohForwarder';

    /**
     * Returns true if the given object is an instance of SlbTemplateDohForwarder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateDohForwarder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateDohForwarder.__pulumiType;
    }

    /**
     * Forward valid DoH HTTP request as is, no DNS packet extraction (Bypass DoH)
     */
    public readonly bypassDoh!: pulumi.Output<number | undefined>;
    /**
     * SLB VIP IPv4 address to forward DOH query (IP address)
     */
    public readonly forwardingIpv4!: pulumi.Output<string | undefined>;
    /**
     * SLB VIP IPv6 address to forward DOH query (IP address)
     */
    public readonly forwardingIpv6!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Bind a TCP Service Group to the template (Service Group Name)
     */
    public readonly tcpServiceGroup!: pulumi.Output<string | undefined>;
    /**
     * Bind a UDP Service Group to the template (Service Group Name)
     */
    public readonly udpServiceGroup!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Try to find this IP as a VIP in this L3v Partition and forward it internally to the VIP
     */
    public readonly v4Internal!: pulumi.Output<number | undefined>;
    /**
     * 'tcp': Use TCP only when forwarding DNS traffic; 'udp': Use UDP only when forwarding DNS traffic; 'both': Use UDP 1st
     * and if unreachable, retry with TCP when forwarding DNS traffic;
     */
    public readonly v4L4Proto!: pulumi.Output<string | undefined>;
    /**
     * Forwarding port number, Default is 53
     */
    public readonly v4Port!: pulumi.Output<number | undefined>;
    /**
     * Try to find this IP as a VIP in this L3v Partition and forward it internally to the VIP
     */
    public readonly v6Internal!: pulumi.Output<number | undefined>;
    /**
     * 'tcp': Use TCP only when forwarding DNS traffic; 'udp': Use UDP only when forwarding DNS traffic; 'both': Use UDP 1st
     * and if unreachable, retry with TCP when forwarding DNS traffic;
     */
    public readonly v6L4Proto!: pulumi.Output<string | undefined>;
    /**
     * Forwarding port number, Default is 53
     */
    public readonly v6Port!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbTemplateDohForwarder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateDohForwarderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateDohForwarderArgs | SlbTemplateDohForwarderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateDohForwarderState | undefined;
            resourceInputs["bypassDoh"] = state ? state.bypassDoh : undefined;
            resourceInputs["forwardingIpv4"] = state ? state.forwardingIpv4 : undefined;
            resourceInputs["forwardingIpv6"] = state ? state.forwardingIpv6 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tcpServiceGroup"] = state ? state.tcpServiceGroup : undefined;
            resourceInputs["udpServiceGroup"] = state ? state.udpServiceGroup : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["v4Internal"] = state ? state.v4Internal : undefined;
            resourceInputs["v4L4Proto"] = state ? state.v4L4Proto : undefined;
            resourceInputs["v4Port"] = state ? state.v4Port : undefined;
            resourceInputs["v6Internal"] = state ? state.v6Internal : undefined;
            resourceInputs["v6L4Proto"] = state ? state.v6L4Proto : undefined;
            resourceInputs["v6Port"] = state ? state.v6Port : undefined;
        } else {
            const args = argsOrState as SlbTemplateDohForwarderArgs | undefined;
            resourceInputs["bypassDoh"] = args ? args.bypassDoh : undefined;
            resourceInputs["forwardingIpv4"] = args ? args.forwardingIpv4 : undefined;
            resourceInputs["forwardingIpv6"] = args ? args.forwardingIpv6 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tcpServiceGroup"] = args ? args.tcpServiceGroup : undefined;
            resourceInputs["udpServiceGroup"] = args ? args.udpServiceGroup : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["v4Internal"] = args ? args.v4Internal : undefined;
            resourceInputs["v4L4Proto"] = args ? args.v4L4Proto : undefined;
            resourceInputs["v4Port"] = args ? args.v4Port : undefined;
            resourceInputs["v6Internal"] = args ? args.v6Internal : undefined;
            resourceInputs["v6L4Proto"] = args ? args.v6L4Proto : undefined;
            resourceInputs["v6Port"] = args ? args.v6Port : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateDohForwarder.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateDohForwarder resources.
 */
export interface SlbTemplateDohForwarderState {
    /**
     * Forward valid DoH HTTP request as is, no DNS packet extraction (Bypass DoH)
     */
    bypassDoh?: pulumi.Input<number>;
    /**
     * SLB VIP IPv4 address to forward DOH query (IP address)
     */
    forwardingIpv4?: pulumi.Input<string>;
    /**
     * SLB VIP IPv6 address to forward DOH query (IP address)
     */
    forwardingIpv6?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Bind a TCP Service Group to the template (Service Group Name)
     */
    tcpServiceGroup?: pulumi.Input<string>;
    /**
     * Bind a UDP Service Group to the template (Service Group Name)
     */
    udpServiceGroup?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Try to find this IP as a VIP in this L3v Partition and forward it internally to the VIP
     */
    v4Internal?: pulumi.Input<number>;
    /**
     * 'tcp': Use TCP only when forwarding DNS traffic; 'udp': Use UDP only when forwarding DNS traffic; 'both': Use UDP 1st
     * and if unreachable, retry with TCP when forwarding DNS traffic;
     */
    v4L4Proto?: pulumi.Input<string>;
    /**
     * Forwarding port number, Default is 53
     */
    v4Port?: pulumi.Input<number>;
    /**
     * Try to find this IP as a VIP in this L3v Partition and forward it internally to the VIP
     */
    v6Internal?: pulumi.Input<number>;
    /**
     * 'tcp': Use TCP only when forwarding DNS traffic; 'udp': Use UDP only when forwarding DNS traffic; 'both': Use UDP 1st
     * and if unreachable, retry with TCP when forwarding DNS traffic;
     */
    v6L4Proto?: pulumi.Input<string>;
    /**
     * Forwarding port number, Default is 53
     */
    v6Port?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbTemplateDohForwarder resource.
 */
export interface SlbTemplateDohForwarderArgs {
    /**
     * Forward valid DoH HTTP request as is, no DNS packet extraction (Bypass DoH)
     */
    bypassDoh?: pulumi.Input<number>;
    /**
     * SLB VIP IPv4 address to forward DOH query (IP address)
     */
    forwardingIpv4?: pulumi.Input<string>;
    /**
     * SLB VIP IPv6 address to forward DOH query (IP address)
     */
    forwardingIpv6?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Bind a TCP Service Group to the template (Service Group Name)
     */
    tcpServiceGroup?: pulumi.Input<string>;
    /**
     * Bind a UDP Service Group to the template (Service Group Name)
     */
    udpServiceGroup?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Try to find this IP as a VIP in this L3v Partition and forward it internally to the VIP
     */
    v4Internal?: pulumi.Input<number>;
    /**
     * 'tcp': Use TCP only when forwarding DNS traffic; 'udp': Use UDP only when forwarding DNS traffic; 'both': Use UDP 1st
     * and if unreachable, retry with TCP when forwarding DNS traffic;
     */
    v4L4Proto?: pulumi.Input<string>;
    /**
     * Forwarding port number, Default is 53
     */
    v4Port?: pulumi.Input<number>;
    /**
     * Try to find this IP as a VIP in this L3v Partition and forward it internally to the VIP
     */
    v6Internal?: pulumi.Input<number>;
    /**
     * 'tcp': Use TCP only when forwarding DNS traffic; 'udp': Use UDP only when forwarding DNS traffic; 'both': Use UDP 1st
     * and if unreachable, retry with TCP when forwarding DNS traffic;
     */
    v6L4Proto?: pulumi.Input<string>;
    /**
     * Forwarding port number, Default is 53
     */
    v6Port?: pulumi.Input<number>;
}
