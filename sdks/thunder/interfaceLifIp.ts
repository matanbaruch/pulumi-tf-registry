// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceLifIp extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceLifIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceLifIpState, opts?: pulumi.CustomResourceOptions): InterfaceLifIp {
        return new InterfaceLifIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/interfaceLifIp:InterfaceLifIp';

    /**
     * Returns true if the given object is an instance of InterfaceLifIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceLifIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceLifIp.__pulumiType;
    }

    public readonly addressLists!: pulumi.Output<outputs.InterfaceLifIpAddressList[] | undefined>;
    /**
     * Allow traffic to be associated with promiscuous VIP
     */
    public readonly allowPromiscuousVip!: pulumi.Output<number | undefined>;
    /**
     * This interface connects to spoofing cache
     */
    public readonly cacheSpoofingPort!: pulumi.Output<number | undefined>;
    /**
     * Use DHCP to configure IP address
     */
    public readonly dhcp!: pulumi.Output<number | undefined>;
    /**
     * Enable Membership Query
     */
    public readonly generateMembershipQuery!: pulumi.Output<number | undefined>;
    /**
     * Ifname
     */
    public readonly ifname!: pulumi.Output<string>;
    /**
     * Configure interface as inside
     */
    public readonly inside!: pulumi.Output<number | undefined>;
    /**
     * Maximum Response Time (Max Response Time (Default is 100))
     */
    public readonly maxRespTime!: pulumi.Output<number | undefined>;
    public readonly ospf!: pulumi.Output<outputs.InterfaceLifIpOspf | undefined>;
    /**
     * Configure interface as outside
     */
    public readonly outside!: pulumi.Output<number | undefined>;
    /**
     * 1 - 255 (Default is 125)
     */
    public readonly queryInterval!: pulumi.Output<number | undefined>;
    public readonly rip!: pulumi.Output<outputs.InterfaceLifIpRip | undefined>;
    public readonly router!: pulumi.Output<outputs.InterfaceLifIpRouter | undefined>;
    /**
     * Set the interface as unnumbered
     */
    public readonly unnumbered!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a InterfaceLifIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceLifIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceLifIpArgs | InterfaceLifIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceLifIpState | undefined;
            resourceInputs["addressLists"] = state ? state.addressLists : undefined;
            resourceInputs["allowPromiscuousVip"] = state ? state.allowPromiscuousVip : undefined;
            resourceInputs["cacheSpoofingPort"] = state ? state.cacheSpoofingPort : undefined;
            resourceInputs["dhcp"] = state ? state.dhcp : undefined;
            resourceInputs["generateMembershipQuery"] = state ? state.generateMembershipQuery : undefined;
            resourceInputs["ifname"] = state ? state.ifname : undefined;
            resourceInputs["inside"] = state ? state.inside : undefined;
            resourceInputs["maxRespTime"] = state ? state.maxRespTime : undefined;
            resourceInputs["ospf"] = state ? state.ospf : undefined;
            resourceInputs["outside"] = state ? state.outside : undefined;
            resourceInputs["queryInterval"] = state ? state.queryInterval : undefined;
            resourceInputs["rip"] = state ? state.rip : undefined;
            resourceInputs["router"] = state ? state.router : undefined;
            resourceInputs["unnumbered"] = state ? state.unnumbered : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as InterfaceLifIpArgs | undefined;
            if ((!args || args.ifname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifname'");
            }
            resourceInputs["addressLists"] = args ? args.addressLists : undefined;
            resourceInputs["allowPromiscuousVip"] = args ? args.allowPromiscuousVip : undefined;
            resourceInputs["cacheSpoofingPort"] = args ? args.cacheSpoofingPort : undefined;
            resourceInputs["dhcp"] = args ? args.dhcp : undefined;
            resourceInputs["generateMembershipQuery"] = args ? args.generateMembershipQuery : undefined;
            resourceInputs["ifname"] = args ? args.ifname : undefined;
            resourceInputs["inside"] = args ? args.inside : undefined;
            resourceInputs["maxRespTime"] = args ? args.maxRespTime : undefined;
            resourceInputs["ospf"] = args ? args.ospf : undefined;
            resourceInputs["outside"] = args ? args.outside : undefined;
            resourceInputs["queryInterval"] = args ? args.queryInterval : undefined;
            resourceInputs["rip"] = args ? args.rip : undefined;
            resourceInputs["router"] = args ? args.router : undefined;
            resourceInputs["unnumbered"] = args ? args.unnumbered : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceLifIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceLifIp resources.
 */
export interface InterfaceLifIpState {
    addressLists?: pulumi.Input<pulumi.Input<inputs.InterfaceLifIpAddressList>[]>;
    /**
     * Allow traffic to be associated with promiscuous VIP
     */
    allowPromiscuousVip?: pulumi.Input<number>;
    /**
     * This interface connects to spoofing cache
     */
    cacheSpoofingPort?: pulumi.Input<number>;
    /**
     * Use DHCP to configure IP address
     */
    dhcp?: pulumi.Input<number>;
    /**
     * Enable Membership Query
     */
    generateMembershipQuery?: pulumi.Input<number>;
    /**
     * Ifname
     */
    ifname?: pulumi.Input<string>;
    /**
     * Configure interface as inside
     */
    inside?: pulumi.Input<number>;
    /**
     * Maximum Response Time (Max Response Time (Default is 100))
     */
    maxRespTime?: pulumi.Input<number>;
    ospf?: pulumi.Input<inputs.InterfaceLifIpOspf>;
    /**
     * Configure interface as outside
     */
    outside?: pulumi.Input<number>;
    /**
     * 1 - 255 (Default is 125)
     */
    queryInterval?: pulumi.Input<number>;
    rip?: pulumi.Input<inputs.InterfaceLifIpRip>;
    router?: pulumi.Input<inputs.InterfaceLifIpRouter>;
    /**
     * Set the interface as unnumbered
     */
    unnumbered?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceLifIp resource.
 */
export interface InterfaceLifIpArgs {
    addressLists?: pulumi.Input<pulumi.Input<inputs.InterfaceLifIpAddressList>[]>;
    /**
     * Allow traffic to be associated with promiscuous VIP
     */
    allowPromiscuousVip?: pulumi.Input<number>;
    /**
     * This interface connects to spoofing cache
     */
    cacheSpoofingPort?: pulumi.Input<number>;
    /**
     * Use DHCP to configure IP address
     */
    dhcp?: pulumi.Input<number>;
    /**
     * Enable Membership Query
     */
    generateMembershipQuery?: pulumi.Input<number>;
    /**
     * Ifname
     */
    ifname: pulumi.Input<string>;
    /**
     * Configure interface as inside
     */
    inside?: pulumi.Input<number>;
    /**
     * Maximum Response Time (Max Response Time (Default is 100))
     */
    maxRespTime?: pulumi.Input<number>;
    ospf?: pulumi.Input<inputs.InterfaceLifIpOspf>;
    /**
     * Configure interface as outside
     */
    outside?: pulumi.Input<number>;
    /**
     * 1 - 255 (Default is 125)
     */
    queryInterval?: pulumi.Input<number>;
    rip?: pulumi.Input<inputs.InterfaceLifIpRip>;
    router?: pulumi.Input<inputs.InterfaceLifIpRouter>;
    /**
     * Set the interface as unnumbered
     */
    unnumbered?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
