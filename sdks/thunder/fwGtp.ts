// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FwGtp extends pulumi.CustomResource {
    /**
     * Get an existing FwGtp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FwGtpState, opts?: pulumi.CustomResourceOptions): FwGtp {
        return new FwGtp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/fwGtp:FwGtp';

    /**
     * Returns true if the given object is an instance of FwGtp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FwGtp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FwGtp.__pulumiType;
    }

    /**
     * Periodic Logging Frequency(In Minutes)
     */
    public readonly apnLogPeriodicity!: pulumi.Output<number | undefined>;
    public readonly apnPrefix!: pulumi.Output<outputs.FwGtpApnPrefix | undefined>;
    /**
     * Class List (Class List Name)
     */
    public readonly apnPrefixList!: pulumi.Output<string | undefined>;
    /**
     * echo message timeout (minutes) (echo-timeout (default 120))
     */
    public readonly echoTimeout!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable GTP Inspection;
     */
    public readonly gtpValue!: pulumi.Output<string | undefined>;
    /**
     * 'monitor': Enable inline view-only mode; 'skip-state-checks': Enable skip stateful checks mode;
     */
    public readonly insertionMode!: pulumi.Output<string | undefined>;
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    public readonly neV4LogPeriodicity!: pulumi.Output<number | undefined>;
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    public readonly neV6LogPeriodicity!: pulumi.Output<number | undefined>;
    public readonly networkElement!: pulumi.Output<outputs.FwGtpNetworkElement | undefined>;
    /**
     * Class List (Class List Name)
     */
    public readonly networkElementListV4!: pulumi.Output<string | undefined>;
    /**
     * Class List (Class List Name)
     */
    public readonly networkElementListV6!: pulumi.Output<string | undefined>;
    /**
     * 'enable-log': Enable Log for Path Management;
     */
    public readonly pathMgmtLogging!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.FwGtpSamplingEnable[] | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FwGtp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FwGtpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FwGtpArgs | FwGtpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FwGtpState | undefined;
            resourceInputs["apnLogPeriodicity"] = state ? state.apnLogPeriodicity : undefined;
            resourceInputs["apnPrefix"] = state ? state.apnPrefix : undefined;
            resourceInputs["apnPrefixList"] = state ? state.apnPrefixList : undefined;
            resourceInputs["echoTimeout"] = state ? state.echoTimeout : undefined;
            resourceInputs["gtpValue"] = state ? state.gtpValue : undefined;
            resourceInputs["insertionMode"] = state ? state.insertionMode : undefined;
            resourceInputs["neV4LogPeriodicity"] = state ? state.neV4LogPeriodicity : undefined;
            resourceInputs["neV6LogPeriodicity"] = state ? state.neV6LogPeriodicity : undefined;
            resourceInputs["networkElement"] = state ? state.networkElement : undefined;
            resourceInputs["networkElementListV4"] = state ? state.networkElementListV4 : undefined;
            resourceInputs["networkElementListV6"] = state ? state.networkElementListV6 : undefined;
            resourceInputs["pathMgmtLogging"] = state ? state.pathMgmtLogging : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FwGtpArgs | undefined;
            resourceInputs["apnLogPeriodicity"] = args ? args.apnLogPeriodicity : undefined;
            resourceInputs["apnPrefix"] = args ? args.apnPrefix : undefined;
            resourceInputs["apnPrefixList"] = args ? args.apnPrefixList : undefined;
            resourceInputs["echoTimeout"] = args ? args.echoTimeout : undefined;
            resourceInputs["gtpValue"] = args ? args.gtpValue : undefined;
            resourceInputs["insertionMode"] = args ? args.insertionMode : undefined;
            resourceInputs["neV4LogPeriodicity"] = args ? args.neV4LogPeriodicity : undefined;
            resourceInputs["neV6LogPeriodicity"] = args ? args.neV6LogPeriodicity : undefined;
            resourceInputs["networkElement"] = args ? args.networkElement : undefined;
            resourceInputs["networkElementListV4"] = args ? args.networkElementListV4 : undefined;
            resourceInputs["networkElementListV6"] = args ? args.networkElementListV6 : undefined;
            resourceInputs["pathMgmtLogging"] = args ? args.pathMgmtLogging : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FwGtp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FwGtp resources.
 */
export interface FwGtpState {
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    apnLogPeriodicity?: pulumi.Input<number>;
    apnPrefix?: pulumi.Input<inputs.FwGtpApnPrefix>;
    /**
     * Class List (Class List Name)
     */
    apnPrefixList?: pulumi.Input<string>;
    /**
     * echo message timeout (minutes) (echo-timeout (default 120))
     */
    echoTimeout?: pulumi.Input<number>;
    /**
     * 'enable': Enable GTP Inspection;
     */
    gtpValue?: pulumi.Input<string>;
    /**
     * 'monitor': Enable inline view-only mode; 'skip-state-checks': Enable skip stateful checks mode;
     */
    insertionMode?: pulumi.Input<string>;
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    neV4LogPeriodicity?: pulumi.Input<number>;
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    neV6LogPeriodicity?: pulumi.Input<number>;
    networkElement?: pulumi.Input<inputs.FwGtpNetworkElement>;
    /**
     * Class List (Class List Name)
     */
    networkElementListV4?: pulumi.Input<string>;
    /**
     * Class List (Class List Name)
     */
    networkElementListV6?: pulumi.Input<string>;
    /**
     * 'enable-log': Enable Log for Path Management;
     */
    pathMgmtLogging?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.FwGtpSamplingEnable>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FwGtp resource.
 */
export interface FwGtpArgs {
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    apnLogPeriodicity?: pulumi.Input<number>;
    apnPrefix?: pulumi.Input<inputs.FwGtpApnPrefix>;
    /**
     * Class List (Class List Name)
     */
    apnPrefixList?: pulumi.Input<string>;
    /**
     * echo message timeout (minutes) (echo-timeout (default 120))
     */
    echoTimeout?: pulumi.Input<number>;
    /**
     * 'enable': Enable GTP Inspection;
     */
    gtpValue?: pulumi.Input<string>;
    /**
     * 'monitor': Enable inline view-only mode; 'skip-state-checks': Enable skip stateful checks mode;
     */
    insertionMode?: pulumi.Input<string>;
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    neV4LogPeriodicity?: pulumi.Input<number>;
    /**
     * Periodic Logging Frequency(In Minutes)
     */
    neV6LogPeriodicity?: pulumi.Input<number>;
    networkElement?: pulumi.Input<inputs.FwGtpNetworkElement>;
    /**
     * Class List (Class List Name)
     */
    networkElementListV4?: pulumi.Input<string>;
    /**
     * Class List (Class List Name)
     */
    networkElementListV6?: pulumi.Input<string>;
    /**
     * 'enable-log': Enable Log for Path Management;
     */
    pathMgmtLogging?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.FwGtpSamplingEnable>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
