// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FwAlg extends pulumi.CustomResource {
    /**
     * Get an existing FwAlg resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FwAlgState, opts?: pulumi.CustomResourceOptions): FwAlg {
        return new FwAlg(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/fwAlg:FwAlg';

    /**
     * Returns true if the given object is an instance of FwAlg.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FwAlg {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FwAlg.__pulumiType;
    }

    public readonly dns!: pulumi.Output<outputs.FwAlgDns | undefined>;
    public readonly esp!: pulumi.Output<outputs.FwAlgEsp | undefined>;
    public readonly ftp!: pulumi.Output<outputs.FwAlgFtp | undefined>;
    public readonly icmp!: pulumi.Output<outputs.FwAlgIcmp | undefined>;
    public readonly pptp!: pulumi.Output<outputs.FwAlgPptp | undefined>;
    public readonly rtsp!: pulumi.Output<outputs.FwAlgRtsp | undefined>;
    public readonly sip!: pulumi.Output<outputs.FwAlgSip | undefined>;
    public readonly tftp!: pulumi.Output<outputs.FwAlgTftp | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FwAlg resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FwAlgArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FwAlgArgs | FwAlgState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FwAlgState | undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["esp"] = state ? state.esp : undefined;
            resourceInputs["ftp"] = state ? state.ftp : undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["pptp"] = state ? state.pptp : undefined;
            resourceInputs["rtsp"] = state ? state.rtsp : undefined;
            resourceInputs["sip"] = state ? state.sip : undefined;
            resourceInputs["tftp"] = state ? state.tftp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FwAlgArgs | undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["esp"] = args ? args.esp : undefined;
            resourceInputs["ftp"] = args ? args.ftp : undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["pptp"] = args ? args.pptp : undefined;
            resourceInputs["rtsp"] = args ? args.rtsp : undefined;
            resourceInputs["sip"] = args ? args.sip : undefined;
            resourceInputs["tftp"] = args ? args.tftp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FwAlg.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FwAlg resources.
 */
export interface FwAlgState {
    dns?: pulumi.Input<inputs.FwAlgDns>;
    esp?: pulumi.Input<inputs.FwAlgEsp>;
    ftp?: pulumi.Input<inputs.FwAlgFtp>;
    icmp?: pulumi.Input<inputs.FwAlgIcmp>;
    pptp?: pulumi.Input<inputs.FwAlgPptp>;
    rtsp?: pulumi.Input<inputs.FwAlgRtsp>;
    sip?: pulumi.Input<inputs.FwAlgSip>;
    tftp?: pulumi.Input<inputs.FwAlgTftp>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FwAlg resource.
 */
export interface FwAlgArgs {
    dns?: pulumi.Input<inputs.FwAlgDns>;
    esp?: pulumi.Input<inputs.FwAlgEsp>;
    ftp?: pulumi.Input<inputs.FwAlgFtp>;
    icmp?: pulumi.Input<inputs.FwAlgIcmp>;
    pptp?: pulumi.Input<inputs.FwAlgPptp>;
    rtsp?: pulumi.Input<inputs.FwAlgRtsp>;
    sip?: pulumi.Input<inputs.FwAlgSip>;
    tftp?: pulumi.Input<inputs.FwAlgTftp>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
