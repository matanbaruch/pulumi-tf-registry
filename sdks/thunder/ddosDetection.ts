// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDetection extends pulumi.CustomResource {
    /**
     * Get an existing DdosDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDetectionState, opts?: pulumi.CustomResourceOptions): DdosDetection {
        return new DdosDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDetection:DdosDetection';

    /**
     * Returns true if the given object is an instance of DdosDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDetection.__pulumiType;
    }

    public readonly agentLists!: pulumi.Output<outputs.DdosDetectionAgentList[] | undefined>;
    public readonly ddosScript!: pulumi.Output<outputs.DdosDetectionDdosScript | undefined>;
    /**
     * Disable DDoS detection (default: enabled)
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    public readonly resourceUsage!: pulumi.Output<outputs.DdosDetectionResourceUsage | undefined>;
    public readonly settings!: pulumi.Output<outputs.DdosDetectionSettings | undefined>;
    public readonly statistics!: pulumi.Output<outputs.DdosDetectionStatistics | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDetectionArgs | DdosDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDetectionState | undefined;
            resourceInputs["agentLists"] = state ? state.agentLists : undefined;
            resourceInputs["ddosScript"] = state ? state.ddosScript : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["resourceUsage"] = state ? state.resourceUsage : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["statistics"] = state ? state.statistics : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosDetectionArgs | undefined;
            resourceInputs["agentLists"] = args ? args.agentLists : undefined;
            resourceInputs["ddosScript"] = args ? args.ddosScript : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["resourceUsage"] = args ? args.resourceUsage : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["statistics"] = args ? args.statistics : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDetection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDetection resources.
 */
export interface DdosDetectionState {
    agentLists?: pulumi.Input<pulumi.Input<inputs.DdosDetectionAgentList>[]>;
    ddosScript?: pulumi.Input<inputs.DdosDetectionDdosScript>;
    /**
     * Disable DDoS detection (default: enabled)
     */
    disable?: pulumi.Input<number>;
    resourceUsage?: pulumi.Input<inputs.DdosDetectionResourceUsage>;
    settings?: pulumi.Input<inputs.DdosDetectionSettings>;
    statistics?: pulumi.Input<inputs.DdosDetectionStatistics>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDetection resource.
 */
export interface DdosDetectionArgs {
    agentLists?: pulumi.Input<pulumi.Input<inputs.DdosDetectionAgentList>[]>;
    ddosScript?: pulumi.Input<inputs.DdosDetectionDdosScript>;
    /**
     * Disable DDoS detection (default: enabled)
     */
    disable?: pulumi.Input<number>;
    resourceUsage?: pulumi.Input<inputs.DdosDetectionResourceUsage>;
    settings?: pulumi.Input<inputs.DdosDetectionSettings>;
    statistics?: pulumi.Input<inputs.DdosDetectionStatistics>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
