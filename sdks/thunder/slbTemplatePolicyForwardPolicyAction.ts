// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplatePolicyForwardPolicyAction extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplatePolicyForwardPolicyAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplatePolicyForwardPolicyActionState, opts?: pulumi.CustomResourceOptions): SlbTemplatePolicyForwardPolicyAction {
        return new SlbTemplatePolicyForwardPolicyAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplatePolicyForwardPolicyAction:SlbTemplatePolicyForwardPolicyAction';

    /**
     * Returns true if the given object is an instance of SlbTemplatePolicyForwardPolicyAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplatePolicyForwardPolicyAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplatePolicyForwardPolicyAction.__pulumiType;
    }

    /**
     * 'forward-to-internet': Forward request to Internet; 'forward-to-service-group': Forward request to service group;
     * 'forward-to-proxy': Forward request to HTTP proxy server; 'drop': Drop request;
     */
    public readonly action1!: pulumi.Output<string | undefined>;
    /**
     * drop-message sent to the client as webpage(html tags are included and quotation marks are required for white spaces)
     */
    public readonly dropMessage!: pulumi.Output<string | undefined>;
    /**
     * Specify URL to which client request is redirected upon being dropped
     */
    public readonly dropRedirectUrl!: pulumi.Output<string | undefined>;
    /**
     * Specify response code for drop action
     */
    public readonly dropResponseCode!: pulumi.Output<number | undefined>;
    /**
     * service group to forward the packets to Internet
     */
    public readonly fakeSg!: pulumi.Output<string | undefined>;
    /**
     * Fallback service group for Internet
     */
    public readonly fallBack!: pulumi.Output<string | undefined>;
    /**
     * Source NAT pool or pool group for fallback server
     */
    public readonly fallBackSnat!: pulumi.Output<string | undefined>;
    /**
     * Source port translation only for fallback server
     */
    public readonly fallBackSnatPtOnly!: pulumi.Output<number | undefined>;
    /**
     * Source NAT pool or pool group
     */
    public readonly forwardSnat!: pulumi.Output<string | undefined>;
    /**
     * Source port translation only
     */
    public readonly forwardSnatPtOnly!: pulumi.Output<number | undefined>;
    /**
     * '301': Moved permanently; '302': Found;
     */
    public readonly httpStatusCode!: pulumi.Output<string | undefined>;
    /**
     * enable logging
     */
    public readonly log!: pulumi.Output<number | undefined>;
    /**
     * Action policy name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable proxy chaining feature
     */
    public readonly proxyChaining!: pulumi.Output<number | undefined>;
    /**
     * Forward all https packets to upstream proxy
     */
    public readonly proxyChainingBypass!: pulumi.Output<number | undefined>;
    /**
     * service group to forward the packets
     */
    public readonly realSg!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.SlbTemplatePolicyForwardPolicyActionSamplingEnable[] | undefined>;
    /**
     * Fetch server certificate by upstream proxy
     */
    public readonly supportCertFetch!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplatePolicyForwardPolicyAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplatePolicyForwardPolicyActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplatePolicyForwardPolicyActionArgs | SlbTemplatePolicyForwardPolicyActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplatePolicyForwardPolicyActionState | undefined;
            resourceInputs["action1"] = state ? state.action1 : undefined;
            resourceInputs["dropMessage"] = state ? state.dropMessage : undefined;
            resourceInputs["dropRedirectUrl"] = state ? state.dropRedirectUrl : undefined;
            resourceInputs["dropResponseCode"] = state ? state.dropResponseCode : undefined;
            resourceInputs["fakeSg"] = state ? state.fakeSg : undefined;
            resourceInputs["fallBack"] = state ? state.fallBack : undefined;
            resourceInputs["fallBackSnat"] = state ? state.fallBackSnat : undefined;
            resourceInputs["fallBackSnatPtOnly"] = state ? state.fallBackSnatPtOnly : undefined;
            resourceInputs["forwardSnat"] = state ? state.forwardSnat : undefined;
            resourceInputs["forwardSnatPtOnly"] = state ? state.forwardSnatPtOnly : undefined;
            resourceInputs["httpStatusCode"] = state ? state.httpStatusCode : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyChaining"] = state ? state.proxyChaining : undefined;
            resourceInputs["proxyChainingBypass"] = state ? state.proxyChainingBypass : undefined;
            resourceInputs["realSg"] = state ? state.realSg : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["supportCertFetch"] = state ? state.supportCertFetch : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplatePolicyForwardPolicyActionArgs | undefined;
            resourceInputs["action1"] = args ? args.action1 : undefined;
            resourceInputs["dropMessage"] = args ? args.dropMessage : undefined;
            resourceInputs["dropRedirectUrl"] = args ? args.dropRedirectUrl : undefined;
            resourceInputs["dropResponseCode"] = args ? args.dropResponseCode : undefined;
            resourceInputs["fakeSg"] = args ? args.fakeSg : undefined;
            resourceInputs["fallBack"] = args ? args.fallBack : undefined;
            resourceInputs["fallBackSnat"] = args ? args.fallBackSnat : undefined;
            resourceInputs["fallBackSnatPtOnly"] = args ? args.fallBackSnatPtOnly : undefined;
            resourceInputs["forwardSnat"] = args ? args.forwardSnat : undefined;
            resourceInputs["forwardSnatPtOnly"] = args ? args.forwardSnatPtOnly : undefined;
            resourceInputs["httpStatusCode"] = args ? args.httpStatusCode : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyChaining"] = args ? args.proxyChaining : undefined;
            resourceInputs["proxyChainingBypass"] = args ? args.proxyChainingBypass : undefined;
            resourceInputs["realSg"] = args ? args.realSg : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["supportCertFetch"] = args ? args.supportCertFetch : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplatePolicyForwardPolicyAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplatePolicyForwardPolicyAction resources.
 */
export interface SlbTemplatePolicyForwardPolicyActionState {
    /**
     * 'forward-to-internet': Forward request to Internet; 'forward-to-service-group': Forward request to service group;
     * 'forward-to-proxy': Forward request to HTTP proxy server; 'drop': Drop request;
     */
    action1?: pulumi.Input<string>;
    /**
     * drop-message sent to the client as webpage(html tags are included and quotation marks are required for white spaces)
     */
    dropMessage?: pulumi.Input<string>;
    /**
     * Specify URL to which client request is redirected upon being dropped
     */
    dropRedirectUrl?: pulumi.Input<string>;
    /**
     * Specify response code for drop action
     */
    dropResponseCode?: pulumi.Input<number>;
    /**
     * service group to forward the packets to Internet
     */
    fakeSg?: pulumi.Input<string>;
    /**
     * Fallback service group for Internet
     */
    fallBack?: pulumi.Input<string>;
    /**
     * Source NAT pool or pool group for fallback server
     */
    fallBackSnat?: pulumi.Input<string>;
    /**
     * Source port translation only for fallback server
     */
    fallBackSnatPtOnly?: pulumi.Input<number>;
    /**
     * Source NAT pool or pool group
     */
    forwardSnat?: pulumi.Input<string>;
    /**
     * Source port translation only
     */
    forwardSnatPtOnly?: pulumi.Input<number>;
    /**
     * '301': Moved permanently; '302': Found;
     */
    httpStatusCode?: pulumi.Input<string>;
    /**
     * enable logging
     */
    log?: pulumi.Input<number>;
    /**
     * Action policy name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable proxy chaining feature
     */
    proxyChaining?: pulumi.Input<number>;
    /**
     * Forward all https packets to upstream proxy
     */
    proxyChainingBypass?: pulumi.Input<number>;
    /**
     * service group to forward the packets
     */
    realSg?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyActionSamplingEnable>[]>;
    /**
     * Fetch server certificate by upstream proxy
     */
    supportCertFetch?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplatePolicyForwardPolicyAction resource.
 */
export interface SlbTemplatePolicyForwardPolicyActionArgs {
    /**
     * 'forward-to-internet': Forward request to Internet; 'forward-to-service-group': Forward request to service group;
     * 'forward-to-proxy': Forward request to HTTP proxy server; 'drop': Drop request;
     */
    action1?: pulumi.Input<string>;
    /**
     * drop-message sent to the client as webpage(html tags are included and quotation marks are required for white spaces)
     */
    dropMessage?: pulumi.Input<string>;
    /**
     * Specify URL to which client request is redirected upon being dropped
     */
    dropRedirectUrl?: pulumi.Input<string>;
    /**
     * Specify response code for drop action
     */
    dropResponseCode?: pulumi.Input<number>;
    /**
     * service group to forward the packets to Internet
     */
    fakeSg?: pulumi.Input<string>;
    /**
     * Fallback service group for Internet
     */
    fallBack?: pulumi.Input<string>;
    /**
     * Source NAT pool or pool group for fallback server
     */
    fallBackSnat?: pulumi.Input<string>;
    /**
     * Source port translation only for fallback server
     */
    fallBackSnatPtOnly?: pulumi.Input<number>;
    /**
     * Source NAT pool or pool group
     */
    forwardSnat?: pulumi.Input<string>;
    /**
     * Source port translation only
     */
    forwardSnatPtOnly?: pulumi.Input<number>;
    /**
     * '301': Moved permanently; '302': Found;
     */
    httpStatusCode?: pulumi.Input<string>;
    /**
     * enable logging
     */
    log?: pulumi.Input<number>;
    /**
     * Action policy name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable proxy chaining feature
     */
    proxyChaining?: pulumi.Input<number>;
    /**
     * Forward all https packets to upstream proxy
     */
    proxyChainingBypass?: pulumi.Input<number>;
    /**
     * service group to forward the packets
     */
    realSg?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyForwardPolicyActionSamplingEnable>[]>;
    /**
     * Fetch server certificate by upstream proxy
     */
    supportCertFetch?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
