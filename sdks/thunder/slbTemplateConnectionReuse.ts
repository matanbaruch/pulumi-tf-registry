// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbTemplateConnectionReuse extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateConnectionReuse resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateConnectionReuseState, opts?: pulumi.CustomResourceOptions): SlbTemplateConnectionReuse {
        return new SlbTemplateConnectionReuse(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateConnectionReuse:SlbTemplateConnectionReuse';

    /**
     * Returns true if the given object is an instance of SlbTemplateConnectionReuse.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateConnectionReuse {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateConnectionReuse.__pulumiType;
    }

    /**
     * Insert HTTP Connection: keep-alive header
     */
    public readonly addHeader!: pulumi.Output<number | undefined>;
    /**
     * Keep a number of server connections open
     */
    public readonly keepAliveConn!: pulumi.Output<number | undefined>;
    /**
     * Max Server Connections allowed (Connections per Server Port (default 1000))
     */
    public readonly limitPerServer!: pulumi.Output<number | undefined>;
    /**
     * Connection Reuse Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Connections per Server Port (default 100)
     */
    public readonly numConnPerPort!: pulumi.Output<number | undefined>;
    /**
     * Preopen server connection
     */
    public readonly preopen!: pulumi.Output<number | undefined>;
    /**
     * Timeout in seconds. Multiple of 60 (default 2400)
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateConnectionReuse resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateConnectionReuseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateConnectionReuseArgs | SlbTemplateConnectionReuseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateConnectionReuseState | undefined;
            resourceInputs["addHeader"] = state ? state.addHeader : undefined;
            resourceInputs["keepAliveConn"] = state ? state.keepAliveConn : undefined;
            resourceInputs["limitPerServer"] = state ? state.limitPerServer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numConnPerPort"] = state ? state.numConnPerPort : undefined;
            resourceInputs["preopen"] = state ? state.preopen : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateConnectionReuseArgs | undefined;
            resourceInputs["addHeader"] = args ? args.addHeader : undefined;
            resourceInputs["keepAliveConn"] = args ? args.keepAliveConn : undefined;
            resourceInputs["limitPerServer"] = args ? args.limitPerServer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numConnPerPort"] = args ? args.numConnPerPort : undefined;
            resourceInputs["preopen"] = args ? args.preopen : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateConnectionReuse.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateConnectionReuse resources.
 */
export interface SlbTemplateConnectionReuseState {
    /**
     * Insert HTTP Connection: keep-alive header
     */
    addHeader?: pulumi.Input<number>;
    /**
     * Keep a number of server connections open
     */
    keepAliveConn?: pulumi.Input<number>;
    /**
     * Max Server Connections allowed (Connections per Server Port (default 1000))
     */
    limitPerServer?: pulumi.Input<number>;
    /**
     * Connection Reuse Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Connections per Server Port (default 100)
     */
    numConnPerPort?: pulumi.Input<number>;
    /**
     * Preopen server connection
     */
    preopen?: pulumi.Input<number>;
    /**
     * Timeout in seconds. Multiple of 60 (default 2400)
     */
    timeout?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateConnectionReuse resource.
 */
export interface SlbTemplateConnectionReuseArgs {
    /**
     * Insert HTTP Connection: keep-alive header
     */
    addHeader?: pulumi.Input<number>;
    /**
     * Keep a number of server connections open
     */
    keepAliveConn?: pulumi.Input<number>;
    /**
     * Max Server Connections allowed (Connections per Server Port (default 1000))
     */
    limitPerServer?: pulumi.Input<number>;
    /**
     * Connection Reuse Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Connections per Server Port (default 100)
     */
    numConnPerPort?: pulumi.Input<number>;
    /**
     * Preopen server connection
     */
    preopen?: pulumi.Input<number>;
    /**
     * Timeout in seconds. Multiple of 60 (default 2400)
     */
    timeout?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
