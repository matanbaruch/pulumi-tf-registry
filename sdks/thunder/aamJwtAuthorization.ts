// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AamJwtAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing AamJwtAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamJwtAuthorizationState, opts?: pulumi.CustomResourceOptions): AamJwtAuthorization {
        return new AamJwtAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamJwtAuthorization:AamJwtAuthorization';

    /**
     * Returns true if the given object is an instance of AamJwtAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamJwtAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamJwtAuthorization.__pulumiType;
    }

    /**
     * Specify the exp claim is required for JWT authorization
     */
    public readonly expClaimRequried!: pulumi.Output<number | undefined>;
    /**
     * Enable caching authorized JWT token and skip verification and authorization for cached tokens
     */
    public readonly jwtCacheEnable!: pulumi.Output<number | undefined>;
    /**
     * Specify the default token expiration if exp claim is not available (default 1800)
     */
    public readonly jwtExpDefault!: pulumi.Output<number | undefined>;
    /**
     * Specify JWT token will not be stripped while forwarding client request
     */
    public readonly jwtForwarding!: pulumi.Output<number | undefined>;
    /**
     * '0': log disable; '1': only log authorzation fail (default); '2': only log authorization success; '3': log all;
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * Specify JWT authorization template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.AamJwtAuthorizationSamplingEnable[] | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specify the certificate to verify JWT token signature
     */
    public readonly verificationCert!: pulumi.Output<string | undefined>;
    /**
     * Specify the jwks file to verify JWT token signature
     */
    public readonly verificationJwks!: pulumi.Output<string | undefined>;
    /**
     * Specify secret for verify JWT token signature
     */
    public readonly verificationSecret!: pulumi.Output<string | undefined>;

    /**
     * Create a AamJwtAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AamJwtAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamJwtAuthorizationArgs | AamJwtAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamJwtAuthorizationState | undefined;
            resourceInputs["expClaimRequried"] = state ? state.expClaimRequried : undefined;
            resourceInputs["jwtCacheEnable"] = state ? state.jwtCacheEnable : undefined;
            resourceInputs["jwtExpDefault"] = state ? state.jwtExpDefault : undefined;
            resourceInputs["jwtForwarding"] = state ? state.jwtForwarding : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["verificationCert"] = state ? state.verificationCert : undefined;
            resourceInputs["verificationJwks"] = state ? state.verificationJwks : undefined;
            resourceInputs["verificationSecret"] = state ? state.verificationSecret : undefined;
        } else {
            const args = argsOrState as AamJwtAuthorizationArgs | undefined;
            resourceInputs["expClaimRequried"] = args ? args.expClaimRequried : undefined;
            resourceInputs["jwtCacheEnable"] = args ? args.jwtCacheEnable : undefined;
            resourceInputs["jwtExpDefault"] = args ? args.jwtExpDefault : undefined;
            resourceInputs["jwtForwarding"] = args ? args.jwtForwarding : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["verificationCert"] = args ? args.verificationCert : undefined;
            resourceInputs["verificationJwks"] = args ? args.verificationJwks : undefined;
            resourceInputs["verificationSecret"] = args ? args.verificationSecret : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamJwtAuthorization.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamJwtAuthorization resources.
 */
export interface AamJwtAuthorizationState {
    /**
     * Specify the exp claim is required for JWT authorization
     */
    expClaimRequried?: pulumi.Input<number>;
    /**
     * Enable caching authorized JWT token and skip verification and authorization for cached tokens
     */
    jwtCacheEnable?: pulumi.Input<number>;
    /**
     * Specify the default token expiration if exp claim is not available (default 1800)
     */
    jwtExpDefault?: pulumi.Input<number>;
    /**
     * Specify JWT token will not be stripped while forwarding client request
     */
    jwtForwarding?: pulumi.Input<number>;
    /**
     * '0': log disable; '1': only log authorzation fail (default); '2': only log authorization success; '3': log all;
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Specify JWT authorization template name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamJwtAuthorizationSamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify the certificate to verify JWT token signature
     */
    verificationCert?: pulumi.Input<string>;
    /**
     * Specify the jwks file to verify JWT token signature
     */
    verificationJwks?: pulumi.Input<string>;
    /**
     * Specify secret for verify JWT token signature
     */
    verificationSecret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamJwtAuthorization resource.
 */
export interface AamJwtAuthorizationArgs {
    /**
     * Specify the exp claim is required for JWT authorization
     */
    expClaimRequried?: pulumi.Input<number>;
    /**
     * Enable caching authorized JWT token and skip verification and authorization for cached tokens
     */
    jwtCacheEnable?: pulumi.Input<number>;
    /**
     * Specify the default token expiration if exp claim is not available (default 1800)
     */
    jwtExpDefault?: pulumi.Input<number>;
    /**
     * Specify JWT token will not be stripped while forwarding client request
     */
    jwtForwarding?: pulumi.Input<number>;
    /**
     * '0': log disable; '1': only log authorzation fail (default); '2': only log authorization success; '3': log all;
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Specify JWT authorization template name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamJwtAuthorizationSamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify the certificate to verify JWT token signature
     */
    verificationCert?: pulumi.Input<string>;
    /**
     * Specify the jwks file to verify JWT token signature
     */
    verificationJwks?: pulumi.Input<string>;
    /**
     * Specify secret for verify JWT token signature
     */
    verificationSecret?: pulumi.Input<string>;
}
