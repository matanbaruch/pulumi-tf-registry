// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VisibilityAnomalyDetection extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityAnomalyDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityAnomalyDetectionState, opts?: pulumi.CustomResourceOptions): VisibilityAnomalyDetection {
        return new VisibilityAnomalyDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityAnomalyDetection:VisibilityAnomalyDetection';

    /**
     * Returns true if the given object is an instance of VisibilityAnomalyDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityAnomalyDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityAnomalyDetection.__pulumiType;
    }

    /**
     * 'enable': Enable anomaly-detection (Not valid for source-nat-ip and source monitor types); 'disable': Disable anomaly
     * detection (default);
     */
    public readonly featureStatus!: pulumi.Output<string | undefined>;
    /**
     * 'per-entity': Enable per entity logging; 'per-metric': Enable per metric logging with threshold details; 'disable':
     * Disable anomaly notifications (Default);
     */
    public readonly logging!: pulumi.Output<string | undefined>;
    /**
     * Relearn anomaly detection parameters after detecting an anomaly
     */
    public readonly restartLearningOnAnomaly!: pulumi.Output<number | undefined>;
    /**
     * 'high': Highly sensitive anomaly detection. Can lead to false positives; 'low': Low sensitivity anomaly detection. Can
     * cause delay in detection and might not detect certain attacks. (default);
     */
    public readonly sensitivity!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VisibilityAnomalyDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VisibilityAnomalyDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityAnomalyDetectionArgs | VisibilityAnomalyDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityAnomalyDetectionState | undefined;
            resourceInputs["featureStatus"] = state ? state.featureStatus : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["restartLearningOnAnomaly"] = state ? state.restartLearningOnAnomaly : undefined;
            resourceInputs["sensitivity"] = state ? state.sensitivity : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VisibilityAnomalyDetectionArgs | undefined;
            resourceInputs["featureStatus"] = args ? args.featureStatus : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["restartLearningOnAnomaly"] = args ? args.restartLearningOnAnomaly : undefined;
            resourceInputs["sensitivity"] = args ? args.sensitivity : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityAnomalyDetection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityAnomalyDetection resources.
 */
export interface VisibilityAnomalyDetectionState {
    /**
     * 'enable': Enable anomaly-detection (Not valid for source-nat-ip and source monitor types); 'disable': Disable anomaly
     * detection (default);
     */
    featureStatus?: pulumi.Input<string>;
    /**
     * 'per-entity': Enable per entity logging; 'per-metric': Enable per metric logging with threshold details; 'disable':
     * Disable anomaly notifications (Default);
     */
    logging?: pulumi.Input<string>;
    /**
     * Relearn anomaly detection parameters after detecting an anomaly
     */
    restartLearningOnAnomaly?: pulumi.Input<number>;
    /**
     * 'high': Highly sensitive anomaly detection. Can lead to false positives; 'low': Low sensitivity anomaly detection. Can
     * cause delay in detection and might not detect certain attacks. (default);
     */
    sensitivity?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VisibilityAnomalyDetection resource.
 */
export interface VisibilityAnomalyDetectionArgs {
    /**
     * 'enable': Enable anomaly-detection (Not valid for source-nat-ip and source monitor types); 'disable': Disable anomaly
     * detection (default);
     */
    featureStatus?: pulumi.Input<string>;
    /**
     * 'per-entity': Enable per entity logging; 'per-metric': Enable per metric logging with threshold details; 'disable':
     * Disable anomaly notifications (Default);
     */
    logging?: pulumi.Input<string>;
    /**
     * Relearn anomaly detection parameters after detecting an anomaly
     */
    restartLearningOnAnomaly?: pulumi.Input<number>;
    /**
     * 'high': Highly sensitive anomaly detection. Can lead to false positives; 'low': Low sensitivity anomaly detection. Can
     * cause delay in detection and might not detect certain attacks. (default);
     */
    sensitivity?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
