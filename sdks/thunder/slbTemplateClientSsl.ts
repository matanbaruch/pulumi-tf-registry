// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateClientSsl extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateClientSsl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateClientSslState, opts?: pulumi.CustomResourceOptions): SlbTemplateClientSsl {
        return new SlbTemplateClientSsl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateClientSsl:SlbTemplateClientSsl';

    /**
     * Returns true if the given object is an instance of SlbTemplateClientSsl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateClientSsl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateClientSsl.__pulumiType;
    }

    /**
     * Forward proxy bypass if ad-group matches class-list
     */
    public readonly adGroupList!: pulumi.Output<string | undefined>;
    /**
     * 'fatal': Log fatal alerts;
     */
    public readonly alertType!: pulumi.Output<string | undefined>;
    /**
     * Specify authorization LDAP service group
     */
    public readonly authSg!: pulumi.Output<string | undefined>;
    /**
     * Use Subject DN as LDAP search base DN
     */
    public readonly authSgDn!: pulumi.Output<number | undefined>;
    /**
     * Specify LDAP search filter
     */
    public readonly authSgFilter!: pulumi.Output<string | undefined>;
    /**
     * Specify the Username Field in the Client Certificate(If multi-fields are specificed, prior one has higher priority)
     */
    public readonly authUsername!: pulumi.Output<string | undefined>;
    /**
     * Specify attribute name of username for client SSL authorization
     */
    public readonly authUsernameAttribute!: pulumi.Output<string | undefined>;
    /**
     * Specify authorization LDAP server name
     */
    public readonly authenName!: pulumi.Output<string | undefined>;
    /**
     * Specify LDAP server for client SSL authorizaiton
     */
    public readonly authorization!: pulumi.Output<number | undefined>;
    /**
     * Class List Name
     */
    public readonly bypassCertIssuerClassListName!: pulumi.Output<string | undefined>;
    public readonly bypassCertIssuerMultiClassLists!: pulumi.Output<outputs.SlbTemplateClientSslBypassCertIssuerMultiClassList[] | undefined>;
    /**
     * Class List Name
     */
    public readonly bypassCertSanClassListName!: pulumi.Output<string | undefined>;
    public readonly bypassCertSanMultiClassLists!: pulumi.Output<outputs.SlbTemplateClientSslBypassCertSanMultiClassList[] | undefined>;
    /**
     * Class List Name
     */
    public readonly bypassCertSubjectClassListName!: pulumi.Output<string | undefined>;
    public readonly bypassCertSubjectMultiClassLists!: pulumi.Output<outputs.SlbTemplateClientSslBypassCertSubjectMultiClassList[] | undefined>;
    public readonly caCerts!: pulumi.Output<outputs.SlbTemplateClientSslCaCert[] | undefined>;
    /**
     * Class List Name
     */
    public readonly cachePersistenceListName!: pulumi.Output<string | undefined>;
    /**
     * Case insensitive forward proxy bypass
     */
    public readonly caseInsensitive!: pulumi.Output<number | undefined>;
    /**
     * Forward proxy bypass if SNI string is contained in central updated cert-pinning-candidate list
     */
    public readonly centralCertPinList!: pulumi.Output<number | undefined>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    public readonly certRevokeAction!: pulumi.Output<string | undefined>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    public readonly certUnknownAction!: pulumi.Output<string | undefined>;
    public readonly certificateIssuerContainsLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateIssuerContainsList[] | undefined>;
    public readonly certificateIssuerEndsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateIssuerEndsWithList[] | undefined>;
    public readonly certificateIssuerEqualsLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateIssuerEqualsList[] | undefined>;
    public readonly certificateIssuerStartsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateIssuerStartsWithList[] | undefined>;
    public readonly certificateLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateList[] | undefined>;
    public readonly certificateSanContainsLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSanContainsList[] | undefined>;
    public readonly certificateSanEndsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSanEndsWithList[] | undefined>;
    public readonly certificateSanEqualsLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSanEqualsList[] | undefined>;
    public readonly certificateSanStartsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSanStartsWithList[] | undefined>;
    public readonly certificateSubjectContainsLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSubjectContainsList[] | undefined>;
    public readonly certificateSubjectEndsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSubjectEndsWithList[] | undefined>;
    public readonly certificateSubjectEqualsLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSubjectEqualsList[] | undefined>;
    public readonly certificateSubjectStartsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslCertificateSubjectStartsWithList[] | undefined>;
    /**
     * Chain Certificate Name
     */
    public readonly chainCert!: pulumi.Output<string | undefined>;
    /**
     * Chain Certificate Name
     */
    public readonly chainCertSharedStr!: pulumi.Output<string | undefined>;
    public readonly cipherWithoutPrioLists!: pulumi.Output<outputs.SlbTemplateClientSslCipherWithoutPrioList[] | undefined>;
    /**
     * Class List Name
     */
    public readonly classListName!: pulumi.Output<string | undefined>;
    /**
     * Case insensitive forward proxy client auth bypass
     */
    public readonly clientAuthCaseInsensitive!: pulumi.Output<number | undefined>;
    /**
     * Forward proxy client auth bypass if SNI string matches class-list (Class List Name)
     */
    public readonly clientAuthClassList!: pulumi.Output<string | undefined>;
    public readonly clientAuthContainsLists!: pulumi.Output<outputs.SlbTemplateClientSslClientAuthContainsList[] | undefined>;
    public readonly clientAuthEndsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslClientAuthEndsWithList[] | undefined>;
    public readonly clientAuthEqualsLists!: pulumi.Output<outputs.SlbTemplateClientSslClientAuthEqualsList[] | undefined>;
    public readonly clientAuthStartsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslClientAuthStartsWithList[] | undefined>;
    /**
     * 'Ignore': Don't request client certificate; 'Require': Require client certificate; 'Request': Request client
     * certificate;
     */
    public readonly clientCertificate!: pulumi.Output<string | undefined>;
    public readonly clientIpv4Lists!: pulumi.Output<outputs.SlbTemplateClientSslClientIpv4List[] | undefined>;
    public readonly clientIpv6Lists!: pulumi.Output<outputs.SlbTemplateClientSslClientIpv6List[] | undefined>;
    /**
     * Send close notification when terminate connection
     */
    public readonly closeNotify!: pulumi.Output<number | undefined>;
    public readonly containsLists!: pulumi.Output<outputs.SlbTemplateClientSslContainsList[] | undefined>;
    public readonly crlCerts!: pulumi.Output<outputs.SlbTemplateClientSslCrlCert[] | undefined>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    public readonly dgversion!: pulumi.Output<number | undefined>;
    /**
     * '1024': 1024; '1024-dsa': 1024-dsa; '2048': 2048;
     */
    public readonly dhType!: pulumi.Output<string | undefined>;
    /**
     * Let backend server does SSL client authentication directly
     */
    public readonly directClientServerAuth!: pulumi.Output<number | undefined>;
    /**
     * Reject Client requests for SSL version 3
     */
    public readonly disableSslv3!: pulumi.Output<number | undefined>;
    /**
     * Enable TLS 1.3 early data (0-RTT)
     */
    public readonly earlyData!: pulumi.Output<number | undefined>;
    public readonly ecLists!: pulumi.Output<outputs.SlbTemplateClientSslEcList[] | undefined>;
    /**
     * Enable SSLi FTP over TLS support at which port
     */
    public readonly enableSsliFtpAlg!: pulumi.Output<number | undefined>;
    /**
     * Enable TLS alert logging
     */
    public readonly enableTlsAlertLogging!: pulumi.Output<number | undefined>;
    public readonly endsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslEndsWithList[] | undefined>;
    public readonly equalsLists!: pulumi.Output<outputs.SlbTemplateClientSslEqualsList[] | undefined>;
    /**
     * Exceptions to forward proxy bypass if ad-group matches class-list
     */
    public readonly exceptionAdGroupList!: pulumi.Output<string | undefined>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    public readonly exceptionCertificateIssuerClName!: pulumi.Output<string | undefined>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    public readonly exceptionCertificateSanClName!: pulumi.Output<string | undefined>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    public readonly exceptionCertificateSubjectClName!: pulumi.Output<string | undefined>;
    public readonly exceptionClientIpv4Lists!: pulumi.Output<outputs.SlbTemplateClientSslExceptionClientIpv4List[] | undefined>;
    public readonly exceptionClientIpv6Lists!: pulumi.Output<outputs.SlbTemplateClientSslExceptionClientIpv6List[] | undefined>;
    public readonly exceptionServerIpv4Lists!: pulumi.Output<outputs.SlbTemplateClientSslExceptionServerIpv4List[] | undefined>;
    public readonly exceptionServerIpv6Lists!: pulumi.Output<outputs.SlbTemplateClientSslExceptionServerIpv6List[] | undefined>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    public readonly exceptionSniClName!: pulumi.Output<string | undefined>;
    /**
     * Exceptions to forward proxy bypass if user-name matches class-list
     */
    public readonly exceptionUserNameList!: pulumi.Output<string | undefined>;
    public readonly exceptionWebCategory!: pulumi.Output<outputs.SlbTemplateClientSslExceptionWebCategory | undefined>;
    public readonly exceptionWebReputation!: pulumi.Output<outputs.SlbTemplateClientSslExceptionWebReputation | undefined>;
    /**
     * Certificate lifetime in hours
     */
    public readonly expireHours!: pulumi.Output<number | undefined>;
    /**
     * Password Phrase
     */
    public readonly forwardPassphrase!: pulumi.Output<string | undefined>;
    /**
     * Forward proxy alternate signing cert and key
     */
    public readonly forwardProxyAltSign!: pulumi.Output<number | undefined>;
    /**
     * Message to be included on the block page (Message, enclose in quotes if spaces are present)
     */
    public readonly forwardProxyBlockMessage!: pulumi.Output<string | undefined>;
    /**
     * CA Certificate for forward proxy (SSL forward proxy CA Certificate Name)
     */
    public readonly forwardProxyCaCert!: pulumi.Output<string | undefined>;
    /**
     * CA Private Key for forward proxy (SSL forward proxy CA Key Name)
     */
    public readonly forwardProxyCaKey!: pulumi.Output<string | undefined>;
    /**
     * Certificate cache size limit, default is 524288 (set to 0 for unlimited size)
     */
    public readonly forwardProxyCertCacheLimit!: pulumi.Output<number | undefined>;
    /**
     * Certificate cache timeout, default is 1 hour (seconds, set to 0 for never timeout)
     */
    public readonly forwardProxyCertCacheTimeout!: pulumi.Output<number | undefined>;
    /**
     * Adjust certificate expiry relative to the time when it is created on the device
     */
    public readonly forwardProxyCertExpiry!: pulumi.Output<number | undefined>;
    /**
     * 'bypass': bypass the connection; 'reset': reset the connection; 'intercept': wait for cert and then inspect the
     * connection;
     */
    public readonly forwardProxyCertNotReadyAction!: pulumi.Output<string | undefined>;
    /**
     * Action taken if a certificate is irreversibly revoked, bypass SSLi processing by default
     */
    public readonly forwardProxyCertRevokeAction!: pulumi.Output<number | undefined>;
    /**
     * Action taken if a certificate revocation status is unknown, bypass SSLi processing by default
     */
    public readonly forwardProxyCertUnknownAction!: pulumi.Output<number | undefined>;
    /**
     * Disable Certificate Revocation List checking for forward proxy
     */
    public readonly forwardProxyCrlDisable!: pulumi.Output<number | undefined>;
    /**
     * Apply a DSCP to decrypted and bypassed traffic (DSCP to apply to decrypted traffic)
     */
    public readonly forwardProxyDecryptedDscp!: pulumi.Output<number | undefined>;
    /**
     * DSCP to apply to bypassed traffic
     */
    public readonly forwardProxyDecryptedDscpBypass!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL forward proxy
     */
    public readonly forwardProxyEnable!: pulumi.Output<number | undefined>;
    /**
     * Action taken if receiving encrypted server name indication extension in client hello MSG, bypass the connection by
     * default
     */
    public readonly forwardProxyEsniAction!: pulumi.Output<number | undefined>;
    /**
     * Disable Failsafe for SSL forward proxy
     */
    public readonly forwardProxyFailsafeDisable!: pulumi.Output<number | undefined>;
    /**
     * Set the time interval to save the hash persistence certs (Interval value, in minutes)
     */
    public readonly forwardProxyHashPersistenceInterval!: pulumi.Output<number | undefined>;
    /**
     * Disable SSL forward proxy logging
     */
    public readonly forwardProxyLogDisable!: pulumi.Output<number | undefined>;
    /**
     * Action taken if handshake fails due to no shared ciper, close the connection by default
     */
    public readonly forwardProxyNoSharedCipherAction!: pulumi.Output<number | undefined>;
    /**
     * 'intercept': intercept in no SNI case; 'bypass': bypass in no SNI case; 'reset': reset in no SNI case;
     */
    public readonly forwardProxyNoSniAction!: pulumi.Output<string | undefined>;
    /**
     * Disable ocsp-stapling for forward proxy
     */
    public readonly forwardProxyOcspDisable!: pulumi.Output<number | undefined>;
    /**
     * 'no-match-action-inspect': Inspected if not matched; 'no-match-action-drop': Dropped if not matched;
     */
    public readonly forwardProxyRequireSniCertMatched!: pulumi.Output<string | undefined>;
    /**
     * Redirect connections to pages with self signed certs to a warning page
     */
    public readonly forwardProxySelfsignRedir!: pulumi.Output<number | undefined>;
    /**
     * TLS/SSL version, default is TLS1.2 (TLS/SSL version: 31-TLSv1.0, 32-TLSv1.1, 33-TLSv1.2 and 34-TLSv1.3)
     */
    public readonly forwardProxySslVersion!: pulumi.Output<number | undefined>;
    public readonly forwardProxyTrustedCaLists!: pulumi.Output<outputs.SlbTemplateClientSslForwardProxyTrustedCaList[] | undefined>;
    /**
     * Action taken if certificate verification fails, close the connection by default
     */
    public readonly forwardProxyVerifyCertFailAction!: pulumi.Output<number | undefined>;
    /**
     * CA Certificate for forward proxy alternate signing (Certificate name)
     */
    public readonly fpAltCert!: pulumi.Output<string | undefined>;
    /**
     * Chain Certificate (Chain Certificate Name)
     */
    public readonly fpAltChainCert!: pulumi.Output<string | undefined>;
    /**
     * CA Private Key for forward proxy alternate signing (Key name)
     */
    public readonly fpAltKey!: pulumi.Output<string | undefined>;
    /**
     * Password Phrase
     */
    public readonly fpAltPassphrase!: pulumi.Output<string | undefined>;
    /**
     * Alternate CA Certificate and Private Key Partition Shared
     */
    public readonly fpAltShared!: pulumi.Output<number | undefined>;
    /**
     * CA Certificate for forward proxy (SSL forward proxy CA Certificate Name)
     */
    public readonly fpCaCertificate!: pulumi.Output<string | undefined>;
    /**
     * CA Private Key Partition Shared
     */
    public readonly fpCaCertificateShared!: pulumi.Output<number | undefined>;
    /**
     * Chain Certificate (Chain Certificate Name)
     */
    public readonly fpCaChainCert!: pulumi.Output<string | undefined>;
    /**
     * CA Private Key for forward proxy (SSL forward proxy CA Key Name)
     */
    public readonly fpCaKey!: pulumi.Output<string | undefined>;
    /**
     * Password Phrase
     */
    public readonly fpCaKeyPassphrase!: pulumi.Output<string | undefined>;
    /**
     * CA Private Key Partition Shared
     */
    public readonly fpCaKeyShared!: pulumi.Output<number | undefined>;
    /**
     * CA Certificate Partition Shared
     */
    public readonly fpCaShared!: pulumi.Output<number | undefined>;
    /**
     * CA Issuers (Authority Information Access URI)
     */
    public readonly fpCertExtAiaCaIssuers!: pulumi.Output<string | undefined>;
    /**
     * OCSP (Authority Information Access URI)
     */
    public readonly fpCertExtAiaOcsp!: pulumi.Output<string | undefined>;
    /**
     * CRL Distribution Point (CRL Distribution Point URI)
     */
    public readonly fpCertExtCrldp!: pulumi.Output<string | undefined>;
    /**
     * 'auto': Configure auto NAT for server certificate fetching;
     */
    public readonly fpCertFetchAutonat!: pulumi.Output<string | undefined>;
    /**
     * Set this NAT pool as higher precedence than other source NAT like configued under template policy
     */
    public readonly fpCertFetchAutonatPrecedence!: pulumi.Output<number | undefined>;
    /**
     * Specify NAT pool or pool group
     */
    public readonly fpCertFetchNatpoolName!: pulumi.Output<string | undefined>;
    /**
     * Specify NAT pool or pool group
     */
    public readonly fpCertFetchNatpoolNameShared!: pulumi.Output<string | undefined>;
    /**
     * Set this NAT pool as higher precedence than other source NAT like configued under template policy
     */
    public readonly fpCertFetchNatpoolPrecedence!: pulumi.Output<number | undefined>;
    /**
     * 'bypass': bypass SSLi processing; 'drop': close the connection;
     */
    public readonly fpEsniAction!: pulumi.Output<string | undefined>;
    /**
     * Enable SSL handshake logging
     */
    public readonly handshakeLoggingEnable!: pulumi.Output<number | undefined>;
    /**
     * 'thales-embed': Thales embed key; 'thales-hwcrhk': Thales hwcrhk Key;
     */
    public readonly hsmType!: pulumi.Output<string | undefined>;
    /**
     * Forward proxy Inspect if Certificate issuer matches class-list
     */
    public readonly inspectCertificateIssuerClName!: pulumi.Output<string | undefined>;
    /**
     * Forward proxy Inspect if Certificate Subject Alternative Name matches class-list
     */
    public readonly inspectCertificateSanClName!: pulumi.Output<string | undefined>;
    /**
     * Forward proxy Inspect if Certificate Subject matches class-list
     */
    public readonly inspectCertificateSubjectClName!: pulumi.Output<string | undefined>;
    /**
     * Class List Name
     */
    public readonly inspectListName!: pulumi.Output<string | undefined>;
    /**
     * Enable JA3 features
     */
    public readonly ja3Enable!: pulumi.Output<number | undefined>;
    /**
     * Insert the JA3 hash into this request as a HTTP header (HTTP Header Name)
     */
    public readonly ja3InsertHttpHeader!: pulumi.Output<string | undefined>;
    /**
     * Drop request if the JA3 hash matches this class-list (type string-case-insensitive) (Class-List Name)
     */
    public readonly ja3RejectClassList!: pulumi.Output<string | undefined>;
    /**
     * Drop request if numbers of JA3 of this client address exceeded
     */
    public readonly ja3RejectMaxNumberPerHost!: pulumi.Output<number | undefined>;
    /**
     * seconds to keep each JA3 record
     */
    public readonly ja3Ttl!: pulumi.Output<number | undefined>;
    /**
     * Use Subject DN as LDAP search base DN
     */
    public readonly ldapBaseDnFromCert!: pulumi.Output<number | undefined>;
    /**
     * Specify LDAP search filter
     */
    public readonly ldapSearchFilter!: pulumi.Output<string | undefined>;
    public readonly localCertPinList!: pulumi.Output<outputs.SlbTemplateClientSslLocalCertPinList | undefined>;
    /**
     * Enable local logging
     */
    public readonly localLogging!: pulumi.Output<number | undefined>;
    public readonly multiClassLists!: pulumi.Output<outputs.SlbTemplateClientSslMultiClassList[] | undefined>;
    /**
     * Client SSL Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Disable anti-replay protection for TLS 1.3 early data (0-RTT data)
     */
    public readonly noAntiReplay!: pulumi.Output<number | undefined>;
    /**
     * 'bypass': bypass SSLi processing; 'drop': close the connection;
     */
    public readonly noSharedCipherAction!: pulumi.Output<string | undefined>;
    /**
     * Handle the non-ssl session as L4 for performance optimization
     */
    public readonly nonSslBypassL4session!: pulumi.Output<number | undefined>;
    /**
     * Service Group for Bypass non-ssl traffic (Service Group Name)
     */
    public readonly nonSslBypassServiceGroup!: pulumi.Output<string | undefined>;
    /**
     * notAfter date
     */
    public readonly notafter!: pulumi.Output<number | undefined>;
    /**
     * Day
     */
    public readonly notafterday!: pulumi.Output<number | undefined>;
    /**
     * Month
     */
    public readonly notaftermonth!: pulumi.Output<number | undefined>;
    /**
     * Year
     */
    public readonly notafteryear!: pulumi.Output<number | undefined>;
    /**
     * notBefore date
     */
    public readonly notbefore!: pulumi.Output<number | undefined>;
    /**
     * Day
     */
    public readonly notbeforeday!: pulumi.Output<number | undefined>;
    /**
     * Month
     */
    public readonly notbeforemonth!: pulumi.Output<number | undefined>;
    /**
     * Year
     */
    public readonly notbeforeyear!: pulumi.Output<number | undefined>;
    /**
     * Config OCSP stapling support
     */
    public readonly ocspStapling!: pulumi.Output<number | undefined>;
    /**
     * CA certificate
     */
    public readonly ocspstCaCert!: pulumi.Output<string | undefined>;
    /**
     * Specify OCSP Authentication
     */
    public readonly ocspstOcsp!: pulumi.Output<number | undefined>;
    /**
     * Specify authentication service group
     */
    public readonly ocspstSg!: pulumi.Output<string | undefined>;
    /**
     * Specify update period, in days
     */
    public readonly ocspstSgDays!: pulumi.Output<number | undefined>;
    /**
     * Specify update period, in hours
     */
    public readonly ocspstSgHours!: pulumi.Output<number | undefined>;
    /**
     * Specify update period, in minutes
     */
    public readonly ocspstSgMinutes!: pulumi.Output<number | undefined>;
    /**
     * Specify retry timeout (Default is 30 mins)
     */
    public readonly ocspstSgTimeout!: pulumi.Output<number | undefined>;
    /**
     * Specify OCSP authentication server
     */
    public readonly ocspstSrvr!: pulumi.Output<string | undefined>;
    /**
     * Specify update period, in days
     */
    public readonly ocspstSrvrDays!: pulumi.Output<number | undefined>;
    /**
     * Specify update period, in hours
     */
    public readonly ocspstSrvrHours!: pulumi.Output<number | undefined>;
    /**
     * Specify update period, in minutes
     */
    public readonly ocspstSrvrMinutes!: pulumi.Output<number | undefined>;
    /**
     * Specify retry timeout (Default is 30 mins)
     */
    public readonly ocspstSrvrTimeout!: pulumi.Output<number | undefined>;
    /**
     * Disable SSL renegotiation
     */
    public readonly renegotiationDisable!: pulumi.Output<number | undefined>;
    public readonly reqCaLists!: pulumi.Output<outputs.SlbTemplateClientSslReqCaList[] | undefined>;
    /**
     * Wait for web category to be resolved before taking bypass decision
     */
    public readonly requireWebCategory!: pulumi.Output<number | undefined>;
    public readonly serverIpv4Lists!: pulumi.Output<outputs.SlbTemplateClientSslServerIpv4List[] | undefined>;
    public readonly serverIpv6Lists!: pulumi.Output<outputs.SlbTemplateClientSslServerIpv6List[] | undefined>;
    /**
     * Enable automatic mapping of server name indication in Client hello extension
     */
    public readonly serverNameAutoMap!: pulumi.Output<number | undefined>;
    public readonly serverNameLists!: pulumi.Output<outputs.SlbTemplateClientSslServerNameList[] | undefined>;
    /**
     * Session Cache Size (Maximum cache size. Default value 0 (Session ID reuse disabled))
     */
    public readonly sessionCacheSize!: pulumi.Output<number | undefined>;
    /**
     * Session Cache Timeout (Timeout value, in seconds. Default value 0 (Session cache timeout disabled))
     */
    public readonly sessionCacheTimeout!: pulumi.Output<number | undefined>;
    /**
     * Disable client side session ticket support
     */
    public readonly sessionTicketDisable!: pulumi.Output<number | undefined>;
    /**
     * Session ticket lifetime in seconds from stateless session resumption (Lifetime value in seconds. Default value 0
     * (Session ticket lifetime is 7200 seconds))
     */
    public readonly sessionTicketLifetime!: pulumi.Output<number | undefined>;
    /**
     * Reference a cipher template from shared partition
     */
    public readonly sharedPartitionCipherTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a NAT pool or pool group from shared partition
     */
    public readonly sharedPartitionPool!: pulumi.Output<number | undefined>;
    /**
     * Enable logging when bypass event happens, disabled by default
     */
    public readonly sniBypassEnableLog!: pulumi.Output<number | undefined>;
    /**
     * Bypass when certificate expired
     */
    public readonly sniBypassExpiredCert!: pulumi.Output<number | undefined>;
    /**
     * Bypass when matched explicit bypass list (Specify class list name)
     */
    public readonly sniBypassExplicitList!: pulumi.Output<string | undefined>;
    /**
     * Bypass when missing cert/key
     */
    public readonly sniBypassMissingCert!: pulumi.Output<number | undefined>;
    /**
     * Enable logging of sni-auto-map failures. Disable by default
     */
    public readonly sniEnableLog!: pulumi.Output<number | undefined>;
    /**
     * disable SSL False Start
     */
    public readonly sslFalseStartDisable!: pulumi.Output<number | undefined>;
    /**
     * Enable inbound SSLi
     */
    public readonly ssliInboundEnable!: pulumi.Output<number | undefined>;
    /**
     * SSLi logging level, default is error logging only
     */
    public readonly ssliLogging!: pulumi.Output<number | undefined>;
    /**
     * 'disable': Disable all logging; 'all': enable all logging(error, info);
     */
    public readonly sslilogging!: pulumi.Output<string | undefined>;
    /**
     * Service Group for Bypass SSLV2 (Service Group Name)
     */
    public readonly sslv2BypassServiceGroup!: pulumi.Output<string | undefined>;
    public readonly startsWithLists!: pulumi.Output<outputs.SlbTemplateClientSslStartsWithList[] | undefined>;
    /**
     * Cipher Template Name
     */
    public readonly templateCipher!: pulumi.Output<string | undefined>;
    /**
     * Cipher Template Name
     */
    public readonly templateCipherShared!: pulumi.Output<string | undefined>;
    /**
     * HSM Template (HSM Template Name)
     */
    public readonly templateHsm!: pulumi.Output<string | undefined>;
    /**
     * Forward proxy bypass if user-name matches class-list
     */
    public readonly userNameList!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    public readonly verifyCertFailAction!: pulumi.Output<string | undefined>;
    /**
     * TLS/SSL version, default is the highest number supported (TLS/SSL version: 30-SSLv3.0, 31-TLSv1.0, 32-TLSv1.1,
     * 33-TLSv1.2 and 34-TLSv1.3)
     */
    public readonly version!: pulumi.Output<number | undefined>;
    public readonly webCategory!: pulumi.Output<outputs.SlbTemplateClientSslWebCategory | undefined>;
    public readonly webReputation!: pulumi.Output<outputs.SlbTemplateClientSslWebReputation | undefined>;

    /**
     * Create a SlbTemplateClientSsl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateClientSslArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateClientSslArgs | SlbTemplateClientSslState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateClientSslState | undefined;
            resourceInputs["adGroupList"] = state ? state.adGroupList : undefined;
            resourceInputs["alertType"] = state ? state.alertType : undefined;
            resourceInputs["authSg"] = state ? state.authSg : undefined;
            resourceInputs["authSgDn"] = state ? state.authSgDn : undefined;
            resourceInputs["authSgFilter"] = state ? state.authSgFilter : undefined;
            resourceInputs["authUsername"] = state ? state.authUsername : undefined;
            resourceInputs["authUsernameAttribute"] = state ? state.authUsernameAttribute : undefined;
            resourceInputs["authenName"] = state ? state.authenName : undefined;
            resourceInputs["authorization"] = state ? state.authorization : undefined;
            resourceInputs["bypassCertIssuerClassListName"] = state ? state.bypassCertIssuerClassListName : undefined;
            resourceInputs["bypassCertIssuerMultiClassLists"] = state ? state.bypassCertIssuerMultiClassLists : undefined;
            resourceInputs["bypassCertSanClassListName"] = state ? state.bypassCertSanClassListName : undefined;
            resourceInputs["bypassCertSanMultiClassLists"] = state ? state.bypassCertSanMultiClassLists : undefined;
            resourceInputs["bypassCertSubjectClassListName"] = state ? state.bypassCertSubjectClassListName : undefined;
            resourceInputs["bypassCertSubjectMultiClassLists"] = state ? state.bypassCertSubjectMultiClassLists : undefined;
            resourceInputs["caCerts"] = state ? state.caCerts : undefined;
            resourceInputs["cachePersistenceListName"] = state ? state.cachePersistenceListName : undefined;
            resourceInputs["caseInsensitive"] = state ? state.caseInsensitive : undefined;
            resourceInputs["centralCertPinList"] = state ? state.centralCertPinList : undefined;
            resourceInputs["certRevokeAction"] = state ? state.certRevokeAction : undefined;
            resourceInputs["certUnknownAction"] = state ? state.certUnknownAction : undefined;
            resourceInputs["certificateIssuerContainsLists"] = state ? state.certificateIssuerContainsLists : undefined;
            resourceInputs["certificateIssuerEndsWithLists"] = state ? state.certificateIssuerEndsWithLists : undefined;
            resourceInputs["certificateIssuerEqualsLists"] = state ? state.certificateIssuerEqualsLists : undefined;
            resourceInputs["certificateIssuerStartsWithLists"] = state ? state.certificateIssuerStartsWithLists : undefined;
            resourceInputs["certificateLists"] = state ? state.certificateLists : undefined;
            resourceInputs["certificateSanContainsLists"] = state ? state.certificateSanContainsLists : undefined;
            resourceInputs["certificateSanEndsWithLists"] = state ? state.certificateSanEndsWithLists : undefined;
            resourceInputs["certificateSanEqualsLists"] = state ? state.certificateSanEqualsLists : undefined;
            resourceInputs["certificateSanStartsWithLists"] = state ? state.certificateSanStartsWithLists : undefined;
            resourceInputs["certificateSubjectContainsLists"] = state ? state.certificateSubjectContainsLists : undefined;
            resourceInputs["certificateSubjectEndsWithLists"] = state ? state.certificateSubjectEndsWithLists : undefined;
            resourceInputs["certificateSubjectEqualsLists"] = state ? state.certificateSubjectEqualsLists : undefined;
            resourceInputs["certificateSubjectStartsWithLists"] = state ? state.certificateSubjectStartsWithLists : undefined;
            resourceInputs["chainCert"] = state ? state.chainCert : undefined;
            resourceInputs["chainCertSharedStr"] = state ? state.chainCertSharedStr : undefined;
            resourceInputs["cipherWithoutPrioLists"] = state ? state.cipherWithoutPrioLists : undefined;
            resourceInputs["classListName"] = state ? state.classListName : undefined;
            resourceInputs["clientAuthCaseInsensitive"] = state ? state.clientAuthCaseInsensitive : undefined;
            resourceInputs["clientAuthClassList"] = state ? state.clientAuthClassList : undefined;
            resourceInputs["clientAuthContainsLists"] = state ? state.clientAuthContainsLists : undefined;
            resourceInputs["clientAuthEndsWithLists"] = state ? state.clientAuthEndsWithLists : undefined;
            resourceInputs["clientAuthEqualsLists"] = state ? state.clientAuthEqualsLists : undefined;
            resourceInputs["clientAuthStartsWithLists"] = state ? state.clientAuthStartsWithLists : undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["clientIpv4Lists"] = state ? state.clientIpv4Lists : undefined;
            resourceInputs["clientIpv6Lists"] = state ? state.clientIpv6Lists : undefined;
            resourceInputs["closeNotify"] = state ? state.closeNotify : undefined;
            resourceInputs["containsLists"] = state ? state.containsLists : undefined;
            resourceInputs["crlCerts"] = state ? state.crlCerts : undefined;
            resourceInputs["dgversion"] = state ? state.dgversion : undefined;
            resourceInputs["dhType"] = state ? state.dhType : undefined;
            resourceInputs["directClientServerAuth"] = state ? state.directClientServerAuth : undefined;
            resourceInputs["disableSslv3"] = state ? state.disableSslv3 : undefined;
            resourceInputs["earlyData"] = state ? state.earlyData : undefined;
            resourceInputs["ecLists"] = state ? state.ecLists : undefined;
            resourceInputs["enableSsliFtpAlg"] = state ? state.enableSsliFtpAlg : undefined;
            resourceInputs["enableTlsAlertLogging"] = state ? state.enableTlsAlertLogging : undefined;
            resourceInputs["endsWithLists"] = state ? state.endsWithLists : undefined;
            resourceInputs["equalsLists"] = state ? state.equalsLists : undefined;
            resourceInputs["exceptionAdGroupList"] = state ? state.exceptionAdGroupList : undefined;
            resourceInputs["exceptionCertificateIssuerClName"] = state ? state.exceptionCertificateIssuerClName : undefined;
            resourceInputs["exceptionCertificateSanClName"] = state ? state.exceptionCertificateSanClName : undefined;
            resourceInputs["exceptionCertificateSubjectClName"] = state ? state.exceptionCertificateSubjectClName : undefined;
            resourceInputs["exceptionClientIpv4Lists"] = state ? state.exceptionClientIpv4Lists : undefined;
            resourceInputs["exceptionClientIpv6Lists"] = state ? state.exceptionClientIpv6Lists : undefined;
            resourceInputs["exceptionServerIpv4Lists"] = state ? state.exceptionServerIpv4Lists : undefined;
            resourceInputs["exceptionServerIpv6Lists"] = state ? state.exceptionServerIpv6Lists : undefined;
            resourceInputs["exceptionSniClName"] = state ? state.exceptionSniClName : undefined;
            resourceInputs["exceptionUserNameList"] = state ? state.exceptionUserNameList : undefined;
            resourceInputs["exceptionWebCategory"] = state ? state.exceptionWebCategory : undefined;
            resourceInputs["exceptionWebReputation"] = state ? state.exceptionWebReputation : undefined;
            resourceInputs["expireHours"] = state ? state.expireHours : undefined;
            resourceInputs["forwardPassphrase"] = state ? state.forwardPassphrase : undefined;
            resourceInputs["forwardProxyAltSign"] = state ? state.forwardProxyAltSign : undefined;
            resourceInputs["forwardProxyBlockMessage"] = state ? state.forwardProxyBlockMessage : undefined;
            resourceInputs["forwardProxyCaCert"] = state ? state.forwardProxyCaCert : undefined;
            resourceInputs["forwardProxyCaKey"] = state ? state.forwardProxyCaKey : undefined;
            resourceInputs["forwardProxyCertCacheLimit"] = state ? state.forwardProxyCertCacheLimit : undefined;
            resourceInputs["forwardProxyCertCacheTimeout"] = state ? state.forwardProxyCertCacheTimeout : undefined;
            resourceInputs["forwardProxyCertExpiry"] = state ? state.forwardProxyCertExpiry : undefined;
            resourceInputs["forwardProxyCertNotReadyAction"] = state ? state.forwardProxyCertNotReadyAction : undefined;
            resourceInputs["forwardProxyCertRevokeAction"] = state ? state.forwardProxyCertRevokeAction : undefined;
            resourceInputs["forwardProxyCertUnknownAction"] = state ? state.forwardProxyCertUnknownAction : undefined;
            resourceInputs["forwardProxyCrlDisable"] = state ? state.forwardProxyCrlDisable : undefined;
            resourceInputs["forwardProxyDecryptedDscp"] = state ? state.forwardProxyDecryptedDscp : undefined;
            resourceInputs["forwardProxyDecryptedDscpBypass"] = state ? state.forwardProxyDecryptedDscpBypass : undefined;
            resourceInputs["forwardProxyEnable"] = state ? state.forwardProxyEnable : undefined;
            resourceInputs["forwardProxyEsniAction"] = state ? state.forwardProxyEsniAction : undefined;
            resourceInputs["forwardProxyFailsafeDisable"] = state ? state.forwardProxyFailsafeDisable : undefined;
            resourceInputs["forwardProxyHashPersistenceInterval"] = state ? state.forwardProxyHashPersistenceInterval : undefined;
            resourceInputs["forwardProxyLogDisable"] = state ? state.forwardProxyLogDisable : undefined;
            resourceInputs["forwardProxyNoSharedCipherAction"] = state ? state.forwardProxyNoSharedCipherAction : undefined;
            resourceInputs["forwardProxyNoSniAction"] = state ? state.forwardProxyNoSniAction : undefined;
            resourceInputs["forwardProxyOcspDisable"] = state ? state.forwardProxyOcspDisable : undefined;
            resourceInputs["forwardProxyRequireSniCertMatched"] = state ? state.forwardProxyRequireSniCertMatched : undefined;
            resourceInputs["forwardProxySelfsignRedir"] = state ? state.forwardProxySelfsignRedir : undefined;
            resourceInputs["forwardProxySslVersion"] = state ? state.forwardProxySslVersion : undefined;
            resourceInputs["forwardProxyTrustedCaLists"] = state ? state.forwardProxyTrustedCaLists : undefined;
            resourceInputs["forwardProxyVerifyCertFailAction"] = state ? state.forwardProxyVerifyCertFailAction : undefined;
            resourceInputs["fpAltCert"] = state ? state.fpAltCert : undefined;
            resourceInputs["fpAltChainCert"] = state ? state.fpAltChainCert : undefined;
            resourceInputs["fpAltKey"] = state ? state.fpAltKey : undefined;
            resourceInputs["fpAltPassphrase"] = state ? state.fpAltPassphrase : undefined;
            resourceInputs["fpAltShared"] = state ? state.fpAltShared : undefined;
            resourceInputs["fpCaCertificate"] = state ? state.fpCaCertificate : undefined;
            resourceInputs["fpCaCertificateShared"] = state ? state.fpCaCertificateShared : undefined;
            resourceInputs["fpCaChainCert"] = state ? state.fpCaChainCert : undefined;
            resourceInputs["fpCaKey"] = state ? state.fpCaKey : undefined;
            resourceInputs["fpCaKeyPassphrase"] = state ? state.fpCaKeyPassphrase : undefined;
            resourceInputs["fpCaKeyShared"] = state ? state.fpCaKeyShared : undefined;
            resourceInputs["fpCaShared"] = state ? state.fpCaShared : undefined;
            resourceInputs["fpCertExtAiaCaIssuers"] = state ? state.fpCertExtAiaCaIssuers : undefined;
            resourceInputs["fpCertExtAiaOcsp"] = state ? state.fpCertExtAiaOcsp : undefined;
            resourceInputs["fpCertExtCrldp"] = state ? state.fpCertExtCrldp : undefined;
            resourceInputs["fpCertFetchAutonat"] = state ? state.fpCertFetchAutonat : undefined;
            resourceInputs["fpCertFetchAutonatPrecedence"] = state ? state.fpCertFetchAutonatPrecedence : undefined;
            resourceInputs["fpCertFetchNatpoolName"] = state ? state.fpCertFetchNatpoolName : undefined;
            resourceInputs["fpCertFetchNatpoolNameShared"] = state ? state.fpCertFetchNatpoolNameShared : undefined;
            resourceInputs["fpCertFetchNatpoolPrecedence"] = state ? state.fpCertFetchNatpoolPrecedence : undefined;
            resourceInputs["fpEsniAction"] = state ? state.fpEsniAction : undefined;
            resourceInputs["handshakeLoggingEnable"] = state ? state.handshakeLoggingEnable : undefined;
            resourceInputs["hsmType"] = state ? state.hsmType : undefined;
            resourceInputs["inspectCertificateIssuerClName"] = state ? state.inspectCertificateIssuerClName : undefined;
            resourceInputs["inspectCertificateSanClName"] = state ? state.inspectCertificateSanClName : undefined;
            resourceInputs["inspectCertificateSubjectClName"] = state ? state.inspectCertificateSubjectClName : undefined;
            resourceInputs["inspectListName"] = state ? state.inspectListName : undefined;
            resourceInputs["ja3Enable"] = state ? state.ja3Enable : undefined;
            resourceInputs["ja3InsertHttpHeader"] = state ? state.ja3InsertHttpHeader : undefined;
            resourceInputs["ja3RejectClassList"] = state ? state.ja3RejectClassList : undefined;
            resourceInputs["ja3RejectMaxNumberPerHost"] = state ? state.ja3RejectMaxNumberPerHost : undefined;
            resourceInputs["ja3Ttl"] = state ? state.ja3Ttl : undefined;
            resourceInputs["ldapBaseDnFromCert"] = state ? state.ldapBaseDnFromCert : undefined;
            resourceInputs["ldapSearchFilter"] = state ? state.ldapSearchFilter : undefined;
            resourceInputs["localCertPinList"] = state ? state.localCertPinList : undefined;
            resourceInputs["localLogging"] = state ? state.localLogging : undefined;
            resourceInputs["multiClassLists"] = state ? state.multiClassLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noAntiReplay"] = state ? state.noAntiReplay : undefined;
            resourceInputs["noSharedCipherAction"] = state ? state.noSharedCipherAction : undefined;
            resourceInputs["nonSslBypassL4session"] = state ? state.nonSslBypassL4session : undefined;
            resourceInputs["nonSslBypassServiceGroup"] = state ? state.nonSslBypassServiceGroup : undefined;
            resourceInputs["notafter"] = state ? state.notafter : undefined;
            resourceInputs["notafterday"] = state ? state.notafterday : undefined;
            resourceInputs["notaftermonth"] = state ? state.notaftermonth : undefined;
            resourceInputs["notafteryear"] = state ? state.notafteryear : undefined;
            resourceInputs["notbefore"] = state ? state.notbefore : undefined;
            resourceInputs["notbeforeday"] = state ? state.notbeforeday : undefined;
            resourceInputs["notbeforemonth"] = state ? state.notbeforemonth : undefined;
            resourceInputs["notbeforeyear"] = state ? state.notbeforeyear : undefined;
            resourceInputs["ocspStapling"] = state ? state.ocspStapling : undefined;
            resourceInputs["ocspstCaCert"] = state ? state.ocspstCaCert : undefined;
            resourceInputs["ocspstOcsp"] = state ? state.ocspstOcsp : undefined;
            resourceInputs["ocspstSg"] = state ? state.ocspstSg : undefined;
            resourceInputs["ocspstSgDays"] = state ? state.ocspstSgDays : undefined;
            resourceInputs["ocspstSgHours"] = state ? state.ocspstSgHours : undefined;
            resourceInputs["ocspstSgMinutes"] = state ? state.ocspstSgMinutes : undefined;
            resourceInputs["ocspstSgTimeout"] = state ? state.ocspstSgTimeout : undefined;
            resourceInputs["ocspstSrvr"] = state ? state.ocspstSrvr : undefined;
            resourceInputs["ocspstSrvrDays"] = state ? state.ocspstSrvrDays : undefined;
            resourceInputs["ocspstSrvrHours"] = state ? state.ocspstSrvrHours : undefined;
            resourceInputs["ocspstSrvrMinutes"] = state ? state.ocspstSrvrMinutes : undefined;
            resourceInputs["ocspstSrvrTimeout"] = state ? state.ocspstSrvrTimeout : undefined;
            resourceInputs["renegotiationDisable"] = state ? state.renegotiationDisable : undefined;
            resourceInputs["reqCaLists"] = state ? state.reqCaLists : undefined;
            resourceInputs["requireWebCategory"] = state ? state.requireWebCategory : undefined;
            resourceInputs["serverIpv4Lists"] = state ? state.serverIpv4Lists : undefined;
            resourceInputs["serverIpv6Lists"] = state ? state.serverIpv6Lists : undefined;
            resourceInputs["serverNameAutoMap"] = state ? state.serverNameAutoMap : undefined;
            resourceInputs["serverNameLists"] = state ? state.serverNameLists : undefined;
            resourceInputs["sessionCacheSize"] = state ? state.sessionCacheSize : undefined;
            resourceInputs["sessionCacheTimeout"] = state ? state.sessionCacheTimeout : undefined;
            resourceInputs["sessionTicketDisable"] = state ? state.sessionTicketDisable : undefined;
            resourceInputs["sessionTicketLifetime"] = state ? state.sessionTicketLifetime : undefined;
            resourceInputs["sharedPartitionCipherTemplate"] = state ? state.sharedPartitionCipherTemplate : undefined;
            resourceInputs["sharedPartitionPool"] = state ? state.sharedPartitionPool : undefined;
            resourceInputs["sniBypassEnableLog"] = state ? state.sniBypassEnableLog : undefined;
            resourceInputs["sniBypassExpiredCert"] = state ? state.sniBypassExpiredCert : undefined;
            resourceInputs["sniBypassExplicitList"] = state ? state.sniBypassExplicitList : undefined;
            resourceInputs["sniBypassMissingCert"] = state ? state.sniBypassMissingCert : undefined;
            resourceInputs["sniEnableLog"] = state ? state.sniEnableLog : undefined;
            resourceInputs["sslFalseStartDisable"] = state ? state.sslFalseStartDisable : undefined;
            resourceInputs["ssliInboundEnable"] = state ? state.ssliInboundEnable : undefined;
            resourceInputs["ssliLogging"] = state ? state.ssliLogging : undefined;
            resourceInputs["sslilogging"] = state ? state.sslilogging : undefined;
            resourceInputs["sslv2BypassServiceGroup"] = state ? state.sslv2BypassServiceGroup : undefined;
            resourceInputs["startsWithLists"] = state ? state.startsWithLists : undefined;
            resourceInputs["templateCipher"] = state ? state.templateCipher : undefined;
            resourceInputs["templateCipherShared"] = state ? state.templateCipherShared : undefined;
            resourceInputs["templateHsm"] = state ? state.templateHsm : undefined;
            resourceInputs["userNameList"] = state ? state.userNameList : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["verifyCertFailAction"] = state ? state.verifyCertFailAction : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["webCategory"] = state ? state.webCategory : undefined;
            resourceInputs["webReputation"] = state ? state.webReputation : undefined;
        } else {
            const args = argsOrState as SlbTemplateClientSslArgs | undefined;
            resourceInputs["adGroupList"] = args ? args.adGroupList : undefined;
            resourceInputs["alertType"] = args ? args.alertType : undefined;
            resourceInputs["authSg"] = args ? args.authSg : undefined;
            resourceInputs["authSgDn"] = args ? args.authSgDn : undefined;
            resourceInputs["authSgFilter"] = args ? args.authSgFilter : undefined;
            resourceInputs["authUsername"] = args ? args.authUsername : undefined;
            resourceInputs["authUsernameAttribute"] = args ? args.authUsernameAttribute : undefined;
            resourceInputs["authenName"] = args ? args.authenName : undefined;
            resourceInputs["authorization"] = args ? args.authorization : undefined;
            resourceInputs["bypassCertIssuerClassListName"] = args ? args.bypassCertIssuerClassListName : undefined;
            resourceInputs["bypassCertIssuerMultiClassLists"] = args ? args.bypassCertIssuerMultiClassLists : undefined;
            resourceInputs["bypassCertSanClassListName"] = args ? args.bypassCertSanClassListName : undefined;
            resourceInputs["bypassCertSanMultiClassLists"] = args ? args.bypassCertSanMultiClassLists : undefined;
            resourceInputs["bypassCertSubjectClassListName"] = args ? args.bypassCertSubjectClassListName : undefined;
            resourceInputs["bypassCertSubjectMultiClassLists"] = args ? args.bypassCertSubjectMultiClassLists : undefined;
            resourceInputs["caCerts"] = args ? args.caCerts : undefined;
            resourceInputs["cachePersistenceListName"] = args ? args.cachePersistenceListName : undefined;
            resourceInputs["caseInsensitive"] = args ? args.caseInsensitive : undefined;
            resourceInputs["centralCertPinList"] = args ? args.centralCertPinList : undefined;
            resourceInputs["certRevokeAction"] = args ? args.certRevokeAction : undefined;
            resourceInputs["certUnknownAction"] = args ? args.certUnknownAction : undefined;
            resourceInputs["certificateIssuerContainsLists"] = args ? args.certificateIssuerContainsLists : undefined;
            resourceInputs["certificateIssuerEndsWithLists"] = args ? args.certificateIssuerEndsWithLists : undefined;
            resourceInputs["certificateIssuerEqualsLists"] = args ? args.certificateIssuerEqualsLists : undefined;
            resourceInputs["certificateIssuerStartsWithLists"] = args ? args.certificateIssuerStartsWithLists : undefined;
            resourceInputs["certificateLists"] = args ? args.certificateLists : undefined;
            resourceInputs["certificateSanContainsLists"] = args ? args.certificateSanContainsLists : undefined;
            resourceInputs["certificateSanEndsWithLists"] = args ? args.certificateSanEndsWithLists : undefined;
            resourceInputs["certificateSanEqualsLists"] = args ? args.certificateSanEqualsLists : undefined;
            resourceInputs["certificateSanStartsWithLists"] = args ? args.certificateSanStartsWithLists : undefined;
            resourceInputs["certificateSubjectContainsLists"] = args ? args.certificateSubjectContainsLists : undefined;
            resourceInputs["certificateSubjectEndsWithLists"] = args ? args.certificateSubjectEndsWithLists : undefined;
            resourceInputs["certificateSubjectEqualsLists"] = args ? args.certificateSubjectEqualsLists : undefined;
            resourceInputs["certificateSubjectStartsWithLists"] = args ? args.certificateSubjectStartsWithLists : undefined;
            resourceInputs["chainCert"] = args ? args.chainCert : undefined;
            resourceInputs["chainCertSharedStr"] = args ? args.chainCertSharedStr : undefined;
            resourceInputs["cipherWithoutPrioLists"] = args ? args.cipherWithoutPrioLists : undefined;
            resourceInputs["classListName"] = args ? args.classListName : undefined;
            resourceInputs["clientAuthCaseInsensitive"] = args ? args.clientAuthCaseInsensitive : undefined;
            resourceInputs["clientAuthClassList"] = args ? args.clientAuthClassList : undefined;
            resourceInputs["clientAuthContainsLists"] = args ? args.clientAuthContainsLists : undefined;
            resourceInputs["clientAuthEndsWithLists"] = args ? args.clientAuthEndsWithLists : undefined;
            resourceInputs["clientAuthEqualsLists"] = args ? args.clientAuthEqualsLists : undefined;
            resourceInputs["clientAuthStartsWithLists"] = args ? args.clientAuthStartsWithLists : undefined;
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["clientIpv4Lists"] = args ? args.clientIpv4Lists : undefined;
            resourceInputs["clientIpv6Lists"] = args ? args.clientIpv6Lists : undefined;
            resourceInputs["closeNotify"] = args ? args.closeNotify : undefined;
            resourceInputs["containsLists"] = args ? args.containsLists : undefined;
            resourceInputs["crlCerts"] = args ? args.crlCerts : undefined;
            resourceInputs["dgversion"] = args ? args.dgversion : undefined;
            resourceInputs["dhType"] = args ? args.dhType : undefined;
            resourceInputs["directClientServerAuth"] = args ? args.directClientServerAuth : undefined;
            resourceInputs["disableSslv3"] = args ? args.disableSslv3 : undefined;
            resourceInputs["earlyData"] = args ? args.earlyData : undefined;
            resourceInputs["ecLists"] = args ? args.ecLists : undefined;
            resourceInputs["enableSsliFtpAlg"] = args ? args.enableSsliFtpAlg : undefined;
            resourceInputs["enableTlsAlertLogging"] = args ? args.enableTlsAlertLogging : undefined;
            resourceInputs["endsWithLists"] = args ? args.endsWithLists : undefined;
            resourceInputs["equalsLists"] = args ? args.equalsLists : undefined;
            resourceInputs["exceptionAdGroupList"] = args ? args.exceptionAdGroupList : undefined;
            resourceInputs["exceptionCertificateIssuerClName"] = args ? args.exceptionCertificateIssuerClName : undefined;
            resourceInputs["exceptionCertificateSanClName"] = args ? args.exceptionCertificateSanClName : undefined;
            resourceInputs["exceptionCertificateSubjectClName"] = args ? args.exceptionCertificateSubjectClName : undefined;
            resourceInputs["exceptionClientIpv4Lists"] = args ? args.exceptionClientIpv4Lists : undefined;
            resourceInputs["exceptionClientIpv6Lists"] = args ? args.exceptionClientIpv6Lists : undefined;
            resourceInputs["exceptionServerIpv4Lists"] = args ? args.exceptionServerIpv4Lists : undefined;
            resourceInputs["exceptionServerIpv6Lists"] = args ? args.exceptionServerIpv6Lists : undefined;
            resourceInputs["exceptionSniClName"] = args ? args.exceptionSniClName : undefined;
            resourceInputs["exceptionUserNameList"] = args ? args.exceptionUserNameList : undefined;
            resourceInputs["exceptionWebCategory"] = args ? args.exceptionWebCategory : undefined;
            resourceInputs["exceptionWebReputation"] = args ? args.exceptionWebReputation : undefined;
            resourceInputs["expireHours"] = args ? args.expireHours : undefined;
            resourceInputs["forwardPassphrase"] = args ? args.forwardPassphrase : undefined;
            resourceInputs["forwardProxyAltSign"] = args ? args.forwardProxyAltSign : undefined;
            resourceInputs["forwardProxyBlockMessage"] = args ? args.forwardProxyBlockMessage : undefined;
            resourceInputs["forwardProxyCaCert"] = args ? args.forwardProxyCaCert : undefined;
            resourceInputs["forwardProxyCaKey"] = args ? args.forwardProxyCaKey : undefined;
            resourceInputs["forwardProxyCertCacheLimit"] = args ? args.forwardProxyCertCacheLimit : undefined;
            resourceInputs["forwardProxyCertCacheTimeout"] = args ? args.forwardProxyCertCacheTimeout : undefined;
            resourceInputs["forwardProxyCertExpiry"] = args ? args.forwardProxyCertExpiry : undefined;
            resourceInputs["forwardProxyCertNotReadyAction"] = args ? args.forwardProxyCertNotReadyAction : undefined;
            resourceInputs["forwardProxyCertRevokeAction"] = args ? args.forwardProxyCertRevokeAction : undefined;
            resourceInputs["forwardProxyCertUnknownAction"] = args ? args.forwardProxyCertUnknownAction : undefined;
            resourceInputs["forwardProxyCrlDisable"] = args ? args.forwardProxyCrlDisable : undefined;
            resourceInputs["forwardProxyDecryptedDscp"] = args ? args.forwardProxyDecryptedDscp : undefined;
            resourceInputs["forwardProxyDecryptedDscpBypass"] = args ? args.forwardProxyDecryptedDscpBypass : undefined;
            resourceInputs["forwardProxyEnable"] = args ? args.forwardProxyEnable : undefined;
            resourceInputs["forwardProxyEsniAction"] = args ? args.forwardProxyEsniAction : undefined;
            resourceInputs["forwardProxyFailsafeDisable"] = args ? args.forwardProxyFailsafeDisable : undefined;
            resourceInputs["forwardProxyHashPersistenceInterval"] = args ? args.forwardProxyHashPersistenceInterval : undefined;
            resourceInputs["forwardProxyLogDisable"] = args ? args.forwardProxyLogDisable : undefined;
            resourceInputs["forwardProxyNoSharedCipherAction"] = args ? args.forwardProxyNoSharedCipherAction : undefined;
            resourceInputs["forwardProxyNoSniAction"] = args ? args.forwardProxyNoSniAction : undefined;
            resourceInputs["forwardProxyOcspDisable"] = args ? args.forwardProxyOcspDisable : undefined;
            resourceInputs["forwardProxyRequireSniCertMatched"] = args ? args.forwardProxyRequireSniCertMatched : undefined;
            resourceInputs["forwardProxySelfsignRedir"] = args ? args.forwardProxySelfsignRedir : undefined;
            resourceInputs["forwardProxySslVersion"] = args ? args.forwardProxySslVersion : undefined;
            resourceInputs["forwardProxyTrustedCaLists"] = args ? args.forwardProxyTrustedCaLists : undefined;
            resourceInputs["forwardProxyVerifyCertFailAction"] = args ? args.forwardProxyVerifyCertFailAction : undefined;
            resourceInputs["fpAltCert"] = args ? args.fpAltCert : undefined;
            resourceInputs["fpAltChainCert"] = args ? args.fpAltChainCert : undefined;
            resourceInputs["fpAltKey"] = args ? args.fpAltKey : undefined;
            resourceInputs["fpAltPassphrase"] = args ? args.fpAltPassphrase : undefined;
            resourceInputs["fpAltShared"] = args ? args.fpAltShared : undefined;
            resourceInputs["fpCaCertificate"] = args ? args.fpCaCertificate : undefined;
            resourceInputs["fpCaCertificateShared"] = args ? args.fpCaCertificateShared : undefined;
            resourceInputs["fpCaChainCert"] = args ? args.fpCaChainCert : undefined;
            resourceInputs["fpCaKey"] = args ? args.fpCaKey : undefined;
            resourceInputs["fpCaKeyPassphrase"] = args ? args.fpCaKeyPassphrase : undefined;
            resourceInputs["fpCaKeyShared"] = args ? args.fpCaKeyShared : undefined;
            resourceInputs["fpCaShared"] = args ? args.fpCaShared : undefined;
            resourceInputs["fpCertExtAiaCaIssuers"] = args ? args.fpCertExtAiaCaIssuers : undefined;
            resourceInputs["fpCertExtAiaOcsp"] = args ? args.fpCertExtAiaOcsp : undefined;
            resourceInputs["fpCertExtCrldp"] = args ? args.fpCertExtCrldp : undefined;
            resourceInputs["fpCertFetchAutonat"] = args ? args.fpCertFetchAutonat : undefined;
            resourceInputs["fpCertFetchAutonatPrecedence"] = args ? args.fpCertFetchAutonatPrecedence : undefined;
            resourceInputs["fpCertFetchNatpoolName"] = args ? args.fpCertFetchNatpoolName : undefined;
            resourceInputs["fpCertFetchNatpoolNameShared"] = args ? args.fpCertFetchNatpoolNameShared : undefined;
            resourceInputs["fpCertFetchNatpoolPrecedence"] = args ? args.fpCertFetchNatpoolPrecedence : undefined;
            resourceInputs["fpEsniAction"] = args ? args.fpEsniAction : undefined;
            resourceInputs["handshakeLoggingEnable"] = args ? args.handshakeLoggingEnable : undefined;
            resourceInputs["hsmType"] = args ? args.hsmType : undefined;
            resourceInputs["inspectCertificateIssuerClName"] = args ? args.inspectCertificateIssuerClName : undefined;
            resourceInputs["inspectCertificateSanClName"] = args ? args.inspectCertificateSanClName : undefined;
            resourceInputs["inspectCertificateSubjectClName"] = args ? args.inspectCertificateSubjectClName : undefined;
            resourceInputs["inspectListName"] = args ? args.inspectListName : undefined;
            resourceInputs["ja3Enable"] = args ? args.ja3Enable : undefined;
            resourceInputs["ja3InsertHttpHeader"] = args ? args.ja3InsertHttpHeader : undefined;
            resourceInputs["ja3RejectClassList"] = args ? args.ja3RejectClassList : undefined;
            resourceInputs["ja3RejectMaxNumberPerHost"] = args ? args.ja3RejectMaxNumberPerHost : undefined;
            resourceInputs["ja3Ttl"] = args ? args.ja3Ttl : undefined;
            resourceInputs["ldapBaseDnFromCert"] = args ? args.ldapBaseDnFromCert : undefined;
            resourceInputs["ldapSearchFilter"] = args ? args.ldapSearchFilter : undefined;
            resourceInputs["localCertPinList"] = args ? args.localCertPinList : undefined;
            resourceInputs["localLogging"] = args ? args.localLogging : undefined;
            resourceInputs["multiClassLists"] = args ? args.multiClassLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noAntiReplay"] = args ? args.noAntiReplay : undefined;
            resourceInputs["noSharedCipherAction"] = args ? args.noSharedCipherAction : undefined;
            resourceInputs["nonSslBypassL4session"] = args ? args.nonSslBypassL4session : undefined;
            resourceInputs["nonSslBypassServiceGroup"] = args ? args.nonSslBypassServiceGroup : undefined;
            resourceInputs["notafter"] = args ? args.notafter : undefined;
            resourceInputs["notafterday"] = args ? args.notafterday : undefined;
            resourceInputs["notaftermonth"] = args ? args.notaftermonth : undefined;
            resourceInputs["notafteryear"] = args ? args.notafteryear : undefined;
            resourceInputs["notbefore"] = args ? args.notbefore : undefined;
            resourceInputs["notbeforeday"] = args ? args.notbeforeday : undefined;
            resourceInputs["notbeforemonth"] = args ? args.notbeforemonth : undefined;
            resourceInputs["notbeforeyear"] = args ? args.notbeforeyear : undefined;
            resourceInputs["ocspStapling"] = args ? args.ocspStapling : undefined;
            resourceInputs["ocspstCaCert"] = args ? args.ocspstCaCert : undefined;
            resourceInputs["ocspstOcsp"] = args ? args.ocspstOcsp : undefined;
            resourceInputs["ocspstSg"] = args ? args.ocspstSg : undefined;
            resourceInputs["ocspstSgDays"] = args ? args.ocspstSgDays : undefined;
            resourceInputs["ocspstSgHours"] = args ? args.ocspstSgHours : undefined;
            resourceInputs["ocspstSgMinutes"] = args ? args.ocspstSgMinutes : undefined;
            resourceInputs["ocspstSgTimeout"] = args ? args.ocspstSgTimeout : undefined;
            resourceInputs["ocspstSrvr"] = args ? args.ocspstSrvr : undefined;
            resourceInputs["ocspstSrvrDays"] = args ? args.ocspstSrvrDays : undefined;
            resourceInputs["ocspstSrvrHours"] = args ? args.ocspstSrvrHours : undefined;
            resourceInputs["ocspstSrvrMinutes"] = args ? args.ocspstSrvrMinutes : undefined;
            resourceInputs["ocspstSrvrTimeout"] = args ? args.ocspstSrvrTimeout : undefined;
            resourceInputs["renegotiationDisable"] = args ? args.renegotiationDisable : undefined;
            resourceInputs["reqCaLists"] = args ? args.reqCaLists : undefined;
            resourceInputs["requireWebCategory"] = args ? args.requireWebCategory : undefined;
            resourceInputs["serverIpv4Lists"] = args ? args.serverIpv4Lists : undefined;
            resourceInputs["serverIpv6Lists"] = args ? args.serverIpv6Lists : undefined;
            resourceInputs["serverNameAutoMap"] = args ? args.serverNameAutoMap : undefined;
            resourceInputs["serverNameLists"] = args ? args.serverNameLists : undefined;
            resourceInputs["sessionCacheSize"] = args ? args.sessionCacheSize : undefined;
            resourceInputs["sessionCacheTimeout"] = args ? args.sessionCacheTimeout : undefined;
            resourceInputs["sessionTicketDisable"] = args ? args.sessionTicketDisable : undefined;
            resourceInputs["sessionTicketLifetime"] = args ? args.sessionTicketLifetime : undefined;
            resourceInputs["sharedPartitionCipherTemplate"] = args ? args.sharedPartitionCipherTemplate : undefined;
            resourceInputs["sharedPartitionPool"] = args ? args.sharedPartitionPool : undefined;
            resourceInputs["sniBypassEnableLog"] = args ? args.sniBypassEnableLog : undefined;
            resourceInputs["sniBypassExpiredCert"] = args ? args.sniBypassExpiredCert : undefined;
            resourceInputs["sniBypassExplicitList"] = args ? args.sniBypassExplicitList : undefined;
            resourceInputs["sniBypassMissingCert"] = args ? args.sniBypassMissingCert : undefined;
            resourceInputs["sniEnableLog"] = args ? args.sniEnableLog : undefined;
            resourceInputs["sslFalseStartDisable"] = args ? args.sslFalseStartDisable : undefined;
            resourceInputs["ssliInboundEnable"] = args ? args.ssliInboundEnable : undefined;
            resourceInputs["ssliLogging"] = args ? args.ssliLogging : undefined;
            resourceInputs["sslilogging"] = args ? args.sslilogging : undefined;
            resourceInputs["sslv2BypassServiceGroup"] = args ? args.sslv2BypassServiceGroup : undefined;
            resourceInputs["startsWithLists"] = args ? args.startsWithLists : undefined;
            resourceInputs["templateCipher"] = args ? args.templateCipher : undefined;
            resourceInputs["templateCipherShared"] = args ? args.templateCipherShared : undefined;
            resourceInputs["templateHsm"] = args ? args.templateHsm : undefined;
            resourceInputs["userNameList"] = args ? args.userNameList : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["verifyCertFailAction"] = args ? args.verifyCertFailAction : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["webCategory"] = args ? args.webCategory : undefined;
            resourceInputs["webReputation"] = args ? args.webReputation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateClientSsl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateClientSsl resources.
 */
export interface SlbTemplateClientSslState {
    /**
     * Forward proxy bypass if ad-group matches class-list
     */
    adGroupList?: pulumi.Input<string>;
    /**
     * 'fatal': Log fatal alerts;
     */
    alertType?: pulumi.Input<string>;
    /**
     * Specify authorization LDAP service group
     */
    authSg?: pulumi.Input<string>;
    /**
     * Use Subject DN as LDAP search base DN
     */
    authSgDn?: pulumi.Input<number>;
    /**
     * Specify LDAP search filter
     */
    authSgFilter?: pulumi.Input<string>;
    /**
     * Specify the Username Field in the Client Certificate(If multi-fields are specificed, prior one has higher priority)
     */
    authUsername?: pulumi.Input<string>;
    /**
     * Specify attribute name of username for client SSL authorization
     */
    authUsernameAttribute?: pulumi.Input<string>;
    /**
     * Specify authorization LDAP server name
     */
    authenName?: pulumi.Input<string>;
    /**
     * Specify LDAP server for client SSL authorizaiton
     */
    authorization?: pulumi.Input<number>;
    /**
     * Class List Name
     */
    bypassCertIssuerClassListName?: pulumi.Input<string>;
    bypassCertIssuerMultiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslBypassCertIssuerMultiClassList>[]>;
    /**
     * Class List Name
     */
    bypassCertSanClassListName?: pulumi.Input<string>;
    bypassCertSanMultiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslBypassCertSanMultiClassList>[]>;
    /**
     * Class List Name
     */
    bypassCertSubjectClassListName?: pulumi.Input<string>;
    bypassCertSubjectMultiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslBypassCertSubjectMultiClassList>[]>;
    caCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCaCert>[]>;
    /**
     * Class List Name
     */
    cachePersistenceListName?: pulumi.Input<string>;
    /**
     * Case insensitive forward proxy bypass
     */
    caseInsensitive?: pulumi.Input<number>;
    /**
     * Forward proxy bypass if SNI string is contained in central updated cert-pinning-candidate list
     */
    centralCertPinList?: pulumi.Input<number>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    certRevokeAction?: pulumi.Input<string>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    certUnknownAction?: pulumi.Input<string>;
    certificateIssuerContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerContainsList>[]>;
    certificateIssuerEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerEndsWithList>[]>;
    certificateIssuerEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerEqualsList>[]>;
    certificateIssuerStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerStartsWithList>[]>;
    certificateLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateList>[]>;
    certificateSanContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanContainsList>[]>;
    certificateSanEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanEndsWithList>[]>;
    certificateSanEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanEqualsList>[]>;
    certificateSanStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanStartsWithList>[]>;
    certificateSubjectContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectContainsList>[]>;
    certificateSubjectEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectEndsWithList>[]>;
    certificateSubjectEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectEqualsList>[]>;
    certificateSubjectStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectStartsWithList>[]>;
    /**
     * Chain Certificate Name
     */
    chainCert?: pulumi.Input<string>;
    /**
     * Chain Certificate Name
     */
    chainCertSharedStr?: pulumi.Input<string>;
    cipherWithoutPrioLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCipherWithoutPrioList>[]>;
    /**
     * Class List Name
     */
    classListName?: pulumi.Input<string>;
    /**
     * Case insensitive forward proxy client auth bypass
     */
    clientAuthCaseInsensitive?: pulumi.Input<number>;
    /**
     * Forward proxy client auth bypass if SNI string matches class-list (Class List Name)
     */
    clientAuthClassList?: pulumi.Input<string>;
    clientAuthContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthContainsList>[]>;
    clientAuthEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthEndsWithList>[]>;
    clientAuthEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthEqualsList>[]>;
    clientAuthStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthStartsWithList>[]>;
    /**
     * 'Ignore': Don't request client certificate; 'Require': Require client certificate; 'Request': Request client
     * certificate;
     */
    clientCertificate?: pulumi.Input<string>;
    clientIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientIpv4List>[]>;
    clientIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientIpv6List>[]>;
    /**
     * Send close notification when terminate connection
     */
    closeNotify?: pulumi.Input<number>;
    containsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslContainsList>[]>;
    crlCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCrlCert>[]>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    dgversion?: pulumi.Input<number>;
    /**
     * '1024': 1024; '1024-dsa': 1024-dsa; '2048': 2048;
     */
    dhType?: pulumi.Input<string>;
    /**
     * Let backend server does SSL client authentication directly
     */
    directClientServerAuth?: pulumi.Input<number>;
    /**
     * Reject Client requests for SSL version 3
     */
    disableSslv3?: pulumi.Input<number>;
    /**
     * Enable TLS 1.3 early data (0-RTT)
     */
    earlyData?: pulumi.Input<number>;
    ecLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslEcList>[]>;
    /**
     * Enable SSLi FTP over TLS support at which port
     */
    enableSsliFtpAlg?: pulumi.Input<number>;
    /**
     * Enable TLS alert logging
     */
    enableTlsAlertLogging?: pulumi.Input<number>;
    endsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslEndsWithList>[]>;
    equalsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslEqualsList>[]>;
    /**
     * Exceptions to forward proxy bypass if ad-group matches class-list
     */
    exceptionAdGroupList?: pulumi.Input<string>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionCertificateIssuerClName?: pulumi.Input<string>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionCertificateSanClName?: pulumi.Input<string>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionCertificateSubjectClName?: pulumi.Input<string>;
    exceptionClientIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionClientIpv4List>[]>;
    exceptionClientIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionClientIpv6List>[]>;
    exceptionServerIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionServerIpv4List>[]>;
    exceptionServerIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionServerIpv6List>[]>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionSniClName?: pulumi.Input<string>;
    /**
     * Exceptions to forward proxy bypass if user-name matches class-list
     */
    exceptionUserNameList?: pulumi.Input<string>;
    exceptionWebCategory?: pulumi.Input<inputs.SlbTemplateClientSslExceptionWebCategory>;
    exceptionWebReputation?: pulumi.Input<inputs.SlbTemplateClientSslExceptionWebReputation>;
    /**
     * Certificate lifetime in hours
     */
    expireHours?: pulumi.Input<number>;
    /**
     * Password Phrase
     */
    forwardPassphrase?: pulumi.Input<string>;
    /**
     * Forward proxy alternate signing cert and key
     */
    forwardProxyAltSign?: pulumi.Input<number>;
    /**
     * Message to be included on the block page (Message, enclose in quotes if spaces are present)
     */
    forwardProxyBlockMessage?: pulumi.Input<string>;
    /**
     * CA Certificate for forward proxy (SSL forward proxy CA Certificate Name)
     */
    forwardProxyCaCert?: pulumi.Input<string>;
    /**
     * CA Private Key for forward proxy (SSL forward proxy CA Key Name)
     */
    forwardProxyCaKey?: pulumi.Input<string>;
    /**
     * Certificate cache size limit, default is 524288 (set to 0 for unlimited size)
     */
    forwardProxyCertCacheLimit?: pulumi.Input<number>;
    /**
     * Certificate cache timeout, default is 1 hour (seconds, set to 0 for never timeout)
     */
    forwardProxyCertCacheTimeout?: pulumi.Input<number>;
    /**
     * Adjust certificate expiry relative to the time when it is created on the device
     */
    forwardProxyCertExpiry?: pulumi.Input<number>;
    /**
     * 'bypass': bypass the connection; 'reset': reset the connection; 'intercept': wait for cert and then inspect the
     * connection;
     */
    forwardProxyCertNotReadyAction?: pulumi.Input<string>;
    /**
     * Action taken if a certificate is irreversibly revoked, bypass SSLi processing by default
     */
    forwardProxyCertRevokeAction?: pulumi.Input<number>;
    /**
     * Action taken if a certificate revocation status is unknown, bypass SSLi processing by default
     */
    forwardProxyCertUnknownAction?: pulumi.Input<number>;
    /**
     * Disable Certificate Revocation List checking for forward proxy
     */
    forwardProxyCrlDisable?: pulumi.Input<number>;
    /**
     * Apply a DSCP to decrypted and bypassed traffic (DSCP to apply to decrypted traffic)
     */
    forwardProxyDecryptedDscp?: pulumi.Input<number>;
    /**
     * DSCP to apply to bypassed traffic
     */
    forwardProxyDecryptedDscpBypass?: pulumi.Input<number>;
    /**
     * Enable SSL forward proxy
     */
    forwardProxyEnable?: pulumi.Input<number>;
    /**
     * Action taken if receiving encrypted server name indication extension in client hello MSG, bypass the connection by
     * default
     */
    forwardProxyEsniAction?: pulumi.Input<number>;
    /**
     * Disable Failsafe for SSL forward proxy
     */
    forwardProxyFailsafeDisable?: pulumi.Input<number>;
    /**
     * Set the time interval to save the hash persistence certs (Interval value, in minutes)
     */
    forwardProxyHashPersistenceInterval?: pulumi.Input<number>;
    /**
     * Disable SSL forward proxy logging
     */
    forwardProxyLogDisable?: pulumi.Input<number>;
    /**
     * Action taken if handshake fails due to no shared ciper, close the connection by default
     */
    forwardProxyNoSharedCipherAction?: pulumi.Input<number>;
    /**
     * 'intercept': intercept in no SNI case; 'bypass': bypass in no SNI case; 'reset': reset in no SNI case;
     */
    forwardProxyNoSniAction?: pulumi.Input<string>;
    /**
     * Disable ocsp-stapling for forward proxy
     */
    forwardProxyOcspDisable?: pulumi.Input<number>;
    /**
     * 'no-match-action-inspect': Inspected if not matched; 'no-match-action-drop': Dropped if not matched;
     */
    forwardProxyRequireSniCertMatched?: pulumi.Input<string>;
    /**
     * Redirect connections to pages with self signed certs to a warning page
     */
    forwardProxySelfsignRedir?: pulumi.Input<number>;
    /**
     * TLS/SSL version, default is TLS1.2 (TLS/SSL version: 31-TLSv1.0, 32-TLSv1.1, 33-TLSv1.2 and 34-TLSv1.3)
     */
    forwardProxySslVersion?: pulumi.Input<number>;
    forwardProxyTrustedCaLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslForwardProxyTrustedCaList>[]>;
    /**
     * Action taken if certificate verification fails, close the connection by default
     */
    forwardProxyVerifyCertFailAction?: pulumi.Input<number>;
    /**
     * CA Certificate for forward proxy alternate signing (Certificate name)
     */
    fpAltCert?: pulumi.Input<string>;
    /**
     * Chain Certificate (Chain Certificate Name)
     */
    fpAltChainCert?: pulumi.Input<string>;
    /**
     * CA Private Key for forward proxy alternate signing (Key name)
     */
    fpAltKey?: pulumi.Input<string>;
    /**
     * Password Phrase
     */
    fpAltPassphrase?: pulumi.Input<string>;
    /**
     * Alternate CA Certificate and Private Key Partition Shared
     */
    fpAltShared?: pulumi.Input<number>;
    /**
     * CA Certificate for forward proxy (SSL forward proxy CA Certificate Name)
     */
    fpCaCertificate?: pulumi.Input<string>;
    /**
     * CA Private Key Partition Shared
     */
    fpCaCertificateShared?: pulumi.Input<number>;
    /**
     * Chain Certificate (Chain Certificate Name)
     */
    fpCaChainCert?: pulumi.Input<string>;
    /**
     * CA Private Key for forward proxy (SSL forward proxy CA Key Name)
     */
    fpCaKey?: pulumi.Input<string>;
    /**
     * Password Phrase
     */
    fpCaKeyPassphrase?: pulumi.Input<string>;
    /**
     * CA Private Key Partition Shared
     */
    fpCaKeyShared?: pulumi.Input<number>;
    /**
     * CA Certificate Partition Shared
     */
    fpCaShared?: pulumi.Input<number>;
    /**
     * CA Issuers (Authority Information Access URI)
     */
    fpCertExtAiaCaIssuers?: pulumi.Input<string>;
    /**
     * OCSP (Authority Information Access URI)
     */
    fpCertExtAiaOcsp?: pulumi.Input<string>;
    /**
     * CRL Distribution Point (CRL Distribution Point URI)
     */
    fpCertExtCrldp?: pulumi.Input<string>;
    /**
     * 'auto': Configure auto NAT for server certificate fetching;
     */
    fpCertFetchAutonat?: pulumi.Input<string>;
    /**
     * Set this NAT pool as higher precedence than other source NAT like configued under template policy
     */
    fpCertFetchAutonatPrecedence?: pulumi.Input<number>;
    /**
     * Specify NAT pool or pool group
     */
    fpCertFetchNatpoolName?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    fpCertFetchNatpoolNameShared?: pulumi.Input<string>;
    /**
     * Set this NAT pool as higher precedence than other source NAT like configued under template policy
     */
    fpCertFetchNatpoolPrecedence?: pulumi.Input<number>;
    /**
     * 'bypass': bypass SSLi processing; 'drop': close the connection;
     */
    fpEsniAction?: pulumi.Input<string>;
    /**
     * Enable SSL handshake logging
     */
    handshakeLoggingEnable?: pulumi.Input<number>;
    /**
     * 'thales-embed': Thales embed key; 'thales-hwcrhk': Thales hwcrhk Key;
     */
    hsmType?: pulumi.Input<string>;
    /**
     * Forward proxy Inspect if Certificate issuer matches class-list
     */
    inspectCertificateIssuerClName?: pulumi.Input<string>;
    /**
     * Forward proxy Inspect if Certificate Subject Alternative Name matches class-list
     */
    inspectCertificateSanClName?: pulumi.Input<string>;
    /**
     * Forward proxy Inspect if Certificate Subject matches class-list
     */
    inspectCertificateSubjectClName?: pulumi.Input<string>;
    /**
     * Class List Name
     */
    inspectListName?: pulumi.Input<string>;
    /**
     * Enable JA3 features
     */
    ja3Enable?: pulumi.Input<number>;
    /**
     * Insert the JA3 hash into this request as a HTTP header (HTTP Header Name)
     */
    ja3InsertHttpHeader?: pulumi.Input<string>;
    /**
     * Drop request if the JA3 hash matches this class-list (type string-case-insensitive) (Class-List Name)
     */
    ja3RejectClassList?: pulumi.Input<string>;
    /**
     * Drop request if numbers of JA3 of this client address exceeded
     */
    ja3RejectMaxNumberPerHost?: pulumi.Input<number>;
    /**
     * seconds to keep each JA3 record
     */
    ja3Ttl?: pulumi.Input<number>;
    /**
     * Use Subject DN as LDAP search base DN
     */
    ldapBaseDnFromCert?: pulumi.Input<number>;
    /**
     * Specify LDAP search filter
     */
    ldapSearchFilter?: pulumi.Input<string>;
    localCertPinList?: pulumi.Input<inputs.SlbTemplateClientSslLocalCertPinList>;
    /**
     * Enable local logging
     */
    localLogging?: pulumi.Input<number>;
    multiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslMultiClassList>[]>;
    /**
     * Client SSL Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Disable anti-replay protection for TLS 1.3 early data (0-RTT data)
     */
    noAntiReplay?: pulumi.Input<number>;
    /**
     * 'bypass': bypass SSLi processing; 'drop': close the connection;
     */
    noSharedCipherAction?: pulumi.Input<string>;
    /**
     * Handle the non-ssl session as L4 for performance optimization
     */
    nonSslBypassL4session?: pulumi.Input<number>;
    /**
     * Service Group for Bypass non-ssl traffic (Service Group Name)
     */
    nonSslBypassServiceGroup?: pulumi.Input<string>;
    /**
     * notAfter date
     */
    notafter?: pulumi.Input<number>;
    /**
     * Day
     */
    notafterday?: pulumi.Input<number>;
    /**
     * Month
     */
    notaftermonth?: pulumi.Input<number>;
    /**
     * Year
     */
    notafteryear?: pulumi.Input<number>;
    /**
     * notBefore date
     */
    notbefore?: pulumi.Input<number>;
    /**
     * Day
     */
    notbeforeday?: pulumi.Input<number>;
    /**
     * Month
     */
    notbeforemonth?: pulumi.Input<number>;
    /**
     * Year
     */
    notbeforeyear?: pulumi.Input<number>;
    /**
     * Config OCSP stapling support
     */
    ocspStapling?: pulumi.Input<number>;
    /**
     * CA certificate
     */
    ocspstCaCert?: pulumi.Input<string>;
    /**
     * Specify OCSP Authentication
     */
    ocspstOcsp?: pulumi.Input<number>;
    /**
     * Specify authentication service group
     */
    ocspstSg?: pulumi.Input<string>;
    /**
     * Specify update period, in days
     */
    ocspstSgDays?: pulumi.Input<number>;
    /**
     * Specify update period, in hours
     */
    ocspstSgHours?: pulumi.Input<number>;
    /**
     * Specify update period, in minutes
     */
    ocspstSgMinutes?: pulumi.Input<number>;
    /**
     * Specify retry timeout (Default is 30 mins)
     */
    ocspstSgTimeout?: pulumi.Input<number>;
    /**
     * Specify OCSP authentication server
     */
    ocspstSrvr?: pulumi.Input<string>;
    /**
     * Specify update period, in days
     */
    ocspstSrvrDays?: pulumi.Input<number>;
    /**
     * Specify update period, in hours
     */
    ocspstSrvrHours?: pulumi.Input<number>;
    /**
     * Specify update period, in minutes
     */
    ocspstSrvrMinutes?: pulumi.Input<number>;
    /**
     * Specify retry timeout (Default is 30 mins)
     */
    ocspstSrvrTimeout?: pulumi.Input<number>;
    /**
     * Disable SSL renegotiation
     */
    renegotiationDisable?: pulumi.Input<number>;
    reqCaLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslReqCaList>[]>;
    /**
     * Wait for web category to be resolved before taking bypass decision
     */
    requireWebCategory?: pulumi.Input<number>;
    serverIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslServerIpv4List>[]>;
    serverIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslServerIpv6List>[]>;
    /**
     * Enable automatic mapping of server name indication in Client hello extension
     */
    serverNameAutoMap?: pulumi.Input<number>;
    serverNameLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslServerNameList>[]>;
    /**
     * Session Cache Size (Maximum cache size. Default value 0 (Session ID reuse disabled))
     */
    sessionCacheSize?: pulumi.Input<number>;
    /**
     * Session Cache Timeout (Timeout value, in seconds. Default value 0 (Session cache timeout disabled))
     */
    sessionCacheTimeout?: pulumi.Input<number>;
    /**
     * Disable client side session ticket support
     */
    sessionTicketDisable?: pulumi.Input<number>;
    /**
     * Session ticket lifetime in seconds from stateless session resumption (Lifetime value in seconds. Default value 0
     * (Session ticket lifetime is 7200 seconds))
     */
    sessionTicketLifetime?: pulumi.Input<number>;
    /**
     * Reference a cipher template from shared partition
     */
    sharedPartitionCipherTemplate?: pulumi.Input<number>;
    /**
     * Reference a NAT pool or pool group from shared partition
     */
    sharedPartitionPool?: pulumi.Input<number>;
    /**
     * Enable logging when bypass event happens, disabled by default
     */
    sniBypassEnableLog?: pulumi.Input<number>;
    /**
     * Bypass when certificate expired
     */
    sniBypassExpiredCert?: pulumi.Input<number>;
    /**
     * Bypass when matched explicit bypass list (Specify class list name)
     */
    sniBypassExplicitList?: pulumi.Input<string>;
    /**
     * Bypass when missing cert/key
     */
    sniBypassMissingCert?: pulumi.Input<number>;
    /**
     * Enable logging of sni-auto-map failures. Disable by default
     */
    sniEnableLog?: pulumi.Input<number>;
    /**
     * disable SSL False Start
     */
    sslFalseStartDisable?: pulumi.Input<number>;
    /**
     * Enable inbound SSLi
     */
    ssliInboundEnable?: pulumi.Input<number>;
    /**
     * SSLi logging level, default is error logging only
     */
    ssliLogging?: pulumi.Input<number>;
    /**
     * 'disable': Disable all logging; 'all': enable all logging(error, info);
     */
    sslilogging?: pulumi.Input<string>;
    /**
     * Service Group for Bypass SSLV2 (Service Group Name)
     */
    sslv2BypassServiceGroup?: pulumi.Input<string>;
    startsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslStartsWithList>[]>;
    /**
     * Cipher Template Name
     */
    templateCipher?: pulumi.Input<string>;
    /**
     * Cipher Template Name
     */
    templateCipherShared?: pulumi.Input<string>;
    /**
     * HSM Template (HSM Template Name)
     */
    templateHsm?: pulumi.Input<string>;
    /**
     * Forward proxy bypass if user-name matches class-list
     */
    userNameList?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    verifyCertFailAction?: pulumi.Input<string>;
    /**
     * TLS/SSL version, default is the highest number supported (TLS/SSL version: 30-SSLv3.0, 31-TLSv1.0, 32-TLSv1.1,
     * 33-TLSv1.2 and 34-TLSv1.3)
     */
    version?: pulumi.Input<number>;
    webCategory?: pulumi.Input<inputs.SlbTemplateClientSslWebCategory>;
    webReputation?: pulumi.Input<inputs.SlbTemplateClientSslWebReputation>;
}

/**
 * The set of arguments for constructing a SlbTemplateClientSsl resource.
 */
export interface SlbTemplateClientSslArgs {
    /**
     * Forward proxy bypass if ad-group matches class-list
     */
    adGroupList?: pulumi.Input<string>;
    /**
     * 'fatal': Log fatal alerts;
     */
    alertType?: pulumi.Input<string>;
    /**
     * Specify authorization LDAP service group
     */
    authSg?: pulumi.Input<string>;
    /**
     * Use Subject DN as LDAP search base DN
     */
    authSgDn?: pulumi.Input<number>;
    /**
     * Specify LDAP search filter
     */
    authSgFilter?: pulumi.Input<string>;
    /**
     * Specify the Username Field in the Client Certificate(If multi-fields are specificed, prior one has higher priority)
     */
    authUsername?: pulumi.Input<string>;
    /**
     * Specify attribute name of username for client SSL authorization
     */
    authUsernameAttribute?: pulumi.Input<string>;
    /**
     * Specify authorization LDAP server name
     */
    authenName?: pulumi.Input<string>;
    /**
     * Specify LDAP server for client SSL authorizaiton
     */
    authorization?: pulumi.Input<number>;
    /**
     * Class List Name
     */
    bypassCertIssuerClassListName?: pulumi.Input<string>;
    bypassCertIssuerMultiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslBypassCertIssuerMultiClassList>[]>;
    /**
     * Class List Name
     */
    bypassCertSanClassListName?: pulumi.Input<string>;
    bypassCertSanMultiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslBypassCertSanMultiClassList>[]>;
    /**
     * Class List Name
     */
    bypassCertSubjectClassListName?: pulumi.Input<string>;
    bypassCertSubjectMultiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslBypassCertSubjectMultiClassList>[]>;
    caCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCaCert>[]>;
    /**
     * Class List Name
     */
    cachePersistenceListName?: pulumi.Input<string>;
    /**
     * Case insensitive forward proxy bypass
     */
    caseInsensitive?: pulumi.Input<number>;
    /**
     * Forward proxy bypass if SNI string is contained in central updated cert-pinning-candidate list
     */
    centralCertPinList?: pulumi.Input<number>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    certRevokeAction?: pulumi.Input<string>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    certUnknownAction?: pulumi.Input<string>;
    certificateIssuerContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerContainsList>[]>;
    certificateIssuerEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerEndsWithList>[]>;
    certificateIssuerEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerEqualsList>[]>;
    certificateIssuerStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateIssuerStartsWithList>[]>;
    certificateLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateList>[]>;
    certificateSanContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanContainsList>[]>;
    certificateSanEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanEndsWithList>[]>;
    certificateSanEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanEqualsList>[]>;
    certificateSanStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSanStartsWithList>[]>;
    certificateSubjectContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectContainsList>[]>;
    certificateSubjectEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectEndsWithList>[]>;
    certificateSubjectEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectEqualsList>[]>;
    certificateSubjectStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCertificateSubjectStartsWithList>[]>;
    /**
     * Chain Certificate Name
     */
    chainCert?: pulumi.Input<string>;
    /**
     * Chain Certificate Name
     */
    chainCertSharedStr?: pulumi.Input<string>;
    cipherWithoutPrioLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCipherWithoutPrioList>[]>;
    /**
     * Class List Name
     */
    classListName?: pulumi.Input<string>;
    /**
     * Case insensitive forward proxy client auth bypass
     */
    clientAuthCaseInsensitive?: pulumi.Input<number>;
    /**
     * Forward proxy client auth bypass if SNI string matches class-list (Class List Name)
     */
    clientAuthClassList?: pulumi.Input<string>;
    clientAuthContainsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthContainsList>[]>;
    clientAuthEndsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthEndsWithList>[]>;
    clientAuthEqualsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthEqualsList>[]>;
    clientAuthStartsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientAuthStartsWithList>[]>;
    /**
     * 'Ignore': Don't request client certificate; 'Require': Require client certificate; 'Request': Request client
     * certificate;
     */
    clientCertificate?: pulumi.Input<string>;
    clientIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientIpv4List>[]>;
    clientIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslClientIpv6List>[]>;
    /**
     * Send close notification when terminate connection
     */
    closeNotify?: pulumi.Input<number>;
    containsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslContainsList>[]>;
    crlCerts?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslCrlCert>[]>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    dgversion?: pulumi.Input<number>;
    /**
     * '1024': 1024; '1024-dsa': 1024-dsa; '2048': 2048;
     */
    dhType?: pulumi.Input<string>;
    /**
     * Let backend server does SSL client authentication directly
     */
    directClientServerAuth?: pulumi.Input<number>;
    /**
     * Reject Client requests for SSL version 3
     */
    disableSslv3?: pulumi.Input<number>;
    /**
     * Enable TLS 1.3 early data (0-RTT)
     */
    earlyData?: pulumi.Input<number>;
    ecLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslEcList>[]>;
    /**
     * Enable SSLi FTP over TLS support at which port
     */
    enableSsliFtpAlg?: pulumi.Input<number>;
    /**
     * Enable TLS alert logging
     */
    enableTlsAlertLogging?: pulumi.Input<number>;
    endsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslEndsWithList>[]>;
    equalsLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslEqualsList>[]>;
    /**
     * Exceptions to forward proxy bypass if ad-group matches class-list
     */
    exceptionAdGroupList?: pulumi.Input<string>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionCertificateIssuerClName?: pulumi.Input<string>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionCertificateSanClName?: pulumi.Input<string>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionCertificateSubjectClName?: pulumi.Input<string>;
    exceptionClientIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionClientIpv4List>[]>;
    exceptionClientIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionClientIpv6List>[]>;
    exceptionServerIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionServerIpv4List>[]>;
    exceptionServerIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslExceptionServerIpv6List>[]>;
    /**
     * Exceptions to forward-proxy-bypass
     */
    exceptionSniClName?: pulumi.Input<string>;
    /**
     * Exceptions to forward proxy bypass if user-name matches class-list
     */
    exceptionUserNameList?: pulumi.Input<string>;
    exceptionWebCategory?: pulumi.Input<inputs.SlbTemplateClientSslExceptionWebCategory>;
    exceptionWebReputation?: pulumi.Input<inputs.SlbTemplateClientSslExceptionWebReputation>;
    /**
     * Certificate lifetime in hours
     */
    expireHours?: pulumi.Input<number>;
    /**
     * Password Phrase
     */
    forwardPassphrase?: pulumi.Input<string>;
    /**
     * Forward proxy alternate signing cert and key
     */
    forwardProxyAltSign?: pulumi.Input<number>;
    /**
     * Message to be included on the block page (Message, enclose in quotes if spaces are present)
     */
    forwardProxyBlockMessage?: pulumi.Input<string>;
    /**
     * CA Certificate for forward proxy (SSL forward proxy CA Certificate Name)
     */
    forwardProxyCaCert?: pulumi.Input<string>;
    /**
     * CA Private Key for forward proxy (SSL forward proxy CA Key Name)
     */
    forwardProxyCaKey?: pulumi.Input<string>;
    /**
     * Certificate cache size limit, default is 524288 (set to 0 for unlimited size)
     */
    forwardProxyCertCacheLimit?: pulumi.Input<number>;
    /**
     * Certificate cache timeout, default is 1 hour (seconds, set to 0 for never timeout)
     */
    forwardProxyCertCacheTimeout?: pulumi.Input<number>;
    /**
     * Adjust certificate expiry relative to the time when it is created on the device
     */
    forwardProxyCertExpiry?: pulumi.Input<number>;
    /**
     * 'bypass': bypass the connection; 'reset': reset the connection; 'intercept': wait for cert and then inspect the
     * connection;
     */
    forwardProxyCertNotReadyAction?: pulumi.Input<string>;
    /**
     * Action taken if a certificate is irreversibly revoked, bypass SSLi processing by default
     */
    forwardProxyCertRevokeAction?: pulumi.Input<number>;
    /**
     * Action taken if a certificate revocation status is unknown, bypass SSLi processing by default
     */
    forwardProxyCertUnknownAction?: pulumi.Input<number>;
    /**
     * Disable Certificate Revocation List checking for forward proxy
     */
    forwardProxyCrlDisable?: pulumi.Input<number>;
    /**
     * Apply a DSCP to decrypted and bypassed traffic (DSCP to apply to decrypted traffic)
     */
    forwardProxyDecryptedDscp?: pulumi.Input<number>;
    /**
     * DSCP to apply to bypassed traffic
     */
    forwardProxyDecryptedDscpBypass?: pulumi.Input<number>;
    /**
     * Enable SSL forward proxy
     */
    forwardProxyEnable?: pulumi.Input<number>;
    /**
     * Action taken if receiving encrypted server name indication extension in client hello MSG, bypass the connection by
     * default
     */
    forwardProxyEsniAction?: pulumi.Input<number>;
    /**
     * Disable Failsafe for SSL forward proxy
     */
    forwardProxyFailsafeDisable?: pulumi.Input<number>;
    /**
     * Set the time interval to save the hash persistence certs (Interval value, in minutes)
     */
    forwardProxyHashPersistenceInterval?: pulumi.Input<number>;
    /**
     * Disable SSL forward proxy logging
     */
    forwardProxyLogDisable?: pulumi.Input<number>;
    /**
     * Action taken if handshake fails due to no shared ciper, close the connection by default
     */
    forwardProxyNoSharedCipherAction?: pulumi.Input<number>;
    /**
     * 'intercept': intercept in no SNI case; 'bypass': bypass in no SNI case; 'reset': reset in no SNI case;
     */
    forwardProxyNoSniAction?: pulumi.Input<string>;
    /**
     * Disable ocsp-stapling for forward proxy
     */
    forwardProxyOcspDisable?: pulumi.Input<number>;
    /**
     * 'no-match-action-inspect': Inspected if not matched; 'no-match-action-drop': Dropped if not matched;
     */
    forwardProxyRequireSniCertMatched?: pulumi.Input<string>;
    /**
     * Redirect connections to pages with self signed certs to a warning page
     */
    forwardProxySelfsignRedir?: pulumi.Input<number>;
    /**
     * TLS/SSL version, default is TLS1.2 (TLS/SSL version: 31-TLSv1.0, 32-TLSv1.1, 33-TLSv1.2 and 34-TLSv1.3)
     */
    forwardProxySslVersion?: pulumi.Input<number>;
    forwardProxyTrustedCaLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslForwardProxyTrustedCaList>[]>;
    /**
     * Action taken if certificate verification fails, close the connection by default
     */
    forwardProxyVerifyCertFailAction?: pulumi.Input<number>;
    /**
     * CA Certificate for forward proxy alternate signing (Certificate name)
     */
    fpAltCert?: pulumi.Input<string>;
    /**
     * Chain Certificate (Chain Certificate Name)
     */
    fpAltChainCert?: pulumi.Input<string>;
    /**
     * CA Private Key for forward proxy alternate signing (Key name)
     */
    fpAltKey?: pulumi.Input<string>;
    /**
     * Password Phrase
     */
    fpAltPassphrase?: pulumi.Input<string>;
    /**
     * Alternate CA Certificate and Private Key Partition Shared
     */
    fpAltShared?: pulumi.Input<number>;
    /**
     * CA Certificate for forward proxy (SSL forward proxy CA Certificate Name)
     */
    fpCaCertificate?: pulumi.Input<string>;
    /**
     * CA Private Key Partition Shared
     */
    fpCaCertificateShared?: pulumi.Input<number>;
    /**
     * Chain Certificate (Chain Certificate Name)
     */
    fpCaChainCert?: pulumi.Input<string>;
    /**
     * CA Private Key for forward proxy (SSL forward proxy CA Key Name)
     */
    fpCaKey?: pulumi.Input<string>;
    /**
     * Password Phrase
     */
    fpCaKeyPassphrase?: pulumi.Input<string>;
    /**
     * CA Private Key Partition Shared
     */
    fpCaKeyShared?: pulumi.Input<number>;
    /**
     * CA Certificate Partition Shared
     */
    fpCaShared?: pulumi.Input<number>;
    /**
     * CA Issuers (Authority Information Access URI)
     */
    fpCertExtAiaCaIssuers?: pulumi.Input<string>;
    /**
     * OCSP (Authority Information Access URI)
     */
    fpCertExtAiaOcsp?: pulumi.Input<string>;
    /**
     * CRL Distribution Point (CRL Distribution Point URI)
     */
    fpCertExtCrldp?: pulumi.Input<string>;
    /**
     * 'auto': Configure auto NAT for server certificate fetching;
     */
    fpCertFetchAutonat?: pulumi.Input<string>;
    /**
     * Set this NAT pool as higher precedence than other source NAT like configued under template policy
     */
    fpCertFetchAutonatPrecedence?: pulumi.Input<number>;
    /**
     * Specify NAT pool or pool group
     */
    fpCertFetchNatpoolName?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    fpCertFetchNatpoolNameShared?: pulumi.Input<string>;
    /**
     * Set this NAT pool as higher precedence than other source NAT like configued under template policy
     */
    fpCertFetchNatpoolPrecedence?: pulumi.Input<number>;
    /**
     * 'bypass': bypass SSLi processing; 'drop': close the connection;
     */
    fpEsniAction?: pulumi.Input<string>;
    /**
     * Enable SSL handshake logging
     */
    handshakeLoggingEnable?: pulumi.Input<number>;
    /**
     * 'thales-embed': Thales embed key; 'thales-hwcrhk': Thales hwcrhk Key;
     */
    hsmType?: pulumi.Input<string>;
    /**
     * Forward proxy Inspect if Certificate issuer matches class-list
     */
    inspectCertificateIssuerClName?: pulumi.Input<string>;
    /**
     * Forward proxy Inspect if Certificate Subject Alternative Name matches class-list
     */
    inspectCertificateSanClName?: pulumi.Input<string>;
    /**
     * Forward proxy Inspect if Certificate Subject matches class-list
     */
    inspectCertificateSubjectClName?: pulumi.Input<string>;
    /**
     * Class List Name
     */
    inspectListName?: pulumi.Input<string>;
    /**
     * Enable JA3 features
     */
    ja3Enable?: pulumi.Input<number>;
    /**
     * Insert the JA3 hash into this request as a HTTP header (HTTP Header Name)
     */
    ja3InsertHttpHeader?: pulumi.Input<string>;
    /**
     * Drop request if the JA3 hash matches this class-list (type string-case-insensitive) (Class-List Name)
     */
    ja3RejectClassList?: pulumi.Input<string>;
    /**
     * Drop request if numbers of JA3 of this client address exceeded
     */
    ja3RejectMaxNumberPerHost?: pulumi.Input<number>;
    /**
     * seconds to keep each JA3 record
     */
    ja3Ttl?: pulumi.Input<number>;
    /**
     * Use Subject DN as LDAP search base DN
     */
    ldapBaseDnFromCert?: pulumi.Input<number>;
    /**
     * Specify LDAP search filter
     */
    ldapSearchFilter?: pulumi.Input<string>;
    localCertPinList?: pulumi.Input<inputs.SlbTemplateClientSslLocalCertPinList>;
    /**
     * Enable local logging
     */
    localLogging?: pulumi.Input<number>;
    multiClassLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslMultiClassList>[]>;
    /**
     * Client SSL Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Disable anti-replay protection for TLS 1.3 early data (0-RTT data)
     */
    noAntiReplay?: pulumi.Input<number>;
    /**
     * 'bypass': bypass SSLi processing; 'drop': close the connection;
     */
    noSharedCipherAction?: pulumi.Input<string>;
    /**
     * Handle the non-ssl session as L4 for performance optimization
     */
    nonSslBypassL4session?: pulumi.Input<number>;
    /**
     * Service Group for Bypass non-ssl traffic (Service Group Name)
     */
    nonSslBypassServiceGroup?: pulumi.Input<string>;
    /**
     * notAfter date
     */
    notafter?: pulumi.Input<number>;
    /**
     * Day
     */
    notafterday?: pulumi.Input<number>;
    /**
     * Month
     */
    notaftermonth?: pulumi.Input<number>;
    /**
     * Year
     */
    notafteryear?: pulumi.Input<number>;
    /**
     * notBefore date
     */
    notbefore?: pulumi.Input<number>;
    /**
     * Day
     */
    notbeforeday?: pulumi.Input<number>;
    /**
     * Month
     */
    notbeforemonth?: pulumi.Input<number>;
    /**
     * Year
     */
    notbeforeyear?: pulumi.Input<number>;
    /**
     * Config OCSP stapling support
     */
    ocspStapling?: pulumi.Input<number>;
    /**
     * CA certificate
     */
    ocspstCaCert?: pulumi.Input<string>;
    /**
     * Specify OCSP Authentication
     */
    ocspstOcsp?: pulumi.Input<number>;
    /**
     * Specify authentication service group
     */
    ocspstSg?: pulumi.Input<string>;
    /**
     * Specify update period, in days
     */
    ocspstSgDays?: pulumi.Input<number>;
    /**
     * Specify update period, in hours
     */
    ocspstSgHours?: pulumi.Input<number>;
    /**
     * Specify update period, in minutes
     */
    ocspstSgMinutes?: pulumi.Input<number>;
    /**
     * Specify retry timeout (Default is 30 mins)
     */
    ocspstSgTimeout?: pulumi.Input<number>;
    /**
     * Specify OCSP authentication server
     */
    ocspstSrvr?: pulumi.Input<string>;
    /**
     * Specify update period, in days
     */
    ocspstSrvrDays?: pulumi.Input<number>;
    /**
     * Specify update period, in hours
     */
    ocspstSrvrHours?: pulumi.Input<number>;
    /**
     * Specify update period, in minutes
     */
    ocspstSrvrMinutes?: pulumi.Input<number>;
    /**
     * Specify retry timeout (Default is 30 mins)
     */
    ocspstSrvrTimeout?: pulumi.Input<number>;
    /**
     * Disable SSL renegotiation
     */
    renegotiationDisable?: pulumi.Input<number>;
    reqCaLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslReqCaList>[]>;
    /**
     * Wait for web category to be resolved before taking bypass decision
     */
    requireWebCategory?: pulumi.Input<number>;
    serverIpv4Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslServerIpv4List>[]>;
    serverIpv6Lists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslServerIpv6List>[]>;
    /**
     * Enable automatic mapping of server name indication in Client hello extension
     */
    serverNameAutoMap?: pulumi.Input<number>;
    serverNameLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslServerNameList>[]>;
    /**
     * Session Cache Size (Maximum cache size. Default value 0 (Session ID reuse disabled))
     */
    sessionCacheSize?: pulumi.Input<number>;
    /**
     * Session Cache Timeout (Timeout value, in seconds. Default value 0 (Session cache timeout disabled))
     */
    sessionCacheTimeout?: pulumi.Input<number>;
    /**
     * Disable client side session ticket support
     */
    sessionTicketDisable?: pulumi.Input<number>;
    /**
     * Session ticket lifetime in seconds from stateless session resumption (Lifetime value in seconds. Default value 0
     * (Session ticket lifetime is 7200 seconds))
     */
    sessionTicketLifetime?: pulumi.Input<number>;
    /**
     * Reference a cipher template from shared partition
     */
    sharedPartitionCipherTemplate?: pulumi.Input<number>;
    /**
     * Reference a NAT pool or pool group from shared partition
     */
    sharedPartitionPool?: pulumi.Input<number>;
    /**
     * Enable logging when bypass event happens, disabled by default
     */
    sniBypassEnableLog?: pulumi.Input<number>;
    /**
     * Bypass when certificate expired
     */
    sniBypassExpiredCert?: pulumi.Input<number>;
    /**
     * Bypass when matched explicit bypass list (Specify class list name)
     */
    sniBypassExplicitList?: pulumi.Input<string>;
    /**
     * Bypass when missing cert/key
     */
    sniBypassMissingCert?: pulumi.Input<number>;
    /**
     * Enable logging of sni-auto-map failures. Disable by default
     */
    sniEnableLog?: pulumi.Input<number>;
    /**
     * disable SSL False Start
     */
    sslFalseStartDisable?: pulumi.Input<number>;
    /**
     * Enable inbound SSLi
     */
    ssliInboundEnable?: pulumi.Input<number>;
    /**
     * SSLi logging level, default is error logging only
     */
    ssliLogging?: pulumi.Input<number>;
    /**
     * 'disable': Disable all logging; 'all': enable all logging(error, info);
     */
    sslilogging?: pulumi.Input<string>;
    /**
     * Service Group for Bypass SSLV2 (Service Group Name)
     */
    sslv2BypassServiceGroup?: pulumi.Input<string>;
    startsWithLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateClientSslStartsWithList>[]>;
    /**
     * Cipher Template Name
     */
    templateCipher?: pulumi.Input<string>;
    /**
     * Cipher Template Name
     */
    templateCipherShared?: pulumi.Input<string>;
    /**
     * HSM Template (HSM Template Name)
     */
    templateHsm?: pulumi.Input<string>;
    /**
     * Forward proxy bypass if user-name matches class-list
     */
    userNameList?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'bypass': bypass SSLi processing; 'continue': continue the connection; 'drop': close the connection; 'block': block the
     * connection with a warning page;
     */
    verifyCertFailAction?: pulumi.Input<string>;
    /**
     * TLS/SSL version, default is the highest number supported (TLS/SSL version: 30-SSLv3.0, 31-TLSv1.0, 32-TLSv1.1,
     * 33-TLSv1.2 and 34-TLSv1.3)
     */
    version?: pulumi.Input<number>;
    webCategory?: pulumi.Input<inputs.SlbTemplateClientSslWebCategory>;
    webReputation?: pulumi.Input<inputs.SlbTemplateClientSslWebReputation>;
}
