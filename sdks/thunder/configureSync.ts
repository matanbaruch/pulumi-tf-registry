// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ConfigureSync extends pulumi.CustomResource {
    /**
     * Get an existing ConfigureSync resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigureSyncState, opts?: pulumi.CustomResourceOptions): ConfigureSync {
        return new ConfigureSync(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/configureSync:ConfigureSync';

    /**
     * Returns true if the given object is an instance of ConfigureSync.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigureSync {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigureSync.__pulumiType;
    }

    /**
     * Specify the destination ip address to sync
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * All partition configurations
     */
    public readonly allPartitions!: pulumi.Output<number | undefined>;
    /**
     * Authenticate with local username and password
     */
    public readonly autoAuthentication!: pulumi.Output<number | undefined>;
    /**
     * Partition name
     */
    public readonly partitionName!: pulumi.Output<string | undefined>;
    /**
     * Use private key for authentication
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public readonly pwd!: pulumi.Output<string | undefined>;
    /**
     * Shared partition
     */
    public readonly shared!: pulumi.Output<number | undefined>;
    /**
     * 'running': Sync local running to peer's running configuration; 'all': Sync local running to peer's running
     * configuration, and local startup to peer's startup configuration;
     */
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly usr!: pulumi.Output<string | undefined>;

    /**
     * Create a ConfigureSync resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigureSyncArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigureSyncArgs | ConfigureSyncState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigureSyncState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["allPartitions"] = state ? state.allPartitions : undefined;
            resourceInputs["autoAuthentication"] = state ? state.autoAuthentication : undefined;
            resourceInputs["partitionName"] = state ? state.partitionName : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["pwd"] = state ? state.pwd : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usr"] = state ? state.usr : undefined;
        } else {
            const args = argsOrState as ConfigureSyncArgs | undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["allPartitions"] = args ? args.allPartitions : undefined;
            resourceInputs["autoAuthentication"] = args ? args.autoAuthentication : undefined;
            resourceInputs["partitionName"] = args ? args.partitionName : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["pwd"] = args ? args.pwd : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usr"] = args ? args.usr : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigureSync.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConfigureSync resources.
 */
export interface ConfigureSyncState {
    /**
     * Specify the destination ip address to sync
     */
    address?: pulumi.Input<string>;
    /**
     * All partition configurations
     */
    allPartitions?: pulumi.Input<number>;
    /**
     * Authenticate with local username and password
     */
    autoAuthentication?: pulumi.Input<number>;
    /**
     * Partition name
     */
    partitionName?: pulumi.Input<string>;
    /**
     * Use private key for authentication
     */
    privateKey?: pulumi.Input<string>;
    pwd?: pulumi.Input<string>;
    /**
     * Shared partition
     */
    shared?: pulumi.Input<number>;
    /**
     * 'running': Sync local running to peer's running configuration; 'all': Sync local running to peer's running
     * configuration, and local startup to peer's startup configuration;
     */
    type?: pulumi.Input<string>;
    usr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigureSync resource.
 */
export interface ConfigureSyncArgs {
    /**
     * Specify the destination ip address to sync
     */
    address?: pulumi.Input<string>;
    /**
     * All partition configurations
     */
    allPartitions?: pulumi.Input<number>;
    /**
     * Authenticate with local username and password
     */
    autoAuthentication?: pulumi.Input<number>;
    /**
     * Partition name
     */
    partitionName?: pulumi.Input<string>;
    /**
     * Use private key for authentication
     */
    privateKey?: pulumi.Input<string>;
    pwd?: pulumi.Input<string>;
    /**
     * Shared partition
     */
    shared?: pulumi.Input<number>;
    /**
     * 'running': Sync local running to peer's running configuration; 'all': Sync local running to peer's running
     * configuration, and local startup to peer's startup configuration;
     */
    type?: pulumi.Input<string>;
    usr?: pulumi.Input<string>;
}
