// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cgnv6LsnTcpMssClamp extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6LsnTcpMssClamp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6LsnTcpMssClampState, opts?: pulumi.CustomResourceOptions): Cgnv6LsnTcpMssClamp {
        return new Cgnv6LsnTcpMssClamp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6LsnTcpMssClamp:Cgnv6LsnTcpMssClamp';

    /**
     * Returns true if the given object is an instance of Cgnv6LsnTcpMssClamp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6LsnTcpMssClamp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6LsnTcpMssClamp.__pulumiType;
    }

    /**
     * Specify the min value allowed for the TCP MSS (Specify the min value allowed for the TCP MSS (default: ((576 - 60 -
     * 60))))
     */
    public readonly min!: pulumi.Output<number | undefined>;
    /**
     * 'fixed': Specify a fixed max value for the TCP MSS; 'subtract': Specify the value to subtract from the TCP MSS; 'none':
     * No TCP MSS clamping (default);
     */
    public readonly mssClampType!: pulumi.Output<string | undefined>;
    /**
     * Specify the value to subtract from the TCP MSS (default: not configured)
     */
    public readonly mssSubtract!: pulumi.Output<number | undefined>;
    /**
     * The max value allowed for the TCP MSS (default: not configured)},
     */
    public readonly mssValue!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6LsnTcpMssClamp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6LsnTcpMssClampArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6LsnTcpMssClampArgs | Cgnv6LsnTcpMssClampState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6LsnTcpMssClampState | undefined;
            resourceInputs["min"] = state ? state.min : undefined;
            resourceInputs["mssClampType"] = state ? state.mssClampType : undefined;
            resourceInputs["mssSubtract"] = state ? state.mssSubtract : undefined;
            resourceInputs["mssValue"] = state ? state.mssValue : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6LsnTcpMssClampArgs | undefined;
            resourceInputs["min"] = args ? args.min : undefined;
            resourceInputs["mssClampType"] = args ? args.mssClampType : undefined;
            resourceInputs["mssSubtract"] = args ? args.mssSubtract : undefined;
            resourceInputs["mssValue"] = args ? args.mssValue : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6LsnTcpMssClamp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6LsnTcpMssClamp resources.
 */
export interface Cgnv6LsnTcpMssClampState {
    /**
     * Specify the min value allowed for the TCP MSS (Specify the min value allowed for the TCP MSS (default: ((576 - 60 -
     * 60))))
     */
    min?: pulumi.Input<number>;
    /**
     * 'fixed': Specify a fixed max value for the TCP MSS; 'subtract': Specify the value to subtract from the TCP MSS; 'none':
     * No TCP MSS clamping (default);
     */
    mssClampType?: pulumi.Input<string>;
    /**
     * Specify the value to subtract from the TCP MSS (default: not configured)
     */
    mssSubtract?: pulumi.Input<number>;
    /**
     * The max value allowed for the TCP MSS (default: not configured)},
     */
    mssValue?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6LsnTcpMssClamp resource.
 */
export interface Cgnv6LsnTcpMssClampArgs {
    /**
     * Specify the min value allowed for the TCP MSS (Specify the min value allowed for the TCP MSS (default: ((576 - 60 -
     * 60))))
     */
    min?: pulumi.Input<number>;
    /**
     * 'fixed': Specify a fixed max value for the TCP MSS; 'subtract': Specify the value to subtract from the TCP MSS; 'none':
     * No TCP MSS clamping (default);
     */
    mssClampType?: pulumi.Input<string>;
    /**
     * Specify the value to subtract from the TCP MSS (default: not configured)
     */
    mssSubtract?: pulumi.Input<number>;
    /**
     * The max value allowed for the TCP MSS (default: not configured)},
     */
    mssValue?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
