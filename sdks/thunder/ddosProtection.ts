// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosProtection extends pulumi.CustomResource {
    /**
     * Get an existing DdosProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosProtectionState, opts?: pulumi.CustomResourceOptions): DdosProtection {
        return new DdosProtection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosProtection:DdosProtection';

    /**
     * Returns true if the given object is an instance of DdosProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosProtection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosProtection.__pulumiType;
    }

    /**
     * Enable blacklist reason tracking
     */
    public readonly blacklistReasonTracking!: pulumi.Output<number | undefined>;
    /**
     * When closing unauthenticated sessions, don't send TCP RST for established TCP sessions. (Default disabled / sending TCP
     * RST for
     */
    public readonly closeSessForUnauthSrcWithoutRst!: pulumi.Output<number | undefined>;
    /**
     * Disable advanced context info in coredump file
     */
    public readonly disableAdvancedCoreAnalysis!: pulumi.Output<number | undefined>;
    /**
     * Disable delay dynamic src entry learning
     */
    public readonly disableDelayDynamicSrcLearning!: pulumi.Output<number | undefined>;
    /**
     * Disable DDoS protection upon reboot/reload
     */
    public readonly disableOnReboot!: pulumi.Output<number | undefined>;
    /**
     * Disallow RST-ACK passing syn-auth
     */
    public readonly disallowRstAckInSynAuth!: pulumi.Output<number | undefined>;
    /**
     * Override disable-on-reboot to enable runtime DDOS protection
     */
    public readonly enableNow!: pulumi.Output<number | undefined>;
    public readonly fastAging!: pulumi.Output<outputs.DdosProtectionFastAging | undefined>;
    /**
     * Disable fast path in SLB processing
     */
    public readonly fastPathDisable!: pulumi.Output<number | undefined>;
    /**
     * Force use of routing in transparent mode
     */
    public readonly forceRoutingOnTransp!: pulumi.Output<number | undefined>;
    /**
     * Allow traffic to be distributed among blades on Chassis
     */
    public readonly forceTrafficToSameBladeDisable!: pulumi.Output<number | undefined>;
    /**
     * Enable hardware blacklist blocking for src or dst default entries (default disabled)
     */
    public readonly hwBlockingEnable!: pulumi.Output<number | undefined>;
    /**
     * Threshold to initiate hardware blocking (default 10000)
     */
    public readonly hwBlockingThresholdLimit!: pulumi.Output<number | undefined>;
    public readonly ipv6SrcHashMaskBits!: pulumi.Output<outputs.DdosProtectionIpv6SrcHashMaskBits | undefined>;
    /**
     * Enable MPLS packet inspection
     */
    public readonly mpls!: pulumi.Output<number | undefined>;
    public readonly multiPuZoneDistribution!: pulumi.Output<outputs.DdosProtectionMultiPuZoneDistribution | undefined>;
    /**
     * Send syn-cookie with fix TCP window size if SYN packet has zero window size (default disabled)
     */
    public readonly nonZeroWinSizeSyncookie!: pulumi.Output<number | undefined>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    public readonly progressionTracking!: pulumi.Output<string | undefined>;
    /**
     * '100ms': 100ms; '1sec': 1sec;
     */
    public readonly rateInterval!: pulumi.Output<string | undefined>;
    /**
     * Enable ddos per flow rexmit syn exceeded log
     */
    public readonly rexmitSynLog!: pulumi.Output<number | undefined>;
    /**
     * '8M': 8 Million; '16M': 16 Million; 'unlimited': Unlimited; 'platform-default': Half of platform maximum;
     */
    public readonly srcDstEntryLimit!: pulumi.Output<string | undefined>;
    /**
     * Configure which bit hashed on
     */
    public readonly srcIpHashBit!: pulumi.Output<number | undefined>;
    /**
     * Configure which bit hashed on
     */
    public readonly srcIpv6HashBit!: pulumi.Output<number | undefined>;
    /**
     * '8M': 8 Million; '16M': 16 Million; 'unlimited': Unlimited; 'platform-default': Half of platform maximum;
     */
    public readonly srcZonePortEntryLimit!: pulumi.Output<string | undefined>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    public readonly toggle!: pulumi.Output<string | undefined>;
    /**
     * Use route table, default use receive hop for device initiated traffic
     */
    public readonly useRoute!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosProtection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosProtectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosProtectionArgs | DdosProtectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosProtectionState | undefined;
            resourceInputs["blacklistReasonTracking"] = state ? state.blacklistReasonTracking : undefined;
            resourceInputs["closeSessForUnauthSrcWithoutRst"] = state ? state.closeSessForUnauthSrcWithoutRst : undefined;
            resourceInputs["disableAdvancedCoreAnalysis"] = state ? state.disableAdvancedCoreAnalysis : undefined;
            resourceInputs["disableDelayDynamicSrcLearning"] = state ? state.disableDelayDynamicSrcLearning : undefined;
            resourceInputs["disableOnReboot"] = state ? state.disableOnReboot : undefined;
            resourceInputs["disallowRstAckInSynAuth"] = state ? state.disallowRstAckInSynAuth : undefined;
            resourceInputs["enableNow"] = state ? state.enableNow : undefined;
            resourceInputs["fastAging"] = state ? state.fastAging : undefined;
            resourceInputs["fastPathDisable"] = state ? state.fastPathDisable : undefined;
            resourceInputs["forceRoutingOnTransp"] = state ? state.forceRoutingOnTransp : undefined;
            resourceInputs["forceTrafficToSameBladeDisable"] = state ? state.forceTrafficToSameBladeDisable : undefined;
            resourceInputs["hwBlockingEnable"] = state ? state.hwBlockingEnable : undefined;
            resourceInputs["hwBlockingThresholdLimit"] = state ? state.hwBlockingThresholdLimit : undefined;
            resourceInputs["ipv6SrcHashMaskBits"] = state ? state.ipv6SrcHashMaskBits : undefined;
            resourceInputs["mpls"] = state ? state.mpls : undefined;
            resourceInputs["multiPuZoneDistribution"] = state ? state.multiPuZoneDistribution : undefined;
            resourceInputs["nonZeroWinSizeSyncookie"] = state ? state.nonZeroWinSizeSyncookie : undefined;
            resourceInputs["progressionTracking"] = state ? state.progressionTracking : undefined;
            resourceInputs["rateInterval"] = state ? state.rateInterval : undefined;
            resourceInputs["rexmitSynLog"] = state ? state.rexmitSynLog : undefined;
            resourceInputs["srcDstEntryLimit"] = state ? state.srcDstEntryLimit : undefined;
            resourceInputs["srcIpHashBit"] = state ? state.srcIpHashBit : undefined;
            resourceInputs["srcIpv6HashBit"] = state ? state.srcIpv6HashBit : undefined;
            resourceInputs["srcZonePortEntryLimit"] = state ? state.srcZonePortEntryLimit : undefined;
            resourceInputs["toggle"] = state ? state.toggle : undefined;
            resourceInputs["useRoute"] = state ? state.useRoute : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosProtectionArgs | undefined;
            resourceInputs["blacklistReasonTracking"] = args ? args.blacklistReasonTracking : undefined;
            resourceInputs["closeSessForUnauthSrcWithoutRst"] = args ? args.closeSessForUnauthSrcWithoutRst : undefined;
            resourceInputs["disableAdvancedCoreAnalysis"] = args ? args.disableAdvancedCoreAnalysis : undefined;
            resourceInputs["disableDelayDynamicSrcLearning"] = args ? args.disableDelayDynamicSrcLearning : undefined;
            resourceInputs["disableOnReboot"] = args ? args.disableOnReboot : undefined;
            resourceInputs["disallowRstAckInSynAuth"] = args ? args.disallowRstAckInSynAuth : undefined;
            resourceInputs["enableNow"] = args ? args.enableNow : undefined;
            resourceInputs["fastAging"] = args ? args.fastAging : undefined;
            resourceInputs["fastPathDisable"] = args ? args.fastPathDisable : undefined;
            resourceInputs["forceRoutingOnTransp"] = args ? args.forceRoutingOnTransp : undefined;
            resourceInputs["forceTrafficToSameBladeDisable"] = args ? args.forceTrafficToSameBladeDisable : undefined;
            resourceInputs["hwBlockingEnable"] = args ? args.hwBlockingEnable : undefined;
            resourceInputs["hwBlockingThresholdLimit"] = args ? args.hwBlockingThresholdLimit : undefined;
            resourceInputs["ipv6SrcHashMaskBits"] = args ? args.ipv6SrcHashMaskBits : undefined;
            resourceInputs["mpls"] = args ? args.mpls : undefined;
            resourceInputs["multiPuZoneDistribution"] = args ? args.multiPuZoneDistribution : undefined;
            resourceInputs["nonZeroWinSizeSyncookie"] = args ? args.nonZeroWinSizeSyncookie : undefined;
            resourceInputs["progressionTracking"] = args ? args.progressionTracking : undefined;
            resourceInputs["rateInterval"] = args ? args.rateInterval : undefined;
            resourceInputs["rexmitSynLog"] = args ? args.rexmitSynLog : undefined;
            resourceInputs["srcDstEntryLimit"] = args ? args.srcDstEntryLimit : undefined;
            resourceInputs["srcIpHashBit"] = args ? args.srcIpHashBit : undefined;
            resourceInputs["srcIpv6HashBit"] = args ? args.srcIpv6HashBit : undefined;
            resourceInputs["srcZonePortEntryLimit"] = args ? args.srcZonePortEntryLimit : undefined;
            resourceInputs["toggle"] = args ? args.toggle : undefined;
            resourceInputs["useRoute"] = args ? args.useRoute : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosProtection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosProtection resources.
 */
export interface DdosProtectionState {
    /**
     * Enable blacklist reason tracking
     */
    blacklistReasonTracking?: pulumi.Input<number>;
    /**
     * When closing unauthenticated sessions, don't send TCP RST for established TCP sessions. (Default disabled / sending TCP
     * RST for
     */
    closeSessForUnauthSrcWithoutRst?: pulumi.Input<number>;
    /**
     * Disable advanced context info in coredump file
     */
    disableAdvancedCoreAnalysis?: pulumi.Input<number>;
    /**
     * Disable delay dynamic src entry learning
     */
    disableDelayDynamicSrcLearning?: pulumi.Input<number>;
    /**
     * Disable DDoS protection upon reboot/reload
     */
    disableOnReboot?: pulumi.Input<number>;
    /**
     * Disallow RST-ACK passing syn-auth
     */
    disallowRstAckInSynAuth?: pulumi.Input<number>;
    /**
     * Override disable-on-reboot to enable runtime DDOS protection
     */
    enableNow?: pulumi.Input<number>;
    fastAging?: pulumi.Input<inputs.DdosProtectionFastAging>;
    /**
     * Disable fast path in SLB processing
     */
    fastPathDisable?: pulumi.Input<number>;
    /**
     * Force use of routing in transparent mode
     */
    forceRoutingOnTransp?: pulumi.Input<number>;
    /**
     * Allow traffic to be distributed among blades on Chassis
     */
    forceTrafficToSameBladeDisable?: pulumi.Input<number>;
    /**
     * Enable hardware blacklist blocking for src or dst default entries (default disabled)
     */
    hwBlockingEnable?: pulumi.Input<number>;
    /**
     * Threshold to initiate hardware blocking (default 10000)
     */
    hwBlockingThresholdLimit?: pulumi.Input<number>;
    ipv6SrcHashMaskBits?: pulumi.Input<inputs.DdosProtectionIpv6SrcHashMaskBits>;
    /**
     * Enable MPLS packet inspection
     */
    mpls?: pulumi.Input<number>;
    multiPuZoneDistribution?: pulumi.Input<inputs.DdosProtectionMultiPuZoneDistribution>;
    /**
     * Send syn-cookie with fix TCP window size if SYN packet has zero window size (default disabled)
     */
    nonZeroWinSizeSyncookie?: pulumi.Input<number>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    progressionTracking?: pulumi.Input<string>;
    /**
     * '100ms': 100ms; '1sec': 1sec;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Enable ddos per flow rexmit syn exceeded log
     */
    rexmitSynLog?: pulumi.Input<number>;
    /**
     * '8M': 8 Million; '16M': 16 Million; 'unlimited': Unlimited; 'platform-default': Half of platform maximum;
     */
    srcDstEntryLimit?: pulumi.Input<string>;
    /**
     * Configure which bit hashed on
     */
    srcIpHashBit?: pulumi.Input<number>;
    /**
     * Configure which bit hashed on
     */
    srcIpv6HashBit?: pulumi.Input<number>;
    /**
     * '8M': 8 Million; '16M': 16 Million; 'unlimited': Unlimited; 'platform-default': Half of platform maximum;
     */
    srcZonePortEntryLimit?: pulumi.Input<string>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    toggle?: pulumi.Input<string>;
    /**
     * Use route table, default use receive hop for device initiated traffic
     */
    useRoute?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosProtection resource.
 */
export interface DdosProtectionArgs {
    /**
     * Enable blacklist reason tracking
     */
    blacklistReasonTracking?: pulumi.Input<number>;
    /**
     * When closing unauthenticated sessions, don't send TCP RST for established TCP sessions. (Default disabled / sending TCP
     * RST for
     */
    closeSessForUnauthSrcWithoutRst?: pulumi.Input<number>;
    /**
     * Disable advanced context info in coredump file
     */
    disableAdvancedCoreAnalysis?: pulumi.Input<number>;
    /**
     * Disable delay dynamic src entry learning
     */
    disableDelayDynamicSrcLearning?: pulumi.Input<number>;
    /**
     * Disable DDoS protection upon reboot/reload
     */
    disableOnReboot?: pulumi.Input<number>;
    /**
     * Disallow RST-ACK passing syn-auth
     */
    disallowRstAckInSynAuth?: pulumi.Input<number>;
    /**
     * Override disable-on-reboot to enable runtime DDOS protection
     */
    enableNow?: pulumi.Input<number>;
    fastAging?: pulumi.Input<inputs.DdosProtectionFastAging>;
    /**
     * Disable fast path in SLB processing
     */
    fastPathDisable?: pulumi.Input<number>;
    /**
     * Force use of routing in transparent mode
     */
    forceRoutingOnTransp?: pulumi.Input<number>;
    /**
     * Allow traffic to be distributed among blades on Chassis
     */
    forceTrafficToSameBladeDisable?: pulumi.Input<number>;
    /**
     * Enable hardware blacklist blocking for src or dst default entries (default disabled)
     */
    hwBlockingEnable?: pulumi.Input<number>;
    /**
     * Threshold to initiate hardware blocking (default 10000)
     */
    hwBlockingThresholdLimit?: pulumi.Input<number>;
    ipv6SrcHashMaskBits?: pulumi.Input<inputs.DdosProtectionIpv6SrcHashMaskBits>;
    /**
     * Enable MPLS packet inspection
     */
    mpls?: pulumi.Input<number>;
    multiPuZoneDistribution?: pulumi.Input<inputs.DdosProtectionMultiPuZoneDistribution>;
    /**
     * Send syn-cookie with fix TCP window size if SYN packet has zero window size (default disabled)
     */
    nonZeroWinSizeSyncookie?: pulumi.Input<number>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    progressionTracking?: pulumi.Input<string>;
    /**
     * '100ms': 100ms; '1sec': 1sec;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Enable ddos per flow rexmit syn exceeded log
     */
    rexmitSynLog?: pulumi.Input<number>;
    /**
     * '8M': 8 Million; '16M': 16 Million; 'unlimited': Unlimited; 'platform-default': Half of platform maximum;
     */
    srcDstEntryLimit?: pulumi.Input<string>;
    /**
     * Configure which bit hashed on
     */
    srcIpHashBit?: pulumi.Input<number>;
    /**
     * Configure which bit hashed on
     */
    srcIpv6HashBit?: pulumi.Input<number>;
    /**
     * '8M': 8 Million; '16M': 16 Million; 'unlimited': Unlimited; 'platform-default': Half of platform maximum;
     */
    srcZonePortEntryLimit?: pulumi.Input<string>;
    /**
     * 'enable': enable; 'disable': disable;
     */
    toggle?: pulumi.Input<string>;
    /**
     * Use route table, default use receive hop for device initiated traffic
     */
    useRoute?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
