// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VisibilityPacketCaptureCaptureConfig extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityPacketCaptureCaptureConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityPacketCaptureCaptureConfigState, opts?: pulumi.CustomResourceOptions): VisibilityPacketCaptureCaptureConfig {
        return new VisibilityPacketCaptureCaptureConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityPacketCaptureCaptureConfig:VisibilityPacketCaptureCaptureConfig';

    /**
     * Returns true if the given object is an instance of VisibilityPacketCaptureCaptureConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityPacketCaptureCaptureConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityPacketCaptureCaptureConfig.__pulumiType;
    }

    /**
     * Enable and specify maximum concurrent 3 tuple filter based captures in seperate pcaps.
     */
    public readonly concurrentCaptures!: pulumi.Output<number | undefined>;
    /**
     * Specify the time in minutes upto which a 3 tuple filter based capture will be kept active(default 1)
     */
    public readonly concurrentCapturesAge!: pulumi.Output<number | undefined>;
    /**
     * Specify maximum number of concurrent connnections(5 tuple matches) to be captured within in a 3 tuple based capture.
     * (default 1
     */
    public readonly concurrentConnPerCapture!: pulumi.Output<number | undefined>;
    /**
     * Enable and specify maximum concurrent connnections(only 5 tuple based) to be captured in common pcaps.
     */
    public readonly concurrentConnTag!: pulumi.Output<number | undefined>;
    /**
     * Operational command to force create temporary pcapng files before completion (for global/non 3 tuple based captures)
     */
    public readonly createPcapFilesNow!: pulumi.Output<number | undefined>;
    /**
     * Disable packet capture (default enabled)
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * Disable auto merging per CPU pcapng files(default enabled)
     */
    public readonly disableAutoMerge!: pulumi.Output<number | undefined>;
    /**
     * Enable continuous capture of packets for the global capture(non 3 tuple based capture) overriding size limits
     */
    public readonly enableContinuousGlobalCapture!: pulumi.Output<number | undefined>;
    /**
     * Specify the number of continuous pcapng files that can be created for capturing packets (default 10)
     */
    public readonly fileCount!: pulumi.Output<number | undefined>;
    /**
     * Specify pcapng filesize in MB, Will be distributed per CPU (default 1)
     */
    public readonly fileSize!: pulumi.Output<number | undefined>;
    /**
     * Keep original per CPU pcapng files after auto merging pcapng files(default disabled)
     */
    public readonly keepPcapFilesAfterMerge!: pulumi.Output<number | undefined>;
    /**
     * Specify the name of the capture-config
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify Maximum number of packets per global or dynamic capture (default 0 unlimited)
     */
    public readonly numberOfPacketsPerCapture!: pulumi.Output<number | undefined>;
    /**
     * Specify maximum number of packets to be captured in a 5 tuple based connection (default 0 unlimited).
     */
    public readonly numberOfPacketsPerConn!: pulumi.Output<number | undefined>;
    /**
     * Specify Maximum number of packets for all captures (default 0 unlimited)
     */
    public readonly numberOfPacketsTotal!: pulumi.Output<number | undefined>;
    /**
     * Packet length in Bytes to capture (Default 128)
     */
    public readonly packetLength!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VisibilityPacketCaptureCaptureConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VisibilityPacketCaptureCaptureConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityPacketCaptureCaptureConfigArgs | VisibilityPacketCaptureCaptureConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityPacketCaptureCaptureConfigState | undefined;
            resourceInputs["concurrentCaptures"] = state ? state.concurrentCaptures : undefined;
            resourceInputs["concurrentCapturesAge"] = state ? state.concurrentCapturesAge : undefined;
            resourceInputs["concurrentConnPerCapture"] = state ? state.concurrentConnPerCapture : undefined;
            resourceInputs["concurrentConnTag"] = state ? state.concurrentConnTag : undefined;
            resourceInputs["createPcapFilesNow"] = state ? state.createPcapFilesNow : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableAutoMerge"] = state ? state.disableAutoMerge : undefined;
            resourceInputs["enableContinuousGlobalCapture"] = state ? state.enableContinuousGlobalCapture : undefined;
            resourceInputs["fileCount"] = state ? state.fileCount : undefined;
            resourceInputs["fileSize"] = state ? state.fileSize : undefined;
            resourceInputs["keepPcapFilesAfterMerge"] = state ? state.keepPcapFilesAfterMerge : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfPacketsPerCapture"] = state ? state.numberOfPacketsPerCapture : undefined;
            resourceInputs["numberOfPacketsPerConn"] = state ? state.numberOfPacketsPerConn : undefined;
            resourceInputs["numberOfPacketsTotal"] = state ? state.numberOfPacketsTotal : undefined;
            resourceInputs["packetLength"] = state ? state.packetLength : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VisibilityPacketCaptureCaptureConfigArgs | undefined;
            resourceInputs["concurrentCaptures"] = args ? args.concurrentCaptures : undefined;
            resourceInputs["concurrentCapturesAge"] = args ? args.concurrentCapturesAge : undefined;
            resourceInputs["concurrentConnPerCapture"] = args ? args.concurrentConnPerCapture : undefined;
            resourceInputs["concurrentConnTag"] = args ? args.concurrentConnTag : undefined;
            resourceInputs["createPcapFilesNow"] = args ? args.createPcapFilesNow : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableAutoMerge"] = args ? args.disableAutoMerge : undefined;
            resourceInputs["enableContinuousGlobalCapture"] = args ? args.enableContinuousGlobalCapture : undefined;
            resourceInputs["fileCount"] = args ? args.fileCount : undefined;
            resourceInputs["fileSize"] = args ? args.fileSize : undefined;
            resourceInputs["keepPcapFilesAfterMerge"] = args ? args.keepPcapFilesAfterMerge : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfPacketsPerCapture"] = args ? args.numberOfPacketsPerCapture : undefined;
            resourceInputs["numberOfPacketsPerConn"] = args ? args.numberOfPacketsPerConn : undefined;
            resourceInputs["numberOfPacketsTotal"] = args ? args.numberOfPacketsTotal : undefined;
            resourceInputs["packetLength"] = args ? args.packetLength : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityPacketCaptureCaptureConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityPacketCaptureCaptureConfig resources.
 */
export interface VisibilityPacketCaptureCaptureConfigState {
    /**
     * Enable and specify maximum concurrent 3 tuple filter based captures in seperate pcaps.
     */
    concurrentCaptures?: pulumi.Input<number>;
    /**
     * Specify the time in minutes upto which a 3 tuple filter based capture will be kept active(default 1)
     */
    concurrentCapturesAge?: pulumi.Input<number>;
    /**
     * Specify maximum number of concurrent connnections(5 tuple matches) to be captured within in a 3 tuple based capture.
     * (default 1
     */
    concurrentConnPerCapture?: pulumi.Input<number>;
    /**
     * Enable and specify maximum concurrent connnections(only 5 tuple based) to be captured in common pcaps.
     */
    concurrentConnTag?: pulumi.Input<number>;
    /**
     * Operational command to force create temporary pcapng files before completion (for global/non 3 tuple based captures)
     */
    createPcapFilesNow?: pulumi.Input<number>;
    /**
     * Disable packet capture (default enabled)
     */
    disable?: pulumi.Input<number>;
    /**
     * Disable auto merging per CPU pcapng files(default enabled)
     */
    disableAutoMerge?: pulumi.Input<number>;
    /**
     * Enable continuous capture of packets for the global capture(non 3 tuple based capture) overriding size limits
     */
    enableContinuousGlobalCapture?: pulumi.Input<number>;
    /**
     * Specify the number of continuous pcapng files that can be created for capturing packets (default 10)
     */
    fileCount?: pulumi.Input<number>;
    /**
     * Specify pcapng filesize in MB, Will be distributed per CPU (default 1)
     */
    fileSize?: pulumi.Input<number>;
    /**
     * Keep original per CPU pcapng files after auto merging pcapng files(default disabled)
     */
    keepPcapFilesAfterMerge?: pulumi.Input<number>;
    /**
     * Specify the name of the capture-config
     */
    name?: pulumi.Input<string>;
    /**
     * Specify Maximum number of packets per global or dynamic capture (default 0 unlimited)
     */
    numberOfPacketsPerCapture?: pulumi.Input<number>;
    /**
     * Specify maximum number of packets to be captured in a 5 tuple based connection (default 0 unlimited).
     */
    numberOfPacketsPerConn?: pulumi.Input<number>;
    /**
     * Specify Maximum number of packets for all captures (default 0 unlimited)
     */
    numberOfPacketsTotal?: pulumi.Input<number>;
    /**
     * Packet length in Bytes to capture (Default 128)
     */
    packetLength?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VisibilityPacketCaptureCaptureConfig resource.
 */
export interface VisibilityPacketCaptureCaptureConfigArgs {
    /**
     * Enable and specify maximum concurrent 3 tuple filter based captures in seperate pcaps.
     */
    concurrentCaptures?: pulumi.Input<number>;
    /**
     * Specify the time in minutes upto which a 3 tuple filter based capture will be kept active(default 1)
     */
    concurrentCapturesAge?: pulumi.Input<number>;
    /**
     * Specify maximum number of concurrent connnections(5 tuple matches) to be captured within in a 3 tuple based capture.
     * (default 1
     */
    concurrentConnPerCapture?: pulumi.Input<number>;
    /**
     * Enable and specify maximum concurrent connnections(only 5 tuple based) to be captured in common pcaps.
     */
    concurrentConnTag?: pulumi.Input<number>;
    /**
     * Operational command to force create temporary pcapng files before completion (for global/non 3 tuple based captures)
     */
    createPcapFilesNow?: pulumi.Input<number>;
    /**
     * Disable packet capture (default enabled)
     */
    disable?: pulumi.Input<number>;
    /**
     * Disable auto merging per CPU pcapng files(default enabled)
     */
    disableAutoMerge?: pulumi.Input<number>;
    /**
     * Enable continuous capture of packets for the global capture(non 3 tuple based capture) overriding size limits
     */
    enableContinuousGlobalCapture?: pulumi.Input<number>;
    /**
     * Specify the number of continuous pcapng files that can be created for capturing packets (default 10)
     */
    fileCount?: pulumi.Input<number>;
    /**
     * Specify pcapng filesize in MB, Will be distributed per CPU (default 1)
     */
    fileSize?: pulumi.Input<number>;
    /**
     * Keep original per CPU pcapng files after auto merging pcapng files(default disabled)
     */
    keepPcapFilesAfterMerge?: pulumi.Input<number>;
    /**
     * Specify the name of the capture-config
     */
    name?: pulumi.Input<string>;
    /**
     * Specify Maximum number of packets per global or dynamic capture (default 0 unlimited)
     */
    numberOfPacketsPerCapture?: pulumi.Input<number>;
    /**
     * Specify maximum number of packets to be captured in a 5 tuple based connection (default 0 unlimited).
     */
    numberOfPacketsPerConn?: pulumi.Input<number>;
    /**
     * Specify Maximum number of packets for all captures (default 0 unlimited)
     */
    numberOfPacketsTotal?: pulumi.Input<number>;
    /**
     * Packet length in Bytes to capture (Default 128)
     */
    packetLength?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
