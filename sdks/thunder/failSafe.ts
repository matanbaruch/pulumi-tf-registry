// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FailSafe extends pulumi.CustomResource {
    /**
     * Get an existing FailSafe resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FailSafeState, opts?: pulumi.CustomResourceOptions): FailSafe {
        return new FailSafe(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/failSafe:FailSafe';

    /**
     * Returns true if the given object is an instance of FailSafe.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FailSafe {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FailSafe.__pulumiType;
    }

    public readonly config!: pulumi.Output<outputs.FailSafeConfig | undefined>;
    /**
     * dataplane hung detection timeout before ACOS is restarted (in seconds)
     */
    public readonly dataplaneRecoveryTimeout!: pulumi.Output<number | undefined>;
    public readonly disableFailsafe!: pulumi.Output<outputs.FailSafeDisableFailsafe | undefined>;
    /**
     * FPGA buffers recovery threshold (Units of 256 buffers (default 2))
     */
    public readonly fpgaBuffRecoveryThreshold!: pulumi.Output<number | undefined>;
    /**
     * FPGA monitor feature enable
     */
    public readonly fpgaMonitorEnable!: pulumi.Output<number | undefined>;
    /**
     * FPGA monitor forced reboot in error condition
     */
    public readonly fpgaMonitorForcedReboot!: pulumi.Output<number | undefined>;
    /**
     * FPGA monitor packet interval (seconds) (Numbers of seconds between sending packets (default 1))
     */
    public readonly fpgaMonitorInterval!: pulumi.Output<number | undefined>;
    /**
     * FPGA monitor packet missed for error condition (Numbers of missed monitor packets before setting error condition
     * (default 30))
     */
    public readonly fpgaMonitorThreshold!: pulumi.Output<number | undefined>;
    /**
     * 'hw-error-monitor-disable': Disable fail-safe hardware error monitor; 'hw-error-monitor-enable': Enable fail-safe
     * hardware error monitor;
     */
    public readonly hwErrorMonitor!: pulumi.Output<string | undefined>;
    /**
     * Hardware error recovery timeout (minutes) (waiting time of recovery from hardware errors (default 0))
     */
    public readonly hwErrorRecoveryTimeout!: pulumi.Output<number | undefined>;
    /**
     * 'hw-ssl-timeout-monitor-disable': Disable fail-safe hardware SSL timeout monitor; 'hw-ssl-timeout-monitor-enable':
     * Enable fail-safe hardware SSL timeout monitor;
     */
    public readonly hwSslTimeoutMonitor!: pulumi.Output<string | undefined>;
    /**
     * Stop the traffic and log the event
     */
    public readonly kill!: pulumi.Output<number | undefined>;
    /**
     * Log the event
     */
    public readonly log!: pulumi.Output<number | undefined>;
    /**
     * Session memory recovery threshold (percentage) (Percentage of available session memory (default 30%))
     */
    public readonly sessionMemRecoveryThreshold!: pulumi.Output<number | undefined>;
    /**
     * Enable fail-safe software error monitor
     */
    public readonly swErrorMonitorEnable!: pulumi.Output<number | undefined>;
    /**
     * Software error recovery timeout (minutes) (waiting time of recovery from software errors (default 3))
     */
    public readonly swErrorRecoveryTimeout!: pulumi.Output<number | undefined>;
    /**
     * Check total memory size of current system (Size of memory (GB))
     */
    public readonly totalMemorySizeCheck!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FailSafe resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FailSafeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FailSafeArgs | FailSafeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FailSafeState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["dataplaneRecoveryTimeout"] = state ? state.dataplaneRecoveryTimeout : undefined;
            resourceInputs["disableFailsafe"] = state ? state.disableFailsafe : undefined;
            resourceInputs["fpgaBuffRecoveryThreshold"] = state ? state.fpgaBuffRecoveryThreshold : undefined;
            resourceInputs["fpgaMonitorEnable"] = state ? state.fpgaMonitorEnable : undefined;
            resourceInputs["fpgaMonitorForcedReboot"] = state ? state.fpgaMonitorForcedReboot : undefined;
            resourceInputs["fpgaMonitorInterval"] = state ? state.fpgaMonitorInterval : undefined;
            resourceInputs["fpgaMonitorThreshold"] = state ? state.fpgaMonitorThreshold : undefined;
            resourceInputs["hwErrorMonitor"] = state ? state.hwErrorMonitor : undefined;
            resourceInputs["hwErrorRecoveryTimeout"] = state ? state.hwErrorRecoveryTimeout : undefined;
            resourceInputs["hwSslTimeoutMonitor"] = state ? state.hwSslTimeoutMonitor : undefined;
            resourceInputs["kill"] = state ? state.kill : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["sessionMemRecoveryThreshold"] = state ? state.sessionMemRecoveryThreshold : undefined;
            resourceInputs["swErrorMonitorEnable"] = state ? state.swErrorMonitorEnable : undefined;
            resourceInputs["swErrorRecoveryTimeout"] = state ? state.swErrorRecoveryTimeout : undefined;
            resourceInputs["totalMemorySizeCheck"] = state ? state.totalMemorySizeCheck : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FailSafeArgs | undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["dataplaneRecoveryTimeout"] = args ? args.dataplaneRecoveryTimeout : undefined;
            resourceInputs["disableFailsafe"] = args ? args.disableFailsafe : undefined;
            resourceInputs["fpgaBuffRecoveryThreshold"] = args ? args.fpgaBuffRecoveryThreshold : undefined;
            resourceInputs["fpgaMonitorEnable"] = args ? args.fpgaMonitorEnable : undefined;
            resourceInputs["fpgaMonitorForcedReboot"] = args ? args.fpgaMonitorForcedReboot : undefined;
            resourceInputs["fpgaMonitorInterval"] = args ? args.fpgaMonitorInterval : undefined;
            resourceInputs["fpgaMonitorThreshold"] = args ? args.fpgaMonitorThreshold : undefined;
            resourceInputs["hwErrorMonitor"] = args ? args.hwErrorMonitor : undefined;
            resourceInputs["hwErrorRecoveryTimeout"] = args ? args.hwErrorRecoveryTimeout : undefined;
            resourceInputs["hwSslTimeoutMonitor"] = args ? args.hwSslTimeoutMonitor : undefined;
            resourceInputs["kill"] = args ? args.kill : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["sessionMemRecoveryThreshold"] = args ? args.sessionMemRecoveryThreshold : undefined;
            resourceInputs["swErrorMonitorEnable"] = args ? args.swErrorMonitorEnable : undefined;
            resourceInputs["swErrorRecoveryTimeout"] = args ? args.swErrorRecoveryTimeout : undefined;
            resourceInputs["totalMemorySizeCheck"] = args ? args.totalMemorySizeCheck : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FailSafe.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FailSafe resources.
 */
export interface FailSafeState {
    config?: pulumi.Input<inputs.FailSafeConfig>;
    /**
     * dataplane hung detection timeout before ACOS is restarted (in seconds)
     */
    dataplaneRecoveryTimeout?: pulumi.Input<number>;
    disableFailsafe?: pulumi.Input<inputs.FailSafeDisableFailsafe>;
    /**
     * FPGA buffers recovery threshold (Units of 256 buffers (default 2))
     */
    fpgaBuffRecoveryThreshold?: pulumi.Input<number>;
    /**
     * FPGA monitor feature enable
     */
    fpgaMonitorEnable?: pulumi.Input<number>;
    /**
     * FPGA monitor forced reboot in error condition
     */
    fpgaMonitorForcedReboot?: pulumi.Input<number>;
    /**
     * FPGA monitor packet interval (seconds) (Numbers of seconds between sending packets (default 1))
     */
    fpgaMonitorInterval?: pulumi.Input<number>;
    /**
     * FPGA monitor packet missed for error condition (Numbers of missed monitor packets before setting error condition
     * (default 30))
     */
    fpgaMonitorThreshold?: pulumi.Input<number>;
    /**
     * 'hw-error-monitor-disable': Disable fail-safe hardware error monitor; 'hw-error-monitor-enable': Enable fail-safe
     * hardware error monitor;
     */
    hwErrorMonitor?: pulumi.Input<string>;
    /**
     * Hardware error recovery timeout (minutes) (waiting time of recovery from hardware errors (default 0))
     */
    hwErrorRecoveryTimeout?: pulumi.Input<number>;
    /**
     * 'hw-ssl-timeout-monitor-disable': Disable fail-safe hardware SSL timeout monitor; 'hw-ssl-timeout-monitor-enable':
     * Enable fail-safe hardware SSL timeout monitor;
     */
    hwSslTimeoutMonitor?: pulumi.Input<string>;
    /**
     * Stop the traffic and log the event
     */
    kill?: pulumi.Input<number>;
    /**
     * Log the event
     */
    log?: pulumi.Input<number>;
    /**
     * Session memory recovery threshold (percentage) (Percentage of available session memory (default 30%))
     */
    sessionMemRecoveryThreshold?: pulumi.Input<number>;
    /**
     * Enable fail-safe software error monitor
     */
    swErrorMonitorEnable?: pulumi.Input<number>;
    /**
     * Software error recovery timeout (minutes) (waiting time of recovery from software errors (default 3))
     */
    swErrorRecoveryTimeout?: pulumi.Input<number>;
    /**
     * Check total memory size of current system (Size of memory (GB))
     */
    totalMemorySizeCheck?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FailSafe resource.
 */
export interface FailSafeArgs {
    config?: pulumi.Input<inputs.FailSafeConfig>;
    /**
     * dataplane hung detection timeout before ACOS is restarted (in seconds)
     */
    dataplaneRecoveryTimeout?: pulumi.Input<number>;
    disableFailsafe?: pulumi.Input<inputs.FailSafeDisableFailsafe>;
    /**
     * FPGA buffers recovery threshold (Units of 256 buffers (default 2))
     */
    fpgaBuffRecoveryThreshold?: pulumi.Input<number>;
    /**
     * FPGA monitor feature enable
     */
    fpgaMonitorEnable?: pulumi.Input<number>;
    /**
     * FPGA monitor forced reboot in error condition
     */
    fpgaMonitorForcedReboot?: pulumi.Input<number>;
    /**
     * FPGA monitor packet interval (seconds) (Numbers of seconds between sending packets (default 1))
     */
    fpgaMonitorInterval?: pulumi.Input<number>;
    /**
     * FPGA monitor packet missed for error condition (Numbers of missed monitor packets before setting error condition
     * (default 30))
     */
    fpgaMonitorThreshold?: pulumi.Input<number>;
    /**
     * 'hw-error-monitor-disable': Disable fail-safe hardware error monitor; 'hw-error-monitor-enable': Enable fail-safe
     * hardware error monitor;
     */
    hwErrorMonitor?: pulumi.Input<string>;
    /**
     * Hardware error recovery timeout (minutes) (waiting time of recovery from hardware errors (default 0))
     */
    hwErrorRecoveryTimeout?: pulumi.Input<number>;
    /**
     * 'hw-ssl-timeout-monitor-disable': Disable fail-safe hardware SSL timeout monitor; 'hw-ssl-timeout-monitor-enable':
     * Enable fail-safe hardware SSL timeout monitor;
     */
    hwSslTimeoutMonitor?: pulumi.Input<string>;
    /**
     * Stop the traffic and log the event
     */
    kill?: pulumi.Input<number>;
    /**
     * Log the event
     */
    log?: pulumi.Input<number>;
    /**
     * Session memory recovery threshold (percentage) (Percentage of available session memory (default 30%))
     */
    sessionMemRecoveryThreshold?: pulumi.Input<number>;
    /**
     * Enable fail-safe software error monitor
     */
    swErrorMonitorEnable?: pulumi.Input<number>;
    /**
     * Software error recovery timeout (minutes) (waiting time of recovery from software errors (default 3))
     */
    swErrorRecoveryTimeout?: pulumi.Input<number>;
    /**
     * Check total memory size of current system (Size of memory (GB))
     */
    totalMemorySizeCheck?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
