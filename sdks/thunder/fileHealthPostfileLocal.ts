// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FileHealthPostfileLocal extends pulumi.CustomResource {
    /**
     * Get an existing FileHealthPostfileLocal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileHealthPostfileLocalState, opts?: pulumi.CustomResourceOptions): FileHealthPostfileLocal {
        return new FileHealthPostfileLocal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/fileHealthPostfileLocal:FileHealthPostfileLocal';

    /**
     * Returns true if the given object is an instance of FileHealthPostfileLocal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileHealthPostfileLocal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileHealthPostfileLocal.__pulumiType;
    }

    /**
     * 'create': create; 'import': import; 'export': export; 'copy': copy; 'rename': rename; 'check': check; 'replace':
     * replace; 'delete': delete;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * destination file name for copy and rename action
     */
    public readonly dstFile!: pulumi.Output<string | undefined>;
    /**
     * Specify the File Name
     */
    public readonly file!: pulumi.Output<string | undefined>;
    /**
     * full path of the uploaded file
     */
    public readonly fileHandle!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FileHealthPostfileLocal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FileHealthPostfileLocalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileHealthPostfileLocalArgs | FileHealthPostfileLocalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileHealthPostfileLocalState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["dstFile"] = state ? state.dstFile : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["fileHandle"] = state ? state.fileHandle : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FileHealthPostfileLocalArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["dstFile"] = args ? args.dstFile : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["fileHandle"] = args ? args.fileHandle : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileHealthPostfileLocal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FileHealthPostfileLocal resources.
 */
export interface FileHealthPostfileLocalState {
    /**
     * 'create': create; 'import': import; 'export': export; 'copy': copy; 'rename': rename; 'check': check; 'replace':
     * replace; 'delete': delete;
     */
    action?: pulumi.Input<string>;
    /**
     * destination file name for copy and rename action
     */
    dstFile?: pulumi.Input<string>;
    /**
     * Specify the File Name
     */
    file?: pulumi.Input<string>;
    /**
     * full path of the uploaded file
     */
    fileHandle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FileHealthPostfileLocal resource.
 */
export interface FileHealthPostfileLocalArgs {
    /**
     * 'create': create; 'import': import; 'export': export; 'copy': copy; 'rename': rename; 'check': check; 'replace':
     * replace; 'delete': delete;
     */
    action?: pulumi.Input<string>;
    /**
     * destination file name for copy and rename action
     */
    dstFile?: pulumi.Input<string>;
    /**
     * Specify the File Name
     */
    file?: pulumi.Input<string>;
    /**
     * full path of the uploaded file
     */
    fileHandle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
