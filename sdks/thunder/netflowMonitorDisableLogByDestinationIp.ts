// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetflowMonitorDisableLogByDestinationIp extends pulumi.CustomResource {
    /**
     * Get an existing NetflowMonitorDisableLogByDestinationIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetflowMonitorDisableLogByDestinationIpState, opts?: pulumi.CustomResourceOptions): NetflowMonitorDisableLogByDestinationIp {
        return new NetflowMonitorDisableLogByDestinationIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/netflowMonitorDisableLogByDestinationIp:NetflowMonitorDisableLogByDestinationIp';

    /**
     * Returns true if the given object is an instance of NetflowMonitorDisableLogByDestinationIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetflowMonitorDisableLogByDestinationIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetflowMonitorDisableLogByDestinationIp.__pulumiType;
    }

    /**
     * Disable logging for icmp traffic
     */
    public readonly icmp!: pulumi.Output<number | undefined>;
    /**
     * Configure an IP subnet
     */
    public readonly ipv4Addr!: pulumi.Output<string>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Disable logging for other L4 protocols
     */
    public readonly others!: pulumi.Output<number | undefined>;
    public readonly tcpLists!: pulumi.Output<outputs.NetflowMonitorDisableLogByDestinationIpTcpList[] | undefined>;
    public readonly udpLists!: pulumi.Output<outputs.NetflowMonitorDisableLogByDestinationIpUdpList[] | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NetflowMonitorDisableLogByDestinationIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetflowMonitorDisableLogByDestinationIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetflowMonitorDisableLogByDestinationIpArgs | NetflowMonitorDisableLogByDestinationIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetflowMonitorDisableLogByDestinationIpState | undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["ipv4Addr"] = state ? state.ipv4Addr : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["others"] = state ? state.others : undefined;
            resourceInputs["tcpLists"] = state ? state.tcpLists : undefined;
            resourceInputs["udpLists"] = state ? state.udpLists : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetflowMonitorDisableLogByDestinationIpArgs | undefined;
            if ((!args || args.ipv4Addr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipv4Addr'");
            }
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["ipv4Addr"] = args ? args.ipv4Addr : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["others"] = args ? args.others : undefined;
            resourceInputs["tcpLists"] = args ? args.tcpLists : undefined;
            resourceInputs["udpLists"] = args ? args.udpLists : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetflowMonitorDisableLogByDestinationIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetflowMonitorDisableLogByDestinationIp resources.
 */
export interface NetflowMonitorDisableLogByDestinationIpState {
    /**
     * Disable logging for icmp traffic
     */
    icmp?: pulumi.Input<number>;
    /**
     * Configure an IP subnet
     */
    ipv4Addr?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Disable logging for other L4 protocols
     */
    others?: pulumi.Input<number>;
    tcpLists?: pulumi.Input<pulumi.Input<inputs.NetflowMonitorDisableLogByDestinationIpTcpList>[]>;
    udpLists?: pulumi.Input<pulumi.Input<inputs.NetflowMonitorDisableLogByDestinationIpUdpList>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetflowMonitorDisableLogByDestinationIp resource.
 */
export interface NetflowMonitorDisableLogByDestinationIpArgs {
    /**
     * Disable logging for icmp traffic
     */
    icmp?: pulumi.Input<number>;
    /**
     * Configure an IP subnet
     */
    ipv4Addr: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Disable logging for other L4 protocols
     */
    others?: pulumi.Input<number>;
    tcpLists?: pulumi.Input<pulumi.Input<inputs.NetflowMonitorDisableLogByDestinationIpTcpList>[]>;
    udpLists?: pulumi.Input<pulumi.Input<inputs.NetflowMonitorDisableLogByDestinationIpUdpList>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
