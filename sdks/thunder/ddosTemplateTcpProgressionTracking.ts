// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosTemplateTcpProgressionTracking extends pulumi.CustomResource {
    /**
     * Get an existing DdosTemplateTcpProgressionTracking resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosTemplateTcpProgressionTrackingState, opts?: pulumi.CustomResourceOptions): DdosTemplateTcpProgressionTracking {
        return new DdosTemplateTcpProgressionTracking(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosTemplateTcpProgressionTracking:DdosTemplateTcpProgressionTracking';

    /**
     * Returns true if the given object is an instance of DdosTemplateTcpProgressionTracking.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosTemplateTcpProgressionTracking {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosTemplateTcpProgressionTracking.__pulumiType;
    }

    public readonly connectionTracking!: pulumi.Output<outputs.DdosTemplateTcpProgressionTrackingConnectionTracking | undefined>;
    /**
     * Set the maximum wait time from connection creation until the first data is transmitted over the connection (100 ms)
     */
    public readonly firstRequestMaxTime!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable auto-config progression tracking learning for connection model
     */
    public readonly profilingConnectionLifeModel!: pulumi.Output<number | undefined>;
    /**
     * Enable auto-config progression tracking learning for request response model
     */
    public readonly profilingRequestResponseModel!: pulumi.Output<number | undefined>;
    /**
     * Enable auto-config progression tracking learning for time window model
     */
    public readonly profilingTimeWindowModel!: pulumi.Output<number | undefined>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    public readonly progressionTrackingAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    public readonly progressionTrackingActionListName!: pulumi.Output<string | undefined>;
    /**
     * 'enable-check': Enable Progression Tracking Check;
     */
    public readonly progressionTrackingEnabled!: pulumi.Output<string>;
    /**
     * Set the maximum request length
     */
    public readonly requestLengthMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum request length
     */
    public readonly requestLengthMin!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable Request Response Model; 'disable': Disable Request Response Model;
     */
    public readonly requestResponseModel!: pulumi.Output<string | undefined>;
    /**
     * Set the maximum request to response time (100 ms)
     */
    public readonly requestToResponseMaxTime!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum response length
     */
    public readonly responseLengthMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum response length
     */
    public readonly responseLengthMin!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum response to request ratio (in unit of 0.1% [1:1000])
     */
    public readonly responseRequestMaxRatio!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum response to request ratio (in unit of 0.1% [1:1000])
     */
    public readonly responseRequestMinRatio!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum response to request time (100 ms)
     */
    public readonly responseToRequestMaxTime!: pulumi.Output<number | undefined>;
    public readonly timeWindowTracking!: pulumi.Output<outputs.DdosTemplateTcpProgressionTrackingTimeWindowTracking | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Set the violation threshold
     */
    public readonly violation!: pulumi.Output<number | undefined>;

    /**
     * Create a DdosTemplateTcpProgressionTracking resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosTemplateTcpProgressionTrackingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosTemplateTcpProgressionTrackingArgs | DdosTemplateTcpProgressionTrackingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosTemplateTcpProgressionTrackingState | undefined;
            resourceInputs["connectionTracking"] = state ? state.connectionTracking : undefined;
            resourceInputs["firstRequestMaxTime"] = state ? state.firstRequestMaxTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profilingConnectionLifeModel"] = state ? state.profilingConnectionLifeModel : undefined;
            resourceInputs["profilingRequestResponseModel"] = state ? state.profilingRequestResponseModel : undefined;
            resourceInputs["profilingTimeWindowModel"] = state ? state.profilingTimeWindowModel : undefined;
            resourceInputs["progressionTrackingAction"] = state ? state.progressionTrackingAction : undefined;
            resourceInputs["progressionTrackingActionListName"] = state ? state.progressionTrackingActionListName : undefined;
            resourceInputs["progressionTrackingEnabled"] = state ? state.progressionTrackingEnabled : undefined;
            resourceInputs["requestLengthMax"] = state ? state.requestLengthMax : undefined;
            resourceInputs["requestLengthMin"] = state ? state.requestLengthMin : undefined;
            resourceInputs["requestResponseModel"] = state ? state.requestResponseModel : undefined;
            resourceInputs["requestToResponseMaxTime"] = state ? state.requestToResponseMaxTime : undefined;
            resourceInputs["responseLengthMax"] = state ? state.responseLengthMax : undefined;
            resourceInputs["responseLengthMin"] = state ? state.responseLengthMin : undefined;
            resourceInputs["responseRequestMaxRatio"] = state ? state.responseRequestMaxRatio : undefined;
            resourceInputs["responseRequestMinRatio"] = state ? state.responseRequestMinRatio : undefined;
            resourceInputs["responseToRequestMaxTime"] = state ? state.responseToRequestMaxTime : undefined;
            resourceInputs["timeWindowTracking"] = state ? state.timeWindowTracking : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["violation"] = state ? state.violation : undefined;
        } else {
            const args = argsOrState as DdosTemplateTcpProgressionTrackingArgs | undefined;
            if ((!args || args.progressionTrackingEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'progressionTrackingEnabled'");
            }
            resourceInputs["connectionTracking"] = args ? args.connectionTracking : undefined;
            resourceInputs["firstRequestMaxTime"] = args ? args.firstRequestMaxTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profilingConnectionLifeModel"] = args ? args.profilingConnectionLifeModel : undefined;
            resourceInputs["profilingRequestResponseModel"] = args ? args.profilingRequestResponseModel : undefined;
            resourceInputs["profilingTimeWindowModel"] = args ? args.profilingTimeWindowModel : undefined;
            resourceInputs["progressionTrackingAction"] = args ? args.progressionTrackingAction : undefined;
            resourceInputs["progressionTrackingActionListName"] = args ? args.progressionTrackingActionListName : undefined;
            resourceInputs["progressionTrackingEnabled"] = args ? args.progressionTrackingEnabled : undefined;
            resourceInputs["requestLengthMax"] = args ? args.requestLengthMax : undefined;
            resourceInputs["requestLengthMin"] = args ? args.requestLengthMin : undefined;
            resourceInputs["requestResponseModel"] = args ? args.requestResponseModel : undefined;
            resourceInputs["requestToResponseMaxTime"] = args ? args.requestToResponseMaxTime : undefined;
            resourceInputs["responseLengthMax"] = args ? args.responseLengthMax : undefined;
            resourceInputs["responseLengthMin"] = args ? args.responseLengthMin : undefined;
            resourceInputs["responseRequestMaxRatio"] = args ? args.responseRequestMaxRatio : undefined;
            resourceInputs["responseRequestMinRatio"] = args ? args.responseRequestMinRatio : undefined;
            resourceInputs["responseToRequestMaxTime"] = args ? args.responseToRequestMaxTime : undefined;
            resourceInputs["timeWindowTracking"] = args ? args.timeWindowTracking : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["violation"] = args ? args.violation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosTemplateTcpProgressionTracking.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosTemplateTcpProgressionTracking resources.
 */
export interface DdosTemplateTcpProgressionTrackingState {
    connectionTracking?: pulumi.Input<inputs.DdosTemplateTcpProgressionTrackingConnectionTracking>;
    /**
     * Set the maximum wait time from connection creation until the first data is transmitted over the connection (100 ms)
     */
    firstRequestMaxTime?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable auto-config progression tracking learning for connection model
     */
    profilingConnectionLifeModel?: pulumi.Input<number>;
    /**
     * Enable auto-config progression tracking learning for request response model
     */
    profilingRequestResponseModel?: pulumi.Input<number>;
    /**
     * Enable auto-config progression tracking learning for time window model
     */
    profilingTimeWindowModel?: pulumi.Input<number>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    progressionTrackingAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    progressionTrackingActionListName?: pulumi.Input<string>;
    /**
     * 'enable-check': Enable Progression Tracking Check;
     */
    progressionTrackingEnabled?: pulumi.Input<string>;
    /**
     * Set the maximum request length
     */
    requestLengthMax?: pulumi.Input<number>;
    /**
     * Set the minimum request length
     */
    requestLengthMin?: pulumi.Input<number>;
    /**
     * 'enable': Enable Request Response Model; 'disable': Disable Request Response Model;
     */
    requestResponseModel?: pulumi.Input<string>;
    /**
     * Set the maximum request to response time (100 ms)
     */
    requestToResponseMaxTime?: pulumi.Input<number>;
    /**
     * Set the maximum response length
     */
    responseLengthMax?: pulumi.Input<number>;
    /**
     * Set the minimum response length
     */
    responseLengthMin?: pulumi.Input<number>;
    /**
     * Set the maximum response to request ratio (in unit of 0.1% [1:1000])
     */
    responseRequestMaxRatio?: pulumi.Input<number>;
    /**
     * Set the minimum response to request ratio (in unit of 0.1% [1:1000])
     */
    responseRequestMinRatio?: pulumi.Input<number>;
    /**
     * Set the maximum response to request time (100 ms)
     */
    responseToRequestMaxTime?: pulumi.Input<number>;
    timeWindowTracking?: pulumi.Input<inputs.DdosTemplateTcpProgressionTrackingTimeWindowTracking>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Set the violation threshold
     */
    violation?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DdosTemplateTcpProgressionTracking resource.
 */
export interface DdosTemplateTcpProgressionTrackingArgs {
    connectionTracking?: pulumi.Input<inputs.DdosTemplateTcpProgressionTrackingConnectionTracking>;
    /**
     * Set the maximum wait time from connection creation until the first data is transmitted over the connection (100 ms)
     */
    firstRequestMaxTime?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable auto-config progression tracking learning for connection model
     */
    profilingConnectionLifeModel?: pulumi.Input<number>;
    /**
     * Enable auto-config progression tracking learning for request response model
     */
    profilingRequestResponseModel?: pulumi.Input<number>;
    /**
     * Enable auto-config progression tracking learning for time window model
     */
    profilingTimeWindowModel?: pulumi.Input<number>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    progressionTrackingAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    progressionTrackingActionListName?: pulumi.Input<string>;
    /**
     * 'enable-check': Enable Progression Tracking Check;
     */
    progressionTrackingEnabled: pulumi.Input<string>;
    /**
     * Set the maximum request length
     */
    requestLengthMax?: pulumi.Input<number>;
    /**
     * Set the minimum request length
     */
    requestLengthMin?: pulumi.Input<number>;
    /**
     * 'enable': Enable Request Response Model; 'disable': Disable Request Response Model;
     */
    requestResponseModel?: pulumi.Input<string>;
    /**
     * Set the maximum request to response time (100 ms)
     */
    requestToResponseMaxTime?: pulumi.Input<number>;
    /**
     * Set the maximum response length
     */
    responseLengthMax?: pulumi.Input<number>;
    /**
     * Set the minimum response length
     */
    responseLengthMin?: pulumi.Input<number>;
    /**
     * Set the maximum response to request ratio (in unit of 0.1% [1:1000])
     */
    responseRequestMaxRatio?: pulumi.Input<number>;
    /**
     * Set the minimum response to request ratio (in unit of 0.1% [1:1000])
     */
    responseRequestMinRatio?: pulumi.Input<number>;
    /**
     * Set the maximum response to request time (100 ms)
     */
    responseToRequestMaxTime?: pulumi.Input<number>;
    timeWindowTracking?: pulumi.Input<inputs.DdosTemplateTcpProgressionTrackingTimeWindowTracking>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Set the violation threshold
     */
    violation?: pulumi.Input<number>;
}
