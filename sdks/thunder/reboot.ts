// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Reboot extends pulumi.CustomResource {
    /**
     * Get an existing Reboot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RebootState, opts?: pulumi.CustomResourceOptions): Reboot {
        return new Reboot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/reboot:Reboot';

    /**
     * Returns true if the given object is an instance of Reboot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Reboot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Reboot.__pulumiType;
    }

    /**
     * Reboot all devices when VCS is enabled, or only this device itself if VCS is not enabled
     */
    public readonly all!: pulumi.Output<number | undefined>;
    /**
     * Reboot at a Specific time/date
     */
    public readonly at!: pulumi.Output<number | undefined>;
    /**
     * Cancel Pending Reboot
     */
    public readonly cancel!: pulumi.Output<number | undefined>;
    /**
     * Day of the Month
     */
    public readonly dayOfMonth!: pulumi.Output<number | undefined>;
    /**
     * Day of the Month
     */
    public readonly dayOfMonth2!: pulumi.Output<number | undefined>;
    /**
     * Reboot a specific device when VCS is enabled (device id)
     */
    public readonly device!: pulumi.Output<number | undefined>;
    /**
     * Reboot after a time interval (Time in hours and minutes)
     */
    public readonly in!: pulumi.Output<string | undefined>;
    /**
     * 'January': Month of the year; 'February': Month of the year; 'March': Month of the year; 'April': Month of the year;
     * 'May': Month of the year; 'June': Month of the year; 'July': Month of the year; 'August': Month of the year;
     * 'September': Month of the year; 'October': Month of the year; 'November': Month of the year; 'December': Month of the
     * year;
     */
    public readonly month!: pulumi.Output<string | undefined>;
    /**
     * 'January': Month of the year; 'February': Month of the year; 'March': Month of the year; 'April': Month of the year;
     * 'May': Month of the year; 'June': Month of the year; 'July': Month of the r; 'August': Month of the year; 'September':
     * Month of the year; 'October': Month of the year; 'November': Month of the year; 'December': Month of the year;
     */
    public readonly month2!: pulumi.Output<string | undefined>;
    /**
     * Reason for Reboot
     */
    public readonly reason!: pulumi.Output<string | undefined>;
    /**
     * Reason for Reboot
     */
    public readonly reason2!: pulumi.Output<string | undefined>;
    /**
     * Reason for Reboot
     */
    public readonly reason3!: pulumi.Output<string | undefined>;
    /**
     * Time to Reboot (hh:mm)
     */
    public readonly time!: pulumi.Output<string | undefined>;

    /**
     * Create a Reboot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RebootArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RebootArgs | RebootState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RebootState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["at"] = state ? state.at : undefined;
            resourceInputs["cancel"] = state ? state.cancel : undefined;
            resourceInputs["dayOfMonth"] = state ? state.dayOfMonth : undefined;
            resourceInputs["dayOfMonth2"] = state ? state.dayOfMonth2 : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["in"] = state ? state.in : undefined;
            resourceInputs["month"] = state ? state.month : undefined;
            resourceInputs["month2"] = state ? state.month2 : undefined;
            resourceInputs["reason"] = state ? state.reason : undefined;
            resourceInputs["reason2"] = state ? state.reason2 : undefined;
            resourceInputs["reason3"] = state ? state.reason3 : undefined;
            resourceInputs["time"] = state ? state.time : undefined;
        } else {
            const args = argsOrState as RebootArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["at"] = args ? args.at : undefined;
            resourceInputs["cancel"] = args ? args.cancel : undefined;
            resourceInputs["dayOfMonth"] = args ? args.dayOfMonth : undefined;
            resourceInputs["dayOfMonth2"] = args ? args.dayOfMonth2 : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["in"] = args ? args.in : undefined;
            resourceInputs["month"] = args ? args.month : undefined;
            resourceInputs["month2"] = args ? args.month2 : undefined;
            resourceInputs["reason"] = args ? args.reason : undefined;
            resourceInputs["reason2"] = args ? args.reason2 : undefined;
            resourceInputs["reason3"] = args ? args.reason3 : undefined;
            resourceInputs["time"] = args ? args.time : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Reboot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Reboot resources.
 */
export interface RebootState {
    /**
     * Reboot all devices when VCS is enabled, or only this device itself if VCS is not enabled
     */
    all?: pulumi.Input<number>;
    /**
     * Reboot at a Specific time/date
     */
    at?: pulumi.Input<number>;
    /**
     * Cancel Pending Reboot
     */
    cancel?: pulumi.Input<number>;
    /**
     * Day of the Month
     */
    dayOfMonth?: pulumi.Input<number>;
    /**
     * Day of the Month
     */
    dayOfMonth2?: pulumi.Input<number>;
    /**
     * Reboot a specific device when VCS is enabled (device id)
     */
    device?: pulumi.Input<number>;
    /**
     * Reboot after a time interval (Time in hours and minutes)
     */
    in?: pulumi.Input<string>;
    /**
     * 'January': Month of the year; 'February': Month of the year; 'March': Month of the year; 'April': Month of the year;
     * 'May': Month of the year; 'June': Month of the year; 'July': Month of the year; 'August': Month of the year;
     * 'September': Month of the year; 'October': Month of the year; 'November': Month of the year; 'December': Month of the
     * year;
     */
    month?: pulumi.Input<string>;
    /**
     * 'January': Month of the year; 'February': Month of the year; 'March': Month of the year; 'April': Month of the year;
     * 'May': Month of the year; 'June': Month of the year; 'July': Month of the r; 'August': Month of the year; 'September':
     * Month of the year; 'October': Month of the year; 'November': Month of the year; 'December': Month of the year;
     */
    month2?: pulumi.Input<string>;
    /**
     * Reason for Reboot
     */
    reason?: pulumi.Input<string>;
    /**
     * Reason for Reboot
     */
    reason2?: pulumi.Input<string>;
    /**
     * Reason for Reboot
     */
    reason3?: pulumi.Input<string>;
    /**
     * Time to Reboot (hh:mm)
     */
    time?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Reboot resource.
 */
export interface RebootArgs {
    /**
     * Reboot all devices when VCS is enabled, or only this device itself if VCS is not enabled
     */
    all?: pulumi.Input<number>;
    /**
     * Reboot at a Specific time/date
     */
    at?: pulumi.Input<number>;
    /**
     * Cancel Pending Reboot
     */
    cancel?: pulumi.Input<number>;
    /**
     * Day of the Month
     */
    dayOfMonth?: pulumi.Input<number>;
    /**
     * Day of the Month
     */
    dayOfMonth2?: pulumi.Input<number>;
    /**
     * Reboot a specific device when VCS is enabled (device id)
     */
    device?: pulumi.Input<number>;
    /**
     * Reboot after a time interval (Time in hours and minutes)
     */
    in?: pulumi.Input<string>;
    /**
     * 'January': Month of the year; 'February': Month of the year; 'March': Month of the year; 'April': Month of the year;
     * 'May': Month of the year; 'June': Month of the year; 'July': Month of the year; 'August': Month of the year;
     * 'September': Month of the year; 'October': Month of the year; 'November': Month of the year; 'December': Month of the
     * year;
     */
    month?: pulumi.Input<string>;
    /**
     * 'January': Month of the year; 'February': Month of the year; 'March': Month of the year; 'April': Month of the year;
     * 'May': Month of the year; 'June': Month of the year; 'July': Month of the r; 'August': Month of the year; 'September':
     * Month of the year; 'October': Month of the year; 'November': Month of the year; 'December': Month of the year;
     */
    month2?: pulumi.Input<string>;
    /**
     * Reason for Reboot
     */
    reason?: pulumi.Input<string>;
    /**
     * Reason for Reboot
     */
    reason2?: pulumi.Input<string>;
    /**
     * Reason for Reboot
     */
    reason3?: pulumi.Input<string>;
    /**
     * Time to Reboot (hh:mm)
     */
    time?: pulumi.Input<string>;
}
