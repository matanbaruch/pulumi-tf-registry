// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6FixedNatInsideIplist extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6FixedNatInsideIplist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6FixedNatInsideIplistState, opts?: pulumi.CustomResourceOptions): Cgnv6FixedNatInsideIplist {
        return new Cgnv6FixedNatInsideIplist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6FixedNatInsideIplist:Cgnv6FixedNatInsideIplist';

    /**
     * Returns true if the given object is an instance of Cgnv6FixedNatInsideIplist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6FixedNatInsideIplist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6FixedNatInsideIplist.__pulumiType;
    }

    /**
     * Bind destination based Rule-List (Fixed NAT Rule-List Name)
     */
    public readonly destRuleList!: pulumi.Output<string | undefined>;
    /**
     * Configure size of Dynamic pool (Default: 0)
     */
    public readonly dynamicPoolSize!: pulumi.Output<number | undefined>;
    /**
     * Name of IP List used to specify Inside Users
     */
    public readonly insideIpList!: pulumi.Output<string>;
    /**
     * 'use-all-nat-ips': Use all the NAT IP addresses configured; 'use-least-nat-ips': Use the least number of NAT IP
     * addresses required (default);
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * IPv4 End NAT Address
     */
    public readonly natEndAddress!: pulumi.Output<string | undefined>;
    /**
     * Name of IP List used to specify NAT addresses
     */
    public readonly natIpList!: pulumi.Output<string | undefined>;
    /**
     * NAT Addresses IP Netmask
     */
    public readonly natNetmask!: pulumi.Output<string | undefined>;
    /**
     * Start NAT Address
     */
    public readonly natStartAddress!: pulumi.Output<string | undefined>;
    public readonly offset!: pulumi.Output<outputs.Cgnv6FixedNatInsideIplistOffset | undefined>;
    /**
     * Inside User Partition (Partition Name)
     */
    public readonly partition!: pulumi.Output<string>;
    /**
     * Configure Ports per Inside User (ports-per-user)
     */
    public readonly portsPerUser!: pulumi.Output<number | undefined>;
    /**
     * Use the user's source MAC for the next hop rather than the routing table (Default: off)
     */
    public readonly respondToUserMac!: pulumi.Output<number | undefined>;
    /**
     * Configure per user quota on sessions
     */
    public readonly sessionQuota!: pulumi.Output<number | undefined>;
    /**
     * Not using the first block of ports for NAT IPs smaller than the configured offset
     */
    public readonly skipPortsOnRollover!: pulumi.Output<number | undefined>;
    public readonly usableNatPorts!: pulumi.Output<outputs.Cgnv6FixedNatInsideIplistUsableNatPorts | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    public readonly vrid!: pulumi.Output<number | undefined>;

    /**
     * Create a Cgnv6FixedNatInsideIplist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Cgnv6FixedNatInsideIplistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6FixedNatInsideIplistArgs | Cgnv6FixedNatInsideIplistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6FixedNatInsideIplistState | undefined;
            resourceInputs["destRuleList"] = state ? state.destRuleList : undefined;
            resourceInputs["dynamicPoolSize"] = state ? state.dynamicPoolSize : undefined;
            resourceInputs["insideIpList"] = state ? state.insideIpList : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["natEndAddress"] = state ? state.natEndAddress : undefined;
            resourceInputs["natIpList"] = state ? state.natIpList : undefined;
            resourceInputs["natNetmask"] = state ? state.natNetmask : undefined;
            resourceInputs["natStartAddress"] = state ? state.natStartAddress : undefined;
            resourceInputs["offset"] = state ? state.offset : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["portsPerUser"] = state ? state.portsPerUser : undefined;
            resourceInputs["respondToUserMac"] = state ? state.respondToUserMac : undefined;
            resourceInputs["sessionQuota"] = state ? state.sessionQuota : undefined;
            resourceInputs["skipPortsOnRollover"] = state ? state.skipPortsOnRollover : undefined;
            resourceInputs["usableNatPorts"] = state ? state.usableNatPorts : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as Cgnv6FixedNatInsideIplistArgs | undefined;
            if ((!args || args.insideIpList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'insideIpList'");
            }
            if ((!args || args.partition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partition'");
            }
            resourceInputs["destRuleList"] = args ? args.destRuleList : undefined;
            resourceInputs["dynamicPoolSize"] = args ? args.dynamicPoolSize : undefined;
            resourceInputs["insideIpList"] = args ? args.insideIpList : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["natEndAddress"] = args ? args.natEndAddress : undefined;
            resourceInputs["natIpList"] = args ? args.natIpList : undefined;
            resourceInputs["natNetmask"] = args ? args.natNetmask : undefined;
            resourceInputs["natStartAddress"] = args ? args.natStartAddress : undefined;
            resourceInputs["offset"] = args ? args.offset : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["portsPerUser"] = args ? args.portsPerUser : undefined;
            resourceInputs["respondToUserMac"] = args ? args.respondToUserMac : undefined;
            resourceInputs["sessionQuota"] = args ? args.sessionQuota : undefined;
            resourceInputs["skipPortsOnRollover"] = args ? args.skipPortsOnRollover : undefined;
            resourceInputs["usableNatPorts"] = args ? args.usableNatPorts : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6FixedNatInsideIplist.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6FixedNatInsideIplist resources.
 */
export interface Cgnv6FixedNatInsideIplistState {
    /**
     * Bind destination based Rule-List (Fixed NAT Rule-List Name)
     */
    destRuleList?: pulumi.Input<string>;
    /**
     * Configure size of Dynamic pool (Default: 0)
     */
    dynamicPoolSize?: pulumi.Input<number>;
    /**
     * Name of IP List used to specify Inside Users
     */
    insideIpList?: pulumi.Input<string>;
    /**
     * 'use-all-nat-ips': Use all the NAT IP addresses configured; 'use-least-nat-ips': Use the least number of NAT IP
     * addresses required (default);
     */
    method?: pulumi.Input<string>;
    /**
     * IPv4 End NAT Address
     */
    natEndAddress?: pulumi.Input<string>;
    /**
     * Name of IP List used to specify NAT addresses
     */
    natIpList?: pulumi.Input<string>;
    /**
     * NAT Addresses IP Netmask
     */
    natNetmask?: pulumi.Input<string>;
    /**
     * Start NAT Address
     */
    natStartAddress?: pulumi.Input<string>;
    offset?: pulumi.Input<inputs.Cgnv6FixedNatInsideIplistOffset>;
    /**
     * Inside User Partition (Partition Name)
     */
    partition?: pulumi.Input<string>;
    /**
     * Configure Ports per Inside User (ports-per-user)
     */
    portsPerUser?: pulumi.Input<number>;
    /**
     * Use the user's source MAC for the next hop rather than the routing table (Default: off)
     */
    respondToUserMac?: pulumi.Input<number>;
    /**
     * Configure per user quota on sessions
     */
    sessionQuota?: pulumi.Input<number>;
    /**
     * Not using the first block of ports for NAT IPs smaller than the configured offset
     */
    skipPortsOnRollover?: pulumi.Input<number>;
    usableNatPorts?: pulumi.Input<inputs.Cgnv6FixedNatInsideIplistUsableNatPorts>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cgnv6FixedNatInsideIplist resource.
 */
export interface Cgnv6FixedNatInsideIplistArgs {
    /**
     * Bind destination based Rule-List (Fixed NAT Rule-List Name)
     */
    destRuleList?: pulumi.Input<string>;
    /**
     * Configure size of Dynamic pool (Default: 0)
     */
    dynamicPoolSize?: pulumi.Input<number>;
    /**
     * Name of IP List used to specify Inside Users
     */
    insideIpList: pulumi.Input<string>;
    /**
     * 'use-all-nat-ips': Use all the NAT IP addresses configured; 'use-least-nat-ips': Use the least number of NAT IP
     * addresses required (default);
     */
    method?: pulumi.Input<string>;
    /**
     * IPv4 End NAT Address
     */
    natEndAddress?: pulumi.Input<string>;
    /**
     * Name of IP List used to specify NAT addresses
     */
    natIpList?: pulumi.Input<string>;
    /**
     * NAT Addresses IP Netmask
     */
    natNetmask?: pulumi.Input<string>;
    /**
     * Start NAT Address
     */
    natStartAddress?: pulumi.Input<string>;
    offset?: pulumi.Input<inputs.Cgnv6FixedNatInsideIplistOffset>;
    /**
     * Inside User Partition (Partition Name)
     */
    partition: pulumi.Input<string>;
    /**
     * Configure Ports per Inside User (ports-per-user)
     */
    portsPerUser?: pulumi.Input<number>;
    /**
     * Use the user's source MAC for the next hop rather than the routing table (Default: off)
     */
    respondToUserMac?: pulumi.Input<number>;
    /**
     * Configure per user quota on sessions
     */
    sessionQuota?: pulumi.Input<number>;
    /**
     * Not using the first block of ports for NAT IPs smaller than the configured offset
     */
    skipPortsOnRollover?: pulumi.Input<number>;
    usableNatPorts?: pulumi.Input<inputs.Cgnv6FixedNatInsideIplistUsableNatPorts>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * VRRP-A vrid (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}
