// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScaleoutCluster extends pulumi.CustomResource {
    /**
     * Get an existing ScaleoutCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScaleoutClusterState, opts?: pulumi.CustomResourceOptions): ScaleoutCluster {
        return new ScaleoutCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/scaleoutCluster:ScaleoutCluster';

    /**
     * Returns true if the given object is an instance of ScaleoutCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScaleoutCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScaleoutCluster.__pulumiType;
    }

    public readonly clusterDevices!: pulumi.Output<outputs.ScaleoutClusterClusterDevices | undefined>;
    /**
     * Scaleout cluster-id
     */
    public readonly clusterId!: pulumi.Output<number>;
    public readonly dbConfig!: pulumi.Output<outputs.ScaleoutClusterDbConfig | undefined>;
    public readonly deviceGroups!: pulumi.Output<outputs.ScaleoutClusterDeviceGroups | undefined>;
    public readonly localDevice!: pulumi.Output<outputs.ScaleoutClusterLocalDevice | undefined>;
    public readonly serviceConfig!: pulumi.Output<outputs.ScaleoutClusterServiceConfig | undefined>;
    /**
     * Set the level of slog for Scaleout
     */
    public readonly slogLevel!: pulumi.Output<number | undefined>;
    public readonly trackingTemplate!: pulumi.Output<outputs.ScaleoutClusterTrackingTemplate | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ScaleoutCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScaleoutClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScaleoutClusterArgs | ScaleoutClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScaleoutClusterState | undefined;
            resourceInputs["clusterDevices"] = state ? state.clusterDevices : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dbConfig"] = state ? state.dbConfig : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["localDevice"] = state ? state.localDevice : undefined;
            resourceInputs["serviceConfig"] = state ? state.serviceConfig : undefined;
            resourceInputs["slogLevel"] = state ? state.slogLevel : undefined;
            resourceInputs["trackingTemplate"] = state ? state.trackingTemplate : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ScaleoutClusterArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterDevices"] = args ? args.clusterDevices : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dbConfig"] = args ? args.dbConfig : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["localDevice"] = args ? args.localDevice : undefined;
            resourceInputs["serviceConfig"] = args ? args.serviceConfig : undefined;
            resourceInputs["slogLevel"] = args ? args.slogLevel : undefined;
            resourceInputs["trackingTemplate"] = args ? args.trackingTemplate : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScaleoutCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ScaleoutCluster resources.
 */
export interface ScaleoutClusterState {
    clusterDevices?: pulumi.Input<inputs.ScaleoutClusterClusterDevices>;
    /**
     * Scaleout cluster-id
     */
    clusterId?: pulumi.Input<number>;
    dbConfig?: pulumi.Input<inputs.ScaleoutClusterDbConfig>;
    deviceGroups?: pulumi.Input<inputs.ScaleoutClusterDeviceGroups>;
    localDevice?: pulumi.Input<inputs.ScaleoutClusterLocalDevice>;
    serviceConfig?: pulumi.Input<inputs.ScaleoutClusterServiceConfig>;
    /**
     * Set the level of slog for Scaleout
     */
    slogLevel?: pulumi.Input<number>;
    trackingTemplate?: pulumi.Input<inputs.ScaleoutClusterTrackingTemplate>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScaleoutCluster resource.
 */
export interface ScaleoutClusterArgs {
    clusterDevices?: pulumi.Input<inputs.ScaleoutClusterClusterDevices>;
    /**
     * Scaleout cluster-id
     */
    clusterId: pulumi.Input<number>;
    dbConfig?: pulumi.Input<inputs.ScaleoutClusterDbConfig>;
    deviceGroups?: pulumi.Input<inputs.ScaleoutClusterDeviceGroups>;
    localDevice?: pulumi.Input<inputs.ScaleoutClusterLocalDevice>;
    serviceConfig?: pulumi.Input<inputs.ScaleoutClusterServiceConfig>;
    /**
     * Set the level of slog for Scaleout
     */
    slogLevel?: pulumi.Input<number>;
    trackingTemplate?: pulumi.Input<inputs.ScaleoutClusterTrackingTemplate>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
