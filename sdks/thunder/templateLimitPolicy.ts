// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TemplateLimitPolicy extends pulumi.CustomResource {
    /**
     * Get an existing TemplateLimitPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateLimitPolicyState, opts?: pulumi.CustomResourceOptions): TemplateLimitPolicy {
        return new TemplateLimitPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/templateLimitPolicy:TemplateLimitPolicy';

    /**
     * Returns true if the given object is an instance of TemplateLimitPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemplateLimitPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemplateLimitPolicy.__pulumiType;
    }

    /**
     * Enable Concurrent Session Limit (Number of Concurrent Sessions)
     */
    public readonly limitConcurrentSessions!: pulumi.Output<number | undefined>;
    public readonly limitCps!: pulumi.Output<outputs.TemplateLimitPolicyLimitCps | undefined>;
    public readonly limitPps!: pulumi.Output<outputs.TemplateLimitPolicyLimitPps | undefined>;
    /**
     * 'aggregate': Rule Level; 'subscriber-ip': Subscriber IP Level; 'subscriber-prefix': Subscriber Prefix Level;
     */
    public readonly limitScope!: pulumi.Output<string | undefined>;
    public readonly limitThroughput!: pulumi.Output<outputs.TemplateLimitPolicyLimitThroughput | undefined>;
    /**
     * Log when Session Limit is exceeded
     */
    public readonly log!: pulumi.Output<number | undefined>;
    /**
     * Enable max-min-fairness
     */
    public readonly maxMinFair!: pulumi.Output<number | undefined>;
    /**
     * Specify the parent of limit-policy
     */
    public readonly parent!: pulumi.Output<number | undefined>;
    /**
     * Limit Policy Number
     */
    public readonly policyNumber!: pulumi.Output<number>;
    /**
     * Prefix length
     */
    public readonly prefixLength!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a TemplateLimitPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateLimitPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateLimitPolicyArgs | TemplateLimitPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateLimitPolicyState | undefined;
            resourceInputs["limitConcurrentSessions"] = state ? state.limitConcurrentSessions : undefined;
            resourceInputs["limitCps"] = state ? state.limitCps : undefined;
            resourceInputs["limitPps"] = state ? state.limitPps : undefined;
            resourceInputs["limitScope"] = state ? state.limitScope : undefined;
            resourceInputs["limitThroughput"] = state ? state.limitThroughput : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["maxMinFair"] = state ? state.maxMinFair : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["policyNumber"] = state ? state.policyNumber : undefined;
            resourceInputs["prefixLength"] = state ? state.prefixLength : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TemplateLimitPolicyArgs | undefined;
            if ((!args || args.policyNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyNumber'");
            }
            resourceInputs["limitConcurrentSessions"] = args ? args.limitConcurrentSessions : undefined;
            resourceInputs["limitCps"] = args ? args.limitCps : undefined;
            resourceInputs["limitPps"] = args ? args.limitPps : undefined;
            resourceInputs["limitScope"] = args ? args.limitScope : undefined;
            resourceInputs["limitThroughput"] = args ? args.limitThroughput : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["maxMinFair"] = args ? args.maxMinFair : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["policyNumber"] = args ? args.policyNumber : undefined;
            resourceInputs["prefixLength"] = args ? args.prefixLength : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemplateLimitPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TemplateLimitPolicy resources.
 */
export interface TemplateLimitPolicyState {
    /**
     * Enable Concurrent Session Limit (Number of Concurrent Sessions)
     */
    limitConcurrentSessions?: pulumi.Input<number>;
    limitCps?: pulumi.Input<inputs.TemplateLimitPolicyLimitCps>;
    limitPps?: pulumi.Input<inputs.TemplateLimitPolicyLimitPps>;
    /**
     * 'aggregate': Rule Level; 'subscriber-ip': Subscriber IP Level; 'subscriber-prefix': Subscriber Prefix Level;
     */
    limitScope?: pulumi.Input<string>;
    limitThroughput?: pulumi.Input<inputs.TemplateLimitPolicyLimitThroughput>;
    /**
     * Log when Session Limit is exceeded
     */
    log?: pulumi.Input<number>;
    /**
     * Enable max-min-fairness
     */
    maxMinFair?: pulumi.Input<number>;
    /**
     * Specify the parent of limit-policy
     */
    parent?: pulumi.Input<number>;
    /**
     * Limit Policy Number
     */
    policyNumber?: pulumi.Input<number>;
    /**
     * Prefix length
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TemplateLimitPolicy resource.
 */
export interface TemplateLimitPolicyArgs {
    /**
     * Enable Concurrent Session Limit (Number of Concurrent Sessions)
     */
    limitConcurrentSessions?: pulumi.Input<number>;
    limitCps?: pulumi.Input<inputs.TemplateLimitPolicyLimitCps>;
    limitPps?: pulumi.Input<inputs.TemplateLimitPolicyLimitPps>;
    /**
     * 'aggregate': Rule Level; 'subscriber-ip': Subscriber IP Level; 'subscriber-prefix': Subscriber Prefix Level;
     */
    limitScope?: pulumi.Input<string>;
    limitThroughput?: pulumi.Input<inputs.TemplateLimitPolicyLimitThroughput>;
    /**
     * Log when Session Limit is exceeded
     */
    log?: pulumi.Input<number>;
    /**
     * Enable max-min-fairness
     */
    maxMinFair?: pulumi.Input<number>;
    /**
     * Specify the parent of limit-policy
     */
    parent?: pulumi.Input<number>;
    /**
     * Limit Policy Number
     */
    policyNumber: pulumi.Input<number>;
    /**
     * Prefix length
     */
    prefixLength?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
