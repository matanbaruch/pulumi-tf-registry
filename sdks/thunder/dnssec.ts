// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Dnssec extends pulumi.CustomResource {
    /**
     * Get an existing Dnssec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnssecState, opts?: pulumi.CustomResourceOptions): Dnssec {
        return new Dnssec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/dnssec:Dnssec';

    /**
     * Returns true if the given object is an instance of Dnssec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dnssec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dnssec.__pulumiType;
    }

    public readonly dnskey!: pulumi.Output<outputs.DnssecDnskey | undefined>;
    public readonly ds!: pulumi.Output<outputs.DnssecDs | undefined>;
    public readonly keyRollover!: pulumi.Output<outputs.DnssecKeyRollover | undefined>;
    public readonly signZoneNow!: pulumi.Output<outputs.DnssecSignZoneNow | undefined>;
    /**
     * Run DNSSEC in standalone mode, in GSLB group mode by default
     */
    public readonly standalone!: pulumi.Output<number | undefined>;
    public readonly templateLists!: pulumi.Output<outputs.DnssecTemplateList[] | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Dnssec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DnssecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnssecArgs | DnssecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnssecState | undefined;
            resourceInputs["dnskey"] = state ? state.dnskey : undefined;
            resourceInputs["ds"] = state ? state.ds : undefined;
            resourceInputs["keyRollover"] = state ? state.keyRollover : undefined;
            resourceInputs["signZoneNow"] = state ? state.signZoneNow : undefined;
            resourceInputs["standalone"] = state ? state.standalone : undefined;
            resourceInputs["templateLists"] = state ? state.templateLists : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DnssecArgs | undefined;
            resourceInputs["dnskey"] = args ? args.dnskey : undefined;
            resourceInputs["ds"] = args ? args.ds : undefined;
            resourceInputs["keyRollover"] = args ? args.keyRollover : undefined;
            resourceInputs["signZoneNow"] = args ? args.signZoneNow : undefined;
            resourceInputs["standalone"] = args ? args.standalone : undefined;
            resourceInputs["templateLists"] = args ? args.templateLists : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dnssec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Dnssec resources.
 */
export interface DnssecState {
    dnskey?: pulumi.Input<inputs.DnssecDnskey>;
    ds?: pulumi.Input<inputs.DnssecDs>;
    keyRollover?: pulumi.Input<inputs.DnssecKeyRollover>;
    signZoneNow?: pulumi.Input<inputs.DnssecSignZoneNow>;
    /**
     * Run DNSSEC in standalone mode, in GSLB group mode by default
     */
    standalone?: pulumi.Input<number>;
    templateLists?: pulumi.Input<pulumi.Input<inputs.DnssecTemplateList>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dnssec resource.
 */
export interface DnssecArgs {
    dnskey?: pulumi.Input<inputs.DnssecDnskey>;
    ds?: pulumi.Input<inputs.DnssecDs>;
    keyRollover?: pulumi.Input<inputs.DnssecKeyRollover>;
    signZoneNow?: pulumi.Input<inputs.DnssecSignZoneNow>;
    /**
     * Run DNSSEC in standalone mode, in GSLB group mode by default
     */
    standalone?: pulumi.Input<number>;
    templateLists?: pulumi.Input<pulumi.Input<inputs.DnssecTemplateList>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
