// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateDoh extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateDoh resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateDohState, opts?: pulumi.CustomResourceOptions): SlbTemplateDoh {
        return new SlbTemplateDoh(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateDoh:SlbTemplateDoh';

    /**
     * Returns true if the given object is an instance of SlbTemplateDoh.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateDoh {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateDoh.__pulumiType;
    }

    /**
     * 'enable': Enable Connection Reuse; 'disable': Disable Connection-Reuse (Default);
     */
    public readonly connReuse!: pulumi.Output<string | undefined>;
    /**
     * DNS Template Name
     */
    public readonly dns!: pulumi.Output<string | undefined>;
    public readonly dnsRetry!: pulumi.Output<outputs.SlbTemplateDohDnsRetry | undefined>;
    public readonly forwarder!: pulumi.Output<outputs.SlbTemplateDohForwarder | undefined>;
    /**
     * DNS over HTTP(s) Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'allow': Forward Non-DoH request to http server bound to vport; 'reject': Reject Non-DoH requests with HTTP 400 Bad
     * Request (Default);
     */
    public readonly nonDnsRequest!: pulumi.Output<string | undefined>;
    /**
     * '400': Status Code 400 BAD Request (Default); '500': Status Code 500 Internal Server Error; '501': Status Code 501 Not
     * Implemented;
     */
    public readonly rejectStatusCode!: pulumi.Output<string | undefined>;
    /**
     * Reference a DNS template from shared partition
     */
    public readonly sharedPartitionDnsTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a TCP Proxy template from shared partition
     */
    public readonly sharedPartitionTcpProxyTemplate!: pulumi.Output<number | undefined>;
    /**
     * Source NAT pool or pool group
     */
    public readonly snatPool!: pulumi.Output<string | undefined>;
    /**
     * 'auto': Perform Source NAT Auto for service-group(Default) (Not supported with forwarding-ip); 'disable': Don't perform
     * source-nat for server side DNS queries; 'pool': Perform Source NAT with specific pool;
     */
    public readonly sourceNat!: pulumi.Output<string | undefined>;
    /**
     * TCP Proxy Template Name
     */
    public readonly tcpProxy!: pulumi.Output<string | undefined>;
    /**
     * DNS Template name
     */
    public readonly templateDnsShared!: pulumi.Output<string | undefined>;
    /**
     * TCP Proxy Template name
     */
    public readonly templateTcpProxyShared!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateDoh resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateDohArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateDohArgs | SlbTemplateDohState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateDohState | undefined;
            resourceInputs["connReuse"] = state ? state.connReuse : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["dnsRetry"] = state ? state.dnsRetry : undefined;
            resourceInputs["forwarder"] = state ? state.forwarder : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonDnsRequest"] = state ? state.nonDnsRequest : undefined;
            resourceInputs["rejectStatusCode"] = state ? state.rejectStatusCode : undefined;
            resourceInputs["sharedPartitionDnsTemplate"] = state ? state.sharedPartitionDnsTemplate : undefined;
            resourceInputs["sharedPartitionTcpProxyTemplate"] = state ? state.sharedPartitionTcpProxyTemplate : undefined;
            resourceInputs["snatPool"] = state ? state.snatPool : undefined;
            resourceInputs["sourceNat"] = state ? state.sourceNat : undefined;
            resourceInputs["tcpProxy"] = state ? state.tcpProxy : undefined;
            resourceInputs["templateDnsShared"] = state ? state.templateDnsShared : undefined;
            resourceInputs["templateTcpProxyShared"] = state ? state.templateTcpProxyShared : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateDohArgs | undefined;
            resourceInputs["connReuse"] = args ? args.connReuse : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["dnsRetry"] = args ? args.dnsRetry : undefined;
            resourceInputs["forwarder"] = args ? args.forwarder : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonDnsRequest"] = args ? args.nonDnsRequest : undefined;
            resourceInputs["rejectStatusCode"] = args ? args.rejectStatusCode : undefined;
            resourceInputs["sharedPartitionDnsTemplate"] = args ? args.sharedPartitionDnsTemplate : undefined;
            resourceInputs["sharedPartitionTcpProxyTemplate"] = args ? args.sharedPartitionTcpProxyTemplate : undefined;
            resourceInputs["snatPool"] = args ? args.snatPool : undefined;
            resourceInputs["sourceNat"] = args ? args.sourceNat : undefined;
            resourceInputs["tcpProxy"] = args ? args.tcpProxy : undefined;
            resourceInputs["templateDnsShared"] = args ? args.templateDnsShared : undefined;
            resourceInputs["templateTcpProxyShared"] = args ? args.templateTcpProxyShared : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateDoh.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateDoh resources.
 */
export interface SlbTemplateDohState {
    /**
     * 'enable': Enable Connection Reuse; 'disable': Disable Connection-Reuse (Default);
     */
    connReuse?: pulumi.Input<string>;
    /**
     * DNS Template Name
     */
    dns?: pulumi.Input<string>;
    dnsRetry?: pulumi.Input<inputs.SlbTemplateDohDnsRetry>;
    forwarder?: pulumi.Input<inputs.SlbTemplateDohForwarder>;
    /**
     * DNS over HTTP(s) Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'allow': Forward Non-DoH request to http server bound to vport; 'reject': Reject Non-DoH requests with HTTP 400 Bad
     * Request (Default);
     */
    nonDnsRequest?: pulumi.Input<string>;
    /**
     * '400': Status Code 400 BAD Request (Default); '500': Status Code 500 Internal Server Error; '501': Status Code 501 Not
     * Implemented;
     */
    rejectStatusCode?: pulumi.Input<string>;
    /**
     * Reference a DNS template from shared partition
     */
    sharedPartitionDnsTemplate?: pulumi.Input<number>;
    /**
     * Reference a TCP Proxy template from shared partition
     */
    sharedPartitionTcpProxyTemplate?: pulumi.Input<number>;
    /**
     * Source NAT pool or pool group
     */
    snatPool?: pulumi.Input<string>;
    /**
     * 'auto': Perform Source NAT Auto for service-group(Default) (Not supported with forwarding-ip); 'disable': Don't perform
     * source-nat for server side DNS queries; 'pool': Perform Source NAT with specific pool;
     */
    sourceNat?: pulumi.Input<string>;
    /**
     * TCP Proxy Template Name
     */
    tcpProxy?: pulumi.Input<string>;
    /**
     * DNS Template name
     */
    templateDnsShared?: pulumi.Input<string>;
    /**
     * TCP Proxy Template name
     */
    templateTcpProxyShared?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateDoh resource.
 */
export interface SlbTemplateDohArgs {
    /**
     * 'enable': Enable Connection Reuse; 'disable': Disable Connection-Reuse (Default);
     */
    connReuse?: pulumi.Input<string>;
    /**
     * DNS Template Name
     */
    dns?: pulumi.Input<string>;
    dnsRetry?: pulumi.Input<inputs.SlbTemplateDohDnsRetry>;
    forwarder?: pulumi.Input<inputs.SlbTemplateDohForwarder>;
    /**
     * DNS over HTTP(s) Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'allow': Forward Non-DoH request to http server bound to vport; 'reject': Reject Non-DoH requests with HTTP 400 Bad
     * Request (Default);
     */
    nonDnsRequest?: pulumi.Input<string>;
    /**
     * '400': Status Code 400 BAD Request (Default); '500': Status Code 500 Internal Server Error; '501': Status Code 501 Not
     * Implemented;
     */
    rejectStatusCode?: pulumi.Input<string>;
    /**
     * Reference a DNS template from shared partition
     */
    sharedPartitionDnsTemplate?: pulumi.Input<number>;
    /**
     * Reference a TCP Proxy template from shared partition
     */
    sharedPartitionTcpProxyTemplate?: pulumi.Input<number>;
    /**
     * Source NAT pool or pool group
     */
    snatPool?: pulumi.Input<string>;
    /**
     * 'auto': Perform Source NAT Auto for service-group(Default) (Not supported with forwarding-ip); 'disable': Don't perform
     * source-nat for server side DNS queries; 'pool': Perform Source NAT with specific pool;
     */
    sourceNat?: pulumi.Input<string>;
    /**
     * TCP Proxy Template Name
     */
    tcpProxy?: pulumi.Input<string>;
    /**
     * DNS Template name
     */
    templateDnsShared?: pulumi.Input<string>;
    /**
     * TCP Proxy Template name
     */
    templateTcpProxyShared?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
