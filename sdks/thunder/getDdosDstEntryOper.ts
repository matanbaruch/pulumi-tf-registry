// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDdosDstEntryOper(args: GetDdosDstEntryOperArgs, opts?: pulumi.InvokeOptions): Promise<GetDdosDstEntryOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getDdosDstEntryOper:getDdosDstEntryOper", {
        "dstEntryName": args.dstEntryName,
        "id": args.id,
        "ipProtoLists": args.ipProtoLists,
        "l4TypeLists": args.l4TypeLists,
        "oper": args.oper,
        "portLists": args.portLists,
        "portRangeLists": args.portRangeLists,
        "srcPortLists": args.srcPortLists,
        "srcPortRangeLists": args.srcPortRangeLists,
        "topkDestinations": args.topkDestinations,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDdosDstEntryOper.
 */
export interface GetDdosDstEntryOperArgs {
    dstEntryName: string;
    id?: string;
    ipProtoLists?: inputs.GetDdosDstEntryOperIpProtoList[];
    l4TypeLists?: inputs.GetDdosDstEntryOperL4TypeList[];
    oper?: inputs.GetDdosDstEntryOperOper;
    portLists?: inputs.GetDdosDstEntryOperPortList[];
    portRangeLists?: inputs.GetDdosDstEntryOperPortRangeList[];
    srcPortLists?: inputs.GetDdosDstEntryOperSrcPortList[];
    srcPortRangeLists?: inputs.GetDdosDstEntryOperSrcPortRangeList[];
    topkDestinations?: inputs.GetDdosDstEntryOperTopkDestinations;
}

/**
 * A collection of values returned by getDdosDstEntryOper.
 */
export interface GetDdosDstEntryOperResult {
    readonly dstEntryName: string;
    readonly id: string;
    readonly ipProtoLists?: outputs.GetDdosDstEntryOperIpProtoList[];
    readonly l4TypeLists?: outputs.GetDdosDstEntryOperL4TypeList[];
    readonly oper?: outputs.GetDdosDstEntryOperOper;
    readonly portLists?: outputs.GetDdosDstEntryOperPortList[];
    readonly portRangeLists?: outputs.GetDdosDstEntryOperPortRangeList[];
    readonly srcPortLists?: outputs.GetDdosDstEntryOperSrcPortList[];
    readonly srcPortRangeLists?: outputs.GetDdosDstEntryOperSrcPortRangeList[];
    readonly topkDestinations?: outputs.GetDdosDstEntryOperTopkDestinations;
}
export function getDdosDstEntryOperOutput(args: GetDdosDstEntryOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDdosDstEntryOperResult> {
    return pulumi.output(args).apply((a: any) => getDdosDstEntryOper(a, opts))
}

/**
 * A collection of arguments for invoking getDdosDstEntryOper.
 */
export interface GetDdosDstEntryOperOutputArgs {
    dstEntryName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipProtoLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstEntryOperIpProtoListArgs>[]>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstEntryOperL4TypeListArgs>[]>;
    oper?: pulumi.Input<inputs.GetDdosDstEntryOperOperArgs>;
    portLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstEntryOperPortListArgs>[]>;
    portRangeLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstEntryOperPortRangeListArgs>[]>;
    srcPortLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstEntryOperSrcPortListArgs>[]>;
    srcPortRangeLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstEntryOperSrcPortRangeListArgs>[]>;
    topkDestinations?: pulumi.Input<inputs.GetDdosDstEntryOperTopkDestinationsArgs>;
}
