// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AamAuthenticationOauthClient extends pulumi.CustomResource {
    /**
     * Get an existing AamAuthenticationOauthClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAuthenticationOauthClientState, opts?: pulumi.CustomResourceOptions): AamAuthenticationOauthClient {
        return new AamAuthenticationOauthClient(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAuthenticationOauthClient:AamAuthenticationOauthClient';

    /**
     * Returns true if the given object is an instance of AamAuthenticationOauthClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAuthenticationOauthClient {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAuthenticationOauthClient.__pulumiType;
    }

    /**
     * Specify oauth client-id
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    public readonly clientSecret!: pulumi.Output<string | undefined>;
    /**
     * 'implicit': The authorization server will return access token directly.; 'authorization-code': The authorization server
     * will respond with code which can be exchange for access token.; 'hybrid-code-id-token': The authorization server will
     * respond with both code and id token.; 'hybrid-code-token': The authorization server will respond with both code and
     * access token.; 'hybrid-all': The authorization server will respond with code, access token and id token;
     */
    public readonly grantType!: pulumi.Output<string | undefined>;
    /**
     * Auth session never time out whatever value oauth servers' response
     */
    public readonly infinity!: pulumi.Output<number | undefined>;
    /**
     * Specify client object name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * AX will not check the nonce value in response
     */
    public readonly noReply!: pulumi.Output<number | undefined>;
    /**
     * Enable nonce parameter for authorization and token request
     */
    public readonly parameterNonceEnable!: pulumi.Output<number | undefined>;
    /**
     * Oauth client redirection endpoint service URL.
     */
    public readonly redirectionEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Specify request scope parameters (e.g. profile email address phone)
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    /**
     * TTL for Thunder to wait for first response from authorization server
     */
    public readonly sessionInitTtl!: pulumi.Output<number | undefined>;
    public readonly tokenLifetime!: pulumi.Output<number | undefined>;
    /**
     * 'openid-connect': openid-connect;
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AamAuthenticationOauthClient resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AamAuthenticationOauthClientArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAuthenticationOauthClientArgs | AamAuthenticationOauthClientState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAuthenticationOauthClientState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["grantType"] = state ? state.grantType : undefined;
            resourceInputs["infinity"] = state ? state.infinity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noReply"] = state ? state.noReply : undefined;
            resourceInputs["parameterNonceEnable"] = state ? state.parameterNonceEnable : undefined;
            resourceInputs["redirectionEndpoint"] = state ? state.redirectionEndpoint : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["sessionInitTtl"] = state ? state.sessionInitTtl : undefined;
            resourceInputs["tokenLifetime"] = state ? state.tokenLifetime : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AamAuthenticationOauthClientArgs | undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["grantType"] = args ? args.grantType : undefined;
            resourceInputs["infinity"] = args ? args.infinity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noReply"] = args ? args.noReply : undefined;
            resourceInputs["parameterNonceEnable"] = args ? args.parameterNonceEnable : undefined;
            resourceInputs["redirectionEndpoint"] = args ? args.redirectionEndpoint : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["sessionInitTtl"] = args ? args.sessionInitTtl : undefined;
            resourceInputs["tokenLifetime"] = args ? args.tokenLifetime : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAuthenticationOauthClient.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAuthenticationOauthClient resources.
 */
export interface AamAuthenticationOauthClientState {
    /**
     * Specify oauth client-id
     */
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    /**
     * 'implicit': The authorization server will return access token directly.; 'authorization-code': The authorization server
     * will respond with code which can be exchange for access token.; 'hybrid-code-id-token': The authorization server will
     * respond with both code and id token.; 'hybrid-code-token': The authorization server will respond with both code and
     * access token.; 'hybrid-all': The authorization server will respond with code, access token and id token;
     */
    grantType?: pulumi.Input<string>;
    /**
     * Auth session never time out whatever value oauth servers' response
     */
    infinity?: pulumi.Input<number>;
    /**
     * Specify client object name
     */
    name?: pulumi.Input<string>;
    /**
     * AX will not check the nonce value in response
     */
    noReply?: pulumi.Input<number>;
    /**
     * Enable nonce parameter for authorization and token request
     */
    parameterNonceEnable?: pulumi.Input<number>;
    /**
     * Oauth client redirection endpoint service URL.
     */
    redirectionEndpoint?: pulumi.Input<string>;
    /**
     * Specify request scope parameters (e.g. profile email address phone)
     */
    scope?: pulumi.Input<string>;
    /**
     * TTL for Thunder to wait for first response from authorization server
     */
    sessionInitTtl?: pulumi.Input<number>;
    tokenLifetime?: pulumi.Input<number>;
    /**
     * 'openid-connect': openid-connect;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAuthenticationOauthClient resource.
 */
export interface AamAuthenticationOauthClientArgs {
    /**
     * Specify oauth client-id
     */
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    /**
     * 'implicit': The authorization server will return access token directly.; 'authorization-code': The authorization server
     * will respond with code which can be exchange for access token.; 'hybrid-code-id-token': The authorization server will
     * respond with both code and id token.; 'hybrid-code-token': The authorization server will respond with both code and
     * access token.; 'hybrid-all': The authorization server will respond with code, access token and id token;
     */
    grantType?: pulumi.Input<string>;
    /**
     * Auth session never time out whatever value oauth servers' response
     */
    infinity?: pulumi.Input<number>;
    /**
     * Specify client object name
     */
    name?: pulumi.Input<string>;
    /**
     * AX will not check the nonce value in response
     */
    noReply?: pulumi.Input<number>;
    /**
     * Enable nonce parameter for authorization and token request
     */
    parameterNonceEnable?: pulumi.Input<number>;
    /**
     * Oauth client redirection endpoint service URL.
     */
    redirectionEndpoint?: pulumi.Input<string>;
    /**
     * Specify request scope parameters (e.g. profile email address phone)
     */
    scope?: pulumi.Input<string>;
    /**
     * TTL for Thunder to wait for first response from authorization server
     */
    sessionInitTtl?: pulumi.Input<number>;
    tokenLifetime?: pulumi.Input<number>;
    /**
     * 'openid-connect': openid-connect;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
