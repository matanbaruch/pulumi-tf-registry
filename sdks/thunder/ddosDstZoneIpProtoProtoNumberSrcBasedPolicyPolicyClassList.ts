// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListState, opts?: pulumi.CustomResourceOptions): DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList {
        return new DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList:DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList';

    /**
     * Returns true if the given object is an instance of DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList.__pulumiType;
    }

    /**
     * 'bypass': Always permit for the Source to bypass all feature & limit checks; 'deny': Blacklist incoming packets for
     * service;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Class-list name
     */
    public readonly classListName!: pulumi.Output<string>;
    public readonly classListOverflowPolicyLists!: pulumi.Output<outputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListClassListOverflowPolicyList[] | undefined>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    /**
     * 'drop': Drop packets for glid exceed (Default); 'blacklist-src': Blacklist-src for glid exceed; 'ignore': Do nothing for
     * glid exceed;
     */
    public readonly glidAction!: pulumi.Output<string | undefined>;
    /**
     * Enable logging
     */
    public readonly logEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable log periodic
     */
    public readonly logPeriodic!: pulumi.Output<number | undefined>;
    /**
     * Maximum count for dynamic source zone service entry allowed for this class-list
     */
    public readonly maxDynamicEntryCount!: pulumi.Output<number | undefined>;
    /**
     * ProtocolNum
     */
    public readonly protocolNum!: pulumi.Output<string>;
    public readonly samplingEnables!: pulumi.Output<outputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListSamplingEnable[] | undefined>;
    /**
     * SrcBasedPolicyName
     */
    public readonly srcBasedPolicyName!: pulumi.Output<string>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * ZoneName
     */
    public readonly zoneName!: pulumi.Output<string>;
    public readonly zoneTemplate!: pulumi.Output<outputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListZoneTemplate | undefined>;

    /**
     * Create a DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListArgs | DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["classListName"] = state ? state.classListName : undefined;
            resourceInputs["classListOverflowPolicyLists"] = state ? state.classListOverflowPolicyLists : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["glidAction"] = state ? state.glidAction : undefined;
            resourceInputs["logEnable"] = state ? state.logEnable : undefined;
            resourceInputs["logPeriodic"] = state ? state.logPeriodic : undefined;
            resourceInputs["maxDynamicEntryCount"] = state ? state.maxDynamicEntryCount : undefined;
            resourceInputs["protocolNum"] = state ? state.protocolNum : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["srcBasedPolicyName"] = state ? state.srcBasedPolicyName : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
            resourceInputs["zoneTemplate"] = state ? state.zoneTemplate : undefined;
        } else {
            const args = argsOrState as DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListArgs | undefined;
            if ((!args || args.classListName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'classListName'");
            }
            if ((!args || args.protocolNum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolNum'");
            }
            if ((!args || args.srcBasedPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcBasedPolicyName'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["classListName"] = args ? args.classListName : undefined;
            resourceInputs["classListOverflowPolicyLists"] = args ? args.classListOverflowPolicyLists : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["glidAction"] = args ? args.glidAction : undefined;
            resourceInputs["logEnable"] = args ? args.logEnable : undefined;
            resourceInputs["logPeriodic"] = args ? args.logPeriodic : undefined;
            resourceInputs["maxDynamicEntryCount"] = args ? args.maxDynamicEntryCount : undefined;
            resourceInputs["protocolNum"] = args ? args.protocolNum : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["srcBasedPolicyName"] = args ? args.srcBasedPolicyName : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["zoneTemplate"] = args ? args.zoneTemplate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList resources.
 */
export interface DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListState {
    /**
     * 'bypass': Always permit for the Source to bypass all feature & limit checks; 'deny': Blacklist incoming packets for
     * service;
     */
    action?: pulumi.Input<string>;
    /**
     * Class-list name
     */
    classListName?: pulumi.Input<string>;
    classListOverflowPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListClassListOverflowPolicyList>[]>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for glid exceed (Default); 'blacklist-src': Blacklist-src for glid exceed; 'ignore': Do nothing for
     * glid exceed;
     */
    glidAction?: pulumi.Input<string>;
    /**
     * Enable logging
     */
    logEnable?: pulumi.Input<number>;
    /**
     * Enable log periodic
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * Maximum count for dynamic source zone service entry allowed for this class-list
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    /**
     * ProtocolNum
     */
    protocolNum?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListSamplingEnable>[]>;
    /**
     * SrcBasedPolicyName
     */
    srcBasedPolicyName?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName?: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListZoneTemplate>;
}

/**
 * The set of arguments for constructing a DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassList resource.
 */
export interface DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListArgs {
    /**
     * 'bypass': Always permit for the Source to bypass all feature & limit checks; 'deny': Blacklist incoming packets for
     * service;
     */
    action?: pulumi.Input<string>;
    /**
     * Class-list name
     */
    classListName: pulumi.Input<string>;
    classListOverflowPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListClassListOverflowPolicyList>[]>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for glid exceed (Default); 'blacklist-src': Blacklist-src for glid exceed; 'ignore': Do nothing for
     * glid exceed;
     */
    glidAction?: pulumi.Input<string>;
    /**
     * Enable logging
     */
    logEnable?: pulumi.Input<number>;
    /**
     * Enable log periodic
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * Maximum count for dynamic source zone service entry allowed for this class-list
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    /**
     * ProtocolNum
     */
    protocolNum: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListSamplingEnable>[]>;
    /**
     * SrcBasedPolicyName
     */
    srcBasedPolicyName: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZoneIpProtoProtoNumberSrcBasedPolicyPolicyClassListZoneTemplate>;
}
