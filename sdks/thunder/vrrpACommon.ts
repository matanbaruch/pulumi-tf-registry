// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VrrpACommon extends pulumi.CustomResource {
    /**
     * Get an existing VrrpACommon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrrpACommonState, opts?: pulumi.CustomResourceOptions): VrrpACommon {
        return new VrrpACommon(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vrrpACommon:VrrpACommon';

    /**
     * Returns true if the given object is an instance of VrrpACommon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VrrpACommon {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VrrpACommon.__pulumiType;
    }

    /**
     * 'enable': enable vrrp-a; 'disable': disable vrrp-a;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Number of additional gratuitous ARPs sent out after HA failover (1-255, default is 4)
     */
    public readonly arpRetry!: pulumi.Output<number | undefined>;
    /**
     * VRRP-A dead timer in terms of how many hello messages missed, default is 5 (2-255, default is 5)
     */
    public readonly deadTimer!: pulumi.Output<number | undefined>;
    /**
     * Unique ID for each VRRP-A box (Device-id number)
     */
    public readonly deviceId!: pulumi.Output<number | undefined>;
    /**
     * Disable default vrid
     */
    public readonly disableDefaultVrid!: pulumi.Output<number | undefined>;
    /**
     * Enables Layer 2/3 forwarding of Layer 4 traffic on the Standby ACOS device
     */
    public readonly forwardL4PacketOnStandby!: pulumi.Output<number | undefined>;
    /**
     * set get ready time after ax starting up (60-1200, in unit of 100millisec, default is 60)
     */
    public readonly getReadyTime!: pulumi.Output<number | undefined>;
    /**
     * VRRP-A Hello Interval (1-255, in unit of 100millisec, default is 2)
     */
    public readonly helloInterval!: pulumi.Output<number | undefined>;
    /**
     * VRRP-A packet IPv6 header hop-limit (hop-limit, default is 64)
     */
    public readonly hopLimit!: pulumi.Output<number | undefined>;
    public readonly hostidAppendToVrid!: pulumi.Output<outputs.VrrpACommonHostidAppendToVrid | undefined>;
    public readonly inlineModeCfg!: pulumi.Output<outputs.VrrpACommonInlineModeCfg | undefined>;
    /**
     * Delay before changing state from Active to Standby (1-255, in unit of 100millisec, default is 60)
     */
    public readonly preemptionDelay!: pulumi.Output<number | undefined>;
    /**
     * Time between restarting ports on standby system after transition
     */
    public readonly restartTime!: pulumi.Output<number | undefined>;
    /**
     * Set-ID for HA configuration (Set id from 1 to 15)
     */
    public readonly setId!: pulumi.Output<number | undefined>;
    /**
     * Delay before changing state after up/down event (Units of 100 milliseconds (default 30))
     */
    public readonly trackEventDelay!: pulumi.Output<number | undefined>;
    /**
     * VRRP-A packet IPv4 header TTL (TTL, default is 128)
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VrrpACommon resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VrrpACommonArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrrpACommonArgs | VrrpACommonState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrrpACommonState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["arpRetry"] = state ? state.arpRetry : undefined;
            resourceInputs["deadTimer"] = state ? state.deadTimer : undefined;
            resourceInputs["deviceId"] = state ? state.deviceId : undefined;
            resourceInputs["disableDefaultVrid"] = state ? state.disableDefaultVrid : undefined;
            resourceInputs["forwardL4PacketOnStandby"] = state ? state.forwardL4PacketOnStandby : undefined;
            resourceInputs["getReadyTime"] = state ? state.getReadyTime : undefined;
            resourceInputs["helloInterval"] = state ? state.helloInterval : undefined;
            resourceInputs["hopLimit"] = state ? state.hopLimit : undefined;
            resourceInputs["hostidAppendToVrid"] = state ? state.hostidAppendToVrid : undefined;
            resourceInputs["inlineModeCfg"] = state ? state.inlineModeCfg : undefined;
            resourceInputs["preemptionDelay"] = state ? state.preemptionDelay : undefined;
            resourceInputs["restartTime"] = state ? state.restartTime : undefined;
            resourceInputs["setId"] = state ? state.setId : undefined;
            resourceInputs["trackEventDelay"] = state ? state.trackEventDelay : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VrrpACommonArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["arpRetry"] = args ? args.arpRetry : undefined;
            resourceInputs["deadTimer"] = args ? args.deadTimer : undefined;
            resourceInputs["deviceId"] = args ? args.deviceId : undefined;
            resourceInputs["disableDefaultVrid"] = args ? args.disableDefaultVrid : undefined;
            resourceInputs["forwardL4PacketOnStandby"] = args ? args.forwardL4PacketOnStandby : undefined;
            resourceInputs["getReadyTime"] = args ? args.getReadyTime : undefined;
            resourceInputs["helloInterval"] = args ? args.helloInterval : undefined;
            resourceInputs["hopLimit"] = args ? args.hopLimit : undefined;
            resourceInputs["hostidAppendToVrid"] = args ? args.hostidAppendToVrid : undefined;
            resourceInputs["inlineModeCfg"] = args ? args.inlineModeCfg : undefined;
            resourceInputs["preemptionDelay"] = args ? args.preemptionDelay : undefined;
            resourceInputs["restartTime"] = args ? args.restartTime : undefined;
            resourceInputs["setId"] = args ? args.setId : undefined;
            resourceInputs["trackEventDelay"] = args ? args.trackEventDelay : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VrrpACommon.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VrrpACommon resources.
 */
export interface VrrpACommonState {
    /**
     * 'enable': enable vrrp-a; 'disable': disable vrrp-a;
     */
    action?: pulumi.Input<string>;
    /**
     * Number of additional gratuitous ARPs sent out after HA failover (1-255, default is 4)
     */
    arpRetry?: pulumi.Input<number>;
    /**
     * VRRP-A dead timer in terms of how many hello messages missed, default is 5 (2-255, default is 5)
     */
    deadTimer?: pulumi.Input<number>;
    /**
     * Unique ID for each VRRP-A box (Device-id number)
     */
    deviceId?: pulumi.Input<number>;
    /**
     * Disable default vrid
     */
    disableDefaultVrid?: pulumi.Input<number>;
    /**
     * Enables Layer 2/3 forwarding of Layer 4 traffic on the Standby ACOS device
     */
    forwardL4PacketOnStandby?: pulumi.Input<number>;
    /**
     * set get ready time after ax starting up (60-1200, in unit of 100millisec, default is 60)
     */
    getReadyTime?: pulumi.Input<number>;
    /**
     * VRRP-A Hello Interval (1-255, in unit of 100millisec, default is 2)
     */
    helloInterval?: pulumi.Input<number>;
    /**
     * VRRP-A packet IPv6 header hop-limit (hop-limit, default is 64)
     */
    hopLimit?: pulumi.Input<number>;
    hostidAppendToVrid?: pulumi.Input<inputs.VrrpACommonHostidAppendToVrid>;
    inlineModeCfg?: pulumi.Input<inputs.VrrpACommonInlineModeCfg>;
    /**
     * Delay before changing state from Active to Standby (1-255, in unit of 100millisec, default is 60)
     */
    preemptionDelay?: pulumi.Input<number>;
    /**
     * Time between restarting ports on standby system after transition
     */
    restartTime?: pulumi.Input<number>;
    /**
     * Set-ID for HA configuration (Set id from 1 to 15)
     */
    setId?: pulumi.Input<number>;
    /**
     * Delay before changing state after up/down event (Units of 100 milliseconds (default 30))
     */
    trackEventDelay?: pulumi.Input<number>;
    /**
     * VRRP-A packet IPv4 header TTL (TTL, default is 128)
     */
    ttl?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VrrpACommon resource.
 */
export interface VrrpACommonArgs {
    /**
     * 'enable': enable vrrp-a; 'disable': disable vrrp-a;
     */
    action?: pulumi.Input<string>;
    /**
     * Number of additional gratuitous ARPs sent out after HA failover (1-255, default is 4)
     */
    arpRetry?: pulumi.Input<number>;
    /**
     * VRRP-A dead timer in terms of how many hello messages missed, default is 5 (2-255, default is 5)
     */
    deadTimer?: pulumi.Input<number>;
    /**
     * Unique ID for each VRRP-A box (Device-id number)
     */
    deviceId?: pulumi.Input<number>;
    /**
     * Disable default vrid
     */
    disableDefaultVrid?: pulumi.Input<number>;
    /**
     * Enables Layer 2/3 forwarding of Layer 4 traffic on the Standby ACOS device
     */
    forwardL4PacketOnStandby?: pulumi.Input<number>;
    /**
     * set get ready time after ax starting up (60-1200, in unit of 100millisec, default is 60)
     */
    getReadyTime?: pulumi.Input<number>;
    /**
     * VRRP-A Hello Interval (1-255, in unit of 100millisec, default is 2)
     */
    helloInterval?: pulumi.Input<number>;
    /**
     * VRRP-A packet IPv6 header hop-limit (hop-limit, default is 64)
     */
    hopLimit?: pulumi.Input<number>;
    hostidAppendToVrid?: pulumi.Input<inputs.VrrpACommonHostidAppendToVrid>;
    inlineModeCfg?: pulumi.Input<inputs.VrrpACommonInlineModeCfg>;
    /**
     * Delay before changing state from Active to Standby (1-255, in unit of 100millisec, default is 60)
     */
    preemptionDelay?: pulumi.Input<number>;
    /**
     * Time between restarting ports on standby system after transition
     */
    restartTime?: pulumi.Input<number>;
    /**
     * Set-ID for HA configuration (Set id from 1 to 15)
     */
    setId?: pulumi.Input<number>;
    /**
     * Delay before changing state after up/down event (Units of 100 milliseconds (default 30))
     */
    trackEventDelay?: pulumi.Input<number>;
    /**
     * VRRP-A packet IPv4 header TTL (TTL, default is 128)
     */
    ttl?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
