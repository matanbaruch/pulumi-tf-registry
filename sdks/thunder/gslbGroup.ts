// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GslbGroup extends pulumi.CustomResource {
    /**
     * Get an existing GslbGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbGroupState, opts?: pulumi.CustomResourceOptions): GslbGroup {
        return new GslbGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/gslbGroup:GslbGroup';

    /**
     * Returns true if the given object is an instance of GslbGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GslbGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GslbGroup.__pulumiType;
    }

    /**
     * IP Address learned from other controller
     */
    public readonly autoMapLearn!: pulumi.Output<number | undefined>;
    /**
     * Primary Controller's IP address
     */
    public readonly autoMapPrimary!: pulumi.Output<number | undefined>;
    /**
     * Choose Best IP address
     */
    public readonly autoMapSmart!: pulumi.Output<number | undefined>;
    /**
     * Every member can do config
     */
    public readonly configAnywhere!: pulumi.Output<number | undefined>;
    /**
     * Merge old master's config when new one take over
     */
    public readonly configMerge!: pulumi.Output<number | undefined>;
    /**
     * Accept config-save message from master
     */
    public readonly configSave!: pulumi.Output<number | undefined>;
    /**
     * Data Interface IP Address
     */
    public readonly dataInterface!: pulumi.Output<number | undefined>;
    /**
     * Discover member via DNS Protocol
     */
    public readonly dnsDiscover!: pulumi.Output<number | undefined>;
    /**
     * Join GSLB Group
     */
    public readonly enable!: pulumi.Output<number | undefined>;
    /**
     * Learn neighbour information from other controllers
     */
    public readonly learn!: pulumi.Output<number | undefined>;
    /**
     * Management Interface IP Address
     */
    public readonly mgmtInterface!: pulumi.Output<number | undefined>;
    /**
     * Specify Group domain name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly primaryIpv6Lists!: pulumi.Output<outputs.GslbGroupPrimaryIpv6List[] | undefined>;
    public readonly primaryLists!: pulumi.Output<outputs.GslbGroupPrimaryList[] | undefined>;
    /**
     * Specify Local Priority, default is 100
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * 'resolve-to-ipv4': Use A Query only to resolve FQDN (Default Query type); 'resolve-to-ipv6': Use AAAA Query only to
     * resolve FQDN; 'resolve-to-ipv4-and-ipv6': Use A as well as AAAA Query to resolve FQDN;
     */
    public readonly resolveAs!: pulumi.Output<string | undefined>;
    /**
     * Run GSLB Group in standalone mode
     */
    public readonly standalone!: pulumi.Output<number | undefined>;
    /**
     * Set DNS Suffix (Name)
     */
    public readonly suffix!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a GslbGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GslbGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbGroupArgs | GslbGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbGroupState | undefined;
            resourceInputs["autoMapLearn"] = state ? state.autoMapLearn : undefined;
            resourceInputs["autoMapPrimary"] = state ? state.autoMapPrimary : undefined;
            resourceInputs["autoMapSmart"] = state ? state.autoMapSmart : undefined;
            resourceInputs["configAnywhere"] = state ? state.configAnywhere : undefined;
            resourceInputs["configMerge"] = state ? state.configMerge : undefined;
            resourceInputs["configSave"] = state ? state.configSave : undefined;
            resourceInputs["dataInterface"] = state ? state.dataInterface : undefined;
            resourceInputs["dnsDiscover"] = state ? state.dnsDiscover : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["learn"] = state ? state.learn : undefined;
            resourceInputs["mgmtInterface"] = state ? state.mgmtInterface : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryIpv6Lists"] = state ? state.primaryIpv6Lists : undefined;
            resourceInputs["primaryLists"] = state ? state.primaryLists : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["resolveAs"] = state ? state.resolveAs : undefined;
            resourceInputs["standalone"] = state ? state.standalone : undefined;
            resourceInputs["suffix"] = state ? state.suffix : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GslbGroupArgs | undefined;
            resourceInputs["autoMapLearn"] = args ? args.autoMapLearn : undefined;
            resourceInputs["autoMapPrimary"] = args ? args.autoMapPrimary : undefined;
            resourceInputs["autoMapSmart"] = args ? args.autoMapSmart : undefined;
            resourceInputs["configAnywhere"] = args ? args.configAnywhere : undefined;
            resourceInputs["configMerge"] = args ? args.configMerge : undefined;
            resourceInputs["configSave"] = args ? args.configSave : undefined;
            resourceInputs["dataInterface"] = args ? args.dataInterface : undefined;
            resourceInputs["dnsDiscover"] = args ? args.dnsDiscover : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["learn"] = args ? args.learn : undefined;
            resourceInputs["mgmtInterface"] = args ? args.mgmtInterface : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["primaryIpv6Lists"] = args ? args.primaryIpv6Lists : undefined;
            resourceInputs["primaryLists"] = args ? args.primaryLists : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["resolveAs"] = args ? args.resolveAs : undefined;
            resourceInputs["standalone"] = args ? args.standalone : undefined;
            resourceInputs["suffix"] = args ? args.suffix : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GslbGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GslbGroup resources.
 */
export interface GslbGroupState {
    /**
     * IP Address learned from other controller
     */
    autoMapLearn?: pulumi.Input<number>;
    /**
     * Primary Controller's IP address
     */
    autoMapPrimary?: pulumi.Input<number>;
    /**
     * Choose Best IP address
     */
    autoMapSmart?: pulumi.Input<number>;
    /**
     * Every member can do config
     */
    configAnywhere?: pulumi.Input<number>;
    /**
     * Merge old master's config when new one take over
     */
    configMerge?: pulumi.Input<number>;
    /**
     * Accept config-save message from master
     */
    configSave?: pulumi.Input<number>;
    /**
     * Data Interface IP Address
     */
    dataInterface?: pulumi.Input<number>;
    /**
     * Discover member via DNS Protocol
     */
    dnsDiscover?: pulumi.Input<number>;
    /**
     * Join GSLB Group
     */
    enable?: pulumi.Input<number>;
    /**
     * Learn neighbour information from other controllers
     */
    learn?: pulumi.Input<number>;
    /**
     * Management Interface IP Address
     */
    mgmtInterface?: pulumi.Input<number>;
    /**
     * Specify Group domain name
     */
    name?: pulumi.Input<string>;
    primaryIpv6Lists?: pulumi.Input<pulumi.Input<inputs.GslbGroupPrimaryIpv6List>[]>;
    primaryLists?: pulumi.Input<pulumi.Input<inputs.GslbGroupPrimaryList>[]>;
    /**
     * Specify Local Priority, default is 100
     */
    priority?: pulumi.Input<number>;
    /**
     * 'resolve-to-ipv4': Use A Query only to resolve FQDN (Default Query type); 'resolve-to-ipv6': Use AAAA Query only to
     * resolve FQDN; 'resolve-to-ipv4-and-ipv6': Use A as well as AAAA Query to resolve FQDN;
     */
    resolveAs?: pulumi.Input<string>;
    /**
     * Run GSLB Group in standalone mode
     */
    standalone?: pulumi.Input<number>;
    /**
     * Set DNS Suffix (Name)
     */
    suffix?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GslbGroup resource.
 */
export interface GslbGroupArgs {
    /**
     * IP Address learned from other controller
     */
    autoMapLearn?: pulumi.Input<number>;
    /**
     * Primary Controller's IP address
     */
    autoMapPrimary?: pulumi.Input<number>;
    /**
     * Choose Best IP address
     */
    autoMapSmart?: pulumi.Input<number>;
    /**
     * Every member can do config
     */
    configAnywhere?: pulumi.Input<number>;
    /**
     * Merge old master's config when new one take over
     */
    configMerge?: pulumi.Input<number>;
    /**
     * Accept config-save message from master
     */
    configSave?: pulumi.Input<number>;
    /**
     * Data Interface IP Address
     */
    dataInterface?: pulumi.Input<number>;
    /**
     * Discover member via DNS Protocol
     */
    dnsDiscover?: pulumi.Input<number>;
    /**
     * Join GSLB Group
     */
    enable?: pulumi.Input<number>;
    /**
     * Learn neighbour information from other controllers
     */
    learn?: pulumi.Input<number>;
    /**
     * Management Interface IP Address
     */
    mgmtInterface?: pulumi.Input<number>;
    /**
     * Specify Group domain name
     */
    name?: pulumi.Input<string>;
    primaryIpv6Lists?: pulumi.Input<pulumi.Input<inputs.GslbGroupPrimaryIpv6List>[]>;
    primaryLists?: pulumi.Input<pulumi.Input<inputs.GslbGroupPrimaryList>[]>;
    /**
     * Specify Local Priority, default is 100
     */
    priority?: pulumi.Input<number>;
    /**
     * 'resolve-to-ipv4': Use A Query only to resolve FQDN (Default Query type); 'resolve-to-ipv6': Use AAAA Query only to
     * resolve FQDN; 'resolve-to-ipv4-and-ipv6': Use A as well as AAAA Query to resolve FQDN;
     */
    resolveAs?: pulumi.Input<string>;
    /**
     * Run GSLB Group in standalone mode
     */
    standalone?: pulumi.Input<number>;
    /**
     * Set DNS Suffix (Name)
     */
    suffix?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
