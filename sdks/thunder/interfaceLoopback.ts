// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceLoopback extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceLoopback resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceLoopbackState, opts?: pulumi.CustomResourceOptions): InterfaceLoopback {
        return new InterfaceLoopback(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/interfaceLoopback:InterfaceLoopback';

    /**
     * Returns true if the given object is an instance of InterfaceLoopback.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceLoopback {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceLoopback.__pulumiType;
    }

    /**
     * Loopback interface number
     */
    public readonly ifnum!: pulumi.Output<number>;
    public readonly ip!: pulumi.Output<outputs.InterfaceLoopbackIp | undefined>;
    public readonly ipv6!: pulumi.Output<outputs.InterfaceLoopbackIpv6 | undefined>;
    public readonly isis!: pulumi.Output<outputs.InterfaceLoopbackIsis | undefined>;
    /**
     * Name for the interface
     */
    public readonly name!: pulumi.Output<string>;
    public readonly snmpServer!: pulumi.Output<outputs.InterfaceLoopbackSnmpServer | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a InterfaceLoopback resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceLoopbackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceLoopbackArgs | InterfaceLoopbackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceLoopbackState | undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["isis"] = state ? state.isis : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["snmpServer"] = state ? state.snmpServer : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as InterfaceLoopbackArgs | undefined;
            if ((!args || args.ifnum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifnum'");
            }
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["isis"] = args ? args.isis : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["snmpServer"] = args ? args.snmpServer : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceLoopback.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceLoopback resources.
 */
export interface InterfaceLoopbackState {
    /**
     * Loopback interface number
     */
    ifnum?: pulumi.Input<number>;
    ip?: pulumi.Input<inputs.InterfaceLoopbackIp>;
    ipv6?: pulumi.Input<inputs.InterfaceLoopbackIpv6>;
    isis?: pulumi.Input<inputs.InterfaceLoopbackIsis>;
    /**
     * Name for the interface
     */
    name?: pulumi.Input<string>;
    snmpServer?: pulumi.Input<inputs.InterfaceLoopbackSnmpServer>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceLoopback resource.
 */
export interface InterfaceLoopbackArgs {
    /**
     * Loopback interface number
     */
    ifnum: pulumi.Input<number>;
    ip?: pulumi.Input<inputs.InterfaceLoopbackIp>;
    ipv6?: pulumi.Input<inputs.InterfaceLoopbackIpv6>;
    isis?: pulumi.Input<inputs.InterfaceLoopbackIsis>;
    /**
     * Name for the interface
     */
    name?: pulumi.Input<string>;
    snmpServer?: pulumi.Input<inputs.InterfaceLoopbackSnmpServer>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
