// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AamAuthenticationTemplate extends pulumi.CustomResource {
    /**
     * Get an existing AamAuthenticationTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAuthenticationTemplateState, opts?: pulumi.CustomResourceOptions): AamAuthenticationTemplate {
        return new AamAuthenticationTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAuthenticationTemplate:AamAuthenticationTemplate';

    /**
     * Returns true if the given object is an instance of AamAuthenticationTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAuthenticationTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAuthenticationTemplate.__pulumiType;
    }

    /**
     * Specify AD domain account
     */
    public readonly account!: pulumi.Output<string | undefined>;
    /**
     * Specify a RADIUS accounting server
     */
    public readonly accountingServer!: pulumi.Output<string | undefined>;
    /**
     * Specify an authentication service group for RADIUS accounting
     */
    public readonly accountingServiceGroup!: pulumi.Output<string | undefined>;
    /**
     * 'cookie-based': Track auth-session by cookie (default); 'ip-based': Track auth-session by client IP;
     */
    public readonly authSessMode!: pulumi.Output<string | undefined>;
    /**
     * Specify captcha profile (Specify captcha proflie name)
     */
    public readonly captcha!: pulumi.Output<string | undefined>;
    public readonly chains!: pulumi.Output<outputs.AamAuthenticationTemplateChain[] | undefined>;
    public readonly cookieDomainGroups!: pulumi.Output<outputs.AamAuthenticationTemplateCookieDomainGroup[] | undefined>;
    public readonly cookieDomains!: pulumi.Output<outputs.AamAuthenticationTemplateCookieDomain[] | undefined>;
    /**
     * Enable httponly attribute for AAM cookies
     */
    public readonly cookieHttponlyEnable!: pulumi.Output<number | undefined>;
    /**
     * Configure Max-Age for authentication session cookie (Configure Max-Age in seconds, 0 for no Max-Age/Expires attributes.
     * Default is 604800 (1 week).)
     */
    public readonly cookieMaxAge!: pulumi.Output<number | undefined>;
    /**
     * 'strict': Specify SameSite attribute as Strict for AAM cookie; 'lax': Specify SameSite attribute as Lax for AAM cookie;
     * 'none': Specify SameSite attribute as None for AAM cookie;
     */
    public readonly cookieSamesite!: pulumi.Output<string | undefined>;
    /**
     * Enable secure attribute for AAM cookies
     */
    public readonly cookieSecureEnable!: pulumi.Output<number | undefined>;
    /**
     * Disable forward logout request to backend application server. The config-field logout-url must be configured first
     */
    public readonly forwardLogoutDisable!: pulumi.Output<number | undefined>;
    /**
     * Specify authentication jwt template
     */
    public readonly jwt!: pulumi.Output<string | undefined>;
    /**
     * Enable local logging
     */
    public readonly localLogging!: pulumi.Output<number | undefined>;
    /**
     * 'use-partition-level-config': Use configuration of authentication-log enable command; 'enable': Enable authentication
     * logs for this template; 'disable': Disable authentication logs for this template;
     */
    public readonly log!: pulumi.Output<string | undefined>;
    /**
     * Specify authentication logon (Specify authentication logon template name)
     */
    public readonly logon!: pulumi.Output<string | undefined>;
    /**
     * Specify idle logout time (Specify idle timeout in seconds, default is 300)
     */
    public readonly logoutIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Specify logout url (Specify logout url string)
     */
    public readonly logoutUrl!: pulumi.Output<string | undefined>;
    /**
     * Specify default SAML token lifetime (Specify lifetime (in seconds) of SAML token when it not provided by token
     * attributes, default is 28800. (0 for indefinite))
     */
    public readonly maxSessionTime!: pulumi.Output<number | undefined>;
    /**
     * Put redirect-uri or service-principal-name into CSP header to avoid CPS break authentication process
     */
    public readonly modifyContentSecurityPolicy!: pulumi.Output<number | undefined>;
    /**
     * Authentication template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify OAUTH authorization server
     */
    public readonly oauthAuthorizationServer!: pulumi.Output<string | undefined>;
    /**
     * Specify OAUTH client
     */
    public readonly oauthClient!: pulumi.Output<string | undefined>;
    /**
     * Hostname(Length 1-31) for transparent-proxy authentication
     */
    public readonly redirectHostname!: pulumi.Output<string | undefined>;
    /**
     * Specify authentication relay (Specify authentication relay template name)
     */
    public readonly relay!: pulumi.Output<string | undefined>;
    /**
     * Specify SAML identity provider
     */
    public readonly samlIdp!: pulumi.Output<string | undefined>;
    /**
     * Specify SAML service provider
     */
    public readonly samlSp!: pulumi.Output<string | undefined>;
    /**
     * Specify authentication server (Specify authentication server template name)
     */
    public readonly server!: pulumi.Output<string | undefined>;
    /**
     * Bind an authentication service group to this template (Specify authentication service group name)
     */
    public readonly serviceGroup!: pulumi.Output<string | undefined>;
    /**
     * 'saml': SAML authentication template; 'standard': Standard authentication template; 'oauth': Oauth 2.0 authentication
     * template;
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AamAuthenticationTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AamAuthenticationTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAuthenticationTemplateArgs | AamAuthenticationTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAuthenticationTemplateState | undefined;
            resourceInputs["account"] = state ? state.account : undefined;
            resourceInputs["accountingServer"] = state ? state.accountingServer : undefined;
            resourceInputs["accountingServiceGroup"] = state ? state.accountingServiceGroup : undefined;
            resourceInputs["authSessMode"] = state ? state.authSessMode : undefined;
            resourceInputs["captcha"] = state ? state.captcha : undefined;
            resourceInputs["chains"] = state ? state.chains : undefined;
            resourceInputs["cookieDomainGroups"] = state ? state.cookieDomainGroups : undefined;
            resourceInputs["cookieDomains"] = state ? state.cookieDomains : undefined;
            resourceInputs["cookieHttponlyEnable"] = state ? state.cookieHttponlyEnable : undefined;
            resourceInputs["cookieMaxAge"] = state ? state.cookieMaxAge : undefined;
            resourceInputs["cookieSamesite"] = state ? state.cookieSamesite : undefined;
            resourceInputs["cookieSecureEnable"] = state ? state.cookieSecureEnable : undefined;
            resourceInputs["forwardLogoutDisable"] = state ? state.forwardLogoutDisable : undefined;
            resourceInputs["jwt"] = state ? state.jwt : undefined;
            resourceInputs["localLogging"] = state ? state.localLogging : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["logon"] = state ? state.logon : undefined;
            resourceInputs["logoutIdleTimeout"] = state ? state.logoutIdleTimeout : undefined;
            resourceInputs["logoutUrl"] = state ? state.logoutUrl : undefined;
            resourceInputs["maxSessionTime"] = state ? state.maxSessionTime : undefined;
            resourceInputs["modifyContentSecurityPolicy"] = state ? state.modifyContentSecurityPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oauthAuthorizationServer"] = state ? state.oauthAuthorizationServer : undefined;
            resourceInputs["oauthClient"] = state ? state.oauthClient : undefined;
            resourceInputs["redirectHostname"] = state ? state.redirectHostname : undefined;
            resourceInputs["relay"] = state ? state.relay : undefined;
            resourceInputs["samlIdp"] = state ? state.samlIdp : undefined;
            resourceInputs["samlSp"] = state ? state.samlSp : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serviceGroup"] = state ? state.serviceGroup : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AamAuthenticationTemplateArgs | undefined;
            resourceInputs["account"] = args ? args.account : undefined;
            resourceInputs["accountingServer"] = args ? args.accountingServer : undefined;
            resourceInputs["accountingServiceGroup"] = args ? args.accountingServiceGroup : undefined;
            resourceInputs["authSessMode"] = args ? args.authSessMode : undefined;
            resourceInputs["captcha"] = args ? args.captcha : undefined;
            resourceInputs["chains"] = args ? args.chains : undefined;
            resourceInputs["cookieDomainGroups"] = args ? args.cookieDomainGroups : undefined;
            resourceInputs["cookieDomains"] = args ? args.cookieDomains : undefined;
            resourceInputs["cookieHttponlyEnable"] = args ? args.cookieHttponlyEnable : undefined;
            resourceInputs["cookieMaxAge"] = args ? args.cookieMaxAge : undefined;
            resourceInputs["cookieSamesite"] = args ? args.cookieSamesite : undefined;
            resourceInputs["cookieSecureEnable"] = args ? args.cookieSecureEnable : undefined;
            resourceInputs["forwardLogoutDisable"] = args ? args.forwardLogoutDisable : undefined;
            resourceInputs["jwt"] = args ? args.jwt : undefined;
            resourceInputs["localLogging"] = args ? args.localLogging : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["logon"] = args ? args.logon : undefined;
            resourceInputs["logoutIdleTimeout"] = args ? args.logoutIdleTimeout : undefined;
            resourceInputs["logoutUrl"] = args ? args.logoutUrl : undefined;
            resourceInputs["maxSessionTime"] = args ? args.maxSessionTime : undefined;
            resourceInputs["modifyContentSecurityPolicy"] = args ? args.modifyContentSecurityPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["oauthAuthorizationServer"] = args ? args.oauthAuthorizationServer : undefined;
            resourceInputs["oauthClient"] = args ? args.oauthClient : undefined;
            resourceInputs["redirectHostname"] = args ? args.redirectHostname : undefined;
            resourceInputs["relay"] = args ? args.relay : undefined;
            resourceInputs["samlIdp"] = args ? args.samlIdp : undefined;
            resourceInputs["samlSp"] = args ? args.samlSp : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serviceGroup"] = args ? args.serviceGroup : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAuthenticationTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAuthenticationTemplate resources.
 */
export interface AamAuthenticationTemplateState {
    /**
     * Specify AD domain account
     */
    account?: pulumi.Input<string>;
    /**
     * Specify a RADIUS accounting server
     */
    accountingServer?: pulumi.Input<string>;
    /**
     * Specify an authentication service group for RADIUS accounting
     */
    accountingServiceGroup?: pulumi.Input<string>;
    /**
     * 'cookie-based': Track auth-session by cookie (default); 'ip-based': Track auth-session by client IP;
     */
    authSessMode?: pulumi.Input<string>;
    /**
     * Specify captcha profile (Specify captcha proflie name)
     */
    captcha?: pulumi.Input<string>;
    chains?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationTemplateChain>[]>;
    cookieDomainGroups?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationTemplateCookieDomainGroup>[]>;
    cookieDomains?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationTemplateCookieDomain>[]>;
    /**
     * Enable httponly attribute for AAM cookies
     */
    cookieHttponlyEnable?: pulumi.Input<number>;
    /**
     * Configure Max-Age for authentication session cookie (Configure Max-Age in seconds, 0 for no Max-Age/Expires attributes.
     * Default is 604800 (1 week).)
     */
    cookieMaxAge?: pulumi.Input<number>;
    /**
     * 'strict': Specify SameSite attribute as Strict for AAM cookie; 'lax': Specify SameSite attribute as Lax for AAM cookie;
     * 'none': Specify SameSite attribute as None for AAM cookie;
     */
    cookieSamesite?: pulumi.Input<string>;
    /**
     * Enable secure attribute for AAM cookies
     */
    cookieSecureEnable?: pulumi.Input<number>;
    /**
     * Disable forward logout request to backend application server. The config-field logout-url must be configured first
     */
    forwardLogoutDisable?: pulumi.Input<number>;
    /**
     * Specify authentication jwt template
     */
    jwt?: pulumi.Input<string>;
    /**
     * Enable local logging
     */
    localLogging?: pulumi.Input<number>;
    /**
     * 'use-partition-level-config': Use configuration of authentication-log enable command; 'enable': Enable authentication
     * logs for this template; 'disable': Disable authentication logs for this template;
     */
    log?: pulumi.Input<string>;
    /**
     * Specify authentication logon (Specify authentication logon template name)
     */
    logon?: pulumi.Input<string>;
    /**
     * Specify idle logout time (Specify idle timeout in seconds, default is 300)
     */
    logoutIdleTimeout?: pulumi.Input<number>;
    /**
     * Specify logout url (Specify logout url string)
     */
    logoutUrl?: pulumi.Input<string>;
    /**
     * Specify default SAML token lifetime (Specify lifetime (in seconds) of SAML token when it not provided by token
     * attributes, default is 28800. (0 for indefinite))
     */
    maxSessionTime?: pulumi.Input<number>;
    /**
     * Put redirect-uri or service-principal-name into CSP header to avoid CPS break authentication process
     */
    modifyContentSecurityPolicy?: pulumi.Input<number>;
    /**
     * Authentication template name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify OAUTH authorization server
     */
    oauthAuthorizationServer?: pulumi.Input<string>;
    /**
     * Specify OAUTH client
     */
    oauthClient?: pulumi.Input<string>;
    /**
     * Hostname(Length 1-31) for transparent-proxy authentication
     */
    redirectHostname?: pulumi.Input<string>;
    /**
     * Specify authentication relay (Specify authentication relay template name)
     */
    relay?: pulumi.Input<string>;
    /**
     * Specify SAML identity provider
     */
    samlIdp?: pulumi.Input<string>;
    /**
     * Specify SAML service provider
     */
    samlSp?: pulumi.Input<string>;
    /**
     * Specify authentication server (Specify authentication server template name)
     */
    server?: pulumi.Input<string>;
    /**
     * Bind an authentication service group to this template (Specify authentication service group name)
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * 'saml': SAML authentication template; 'standard': Standard authentication template; 'oauth': Oauth 2.0 authentication
     * template;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAuthenticationTemplate resource.
 */
export interface AamAuthenticationTemplateArgs {
    /**
     * Specify AD domain account
     */
    account?: pulumi.Input<string>;
    /**
     * Specify a RADIUS accounting server
     */
    accountingServer?: pulumi.Input<string>;
    /**
     * Specify an authentication service group for RADIUS accounting
     */
    accountingServiceGroup?: pulumi.Input<string>;
    /**
     * 'cookie-based': Track auth-session by cookie (default); 'ip-based': Track auth-session by client IP;
     */
    authSessMode?: pulumi.Input<string>;
    /**
     * Specify captcha profile (Specify captcha proflie name)
     */
    captcha?: pulumi.Input<string>;
    chains?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationTemplateChain>[]>;
    cookieDomainGroups?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationTemplateCookieDomainGroup>[]>;
    cookieDomains?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationTemplateCookieDomain>[]>;
    /**
     * Enable httponly attribute for AAM cookies
     */
    cookieHttponlyEnable?: pulumi.Input<number>;
    /**
     * Configure Max-Age for authentication session cookie (Configure Max-Age in seconds, 0 for no Max-Age/Expires attributes.
     * Default is 604800 (1 week).)
     */
    cookieMaxAge?: pulumi.Input<number>;
    /**
     * 'strict': Specify SameSite attribute as Strict for AAM cookie; 'lax': Specify SameSite attribute as Lax for AAM cookie;
     * 'none': Specify SameSite attribute as None for AAM cookie;
     */
    cookieSamesite?: pulumi.Input<string>;
    /**
     * Enable secure attribute for AAM cookies
     */
    cookieSecureEnable?: pulumi.Input<number>;
    /**
     * Disable forward logout request to backend application server. The config-field logout-url must be configured first
     */
    forwardLogoutDisable?: pulumi.Input<number>;
    /**
     * Specify authentication jwt template
     */
    jwt?: pulumi.Input<string>;
    /**
     * Enable local logging
     */
    localLogging?: pulumi.Input<number>;
    /**
     * 'use-partition-level-config': Use configuration of authentication-log enable command; 'enable': Enable authentication
     * logs for this template; 'disable': Disable authentication logs for this template;
     */
    log?: pulumi.Input<string>;
    /**
     * Specify authentication logon (Specify authentication logon template name)
     */
    logon?: pulumi.Input<string>;
    /**
     * Specify idle logout time (Specify idle timeout in seconds, default is 300)
     */
    logoutIdleTimeout?: pulumi.Input<number>;
    /**
     * Specify logout url (Specify logout url string)
     */
    logoutUrl?: pulumi.Input<string>;
    /**
     * Specify default SAML token lifetime (Specify lifetime (in seconds) of SAML token when it not provided by token
     * attributes, default is 28800. (0 for indefinite))
     */
    maxSessionTime?: pulumi.Input<number>;
    /**
     * Put redirect-uri or service-principal-name into CSP header to avoid CPS break authentication process
     */
    modifyContentSecurityPolicy?: pulumi.Input<number>;
    /**
     * Authentication template name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify OAUTH authorization server
     */
    oauthAuthorizationServer?: pulumi.Input<string>;
    /**
     * Specify OAUTH client
     */
    oauthClient?: pulumi.Input<string>;
    /**
     * Hostname(Length 1-31) for transparent-proxy authentication
     */
    redirectHostname?: pulumi.Input<string>;
    /**
     * Specify authentication relay (Specify authentication relay template name)
     */
    relay?: pulumi.Input<string>;
    /**
     * Specify SAML identity provider
     */
    samlIdp?: pulumi.Input<string>;
    /**
     * Specify SAML service provider
     */
    samlSp?: pulumi.Input<string>;
    /**
     * Specify authentication server (Specify authentication server template name)
     */
    server?: pulumi.Input<string>;
    /**
     * Bind an authentication service group to this template (Specify authentication service group name)
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * 'saml': SAML authentication template; 'standard': Standard authentication template; 'oauth': Oauth 2.0 authentication
     * template;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
