// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HealthMonitorMethodTacplus extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodTacplus resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodTacplusState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodTacplus {
        return new HealthMonitorMethodTacplus(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodTacplus:HealthMonitorMethodTacplus';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodTacplus.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodTacplus {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodTacplus.__pulumiType;
    }

    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * TACACS+ type
     */
    public readonly tacplus!: pulumi.Output<number | undefined>;
    /**
     * Specify the user password
     */
    public readonly tacplusPassword!: pulumi.Output<number | undefined>;
    /**
     * Configure password, '' means empty password
     */
    public readonly tacplusPasswordString!: pulumi.Output<string | undefined>;
    /**
     * Specify the TACACS+ port, default 49 (Port number (default 49))
     */
    public readonly tacplusPort!: pulumi.Output<number | undefined>;
    /**
     * Specify the shared secret of TACACS+ server
     */
    public readonly tacplusSecret!: pulumi.Output<number | undefined>;
    /**
     * Shared Crypto Key
     */
    public readonly tacplusSecretString!: pulumi.Output<string | undefined>;
    /**
     * 'inbound-ascii-login': Specify Inbound ASCII Login type;
     */
    public readonly tacplusType!: pulumi.Output<string | undefined>;
    /**
     * Specify the username
     */
    public readonly tacplusUsername!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitorMethodTacplus resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodTacplusArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodTacplusArgs | HealthMonitorMethodTacplusState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodTacplusState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tacplus"] = state ? state.tacplus : undefined;
            resourceInputs["tacplusPassword"] = state ? state.tacplusPassword : undefined;
            resourceInputs["tacplusPasswordString"] = state ? state.tacplusPasswordString : undefined;
            resourceInputs["tacplusPort"] = state ? state.tacplusPort : undefined;
            resourceInputs["tacplusSecret"] = state ? state.tacplusSecret : undefined;
            resourceInputs["tacplusSecretString"] = state ? state.tacplusSecretString : undefined;
            resourceInputs["tacplusType"] = state ? state.tacplusType : undefined;
            resourceInputs["tacplusUsername"] = state ? state.tacplusUsername : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodTacplusArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tacplus"] = args ? args.tacplus : undefined;
            resourceInputs["tacplusPassword"] = args ? args.tacplusPassword : undefined;
            resourceInputs["tacplusPasswordString"] = args ? args.tacplusPasswordString : undefined;
            resourceInputs["tacplusPort"] = args ? args.tacplusPort : undefined;
            resourceInputs["tacplusSecret"] = args ? args.tacplusSecret : undefined;
            resourceInputs["tacplusSecretString"] = args ? args.tacplusSecretString : undefined;
            resourceInputs["tacplusType"] = args ? args.tacplusType : undefined;
            resourceInputs["tacplusUsername"] = args ? args.tacplusUsername : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodTacplus.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodTacplus resources.
 */
export interface HealthMonitorMethodTacplusState {
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * TACACS+ type
     */
    tacplus?: pulumi.Input<number>;
    /**
     * Specify the user password
     */
    tacplusPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    tacplusPasswordString?: pulumi.Input<string>;
    /**
     * Specify the TACACS+ port, default 49 (Port number (default 49))
     */
    tacplusPort?: pulumi.Input<number>;
    /**
     * Specify the shared secret of TACACS+ server
     */
    tacplusSecret?: pulumi.Input<number>;
    /**
     * Shared Crypto Key
     */
    tacplusSecretString?: pulumi.Input<string>;
    /**
     * 'inbound-ascii-login': Specify Inbound ASCII Login type;
     */
    tacplusType?: pulumi.Input<string>;
    /**
     * Specify the username
     */
    tacplusUsername?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodTacplus resource.
 */
export interface HealthMonitorMethodTacplusArgs {
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * TACACS+ type
     */
    tacplus?: pulumi.Input<number>;
    /**
     * Specify the user password
     */
    tacplusPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    tacplusPasswordString?: pulumi.Input<string>;
    /**
     * Specify the TACACS+ port, default 49 (Port number (default 49))
     */
    tacplusPort?: pulumi.Input<number>;
    /**
     * Specify the shared secret of TACACS+ server
     */
    tacplusSecret?: pulumi.Input<number>;
    /**
     * Shared Crypto Key
     */
    tacplusSecretString?: pulumi.Input<string>;
    /**
     * 'inbound-ascii-login': Specify Inbound ASCII Login type;
     */
    tacplusType?: pulumi.Input<string>;
    /**
     * Specify the username
     */
    tacplusUsername?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
