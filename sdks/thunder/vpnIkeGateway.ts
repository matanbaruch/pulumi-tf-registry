// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnIkeGateway extends pulumi.CustomResource {
    /**
     * Get an existing VpnIkeGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnIkeGatewayState, opts?: pulumi.CustomResourceOptions): VpnIkeGateway {
        return new VpnIkeGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vpnIkeGateway:VpnIkeGateway';

    /**
     * Returns true if the given object is an instance of VpnIkeGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnIkeGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnIkeGateway.__pulumiType;
    }

    /**
     * 'preshare-key': Authenticate the remote gateway using a pre-shared key (Default); 'rsa-signature': Authenticate the
     * remote gateway using an RSA certificate; 'ecdsa-signature': Authenticate the remote gateway using an ECDSA certificate;
     * 'eap-radius': Authenticate the remote gateway using an EAP Radius server; 'eap-tls': Authenticate the remote gateway
     * using EAP TLS;
     */
    public readonly authMethod!: pulumi.Output<string | undefined>;
    /**
     * 'dhcp': Enable DHCP configuration-payload; 'radius': Enable RADIUS configuration-payload;
     */
    public readonly configurationPayload!: pulumi.Output<string | undefined>;
    /**
     * '1': Diffie-Hellman group 1 - 768-bit(Default); '2': Diffie-Hellman group 2 - 1024-bit; '5': Diffie-Hellman group 5 -
     * 1536-bit; '14': Diffie-Hellman group 14 - 2048-bit; '15': Diffie-Hellman group 15 - 3072-bit; '16': Diffie-Hellman group
     * 16 - 4096-bit; '18': Diffie-Hellman group 18 - 8192-bit; '19': Diffie-Hellman group 19 - 256-bit Elliptic Curve; '20':
     * Diffie-Hellman group 20 - 384-bit Elliptic Curve;
     */
    public readonly dhGroup!: pulumi.Output<string | undefined>;
    public readonly dhcpServer!: pulumi.Output<outputs.VpnIkeGatewayDhcpServer | undefined>;
    /**
     * Disable initiating rekey
     */
    public readonly disableRekey!: pulumi.Output<number | undefined>;
    public readonly dpd!: pulumi.Output<outputs.VpnIkeGatewayDpd | undefined>;
    public readonly encCfgs!: pulumi.Output<outputs.VpnIkeGatewayEncCfg[] | undefined>;
    /**
     * Enable IKE message fragment and set fragment size
     */
    public readonly fragmentSize!: pulumi.Output<number | undefined>;
    /**
     * 'sha256': Secure Hash Algorithm 256; 'sha384': Secure Hash Algorithm 384; 'sha512': Secure Hash Algorithm 512;
     */
    public readonly hash!: pulumi.Output<string | undefined>;
    /**
     * 'v1': IKEv1 key exchange; 'v2': IKEv2 key exchange;
     */
    public readonly ikeVersion!: pulumi.Output<string | undefined>;
    /**
     * only handle traffic on management interface, share partition only
     */
    public readonly interfaceManagement!: pulumi.Output<number | undefined>;
    /**
     * Private Key
     */
    public readonly key!: pulumi.Output<string | undefined>;
    /**
     * Private Key Pass Phrase
     */
    public readonly keyPassphrase!: pulumi.Output<string | undefined>;
    /**
     * IKE SA age in seconds
     */
    public readonly lifetime!: pulumi.Output<number | undefined>;
    public readonly localAddress!: pulumi.Output<outputs.VpnIkeGatewayLocalAddress | undefined>;
    public readonly localCert!: pulumi.Output<outputs.VpnIkeGatewayLocalCert | undefined>;
    /**
     * Local Gateway Identity
     */
    public readonly localId!: pulumi.Output<string | undefined>;
    /**
     * 'main': Negotiate Main mode (Default); 'aggressive': Negotiate Aggressive mode;
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * IKE-gateway name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly natTraversal!: pulumi.Output<number | undefined>;
    /**
     * pre-shared key
     */
    public readonly preshareKeyValue!: pulumi.Output<string | undefined>;
    public readonly radiusServer!: pulumi.Output<outputs.VpnIkeGatewayRadiusServer | undefined>;
    public readonly remoteAddress!: pulumi.Output<outputs.VpnIkeGatewayRemoteAddress | undefined>;
    public readonly remoteCaCert!: pulumi.Output<outputs.VpnIkeGatewayRemoteCaCert | undefined>;
    /**
     * Remote Gateway Identity
     */
    public readonly remoteId!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.VpnIkeGatewaySamplingEnable[] | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly vrid!: pulumi.Output<outputs.VpnIkeGatewayVrid | undefined>;

    /**
     * Create a VpnIkeGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnIkeGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnIkeGatewayArgs | VpnIkeGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnIkeGatewayState | undefined;
            resourceInputs["authMethod"] = state ? state.authMethod : undefined;
            resourceInputs["configurationPayload"] = state ? state.configurationPayload : undefined;
            resourceInputs["dhGroup"] = state ? state.dhGroup : undefined;
            resourceInputs["dhcpServer"] = state ? state.dhcpServer : undefined;
            resourceInputs["disableRekey"] = state ? state.disableRekey : undefined;
            resourceInputs["dpd"] = state ? state.dpd : undefined;
            resourceInputs["encCfgs"] = state ? state.encCfgs : undefined;
            resourceInputs["fragmentSize"] = state ? state.fragmentSize : undefined;
            resourceInputs["hash"] = state ? state.hash : undefined;
            resourceInputs["ikeVersion"] = state ? state.ikeVersion : undefined;
            resourceInputs["interfaceManagement"] = state ? state.interfaceManagement : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["keyPassphrase"] = state ? state.keyPassphrase : undefined;
            resourceInputs["lifetime"] = state ? state.lifetime : undefined;
            resourceInputs["localAddress"] = state ? state.localAddress : undefined;
            resourceInputs["localCert"] = state ? state.localCert : undefined;
            resourceInputs["localId"] = state ? state.localId : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["natTraversal"] = state ? state.natTraversal : undefined;
            resourceInputs["preshareKeyValue"] = state ? state.preshareKeyValue : undefined;
            resourceInputs["radiusServer"] = state ? state.radiusServer : undefined;
            resourceInputs["remoteAddress"] = state ? state.remoteAddress : undefined;
            resourceInputs["remoteCaCert"] = state ? state.remoteCaCert : undefined;
            resourceInputs["remoteId"] = state ? state.remoteId : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as VpnIkeGatewayArgs | undefined;
            resourceInputs["authMethod"] = args ? args.authMethod : undefined;
            resourceInputs["configurationPayload"] = args ? args.configurationPayload : undefined;
            resourceInputs["dhGroup"] = args ? args.dhGroup : undefined;
            resourceInputs["dhcpServer"] = args ? args.dhcpServer : undefined;
            resourceInputs["disableRekey"] = args ? args.disableRekey : undefined;
            resourceInputs["dpd"] = args ? args.dpd : undefined;
            resourceInputs["encCfgs"] = args ? args.encCfgs : undefined;
            resourceInputs["fragmentSize"] = args ? args.fragmentSize : undefined;
            resourceInputs["hash"] = args ? args.hash : undefined;
            resourceInputs["ikeVersion"] = args ? args.ikeVersion : undefined;
            resourceInputs["interfaceManagement"] = args ? args.interfaceManagement : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["keyPassphrase"] = args ? args.keyPassphrase : undefined;
            resourceInputs["lifetime"] = args ? args.lifetime : undefined;
            resourceInputs["localAddress"] = args ? args.localAddress : undefined;
            resourceInputs["localCert"] = args ? args.localCert : undefined;
            resourceInputs["localId"] = args ? args.localId : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["natTraversal"] = args ? args.natTraversal : undefined;
            resourceInputs["preshareKeyValue"] = args ? args.preshareKeyValue : undefined;
            resourceInputs["radiusServer"] = args ? args.radiusServer : undefined;
            resourceInputs["remoteAddress"] = args ? args.remoteAddress : undefined;
            resourceInputs["remoteCaCert"] = args ? args.remoteCaCert : undefined;
            resourceInputs["remoteId"] = args ? args.remoteId : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnIkeGateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VpnIkeGateway resources.
 */
export interface VpnIkeGatewayState {
    /**
     * 'preshare-key': Authenticate the remote gateway using a pre-shared key (Default); 'rsa-signature': Authenticate the
     * remote gateway using an RSA certificate; 'ecdsa-signature': Authenticate the remote gateway using an ECDSA certificate;
     * 'eap-radius': Authenticate the remote gateway using an EAP Radius server; 'eap-tls': Authenticate the remote gateway
     * using EAP TLS;
     */
    authMethod?: pulumi.Input<string>;
    /**
     * 'dhcp': Enable DHCP configuration-payload; 'radius': Enable RADIUS configuration-payload;
     */
    configurationPayload?: pulumi.Input<string>;
    /**
     * '1': Diffie-Hellman group 1 - 768-bit(Default); '2': Diffie-Hellman group 2 - 1024-bit; '5': Diffie-Hellman group 5 -
     * 1536-bit; '14': Diffie-Hellman group 14 - 2048-bit; '15': Diffie-Hellman group 15 - 3072-bit; '16': Diffie-Hellman group
     * 16 - 4096-bit; '18': Diffie-Hellman group 18 - 8192-bit; '19': Diffie-Hellman group 19 - 256-bit Elliptic Curve; '20':
     * Diffie-Hellman group 20 - 384-bit Elliptic Curve;
     */
    dhGroup?: pulumi.Input<string>;
    dhcpServer?: pulumi.Input<inputs.VpnIkeGatewayDhcpServer>;
    /**
     * Disable initiating rekey
     */
    disableRekey?: pulumi.Input<number>;
    dpd?: pulumi.Input<inputs.VpnIkeGatewayDpd>;
    encCfgs?: pulumi.Input<pulumi.Input<inputs.VpnIkeGatewayEncCfg>[]>;
    /**
     * Enable IKE message fragment and set fragment size
     */
    fragmentSize?: pulumi.Input<number>;
    /**
     * 'sha256': Secure Hash Algorithm 256; 'sha384': Secure Hash Algorithm 384; 'sha512': Secure Hash Algorithm 512;
     */
    hash?: pulumi.Input<string>;
    /**
     * 'v1': IKEv1 key exchange; 'v2': IKEv2 key exchange;
     */
    ikeVersion?: pulumi.Input<string>;
    /**
     * only handle traffic on management interface, share partition only
     */
    interfaceManagement?: pulumi.Input<number>;
    /**
     * Private Key
     */
    key?: pulumi.Input<string>;
    /**
     * Private Key Pass Phrase
     */
    keyPassphrase?: pulumi.Input<string>;
    /**
     * IKE SA age in seconds
     */
    lifetime?: pulumi.Input<number>;
    localAddress?: pulumi.Input<inputs.VpnIkeGatewayLocalAddress>;
    localCert?: pulumi.Input<inputs.VpnIkeGatewayLocalCert>;
    /**
     * Local Gateway Identity
     */
    localId?: pulumi.Input<string>;
    /**
     * 'main': Negotiate Main mode (Default); 'aggressive': Negotiate Aggressive mode;
     */
    mode?: pulumi.Input<string>;
    /**
     * IKE-gateway name
     */
    name?: pulumi.Input<string>;
    natTraversal?: pulumi.Input<number>;
    /**
     * pre-shared key
     */
    preshareKeyValue?: pulumi.Input<string>;
    radiusServer?: pulumi.Input<inputs.VpnIkeGatewayRadiusServer>;
    remoteAddress?: pulumi.Input<inputs.VpnIkeGatewayRemoteAddress>;
    remoteCaCert?: pulumi.Input<inputs.VpnIkeGatewayRemoteCaCert>;
    /**
     * Remote Gateway Identity
     */
    remoteId?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VpnIkeGatewaySamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vrid?: pulumi.Input<inputs.VpnIkeGatewayVrid>;
}

/**
 * The set of arguments for constructing a VpnIkeGateway resource.
 */
export interface VpnIkeGatewayArgs {
    /**
     * 'preshare-key': Authenticate the remote gateway using a pre-shared key (Default); 'rsa-signature': Authenticate the
     * remote gateway using an RSA certificate; 'ecdsa-signature': Authenticate the remote gateway using an ECDSA certificate;
     * 'eap-radius': Authenticate the remote gateway using an EAP Radius server; 'eap-tls': Authenticate the remote gateway
     * using EAP TLS;
     */
    authMethod?: pulumi.Input<string>;
    /**
     * 'dhcp': Enable DHCP configuration-payload; 'radius': Enable RADIUS configuration-payload;
     */
    configurationPayload?: pulumi.Input<string>;
    /**
     * '1': Diffie-Hellman group 1 - 768-bit(Default); '2': Diffie-Hellman group 2 - 1024-bit; '5': Diffie-Hellman group 5 -
     * 1536-bit; '14': Diffie-Hellman group 14 - 2048-bit; '15': Diffie-Hellman group 15 - 3072-bit; '16': Diffie-Hellman group
     * 16 - 4096-bit; '18': Diffie-Hellman group 18 - 8192-bit; '19': Diffie-Hellman group 19 - 256-bit Elliptic Curve; '20':
     * Diffie-Hellman group 20 - 384-bit Elliptic Curve;
     */
    dhGroup?: pulumi.Input<string>;
    dhcpServer?: pulumi.Input<inputs.VpnIkeGatewayDhcpServer>;
    /**
     * Disable initiating rekey
     */
    disableRekey?: pulumi.Input<number>;
    dpd?: pulumi.Input<inputs.VpnIkeGatewayDpd>;
    encCfgs?: pulumi.Input<pulumi.Input<inputs.VpnIkeGatewayEncCfg>[]>;
    /**
     * Enable IKE message fragment and set fragment size
     */
    fragmentSize?: pulumi.Input<number>;
    /**
     * 'sha256': Secure Hash Algorithm 256; 'sha384': Secure Hash Algorithm 384; 'sha512': Secure Hash Algorithm 512;
     */
    hash?: pulumi.Input<string>;
    /**
     * 'v1': IKEv1 key exchange; 'v2': IKEv2 key exchange;
     */
    ikeVersion?: pulumi.Input<string>;
    /**
     * only handle traffic on management interface, share partition only
     */
    interfaceManagement?: pulumi.Input<number>;
    /**
     * Private Key
     */
    key?: pulumi.Input<string>;
    /**
     * Private Key Pass Phrase
     */
    keyPassphrase?: pulumi.Input<string>;
    /**
     * IKE SA age in seconds
     */
    lifetime?: pulumi.Input<number>;
    localAddress?: pulumi.Input<inputs.VpnIkeGatewayLocalAddress>;
    localCert?: pulumi.Input<inputs.VpnIkeGatewayLocalCert>;
    /**
     * Local Gateway Identity
     */
    localId?: pulumi.Input<string>;
    /**
     * 'main': Negotiate Main mode (Default); 'aggressive': Negotiate Aggressive mode;
     */
    mode?: pulumi.Input<string>;
    /**
     * IKE-gateway name
     */
    name?: pulumi.Input<string>;
    natTraversal?: pulumi.Input<number>;
    /**
     * pre-shared key
     */
    preshareKeyValue?: pulumi.Input<string>;
    radiusServer?: pulumi.Input<inputs.VpnIkeGatewayRadiusServer>;
    remoteAddress?: pulumi.Input<inputs.VpnIkeGatewayRemoteAddress>;
    remoteCaCert?: pulumi.Input<inputs.VpnIkeGatewayRemoteCaCert>;
    /**
     * Remote Gateway Identity
     */
    remoteId?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VpnIkeGatewaySamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vrid?: pulumi.Input<inputs.VpnIkeGatewayVrid>;
}
