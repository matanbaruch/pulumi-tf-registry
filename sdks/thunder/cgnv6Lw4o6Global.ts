// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6Lw4o6Global extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6Lw4o6Global resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6Lw4o6GlobalState, opts?: pulumi.CustomResourceOptions): Cgnv6Lw4o6Global {
        return new Cgnv6Lw4o6Global(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6Lw4o6Global:Cgnv6Lw4o6Global';

    /**
     * Returns true if the given object is an instance of Cgnv6Lw4o6Global.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6Lw4o6Global {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6Lw4o6Global.__pulumiType;
    }

    /**
     * 'filter-all': Disable all Hairpinning; 'filter-none': Allow all Hairpinning (default); 'filter-self-ip': Block
     * Hairpinning to same IP; 'filter-self-ip-port': Block hairpinning to same IP and Port combination;
     */
    public readonly hairpinning!: pulumi.Output<string | undefined>;
    /**
     * 'drop': Drop Inbound ICMP packets; 'handle': Handle Inbound ICMP packets(default);
     */
    public readonly icmpInbound!: pulumi.Output<string | undefined>;
    /**
     * Access List for inside IPv4 addresses (ACL ID)
     */
    public readonly insideSrcAccessList!: pulumi.Output<number | undefined>;
    /**
     * Configure LW-4over6 NAT Prefix List (LW-4over6 NAT Prefix Class-list)
     */
    public readonly natPrefixList!: pulumi.Output<string | undefined>;
    public readonly noForwardMatch!: pulumi.Output<outputs.Cgnv6Lw4o6GlobalNoForwardMatch | undefined>;
    public readonly noReverseMatch!: pulumi.Output<outputs.Cgnv6Lw4o6GlobalNoReverseMatch | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.Cgnv6Lw4o6GlobalSamplingEnable[] | undefined>;
    /**
     * Bind LW-4over6 binding table for use (LW-4over6 Binding Table Name)
     */
    public readonly useBindingTable!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6Lw4o6Global resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6Lw4o6GlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6Lw4o6GlobalArgs | Cgnv6Lw4o6GlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6Lw4o6GlobalState | undefined;
            resourceInputs["hairpinning"] = state ? state.hairpinning : undefined;
            resourceInputs["icmpInbound"] = state ? state.icmpInbound : undefined;
            resourceInputs["insideSrcAccessList"] = state ? state.insideSrcAccessList : undefined;
            resourceInputs["natPrefixList"] = state ? state.natPrefixList : undefined;
            resourceInputs["noForwardMatch"] = state ? state.noForwardMatch : undefined;
            resourceInputs["noReverseMatch"] = state ? state.noReverseMatch : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["useBindingTable"] = state ? state.useBindingTable : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6Lw4o6GlobalArgs | undefined;
            resourceInputs["hairpinning"] = args ? args.hairpinning : undefined;
            resourceInputs["icmpInbound"] = args ? args.icmpInbound : undefined;
            resourceInputs["insideSrcAccessList"] = args ? args.insideSrcAccessList : undefined;
            resourceInputs["natPrefixList"] = args ? args.natPrefixList : undefined;
            resourceInputs["noForwardMatch"] = args ? args.noForwardMatch : undefined;
            resourceInputs["noReverseMatch"] = args ? args.noReverseMatch : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["useBindingTable"] = args ? args.useBindingTable : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6Lw4o6Global.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6Lw4o6Global resources.
 */
export interface Cgnv6Lw4o6GlobalState {
    /**
     * 'filter-all': Disable all Hairpinning; 'filter-none': Allow all Hairpinning (default); 'filter-self-ip': Block
     * Hairpinning to same IP; 'filter-self-ip-port': Block hairpinning to same IP and Port combination;
     */
    hairpinning?: pulumi.Input<string>;
    /**
     * 'drop': Drop Inbound ICMP packets; 'handle': Handle Inbound ICMP packets(default);
     */
    icmpInbound?: pulumi.Input<string>;
    /**
     * Access List for inside IPv4 addresses (ACL ID)
     */
    insideSrcAccessList?: pulumi.Input<number>;
    /**
     * Configure LW-4over6 NAT Prefix List (LW-4over6 NAT Prefix Class-list)
     */
    natPrefixList?: pulumi.Input<string>;
    noForwardMatch?: pulumi.Input<inputs.Cgnv6Lw4o6GlobalNoForwardMatch>;
    noReverseMatch?: pulumi.Input<inputs.Cgnv6Lw4o6GlobalNoReverseMatch>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6Lw4o6GlobalSamplingEnable>[]>;
    /**
     * Bind LW-4over6 binding table for use (LW-4over6 Binding Table Name)
     */
    useBindingTable?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6Lw4o6Global resource.
 */
export interface Cgnv6Lw4o6GlobalArgs {
    /**
     * 'filter-all': Disable all Hairpinning; 'filter-none': Allow all Hairpinning (default); 'filter-self-ip': Block
     * Hairpinning to same IP; 'filter-self-ip-port': Block hairpinning to same IP and Port combination;
     */
    hairpinning?: pulumi.Input<string>;
    /**
     * 'drop': Drop Inbound ICMP packets; 'handle': Handle Inbound ICMP packets(default);
     */
    icmpInbound?: pulumi.Input<string>;
    /**
     * Access List for inside IPv4 addresses (ACL ID)
     */
    insideSrcAccessList?: pulumi.Input<number>;
    /**
     * Configure LW-4over6 NAT Prefix List (LW-4over6 NAT Prefix Class-list)
     */
    natPrefixList?: pulumi.Input<string>;
    noForwardMatch?: pulumi.Input<inputs.Cgnv6Lw4o6GlobalNoForwardMatch>;
    noReverseMatch?: pulumi.Input<inputs.Cgnv6Lw4o6GlobalNoReverseMatch>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6Lw4o6GlobalSamplingEnable>[]>;
    /**
     * Bind LW-4over6 binding table for use (LW-4over6 Binding Table Name)
     */
    useBindingTable?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
