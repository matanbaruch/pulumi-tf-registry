// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class WebCategory extends pulumi.CustomResource {
    /**
     * Get an existing WebCategory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WebCategoryState, opts?: pulumi.CustomResourceOptions): WebCategory {
        return new WebCategory(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/webCategory:WebCategory';

    /**
     * Returns true if the given object is an instance of WebCategory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is WebCategory {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WebCategory.__pulumiType;
    }

    public readonly bypassedUrls!: pulumi.Output<outputs.WebCategoryBypassedUrls | undefined>;
    public readonly categoryListLists!: pulumi.Output<outputs.WebCategoryCategoryListList[] | undefined>;
    /**
     * Maximum cache size for storing cloud query results
     */
    public readonly cloudQueryCacheSize!: pulumi.Output<number | undefined>;
    /**
     * Disables cloud queries for URL's not present in local database(default enable)
     */
    public readonly cloudQueryDisable!: pulumi.Output<number | undefined>;
    /**
     * BrightCloud Database Server
     */
    public readonly databaseServer!: pulumi.Output<string | undefined>;
    /**
     * Time of day to update database (default: 00:00)
     */
    public readonly dbUpdateTime!: pulumi.Output<string | undefined>;
    /**
     * Enable BrightCloud SDK
     */
    public readonly enable!: pulumi.Output<number | undefined>;
    public readonly interceptedUrls!: pulumi.Output<outputs.WebCategoryInterceptedUrls | undefined>;
    public readonly license!: pulumi.Output<outputs.WebCategoryLicense | undefined>;
    /**
     * Disables online queries for license. By default it is enabled.
     */
    public readonly onlineCheckDisable!: pulumi.Output<number | undefined>;
    /**
     * BrightCloud Query Server Listening Port(default 80)
     */
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly proxyServer!: pulumi.Output<outputs.WebCategoryProxyServer | undefined>;
    /**
     * Enable data plane logging to a remote syslog server
     */
    public readonly remoteSyslogEnable!: pulumi.Output<number | undefined>;
    public readonly reputationScopeLists!: pulumi.Output<outputs.WebCategoryReputationScopeList[] | undefined>;
    /**
     * Maximum cache size for storing RTU updates
     */
    public readonly rtuCacheSize!: pulumi.Output<number | undefined>;
    /**
     * Disables real time updates(default enable)
     */
    public readonly rtuUpdateDisable!: pulumi.Output<number | undefined>;
    /**
     * Interval to check for real time updates if enabled in mins(default 60)
     */
    public readonly rtuUpdateInterval!: pulumi.Output<number | undefined>;
    /**
     * BrightCloud Query Server
     */
    public readonly server!: pulumi.Output<string | undefined>;
    /**
     * BrightCloud Servers Timeout in seconds (default: 15s)
     */
    public readonly serverTimeout!: pulumi.Output<number | undefined>;
    /**
     * BrightCloud Servers SSL Port(default 443)
     */
    public readonly sslPort!: pulumi.Output<number | undefined>;
    public readonly statistics!: pulumi.Output<outputs.WebCategoryStatistics | undefined>;
    public readonly url!: pulumi.Output<outputs.WebCategoryUrl | undefined>;
    /**
     * Use management interface for all communication with BrightCloud
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly webReputation!: pulumi.Output<outputs.WebCategoryWebReputation | undefined>;

    /**
     * Create a WebCategory resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WebCategoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WebCategoryArgs | WebCategoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WebCategoryState | undefined;
            resourceInputs["bypassedUrls"] = state ? state.bypassedUrls : undefined;
            resourceInputs["categoryListLists"] = state ? state.categoryListLists : undefined;
            resourceInputs["cloudQueryCacheSize"] = state ? state.cloudQueryCacheSize : undefined;
            resourceInputs["cloudQueryDisable"] = state ? state.cloudQueryDisable : undefined;
            resourceInputs["databaseServer"] = state ? state.databaseServer : undefined;
            resourceInputs["dbUpdateTime"] = state ? state.dbUpdateTime : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["interceptedUrls"] = state ? state.interceptedUrls : undefined;
            resourceInputs["license"] = state ? state.license : undefined;
            resourceInputs["onlineCheckDisable"] = state ? state.onlineCheckDisable : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["proxyServer"] = state ? state.proxyServer : undefined;
            resourceInputs["remoteSyslogEnable"] = state ? state.remoteSyslogEnable : undefined;
            resourceInputs["reputationScopeLists"] = state ? state.reputationScopeLists : undefined;
            resourceInputs["rtuCacheSize"] = state ? state.rtuCacheSize : undefined;
            resourceInputs["rtuUpdateDisable"] = state ? state.rtuUpdateDisable : undefined;
            resourceInputs["rtuUpdateInterval"] = state ? state.rtuUpdateInterval : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serverTimeout"] = state ? state.serverTimeout : undefined;
            resourceInputs["sslPort"] = state ? state.sslPort : undefined;
            resourceInputs["statistics"] = state ? state.statistics : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["webReputation"] = state ? state.webReputation : undefined;
        } else {
            const args = argsOrState as WebCategoryArgs | undefined;
            resourceInputs["bypassedUrls"] = args ? args.bypassedUrls : undefined;
            resourceInputs["categoryListLists"] = args ? args.categoryListLists : undefined;
            resourceInputs["cloudQueryCacheSize"] = args ? args.cloudQueryCacheSize : undefined;
            resourceInputs["cloudQueryDisable"] = args ? args.cloudQueryDisable : undefined;
            resourceInputs["databaseServer"] = args ? args.databaseServer : undefined;
            resourceInputs["dbUpdateTime"] = args ? args.dbUpdateTime : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["interceptedUrls"] = args ? args.interceptedUrls : undefined;
            resourceInputs["license"] = args ? args.license : undefined;
            resourceInputs["onlineCheckDisable"] = args ? args.onlineCheckDisable : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["proxyServer"] = args ? args.proxyServer : undefined;
            resourceInputs["remoteSyslogEnable"] = args ? args.remoteSyslogEnable : undefined;
            resourceInputs["reputationScopeLists"] = args ? args.reputationScopeLists : undefined;
            resourceInputs["rtuCacheSize"] = args ? args.rtuCacheSize : undefined;
            resourceInputs["rtuUpdateDisable"] = args ? args.rtuUpdateDisable : undefined;
            resourceInputs["rtuUpdateInterval"] = args ? args.rtuUpdateInterval : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serverTimeout"] = args ? args.serverTimeout : undefined;
            resourceInputs["sslPort"] = args ? args.sslPort : undefined;
            resourceInputs["statistics"] = args ? args.statistics : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["webReputation"] = args ? args.webReputation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WebCategory.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering WebCategory resources.
 */
export interface WebCategoryState {
    bypassedUrls?: pulumi.Input<inputs.WebCategoryBypassedUrls>;
    categoryListLists?: pulumi.Input<pulumi.Input<inputs.WebCategoryCategoryListList>[]>;
    /**
     * Maximum cache size for storing cloud query results
     */
    cloudQueryCacheSize?: pulumi.Input<number>;
    /**
     * Disables cloud queries for URL's not present in local database(default enable)
     */
    cloudQueryDisable?: pulumi.Input<number>;
    /**
     * BrightCloud Database Server
     */
    databaseServer?: pulumi.Input<string>;
    /**
     * Time of day to update database (default: 00:00)
     */
    dbUpdateTime?: pulumi.Input<string>;
    /**
     * Enable BrightCloud SDK
     */
    enable?: pulumi.Input<number>;
    interceptedUrls?: pulumi.Input<inputs.WebCategoryInterceptedUrls>;
    license?: pulumi.Input<inputs.WebCategoryLicense>;
    /**
     * Disables online queries for license. By default it is enabled.
     */
    onlineCheckDisable?: pulumi.Input<number>;
    /**
     * BrightCloud Query Server Listening Port(default 80)
     */
    port?: pulumi.Input<number>;
    proxyServer?: pulumi.Input<inputs.WebCategoryProxyServer>;
    /**
     * Enable data plane logging to a remote syslog server
     */
    remoteSyslogEnable?: pulumi.Input<number>;
    reputationScopeLists?: pulumi.Input<pulumi.Input<inputs.WebCategoryReputationScopeList>[]>;
    /**
     * Maximum cache size for storing RTU updates
     */
    rtuCacheSize?: pulumi.Input<number>;
    /**
     * Disables real time updates(default enable)
     */
    rtuUpdateDisable?: pulumi.Input<number>;
    /**
     * Interval to check for real time updates if enabled in mins(default 60)
     */
    rtuUpdateInterval?: pulumi.Input<number>;
    /**
     * BrightCloud Query Server
     */
    server?: pulumi.Input<string>;
    /**
     * BrightCloud Servers Timeout in seconds (default: 15s)
     */
    serverTimeout?: pulumi.Input<number>;
    /**
     * BrightCloud Servers SSL Port(default 443)
     */
    sslPort?: pulumi.Input<number>;
    statistics?: pulumi.Input<inputs.WebCategoryStatistics>;
    url?: pulumi.Input<inputs.WebCategoryUrl>;
    /**
     * Use management interface for all communication with BrightCloud
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    webReputation?: pulumi.Input<inputs.WebCategoryWebReputation>;
}

/**
 * The set of arguments for constructing a WebCategory resource.
 */
export interface WebCategoryArgs {
    bypassedUrls?: pulumi.Input<inputs.WebCategoryBypassedUrls>;
    categoryListLists?: pulumi.Input<pulumi.Input<inputs.WebCategoryCategoryListList>[]>;
    /**
     * Maximum cache size for storing cloud query results
     */
    cloudQueryCacheSize?: pulumi.Input<number>;
    /**
     * Disables cloud queries for URL's not present in local database(default enable)
     */
    cloudQueryDisable?: pulumi.Input<number>;
    /**
     * BrightCloud Database Server
     */
    databaseServer?: pulumi.Input<string>;
    /**
     * Time of day to update database (default: 00:00)
     */
    dbUpdateTime?: pulumi.Input<string>;
    /**
     * Enable BrightCloud SDK
     */
    enable?: pulumi.Input<number>;
    interceptedUrls?: pulumi.Input<inputs.WebCategoryInterceptedUrls>;
    license?: pulumi.Input<inputs.WebCategoryLicense>;
    /**
     * Disables online queries for license. By default it is enabled.
     */
    onlineCheckDisable?: pulumi.Input<number>;
    /**
     * BrightCloud Query Server Listening Port(default 80)
     */
    port?: pulumi.Input<number>;
    proxyServer?: pulumi.Input<inputs.WebCategoryProxyServer>;
    /**
     * Enable data plane logging to a remote syslog server
     */
    remoteSyslogEnable?: pulumi.Input<number>;
    reputationScopeLists?: pulumi.Input<pulumi.Input<inputs.WebCategoryReputationScopeList>[]>;
    /**
     * Maximum cache size for storing RTU updates
     */
    rtuCacheSize?: pulumi.Input<number>;
    /**
     * Disables real time updates(default enable)
     */
    rtuUpdateDisable?: pulumi.Input<number>;
    /**
     * Interval to check for real time updates if enabled in mins(default 60)
     */
    rtuUpdateInterval?: pulumi.Input<number>;
    /**
     * BrightCloud Query Server
     */
    server?: pulumi.Input<string>;
    /**
     * BrightCloud Servers Timeout in seconds (default: 15s)
     */
    serverTimeout?: pulumi.Input<number>;
    /**
     * BrightCloud Servers SSL Port(default 443)
     */
    sslPort?: pulumi.Input<number>;
    statistics?: pulumi.Input<inputs.WebCategoryStatistics>;
    url?: pulumi.Input<inputs.WebCategoryUrl>;
    /**
     * Use management interface for all communication with BrightCloud
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    webReputation?: pulumi.Input<inputs.WebCategoryWebReputation>;
}
