// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6Dns64Virtualserver extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6Dns64Virtualserver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6Dns64VirtualserverState, opts?: pulumi.CustomResourceOptions): Cgnv6Dns64Virtualserver {
        return new Cgnv6Dns64Virtualserver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6Dns64Virtualserver:Cgnv6Dns64Virtualserver';

    /**
     * Returns true if the given object is an instance of Cgnv6Dns64Virtualserver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6Dns64Virtualserver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6Dns64Virtualserver.__pulumiType;
    }

    /**
     * 'enable': Enable Virtual Server (default); 'disable': Disable Virtual Server;
     */
    public readonly enableDisableAction!: pulumi.Output<string | undefined>;
    /**
     * Ethernet interface
     */
    public readonly ethernet!: pulumi.Output<number | undefined>;
    /**
     * IP Address
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * IPV6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * CGNV6 Virtual Server Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IP subnet mask
     */
    public readonly netmask!: pulumi.Output<string | undefined>;
    /**
     * Policy template
     */
    public readonly policy!: pulumi.Output<number | undefined>;
    public readonly portLists!: pulumi.Output<outputs.Cgnv6Dns64VirtualserverPortList[] | undefined>;
    /**
     * Policy template name
     */
    public readonly templatePolicy!: pulumi.Output<string | undefined>;
    /**
     * Use Interface IP
     */
    public readonly useIfIp!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Join a vrrp group (Specify ha VRRP-A vrid)
     */
    public readonly vrid!: pulumi.Output<number | undefined>;

    /**
     * Create a Cgnv6Dns64Virtualserver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6Dns64VirtualserverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6Dns64VirtualserverArgs | Cgnv6Dns64VirtualserverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6Dns64VirtualserverState | undefined;
            resourceInputs["enableDisableAction"] = state ? state.enableDisableAction : undefined;
            resourceInputs["ethernet"] = state ? state.ethernet : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["portLists"] = state ? state.portLists : undefined;
            resourceInputs["templatePolicy"] = state ? state.templatePolicy : undefined;
            resourceInputs["useIfIp"] = state ? state.useIfIp : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vrid"] = state ? state.vrid : undefined;
        } else {
            const args = argsOrState as Cgnv6Dns64VirtualserverArgs | undefined;
            resourceInputs["enableDisableAction"] = args ? args.enableDisableAction : undefined;
            resourceInputs["ethernet"] = args ? args.ethernet : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netmask"] = args ? args.netmask : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["portLists"] = args ? args.portLists : undefined;
            resourceInputs["templatePolicy"] = args ? args.templatePolicy : undefined;
            resourceInputs["useIfIp"] = args ? args.useIfIp : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vrid"] = args ? args.vrid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6Dns64Virtualserver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6Dns64Virtualserver resources.
 */
export interface Cgnv6Dns64VirtualserverState {
    /**
     * 'enable': Enable Virtual Server (default); 'disable': Disable Virtual Server;
     */
    enableDisableAction?: pulumi.Input<string>;
    /**
     * Ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * IP Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IPV6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * CGNV6 Virtual Server Name
     */
    name?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    netmask?: pulumi.Input<string>;
    /**
     * Policy template
     */
    policy?: pulumi.Input<number>;
    portLists?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortList>[]>;
    /**
     * Policy template name
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Use Interface IP
     */
    useIfIp?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Join a vrrp group (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Cgnv6Dns64Virtualserver resource.
 */
export interface Cgnv6Dns64VirtualserverArgs {
    /**
     * 'enable': Enable Virtual Server (default); 'disable': Disable Virtual Server;
     */
    enableDisableAction?: pulumi.Input<string>;
    /**
     * Ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * IP Address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IPV6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * CGNV6 Virtual Server Name
     */
    name?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    netmask?: pulumi.Input<string>;
    /**
     * Policy template
     */
    policy?: pulumi.Input<number>;
    portLists?: pulumi.Input<pulumi.Input<inputs.Cgnv6Dns64VirtualserverPortList>[]>;
    /**
     * Policy template name
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Use Interface IP
     */
    useIfIp?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Join a vrrp group (Specify ha VRRP-A vrid)
     */
    vrid?: pulumi.Input<number>;
}
