// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbVirtualServerPort extends pulumi.CustomResource {
    /**
     * Get an existing SlbVirtualServerPort resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbVirtualServerPortState, opts?: pulumi.CustomResourceOptions): SlbVirtualServerPort {
        return new SlbVirtualServerPort(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbVirtualServerPort:SlbVirtualServerPort';

    /**
     * Returns true if the given object is an instance of SlbVirtualServerPort.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbVirtualServerPort {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbVirtualServerPort.__pulumiType;
    }

    public readonly aclLists!: pulumi.Output<outputs.SlbVirtualServerPortAclList[] | undefined>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly aflexScripts!: pulumi.Output<outputs.SlbVirtualServerPortAflexScript[] | undefined>;
    /**
     * Disable aFlex entry sync for this port
     */
    public readonly aflexTableEntrySynDisable!: pulumi.Output<number | undefined>;
    /**
     * Enable aFlex entry sync for this port
     */
    public readonly aflexTableEntrySynEnable!: pulumi.Output<number | undefined>;
    /**
     * 'http': HTTP Port;
     */
    public readonly altProtocol1!: pulumi.Output<string | undefined>;
    /**
     * 'tcp': TCP LB service;
     */
    public readonly altProtocol2!: pulumi.Output<string | undefined>;
    /**
     * Alternate Virtual Port
     */
    public readonly alternatePort!: pulumi.Output<number | undefined>;
    /**
     * Virtual Port
     */
    public readonly alternatePortNumber!: pulumi.Output<number | undefined>;
    /**
     * Enable analytics
     */
    public readonly attackDetection!: pulumi.Output<number | undefined>;
    public readonly authCfg!: pulumi.Output<outputs.SlbVirtualServerPortAuthCfg | undefined>;
    /**
     * Configure auto NAT for the vport
     */
    public readonly auto!: pulumi.Output<number | undefined>;
    /**
     * Prefer to use same source NAT address for a client
     */
    public readonly clientipStickyNat!: pulumi.Output<number | undefined>;
    /**
     * Connection Limit
     */
    public readonly connLimit!: pulumi.Output<number | undefined>;
    /**
     * enable cpu compute on virtual port
     */
    public readonly cpuCompute!: pulumi.Output<number | undefined>;
    /**
     * 'def-selection-if-pref-failed': Use default server selection method if prefer method failed;
     * 'def-selection-if-pref-failed-disable': Stop using default server selection method if prefer method failed;
     */
    public readonly defSelectionIfPrefFailed!: pulumi.Output<string | undefined>;
    /**
     * Enable playerid checks on UDP packets once the AX is in active mode
     */
    public readonly enablePlayeridCheck!: pulumi.Output<number | undefined>;
    public readonly enableScaleout!: pulumi.Output<number | undefined>;
    /**
     * Ethernet interface number
     */
    public readonly ethFwd!: pulumi.Output<number | undefined>;
    /**
     * Ethernet interface number
     */
    public readonly ethRev!: pulumi.Output<number | undefined>;
    /**
     * expand syn-cookie with timestamp and wscale
     */
    public readonly expand!: pulumi.Output<number | undefined>;
    /**
     * Enable extended statistics on virtual port
     */
    public readonly extendedStats!: pulumi.Output<number | undefined>;
    /**
     * 'force': Force fast path in SLB processing; 'disable': Disable fast path in SLB processing;
     */
    public readonly fastPath!: pulumi.Output<string | undefined>;
    /**
     * Force routing mode
     */
    public readonly forceRoutingMode!: pulumi.Output<number | undefined>;
    /**
     * Enable Global Server Load Balancing
     */
    public readonly gslbEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable GTP Session Load Balancing
     */
    public readonly gtpSessionLb!: pulumi.Output<number | undefined>;
    /**
     * Enable for HA Conn sync
     */
    public readonly haConnMirror!: pulumi.Output<number | undefined>;
    /**
     * Ignore global substitute-source-mac
     */
    public readonly ignoreGlobal!: pulumi.Output<number | undefined>;
    /**
     * Enter name of IP Map List to be bound (IP Map List Name)
     */
    public readonly ipMapList!: pulumi.Output<string | undefined>;
    /**
     * Enable IP-Only LB mode
     */
    public readonly ipOnlyLb!: pulumi.Output<number | undefined>;
    /**
     * Use IP address round-robin behavior
     */
    public readonly ipSmartRr!: pulumi.Output<number | undefined>;
    /**
     * Enable IP in IP
     */
    public readonly ipinip!: pulumi.Output<number | undefined>;
    /**
     * FPGA assist L7 packet parsing
     */
    public readonly l7HardwareAssist!: pulumi.Output<number | undefined>;
    public readonly l7ServiceChain!: pulumi.Output<number | undefined>;
    /**
     * enable dynamic memory compute on virtual port
     */
    public readonly memoryCompute!: pulumi.Output<number | undefined>;
    /**
     * Message switching
     */
    public readonly messageSwitching!: pulumi.Output<number | undefined>;
    /**
     * SLB Virtual Service Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Next-gen WAF
     */
    public readonly ngWaf!: pulumi.Output<number | undefined>;
    /**
     * Don't automatically mark vport up when aFleX is bound
     */
    public readonly noAutoUpOnAflex!: pulumi.Output<number | undefined>;
    /**
     * Disable destination NAT, this option only supports in wildcard VIP or when a connection is operated in SSLi + EP mode
     */
    public readonly noDestNat!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly noLogging!: pulumi.Output<number | undefined>;
    /**
     * Enable for HA Conn sync for l4 tcp sessions on SYN
     */
    public readonly onSyn!: pulumi.Output<number | undefined>;
    /**
     * Support server that allow only one connection
     */
    public readonly oneServerConn!: pulumi.Output<number | undefined>;
    /**
     * '0': No optimization; '1': Optimization level 1 (Experimental);
     */
    public readonly optimizationLevel!: pulumi.Output<string | undefined>;
    /**
     * SIP Template Name
     */
    public readonly pTemplateSipShared!: pulumi.Output<number | undefined>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    /**
     * 'src-dst-ip-swap-persist': Create persist session after source IP and destination IP swap; 'use-src-ip-for-dst-persist':
     * Use the source IP to create a destination persist session; 'use-dst-ip-for-src-persist': Use the destination IP to
     * create source IP persist session;
     */
    public readonly persistType!: pulumi.Output<string | undefined>;
    /**
     * Specify NAT pool or pool group
     */
    public readonly pool!: pulumi.Output<string | undefined>;
    /**
     * Specify NAT pool or pool group
     */
    public readonly poolShared!: pulumi.Output<string | undefined>;
    /**
     * Port
     */
    public readonly portNumber!: pulumi.Output<number>;
    /**
     * Enable port translation under no-dest-nat
     */
    public readonly portTranslation!: pulumi.Output<number | undefined>;
    /**
     * Set auto NAT pool as higher precedence for source NAT
     */
    public readonly precedence!: pulumi.Output<number | undefined>;
    /**
     * 'tcp': TCP LB service; 'udp': UDP Port; 'others': for no tcp/udp protocol, do IP load balancing; 'diameter': diameter
     * port; 'dns-tcp': DNS service over TCP; 'dns-udp': DNS service over UDP; 'fast-http': Fast HTTP Port; 'fix': FIX Port;
     * 'ftp': File Transfer Protocol Port; 'ftp-proxy': ftp proxy port; 'http': HTTP Port; 'https': HTTPS port; 'imap': imap
     * proxy port; 'mlb': Message based load balancing; 'mms': Microsoft Multimedia Service Port; 'mysql': mssql port; 'mssql':
     * mssql; 'pop3': pop3 proxy port; 'radius': RADIUS Port; 'rtsp': Real Time Streaming Protocol Port; 'sip': Session
     * initiation protocol over UDP; 'sip-tcp': Session initiation protocol over TCP; 'sips': Session initiation protocol over
     * TLS; 'smpp-tcp': SMPP service over TCP; 'spdy': spdy port; 'spdys': spdys port; 'smtp': SMTP Port; 'mqtt': MQTT Port;
     * 'mqtts': MQTTS Port; 'ssl-proxy': Generic SSL proxy; 'ssli': SSL insight; 'ssh': SSH Port; 'tcp-proxy': Generic TCP
     * proxy; 'tftp': TFTP Port; 'fast-fix': Fast FIX port; 'http-over-quic': HTTP3-over-quic port;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * 'v1': Force using old proxy; 'v2': Force using new proxy;
     */
    public readonly proxyLayer!: pulumi.Output<string | undefined>;
    /**
     * Virtual Port range (Virtual Port range value)
     */
    public readonly range!: pulumi.Output<number | undefined>;
    /**
     * Specify the log message rate
     */
    public readonly rate!: pulumi.Output<number | undefined>;
    /**
     * Redirect HTTP to HTTPS
     */
    public readonly redirectToHttps!: pulumi.Output<number | undefined>;
    /**
     * Reply ACME http-01 challenge. This option only takes effect in HTTP port 80
     */
    public readonly replyAcmeChallenge!: pulumi.Output<number | undefined>;
    /**
     * Use alternate virtual port when L7 request fail
     */
    public readonly reqFail!: pulumi.Output<number | undefined>;
    /**
     * 'disable': disable;
     */
    public readonly reselection!: pulumi.Output<string | undefined>;
    /**
     * Send client reset when connection number over limit
     */
    public readonly reset!: pulumi.Output<number | undefined>;
    /**
     * Send client reset when server selection fails
     */
    public readonly resetOnServerSelectionFail!: pulumi.Output<number | undefined>;
    /**
     * Web Category List name
     */
    public readonly resolveWebCatList!: pulumi.Output<string | undefined>;
    /**
     * rtp traffic try to match the real server of sip smp call-id session
     */
    public readonly rtpSipCallIdMatch!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.SlbVirtualServerPortSamplingEnable[] | undefined>;
    /**
     * Specify the interval in seconds
     */
    public readonly secs!: pulumi.Output<number | undefined>;
    /**
     * Use alternate virtual port when server selection failure
     */
    public readonly servSelFail!: pulumi.Output<number | undefined>;
    /**
     * Bind a use-rcv-hop-for-resp Server Group to this Virtual Server (Server Group Name)
     */
    public readonly serverGroup!: pulumi.Output<string | undefined>;
    /**
     * Bind a Service Group to this Virtual Server (Service Group Name)
     */
    public readonly serviceGroup!: pulumi.Output<string | undefined>;
    /**
     * Reference a Cache template from shared partition
     */
    public readonly sharedPartitionCacheTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a Client SSL template from shared partition
     */
    public readonly sharedPartitionClientSslTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a connection reuse template from shared partition
     */
    public readonly sharedPartitionConnectionReuseTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a dblb template from shared partition
     */
    public readonly sharedPartitionDblbTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a Diameter template from shared partition
     */
    public readonly sharedPartitionDiameterTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a dns template from shared partition
     */
    public readonly sharedPartitionDnsTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a DNS over HTTP(s) template from shared partition
     */
    public readonly sharedPartitionDohTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a dynamic service template from shared partition
     */
    public readonly sharedPartitionDynamicServiceTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a external service template from shared partition
     */
    public readonly sharedPartitionExternalServiceTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a FIX template from shared partition
     */
    public readonly sharedPartitionFixTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a http policy template from shared partition
     */
    public readonly sharedPartitionHttpPolicyTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a HTTP template from shared partition
     */
    public readonly sharedPartitionHttpTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a IMAP/POP3 template from shared partition
     */
    public readonly sharedPartitionImapPop3Template!: pulumi.Output<number | undefined>;
    /**
     * Reference a persist cookie template from shared partition
     */
    public readonly sharedPartitionPersistCookieTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a persist destination ip template from shared partition
     */
    public readonly sharedPartitionPersistDestinationIpTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a persist source ip template from shared partition
     */
    public readonly sharedPartitionPersistSourceIpTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a persist SSL SID template from shared partition
     */
    public readonly sharedPartitionPersistSslSidTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a policy template from shared partition
     */
    public readonly sharedPartitionPolicyTemplate!: pulumi.Output<number | undefined>;
    /**
     * Specify NAT pool or pool group from shared partition
     */
    public readonly sharedPartitionPool!: pulumi.Output<number | undefined>;
    /**
     * Reference a QUIC template from shared partition
     */
    public readonly sharedPartitionQuicTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a SSL Server template from shared partition
     */
    public readonly sharedPartitionServerSslTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a smpp template from shared partition
     */
    public readonly sharedPartitionSmppTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a SMTP template from shared partition
     */
    public readonly sharedPartitionSmtpTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a tcp template from shared partition
     */
    public readonly sharedPartitionTcp!: pulumi.Output<number | undefined>;
    /**
     * Reference a TCP Proxy template from shared partition
     */
    public readonly sharedPartitionTcpProxyTemplate!: pulumi.Output<number | undefined>;
    /**
     * Reference a UDP template from shared partition
     */
    public readonly sharedPartitionUdp!: pulumi.Output<number | undefined>;
    /**
     * Reference a Virtual Port template from shared partition
     */
    public readonly sharedPartitionVirtualPortTemplate!: pulumi.Output<number | undefined>;
    /**
     * Enable print extended stats in showtech
     */
    public readonly showtechPrintExtendedStats!: pulumi.Output<number | undefined>;
    /**
     * Skip rev tuple hash insertion
     */
    public readonly skipRevHash!: pulumi.Output<number | undefined>;
    /**
     * Enable source NAT traffic against VIP
     */
    public readonly snatOnVip!: pulumi.Output<number | undefined>;
    /**
     * 'stats-data-enable': Enable statistical data collection for virtual port; 'stats-data-disable': Disable statistical data
     * collection for virtual port;
     */
    public readonly statsDataAction!: pulumi.Output<string | undefined>;
    /**
     * Substitute Source MAC Address to that of the outgoing interface
     */
    public readonly substituteSourceMac!: pulumi.Output<number | undefined>;
    /**
     * Support HTTP2
     */
    public readonly supportHttp2!: pulumi.Output<number | undefined>;
    /**
     * Enable syn-cookie
     */
    public readonly synCookie!: pulumi.Output<number | undefined>;
    /**
     * RAM caching template (Cache Template Name)
     */
    public readonly templateCache!: pulumi.Output<string | undefined>;
    /**
     * Cache Template Name
     */
    public readonly templateCacheShared!: pulumi.Output<string | undefined>;
    /**
     * Client SSH Template (Client SSH Config Name)
     */
    public readonly templateClientSsh!: pulumi.Output<string | undefined>;
    /**
     * Client SSL Template Name
     */
    public readonly templateClientSsl!: pulumi.Output<string | undefined>;
    /**
     * Client SSL Template Name
     */
    public readonly templateClientSslShared!: pulumi.Output<string | undefined>;
    /**
     * Connection Reuse Template (Connection Reuse Template Name)
     */
    public readonly templateConnectionReuse!: pulumi.Output<string | undefined>;
    /**
     * Connection Reuse Template Name
     */
    public readonly templateConnectionReuseShared!: pulumi.Output<string | undefined>;
    /**
     * DBLB Template (DBLB template name)
     */
    public readonly templateDblb!: pulumi.Output<string | undefined>;
    /**
     * DBLB Template Name
     */
    public readonly templateDblbShared!: pulumi.Output<string | undefined>;
    /**
     * Diameter Template (diameter template name)
     */
    public readonly templateDiameter!: pulumi.Output<string | undefined>;
    /**
     * Diameter Template Name
     */
    public readonly templateDiameterShared!: pulumi.Output<string | undefined>;
    /**
     * DNS template (DNS template name)
     */
    public readonly templateDns!: pulumi.Output<string | undefined>;
    /**
     * DNS Template Name
     */
    public readonly templateDnsShared!: pulumi.Output<string | undefined>;
    /**
     * DNS over HTTP(s) Template Name
     */
    public readonly templateDoh!: pulumi.Output<string | undefined>;
    /**
     * DNS over HTTP(s) Template Name
     */
    public readonly templateDohShared!: pulumi.Output<string | undefined>;
    /**
     * Dynamic Service Template (dynamic-service template name)
     */
    public readonly templateDynamicService!: pulumi.Output<string | undefined>;
    /**
     * Dynamic Service Template Name
     */
    public readonly templateDynamicServiceShared!: pulumi.Output<string | undefined>;
    /**
     * External service template (external-service template name)
     */
    public readonly templateExternalService!: pulumi.Output<string | undefined>;
    /**
     * External Service Template Name
     */
    public readonly templateExternalServiceShared!: pulumi.Output<string | undefined>;
    /**
     * FIX template (FIX Template Name)
     */
    public readonly templateFix!: pulumi.Output<string | undefined>;
    /**
     * FIX Template Name
     */
    public readonly templateFixShared!: pulumi.Output<string | undefined>;
    /**
     * FTP port template (Ftp template name)
     */
    public readonly templateFtp!: pulumi.Output<string | undefined>;
    /**
     * HTTP Template Name
     */
    public readonly templateHttp!: pulumi.Output<string | undefined>;
    /**
     * http-policy template (http-policy template name)
     */
    public readonly templateHttpPolicy!: pulumi.Output<string | undefined>;
    /**
     * Http Policy Template Name
     */
    public readonly templateHttpPolicyShared!: pulumi.Output<string | undefined>;
    /**
     * HTTP Template Name
     */
    public readonly templateHttpShared!: pulumi.Output<string | undefined>;
    /**
     * IMAP/POP3 Template (IMAP/POP3 Config Name)
     */
    public readonly templateImapPop3!: pulumi.Output<string | undefined>;
    /**
     * IMAP/POP3 Template Name
     */
    public readonly templateImapPop3Shared!: pulumi.Output<string | undefined>;
    /**
     * MQTT Template (MQTT Config Name)
     */
    public readonly templateMqtt!: pulumi.Output<string | undefined>;
    /**
     * Cookie persistence (Cookie persistence template name)
     */
    public readonly templatePersistCookie!: pulumi.Output<string | undefined>;
    /**
     * Cookie Persistence Template Name
     */
    public readonly templatePersistCookieShared!: pulumi.Output<string | undefined>;
    /**
     * Destination IP persistence (Destination IP persistence template name)
     */
    public readonly templatePersistDestinationIp!: pulumi.Output<string | undefined>;
    /**
     * Destination IP Persistence Template Name
     */
    public readonly templatePersistDestinationIpShared!: pulumi.Output<string | undefined>;
    /**
     * Source IP persistence (Source IP persistence template name)
     */
    public readonly templatePersistSourceIp!: pulumi.Output<string | undefined>;
    /**
     * Source IP Persistence Template Name
     */
    public readonly templatePersistSourceIpShared!: pulumi.Output<string | undefined>;
    /**
     * SSL SID persistence (SSL SID persistence template name)
     */
    public readonly templatePersistSslSid!: pulumi.Output<string | undefined>;
    /**
     * SSL SID Persistence Template Name
     */
    public readonly templatePersistSslSidShared!: pulumi.Output<string | undefined>;
    /**
     * Policy Template (Policy template name)
     */
    public readonly templatePolicy!: pulumi.Output<string | undefined>;
    /**
     * Policy Template Name
     */
    public readonly templatePolicyShared!: pulumi.Output<string | undefined>;
    /**
     * QUIC Template Name
     */
    public readonly templateQuic!: pulumi.Output<string | undefined>;
    /**
     * QUIC Config Client (QUIC Config name)
     */
    public readonly templateQuicClient!: pulumi.Output<string | undefined>;
    /**
     * QUIC Config Server (QUIC Config name)
     */
    public readonly templateQuicServer!: pulumi.Output<string | undefined>;
    /**
     * QUIC Template name
     */
    public readonly templateQuicShared!: pulumi.Output<string | undefined>;
    /**
     * RAM caching template (Cache Template Name)
     */
    public readonly templateRamCache!: pulumi.Output<string | undefined>;
    /**
     * ICAP reqmod template (reqmod-icap template name)
     */
    public readonly templateReqmodIcap!: pulumi.Output<string | undefined>;
    /**
     * ICAP respmod service template (respmod-icap template name)
     */
    public readonly templateRespmodIcap!: pulumi.Output<string | undefined>;
    /**
     * Scaleout template (Scaleout template name)
     */
    public readonly templateScaleout!: pulumi.Output<string | undefined>;
    /**
     * Server SSH Template (Server SSH Config Name)
     */
    public readonly templateServerSsh!: pulumi.Output<string | undefined>;
    /**
     * Server Side SSL Template Name
     */
    public readonly templateServerSsl!: pulumi.Output<string | undefined>;
    /**
     * Server SSL Template Name
     */
    public readonly templateServerSslShared!: pulumi.Output<string | undefined>;
    /**
     * SIP Template Name
     */
    public readonly templateSip!: pulumi.Output<string | undefined>;
    /**
     * SIP template
     */
    public readonly templateSipShared!: pulumi.Output<string | undefined>;
    /**
     * SMPP template
     */
    public readonly templateSmpp!: pulumi.Output<string | undefined>;
    /**
     * SMPP Template Name
     */
    public readonly templateSmppShared!: pulumi.Output<string | undefined>;
    /**
     * SMTP Template (SMTP Config Name)
     */
    public readonly templateSmtp!: pulumi.Output<string | undefined>;
    /**
     * SMTP Template Name
     */
    public readonly templateSmtpShared!: pulumi.Output<string | undefined>;
    /**
     * SSLi template (SSLi Template Name)
     */
    public readonly templateSsli!: pulumi.Output<string | undefined>;
    /**
     * TCP Template Name
     */
    public readonly templateTcp!: pulumi.Output<string | undefined>;
    /**
     * TCP Proxy Template Name
     */
    public readonly templateTcpProxy!: pulumi.Output<string | undefined>;
    /**
     * TCP Proxy Config Client (TCP Proxy Config name)
     */
    public readonly templateTcpProxyClient!: pulumi.Output<string | undefined>;
    /**
     * TCP Proxy Config Server (TCP Proxy Config name)
     */
    public readonly templateTcpProxyServer!: pulumi.Output<string | undefined>;
    /**
     * TCP Proxy Template name
     */
    public readonly templateTcpProxyShared!: pulumi.Output<string | undefined>;
    /**
     * TCP Template Name
     */
    public readonly templateTcpShared!: pulumi.Output<string | undefined>;
    /**
     * L4 UDP Template
     */
    public readonly templateUdp!: pulumi.Output<string | undefined>;
    /**
     * UDP Template Name
     */
    public readonly templateUdpShared!: pulumi.Output<string | undefined>;
    /**
     * Virtual port template (Virtual port template name)
     */
    public readonly templateVirtualPort!: pulumi.Output<string | undefined>;
    /**
     * Virtual Port Template Name
     */
    public readonly templateVirtualPortShared!: pulumi.Output<string | undefined>;
    /**
     * Trunk interface number
     */
    public readonly trunkFwd!: pulumi.Output<number | undefined>;
    /**
     * Trunk interface number
     */
    public readonly trunkRev!: pulumi.Output<number | undefined>;
    /**
     * Use alternate virtual port
     */
    public readonly useAlternatePort!: pulumi.Output<number | undefined>;
    /**
     * Follow CGNv6 source NAT configuration
     */
    public readonly useCgnv6!: pulumi.Output<number | undefined>;
    /**
     * Use default forwarding if server selection failed
     */
    public readonly useDefaultIfNoServer!: pulumi.Output<number | undefined>;
    /**
     * Use receive hop for response to client(For packets on default-vlan, also config "vlan-global
     * enable-def-vlan-l2-forwarding".)
     */
    public readonly useRcvHopForResp!: pulumi.Output<number | undefined>;
    /**
     * Set use-rcv-hop group
     */
    public readonly useRcvHopGroup!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specify a GSLB View (ID)
     */
    public readonly view!: pulumi.Output<number | undefined>;
    /**
     * Use alternate virtual port when down
     */
    public readonly whenDown!: pulumi.Output<number | undefined>;
    /**
     * Use alternate virtual port when down
     */
    public readonly whenDownProtocol2!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbVirtualServerPort resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlbVirtualServerPortArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbVirtualServerPortArgs | SlbVirtualServerPortState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbVirtualServerPortState | undefined;
            resourceInputs["aclLists"] = state ? state.aclLists : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["aflexScripts"] = state ? state.aflexScripts : undefined;
            resourceInputs["aflexTableEntrySynDisable"] = state ? state.aflexTableEntrySynDisable : undefined;
            resourceInputs["aflexTableEntrySynEnable"] = state ? state.aflexTableEntrySynEnable : undefined;
            resourceInputs["altProtocol1"] = state ? state.altProtocol1 : undefined;
            resourceInputs["altProtocol2"] = state ? state.altProtocol2 : undefined;
            resourceInputs["alternatePort"] = state ? state.alternatePort : undefined;
            resourceInputs["alternatePortNumber"] = state ? state.alternatePortNumber : undefined;
            resourceInputs["attackDetection"] = state ? state.attackDetection : undefined;
            resourceInputs["authCfg"] = state ? state.authCfg : undefined;
            resourceInputs["auto"] = state ? state.auto : undefined;
            resourceInputs["clientipStickyNat"] = state ? state.clientipStickyNat : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["cpuCompute"] = state ? state.cpuCompute : undefined;
            resourceInputs["defSelectionIfPrefFailed"] = state ? state.defSelectionIfPrefFailed : undefined;
            resourceInputs["enablePlayeridCheck"] = state ? state.enablePlayeridCheck : undefined;
            resourceInputs["enableScaleout"] = state ? state.enableScaleout : undefined;
            resourceInputs["ethFwd"] = state ? state.ethFwd : undefined;
            resourceInputs["ethRev"] = state ? state.ethRev : undefined;
            resourceInputs["expand"] = state ? state.expand : undefined;
            resourceInputs["extendedStats"] = state ? state.extendedStats : undefined;
            resourceInputs["fastPath"] = state ? state.fastPath : undefined;
            resourceInputs["forceRoutingMode"] = state ? state.forceRoutingMode : undefined;
            resourceInputs["gslbEnable"] = state ? state.gslbEnable : undefined;
            resourceInputs["gtpSessionLb"] = state ? state.gtpSessionLb : undefined;
            resourceInputs["haConnMirror"] = state ? state.haConnMirror : undefined;
            resourceInputs["ignoreGlobal"] = state ? state.ignoreGlobal : undefined;
            resourceInputs["ipMapList"] = state ? state.ipMapList : undefined;
            resourceInputs["ipOnlyLb"] = state ? state.ipOnlyLb : undefined;
            resourceInputs["ipSmartRr"] = state ? state.ipSmartRr : undefined;
            resourceInputs["ipinip"] = state ? state.ipinip : undefined;
            resourceInputs["l7HardwareAssist"] = state ? state.l7HardwareAssist : undefined;
            resourceInputs["l7ServiceChain"] = state ? state.l7ServiceChain : undefined;
            resourceInputs["memoryCompute"] = state ? state.memoryCompute : undefined;
            resourceInputs["messageSwitching"] = state ? state.messageSwitching : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ngWaf"] = state ? state.ngWaf : undefined;
            resourceInputs["noAutoUpOnAflex"] = state ? state.noAutoUpOnAflex : undefined;
            resourceInputs["noDestNat"] = state ? state.noDestNat : undefined;
            resourceInputs["noLogging"] = state ? state.noLogging : undefined;
            resourceInputs["onSyn"] = state ? state.onSyn : undefined;
            resourceInputs["oneServerConn"] = state ? state.oneServerConn : undefined;
            resourceInputs["optimizationLevel"] = state ? state.optimizationLevel : undefined;
            resourceInputs["pTemplateSipShared"] = state ? state.pTemplateSipShared : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["persistType"] = state ? state.persistType : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["poolShared"] = state ? state.poolShared : undefined;
            resourceInputs["portNumber"] = state ? state.portNumber : undefined;
            resourceInputs["portTranslation"] = state ? state.portTranslation : undefined;
            resourceInputs["precedence"] = state ? state.precedence : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxyLayer"] = state ? state.proxyLayer : undefined;
            resourceInputs["range"] = state ? state.range : undefined;
            resourceInputs["rate"] = state ? state.rate : undefined;
            resourceInputs["redirectToHttps"] = state ? state.redirectToHttps : undefined;
            resourceInputs["replyAcmeChallenge"] = state ? state.replyAcmeChallenge : undefined;
            resourceInputs["reqFail"] = state ? state.reqFail : undefined;
            resourceInputs["reselection"] = state ? state.reselection : undefined;
            resourceInputs["reset"] = state ? state.reset : undefined;
            resourceInputs["resetOnServerSelectionFail"] = state ? state.resetOnServerSelectionFail : undefined;
            resourceInputs["resolveWebCatList"] = state ? state.resolveWebCatList : undefined;
            resourceInputs["rtpSipCallIdMatch"] = state ? state.rtpSipCallIdMatch : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["secs"] = state ? state.secs : undefined;
            resourceInputs["servSelFail"] = state ? state.servSelFail : undefined;
            resourceInputs["serverGroup"] = state ? state.serverGroup : undefined;
            resourceInputs["serviceGroup"] = state ? state.serviceGroup : undefined;
            resourceInputs["sharedPartitionCacheTemplate"] = state ? state.sharedPartitionCacheTemplate : undefined;
            resourceInputs["sharedPartitionClientSslTemplate"] = state ? state.sharedPartitionClientSslTemplate : undefined;
            resourceInputs["sharedPartitionConnectionReuseTemplate"] = state ? state.sharedPartitionConnectionReuseTemplate : undefined;
            resourceInputs["sharedPartitionDblbTemplate"] = state ? state.sharedPartitionDblbTemplate : undefined;
            resourceInputs["sharedPartitionDiameterTemplate"] = state ? state.sharedPartitionDiameterTemplate : undefined;
            resourceInputs["sharedPartitionDnsTemplate"] = state ? state.sharedPartitionDnsTemplate : undefined;
            resourceInputs["sharedPartitionDohTemplate"] = state ? state.sharedPartitionDohTemplate : undefined;
            resourceInputs["sharedPartitionDynamicServiceTemplate"] = state ? state.sharedPartitionDynamicServiceTemplate : undefined;
            resourceInputs["sharedPartitionExternalServiceTemplate"] = state ? state.sharedPartitionExternalServiceTemplate : undefined;
            resourceInputs["sharedPartitionFixTemplate"] = state ? state.sharedPartitionFixTemplate : undefined;
            resourceInputs["sharedPartitionHttpPolicyTemplate"] = state ? state.sharedPartitionHttpPolicyTemplate : undefined;
            resourceInputs["sharedPartitionHttpTemplate"] = state ? state.sharedPartitionHttpTemplate : undefined;
            resourceInputs["sharedPartitionImapPop3Template"] = state ? state.sharedPartitionImapPop3Template : undefined;
            resourceInputs["sharedPartitionPersistCookieTemplate"] = state ? state.sharedPartitionPersistCookieTemplate : undefined;
            resourceInputs["sharedPartitionPersistDestinationIpTemplate"] = state ? state.sharedPartitionPersistDestinationIpTemplate : undefined;
            resourceInputs["sharedPartitionPersistSourceIpTemplate"] = state ? state.sharedPartitionPersistSourceIpTemplate : undefined;
            resourceInputs["sharedPartitionPersistSslSidTemplate"] = state ? state.sharedPartitionPersistSslSidTemplate : undefined;
            resourceInputs["sharedPartitionPolicyTemplate"] = state ? state.sharedPartitionPolicyTemplate : undefined;
            resourceInputs["sharedPartitionPool"] = state ? state.sharedPartitionPool : undefined;
            resourceInputs["sharedPartitionQuicTemplate"] = state ? state.sharedPartitionQuicTemplate : undefined;
            resourceInputs["sharedPartitionServerSslTemplate"] = state ? state.sharedPartitionServerSslTemplate : undefined;
            resourceInputs["sharedPartitionSmppTemplate"] = state ? state.sharedPartitionSmppTemplate : undefined;
            resourceInputs["sharedPartitionSmtpTemplate"] = state ? state.sharedPartitionSmtpTemplate : undefined;
            resourceInputs["sharedPartitionTcp"] = state ? state.sharedPartitionTcp : undefined;
            resourceInputs["sharedPartitionTcpProxyTemplate"] = state ? state.sharedPartitionTcpProxyTemplate : undefined;
            resourceInputs["sharedPartitionUdp"] = state ? state.sharedPartitionUdp : undefined;
            resourceInputs["sharedPartitionVirtualPortTemplate"] = state ? state.sharedPartitionVirtualPortTemplate : undefined;
            resourceInputs["showtechPrintExtendedStats"] = state ? state.showtechPrintExtendedStats : undefined;
            resourceInputs["skipRevHash"] = state ? state.skipRevHash : undefined;
            resourceInputs["snatOnVip"] = state ? state.snatOnVip : undefined;
            resourceInputs["statsDataAction"] = state ? state.statsDataAction : undefined;
            resourceInputs["substituteSourceMac"] = state ? state.substituteSourceMac : undefined;
            resourceInputs["supportHttp2"] = state ? state.supportHttp2 : undefined;
            resourceInputs["synCookie"] = state ? state.synCookie : undefined;
            resourceInputs["templateCache"] = state ? state.templateCache : undefined;
            resourceInputs["templateCacheShared"] = state ? state.templateCacheShared : undefined;
            resourceInputs["templateClientSsh"] = state ? state.templateClientSsh : undefined;
            resourceInputs["templateClientSsl"] = state ? state.templateClientSsl : undefined;
            resourceInputs["templateClientSslShared"] = state ? state.templateClientSslShared : undefined;
            resourceInputs["templateConnectionReuse"] = state ? state.templateConnectionReuse : undefined;
            resourceInputs["templateConnectionReuseShared"] = state ? state.templateConnectionReuseShared : undefined;
            resourceInputs["templateDblb"] = state ? state.templateDblb : undefined;
            resourceInputs["templateDblbShared"] = state ? state.templateDblbShared : undefined;
            resourceInputs["templateDiameter"] = state ? state.templateDiameter : undefined;
            resourceInputs["templateDiameterShared"] = state ? state.templateDiameterShared : undefined;
            resourceInputs["templateDns"] = state ? state.templateDns : undefined;
            resourceInputs["templateDnsShared"] = state ? state.templateDnsShared : undefined;
            resourceInputs["templateDoh"] = state ? state.templateDoh : undefined;
            resourceInputs["templateDohShared"] = state ? state.templateDohShared : undefined;
            resourceInputs["templateDynamicService"] = state ? state.templateDynamicService : undefined;
            resourceInputs["templateDynamicServiceShared"] = state ? state.templateDynamicServiceShared : undefined;
            resourceInputs["templateExternalService"] = state ? state.templateExternalService : undefined;
            resourceInputs["templateExternalServiceShared"] = state ? state.templateExternalServiceShared : undefined;
            resourceInputs["templateFix"] = state ? state.templateFix : undefined;
            resourceInputs["templateFixShared"] = state ? state.templateFixShared : undefined;
            resourceInputs["templateFtp"] = state ? state.templateFtp : undefined;
            resourceInputs["templateHttp"] = state ? state.templateHttp : undefined;
            resourceInputs["templateHttpPolicy"] = state ? state.templateHttpPolicy : undefined;
            resourceInputs["templateHttpPolicyShared"] = state ? state.templateHttpPolicyShared : undefined;
            resourceInputs["templateHttpShared"] = state ? state.templateHttpShared : undefined;
            resourceInputs["templateImapPop3"] = state ? state.templateImapPop3 : undefined;
            resourceInputs["templateImapPop3Shared"] = state ? state.templateImapPop3Shared : undefined;
            resourceInputs["templateMqtt"] = state ? state.templateMqtt : undefined;
            resourceInputs["templatePersistCookie"] = state ? state.templatePersistCookie : undefined;
            resourceInputs["templatePersistCookieShared"] = state ? state.templatePersistCookieShared : undefined;
            resourceInputs["templatePersistDestinationIp"] = state ? state.templatePersistDestinationIp : undefined;
            resourceInputs["templatePersistDestinationIpShared"] = state ? state.templatePersistDestinationIpShared : undefined;
            resourceInputs["templatePersistSourceIp"] = state ? state.templatePersistSourceIp : undefined;
            resourceInputs["templatePersistSourceIpShared"] = state ? state.templatePersistSourceIpShared : undefined;
            resourceInputs["templatePersistSslSid"] = state ? state.templatePersistSslSid : undefined;
            resourceInputs["templatePersistSslSidShared"] = state ? state.templatePersistSslSidShared : undefined;
            resourceInputs["templatePolicy"] = state ? state.templatePolicy : undefined;
            resourceInputs["templatePolicyShared"] = state ? state.templatePolicyShared : undefined;
            resourceInputs["templateQuic"] = state ? state.templateQuic : undefined;
            resourceInputs["templateQuicClient"] = state ? state.templateQuicClient : undefined;
            resourceInputs["templateQuicServer"] = state ? state.templateQuicServer : undefined;
            resourceInputs["templateQuicShared"] = state ? state.templateQuicShared : undefined;
            resourceInputs["templateRamCache"] = state ? state.templateRamCache : undefined;
            resourceInputs["templateReqmodIcap"] = state ? state.templateReqmodIcap : undefined;
            resourceInputs["templateRespmodIcap"] = state ? state.templateRespmodIcap : undefined;
            resourceInputs["templateScaleout"] = state ? state.templateScaleout : undefined;
            resourceInputs["templateServerSsh"] = state ? state.templateServerSsh : undefined;
            resourceInputs["templateServerSsl"] = state ? state.templateServerSsl : undefined;
            resourceInputs["templateServerSslShared"] = state ? state.templateServerSslShared : undefined;
            resourceInputs["templateSip"] = state ? state.templateSip : undefined;
            resourceInputs["templateSipShared"] = state ? state.templateSipShared : undefined;
            resourceInputs["templateSmpp"] = state ? state.templateSmpp : undefined;
            resourceInputs["templateSmppShared"] = state ? state.templateSmppShared : undefined;
            resourceInputs["templateSmtp"] = state ? state.templateSmtp : undefined;
            resourceInputs["templateSmtpShared"] = state ? state.templateSmtpShared : undefined;
            resourceInputs["templateSsli"] = state ? state.templateSsli : undefined;
            resourceInputs["templateTcp"] = state ? state.templateTcp : undefined;
            resourceInputs["templateTcpProxy"] = state ? state.templateTcpProxy : undefined;
            resourceInputs["templateTcpProxyClient"] = state ? state.templateTcpProxyClient : undefined;
            resourceInputs["templateTcpProxyServer"] = state ? state.templateTcpProxyServer : undefined;
            resourceInputs["templateTcpProxyShared"] = state ? state.templateTcpProxyShared : undefined;
            resourceInputs["templateTcpShared"] = state ? state.templateTcpShared : undefined;
            resourceInputs["templateUdp"] = state ? state.templateUdp : undefined;
            resourceInputs["templateUdpShared"] = state ? state.templateUdpShared : undefined;
            resourceInputs["templateVirtualPort"] = state ? state.templateVirtualPort : undefined;
            resourceInputs["templateVirtualPortShared"] = state ? state.templateVirtualPortShared : undefined;
            resourceInputs["trunkFwd"] = state ? state.trunkFwd : undefined;
            resourceInputs["trunkRev"] = state ? state.trunkRev : undefined;
            resourceInputs["useAlternatePort"] = state ? state.useAlternatePort : undefined;
            resourceInputs["useCgnv6"] = state ? state.useCgnv6 : undefined;
            resourceInputs["useDefaultIfNoServer"] = state ? state.useDefaultIfNoServer : undefined;
            resourceInputs["useRcvHopForResp"] = state ? state.useRcvHopForResp : undefined;
            resourceInputs["useRcvHopGroup"] = state ? state.useRcvHopGroup : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["view"] = state ? state.view : undefined;
            resourceInputs["whenDown"] = state ? state.whenDown : undefined;
            resourceInputs["whenDownProtocol2"] = state ? state.whenDownProtocol2 : undefined;
        } else {
            const args = argsOrState as SlbVirtualServerPortArgs | undefined;
            if ((!args || args.portNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portNumber'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["aclLists"] = args ? args.aclLists : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["aflexScripts"] = args ? args.aflexScripts : undefined;
            resourceInputs["aflexTableEntrySynDisable"] = args ? args.aflexTableEntrySynDisable : undefined;
            resourceInputs["aflexTableEntrySynEnable"] = args ? args.aflexTableEntrySynEnable : undefined;
            resourceInputs["altProtocol1"] = args ? args.altProtocol1 : undefined;
            resourceInputs["altProtocol2"] = args ? args.altProtocol2 : undefined;
            resourceInputs["alternatePort"] = args ? args.alternatePort : undefined;
            resourceInputs["alternatePortNumber"] = args ? args.alternatePortNumber : undefined;
            resourceInputs["attackDetection"] = args ? args.attackDetection : undefined;
            resourceInputs["authCfg"] = args ? args.authCfg : undefined;
            resourceInputs["auto"] = args ? args.auto : undefined;
            resourceInputs["clientipStickyNat"] = args ? args.clientipStickyNat : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["cpuCompute"] = args ? args.cpuCompute : undefined;
            resourceInputs["defSelectionIfPrefFailed"] = args ? args.defSelectionIfPrefFailed : undefined;
            resourceInputs["enablePlayeridCheck"] = args ? args.enablePlayeridCheck : undefined;
            resourceInputs["enableScaleout"] = args ? args.enableScaleout : undefined;
            resourceInputs["ethFwd"] = args ? args.ethFwd : undefined;
            resourceInputs["ethRev"] = args ? args.ethRev : undefined;
            resourceInputs["expand"] = args ? args.expand : undefined;
            resourceInputs["extendedStats"] = args ? args.extendedStats : undefined;
            resourceInputs["fastPath"] = args ? args.fastPath : undefined;
            resourceInputs["forceRoutingMode"] = args ? args.forceRoutingMode : undefined;
            resourceInputs["gslbEnable"] = args ? args.gslbEnable : undefined;
            resourceInputs["gtpSessionLb"] = args ? args.gtpSessionLb : undefined;
            resourceInputs["haConnMirror"] = args ? args.haConnMirror : undefined;
            resourceInputs["ignoreGlobal"] = args ? args.ignoreGlobal : undefined;
            resourceInputs["ipMapList"] = args ? args.ipMapList : undefined;
            resourceInputs["ipOnlyLb"] = args ? args.ipOnlyLb : undefined;
            resourceInputs["ipSmartRr"] = args ? args.ipSmartRr : undefined;
            resourceInputs["ipinip"] = args ? args.ipinip : undefined;
            resourceInputs["l7HardwareAssist"] = args ? args.l7HardwareAssist : undefined;
            resourceInputs["l7ServiceChain"] = args ? args.l7ServiceChain : undefined;
            resourceInputs["memoryCompute"] = args ? args.memoryCompute : undefined;
            resourceInputs["messageSwitching"] = args ? args.messageSwitching : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ngWaf"] = args ? args.ngWaf : undefined;
            resourceInputs["noAutoUpOnAflex"] = args ? args.noAutoUpOnAflex : undefined;
            resourceInputs["noDestNat"] = args ? args.noDestNat : undefined;
            resourceInputs["noLogging"] = args ? args.noLogging : undefined;
            resourceInputs["onSyn"] = args ? args.onSyn : undefined;
            resourceInputs["oneServerConn"] = args ? args.oneServerConn : undefined;
            resourceInputs["optimizationLevel"] = args ? args.optimizationLevel : undefined;
            resourceInputs["pTemplateSipShared"] = args ? args.pTemplateSipShared : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["persistType"] = args ? args.persistType : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["poolShared"] = args ? args.poolShared : undefined;
            resourceInputs["portNumber"] = args ? args.portNumber : undefined;
            resourceInputs["portTranslation"] = args ? args.portTranslation : undefined;
            resourceInputs["precedence"] = args ? args.precedence : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["proxyLayer"] = args ? args.proxyLayer : undefined;
            resourceInputs["range"] = args ? args.range : undefined;
            resourceInputs["rate"] = args ? args.rate : undefined;
            resourceInputs["redirectToHttps"] = args ? args.redirectToHttps : undefined;
            resourceInputs["replyAcmeChallenge"] = args ? args.replyAcmeChallenge : undefined;
            resourceInputs["reqFail"] = args ? args.reqFail : undefined;
            resourceInputs["reselection"] = args ? args.reselection : undefined;
            resourceInputs["reset"] = args ? args.reset : undefined;
            resourceInputs["resetOnServerSelectionFail"] = args ? args.resetOnServerSelectionFail : undefined;
            resourceInputs["resolveWebCatList"] = args ? args.resolveWebCatList : undefined;
            resourceInputs["rtpSipCallIdMatch"] = args ? args.rtpSipCallIdMatch : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["secs"] = args ? args.secs : undefined;
            resourceInputs["servSelFail"] = args ? args.servSelFail : undefined;
            resourceInputs["serverGroup"] = args ? args.serverGroup : undefined;
            resourceInputs["serviceGroup"] = args ? args.serviceGroup : undefined;
            resourceInputs["sharedPartitionCacheTemplate"] = args ? args.sharedPartitionCacheTemplate : undefined;
            resourceInputs["sharedPartitionClientSslTemplate"] = args ? args.sharedPartitionClientSslTemplate : undefined;
            resourceInputs["sharedPartitionConnectionReuseTemplate"] = args ? args.sharedPartitionConnectionReuseTemplate : undefined;
            resourceInputs["sharedPartitionDblbTemplate"] = args ? args.sharedPartitionDblbTemplate : undefined;
            resourceInputs["sharedPartitionDiameterTemplate"] = args ? args.sharedPartitionDiameterTemplate : undefined;
            resourceInputs["sharedPartitionDnsTemplate"] = args ? args.sharedPartitionDnsTemplate : undefined;
            resourceInputs["sharedPartitionDohTemplate"] = args ? args.sharedPartitionDohTemplate : undefined;
            resourceInputs["sharedPartitionDynamicServiceTemplate"] = args ? args.sharedPartitionDynamicServiceTemplate : undefined;
            resourceInputs["sharedPartitionExternalServiceTemplate"] = args ? args.sharedPartitionExternalServiceTemplate : undefined;
            resourceInputs["sharedPartitionFixTemplate"] = args ? args.sharedPartitionFixTemplate : undefined;
            resourceInputs["sharedPartitionHttpPolicyTemplate"] = args ? args.sharedPartitionHttpPolicyTemplate : undefined;
            resourceInputs["sharedPartitionHttpTemplate"] = args ? args.sharedPartitionHttpTemplate : undefined;
            resourceInputs["sharedPartitionImapPop3Template"] = args ? args.sharedPartitionImapPop3Template : undefined;
            resourceInputs["sharedPartitionPersistCookieTemplate"] = args ? args.sharedPartitionPersistCookieTemplate : undefined;
            resourceInputs["sharedPartitionPersistDestinationIpTemplate"] = args ? args.sharedPartitionPersistDestinationIpTemplate : undefined;
            resourceInputs["sharedPartitionPersistSourceIpTemplate"] = args ? args.sharedPartitionPersistSourceIpTemplate : undefined;
            resourceInputs["sharedPartitionPersistSslSidTemplate"] = args ? args.sharedPartitionPersistSslSidTemplate : undefined;
            resourceInputs["sharedPartitionPolicyTemplate"] = args ? args.sharedPartitionPolicyTemplate : undefined;
            resourceInputs["sharedPartitionPool"] = args ? args.sharedPartitionPool : undefined;
            resourceInputs["sharedPartitionQuicTemplate"] = args ? args.sharedPartitionQuicTemplate : undefined;
            resourceInputs["sharedPartitionServerSslTemplate"] = args ? args.sharedPartitionServerSslTemplate : undefined;
            resourceInputs["sharedPartitionSmppTemplate"] = args ? args.sharedPartitionSmppTemplate : undefined;
            resourceInputs["sharedPartitionSmtpTemplate"] = args ? args.sharedPartitionSmtpTemplate : undefined;
            resourceInputs["sharedPartitionTcp"] = args ? args.sharedPartitionTcp : undefined;
            resourceInputs["sharedPartitionTcpProxyTemplate"] = args ? args.sharedPartitionTcpProxyTemplate : undefined;
            resourceInputs["sharedPartitionUdp"] = args ? args.sharedPartitionUdp : undefined;
            resourceInputs["sharedPartitionVirtualPortTemplate"] = args ? args.sharedPartitionVirtualPortTemplate : undefined;
            resourceInputs["showtechPrintExtendedStats"] = args ? args.showtechPrintExtendedStats : undefined;
            resourceInputs["skipRevHash"] = args ? args.skipRevHash : undefined;
            resourceInputs["snatOnVip"] = args ? args.snatOnVip : undefined;
            resourceInputs["statsDataAction"] = args ? args.statsDataAction : undefined;
            resourceInputs["substituteSourceMac"] = args ? args.substituteSourceMac : undefined;
            resourceInputs["supportHttp2"] = args ? args.supportHttp2 : undefined;
            resourceInputs["synCookie"] = args ? args.synCookie : undefined;
            resourceInputs["templateCache"] = args ? args.templateCache : undefined;
            resourceInputs["templateCacheShared"] = args ? args.templateCacheShared : undefined;
            resourceInputs["templateClientSsh"] = args ? args.templateClientSsh : undefined;
            resourceInputs["templateClientSsl"] = args ? args.templateClientSsl : undefined;
            resourceInputs["templateClientSslShared"] = args ? args.templateClientSslShared : undefined;
            resourceInputs["templateConnectionReuse"] = args ? args.templateConnectionReuse : undefined;
            resourceInputs["templateConnectionReuseShared"] = args ? args.templateConnectionReuseShared : undefined;
            resourceInputs["templateDblb"] = args ? args.templateDblb : undefined;
            resourceInputs["templateDblbShared"] = args ? args.templateDblbShared : undefined;
            resourceInputs["templateDiameter"] = args ? args.templateDiameter : undefined;
            resourceInputs["templateDiameterShared"] = args ? args.templateDiameterShared : undefined;
            resourceInputs["templateDns"] = args ? args.templateDns : undefined;
            resourceInputs["templateDnsShared"] = args ? args.templateDnsShared : undefined;
            resourceInputs["templateDoh"] = args ? args.templateDoh : undefined;
            resourceInputs["templateDohShared"] = args ? args.templateDohShared : undefined;
            resourceInputs["templateDynamicService"] = args ? args.templateDynamicService : undefined;
            resourceInputs["templateDynamicServiceShared"] = args ? args.templateDynamicServiceShared : undefined;
            resourceInputs["templateExternalService"] = args ? args.templateExternalService : undefined;
            resourceInputs["templateExternalServiceShared"] = args ? args.templateExternalServiceShared : undefined;
            resourceInputs["templateFix"] = args ? args.templateFix : undefined;
            resourceInputs["templateFixShared"] = args ? args.templateFixShared : undefined;
            resourceInputs["templateFtp"] = args ? args.templateFtp : undefined;
            resourceInputs["templateHttp"] = args ? args.templateHttp : undefined;
            resourceInputs["templateHttpPolicy"] = args ? args.templateHttpPolicy : undefined;
            resourceInputs["templateHttpPolicyShared"] = args ? args.templateHttpPolicyShared : undefined;
            resourceInputs["templateHttpShared"] = args ? args.templateHttpShared : undefined;
            resourceInputs["templateImapPop3"] = args ? args.templateImapPop3 : undefined;
            resourceInputs["templateImapPop3Shared"] = args ? args.templateImapPop3Shared : undefined;
            resourceInputs["templateMqtt"] = args ? args.templateMqtt : undefined;
            resourceInputs["templatePersistCookie"] = args ? args.templatePersistCookie : undefined;
            resourceInputs["templatePersistCookieShared"] = args ? args.templatePersistCookieShared : undefined;
            resourceInputs["templatePersistDestinationIp"] = args ? args.templatePersistDestinationIp : undefined;
            resourceInputs["templatePersistDestinationIpShared"] = args ? args.templatePersistDestinationIpShared : undefined;
            resourceInputs["templatePersistSourceIp"] = args ? args.templatePersistSourceIp : undefined;
            resourceInputs["templatePersistSourceIpShared"] = args ? args.templatePersistSourceIpShared : undefined;
            resourceInputs["templatePersistSslSid"] = args ? args.templatePersistSslSid : undefined;
            resourceInputs["templatePersistSslSidShared"] = args ? args.templatePersistSslSidShared : undefined;
            resourceInputs["templatePolicy"] = args ? args.templatePolicy : undefined;
            resourceInputs["templatePolicyShared"] = args ? args.templatePolicyShared : undefined;
            resourceInputs["templateQuic"] = args ? args.templateQuic : undefined;
            resourceInputs["templateQuicClient"] = args ? args.templateQuicClient : undefined;
            resourceInputs["templateQuicServer"] = args ? args.templateQuicServer : undefined;
            resourceInputs["templateQuicShared"] = args ? args.templateQuicShared : undefined;
            resourceInputs["templateRamCache"] = args ? args.templateRamCache : undefined;
            resourceInputs["templateReqmodIcap"] = args ? args.templateReqmodIcap : undefined;
            resourceInputs["templateRespmodIcap"] = args ? args.templateRespmodIcap : undefined;
            resourceInputs["templateScaleout"] = args ? args.templateScaleout : undefined;
            resourceInputs["templateServerSsh"] = args ? args.templateServerSsh : undefined;
            resourceInputs["templateServerSsl"] = args ? args.templateServerSsl : undefined;
            resourceInputs["templateServerSslShared"] = args ? args.templateServerSslShared : undefined;
            resourceInputs["templateSip"] = args ? args.templateSip : undefined;
            resourceInputs["templateSipShared"] = args ? args.templateSipShared : undefined;
            resourceInputs["templateSmpp"] = args ? args.templateSmpp : undefined;
            resourceInputs["templateSmppShared"] = args ? args.templateSmppShared : undefined;
            resourceInputs["templateSmtp"] = args ? args.templateSmtp : undefined;
            resourceInputs["templateSmtpShared"] = args ? args.templateSmtpShared : undefined;
            resourceInputs["templateSsli"] = args ? args.templateSsli : undefined;
            resourceInputs["templateTcp"] = args ? args.templateTcp : undefined;
            resourceInputs["templateTcpProxy"] = args ? args.templateTcpProxy : undefined;
            resourceInputs["templateTcpProxyClient"] = args ? args.templateTcpProxyClient : undefined;
            resourceInputs["templateTcpProxyServer"] = args ? args.templateTcpProxyServer : undefined;
            resourceInputs["templateTcpProxyShared"] = args ? args.templateTcpProxyShared : undefined;
            resourceInputs["templateTcpShared"] = args ? args.templateTcpShared : undefined;
            resourceInputs["templateUdp"] = args ? args.templateUdp : undefined;
            resourceInputs["templateUdpShared"] = args ? args.templateUdpShared : undefined;
            resourceInputs["templateVirtualPort"] = args ? args.templateVirtualPort : undefined;
            resourceInputs["templateVirtualPortShared"] = args ? args.templateVirtualPortShared : undefined;
            resourceInputs["trunkFwd"] = args ? args.trunkFwd : undefined;
            resourceInputs["trunkRev"] = args ? args.trunkRev : undefined;
            resourceInputs["useAlternatePort"] = args ? args.useAlternatePort : undefined;
            resourceInputs["useCgnv6"] = args ? args.useCgnv6 : undefined;
            resourceInputs["useDefaultIfNoServer"] = args ? args.useDefaultIfNoServer : undefined;
            resourceInputs["useRcvHopForResp"] = args ? args.useRcvHopForResp : undefined;
            resourceInputs["useRcvHopGroup"] = args ? args.useRcvHopGroup : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["view"] = args ? args.view : undefined;
            resourceInputs["whenDown"] = args ? args.whenDown : undefined;
            resourceInputs["whenDownProtocol2"] = args ? args.whenDownProtocol2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbVirtualServerPort.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbVirtualServerPort resources.
 */
export interface SlbVirtualServerPortState {
    aclLists?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortAclList>[]>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    aflexScripts?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortAflexScript>[]>;
    /**
     * Disable aFlex entry sync for this port
     */
    aflexTableEntrySynDisable?: pulumi.Input<number>;
    /**
     * Enable aFlex entry sync for this port
     */
    aflexTableEntrySynEnable?: pulumi.Input<number>;
    /**
     * 'http': HTTP Port;
     */
    altProtocol1?: pulumi.Input<string>;
    /**
     * 'tcp': TCP LB service;
     */
    altProtocol2?: pulumi.Input<string>;
    /**
     * Alternate Virtual Port
     */
    alternatePort?: pulumi.Input<number>;
    /**
     * Virtual Port
     */
    alternatePortNumber?: pulumi.Input<number>;
    /**
     * Enable analytics
     */
    attackDetection?: pulumi.Input<number>;
    authCfg?: pulumi.Input<inputs.SlbVirtualServerPortAuthCfg>;
    /**
     * Configure auto NAT for the vport
     */
    auto?: pulumi.Input<number>;
    /**
     * Prefer to use same source NAT address for a client
     */
    clientipStickyNat?: pulumi.Input<number>;
    /**
     * Connection Limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * enable cpu compute on virtual port
     */
    cpuCompute?: pulumi.Input<number>;
    /**
     * 'def-selection-if-pref-failed': Use default server selection method if prefer method failed;
     * 'def-selection-if-pref-failed-disable': Stop using default server selection method if prefer method failed;
     */
    defSelectionIfPrefFailed?: pulumi.Input<string>;
    /**
     * Enable playerid checks on UDP packets once the AX is in active mode
     */
    enablePlayeridCheck?: pulumi.Input<number>;
    enableScaleout?: pulumi.Input<number>;
    /**
     * Ethernet interface number
     */
    ethFwd?: pulumi.Input<number>;
    /**
     * Ethernet interface number
     */
    ethRev?: pulumi.Input<number>;
    /**
     * expand syn-cookie with timestamp and wscale
     */
    expand?: pulumi.Input<number>;
    /**
     * Enable extended statistics on virtual port
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * 'force': Force fast path in SLB processing; 'disable': Disable fast path in SLB processing;
     */
    fastPath?: pulumi.Input<string>;
    /**
     * Force routing mode
     */
    forceRoutingMode?: pulumi.Input<number>;
    /**
     * Enable Global Server Load Balancing
     */
    gslbEnable?: pulumi.Input<number>;
    /**
     * Enable GTP Session Load Balancing
     */
    gtpSessionLb?: pulumi.Input<number>;
    /**
     * Enable for HA Conn sync
     */
    haConnMirror?: pulumi.Input<number>;
    /**
     * Ignore global substitute-source-mac
     */
    ignoreGlobal?: pulumi.Input<number>;
    /**
     * Enter name of IP Map List to be bound (IP Map List Name)
     */
    ipMapList?: pulumi.Input<string>;
    /**
     * Enable IP-Only LB mode
     */
    ipOnlyLb?: pulumi.Input<number>;
    /**
     * Use IP address round-robin behavior
     */
    ipSmartRr?: pulumi.Input<number>;
    /**
     * Enable IP in IP
     */
    ipinip?: pulumi.Input<number>;
    /**
     * FPGA assist L7 packet parsing
     */
    l7HardwareAssist?: pulumi.Input<number>;
    l7ServiceChain?: pulumi.Input<number>;
    /**
     * enable dynamic memory compute on virtual port
     */
    memoryCompute?: pulumi.Input<number>;
    /**
     * Message switching
     */
    messageSwitching?: pulumi.Input<number>;
    /**
     * SLB Virtual Service Name
     */
    name?: pulumi.Input<string>;
    /**
     * Next-gen WAF
     */
    ngWaf?: pulumi.Input<number>;
    /**
     * Don't automatically mark vport up when aFleX is bound
     */
    noAutoUpOnAflex?: pulumi.Input<number>;
    /**
     * Disable destination NAT, this option only supports in wildcard VIP or when a connection is operated in SSLi + EP mode
     */
    noDestNat?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    noLogging?: pulumi.Input<number>;
    /**
     * Enable for HA Conn sync for l4 tcp sessions on SYN
     */
    onSyn?: pulumi.Input<number>;
    /**
     * Support server that allow only one connection
     */
    oneServerConn?: pulumi.Input<number>;
    /**
     * '0': No optimization; '1': Optimization level 1 (Experimental);
     */
    optimizationLevel?: pulumi.Input<string>;
    /**
     * SIP Template Name
     */
    pTemplateSipShared?: pulumi.Input<number>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * 'src-dst-ip-swap-persist': Create persist session after source IP and destination IP swap; 'use-src-ip-for-dst-persist':
     * Use the source IP to create a destination persist session; 'use-dst-ip-for-src-persist': Use the destination IP to
     * create source IP persist session;
     */
    persistType?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    pool?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    poolShared?: pulumi.Input<string>;
    /**
     * Port
     */
    portNumber?: pulumi.Input<number>;
    /**
     * Enable port translation under no-dest-nat
     */
    portTranslation?: pulumi.Input<number>;
    /**
     * Set auto NAT pool as higher precedence for source NAT
     */
    precedence?: pulumi.Input<number>;
    /**
     * 'tcp': TCP LB service; 'udp': UDP Port; 'others': for no tcp/udp protocol, do IP load balancing; 'diameter': diameter
     * port; 'dns-tcp': DNS service over TCP; 'dns-udp': DNS service over UDP; 'fast-http': Fast HTTP Port; 'fix': FIX Port;
     * 'ftp': File Transfer Protocol Port; 'ftp-proxy': ftp proxy port; 'http': HTTP Port; 'https': HTTPS port; 'imap': imap
     * proxy port; 'mlb': Message based load balancing; 'mms': Microsoft Multimedia Service Port; 'mysql': mssql port; 'mssql':
     * mssql; 'pop3': pop3 proxy port; 'radius': RADIUS Port; 'rtsp': Real Time Streaming Protocol Port; 'sip': Session
     * initiation protocol over UDP; 'sip-tcp': Session initiation protocol over TCP; 'sips': Session initiation protocol over
     * TLS; 'smpp-tcp': SMPP service over TCP; 'spdy': spdy port; 'spdys': spdys port; 'smtp': SMTP Port; 'mqtt': MQTT Port;
     * 'mqtts': MQTTS Port; 'ssl-proxy': Generic SSL proxy; 'ssli': SSL insight; 'ssh': SSH Port; 'tcp-proxy': Generic TCP
     * proxy; 'tftp': TFTP Port; 'fast-fix': Fast FIX port; 'http-over-quic': HTTP3-over-quic port;
     */
    protocol?: pulumi.Input<string>;
    /**
     * 'v1': Force using old proxy; 'v2': Force using new proxy;
     */
    proxyLayer?: pulumi.Input<string>;
    /**
     * Virtual Port range (Virtual Port range value)
     */
    range?: pulumi.Input<number>;
    /**
     * Specify the log message rate
     */
    rate?: pulumi.Input<number>;
    /**
     * Redirect HTTP to HTTPS
     */
    redirectToHttps?: pulumi.Input<number>;
    /**
     * Reply ACME http-01 challenge. This option only takes effect in HTTP port 80
     */
    replyAcmeChallenge?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when L7 request fail
     */
    reqFail?: pulumi.Input<number>;
    /**
     * 'disable': disable;
     */
    reselection?: pulumi.Input<string>;
    /**
     * Send client reset when connection number over limit
     */
    reset?: pulumi.Input<number>;
    /**
     * Send client reset when server selection fails
     */
    resetOnServerSelectionFail?: pulumi.Input<number>;
    /**
     * Web Category List name
     */
    resolveWebCatList?: pulumi.Input<string>;
    /**
     * rtp traffic try to match the real server of sip smp call-id session
     */
    rtpSipCallIdMatch?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortSamplingEnable>[]>;
    /**
     * Specify the interval in seconds
     */
    secs?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when server selection failure
     */
    servSelFail?: pulumi.Input<number>;
    /**
     * Bind a use-rcv-hop-for-resp Server Group to this Virtual Server (Server Group Name)
     */
    serverGroup?: pulumi.Input<string>;
    /**
     * Bind a Service Group to this Virtual Server (Service Group Name)
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * Reference a Cache template from shared partition
     */
    sharedPartitionCacheTemplate?: pulumi.Input<number>;
    /**
     * Reference a Client SSL template from shared partition
     */
    sharedPartitionClientSslTemplate?: pulumi.Input<number>;
    /**
     * Reference a connection reuse template from shared partition
     */
    sharedPartitionConnectionReuseTemplate?: pulumi.Input<number>;
    /**
     * Reference a dblb template from shared partition
     */
    sharedPartitionDblbTemplate?: pulumi.Input<number>;
    /**
     * Reference a Diameter template from shared partition
     */
    sharedPartitionDiameterTemplate?: pulumi.Input<number>;
    /**
     * Reference a dns template from shared partition
     */
    sharedPartitionDnsTemplate?: pulumi.Input<number>;
    /**
     * Reference a DNS over HTTP(s) template from shared partition
     */
    sharedPartitionDohTemplate?: pulumi.Input<number>;
    /**
     * Reference a dynamic service template from shared partition
     */
    sharedPartitionDynamicServiceTemplate?: pulumi.Input<number>;
    /**
     * Reference a external service template from shared partition
     */
    sharedPartitionExternalServiceTemplate?: pulumi.Input<number>;
    /**
     * Reference a FIX template from shared partition
     */
    sharedPartitionFixTemplate?: pulumi.Input<number>;
    /**
     * Reference a http policy template from shared partition
     */
    sharedPartitionHttpPolicyTemplate?: pulumi.Input<number>;
    /**
     * Reference a HTTP template from shared partition
     */
    sharedPartitionHttpTemplate?: pulumi.Input<number>;
    /**
     * Reference a IMAP/POP3 template from shared partition
     */
    sharedPartitionImapPop3Template?: pulumi.Input<number>;
    /**
     * Reference a persist cookie template from shared partition
     */
    sharedPartitionPersistCookieTemplate?: pulumi.Input<number>;
    /**
     * Reference a persist destination ip template from shared partition
     */
    sharedPartitionPersistDestinationIpTemplate?: pulumi.Input<number>;
    /**
     * Reference a persist source ip template from shared partition
     */
    sharedPartitionPersistSourceIpTemplate?: pulumi.Input<number>;
    /**
     * Reference a persist SSL SID template from shared partition
     */
    sharedPartitionPersistSslSidTemplate?: pulumi.Input<number>;
    /**
     * Reference a policy template from shared partition
     */
    sharedPartitionPolicyTemplate?: pulumi.Input<number>;
    /**
     * Specify NAT pool or pool group from shared partition
     */
    sharedPartitionPool?: pulumi.Input<number>;
    /**
     * Reference a QUIC template from shared partition
     */
    sharedPartitionQuicTemplate?: pulumi.Input<number>;
    /**
     * Reference a SSL Server template from shared partition
     */
    sharedPartitionServerSslTemplate?: pulumi.Input<number>;
    /**
     * Reference a smpp template from shared partition
     */
    sharedPartitionSmppTemplate?: pulumi.Input<number>;
    /**
     * Reference a SMTP template from shared partition
     */
    sharedPartitionSmtpTemplate?: pulumi.Input<number>;
    /**
     * Reference a tcp template from shared partition
     */
    sharedPartitionTcp?: pulumi.Input<number>;
    /**
     * Reference a TCP Proxy template from shared partition
     */
    sharedPartitionTcpProxyTemplate?: pulumi.Input<number>;
    /**
     * Reference a UDP template from shared partition
     */
    sharedPartitionUdp?: pulumi.Input<number>;
    /**
     * Reference a Virtual Port template from shared partition
     */
    sharedPartitionVirtualPortTemplate?: pulumi.Input<number>;
    /**
     * Enable print extended stats in showtech
     */
    showtechPrintExtendedStats?: pulumi.Input<number>;
    /**
     * Skip rev tuple hash insertion
     */
    skipRevHash?: pulumi.Input<number>;
    /**
     * Enable source NAT traffic against VIP
     */
    snatOnVip?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for virtual port; 'stats-data-disable': Disable statistical data
     * collection for virtual port;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Substitute Source MAC Address to that of the outgoing interface
     */
    substituteSourceMac?: pulumi.Input<number>;
    /**
     * Support HTTP2
     */
    supportHttp2?: pulumi.Input<number>;
    /**
     * Enable syn-cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * RAM caching template (Cache Template Name)
     */
    templateCache?: pulumi.Input<string>;
    /**
     * Cache Template Name
     */
    templateCacheShared?: pulumi.Input<string>;
    /**
     * Client SSH Template (Client SSH Config Name)
     */
    templateClientSsh?: pulumi.Input<string>;
    /**
     * Client SSL Template Name
     */
    templateClientSsl?: pulumi.Input<string>;
    /**
     * Client SSL Template Name
     */
    templateClientSslShared?: pulumi.Input<string>;
    /**
     * Connection Reuse Template (Connection Reuse Template Name)
     */
    templateConnectionReuse?: pulumi.Input<string>;
    /**
     * Connection Reuse Template Name
     */
    templateConnectionReuseShared?: pulumi.Input<string>;
    /**
     * DBLB Template (DBLB template name)
     */
    templateDblb?: pulumi.Input<string>;
    /**
     * DBLB Template Name
     */
    templateDblbShared?: pulumi.Input<string>;
    /**
     * Diameter Template (diameter template name)
     */
    templateDiameter?: pulumi.Input<string>;
    /**
     * Diameter Template Name
     */
    templateDiameterShared?: pulumi.Input<string>;
    /**
     * DNS template (DNS template name)
     */
    templateDns?: pulumi.Input<string>;
    /**
     * DNS Template Name
     */
    templateDnsShared?: pulumi.Input<string>;
    /**
     * DNS over HTTP(s) Template Name
     */
    templateDoh?: pulumi.Input<string>;
    /**
     * DNS over HTTP(s) Template Name
     */
    templateDohShared?: pulumi.Input<string>;
    /**
     * Dynamic Service Template (dynamic-service template name)
     */
    templateDynamicService?: pulumi.Input<string>;
    /**
     * Dynamic Service Template Name
     */
    templateDynamicServiceShared?: pulumi.Input<string>;
    /**
     * External service template (external-service template name)
     */
    templateExternalService?: pulumi.Input<string>;
    /**
     * External Service Template Name
     */
    templateExternalServiceShared?: pulumi.Input<string>;
    /**
     * FIX template (FIX Template Name)
     */
    templateFix?: pulumi.Input<string>;
    /**
     * FIX Template Name
     */
    templateFixShared?: pulumi.Input<string>;
    /**
     * FTP port template (Ftp template name)
     */
    templateFtp?: pulumi.Input<string>;
    /**
     * HTTP Template Name
     */
    templateHttp?: pulumi.Input<string>;
    /**
     * http-policy template (http-policy template name)
     */
    templateHttpPolicy?: pulumi.Input<string>;
    /**
     * Http Policy Template Name
     */
    templateHttpPolicyShared?: pulumi.Input<string>;
    /**
     * HTTP Template Name
     */
    templateHttpShared?: pulumi.Input<string>;
    /**
     * IMAP/POP3 Template (IMAP/POP3 Config Name)
     */
    templateImapPop3?: pulumi.Input<string>;
    /**
     * IMAP/POP3 Template Name
     */
    templateImapPop3Shared?: pulumi.Input<string>;
    /**
     * MQTT Template (MQTT Config Name)
     */
    templateMqtt?: pulumi.Input<string>;
    /**
     * Cookie persistence (Cookie persistence template name)
     */
    templatePersistCookie?: pulumi.Input<string>;
    /**
     * Cookie Persistence Template Name
     */
    templatePersistCookieShared?: pulumi.Input<string>;
    /**
     * Destination IP persistence (Destination IP persistence template name)
     */
    templatePersistDestinationIp?: pulumi.Input<string>;
    /**
     * Destination IP Persistence Template Name
     */
    templatePersistDestinationIpShared?: pulumi.Input<string>;
    /**
     * Source IP persistence (Source IP persistence template name)
     */
    templatePersistSourceIp?: pulumi.Input<string>;
    /**
     * Source IP Persistence Template Name
     */
    templatePersistSourceIpShared?: pulumi.Input<string>;
    /**
     * SSL SID persistence (SSL SID persistence template name)
     */
    templatePersistSslSid?: pulumi.Input<string>;
    /**
     * SSL SID Persistence Template Name
     */
    templatePersistSslSidShared?: pulumi.Input<string>;
    /**
     * Policy Template (Policy template name)
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Policy Template Name
     */
    templatePolicyShared?: pulumi.Input<string>;
    /**
     * QUIC Template Name
     */
    templateQuic?: pulumi.Input<string>;
    /**
     * QUIC Config Client (QUIC Config name)
     */
    templateQuicClient?: pulumi.Input<string>;
    /**
     * QUIC Config Server (QUIC Config name)
     */
    templateQuicServer?: pulumi.Input<string>;
    /**
     * QUIC Template name
     */
    templateQuicShared?: pulumi.Input<string>;
    /**
     * RAM caching template (Cache Template Name)
     */
    templateRamCache?: pulumi.Input<string>;
    /**
     * ICAP reqmod template (reqmod-icap template name)
     */
    templateReqmodIcap?: pulumi.Input<string>;
    /**
     * ICAP respmod service template (respmod-icap template name)
     */
    templateRespmodIcap?: pulumi.Input<string>;
    /**
     * Scaleout template (Scaleout template name)
     */
    templateScaleout?: pulumi.Input<string>;
    /**
     * Server SSH Template (Server SSH Config Name)
     */
    templateServerSsh?: pulumi.Input<string>;
    /**
     * Server Side SSL Template Name
     */
    templateServerSsl?: pulumi.Input<string>;
    /**
     * Server SSL Template Name
     */
    templateServerSslShared?: pulumi.Input<string>;
    /**
     * SIP Template Name
     */
    templateSip?: pulumi.Input<string>;
    /**
     * SIP template
     */
    templateSipShared?: pulumi.Input<string>;
    /**
     * SMPP template
     */
    templateSmpp?: pulumi.Input<string>;
    /**
     * SMPP Template Name
     */
    templateSmppShared?: pulumi.Input<string>;
    /**
     * SMTP Template (SMTP Config Name)
     */
    templateSmtp?: pulumi.Input<string>;
    /**
     * SMTP Template Name
     */
    templateSmtpShared?: pulumi.Input<string>;
    /**
     * SSLi template (SSLi Template Name)
     */
    templateSsli?: pulumi.Input<string>;
    /**
     * TCP Template Name
     */
    templateTcp?: pulumi.Input<string>;
    /**
     * TCP Proxy Template Name
     */
    templateTcpProxy?: pulumi.Input<string>;
    /**
     * TCP Proxy Config Client (TCP Proxy Config name)
     */
    templateTcpProxyClient?: pulumi.Input<string>;
    /**
     * TCP Proxy Config Server (TCP Proxy Config name)
     */
    templateTcpProxyServer?: pulumi.Input<string>;
    /**
     * TCP Proxy Template name
     */
    templateTcpProxyShared?: pulumi.Input<string>;
    /**
     * TCP Template Name
     */
    templateTcpShared?: pulumi.Input<string>;
    /**
     * L4 UDP Template
     */
    templateUdp?: pulumi.Input<string>;
    /**
     * UDP Template Name
     */
    templateUdpShared?: pulumi.Input<string>;
    /**
     * Virtual port template (Virtual port template name)
     */
    templateVirtualPort?: pulumi.Input<string>;
    /**
     * Virtual Port Template Name
     */
    templateVirtualPortShared?: pulumi.Input<string>;
    /**
     * Trunk interface number
     */
    trunkFwd?: pulumi.Input<number>;
    /**
     * Trunk interface number
     */
    trunkRev?: pulumi.Input<number>;
    /**
     * Use alternate virtual port
     */
    useAlternatePort?: pulumi.Input<number>;
    /**
     * Follow CGNv6 source NAT configuration
     */
    useCgnv6?: pulumi.Input<number>;
    /**
     * Use default forwarding if server selection failed
     */
    useDefaultIfNoServer?: pulumi.Input<number>;
    /**
     * Use receive hop for response to client(For packets on default-vlan, also config "vlan-global
     * enable-def-vlan-l2-forwarding".)
     */
    useRcvHopForResp?: pulumi.Input<number>;
    /**
     * Set use-rcv-hop group
     */
    useRcvHopGroup?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify a GSLB View (ID)
     */
    view?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when down
     */
    whenDown?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when down
     */
    whenDownProtocol2?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbVirtualServerPort resource.
 */
export interface SlbVirtualServerPortArgs {
    aclLists?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortAclList>[]>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    aflexScripts?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortAflexScript>[]>;
    /**
     * Disable aFlex entry sync for this port
     */
    aflexTableEntrySynDisable?: pulumi.Input<number>;
    /**
     * Enable aFlex entry sync for this port
     */
    aflexTableEntrySynEnable?: pulumi.Input<number>;
    /**
     * 'http': HTTP Port;
     */
    altProtocol1?: pulumi.Input<string>;
    /**
     * 'tcp': TCP LB service;
     */
    altProtocol2?: pulumi.Input<string>;
    /**
     * Alternate Virtual Port
     */
    alternatePort?: pulumi.Input<number>;
    /**
     * Virtual Port
     */
    alternatePortNumber?: pulumi.Input<number>;
    /**
     * Enable analytics
     */
    attackDetection?: pulumi.Input<number>;
    authCfg?: pulumi.Input<inputs.SlbVirtualServerPortAuthCfg>;
    /**
     * Configure auto NAT for the vport
     */
    auto?: pulumi.Input<number>;
    /**
     * Prefer to use same source NAT address for a client
     */
    clientipStickyNat?: pulumi.Input<number>;
    /**
     * Connection Limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * enable cpu compute on virtual port
     */
    cpuCompute?: pulumi.Input<number>;
    /**
     * 'def-selection-if-pref-failed': Use default server selection method if prefer method failed;
     * 'def-selection-if-pref-failed-disable': Stop using default server selection method if prefer method failed;
     */
    defSelectionIfPrefFailed?: pulumi.Input<string>;
    /**
     * Enable playerid checks on UDP packets once the AX is in active mode
     */
    enablePlayeridCheck?: pulumi.Input<number>;
    enableScaleout?: pulumi.Input<number>;
    /**
     * Ethernet interface number
     */
    ethFwd?: pulumi.Input<number>;
    /**
     * Ethernet interface number
     */
    ethRev?: pulumi.Input<number>;
    /**
     * expand syn-cookie with timestamp and wscale
     */
    expand?: pulumi.Input<number>;
    /**
     * Enable extended statistics on virtual port
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * 'force': Force fast path in SLB processing; 'disable': Disable fast path in SLB processing;
     */
    fastPath?: pulumi.Input<string>;
    /**
     * Force routing mode
     */
    forceRoutingMode?: pulumi.Input<number>;
    /**
     * Enable Global Server Load Balancing
     */
    gslbEnable?: pulumi.Input<number>;
    /**
     * Enable GTP Session Load Balancing
     */
    gtpSessionLb?: pulumi.Input<number>;
    /**
     * Enable for HA Conn sync
     */
    haConnMirror?: pulumi.Input<number>;
    /**
     * Ignore global substitute-source-mac
     */
    ignoreGlobal?: pulumi.Input<number>;
    /**
     * Enter name of IP Map List to be bound (IP Map List Name)
     */
    ipMapList?: pulumi.Input<string>;
    /**
     * Enable IP-Only LB mode
     */
    ipOnlyLb?: pulumi.Input<number>;
    /**
     * Use IP address round-robin behavior
     */
    ipSmartRr?: pulumi.Input<number>;
    /**
     * Enable IP in IP
     */
    ipinip?: pulumi.Input<number>;
    /**
     * FPGA assist L7 packet parsing
     */
    l7HardwareAssist?: pulumi.Input<number>;
    l7ServiceChain?: pulumi.Input<number>;
    /**
     * enable dynamic memory compute on virtual port
     */
    memoryCompute?: pulumi.Input<number>;
    /**
     * Message switching
     */
    messageSwitching?: pulumi.Input<number>;
    /**
     * SLB Virtual Service Name
     */
    name?: pulumi.Input<string>;
    /**
     * Next-gen WAF
     */
    ngWaf?: pulumi.Input<number>;
    /**
     * Don't automatically mark vport up when aFleX is bound
     */
    noAutoUpOnAflex?: pulumi.Input<number>;
    /**
     * Disable destination NAT, this option only supports in wildcard VIP or when a connection is operated in SSLi + EP mode
     */
    noDestNat?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    noLogging?: pulumi.Input<number>;
    /**
     * Enable for HA Conn sync for l4 tcp sessions on SYN
     */
    onSyn?: pulumi.Input<number>;
    /**
     * Support server that allow only one connection
     */
    oneServerConn?: pulumi.Input<number>;
    /**
     * '0': No optimization; '1': Optimization level 1 (Experimental);
     */
    optimizationLevel?: pulumi.Input<string>;
    /**
     * SIP Template Name
     */
    pTemplateSipShared?: pulumi.Input<number>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * 'src-dst-ip-swap-persist': Create persist session after source IP and destination IP swap; 'use-src-ip-for-dst-persist':
     * Use the source IP to create a destination persist session; 'use-dst-ip-for-src-persist': Use the destination IP to
     * create source IP persist session;
     */
    persistType?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    pool?: pulumi.Input<string>;
    /**
     * Specify NAT pool or pool group
     */
    poolShared?: pulumi.Input<string>;
    /**
     * Port
     */
    portNumber: pulumi.Input<number>;
    /**
     * Enable port translation under no-dest-nat
     */
    portTranslation?: pulumi.Input<number>;
    /**
     * Set auto NAT pool as higher precedence for source NAT
     */
    precedence?: pulumi.Input<number>;
    /**
     * 'tcp': TCP LB service; 'udp': UDP Port; 'others': for no tcp/udp protocol, do IP load balancing; 'diameter': diameter
     * port; 'dns-tcp': DNS service over TCP; 'dns-udp': DNS service over UDP; 'fast-http': Fast HTTP Port; 'fix': FIX Port;
     * 'ftp': File Transfer Protocol Port; 'ftp-proxy': ftp proxy port; 'http': HTTP Port; 'https': HTTPS port; 'imap': imap
     * proxy port; 'mlb': Message based load balancing; 'mms': Microsoft Multimedia Service Port; 'mysql': mssql port; 'mssql':
     * mssql; 'pop3': pop3 proxy port; 'radius': RADIUS Port; 'rtsp': Real Time Streaming Protocol Port; 'sip': Session
     * initiation protocol over UDP; 'sip-tcp': Session initiation protocol over TCP; 'sips': Session initiation protocol over
     * TLS; 'smpp-tcp': SMPP service over TCP; 'spdy': spdy port; 'spdys': spdys port; 'smtp': SMTP Port; 'mqtt': MQTT Port;
     * 'mqtts': MQTTS Port; 'ssl-proxy': Generic SSL proxy; 'ssli': SSL insight; 'ssh': SSH Port; 'tcp-proxy': Generic TCP
     * proxy; 'tftp': TFTP Port; 'fast-fix': Fast FIX port; 'http-over-quic': HTTP3-over-quic port;
     */
    protocol: pulumi.Input<string>;
    /**
     * 'v1': Force using old proxy; 'v2': Force using new proxy;
     */
    proxyLayer?: pulumi.Input<string>;
    /**
     * Virtual Port range (Virtual Port range value)
     */
    range?: pulumi.Input<number>;
    /**
     * Specify the log message rate
     */
    rate?: pulumi.Input<number>;
    /**
     * Redirect HTTP to HTTPS
     */
    redirectToHttps?: pulumi.Input<number>;
    /**
     * Reply ACME http-01 challenge. This option only takes effect in HTTP port 80
     */
    replyAcmeChallenge?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when L7 request fail
     */
    reqFail?: pulumi.Input<number>;
    /**
     * 'disable': disable;
     */
    reselection?: pulumi.Input<string>;
    /**
     * Send client reset when connection number over limit
     */
    reset?: pulumi.Input<number>;
    /**
     * Send client reset when server selection fails
     */
    resetOnServerSelectionFail?: pulumi.Input<number>;
    /**
     * Web Category List name
     */
    resolveWebCatList?: pulumi.Input<string>;
    /**
     * rtp traffic try to match the real server of sip smp call-id session
     */
    rtpSipCallIdMatch?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbVirtualServerPortSamplingEnable>[]>;
    /**
     * Specify the interval in seconds
     */
    secs?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when server selection failure
     */
    servSelFail?: pulumi.Input<number>;
    /**
     * Bind a use-rcv-hop-for-resp Server Group to this Virtual Server (Server Group Name)
     */
    serverGroup?: pulumi.Input<string>;
    /**
     * Bind a Service Group to this Virtual Server (Service Group Name)
     */
    serviceGroup?: pulumi.Input<string>;
    /**
     * Reference a Cache template from shared partition
     */
    sharedPartitionCacheTemplate?: pulumi.Input<number>;
    /**
     * Reference a Client SSL template from shared partition
     */
    sharedPartitionClientSslTemplate?: pulumi.Input<number>;
    /**
     * Reference a connection reuse template from shared partition
     */
    sharedPartitionConnectionReuseTemplate?: pulumi.Input<number>;
    /**
     * Reference a dblb template from shared partition
     */
    sharedPartitionDblbTemplate?: pulumi.Input<number>;
    /**
     * Reference a Diameter template from shared partition
     */
    sharedPartitionDiameterTemplate?: pulumi.Input<number>;
    /**
     * Reference a dns template from shared partition
     */
    sharedPartitionDnsTemplate?: pulumi.Input<number>;
    /**
     * Reference a DNS over HTTP(s) template from shared partition
     */
    sharedPartitionDohTemplate?: pulumi.Input<number>;
    /**
     * Reference a dynamic service template from shared partition
     */
    sharedPartitionDynamicServiceTemplate?: pulumi.Input<number>;
    /**
     * Reference a external service template from shared partition
     */
    sharedPartitionExternalServiceTemplate?: pulumi.Input<number>;
    /**
     * Reference a FIX template from shared partition
     */
    sharedPartitionFixTemplate?: pulumi.Input<number>;
    /**
     * Reference a http policy template from shared partition
     */
    sharedPartitionHttpPolicyTemplate?: pulumi.Input<number>;
    /**
     * Reference a HTTP template from shared partition
     */
    sharedPartitionHttpTemplate?: pulumi.Input<number>;
    /**
     * Reference a IMAP/POP3 template from shared partition
     */
    sharedPartitionImapPop3Template?: pulumi.Input<number>;
    /**
     * Reference a persist cookie template from shared partition
     */
    sharedPartitionPersistCookieTemplate?: pulumi.Input<number>;
    /**
     * Reference a persist destination ip template from shared partition
     */
    sharedPartitionPersistDestinationIpTemplate?: pulumi.Input<number>;
    /**
     * Reference a persist source ip template from shared partition
     */
    sharedPartitionPersistSourceIpTemplate?: pulumi.Input<number>;
    /**
     * Reference a persist SSL SID template from shared partition
     */
    sharedPartitionPersistSslSidTemplate?: pulumi.Input<number>;
    /**
     * Reference a policy template from shared partition
     */
    sharedPartitionPolicyTemplate?: pulumi.Input<number>;
    /**
     * Specify NAT pool or pool group from shared partition
     */
    sharedPartitionPool?: pulumi.Input<number>;
    /**
     * Reference a QUIC template from shared partition
     */
    sharedPartitionQuicTemplate?: pulumi.Input<number>;
    /**
     * Reference a SSL Server template from shared partition
     */
    sharedPartitionServerSslTemplate?: pulumi.Input<number>;
    /**
     * Reference a smpp template from shared partition
     */
    sharedPartitionSmppTemplate?: pulumi.Input<number>;
    /**
     * Reference a SMTP template from shared partition
     */
    sharedPartitionSmtpTemplate?: pulumi.Input<number>;
    /**
     * Reference a tcp template from shared partition
     */
    sharedPartitionTcp?: pulumi.Input<number>;
    /**
     * Reference a TCP Proxy template from shared partition
     */
    sharedPartitionTcpProxyTemplate?: pulumi.Input<number>;
    /**
     * Reference a UDP template from shared partition
     */
    sharedPartitionUdp?: pulumi.Input<number>;
    /**
     * Reference a Virtual Port template from shared partition
     */
    sharedPartitionVirtualPortTemplate?: pulumi.Input<number>;
    /**
     * Enable print extended stats in showtech
     */
    showtechPrintExtendedStats?: pulumi.Input<number>;
    /**
     * Skip rev tuple hash insertion
     */
    skipRevHash?: pulumi.Input<number>;
    /**
     * Enable source NAT traffic against VIP
     */
    snatOnVip?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for virtual port; 'stats-data-disable': Disable statistical data
     * collection for virtual port;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Substitute Source MAC Address to that of the outgoing interface
     */
    substituteSourceMac?: pulumi.Input<number>;
    /**
     * Support HTTP2
     */
    supportHttp2?: pulumi.Input<number>;
    /**
     * Enable syn-cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * RAM caching template (Cache Template Name)
     */
    templateCache?: pulumi.Input<string>;
    /**
     * Cache Template Name
     */
    templateCacheShared?: pulumi.Input<string>;
    /**
     * Client SSH Template (Client SSH Config Name)
     */
    templateClientSsh?: pulumi.Input<string>;
    /**
     * Client SSL Template Name
     */
    templateClientSsl?: pulumi.Input<string>;
    /**
     * Client SSL Template Name
     */
    templateClientSslShared?: pulumi.Input<string>;
    /**
     * Connection Reuse Template (Connection Reuse Template Name)
     */
    templateConnectionReuse?: pulumi.Input<string>;
    /**
     * Connection Reuse Template Name
     */
    templateConnectionReuseShared?: pulumi.Input<string>;
    /**
     * DBLB Template (DBLB template name)
     */
    templateDblb?: pulumi.Input<string>;
    /**
     * DBLB Template Name
     */
    templateDblbShared?: pulumi.Input<string>;
    /**
     * Diameter Template (diameter template name)
     */
    templateDiameter?: pulumi.Input<string>;
    /**
     * Diameter Template Name
     */
    templateDiameterShared?: pulumi.Input<string>;
    /**
     * DNS template (DNS template name)
     */
    templateDns?: pulumi.Input<string>;
    /**
     * DNS Template Name
     */
    templateDnsShared?: pulumi.Input<string>;
    /**
     * DNS over HTTP(s) Template Name
     */
    templateDoh?: pulumi.Input<string>;
    /**
     * DNS over HTTP(s) Template Name
     */
    templateDohShared?: pulumi.Input<string>;
    /**
     * Dynamic Service Template (dynamic-service template name)
     */
    templateDynamicService?: pulumi.Input<string>;
    /**
     * Dynamic Service Template Name
     */
    templateDynamicServiceShared?: pulumi.Input<string>;
    /**
     * External service template (external-service template name)
     */
    templateExternalService?: pulumi.Input<string>;
    /**
     * External Service Template Name
     */
    templateExternalServiceShared?: pulumi.Input<string>;
    /**
     * FIX template (FIX Template Name)
     */
    templateFix?: pulumi.Input<string>;
    /**
     * FIX Template Name
     */
    templateFixShared?: pulumi.Input<string>;
    /**
     * FTP port template (Ftp template name)
     */
    templateFtp?: pulumi.Input<string>;
    /**
     * HTTP Template Name
     */
    templateHttp?: pulumi.Input<string>;
    /**
     * http-policy template (http-policy template name)
     */
    templateHttpPolicy?: pulumi.Input<string>;
    /**
     * Http Policy Template Name
     */
    templateHttpPolicyShared?: pulumi.Input<string>;
    /**
     * HTTP Template Name
     */
    templateHttpShared?: pulumi.Input<string>;
    /**
     * IMAP/POP3 Template (IMAP/POP3 Config Name)
     */
    templateImapPop3?: pulumi.Input<string>;
    /**
     * IMAP/POP3 Template Name
     */
    templateImapPop3Shared?: pulumi.Input<string>;
    /**
     * MQTT Template (MQTT Config Name)
     */
    templateMqtt?: pulumi.Input<string>;
    /**
     * Cookie persistence (Cookie persistence template name)
     */
    templatePersistCookie?: pulumi.Input<string>;
    /**
     * Cookie Persistence Template Name
     */
    templatePersistCookieShared?: pulumi.Input<string>;
    /**
     * Destination IP persistence (Destination IP persistence template name)
     */
    templatePersistDestinationIp?: pulumi.Input<string>;
    /**
     * Destination IP Persistence Template Name
     */
    templatePersistDestinationIpShared?: pulumi.Input<string>;
    /**
     * Source IP persistence (Source IP persistence template name)
     */
    templatePersistSourceIp?: pulumi.Input<string>;
    /**
     * Source IP Persistence Template Name
     */
    templatePersistSourceIpShared?: pulumi.Input<string>;
    /**
     * SSL SID persistence (SSL SID persistence template name)
     */
    templatePersistSslSid?: pulumi.Input<string>;
    /**
     * SSL SID Persistence Template Name
     */
    templatePersistSslSidShared?: pulumi.Input<string>;
    /**
     * Policy Template (Policy template name)
     */
    templatePolicy?: pulumi.Input<string>;
    /**
     * Policy Template Name
     */
    templatePolicyShared?: pulumi.Input<string>;
    /**
     * QUIC Template Name
     */
    templateQuic?: pulumi.Input<string>;
    /**
     * QUIC Config Client (QUIC Config name)
     */
    templateQuicClient?: pulumi.Input<string>;
    /**
     * QUIC Config Server (QUIC Config name)
     */
    templateQuicServer?: pulumi.Input<string>;
    /**
     * QUIC Template name
     */
    templateQuicShared?: pulumi.Input<string>;
    /**
     * RAM caching template (Cache Template Name)
     */
    templateRamCache?: pulumi.Input<string>;
    /**
     * ICAP reqmod template (reqmod-icap template name)
     */
    templateReqmodIcap?: pulumi.Input<string>;
    /**
     * ICAP respmod service template (respmod-icap template name)
     */
    templateRespmodIcap?: pulumi.Input<string>;
    /**
     * Scaleout template (Scaleout template name)
     */
    templateScaleout?: pulumi.Input<string>;
    /**
     * Server SSH Template (Server SSH Config Name)
     */
    templateServerSsh?: pulumi.Input<string>;
    /**
     * Server Side SSL Template Name
     */
    templateServerSsl?: pulumi.Input<string>;
    /**
     * Server SSL Template Name
     */
    templateServerSslShared?: pulumi.Input<string>;
    /**
     * SIP Template Name
     */
    templateSip?: pulumi.Input<string>;
    /**
     * SIP template
     */
    templateSipShared?: pulumi.Input<string>;
    /**
     * SMPP template
     */
    templateSmpp?: pulumi.Input<string>;
    /**
     * SMPP Template Name
     */
    templateSmppShared?: pulumi.Input<string>;
    /**
     * SMTP Template (SMTP Config Name)
     */
    templateSmtp?: pulumi.Input<string>;
    /**
     * SMTP Template Name
     */
    templateSmtpShared?: pulumi.Input<string>;
    /**
     * SSLi template (SSLi Template Name)
     */
    templateSsli?: pulumi.Input<string>;
    /**
     * TCP Template Name
     */
    templateTcp?: pulumi.Input<string>;
    /**
     * TCP Proxy Template Name
     */
    templateTcpProxy?: pulumi.Input<string>;
    /**
     * TCP Proxy Config Client (TCP Proxy Config name)
     */
    templateTcpProxyClient?: pulumi.Input<string>;
    /**
     * TCP Proxy Config Server (TCP Proxy Config name)
     */
    templateTcpProxyServer?: pulumi.Input<string>;
    /**
     * TCP Proxy Template name
     */
    templateTcpProxyShared?: pulumi.Input<string>;
    /**
     * TCP Template Name
     */
    templateTcpShared?: pulumi.Input<string>;
    /**
     * L4 UDP Template
     */
    templateUdp?: pulumi.Input<string>;
    /**
     * UDP Template Name
     */
    templateUdpShared?: pulumi.Input<string>;
    /**
     * Virtual port template (Virtual port template name)
     */
    templateVirtualPort?: pulumi.Input<string>;
    /**
     * Virtual Port Template Name
     */
    templateVirtualPortShared?: pulumi.Input<string>;
    /**
     * Trunk interface number
     */
    trunkFwd?: pulumi.Input<number>;
    /**
     * Trunk interface number
     */
    trunkRev?: pulumi.Input<number>;
    /**
     * Use alternate virtual port
     */
    useAlternatePort?: pulumi.Input<number>;
    /**
     * Follow CGNv6 source NAT configuration
     */
    useCgnv6?: pulumi.Input<number>;
    /**
     * Use default forwarding if server selection failed
     */
    useDefaultIfNoServer?: pulumi.Input<number>;
    /**
     * Use receive hop for response to client(For packets on default-vlan, also config "vlan-global
     * enable-def-vlan-l2-forwarding".)
     */
    useRcvHopForResp?: pulumi.Input<number>;
    /**
     * Set use-rcv-hop group
     */
    useRcvHopGroup?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify a GSLB View (ID)
     */
    view?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when down
     */
    whenDown?: pulumi.Input<number>;
    /**
     * Use alternate virtual port when down
     */
    whenDownProtocol2?: pulumi.Input<number>;
}
