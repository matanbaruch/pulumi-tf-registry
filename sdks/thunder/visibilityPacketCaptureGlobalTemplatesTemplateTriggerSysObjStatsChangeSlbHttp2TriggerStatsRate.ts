// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateState, opts?: pulumi.CustomResourceOptions): VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate {
        return new VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate:VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate';

    /**
     * Returns true if the given object is an instance of VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate.__pulumiType;
    }

    /**
     * Enable automatic packet-capture for Alloc Fail - Total
     */
    public readonly allocFailTotal!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Bad Connection Preface
     */
    public readonly badConnectionPreface!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Bad frame type for stream state
     */
    public readonly badFrameTypeForStreamState!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Buff alloc error
     */
    public readonly buffAllocError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for cancel
     */
    public readonly cancel!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Cant allocate control frame
     */
    public readonly cantAllocateControlFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Cant allocate GOAWAY frame
     */
    public readonly cantAllocateGoawayFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Cant allocate PING frame
     */
    public readonly cantAllocatePingFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Cant allocate RST_STREAM frame
     */
    public readonly cantAllocateRstFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Cant allocate SETTINGS frame
     */
    public readonly cantAllocateSettingsFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Cant allocate stream
     */
    public readonly cantAllocateStream!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Cant allocate WINDOW_UPDATE frame
     */
    public readonly cantAllocateWindowFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in closed state
     */
    public readonly closedStateUnexpectedFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for compression error
     */
    public readonly compressionError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for connect error
     */
    public readonly connectError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for CONTINUATION frame with no headers frame
     */
    public readonly continuationBeforeHeaders!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for DATA Frame Rcvd on non-existent stream
     */
    public readonly dataNoStream!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Data Queue Alloc Error
     */
    public readonly dataQueueAllocError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for deflate alloc fail
     */
    public readonly deflateAllocFail!: pulumi.Output<number | undefined>;
    /**
     * Time in seconds to look for the anomaly, default is 60
     */
    public readonly duration!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for enhance your calm error
     */
    public readonly enhanceYourCalm!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Rcvd - Total
     */
    public readonly errRcvdTotal!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - CANCEL
     */
    public readonly errSentCancel!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - COMPRESSION_ERROR
     */
    public readonly errSentCompressionErr!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - CONNECT_ERROR
     */
    public readonly errSentConnectErr!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - FLOW_CONTROL_ERROR
     */
    public readonly errSentFlowControl!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - FRAME_SIZE_ERROR
     */
    public readonly errSentFrameSizeErr!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - HTTP_1_1_REQUIRED
     */
    public readonly errSentHttp11Required!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - INADEQUATE_SECURITY
     */
    public readonly errSentInadequateSecurity!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - INTERNAL_ERROR
     */
    public readonly errSentInternalErr!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - PROTOCOL_ERROR
     */
    public readonly errSentProtoErr!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - REFUSED_STREAM
     */
    public readonly errSentRefusedStream!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - SETTINGS_TIMEOUT
     */
    public readonly errSentSettingTimeout!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - STREAM_CLOSED
     */
    public readonly errSentStreamClosed!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Rent - Total
     */
    public readonly errSentTotal!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Error Sent - ENHANCE_YOUR_CALM
     */
    public readonly errSentYourCalm!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Max Invalid Stream Rcvd
     */
    public readonly errorMaxInvalidStream!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Window Update with increment that results in exceeding max window
     */
    public readonly exceedsMaxWindowSizeStream!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Flow Control Error
     */
    public readonly flowControlError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Frame Size Error
     */
    public readonly frameSizeError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in half closed remote state
     */
    public readonly halfClosedRemoteStateUnexpectedFra!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for header no stream
     */
    public readonly headerNoStream!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Header padlen greater than frame payload size
     */
    public readonly headerPadlenGtFramePayload!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for headers frame before CONTINUATION was complete
     */
    public readonly headersAfterContinuation!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for headers interleaved on streams
     */
    public readonly headersInterleaved!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for HTTP1.1 Required
     */
    public readonly http11Required!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Unxpected frame received in idle state
     */
    public readonly idleStateUnexpectedFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for inadequate security
     */
    public readonly inadequateSecurity!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for inflate alloc fail
     */
    public readonly inflateAllocFail!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Inflate Header Fail
     */
    public readonly inflateHeaderFail!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Internal Error
     */
    public readonly internalError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for frame before headers were complete
     */
    public readonly invalidFrameDuringHeaders!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Invalid Frame Size Rcvd
     */
    public readonly invalidFrameSize!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for unexpected PUSH_PROMISE frame
     */
    public readonly invalidPushPromise!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for invalid setting-frame value
     */
    public readonly invalidSettingValue!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for received invalid stream ID
     */
    public readonly invalidStreamId!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for window-update value out of range
     */
    public readonly invalidWindowUpdate!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enable automatic packet-capture for Protocol Error
     */
    public readonly protocolError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for HTTP2 Proxy alloc Error
     */
    public readonly proxyAllocError!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Refused Stream
     */
    public readonly refusedStream!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in reserved local state
     */
    public readonly reservedLocalStateUnexpectedFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in reserved remote state
     */
    public readonly reservedRemoteStateUnexpectedFrame!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Settings Timeout
     */
    public readonly settingsTimeout!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Splitting Buffer Failed
     */
    public readonly splitBuffFail!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Streams greater than max allowed concurrent streams
     */
    public readonly streamsGtMaxConcurStreams!: pulumi.Output<number | undefined>;
    /**
     * Set the threshold to the number of times greater than the previous duration to start the capture, default is 5
     */
    public readonly thresholdExceededBy!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for trailers not marked as end-of-stream
     */
    public readonly trailersNoEndStream!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Enable automatic packet-capture for Wrong Stream State
     */
    public readonly wrongStreamState!: pulumi.Output<number | undefined>;
    /**
     * Enable automatic packet-capture for Window Update with zero increment rcvd
     */
    public readonly zeroWindowSizeOnStream!: pulumi.Output<number | undefined>;

    /**
     * Create a VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateArgs | VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateState | undefined;
            resourceInputs["allocFailTotal"] = state ? state.allocFailTotal : undefined;
            resourceInputs["badConnectionPreface"] = state ? state.badConnectionPreface : undefined;
            resourceInputs["badFrameTypeForStreamState"] = state ? state.badFrameTypeForStreamState : undefined;
            resourceInputs["buffAllocError"] = state ? state.buffAllocError : undefined;
            resourceInputs["cancel"] = state ? state.cancel : undefined;
            resourceInputs["cantAllocateControlFrame"] = state ? state.cantAllocateControlFrame : undefined;
            resourceInputs["cantAllocateGoawayFrame"] = state ? state.cantAllocateGoawayFrame : undefined;
            resourceInputs["cantAllocatePingFrame"] = state ? state.cantAllocatePingFrame : undefined;
            resourceInputs["cantAllocateRstFrame"] = state ? state.cantAllocateRstFrame : undefined;
            resourceInputs["cantAllocateSettingsFrame"] = state ? state.cantAllocateSettingsFrame : undefined;
            resourceInputs["cantAllocateStream"] = state ? state.cantAllocateStream : undefined;
            resourceInputs["cantAllocateWindowFrame"] = state ? state.cantAllocateWindowFrame : undefined;
            resourceInputs["closedStateUnexpectedFrame"] = state ? state.closedStateUnexpectedFrame : undefined;
            resourceInputs["compressionError"] = state ? state.compressionError : undefined;
            resourceInputs["connectError"] = state ? state.connectError : undefined;
            resourceInputs["continuationBeforeHeaders"] = state ? state.continuationBeforeHeaders : undefined;
            resourceInputs["dataNoStream"] = state ? state.dataNoStream : undefined;
            resourceInputs["dataQueueAllocError"] = state ? state.dataQueueAllocError : undefined;
            resourceInputs["deflateAllocFail"] = state ? state.deflateAllocFail : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["enhanceYourCalm"] = state ? state.enhanceYourCalm : undefined;
            resourceInputs["errRcvdTotal"] = state ? state.errRcvdTotal : undefined;
            resourceInputs["errSentCancel"] = state ? state.errSentCancel : undefined;
            resourceInputs["errSentCompressionErr"] = state ? state.errSentCompressionErr : undefined;
            resourceInputs["errSentConnectErr"] = state ? state.errSentConnectErr : undefined;
            resourceInputs["errSentFlowControl"] = state ? state.errSentFlowControl : undefined;
            resourceInputs["errSentFrameSizeErr"] = state ? state.errSentFrameSizeErr : undefined;
            resourceInputs["errSentHttp11Required"] = state ? state.errSentHttp11Required : undefined;
            resourceInputs["errSentInadequateSecurity"] = state ? state.errSentInadequateSecurity : undefined;
            resourceInputs["errSentInternalErr"] = state ? state.errSentInternalErr : undefined;
            resourceInputs["errSentProtoErr"] = state ? state.errSentProtoErr : undefined;
            resourceInputs["errSentRefusedStream"] = state ? state.errSentRefusedStream : undefined;
            resourceInputs["errSentSettingTimeout"] = state ? state.errSentSettingTimeout : undefined;
            resourceInputs["errSentStreamClosed"] = state ? state.errSentStreamClosed : undefined;
            resourceInputs["errSentTotal"] = state ? state.errSentTotal : undefined;
            resourceInputs["errSentYourCalm"] = state ? state.errSentYourCalm : undefined;
            resourceInputs["errorMaxInvalidStream"] = state ? state.errorMaxInvalidStream : undefined;
            resourceInputs["exceedsMaxWindowSizeStream"] = state ? state.exceedsMaxWindowSizeStream : undefined;
            resourceInputs["flowControlError"] = state ? state.flowControlError : undefined;
            resourceInputs["frameSizeError"] = state ? state.frameSizeError : undefined;
            resourceInputs["halfClosedRemoteStateUnexpectedFra"] = state ? state.halfClosedRemoteStateUnexpectedFra : undefined;
            resourceInputs["headerNoStream"] = state ? state.headerNoStream : undefined;
            resourceInputs["headerPadlenGtFramePayload"] = state ? state.headerPadlenGtFramePayload : undefined;
            resourceInputs["headersAfterContinuation"] = state ? state.headersAfterContinuation : undefined;
            resourceInputs["headersInterleaved"] = state ? state.headersInterleaved : undefined;
            resourceInputs["http11Required"] = state ? state.http11Required : undefined;
            resourceInputs["idleStateUnexpectedFrame"] = state ? state.idleStateUnexpectedFrame : undefined;
            resourceInputs["inadequateSecurity"] = state ? state.inadequateSecurity : undefined;
            resourceInputs["inflateAllocFail"] = state ? state.inflateAllocFail : undefined;
            resourceInputs["inflateHeaderFail"] = state ? state.inflateHeaderFail : undefined;
            resourceInputs["internalError"] = state ? state.internalError : undefined;
            resourceInputs["invalidFrameDuringHeaders"] = state ? state.invalidFrameDuringHeaders : undefined;
            resourceInputs["invalidFrameSize"] = state ? state.invalidFrameSize : undefined;
            resourceInputs["invalidPushPromise"] = state ? state.invalidPushPromise : undefined;
            resourceInputs["invalidSettingValue"] = state ? state.invalidSettingValue : undefined;
            resourceInputs["invalidStreamId"] = state ? state.invalidStreamId : undefined;
            resourceInputs["invalidWindowUpdate"] = state ? state.invalidWindowUpdate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocolError"] = state ? state.protocolError : undefined;
            resourceInputs["proxyAllocError"] = state ? state.proxyAllocError : undefined;
            resourceInputs["refusedStream"] = state ? state.refusedStream : undefined;
            resourceInputs["reservedLocalStateUnexpectedFrame"] = state ? state.reservedLocalStateUnexpectedFrame : undefined;
            resourceInputs["reservedRemoteStateUnexpectedFrame"] = state ? state.reservedRemoteStateUnexpectedFrame : undefined;
            resourceInputs["settingsTimeout"] = state ? state.settingsTimeout : undefined;
            resourceInputs["splitBuffFail"] = state ? state.splitBuffFail : undefined;
            resourceInputs["streamsGtMaxConcurStreams"] = state ? state.streamsGtMaxConcurStreams : undefined;
            resourceInputs["thresholdExceededBy"] = state ? state.thresholdExceededBy : undefined;
            resourceInputs["trailersNoEndStream"] = state ? state.trailersNoEndStream : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["wrongStreamState"] = state ? state.wrongStreamState : undefined;
            resourceInputs["zeroWindowSizeOnStream"] = state ? state.zeroWindowSizeOnStream : undefined;
        } else {
            const args = argsOrState as VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateArgs | undefined;
            resourceInputs["allocFailTotal"] = args ? args.allocFailTotal : undefined;
            resourceInputs["badConnectionPreface"] = args ? args.badConnectionPreface : undefined;
            resourceInputs["badFrameTypeForStreamState"] = args ? args.badFrameTypeForStreamState : undefined;
            resourceInputs["buffAllocError"] = args ? args.buffAllocError : undefined;
            resourceInputs["cancel"] = args ? args.cancel : undefined;
            resourceInputs["cantAllocateControlFrame"] = args ? args.cantAllocateControlFrame : undefined;
            resourceInputs["cantAllocateGoawayFrame"] = args ? args.cantAllocateGoawayFrame : undefined;
            resourceInputs["cantAllocatePingFrame"] = args ? args.cantAllocatePingFrame : undefined;
            resourceInputs["cantAllocateRstFrame"] = args ? args.cantAllocateRstFrame : undefined;
            resourceInputs["cantAllocateSettingsFrame"] = args ? args.cantAllocateSettingsFrame : undefined;
            resourceInputs["cantAllocateStream"] = args ? args.cantAllocateStream : undefined;
            resourceInputs["cantAllocateWindowFrame"] = args ? args.cantAllocateWindowFrame : undefined;
            resourceInputs["closedStateUnexpectedFrame"] = args ? args.closedStateUnexpectedFrame : undefined;
            resourceInputs["compressionError"] = args ? args.compressionError : undefined;
            resourceInputs["connectError"] = args ? args.connectError : undefined;
            resourceInputs["continuationBeforeHeaders"] = args ? args.continuationBeforeHeaders : undefined;
            resourceInputs["dataNoStream"] = args ? args.dataNoStream : undefined;
            resourceInputs["dataQueueAllocError"] = args ? args.dataQueueAllocError : undefined;
            resourceInputs["deflateAllocFail"] = args ? args.deflateAllocFail : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["enhanceYourCalm"] = args ? args.enhanceYourCalm : undefined;
            resourceInputs["errRcvdTotal"] = args ? args.errRcvdTotal : undefined;
            resourceInputs["errSentCancel"] = args ? args.errSentCancel : undefined;
            resourceInputs["errSentCompressionErr"] = args ? args.errSentCompressionErr : undefined;
            resourceInputs["errSentConnectErr"] = args ? args.errSentConnectErr : undefined;
            resourceInputs["errSentFlowControl"] = args ? args.errSentFlowControl : undefined;
            resourceInputs["errSentFrameSizeErr"] = args ? args.errSentFrameSizeErr : undefined;
            resourceInputs["errSentHttp11Required"] = args ? args.errSentHttp11Required : undefined;
            resourceInputs["errSentInadequateSecurity"] = args ? args.errSentInadequateSecurity : undefined;
            resourceInputs["errSentInternalErr"] = args ? args.errSentInternalErr : undefined;
            resourceInputs["errSentProtoErr"] = args ? args.errSentProtoErr : undefined;
            resourceInputs["errSentRefusedStream"] = args ? args.errSentRefusedStream : undefined;
            resourceInputs["errSentSettingTimeout"] = args ? args.errSentSettingTimeout : undefined;
            resourceInputs["errSentStreamClosed"] = args ? args.errSentStreamClosed : undefined;
            resourceInputs["errSentTotal"] = args ? args.errSentTotal : undefined;
            resourceInputs["errSentYourCalm"] = args ? args.errSentYourCalm : undefined;
            resourceInputs["errorMaxInvalidStream"] = args ? args.errorMaxInvalidStream : undefined;
            resourceInputs["exceedsMaxWindowSizeStream"] = args ? args.exceedsMaxWindowSizeStream : undefined;
            resourceInputs["flowControlError"] = args ? args.flowControlError : undefined;
            resourceInputs["frameSizeError"] = args ? args.frameSizeError : undefined;
            resourceInputs["halfClosedRemoteStateUnexpectedFra"] = args ? args.halfClosedRemoteStateUnexpectedFra : undefined;
            resourceInputs["headerNoStream"] = args ? args.headerNoStream : undefined;
            resourceInputs["headerPadlenGtFramePayload"] = args ? args.headerPadlenGtFramePayload : undefined;
            resourceInputs["headersAfterContinuation"] = args ? args.headersAfterContinuation : undefined;
            resourceInputs["headersInterleaved"] = args ? args.headersInterleaved : undefined;
            resourceInputs["http11Required"] = args ? args.http11Required : undefined;
            resourceInputs["idleStateUnexpectedFrame"] = args ? args.idleStateUnexpectedFrame : undefined;
            resourceInputs["inadequateSecurity"] = args ? args.inadequateSecurity : undefined;
            resourceInputs["inflateAllocFail"] = args ? args.inflateAllocFail : undefined;
            resourceInputs["inflateHeaderFail"] = args ? args.inflateHeaderFail : undefined;
            resourceInputs["internalError"] = args ? args.internalError : undefined;
            resourceInputs["invalidFrameDuringHeaders"] = args ? args.invalidFrameDuringHeaders : undefined;
            resourceInputs["invalidFrameSize"] = args ? args.invalidFrameSize : undefined;
            resourceInputs["invalidPushPromise"] = args ? args.invalidPushPromise : undefined;
            resourceInputs["invalidSettingValue"] = args ? args.invalidSettingValue : undefined;
            resourceInputs["invalidStreamId"] = args ? args.invalidStreamId : undefined;
            resourceInputs["invalidWindowUpdate"] = args ? args.invalidWindowUpdate : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocolError"] = args ? args.protocolError : undefined;
            resourceInputs["proxyAllocError"] = args ? args.proxyAllocError : undefined;
            resourceInputs["refusedStream"] = args ? args.refusedStream : undefined;
            resourceInputs["reservedLocalStateUnexpectedFrame"] = args ? args.reservedLocalStateUnexpectedFrame : undefined;
            resourceInputs["reservedRemoteStateUnexpectedFrame"] = args ? args.reservedRemoteStateUnexpectedFrame : undefined;
            resourceInputs["settingsTimeout"] = args ? args.settingsTimeout : undefined;
            resourceInputs["splitBuffFail"] = args ? args.splitBuffFail : undefined;
            resourceInputs["streamsGtMaxConcurStreams"] = args ? args.streamsGtMaxConcurStreams : undefined;
            resourceInputs["thresholdExceededBy"] = args ? args.thresholdExceededBy : undefined;
            resourceInputs["trailersNoEndStream"] = args ? args.trailersNoEndStream : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["wrongStreamState"] = args ? args.wrongStreamState : undefined;
            resourceInputs["zeroWindowSizeOnStream"] = args ? args.zeroWindowSizeOnStream : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate resources.
 */
export interface VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateState {
    /**
     * Enable automatic packet-capture for Alloc Fail - Total
     */
    allocFailTotal?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Bad Connection Preface
     */
    badConnectionPreface?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Bad frame type for stream state
     */
    badFrameTypeForStreamState?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Buff alloc error
     */
    buffAllocError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for cancel
     */
    cancel?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate control frame
     */
    cantAllocateControlFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate GOAWAY frame
     */
    cantAllocateGoawayFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate PING frame
     */
    cantAllocatePingFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate RST_STREAM frame
     */
    cantAllocateRstFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate SETTINGS frame
     */
    cantAllocateSettingsFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate stream
     */
    cantAllocateStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate WINDOW_UPDATE frame
     */
    cantAllocateWindowFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in closed state
     */
    closedStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for compression error
     */
    compressionError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for connect error
     */
    connectError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for CONTINUATION frame with no headers frame
     */
    continuationBeforeHeaders?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for DATA Frame Rcvd on non-existent stream
     */
    dataNoStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Data Queue Alloc Error
     */
    dataQueueAllocError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for deflate alloc fail
     */
    deflateAllocFail?: pulumi.Input<number>;
    /**
     * Time in seconds to look for the anomaly, default is 60
     */
    duration?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for enhance your calm error
     */
    enhanceYourCalm?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Rcvd - Total
     */
    errRcvdTotal?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - CANCEL
     */
    errSentCancel?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - COMPRESSION_ERROR
     */
    errSentCompressionErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - CONNECT_ERROR
     */
    errSentConnectErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - FLOW_CONTROL_ERROR
     */
    errSentFlowControl?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - FRAME_SIZE_ERROR
     */
    errSentFrameSizeErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - HTTP_1_1_REQUIRED
     */
    errSentHttp11Required?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - INADEQUATE_SECURITY
     */
    errSentInadequateSecurity?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - INTERNAL_ERROR
     */
    errSentInternalErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - PROTOCOL_ERROR
     */
    errSentProtoErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - REFUSED_STREAM
     */
    errSentRefusedStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - SETTINGS_TIMEOUT
     */
    errSentSettingTimeout?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - STREAM_CLOSED
     */
    errSentStreamClosed?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Rent - Total
     */
    errSentTotal?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - ENHANCE_YOUR_CALM
     */
    errSentYourCalm?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Max Invalid Stream Rcvd
     */
    errorMaxInvalidStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Window Update with increment that results in exceeding max window
     */
    exceedsMaxWindowSizeStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Flow Control Error
     */
    flowControlError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Frame Size Error
     */
    frameSizeError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in half closed remote state
     */
    halfClosedRemoteStateUnexpectedFra?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for header no stream
     */
    headerNoStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Header padlen greater than frame payload size
     */
    headerPadlenGtFramePayload?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for headers frame before CONTINUATION was complete
     */
    headersAfterContinuation?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for headers interleaved on streams
     */
    headersInterleaved?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for HTTP1.1 Required
     */
    http11Required?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unxpected frame received in idle state
     */
    idleStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for inadequate security
     */
    inadequateSecurity?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for inflate alloc fail
     */
    inflateAllocFail?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Inflate Header Fail
     */
    inflateHeaderFail?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Internal Error
     */
    internalError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for frame before headers were complete
     */
    invalidFrameDuringHeaders?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Invalid Frame Size Rcvd
     */
    invalidFrameSize?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for unexpected PUSH_PROMISE frame
     */
    invalidPushPromise?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for invalid setting-frame value
     */
    invalidSettingValue?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for received invalid stream ID
     */
    invalidStreamId?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for window-update value out of range
     */
    invalidWindowUpdate?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable automatic packet-capture for Protocol Error
     */
    protocolError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for HTTP2 Proxy alloc Error
     */
    proxyAllocError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Refused Stream
     */
    refusedStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in reserved local state
     */
    reservedLocalStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in reserved remote state
     */
    reservedRemoteStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Settings Timeout
     */
    settingsTimeout?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Splitting Buffer Failed
     */
    splitBuffFail?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Streams greater than max allowed concurrent streams
     */
    streamsGtMaxConcurStreams?: pulumi.Input<number>;
    /**
     * Set the threshold to the number of times greater than the previous duration to start the capture, default is 5
     */
    thresholdExceededBy?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for trailers not marked as end-of-stream
     */
    trailersNoEndStream?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable automatic packet-capture for Wrong Stream State
     */
    wrongStreamState?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Window Update with zero increment rcvd
     */
    zeroWindowSizeOnStream?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRate resource.
 */
export interface VisibilityPacketCaptureGlobalTemplatesTemplateTriggerSysObjStatsChangeSlbHttp2TriggerStatsRateArgs {
    /**
     * Enable automatic packet-capture for Alloc Fail - Total
     */
    allocFailTotal?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Bad Connection Preface
     */
    badConnectionPreface?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Bad frame type for stream state
     */
    badFrameTypeForStreamState?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Buff alloc error
     */
    buffAllocError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for cancel
     */
    cancel?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate control frame
     */
    cantAllocateControlFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate GOAWAY frame
     */
    cantAllocateGoawayFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate PING frame
     */
    cantAllocatePingFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate RST_STREAM frame
     */
    cantAllocateRstFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate SETTINGS frame
     */
    cantAllocateSettingsFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate stream
     */
    cantAllocateStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Cant allocate WINDOW_UPDATE frame
     */
    cantAllocateWindowFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in closed state
     */
    closedStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for compression error
     */
    compressionError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for connect error
     */
    connectError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for CONTINUATION frame with no headers frame
     */
    continuationBeforeHeaders?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for DATA Frame Rcvd on non-existent stream
     */
    dataNoStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Data Queue Alloc Error
     */
    dataQueueAllocError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for deflate alloc fail
     */
    deflateAllocFail?: pulumi.Input<number>;
    /**
     * Time in seconds to look for the anomaly, default is 60
     */
    duration?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for enhance your calm error
     */
    enhanceYourCalm?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Rcvd - Total
     */
    errRcvdTotal?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - CANCEL
     */
    errSentCancel?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - COMPRESSION_ERROR
     */
    errSentCompressionErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - CONNECT_ERROR
     */
    errSentConnectErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - FLOW_CONTROL_ERROR
     */
    errSentFlowControl?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - FRAME_SIZE_ERROR
     */
    errSentFrameSizeErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - HTTP_1_1_REQUIRED
     */
    errSentHttp11Required?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - INADEQUATE_SECURITY
     */
    errSentInadequateSecurity?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - INTERNAL_ERROR
     */
    errSentInternalErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - PROTOCOL_ERROR
     */
    errSentProtoErr?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - REFUSED_STREAM
     */
    errSentRefusedStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - SETTINGS_TIMEOUT
     */
    errSentSettingTimeout?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - STREAM_CLOSED
     */
    errSentStreamClosed?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Rent - Total
     */
    errSentTotal?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Error Sent - ENHANCE_YOUR_CALM
     */
    errSentYourCalm?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Max Invalid Stream Rcvd
     */
    errorMaxInvalidStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Window Update with increment that results in exceeding max window
     */
    exceedsMaxWindowSizeStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Flow Control Error
     */
    flowControlError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Frame Size Error
     */
    frameSizeError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in half closed remote state
     */
    halfClosedRemoteStateUnexpectedFra?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for header no stream
     */
    headerNoStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Header padlen greater than frame payload size
     */
    headerPadlenGtFramePayload?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for headers frame before CONTINUATION was complete
     */
    headersAfterContinuation?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for headers interleaved on streams
     */
    headersInterleaved?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for HTTP1.1 Required
     */
    http11Required?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unxpected frame received in idle state
     */
    idleStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for inadequate security
     */
    inadequateSecurity?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for inflate alloc fail
     */
    inflateAllocFail?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Inflate Header Fail
     */
    inflateHeaderFail?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Internal Error
     */
    internalError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for frame before headers were complete
     */
    invalidFrameDuringHeaders?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Invalid Frame Size Rcvd
     */
    invalidFrameSize?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for unexpected PUSH_PROMISE frame
     */
    invalidPushPromise?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for invalid setting-frame value
     */
    invalidSettingValue?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for received invalid stream ID
     */
    invalidStreamId?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for window-update value out of range
     */
    invalidWindowUpdate?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Enable automatic packet-capture for Protocol Error
     */
    protocolError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for HTTP2 Proxy alloc Error
     */
    proxyAllocError?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Refused Stream
     */
    refusedStream?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in reserved local state
     */
    reservedLocalStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Unexpected frame received in reserved remote state
     */
    reservedRemoteStateUnexpectedFrame?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Settings Timeout
     */
    settingsTimeout?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Splitting Buffer Failed
     */
    splitBuffFail?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Streams greater than max allowed concurrent streams
     */
    streamsGtMaxConcurStreams?: pulumi.Input<number>;
    /**
     * Set the threshold to the number of times greater than the previous duration to start the capture, default is 5
     */
    thresholdExceededBy?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for trailers not marked as end-of-stream
     */
    trailersNoEndStream?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Enable automatic packet-capture for Wrong Stream State
     */
    wrongStreamState?: pulumi.Input<number>;
    /**
     * Enable automatic packet-capture for Window Update with zero increment rcvd
     */
    zeroWindowSizeOnStream?: pulumi.Input<number>;
}
