// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AcosEventsLogdb extends pulumi.CustomResource {
    /**
     * Get an existing AcosEventsLogdb resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcosEventsLogdbState, opts?: pulumi.CustomResourceOptions): AcosEventsLogdb {
        return new AcosEventsLogdb(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/acosEventsLogdb:AcosEventsLogdb';

    /**
     * Returns true if the given object is an instance of AcosEventsLogdb.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AcosEventsLogdb {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AcosEventsLogdb.__pulumiType;
    }

    /**
     * Enable logging for all widgets
     */
    public readonly enableAll!: pulumi.Output<number | undefined>;
    /**
     * Enable CGN logging
     */
    public readonly enableCgn!: pulumi.Output<number | undefined>;
    /**
     * Enable Firewall logging
     */
    public readonly enableFw!: pulumi.Output<number | undefined>;
    /**
     * Enable HTTP forward proxy logging
     */
    public readonly enableHttpForwardProxy!: pulumi.Output<number | undefined>;
    /**
     * Enable link-cost logging
     */
    public readonly enableLinkCost!: pulumi.Output<number | undefined>;
    /**
     * Enable MQTT logging
     */
    public readonly enableMqtt!: pulumi.Output<number | undefined>;
    /**
     * Enable SMTP logging
     */
    public readonly enableSmtp!: pulumi.Output<number | undefined>;
    /**
     * Enable SSLi logging
     */
    public readonly enableSsli!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AcosEventsLogdb resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AcosEventsLogdbArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcosEventsLogdbArgs | AcosEventsLogdbState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcosEventsLogdbState | undefined;
            resourceInputs["enableAll"] = state ? state.enableAll : undefined;
            resourceInputs["enableCgn"] = state ? state.enableCgn : undefined;
            resourceInputs["enableFw"] = state ? state.enableFw : undefined;
            resourceInputs["enableHttpForwardProxy"] = state ? state.enableHttpForwardProxy : undefined;
            resourceInputs["enableLinkCost"] = state ? state.enableLinkCost : undefined;
            resourceInputs["enableMqtt"] = state ? state.enableMqtt : undefined;
            resourceInputs["enableSmtp"] = state ? state.enableSmtp : undefined;
            resourceInputs["enableSsli"] = state ? state.enableSsli : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AcosEventsLogdbArgs | undefined;
            resourceInputs["enableAll"] = args ? args.enableAll : undefined;
            resourceInputs["enableCgn"] = args ? args.enableCgn : undefined;
            resourceInputs["enableFw"] = args ? args.enableFw : undefined;
            resourceInputs["enableHttpForwardProxy"] = args ? args.enableHttpForwardProxy : undefined;
            resourceInputs["enableLinkCost"] = args ? args.enableLinkCost : undefined;
            resourceInputs["enableMqtt"] = args ? args.enableMqtt : undefined;
            resourceInputs["enableSmtp"] = args ? args.enableSmtp : undefined;
            resourceInputs["enableSsli"] = args ? args.enableSsli : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AcosEventsLogdb.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AcosEventsLogdb resources.
 */
export interface AcosEventsLogdbState {
    /**
     * Enable logging for all widgets
     */
    enableAll?: pulumi.Input<number>;
    /**
     * Enable CGN logging
     */
    enableCgn?: pulumi.Input<number>;
    /**
     * Enable Firewall logging
     */
    enableFw?: pulumi.Input<number>;
    /**
     * Enable HTTP forward proxy logging
     */
    enableHttpForwardProxy?: pulumi.Input<number>;
    /**
     * Enable link-cost logging
     */
    enableLinkCost?: pulumi.Input<number>;
    /**
     * Enable MQTT logging
     */
    enableMqtt?: pulumi.Input<number>;
    /**
     * Enable SMTP logging
     */
    enableSmtp?: pulumi.Input<number>;
    /**
     * Enable SSLi logging
     */
    enableSsli?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AcosEventsLogdb resource.
 */
export interface AcosEventsLogdbArgs {
    /**
     * Enable logging for all widgets
     */
    enableAll?: pulumi.Input<number>;
    /**
     * Enable CGN logging
     */
    enableCgn?: pulumi.Input<number>;
    /**
     * Enable Firewall logging
     */
    enableFw?: pulumi.Input<number>;
    /**
     * Enable HTTP forward proxy logging
     */
    enableHttpForwardProxy?: pulumi.Input<number>;
    /**
     * Enable link-cost logging
     */
    enableLinkCost?: pulumi.Input<number>;
    /**
     * Enable MQTT logging
     */
    enableMqtt?: pulumi.Input<number>;
    /**
     * Enable SMTP logging
     */
    enableSmtp?: pulumi.Input<number>;
    /**
     * Enable SSLi logging
     */
    enableSsli?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
