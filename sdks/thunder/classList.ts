// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClassList extends pulumi.CustomResource {
    /**
     * Get an existing ClassList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClassListState, opts?: pulumi.CustomResourceOptions): ClassList {
        return new ClassList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/classList:ClassList';

    /**
     * Returns true if the given object is an instance of ClassList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClassList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClassList.__pulumiType;
    }

    public readonly acLists!: pulumi.Output<outputs.ClassListAcList[] | undefined>;
    public readonly dns!: pulumi.Output<outputs.ClassListDn[] | undefined>;
    /**
     * Create/Edit a class-list stored as a file
     */
    public readonly file!: pulumi.Output<number | undefined>;
    public readonly geoLists!: pulumi.Output<outputs.ClassListGeoList[] | undefined>;
    public readonly ipv4Lists!: pulumi.Output<outputs.ClassListIpv4List[] | undefined>;
    public readonly ipv6Lists!: pulumi.Output<outputs.ClassListIpv6List[] | undefined>;
    /**
     * Specify name of the class list
     */
    public readonly name!: pulumi.Output<string>;
    public readonly strLists!: pulumi.Output<outputs.ClassListStrList[] | undefined>;
    /**
     * 'ac': Make class-list type Aho-Corasick; 'dns': Make class-list type DNS; 'ipv4': Make class-list type IPv4; 'ipv6':
     * Make class-list type IPv6; 'string': Make class-list type String; 'string-case-insensitive': Make class-list type
     * String-case-insensitive. Case insensitive is applied to key string;
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ClassList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClassListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClassListArgs | ClassListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClassListState | undefined;
            resourceInputs["acLists"] = state ? state.acLists : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["geoLists"] = state ? state.geoLists : undefined;
            resourceInputs["ipv4Lists"] = state ? state.ipv4Lists : undefined;
            resourceInputs["ipv6Lists"] = state ? state.ipv6Lists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["strLists"] = state ? state.strLists : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ClassListArgs | undefined;
            resourceInputs["acLists"] = args ? args.acLists : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["geoLists"] = args ? args.geoLists : undefined;
            resourceInputs["ipv4Lists"] = args ? args.ipv4Lists : undefined;
            resourceInputs["ipv6Lists"] = args ? args.ipv6Lists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["strLists"] = args ? args.strLists : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClassList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClassList resources.
 */
export interface ClassListState {
    acLists?: pulumi.Input<pulumi.Input<inputs.ClassListAcList>[]>;
    dns?: pulumi.Input<pulumi.Input<inputs.ClassListDn>[]>;
    /**
     * Create/Edit a class-list stored as a file
     */
    file?: pulumi.Input<number>;
    geoLists?: pulumi.Input<pulumi.Input<inputs.ClassListGeoList>[]>;
    ipv4Lists?: pulumi.Input<pulumi.Input<inputs.ClassListIpv4List>[]>;
    ipv6Lists?: pulumi.Input<pulumi.Input<inputs.ClassListIpv6List>[]>;
    /**
     * Specify name of the class list
     */
    name?: pulumi.Input<string>;
    strLists?: pulumi.Input<pulumi.Input<inputs.ClassListStrList>[]>;
    /**
     * 'ac': Make class-list type Aho-Corasick; 'dns': Make class-list type DNS; 'ipv4': Make class-list type IPv4; 'ipv6':
     * Make class-list type IPv6; 'string': Make class-list type String; 'string-case-insensitive': Make class-list type
     * String-case-insensitive. Case insensitive is applied to key string;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClassList resource.
 */
export interface ClassListArgs {
    acLists?: pulumi.Input<pulumi.Input<inputs.ClassListAcList>[]>;
    dns?: pulumi.Input<pulumi.Input<inputs.ClassListDn>[]>;
    /**
     * Create/Edit a class-list stored as a file
     */
    file?: pulumi.Input<number>;
    geoLists?: pulumi.Input<pulumi.Input<inputs.ClassListGeoList>[]>;
    ipv4Lists?: pulumi.Input<pulumi.Input<inputs.ClassListIpv4List>[]>;
    ipv6Lists?: pulumi.Input<pulumi.Input<inputs.ClassListIpv6List>[]>;
    /**
     * Specify name of the class list
     */
    name?: pulumi.Input<string>;
    strLists?: pulumi.Input<pulumi.Input<inputs.ClassListStrList>[]>;
    /**
     * 'ac': Make class-list type Aho-Corasick; 'dns': Make class-list type DNS; 'ipv4': Make class-list type IPv4; 'ipv6':
     * Make class-list type IPv6; 'string': Make class-list type String; 'string-case-insensitive': Make class-list type
     * String-case-insensitive. Case insensitive is applied to key string;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
