// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Flowspec extends pulumi.CustomResource {
    /**
     * Get an existing Flowspec resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowspecState, opts?: pulumi.CustomResourceOptions): Flowspec {
        return new Flowspec(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/flowspec:Flowspec';

    /**
     * Returns true if the given object is an instance of Flowspec.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Flowspec {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Flowspec.__pulumiType;
    }

    /**
     * 'ip': IPv4 Address; 'ipv6': IPv6 Address;
     */
    public readonly destAddrType!: pulumi.Output<string | undefined>;
    /**
     * IPv4 host address
     */
    public readonly destIpHost!: pulumi.Output<string | undefined>;
    /**
     * IPv4 Subnet address
     */
    public readonly destIpSubnet!: pulumi.Output<string | undefined>;
    /**
     * IPv6 host address
     */
    public readonly destIpv6Host!: pulumi.Output<string | undefined>;
    /**
     * IPv6 Subnet address
     */
    public readonly destIpv6Subnet!: pulumi.Output<string | undefined>;
    public readonly destinationPortLists!: pulumi.Output<outputs.FlowspecDestinationPortList[] | undefined>;
    public readonly dscpLists!: pulumi.Output<outputs.FlowspecDscpList[] | undefined>;
    public readonly filteringAction!: pulumi.Output<outputs.FlowspecFilteringAction | undefined>;
    public readonly fragmentationOptionLists!: pulumi.Output<outputs.FlowspecFragmentationOptionList[] | undefined>;
    public readonly icmpCodeLists!: pulumi.Output<outputs.FlowspecIcmpCodeList[] | undefined>;
    public readonly icmpTypeLists!: pulumi.Output<outputs.FlowspecIcmpTypeList[] | undefined>;
    /**
     * Flowspec name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly operationalMode!: pulumi.Output<outputs.FlowspecOperationalMode | undefined>;
    public readonly packetLengthLists!: pulumi.Output<outputs.FlowspecPacketLengthList[] | undefined>;
    public readonly portLists!: pulumi.Output<outputs.FlowspecPortList[] | undefined>;
    public readonly protocolLists!: pulumi.Output<outputs.FlowspecProtocolList[] | undefined>;
    public readonly sourcePortLists!: pulumi.Output<outputs.FlowspecSourcePortList[] | undefined>;
    /**
     * 'ip': IPv4 Address; 'ipv6': IPv6 Address;
     */
    public readonly srcAddrType!: pulumi.Output<string | undefined>;
    /**
     * IPv4 host address
     */
    public readonly srcIpHost!: pulumi.Output<string | undefined>;
    /**
     * IPv4 Subnet address
     */
    public readonly srcIpSubnet!: pulumi.Output<string | undefined>;
    /**
     * IPv6 host address
     */
    public readonly srcIpv6Host!: pulumi.Output<string | undefined>;
    /**
     * IPv6 Subnet address
     */
    public readonly srcIpv6Subnet!: pulumi.Output<string | undefined>;
    /**
     * 'match-all': not = 0 match = 1; 'none-of': not = 1 match = 0; 'not-match': not = 1 match = 1; 'match-any': not = 0 match
     * = 0;
     */
    public readonly tcpFlags!: pulumi.Output<string | undefined>;
    /**
     * Bitmask in Hex
     */
    public readonly tcpFlagsBitmask!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Flowspec resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FlowspecArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowspecArgs | FlowspecState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowspecState | undefined;
            resourceInputs["destAddrType"] = state ? state.destAddrType : undefined;
            resourceInputs["destIpHost"] = state ? state.destIpHost : undefined;
            resourceInputs["destIpSubnet"] = state ? state.destIpSubnet : undefined;
            resourceInputs["destIpv6Host"] = state ? state.destIpv6Host : undefined;
            resourceInputs["destIpv6Subnet"] = state ? state.destIpv6Subnet : undefined;
            resourceInputs["destinationPortLists"] = state ? state.destinationPortLists : undefined;
            resourceInputs["dscpLists"] = state ? state.dscpLists : undefined;
            resourceInputs["filteringAction"] = state ? state.filteringAction : undefined;
            resourceInputs["fragmentationOptionLists"] = state ? state.fragmentationOptionLists : undefined;
            resourceInputs["icmpCodeLists"] = state ? state.icmpCodeLists : undefined;
            resourceInputs["icmpTypeLists"] = state ? state.icmpTypeLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operationalMode"] = state ? state.operationalMode : undefined;
            resourceInputs["packetLengthLists"] = state ? state.packetLengthLists : undefined;
            resourceInputs["portLists"] = state ? state.portLists : undefined;
            resourceInputs["protocolLists"] = state ? state.protocolLists : undefined;
            resourceInputs["sourcePortLists"] = state ? state.sourcePortLists : undefined;
            resourceInputs["srcAddrType"] = state ? state.srcAddrType : undefined;
            resourceInputs["srcIpHost"] = state ? state.srcIpHost : undefined;
            resourceInputs["srcIpSubnet"] = state ? state.srcIpSubnet : undefined;
            resourceInputs["srcIpv6Host"] = state ? state.srcIpv6Host : undefined;
            resourceInputs["srcIpv6Subnet"] = state ? state.srcIpv6Subnet : undefined;
            resourceInputs["tcpFlags"] = state ? state.tcpFlags : undefined;
            resourceInputs["tcpFlagsBitmask"] = state ? state.tcpFlagsBitmask : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FlowspecArgs | undefined;
            resourceInputs["destAddrType"] = args ? args.destAddrType : undefined;
            resourceInputs["destIpHost"] = args ? args.destIpHost : undefined;
            resourceInputs["destIpSubnet"] = args ? args.destIpSubnet : undefined;
            resourceInputs["destIpv6Host"] = args ? args.destIpv6Host : undefined;
            resourceInputs["destIpv6Subnet"] = args ? args.destIpv6Subnet : undefined;
            resourceInputs["destinationPortLists"] = args ? args.destinationPortLists : undefined;
            resourceInputs["dscpLists"] = args ? args.dscpLists : undefined;
            resourceInputs["filteringAction"] = args ? args.filteringAction : undefined;
            resourceInputs["fragmentationOptionLists"] = args ? args.fragmentationOptionLists : undefined;
            resourceInputs["icmpCodeLists"] = args ? args.icmpCodeLists : undefined;
            resourceInputs["icmpTypeLists"] = args ? args.icmpTypeLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operationalMode"] = args ? args.operationalMode : undefined;
            resourceInputs["packetLengthLists"] = args ? args.packetLengthLists : undefined;
            resourceInputs["portLists"] = args ? args.portLists : undefined;
            resourceInputs["protocolLists"] = args ? args.protocolLists : undefined;
            resourceInputs["sourcePortLists"] = args ? args.sourcePortLists : undefined;
            resourceInputs["srcAddrType"] = args ? args.srcAddrType : undefined;
            resourceInputs["srcIpHost"] = args ? args.srcIpHost : undefined;
            resourceInputs["srcIpSubnet"] = args ? args.srcIpSubnet : undefined;
            resourceInputs["srcIpv6Host"] = args ? args.srcIpv6Host : undefined;
            resourceInputs["srcIpv6Subnet"] = args ? args.srcIpv6Subnet : undefined;
            resourceInputs["tcpFlags"] = args ? args.tcpFlags : undefined;
            resourceInputs["tcpFlagsBitmask"] = args ? args.tcpFlagsBitmask : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Flowspec.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Flowspec resources.
 */
export interface FlowspecState {
    /**
     * 'ip': IPv4 Address; 'ipv6': IPv6 Address;
     */
    destAddrType?: pulumi.Input<string>;
    /**
     * IPv4 host address
     */
    destIpHost?: pulumi.Input<string>;
    /**
     * IPv4 Subnet address
     */
    destIpSubnet?: pulumi.Input<string>;
    /**
     * IPv6 host address
     */
    destIpv6Host?: pulumi.Input<string>;
    /**
     * IPv6 Subnet address
     */
    destIpv6Subnet?: pulumi.Input<string>;
    destinationPortLists?: pulumi.Input<pulumi.Input<inputs.FlowspecDestinationPortList>[]>;
    dscpLists?: pulumi.Input<pulumi.Input<inputs.FlowspecDscpList>[]>;
    filteringAction?: pulumi.Input<inputs.FlowspecFilteringAction>;
    fragmentationOptionLists?: pulumi.Input<pulumi.Input<inputs.FlowspecFragmentationOptionList>[]>;
    icmpCodeLists?: pulumi.Input<pulumi.Input<inputs.FlowspecIcmpCodeList>[]>;
    icmpTypeLists?: pulumi.Input<pulumi.Input<inputs.FlowspecIcmpTypeList>[]>;
    /**
     * Flowspec name
     */
    name?: pulumi.Input<string>;
    operationalMode?: pulumi.Input<inputs.FlowspecOperationalMode>;
    packetLengthLists?: pulumi.Input<pulumi.Input<inputs.FlowspecPacketLengthList>[]>;
    portLists?: pulumi.Input<pulumi.Input<inputs.FlowspecPortList>[]>;
    protocolLists?: pulumi.Input<pulumi.Input<inputs.FlowspecProtocolList>[]>;
    sourcePortLists?: pulumi.Input<pulumi.Input<inputs.FlowspecSourcePortList>[]>;
    /**
     * 'ip': IPv4 Address; 'ipv6': IPv6 Address;
     */
    srcAddrType?: pulumi.Input<string>;
    /**
     * IPv4 host address
     */
    srcIpHost?: pulumi.Input<string>;
    /**
     * IPv4 Subnet address
     */
    srcIpSubnet?: pulumi.Input<string>;
    /**
     * IPv6 host address
     */
    srcIpv6Host?: pulumi.Input<string>;
    /**
     * IPv6 Subnet address
     */
    srcIpv6Subnet?: pulumi.Input<string>;
    /**
     * 'match-all': not = 0 match = 1; 'none-of': not = 1 match = 0; 'not-match': not = 1 match = 1; 'match-any': not = 0 match
     * = 0;
     */
    tcpFlags?: pulumi.Input<string>;
    /**
     * Bitmask in Hex
     */
    tcpFlagsBitmask?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Flowspec resource.
 */
export interface FlowspecArgs {
    /**
     * 'ip': IPv4 Address; 'ipv6': IPv6 Address;
     */
    destAddrType?: pulumi.Input<string>;
    /**
     * IPv4 host address
     */
    destIpHost?: pulumi.Input<string>;
    /**
     * IPv4 Subnet address
     */
    destIpSubnet?: pulumi.Input<string>;
    /**
     * IPv6 host address
     */
    destIpv6Host?: pulumi.Input<string>;
    /**
     * IPv6 Subnet address
     */
    destIpv6Subnet?: pulumi.Input<string>;
    destinationPortLists?: pulumi.Input<pulumi.Input<inputs.FlowspecDestinationPortList>[]>;
    dscpLists?: pulumi.Input<pulumi.Input<inputs.FlowspecDscpList>[]>;
    filteringAction?: pulumi.Input<inputs.FlowspecFilteringAction>;
    fragmentationOptionLists?: pulumi.Input<pulumi.Input<inputs.FlowspecFragmentationOptionList>[]>;
    icmpCodeLists?: pulumi.Input<pulumi.Input<inputs.FlowspecIcmpCodeList>[]>;
    icmpTypeLists?: pulumi.Input<pulumi.Input<inputs.FlowspecIcmpTypeList>[]>;
    /**
     * Flowspec name
     */
    name?: pulumi.Input<string>;
    operationalMode?: pulumi.Input<inputs.FlowspecOperationalMode>;
    packetLengthLists?: pulumi.Input<pulumi.Input<inputs.FlowspecPacketLengthList>[]>;
    portLists?: pulumi.Input<pulumi.Input<inputs.FlowspecPortList>[]>;
    protocolLists?: pulumi.Input<pulumi.Input<inputs.FlowspecProtocolList>[]>;
    sourcePortLists?: pulumi.Input<pulumi.Input<inputs.FlowspecSourcePortList>[]>;
    /**
     * 'ip': IPv4 Address; 'ipv6': IPv6 Address;
     */
    srcAddrType?: pulumi.Input<string>;
    /**
     * IPv4 host address
     */
    srcIpHost?: pulumi.Input<string>;
    /**
     * IPv4 Subnet address
     */
    srcIpSubnet?: pulumi.Input<string>;
    /**
     * IPv6 host address
     */
    srcIpv6Host?: pulumi.Input<string>;
    /**
     * IPv6 Subnet address
     */
    srcIpv6Subnet?: pulumi.Input<string>;
    /**
     * 'match-all': not = 0 match = 1; 'none-of': not = 1 match = 0; 'not-match': not = 1 match = 1; 'match-any': not = 0 match
     * = 0;
     */
    tcpFlags?: pulumi.Input<string>;
    /**
     * Bitmask in Hex
     */
    tcpFlagsBitmask?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
