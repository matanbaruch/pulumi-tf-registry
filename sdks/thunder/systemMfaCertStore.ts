// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SystemMfaCertStore extends pulumi.CustomResource {
    /**
     * Get an existing SystemMfaCertStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemMfaCertStoreState, opts?: pulumi.CustomResourceOptions): SystemMfaCertStore {
        return new SystemMfaCertStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/systemMfaCertStore:SystemMfaCertStore';

    /**
     * Returns true if the given object is an instance of SystemMfaCertStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemMfaCertStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemMfaCertStore.__pulumiType;
    }

    /**
     * Configure certificate store host
     */
    public readonly certHost!: pulumi.Output<string | undefined>;
    /**
     * Configure certificate store path
     */
    public readonly certStorePath!: pulumi.Output<string | undefined>;
    /**
     * Certificate store host password
     */
    public readonly passwdString!: pulumi.Output<string | undefined>;
    /**
     * 'tftp': Use tftp for connection; 'ftp': Use ftp for connection; 'scp': Use scp for connection; 'http': Use http for
     * connection; 'https': Use https for connection; 'sftp': Use sftp for connection;
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Certificate store host username
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SystemMfaCertStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemMfaCertStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemMfaCertStoreArgs | SystemMfaCertStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemMfaCertStoreState | undefined;
            resourceInputs["certHost"] = state ? state.certHost : undefined;
            resourceInputs["certStorePath"] = state ? state.certStorePath : undefined;
            resourceInputs["passwdString"] = state ? state.passwdString : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SystemMfaCertStoreArgs | undefined;
            resourceInputs["certHost"] = args ? args.certHost : undefined;
            resourceInputs["certStorePath"] = args ? args.certStorePath : undefined;
            resourceInputs["passwdString"] = args ? args.passwdString : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemMfaCertStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SystemMfaCertStore resources.
 */
export interface SystemMfaCertStoreState {
    /**
     * Configure certificate store host
     */
    certHost?: pulumi.Input<string>;
    /**
     * Configure certificate store path
     */
    certStorePath?: pulumi.Input<string>;
    /**
     * Certificate store host password
     */
    passwdString?: pulumi.Input<string>;
    /**
     * 'tftp': Use tftp for connection; 'ftp': Use ftp for connection; 'scp': Use scp for connection; 'http': Use http for
     * connection; 'https': Use https for connection; 'sftp': Use sftp for connection;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Certificate store host username
     */
    username?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SystemMfaCertStore resource.
 */
export interface SystemMfaCertStoreArgs {
    /**
     * Configure certificate store host
     */
    certHost?: pulumi.Input<string>;
    /**
     * Configure certificate store path
     */
    certStorePath?: pulumi.Input<string>;
    /**
     * Certificate store host password
     */
    passwdString?: pulumi.Input<string>;
    /**
     * 'tftp': Use tftp for connection; 'ftp': Use ftp for connection; 'scp': Use scp for connection; 'http': Use http for
     * connection; 'https': Use https for connection; 'sftp': Use sftp for connection;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Certificate store host username
     */
    username?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
