// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetflowMonitor extends pulumi.CustomResource {
    /**
     * Get an existing NetflowMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetflowMonitorState, opts?: pulumi.CustomResourceOptions): NetflowMonitor {
        return new NetflowMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/netflowMonitor:NetflowMonitor';

    /**
     * Returns true if the given object is an instance of NetflowMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetflowMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetflowMonitor.__pulumiType;
    }

    /**
     * Configure the interval to export global counters (Number of seconds: default is 60)
     */
    public readonly counterPollingInterval!: pulumi.Output<number | undefined>;
    public readonly customRecord!: pulumi.Output<outputs.NetflowMonitorCustomRecord | undefined>;
    public readonly destination!: pulumi.Output<outputs.NetflowMonitorDestination | undefined>;
    /**
     * Disable this netflow monitor
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    public readonly disableLogByDestination!: pulumi.Output<outputs.NetflowMonitorDisableLogByDestination | undefined>;
    /**
     * Configure timeout value to export flow records periodically for long-live session ( Number of minutes: default is 10, 0
     * means only send flow record when session is deleted)
     */
    public readonly flowTimeout!: pulumi.Output<number | undefined>;
    /**
     * Name of netflow monitor
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    /**
     * 'v9': Netflow version 9; 'v10': Netflow version 10 (IPFIX);
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    public readonly record!: pulumi.Output<outputs.NetflowMonitorRecord | undefined>;
    public readonly resendTemplate!: pulumi.Output<outputs.NetflowMonitorResendTemplate | undefined>;
    public readonly sample!: pulumi.Output<outputs.NetflowMonitorSample | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.NetflowMonitorSamplingEnable[] | undefined>;
    /**
     * 'global': Netflow monitor is activated globally (Default); 'firewall-rule': Netflow monitor is only activated when
     * referenced by a firewall rule;
     */
    public readonly scope!: pulumi.Output<string | undefined>;
    public readonly sourceAddress!: pulumi.Output<outputs.NetflowMonitorSourceAddress | undefined>;
    /**
     * Use management interface's IP address for source ip of netflow packets
     */
    public readonly sourceIpUseMgmt!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NetflowMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetflowMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetflowMonitorArgs | NetflowMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetflowMonitorState | undefined;
            resourceInputs["counterPollingInterval"] = state ? state.counterPollingInterval : undefined;
            resourceInputs["customRecord"] = state ? state.customRecord : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableLogByDestination"] = state ? state.disableLogByDestination : undefined;
            resourceInputs["flowTimeout"] = state ? state.flowTimeout : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["record"] = state ? state.record : undefined;
            resourceInputs["resendTemplate"] = state ? state.resendTemplate : undefined;
            resourceInputs["sample"] = state ? state.sample : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
            resourceInputs["sourceAddress"] = state ? state.sourceAddress : undefined;
            resourceInputs["sourceIpUseMgmt"] = state ? state.sourceIpUseMgmt : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetflowMonitorArgs | undefined;
            resourceInputs["counterPollingInterval"] = args ? args.counterPollingInterval : undefined;
            resourceInputs["customRecord"] = args ? args.customRecord : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableLogByDestination"] = args ? args.disableLogByDestination : undefined;
            resourceInputs["flowTimeout"] = args ? args.flowTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["record"] = args ? args.record : undefined;
            resourceInputs["resendTemplate"] = args ? args.resendTemplate : undefined;
            resourceInputs["sample"] = args ? args.sample : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
            resourceInputs["sourceAddress"] = args ? args.sourceAddress : undefined;
            resourceInputs["sourceIpUseMgmt"] = args ? args.sourceIpUseMgmt : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetflowMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetflowMonitor resources.
 */
export interface NetflowMonitorState {
    /**
     * Configure the interval to export global counters (Number of seconds: default is 60)
     */
    counterPollingInterval?: pulumi.Input<number>;
    customRecord?: pulumi.Input<inputs.NetflowMonitorCustomRecord>;
    destination?: pulumi.Input<inputs.NetflowMonitorDestination>;
    /**
     * Disable this netflow monitor
     */
    disable?: pulumi.Input<number>;
    disableLogByDestination?: pulumi.Input<inputs.NetflowMonitorDisableLogByDestination>;
    /**
     * Configure timeout value to export flow records periodically for long-live session ( Number of minutes: default is 10, 0
     * means only send flow record when session is deleted)
     */
    flowTimeout?: pulumi.Input<number>;
    /**
     * Name of netflow monitor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * 'v9': Netflow version 9; 'v10': Netflow version 10 (IPFIX);
     */
    protocol?: pulumi.Input<string>;
    record?: pulumi.Input<inputs.NetflowMonitorRecord>;
    resendTemplate?: pulumi.Input<inputs.NetflowMonitorResendTemplate>;
    sample?: pulumi.Input<inputs.NetflowMonitorSample>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.NetflowMonitorSamplingEnable>[]>;
    /**
     * 'global': Netflow monitor is activated globally (Default); 'firewall-rule': Netflow monitor is only activated when
     * referenced by a firewall rule;
     */
    scope?: pulumi.Input<string>;
    sourceAddress?: pulumi.Input<inputs.NetflowMonitorSourceAddress>;
    /**
     * Use management interface's IP address for source ip of netflow packets
     */
    sourceIpUseMgmt?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetflowMonitor resource.
 */
export interface NetflowMonitorArgs {
    /**
     * Configure the interval to export global counters (Number of seconds: default is 60)
     */
    counterPollingInterval?: pulumi.Input<number>;
    customRecord?: pulumi.Input<inputs.NetflowMonitorCustomRecord>;
    destination?: pulumi.Input<inputs.NetflowMonitorDestination>;
    /**
     * Disable this netflow monitor
     */
    disable?: pulumi.Input<number>;
    disableLogByDestination?: pulumi.Input<inputs.NetflowMonitorDisableLogByDestination>;
    /**
     * Configure timeout value to export flow records periodically for long-live session ( Number of minutes: default is 10, 0
     * means only send flow record when session is deleted)
     */
    flowTimeout?: pulumi.Input<number>;
    /**
     * Name of netflow monitor
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * 'v9': Netflow version 9; 'v10': Netflow version 10 (IPFIX);
     */
    protocol?: pulumi.Input<string>;
    record?: pulumi.Input<inputs.NetflowMonitorRecord>;
    resendTemplate?: pulumi.Input<inputs.NetflowMonitorResendTemplate>;
    sample?: pulumi.Input<inputs.NetflowMonitorSample>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.NetflowMonitorSamplingEnable>[]>;
    /**
     * 'global': Netflow monitor is activated globally (Default); 'firewall-rule': Netflow monitor is only activated when
     * referenced by a firewall rule;
     */
    scope?: pulumi.Input<string>;
    sourceAddress?: pulumi.Input<inputs.NetflowMonitorSourceAddress>;
    /**
     * Use management interface's IP address for source ip of netflow packets
     */
    sourceIpUseMgmt?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
