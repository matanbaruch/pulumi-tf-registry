// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AamAuthenticationOauthAuthorizationServer extends pulumi.CustomResource {
    /**
     * Get an existing AamAuthenticationOauthAuthorizationServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAuthenticationOauthAuthorizationServerState, opts?: pulumi.CustomResourceOptions): AamAuthenticationOauthAuthorizationServer {
        return new AamAuthenticationOauthAuthorizationServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAuthenticationOauthAuthorizationServer:AamAuthenticationOauthAuthorizationServer';

    /**
     * Returns true if the given object is an instance of AamAuthenticationOauthAuthorizationServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAuthenticationOauthAuthorizationServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAuthenticationOauthAuthorizationServer.__pulumiType;
    }

    /**
     * Specify URI for authorization
     */
    public readonly authorizationEndpoint!: pulumi.Output<string | undefined>;
    /**
     * 'ignored': Clients' browser will send data according to server spec (default); 'post': Clients' browser will send data
     * by POST; 'get': Clients' browser will send data by GET;
     */
    public readonly clientMethod!: pulumi.Output<string | undefined>;
    /**
     * Specify openid provider name for authorization
     */
    public readonly issuer!: pulumi.Output<string | undefined>;
    /**
     * Specify authorization server object name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly samplingEnables!: pulumi.Output<outputs.AamAuthenticationOauthAuthorizationServerSamplingEnable[] | undefined>;
    /**
     * 'post': AX will send data to server by POST (default); 'get': AX will send data to server by GET;
     */
    public readonly serverMethod!: pulumi.Output<string | undefined>;
    /**
     * Specify URI for token exchange
     */
    public readonly tokenEndpoint!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specify certificate to verify ID token signature
     */
    public readonly verificationCert!: pulumi.Output<string | undefined>;
    /**
     * Specify jwks file to verify ID token signature
     */
    public readonly verificationJwks!: pulumi.Output<string | undefined>;

    /**
     * Create a AamAuthenticationOauthAuthorizationServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AamAuthenticationOauthAuthorizationServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAuthenticationOauthAuthorizationServerArgs | AamAuthenticationOauthAuthorizationServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAuthenticationOauthAuthorizationServerState | undefined;
            resourceInputs["authorizationEndpoint"] = state ? state.authorizationEndpoint : undefined;
            resourceInputs["clientMethod"] = state ? state.clientMethod : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["serverMethod"] = state ? state.serverMethod : undefined;
            resourceInputs["tokenEndpoint"] = state ? state.tokenEndpoint : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["verificationCert"] = state ? state.verificationCert : undefined;
            resourceInputs["verificationJwks"] = state ? state.verificationJwks : undefined;
        } else {
            const args = argsOrState as AamAuthenticationOauthAuthorizationServerArgs | undefined;
            resourceInputs["authorizationEndpoint"] = args ? args.authorizationEndpoint : undefined;
            resourceInputs["clientMethod"] = args ? args.clientMethod : undefined;
            resourceInputs["issuer"] = args ? args.issuer : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["serverMethod"] = args ? args.serverMethod : undefined;
            resourceInputs["tokenEndpoint"] = args ? args.tokenEndpoint : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["verificationCert"] = args ? args.verificationCert : undefined;
            resourceInputs["verificationJwks"] = args ? args.verificationJwks : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAuthenticationOauthAuthorizationServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAuthenticationOauthAuthorizationServer resources.
 */
export interface AamAuthenticationOauthAuthorizationServerState {
    /**
     * Specify URI for authorization
     */
    authorizationEndpoint?: pulumi.Input<string>;
    /**
     * 'ignored': Clients' browser will send data according to server spec (default); 'post': Clients' browser will send data
     * by POST; 'get': Clients' browser will send data by GET;
     */
    clientMethod?: pulumi.Input<string>;
    /**
     * Specify openid provider name for authorization
     */
    issuer?: pulumi.Input<string>;
    /**
     * Specify authorization server object name
     */
    name?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationOauthAuthorizationServerSamplingEnable>[]>;
    /**
     * 'post': AX will send data to server by POST (default); 'get': AX will send data to server by GET;
     */
    serverMethod?: pulumi.Input<string>;
    /**
     * Specify URI for token exchange
     */
    tokenEndpoint?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify certificate to verify ID token signature
     */
    verificationCert?: pulumi.Input<string>;
    /**
     * Specify jwks file to verify ID token signature
     */
    verificationJwks?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAuthenticationOauthAuthorizationServer resource.
 */
export interface AamAuthenticationOauthAuthorizationServerArgs {
    /**
     * Specify URI for authorization
     */
    authorizationEndpoint?: pulumi.Input<string>;
    /**
     * 'ignored': Clients' browser will send data according to server spec (default); 'post': Clients' browser will send data
     * by POST; 'get': Clients' browser will send data by GET;
     */
    clientMethod?: pulumi.Input<string>;
    /**
     * Specify openid provider name for authorization
     */
    issuer?: pulumi.Input<string>;
    /**
     * Specify authorization server object name
     */
    name?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationOauthAuthorizationServerSamplingEnable>[]>;
    /**
     * 'post': AX will send data to server by POST (default); 'get': AX will send data to server by GET;
     */
    serverMethod?: pulumi.Input<string>;
    /**
     * Specify URI for token exchange
     */
    tokenEndpoint?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify certificate to verify ID token signature
     */
    verificationCert?: pulumi.Input<string>;
    /**
     * Specify jwks file to verify ID token signature
     */
    verificationJwks?: pulumi.Input<string>;
}
