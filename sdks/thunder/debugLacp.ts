// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DebugLacp extends pulumi.CustomResource {
    /**
     * Get an existing DebugLacp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugLacpState, opts?: pulumi.CustomResourceOptions): DebugLacp {
        return new DebugLacp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugLacp:DebugLacp';

    /**
     * Returns true if the given object is an instance of DebugLacp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugLacp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugLacp.__pulumiType;
    }

    /**
     * all - turn on all debugging
     */
    public readonly all!: pulumi.Output<number | undefined>;
    /**
     * cli - echo commands to console
     */
    public readonly cli!: pulumi.Output<number | undefined>;
    /**
     * detail - echo timer start/stop to console
     */
    public readonly detail!: pulumi.Output<number | undefined>;
    /**
     * event - echo events to console
     */
    public readonly event!: pulumi.Output<number | undefined>;
    /**
     * ha - echo High availability events to console
     */
    public readonly ha!: pulumi.Output<number | undefined>;
    /**
     * packet - echo packet contents to console
     */
    public readonly packet!: pulumi.Output<number | undefined>;
    /**
     * sync - echo synchronization to console
     */
    public readonly sync!: pulumi.Output<number | undefined>;
    /**
     * timer - echo timer expiry to console
     */
    public readonly timer!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DebugLacp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugLacpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugLacpArgs | DebugLacpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugLacpState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["cli"] = state ? state.cli : undefined;
            resourceInputs["detail"] = state ? state.detail : undefined;
            resourceInputs["event"] = state ? state.event : undefined;
            resourceInputs["ha"] = state ? state.ha : undefined;
            resourceInputs["packet"] = state ? state.packet : undefined;
            resourceInputs["sync"] = state ? state.sync : undefined;
            resourceInputs["timer"] = state ? state.timer : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DebugLacpArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["cli"] = args ? args.cli : undefined;
            resourceInputs["detail"] = args ? args.detail : undefined;
            resourceInputs["event"] = args ? args.event : undefined;
            resourceInputs["ha"] = args ? args.ha : undefined;
            resourceInputs["packet"] = args ? args.packet : undefined;
            resourceInputs["sync"] = args ? args.sync : undefined;
            resourceInputs["timer"] = args ? args.timer : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugLacp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugLacp resources.
 */
export interface DebugLacpState {
    /**
     * all - turn on all debugging
     */
    all?: pulumi.Input<number>;
    /**
     * cli - echo commands to console
     */
    cli?: pulumi.Input<number>;
    /**
     * detail - echo timer start/stop to console
     */
    detail?: pulumi.Input<number>;
    /**
     * event - echo events to console
     */
    event?: pulumi.Input<number>;
    /**
     * ha - echo High availability events to console
     */
    ha?: pulumi.Input<number>;
    /**
     * packet - echo packet contents to console
     */
    packet?: pulumi.Input<number>;
    /**
     * sync - echo synchronization to console
     */
    sync?: pulumi.Input<number>;
    /**
     * timer - echo timer expiry to console
     */
    timer?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DebugLacp resource.
 */
export interface DebugLacpArgs {
    /**
     * all - turn on all debugging
     */
    all?: pulumi.Input<number>;
    /**
     * cli - echo commands to console
     */
    cli?: pulumi.Input<number>;
    /**
     * detail - echo timer start/stop to console
     */
    detail?: pulumi.Input<number>;
    /**
     * event - echo events to console
     */
    event?: pulumi.Input<number>;
    /**
     * ha - echo High availability events to console
     */
    ha?: pulumi.Input<number>;
    /**
     * packet - echo packet contents to console
     */
    packet?: pulumi.Input<number>;
    /**
     * sync - echo synchronization to console
     */
    sync?: pulumi.Input<number>;
    /**
     * timer - echo timer expiry to console
     */
    timer?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
