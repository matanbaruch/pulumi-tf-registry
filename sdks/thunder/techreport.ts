// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Techreport extends pulumi.CustomResource {
    /**
     * Get an existing Techreport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TechreportState, opts?: pulumi.CustomResourceOptions): Techreport {
        return new Techreport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/techreport:Techreport';

    /**
     * Returns true if the given object is an instance of Techreport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Techreport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Techreport.__pulumiType;
    }

    /**
     * Disable the polling techreport
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * Enable 31 day poll techreports (default seven) on platforms with less than 32GB disk (no op otherwise)
     */
    public readonly enableFullHistory!: pulumi.Output<number | undefined>;
    public readonly interval!: pulumi.Output<outputs.TechreportInterval | undefined>;
    public readonly maxLogfileSize!: pulumi.Output<outputs.TechreportMaxLogfileSize | undefined>;
    public readonly maxPartitions!: pulumi.Output<outputs.TechreportMaxPartitions | undefined>;
    public readonly priorityPartitionLists!: pulumi.Output<outputs.TechreportPriorityPartitionList[] | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Techreport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TechreportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TechreportArgs | TechreportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TechreportState | undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["enableFullHistory"] = state ? state.enableFullHistory : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["maxLogfileSize"] = state ? state.maxLogfileSize : undefined;
            resourceInputs["maxPartitions"] = state ? state.maxPartitions : undefined;
            resourceInputs["priorityPartitionLists"] = state ? state.priorityPartitionLists : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TechreportArgs | undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["enableFullHistory"] = args ? args.enableFullHistory : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["maxLogfileSize"] = args ? args.maxLogfileSize : undefined;
            resourceInputs["maxPartitions"] = args ? args.maxPartitions : undefined;
            resourceInputs["priorityPartitionLists"] = args ? args.priorityPartitionLists : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Techreport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Techreport resources.
 */
export interface TechreportState {
    /**
     * Disable the polling techreport
     */
    disable?: pulumi.Input<number>;
    /**
     * Enable 31 day poll techreports (default seven) on platforms with less than 32GB disk (no op otherwise)
     */
    enableFullHistory?: pulumi.Input<number>;
    interval?: pulumi.Input<inputs.TechreportInterval>;
    maxLogfileSize?: pulumi.Input<inputs.TechreportMaxLogfileSize>;
    maxPartitions?: pulumi.Input<inputs.TechreportMaxPartitions>;
    priorityPartitionLists?: pulumi.Input<pulumi.Input<inputs.TechreportPriorityPartitionList>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Techreport resource.
 */
export interface TechreportArgs {
    /**
     * Disable the polling techreport
     */
    disable?: pulumi.Input<number>;
    /**
     * Enable 31 day poll techreports (default seven) on platforms with less than 32GB disk (no op otherwise)
     */
    enableFullHistory?: pulumi.Input<number>;
    interval?: pulumi.Input<inputs.TechreportInterval>;
    maxLogfileSize?: pulumi.Input<inputs.TechreportMaxLogfileSize>;
    maxPartitions?: pulumi.Input<inputs.TechreportMaxPartitions>;
    priorityPartitionLists?: pulumi.Input<pulumi.Input<inputs.TechreportPriorityPartitionList>[]>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
