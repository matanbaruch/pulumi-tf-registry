// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AcosEventsCollectorGroup extends pulumi.CustomResource {
    /**
     * Get an existing AcosEventsCollectorGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcosEventsCollectorGroupState, opts?: pulumi.CustomResourceOptions): AcosEventsCollectorGroup {
        return new AcosEventsCollectorGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/acosEventsCollectorGroup:AcosEventsCollectorGroup';

    /**
     * Returns true if the given object is an instance of AcosEventsCollectorGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AcosEventsCollectorGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AcosEventsCollectorGroup.__pulumiType;
    }

    /**
     * 'local0': Local use(Default); 'local1': Local use; 'local2': Local use; 'local3': Local use; 'local4': Local use;
     * 'local5': Local use; 'local6': Local use; 'local7': Local use; (Facility parameter for syslog messages)
     */
    public readonly facility!: pulumi.Output<string | undefined>;
    /**
     * 'syslog': log message format is syslog (Default); 'cef': log message format is cef; 'leef': log message format is leef;
     */
    public readonly format!: pulumi.Output<string | undefined>;
    /**
     * Health Check (Monitor Name)
     */
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    /**
     * 'round-robin': Log server selection will be based on round-robin (Default); 'hashing': Log messages at this node only;
     */
    public readonly logDistribution!: pulumi.Output<string | undefined>;
    public readonly logServerLists!: pulumi.Output<outputs.AcosEventsCollectorGroupLogServerList[] | undefined>;
    /**
     * Specify log server group name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'udp': use udp syslog protocol to send messages to log collector; 'tcp': use tcp syslog protocol to send messages to log
     * collector;
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Specify the log message rate per second(Default 500)
     */
    public readonly rate!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.AcosEventsCollectorGroupSamplingEnable[] | undefined>;
    /**
     * 'name': Hashing will be based on log server name (Default); 'ip-tuple': Hashing will be based on ip-tuple;
     */
    public readonly serverDistributionHash!: pulumi.Output<string | undefined>;
    /**
     * Use managament port to connect to the log servers
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AcosEventsCollectorGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AcosEventsCollectorGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcosEventsCollectorGroupArgs | AcosEventsCollectorGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcosEventsCollectorGroupState | undefined;
            resourceInputs["facility"] = state ? state.facility : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["logDistribution"] = state ? state.logDistribution : undefined;
            resourceInputs["logServerLists"] = state ? state.logServerLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["rate"] = state ? state.rate : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["serverDistributionHash"] = state ? state.serverDistributionHash : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AcosEventsCollectorGroupArgs | undefined;
            resourceInputs["facility"] = args ? args.facility : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["logDistribution"] = args ? args.logDistribution : undefined;
            resourceInputs["logServerLists"] = args ? args.logServerLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["rate"] = args ? args.rate : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["serverDistributionHash"] = args ? args.serverDistributionHash : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AcosEventsCollectorGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AcosEventsCollectorGroup resources.
 */
export interface AcosEventsCollectorGroupState {
    /**
     * 'local0': Local use(Default); 'local1': Local use; 'local2': Local use; 'local3': Local use; 'local4': Local use;
     * 'local5': Local use; 'local6': Local use; 'local7': Local use; (Facility parameter for syslog messages)
     */
    facility?: pulumi.Input<string>;
    /**
     * 'syslog': log message format is syslog (Default); 'cef': log message format is cef; 'leef': log message format is leef;
     */
    format?: pulumi.Input<string>;
    /**
     * Health Check (Monitor Name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * 'round-robin': Log server selection will be based on round-robin (Default); 'hashing': Log messages at this node only;
     */
    logDistribution?: pulumi.Input<string>;
    logServerLists?: pulumi.Input<pulumi.Input<inputs.AcosEventsCollectorGroupLogServerList>[]>;
    /**
     * Specify log server group name
     */
    name?: pulumi.Input<string>;
    /**
     * 'udp': use udp syslog protocol to send messages to log collector; 'tcp': use tcp syslog protocol to send messages to log
     * collector;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specify the log message rate per second(Default 500)
     */
    rate?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AcosEventsCollectorGroupSamplingEnable>[]>;
    /**
     * 'name': Hashing will be based on log server name (Default); 'ip-tuple': Hashing will be based on ip-tuple;
     */
    serverDistributionHash?: pulumi.Input<string>;
    /**
     * Use managament port to connect to the log servers
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AcosEventsCollectorGroup resource.
 */
export interface AcosEventsCollectorGroupArgs {
    /**
     * 'local0': Local use(Default); 'local1': Local use; 'local2': Local use; 'local3': Local use; 'local4': Local use;
     * 'local5': Local use; 'local6': Local use; 'local7': Local use; (Facility parameter for syslog messages)
     */
    facility?: pulumi.Input<string>;
    /**
     * 'syslog': log message format is syslog (Default); 'cef': log message format is cef; 'leef': log message format is leef;
     */
    format?: pulumi.Input<string>;
    /**
     * Health Check (Monitor Name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * 'round-robin': Log server selection will be based on round-robin (Default); 'hashing': Log messages at this node only;
     */
    logDistribution?: pulumi.Input<string>;
    logServerLists?: pulumi.Input<pulumi.Input<inputs.AcosEventsCollectorGroupLogServerList>[]>;
    /**
     * Specify log server group name
     */
    name?: pulumi.Input<string>;
    /**
     * 'udp': use udp syslog protocol to send messages to log collector; 'tcp': use tcp syslog protocol to send messages to log
     * collector;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specify the log message rate per second(Default 500)
     */
    rate?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AcosEventsCollectorGroupSamplingEnable>[]>;
    /**
     * 'name': Hashing will be based on log server name (Default); 'ip-tuple': Hashing will be based on ip-tuple;
     */
    serverDistributionHash?: pulumi.Input<string>;
    /**
     * Use managament port to connect to the log servers
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
