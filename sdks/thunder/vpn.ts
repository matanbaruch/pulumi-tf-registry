// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Vpn extends pulumi.CustomResource {
    /**
     * Get an existing Vpn resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnState, opts?: pulumi.CustomResourceOptions): Vpn {
        return new Vpn(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vpn:Vpn';

    /**
     * Returns true if the given object is an instance of Vpn.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpn {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpn.__pulumiType;
    }

    /**
     * Support asymmetric flows pass through IPsec tunnel
     */
    public readonly asymmetricFlowSupport!: pulumi.Output<number | undefined>;
    public readonly crl!: pulumi.Output<outputs.VpnCrl | undefined>;
    public readonly default!: pulumi.Output<outputs.VpnDefault | undefined>;
    /**
     * Enable exporting vpn statstics to Harmony
     */
    public readonly enableVpnMetrics!: pulumi.Output<number | undefined>;
    public readonly error!: pulumi.Output<outputs.VpnError | undefined>;
    public readonly errordump!: pulumi.Output<outputs.VpnErrordump | undefined>;
    /**
     * Enable session extended matching for packet comes from IPsec tunnel
     */
    public readonly extendedMatching!: pulumi.Output<number | undefined>;
    /**
     * Fragment after adding IPsec headers
     */
    public readonly fragmentAfterEncap!: pulumi.Output<number | undefined>;
    public readonly groupList!: pulumi.Output<outputs.VpnGroupList | undefined>;
    /**
     * Enable IKE Acceleration by Cavium Nitrox card
     */
    public readonly ikeAccEnable!: pulumi.Output<number | undefined>;
    public readonly ikeGatewayLists!: pulumi.Output<outputs.VpnIkeGatewayList[] | undefined>;
    /**
     * Enable IKE negotiation logging
     */
    public readonly ikeLoggingEnable!: pulumi.Output<number | undefined>;
    public readonly ikeSa!: pulumi.Output<outputs.VpnIkeSa | undefined>;
    public readonly ikeSaBrief!: pulumi.Output<outputs.VpnIkeSaBrief | undefined>;
    public readonly ikeSaClients!: pulumi.Output<outputs.VpnIkeSaClients | undefined>;
    /**
     * Timeout IKE-SA in connecting state in seconds (default 600s)
     */
    public readonly ikeSaTimeout!: pulumi.Output<number | undefined>;
    public readonly ikeStatsByGw!: pulumi.Output<outputs.VpnIkeStatsByGw | undefined>;
    public readonly ikeStatsGlobal!: pulumi.Output<outputs.VpnIkeStatsGlobal | undefined>;
    /**
     * Enable cipher check, IPsec SA cipher must weaker than IKE gateway cipher, and DES/3DES/MD5/null will not work.
     */
    public readonly ipsecCipherCheck!: pulumi.Output<number | undefined>;
    /**
     * Support record the error ipsec cavium information in dump file
     */
    public readonly ipsecErrorDump!: pulumi.Output<number | undefined>;
    public readonly ipsecGroupLists!: pulumi.Output<outputs.VpnIpsecGroupList[] | undefined>;
    public readonly ipsecLists!: pulumi.Output<outputs.VpnIpsecList[] | undefined>;
    /**
     * Drop MGMT traffic that is not match ipsec tunnel, share partition only
     */
    public readonly ipsecMgmtDefaultPolicyDrop!: pulumi.Output<number | undefined>;
    public readonly ipsecSa!: pulumi.Output<outputs.VpnIpsecSa | undefined>;
    public readonly ipsecSaByGw!: pulumi.Output<outputs.VpnIpsecSaByGw | undefined>;
    public readonly ipsecSaClients!: pulumi.Output<outputs.VpnIpsecSaClients | undefined>;
    public readonly ipsecSaStatsLists!: pulumi.Output<outputs.VpnIpsecSaStatsList[] | undefined>;
    /**
     * Support IKE jumbo fragment packet
     */
    public readonly jumboFragment!: pulumi.Output<number | undefined>;
    public readonly log!: pulumi.Output<outputs.VpnLog | undefined>;
    /**
     * Choose IPsec UDP source port based on port of inner flow (only for A10 to A10)
     */
    public readonly natTraversalFlowAffinity!: pulumi.Output<number | undefined>;
    public readonly ocsp!: pulumi.Output<outputs.VpnOcsp | undefined>;
    public readonly revocationLists!: pulumi.Output<outputs.VpnRevocationList[] | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.VpnSamplingEnable[] | undefined>;
    /**
     * Enable use of different hash algorithms for signature authentication in IKEv2
     */
    public readonly signatureAuthentication!: pulumi.Output<number | undefined>;
    /**
     * VPN module will work in stateful mode and create sessions
     */
    public readonly statefulMode!: pulumi.Output<number | undefined>;
    /**
     * Disable TCP MSS adjustment in SYN packet
     */
    public readonly tcpMssAdjustDisable!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Vpn resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnArgs | VpnState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnState | undefined;
            resourceInputs["asymmetricFlowSupport"] = state ? state.asymmetricFlowSupport : undefined;
            resourceInputs["crl"] = state ? state.crl : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["enableVpnMetrics"] = state ? state.enableVpnMetrics : undefined;
            resourceInputs["error"] = state ? state.error : undefined;
            resourceInputs["errordump"] = state ? state.errordump : undefined;
            resourceInputs["extendedMatching"] = state ? state.extendedMatching : undefined;
            resourceInputs["fragmentAfterEncap"] = state ? state.fragmentAfterEncap : undefined;
            resourceInputs["groupList"] = state ? state.groupList : undefined;
            resourceInputs["ikeAccEnable"] = state ? state.ikeAccEnable : undefined;
            resourceInputs["ikeGatewayLists"] = state ? state.ikeGatewayLists : undefined;
            resourceInputs["ikeLoggingEnable"] = state ? state.ikeLoggingEnable : undefined;
            resourceInputs["ikeSa"] = state ? state.ikeSa : undefined;
            resourceInputs["ikeSaBrief"] = state ? state.ikeSaBrief : undefined;
            resourceInputs["ikeSaClients"] = state ? state.ikeSaClients : undefined;
            resourceInputs["ikeSaTimeout"] = state ? state.ikeSaTimeout : undefined;
            resourceInputs["ikeStatsByGw"] = state ? state.ikeStatsByGw : undefined;
            resourceInputs["ikeStatsGlobal"] = state ? state.ikeStatsGlobal : undefined;
            resourceInputs["ipsecCipherCheck"] = state ? state.ipsecCipherCheck : undefined;
            resourceInputs["ipsecErrorDump"] = state ? state.ipsecErrorDump : undefined;
            resourceInputs["ipsecGroupLists"] = state ? state.ipsecGroupLists : undefined;
            resourceInputs["ipsecLists"] = state ? state.ipsecLists : undefined;
            resourceInputs["ipsecMgmtDefaultPolicyDrop"] = state ? state.ipsecMgmtDefaultPolicyDrop : undefined;
            resourceInputs["ipsecSa"] = state ? state.ipsecSa : undefined;
            resourceInputs["ipsecSaByGw"] = state ? state.ipsecSaByGw : undefined;
            resourceInputs["ipsecSaClients"] = state ? state.ipsecSaClients : undefined;
            resourceInputs["ipsecSaStatsLists"] = state ? state.ipsecSaStatsLists : undefined;
            resourceInputs["jumboFragment"] = state ? state.jumboFragment : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["natTraversalFlowAffinity"] = state ? state.natTraversalFlowAffinity : undefined;
            resourceInputs["ocsp"] = state ? state.ocsp : undefined;
            resourceInputs["revocationLists"] = state ? state.revocationLists : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["signatureAuthentication"] = state ? state.signatureAuthentication : undefined;
            resourceInputs["statefulMode"] = state ? state.statefulMode : undefined;
            resourceInputs["tcpMssAdjustDisable"] = state ? state.tcpMssAdjustDisable : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VpnArgs | undefined;
            resourceInputs["asymmetricFlowSupport"] = args ? args.asymmetricFlowSupport : undefined;
            resourceInputs["crl"] = args ? args.crl : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["enableVpnMetrics"] = args ? args.enableVpnMetrics : undefined;
            resourceInputs["error"] = args ? args.error : undefined;
            resourceInputs["errordump"] = args ? args.errordump : undefined;
            resourceInputs["extendedMatching"] = args ? args.extendedMatching : undefined;
            resourceInputs["fragmentAfterEncap"] = args ? args.fragmentAfterEncap : undefined;
            resourceInputs["groupList"] = args ? args.groupList : undefined;
            resourceInputs["ikeAccEnable"] = args ? args.ikeAccEnable : undefined;
            resourceInputs["ikeGatewayLists"] = args ? args.ikeGatewayLists : undefined;
            resourceInputs["ikeLoggingEnable"] = args ? args.ikeLoggingEnable : undefined;
            resourceInputs["ikeSa"] = args ? args.ikeSa : undefined;
            resourceInputs["ikeSaBrief"] = args ? args.ikeSaBrief : undefined;
            resourceInputs["ikeSaClients"] = args ? args.ikeSaClients : undefined;
            resourceInputs["ikeSaTimeout"] = args ? args.ikeSaTimeout : undefined;
            resourceInputs["ikeStatsByGw"] = args ? args.ikeStatsByGw : undefined;
            resourceInputs["ikeStatsGlobal"] = args ? args.ikeStatsGlobal : undefined;
            resourceInputs["ipsecCipherCheck"] = args ? args.ipsecCipherCheck : undefined;
            resourceInputs["ipsecErrorDump"] = args ? args.ipsecErrorDump : undefined;
            resourceInputs["ipsecGroupLists"] = args ? args.ipsecGroupLists : undefined;
            resourceInputs["ipsecLists"] = args ? args.ipsecLists : undefined;
            resourceInputs["ipsecMgmtDefaultPolicyDrop"] = args ? args.ipsecMgmtDefaultPolicyDrop : undefined;
            resourceInputs["ipsecSa"] = args ? args.ipsecSa : undefined;
            resourceInputs["ipsecSaByGw"] = args ? args.ipsecSaByGw : undefined;
            resourceInputs["ipsecSaClients"] = args ? args.ipsecSaClients : undefined;
            resourceInputs["ipsecSaStatsLists"] = args ? args.ipsecSaStatsLists : undefined;
            resourceInputs["jumboFragment"] = args ? args.jumboFragment : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["natTraversalFlowAffinity"] = args ? args.natTraversalFlowAffinity : undefined;
            resourceInputs["ocsp"] = args ? args.ocsp : undefined;
            resourceInputs["revocationLists"] = args ? args.revocationLists : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["signatureAuthentication"] = args ? args.signatureAuthentication : undefined;
            resourceInputs["statefulMode"] = args ? args.statefulMode : undefined;
            resourceInputs["tcpMssAdjustDisable"] = args ? args.tcpMssAdjustDisable : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpn.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Vpn resources.
 */
export interface VpnState {
    /**
     * Support asymmetric flows pass through IPsec tunnel
     */
    asymmetricFlowSupport?: pulumi.Input<number>;
    crl?: pulumi.Input<inputs.VpnCrl>;
    default?: pulumi.Input<inputs.VpnDefault>;
    /**
     * Enable exporting vpn statstics to Harmony
     */
    enableVpnMetrics?: pulumi.Input<number>;
    error?: pulumi.Input<inputs.VpnError>;
    errordump?: pulumi.Input<inputs.VpnErrordump>;
    /**
     * Enable session extended matching for packet comes from IPsec tunnel
     */
    extendedMatching?: pulumi.Input<number>;
    /**
     * Fragment after adding IPsec headers
     */
    fragmentAfterEncap?: pulumi.Input<number>;
    groupList?: pulumi.Input<inputs.VpnGroupList>;
    /**
     * Enable IKE Acceleration by Cavium Nitrox card
     */
    ikeAccEnable?: pulumi.Input<number>;
    ikeGatewayLists?: pulumi.Input<pulumi.Input<inputs.VpnIkeGatewayList>[]>;
    /**
     * Enable IKE negotiation logging
     */
    ikeLoggingEnable?: pulumi.Input<number>;
    ikeSa?: pulumi.Input<inputs.VpnIkeSa>;
    ikeSaBrief?: pulumi.Input<inputs.VpnIkeSaBrief>;
    ikeSaClients?: pulumi.Input<inputs.VpnIkeSaClients>;
    /**
     * Timeout IKE-SA in connecting state in seconds (default 600s)
     */
    ikeSaTimeout?: pulumi.Input<number>;
    ikeStatsByGw?: pulumi.Input<inputs.VpnIkeStatsByGw>;
    ikeStatsGlobal?: pulumi.Input<inputs.VpnIkeStatsGlobal>;
    /**
     * Enable cipher check, IPsec SA cipher must weaker than IKE gateway cipher, and DES/3DES/MD5/null will not work.
     */
    ipsecCipherCheck?: pulumi.Input<number>;
    /**
     * Support record the error ipsec cavium information in dump file
     */
    ipsecErrorDump?: pulumi.Input<number>;
    ipsecGroupLists?: pulumi.Input<pulumi.Input<inputs.VpnIpsecGroupList>[]>;
    ipsecLists?: pulumi.Input<pulumi.Input<inputs.VpnIpsecList>[]>;
    /**
     * Drop MGMT traffic that is not match ipsec tunnel, share partition only
     */
    ipsecMgmtDefaultPolicyDrop?: pulumi.Input<number>;
    ipsecSa?: pulumi.Input<inputs.VpnIpsecSa>;
    ipsecSaByGw?: pulumi.Input<inputs.VpnIpsecSaByGw>;
    ipsecSaClients?: pulumi.Input<inputs.VpnIpsecSaClients>;
    ipsecSaStatsLists?: pulumi.Input<pulumi.Input<inputs.VpnIpsecSaStatsList>[]>;
    /**
     * Support IKE jumbo fragment packet
     */
    jumboFragment?: pulumi.Input<number>;
    log?: pulumi.Input<inputs.VpnLog>;
    /**
     * Choose IPsec UDP source port based on port of inner flow (only for A10 to A10)
     */
    natTraversalFlowAffinity?: pulumi.Input<number>;
    ocsp?: pulumi.Input<inputs.VpnOcsp>;
    revocationLists?: pulumi.Input<pulumi.Input<inputs.VpnRevocationList>[]>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VpnSamplingEnable>[]>;
    /**
     * Enable use of different hash algorithms for signature authentication in IKEv2
     */
    signatureAuthentication?: pulumi.Input<number>;
    /**
     * VPN module will work in stateful mode and create sessions
     */
    statefulMode?: pulumi.Input<number>;
    /**
     * Disable TCP MSS adjustment in SYN packet
     */
    tcpMssAdjustDisable?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpn resource.
 */
export interface VpnArgs {
    /**
     * Support asymmetric flows pass through IPsec tunnel
     */
    asymmetricFlowSupport?: pulumi.Input<number>;
    crl?: pulumi.Input<inputs.VpnCrl>;
    default?: pulumi.Input<inputs.VpnDefault>;
    /**
     * Enable exporting vpn statstics to Harmony
     */
    enableVpnMetrics?: pulumi.Input<number>;
    error?: pulumi.Input<inputs.VpnError>;
    errordump?: pulumi.Input<inputs.VpnErrordump>;
    /**
     * Enable session extended matching for packet comes from IPsec tunnel
     */
    extendedMatching?: pulumi.Input<number>;
    /**
     * Fragment after adding IPsec headers
     */
    fragmentAfterEncap?: pulumi.Input<number>;
    groupList?: pulumi.Input<inputs.VpnGroupList>;
    /**
     * Enable IKE Acceleration by Cavium Nitrox card
     */
    ikeAccEnable?: pulumi.Input<number>;
    ikeGatewayLists?: pulumi.Input<pulumi.Input<inputs.VpnIkeGatewayList>[]>;
    /**
     * Enable IKE negotiation logging
     */
    ikeLoggingEnable?: pulumi.Input<number>;
    ikeSa?: pulumi.Input<inputs.VpnIkeSa>;
    ikeSaBrief?: pulumi.Input<inputs.VpnIkeSaBrief>;
    ikeSaClients?: pulumi.Input<inputs.VpnIkeSaClients>;
    /**
     * Timeout IKE-SA in connecting state in seconds (default 600s)
     */
    ikeSaTimeout?: pulumi.Input<number>;
    ikeStatsByGw?: pulumi.Input<inputs.VpnIkeStatsByGw>;
    ikeStatsGlobal?: pulumi.Input<inputs.VpnIkeStatsGlobal>;
    /**
     * Enable cipher check, IPsec SA cipher must weaker than IKE gateway cipher, and DES/3DES/MD5/null will not work.
     */
    ipsecCipherCheck?: pulumi.Input<number>;
    /**
     * Support record the error ipsec cavium information in dump file
     */
    ipsecErrorDump?: pulumi.Input<number>;
    ipsecGroupLists?: pulumi.Input<pulumi.Input<inputs.VpnIpsecGroupList>[]>;
    ipsecLists?: pulumi.Input<pulumi.Input<inputs.VpnIpsecList>[]>;
    /**
     * Drop MGMT traffic that is not match ipsec tunnel, share partition only
     */
    ipsecMgmtDefaultPolicyDrop?: pulumi.Input<number>;
    ipsecSa?: pulumi.Input<inputs.VpnIpsecSa>;
    ipsecSaByGw?: pulumi.Input<inputs.VpnIpsecSaByGw>;
    ipsecSaClients?: pulumi.Input<inputs.VpnIpsecSaClients>;
    ipsecSaStatsLists?: pulumi.Input<pulumi.Input<inputs.VpnIpsecSaStatsList>[]>;
    /**
     * Support IKE jumbo fragment packet
     */
    jumboFragment?: pulumi.Input<number>;
    log?: pulumi.Input<inputs.VpnLog>;
    /**
     * Choose IPsec UDP source port based on port of inner flow (only for A10 to A10)
     */
    natTraversalFlowAffinity?: pulumi.Input<number>;
    ocsp?: pulumi.Input<inputs.VpnOcsp>;
    revocationLists?: pulumi.Input<pulumi.Input<inputs.VpnRevocationList>[]>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VpnSamplingEnable>[]>;
    /**
     * Enable use of different hash algorithms for signature authentication in IKEv2
     */
    signatureAuthentication?: pulumi.Input<number>;
    /**
     * VPN module will work in stateful mode and create sessions
     */
    statefulMode?: pulumi.Input<number>;
    /**
     * Disable TCP MSS adjustment in SYN packet
     */
    tcpMssAdjustDisable?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
