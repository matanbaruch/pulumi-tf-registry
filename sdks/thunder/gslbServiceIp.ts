// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GslbServiceIp extends pulumi.CustomResource {
    /**
     * Get an existing GslbServiceIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbServiceIpState, opts?: pulumi.CustomResourceOptions): GslbServiceIp {
        return new GslbServiceIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/gslbServiceIp:GslbServiceIp';

    /**
     * Returns true if the given object is an instance of GslbServiceIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GslbServiceIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GslbServiceIp.__pulumiType;
    }

    /**
     * 'enable': Enable this GSLB server; 'disable': Disable this GSLB server;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * External IP address for NAT
     */
    public readonly externalIp!: pulumi.Output<string | undefined>;
    /**
     * Health Check Monitor (Monitor Name)
     */
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    /**
     * Disable Health Check Monitor
     */
    public readonly healthCheckDisable!: pulumi.Output<number | undefined>;
    /**
     * Disable GSLB Protocol Health Monitor
     */
    public readonly healthCheckProtocolDisable!: pulumi.Output<number | undefined>;
    /**
     * IP address
     */
    public readonly ipAddress!: pulumi.Output<string | undefined>;
    /**
     * IPv6 address Mapping (Applicable only when service-ip has an IPv4 Address)
     */
    public readonly ipv6!: pulumi.Output<string | undefined>;
    /**
     * IPV6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * Service-IP Name
     */
    public readonly nodeName!: pulumi.Output<string>;
    public readonly portLists!: pulumi.Output<outputs.GslbServiceIpPortList[] | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.GslbServiceIpSamplingEnable[] | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a GslbServiceIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbServiceIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbServiceIpArgs | GslbServiceIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbServiceIpState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["externalIp"] = state ? state.externalIp : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = state ? state.healthCheckDisable : undefined;
            resourceInputs["healthCheckProtocolDisable"] = state ? state.healthCheckProtocolDisable : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["nodeName"] = state ? state.nodeName : undefined;
            resourceInputs["portLists"] = state ? state.portLists : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GslbServiceIpArgs | undefined;
            if ((!args || args.nodeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["externalIp"] = args ? args.externalIp : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = args ? args.healthCheckDisable : undefined;
            resourceInputs["healthCheckProtocolDisable"] = args ? args.healthCheckProtocolDisable : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["nodeName"] = args ? args.nodeName : undefined;
            resourceInputs["portLists"] = args ? args.portLists : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GslbServiceIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GslbServiceIp resources.
 */
export interface GslbServiceIpState {
    /**
     * 'enable': Enable this GSLB server; 'disable': Disable this GSLB server;
     */
    action?: pulumi.Input<string>;
    /**
     * External IP address for NAT
     */
    externalIp?: pulumi.Input<string>;
    /**
     * Health Check Monitor (Monitor Name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable Health Check Monitor
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Disable GSLB Protocol Health Monitor
     */
    healthCheckProtocolDisable?: pulumi.Input<number>;
    /**
     * IP address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IPv6 address Mapping (Applicable only when service-ip has an IPv4 Address)
     */
    ipv6?: pulumi.Input<string>;
    /**
     * IPV6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Service-IP Name
     */
    nodeName?: pulumi.Input<string>;
    portLists?: pulumi.Input<pulumi.Input<inputs.GslbServiceIpPortList>[]>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.GslbServiceIpSamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GslbServiceIp resource.
 */
export interface GslbServiceIpArgs {
    /**
     * 'enable': Enable this GSLB server; 'disable': Disable this GSLB server;
     */
    action?: pulumi.Input<string>;
    /**
     * External IP address for NAT
     */
    externalIp?: pulumi.Input<string>;
    /**
     * Health Check Monitor (Monitor Name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable Health Check Monitor
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Disable GSLB Protocol Health Monitor
     */
    healthCheckProtocolDisable?: pulumi.Input<number>;
    /**
     * IP address
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * IPv6 address Mapping (Applicable only when service-ip has an IPv4 Address)
     */
    ipv6?: pulumi.Input<string>;
    /**
     * IPV6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Service-IP Name
     */
    nodeName: pulumi.Input<string>;
    portLists?: pulumi.Input<pulumi.Input<inputs.GslbServiceIpPortList>[]>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.GslbServiceIpSamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
