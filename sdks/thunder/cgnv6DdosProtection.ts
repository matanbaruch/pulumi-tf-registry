// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6DdosProtection extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6DdosProtection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6DdosProtectionState, opts?: pulumi.CustomResourceOptions): Cgnv6DdosProtection {
        return new Cgnv6DdosProtection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6DdosProtection:Cgnv6DdosProtection';

    /**
     * Returns true if the given object is an instance of Cgnv6DdosProtection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6DdosProtection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6DdosProtection.__pulumiType;
    }

    public readonly disableNatIpByBgp!: pulumi.Output<outputs.Cgnv6DdosProtectionDisableNatIpByBgp | undefined>;
    /**
     * 'local': Enable local logs only; 'remote': Enable logging to remote server & IPFIX; 'both': Enable both local & remote
     * logs;
     */
    public readonly enableAction!: pulumi.Output<string | undefined>;
    public readonly ipEntries!: pulumi.Output<outputs.Cgnv6DdosProtectionIpEntries | undefined>;
    public readonly l4Entries!: pulumi.Output<outputs.Cgnv6DdosProtectionL4Entries | undefined>;
    /**
     * 'enable': enable CGN DDoS protection logging; 'disable': Disable both local & remote CGN DDoS protection logging;
     */
    public readonly loggingAction!: pulumi.Output<string | undefined>;
    /**
     * Configure maximum HW entries
     */
    public readonly maxHwEntries!: pulumi.Output<number | undefined>;
    public readonly packetsPerSecond!: pulumi.Output<outputs.Cgnv6DdosProtectionPacketsPerSecond | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.Cgnv6DdosProtectionSamplingEnable[] | undefined>;
    public readonly synCookie!: pulumi.Output<outputs.Cgnv6DdosProtectionSynCookie | undefined>;
    /**
     * 'enable': Enable CGNV6 NAT pool DDoS protection (default); 'disable': Disable CGNV6 NAT pool DDoS protection;
     */
    public readonly toggle!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Disable NAT IP based on DDoS zone name set in BGP
     */
    public readonly zone!: pulumi.Output<string | undefined>;

    /**
     * Create a Cgnv6DdosProtection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6DdosProtectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6DdosProtectionArgs | Cgnv6DdosProtectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6DdosProtectionState | undefined;
            resourceInputs["disableNatIpByBgp"] = state ? state.disableNatIpByBgp : undefined;
            resourceInputs["enableAction"] = state ? state.enableAction : undefined;
            resourceInputs["ipEntries"] = state ? state.ipEntries : undefined;
            resourceInputs["l4Entries"] = state ? state.l4Entries : undefined;
            resourceInputs["loggingAction"] = state ? state.loggingAction : undefined;
            resourceInputs["maxHwEntries"] = state ? state.maxHwEntries : undefined;
            resourceInputs["packetsPerSecond"] = state ? state.packetsPerSecond : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["synCookie"] = state ? state.synCookie : undefined;
            resourceInputs["toggle"] = state ? state.toggle : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as Cgnv6DdosProtectionArgs | undefined;
            resourceInputs["disableNatIpByBgp"] = args ? args.disableNatIpByBgp : undefined;
            resourceInputs["enableAction"] = args ? args.enableAction : undefined;
            resourceInputs["ipEntries"] = args ? args.ipEntries : undefined;
            resourceInputs["l4Entries"] = args ? args.l4Entries : undefined;
            resourceInputs["loggingAction"] = args ? args.loggingAction : undefined;
            resourceInputs["maxHwEntries"] = args ? args.maxHwEntries : undefined;
            resourceInputs["packetsPerSecond"] = args ? args.packetsPerSecond : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["synCookie"] = args ? args.synCookie : undefined;
            resourceInputs["toggle"] = args ? args.toggle : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6DdosProtection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6DdosProtection resources.
 */
export interface Cgnv6DdosProtectionState {
    disableNatIpByBgp?: pulumi.Input<inputs.Cgnv6DdosProtectionDisableNatIpByBgp>;
    /**
     * 'local': Enable local logs only; 'remote': Enable logging to remote server & IPFIX; 'both': Enable both local & remote
     * logs;
     */
    enableAction?: pulumi.Input<string>;
    ipEntries?: pulumi.Input<inputs.Cgnv6DdosProtectionIpEntries>;
    l4Entries?: pulumi.Input<inputs.Cgnv6DdosProtectionL4Entries>;
    /**
     * 'enable': enable CGN DDoS protection logging; 'disable': Disable both local & remote CGN DDoS protection logging;
     */
    loggingAction?: pulumi.Input<string>;
    /**
     * Configure maximum HW entries
     */
    maxHwEntries?: pulumi.Input<number>;
    packetsPerSecond?: pulumi.Input<inputs.Cgnv6DdosProtectionPacketsPerSecond>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6DdosProtectionSamplingEnable>[]>;
    synCookie?: pulumi.Input<inputs.Cgnv6DdosProtectionSynCookie>;
    /**
     * 'enable': Enable CGNV6 NAT pool DDoS protection (default); 'disable': Disable CGNV6 NAT pool DDoS protection;
     */
    toggle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Disable NAT IP based on DDoS zone name set in BGP
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6DdosProtection resource.
 */
export interface Cgnv6DdosProtectionArgs {
    disableNatIpByBgp?: pulumi.Input<inputs.Cgnv6DdosProtectionDisableNatIpByBgp>;
    /**
     * 'local': Enable local logs only; 'remote': Enable logging to remote server & IPFIX; 'both': Enable both local & remote
     * logs;
     */
    enableAction?: pulumi.Input<string>;
    ipEntries?: pulumi.Input<inputs.Cgnv6DdosProtectionIpEntries>;
    l4Entries?: pulumi.Input<inputs.Cgnv6DdosProtectionL4Entries>;
    /**
     * 'enable': enable CGN DDoS protection logging; 'disable': Disable both local & remote CGN DDoS protection logging;
     */
    loggingAction?: pulumi.Input<string>;
    /**
     * Configure maximum HW entries
     */
    maxHwEntries?: pulumi.Input<number>;
    packetsPerSecond?: pulumi.Input<inputs.Cgnv6DdosProtectionPacketsPerSecond>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6DdosProtectionSamplingEnable>[]>;
    synCookie?: pulumi.Input<inputs.Cgnv6DdosProtectionSynCookie>;
    /**
     * 'enable': Enable CGNV6 NAT pool DDoS protection (default); 'disable': Disable CGNV6 NAT pool DDoS protection;
     */
    toggle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Disable NAT IP based on DDoS zone name set in BGP
     */
    zone?: pulumi.Input<string>;
}
