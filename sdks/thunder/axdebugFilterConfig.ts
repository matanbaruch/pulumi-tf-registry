// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AxdebugFilterConfig extends pulumi.CustomResource {
    /**
     * Get an existing AxdebugFilterConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AxdebugFilterConfigState, opts?: pulumi.CustomResourceOptions): AxdebugFilterConfig {
        return new AxdebugFilterConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/axdebugFilterConfig:AxdebugFilterConfig';

    /**
     * Returns true if the given object is an instance of AxdebugFilterConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AxdebugFilterConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AxdebugFilterConfig.__pulumiType;
    }

    /**
     * value to compare
     */
    public readonly compHex!: pulumi.Output<string | undefined>;
    /**
     * Destination
     */
    public readonly dst!: pulumi.Output<number | undefined>;
    /**
     * dest IP
     */
    public readonly dstIp!: pulumi.Output<number | undefined>;
    /**
     * dest ip address
     */
    public readonly dstIpv4Address!: pulumi.Output<string | undefined>;
    /**
     * dest mac address
     */
    public readonly dstMac!: pulumi.Output<number | undefined>;
    /**
     * dest mac address
     */
    public readonly dstMacAddr!: pulumi.Output<string | undefined>;
    /**
     * dest port number
     */
    public readonly dstPort!: pulumi.Output<number | undefined>;
    /**
     * dest Port number
     */
    public readonly dstPortNum!: pulumi.Output<number | undefined>;
    /**
     * Define hex value
     */
    public readonly hex!: pulumi.Output<number | undefined>;
    /**
     * Define decimal value
     */
    public readonly integer!: pulumi.Output<number | undefined>;
    /**
     * value to compare
     */
    public readonly integerComp!: pulumi.Output<number | undefined>;
    /**
     * max value
     */
    public readonly integerMax!: pulumi.Output<number | undefined>;
    /**
     * min value
     */
    public readonly integerMin!: pulumi.Output<number | undefined>;
    /**
     * IP
     */
    public readonly ip!: pulumi.Output<number | undefined>;
    /**
     * ip address
     */
    public readonly ipv4Address!: pulumi.Output<string | undefined>;
    /**
     * IP subnet mask
     */
    public readonly ipv4Netmask!: pulumi.Output<string | undefined>;
    /**
     * IPV6
     */
    public readonly ipv6!: pulumi.Output<number | undefined>;
    /**
     * ipv6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * 'arp': arp; 'neighbor': neighbor;
     */
    public readonly l3Proto!: pulumi.Output<string | undefined>;
    /**
     * byte length
     */
    public readonly length!: pulumi.Output<number | undefined>;
    /**
     * mac address
     */
    public readonly mac!: pulumi.Output<number | undefined>;
    /**
     * mac address
     */
    public readonly macAddr!: pulumi.Output<string | undefined>;
    /**
     * max value
     */
    public readonly maxHex!: pulumi.Output<string | undefined>;
    /**
     * min value
     */
    public readonly minHex!: pulumi.Output<string | undefined>;
    /**
     * Specify filter id
     */
    public readonly number!: pulumi.Output<number>;
    /**
     * byte offset
     */
    public readonly offset!: pulumi.Output<number | undefined>;
    /**
     * 'gt': greater than; 'gte': greater than or equal to; 'se': smaller than or equal to; 'st': smaller than; 'eq': equal to;
     * 'range': select a range;
     */
    public readonly operRange!: pulumi.Output<string | undefined>;
    /**
     * port configurations
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * max port number
     */
    public readonly portNumMax!: pulumi.Output<number | undefined>;
    /**
     * min port number
     */
    public readonly portNumMin!: pulumi.Output<number | undefined>;
    /**
     * protocol number
     */
    public readonly protNum!: pulumi.Output<number | undefined>;
    /**
     * ip protocol number
     */
    public readonly proto!: pulumi.Output<number | undefined>;
    /**
     * 'icmp': icmp; 'icmpv6': icmpv6; 'tcp': tcp; 'udp': udp;
     */
    public readonly protoVal!: pulumi.Output<string | undefined>;
    /**
     * Src
     */
    public readonly src!: pulumi.Output<number | undefined>;
    /**
     * src IP
     */
    public readonly srcIp!: pulumi.Output<number | undefined>;
    /**
     * src ip address
     */
    public readonly srcIpv4Address!: pulumi.Output<string | undefined>;
    /**
     * src mac address
     */
    public readonly srcMac!: pulumi.Output<number | undefined>;
    /**
     * src mac address
     */
    public readonly srcMacAddr!: pulumi.Output<string | undefined>;
    /**
     * src port number
     */
    public readonly srcPort!: pulumi.Output<number | undefined>;
    /**
     * src Port number
     */
    public readonly srcPortNum!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Define hex value
     */
    public readonly word!: pulumi.Output<number | undefined>;
    /**
     * WORD0 to compare
     */
    public readonly word0!: pulumi.Output<string | undefined>;
    /**
     * WORD min value
     */
    public readonly word1!: pulumi.Output<string | undefined>;
    /**
     * WORD max value
     */
    public readonly word2!: pulumi.Output<string | undefined>;

    /**
     * Create a AxdebugFilterConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AxdebugFilterConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AxdebugFilterConfigArgs | AxdebugFilterConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AxdebugFilterConfigState | undefined;
            resourceInputs["compHex"] = state ? state.compHex : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["dstIp"] = state ? state.dstIp : undefined;
            resourceInputs["dstIpv4Address"] = state ? state.dstIpv4Address : undefined;
            resourceInputs["dstMac"] = state ? state.dstMac : undefined;
            resourceInputs["dstMacAddr"] = state ? state.dstMacAddr : undefined;
            resourceInputs["dstPort"] = state ? state.dstPort : undefined;
            resourceInputs["dstPortNum"] = state ? state.dstPortNum : undefined;
            resourceInputs["hex"] = state ? state.hex : undefined;
            resourceInputs["integer"] = state ? state.integer : undefined;
            resourceInputs["integerComp"] = state ? state.integerComp : undefined;
            resourceInputs["integerMax"] = state ? state.integerMax : undefined;
            resourceInputs["integerMin"] = state ? state.integerMin : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv4Netmask"] = state ? state.ipv4Netmask : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["l3Proto"] = state ? state.l3Proto : undefined;
            resourceInputs["length"] = state ? state.length : undefined;
            resourceInputs["mac"] = state ? state.mac : undefined;
            resourceInputs["macAddr"] = state ? state.macAddr : undefined;
            resourceInputs["maxHex"] = state ? state.maxHex : undefined;
            resourceInputs["minHex"] = state ? state.minHex : undefined;
            resourceInputs["number"] = state ? state.number : undefined;
            resourceInputs["offset"] = state ? state.offset : undefined;
            resourceInputs["operRange"] = state ? state.operRange : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portNumMax"] = state ? state.portNumMax : undefined;
            resourceInputs["portNumMin"] = state ? state.portNumMin : undefined;
            resourceInputs["protNum"] = state ? state.protNum : undefined;
            resourceInputs["proto"] = state ? state.proto : undefined;
            resourceInputs["protoVal"] = state ? state.protoVal : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["srcIp"] = state ? state.srcIp : undefined;
            resourceInputs["srcIpv4Address"] = state ? state.srcIpv4Address : undefined;
            resourceInputs["srcMac"] = state ? state.srcMac : undefined;
            resourceInputs["srcMacAddr"] = state ? state.srcMacAddr : undefined;
            resourceInputs["srcPort"] = state ? state.srcPort : undefined;
            resourceInputs["srcPortNum"] = state ? state.srcPortNum : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["word"] = state ? state.word : undefined;
            resourceInputs["word0"] = state ? state.word0 : undefined;
            resourceInputs["word1"] = state ? state.word1 : undefined;
            resourceInputs["word2"] = state ? state.word2 : undefined;
        } else {
            const args = argsOrState as AxdebugFilterConfigArgs | undefined;
            if ((!args || args.number === undefined) && !opts.urn) {
                throw new Error("Missing required property 'number'");
            }
            resourceInputs["compHex"] = args ? args.compHex : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["dstIp"] = args ? args.dstIp : undefined;
            resourceInputs["dstIpv4Address"] = args ? args.dstIpv4Address : undefined;
            resourceInputs["dstMac"] = args ? args.dstMac : undefined;
            resourceInputs["dstMacAddr"] = args ? args.dstMacAddr : undefined;
            resourceInputs["dstPort"] = args ? args.dstPort : undefined;
            resourceInputs["dstPortNum"] = args ? args.dstPortNum : undefined;
            resourceInputs["hex"] = args ? args.hex : undefined;
            resourceInputs["integer"] = args ? args.integer : undefined;
            resourceInputs["integerComp"] = args ? args.integerComp : undefined;
            resourceInputs["integerMax"] = args ? args.integerMax : undefined;
            resourceInputs["integerMin"] = args ? args.integerMin : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            resourceInputs["ipv4Netmask"] = args ? args.ipv4Netmask : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["l3Proto"] = args ? args.l3Proto : undefined;
            resourceInputs["length"] = args ? args.length : undefined;
            resourceInputs["mac"] = args ? args.mac : undefined;
            resourceInputs["macAddr"] = args ? args.macAddr : undefined;
            resourceInputs["maxHex"] = args ? args.maxHex : undefined;
            resourceInputs["minHex"] = args ? args.minHex : undefined;
            resourceInputs["number"] = args ? args.number : undefined;
            resourceInputs["offset"] = args ? args.offset : undefined;
            resourceInputs["operRange"] = args ? args.operRange : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["portNumMax"] = args ? args.portNumMax : undefined;
            resourceInputs["portNumMin"] = args ? args.portNumMin : undefined;
            resourceInputs["protNum"] = args ? args.protNum : undefined;
            resourceInputs["proto"] = args ? args.proto : undefined;
            resourceInputs["protoVal"] = args ? args.protoVal : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["srcIp"] = args ? args.srcIp : undefined;
            resourceInputs["srcIpv4Address"] = args ? args.srcIpv4Address : undefined;
            resourceInputs["srcMac"] = args ? args.srcMac : undefined;
            resourceInputs["srcMacAddr"] = args ? args.srcMacAddr : undefined;
            resourceInputs["srcPort"] = args ? args.srcPort : undefined;
            resourceInputs["srcPortNum"] = args ? args.srcPortNum : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["word"] = args ? args.word : undefined;
            resourceInputs["word0"] = args ? args.word0 : undefined;
            resourceInputs["word1"] = args ? args.word1 : undefined;
            resourceInputs["word2"] = args ? args.word2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AxdebugFilterConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AxdebugFilterConfig resources.
 */
export interface AxdebugFilterConfigState {
    /**
     * value to compare
     */
    compHex?: pulumi.Input<string>;
    /**
     * Destination
     */
    dst?: pulumi.Input<number>;
    /**
     * dest IP
     */
    dstIp?: pulumi.Input<number>;
    /**
     * dest ip address
     */
    dstIpv4Address?: pulumi.Input<string>;
    /**
     * dest mac address
     */
    dstMac?: pulumi.Input<number>;
    /**
     * dest mac address
     */
    dstMacAddr?: pulumi.Input<string>;
    /**
     * dest port number
     */
    dstPort?: pulumi.Input<number>;
    /**
     * dest Port number
     */
    dstPortNum?: pulumi.Input<number>;
    /**
     * Define hex value
     */
    hex?: pulumi.Input<number>;
    /**
     * Define decimal value
     */
    integer?: pulumi.Input<number>;
    /**
     * value to compare
     */
    integerComp?: pulumi.Input<number>;
    /**
     * max value
     */
    integerMax?: pulumi.Input<number>;
    /**
     * min value
     */
    integerMin?: pulumi.Input<number>;
    /**
     * IP
     */
    ip?: pulumi.Input<number>;
    /**
     * ip address
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    ipv4Netmask?: pulumi.Input<string>;
    /**
     * IPV6
     */
    ipv6?: pulumi.Input<number>;
    /**
     * ipv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * 'arp': arp; 'neighbor': neighbor;
     */
    l3Proto?: pulumi.Input<string>;
    /**
     * byte length
     */
    length?: pulumi.Input<number>;
    /**
     * mac address
     */
    mac?: pulumi.Input<number>;
    /**
     * mac address
     */
    macAddr?: pulumi.Input<string>;
    /**
     * max value
     */
    maxHex?: pulumi.Input<string>;
    /**
     * min value
     */
    minHex?: pulumi.Input<string>;
    /**
     * Specify filter id
     */
    number?: pulumi.Input<number>;
    /**
     * byte offset
     */
    offset?: pulumi.Input<number>;
    /**
     * 'gt': greater than; 'gte': greater than or equal to; 'se': smaller than or equal to; 'st': smaller than; 'eq': equal to;
     * 'range': select a range;
     */
    operRange?: pulumi.Input<string>;
    /**
     * port configurations
     */
    port?: pulumi.Input<number>;
    /**
     * max port number
     */
    portNumMax?: pulumi.Input<number>;
    /**
     * min port number
     */
    portNumMin?: pulumi.Input<number>;
    /**
     * protocol number
     */
    protNum?: pulumi.Input<number>;
    /**
     * ip protocol number
     */
    proto?: pulumi.Input<number>;
    /**
     * 'icmp': icmp; 'icmpv6': icmpv6; 'tcp': tcp; 'udp': udp;
     */
    protoVal?: pulumi.Input<string>;
    /**
     * Src
     */
    src?: pulumi.Input<number>;
    /**
     * src IP
     */
    srcIp?: pulumi.Input<number>;
    /**
     * src ip address
     */
    srcIpv4Address?: pulumi.Input<string>;
    /**
     * src mac address
     */
    srcMac?: pulumi.Input<number>;
    /**
     * src mac address
     */
    srcMacAddr?: pulumi.Input<string>;
    /**
     * src port number
     */
    srcPort?: pulumi.Input<number>;
    /**
     * src Port number
     */
    srcPortNum?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Define hex value
     */
    word?: pulumi.Input<number>;
    /**
     * WORD0 to compare
     */
    word0?: pulumi.Input<string>;
    /**
     * WORD min value
     */
    word1?: pulumi.Input<string>;
    /**
     * WORD max value
     */
    word2?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AxdebugFilterConfig resource.
 */
export interface AxdebugFilterConfigArgs {
    /**
     * value to compare
     */
    compHex?: pulumi.Input<string>;
    /**
     * Destination
     */
    dst?: pulumi.Input<number>;
    /**
     * dest IP
     */
    dstIp?: pulumi.Input<number>;
    /**
     * dest ip address
     */
    dstIpv4Address?: pulumi.Input<string>;
    /**
     * dest mac address
     */
    dstMac?: pulumi.Input<number>;
    /**
     * dest mac address
     */
    dstMacAddr?: pulumi.Input<string>;
    /**
     * dest port number
     */
    dstPort?: pulumi.Input<number>;
    /**
     * dest Port number
     */
    dstPortNum?: pulumi.Input<number>;
    /**
     * Define hex value
     */
    hex?: pulumi.Input<number>;
    /**
     * Define decimal value
     */
    integer?: pulumi.Input<number>;
    /**
     * value to compare
     */
    integerComp?: pulumi.Input<number>;
    /**
     * max value
     */
    integerMax?: pulumi.Input<number>;
    /**
     * min value
     */
    integerMin?: pulumi.Input<number>;
    /**
     * IP
     */
    ip?: pulumi.Input<number>;
    /**
     * ip address
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * IP subnet mask
     */
    ipv4Netmask?: pulumi.Input<string>;
    /**
     * IPV6
     */
    ipv6?: pulumi.Input<number>;
    /**
     * ipv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * 'arp': arp; 'neighbor': neighbor;
     */
    l3Proto?: pulumi.Input<string>;
    /**
     * byte length
     */
    length?: pulumi.Input<number>;
    /**
     * mac address
     */
    mac?: pulumi.Input<number>;
    /**
     * mac address
     */
    macAddr?: pulumi.Input<string>;
    /**
     * max value
     */
    maxHex?: pulumi.Input<string>;
    /**
     * min value
     */
    minHex?: pulumi.Input<string>;
    /**
     * Specify filter id
     */
    number: pulumi.Input<number>;
    /**
     * byte offset
     */
    offset?: pulumi.Input<number>;
    /**
     * 'gt': greater than; 'gte': greater than or equal to; 'se': smaller than or equal to; 'st': smaller than; 'eq': equal to;
     * 'range': select a range;
     */
    operRange?: pulumi.Input<string>;
    /**
     * port configurations
     */
    port?: pulumi.Input<number>;
    /**
     * max port number
     */
    portNumMax?: pulumi.Input<number>;
    /**
     * min port number
     */
    portNumMin?: pulumi.Input<number>;
    /**
     * protocol number
     */
    protNum?: pulumi.Input<number>;
    /**
     * ip protocol number
     */
    proto?: pulumi.Input<number>;
    /**
     * 'icmp': icmp; 'icmpv6': icmpv6; 'tcp': tcp; 'udp': udp;
     */
    protoVal?: pulumi.Input<string>;
    /**
     * Src
     */
    src?: pulumi.Input<number>;
    /**
     * src IP
     */
    srcIp?: pulumi.Input<number>;
    /**
     * src ip address
     */
    srcIpv4Address?: pulumi.Input<string>;
    /**
     * src mac address
     */
    srcMac?: pulumi.Input<number>;
    /**
     * src mac address
     */
    srcMacAddr?: pulumi.Input<string>;
    /**
     * src port number
     */
    srcPort?: pulumi.Input<number>;
    /**
     * src Port number
     */
    srcPortNum?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Define hex value
     */
    word?: pulumi.Input<number>;
    /**
     * WORD0 to compare
     */
    word0?: pulumi.Input<string>;
    /**
     * WORD min value
     */
    word1?: pulumi.Input<string>;
    /**
     * WORD max value
     */
    word2?: pulumi.Input<string>;
}
