// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDetectionSettings extends pulumi.CustomResource {
    /**
     * Get an existing DdosDetectionSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDetectionSettingsState, opts?: pulumi.CustomResourceOptions): DdosDetectionSettings {
        return new DdosDetectionSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDetectionSettings:DdosDetectionSettings';

    /**
     * Returns true if the given object is an instance of DdosDetectionSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDetectionSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDetectionSettings.__pulumiType;
    }

    /**
     * Control cpu usage threshold for DDoS detection
     */
    public readonly ctrlCpuUsage!: pulumi.Output<number | undefined>;
    /**
     * Configure de-escalation needed time in minutes from level 1 to 0.(default 1 minutes)
     */
    public readonly deEscalationQuietTime!: pulumi.Output<number | undefined>;
    /**
     * Configure the number of dedicated cores for detection
     */
    public readonly dedicatedCpus!: pulumi.Output<number | undefined>;
    /**
     * Configure detection window size in seconds (DDoS detection window size in seconds(default: 1))
     */
    public readonly detectionWindowSize!: pulumi.Output<number | undefined>;
    /**
     * 'standalone': Standalone detector; 'on-box': Mitigator and Detector on the same box; 'auto-svc-discovery': Auto Service
     * discovery using Visibility module (Deprecatd);
     */
    public readonly detectorMode!: pulumi.Output<string | undefined>;
    public readonly entrySaving!: pulumi.Output<outputs.DdosDetectionSettingsEntrySaving | undefined>;
    /**
     * Configure Baselining and export interval in seconds (DDoS Baselining and export interval in seconds(default: 20))
     */
    public readonly exportInterval!: pulumi.Output<number | undefined>;
    /**
     * Enable full core
     */
    public readonly fullCoreEnable!: pulumi.Output<number | undefined>;
    /**
     * histogram de-escalate sensitivity for DDoS detection
     */
    public readonly histogramDeEscalatePercentage!: pulumi.Output<number | undefined>;
    /**
     * histogram escalate sensitivity for DDoS detection
     */
    public readonly histogramEscalatePercentage!: pulumi.Output<number | undefined>;
    /**
     * Initial learning interval (in hours) before processing
     */
    public readonly initialLearningInterval!: pulumi.Output<number | undefined>;
    /**
     * multiplier for flooding detection threshold in network objects (default 2x threshold)
     */
    public readonly networkObjectFloodingMultiple!: pulumi.Output<number | undefined>;
    /**
     * '5': 5 seconds; '10': 10 seconds; '15': 15 seconds; '30': 30 seconds; (DDoS detection window size in seconds(default:
     * 30))
     */
    public readonly networkObjectWindowSize!: pulumi.Output<string | undefined>;
    /**
     * 'enable': Enable detection notification debug log (default: disabled);
     */
    public readonly notificationDebugLog!: pulumi.Output<string | undefined>;
    public readonly pktSampling!: pulumi.Output<outputs.DdosDetectionSettingsPktSampling | undefined>;
    public readonly standaloneSettings!: pulumi.Output<outputs.DdosDetectionSettingsStandaloneSettings | undefined>;
    /**
     * Configure top-k reset interval
     */
    public readonly topKResetInterval!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosDetectionSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosDetectionSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDetectionSettingsArgs | DdosDetectionSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDetectionSettingsState | undefined;
            resourceInputs["ctrlCpuUsage"] = state ? state.ctrlCpuUsage : undefined;
            resourceInputs["deEscalationQuietTime"] = state ? state.deEscalationQuietTime : undefined;
            resourceInputs["dedicatedCpus"] = state ? state.dedicatedCpus : undefined;
            resourceInputs["detectionWindowSize"] = state ? state.detectionWindowSize : undefined;
            resourceInputs["detectorMode"] = state ? state.detectorMode : undefined;
            resourceInputs["entrySaving"] = state ? state.entrySaving : undefined;
            resourceInputs["exportInterval"] = state ? state.exportInterval : undefined;
            resourceInputs["fullCoreEnable"] = state ? state.fullCoreEnable : undefined;
            resourceInputs["histogramDeEscalatePercentage"] = state ? state.histogramDeEscalatePercentage : undefined;
            resourceInputs["histogramEscalatePercentage"] = state ? state.histogramEscalatePercentage : undefined;
            resourceInputs["initialLearningInterval"] = state ? state.initialLearningInterval : undefined;
            resourceInputs["networkObjectFloodingMultiple"] = state ? state.networkObjectFloodingMultiple : undefined;
            resourceInputs["networkObjectWindowSize"] = state ? state.networkObjectWindowSize : undefined;
            resourceInputs["notificationDebugLog"] = state ? state.notificationDebugLog : undefined;
            resourceInputs["pktSampling"] = state ? state.pktSampling : undefined;
            resourceInputs["standaloneSettings"] = state ? state.standaloneSettings : undefined;
            resourceInputs["topKResetInterval"] = state ? state.topKResetInterval : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosDetectionSettingsArgs | undefined;
            resourceInputs["ctrlCpuUsage"] = args ? args.ctrlCpuUsage : undefined;
            resourceInputs["deEscalationQuietTime"] = args ? args.deEscalationQuietTime : undefined;
            resourceInputs["dedicatedCpus"] = args ? args.dedicatedCpus : undefined;
            resourceInputs["detectionWindowSize"] = args ? args.detectionWindowSize : undefined;
            resourceInputs["detectorMode"] = args ? args.detectorMode : undefined;
            resourceInputs["entrySaving"] = args ? args.entrySaving : undefined;
            resourceInputs["exportInterval"] = args ? args.exportInterval : undefined;
            resourceInputs["fullCoreEnable"] = args ? args.fullCoreEnable : undefined;
            resourceInputs["histogramDeEscalatePercentage"] = args ? args.histogramDeEscalatePercentage : undefined;
            resourceInputs["histogramEscalatePercentage"] = args ? args.histogramEscalatePercentage : undefined;
            resourceInputs["initialLearningInterval"] = args ? args.initialLearningInterval : undefined;
            resourceInputs["networkObjectFloodingMultiple"] = args ? args.networkObjectFloodingMultiple : undefined;
            resourceInputs["networkObjectWindowSize"] = args ? args.networkObjectWindowSize : undefined;
            resourceInputs["notificationDebugLog"] = args ? args.notificationDebugLog : undefined;
            resourceInputs["pktSampling"] = args ? args.pktSampling : undefined;
            resourceInputs["standaloneSettings"] = args ? args.standaloneSettings : undefined;
            resourceInputs["topKResetInterval"] = args ? args.topKResetInterval : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDetectionSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDetectionSettings resources.
 */
export interface DdosDetectionSettingsState {
    /**
     * Control cpu usage threshold for DDoS detection
     */
    ctrlCpuUsage?: pulumi.Input<number>;
    /**
     * Configure de-escalation needed time in minutes from level 1 to 0.(default 1 minutes)
     */
    deEscalationQuietTime?: pulumi.Input<number>;
    /**
     * Configure the number of dedicated cores for detection
     */
    dedicatedCpus?: pulumi.Input<number>;
    /**
     * Configure detection window size in seconds (DDoS detection window size in seconds(default: 1))
     */
    detectionWindowSize?: pulumi.Input<number>;
    /**
     * 'standalone': Standalone detector; 'on-box': Mitigator and Detector on the same box; 'auto-svc-discovery': Auto Service
     * discovery using Visibility module (Deprecatd);
     */
    detectorMode?: pulumi.Input<string>;
    entrySaving?: pulumi.Input<inputs.DdosDetectionSettingsEntrySaving>;
    /**
     * Configure Baselining and export interval in seconds (DDoS Baselining and export interval in seconds(default: 20))
     */
    exportInterval?: pulumi.Input<number>;
    /**
     * Enable full core
     */
    fullCoreEnable?: pulumi.Input<number>;
    /**
     * histogram de-escalate sensitivity for DDoS detection
     */
    histogramDeEscalatePercentage?: pulumi.Input<number>;
    /**
     * histogram escalate sensitivity for DDoS detection
     */
    histogramEscalatePercentage?: pulumi.Input<number>;
    /**
     * Initial learning interval (in hours) before processing
     */
    initialLearningInterval?: pulumi.Input<number>;
    /**
     * multiplier for flooding detection threshold in network objects (default 2x threshold)
     */
    networkObjectFloodingMultiple?: pulumi.Input<number>;
    /**
     * '5': 5 seconds; '10': 10 seconds; '15': 15 seconds; '30': 30 seconds; (DDoS detection window size in seconds(default:
     * 30))
     */
    networkObjectWindowSize?: pulumi.Input<string>;
    /**
     * 'enable': Enable detection notification debug log (default: disabled);
     */
    notificationDebugLog?: pulumi.Input<string>;
    pktSampling?: pulumi.Input<inputs.DdosDetectionSettingsPktSampling>;
    standaloneSettings?: pulumi.Input<inputs.DdosDetectionSettingsStandaloneSettings>;
    /**
     * Configure top-k reset interval
     */
    topKResetInterval?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDetectionSettings resource.
 */
export interface DdosDetectionSettingsArgs {
    /**
     * Control cpu usage threshold for DDoS detection
     */
    ctrlCpuUsage?: pulumi.Input<number>;
    /**
     * Configure de-escalation needed time in minutes from level 1 to 0.(default 1 minutes)
     */
    deEscalationQuietTime?: pulumi.Input<number>;
    /**
     * Configure the number of dedicated cores for detection
     */
    dedicatedCpus?: pulumi.Input<number>;
    /**
     * Configure detection window size in seconds (DDoS detection window size in seconds(default: 1))
     */
    detectionWindowSize?: pulumi.Input<number>;
    /**
     * 'standalone': Standalone detector; 'on-box': Mitigator and Detector on the same box; 'auto-svc-discovery': Auto Service
     * discovery using Visibility module (Deprecatd);
     */
    detectorMode?: pulumi.Input<string>;
    entrySaving?: pulumi.Input<inputs.DdosDetectionSettingsEntrySaving>;
    /**
     * Configure Baselining and export interval in seconds (DDoS Baselining and export interval in seconds(default: 20))
     */
    exportInterval?: pulumi.Input<number>;
    /**
     * Enable full core
     */
    fullCoreEnable?: pulumi.Input<number>;
    /**
     * histogram de-escalate sensitivity for DDoS detection
     */
    histogramDeEscalatePercentage?: pulumi.Input<number>;
    /**
     * histogram escalate sensitivity for DDoS detection
     */
    histogramEscalatePercentage?: pulumi.Input<number>;
    /**
     * Initial learning interval (in hours) before processing
     */
    initialLearningInterval?: pulumi.Input<number>;
    /**
     * multiplier for flooding detection threshold in network objects (default 2x threshold)
     */
    networkObjectFloodingMultiple?: pulumi.Input<number>;
    /**
     * '5': 5 seconds; '10': 10 seconds; '15': 15 seconds; '30': 30 seconds; (DDoS detection window size in seconds(default:
     * 30))
     */
    networkObjectWindowSize?: pulumi.Input<string>;
    /**
     * 'enable': Enable detection notification debug log (default: disabled);
     */
    notificationDebugLog?: pulumi.Input<string>;
    pktSampling?: pulumi.Input<inputs.DdosDetectionSettingsPktSampling>;
    standaloneSettings?: pulumi.Input<inputs.DdosDetectionSettingsStandaloneSettings>;
    /**
     * Configure top-k reset interval
     */
    topKResetInterval?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
