// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingState, opts?: pulumi.CustomResourceOptions): DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking {
        return new DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneTemplateTcpProgressionTrackingTimeWindowTracking:DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking';

    /**
     * Returns true if the given object is an instance of DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking.__pulumiType;
    }

    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'enable-check': Enable Progression Tracking per Time Window;
     */
    public readonly progressionTrackingWinEnabled!: pulumi.Output<string>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    public readonly progressionTrackingWindowsAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    public readonly progressionTrackingWindowsActionListName!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Set the maximum total received byte
     */
    public readonly windowRcvdMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum total received byte
     */
    public readonly windowRcvdMin!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum received to sent ratio (in unit of 0.1% [1:1000])
     */
    public readonly windowRcvdSentRatioMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum received to sent ratio (in unit of 0.1% [1:1000])
     */
    public readonly windowRcvdSentRatioMin!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum total sent byte
     */
    public readonly windowSentMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum total sent byte
     */
    public readonly windowSentMin!: pulumi.Output<number | undefined>;
    /**
     * Set the violation threshold
     */
    public readonly windowViolation!: pulumi.Output<number | undefined>;

    /**
     * Create a DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingArgs | DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["progressionTrackingWinEnabled"] = state ? state.progressionTrackingWinEnabled : undefined;
            resourceInputs["progressionTrackingWindowsAction"] = state ? state.progressionTrackingWindowsAction : undefined;
            resourceInputs["progressionTrackingWindowsActionListName"] = state ? state.progressionTrackingWindowsActionListName : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["windowRcvdMax"] = state ? state.windowRcvdMax : undefined;
            resourceInputs["windowRcvdMin"] = state ? state.windowRcvdMin : undefined;
            resourceInputs["windowRcvdSentRatioMax"] = state ? state.windowRcvdSentRatioMax : undefined;
            resourceInputs["windowRcvdSentRatioMin"] = state ? state.windowRcvdSentRatioMin : undefined;
            resourceInputs["windowSentMax"] = state ? state.windowSentMax : undefined;
            resourceInputs["windowSentMin"] = state ? state.windowSentMin : undefined;
            resourceInputs["windowViolation"] = state ? state.windowViolation : undefined;
        } else {
            const args = argsOrState as DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingArgs | undefined;
            if ((!args || args.progressionTrackingWinEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'progressionTrackingWinEnabled'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["progressionTrackingWinEnabled"] = args ? args.progressionTrackingWinEnabled : undefined;
            resourceInputs["progressionTrackingWindowsAction"] = args ? args.progressionTrackingWindowsAction : undefined;
            resourceInputs["progressionTrackingWindowsActionListName"] = args ? args.progressionTrackingWindowsActionListName : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["windowRcvdMax"] = args ? args.windowRcvdMax : undefined;
            resourceInputs["windowRcvdMin"] = args ? args.windowRcvdMin : undefined;
            resourceInputs["windowRcvdSentRatioMax"] = args ? args.windowRcvdSentRatioMax : undefined;
            resourceInputs["windowRcvdSentRatioMin"] = args ? args.windowRcvdSentRatioMin : undefined;
            resourceInputs["windowSentMax"] = args ? args.windowSentMax : undefined;
            resourceInputs["windowSentMin"] = args ? args.windowSentMin : undefined;
            resourceInputs["windowViolation"] = args ? args.windowViolation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking resources.
 */
export interface DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingState {
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'enable-check': Enable Progression Tracking per Time Window;
     */
    progressionTrackingWinEnabled?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    progressionTrackingWindowsAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    progressionTrackingWindowsActionListName?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Set the maximum total received byte
     */
    windowRcvdMax?: pulumi.Input<number>;
    /**
     * Set the minimum total received byte
     */
    windowRcvdMin?: pulumi.Input<number>;
    /**
     * Set the maximum received to sent ratio (in unit of 0.1% [1:1000])
     */
    windowRcvdSentRatioMax?: pulumi.Input<number>;
    /**
     * Set the minimum received to sent ratio (in unit of 0.1% [1:1000])
     */
    windowRcvdSentRatioMin?: pulumi.Input<number>;
    /**
     * Set the maximum total sent byte
     */
    windowSentMax?: pulumi.Input<number>;
    /**
     * Set the minimum total sent byte
     */
    windowSentMin?: pulumi.Input<number>;
    /**
     * Set the violation threshold
     */
    windowViolation?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DdosZoneTemplateTcpProgressionTrackingTimeWindowTracking resource.
 */
export interface DdosZoneTemplateTcpProgressionTrackingTimeWindowTrackingArgs {
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'enable-check': Enable Progression Tracking per Time Window;
     */
    progressionTrackingWinEnabled: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    progressionTrackingWindowsAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    progressionTrackingWindowsActionListName?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Set the maximum total received byte
     */
    windowRcvdMax?: pulumi.Input<number>;
    /**
     * Set the minimum total received byte
     */
    windowRcvdMin?: pulumi.Input<number>;
    /**
     * Set the maximum received to sent ratio (in unit of 0.1% [1:1000])
     */
    windowRcvdSentRatioMax?: pulumi.Input<number>;
    /**
     * Set the minimum received to sent ratio (in unit of 0.1% [1:1000])
     */
    windowRcvdSentRatioMin?: pulumi.Input<number>;
    /**
     * Set the maximum total sent byte
     */
    windowSentMax?: pulumi.Input<number>;
    /**
     * Set the minimum total sent byte
     */
    windowSentMin?: pulumi.Input<number>;
    /**
     * Set the violation threshold
     */
    windowViolation?: pulumi.Input<number>;
}
