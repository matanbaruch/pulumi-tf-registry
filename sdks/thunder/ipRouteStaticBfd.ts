// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IpRouteStaticBfd extends pulumi.CustomResource {
    /**
     * Get an existing IpRouteStaticBfd resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpRouteStaticBfdState, opts?: pulumi.CustomResourceOptions): IpRouteStaticBfd {
        return new IpRouteStaticBfd(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ipRouteStaticBfd:IpRouteStaticBfd';

    /**
     * Returns true if the given object is an instance of IpRouteStaticBfd.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpRouteStaticBfd {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpRouteStaticBfd.__pulumiType;
    }

    /**
     * 'down': BFD down; (BFD state)
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Local IP address
     */
    public readonly localIp!: pulumi.Output<string>;
    /**
     * Nexthop IP address
     */
    public readonly nexthopIp!: pulumi.Output<string>;
    /**
     * Configure tracking template (bind tracking template name)
     */
    public readonly template!: pulumi.Output<string | undefined>;
    /**
     * action triggering threshold
     */
    public readonly threshold!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a IpRouteStaticBfd resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpRouteStaticBfdArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpRouteStaticBfdArgs | IpRouteStaticBfdState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpRouteStaticBfdState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["localIp"] = state ? state.localIp : undefined;
            resourceInputs["nexthopIp"] = state ? state.nexthopIp : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as IpRouteStaticBfdArgs | undefined;
            if ((!args || args.localIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localIp'");
            }
            if ((!args || args.nexthopIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nexthopIp'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["localIp"] = args ? args.localIp : undefined;
            resourceInputs["nexthopIp"] = args ? args.nexthopIp : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpRouteStaticBfd.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpRouteStaticBfd resources.
 */
export interface IpRouteStaticBfdState {
    /**
     * 'down': BFD down; (BFD state)
     */
    action?: pulumi.Input<string>;
    /**
     * Local IP address
     */
    localIp?: pulumi.Input<string>;
    /**
     * Nexthop IP address
     */
    nexthopIp?: pulumi.Input<string>;
    /**
     * Configure tracking template (bind tracking template name)
     */
    template?: pulumi.Input<string>;
    /**
     * action triggering threshold
     */
    threshold?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpRouteStaticBfd resource.
 */
export interface IpRouteStaticBfdArgs {
    /**
     * 'down': BFD down; (BFD state)
     */
    action?: pulumi.Input<string>;
    /**
     * Local IP address
     */
    localIp: pulumi.Input<string>;
    /**
     * Nexthop IP address
     */
    nexthopIp: pulumi.Input<string>;
    /**
     * Configure tracking template (bind tracking template name)
     */
    template?: pulumi.Input<string>;
    /**
     * action triggering threshold
     */
    threshold?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
