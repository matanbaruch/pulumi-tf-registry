// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnmpServerEnableTrapsSystem extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerEnableTrapsSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerEnableTrapsSystemState, opts?: pulumi.CustomResourceOptions): SnmpServerEnableTrapsSystem {
        return new SnmpServerEnableTrapsSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerEnableTrapsSystem:SnmpServerEnableTrapsSystem';

    /**
     * Returns true if the given object is an instance of SnmpServerEnableTrapsSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerEnableTrapsSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerEnableTrapsSystem.__pulumiType;
    }

    /**
     * Enable all system group traps
     */
    public readonly all!: pulumi.Output<number | undefined>;
    public readonly appsGlobal!: pulumi.Output<outputs.SnmpServerEnableTrapsSystemAppsGlobal | undefined>;
    /**
     * Enable control CPU usage high trap
     */
    public readonly controlCpuHigh!: pulumi.Output<number | undefined>;
    /**
     * Enable data CPU usage high trap
     */
    public readonly dataCpuHigh!: pulumi.Output<number | undefined>;
    /**
     * Enable system fan trap
     */
    public readonly fan!: pulumi.Output<number | undefined>;
    /**
     * Enable file system read-only trap
     */
    public readonly fileSysReadOnly!: pulumi.Output<number | undefined>;
    /**
     * Enable system high disk usage trap
     */
    public readonly highDiskUse!: pulumi.Output<number | undefined>;
    /**
     * Enable system high memory usage trap
     */
    public readonly highMemoryUse!: pulumi.Output<number | undefined>;
    /**
     * Enable system high temperature trap
     */
    public readonly highTemp!: pulumi.Output<number | undefined>;
    /**
     * Enable system license management traps
     */
    public readonly licenseManagement!: pulumi.Output<number | undefined>;
    /**
     * Enable system low temperature trap
     */
    public readonly lowTemp!: pulumi.Output<number | undefined>;
    /**
     * Enable system packet dropped trap
     */
    public readonly packetDrop!: pulumi.Output<number | undefined>;
    /**
     * Enable system power supply trap
     */
    public readonly power!: pulumi.Output<number | undefined>;
    /**
     * Enable system primary hard disk trap
     */
    public readonly priDisk!: pulumi.Output<number | undefined>;
    /**
     * Enable system restart trap
     */
    public readonly restart!: pulumi.Output<number | undefined>;
    /**
     * Enable system secondary hard disk trap
     */
    public readonly secDisk!: pulumi.Output<number | undefined>;
    /**
     * Enable system shutdown trap
     */
    public readonly shutdown!: pulumi.Output<number | undefined>;
    /**
     * Enable system smp resource event trap
     */
    public readonly smpResourceEvent!: pulumi.Output<number | undefined>;
    /**
     * Enable system start trap
     */
    public readonly start!: pulumi.Output<number | undefined>;
    /**
     * Enable system syslog severity one messages trap
     */
    public readonly syslogSeverityOne!: pulumi.Output<number | undefined>;
    /**
     * Enable system TACACS monitor server up/down trap
     */
    public readonly tacacsServerUpDown!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SnmpServerEnableTrapsSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SnmpServerEnableTrapsSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerEnableTrapsSystemArgs | SnmpServerEnableTrapsSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerEnableTrapsSystemState | undefined;
            resourceInputs["all"] = state ? state.all : undefined;
            resourceInputs["appsGlobal"] = state ? state.appsGlobal : undefined;
            resourceInputs["controlCpuHigh"] = state ? state.controlCpuHigh : undefined;
            resourceInputs["dataCpuHigh"] = state ? state.dataCpuHigh : undefined;
            resourceInputs["fan"] = state ? state.fan : undefined;
            resourceInputs["fileSysReadOnly"] = state ? state.fileSysReadOnly : undefined;
            resourceInputs["highDiskUse"] = state ? state.highDiskUse : undefined;
            resourceInputs["highMemoryUse"] = state ? state.highMemoryUse : undefined;
            resourceInputs["highTemp"] = state ? state.highTemp : undefined;
            resourceInputs["licenseManagement"] = state ? state.licenseManagement : undefined;
            resourceInputs["lowTemp"] = state ? state.lowTemp : undefined;
            resourceInputs["packetDrop"] = state ? state.packetDrop : undefined;
            resourceInputs["power"] = state ? state.power : undefined;
            resourceInputs["priDisk"] = state ? state.priDisk : undefined;
            resourceInputs["restart"] = state ? state.restart : undefined;
            resourceInputs["secDisk"] = state ? state.secDisk : undefined;
            resourceInputs["shutdown"] = state ? state.shutdown : undefined;
            resourceInputs["smpResourceEvent"] = state ? state.smpResourceEvent : undefined;
            resourceInputs["start"] = state ? state.start : undefined;
            resourceInputs["syslogSeverityOne"] = state ? state.syslogSeverityOne : undefined;
            resourceInputs["tacacsServerUpDown"] = state ? state.tacacsServerUpDown : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SnmpServerEnableTrapsSystemArgs | undefined;
            resourceInputs["all"] = args ? args.all : undefined;
            resourceInputs["appsGlobal"] = args ? args.appsGlobal : undefined;
            resourceInputs["controlCpuHigh"] = args ? args.controlCpuHigh : undefined;
            resourceInputs["dataCpuHigh"] = args ? args.dataCpuHigh : undefined;
            resourceInputs["fan"] = args ? args.fan : undefined;
            resourceInputs["fileSysReadOnly"] = args ? args.fileSysReadOnly : undefined;
            resourceInputs["highDiskUse"] = args ? args.highDiskUse : undefined;
            resourceInputs["highMemoryUse"] = args ? args.highMemoryUse : undefined;
            resourceInputs["highTemp"] = args ? args.highTemp : undefined;
            resourceInputs["licenseManagement"] = args ? args.licenseManagement : undefined;
            resourceInputs["lowTemp"] = args ? args.lowTemp : undefined;
            resourceInputs["packetDrop"] = args ? args.packetDrop : undefined;
            resourceInputs["power"] = args ? args.power : undefined;
            resourceInputs["priDisk"] = args ? args.priDisk : undefined;
            resourceInputs["restart"] = args ? args.restart : undefined;
            resourceInputs["secDisk"] = args ? args.secDisk : undefined;
            resourceInputs["shutdown"] = args ? args.shutdown : undefined;
            resourceInputs["smpResourceEvent"] = args ? args.smpResourceEvent : undefined;
            resourceInputs["start"] = args ? args.start : undefined;
            resourceInputs["syslogSeverityOne"] = args ? args.syslogSeverityOne : undefined;
            resourceInputs["tacacsServerUpDown"] = args ? args.tacacsServerUpDown : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerEnableTrapsSystem.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerEnableTrapsSystem resources.
 */
export interface SnmpServerEnableTrapsSystemState {
    /**
     * Enable all system group traps
     */
    all?: pulumi.Input<number>;
    appsGlobal?: pulumi.Input<inputs.SnmpServerEnableTrapsSystemAppsGlobal>;
    /**
     * Enable control CPU usage high trap
     */
    controlCpuHigh?: pulumi.Input<number>;
    /**
     * Enable data CPU usage high trap
     */
    dataCpuHigh?: pulumi.Input<number>;
    /**
     * Enable system fan trap
     */
    fan?: pulumi.Input<number>;
    /**
     * Enable file system read-only trap
     */
    fileSysReadOnly?: pulumi.Input<number>;
    /**
     * Enable system high disk usage trap
     */
    highDiskUse?: pulumi.Input<number>;
    /**
     * Enable system high memory usage trap
     */
    highMemoryUse?: pulumi.Input<number>;
    /**
     * Enable system high temperature trap
     */
    highTemp?: pulumi.Input<number>;
    /**
     * Enable system license management traps
     */
    licenseManagement?: pulumi.Input<number>;
    /**
     * Enable system low temperature trap
     */
    lowTemp?: pulumi.Input<number>;
    /**
     * Enable system packet dropped trap
     */
    packetDrop?: pulumi.Input<number>;
    /**
     * Enable system power supply trap
     */
    power?: pulumi.Input<number>;
    /**
     * Enable system primary hard disk trap
     */
    priDisk?: pulumi.Input<number>;
    /**
     * Enable system restart trap
     */
    restart?: pulumi.Input<number>;
    /**
     * Enable system secondary hard disk trap
     */
    secDisk?: pulumi.Input<number>;
    /**
     * Enable system shutdown trap
     */
    shutdown?: pulumi.Input<number>;
    /**
     * Enable system smp resource event trap
     */
    smpResourceEvent?: pulumi.Input<number>;
    /**
     * Enable system start trap
     */
    start?: pulumi.Input<number>;
    /**
     * Enable system syslog severity one messages trap
     */
    syslogSeverityOne?: pulumi.Input<number>;
    /**
     * Enable system TACACS monitor server up/down trap
     */
    tacacsServerUpDown?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnmpServerEnableTrapsSystem resource.
 */
export interface SnmpServerEnableTrapsSystemArgs {
    /**
     * Enable all system group traps
     */
    all?: pulumi.Input<number>;
    appsGlobal?: pulumi.Input<inputs.SnmpServerEnableTrapsSystemAppsGlobal>;
    /**
     * Enable control CPU usage high trap
     */
    controlCpuHigh?: pulumi.Input<number>;
    /**
     * Enable data CPU usage high trap
     */
    dataCpuHigh?: pulumi.Input<number>;
    /**
     * Enable system fan trap
     */
    fan?: pulumi.Input<number>;
    /**
     * Enable file system read-only trap
     */
    fileSysReadOnly?: pulumi.Input<number>;
    /**
     * Enable system high disk usage trap
     */
    highDiskUse?: pulumi.Input<number>;
    /**
     * Enable system high memory usage trap
     */
    highMemoryUse?: pulumi.Input<number>;
    /**
     * Enable system high temperature trap
     */
    highTemp?: pulumi.Input<number>;
    /**
     * Enable system license management traps
     */
    licenseManagement?: pulumi.Input<number>;
    /**
     * Enable system low temperature trap
     */
    lowTemp?: pulumi.Input<number>;
    /**
     * Enable system packet dropped trap
     */
    packetDrop?: pulumi.Input<number>;
    /**
     * Enable system power supply trap
     */
    power?: pulumi.Input<number>;
    /**
     * Enable system primary hard disk trap
     */
    priDisk?: pulumi.Input<number>;
    /**
     * Enable system restart trap
     */
    restart?: pulumi.Input<number>;
    /**
     * Enable system secondary hard disk trap
     */
    secDisk?: pulumi.Input<number>;
    /**
     * Enable system shutdown trap
     */
    shutdown?: pulumi.Input<number>;
    /**
     * Enable system smp resource event trap
     */
    smpResourceEvent?: pulumi.Input<number>;
    /**
     * Enable system start trap
     */
    start?: pulumi.Input<number>;
    /**
     * Enable system syslog severity one messages trap
     */
    syslogSeverityOne?: pulumi.Input<number>;
    /**
     * Enable system TACACS monitor server up/down trap
     */
    tacacsServerUpDown?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
