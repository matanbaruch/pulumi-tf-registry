// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AamAaaPolicyAaaRule extends pulumi.CustomResource {
    /**
     * Get an existing AamAaaPolicyAaaRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAaaPolicyAaaRuleState, opts?: pulumi.CustomResourceOptions): AamAaaPolicyAaaRule {
        return new AamAaaPolicyAaaRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAaaPolicyAaaRule:AamAaaPolicyAaaRule';

    /**
     * Returns true if the given object is an instance of AamAaaPolicyAaaRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAaaPolicyAaaRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAaaPolicyAaaRule.__pulumiType;
    }

    public readonly accessList!: pulumi.Output<outputs.AamAaaPolicyAaaRuleAccessList | undefined>;
    /**
     * 'allow': Allow traffic that matches this rule; 'deny': Deny traffic that matches this rule;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Forward client request even though authentication has failed
     */
    public readonly authFailureBypass!: pulumi.Output<number | undefined>;
    /**
     * Specify authentication template name to bind to the AAA rule
     */
    public readonly authenticationTemplate!: pulumi.Output<string | undefined>;
    /**
     * Specify authorization policy to bind to the AAA rule
     */
    public readonly authorizePolicy!: pulumi.Output<string | undefined>;
    /**
     * Specify authorization policy for CAPTCHA (Authorization policy name)
     */
    public readonly captchaAuthzPolicy!: pulumi.Output<string | undefined>;
    /**
     * Specify domain name to bind to the AAA rule (ex: a10networks.com, www.a10networks.com)
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Specify the AC type class-list for the domain-whitelist
     */
    public readonly domainWhitelist!: pulumi.Output<string | undefined>;
    public readonly hosts!: pulumi.Output<outputs.AamAaaPolicyAaaRuleHost[] | undefined>;
    /**
     * Specify AAA rule index
     */
    public readonly index!: pulumi.Output<number>;
    /**
     * Enable URL decoding for URI matching
     */
    public readonly matchEncodedUri!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify port number for aaa-rule, default is 0 for all port numbers
     */
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.AamAaaPolicyAaaRuleSamplingEnable[] | undefined>;
    public readonly uris!: pulumi.Output<outputs.AamAaaPolicyAaaRuleUri[] | undefined>;
    public readonly userAgents!: pulumi.Output<outputs.AamAaaPolicyAaaRuleUserAgent[] | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AamAaaPolicyAaaRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AamAaaPolicyAaaRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAaaPolicyAaaRuleArgs | AamAaaPolicyAaaRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAaaPolicyAaaRuleState | undefined;
            resourceInputs["accessList"] = state ? state.accessList : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["authFailureBypass"] = state ? state.authFailureBypass : undefined;
            resourceInputs["authenticationTemplate"] = state ? state.authenticationTemplate : undefined;
            resourceInputs["authorizePolicy"] = state ? state.authorizePolicy : undefined;
            resourceInputs["captchaAuthzPolicy"] = state ? state.captchaAuthzPolicy : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainWhitelist"] = state ? state.domainWhitelist : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["index"] = state ? state.index : undefined;
            resourceInputs["matchEncodedUri"] = state ? state.matchEncodedUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["uris"] = state ? state.uris : undefined;
            resourceInputs["userAgents"] = state ? state.userAgents : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AamAaaPolicyAaaRuleArgs | undefined;
            if ((!args || args.index === undefined) && !opts.urn) {
                throw new Error("Missing required property 'index'");
            }
            resourceInputs["accessList"] = args ? args.accessList : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["authFailureBypass"] = args ? args.authFailureBypass : undefined;
            resourceInputs["authenticationTemplate"] = args ? args.authenticationTemplate : undefined;
            resourceInputs["authorizePolicy"] = args ? args.authorizePolicy : undefined;
            resourceInputs["captchaAuthzPolicy"] = args ? args.captchaAuthzPolicy : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainWhitelist"] = args ? args.domainWhitelist : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["index"] = args ? args.index : undefined;
            resourceInputs["matchEncodedUri"] = args ? args.matchEncodedUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["uris"] = args ? args.uris : undefined;
            resourceInputs["userAgents"] = args ? args.userAgents : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAaaPolicyAaaRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAaaPolicyAaaRule resources.
 */
export interface AamAaaPolicyAaaRuleState {
    accessList?: pulumi.Input<inputs.AamAaaPolicyAaaRuleAccessList>;
    /**
     * 'allow': Allow traffic that matches this rule; 'deny': Deny traffic that matches this rule;
     */
    action?: pulumi.Input<string>;
    /**
     * Forward client request even though authentication has failed
     */
    authFailureBypass?: pulumi.Input<number>;
    /**
     * Specify authentication template name to bind to the AAA rule
     */
    authenticationTemplate?: pulumi.Input<string>;
    /**
     * Specify authorization policy to bind to the AAA rule
     */
    authorizePolicy?: pulumi.Input<string>;
    /**
     * Specify authorization policy for CAPTCHA (Authorization policy name)
     */
    captchaAuthzPolicy?: pulumi.Input<string>;
    /**
     * Specify domain name to bind to the AAA rule (ex: a10networks.com, www.a10networks.com)
     */
    domainName?: pulumi.Input<string>;
    /**
     * Specify the AC type class-list for the domain-whitelist
     */
    domainWhitelist?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleHost>[]>;
    /**
     * Specify AAA rule index
     */
    index?: pulumi.Input<number>;
    /**
     * Enable URL decoding for URI matching
     */
    matchEncodedUri?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify port number for aaa-rule, default is 0 for all port numbers
     */
    port?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleSamplingEnable>[]>;
    uris?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleUri>[]>;
    userAgents?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleUserAgent>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAaaPolicyAaaRule resource.
 */
export interface AamAaaPolicyAaaRuleArgs {
    accessList?: pulumi.Input<inputs.AamAaaPolicyAaaRuleAccessList>;
    /**
     * 'allow': Allow traffic that matches this rule; 'deny': Deny traffic that matches this rule;
     */
    action?: pulumi.Input<string>;
    /**
     * Forward client request even though authentication has failed
     */
    authFailureBypass?: pulumi.Input<number>;
    /**
     * Specify authentication template name to bind to the AAA rule
     */
    authenticationTemplate?: pulumi.Input<string>;
    /**
     * Specify authorization policy to bind to the AAA rule
     */
    authorizePolicy?: pulumi.Input<string>;
    /**
     * Specify authorization policy for CAPTCHA (Authorization policy name)
     */
    captchaAuthzPolicy?: pulumi.Input<string>;
    /**
     * Specify domain name to bind to the AAA rule (ex: a10networks.com, www.a10networks.com)
     */
    domainName?: pulumi.Input<string>;
    /**
     * Specify the AC type class-list for the domain-whitelist
     */
    domainWhitelist?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleHost>[]>;
    /**
     * Specify AAA rule index
     */
    index: pulumi.Input<number>;
    /**
     * Enable URL decoding for URI matching
     */
    matchEncodedUri?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify port number for aaa-rule, default is 0 for all port numbers
     */
    port?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleSamplingEnable>[]>;
    uris?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleUri>[]>;
    userAgents?: pulumi.Input<pulumi.Input<inputs.AamAaaPolicyAaaRuleUserAgent>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
