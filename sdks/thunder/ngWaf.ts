// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NgWaf extends pulumi.CustomResource {
    /**
     * Get an existing NgWaf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgWafState, opts?: pulumi.CustomResourceOptions): NgWaf {
        return new NgWaf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ngWaf:NgWaf';

    /**
     * Returns true if the given object is an instance of NgWaf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgWaf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgWaf.__pulumiType;
    }

    public readonly cpu!: pulumi.Output<outputs.NgWafCpu | undefined>;
    public readonly customPage!: pulumi.Output<outputs.NgWafCustomPage | undefined>;
    public readonly customSignals!: pulumi.Output<outputs.NgWafCustomSignals | undefined>;
    public readonly statsLists!: pulumi.Output<outputs.NgWafStatsList[] | undefined>;
    public readonly status!: pulumi.Output<outputs.NgWafStatus | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NgWaf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NgWafArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgWafArgs | NgWafState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgWafState | undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["customPage"] = state ? state.customPage : undefined;
            resourceInputs["customSignals"] = state ? state.customSignals : undefined;
            resourceInputs["statsLists"] = state ? state.statsLists : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NgWafArgs | undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["customPage"] = args ? args.customPage : undefined;
            resourceInputs["customSignals"] = args ? args.customSignals : undefined;
            resourceInputs["statsLists"] = args ? args.statsLists : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgWaf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NgWaf resources.
 */
export interface NgWafState {
    cpu?: pulumi.Input<inputs.NgWafCpu>;
    customPage?: pulumi.Input<inputs.NgWafCustomPage>;
    customSignals?: pulumi.Input<inputs.NgWafCustomSignals>;
    statsLists?: pulumi.Input<pulumi.Input<inputs.NgWafStatsList>[]>;
    status?: pulumi.Input<inputs.NgWafStatus>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgWaf resource.
 */
export interface NgWafArgs {
    cpu?: pulumi.Input<inputs.NgWafCpu>;
    customPage?: pulumi.Input<inputs.NgWafCustomPage>;
    customSignals?: pulumi.Input<inputs.NgWafCustomSignals>;
    statsLists?: pulumi.Input<pulumi.Input<inputs.NgWafStatsList>[]>;
    status?: pulumi.Input<inputs.NgWafStatus>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
