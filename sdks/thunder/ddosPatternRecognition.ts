// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosPatternRecognition extends pulumi.CustomResource {
    /**
     * Get an existing DdosPatternRecognition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosPatternRecognitionState, opts?: pulumi.CustomResourceOptions): DdosPatternRecognition {
        return new DdosPatternRecognition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosPatternRecognition:DdosPatternRecognition';

    /**
     * Returns true if the given object is an instance of DdosPatternRecognition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosPatternRecognition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosPatternRecognition.__pulumiType;
    }

    /**
     * Capture Backup
     */
    public readonly captureBackup!: pulumi.Output<number | undefined>;
    /**
     * Capturing state timeout in seconds
     */
    public readonly capturingTimeout!: pulumi.Output<number | undefined>;
    public readonly cpu!: pulumi.Output<outputs.DdosPatternRecognitionCpu | undefined>;
    /**
     * CPU Limit
     */
    public readonly cpuLimit!: pulumi.Output<number | undefined>;
    /**
     * Configure the number of dedicated cores for Pattern Recognition
     */
    public readonly dedicatedCpus!: pulumi.Output<number | undefined>;
    /**
     * Disable application payload processing for all ports
     */
    public readonly disableAppPayloadAll!: pulumi.Output<number | undefined>;
    /**
     * Error state timeout in seconds
     */
    public readonly errorTimeout!: pulumi.Output<number | undefined>;
    /**
     * Extracting state timeout in seconds
     */
    public readonly extractingTimeout!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable Pattern Recognition hardware filter; 'disable': Disable Pattern Recognition harware filter;
     */
    public readonly hardwareFilter!: pulumi.Output<string | undefined>;
    /**
     * Sample Size
     */
    public readonly sampleSize!: pulumi.Output<number | undefined>;
    /**
     * Scheduling state timeout in seconds
     */
    public readonly schedulingTimeout!: pulumi.Output<number | undefined>;
    /**
     * 'high': High Sensitivity; 'medium': Medium Sensitivity; 'low': Low Sensitivity;
     */
    public readonly sensitivity!: pulumi.Output<string | undefined>;
    /**
     * Configure the interval in minutes of periodic event (Default: 5 minutes, 0: No periodic updates)
     */
    public readonly sflowEventPeriodicInterval!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable Pattern Recognition; 'disable': Disable Pattern Recognition;
     */
    public readonly toggle!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosPatternRecognition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosPatternRecognitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosPatternRecognitionArgs | DdosPatternRecognitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosPatternRecognitionState | undefined;
            resourceInputs["captureBackup"] = state ? state.captureBackup : undefined;
            resourceInputs["capturingTimeout"] = state ? state.capturingTimeout : undefined;
            resourceInputs["cpu"] = state ? state.cpu : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["dedicatedCpus"] = state ? state.dedicatedCpus : undefined;
            resourceInputs["disableAppPayloadAll"] = state ? state.disableAppPayloadAll : undefined;
            resourceInputs["errorTimeout"] = state ? state.errorTimeout : undefined;
            resourceInputs["extractingTimeout"] = state ? state.extractingTimeout : undefined;
            resourceInputs["hardwareFilter"] = state ? state.hardwareFilter : undefined;
            resourceInputs["sampleSize"] = state ? state.sampleSize : undefined;
            resourceInputs["schedulingTimeout"] = state ? state.schedulingTimeout : undefined;
            resourceInputs["sensitivity"] = state ? state.sensitivity : undefined;
            resourceInputs["sflowEventPeriodicInterval"] = state ? state.sflowEventPeriodicInterval : undefined;
            resourceInputs["toggle"] = state ? state.toggle : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosPatternRecognitionArgs | undefined;
            resourceInputs["captureBackup"] = args ? args.captureBackup : undefined;
            resourceInputs["capturingTimeout"] = args ? args.capturingTimeout : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["dedicatedCpus"] = args ? args.dedicatedCpus : undefined;
            resourceInputs["disableAppPayloadAll"] = args ? args.disableAppPayloadAll : undefined;
            resourceInputs["errorTimeout"] = args ? args.errorTimeout : undefined;
            resourceInputs["extractingTimeout"] = args ? args.extractingTimeout : undefined;
            resourceInputs["hardwareFilter"] = args ? args.hardwareFilter : undefined;
            resourceInputs["sampleSize"] = args ? args.sampleSize : undefined;
            resourceInputs["schedulingTimeout"] = args ? args.schedulingTimeout : undefined;
            resourceInputs["sensitivity"] = args ? args.sensitivity : undefined;
            resourceInputs["sflowEventPeriodicInterval"] = args ? args.sflowEventPeriodicInterval : undefined;
            resourceInputs["toggle"] = args ? args.toggle : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosPatternRecognition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosPatternRecognition resources.
 */
export interface DdosPatternRecognitionState {
    /**
     * Capture Backup
     */
    captureBackup?: pulumi.Input<number>;
    /**
     * Capturing state timeout in seconds
     */
    capturingTimeout?: pulumi.Input<number>;
    cpu?: pulumi.Input<inputs.DdosPatternRecognitionCpu>;
    /**
     * CPU Limit
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Configure the number of dedicated cores for Pattern Recognition
     */
    dedicatedCpus?: pulumi.Input<number>;
    /**
     * Disable application payload processing for all ports
     */
    disableAppPayloadAll?: pulumi.Input<number>;
    /**
     * Error state timeout in seconds
     */
    errorTimeout?: pulumi.Input<number>;
    /**
     * Extracting state timeout in seconds
     */
    extractingTimeout?: pulumi.Input<number>;
    /**
     * 'enable': Enable Pattern Recognition hardware filter; 'disable': Disable Pattern Recognition harware filter;
     */
    hardwareFilter?: pulumi.Input<string>;
    /**
     * Sample Size
     */
    sampleSize?: pulumi.Input<number>;
    /**
     * Scheduling state timeout in seconds
     */
    schedulingTimeout?: pulumi.Input<number>;
    /**
     * 'high': High Sensitivity; 'medium': Medium Sensitivity; 'low': Low Sensitivity;
     */
    sensitivity?: pulumi.Input<string>;
    /**
     * Configure the interval in minutes of periodic event (Default: 5 minutes, 0: No periodic updates)
     */
    sflowEventPeriodicInterval?: pulumi.Input<number>;
    /**
     * 'enable': Enable Pattern Recognition; 'disable': Disable Pattern Recognition;
     */
    toggle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosPatternRecognition resource.
 */
export interface DdosPatternRecognitionArgs {
    /**
     * Capture Backup
     */
    captureBackup?: pulumi.Input<number>;
    /**
     * Capturing state timeout in seconds
     */
    capturingTimeout?: pulumi.Input<number>;
    cpu?: pulumi.Input<inputs.DdosPatternRecognitionCpu>;
    /**
     * CPU Limit
     */
    cpuLimit?: pulumi.Input<number>;
    /**
     * Configure the number of dedicated cores for Pattern Recognition
     */
    dedicatedCpus?: pulumi.Input<number>;
    /**
     * Disable application payload processing for all ports
     */
    disableAppPayloadAll?: pulumi.Input<number>;
    /**
     * Error state timeout in seconds
     */
    errorTimeout?: pulumi.Input<number>;
    /**
     * Extracting state timeout in seconds
     */
    extractingTimeout?: pulumi.Input<number>;
    /**
     * 'enable': Enable Pattern Recognition hardware filter; 'disable': Disable Pattern Recognition harware filter;
     */
    hardwareFilter?: pulumi.Input<string>;
    /**
     * Sample Size
     */
    sampleSize?: pulumi.Input<number>;
    /**
     * Scheduling state timeout in seconds
     */
    schedulingTimeout?: pulumi.Input<number>;
    /**
     * 'high': High Sensitivity; 'medium': Medium Sensitivity; 'low': Low Sensitivity;
     */
    sensitivity?: pulumi.Input<string>;
    /**
     * Configure the interval in minutes of periodic event (Default: 5 minutes, 0: No periodic updates)
     */
    sflowEventPeriodicInterval?: pulumi.Input<number>;
    /**
     * 'enable': Enable Pattern Recognition; 'disable': Disable Pattern Recognition;
     */
    toggle?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
