// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ThreatIntelThreatList extends pulumi.CustomResource {
    /**
     * Get an existing ThreatIntelThreatList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThreatIntelThreatListState, opts?: pulumi.CustomResourceOptions): ThreatIntelThreatList {
        return new ThreatIntelThreatList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/threatIntelThreatList:ThreatIntelThreatList';

    /**
     * Returns true if the given object is an instance of ThreatIntelThreatList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThreatIntelThreatList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatIntelThreatList.__pulumiType;
    }

    /**
     * Enable all categories
     */
    public readonly allCategories!: pulumi.Output<number | undefined>;
    /**
     * Botnet C&C channels, and infected zombie machines controlled by Bot master
     */
    public readonly botnets!: pulumi.Output<number | undefined>;
    /**
     * IP's participating in DOS, DDOS, anomalous sync flood, and anomalous traffic detection
     */
    public readonly dosAttacks!: pulumi.Output<number | undefined>;
    /**
     * IP's associated with mobile threats
     */
    public readonly mobileThreats!: pulumi.Output<number | undefined>;
    /**
     * Threat category List name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IP addresses hosting phishing sites, ad click fraud or gaming fraud
     */
    public readonly phishing!: pulumi.Output<number | undefined>;
    /**
     * IP addresses providing proxy services
     */
    public readonly proxy!: pulumi.Output<number | undefined>;
    /**
     * IP addresses currently known to be infected with malware
     */
    public readonly reputation!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.ThreatIntelThreatListSamplingEnable[] | undefined>;
    /**
     * IP's associated with probes, host scan, domain scan, and password brute force attack
     */
    public readonly scanners!: pulumi.Output<number | undefined>;
    /**
     * IP's tunneling spam messages through a proxy, anomalous SMTP activities, and forum spam activities
     */
    public readonly spamSources!: pulumi.Output<number | undefined>;
    /**
     * IP's providing tor proxy services
     */
    public readonly torProxy!: pulumi.Output<number | undefined>;
    /**
     * 'webroot': Configure Webroot threat categories;
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * IP's associated with cross site scripting, iFrame injection, SQL injection, cross domain injection, or domain password
     * brute fo
     */
    public readonly webAttacks!: pulumi.Output<number | undefined>;
    /**
     * IP's associated with malware, shell code, rootkits, worms or viruses
     */
    public readonly windowsExploits!: pulumi.Output<number | undefined>;

    /**
     * Create a ThreatIntelThreatList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ThreatIntelThreatListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThreatIntelThreatListArgs | ThreatIntelThreatListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThreatIntelThreatListState | undefined;
            resourceInputs["allCategories"] = state ? state.allCategories : undefined;
            resourceInputs["botnets"] = state ? state.botnets : undefined;
            resourceInputs["dosAttacks"] = state ? state.dosAttacks : undefined;
            resourceInputs["mobileThreats"] = state ? state.mobileThreats : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["phishing"] = state ? state.phishing : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["reputation"] = state ? state.reputation : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["scanners"] = state ? state.scanners : undefined;
            resourceInputs["spamSources"] = state ? state.spamSources : undefined;
            resourceInputs["torProxy"] = state ? state.torProxy : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["webAttacks"] = state ? state.webAttacks : undefined;
            resourceInputs["windowsExploits"] = state ? state.windowsExploits : undefined;
        } else {
            const args = argsOrState as ThreatIntelThreatListArgs | undefined;
            resourceInputs["allCategories"] = args ? args.allCategories : undefined;
            resourceInputs["botnets"] = args ? args.botnets : undefined;
            resourceInputs["dosAttacks"] = args ? args.dosAttacks : undefined;
            resourceInputs["mobileThreats"] = args ? args.mobileThreats : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["phishing"] = args ? args.phishing : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["reputation"] = args ? args.reputation : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["scanners"] = args ? args.scanners : undefined;
            resourceInputs["spamSources"] = args ? args.spamSources : undefined;
            resourceInputs["torProxy"] = args ? args.torProxy : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["webAttacks"] = args ? args.webAttacks : undefined;
            resourceInputs["windowsExploits"] = args ? args.windowsExploits : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatIntelThreatList.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThreatIntelThreatList resources.
 */
export interface ThreatIntelThreatListState {
    /**
     * Enable all categories
     */
    allCategories?: pulumi.Input<number>;
    /**
     * Botnet C&C channels, and infected zombie machines controlled by Bot master
     */
    botnets?: pulumi.Input<number>;
    /**
     * IP's participating in DOS, DDOS, anomalous sync flood, and anomalous traffic detection
     */
    dosAttacks?: pulumi.Input<number>;
    /**
     * IP's associated with mobile threats
     */
    mobileThreats?: pulumi.Input<number>;
    /**
     * Threat category List name
     */
    name?: pulumi.Input<string>;
    /**
     * IP addresses hosting phishing sites, ad click fraud or gaming fraud
     */
    phishing?: pulumi.Input<number>;
    /**
     * IP addresses providing proxy services
     */
    proxy?: pulumi.Input<number>;
    /**
     * IP addresses currently known to be infected with malware
     */
    reputation?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.ThreatIntelThreatListSamplingEnable>[]>;
    /**
     * IP's associated with probes, host scan, domain scan, and password brute force attack
     */
    scanners?: pulumi.Input<number>;
    /**
     * IP's tunneling spam messages through a proxy, anomalous SMTP activities, and forum spam activities
     */
    spamSources?: pulumi.Input<number>;
    /**
     * IP's providing tor proxy services
     */
    torProxy?: pulumi.Input<number>;
    /**
     * 'webroot': Configure Webroot threat categories;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * IP's associated with cross site scripting, iFrame injection, SQL injection, cross domain injection, or domain password
     * brute fo
     */
    webAttacks?: pulumi.Input<number>;
    /**
     * IP's associated with malware, shell code, rootkits, worms or viruses
     */
    windowsExploits?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ThreatIntelThreatList resource.
 */
export interface ThreatIntelThreatListArgs {
    /**
     * Enable all categories
     */
    allCategories?: pulumi.Input<number>;
    /**
     * Botnet C&C channels, and infected zombie machines controlled by Bot master
     */
    botnets?: pulumi.Input<number>;
    /**
     * IP's participating in DOS, DDOS, anomalous sync flood, and anomalous traffic detection
     */
    dosAttacks?: pulumi.Input<number>;
    /**
     * IP's associated with mobile threats
     */
    mobileThreats?: pulumi.Input<number>;
    /**
     * Threat category List name
     */
    name?: pulumi.Input<string>;
    /**
     * IP addresses hosting phishing sites, ad click fraud or gaming fraud
     */
    phishing?: pulumi.Input<number>;
    /**
     * IP addresses providing proxy services
     */
    proxy?: pulumi.Input<number>;
    /**
     * IP addresses currently known to be infected with malware
     */
    reputation?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.ThreatIntelThreatListSamplingEnable>[]>;
    /**
     * IP's associated with probes, host scan, domain scan, and password brute force attack
     */
    scanners?: pulumi.Input<number>;
    /**
     * IP's tunneling spam messages through a proxy, anomalous SMTP activities, and forum spam activities
     */
    spamSources?: pulumi.Input<number>;
    /**
     * IP's providing tor proxy services
     */
    torProxy?: pulumi.Input<number>;
    /**
     * 'webroot': Configure Webroot threat categories;
     */
    type?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * IP's associated with cross site scripting, iFrame injection, SQL injection, cross domain injection, or domain password
     * brute fo
     */
    webAttacks?: pulumi.Input<number>;
    /**
     * IP's associated with malware, shell code, rootkits, worms or viruses
     */
    windowsExploits?: pulumi.Input<number>;
}
