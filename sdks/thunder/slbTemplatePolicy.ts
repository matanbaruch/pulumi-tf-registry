// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplatePolicy extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplatePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplatePolicyState, opts?: pulumi.CustomResourceOptions): SlbTemplatePolicy {
        return new SlbTemplatePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplatePolicy:SlbTemplatePolicy';

    /**
     * Returns true if the given object is an instance of SlbTemplatePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplatePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplatePolicy.__pulumiType;
    }

    public readonly bwListIds!: pulumi.Output<outputs.SlbTemplatePolicyBwListId[] | undefined>;
    /**
     * Specify a blacklist/whitelist name
     */
    public readonly bwListName!: pulumi.Output<string | undefined>;
    public readonly classList!: pulumi.Output<outputs.SlbTemplatePolicyClassList | undefined>;
    public readonly forwardPolicy!: pulumi.Output<outputs.SlbTemplatePolicyForwardPolicy | undefined>;
    /**
     * Share counters between geo-location and sub regions
     */
    public readonly fullDomainTree!: pulumi.Output<number | undefined>;
    /**
     * Log interval (minute)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Policy template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify operation in case over limit
     */
    public readonly overLimit!: pulumi.Output<number | undefined>;
    /**
     * Don't accept any new connection for certain time (Lockup duration (minute))
     */
    public readonly overLimitLockup!: pulumi.Output<number | undefined>;
    /**
     * Log a message
     */
    public readonly overLimitLogging!: pulumi.Output<number | undefined>;
    /**
     * Reset the connection when it exceeds limit
     */
    public readonly overLimitReset!: pulumi.Output<number | undefined>;
    /**
     * Use overlap mode for geo-location to do longest match
     */
    public readonly overlap!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.SlbTemplatePolicySamplingEnable[] | undefined>;
    /**
     * Share counters between virtual ports and virtual servers
     */
    public readonly share!: pulumi.Output<number | undefined>;
    /**
     * Define timeout value of PBSLB dynamic entry (Timeout value (minute, default is 5))
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Use destination IP to match the policy
     */
    public readonly useDestinationIp!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplatePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplatePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplatePolicyArgs | SlbTemplatePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplatePolicyState | undefined;
            resourceInputs["bwListIds"] = state ? state.bwListIds : undefined;
            resourceInputs["bwListName"] = state ? state.bwListName : undefined;
            resourceInputs["classList"] = state ? state.classList : undefined;
            resourceInputs["forwardPolicy"] = state ? state.forwardPolicy : undefined;
            resourceInputs["fullDomainTree"] = state ? state.fullDomainTree : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overLimit"] = state ? state.overLimit : undefined;
            resourceInputs["overLimitLockup"] = state ? state.overLimitLockup : undefined;
            resourceInputs["overLimitLogging"] = state ? state.overLimitLogging : undefined;
            resourceInputs["overLimitReset"] = state ? state.overLimitReset : undefined;
            resourceInputs["overlap"] = state ? state.overlap : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["share"] = state ? state.share : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["useDestinationIp"] = state ? state.useDestinationIp : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplatePolicyArgs | undefined;
            resourceInputs["bwListIds"] = args ? args.bwListIds : undefined;
            resourceInputs["bwListName"] = args ? args.bwListName : undefined;
            resourceInputs["classList"] = args ? args.classList : undefined;
            resourceInputs["forwardPolicy"] = args ? args.forwardPolicy : undefined;
            resourceInputs["fullDomainTree"] = args ? args.fullDomainTree : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overLimit"] = args ? args.overLimit : undefined;
            resourceInputs["overLimitLockup"] = args ? args.overLimitLockup : undefined;
            resourceInputs["overLimitLogging"] = args ? args.overLimitLogging : undefined;
            resourceInputs["overLimitReset"] = args ? args.overLimitReset : undefined;
            resourceInputs["overlap"] = args ? args.overlap : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["share"] = args ? args.share : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["useDestinationIp"] = args ? args.useDestinationIp : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplatePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplatePolicy resources.
 */
export interface SlbTemplatePolicyState {
    bwListIds?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyBwListId>[]>;
    /**
     * Specify a blacklist/whitelist name
     */
    bwListName?: pulumi.Input<string>;
    classList?: pulumi.Input<inputs.SlbTemplatePolicyClassList>;
    forwardPolicy?: pulumi.Input<inputs.SlbTemplatePolicyForwardPolicy>;
    /**
     * Share counters between geo-location and sub regions
     */
    fullDomainTree?: pulumi.Input<number>;
    /**
     * Log interval (minute)
     */
    interval?: pulumi.Input<number>;
    /**
     * Policy template name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify operation in case over limit
     */
    overLimit?: pulumi.Input<number>;
    /**
     * Don't accept any new connection for certain time (Lockup duration (minute))
     */
    overLimitLockup?: pulumi.Input<number>;
    /**
     * Log a message
     */
    overLimitLogging?: pulumi.Input<number>;
    /**
     * Reset the connection when it exceeds limit
     */
    overLimitReset?: pulumi.Input<number>;
    /**
     * Use overlap mode for geo-location to do longest match
     */
    overlap?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicySamplingEnable>[]>;
    /**
     * Share counters between virtual ports and virtual servers
     */
    share?: pulumi.Input<number>;
    /**
     * Define timeout value of PBSLB dynamic entry (Timeout value (minute, default is 5))
     */
    timeout?: pulumi.Input<number>;
    /**
     * Use destination IP to match the policy
     */
    useDestinationIp?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplatePolicy resource.
 */
export interface SlbTemplatePolicyArgs {
    bwListIds?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicyBwListId>[]>;
    /**
     * Specify a blacklist/whitelist name
     */
    bwListName?: pulumi.Input<string>;
    classList?: pulumi.Input<inputs.SlbTemplatePolicyClassList>;
    forwardPolicy?: pulumi.Input<inputs.SlbTemplatePolicyForwardPolicy>;
    /**
     * Share counters between geo-location and sub regions
     */
    fullDomainTree?: pulumi.Input<number>;
    /**
     * Log interval (minute)
     */
    interval?: pulumi.Input<number>;
    /**
     * Policy template name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify operation in case over limit
     */
    overLimit?: pulumi.Input<number>;
    /**
     * Don't accept any new connection for certain time (Lockup duration (minute))
     */
    overLimitLockup?: pulumi.Input<number>;
    /**
     * Log a message
     */
    overLimitLogging?: pulumi.Input<number>;
    /**
     * Reset the connection when it exceeds limit
     */
    overLimitReset?: pulumi.Input<number>;
    /**
     * Use overlap mode for geo-location to do longest match
     */
    overlap?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbTemplatePolicySamplingEnable>[]>;
    /**
     * Share counters between virtual ports and virtual servers
     */
    share?: pulumi.Input<number>;
    /**
     * Define timeout value of PBSLB dynamic entry (Timeout value (minute, default is 5))
     */
    timeout?: pulumi.Input<number>;
    /**
     * Use destination IP to match the policy
     */
    useDestinationIp?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
