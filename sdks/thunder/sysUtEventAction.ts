// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SysUtEventAction extends pulumi.CustomResource {
    /**
     * Get an existing SysUtEventAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SysUtEventActionState, opts?: pulumi.CustomResourceOptions): SysUtEventAction {
        return new SysUtEventAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/sysUtEventAction:SysUtEventAction';

    /**
     * Returns true if the given object is an instance of SysUtEventAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SysUtEventAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SysUtEventAction.__pulumiType;
    }

    /**
     * Delay in seconds
     */
    public readonly delay!: pulumi.Output<number | undefined>;
    /**
     * 'send': Test event; 'expect': Expected result; 'wait': Introduce a delay;
     */
    public readonly direction!: pulumi.Output<string>;
    /**
     * Packet drop. Only allowed for output spec
     */
    public readonly drop!: pulumi.Output<number | undefined>;
    /**
     * EventNumber
     */
    public readonly eventNumber!: pulumi.Output<string>;
    public readonly ignoreValidation!: pulumi.Output<outputs.SysUtEventActionIgnoreValidation | undefined>;
    public readonly l1!: pulumi.Output<outputs.SysUtEventActionL1 | undefined>;
    public readonly l2!: pulumi.Output<outputs.SysUtEventActionL2 | undefined>;
    public readonly l3!: pulumi.Output<outputs.SysUtEventActionL3 | undefined>;
    public readonly tcp!: pulumi.Output<outputs.SysUtEventActionTcp | undefined>;
    /**
     * Packet template
     */
    public readonly template!: pulumi.Output<string | undefined>;
    public readonly udp!: pulumi.Output<outputs.SysUtEventActionUdp | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SysUtEventAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SysUtEventActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SysUtEventActionArgs | SysUtEventActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SysUtEventActionState | undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["drop"] = state ? state.drop : undefined;
            resourceInputs["eventNumber"] = state ? state.eventNumber : undefined;
            resourceInputs["ignoreValidation"] = state ? state.ignoreValidation : undefined;
            resourceInputs["l1"] = state ? state.l1 : undefined;
            resourceInputs["l2"] = state ? state.l2 : undefined;
            resourceInputs["l3"] = state ? state.l3 : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["udp"] = state ? state.udp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SysUtEventActionArgs | undefined;
            if ((!args || args.direction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if ((!args || args.eventNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventNumber'");
            }
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["drop"] = args ? args.drop : undefined;
            resourceInputs["eventNumber"] = args ? args.eventNumber : undefined;
            resourceInputs["ignoreValidation"] = args ? args.ignoreValidation : undefined;
            resourceInputs["l1"] = args ? args.l1 : undefined;
            resourceInputs["l2"] = args ? args.l2 : undefined;
            resourceInputs["l3"] = args ? args.l3 : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["udp"] = args ? args.udp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SysUtEventAction.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SysUtEventAction resources.
 */
export interface SysUtEventActionState {
    /**
     * Delay in seconds
     */
    delay?: pulumi.Input<number>;
    /**
     * 'send': Test event; 'expect': Expected result; 'wait': Introduce a delay;
     */
    direction?: pulumi.Input<string>;
    /**
     * Packet drop. Only allowed for output spec
     */
    drop?: pulumi.Input<number>;
    /**
     * EventNumber
     */
    eventNumber?: pulumi.Input<string>;
    ignoreValidation?: pulumi.Input<inputs.SysUtEventActionIgnoreValidation>;
    l1?: pulumi.Input<inputs.SysUtEventActionL1>;
    l2?: pulumi.Input<inputs.SysUtEventActionL2>;
    l3?: pulumi.Input<inputs.SysUtEventActionL3>;
    tcp?: pulumi.Input<inputs.SysUtEventActionTcp>;
    /**
     * Packet template
     */
    template?: pulumi.Input<string>;
    udp?: pulumi.Input<inputs.SysUtEventActionUdp>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SysUtEventAction resource.
 */
export interface SysUtEventActionArgs {
    /**
     * Delay in seconds
     */
    delay?: pulumi.Input<number>;
    /**
     * 'send': Test event; 'expect': Expected result; 'wait': Introduce a delay;
     */
    direction: pulumi.Input<string>;
    /**
     * Packet drop. Only allowed for output spec
     */
    drop?: pulumi.Input<number>;
    /**
     * EventNumber
     */
    eventNumber: pulumi.Input<string>;
    ignoreValidation?: pulumi.Input<inputs.SysUtEventActionIgnoreValidation>;
    l1?: pulumi.Input<inputs.SysUtEventActionL1>;
    l2?: pulumi.Input<inputs.SysUtEventActionL2>;
    l3?: pulumi.Input<inputs.SysUtEventActionL3>;
    tcp?: pulumi.Input<inputs.SysUtEventActionTcp>;
    /**
     * Packet template
     */
    template?: pulumi.Input<string>;
    udp?: pulumi.Input<inputs.SysUtEventActionUdp>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
