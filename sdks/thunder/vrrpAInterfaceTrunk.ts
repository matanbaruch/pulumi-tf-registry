// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VrrpAInterfaceTrunk extends pulumi.CustomResource {
    /**
     * Get an existing VrrpAInterfaceTrunk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrrpAInterfaceTrunkState, opts?: pulumi.CustomResourceOptions): VrrpAInterfaceTrunk {
        return new VrrpAInterfaceTrunk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vrrpAInterfaceTrunk:VrrpAInterfaceTrunk';

    /**
     * Returns true if the given object is an instance of VrrpAInterfaceTrunk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VrrpAInterfaceTrunk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VrrpAInterfaceTrunk.__pulumiType;
    }

    /**
     * both a router and server interface
     */
    public readonly both!: pulumi.Output<number | undefined>;
    /**
     * do not send out heartbeat packet from this interface
     */
    public readonly noHeartbeat!: pulumi.Output<number | undefined>;
    /**
     * interface to upstream router
     */
    public readonly routerInterface!: pulumi.Output<number | undefined>;
    /**
     * interface to real server
     */
    public readonly serverInterface!: pulumi.Output<number | undefined>;
    /**
     * Ethernet Interface
     */
    public readonly trunkVal!: pulumi.Output<number>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly vlanCfgs!: pulumi.Output<outputs.VrrpAInterfaceTrunkVlanCfg[] | undefined>;

    /**
     * Create a VrrpAInterfaceTrunk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VrrpAInterfaceTrunkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrrpAInterfaceTrunkArgs | VrrpAInterfaceTrunkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrrpAInterfaceTrunkState | undefined;
            resourceInputs["both"] = state ? state.both : undefined;
            resourceInputs["noHeartbeat"] = state ? state.noHeartbeat : undefined;
            resourceInputs["routerInterface"] = state ? state.routerInterface : undefined;
            resourceInputs["serverInterface"] = state ? state.serverInterface : undefined;
            resourceInputs["trunkVal"] = state ? state.trunkVal : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vlanCfgs"] = state ? state.vlanCfgs : undefined;
        } else {
            const args = argsOrState as VrrpAInterfaceTrunkArgs | undefined;
            if ((!args || args.trunkVal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trunkVal'");
            }
            resourceInputs["both"] = args ? args.both : undefined;
            resourceInputs["noHeartbeat"] = args ? args.noHeartbeat : undefined;
            resourceInputs["routerInterface"] = args ? args.routerInterface : undefined;
            resourceInputs["serverInterface"] = args ? args.serverInterface : undefined;
            resourceInputs["trunkVal"] = args ? args.trunkVal : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vlanCfgs"] = args ? args.vlanCfgs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VrrpAInterfaceTrunk.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VrrpAInterfaceTrunk resources.
 */
export interface VrrpAInterfaceTrunkState {
    /**
     * both a router and server interface
     */
    both?: pulumi.Input<number>;
    /**
     * do not send out heartbeat packet from this interface
     */
    noHeartbeat?: pulumi.Input<number>;
    /**
     * interface to upstream router
     */
    routerInterface?: pulumi.Input<number>;
    /**
     * interface to real server
     */
    serverInterface?: pulumi.Input<number>;
    /**
     * Ethernet Interface
     */
    trunkVal?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vlanCfgs?: pulumi.Input<pulumi.Input<inputs.VrrpAInterfaceTrunkVlanCfg>[]>;
}

/**
 * The set of arguments for constructing a VrrpAInterfaceTrunk resource.
 */
export interface VrrpAInterfaceTrunkArgs {
    /**
     * both a router and server interface
     */
    both?: pulumi.Input<number>;
    /**
     * do not send out heartbeat packet from this interface
     */
    noHeartbeat?: pulumi.Input<number>;
    /**
     * interface to upstream router
     */
    routerInterface?: pulumi.Input<number>;
    /**
     * interface to real server
     */
    serverInterface?: pulumi.Input<number>;
    /**
     * Ethernet Interface
     */
    trunkVal: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    vlanCfgs?: pulumi.Input<pulumi.Input<inputs.VrrpAInterfaceTrunkVlanCfg>[]>;
}
