// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ThreatIntelThreatFeed extends pulumi.CustomResource {
    /**
     * Get an existing ThreatIntelThreatFeed resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThreatIntelThreatFeedState, opts?: pulumi.CustomResourceOptions): ThreatIntelThreatFeed {
        return new ThreatIntelThreatFeed(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/threatIntelThreatFeed:ThreatIntelThreatFeed';

    /**
     * Returns true if the given object is an instance of ThreatIntelThreatFeed.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThreatIntelThreatFeed {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThreatIntelThreatFeed.__pulumiType;
    }

    /**
     * Realm for NTLM authentication
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    /**
     * Enable module
     */
    public readonly enable!: pulumi.Output<number | undefined>;
    /**
     * 'disable': Disable all logging; 'error': Log error events; 'warning': Log warning events and above; 'info': Log info
     * events and above; 'debug': Log debug events and above; 'trace': enable all logs;
     */
    public readonly logLevel!: pulumi.Output<string | undefined>;
    /**
     * Port to query server(default 443)
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * 'ntlm': NTLM authentication(default); 'basic': Basic authentication;
     */
    public readonly proxyAuthType!: pulumi.Output<string | undefined>;
    /**
     * Proxy server hostname or IP address
     */
    public readonly proxyHost!: pulumi.Output<string | undefined>;
    /**
     * Password for proxy authentication
     */
    public readonly proxyPassword!: pulumi.Output<number | undefined>;
    /**
     * Port to connect on proxy server
     */
    public readonly proxyPort!: pulumi.Output<number | undefined>;
    /**
     * Username for proxy authentication
     */
    public readonly proxyUsername!: pulumi.Output<string | undefined>;
    /**
     * Disables real time updates(default enable)
     */
    public readonly rtuUpdateDisable!: pulumi.Output<number | undefined>;
    /**
     * password value
     */
    public readonly secretString!: pulumi.Output<string | undefined>;
    /**
     * Server IP or Hostname
     */
    public readonly server!: pulumi.Output<string | undefined>;
    /**
     * Server Timeout in seconds (default: 15s)
     */
    public readonly serverTimeout!: pulumi.Output<number | undefined>;
    /**
     * 'webroot': Configure Webroot module options;
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Interval to check for database or RTU updates(default 120 mins)
     */
    public readonly updateInterval!: pulumi.Output<number | undefined>;
    /**
     * Use management interface for all communication with threat-intel server
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ThreatIntelThreatFeed resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThreatIntelThreatFeedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThreatIntelThreatFeedArgs | ThreatIntelThreatFeedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThreatIntelThreatFeedState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["logLevel"] = state ? state.logLevel : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["proxyAuthType"] = state ? state.proxyAuthType : undefined;
            resourceInputs["proxyHost"] = state ? state.proxyHost : undefined;
            resourceInputs["proxyPassword"] = state ? state.proxyPassword : undefined;
            resourceInputs["proxyPort"] = state ? state.proxyPort : undefined;
            resourceInputs["proxyUsername"] = state ? state.proxyUsername : undefined;
            resourceInputs["rtuUpdateDisable"] = state ? state.rtuUpdateDisable : undefined;
            resourceInputs["secretString"] = state ? state.secretString : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serverTimeout"] = state ? state.serverTimeout : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updateInterval"] = state ? state.updateInterval : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ThreatIntelThreatFeedArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["logLevel"] = args ? args.logLevel : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["proxyAuthType"] = args ? args.proxyAuthType : undefined;
            resourceInputs["proxyHost"] = args ? args.proxyHost : undefined;
            resourceInputs["proxyPassword"] = args ? args.proxyPassword : undefined;
            resourceInputs["proxyPort"] = args ? args.proxyPort : undefined;
            resourceInputs["proxyUsername"] = args ? args.proxyUsername : undefined;
            resourceInputs["rtuUpdateDisable"] = args ? args.rtuUpdateDisable : undefined;
            resourceInputs["secretString"] = args ? args.secretString : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serverTimeout"] = args ? args.serverTimeout : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["updateInterval"] = args ? args.updateInterval : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThreatIntelThreatFeed.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ThreatIntelThreatFeed resources.
 */
export interface ThreatIntelThreatFeedState {
    /**
     * Realm for NTLM authentication
     */
    domain?: pulumi.Input<string>;
    /**
     * Enable module
     */
    enable?: pulumi.Input<number>;
    /**
     * 'disable': Disable all logging; 'error': Log error events; 'warning': Log warning events and above; 'info': Log info
     * events and above; 'debug': Log debug events and above; 'trace': enable all logs;
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Port to query server(default 443)
     */
    port?: pulumi.Input<number>;
    /**
     * 'ntlm': NTLM authentication(default); 'basic': Basic authentication;
     */
    proxyAuthType?: pulumi.Input<string>;
    /**
     * Proxy server hostname or IP address
     */
    proxyHost?: pulumi.Input<string>;
    /**
     * Password for proxy authentication
     */
    proxyPassword?: pulumi.Input<number>;
    /**
     * Port to connect on proxy server
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * Username for proxy authentication
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * Disables real time updates(default enable)
     */
    rtuUpdateDisable?: pulumi.Input<number>;
    /**
     * password value
     */
    secretString?: pulumi.Input<string>;
    /**
     * Server IP or Hostname
     */
    server?: pulumi.Input<string>;
    /**
     * Server Timeout in seconds (default: 15s)
     */
    serverTimeout?: pulumi.Input<number>;
    /**
     * 'webroot': Configure Webroot module options;
     */
    type?: pulumi.Input<string>;
    /**
     * Interval to check for database or RTU updates(default 120 mins)
     */
    updateInterval?: pulumi.Input<number>;
    /**
     * Use management interface for all communication with threat-intel server
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ThreatIntelThreatFeed resource.
 */
export interface ThreatIntelThreatFeedArgs {
    /**
     * Realm for NTLM authentication
     */
    domain?: pulumi.Input<string>;
    /**
     * Enable module
     */
    enable?: pulumi.Input<number>;
    /**
     * 'disable': Disable all logging; 'error': Log error events; 'warning': Log warning events and above; 'info': Log info
     * events and above; 'debug': Log debug events and above; 'trace': enable all logs;
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Port to query server(default 443)
     */
    port?: pulumi.Input<number>;
    /**
     * 'ntlm': NTLM authentication(default); 'basic': Basic authentication;
     */
    proxyAuthType?: pulumi.Input<string>;
    /**
     * Proxy server hostname or IP address
     */
    proxyHost?: pulumi.Input<string>;
    /**
     * Password for proxy authentication
     */
    proxyPassword?: pulumi.Input<number>;
    /**
     * Port to connect on proxy server
     */
    proxyPort?: pulumi.Input<number>;
    /**
     * Username for proxy authentication
     */
    proxyUsername?: pulumi.Input<string>;
    /**
     * Disables real time updates(default enable)
     */
    rtuUpdateDisable?: pulumi.Input<number>;
    /**
     * password value
     */
    secretString?: pulumi.Input<string>;
    /**
     * Server IP or Hostname
     */
    server?: pulumi.Input<string>;
    /**
     * Server Timeout in seconds (default: 15s)
     */
    serverTimeout?: pulumi.Input<number>;
    /**
     * 'webroot': Configure Webroot module options;
     */
    type: pulumi.Input<string>;
    /**
     * Interval to check for database or RTU updates(default 120 mins)
     */
    updateInterval?: pulumi.Input<number>;
    /**
     * Use management interface for all communication with threat-intel server
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
