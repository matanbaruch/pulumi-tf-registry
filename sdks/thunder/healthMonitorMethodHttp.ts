// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthMonitorMethodHttp extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodHttp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodHttpState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodHttp {
        return new HealthMonitorMethodHttp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodHttp:HealthMonitorMethodHttp';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodHttp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodHttp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodHttp.__pulumiType;
    }

    /**
     * HTTP type
     */
    public readonly http!: pulumi.Output<number | undefined>;
    /**
     * Specify what you expect from the response message
     */
    public readonly httpExpect!: pulumi.Output<number | undefined>;
    /**
     * Specify "Host:" header used in request (enclose IPv6 address in [])
     */
    public readonly httpHost!: pulumi.Output<string | undefined>;
    /**
     * Http Kerberos Auth
     */
    public readonly httpKerberosAuth!: pulumi.Output<number | undefined>;
    public readonly httpKerberosKdc!: pulumi.Output<outputs.HealthMonitorMethodHttpHttpKerberosKdc | undefined>;
    /**
     * Specify realm of Kerberos server
     */
    public readonly httpKerberosRealm!: pulumi.Output<string | undefined>;
    /**
     * Specify response code for maintenance (Format is xx,xx-xx (xx between [100, 899]))
     */
    public readonly httpMaintenanceCode!: pulumi.Output<string | undefined>;
    /**
     * Specify the user password
     */
    public readonly httpPassword!: pulumi.Output<number | undefined>;
    /**
     * Specify password, '' means empty password
     */
    public readonly httpPasswordString!: pulumi.Output<string | undefined>;
    /**
     * Specify HTTP Port (Specify port number (default 80))
     */
    public readonly httpPort!: pulumi.Output<number | undefined>;
    /**
     * Specify the HTTP post data (Input post data here)
     */
    public readonly httpPostdata!: pulumi.Output<string | undefined>;
    /**
     * Specify the HTTP post data (Input post data file name here)
     */
    public readonly httpPostfile!: pulumi.Output<string | undefined>;
    /**
     * Specify response code range (e.g. 200,400-430) (Format is xx,xx-xx (xx between [100, 899]))
     */
    public readonly httpResponseCode!: pulumi.Output<string | undefined>;
    /**
     * Specify text expected
     */
    public readonly httpText!: pulumi.Output<string | undefined>;
    /**
     * Specify URL string, default is GET /
     */
    public readonly httpUrl!: pulumi.Output<number | undefined>;
    /**
     * Specify the username
     */
    public readonly httpUsername!: pulumi.Output<string | undefined>;
    /**
     * Specify response text for maintenance
     */
    public readonly maintenance!: pulumi.Output<number | undefined>;
    /**
     * Specify text for maintenance
     */
    public readonly maintenanceText!: pulumi.Output<string | undefined>;
    /**
     * Specify Regex text for maintenance
     */
    public readonly maintenanceTextRegex!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify URL path, default is "/"
     */
    public readonly postPath!: pulumi.Output<string | undefined>;
    /**
     * 'postdata': Specify the HTTP post data; 'postfile': Specify the HTTP post data;
     */
    public readonly postType!: pulumi.Output<string | undefined>;
    /**
     * Specify response code range with Regex (code with Regex, such as [2-5][0-9][0-9])
     */
    public readonly responseCodeRegex!: pulumi.Output<string | undefined>;
    /**
     * Specify text expected with Regex
     */
    public readonly textRegex!: pulumi.Output<string | undefined>;
    /**
     * Specify URL path, default is "/"
     */
    public readonly urlPath!: pulumi.Output<string | undefined>;
    /**
     * 'GET': HTTP GET method; 'POST': HTTP POST method; 'HEAD': HTTP HEAD method;
     */
    public readonly urlType!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specify HTTP version2 (Specify http version 2)
     */
    public readonly version2!: pulumi.Output<number | undefined>;

    /**
     * Create a HealthMonitorMethodHttp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodHttpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodHttpArgs | HealthMonitorMethodHttpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodHttpState | undefined;
            resourceInputs["http"] = state ? state.http : undefined;
            resourceInputs["httpExpect"] = state ? state.httpExpect : undefined;
            resourceInputs["httpHost"] = state ? state.httpHost : undefined;
            resourceInputs["httpKerberosAuth"] = state ? state.httpKerberosAuth : undefined;
            resourceInputs["httpKerberosKdc"] = state ? state.httpKerberosKdc : undefined;
            resourceInputs["httpKerberosRealm"] = state ? state.httpKerberosRealm : undefined;
            resourceInputs["httpMaintenanceCode"] = state ? state.httpMaintenanceCode : undefined;
            resourceInputs["httpPassword"] = state ? state.httpPassword : undefined;
            resourceInputs["httpPasswordString"] = state ? state.httpPasswordString : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpPostdata"] = state ? state.httpPostdata : undefined;
            resourceInputs["httpPostfile"] = state ? state.httpPostfile : undefined;
            resourceInputs["httpResponseCode"] = state ? state.httpResponseCode : undefined;
            resourceInputs["httpText"] = state ? state.httpText : undefined;
            resourceInputs["httpUrl"] = state ? state.httpUrl : undefined;
            resourceInputs["httpUsername"] = state ? state.httpUsername : undefined;
            resourceInputs["maintenance"] = state ? state.maintenance : undefined;
            resourceInputs["maintenanceText"] = state ? state.maintenanceText : undefined;
            resourceInputs["maintenanceTextRegex"] = state ? state.maintenanceTextRegex : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["postPath"] = state ? state.postPath : undefined;
            resourceInputs["postType"] = state ? state.postType : undefined;
            resourceInputs["responseCodeRegex"] = state ? state.responseCodeRegex : undefined;
            resourceInputs["textRegex"] = state ? state.textRegex : undefined;
            resourceInputs["urlPath"] = state ? state.urlPath : undefined;
            resourceInputs["urlType"] = state ? state.urlType : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["version2"] = state ? state.version2 : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodHttpArgs | undefined;
            resourceInputs["http"] = args ? args.http : undefined;
            resourceInputs["httpExpect"] = args ? args.httpExpect : undefined;
            resourceInputs["httpHost"] = args ? args.httpHost : undefined;
            resourceInputs["httpKerberosAuth"] = args ? args.httpKerberosAuth : undefined;
            resourceInputs["httpKerberosKdc"] = args ? args.httpKerberosKdc : undefined;
            resourceInputs["httpKerberosRealm"] = args ? args.httpKerberosRealm : undefined;
            resourceInputs["httpMaintenanceCode"] = args ? args.httpMaintenanceCode : undefined;
            resourceInputs["httpPassword"] = args ? args.httpPassword : undefined;
            resourceInputs["httpPasswordString"] = args ? args.httpPasswordString : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpPostdata"] = args ? args.httpPostdata : undefined;
            resourceInputs["httpPostfile"] = args ? args.httpPostfile : undefined;
            resourceInputs["httpResponseCode"] = args ? args.httpResponseCode : undefined;
            resourceInputs["httpText"] = args ? args.httpText : undefined;
            resourceInputs["httpUrl"] = args ? args.httpUrl : undefined;
            resourceInputs["httpUsername"] = args ? args.httpUsername : undefined;
            resourceInputs["maintenance"] = args ? args.maintenance : undefined;
            resourceInputs["maintenanceText"] = args ? args.maintenanceText : undefined;
            resourceInputs["maintenanceTextRegex"] = args ? args.maintenanceTextRegex : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["postPath"] = args ? args.postPath : undefined;
            resourceInputs["postType"] = args ? args.postType : undefined;
            resourceInputs["responseCodeRegex"] = args ? args.responseCodeRegex : undefined;
            resourceInputs["textRegex"] = args ? args.textRegex : undefined;
            resourceInputs["urlPath"] = args ? args.urlPath : undefined;
            resourceInputs["urlType"] = args ? args.urlType : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["version2"] = args ? args.version2 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodHttp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodHttp resources.
 */
export interface HealthMonitorMethodHttpState {
    /**
     * HTTP type
     */
    http?: pulumi.Input<number>;
    /**
     * Specify what you expect from the response message
     */
    httpExpect?: pulumi.Input<number>;
    /**
     * Specify "Host:" header used in request (enclose IPv6 address in [])
     */
    httpHost?: pulumi.Input<string>;
    /**
     * Http Kerberos Auth
     */
    httpKerberosAuth?: pulumi.Input<number>;
    httpKerberosKdc?: pulumi.Input<inputs.HealthMonitorMethodHttpHttpKerberosKdc>;
    /**
     * Specify realm of Kerberos server
     */
    httpKerberosRealm?: pulumi.Input<string>;
    /**
     * Specify response code for maintenance (Format is xx,xx-xx (xx between [100, 899]))
     */
    httpMaintenanceCode?: pulumi.Input<string>;
    /**
     * Specify the user password
     */
    httpPassword?: pulumi.Input<number>;
    /**
     * Specify password, '' means empty password
     */
    httpPasswordString?: pulumi.Input<string>;
    /**
     * Specify HTTP Port (Specify port number (default 80))
     */
    httpPort?: pulumi.Input<number>;
    /**
     * Specify the HTTP post data (Input post data here)
     */
    httpPostdata?: pulumi.Input<string>;
    /**
     * Specify the HTTP post data (Input post data file name here)
     */
    httpPostfile?: pulumi.Input<string>;
    /**
     * Specify response code range (e.g. 200,400-430) (Format is xx,xx-xx (xx between [100, 899]))
     */
    httpResponseCode?: pulumi.Input<string>;
    /**
     * Specify text expected
     */
    httpText?: pulumi.Input<string>;
    /**
     * Specify URL string, default is GET /
     */
    httpUrl?: pulumi.Input<number>;
    /**
     * Specify the username
     */
    httpUsername?: pulumi.Input<string>;
    /**
     * Specify response text for maintenance
     */
    maintenance?: pulumi.Input<number>;
    /**
     * Specify text for maintenance
     */
    maintenanceText?: pulumi.Input<string>;
    /**
     * Specify Regex text for maintenance
     */
    maintenanceTextRegex?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    postPath?: pulumi.Input<string>;
    /**
     * 'postdata': Specify the HTTP post data; 'postfile': Specify the HTTP post data;
     */
    postType?: pulumi.Input<string>;
    /**
     * Specify response code range with Regex (code with Regex, such as [2-5][0-9][0-9])
     */
    responseCodeRegex?: pulumi.Input<string>;
    /**
     * Specify text expected with Regex
     */
    textRegex?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    urlPath?: pulumi.Input<string>;
    /**
     * 'GET': HTTP GET method; 'POST': HTTP POST method; 'HEAD': HTTP HEAD method;
     */
    urlType?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify HTTP version2 (Specify http version 2)
     */
    version2?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodHttp resource.
 */
export interface HealthMonitorMethodHttpArgs {
    /**
     * HTTP type
     */
    http?: pulumi.Input<number>;
    /**
     * Specify what you expect from the response message
     */
    httpExpect?: pulumi.Input<number>;
    /**
     * Specify "Host:" header used in request (enclose IPv6 address in [])
     */
    httpHost?: pulumi.Input<string>;
    /**
     * Http Kerberos Auth
     */
    httpKerberosAuth?: pulumi.Input<number>;
    httpKerberosKdc?: pulumi.Input<inputs.HealthMonitorMethodHttpHttpKerberosKdc>;
    /**
     * Specify realm of Kerberos server
     */
    httpKerberosRealm?: pulumi.Input<string>;
    /**
     * Specify response code for maintenance (Format is xx,xx-xx (xx between [100, 899]))
     */
    httpMaintenanceCode?: pulumi.Input<string>;
    /**
     * Specify the user password
     */
    httpPassword?: pulumi.Input<number>;
    /**
     * Specify password, '' means empty password
     */
    httpPasswordString?: pulumi.Input<string>;
    /**
     * Specify HTTP Port (Specify port number (default 80))
     */
    httpPort?: pulumi.Input<number>;
    /**
     * Specify the HTTP post data (Input post data here)
     */
    httpPostdata?: pulumi.Input<string>;
    /**
     * Specify the HTTP post data (Input post data file name here)
     */
    httpPostfile?: pulumi.Input<string>;
    /**
     * Specify response code range (e.g. 200,400-430) (Format is xx,xx-xx (xx between [100, 899]))
     */
    httpResponseCode?: pulumi.Input<string>;
    /**
     * Specify text expected
     */
    httpText?: pulumi.Input<string>;
    /**
     * Specify URL string, default is GET /
     */
    httpUrl?: pulumi.Input<number>;
    /**
     * Specify the username
     */
    httpUsername?: pulumi.Input<string>;
    /**
     * Specify response text for maintenance
     */
    maintenance?: pulumi.Input<number>;
    /**
     * Specify text for maintenance
     */
    maintenanceText?: pulumi.Input<string>;
    /**
     * Specify Regex text for maintenance
     */
    maintenanceTextRegex?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    postPath?: pulumi.Input<string>;
    /**
     * 'postdata': Specify the HTTP post data; 'postfile': Specify the HTTP post data;
     */
    postType?: pulumi.Input<string>;
    /**
     * Specify response code range with Regex (code with Regex, such as [2-5][0-9][0-9])
     */
    responseCodeRegex?: pulumi.Input<string>;
    /**
     * Specify text expected with Regex
     */
    textRegex?: pulumi.Input<string>;
    /**
     * Specify URL path, default is "/"
     */
    urlPath?: pulumi.Input<string>;
    /**
     * 'GET': HTTP GET method; 'POST': HTTP POST method; 'HEAD': HTTP HEAD method;
     */
    urlType?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify HTTP version2 (Specify http version 2)
     */
    version2?: pulumi.Input<number>;
}
