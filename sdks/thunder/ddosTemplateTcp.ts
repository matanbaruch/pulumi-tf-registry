// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosTemplateTcp extends pulumi.CustomResource {
    /**
     * Get an existing DdosTemplateTcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosTemplateTcpState, opts?: pulumi.CustomResourceOptions): DdosTemplateTcp {
        return new DdosTemplateTcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosTemplateTcp:DdosTemplateTcp';

    /**
     * Returns true if the given object is an instance of DdosTemplateTcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosTemplateTcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosTemplateTcp.__pulumiType;
    }

    /**
     * Enable Reset client TCP SYN+ACK for authentication (DST support only)
     */
    public readonly ackAuthenticationSynackReset!: pulumi.Output<number | undefined>;
    public readonly actionCfg!: pulumi.Output<outputs.DdosTemplateTcpActionCfg | undefined>;
    /**
     * Take action if action-on-ack RTO-authentication fail over retry time(default:5)
     */
    public readonly actionOnAckRtoRetryCount!: pulumi.Output<number | undefined>;
    /**
     * Take action if action-on-syn RTO-authentication fail over retry time(default:5)
     */
    public readonly actionOnSynRtoRetryCount!: pulumi.Output<number | undefined>;
    public readonly actionSynCfg!: pulumi.Output<outputs.DdosTemplateTcpActionSynCfg | undefined>;
    /**
     * Session age in minutes
     */
    public readonly age!: pulumi.Output<number | undefined>;
    /**
     * Allow RA packets to be used for auth
     */
    public readonly allowRa!: pulumi.Output<number | undefined>;
    /**
     * Treat TCP SYN+PSH as a TCP SYN (DST tcp ports support only)
     */
    public readonly allowSynOtherflags!: pulumi.Output<number | undefined>;
    /**
     * Allow create sessions on SYNACK without syn-auth and ack-auth (ASYM Mode only)
     */
    public readonly allowSynackSkipAuthentications!: pulumi.Output<number | undefined>;
    /**
     * Allow TCP Fast Open
     */
    public readonly allowTcpTfo!: pulumi.Output<number | undefined>;
    /**
     * Black list Src IP if out of seq pkts exceed configured threshold
     */
    public readonly blackListOutOfSeq!: pulumi.Output<number | undefined>;
    /**
     * Black list Src IP if retransmit pkts exceed configured threshold
     */
    public readonly blackListRetransmit!: pulumi.Output<number | undefined>;
    /**
     * Black list Src IP if zero window pkts exceed configured threshold
     */
    public readonly blackListZeroWin!: pulumi.Output<number | undefined>;
    /**
     * Only count SYN-initiated connections towards connection-rate tracking
     */
    public readonly connRateLimitOnSynOnly!: pulumi.Output<number | undefined>;
    /**
     * Enable connection establishment on SYN only
     */
    public readonly createConnOnSynOnly!: pulumi.Output<number | undefined>;
    public readonly dropKnownRespSrcPortCfg!: pulumi.Output<outputs.DdosTemplateTcpDropKnownRespSrcPortCfg | undefined>;
    public readonly dst!: pulumi.Output<outputs.DdosTemplateTcpDst | undefined>;
    public readonly filterLists!: pulumi.Output<outputs.DdosTemplateTcpFilterList[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    /**
     * 'drop': Drop packets for out-of-seq rate exceed (Default); 'blacklist-src': help Blacklist-src for out-of-seq rate
     * exceed; 'ignore': help Ignore out-of-seq rate exceed;
     */
    public readonly perConnOutOfSeqRateAction!: pulumi.Output<string | undefined>;
    /**
     * Take action if out-of-seq pkt rate exceed configured threshold
     */
    public readonly perConnOutOfSeqRateLimit!: pulumi.Output<number | undefined>;
    /**
     * 'drop': Drop packets for per-conn-pkt-rate exceed (Default); 'blacklist-src': help Blacklist-src for per-conn-pkt-rate
     * exceed; 'ignore': Ignore per-conn-pkt-rate-exceed;
     */
    public readonly perConnPktRateAction!: pulumi.Output<string | undefined>;
    /**
     * Packet rate limit per connection per rate-interval
     */
    public readonly perConnPktRateLimit!: pulumi.Output<number | undefined>;
    /**
     * '100ms': 100ms; '1sec': 1sec; '10sec': 10sec;
     */
    public readonly perConnRateInterval!: pulumi.Output<string | undefined>;
    /**
     * 'drop': Drop packets for retransmit rate exceed (Default); 'blacklist-src': help Blacklist-src for retransmit rate
     * exceed; 'ignore': help Ignore retransmit rate exceed;
     */
    public readonly perConnRetransmitRateAction!: pulumi.Output<string | undefined>;
    /**
     * Take action if retransmit pkt rate exceed configured threshold
     */
    public readonly perConnRetransmitRateLimit!: pulumi.Output<number | undefined>;
    /**
     * 'drop': Drop packets for zero-win rate exceed (Default); 'blacklist-src': help Blacklist-src for zero-win rate exceed;
     * 'ignore': help Ignore zero-win rate exceed;
     */
    public readonly perConnZeroWinRateAction!: pulumi.Output<string | undefined>;
    /**
     * Take action if zero window pkt rate exceed configured threshold
     */
    public readonly perConnZeroWinRateLimit!: pulumi.Output<number | undefined>;
    public readonly progressionTracking!: pulumi.Output<outputs.DdosTemplateTcpProgressionTracking | undefined>;
    public readonly src!: pulumi.Output<outputs.DdosTemplateTcpSrc | undefined>;
    /**
     * 'send-rst': Send RST to all client's concurrent auth attempts; 'force-rst-by-ack': Force client RST via the use of ACK;
     * 'force-rst-by-synack': Force client RST via the use of bad SYN|ACK; 'disable': Disable TCP SYN Authentication;
     * 'send-rst-once': Send RST to one client's concurrent auth attempts;
     */
    public readonly synAuth!: pulumi.Output<string | undefined>;
    /**
     * Enable SYN Cookie
     */
    public readonly synCookie!: pulumi.Output<number | undefined>;
    /**
     * Config SYNACK rate limit
     */
    public readonly synackRateLimit!: pulumi.Output<number | undefined>;
    /**
     * SYNACK will be counted in Dst Syn-rate limit
     */
    public readonly trackTogetherWithSyn!: pulumi.Output<number | undefined>;
    public readonly tunnelEncap!: pulumi.Output<outputs.DdosTemplateTcpTunnelEncap | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosTemplateTcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosTemplateTcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosTemplateTcpArgs | DdosTemplateTcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosTemplateTcpState | undefined;
            resourceInputs["ackAuthenticationSynackReset"] = state ? state.ackAuthenticationSynackReset : undefined;
            resourceInputs["actionCfg"] = state ? state.actionCfg : undefined;
            resourceInputs["actionOnAckRtoRetryCount"] = state ? state.actionOnAckRtoRetryCount : undefined;
            resourceInputs["actionOnSynRtoRetryCount"] = state ? state.actionOnSynRtoRetryCount : undefined;
            resourceInputs["actionSynCfg"] = state ? state.actionSynCfg : undefined;
            resourceInputs["age"] = state ? state.age : undefined;
            resourceInputs["allowRa"] = state ? state.allowRa : undefined;
            resourceInputs["allowSynOtherflags"] = state ? state.allowSynOtherflags : undefined;
            resourceInputs["allowSynackSkipAuthentications"] = state ? state.allowSynackSkipAuthentications : undefined;
            resourceInputs["allowTcpTfo"] = state ? state.allowTcpTfo : undefined;
            resourceInputs["blackListOutOfSeq"] = state ? state.blackListOutOfSeq : undefined;
            resourceInputs["blackListRetransmit"] = state ? state.blackListRetransmit : undefined;
            resourceInputs["blackListZeroWin"] = state ? state.blackListZeroWin : undefined;
            resourceInputs["connRateLimitOnSynOnly"] = state ? state.connRateLimitOnSynOnly : undefined;
            resourceInputs["createConnOnSynOnly"] = state ? state.createConnOnSynOnly : undefined;
            resourceInputs["dropKnownRespSrcPortCfg"] = state ? state.dropKnownRespSrcPortCfg : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["filterLists"] = state ? state.filterLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["perConnOutOfSeqRateAction"] = state ? state.perConnOutOfSeqRateAction : undefined;
            resourceInputs["perConnOutOfSeqRateLimit"] = state ? state.perConnOutOfSeqRateLimit : undefined;
            resourceInputs["perConnPktRateAction"] = state ? state.perConnPktRateAction : undefined;
            resourceInputs["perConnPktRateLimit"] = state ? state.perConnPktRateLimit : undefined;
            resourceInputs["perConnRateInterval"] = state ? state.perConnRateInterval : undefined;
            resourceInputs["perConnRetransmitRateAction"] = state ? state.perConnRetransmitRateAction : undefined;
            resourceInputs["perConnRetransmitRateLimit"] = state ? state.perConnRetransmitRateLimit : undefined;
            resourceInputs["perConnZeroWinRateAction"] = state ? state.perConnZeroWinRateAction : undefined;
            resourceInputs["perConnZeroWinRateLimit"] = state ? state.perConnZeroWinRateLimit : undefined;
            resourceInputs["progressionTracking"] = state ? state.progressionTracking : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["synAuth"] = state ? state.synAuth : undefined;
            resourceInputs["synCookie"] = state ? state.synCookie : undefined;
            resourceInputs["synackRateLimit"] = state ? state.synackRateLimit : undefined;
            resourceInputs["trackTogetherWithSyn"] = state ? state.trackTogetherWithSyn : undefined;
            resourceInputs["tunnelEncap"] = state ? state.tunnelEncap : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosTemplateTcpArgs | undefined;
            resourceInputs["ackAuthenticationSynackReset"] = args ? args.ackAuthenticationSynackReset : undefined;
            resourceInputs["actionCfg"] = args ? args.actionCfg : undefined;
            resourceInputs["actionOnAckRtoRetryCount"] = args ? args.actionOnAckRtoRetryCount : undefined;
            resourceInputs["actionOnSynRtoRetryCount"] = args ? args.actionOnSynRtoRetryCount : undefined;
            resourceInputs["actionSynCfg"] = args ? args.actionSynCfg : undefined;
            resourceInputs["age"] = args ? args.age : undefined;
            resourceInputs["allowRa"] = args ? args.allowRa : undefined;
            resourceInputs["allowSynOtherflags"] = args ? args.allowSynOtherflags : undefined;
            resourceInputs["allowSynackSkipAuthentications"] = args ? args.allowSynackSkipAuthentications : undefined;
            resourceInputs["allowTcpTfo"] = args ? args.allowTcpTfo : undefined;
            resourceInputs["blackListOutOfSeq"] = args ? args.blackListOutOfSeq : undefined;
            resourceInputs["blackListRetransmit"] = args ? args.blackListRetransmit : undefined;
            resourceInputs["blackListZeroWin"] = args ? args.blackListZeroWin : undefined;
            resourceInputs["connRateLimitOnSynOnly"] = args ? args.connRateLimitOnSynOnly : undefined;
            resourceInputs["createConnOnSynOnly"] = args ? args.createConnOnSynOnly : undefined;
            resourceInputs["dropKnownRespSrcPortCfg"] = args ? args.dropKnownRespSrcPortCfg : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["filterLists"] = args ? args.filterLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["perConnOutOfSeqRateAction"] = args ? args.perConnOutOfSeqRateAction : undefined;
            resourceInputs["perConnOutOfSeqRateLimit"] = args ? args.perConnOutOfSeqRateLimit : undefined;
            resourceInputs["perConnPktRateAction"] = args ? args.perConnPktRateAction : undefined;
            resourceInputs["perConnPktRateLimit"] = args ? args.perConnPktRateLimit : undefined;
            resourceInputs["perConnRateInterval"] = args ? args.perConnRateInterval : undefined;
            resourceInputs["perConnRetransmitRateAction"] = args ? args.perConnRetransmitRateAction : undefined;
            resourceInputs["perConnRetransmitRateLimit"] = args ? args.perConnRetransmitRateLimit : undefined;
            resourceInputs["perConnZeroWinRateAction"] = args ? args.perConnZeroWinRateAction : undefined;
            resourceInputs["perConnZeroWinRateLimit"] = args ? args.perConnZeroWinRateLimit : undefined;
            resourceInputs["progressionTracking"] = args ? args.progressionTracking : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["synAuth"] = args ? args.synAuth : undefined;
            resourceInputs["synCookie"] = args ? args.synCookie : undefined;
            resourceInputs["synackRateLimit"] = args ? args.synackRateLimit : undefined;
            resourceInputs["trackTogetherWithSyn"] = args ? args.trackTogetherWithSyn : undefined;
            resourceInputs["tunnelEncap"] = args ? args.tunnelEncap : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosTemplateTcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosTemplateTcp resources.
 */
export interface DdosTemplateTcpState {
    /**
     * Enable Reset client TCP SYN+ACK for authentication (DST support only)
     */
    ackAuthenticationSynackReset?: pulumi.Input<number>;
    actionCfg?: pulumi.Input<inputs.DdosTemplateTcpActionCfg>;
    /**
     * Take action if action-on-ack RTO-authentication fail over retry time(default:5)
     */
    actionOnAckRtoRetryCount?: pulumi.Input<number>;
    /**
     * Take action if action-on-syn RTO-authentication fail over retry time(default:5)
     */
    actionOnSynRtoRetryCount?: pulumi.Input<number>;
    actionSynCfg?: pulumi.Input<inputs.DdosTemplateTcpActionSynCfg>;
    /**
     * Session age in minutes
     */
    age?: pulumi.Input<number>;
    /**
     * Allow RA packets to be used for auth
     */
    allowRa?: pulumi.Input<number>;
    /**
     * Treat TCP SYN+PSH as a TCP SYN (DST tcp ports support only)
     */
    allowSynOtherflags?: pulumi.Input<number>;
    /**
     * Allow create sessions on SYNACK without syn-auth and ack-auth (ASYM Mode only)
     */
    allowSynackSkipAuthentications?: pulumi.Input<number>;
    /**
     * Allow TCP Fast Open
     */
    allowTcpTfo?: pulumi.Input<number>;
    /**
     * Black list Src IP if out of seq pkts exceed configured threshold
     */
    blackListOutOfSeq?: pulumi.Input<number>;
    /**
     * Black list Src IP if retransmit pkts exceed configured threshold
     */
    blackListRetransmit?: pulumi.Input<number>;
    /**
     * Black list Src IP if zero window pkts exceed configured threshold
     */
    blackListZeroWin?: pulumi.Input<number>;
    /**
     * Only count SYN-initiated connections towards connection-rate tracking
     */
    connRateLimitOnSynOnly?: pulumi.Input<number>;
    /**
     * Enable connection establishment on SYN only
     */
    createConnOnSynOnly?: pulumi.Input<number>;
    dropKnownRespSrcPortCfg?: pulumi.Input<inputs.DdosTemplateTcpDropKnownRespSrcPortCfg>;
    dst?: pulumi.Input<inputs.DdosTemplateTcpDst>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.DdosTemplateTcpFilterList>[]>;
    name?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for out-of-seq rate exceed (Default); 'blacklist-src': help Blacklist-src for out-of-seq rate
     * exceed; 'ignore': help Ignore out-of-seq rate exceed;
     */
    perConnOutOfSeqRateAction?: pulumi.Input<string>;
    /**
     * Take action if out-of-seq pkt rate exceed configured threshold
     */
    perConnOutOfSeqRateLimit?: pulumi.Input<number>;
    /**
     * 'drop': Drop packets for per-conn-pkt-rate exceed (Default); 'blacklist-src': help Blacklist-src for per-conn-pkt-rate
     * exceed; 'ignore': Ignore per-conn-pkt-rate-exceed;
     */
    perConnPktRateAction?: pulumi.Input<string>;
    /**
     * Packet rate limit per connection per rate-interval
     */
    perConnPktRateLimit?: pulumi.Input<number>;
    /**
     * '100ms': 100ms; '1sec': 1sec; '10sec': 10sec;
     */
    perConnRateInterval?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for retransmit rate exceed (Default); 'blacklist-src': help Blacklist-src for retransmit rate
     * exceed; 'ignore': help Ignore retransmit rate exceed;
     */
    perConnRetransmitRateAction?: pulumi.Input<string>;
    /**
     * Take action if retransmit pkt rate exceed configured threshold
     */
    perConnRetransmitRateLimit?: pulumi.Input<number>;
    /**
     * 'drop': Drop packets for zero-win rate exceed (Default); 'blacklist-src': help Blacklist-src for zero-win rate exceed;
     * 'ignore': help Ignore zero-win rate exceed;
     */
    perConnZeroWinRateAction?: pulumi.Input<string>;
    /**
     * Take action if zero window pkt rate exceed configured threshold
     */
    perConnZeroWinRateLimit?: pulumi.Input<number>;
    progressionTracking?: pulumi.Input<inputs.DdosTemplateTcpProgressionTracking>;
    src?: pulumi.Input<inputs.DdosTemplateTcpSrc>;
    /**
     * 'send-rst': Send RST to all client's concurrent auth attempts; 'force-rst-by-ack': Force client RST via the use of ACK;
     * 'force-rst-by-synack': Force client RST via the use of bad SYN|ACK; 'disable': Disable TCP SYN Authentication;
     * 'send-rst-once': Send RST to one client's concurrent auth attempts;
     */
    synAuth?: pulumi.Input<string>;
    /**
     * Enable SYN Cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Config SYNACK rate limit
     */
    synackRateLimit?: pulumi.Input<number>;
    /**
     * SYNACK will be counted in Dst Syn-rate limit
     */
    trackTogetherWithSyn?: pulumi.Input<number>;
    tunnelEncap?: pulumi.Input<inputs.DdosTemplateTcpTunnelEncap>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosTemplateTcp resource.
 */
export interface DdosTemplateTcpArgs {
    /**
     * Enable Reset client TCP SYN+ACK for authentication (DST support only)
     */
    ackAuthenticationSynackReset?: pulumi.Input<number>;
    actionCfg?: pulumi.Input<inputs.DdosTemplateTcpActionCfg>;
    /**
     * Take action if action-on-ack RTO-authentication fail over retry time(default:5)
     */
    actionOnAckRtoRetryCount?: pulumi.Input<number>;
    /**
     * Take action if action-on-syn RTO-authentication fail over retry time(default:5)
     */
    actionOnSynRtoRetryCount?: pulumi.Input<number>;
    actionSynCfg?: pulumi.Input<inputs.DdosTemplateTcpActionSynCfg>;
    /**
     * Session age in minutes
     */
    age?: pulumi.Input<number>;
    /**
     * Allow RA packets to be used for auth
     */
    allowRa?: pulumi.Input<number>;
    /**
     * Treat TCP SYN+PSH as a TCP SYN (DST tcp ports support only)
     */
    allowSynOtherflags?: pulumi.Input<number>;
    /**
     * Allow create sessions on SYNACK without syn-auth and ack-auth (ASYM Mode only)
     */
    allowSynackSkipAuthentications?: pulumi.Input<number>;
    /**
     * Allow TCP Fast Open
     */
    allowTcpTfo?: pulumi.Input<number>;
    /**
     * Black list Src IP if out of seq pkts exceed configured threshold
     */
    blackListOutOfSeq?: pulumi.Input<number>;
    /**
     * Black list Src IP if retransmit pkts exceed configured threshold
     */
    blackListRetransmit?: pulumi.Input<number>;
    /**
     * Black list Src IP if zero window pkts exceed configured threshold
     */
    blackListZeroWin?: pulumi.Input<number>;
    /**
     * Only count SYN-initiated connections towards connection-rate tracking
     */
    connRateLimitOnSynOnly?: pulumi.Input<number>;
    /**
     * Enable connection establishment on SYN only
     */
    createConnOnSynOnly?: pulumi.Input<number>;
    dropKnownRespSrcPortCfg?: pulumi.Input<inputs.DdosTemplateTcpDropKnownRespSrcPortCfg>;
    dst?: pulumi.Input<inputs.DdosTemplateTcpDst>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.DdosTemplateTcpFilterList>[]>;
    name?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for out-of-seq rate exceed (Default); 'blacklist-src': help Blacklist-src for out-of-seq rate
     * exceed; 'ignore': help Ignore out-of-seq rate exceed;
     */
    perConnOutOfSeqRateAction?: pulumi.Input<string>;
    /**
     * Take action if out-of-seq pkt rate exceed configured threshold
     */
    perConnOutOfSeqRateLimit?: pulumi.Input<number>;
    /**
     * 'drop': Drop packets for per-conn-pkt-rate exceed (Default); 'blacklist-src': help Blacklist-src for per-conn-pkt-rate
     * exceed; 'ignore': Ignore per-conn-pkt-rate-exceed;
     */
    perConnPktRateAction?: pulumi.Input<string>;
    /**
     * Packet rate limit per connection per rate-interval
     */
    perConnPktRateLimit?: pulumi.Input<number>;
    /**
     * '100ms': 100ms; '1sec': 1sec; '10sec': 10sec;
     */
    perConnRateInterval?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for retransmit rate exceed (Default); 'blacklist-src': help Blacklist-src for retransmit rate
     * exceed; 'ignore': help Ignore retransmit rate exceed;
     */
    perConnRetransmitRateAction?: pulumi.Input<string>;
    /**
     * Take action if retransmit pkt rate exceed configured threshold
     */
    perConnRetransmitRateLimit?: pulumi.Input<number>;
    /**
     * 'drop': Drop packets for zero-win rate exceed (Default); 'blacklist-src': help Blacklist-src for zero-win rate exceed;
     * 'ignore': help Ignore zero-win rate exceed;
     */
    perConnZeroWinRateAction?: pulumi.Input<string>;
    /**
     * Take action if zero window pkt rate exceed configured threshold
     */
    perConnZeroWinRateLimit?: pulumi.Input<number>;
    progressionTracking?: pulumi.Input<inputs.DdosTemplateTcpProgressionTracking>;
    src?: pulumi.Input<inputs.DdosTemplateTcpSrc>;
    /**
     * 'send-rst': Send RST to all client's concurrent auth attempts; 'force-rst-by-ack': Force client RST via the use of ACK;
     * 'force-rst-by-synack': Force client RST via the use of bad SYN|ACK; 'disable': Disable TCP SYN Authentication;
     * 'send-rst-once': Send RST to one client's concurrent auth attempts;
     */
    synAuth?: pulumi.Input<string>;
    /**
     * Enable SYN Cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Config SYNACK rate limit
     */
    synackRateLimit?: pulumi.Input<number>;
    /**
     * SYNACK will be counted in Dst Syn-rate limit
     */
    trackTogetherWithSyn?: pulumi.Input<number>;
    tunnelEncap?: pulumi.Input<inputs.DdosTemplateTcpTunnelEncap>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
