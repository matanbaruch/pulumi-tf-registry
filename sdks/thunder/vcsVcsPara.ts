// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VcsVcsPara extends pulumi.CustomResource {
    /**
     * Get an existing VcsVcsPara resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VcsVcsParaState, opts?: pulumi.CustomResourceOptions): VcsVcsPara {
        return new VcsVcsPara(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vcsVcsPara:VcsVcsPara';

    /**
     * Returns true if the given object is an instance of VcsVcsPara.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VcsVcsPara {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VcsVcsPara.__pulumiType;
    }

    /**
     * Chassis ID
     */
    public readonly chassisId!: pulumi.Output<number | undefined>;
    /**
     * Configuration information (Configuration tag)
     */
    public readonly configInfo!: pulumi.Output<string | undefined>;
    /**
     * Configuration sequence number
     */
    public readonly configSeq!: pulumi.Output<string | undefined>;
    /**
     * The node will be considered dead as lack of hearbeats after this time (in unit of second, 10 by default)
     */
    public readonly deadInterval!: pulumi.Output<number | undefined>;
    /**
     * The node will be considered dead as lack of hearbeats after this time (milisecond) (in unit of msecond, default is 0)
     */
    public readonly deadIntervalMseconds!: pulumi.Output<number | undefined>;
    /**
     * 0-255, default is 2
     */
    public readonly failureRetryCountValue!: pulumi.Output<number | undefined>;
    public readonly floatingIpCfgs!: pulumi.Output<outputs.VcsVcsParaFloatingIpCfg[] | undefined>;
    public readonly floatingIpv6Cfgs!: pulumi.Output<outputs.VcsVcsParaFloatingIpv6Cfg[] | undefined>;
    /**
     * The node will wait the specified time interval before it start aVCS (in unit of second (default is 5))
     */
    public readonly forceWaitInterval!: pulumi.Output<number | undefined>;
    /**
     * VCS retry forever if fails to join the chassis
     */
    public readonly forever!: pulumi.Output<number | undefined>;
    /**
     * Interval of aVCS memory statistics record (minutes)
     */
    public readonly memoryStatInterval!: pulumi.Output<number | undefined>;
    /**
     * Multicast (group) IP address (Multicast IP address)
     */
    public readonly multicastIp!: pulumi.Output<string | undefined>;
    /**
     * Multicast (group) IPv6 address (Multicast IPv6 address)
     */
    public readonly multicastIpv6!: pulumi.Output<string | undefined>;
    /**
     * Port used in multicast communication (Port number)
     */
    public readonly multicastPort!: pulumi.Output<number | undefined>;
    /**
     * file size (MBytes) to transmit to monitor the TCP channel
     */
    public readonly size!: pulumi.Output<number | undefined>;
    /**
     * Set the level of slog for aVCS
     */
    public readonly slogLevel!: pulumi.Output<number | undefined>;
    /**
     * Set the print method of slog for aVCS
     */
    public readonly slogMethod!: pulumi.Output<number | undefined>;
    /**
     * speed (KByte/s) limitation for the transmit monitor
     */
    public readonly speedLimit!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL
     */
    public readonly sslEnable!: pulumi.Output<number | undefined>;
    /**
     * Enable vBlade TCP channel monitor
     */
    public readonly tcpChannelMonitor!: pulumi.Output<number | undefined>;
    /**
     * how long between heartbeats (in unit of second, default is 3)
     */
    public readonly timeInterval!: pulumi.Output<number | undefined>;
    /**
     * how long between heartbeats (mseconds) (in unit of milisecond, default is 0)
     */
    public readonly timeIntervalMseconds!: pulumi.Output<number | undefined>;
    /**
     * Set the fragment size (KByte) of the aVCS transmit
     */
    public readonly transmitFragmentSize!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VcsVcsPara resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VcsVcsParaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VcsVcsParaArgs | VcsVcsParaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VcsVcsParaState | undefined;
            resourceInputs["chassisId"] = state ? state.chassisId : undefined;
            resourceInputs["configInfo"] = state ? state.configInfo : undefined;
            resourceInputs["configSeq"] = state ? state.configSeq : undefined;
            resourceInputs["deadInterval"] = state ? state.deadInterval : undefined;
            resourceInputs["deadIntervalMseconds"] = state ? state.deadIntervalMseconds : undefined;
            resourceInputs["failureRetryCountValue"] = state ? state.failureRetryCountValue : undefined;
            resourceInputs["floatingIpCfgs"] = state ? state.floatingIpCfgs : undefined;
            resourceInputs["floatingIpv6Cfgs"] = state ? state.floatingIpv6Cfgs : undefined;
            resourceInputs["forceWaitInterval"] = state ? state.forceWaitInterval : undefined;
            resourceInputs["forever"] = state ? state.forever : undefined;
            resourceInputs["memoryStatInterval"] = state ? state.memoryStatInterval : undefined;
            resourceInputs["multicastIp"] = state ? state.multicastIp : undefined;
            resourceInputs["multicastIpv6"] = state ? state.multicastIpv6 : undefined;
            resourceInputs["multicastPort"] = state ? state.multicastPort : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["slogLevel"] = state ? state.slogLevel : undefined;
            resourceInputs["slogMethod"] = state ? state.slogMethod : undefined;
            resourceInputs["speedLimit"] = state ? state.speedLimit : undefined;
            resourceInputs["sslEnable"] = state ? state.sslEnable : undefined;
            resourceInputs["tcpChannelMonitor"] = state ? state.tcpChannelMonitor : undefined;
            resourceInputs["timeInterval"] = state ? state.timeInterval : undefined;
            resourceInputs["timeIntervalMseconds"] = state ? state.timeIntervalMseconds : undefined;
            resourceInputs["transmitFragmentSize"] = state ? state.transmitFragmentSize : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VcsVcsParaArgs | undefined;
            resourceInputs["chassisId"] = args ? args.chassisId : undefined;
            resourceInputs["configInfo"] = args ? args.configInfo : undefined;
            resourceInputs["configSeq"] = args ? args.configSeq : undefined;
            resourceInputs["deadInterval"] = args ? args.deadInterval : undefined;
            resourceInputs["deadIntervalMseconds"] = args ? args.deadIntervalMseconds : undefined;
            resourceInputs["failureRetryCountValue"] = args ? args.failureRetryCountValue : undefined;
            resourceInputs["floatingIpCfgs"] = args ? args.floatingIpCfgs : undefined;
            resourceInputs["floatingIpv6Cfgs"] = args ? args.floatingIpv6Cfgs : undefined;
            resourceInputs["forceWaitInterval"] = args ? args.forceWaitInterval : undefined;
            resourceInputs["forever"] = args ? args.forever : undefined;
            resourceInputs["memoryStatInterval"] = args ? args.memoryStatInterval : undefined;
            resourceInputs["multicastIp"] = args ? args.multicastIp : undefined;
            resourceInputs["multicastIpv6"] = args ? args.multicastIpv6 : undefined;
            resourceInputs["multicastPort"] = args ? args.multicastPort : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["slogLevel"] = args ? args.slogLevel : undefined;
            resourceInputs["slogMethod"] = args ? args.slogMethod : undefined;
            resourceInputs["speedLimit"] = args ? args.speedLimit : undefined;
            resourceInputs["sslEnable"] = args ? args.sslEnable : undefined;
            resourceInputs["tcpChannelMonitor"] = args ? args.tcpChannelMonitor : undefined;
            resourceInputs["timeInterval"] = args ? args.timeInterval : undefined;
            resourceInputs["timeIntervalMseconds"] = args ? args.timeIntervalMseconds : undefined;
            resourceInputs["transmitFragmentSize"] = args ? args.transmitFragmentSize : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VcsVcsPara.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VcsVcsPara resources.
 */
export interface VcsVcsParaState {
    /**
     * Chassis ID
     */
    chassisId?: pulumi.Input<number>;
    /**
     * Configuration information (Configuration tag)
     */
    configInfo?: pulumi.Input<string>;
    /**
     * Configuration sequence number
     */
    configSeq?: pulumi.Input<string>;
    /**
     * The node will be considered dead as lack of hearbeats after this time (in unit of second, 10 by default)
     */
    deadInterval?: pulumi.Input<number>;
    /**
     * The node will be considered dead as lack of hearbeats after this time (milisecond) (in unit of msecond, default is 0)
     */
    deadIntervalMseconds?: pulumi.Input<number>;
    /**
     * 0-255, default is 2
     */
    failureRetryCountValue?: pulumi.Input<number>;
    floatingIpCfgs?: pulumi.Input<pulumi.Input<inputs.VcsVcsParaFloatingIpCfg>[]>;
    floatingIpv6Cfgs?: pulumi.Input<pulumi.Input<inputs.VcsVcsParaFloatingIpv6Cfg>[]>;
    /**
     * The node will wait the specified time interval before it start aVCS (in unit of second (default is 5))
     */
    forceWaitInterval?: pulumi.Input<number>;
    /**
     * VCS retry forever if fails to join the chassis
     */
    forever?: pulumi.Input<number>;
    /**
     * Interval of aVCS memory statistics record (minutes)
     */
    memoryStatInterval?: pulumi.Input<number>;
    /**
     * Multicast (group) IP address (Multicast IP address)
     */
    multicastIp?: pulumi.Input<string>;
    /**
     * Multicast (group) IPv6 address (Multicast IPv6 address)
     */
    multicastIpv6?: pulumi.Input<string>;
    /**
     * Port used in multicast communication (Port number)
     */
    multicastPort?: pulumi.Input<number>;
    /**
     * file size (MBytes) to transmit to monitor the TCP channel
     */
    size?: pulumi.Input<number>;
    /**
     * Set the level of slog for aVCS
     */
    slogLevel?: pulumi.Input<number>;
    /**
     * Set the print method of slog for aVCS
     */
    slogMethod?: pulumi.Input<number>;
    /**
     * speed (KByte/s) limitation for the transmit monitor
     */
    speedLimit?: pulumi.Input<number>;
    /**
     * Enable SSL
     */
    sslEnable?: pulumi.Input<number>;
    /**
     * Enable vBlade TCP channel monitor
     */
    tcpChannelMonitor?: pulumi.Input<number>;
    /**
     * how long between heartbeats (in unit of second, default is 3)
     */
    timeInterval?: pulumi.Input<number>;
    /**
     * how long between heartbeats (mseconds) (in unit of milisecond, default is 0)
     */
    timeIntervalMseconds?: pulumi.Input<number>;
    /**
     * Set the fragment size (KByte) of the aVCS transmit
     */
    transmitFragmentSize?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VcsVcsPara resource.
 */
export interface VcsVcsParaArgs {
    /**
     * Chassis ID
     */
    chassisId?: pulumi.Input<number>;
    /**
     * Configuration information (Configuration tag)
     */
    configInfo?: pulumi.Input<string>;
    /**
     * Configuration sequence number
     */
    configSeq?: pulumi.Input<string>;
    /**
     * The node will be considered dead as lack of hearbeats after this time (in unit of second, 10 by default)
     */
    deadInterval?: pulumi.Input<number>;
    /**
     * The node will be considered dead as lack of hearbeats after this time (milisecond) (in unit of msecond, default is 0)
     */
    deadIntervalMseconds?: pulumi.Input<number>;
    /**
     * 0-255, default is 2
     */
    failureRetryCountValue?: pulumi.Input<number>;
    floatingIpCfgs?: pulumi.Input<pulumi.Input<inputs.VcsVcsParaFloatingIpCfg>[]>;
    floatingIpv6Cfgs?: pulumi.Input<pulumi.Input<inputs.VcsVcsParaFloatingIpv6Cfg>[]>;
    /**
     * The node will wait the specified time interval before it start aVCS (in unit of second (default is 5))
     */
    forceWaitInterval?: pulumi.Input<number>;
    /**
     * VCS retry forever if fails to join the chassis
     */
    forever?: pulumi.Input<number>;
    /**
     * Interval of aVCS memory statistics record (minutes)
     */
    memoryStatInterval?: pulumi.Input<number>;
    /**
     * Multicast (group) IP address (Multicast IP address)
     */
    multicastIp?: pulumi.Input<string>;
    /**
     * Multicast (group) IPv6 address (Multicast IPv6 address)
     */
    multicastIpv6?: pulumi.Input<string>;
    /**
     * Port used in multicast communication (Port number)
     */
    multicastPort?: pulumi.Input<number>;
    /**
     * file size (MBytes) to transmit to monitor the TCP channel
     */
    size?: pulumi.Input<number>;
    /**
     * Set the level of slog for aVCS
     */
    slogLevel?: pulumi.Input<number>;
    /**
     * Set the print method of slog for aVCS
     */
    slogMethod?: pulumi.Input<number>;
    /**
     * speed (KByte/s) limitation for the transmit monitor
     */
    speedLimit?: pulumi.Input<number>;
    /**
     * Enable SSL
     */
    sslEnable?: pulumi.Input<number>;
    /**
     * Enable vBlade TCP channel monitor
     */
    tcpChannelMonitor?: pulumi.Input<number>;
    /**
     * how long between heartbeats (in unit of second, default is 3)
     */
    timeInterval?: pulumi.Input<number>;
    /**
     * how long between heartbeats (mseconds) (in unit of milisecond, default is 0)
     */
    timeIntervalMseconds?: pulumi.Input<number>;
    /**
     * Set the fragment size (KByte) of the aVCS transmit
     */
    transmitFragmentSize?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
