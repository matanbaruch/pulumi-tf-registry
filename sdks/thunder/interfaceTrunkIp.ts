// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceTrunkIp extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceTrunkIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceTrunkIpState, opts?: pulumi.CustomResourceOptions): InterfaceTrunkIp {
        return new InterfaceTrunkIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/interfaceTrunkIp:InterfaceTrunkIp';

    /**
     * Returns true if the given object is an instance of InterfaceTrunkIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceTrunkIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceTrunkIp.__pulumiType;
    }

    public readonly addressLists!: pulumi.Output<outputs.InterfaceTrunkIpAddressList[] | undefined>;
    /**
     * Allow traffic to be associated with promiscuous VIP
     */
    public readonly allowPromiscuousVip!: pulumi.Output<number | undefined>;
    /**
     * This interface connects to spoofing cache
     */
    public readonly cacheSpoofingPort!: pulumi.Output<number | undefined>;
    /**
     * Client facing interface for IPv4/v6 traffic
     */
    public readonly client!: pulumi.Output<number | undefined>;
    /**
     * Use DHCP to configure IP address
     */
    public readonly dhcp!: pulumi.Output<number | undefined>;
    /**
     * Enable Membership Query
     */
    public readonly generateMembershipQuery!: pulumi.Output<number | undefined>;
    public readonly helperAddressLists!: pulumi.Output<outputs.InterfaceTrunkIpHelperAddressList[] | undefined>;
    /**
     * Ifnum
     */
    public readonly ifnum!: pulumi.Output<string>;
    /**
     * Maximum Response Time (Max Response Time (Default is 100))
     */
    public readonly maxRespTime!: pulumi.Output<number | undefined>;
    public readonly nat!: pulumi.Output<outputs.InterfaceTrunkIpNat | undefined>;
    public readonly ospf!: pulumi.Output<outputs.InterfaceTrunkIpOspf | undefined>;
    /**
     * 1 - 255 (Default is 125)
     */
    public readonly queryInterval!: pulumi.Output<number | undefined>;
    public readonly rip!: pulumi.Output<outputs.InterfaceTrunkIpRip | undefined>;
    public readonly router!: pulumi.Output<outputs.InterfaceTrunkIpRouter | undefined>;
    /**
     * Server facing interface for IPv4/v6 traffic
     */
    public readonly server!: pulumi.Output<number | undefined>;
    /**
     * Redirect SLB traffic across partition
     */
    public readonly slbPartitionRedirect!: pulumi.Output<number | undefined>;
    public readonly statefulFirewall!: pulumi.Output<outputs.InterfaceTrunkIpStatefulFirewall | undefined>;
    /**
     * Enable SYN-cookie on the interface
     */
    public readonly synCookie!: pulumi.Output<number | undefined>;
    /**
     * Ignore TTL decrement for a received packet
     */
    public readonly ttlIgnore!: pulumi.Output<number | undefined>;
    /**
     * Set the interface as unnumbered
     */
    public readonly unnumbered!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a InterfaceTrunkIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceTrunkIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceTrunkIpArgs | InterfaceTrunkIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceTrunkIpState | undefined;
            resourceInputs["addressLists"] = state ? state.addressLists : undefined;
            resourceInputs["allowPromiscuousVip"] = state ? state.allowPromiscuousVip : undefined;
            resourceInputs["cacheSpoofingPort"] = state ? state.cacheSpoofingPort : undefined;
            resourceInputs["client"] = state ? state.client : undefined;
            resourceInputs["dhcp"] = state ? state.dhcp : undefined;
            resourceInputs["generateMembershipQuery"] = state ? state.generateMembershipQuery : undefined;
            resourceInputs["helperAddressLists"] = state ? state.helperAddressLists : undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["maxRespTime"] = state ? state.maxRespTime : undefined;
            resourceInputs["nat"] = state ? state.nat : undefined;
            resourceInputs["ospf"] = state ? state.ospf : undefined;
            resourceInputs["queryInterval"] = state ? state.queryInterval : undefined;
            resourceInputs["rip"] = state ? state.rip : undefined;
            resourceInputs["router"] = state ? state.router : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["slbPartitionRedirect"] = state ? state.slbPartitionRedirect : undefined;
            resourceInputs["statefulFirewall"] = state ? state.statefulFirewall : undefined;
            resourceInputs["synCookie"] = state ? state.synCookie : undefined;
            resourceInputs["ttlIgnore"] = state ? state.ttlIgnore : undefined;
            resourceInputs["unnumbered"] = state ? state.unnumbered : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as InterfaceTrunkIpArgs | undefined;
            if ((!args || args.ifnum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifnum'");
            }
            resourceInputs["addressLists"] = args ? args.addressLists : undefined;
            resourceInputs["allowPromiscuousVip"] = args ? args.allowPromiscuousVip : undefined;
            resourceInputs["cacheSpoofingPort"] = args ? args.cacheSpoofingPort : undefined;
            resourceInputs["client"] = args ? args.client : undefined;
            resourceInputs["dhcp"] = args ? args.dhcp : undefined;
            resourceInputs["generateMembershipQuery"] = args ? args.generateMembershipQuery : undefined;
            resourceInputs["helperAddressLists"] = args ? args.helperAddressLists : undefined;
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["maxRespTime"] = args ? args.maxRespTime : undefined;
            resourceInputs["nat"] = args ? args.nat : undefined;
            resourceInputs["ospf"] = args ? args.ospf : undefined;
            resourceInputs["queryInterval"] = args ? args.queryInterval : undefined;
            resourceInputs["rip"] = args ? args.rip : undefined;
            resourceInputs["router"] = args ? args.router : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["slbPartitionRedirect"] = args ? args.slbPartitionRedirect : undefined;
            resourceInputs["statefulFirewall"] = args ? args.statefulFirewall : undefined;
            resourceInputs["synCookie"] = args ? args.synCookie : undefined;
            resourceInputs["ttlIgnore"] = args ? args.ttlIgnore : undefined;
            resourceInputs["unnumbered"] = args ? args.unnumbered : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceTrunkIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceTrunkIp resources.
 */
export interface InterfaceTrunkIpState {
    addressLists?: pulumi.Input<pulumi.Input<inputs.InterfaceTrunkIpAddressList>[]>;
    /**
     * Allow traffic to be associated with promiscuous VIP
     */
    allowPromiscuousVip?: pulumi.Input<number>;
    /**
     * This interface connects to spoofing cache
     */
    cacheSpoofingPort?: pulumi.Input<number>;
    /**
     * Client facing interface for IPv4/v6 traffic
     */
    client?: pulumi.Input<number>;
    /**
     * Use DHCP to configure IP address
     */
    dhcp?: pulumi.Input<number>;
    /**
     * Enable Membership Query
     */
    generateMembershipQuery?: pulumi.Input<number>;
    helperAddressLists?: pulumi.Input<pulumi.Input<inputs.InterfaceTrunkIpHelperAddressList>[]>;
    /**
     * Ifnum
     */
    ifnum?: pulumi.Input<string>;
    /**
     * Maximum Response Time (Max Response Time (Default is 100))
     */
    maxRespTime?: pulumi.Input<number>;
    nat?: pulumi.Input<inputs.InterfaceTrunkIpNat>;
    ospf?: pulumi.Input<inputs.InterfaceTrunkIpOspf>;
    /**
     * 1 - 255 (Default is 125)
     */
    queryInterval?: pulumi.Input<number>;
    rip?: pulumi.Input<inputs.InterfaceTrunkIpRip>;
    router?: pulumi.Input<inputs.InterfaceTrunkIpRouter>;
    /**
     * Server facing interface for IPv4/v6 traffic
     */
    server?: pulumi.Input<number>;
    /**
     * Redirect SLB traffic across partition
     */
    slbPartitionRedirect?: pulumi.Input<number>;
    statefulFirewall?: pulumi.Input<inputs.InterfaceTrunkIpStatefulFirewall>;
    /**
     * Enable SYN-cookie on the interface
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Ignore TTL decrement for a received packet
     */
    ttlIgnore?: pulumi.Input<number>;
    /**
     * Set the interface as unnumbered
     */
    unnumbered?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceTrunkIp resource.
 */
export interface InterfaceTrunkIpArgs {
    addressLists?: pulumi.Input<pulumi.Input<inputs.InterfaceTrunkIpAddressList>[]>;
    /**
     * Allow traffic to be associated with promiscuous VIP
     */
    allowPromiscuousVip?: pulumi.Input<number>;
    /**
     * This interface connects to spoofing cache
     */
    cacheSpoofingPort?: pulumi.Input<number>;
    /**
     * Client facing interface for IPv4/v6 traffic
     */
    client?: pulumi.Input<number>;
    /**
     * Use DHCP to configure IP address
     */
    dhcp?: pulumi.Input<number>;
    /**
     * Enable Membership Query
     */
    generateMembershipQuery?: pulumi.Input<number>;
    helperAddressLists?: pulumi.Input<pulumi.Input<inputs.InterfaceTrunkIpHelperAddressList>[]>;
    /**
     * Ifnum
     */
    ifnum: pulumi.Input<string>;
    /**
     * Maximum Response Time (Max Response Time (Default is 100))
     */
    maxRespTime?: pulumi.Input<number>;
    nat?: pulumi.Input<inputs.InterfaceTrunkIpNat>;
    ospf?: pulumi.Input<inputs.InterfaceTrunkIpOspf>;
    /**
     * 1 - 255 (Default is 125)
     */
    queryInterval?: pulumi.Input<number>;
    rip?: pulumi.Input<inputs.InterfaceTrunkIpRip>;
    router?: pulumi.Input<inputs.InterfaceTrunkIpRouter>;
    /**
     * Server facing interface for IPv4/v6 traffic
     */
    server?: pulumi.Input<number>;
    /**
     * Redirect SLB traffic across partition
     */
    slbPartitionRedirect?: pulumi.Input<number>;
    statefulFirewall?: pulumi.Input<inputs.InterfaceTrunkIpStatefulFirewall>;
    /**
     * Enable SYN-cookie on the interface
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Ignore TTL decrement for a received packet
     */
    ttlIgnore?: pulumi.Input<number>;
    /**
     * Set the interface as unnumbered
     */
    unnumbered?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
