// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScaleoutClusterLocalDevice extends pulumi.CustomResource {
    /**
     * Get an existing ScaleoutClusterLocalDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScaleoutClusterLocalDeviceState, opts?: pulumi.CustomResourceOptions): ScaleoutClusterLocalDevice {
        return new ScaleoutClusterLocalDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/scaleoutClusterLocalDevice:ScaleoutClusterLocalDevice';

    /**
     * Returns true if the given object is an instance of ScaleoutClusterLocalDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScaleoutClusterLocalDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScaleoutClusterLocalDevice.__pulumiType;
    }

    /**
     * 'enable': enable; 'disable': disable;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * ClusterId
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * 'layer-2': Nodes in cluster are layer 2 connected (default mode); 'layer-3': Nodes in cluster are l3 connected;
     */
    public readonly clusterMode!: pulumi.Output<string | undefined>;
    public readonly excludeInterfaces!: pulumi.Output<outputs.ScaleoutClusterLocalDeviceExcludeInterfaces | undefined>;
    public readonly id1!: pulumi.Output<number | undefined>;
    public readonly l2Redirect!: pulumi.Output<outputs.ScaleoutClusterLocalDeviceL2Redirect | undefined>;
    public readonly priority!: pulumi.Output<number | undefined>;
    public readonly sessionSync!: pulumi.Output<outputs.ScaleoutClusterLocalDeviceSessionSync | undefined>;
    public readonly startDelay!: pulumi.Output<number | undefined>;
    public readonly trackingTemplate!: pulumi.Output<outputs.ScaleoutClusterLocalDeviceTrackingTemplate | undefined>;
    public readonly trafficRedirection!: pulumi.Output<outputs.ScaleoutClusterLocalDeviceTrafficRedirection | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a ScaleoutClusterLocalDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScaleoutClusterLocalDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScaleoutClusterLocalDeviceArgs | ScaleoutClusterLocalDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScaleoutClusterLocalDeviceState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterMode"] = state ? state.clusterMode : undefined;
            resourceInputs["excludeInterfaces"] = state ? state.excludeInterfaces : undefined;
            resourceInputs["id1"] = state ? state.id1 : undefined;
            resourceInputs["l2Redirect"] = state ? state.l2Redirect : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["sessionSync"] = state ? state.sessionSync : undefined;
            resourceInputs["startDelay"] = state ? state.startDelay : undefined;
            resourceInputs["trackingTemplate"] = state ? state.trackingTemplate : undefined;
            resourceInputs["trafficRedirection"] = state ? state.trafficRedirection : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ScaleoutClusterLocalDeviceArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["clusterMode"] = args ? args.clusterMode : undefined;
            resourceInputs["excludeInterfaces"] = args ? args.excludeInterfaces : undefined;
            resourceInputs["id1"] = args ? args.id1 : undefined;
            resourceInputs["l2Redirect"] = args ? args.l2Redirect : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["sessionSync"] = args ? args.sessionSync : undefined;
            resourceInputs["startDelay"] = args ? args.startDelay : undefined;
            resourceInputs["trackingTemplate"] = args ? args.trackingTemplate : undefined;
            resourceInputs["trafficRedirection"] = args ? args.trafficRedirection : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScaleoutClusterLocalDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ScaleoutClusterLocalDevice resources.
 */
export interface ScaleoutClusterLocalDeviceState {
    /**
     * 'enable': enable; 'disable': disable;
     */
    action?: pulumi.Input<string>;
    /**
     * ClusterId
     */
    clusterId?: pulumi.Input<string>;
    /**
     * 'layer-2': Nodes in cluster are layer 2 connected (default mode); 'layer-3': Nodes in cluster are l3 connected;
     */
    clusterMode?: pulumi.Input<string>;
    excludeInterfaces?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceExcludeInterfaces>;
    id1?: pulumi.Input<number>;
    l2Redirect?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceL2Redirect>;
    priority?: pulumi.Input<number>;
    sessionSync?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceSessionSync>;
    startDelay?: pulumi.Input<number>;
    trackingTemplate?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceTrackingTemplate>;
    trafficRedirection?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceTrafficRedirection>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScaleoutClusterLocalDevice resource.
 */
export interface ScaleoutClusterLocalDeviceArgs {
    /**
     * 'enable': enable; 'disable': disable;
     */
    action?: pulumi.Input<string>;
    /**
     * ClusterId
     */
    clusterId: pulumi.Input<string>;
    /**
     * 'layer-2': Nodes in cluster are layer 2 connected (default mode); 'layer-3': Nodes in cluster are l3 connected;
     */
    clusterMode?: pulumi.Input<string>;
    excludeInterfaces?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceExcludeInterfaces>;
    id1?: pulumi.Input<number>;
    l2Redirect?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceL2Redirect>;
    priority?: pulumi.Input<number>;
    sessionSync?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceSessionSync>;
    startDelay?: pulumi.Input<number>;
    trackingTemplate?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceTrackingTemplate>;
    trafficRedirection?: pulumi.Input<inputs.ScaleoutClusterLocalDeviceTrafficRedirection>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
