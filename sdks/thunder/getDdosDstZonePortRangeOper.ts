// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDdosDstZonePortRangeOper(args: GetDdosDstZonePortRangeOperArgs, opts?: pulumi.InvokeOptions): Promise<GetDdosDstZonePortRangeOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getDdosDstZonePortRangeOper:getDdosDstZonePortRangeOper", {
        "id": args.id,
        "ipFilteringPolicyOper": args.ipFilteringPolicyOper,
        "ips": args.ips,
        "oper": args.oper,
        "patternRecognition": args.patternRecognition,
        "patternRecognitionPuDetails": args.patternRecognitionPuDetails,
        "portInd": args.portInd,
        "portRangeEnd": args.portRangeEnd,
        "portRangeStart": args.portRangeStart,
        "progressionTracking": args.progressionTracking,
        "protocol": args.protocol,
        "topkDestinations": args.topkDestinations,
        "topkSources": args.topkSources,
        "zoneName": args.zoneName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDdosDstZonePortRangeOper.
 */
export interface GetDdosDstZonePortRangeOperArgs {
    id?: string;
    ipFilteringPolicyOper?: inputs.GetDdosDstZonePortRangeOperIpFilteringPolicyOper;
    ips?: inputs.GetDdosDstZonePortRangeOperIps;
    oper?: inputs.GetDdosDstZonePortRangeOperOper;
    patternRecognition?: inputs.GetDdosDstZonePortRangeOperPatternRecognition;
    patternRecognitionPuDetails?: inputs.GetDdosDstZonePortRangeOperPatternRecognitionPuDetails;
    portInd?: inputs.GetDdosDstZonePortRangeOperPortInd;
    portRangeEnd: number;
    portRangeStart: number;
    progressionTracking?: inputs.GetDdosDstZonePortRangeOperProgressionTracking;
    protocol: string;
    topkDestinations?: inputs.GetDdosDstZonePortRangeOperTopkDestinations;
    topkSources?: inputs.GetDdosDstZonePortRangeOperTopkSources;
    zoneName: string;
}

/**
 * A collection of values returned by getDdosDstZonePortRangeOper.
 */
export interface GetDdosDstZonePortRangeOperResult {
    readonly id: string;
    readonly ipFilteringPolicyOper?: outputs.GetDdosDstZonePortRangeOperIpFilteringPolicyOper;
    readonly ips?: outputs.GetDdosDstZonePortRangeOperIps;
    readonly oper?: outputs.GetDdosDstZonePortRangeOperOper;
    readonly patternRecognition?: outputs.GetDdosDstZonePortRangeOperPatternRecognition;
    readonly patternRecognitionPuDetails?: outputs.GetDdosDstZonePortRangeOperPatternRecognitionPuDetails;
    readonly portInd?: outputs.GetDdosDstZonePortRangeOperPortInd;
    readonly portRangeEnd: number;
    readonly portRangeStart: number;
    readonly progressionTracking?: outputs.GetDdosDstZonePortRangeOperProgressionTracking;
    readonly protocol: string;
    readonly topkDestinations?: outputs.GetDdosDstZonePortRangeOperTopkDestinations;
    readonly topkSources?: outputs.GetDdosDstZonePortRangeOperTopkSources;
    readonly zoneName: string;
}
export function getDdosDstZonePortRangeOperOutput(args: GetDdosDstZonePortRangeOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDdosDstZonePortRangeOperResult> {
    return pulumi.output(args).apply((a: any) => getDdosDstZonePortRangeOper(a, opts))
}

/**
 * A collection of arguments for invoking getDdosDstZonePortRangeOper.
 */
export interface GetDdosDstZonePortRangeOperOutputArgs {
    id?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperIpFilteringPolicyOperArgs>;
    ips?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperIpsArgs>;
    oper?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperOperArgs>;
    patternRecognition?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperPatternRecognitionArgs>;
    patternRecognitionPuDetails?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperPatternRecognitionPuDetailsArgs>;
    portInd?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperPortIndArgs>;
    portRangeEnd: pulumi.Input<number>;
    portRangeStart: pulumi.Input<number>;
    progressionTracking?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperProgressionTrackingArgs>;
    protocol: pulumi.Input<string>;
    topkDestinations?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperTopkDestinationsArgs>;
    topkSources?: pulumi.Input<inputs.GetDdosDstZonePortRangeOperTopkSourcesArgs>;
    zoneName: pulumi.Input<string>;
}
