// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IpNatTemplateLogging extends pulumi.CustomResource {
    /**
     * Get an existing IpNatTemplateLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpNatTemplateLoggingState, opts?: pulumi.CustomResourceOptions): IpNatTemplateLogging {
        return new IpNatTemplateLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ipNatTemplateLogging:IpNatTemplateLogging';

    /**
     * Returns true if the given object is an instance of IpNatTemplateLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpNatTemplateLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpNatTemplateLogging.__pulumiType;
    }

    /**
     * 'kernel': 0: Kernel; 'user': 1: User-level; 'mail': 2: Mail; 'daemon': 3: System daemons; 'security-authorization': 4:
     * Security/authorization; 'syslog': 5: Syslog internal; 'line-printer': 6: Line printer; 'news': 7: Network news; 'uucp':
     * 8: UUCP subsystem; 'cron': 9: Time-related; 'security-authorization-private': 10: Private security/authorization; 'ftp':
     * 11: FTP; 'ntp': 12: NTP; 'audit': 13: Audit; 'alert': 14: Alert; 'clock': 15: Clock-related; 'local0': 16: Local use 0;
     * 'local1': 17: Local use 1; 'local2': 18: Local use 2; 'local3': 19: Local use 3; 'local4': 20: Local use 4; 'local5':
     * 21: Local use 5; 'local6': 22: Local use 6; 'local7': 23: Local use 7;
     */
    public readonly facility!: pulumi.Output<string | undefined>;
    /**
     * Include the destination IP and port in logs
     */
    public readonly includeDestination!: pulumi.Output<number | undefined>;
    /**
     * Include the IP and port of real server in logs
     */
    public readonly includeRipRport!: pulumi.Output<number | undefined>;
    public readonly log!: pulumi.Output<outputs.IpNatTemplateLoggingLog | undefined>;
    /**
     * NAT logging template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set NAT logging service-group
     */
    public readonly serviceGroup!: pulumi.Output<string | undefined>;
    public readonly severity!: pulumi.Output<outputs.IpNatTemplateLoggingSeverity | undefined>;
    public readonly sourcePort!: pulumi.Output<outputs.IpNatTemplateLoggingSourcePort | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a IpNatTemplateLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IpNatTemplateLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpNatTemplateLoggingArgs | IpNatTemplateLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpNatTemplateLoggingState | undefined;
            resourceInputs["facility"] = state ? state.facility : undefined;
            resourceInputs["includeDestination"] = state ? state.includeDestination : undefined;
            resourceInputs["includeRipRport"] = state ? state.includeRipRport : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceGroup"] = state ? state.serviceGroup : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["sourcePort"] = state ? state.sourcePort : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as IpNatTemplateLoggingArgs | undefined;
            resourceInputs["facility"] = args ? args.facility : undefined;
            resourceInputs["includeDestination"] = args ? args.includeDestination : undefined;
            resourceInputs["includeRipRport"] = args ? args.includeRipRport : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceGroup"] = args ? args.serviceGroup : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["sourcePort"] = args ? args.sourcePort : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpNatTemplateLogging.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IpNatTemplateLogging resources.
 */
export interface IpNatTemplateLoggingState {
    /**
     * 'kernel': 0: Kernel; 'user': 1: User-level; 'mail': 2: Mail; 'daemon': 3: System daemons; 'security-authorization': 4:
     * Security/authorization; 'syslog': 5: Syslog internal; 'line-printer': 6: Line printer; 'news': 7: Network news; 'uucp':
     * 8: UUCP subsystem; 'cron': 9: Time-related; 'security-authorization-private': 10: Private security/authorization; 'ftp':
     * 11: FTP; 'ntp': 12: NTP; 'audit': 13: Audit; 'alert': 14: Alert; 'clock': 15: Clock-related; 'local0': 16: Local use 0;
     * 'local1': 17: Local use 1; 'local2': 18: Local use 2; 'local3': 19: Local use 3; 'local4': 20: Local use 4; 'local5':
     * 21: Local use 5; 'local6': 22: Local use 6; 'local7': 23: Local use 7;
     */
    facility?: pulumi.Input<string>;
    /**
     * Include the destination IP and port in logs
     */
    includeDestination?: pulumi.Input<number>;
    /**
     * Include the IP and port of real server in logs
     */
    includeRipRport?: pulumi.Input<number>;
    log?: pulumi.Input<inputs.IpNatTemplateLoggingLog>;
    /**
     * NAT logging template name
     */
    name?: pulumi.Input<string>;
    /**
     * Set NAT logging service-group
     */
    serviceGroup?: pulumi.Input<string>;
    severity?: pulumi.Input<inputs.IpNatTemplateLoggingSeverity>;
    sourcePort?: pulumi.Input<inputs.IpNatTemplateLoggingSourcePort>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpNatTemplateLogging resource.
 */
export interface IpNatTemplateLoggingArgs {
    /**
     * 'kernel': 0: Kernel; 'user': 1: User-level; 'mail': 2: Mail; 'daemon': 3: System daemons; 'security-authorization': 4:
     * Security/authorization; 'syslog': 5: Syslog internal; 'line-printer': 6: Line printer; 'news': 7: Network news; 'uucp':
     * 8: UUCP subsystem; 'cron': 9: Time-related; 'security-authorization-private': 10: Private security/authorization; 'ftp':
     * 11: FTP; 'ntp': 12: NTP; 'audit': 13: Audit; 'alert': 14: Alert; 'clock': 15: Clock-related; 'local0': 16: Local use 0;
     * 'local1': 17: Local use 1; 'local2': 18: Local use 2; 'local3': 19: Local use 3; 'local4': 20: Local use 4; 'local5':
     * 21: Local use 5; 'local6': 22: Local use 6; 'local7': 23: Local use 7;
     */
    facility?: pulumi.Input<string>;
    /**
     * Include the destination IP and port in logs
     */
    includeDestination?: pulumi.Input<number>;
    /**
     * Include the IP and port of real server in logs
     */
    includeRipRport?: pulumi.Input<number>;
    log?: pulumi.Input<inputs.IpNatTemplateLoggingLog>;
    /**
     * NAT logging template name
     */
    name?: pulumi.Input<string>;
    /**
     * Set NAT logging service-group
     */
    serviceGroup?: pulumi.Input<string>;
    severity?: pulumi.Input<inputs.IpNatTemplateLoggingSeverity>;
    sourcePort?: pulumi.Input<inputs.IpNatTemplateLoggingSourcePort>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
