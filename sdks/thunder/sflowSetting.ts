// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SflowSetting extends pulumi.CustomResource {
    /**
     * Get an existing SflowSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SflowSettingState, opts?: pulumi.CustomResourceOptions): SflowSetting {
        return new SflowSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/sflowSetting:SflowSetting';

    /**
     * Returns true if the given object is an instance of SflowSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SflowSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SflowSetting.__pulumiType;
    }

    /**
     * Allow TPS to always send mapping ctr block (260, 271, and 272)
     */
    public readonly appendMappingInfo!: pulumi.Output<number | undefined>;
    /**
     * sFlow counter polling interval, default is 20
     */
    public readonly counterPollingInterval!: pulumi.Output<number | undefined>;
    /**
     * Default MTU for counter-polling packets - DDoS 3.2 format only (Default: 1500)
     */
    public readonly defaultCounterPollingMtu!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable local sflow collection; 'disable': Disable local sflow collection;
     */
    public readonly localCollection!: pulumi.Output<string | undefined>;
    /**
     * Set sFlow local counter polling interval for T1 stats
     */
    public readonly localT1PollingInterval!: pulumi.Output<number | undefined>;
    /**
     * Set sFlow local counter polling interval for T2 stats
     */
    public readonly localT2PollingInterval!: pulumi.Output<number | undefined>;
    /**
     * limit management link speed in (Mbps)
     */
    public readonly managementLinkUtilization!: pulumi.Output<number | undefined>;
    /**
     * percentage limit of the management link speed (Default is 30%)
     */
    public readonly managementLinkUtilizationPercentage!: pulumi.Output<number | undefined>;
    /**
     * Configure maximum number of bytes that should be copied from a sampled packet (default: 128) (The maximum number of
     * bytes (Default: 128))
     */
    public readonly maxHeader!: pulumi.Output<number | undefined>;
    /**
     * sFlow packet sampling rate, default is 1000
     */
    public readonly packetSamplingRate!: pulumi.Output<number | undefined>;
    /**
     * Source port-range end
     */
    public readonly portRangeEnd!: pulumi.Output<number | undefined>;
    /**
     * Source port-range
     */
    public readonly portRangeStart!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Randomize source port; 'disable': Fix source port 6343; 'packet-sampling-only': Only randomized source port
     * for packet-sampling (Default);
     */
    public readonly randomizeSourcePort!: pulumi.Output<string | undefined>;
    /**
     * Use management interface's IP address for source IP of sFlow packets
     */
    public readonly sourceIpUseMgmt!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SflowSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SflowSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SflowSettingArgs | SflowSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SflowSettingState | undefined;
            resourceInputs["appendMappingInfo"] = state ? state.appendMappingInfo : undefined;
            resourceInputs["counterPollingInterval"] = state ? state.counterPollingInterval : undefined;
            resourceInputs["defaultCounterPollingMtu"] = state ? state.defaultCounterPollingMtu : undefined;
            resourceInputs["localCollection"] = state ? state.localCollection : undefined;
            resourceInputs["localT1PollingInterval"] = state ? state.localT1PollingInterval : undefined;
            resourceInputs["localT2PollingInterval"] = state ? state.localT2PollingInterval : undefined;
            resourceInputs["managementLinkUtilization"] = state ? state.managementLinkUtilization : undefined;
            resourceInputs["managementLinkUtilizationPercentage"] = state ? state.managementLinkUtilizationPercentage : undefined;
            resourceInputs["maxHeader"] = state ? state.maxHeader : undefined;
            resourceInputs["packetSamplingRate"] = state ? state.packetSamplingRate : undefined;
            resourceInputs["portRangeEnd"] = state ? state.portRangeEnd : undefined;
            resourceInputs["portRangeStart"] = state ? state.portRangeStart : undefined;
            resourceInputs["randomizeSourcePort"] = state ? state.randomizeSourcePort : undefined;
            resourceInputs["sourceIpUseMgmt"] = state ? state.sourceIpUseMgmt : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SflowSettingArgs | undefined;
            resourceInputs["appendMappingInfo"] = args ? args.appendMappingInfo : undefined;
            resourceInputs["counterPollingInterval"] = args ? args.counterPollingInterval : undefined;
            resourceInputs["defaultCounterPollingMtu"] = args ? args.defaultCounterPollingMtu : undefined;
            resourceInputs["localCollection"] = args ? args.localCollection : undefined;
            resourceInputs["localT1PollingInterval"] = args ? args.localT1PollingInterval : undefined;
            resourceInputs["localT2PollingInterval"] = args ? args.localT2PollingInterval : undefined;
            resourceInputs["managementLinkUtilization"] = args ? args.managementLinkUtilization : undefined;
            resourceInputs["managementLinkUtilizationPercentage"] = args ? args.managementLinkUtilizationPercentage : undefined;
            resourceInputs["maxHeader"] = args ? args.maxHeader : undefined;
            resourceInputs["packetSamplingRate"] = args ? args.packetSamplingRate : undefined;
            resourceInputs["portRangeEnd"] = args ? args.portRangeEnd : undefined;
            resourceInputs["portRangeStart"] = args ? args.portRangeStart : undefined;
            resourceInputs["randomizeSourcePort"] = args ? args.randomizeSourcePort : undefined;
            resourceInputs["sourceIpUseMgmt"] = args ? args.sourceIpUseMgmt : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SflowSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SflowSetting resources.
 */
export interface SflowSettingState {
    /**
     * Allow TPS to always send mapping ctr block (260, 271, and 272)
     */
    appendMappingInfo?: pulumi.Input<number>;
    /**
     * sFlow counter polling interval, default is 20
     */
    counterPollingInterval?: pulumi.Input<number>;
    /**
     * Default MTU for counter-polling packets - DDoS 3.2 format only (Default: 1500)
     */
    defaultCounterPollingMtu?: pulumi.Input<number>;
    /**
     * 'enable': Enable local sflow collection; 'disable': Disable local sflow collection;
     */
    localCollection?: pulumi.Input<string>;
    /**
     * Set sFlow local counter polling interval for T1 stats
     */
    localT1PollingInterval?: pulumi.Input<number>;
    /**
     * Set sFlow local counter polling interval for T2 stats
     */
    localT2PollingInterval?: pulumi.Input<number>;
    /**
     * limit management link speed in (Mbps)
     */
    managementLinkUtilization?: pulumi.Input<number>;
    /**
     * percentage limit of the management link speed (Default is 30%)
     */
    managementLinkUtilizationPercentage?: pulumi.Input<number>;
    /**
     * Configure maximum number of bytes that should be copied from a sampled packet (default: 128) (The maximum number of
     * bytes (Default: 128))
     */
    maxHeader?: pulumi.Input<number>;
    /**
     * sFlow packet sampling rate, default is 1000
     */
    packetSamplingRate?: pulumi.Input<number>;
    /**
     * Source port-range end
     */
    portRangeEnd?: pulumi.Input<number>;
    /**
     * Source port-range
     */
    portRangeStart?: pulumi.Input<number>;
    /**
     * 'enable': Randomize source port; 'disable': Fix source port 6343; 'packet-sampling-only': Only randomized source port
     * for packet-sampling (Default);
     */
    randomizeSourcePort?: pulumi.Input<string>;
    /**
     * Use management interface's IP address for source IP of sFlow packets
     */
    sourceIpUseMgmt?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SflowSetting resource.
 */
export interface SflowSettingArgs {
    /**
     * Allow TPS to always send mapping ctr block (260, 271, and 272)
     */
    appendMappingInfo?: pulumi.Input<number>;
    /**
     * sFlow counter polling interval, default is 20
     */
    counterPollingInterval?: pulumi.Input<number>;
    /**
     * Default MTU for counter-polling packets - DDoS 3.2 format only (Default: 1500)
     */
    defaultCounterPollingMtu?: pulumi.Input<number>;
    /**
     * 'enable': Enable local sflow collection; 'disable': Disable local sflow collection;
     */
    localCollection?: pulumi.Input<string>;
    /**
     * Set sFlow local counter polling interval for T1 stats
     */
    localT1PollingInterval?: pulumi.Input<number>;
    /**
     * Set sFlow local counter polling interval for T2 stats
     */
    localT2PollingInterval?: pulumi.Input<number>;
    /**
     * limit management link speed in (Mbps)
     */
    managementLinkUtilization?: pulumi.Input<number>;
    /**
     * percentage limit of the management link speed (Default is 30%)
     */
    managementLinkUtilizationPercentage?: pulumi.Input<number>;
    /**
     * Configure maximum number of bytes that should be copied from a sampled packet (default: 128) (The maximum number of
     * bytes (Default: 128))
     */
    maxHeader?: pulumi.Input<number>;
    /**
     * sFlow packet sampling rate, default is 1000
     */
    packetSamplingRate?: pulumi.Input<number>;
    /**
     * Source port-range end
     */
    portRangeEnd?: pulumi.Input<number>;
    /**
     * Source port-range
     */
    portRangeStart?: pulumi.Input<number>;
    /**
     * 'enable': Randomize source port; 'disable': Fix source port 6343; 'packet-sampling-only': Only randomized source port
     * for packet-sampling (Default);
     */
    randomizeSourcePort?: pulumi.Input<string>;
    /**
     * Use management interface's IP address for source IP of sFlow packets
     */
    sourceIpUseMgmt?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
