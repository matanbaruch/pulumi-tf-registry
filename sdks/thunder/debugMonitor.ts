// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DebugMonitor extends pulumi.CustomResource {
    /**
     * Get an existing DebugMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DebugMonitorState, opts?: pulumi.CustomResourceOptions): DebugMonitor {
        return new DebugMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/debugMonitor:DebugMonitor';

    /**
     * Returns true if the given object is an instance of DebugMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DebugMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DebugMonitor.__pulumiType;
    }

    /**
     * Display debug output of both Master and Blade
     */
    public readonly allSlots!: pulumi.Output<number | undefined>;
    /**
     * CPU id to debug (0,1,...)
     */
    public readonly cpuid!: pulumi.Output<number | undefined>;
    /**
     * Filename to save debug output
     */
    public readonly filename!: pulumi.Output<string | undefined>;
    /**
     * maximum file size to save debug messages (MB)
     */
    public readonly filesize!: pulumi.Output<number | undefined>;
    /**
     * Donot spawn another rimacli
     */
    public readonly noStop!: pulumi.Output<number | undefined>;
    /**
     * timeout to stop debug monitor in minutes
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DebugMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DebugMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DebugMonitorArgs | DebugMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DebugMonitorState | undefined;
            resourceInputs["allSlots"] = state ? state.allSlots : undefined;
            resourceInputs["cpuid"] = state ? state.cpuid : undefined;
            resourceInputs["filename"] = state ? state.filename : undefined;
            resourceInputs["filesize"] = state ? state.filesize : undefined;
            resourceInputs["noStop"] = state ? state.noStop : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DebugMonitorArgs | undefined;
            resourceInputs["allSlots"] = args ? args.allSlots : undefined;
            resourceInputs["cpuid"] = args ? args.cpuid : undefined;
            resourceInputs["filename"] = args ? args.filename : undefined;
            resourceInputs["filesize"] = args ? args.filesize : undefined;
            resourceInputs["noStop"] = args ? args.noStop : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DebugMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DebugMonitor resources.
 */
export interface DebugMonitorState {
    /**
     * Display debug output of both Master and Blade
     */
    allSlots?: pulumi.Input<number>;
    /**
     * CPU id to debug (0,1,...)
     */
    cpuid?: pulumi.Input<number>;
    /**
     * Filename to save debug output
     */
    filename?: pulumi.Input<string>;
    /**
     * maximum file size to save debug messages (MB)
     */
    filesize?: pulumi.Input<number>;
    /**
     * Donot spawn another rimacli
     */
    noStop?: pulumi.Input<number>;
    /**
     * timeout to stop debug monitor in minutes
     */
    timeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DebugMonitor resource.
 */
export interface DebugMonitorArgs {
    /**
     * Display debug output of both Master and Blade
     */
    allSlots?: pulumi.Input<number>;
    /**
     * CPU id to debug (0,1,...)
     */
    cpuid?: pulumi.Input<number>;
    /**
     * Filename to save debug output
     */
    filename?: pulumi.Input<string>;
    /**
     * maximum file size to save debug messages (MB)
     */
    filesize?: pulumi.Input<number>;
    /**
     * Donot spawn another rimacli
     */
    noStop?: pulumi.Input<number>;
    /**
     * timeout to stop debug monitor in minutes
     */
    timeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
