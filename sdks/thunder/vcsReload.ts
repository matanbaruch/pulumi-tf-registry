// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VcsReload extends pulumi.CustomResource {
    /**
     * Get an existing VcsReload resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VcsReloadState, opts?: pulumi.CustomResourceOptions): VcsReload {
        return new VcsReload(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vcsReload:VcsReload';

    /**
     * Returns true if the given object is an instance of VcsReload.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VcsReload {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VcsReload.__pulumiType;
    }

    /**
     * apply the configuration change on the aVCS cluster
     */
    public readonly clusterDiscovery!: pulumi.Output<number | undefined>;
    public readonly complete!: pulumi.Output<number | undefined>;
    /**
     * keep database safe
     */
    public readonly dbSafe!: pulumi.Output<number | undefined>;
    /**
     * Reload a specific device when VCS is enabled (device id)
     */
    public readonly device!: pulumi.Output<number | undefined>;
    /**
     * don't merge this vBlade's configuration to aVCS chassis
     */
    public readonly disableMerge!: pulumi.Output<number | undefined>;
    /**
     * force to complete
     */
    public readonly force!: pulumi.Output<number | undefined>;
    public readonly start!: pulumi.Output<number | undefined>;
    /**
     * automatically complete the db-safe mode when timeout
     */
    public readonly timeout!: pulumi.Output<number | undefined>;

    /**
     * Create a VcsReload resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VcsReloadArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VcsReloadArgs | VcsReloadState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VcsReloadState | undefined;
            resourceInputs["clusterDiscovery"] = state ? state.clusterDiscovery : undefined;
            resourceInputs["complete"] = state ? state.complete : undefined;
            resourceInputs["dbSafe"] = state ? state.dbSafe : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["disableMerge"] = state ? state.disableMerge : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["start"] = state ? state.start : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as VcsReloadArgs | undefined;
            resourceInputs["clusterDiscovery"] = args ? args.clusterDiscovery : undefined;
            resourceInputs["complete"] = args ? args.complete : undefined;
            resourceInputs["dbSafe"] = args ? args.dbSafe : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["disableMerge"] = args ? args.disableMerge : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["start"] = args ? args.start : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VcsReload.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VcsReload resources.
 */
export interface VcsReloadState {
    /**
     * apply the configuration change on the aVCS cluster
     */
    clusterDiscovery?: pulumi.Input<number>;
    complete?: pulumi.Input<number>;
    /**
     * keep database safe
     */
    dbSafe?: pulumi.Input<number>;
    /**
     * Reload a specific device when VCS is enabled (device id)
     */
    device?: pulumi.Input<number>;
    /**
     * don't merge this vBlade's configuration to aVCS chassis
     */
    disableMerge?: pulumi.Input<number>;
    /**
     * force to complete
     */
    force?: pulumi.Input<number>;
    start?: pulumi.Input<number>;
    /**
     * automatically complete the db-safe mode when timeout
     */
    timeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VcsReload resource.
 */
export interface VcsReloadArgs {
    /**
     * apply the configuration change on the aVCS cluster
     */
    clusterDiscovery?: pulumi.Input<number>;
    complete?: pulumi.Input<number>;
    /**
     * keep database safe
     */
    dbSafe?: pulumi.Input<number>;
    /**
     * Reload a specific device when VCS is enabled (device id)
     */
    device?: pulumi.Input<number>;
    /**
     * don't merge this vBlade's configuration to aVCS chassis
     */
    disableMerge?: pulumi.Input<number>;
    /**
     * force to complete
     */
    force?: pulumi.Input<number>;
    start?: pulumi.Input<number>;
    /**
     * automatically complete the db-safe mode when timeout
     */
    timeout?: pulumi.Input<number>;
}
