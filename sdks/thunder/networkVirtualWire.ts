// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkVirtualWire extends pulumi.CustomResource {
    /**
     * Get an existing NetworkVirtualWire resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkVirtualWireState, opts?: pulumi.CustomResourceOptions): NetworkVirtualWire {
        return new NetworkVirtualWire(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/networkVirtualWire:NetworkVirtualWire';

    /**
     * Returns true if the given object is an instance of NetworkVirtualWire.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkVirtualWire {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkVirtualWire.__pulumiType;
    }

    public readonly eth1!: pulumi.Output<number | undefined>;
    public readonly eth2!: pulumi.Output<number | undefined>;
    public readonly group1!: pulumi.Output<number | undefined>;
    public readonly group2!: pulumi.Output<number | undefined>;
    public readonly trunk1!: pulumi.Output<number | undefined>;
    public readonly trunk2!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * virtual wire id
     */
    public readonly virtualWireId!: pulumi.Output<number>;

    /**
     * Create a NetworkVirtualWire resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkVirtualWireArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkVirtualWireArgs | NetworkVirtualWireState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkVirtualWireState | undefined;
            resourceInputs["eth1"] = state ? state.eth1 : undefined;
            resourceInputs["eth2"] = state ? state.eth2 : undefined;
            resourceInputs["group1"] = state ? state.group1 : undefined;
            resourceInputs["group2"] = state ? state.group2 : undefined;
            resourceInputs["trunk1"] = state ? state.trunk1 : undefined;
            resourceInputs["trunk2"] = state ? state.trunk2 : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["virtualWireId"] = state ? state.virtualWireId : undefined;
        } else {
            const args = argsOrState as NetworkVirtualWireArgs | undefined;
            if ((!args || args.virtualWireId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualWireId'");
            }
            resourceInputs["eth1"] = args ? args.eth1 : undefined;
            resourceInputs["eth2"] = args ? args.eth2 : undefined;
            resourceInputs["group1"] = args ? args.group1 : undefined;
            resourceInputs["group2"] = args ? args.group2 : undefined;
            resourceInputs["trunk1"] = args ? args.trunk1 : undefined;
            resourceInputs["trunk2"] = args ? args.trunk2 : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["virtualWireId"] = args ? args.virtualWireId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkVirtualWire.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkVirtualWire resources.
 */
export interface NetworkVirtualWireState {
    eth1?: pulumi.Input<number>;
    eth2?: pulumi.Input<number>;
    group1?: pulumi.Input<number>;
    group2?: pulumi.Input<number>;
    trunk1?: pulumi.Input<number>;
    trunk2?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * virtual wire id
     */
    virtualWireId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a NetworkVirtualWire resource.
 */
export interface NetworkVirtualWireArgs {
    eth1?: pulumi.Input<number>;
    eth2?: pulumi.Input<number>;
    group1?: pulumi.Input<number>;
    group2?: pulumi.Input<number>;
    trunk1?: pulumi.Input<number>;
    trunk2?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * virtual wire id
     */
    virtualWireId: pulumi.Input<number>;
}
