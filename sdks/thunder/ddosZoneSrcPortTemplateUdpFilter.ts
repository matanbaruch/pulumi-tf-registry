// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DdosZoneSrcPortTemplateUdpFilter extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneSrcPortTemplateUdpFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneSrcPortTemplateUdpFilterState, opts?: pulumi.CustomResourceOptions): DdosZoneSrcPortTemplateUdpFilter {
        return new DdosZoneSrcPortTemplateUdpFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneSrcPortTemplateUdpFilter:DdosZoneSrcPortTemplateUdpFilter';

    /**
     * Returns true if the given object is an instance of DdosZoneSrcPortTemplateUdpFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneSrcPortTemplateUdpFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneSrcPortTemplateUdpFilter.__pulumiType;
    }

    /**
     * Filter using Berkeley Packet Filter syntax
     */
    public readonly byteOffsetFilter!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src;
     */
    public readonly udpFilterAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take
     */
    public readonly udpFilterActionListName!: pulumi.Output<string | undefined>;
    /**
     * Inverse the result of the matching
     */
    public readonly udpFilterInverseMatch!: pulumi.Output<number | undefined>;
    public readonly udpFilterName!: pulumi.Output<string>;
    /**
     * Regex Expression
     */
    public readonly udpFilterRegex!: pulumi.Output<string | undefined>;
    /**
     * Sequence number
     */
    public readonly udpFilterSeq!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosZoneSrcPortTemplateUdpFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneSrcPortTemplateUdpFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneSrcPortTemplateUdpFilterArgs | DdosZoneSrcPortTemplateUdpFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneSrcPortTemplateUdpFilterState | undefined;
            resourceInputs["byteOffsetFilter"] = state ? state.byteOffsetFilter : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["udpFilterAction"] = state ? state.udpFilterAction : undefined;
            resourceInputs["udpFilterActionListName"] = state ? state.udpFilterActionListName : undefined;
            resourceInputs["udpFilterInverseMatch"] = state ? state.udpFilterInverseMatch : undefined;
            resourceInputs["udpFilterName"] = state ? state.udpFilterName : undefined;
            resourceInputs["udpFilterRegex"] = state ? state.udpFilterRegex : undefined;
            resourceInputs["udpFilterSeq"] = state ? state.udpFilterSeq : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosZoneSrcPortTemplateUdpFilterArgs | undefined;
            if ((!args || args.udpFilterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'udpFilterName'");
            }
            resourceInputs["byteOffsetFilter"] = args ? args.byteOffsetFilter : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["udpFilterAction"] = args ? args.udpFilterAction : undefined;
            resourceInputs["udpFilterActionListName"] = args ? args.udpFilterActionListName : undefined;
            resourceInputs["udpFilterInverseMatch"] = args ? args.udpFilterInverseMatch : undefined;
            resourceInputs["udpFilterName"] = args ? args.udpFilterName : undefined;
            resourceInputs["udpFilterRegex"] = args ? args.udpFilterRegex : undefined;
            resourceInputs["udpFilterSeq"] = args ? args.udpFilterSeq : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneSrcPortTemplateUdpFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneSrcPortTemplateUdpFilter resources.
 */
export interface DdosZoneSrcPortTemplateUdpFilterState {
    /**
     * Filter using Berkeley Packet Filter syntax
     */
    byteOffsetFilter?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src;
     */
    udpFilterAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    udpFilterActionListName?: pulumi.Input<string>;
    /**
     * Inverse the result of the matching
     */
    udpFilterInverseMatch?: pulumi.Input<number>;
    udpFilterName?: pulumi.Input<string>;
    /**
     * Regex Expression
     */
    udpFilterRegex?: pulumi.Input<string>;
    /**
     * Sequence number
     */
    udpFilterSeq?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosZoneSrcPortTemplateUdpFilter resource.
 */
export interface DdosZoneSrcPortTemplateUdpFilterArgs {
    /**
     * Filter using Berkeley Packet Filter syntax
     */
    byteOffsetFilter?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src;
     */
    udpFilterAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    udpFilterActionListName?: pulumi.Input<string>;
    /**
     * Inverse the result of the matching
     */
    udpFilterInverseMatch?: pulumi.Input<number>;
    udpFilterName: pulumi.Input<string>;
    /**
     * Regex Expression
     */
    udpFilterRegex?: pulumi.Input<string>;
    /**
     * Sequence number
     */
    udpFilterSeq?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
