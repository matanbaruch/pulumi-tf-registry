// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbTemplateVirtualServer extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateVirtualServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateVirtualServerState, opts?: pulumi.CustomResourceOptions): SlbTemplateVirtualServer {
        return new SlbTemplateVirtualServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateVirtualServer:SlbTemplateVirtualServer';

    /**
     * Returns true if the given object is an instance of SlbTemplateVirtualServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateVirtualServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateVirtualServer.__pulumiType;
    }

    /**
     * Connection limit
     */
    public readonly connLimit!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly connLimitNoLogging!: pulumi.Output<number | undefined>;
    /**
     * Send client reset when connection over limit
     */
    public readonly connLimitReset!: pulumi.Output<number | undefined>;
    /**
     * Connection rate limit
     */
    public readonly connRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Do not log connection over limit event
     */
    public readonly connRateLimitNoLogging!: pulumi.Output<number | undefined>;
    /**
     * Send client reset when connection rate over limit
     */
    public readonly connRateLimitReset!: pulumi.Output<number | undefined>;
    /**
     * Disable Virtual Server when all member ports are down
     */
    public readonly disableWhenAllPortsDown!: pulumi.Output<number | undefined>;
    /**
     * Disable Virtual Server when any member port is down
     */
    public readonly disableWhenAnyPortDown!: pulumi.Output<number | undefined>;
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    public readonly icmpLockup!: pulumi.Output<number | undefined>;
    /**
     * Lockup period (second)
     */
    public readonly icmpLockupPeriod!: pulumi.Output<number | undefined>;
    /**
     * ICMP rate limit (Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit)
     */
    public readonly icmpRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    public readonly icmpv6Lockup!: pulumi.Output<number | undefined>;
    /**
     * Lockup period (second)
     */
    public readonly icmpv6LockupPeriod!: pulumi.Output<number | undefined>;
    /**
     * ICMPv6 rate limit (Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit)
     */
    public readonly icmpv6RateLimit!: pulumi.Output<number | undefined>;
    /**
     * Virtual server template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    public readonly rateInterval!: pulumi.Output<string | undefined>;
    /**
     * Send gratuitous ARP for every IP in the subnet virtual server
     */
    public readonly subnetGratuitousArp!: pulumi.Output<number | undefined>;
    /**
     * The allowed active layer 7 tcp fast-open connection limit, default is zero (number)
     */
    public readonly tcpStackTfoActiveConnLimit!: pulumi.Output<number | undefined>;
    /**
     * The time tcp stack will wait before allowing new fast-open requests after security condition, default 600 seconds
     * (number)
     */
    public readonly tcpStackTfoBackoffTime!: pulumi.Output<number | undefined>;
    /**
     * The time limit (in seconds) that a layer 7 tcp fast-open cookie is valid, default is 60 seconds (number)
     */
    public readonly tcpStackTfoCookieTimeLimit!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateVirtualServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateVirtualServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateVirtualServerArgs | SlbTemplateVirtualServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateVirtualServerState | undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["connLimitNoLogging"] = state ? state.connLimitNoLogging : undefined;
            resourceInputs["connLimitReset"] = state ? state.connLimitReset : undefined;
            resourceInputs["connRateLimit"] = state ? state.connRateLimit : undefined;
            resourceInputs["connRateLimitNoLogging"] = state ? state.connRateLimitNoLogging : undefined;
            resourceInputs["connRateLimitReset"] = state ? state.connRateLimitReset : undefined;
            resourceInputs["disableWhenAllPortsDown"] = state ? state.disableWhenAllPortsDown : undefined;
            resourceInputs["disableWhenAnyPortDown"] = state ? state.disableWhenAnyPortDown : undefined;
            resourceInputs["icmpLockup"] = state ? state.icmpLockup : undefined;
            resourceInputs["icmpLockupPeriod"] = state ? state.icmpLockupPeriod : undefined;
            resourceInputs["icmpRateLimit"] = state ? state.icmpRateLimit : undefined;
            resourceInputs["icmpv6Lockup"] = state ? state.icmpv6Lockup : undefined;
            resourceInputs["icmpv6LockupPeriod"] = state ? state.icmpv6LockupPeriod : undefined;
            resourceInputs["icmpv6RateLimit"] = state ? state.icmpv6RateLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rateInterval"] = state ? state.rateInterval : undefined;
            resourceInputs["subnetGratuitousArp"] = state ? state.subnetGratuitousArp : undefined;
            resourceInputs["tcpStackTfoActiveConnLimit"] = state ? state.tcpStackTfoActiveConnLimit : undefined;
            resourceInputs["tcpStackTfoBackoffTime"] = state ? state.tcpStackTfoBackoffTime : undefined;
            resourceInputs["tcpStackTfoCookieTimeLimit"] = state ? state.tcpStackTfoCookieTimeLimit : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateVirtualServerArgs | undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["connLimitNoLogging"] = args ? args.connLimitNoLogging : undefined;
            resourceInputs["connLimitReset"] = args ? args.connLimitReset : undefined;
            resourceInputs["connRateLimit"] = args ? args.connRateLimit : undefined;
            resourceInputs["connRateLimitNoLogging"] = args ? args.connRateLimitNoLogging : undefined;
            resourceInputs["connRateLimitReset"] = args ? args.connRateLimitReset : undefined;
            resourceInputs["disableWhenAllPortsDown"] = args ? args.disableWhenAllPortsDown : undefined;
            resourceInputs["disableWhenAnyPortDown"] = args ? args.disableWhenAnyPortDown : undefined;
            resourceInputs["icmpLockup"] = args ? args.icmpLockup : undefined;
            resourceInputs["icmpLockupPeriod"] = args ? args.icmpLockupPeriod : undefined;
            resourceInputs["icmpRateLimit"] = args ? args.icmpRateLimit : undefined;
            resourceInputs["icmpv6Lockup"] = args ? args.icmpv6Lockup : undefined;
            resourceInputs["icmpv6LockupPeriod"] = args ? args.icmpv6LockupPeriod : undefined;
            resourceInputs["icmpv6RateLimit"] = args ? args.icmpv6RateLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rateInterval"] = args ? args.rateInterval : undefined;
            resourceInputs["subnetGratuitousArp"] = args ? args.subnetGratuitousArp : undefined;
            resourceInputs["tcpStackTfoActiveConnLimit"] = args ? args.tcpStackTfoActiveConnLimit : undefined;
            resourceInputs["tcpStackTfoBackoffTime"] = args ? args.tcpStackTfoBackoffTime : undefined;
            resourceInputs["tcpStackTfoCookieTimeLimit"] = args ? args.tcpStackTfoCookieTimeLimit : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateVirtualServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateVirtualServer resources.
 */
export interface SlbTemplateVirtualServerState {
    /**
     * Connection limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection over limit
     */
    connLimitReset?: pulumi.Input<number>;
    /**
     * Connection rate limit
     */
    connRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection rate over limit
     */
    connRateLimitReset?: pulumi.Input<number>;
    /**
     * Disable Virtual Server when all member ports are down
     */
    disableWhenAllPortsDown?: pulumi.Input<number>;
    /**
     * Disable Virtual Server when any member port is down
     */
    disableWhenAnyPortDown?: pulumi.Input<number>;
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    icmpLockup?: pulumi.Input<number>;
    /**
     * Lockup period (second)
     */
    icmpLockupPeriod?: pulumi.Input<number>;
    /**
     * ICMP rate limit (Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit)
     */
    icmpRateLimit?: pulumi.Input<number>;
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    icmpv6Lockup?: pulumi.Input<number>;
    /**
     * Lockup period (second)
     */
    icmpv6LockupPeriod?: pulumi.Input<number>;
    /**
     * ICMPv6 rate limit (Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit)
     */
    icmpv6RateLimit?: pulumi.Input<number>;
    /**
     * Virtual server template name
     */
    name?: pulumi.Input<string>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Send gratuitous ARP for every IP in the subnet virtual server
     */
    subnetGratuitousArp?: pulumi.Input<number>;
    /**
     * The allowed active layer 7 tcp fast-open connection limit, default is zero (number)
     */
    tcpStackTfoActiveConnLimit?: pulumi.Input<number>;
    /**
     * The time tcp stack will wait before allowing new fast-open requests after security condition, default 600 seconds
     * (number)
     */
    tcpStackTfoBackoffTime?: pulumi.Input<number>;
    /**
     * The time limit (in seconds) that a layer 7 tcp fast-open cookie is valid, default is 60 seconds (number)
     */
    tcpStackTfoCookieTimeLimit?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateVirtualServer resource.
 */
export interface SlbTemplateVirtualServerArgs {
    /**
     * Connection limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection over limit
     */
    connLimitReset?: pulumi.Input<number>;
    /**
     * Connection rate limit
     */
    connRateLimit?: pulumi.Input<number>;
    /**
     * Do not log connection over limit event
     */
    connRateLimitNoLogging?: pulumi.Input<number>;
    /**
     * Send client reset when connection rate over limit
     */
    connRateLimitReset?: pulumi.Input<number>;
    /**
     * Disable Virtual Server when all member ports are down
     */
    disableWhenAllPortsDown?: pulumi.Input<number>;
    /**
     * Disable Virtual Server when any member port is down
     */
    disableWhenAnyPortDown?: pulumi.Input<number>;
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    icmpLockup?: pulumi.Input<number>;
    /**
     * Lockup period (second)
     */
    icmpLockupPeriod?: pulumi.Input<number>;
    /**
     * ICMP rate limit (Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit)
     */
    icmpRateLimit?: pulumi.Input<number>;
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    icmpv6Lockup?: pulumi.Input<number>;
    /**
     * Lockup period (second)
     */
    icmpv6LockupPeriod?: pulumi.Input<number>;
    /**
     * ICMPv6 rate limit (Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit)
     */
    icmpv6RateLimit?: pulumi.Input<number>;
    /**
     * Virtual server template name
     */
    name?: pulumi.Input<string>;
    /**
     * '100ms': Use 100 ms as sampling interval; 'second': Use 1 second as sampling interval;
     */
    rateInterval?: pulumi.Input<string>;
    /**
     * Send gratuitous ARP for every IP in the subnet virtual server
     */
    subnetGratuitousArp?: pulumi.Input<number>;
    /**
     * The allowed active layer 7 tcp fast-open connection limit, default is zero (number)
     */
    tcpStackTfoActiveConnLimit?: pulumi.Input<number>;
    /**
     * The time tcp stack will wait before allowing new fast-open requests after security condition, default 600 seconds
     * (number)
     */
    tcpStackTfoBackoffTime?: pulumi.Input<number>;
    /**
     * The time limit (in seconds) that a layer 7 tcp fast-open cookie is valid, default is 60 seconds (number)
     */
    tcpStackTfoCookieTimeLimit?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
