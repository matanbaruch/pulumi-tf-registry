// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DdosTemplateTcpProgressionTrackingConnectionTracking extends pulumi.CustomResource {
    /**
     * Get an existing DdosTemplateTcpProgressionTrackingConnectionTracking resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosTemplateTcpProgressionTrackingConnectionTrackingState, opts?: pulumi.CustomResourceOptions): DdosTemplateTcpProgressionTrackingConnectionTracking {
        return new DdosTemplateTcpProgressionTrackingConnectionTracking(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosTemplateTcpProgressionTrackingConnectionTracking:DdosTemplateTcpProgressionTrackingConnectionTracking';

    /**
     * Returns true if the given object is an instance of DdosTemplateTcpProgressionTrackingConnectionTracking.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosTemplateTcpProgressionTrackingConnectionTracking {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosTemplateTcpProgressionTrackingConnectionTracking.__pulumiType;
    }

    /**
     * Set the maximum duration time (in unit of 100ms, up to 24 hours)
     */
    public readonly connDurationMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum duration time (in unit of 100ms, up to 24 hours)
     */
    public readonly connDurationMin!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum total received byte
     */
    public readonly connRcvdMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum total received byte
     */
    public readonly connRcvdMin!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum received to sent ratio (in unit of 0.1% [1:1000])
     */
    public readonly connRcvdSentRatioMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum received to sent ratio (in unit of 0.1% [1:1000])
     */
    public readonly connRcvdSentRatioMin!: pulumi.Output<number | undefined>;
    /**
     * Set the maximum total sent byte
     */
    public readonly connSentMax!: pulumi.Output<number | undefined>;
    /**
     * Set the minimum total sent byte
     */
    public readonly connSentMin!: pulumi.Output<number | undefined>;
    /**
     * Set the violation threshold
     */
    public readonly connViolation!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    public readonly progressionTrackingConnAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    public readonly progressionTrackingConnActionListName!: pulumi.Output<string | undefined>;
    /**
     * 'enable-check': Enable General Progression Tracking per Connection;
     */
    public readonly progressionTrackingConnEnabled!: pulumi.Output<string>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosTemplateTcpProgressionTrackingConnectionTracking resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosTemplateTcpProgressionTrackingConnectionTrackingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosTemplateTcpProgressionTrackingConnectionTrackingArgs | DdosTemplateTcpProgressionTrackingConnectionTrackingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosTemplateTcpProgressionTrackingConnectionTrackingState | undefined;
            resourceInputs["connDurationMax"] = state ? state.connDurationMax : undefined;
            resourceInputs["connDurationMin"] = state ? state.connDurationMin : undefined;
            resourceInputs["connRcvdMax"] = state ? state.connRcvdMax : undefined;
            resourceInputs["connRcvdMin"] = state ? state.connRcvdMin : undefined;
            resourceInputs["connRcvdSentRatioMax"] = state ? state.connRcvdSentRatioMax : undefined;
            resourceInputs["connRcvdSentRatioMin"] = state ? state.connRcvdSentRatioMin : undefined;
            resourceInputs["connSentMax"] = state ? state.connSentMax : undefined;
            resourceInputs["connSentMin"] = state ? state.connSentMin : undefined;
            resourceInputs["connViolation"] = state ? state.connViolation : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["progressionTrackingConnAction"] = state ? state.progressionTrackingConnAction : undefined;
            resourceInputs["progressionTrackingConnActionListName"] = state ? state.progressionTrackingConnActionListName : undefined;
            resourceInputs["progressionTrackingConnEnabled"] = state ? state.progressionTrackingConnEnabled : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosTemplateTcpProgressionTrackingConnectionTrackingArgs | undefined;
            if ((!args || args.progressionTrackingConnEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'progressionTrackingConnEnabled'");
            }
            resourceInputs["connDurationMax"] = args ? args.connDurationMax : undefined;
            resourceInputs["connDurationMin"] = args ? args.connDurationMin : undefined;
            resourceInputs["connRcvdMax"] = args ? args.connRcvdMax : undefined;
            resourceInputs["connRcvdMin"] = args ? args.connRcvdMin : undefined;
            resourceInputs["connRcvdSentRatioMax"] = args ? args.connRcvdSentRatioMax : undefined;
            resourceInputs["connRcvdSentRatioMin"] = args ? args.connRcvdSentRatioMin : undefined;
            resourceInputs["connSentMax"] = args ? args.connSentMax : undefined;
            resourceInputs["connSentMin"] = args ? args.connSentMin : undefined;
            resourceInputs["connViolation"] = args ? args.connViolation : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["progressionTrackingConnAction"] = args ? args.progressionTrackingConnAction : undefined;
            resourceInputs["progressionTrackingConnActionListName"] = args ? args.progressionTrackingConnActionListName : undefined;
            resourceInputs["progressionTrackingConnEnabled"] = args ? args.progressionTrackingConnEnabled : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosTemplateTcpProgressionTrackingConnectionTracking.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosTemplateTcpProgressionTrackingConnectionTracking resources.
 */
export interface DdosTemplateTcpProgressionTrackingConnectionTrackingState {
    /**
     * Set the maximum duration time (in unit of 100ms, up to 24 hours)
     */
    connDurationMax?: pulumi.Input<number>;
    /**
     * Set the minimum duration time (in unit of 100ms, up to 24 hours)
     */
    connDurationMin?: pulumi.Input<number>;
    /**
     * Set the maximum total received byte
     */
    connRcvdMax?: pulumi.Input<number>;
    /**
     * Set the minimum total received byte
     */
    connRcvdMin?: pulumi.Input<number>;
    /**
     * Set the maximum received to sent ratio (in unit of 0.1% [1:1000])
     */
    connRcvdSentRatioMax?: pulumi.Input<number>;
    /**
     * Set the minimum received to sent ratio (in unit of 0.1% [1:1000])
     */
    connRcvdSentRatioMin?: pulumi.Input<number>;
    /**
     * Set the maximum total sent byte
     */
    connSentMax?: pulumi.Input<number>;
    /**
     * Set the minimum total sent byte
     */
    connSentMin?: pulumi.Input<number>;
    /**
     * Set the violation threshold
     */
    connViolation?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    progressionTrackingConnAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    progressionTrackingConnActionListName?: pulumi.Input<string>;
    /**
     * 'enable-check': Enable General Progression Tracking per Connection;
     */
    progressionTrackingConnEnabled?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosTemplateTcpProgressionTrackingConnectionTracking resource.
 */
export interface DdosTemplateTcpProgressionTrackingConnectionTrackingArgs {
    /**
     * Set the maximum duration time (in unit of 100ms, up to 24 hours)
     */
    connDurationMax?: pulumi.Input<number>;
    /**
     * Set the minimum duration time (in unit of 100ms, up to 24 hours)
     */
    connDurationMin?: pulumi.Input<number>;
    /**
     * Set the maximum total received byte
     */
    connRcvdMax?: pulumi.Input<number>;
    /**
     * Set the minimum total received byte
     */
    connRcvdMin?: pulumi.Input<number>;
    /**
     * Set the maximum received to sent ratio (in unit of 0.1% [1:1000])
     */
    connRcvdSentRatioMax?: pulumi.Input<number>;
    /**
     * Set the minimum received to sent ratio (in unit of 0.1% [1:1000])
     */
    connRcvdSentRatioMin?: pulumi.Input<number>;
    /**
     * Set the maximum total sent byte
     */
    connSentMax?: pulumi.Input<number>;
    /**
     * Set the minimum total sent byte
     */
    connSentMin?: pulumi.Input<number>;
    /**
     * Set the violation threshold
     */
    connViolation?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'drop': Drop packets for progression tracking violation exceed (Default); 'blacklist-src': Blacklist-src for progression
     * tracking violation exceed;
     */
    progressionTrackingConnAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take when progression tracking violation exceed
     */
    progressionTrackingConnActionListName?: pulumi.Input<string>;
    /**
     * 'enable-check': Enable General Progression Tracking per Connection;
     */
    progressionTrackingConnEnabled: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
