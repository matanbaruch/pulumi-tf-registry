// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TrafficControlRuleSetRule extends pulumi.CustomResource {
    /**
     * Get an existing TrafficControlRuleSetRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficControlRuleSetRuleState, opts?: pulumi.CustomResourceOptions): TrafficControlRuleSetRule {
        return new TrafficControlRuleSetRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/trafficControlRuleSetRule:TrafficControlRuleSetRule';

    /**
     * Returns true if the given object is an instance of TrafficControlRuleSetRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficControlRuleSetRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficControlRuleSetRule.__pulumiType;
    }

    public readonly actionGroup!: pulumi.Output<outputs.TrafficControlRuleSetRuleActionGroup | undefined>;
    public readonly appLists!: pulumi.Output<outputs.TrafficControlRuleSetRuleAppList[] | undefined>;
    /**
     * 'any': any;
     */
    public readonly applicationAny!: pulumi.Output<string | undefined>;
    public readonly destLists!: pulumi.Output<outputs.TrafficControlRuleSetRuleDestList[] | undefined>;
    /**
     * Match destination IP against class-list
     */
    public readonly dstClassList!: pulumi.Output<string | undefined>;
    /**
     * Match destination IP against domain-list
     */
    public readonly dstDomainList!: pulumi.Output<string | undefined>;
    /**
     * Geolocation name list
     */
    public readonly dstGeolocList!: pulumi.Output<string | undefined>;
    /**
     * Use Geolocation list from shared partition
     */
    public readonly dstGeolocListShared!: pulumi.Output<number | undefined>;
    /**
     * Single geolocation name
     */
    public readonly dstGeolocName!: pulumi.Output<string | undefined>;
    /**
     * 'any': Any IPv4 address;
     */
    public readonly dstIpv4Any!: pulumi.Output<string | undefined>;
    /**
     * 'any': Any IPv6 address;
     */
    public readonly dstIpv6Any!: pulumi.Output<string | undefined>;
    /**
     * Bind threat-list for destination IP based filtering
     */
    public readonly dstThreatList!: pulumi.Output<string | undefined>;
    /**
     * Zone name
     */
    public readonly dstZone!: pulumi.Output<string | undefined>;
    /**
     * 'any': any;
     */
    public readonly dstZoneAny!: pulumi.Output<string | undefined>;
    /**
     * 'v4': IPv4 rule; 'v6': IPv6 rule;
     */
    public readonly ipVersion!: pulumi.Output<string | undefined>;
    /**
     * Rule name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Rule entry comment (Notes for this rule)
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * Rule set name
     */
    public readonly ruleSetName!: pulumi.Output<string>;
    public readonly samplingEnables!: pulumi.Output<outputs.TrafficControlRuleSetRuleSamplingEnable[] | undefined>;
    /**
     * 'any': any;
     */
    public readonly serviceAny!: pulumi.Output<string | undefined>;
    public readonly serviceLists!: pulumi.Output<outputs.TrafficControlRuleSetRuleServiceList[] | undefined>;
    public readonly sourceLists!: pulumi.Output<outputs.TrafficControlRuleSetRuleSourceList[] | undefined>;
    /**
     * Match source IP against class-list
     */
    public readonly srcClassList!: pulumi.Output<string | undefined>;
    /**
     * Geolocation name list
     */
    public readonly srcGeolocList!: pulumi.Output<string | undefined>;
    /**
     * Use Geolocation list from shared partition
     */
    public readonly srcGeolocListShared!: pulumi.Output<number | undefined>;
    /**
     * Single geolocation name
     */
    public readonly srcGeolocName!: pulumi.Output<string | undefined>;
    /**
     * 'any': Any IPv4 address;
     */
    public readonly srcIpv4Any!: pulumi.Output<string | undefined>;
    /**
     * 'any': Any IPv6 address;
     */
    public readonly srcIpv6Any!: pulumi.Output<string | undefined>;
    /**
     * Bind threat-list for source IP based filtering
     */
    public readonly srcThreatList!: pulumi.Output<string | undefined>;
    /**
     * Zone name
     */
    public readonly srcZone!: pulumi.Output<string | undefined>;
    /**
     * 'any': any;
     */
    public readonly srcZoneAny!: pulumi.Output<string | undefined>;
    /**
     * 'enable': Enable rule; 'disable': Disable rule;
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a TrafficControlRuleSetRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficControlRuleSetRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficControlRuleSetRuleArgs | TrafficControlRuleSetRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficControlRuleSetRuleState | undefined;
            resourceInputs["actionGroup"] = state ? state.actionGroup : undefined;
            resourceInputs["appLists"] = state ? state.appLists : undefined;
            resourceInputs["applicationAny"] = state ? state.applicationAny : undefined;
            resourceInputs["destLists"] = state ? state.destLists : undefined;
            resourceInputs["dstClassList"] = state ? state.dstClassList : undefined;
            resourceInputs["dstDomainList"] = state ? state.dstDomainList : undefined;
            resourceInputs["dstGeolocList"] = state ? state.dstGeolocList : undefined;
            resourceInputs["dstGeolocListShared"] = state ? state.dstGeolocListShared : undefined;
            resourceInputs["dstGeolocName"] = state ? state.dstGeolocName : undefined;
            resourceInputs["dstIpv4Any"] = state ? state.dstIpv4Any : undefined;
            resourceInputs["dstIpv6Any"] = state ? state.dstIpv6Any : undefined;
            resourceInputs["dstThreatList"] = state ? state.dstThreatList : undefined;
            resourceInputs["dstZone"] = state ? state.dstZone : undefined;
            resourceInputs["dstZoneAny"] = state ? state.dstZoneAny : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["ruleSetName"] = state ? state.ruleSetName : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["serviceAny"] = state ? state.serviceAny : undefined;
            resourceInputs["serviceLists"] = state ? state.serviceLists : undefined;
            resourceInputs["sourceLists"] = state ? state.sourceLists : undefined;
            resourceInputs["srcClassList"] = state ? state.srcClassList : undefined;
            resourceInputs["srcGeolocList"] = state ? state.srcGeolocList : undefined;
            resourceInputs["srcGeolocListShared"] = state ? state.srcGeolocListShared : undefined;
            resourceInputs["srcGeolocName"] = state ? state.srcGeolocName : undefined;
            resourceInputs["srcIpv4Any"] = state ? state.srcIpv4Any : undefined;
            resourceInputs["srcIpv6Any"] = state ? state.srcIpv6Any : undefined;
            resourceInputs["srcThreatList"] = state ? state.srcThreatList : undefined;
            resourceInputs["srcZone"] = state ? state.srcZone : undefined;
            resourceInputs["srcZoneAny"] = state ? state.srcZoneAny : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TrafficControlRuleSetRuleArgs | undefined;
            if ((!args || args.ruleSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleSetName'");
            }
            resourceInputs["actionGroup"] = args ? args.actionGroup : undefined;
            resourceInputs["appLists"] = args ? args.appLists : undefined;
            resourceInputs["applicationAny"] = args ? args.applicationAny : undefined;
            resourceInputs["destLists"] = args ? args.destLists : undefined;
            resourceInputs["dstClassList"] = args ? args.dstClassList : undefined;
            resourceInputs["dstDomainList"] = args ? args.dstDomainList : undefined;
            resourceInputs["dstGeolocList"] = args ? args.dstGeolocList : undefined;
            resourceInputs["dstGeolocListShared"] = args ? args.dstGeolocListShared : undefined;
            resourceInputs["dstGeolocName"] = args ? args.dstGeolocName : undefined;
            resourceInputs["dstIpv4Any"] = args ? args.dstIpv4Any : undefined;
            resourceInputs["dstIpv6Any"] = args ? args.dstIpv6Any : undefined;
            resourceInputs["dstThreatList"] = args ? args.dstThreatList : undefined;
            resourceInputs["dstZone"] = args ? args.dstZone : undefined;
            resourceInputs["dstZoneAny"] = args ? args.dstZoneAny : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["ruleSetName"] = args ? args.ruleSetName : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["serviceAny"] = args ? args.serviceAny : undefined;
            resourceInputs["serviceLists"] = args ? args.serviceLists : undefined;
            resourceInputs["sourceLists"] = args ? args.sourceLists : undefined;
            resourceInputs["srcClassList"] = args ? args.srcClassList : undefined;
            resourceInputs["srcGeolocList"] = args ? args.srcGeolocList : undefined;
            resourceInputs["srcGeolocListShared"] = args ? args.srcGeolocListShared : undefined;
            resourceInputs["srcGeolocName"] = args ? args.srcGeolocName : undefined;
            resourceInputs["srcIpv4Any"] = args ? args.srcIpv4Any : undefined;
            resourceInputs["srcIpv6Any"] = args ? args.srcIpv6Any : undefined;
            resourceInputs["srcThreatList"] = args ? args.srcThreatList : undefined;
            resourceInputs["srcZone"] = args ? args.srcZone : undefined;
            resourceInputs["srcZoneAny"] = args ? args.srcZoneAny : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficControlRuleSetRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TrafficControlRuleSetRule resources.
 */
export interface TrafficControlRuleSetRuleState {
    actionGroup?: pulumi.Input<inputs.TrafficControlRuleSetRuleActionGroup>;
    appLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleAppList>[]>;
    /**
     * 'any': any;
     */
    applicationAny?: pulumi.Input<string>;
    destLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleDestList>[]>;
    /**
     * Match destination IP against class-list
     */
    dstClassList?: pulumi.Input<string>;
    /**
     * Match destination IP against domain-list
     */
    dstDomainList?: pulumi.Input<string>;
    /**
     * Geolocation name list
     */
    dstGeolocList?: pulumi.Input<string>;
    /**
     * Use Geolocation list from shared partition
     */
    dstGeolocListShared?: pulumi.Input<number>;
    /**
     * Single geolocation name
     */
    dstGeolocName?: pulumi.Input<string>;
    /**
     * 'any': Any IPv4 address;
     */
    dstIpv4Any?: pulumi.Input<string>;
    /**
     * 'any': Any IPv6 address;
     */
    dstIpv6Any?: pulumi.Input<string>;
    /**
     * Bind threat-list for destination IP based filtering
     */
    dstThreatList?: pulumi.Input<string>;
    /**
     * Zone name
     */
    dstZone?: pulumi.Input<string>;
    /**
     * 'any': any;
     */
    dstZoneAny?: pulumi.Input<string>;
    /**
     * 'v4': IPv4 rule; 'v6': IPv6 rule;
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Rule entry comment (Notes for this rule)
     */
    remark?: pulumi.Input<string>;
    /**
     * Rule set name
     */
    ruleSetName?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleSamplingEnable>[]>;
    /**
     * 'any': any;
     */
    serviceAny?: pulumi.Input<string>;
    serviceLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleServiceList>[]>;
    sourceLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleSourceList>[]>;
    /**
     * Match source IP against class-list
     */
    srcClassList?: pulumi.Input<string>;
    /**
     * Geolocation name list
     */
    srcGeolocList?: pulumi.Input<string>;
    /**
     * Use Geolocation list from shared partition
     */
    srcGeolocListShared?: pulumi.Input<number>;
    /**
     * Single geolocation name
     */
    srcGeolocName?: pulumi.Input<string>;
    /**
     * 'any': Any IPv4 address;
     */
    srcIpv4Any?: pulumi.Input<string>;
    /**
     * 'any': Any IPv6 address;
     */
    srcIpv6Any?: pulumi.Input<string>;
    /**
     * Bind threat-list for source IP based filtering
     */
    srcThreatList?: pulumi.Input<string>;
    /**
     * Zone name
     */
    srcZone?: pulumi.Input<string>;
    /**
     * 'any': any;
     */
    srcZoneAny?: pulumi.Input<string>;
    /**
     * 'enable': Enable rule; 'disable': Disable rule;
     */
    status?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficControlRuleSetRule resource.
 */
export interface TrafficControlRuleSetRuleArgs {
    actionGroup?: pulumi.Input<inputs.TrafficControlRuleSetRuleActionGroup>;
    appLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleAppList>[]>;
    /**
     * 'any': any;
     */
    applicationAny?: pulumi.Input<string>;
    destLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleDestList>[]>;
    /**
     * Match destination IP against class-list
     */
    dstClassList?: pulumi.Input<string>;
    /**
     * Match destination IP against domain-list
     */
    dstDomainList?: pulumi.Input<string>;
    /**
     * Geolocation name list
     */
    dstGeolocList?: pulumi.Input<string>;
    /**
     * Use Geolocation list from shared partition
     */
    dstGeolocListShared?: pulumi.Input<number>;
    /**
     * Single geolocation name
     */
    dstGeolocName?: pulumi.Input<string>;
    /**
     * 'any': Any IPv4 address;
     */
    dstIpv4Any?: pulumi.Input<string>;
    /**
     * 'any': Any IPv6 address;
     */
    dstIpv6Any?: pulumi.Input<string>;
    /**
     * Bind threat-list for destination IP based filtering
     */
    dstThreatList?: pulumi.Input<string>;
    /**
     * Zone name
     */
    dstZone?: pulumi.Input<string>;
    /**
     * 'any': any;
     */
    dstZoneAny?: pulumi.Input<string>;
    /**
     * 'v4': IPv4 rule; 'v6': IPv6 rule;
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * Rule name
     */
    name?: pulumi.Input<string>;
    /**
     * Rule entry comment (Notes for this rule)
     */
    remark?: pulumi.Input<string>;
    /**
     * Rule set name
     */
    ruleSetName: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleSamplingEnable>[]>;
    /**
     * 'any': any;
     */
    serviceAny?: pulumi.Input<string>;
    serviceLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleServiceList>[]>;
    sourceLists?: pulumi.Input<pulumi.Input<inputs.TrafficControlRuleSetRuleSourceList>[]>;
    /**
     * Match source IP against class-list
     */
    srcClassList?: pulumi.Input<string>;
    /**
     * Geolocation name list
     */
    srcGeolocList?: pulumi.Input<string>;
    /**
     * Use Geolocation list from shared partition
     */
    srcGeolocListShared?: pulumi.Input<number>;
    /**
     * Single geolocation name
     */
    srcGeolocName?: pulumi.Input<string>;
    /**
     * 'any': Any IPv4 address;
     */
    srcIpv4Any?: pulumi.Input<string>;
    /**
     * 'any': Any IPv6 address;
     */
    srcIpv6Any?: pulumi.Input<string>;
    /**
     * Bind threat-list for source IP based filtering
     */
    srcThreatList?: pulumi.Input<string>;
    /**
     * Zone name
     */
    srcZone?: pulumi.Input<string>;
    /**
     * 'any': any;
     */
    srcZoneAny?: pulumi.Input<string>;
    /**
     * 'enable': Enable rule; 'disable': Disable rule;
     */
    status?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
