// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VisibilityReportingTemplateNotificationTemplateNameAuthentication extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityReportingTemplateNotificationTemplateNameAuthentication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityReportingTemplateNotificationTemplateNameAuthenticationState, opts?: pulumi.CustomResourceOptions): VisibilityReportingTemplateNotificationTemplateNameAuthentication {
        return new VisibilityReportingTemplateNotificationTemplateNameAuthentication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityReportingTemplateNotificationTemplateNameAuthentication:VisibilityReportingTemplateNotificationTemplateNameAuthentication';

    /**
     * Returns true if the given object is an instance of VisibilityReportingTemplateNotificationTemplateNameAuthentication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityReportingTemplateNotificationTemplateNameAuthentication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityReportingTemplateNotificationTemplateNameAuthentication.__pulumiType;
    }

    /**
     * Configure api-key as a mode of authentication
     */
    public readonly apiKey!: pulumi.Output<number | undefined>;
    /**
     * Configure api-key as a mode of authentication
     */
    public readonly apiKeyString!: pulumi.Output<string | undefined>;
    /**
     * Configure the authentication user password (Authentication password)
     */
    public readonly authPassword!: pulumi.Output<number | undefined>;
    /**
     * Configure the authentication user password (Authentication password)
     */
    public readonly authPasswordString!: pulumi.Output<string | undefined>;
    /**
     * Configure the authentication user name
     */
    public readonly authUsername!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configure the authentication login uri
     */
    public readonly relativeLoginUri!: pulumi.Output<string | undefined>;
    /**
     * Configure the authentication logoff uri
     */
    public readonly relativeLogoffUri!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VisibilityReportingTemplateNotificationTemplateNameAuthentication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VisibilityReportingTemplateNotificationTemplateNameAuthenticationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityReportingTemplateNotificationTemplateNameAuthenticationArgs | VisibilityReportingTemplateNotificationTemplateNameAuthenticationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityReportingTemplateNotificationTemplateNameAuthenticationState | undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["apiKeyString"] = state ? state.apiKeyString : undefined;
            resourceInputs["authPassword"] = state ? state.authPassword : undefined;
            resourceInputs["authPasswordString"] = state ? state.authPasswordString : undefined;
            resourceInputs["authUsername"] = state ? state.authUsername : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["relativeLoginUri"] = state ? state.relativeLoginUri : undefined;
            resourceInputs["relativeLogoffUri"] = state ? state.relativeLogoffUri : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VisibilityReportingTemplateNotificationTemplateNameAuthenticationArgs | undefined;
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["apiKeyString"] = args ? args.apiKeyString : undefined;
            resourceInputs["authPassword"] = args ? args.authPassword : undefined;
            resourceInputs["authPasswordString"] = args ? args.authPasswordString : undefined;
            resourceInputs["authUsername"] = args ? args.authUsername : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["relativeLoginUri"] = args ? args.relativeLoginUri : undefined;
            resourceInputs["relativeLogoffUri"] = args ? args.relativeLogoffUri : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityReportingTemplateNotificationTemplateNameAuthentication.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityReportingTemplateNotificationTemplateNameAuthentication resources.
 */
export interface VisibilityReportingTemplateNotificationTemplateNameAuthenticationState {
    /**
     * Configure api-key as a mode of authentication
     */
    apiKey?: pulumi.Input<number>;
    /**
     * Configure api-key as a mode of authentication
     */
    apiKeyString?: pulumi.Input<string>;
    /**
     * Configure the authentication user password (Authentication password)
     */
    authPassword?: pulumi.Input<number>;
    /**
     * Configure the authentication user password (Authentication password)
     */
    authPasswordString?: pulumi.Input<string>;
    /**
     * Configure the authentication user name
     */
    authUsername?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Configure the authentication login uri
     */
    relativeLoginUri?: pulumi.Input<string>;
    /**
     * Configure the authentication logoff uri
     */
    relativeLogoffUri?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VisibilityReportingTemplateNotificationTemplateNameAuthentication resource.
 */
export interface VisibilityReportingTemplateNotificationTemplateNameAuthenticationArgs {
    /**
     * Configure api-key as a mode of authentication
     */
    apiKey?: pulumi.Input<number>;
    /**
     * Configure api-key as a mode of authentication
     */
    apiKeyString?: pulumi.Input<string>;
    /**
     * Configure the authentication user password (Authentication password)
     */
    authPassword?: pulumi.Input<number>;
    /**
     * Configure the authentication user password (Authentication password)
     */
    authPasswordString?: pulumi.Input<string>;
    /**
     * Configure the authentication user name
     */
    authUsername?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Configure the authentication login uri
     */
    relativeLoginUri?: pulumi.Input<string>;
    /**
     * Configure the authentication logoff uri
     */
    relativeLogoffUri?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
