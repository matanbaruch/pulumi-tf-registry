// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OverlayTunnelVtepHost extends pulumi.CustomResource {
    /**
     * Get an existing OverlayTunnelVtepHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OverlayTunnelVtepHostState, opts?: pulumi.CustomResourceOptions): OverlayTunnelVtepHost {
        return new OverlayTunnelVtepHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/overlayTunnelVtepHost:OverlayTunnelVtepHost';

    /**
     * Returns true if the given object is an instance of OverlayTunnelVtepHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OverlayTunnelVtepHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OverlayTunnelVtepHost.__pulumiType;
    }

    /**
     * Id1
     */
    public readonly id1!: pulumi.Output<string>;
    /**
     * IPv4 address of the overlay host
     */
    public readonly ipAddr!: pulumi.Output<string>;
    /**
     * MAC Address of the overlay host
     */
    public readonly overlayMacAddr!: pulumi.Output<string>;
    /**
     * Configure the VTEP IP address (IPv4 address of the VTEP for the remote host)
     */
    public readonly remoteVtep!: pulumi.Output<string>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Configure the segment id ( VNI of the remote host)
     */
    public readonly vni!: pulumi.Output<number>;

    /**
     * Create a OverlayTunnelVtepHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OverlayTunnelVtepHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OverlayTunnelVtepHostArgs | OverlayTunnelVtepHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OverlayTunnelVtepHostState | undefined;
            resourceInputs["id1"] = state ? state.id1 : undefined;
            resourceInputs["ipAddr"] = state ? state.ipAddr : undefined;
            resourceInputs["overlayMacAddr"] = state ? state.overlayMacAddr : undefined;
            resourceInputs["remoteVtep"] = state ? state.remoteVtep : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vni"] = state ? state.vni : undefined;
        } else {
            const args = argsOrState as OverlayTunnelVtepHostArgs | undefined;
            if ((!args || args.id1 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'id1'");
            }
            if ((!args || args.ipAddr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddr'");
            }
            if ((!args || args.overlayMacAddr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'overlayMacAddr'");
            }
            if ((!args || args.remoteVtep === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteVtep'");
            }
            if ((!args || args.vni === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vni'");
            }
            resourceInputs["id1"] = args ? args.id1 : undefined;
            resourceInputs["ipAddr"] = args ? args.ipAddr : undefined;
            resourceInputs["overlayMacAddr"] = args ? args.overlayMacAddr : undefined;
            resourceInputs["remoteVtep"] = args ? args.remoteVtep : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vni"] = args ? args.vni : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OverlayTunnelVtepHost.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OverlayTunnelVtepHost resources.
 */
export interface OverlayTunnelVtepHostState {
    /**
     * Id1
     */
    id1?: pulumi.Input<string>;
    /**
     * IPv4 address of the overlay host
     */
    ipAddr?: pulumi.Input<string>;
    /**
     * MAC Address of the overlay host
     */
    overlayMacAddr?: pulumi.Input<string>;
    /**
     * Configure the VTEP IP address (IPv4 address of the VTEP for the remote host)
     */
    remoteVtep?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure the segment id ( VNI of the remote host)
     */
    vni?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OverlayTunnelVtepHost resource.
 */
export interface OverlayTunnelVtepHostArgs {
    /**
     * Id1
     */
    id1: pulumi.Input<string>;
    /**
     * IPv4 address of the overlay host
     */
    ipAddr: pulumi.Input<string>;
    /**
     * MAC Address of the overlay host
     */
    overlayMacAddr: pulumi.Input<string>;
    /**
     * Configure the VTEP IP address (IPv4 address of the VTEP for the remote host)
     */
    remoteVtep: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Configure the segment id ( VNI of the remote host)
     */
    vni: pulumi.Input<number>;
}
