// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LoggingHostIpv4addr extends pulumi.CustomResource {
    /**
     * Get an existing LoggingHostIpv4addr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoggingHostIpv4addrState, opts?: pulumi.CustomResourceOptions): LoggingHostIpv4addr {
        return new LoggingHostIpv4addr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/loggingHostIpv4addr:LoggingHostIpv4addr';

    /**
     * Returns true if the given object is an instance of LoggingHostIpv4addr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoggingHostIpv4addr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoggingHostIpv4addr.__pulumiType;
    }

    /**
     * Set syslog host ip address
     */
    public readonly hostIpv4!: pulumi.Output<string>;
    /**
     * Enable remote logging over TLS session
     */
    public readonly overTls!: pulumi.Output<number | undefined>;
    /**
     * Set remote syslog port number
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Use TCP as transport protocol
     */
    public readonly tcp!: pulumi.Output<number | undefined>;
    /**
     * Use management port for connections
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a LoggingHostIpv4addr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoggingHostIpv4addrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoggingHostIpv4addrArgs | LoggingHostIpv4addrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoggingHostIpv4addrState | undefined;
            resourceInputs["hostIpv4"] = state ? state.hostIpv4 : undefined;
            resourceInputs["overTls"] = state ? state.overTls : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as LoggingHostIpv4addrArgs | undefined;
            if ((!args || args.hostIpv4 === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostIpv4'");
            }
            resourceInputs["hostIpv4"] = args ? args.hostIpv4 : undefined;
            resourceInputs["overTls"] = args ? args.overTls : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoggingHostIpv4addr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoggingHostIpv4addr resources.
 */
export interface LoggingHostIpv4addrState {
    /**
     * Set syslog host ip address
     */
    hostIpv4?: pulumi.Input<string>;
    /**
     * Enable remote logging over TLS session
     */
    overTls?: pulumi.Input<number>;
    /**
     * Set remote syslog port number
     */
    port?: pulumi.Input<number>;
    /**
     * Use TCP as transport protocol
     */
    tcp?: pulumi.Input<number>;
    /**
     * Use management port for connections
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoggingHostIpv4addr resource.
 */
export interface LoggingHostIpv4addrArgs {
    /**
     * Set syslog host ip address
     */
    hostIpv4: pulumi.Input<string>;
    /**
     * Enable remote logging over TLS session
     */
    overTls?: pulumi.Input<number>;
    /**
     * Set remote syslog port number
     */
    port?: pulumi.Input<number>;
    /**
     * Use TCP as transport protocol
     */
    tcp?: pulumi.Input<number>;
    /**
     * Use management port for connections
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
