// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VrrpAVrid extends pulumi.CustomResource {
    /**
     * Get an existing VrrpAVrid resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrrpAVridState, opts?: pulumi.CustomResourceOptions): VrrpAVrid {
        return new VrrpAVrid(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/vrrpAVrid:VrrpAVrid';

    /**
     * Returns true if the given object is an instance of VrrpAVrid.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VrrpAVrid {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VrrpAVrid.__pulumiType;
    }

    public readonly bladeParameters!: pulumi.Output<outputs.VrrpAVridBladeParameters | undefined>;
    public readonly floatingIp!: pulumi.Output<outputs.VrrpAVridFloatingIp | undefined>;
    public readonly follow!: pulumi.Output<outputs.VrrpAVridFollow | undefined>;
    public readonly pairFollow!: pulumi.Output<outputs.VrrpAVridPairFollow | undefined>;
    public readonly preemptMode!: pulumi.Output<outputs.VrrpAVridPreemptMode | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.VrrpAVridSamplingEnable[] | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Specify ha VRRP-A vrid
     */
    public readonly vridVal!: pulumi.Output<number>;

    /**
     * Create a VrrpAVrid resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VrrpAVridArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrrpAVridArgs | VrrpAVridState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrrpAVridState | undefined;
            resourceInputs["bladeParameters"] = state ? state.bladeParameters : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["follow"] = state ? state.follow : undefined;
            resourceInputs["pairFollow"] = state ? state.pairFollow : undefined;
            resourceInputs["preemptMode"] = state ? state.preemptMode : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vridVal"] = state ? state.vridVal : undefined;
        } else {
            const args = argsOrState as VrrpAVridArgs | undefined;
            if ((!args || args.vridVal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vridVal'");
            }
            resourceInputs["bladeParameters"] = args ? args.bladeParameters : undefined;
            resourceInputs["floatingIp"] = args ? args.floatingIp : undefined;
            resourceInputs["follow"] = args ? args.follow : undefined;
            resourceInputs["pairFollow"] = args ? args.pairFollow : undefined;
            resourceInputs["preemptMode"] = args ? args.preemptMode : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vridVal"] = args ? args.vridVal : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VrrpAVrid.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VrrpAVrid resources.
 */
export interface VrrpAVridState {
    bladeParameters?: pulumi.Input<inputs.VrrpAVridBladeParameters>;
    floatingIp?: pulumi.Input<inputs.VrrpAVridFloatingIp>;
    follow?: pulumi.Input<inputs.VrrpAVridFollow>;
    pairFollow?: pulumi.Input<inputs.VrrpAVridPairFollow>;
    preemptMode?: pulumi.Input<inputs.VrrpAVridPreemptMode>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VrrpAVridSamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify ha VRRP-A vrid
     */
    vridVal?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VrrpAVrid resource.
 */
export interface VrrpAVridArgs {
    bladeParameters?: pulumi.Input<inputs.VrrpAVridBladeParameters>;
    floatingIp?: pulumi.Input<inputs.VrrpAVridFloatingIp>;
    follow?: pulumi.Input<inputs.VrrpAVridFollow>;
    pairFollow?: pulumi.Input<inputs.VrrpAVridPairFollow>;
    preemptMode?: pulumi.Input<inputs.VrrpAVridPreemptMode>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VrrpAVridSamplingEnable>[]>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Specify ha VRRP-A vrid
     */
    vridVal: pulumi.Input<number>;
}
