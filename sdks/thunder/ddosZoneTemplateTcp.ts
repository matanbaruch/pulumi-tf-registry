// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosZoneTemplateTcp extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneTemplateTcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneTemplateTcpState, opts?: pulumi.CustomResourceOptions): DdosZoneTemplateTcp {
        return new DdosZoneTemplateTcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneTemplateTcp:DdosZoneTemplateTcp';

    /**
     * Returns true if the given object is an instance of DdosZoneTemplateTcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneTemplateTcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneTemplateTcp.__pulumiType;
    }

    public readonly ackAuthentication!: pulumi.Output<outputs.DdosZoneTemplateTcpAckAuthentication | undefined>;
    /**
     * Reset client TCP SYN+ACK for authentication (DST support only)
     */
    public readonly ackAuthenticationSynackReset!: pulumi.Output<number | undefined>;
    /**
     * Take action if ack-auth RTO-authentication fail over retry time(default:5)
     */
    public readonly actionOnAckRtoRetryCount!: pulumi.Output<number | undefined>;
    /**
     * Take action if syn-auth RTO-authentication fail over retry time(default:5)
     */
    public readonly actionOnSynRtoRetryCount!: pulumi.Output<number | undefined>;
    /**
     * Session age in minutes
     */
    public readonly age!: pulumi.Output<number | undefined>;
    /**
     * Treat TCP SYN+PSH as a TCP SYN (DST tcp ports support only)
     */
    public readonly allowSynOtherflags!: pulumi.Output<number | undefined>;
    /**
     * Allow create sessions on SYNACK without syn-auth and ack-auth (ASYM Mode only)
     */
    public readonly allowSynackSkipAuthentications!: pulumi.Output<number | undefined>;
    /**
     * Allow TCP Fast Open
     */
    public readonly allowTcpTfo!: pulumi.Output<number | undefined>;
    /**
     * Enable concurrent port access for non-matching ports (DST support only)
     */
    public readonly concurrent!: pulumi.Output<number | undefined>;
    /**
     * Only count SYN-initiated connections towards connection-rate tracking
     */
    public readonly connRateLimitOnSynOnly!: pulumi.Output<number | undefined>;
    /**
     * Enable connection establishment on SYN only
     */
    public readonly createConnOnSynOnly!: pulumi.Output<number | undefined>;
    public readonly dst!: pulumi.Output<outputs.DdosZoneTemplateTcpDst | undefined>;
    public readonly filterLists!: pulumi.Output<outputs.DdosZoneTemplateTcpFilterList[] | undefined>;
    /**
     * 'default': Stop matching on drop/blacklist action; 'stop-on-first-match': Stop matching on first match;
     */
    public readonly filterMatchType!: pulumi.Output<string | undefined>;
    public readonly knownRespSrcPortCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpKnownRespSrcPortCfg | undefined>;
    public readonly maxRexmitSynPerFlowCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpMaxRexmitSynPerFlowCfg | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly outOfSeqCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpOutOfSeqCfg | undefined>;
    public readonly perConnOutOfSeqRateCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpPerConnOutOfSeqRateCfg | undefined>;
    public readonly perConnPktRateCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpPerConnPktRateCfg | undefined>;
    /**
     * '100ms': 100ms; '1sec': 1sec; '10sec': 10sec;
     */
    public readonly perConnRateInterval!: pulumi.Output<string | undefined>;
    public readonly perConnRetransmitRateCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpPerConnRetransmitRateCfg | undefined>;
    public readonly perConnZeroWinRateCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpPerConnZeroWinRateCfg | undefined>;
    public readonly progressionTracking!: pulumi.Output<outputs.DdosZoneTemplateTcpProgressionTracking | undefined>;
    public readonly retransmitCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpRetransmitCfg | undefined>;
    public readonly src!: pulumi.Output<outputs.DdosZoneTemplateTcpSrc | undefined>;
    public readonly synAuthentication!: pulumi.Output<outputs.DdosZoneTemplateTcpSynAuthentication | undefined>;
    /**
     * Enable SYN Cookie
     */
    public readonly synCookie!: pulumi.Output<number | undefined>;
    /**
     * Config SYNACK rate limit
     */
    public readonly synackRateLimit!: pulumi.Output<number | undefined>;
    /**
     * SYNACK will be counted in Dst Syn-rate limit
     */
    public readonly trackTogetherWithSyn!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly zeroWinCfg!: pulumi.Output<outputs.DdosZoneTemplateTcpZeroWinCfg | undefined>;

    /**
     * Create a DdosZoneTemplateTcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosZoneTemplateTcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneTemplateTcpArgs | DdosZoneTemplateTcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneTemplateTcpState | undefined;
            resourceInputs["ackAuthentication"] = state ? state.ackAuthentication : undefined;
            resourceInputs["ackAuthenticationSynackReset"] = state ? state.ackAuthenticationSynackReset : undefined;
            resourceInputs["actionOnAckRtoRetryCount"] = state ? state.actionOnAckRtoRetryCount : undefined;
            resourceInputs["actionOnSynRtoRetryCount"] = state ? state.actionOnSynRtoRetryCount : undefined;
            resourceInputs["age"] = state ? state.age : undefined;
            resourceInputs["allowSynOtherflags"] = state ? state.allowSynOtherflags : undefined;
            resourceInputs["allowSynackSkipAuthentications"] = state ? state.allowSynackSkipAuthentications : undefined;
            resourceInputs["allowTcpTfo"] = state ? state.allowTcpTfo : undefined;
            resourceInputs["concurrent"] = state ? state.concurrent : undefined;
            resourceInputs["connRateLimitOnSynOnly"] = state ? state.connRateLimitOnSynOnly : undefined;
            resourceInputs["createConnOnSynOnly"] = state ? state.createConnOnSynOnly : undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["filterLists"] = state ? state.filterLists : undefined;
            resourceInputs["filterMatchType"] = state ? state.filterMatchType : undefined;
            resourceInputs["knownRespSrcPortCfg"] = state ? state.knownRespSrcPortCfg : undefined;
            resourceInputs["maxRexmitSynPerFlowCfg"] = state ? state.maxRexmitSynPerFlowCfg : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outOfSeqCfg"] = state ? state.outOfSeqCfg : undefined;
            resourceInputs["perConnOutOfSeqRateCfg"] = state ? state.perConnOutOfSeqRateCfg : undefined;
            resourceInputs["perConnPktRateCfg"] = state ? state.perConnPktRateCfg : undefined;
            resourceInputs["perConnRateInterval"] = state ? state.perConnRateInterval : undefined;
            resourceInputs["perConnRetransmitRateCfg"] = state ? state.perConnRetransmitRateCfg : undefined;
            resourceInputs["perConnZeroWinRateCfg"] = state ? state.perConnZeroWinRateCfg : undefined;
            resourceInputs["progressionTracking"] = state ? state.progressionTracking : undefined;
            resourceInputs["retransmitCfg"] = state ? state.retransmitCfg : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["synAuthentication"] = state ? state.synAuthentication : undefined;
            resourceInputs["synCookie"] = state ? state.synCookie : undefined;
            resourceInputs["synackRateLimit"] = state ? state.synackRateLimit : undefined;
            resourceInputs["trackTogetherWithSyn"] = state ? state.trackTogetherWithSyn : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zeroWinCfg"] = state ? state.zeroWinCfg : undefined;
        } else {
            const args = argsOrState as DdosZoneTemplateTcpArgs | undefined;
            resourceInputs["ackAuthentication"] = args ? args.ackAuthentication : undefined;
            resourceInputs["ackAuthenticationSynackReset"] = args ? args.ackAuthenticationSynackReset : undefined;
            resourceInputs["actionOnAckRtoRetryCount"] = args ? args.actionOnAckRtoRetryCount : undefined;
            resourceInputs["actionOnSynRtoRetryCount"] = args ? args.actionOnSynRtoRetryCount : undefined;
            resourceInputs["age"] = args ? args.age : undefined;
            resourceInputs["allowSynOtherflags"] = args ? args.allowSynOtherflags : undefined;
            resourceInputs["allowSynackSkipAuthentications"] = args ? args.allowSynackSkipAuthentications : undefined;
            resourceInputs["allowTcpTfo"] = args ? args.allowTcpTfo : undefined;
            resourceInputs["concurrent"] = args ? args.concurrent : undefined;
            resourceInputs["connRateLimitOnSynOnly"] = args ? args.connRateLimitOnSynOnly : undefined;
            resourceInputs["createConnOnSynOnly"] = args ? args.createConnOnSynOnly : undefined;
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["filterLists"] = args ? args.filterLists : undefined;
            resourceInputs["filterMatchType"] = args ? args.filterMatchType : undefined;
            resourceInputs["knownRespSrcPortCfg"] = args ? args.knownRespSrcPortCfg : undefined;
            resourceInputs["maxRexmitSynPerFlowCfg"] = args ? args.maxRexmitSynPerFlowCfg : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outOfSeqCfg"] = args ? args.outOfSeqCfg : undefined;
            resourceInputs["perConnOutOfSeqRateCfg"] = args ? args.perConnOutOfSeqRateCfg : undefined;
            resourceInputs["perConnPktRateCfg"] = args ? args.perConnPktRateCfg : undefined;
            resourceInputs["perConnRateInterval"] = args ? args.perConnRateInterval : undefined;
            resourceInputs["perConnRetransmitRateCfg"] = args ? args.perConnRetransmitRateCfg : undefined;
            resourceInputs["perConnZeroWinRateCfg"] = args ? args.perConnZeroWinRateCfg : undefined;
            resourceInputs["progressionTracking"] = args ? args.progressionTracking : undefined;
            resourceInputs["retransmitCfg"] = args ? args.retransmitCfg : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["synAuthentication"] = args ? args.synAuthentication : undefined;
            resourceInputs["synCookie"] = args ? args.synCookie : undefined;
            resourceInputs["synackRateLimit"] = args ? args.synackRateLimit : undefined;
            resourceInputs["trackTogetherWithSyn"] = args ? args.trackTogetherWithSyn : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zeroWinCfg"] = args ? args.zeroWinCfg : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneTemplateTcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneTemplateTcp resources.
 */
export interface DdosZoneTemplateTcpState {
    ackAuthentication?: pulumi.Input<inputs.DdosZoneTemplateTcpAckAuthentication>;
    /**
     * Reset client TCP SYN+ACK for authentication (DST support only)
     */
    ackAuthenticationSynackReset?: pulumi.Input<number>;
    /**
     * Take action if ack-auth RTO-authentication fail over retry time(default:5)
     */
    actionOnAckRtoRetryCount?: pulumi.Input<number>;
    /**
     * Take action if syn-auth RTO-authentication fail over retry time(default:5)
     */
    actionOnSynRtoRetryCount?: pulumi.Input<number>;
    /**
     * Session age in minutes
     */
    age?: pulumi.Input<number>;
    /**
     * Treat TCP SYN+PSH as a TCP SYN (DST tcp ports support only)
     */
    allowSynOtherflags?: pulumi.Input<number>;
    /**
     * Allow create sessions on SYNACK without syn-auth and ack-auth (ASYM Mode only)
     */
    allowSynackSkipAuthentications?: pulumi.Input<number>;
    /**
     * Allow TCP Fast Open
     */
    allowTcpTfo?: pulumi.Input<number>;
    /**
     * Enable concurrent port access for non-matching ports (DST support only)
     */
    concurrent?: pulumi.Input<number>;
    /**
     * Only count SYN-initiated connections towards connection-rate tracking
     */
    connRateLimitOnSynOnly?: pulumi.Input<number>;
    /**
     * Enable connection establishment on SYN only
     */
    createConnOnSynOnly?: pulumi.Input<number>;
    dst?: pulumi.Input<inputs.DdosZoneTemplateTcpDst>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.DdosZoneTemplateTcpFilterList>[]>;
    /**
     * 'default': Stop matching on drop/blacklist action; 'stop-on-first-match': Stop matching on first match;
     */
    filterMatchType?: pulumi.Input<string>;
    knownRespSrcPortCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpKnownRespSrcPortCfg>;
    maxRexmitSynPerFlowCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpMaxRexmitSynPerFlowCfg>;
    name?: pulumi.Input<string>;
    outOfSeqCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpOutOfSeqCfg>;
    perConnOutOfSeqRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnOutOfSeqRateCfg>;
    perConnPktRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnPktRateCfg>;
    /**
     * '100ms': 100ms; '1sec': 1sec; '10sec': 10sec;
     */
    perConnRateInterval?: pulumi.Input<string>;
    perConnRetransmitRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnRetransmitRateCfg>;
    perConnZeroWinRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnZeroWinRateCfg>;
    progressionTracking?: pulumi.Input<inputs.DdosZoneTemplateTcpProgressionTracking>;
    retransmitCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpRetransmitCfg>;
    src?: pulumi.Input<inputs.DdosZoneTemplateTcpSrc>;
    synAuthentication?: pulumi.Input<inputs.DdosZoneTemplateTcpSynAuthentication>;
    /**
     * Enable SYN Cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Config SYNACK rate limit
     */
    synackRateLimit?: pulumi.Input<number>;
    /**
     * SYNACK will be counted in Dst Syn-rate limit
     */
    trackTogetherWithSyn?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    zeroWinCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpZeroWinCfg>;
}

/**
 * The set of arguments for constructing a DdosZoneTemplateTcp resource.
 */
export interface DdosZoneTemplateTcpArgs {
    ackAuthentication?: pulumi.Input<inputs.DdosZoneTemplateTcpAckAuthentication>;
    /**
     * Reset client TCP SYN+ACK for authentication (DST support only)
     */
    ackAuthenticationSynackReset?: pulumi.Input<number>;
    /**
     * Take action if ack-auth RTO-authentication fail over retry time(default:5)
     */
    actionOnAckRtoRetryCount?: pulumi.Input<number>;
    /**
     * Take action if syn-auth RTO-authentication fail over retry time(default:5)
     */
    actionOnSynRtoRetryCount?: pulumi.Input<number>;
    /**
     * Session age in minutes
     */
    age?: pulumi.Input<number>;
    /**
     * Treat TCP SYN+PSH as a TCP SYN (DST tcp ports support only)
     */
    allowSynOtherflags?: pulumi.Input<number>;
    /**
     * Allow create sessions on SYNACK without syn-auth and ack-auth (ASYM Mode only)
     */
    allowSynackSkipAuthentications?: pulumi.Input<number>;
    /**
     * Allow TCP Fast Open
     */
    allowTcpTfo?: pulumi.Input<number>;
    /**
     * Enable concurrent port access for non-matching ports (DST support only)
     */
    concurrent?: pulumi.Input<number>;
    /**
     * Only count SYN-initiated connections towards connection-rate tracking
     */
    connRateLimitOnSynOnly?: pulumi.Input<number>;
    /**
     * Enable connection establishment on SYN only
     */
    createConnOnSynOnly?: pulumi.Input<number>;
    dst?: pulumi.Input<inputs.DdosZoneTemplateTcpDst>;
    filterLists?: pulumi.Input<pulumi.Input<inputs.DdosZoneTemplateTcpFilterList>[]>;
    /**
     * 'default': Stop matching on drop/blacklist action; 'stop-on-first-match': Stop matching on first match;
     */
    filterMatchType?: pulumi.Input<string>;
    knownRespSrcPortCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpKnownRespSrcPortCfg>;
    maxRexmitSynPerFlowCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpMaxRexmitSynPerFlowCfg>;
    name?: pulumi.Input<string>;
    outOfSeqCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpOutOfSeqCfg>;
    perConnOutOfSeqRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnOutOfSeqRateCfg>;
    perConnPktRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnPktRateCfg>;
    /**
     * '100ms': 100ms; '1sec': 1sec; '10sec': 10sec;
     */
    perConnRateInterval?: pulumi.Input<string>;
    perConnRetransmitRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnRetransmitRateCfg>;
    perConnZeroWinRateCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpPerConnZeroWinRateCfg>;
    progressionTracking?: pulumi.Input<inputs.DdosZoneTemplateTcpProgressionTracking>;
    retransmitCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpRetransmitCfg>;
    src?: pulumi.Input<inputs.DdosZoneTemplateTcpSrc>;
    synAuthentication?: pulumi.Input<inputs.DdosZoneTemplateTcpSynAuthentication>;
    /**
     * Enable SYN Cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Config SYNACK rate limit
     */
    synackRateLimit?: pulumi.Input<number>;
    /**
     * SYNACK will be counted in Dst Syn-rate limit
     */
    trackTogetherWithSyn?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    zeroWinCfg?: pulumi.Input<inputs.DdosZoneTemplateTcpZeroWinCfg>;
}
