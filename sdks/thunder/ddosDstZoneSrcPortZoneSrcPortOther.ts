// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstZoneSrcPortZoneSrcPortOther extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstZoneSrcPortZoneSrcPortOther resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstZoneSrcPortZoneSrcPortOtherState, opts?: pulumi.CustomResourceOptions): DdosDstZoneSrcPortZoneSrcPortOther {
        return new DdosDstZoneSrcPortZoneSrcPortOther(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstZoneSrcPortZoneSrcPortOther:DdosDstZoneSrcPortZoneSrcPortOther';

    /**
     * Returns true if the given object is an instance of DdosDstZoneSrcPortZoneSrcPortOther.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstZoneSrcPortZoneSrcPortOther {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstZoneSrcPortZoneSrcPortOther.__pulumiType;
    }

    /**
     * Configure default-action-list
     */
    public readonly defaultActionList!: pulumi.Output<string | undefined>;
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    public readonly deny!: pulumi.Output<number | undefined>;
    public readonly glidCfg!: pulumi.Output<outputs.DdosDstZoneSrcPortZoneSrcPortOtherGlidCfg | undefined>;
    public readonly levelLists!: pulumi.Output<outputs.DdosDstZoneSrcPortZoneSrcPortOtherLevelList[] | undefined>;
    public readonly portInd!: pulumi.Output<outputs.DdosDstZoneSrcPortZoneSrcPortOtherPortInd | undefined>;
    /**
     * 'other': other;
     */
    public readonly portOther!: pulumi.Output<string>;
    /**
     * 'udp': UDP port; 'tcp': TCP Port;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    public readonly setCounterBaseVal!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * ZoneName
     */
    public readonly zoneName!: pulumi.Output<string>;
    public readonly zoneTemplate!: pulumi.Output<outputs.DdosDstZoneSrcPortZoneSrcPortOtherZoneTemplate | undefined>;

    /**
     * Create a DdosDstZoneSrcPortZoneSrcPortOther resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstZoneSrcPortZoneSrcPortOtherArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstZoneSrcPortZoneSrcPortOtherArgs | DdosDstZoneSrcPortZoneSrcPortOtherState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstZoneSrcPortZoneSrcPortOtherState | undefined;
            resourceInputs["defaultActionList"] = state ? state.defaultActionList : undefined;
            resourceInputs["deny"] = state ? state.deny : undefined;
            resourceInputs["glidCfg"] = state ? state.glidCfg : undefined;
            resourceInputs["levelLists"] = state ? state.levelLists : undefined;
            resourceInputs["portInd"] = state ? state.portInd : undefined;
            resourceInputs["portOther"] = state ? state.portOther : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["setCounterBaseVal"] = state ? state.setCounterBaseVal : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
            resourceInputs["zoneTemplate"] = state ? state.zoneTemplate : undefined;
        } else {
            const args = argsOrState as DdosDstZoneSrcPortZoneSrcPortOtherArgs | undefined;
            if ((!args || args.portOther === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portOther'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["defaultActionList"] = args ? args.defaultActionList : undefined;
            resourceInputs["deny"] = args ? args.deny : undefined;
            resourceInputs["glidCfg"] = args ? args.glidCfg : undefined;
            resourceInputs["levelLists"] = args ? args.levelLists : undefined;
            resourceInputs["portInd"] = args ? args.portInd : undefined;
            resourceInputs["portOther"] = args ? args.portOther : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["setCounterBaseVal"] = args ? args.setCounterBaseVal : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["zoneTemplate"] = args ? args.zoneTemplate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstZoneSrcPortZoneSrcPortOther.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstZoneSrcPortZoneSrcPortOther resources.
 */
export interface DdosDstZoneSrcPortZoneSrcPortOtherState {
    /**
     * Configure default-action-list
     */
    defaultActionList?: pulumi.Input<string>;
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    deny?: pulumi.Input<number>;
    glidCfg?: pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherGlidCfg>;
    levelLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherLevelList>[]>;
    portInd?: pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherPortInd>;
    /**
     * 'other': other;
     */
    portOther?: pulumi.Input<string>;
    /**
     * 'udp': UDP port; 'tcp': TCP Port;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName?: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherZoneTemplate>;
}

/**
 * The set of arguments for constructing a DdosDstZoneSrcPortZoneSrcPortOther resource.
 */
export interface DdosDstZoneSrcPortZoneSrcPortOtherArgs {
    /**
     * Configure default-action-list
     */
    defaultActionList?: pulumi.Input<string>;
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    deny?: pulumi.Input<number>;
    glidCfg?: pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherGlidCfg>;
    levelLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherLevelList>[]>;
    portInd?: pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherPortInd>;
    /**
     * 'other': other;
     */
    portOther: pulumi.Input<string>;
    /**
     * 'udp': UDP port; 'tcp': TCP Port;
     */
    protocol: pulumi.Input<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName: pulumi.Input<string>;
    zoneTemplate?: pulumi.Input<inputs.DdosDstZoneSrcPortZoneSrcPortOtherZoneTemplate>;
}
