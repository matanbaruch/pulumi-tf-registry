// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HealthMonitorMethodImap extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodImap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodImapState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodImap {
        return new HealthMonitorMethodImap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodImap:HealthMonitorMethodImap';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodImap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodImap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodImap.__pulumiType;
    }

    /**
     * IMAP type
     */
    public readonly imap!: pulumi.Output<number | undefined>;
    /**
     * Challenge-response authentication mechanism
     */
    public readonly imapCramMd5!: pulumi.Output<number | undefined>;
    /**
     * Simple login
     */
    public readonly imapLogin!: pulumi.Output<number | undefined>;
    /**
     * Specify the user password
     */
    public readonly imapPassword!: pulumi.Output<number | undefined>;
    /**
     * Configure password, '' means empty password
     */
    public readonly imapPasswordString!: pulumi.Output<string | undefined>;
    /**
     * Plain text
     */
    public readonly imapPlain!: pulumi.Output<number | undefined>;
    /**
     * Specify the IMAP port, default is 143 (Port Number (default 143))
     */
    public readonly imapPort!: pulumi.Output<number | undefined>;
    /**
     * Specify the username
     */
    public readonly imapUsername!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify the Authentication method
     */
    public readonly pwdAuth!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitorMethodImap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodImapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodImapArgs | HealthMonitorMethodImapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodImapState | undefined;
            resourceInputs["imap"] = state ? state.imap : undefined;
            resourceInputs["imapCramMd5"] = state ? state.imapCramMd5 : undefined;
            resourceInputs["imapLogin"] = state ? state.imapLogin : undefined;
            resourceInputs["imapPassword"] = state ? state.imapPassword : undefined;
            resourceInputs["imapPasswordString"] = state ? state.imapPasswordString : undefined;
            resourceInputs["imapPlain"] = state ? state.imapPlain : undefined;
            resourceInputs["imapPort"] = state ? state.imapPort : undefined;
            resourceInputs["imapUsername"] = state ? state.imapUsername : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pwdAuth"] = state ? state.pwdAuth : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodImapArgs | undefined;
            resourceInputs["imap"] = args ? args.imap : undefined;
            resourceInputs["imapCramMd5"] = args ? args.imapCramMd5 : undefined;
            resourceInputs["imapLogin"] = args ? args.imapLogin : undefined;
            resourceInputs["imapPassword"] = args ? args.imapPassword : undefined;
            resourceInputs["imapPasswordString"] = args ? args.imapPasswordString : undefined;
            resourceInputs["imapPlain"] = args ? args.imapPlain : undefined;
            resourceInputs["imapPort"] = args ? args.imapPort : undefined;
            resourceInputs["imapUsername"] = args ? args.imapUsername : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pwdAuth"] = args ? args.pwdAuth : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodImap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodImap resources.
 */
export interface HealthMonitorMethodImapState {
    /**
     * IMAP type
     */
    imap?: pulumi.Input<number>;
    /**
     * Challenge-response authentication mechanism
     */
    imapCramMd5?: pulumi.Input<number>;
    /**
     * Simple login
     */
    imapLogin?: pulumi.Input<number>;
    /**
     * Specify the user password
     */
    imapPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    imapPasswordString?: pulumi.Input<string>;
    /**
     * Plain text
     */
    imapPlain?: pulumi.Input<number>;
    /**
     * Specify the IMAP port, default is 143 (Port Number (default 143))
     */
    imapPort?: pulumi.Input<number>;
    /**
     * Specify the username
     */
    imapUsername?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify the Authentication method
     */
    pwdAuth?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodImap resource.
 */
export interface HealthMonitorMethodImapArgs {
    /**
     * IMAP type
     */
    imap?: pulumi.Input<number>;
    /**
     * Challenge-response authentication mechanism
     */
    imapCramMd5?: pulumi.Input<number>;
    /**
     * Simple login
     */
    imapLogin?: pulumi.Input<number>;
    /**
     * Specify the user password
     */
    imapPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    imapPasswordString?: pulumi.Input<string>;
    /**
     * Plain text
     */
    imapPlain?: pulumi.Input<number>;
    /**
     * Specify the IMAP port, default is 143 (Port Number (default 143))
     */
    imapPort?: pulumi.Input<number>;
    /**
     * Specify the username
     */
    imapUsername?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify the Authentication method
     */
    pwdAuth?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
