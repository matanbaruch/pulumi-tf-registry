// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDdosDstEntryPortOper(args: GetDdosDstEntryPortOperArgs, opts?: pulumi.InvokeOptions): Promise<GetDdosDstEntryPortOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getDdosDstEntryPortOper:getDdosDstEntryPortOper", {
        "dstEntryName": args.dstEntryName,
        "id": args.id,
        "ipFilteringPolicyOper": args.ipFilteringPolicyOper,
        "oper": args.oper,
        "patternRecognition": args.patternRecognition,
        "patternRecognitionPuDetails": args.patternRecognitionPuDetails,
        "portInd": args.portInd,
        "portNum": args.portNum,
        "progressionTracking": args.progressionTracking,
        "protocol": args.protocol,
        "topkSources": args.topkSources,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDdosDstEntryPortOper.
 */
export interface GetDdosDstEntryPortOperArgs {
    dstEntryName: string;
    id?: string;
    ipFilteringPolicyOper?: inputs.GetDdosDstEntryPortOperIpFilteringPolicyOper;
    oper?: inputs.GetDdosDstEntryPortOperOper;
    patternRecognition?: inputs.GetDdosDstEntryPortOperPatternRecognition;
    patternRecognitionPuDetails?: inputs.GetDdosDstEntryPortOperPatternRecognitionPuDetails;
    portInd?: inputs.GetDdosDstEntryPortOperPortInd;
    portNum: number;
    progressionTracking?: inputs.GetDdosDstEntryPortOperProgressionTracking;
    protocol: string;
    topkSources?: inputs.GetDdosDstEntryPortOperTopkSources;
}

/**
 * A collection of values returned by getDdosDstEntryPortOper.
 */
export interface GetDdosDstEntryPortOperResult {
    readonly dstEntryName: string;
    readonly id: string;
    readonly ipFilteringPolicyOper?: outputs.GetDdosDstEntryPortOperIpFilteringPolicyOper;
    readonly oper?: outputs.GetDdosDstEntryPortOperOper;
    readonly patternRecognition?: outputs.GetDdosDstEntryPortOperPatternRecognition;
    readonly patternRecognitionPuDetails?: outputs.GetDdosDstEntryPortOperPatternRecognitionPuDetails;
    readonly portInd?: outputs.GetDdosDstEntryPortOperPortInd;
    readonly portNum: number;
    readonly progressionTracking?: outputs.GetDdosDstEntryPortOperProgressionTracking;
    readonly protocol: string;
    readonly topkSources?: outputs.GetDdosDstEntryPortOperTopkSources;
}
export function getDdosDstEntryPortOperOutput(args: GetDdosDstEntryPortOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDdosDstEntryPortOperResult> {
    return pulumi.output(args).apply((a: any) => getDdosDstEntryPortOper(a, opts))
}

/**
 * A collection of arguments for invoking getDdosDstEntryPortOper.
 */
export interface GetDdosDstEntryPortOperOutputArgs {
    dstEntryName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.GetDdosDstEntryPortOperIpFilteringPolicyOperArgs>;
    oper?: pulumi.Input<inputs.GetDdosDstEntryPortOperOperArgs>;
    patternRecognition?: pulumi.Input<inputs.GetDdosDstEntryPortOperPatternRecognitionArgs>;
    patternRecognitionPuDetails?: pulumi.Input<inputs.GetDdosDstEntryPortOperPatternRecognitionPuDetailsArgs>;
    portInd?: pulumi.Input<inputs.GetDdosDstEntryPortOperPortIndArgs>;
    portNum: pulumi.Input<number>;
    progressionTracking?: pulumi.Input<inputs.GetDdosDstEntryPortOperProgressionTrackingArgs>;
    protocol: pulumi.Input<string>;
    topkSources?: pulumi.Input<inputs.GetDdosDstEntryPortOperTopkSourcesArgs>;
}
