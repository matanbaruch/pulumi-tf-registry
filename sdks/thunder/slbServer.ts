// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbServer extends pulumi.CustomResource {
    /**
     * Get an existing SlbServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbServerState, opts?: pulumi.CustomResourceOptions): SlbServer {
        return new SlbServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbServer:SlbServer';

    /**
     * Returns true if the given object is an instance of SlbServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbServer.__pulumiType;
    }

    /**
     * 'enable': Enable this Real Server; 'disable': Disable this Real Server; 'disable-with-health-check': disable real
     * server, but health check work;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly alternateServers!: pulumi.Output<outputs.SlbServerAlternateServer[] | undefined>;
    /**
     * Connection Limit
     */
    public readonly connLimit!: pulumi.Output<number | undefined>;
    /**
     * Connection Resume (Connection Resume (min active conn before resume taking new conn))
     */
    public readonly connResume!: pulumi.Output<number | undefined>;
    /**
     * ethernet interface
     */
    public readonly ethernet!: pulumi.Output<number | undefined>;
    /**
     * Enable extended statistics on real server
     */
    public readonly extendedStats!: pulumi.Output<number | undefined>;
    /**
     * External IP address for NAT of GSLB
     */
    public readonly externalIp!: pulumi.Output<string | undefined>;
    /**
     * Server hostname
     */
    public readonly fqdnName!: pulumi.Output<string | undefined>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    public readonly healthCheck!: pulumi.Output<string | undefined>;
    /**
     * Disable configured health check configuration
     */
    public readonly healthCheckDisable!: pulumi.Output<number | undefined>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    public readonly healthCheckShared!: pulumi.Output<string | undefined>;
    /**
     * IP Address
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * IPv6 address Mapping of GSLB
     */
    public readonly ipv6!: pulumi.Output<string | undefined>;
    /**
     * L2 health check path
     */
    public readonly l2HealthCheckPath!: pulumi.Output<string | undefined>;
    /**
     * Server Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Do not log connection over limit event
     */
    public readonly noLogging!: pulumi.Output<number | undefined>;
    public readonly portLists!: pulumi.Output<outputs.SlbServerPortList[] | undefined>;
    /**
     * 'resolve-to-ipv4': Use A Query only to resolve FQDN; 'resolve-to-ipv6': Use AAAA Query only to resolve FQDN;
     * 'resolve-to-ipv4-and-ipv6': Use A as well as AAAA Query to resolve FQDN;
     */
    public readonly resolveAs!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.SlbServerSamplingEnable[] | undefined>;
    /**
     * IPV6 address
     */
    public readonly serverIpv6Addr!: pulumi.Output<string | undefined>;
    /**
     * Reference a health-check from shared partition
     */
    public readonly sharedPartitionHealthCheck!: pulumi.Output<number | undefined>;
    /**
     * Reference a server template from shared partition
     */
    public readonly sharedPartitionServerTemplate!: pulumi.Output<number | undefined>;
    /**
     * Slowly ramp up the connection number after server is up (start from 128, then double every 10 sec till 4096)
     */
    public readonly slowStart!: pulumi.Output<number | undefined>;
    /**
     * This server is a spoofing cache
     */
    public readonly spoofingCache!: pulumi.Output<number | undefined>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server; 'stats-data-disable': Disable statistical data
     * collection for real server;
     */
    public readonly statsDataAction!: pulumi.Output<string | undefined>;
    /**
     * Link-Cost template (Link-Cost template name)
     */
    public readonly templateLinkCost!: pulumi.Output<string | undefined>;
    /**
     * Server template (Server template name)
     */
    public readonly templateServer!: pulumi.Output<string | undefined>;
    /**
     * Server Template Name
     */
    public readonly templateServerShared!: pulumi.Output<string | undefined>;
    /**
     * trunk interface
     */
    public readonly trunk!: pulumi.Output<number | undefined>;
    /**
     * Using aam server. For health check, please configure it in aam server
     */
    public readonly useAamServer!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Weight for this Real Server (Connection Weight)
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a SlbServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbServerArgs | SlbServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbServerState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["alternateServers"] = state ? state.alternateServers : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["connResume"] = state ? state.connResume : undefined;
            resourceInputs["ethernet"] = state ? state.ethernet : undefined;
            resourceInputs["extendedStats"] = state ? state.extendedStats : undefined;
            resourceInputs["externalIp"] = state ? state.externalIp : undefined;
            resourceInputs["fqdnName"] = state ? state.fqdnName : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = state ? state.healthCheckDisable : undefined;
            resourceInputs["healthCheckShared"] = state ? state.healthCheckShared : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["l2HealthCheckPath"] = state ? state.l2HealthCheckPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["noLogging"] = state ? state.noLogging : undefined;
            resourceInputs["portLists"] = state ? state.portLists : undefined;
            resourceInputs["resolveAs"] = state ? state.resolveAs : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["serverIpv6Addr"] = state ? state.serverIpv6Addr : undefined;
            resourceInputs["sharedPartitionHealthCheck"] = state ? state.sharedPartitionHealthCheck : undefined;
            resourceInputs["sharedPartitionServerTemplate"] = state ? state.sharedPartitionServerTemplate : undefined;
            resourceInputs["slowStart"] = state ? state.slowStart : undefined;
            resourceInputs["spoofingCache"] = state ? state.spoofingCache : undefined;
            resourceInputs["statsDataAction"] = state ? state.statsDataAction : undefined;
            resourceInputs["templateLinkCost"] = state ? state.templateLinkCost : undefined;
            resourceInputs["templateServer"] = state ? state.templateServer : undefined;
            resourceInputs["templateServerShared"] = state ? state.templateServerShared : undefined;
            resourceInputs["trunk"] = state ? state.trunk : undefined;
            resourceInputs["useAamServer"] = state ? state.useAamServer : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as SlbServerArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["alternateServers"] = args ? args.alternateServers : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["connResume"] = args ? args.connResume : undefined;
            resourceInputs["ethernet"] = args ? args.ethernet : undefined;
            resourceInputs["extendedStats"] = args ? args.extendedStats : undefined;
            resourceInputs["externalIp"] = args ? args.externalIp : undefined;
            resourceInputs["fqdnName"] = args ? args.fqdnName : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = args ? args.healthCheckDisable : undefined;
            resourceInputs["healthCheckShared"] = args ? args.healthCheckShared : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["l2HealthCheckPath"] = args ? args.l2HealthCheckPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["noLogging"] = args ? args.noLogging : undefined;
            resourceInputs["portLists"] = args ? args.portLists : undefined;
            resourceInputs["resolveAs"] = args ? args.resolveAs : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["serverIpv6Addr"] = args ? args.serverIpv6Addr : undefined;
            resourceInputs["sharedPartitionHealthCheck"] = args ? args.sharedPartitionHealthCheck : undefined;
            resourceInputs["sharedPartitionServerTemplate"] = args ? args.sharedPartitionServerTemplate : undefined;
            resourceInputs["slowStart"] = args ? args.slowStart : undefined;
            resourceInputs["spoofingCache"] = args ? args.spoofingCache : undefined;
            resourceInputs["statsDataAction"] = args ? args.statsDataAction : undefined;
            resourceInputs["templateLinkCost"] = args ? args.templateLinkCost : undefined;
            resourceInputs["templateServer"] = args ? args.templateServer : undefined;
            resourceInputs["templateServerShared"] = args ? args.templateServerShared : undefined;
            resourceInputs["trunk"] = args ? args.trunk : undefined;
            resourceInputs["useAamServer"] = args ? args.useAamServer : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbServer resources.
 */
export interface SlbServerState {
    /**
     * 'enable': Enable this Real Server; 'disable': Disable this Real Server; 'disable-with-health-check': disable real
     * server, but health check work;
     */
    action?: pulumi.Input<string>;
    alternateServers?: pulumi.Input<pulumi.Input<inputs.SlbServerAlternateServer>[]>;
    /**
     * Connection Limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Connection Resume (Connection Resume (min active conn before resume taking new conn))
     */
    connResume?: pulumi.Input<number>;
    /**
     * ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * Enable extended statistics on real server
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * External IP address for NAT of GSLB
     */
    externalIp?: pulumi.Input<string>;
    /**
     * Server hostname
     */
    fqdnName?: pulumi.Input<string>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    healthCheckShared?: pulumi.Input<string>;
    /**
     * IP Address
     */
    host?: pulumi.Input<string>;
    /**
     * IPv6 address Mapping of GSLB
     */
    ipv6?: pulumi.Input<string>;
    /**
     * L2 health check path
     */
    l2HealthCheckPath?: pulumi.Input<string>;
    /**
     * Server Name
     */
    name?: pulumi.Input<string>;
    /**
     * Do not log connection over limit event
     */
    noLogging?: pulumi.Input<number>;
    portLists?: pulumi.Input<pulumi.Input<inputs.SlbServerPortList>[]>;
    /**
     * 'resolve-to-ipv4': Use A Query only to resolve FQDN; 'resolve-to-ipv6': Use AAAA Query only to resolve FQDN;
     * 'resolve-to-ipv4-and-ipv6': Use A as well as AAAA Query to resolve FQDN;
     */
    resolveAs?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbServerSamplingEnable>[]>;
    /**
     * IPV6 address
     */
    serverIpv6Addr?: pulumi.Input<string>;
    /**
     * Reference a health-check from shared partition
     */
    sharedPartitionHealthCheck?: pulumi.Input<number>;
    /**
     * Reference a server template from shared partition
     */
    sharedPartitionServerTemplate?: pulumi.Input<number>;
    /**
     * Slowly ramp up the connection number after server is up (start from 128, then double every 10 sec till 4096)
     */
    slowStart?: pulumi.Input<number>;
    /**
     * This server is a spoofing cache
     */
    spoofingCache?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server; 'stats-data-disable': Disable statistical data
     * collection for real server;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Link-Cost template (Link-Cost template name)
     */
    templateLinkCost?: pulumi.Input<string>;
    /**
     * Server template (Server template name)
     */
    templateServer?: pulumi.Input<string>;
    /**
     * Server Template Name
     */
    templateServerShared?: pulumi.Input<string>;
    /**
     * trunk interface
     */
    trunk?: pulumi.Input<number>;
    /**
     * Using aam server. For health check, please configure it in aam server
     */
    useAamServer?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Weight for this Real Server (Connection Weight)
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SlbServer resource.
 */
export interface SlbServerArgs {
    /**
     * 'enable': Enable this Real Server; 'disable': Disable this Real Server; 'disable-with-health-check': disable real
     * server, but health check work;
     */
    action?: pulumi.Input<string>;
    alternateServers?: pulumi.Input<pulumi.Input<inputs.SlbServerAlternateServer>[]>;
    /**
     * Connection Limit
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Connection Resume (Connection Resume (min active conn before resume taking new conn))
     */
    connResume?: pulumi.Input<number>;
    /**
     * ethernet interface
     */
    ethernet?: pulumi.Input<number>;
    /**
     * Enable extended statistics on real server
     */
    extendedStats?: pulumi.Input<number>;
    /**
     * External IP address for NAT of GSLB
     */
    externalIp?: pulumi.Input<string>;
    /**
     * Server hostname
     */
    fqdnName?: pulumi.Input<string>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    healthCheck?: pulumi.Input<string>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Health Check Monitor (Health monitor name)
     */
    healthCheckShared?: pulumi.Input<string>;
    /**
     * IP Address
     */
    host?: pulumi.Input<string>;
    /**
     * IPv6 address Mapping of GSLB
     */
    ipv6?: pulumi.Input<string>;
    /**
     * L2 health check path
     */
    l2HealthCheckPath?: pulumi.Input<string>;
    /**
     * Server Name
     */
    name?: pulumi.Input<string>;
    /**
     * Do not log connection over limit event
     */
    noLogging?: pulumi.Input<number>;
    portLists?: pulumi.Input<pulumi.Input<inputs.SlbServerPortList>[]>;
    /**
     * 'resolve-to-ipv4': Use A Query only to resolve FQDN; 'resolve-to-ipv6': Use AAAA Query only to resolve FQDN;
     * 'resolve-to-ipv4-and-ipv6': Use A as well as AAAA Query to resolve FQDN;
     */
    resolveAs?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.SlbServerSamplingEnable>[]>;
    /**
     * IPV6 address
     */
    serverIpv6Addr?: pulumi.Input<string>;
    /**
     * Reference a health-check from shared partition
     */
    sharedPartitionHealthCheck?: pulumi.Input<number>;
    /**
     * Reference a server template from shared partition
     */
    sharedPartitionServerTemplate?: pulumi.Input<number>;
    /**
     * Slowly ramp up the connection number after server is up (start from 128, then double every 10 sec till 4096)
     */
    slowStart?: pulumi.Input<number>;
    /**
     * This server is a spoofing cache
     */
    spoofingCache?: pulumi.Input<number>;
    /**
     * 'stats-data-enable': Enable statistical data collection for real server; 'stats-data-disable': Disable statistical data
     * collection for real server;
     */
    statsDataAction?: pulumi.Input<string>;
    /**
     * Link-Cost template (Link-Cost template name)
     */
    templateLinkCost?: pulumi.Input<string>;
    /**
     * Server template (Server template name)
     */
    templateServer?: pulumi.Input<string>;
    /**
     * Server Template Name
     */
    templateServerShared?: pulumi.Input<string>;
    /**
     * trunk interface
     */
    trunk?: pulumi.Input<number>;
    /**
     * Using aam server. For health check, please configure it in aam server
     */
    useAamServer?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Weight for this Real Server (Connection Weight)
     */
    weight?: pulumi.Input<number>;
}
