// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GslbZoneService extends pulumi.CustomResource {
    /**
     * Get an existing GslbZoneService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GslbZoneServiceState, opts?: pulumi.CustomResourceOptions): GslbZoneService {
        return new GslbZoneService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/gslbZoneService:GslbZoneService';

    /**
     * Returns true if the given object is an instance of GslbZoneService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GslbZoneService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GslbZoneService.__pulumiType;
    }

    /**
     * 'drop': Drop query; 'forward': Forward packet; 'ignore': Send empty response; 'reject': Send refuse response;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Disable
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    public readonly dnsARecord!: pulumi.Output<outputs.GslbZoneServiceDnsARecord | undefined>;
    public readonly dnsCaaRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsCaaRecordList[] | undefined>;
    public readonly dnsCnameRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsCnameRecordList[] | undefined>;
    public readonly dnsMxRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsMxRecordList[] | undefined>;
    public readonly dnsNaptrRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsNaptrRecordList[] | undefined>;
    public readonly dnsNsRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsNsRecordList[] | undefined>;
    public readonly dnsPtrRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsPtrRecordList[] | undefined>;
    public readonly dnsRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsRecordList[] | undefined>;
    public readonly dnsSrvRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsSrvRecordList[] | undefined>;
    public readonly dnsTxtRecordLists!: pulumi.Output<outputs.GslbZoneServiceDnsTxtRecordList[] | undefined>;
    /**
     * 'both': Forward both query and response; 'query': Forward query; 'response': Forward response;
     */
    public readonly forwardType!: pulumi.Output<string | undefined>;
    public readonly geoLocationLists!: pulumi.Output<outputs.GslbZoneServiceGeoLocationList[] | undefined>;
    /**
     * 'enable': Enable Gateway Status Check; 'disable': Disable Gateway Status Check;
     */
    public readonly healthCheckGateway!: pulumi.Output<string | undefined>;
    public readonly healthCheckPorts!: pulumi.Output<outputs.GslbZoneServiceHealthCheckPort[] | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify policy for this service (Specify policy name)
     */
    public readonly policy!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.GslbZoneServiceSamplingEnable[] | undefined>;
    /**
     * Specify the service name for the zone, * for wildcard
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Port number of the service
     */
    public readonly servicePort!: pulumi.Output<number>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a GslbZoneService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GslbZoneServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GslbZoneServiceArgs | GslbZoneServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GslbZoneServiceState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dnsARecord"] = state ? state.dnsARecord : undefined;
            resourceInputs["dnsCaaRecordLists"] = state ? state.dnsCaaRecordLists : undefined;
            resourceInputs["dnsCnameRecordLists"] = state ? state.dnsCnameRecordLists : undefined;
            resourceInputs["dnsMxRecordLists"] = state ? state.dnsMxRecordLists : undefined;
            resourceInputs["dnsNaptrRecordLists"] = state ? state.dnsNaptrRecordLists : undefined;
            resourceInputs["dnsNsRecordLists"] = state ? state.dnsNsRecordLists : undefined;
            resourceInputs["dnsPtrRecordLists"] = state ? state.dnsPtrRecordLists : undefined;
            resourceInputs["dnsRecordLists"] = state ? state.dnsRecordLists : undefined;
            resourceInputs["dnsSrvRecordLists"] = state ? state.dnsSrvRecordLists : undefined;
            resourceInputs["dnsTxtRecordLists"] = state ? state.dnsTxtRecordLists : undefined;
            resourceInputs["forwardType"] = state ? state.forwardType : undefined;
            resourceInputs["geoLocationLists"] = state ? state.geoLocationLists : undefined;
            resourceInputs["healthCheckGateway"] = state ? state.healthCheckGateway : undefined;
            resourceInputs["healthCheckPorts"] = state ? state.healthCheckPorts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["servicePort"] = state ? state.servicePort : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GslbZoneServiceArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.servicePort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servicePort'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["dnsARecord"] = args ? args.dnsARecord : undefined;
            resourceInputs["dnsCaaRecordLists"] = args ? args.dnsCaaRecordLists : undefined;
            resourceInputs["dnsCnameRecordLists"] = args ? args.dnsCnameRecordLists : undefined;
            resourceInputs["dnsMxRecordLists"] = args ? args.dnsMxRecordLists : undefined;
            resourceInputs["dnsNaptrRecordLists"] = args ? args.dnsNaptrRecordLists : undefined;
            resourceInputs["dnsNsRecordLists"] = args ? args.dnsNsRecordLists : undefined;
            resourceInputs["dnsPtrRecordLists"] = args ? args.dnsPtrRecordLists : undefined;
            resourceInputs["dnsRecordLists"] = args ? args.dnsRecordLists : undefined;
            resourceInputs["dnsSrvRecordLists"] = args ? args.dnsSrvRecordLists : undefined;
            resourceInputs["dnsTxtRecordLists"] = args ? args.dnsTxtRecordLists : undefined;
            resourceInputs["forwardType"] = args ? args.forwardType : undefined;
            resourceInputs["geoLocationLists"] = args ? args.geoLocationLists : undefined;
            resourceInputs["healthCheckGateway"] = args ? args.healthCheckGateway : undefined;
            resourceInputs["healthCheckPorts"] = args ? args.healthCheckPorts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["servicePort"] = args ? args.servicePort : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GslbZoneService.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GslbZoneService resources.
 */
export interface GslbZoneServiceState {
    /**
     * 'drop': Drop query; 'forward': Forward packet; 'ignore': Send empty response; 'reject': Send refuse response;
     */
    action?: pulumi.Input<string>;
    /**
     * Disable
     */
    disable?: pulumi.Input<number>;
    dnsARecord?: pulumi.Input<inputs.GslbZoneServiceDnsARecord>;
    dnsCaaRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsCaaRecordList>[]>;
    dnsCnameRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsCnameRecordList>[]>;
    dnsMxRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsMxRecordList>[]>;
    dnsNaptrRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsNaptrRecordList>[]>;
    dnsNsRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsNsRecordList>[]>;
    dnsPtrRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsPtrRecordList>[]>;
    dnsRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsRecordList>[]>;
    dnsSrvRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsSrvRecordList>[]>;
    dnsTxtRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsTxtRecordList>[]>;
    /**
     * 'both': Forward both query and response; 'query': Forward query; 'response': Forward response;
     */
    forwardType?: pulumi.Input<string>;
    geoLocationLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceGeoLocationList>[]>;
    /**
     * 'enable': Enable Gateway Status Check; 'disable': Disable Gateway Status Check;
     */
    healthCheckGateway?: pulumi.Input<string>;
    healthCheckPorts?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceHealthCheckPort>[]>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify policy for this service (Specify policy name)
     */
    policy?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceSamplingEnable>[]>;
    /**
     * Specify the service name for the zone, * for wildcard
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Port number of the service
     */
    servicePort?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GslbZoneService resource.
 */
export interface GslbZoneServiceArgs {
    /**
     * 'drop': Drop query; 'forward': Forward packet; 'ignore': Send empty response; 'reject': Send refuse response;
     */
    action?: pulumi.Input<string>;
    /**
     * Disable
     */
    disable?: pulumi.Input<number>;
    dnsARecord?: pulumi.Input<inputs.GslbZoneServiceDnsARecord>;
    dnsCaaRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsCaaRecordList>[]>;
    dnsCnameRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsCnameRecordList>[]>;
    dnsMxRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsMxRecordList>[]>;
    dnsNaptrRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsNaptrRecordList>[]>;
    dnsNsRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsNsRecordList>[]>;
    dnsPtrRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsPtrRecordList>[]>;
    dnsRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsRecordList>[]>;
    dnsSrvRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsSrvRecordList>[]>;
    dnsTxtRecordLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceDnsTxtRecordList>[]>;
    /**
     * 'both': Forward both query and response; 'query': Forward query; 'response': Forward response;
     */
    forwardType?: pulumi.Input<string>;
    geoLocationLists?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceGeoLocationList>[]>;
    /**
     * 'enable': Enable Gateway Status Check; 'disable': Disable Gateway Status Check;
     */
    healthCheckGateway?: pulumi.Input<string>;
    healthCheckPorts?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceHealthCheckPort>[]>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify policy for this service (Specify policy name)
     */
    policy?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.GslbZoneServiceSamplingEnable>[]>;
    /**
     * Specify the service name for the zone, * for wildcard
     */
    serviceName: pulumi.Input<string>;
    /**
     * Port number of the service
     */
    servicePort: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
