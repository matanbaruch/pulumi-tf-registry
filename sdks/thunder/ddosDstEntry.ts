// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstEntry extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstEntryState, opts?: pulumi.CustomResourceOptions): DdosDstEntry {
        return new DdosDstEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstEntry:DdosDstEntry';

    /**
     * Returns true if the given object is an instance of DdosDstEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstEntry.__pulumiType;
    }

    /**
     * BGP advertised
     */
    public readonly advertisedEnable!: pulumi.Output<number | undefined>;
    /**
     * Blackhole destination entry for X minutes upon glid limit exceeded
     */
    public readonly blackholeOnGlidExceed!: pulumi.Output<number | undefined>;
    public readonly captureConfigLists!: pulumi.Output<outputs.DdosDstEntryCaptureConfigList[] | undefined>;
    /**
     * Description for this Destination Entry
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination NAT IP address
     */
    public readonly destNatIp!: pulumi.Output<string | undefined>;
    /**
     * Destination NAT IPv6 address
     */
    public readonly destNatIpv6!: pulumi.Output<string | undefined>;
    /**
     * Disable certain drops during packet processing
     */
    public readonly dropDisable!: pulumi.Output<number | undefined>;
    /**
     * Immediately forward L4 drops
     */
    public readonly dropDisableFwdImmediate!: pulumi.Output<number | undefined>;
    /**
     * Drop fragmented packets
     */
    public readonly dropFragPkt!: pulumi.Output<number | undefined>;
    /**
     * Drop if no match with src-based-policy class-list, and default is not configured
     */
    public readonly dropOnNoSrcDstDefault!: pulumi.Output<number | undefined>;
    public readonly dstEntryName!: pulumi.Output<string>;
    public readonly dynamicEntryOverflowPolicyLists!: pulumi.Output<outputs.DdosDstEntryDynamicEntryOverflowPolicyList[] | undefined>;
    public readonly enableTopKs!: pulumi.Output<outputs.DdosDstEntryEnableTopK[] | undefined>;
    public readonly exceedLogCfg!: pulumi.Output<outputs.DdosDstEntryExceedLogCfg | undefined>;
    public readonly exceedLogDepCfg!: pulumi.Output<outputs.DdosDstEntryExceedLogDepCfg | undefined>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    public readonly glidExceedAction!: pulumi.Output<outputs.DdosDstEntryGlidExceedAction | undefined>;
    public readonly hwBlacklistBlocking!: pulumi.Output<outputs.DdosDstEntryHwBlacklistBlocking | undefined>;
    /**
     * To set dscp value for inbound packets (DSCP Value for the clear traffic marking)
     */
    public readonly inboundForwardDscp!: pulumi.Output<number | undefined>;
    public readonly ipAddr!: pulumi.Output<string | undefined>;
    public readonly ipProtoLists!: pulumi.Output<outputs.DdosDstEntryIpProtoList[] | undefined>;
    public readonly ipv6Addr!: pulumi.Output<string | undefined>;
    public readonly l4TypeLists!: pulumi.Output<outputs.DdosDstEntryL4TypeList[] | undefined>;
    /**
     * Enable periodic log while event is continuing
     */
    public readonly logPeriodic!: pulumi.Output<number | undefined>;
    /**
     * 'protection': Protection mode; 'bypass': Bypass mode;
     */
    public readonly operationalMode!: pulumi.Output<string | undefined>;
    /**
     * To set dscp value for outbound
     */
    public readonly outboundForwardDscp!: pulumi.Output<number | undefined>;
    /**
     * to enable pattern recognition hardware filter
     */
    public readonly patternRecognitionHwFilterEnable!: pulumi.Output<number | undefined>;
    /**
     * 'high': High sensitive pattern recognition; 'medium': Medium sensitive pattern recognition; 'low': Low sensitive pattern
     * recognition;
     */
    public readonly patternRecognitionSensitivity!: pulumi.Output<string | undefined>;
    public readonly portLists!: pulumi.Output<outputs.DdosDstEntryPortList[] | undefined>;
    public readonly portRangeLists!: pulumi.Output<outputs.DdosDstEntryPortRangeList[] | undefined>;
    /**
     * Disable Reporting
     */
    public readonly reportingDisabled!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.DdosDstEntrySamplingEnable[] | undefined>;
    /**
     * Set T2 counter value of current context to specified value
     */
    public readonly setCounterBaseVal!: pulumi.Output<number | undefined>;
    public readonly sflow!: pulumi.Output<outputs.DdosDstEntrySflow | undefined>;
    /**
     * Configure source NAT
     */
    public readonly sourceNatPool!: pulumi.Output<string | undefined>;
    public readonly srcDstPair!: pulumi.Output<outputs.DdosDstEntrySrcDstPair | undefined>;
    public readonly srcDstPairClassListLists!: pulumi.Output<outputs.DdosDstEntrySrcDstPairClassListList[] | undefined>;
    public readonly srcDstPairPolicyLists!: pulumi.Output<outputs.DdosDstEntrySrcDstPairPolicyList[] | undefined>;
    public readonly srcDstPairSettingsLists!: pulumi.Output<outputs.DdosDstEntrySrcDstPairSettingsList[] | undefined>;
    public readonly srcPortLists!: pulumi.Output<outputs.DdosDstEntrySrcPortList[] | undefined>;
    public readonly srcPortRangeLists!: pulumi.Output<outputs.DdosDstEntrySrcPortRangeList[] | undefined>;
    /**
     * IP Subnet
     */
    public readonly subnetIpAddr!: pulumi.Output<string | undefined>;
    /**
     * IPV6 Subnet
     */
    public readonly subnetIpv6Addr!: pulumi.Output<string | undefined>;
    public readonly template!: pulumi.Output<outputs.DdosDstEntryTemplate | undefined>;
    public readonly topkDestinations!: pulumi.Output<outputs.DdosDstEntryTopkDestinations | undefined>;
    /**
     * 'default': Distribute traffic to one slot using default distribution mechanism; 'source-ip-based': Distribute traffic
     * between slots, based on source ip;
     */
    public readonly trafficDistributionMode!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosDstEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstEntryArgs | DdosDstEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstEntryState | undefined;
            resourceInputs["advertisedEnable"] = state ? state.advertisedEnable : undefined;
            resourceInputs["blackholeOnGlidExceed"] = state ? state.blackholeOnGlidExceed : undefined;
            resourceInputs["captureConfigLists"] = state ? state.captureConfigLists : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destNatIp"] = state ? state.destNatIp : undefined;
            resourceInputs["destNatIpv6"] = state ? state.destNatIpv6 : undefined;
            resourceInputs["dropDisable"] = state ? state.dropDisable : undefined;
            resourceInputs["dropDisableFwdImmediate"] = state ? state.dropDisableFwdImmediate : undefined;
            resourceInputs["dropFragPkt"] = state ? state.dropFragPkt : undefined;
            resourceInputs["dropOnNoSrcDstDefault"] = state ? state.dropOnNoSrcDstDefault : undefined;
            resourceInputs["dstEntryName"] = state ? state.dstEntryName : undefined;
            resourceInputs["dynamicEntryOverflowPolicyLists"] = state ? state.dynamicEntryOverflowPolicyLists : undefined;
            resourceInputs["enableTopKs"] = state ? state.enableTopKs : undefined;
            resourceInputs["exceedLogCfg"] = state ? state.exceedLogCfg : undefined;
            resourceInputs["exceedLogDepCfg"] = state ? state.exceedLogDepCfg : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["glidExceedAction"] = state ? state.glidExceedAction : undefined;
            resourceInputs["hwBlacklistBlocking"] = state ? state.hwBlacklistBlocking : undefined;
            resourceInputs["inboundForwardDscp"] = state ? state.inboundForwardDscp : undefined;
            resourceInputs["ipAddr"] = state ? state.ipAddr : undefined;
            resourceInputs["ipProtoLists"] = state ? state.ipProtoLists : undefined;
            resourceInputs["ipv6Addr"] = state ? state.ipv6Addr : undefined;
            resourceInputs["l4TypeLists"] = state ? state.l4TypeLists : undefined;
            resourceInputs["logPeriodic"] = state ? state.logPeriodic : undefined;
            resourceInputs["operationalMode"] = state ? state.operationalMode : undefined;
            resourceInputs["outboundForwardDscp"] = state ? state.outboundForwardDscp : undefined;
            resourceInputs["patternRecognitionHwFilterEnable"] = state ? state.patternRecognitionHwFilterEnable : undefined;
            resourceInputs["patternRecognitionSensitivity"] = state ? state.patternRecognitionSensitivity : undefined;
            resourceInputs["portLists"] = state ? state.portLists : undefined;
            resourceInputs["portRangeLists"] = state ? state.portRangeLists : undefined;
            resourceInputs["reportingDisabled"] = state ? state.reportingDisabled : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["setCounterBaseVal"] = state ? state.setCounterBaseVal : undefined;
            resourceInputs["sflow"] = state ? state.sflow : undefined;
            resourceInputs["sourceNatPool"] = state ? state.sourceNatPool : undefined;
            resourceInputs["srcDstPair"] = state ? state.srcDstPair : undefined;
            resourceInputs["srcDstPairClassListLists"] = state ? state.srcDstPairClassListLists : undefined;
            resourceInputs["srcDstPairPolicyLists"] = state ? state.srcDstPairPolicyLists : undefined;
            resourceInputs["srcDstPairSettingsLists"] = state ? state.srcDstPairSettingsLists : undefined;
            resourceInputs["srcPortLists"] = state ? state.srcPortLists : undefined;
            resourceInputs["srcPortRangeLists"] = state ? state.srcPortRangeLists : undefined;
            resourceInputs["subnetIpAddr"] = state ? state.subnetIpAddr : undefined;
            resourceInputs["subnetIpv6Addr"] = state ? state.subnetIpv6Addr : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["topkDestinations"] = state ? state.topkDestinations : undefined;
            resourceInputs["trafficDistributionMode"] = state ? state.trafficDistributionMode : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosDstEntryArgs | undefined;
            if ((!args || args.dstEntryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstEntryName'");
            }
            resourceInputs["advertisedEnable"] = args ? args.advertisedEnable : undefined;
            resourceInputs["blackholeOnGlidExceed"] = args ? args.blackholeOnGlidExceed : undefined;
            resourceInputs["captureConfigLists"] = args ? args.captureConfigLists : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destNatIp"] = args ? args.destNatIp : undefined;
            resourceInputs["destNatIpv6"] = args ? args.destNatIpv6 : undefined;
            resourceInputs["dropDisable"] = args ? args.dropDisable : undefined;
            resourceInputs["dropDisableFwdImmediate"] = args ? args.dropDisableFwdImmediate : undefined;
            resourceInputs["dropFragPkt"] = args ? args.dropFragPkt : undefined;
            resourceInputs["dropOnNoSrcDstDefault"] = args ? args.dropOnNoSrcDstDefault : undefined;
            resourceInputs["dstEntryName"] = args ? args.dstEntryName : undefined;
            resourceInputs["dynamicEntryOverflowPolicyLists"] = args ? args.dynamicEntryOverflowPolicyLists : undefined;
            resourceInputs["enableTopKs"] = args ? args.enableTopKs : undefined;
            resourceInputs["exceedLogCfg"] = args ? args.exceedLogCfg : undefined;
            resourceInputs["exceedLogDepCfg"] = args ? args.exceedLogDepCfg : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["glidExceedAction"] = args ? args.glidExceedAction : undefined;
            resourceInputs["hwBlacklistBlocking"] = args ? args.hwBlacklistBlocking : undefined;
            resourceInputs["inboundForwardDscp"] = args ? args.inboundForwardDscp : undefined;
            resourceInputs["ipAddr"] = args ? args.ipAddr : undefined;
            resourceInputs["ipProtoLists"] = args ? args.ipProtoLists : undefined;
            resourceInputs["ipv6Addr"] = args ? args.ipv6Addr : undefined;
            resourceInputs["l4TypeLists"] = args ? args.l4TypeLists : undefined;
            resourceInputs["logPeriodic"] = args ? args.logPeriodic : undefined;
            resourceInputs["operationalMode"] = args ? args.operationalMode : undefined;
            resourceInputs["outboundForwardDscp"] = args ? args.outboundForwardDscp : undefined;
            resourceInputs["patternRecognitionHwFilterEnable"] = args ? args.patternRecognitionHwFilterEnable : undefined;
            resourceInputs["patternRecognitionSensitivity"] = args ? args.patternRecognitionSensitivity : undefined;
            resourceInputs["portLists"] = args ? args.portLists : undefined;
            resourceInputs["portRangeLists"] = args ? args.portRangeLists : undefined;
            resourceInputs["reportingDisabled"] = args ? args.reportingDisabled : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["setCounterBaseVal"] = args ? args.setCounterBaseVal : undefined;
            resourceInputs["sflow"] = args ? args.sflow : undefined;
            resourceInputs["sourceNatPool"] = args ? args.sourceNatPool : undefined;
            resourceInputs["srcDstPair"] = args ? args.srcDstPair : undefined;
            resourceInputs["srcDstPairClassListLists"] = args ? args.srcDstPairClassListLists : undefined;
            resourceInputs["srcDstPairPolicyLists"] = args ? args.srcDstPairPolicyLists : undefined;
            resourceInputs["srcDstPairSettingsLists"] = args ? args.srcDstPairSettingsLists : undefined;
            resourceInputs["srcPortLists"] = args ? args.srcPortLists : undefined;
            resourceInputs["srcPortRangeLists"] = args ? args.srcPortRangeLists : undefined;
            resourceInputs["subnetIpAddr"] = args ? args.subnetIpAddr : undefined;
            resourceInputs["subnetIpv6Addr"] = args ? args.subnetIpv6Addr : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["topkDestinations"] = args ? args.topkDestinations : undefined;
            resourceInputs["trafficDistributionMode"] = args ? args.trafficDistributionMode : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstEntry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstEntry resources.
 */
export interface DdosDstEntryState {
    /**
     * BGP advertised
     */
    advertisedEnable?: pulumi.Input<number>;
    /**
     * Blackhole destination entry for X minutes upon glid limit exceeded
     */
    blackholeOnGlidExceed?: pulumi.Input<number>;
    captureConfigLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryCaptureConfigList>[]>;
    /**
     * Description for this Destination Entry
     */
    description?: pulumi.Input<string>;
    /**
     * Destination NAT IP address
     */
    destNatIp?: pulumi.Input<string>;
    /**
     * Destination NAT IPv6 address
     */
    destNatIpv6?: pulumi.Input<string>;
    /**
     * Disable certain drops during packet processing
     */
    dropDisable?: pulumi.Input<number>;
    /**
     * Immediately forward L4 drops
     */
    dropDisableFwdImmediate?: pulumi.Input<number>;
    /**
     * Drop fragmented packets
     */
    dropFragPkt?: pulumi.Input<number>;
    /**
     * Drop if no match with src-based-policy class-list, and default is not configured
     */
    dropOnNoSrcDstDefault?: pulumi.Input<number>;
    dstEntryName?: pulumi.Input<string>;
    dynamicEntryOverflowPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryDynamicEntryOverflowPolicyList>[]>;
    enableTopKs?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryEnableTopK>[]>;
    exceedLogCfg?: pulumi.Input<inputs.DdosDstEntryExceedLogCfg>;
    exceedLogDepCfg?: pulumi.Input<inputs.DdosDstEntryExceedLogDepCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    glidExceedAction?: pulumi.Input<inputs.DdosDstEntryGlidExceedAction>;
    hwBlacklistBlocking?: pulumi.Input<inputs.DdosDstEntryHwBlacklistBlocking>;
    /**
     * To set dscp value for inbound packets (DSCP Value for the clear traffic marking)
     */
    inboundForwardDscp?: pulumi.Input<number>;
    ipAddr?: pulumi.Input<string>;
    ipProtoLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryIpProtoList>[]>;
    ipv6Addr?: pulumi.Input<string>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryL4TypeList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * 'protection': Protection mode; 'bypass': Bypass mode;
     */
    operationalMode?: pulumi.Input<string>;
    /**
     * To set dscp value for outbound
     */
    outboundForwardDscp?: pulumi.Input<number>;
    /**
     * to enable pattern recognition hardware filter
     */
    patternRecognitionHwFilterEnable?: pulumi.Input<number>;
    /**
     * 'high': High sensitive pattern recognition; 'medium': Medium sensitive pattern recognition; 'low': Low sensitive pattern
     * recognition;
     */
    patternRecognitionSensitivity?: pulumi.Input<string>;
    portLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryPortList>[]>;
    portRangeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryPortRangeList>[]>;
    /**
     * Disable Reporting
     */
    reportingDisabled?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySamplingEnable>[]>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    sflow?: pulumi.Input<inputs.DdosDstEntrySflow>;
    /**
     * Configure source NAT
     */
    sourceNatPool?: pulumi.Input<string>;
    srcDstPair?: pulumi.Input<inputs.DdosDstEntrySrcDstPair>;
    srcDstPairClassListLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairClassListList>[]>;
    srcDstPairPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairPolicyList>[]>;
    srcDstPairSettingsLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairSettingsList>[]>;
    srcPortLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcPortList>[]>;
    srcPortRangeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcPortRangeList>[]>;
    /**
     * IP Subnet
     */
    subnetIpAddr?: pulumi.Input<string>;
    /**
     * IPV6 Subnet
     */
    subnetIpv6Addr?: pulumi.Input<string>;
    template?: pulumi.Input<inputs.DdosDstEntryTemplate>;
    topkDestinations?: pulumi.Input<inputs.DdosDstEntryTopkDestinations>;
    /**
     * 'default': Distribute traffic to one slot using default distribution mechanism; 'source-ip-based': Distribute traffic
     * between slots, based on source ip;
     */
    trafficDistributionMode?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDstEntry resource.
 */
export interface DdosDstEntryArgs {
    /**
     * BGP advertised
     */
    advertisedEnable?: pulumi.Input<number>;
    /**
     * Blackhole destination entry for X minutes upon glid limit exceeded
     */
    blackholeOnGlidExceed?: pulumi.Input<number>;
    captureConfigLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryCaptureConfigList>[]>;
    /**
     * Description for this Destination Entry
     */
    description?: pulumi.Input<string>;
    /**
     * Destination NAT IP address
     */
    destNatIp?: pulumi.Input<string>;
    /**
     * Destination NAT IPv6 address
     */
    destNatIpv6?: pulumi.Input<string>;
    /**
     * Disable certain drops during packet processing
     */
    dropDisable?: pulumi.Input<number>;
    /**
     * Immediately forward L4 drops
     */
    dropDisableFwdImmediate?: pulumi.Input<number>;
    /**
     * Drop fragmented packets
     */
    dropFragPkt?: pulumi.Input<number>;
    /**
     * Drop if no match with src-based-policy class-list, and default is not configured
     */
    dropOnNoSrcDstDefault?: pulumi.Input<number>;
    dstEntryName: pulumi.Input<string>;
    dynamicEntryOverflowPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryDynamicEntryOverflowPolicyList>[]>;
    enableTopKs?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryEnableTopK>[]>;
    exceedLogCfg?: pulumi.Input<inputs.DdosDstEntryExceedLogCfg>;
    exceedLogDepCfg?: pulumi.Input<inputs.DdosDstEntryExceedLogDepCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    glidExceedAction?: pulumi.Input<inputs.DdosDstEntryGlidExceedAction>;
    hwBlacklistBlocking?: pulumi.Input<inputs.DdosDstEntryHwBlacklistBlocking>;
    /**
     * To set dscp value for inbound packets (DSCP Value for the clear traffic marking)
     */
    inboundForwardDscp?: pulumi.Input<number>;
    ipAddr?: pulumi.Input<string>;
    ipProtoLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryIpProtoList>[]>;
    ipv6Addr?: pulumi.Input<string>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryL4TypeList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * 'protection': Protection mode; 'bypass': Bypass mode;
     */
    operationalMode?: pulumi.Input<string>;
    /**
     * To set dscp value for outbound
     */
    outboundForwardDscp?: pulumi.Input<number>;
    /**
     * to enable pattern recognition hardware filter
     */
    patternRecognitionHwFilterEnable?: pulumi.Input<number>;
    /**
     * 'high': High sensitive pattern recognition; 'medium': Medium sensitive pattern recognition; 'low': Low sensitive pattern
     * recognition;
     */
    patternRecognitionSensitivity?: pulumi.Input<string>;
    portLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryPortList>[]>;
    portRangeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntryPortRangeList>[]>;
    /**
     * Disable Reporting
     */
    reportingDisabled?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySamplingEnable>[]>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    sflow?: pulumi.Input<inputs.DdosDstEntrySflow>;
    /**
     * Configure source NAT
     */
    sourceNatPool?: pulumi.Input<string>;
    srcDstPair?: pulumi.Input<inputs.DdosDstEntrySrcDstPair>;
    srcDstPairClassListLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairClassListList>[]>;
    srcDstPairPolicyLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairPolicyList>[]>;
    srcDstPairSettingsLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcDstPairSettingsList>[]>;
    srcPortLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcPortList>[]>;
    srcPortRangeLists?: pulumi.Input<pulumi.Input<inputs.DdosDstEntrySrcPortRangeList>[]>;
    /**
     * IP Subnet
     */
    subnetIpAddr?: pulumi.Input<string>;
    /**
     * IPV6 Subnet
     */
    subnetIpv6Addr?: pulumi.Input<string>;
    template?: pulumi.Input<inputs.DdosDstEntryTemplate>;
    topkDestinations?: pulumi.Input<inputs.DdosDstEntryTopkDestinations>;
    /**
     * 'default': Distribute traffic to one slot using default distribution mechanism; 'source-ip-based': Distribute traffic
     * between slots, based on source ip;
     */
    trafficDistributionMode?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
