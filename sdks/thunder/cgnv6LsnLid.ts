// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6LsnLid extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6LsnLid resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6LsnLidState, opts?: pulumi.CustomResourceOptions): Cgnv6LsnLid {
        return new Cgnv6LsnLid(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6LsnLid:Cgnv6LsnLid';

    /**
     * Returns true if the given object is an instance of Cgnv6LsnLid.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6LsnLid {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6LsnLid.__pulumiType;
    }

    public readonly connRateLimit!: pulumi.Output<outputs.Cgnv6LsnLidConnRateLimit | undefined>;
    public readonly dsLite!: pulumi.Output<outputs.Cgnv6LsnLidDsLite | undefined>;
    public readonly extendedUserQuota!: pulumi.Output<outputs.Cgnv6LsnLidExtendedUserQuota | undefined>;
    /**
     * LSN Lid
     */
    public readonly lidNumber!: pulumi.Output<number>;
    public readonly lsnRuleList!: pulumi.Output<outputs.Cgnv6LsnLidLsnRuleList | undefined>;
    /**
     * LSN Lid Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'none': Apply source NAT if configured (default); 'drop': Drop packets that match this LSN lid; 'pass-through': Layer-3
     * route packets that match this LSN lid and do not apply source NAT;
     */
    public readonly override!: pulumi.Output<string | undefined>;
    /**
     * Use the user's source MAC for the next hop rather than the routing table (default: off)
     */
    public readonly respondToUserMac!: pulumi.Output<number | undefined>;
    public readonly sourceNatPool!: pulumi.Output<outputs.Cgnv6LsnLidSourceNatPool | undefined>;
    public readonly userQuota!: pulumi.Output<outputs.Cgnv6LsnLidUserQuota | undefined>;
    /**
     * NAT64/DS-Lite user quota prefix length (Prefix Length (Default: Uses the global NAT64/DS-Lite configured value))
     */
    public readonly userQuotaPrefixLength!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6LsnLid resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Cgnv6LsnLidArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6LsnLidArgs | Cgnv6LsnLidState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6LsnLidState | undefined;
            resourceInputs["connRateLimit"] = state ? state.connRateLimit : undefined;
            resourceInputs["dsLite"] = state ? state.dsLite : undefined;
            resourceInputs["extendedUserQuota"] = state ? state.extendedUserQuota : undefined;
            resourceInputs["lidNumber"] = state ? state.lidNumber : undefined;
            resourceInputs["lsnRuleList"] = state ? state.lsnRuleList : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["override"] = state ? state.override : undefined;
            resourceInputs["respondToUserMac"] = state ? state.respondToUserMac : undefined;
            resourceInputs["sourceNatPool"] = state ? state.sourceNatPool : undefined;
            resourceInputs["userQuota"] = state ? state.userQuota : undefined;
            resourceInputs["userQuotaPrefixLength"] = state ? state.userQuotaPrefixLength : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6LsnLidArgs | undefined;
            if ((!args || args.lidNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lidNumber'");
            }
            resourceInputs["connRateLimit"] = args ? args.connRateLimit : undefined;
            resourceInputs["dsLite"] = args ? args.dsLite : undefined;
            resourceInputs["extendedUserQuota"] = args ? args.extendedUserQuota : undefined;
            resourceInputs["lidNumber"] = args ? args.lidNumber : undefined;
            resourceInputs["lsnRuleList"] = args ? args.lsnRuleList : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["override"] = args ? args.override : undefined;
            resourceInputs["respondToUserMac"] = args ? args.respondToUserMac : undefined;
            resourceInputs["sourceNatPool"] = args ? args.sourceNatPool : undefined;
            resourceInputs["userQuota"] = args ? args.userQuota : undefined;
            resourceInputs["userQuotaPrefixLength"] = args ? args.userQuotaPrefixLength : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6LsnLid.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6LsnLid resources.
 */
export interface Cgnv6LsnLidState {
    connRateLimit?: pulumi.Input<inputs.Cgnv6LsnLidConnRateLimit>;
    dsLite?: pulumi.Input<inputs.Cgnv6LsnLidDsLite>;
    extendedUserQuota?: pulumi.Input<inputs.Cgnv6LsnLidExtendedUserQuota>;
    /**
     * LSN Lid
     */
    lidNumber?: pulumi.Input<number>;
    lsnRuleList?: pulumi.Input<inputs.Cgnv6LsnLidLsnRuleList>;
    /**
     * LSN Lid Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'none': Apply source NAT if configured (default); 'drop': Drop packets that match this LSN lid; 'pass-through': Layer-3
     * route packets that match this LSN lid and do not apply source NAT;
     */
    override?: pulumi.Input<string>;
    /**
     * Use the user's source MAC for the next hop rather than the routing table (default: off)
     */
    respondToUserMac?: pulumi.Input<number>;
    sourceNatPool?: pulumi.Input<inputs.Cgnv6LsnLidSourceNatPool>;
    userQuota?: pulumi.Input<inputs.Cgnv6LsnLidUserQuota>;
    /**
     * NAT64/DS-Lite user quota prefix length (Prefix Length (Default: Uses the global NAT64/DS-Lite configured value))
     */
    userQuotaPrefixLength?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6LsnLid resource.
 */
export interface Cgnv6LsnLidArgs {
    connRateLimit?: pulumi.Input<inputs.Cgnv6LsnLidConnRateLimit>;
    dsLite?: pulumi.Input<inputs.Cgnv6LsnLidDsLite>;
    extendedUserQuota?: pulumi.Input<inputs.Cgnv6LsnLidExtendedUserQuota>;
    /**
     * LSN Lid
     */
    lidNumber: pulumi.Input<number>;
    lsnRuleList?: pulumi.Input<inputs.Cgnv6LsnLidLsnRuleList>;
    /**
     * LSN Lid Name
     */
    name?: pulumi.Input<string>;
    /**
     * 'none': Apply source NAT if configured (default); 'drop': Drop packets that match this LSN lid; 'pass-through': Layer-3
     * route packets that match this LSN lid and do not apply source NAT;
     */
    override?: pulumi.Input<string>;
    /**
     * Use the user's source MAC for the next hop rather than the routing table (default: off)
     */
    respondToUserMac?: pulumi.Input<number>;
    sourceNatPool?: pulumi.Input<inputs.Cgnv6LsnLidSourceNatPool>;
    userQuota?: pulumi.Input<inputs.Cgnv6LsnLidUserQuota>;
    /**
     * NAT64/DS-Lite user quota prefix length (Prefix Length (Default: Uses the global NAT64/DS-Lite configured value))
     */
    userQuotaPrefixLength?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
