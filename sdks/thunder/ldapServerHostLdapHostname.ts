// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LdapServerHostLdapHostname extends pulumi.CustomResource {
    /**
     * Get an existing LdapServerHostLdapHostname resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapServerHostLdapHostnameState, opts?: pulumi.CustomResourceOptions): LdapServerHostLdapHostname {
        return new LdapServerHostLdapHostname(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ldapServerHostLdapHostname:LdapServerHostLdapHostname';

    /**
     * Returns true if the given object is an instance of LdapServerHostLdapHostname.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapServerHostLdapHostname {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapServerHostLdapHostname.__pulumiType;
    }

    /**
     * Configure the group DN which user belongs to
     */
    public readonly base!: pulumi.Output<string | undefined>;
    /**
     * LDAP common name identifier (i.e.: cn, uid)
     */
    public readonly cnValue!: pulumi.Output<string | undefined>;
    /**
     * LDAP distinguished name (dn)
     */
    public readonly dnValue!: pulumi.Output<string | undefined>;
    /**
     * Configure AD domain name
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly domainCfg!: pulumi.Output<outputs.LdapServerHostLdapHostnameDomainCfg | undefined>;
    /**
     * Configure the group DN which user belongs to
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Hostname of LDAP server
     */
    public readonly hostname!: pulumi.Output<string>;
    public readonly hostnameCfg!: pulumi.Output<outputs.LdapServerHostLdapHostnameHostnameCfg | undefined>;
    public readonly portCfg!: pulumi.Output<outputs.LdapServerHostLdapHostnamePortCfg | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a LdapServerHostLdapHostname resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapServerHostLdapHostnameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapServerHostLdapHostnameArgs | LdapServerHostLdapHostnameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapServerHostLdapHostnameState | undefined;
            resourceInputs["base"] = state ? state.base : undefined;
            resourceInputs["cnValue"] = state ? state.cnValue : undefined;
            resourceInputs["dnValue"] = state ? state.dnValue : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainCfg"] = state ? state.domainCfg : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["hostnameCfg"] = state ? state.hostnameCfg : undefined;
            resourceInputs["portCfg"] = state ? state.portCfg : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as LdapServerHostLdapHostnameArgs | undefined;
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["base"] = args ? args.base : undefined;
            resourceInputs["cnValue"] = args ? args.cnValue : undefined;
            resourceInputs["dnValue"] = args ? args.dnValue : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainCfg"] = args ? args.domainCfg : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["hostnameCfg"] = args ? args.hostnameCfg : undefined;
            resourceInputs["portCfg"] = args ? args.portCfg : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LdapServerHostLdapHostname.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LdapServerHostLdapHostname resources.
 */
export interface LdapServerHostLdapHostnameState {
    /**
     * Configure the group DN which user belongs to
     */
    base?: pulumi.Input<string>;
    /**
     * LDAP common name identifier (i.e.: cn, uid)
     */
    cnValue?: pulumi.Input<string>;
    /**
     * LDAP distinguished name (dn)
     */
    dnValue?: pulumi.Input<string>;
    /**
     * Configure AD domain name
     */
    domain?: pulumi.Input<string>;
    domainCfg?: pulumi.Input<inputs.LdapServerHostLdapHostnameDomainCfg>;
    /**
     * Configure the group DN which user belongs to
     */
    group?: pulumi.Input<string>;
    /**
     * Hostname of LDAP server
     */
    hostname?: pulumi.Input<string>;
    hostnameCfg?: pulumi.Input<inputs.LdapServerHostLdapHostnameHostnameCfg>;
    portCfg?: pulumi.Input<inputs.LdapServerHostLdapHostnamePortCfg>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LdapServerHostLdapHostname resource.
 */
export interface LdapServerHostLdapHostnameArgs {
    /**
     * Configure the group DN which user belongs to
     */
    base?: pulumi.Input<string>;
    /**
     * LDAP common name identifier (i.e.: cn, uid)
     */
    cnValue?: pulumi.Input<string>;
    /**
     * LDAP distinguished name (dn)
     */
    dnValue?: pulumi.Input<string>;
    /**
     * Configure AD domain name
     */
    domain?: pulumi.Input<string>;
    domainCfg?: pulumi.Input<inputs.LdapServerHostLdapHostnameDomainCfg>;
    /**
     * Configure the group DN which user belongs to
     */
    group?: pulumi.Input<string>;
    /**
     * Hostname of LDAP server
     */
    hostname: pulumi.Input<string>;
    hostnameCfg?: pulumi.Input<inputs.LdapServerHostLdapHostnameHostnameCfg>;
    portCfg?: pulumi.Input<inputs.LdapServerHostLdapHostnamePortCfg>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
