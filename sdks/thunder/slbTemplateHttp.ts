// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateHttp extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateHttp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateHttpState, opts?: pulumi.CustomResourceOptions): SlbTemplateHttp {
        return new SlbTemplateHttp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateHttp:SlbTemplateHttp';

    /**
     * Returns true if the given object is an instance of SlbTemplateHttp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateHttp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateHttp.__pulumiType;
    }

    /**
     * Enable allowed-method check (List of allowed HTTP methods)
     */
    public readonly allowedMethods!: pulumi.Output<string | undefined>;
    /**
     * 'drop': Respond 400 directly;
     */
    public readonly allowedMethodsAction!: pulumi.Output<string | undefined>;
    /**
     * Select service group for non-http traffic (Service Group Name)
     */
    public readonly bypassSg!: pulumi.Output<string | undefined>;
    /**
     * Client session timeout if the next request is not received (timeout in seconds. 0 means disable, default is 0)
     */
    public readonly clientIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Replace the existing header
     */
    public readonly clientIpHdrReplace!: pulumi.Output<number | undefined>;
    /**
     * Replace the existing header
     */
    public readonly clientPortHdrReplace!: pulumi.Output<number | undefined>;
    /**
     * Auto-disable software compression on high cpu usage (Disable compression if cpu usage is above threshold. Default is
     * off.)
     */
    public readonly compressionAutoDisableOnHighCpu!: pulumi.Output<number | undefined>;
    /**
     * brotli compression level, default 1 (brotli compression level value, default is 1)
     */
    public readonly compressionBrLevel!: pulumi.Output<number | undefined>;
    /**
     * brotli compression sliding window size, default 10 (brotli compression sliding window size in the form of log (i.e., 10
     * means 1k-16MB bytes))
     */
    public readonly compressionBrSlidingWindowSize!: pulumi.Output<number | undefined>;
    public readonly compressionContentTypes!: pulumi.Output<outputs.SlbTemplateHttpCompressionContentType[] | undefined>;
    /**
     * Enable Compression
     */
    public readonly compressionEnable!: pulumi.Output<number | undefined>;
    public readonly compressionExcludeContentTypes!: pulumi.Output<outputs.SlbTemplateHttpCompressionExcludeContentType[] | undefined>;
    public readonly compressionExcludeUris!: pulumi.Output<outputs.SlbTemplateHttpCompressionExcludeUri[] | undefined>;
    /**
     * Keep accept encoding
     */
    public readonly compressionKeepAcceptEncoding!: pulumi.Output<number | undefined>;
    /**
     * Enable Server Accept Encoding
     */
    public readonly compressionKeepAcceptEncodingEnable!: pulumi.Output<number | undefined>;
    /**
     * gzip compression level, default 1 (gzip compression level value, default is 1)
     */
    public readonly compressionLevel!: pulumi.Output<number | undefined>;
    /**
     * Method Order (Order to decide which compression algorithm to be applied when multiple algorithms are acceptable)
     */
    public readonly compressionMethodOrder!: pulumi.Output<string | undefined>;
    /**
     * Minimum Content Length (Minimum content length for compression in bytes. Default is 120.)
     */
    public readonly compressionMinimumContentLength!: pulumi.Output<number | undefined>;
    /**
     * When REQ has Expect 100 and response is not 100, then wait for whole request to be sent
     */
    public readonly contWaitForReqComplete100!: pulumi.Output<number | undefined>;
    /**
     * 'rfc6265': Follow rfc6265;
     */
    public readonly cookieFormat!: pulumi.Output<string | undefined>;
    /**
     * 'none': none; 'lax': lax; 'strict': strict;
     */
    public readonly cookieSamesite!: pulumi.Output<string | undefined>;
    /**
     * 'iso-8859-1': Use ISO-8859-1 as the default charset; 'utf-8': Use UTF-8 as the default charset; 'us-ascii': Use US-ASCII
     * as the default charset;
     */
    public readonly defaultCharset!: pulumi.Output<string | undefined>;
    /**
     * Enable disallowed-method check (List of disallowed HTTP methods)
     */
    public readonly disallowedMethods!: pulumi.Output<string | undefined>;
    /**
     * 'drop': Respond 400 directly;
     */
    public readonly disallowedMethodsAction!: pulumi.Output<string | undefined>;
    /**
     * Failover to this URL (Failover URL Name)
     */
    public readonly failoverUrl!: pulumi.Output<string | undefined>;
    /**
     * Limit the number of CONTINUATION, PING, PRIORITY, RESET, SETTINGS and empty frames in one HTTP2 connection, default
     * 10000
     */
    public readonly frameLimit!: pulumi.Output<number | undefined>;
    public readonly hostSwitchings!: pulumi.Output<outputs.SlbTemplateHttpHostSwitching[] | undefined>;
    /**
     * Set max-concurrent-stream = 1 when the client side is HTTP2 and no source-nat configuration is under vport
     */
    public readonly http2ClientNoSnat!: pulumi.Output<number | undefined>;
    public readonly httpProtocolCheck!: pulumi.Output<outputs.SlbTemplateHttpHttpProtocolCheck | undefined>;
    /**
     * Insert Client IP address into HTTP header
     */
    public readonly insertClientIp!: pulumi.Output<number | undefined>;
    /**
     * HTTP Header Name for inserting Client IP
     */
    public readonly insertClientIpHeaderName!: pulumi.Output<string | undefined>;
    /**
     * Insert Client Port address into HTTP header
     */
    public readonly insertClientPort!: pulumi.Output<number | undefined>;
    /**
     * HTTP Header Name for inserting Client Port
     */
    public readonly insertClientPortHeaderName!: pulumi.Output<string | undefined>;
    /**
     * Keep client alive
     */
    public readonly keepClientAlive!: pulumi.Output<number | undefined>;
    /**
     * log when HTTP request retry
     */
    public readonly logRetry!: pulumi.Output<number | undefined>;
    /**
     * (http2 only) Max concurrent streams, default 50
     */
    public readonly maxConcurrentStreams!: pulumi.Output<number | undefined>;
    /**
     * HTTP Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Bypass non-http traffic instead of dropping
     */
    public readonly nonHttpBypass!: pulumi.Output<number | undefined>;
    /**
     * Persist to the same server if the response code is 401
     */
    public readonly persistOn401!: pulumi.Output<number | undefined>;
    /**
     * 'host': the cookie will have been set with a Secure attribute, a Path attribute with a value of /, and no Domain
     * attribute; 'secure': the cookie will have been set with a Secure attribute; 'check': check server prefix and enforce
     * prefix format;
     */
    public readonly prefix!: pulumi.Output<string | undefined>;
    /**
     * Port (Port Number)
     */
    public readonly rdPort!: pulumi.Output<number | undefined>;
    /**
     * '301': Moved Permanently; '302': Found; '303': See Other; '307': Temporary Redirect;
     */
    public readonly rdRespCode!: pulumi.Output<string | undefined>;
    /**
     * Use HTTPS
     */
    public readonly rdSecure!: pulumi.Output<number | undefined>;
    /**
     * Redirect location tag absolute URI string
     */
    public readonly rdSimpleLoc!: pulumi.Output<string | undefined>;
    /**
     * Automatically send a redirect response
     */
    public readonly redirect!: pulumi.Output<number | undefined>;
    public readonly redirectRewrite!: pulumi.Output<outputs.SlbTemplateHttpRedirectRewrite | undefined>;
    /**
     * HTTP request header wait time before abort connection
     */
    public readonly reqHdrWaitTime!: pulumi.Output<number | undefined>;
    /**
     * Number of seconds wait for client request header (default is 7)
     */
    public readonly reqHdrWaitTimeVal!: pulumi.Output<number | undefined>;
    public readonly requestHeaderEraseLists!: pulumi.Output<outputs.SlbTemplateHttpRequestHeaderEraseList[] | undefined>;
    public readonly requestHeaderInsertLists!: pulumi.Output<outputs.SlbTemplateHttpRequestHeaderInsertList[] | undefined>;
    /**
     * Parse http request line as case insensitive
     */
    public readonly requestLineCaseInsensitive!: pulumi.Output<number | undefined>;
    /**
     * Request timeout if response not received (timeout in seconds)
     */
    public readonly requestTimeout!: pulumi.Output<number | undefined>;
    public readonly responseContentReplaceLists!: pulumi.Output<outputs.SlbTemplateHttpResponseContentReplaceList[] | undefined>;
    public readonly responseHeaderEraseLists!: pulumi.Output<outputs.SlbTemplateHttpResponseHeaderEraseList[] | undefined>;
    public readonly responseHeaderInsertLists!: pulumi.Output<outputs.SlbTemplateHttpResponseHeaderInsertList[] | undefined>;
    /**
     * Retry http request on HTTP 5xx code and request timeout
     */
    public readonly retryOn5xx!: pulumi.Output<number | undefined>;
    /**
     * Retry http request on HTTP 5xx code for each request
     */
    public readonly retryOn5xxPerReq!: pulumi.Output<number | undefined>;
    /**
     * Number of times to retry (default is 3)
     */
    public readonly retryOn5xxPerReqVal!: pulumi.Output<number | undefined>;
    /**
     * Number of times to retry (default is 3)
     */
    public readonly retryOn5xxVal!: pulumi.Output<number | undefined>;
    /**
     * Notify the vport regarding whether server supports http2 only
     */
    public readonly serverSupportHttp2Only!: pulumi.Output<number | undefined>;
    /**
     * 'auto-detect': Commuincate with the server via HTTP/2 when an support-http2-only rport is detected; 'force': Communicate
     * with the server via HTTP/2 when possible;
     */
    public readonly serverSupportHttp2OnlyValue!: pulumi.Output<string | undefined>;
    /**
     * cancellation limit, default 0 (accumulated cancellation limit value, default is 0)
     */
    public readonly streamCancellationLimit!: pulumi.Output<number | undefined>;
    /**
     * cancellation rate, default 10 (cancellation rate value, default is 10)
     */
    public readonly streamCancellationRate!: pulumi.Output<number | undefined>;
    /**
     * Force server selection on every HTTP request
     */
    public readonly strictTransactionSwitch!: pulumi.Output<number | undefined>;
    public readonly template!: pulumi.Output<outputs.SlbTemplateHttpTemplate | undefined>;
    /**
     * Terminate HTTP 1.1 client when req has Connection: close
     */
    public readonly term11clientHdrConnClose!: pulumi.Output<number | undefined>;
    /**
     * Use the begining part of URL to calculate hash value (URL string length to calculate hash value)
     */
    public readonly urlHashFirst!: pulumi.Output<number | undefined>;
    /**
     * Use the end part of URL to calculate hash value (URL string length to calculate hash value)
     */
    public readonly urlHashLast!: pulumi.Output<number | undefined>;
    /**
     * Skip part of URL to calculate hash value (Offset of the URL string)
     */
    public readonly urlHashOffset!: pulumi.Output<number | undefined>;
    /**
     * Use URL's hash value to select server
     */
    public readonly urlHashPersist!: pulumi.Output<number | undefined>;
    public readonly urlSwitchings!: pulumi.Output<outputs.SlbTemplateHttpUrlSwitching[] | undefined>;
    /**
     * Use Server-Status header to do URL hashing
     */
    public readonly useServerStatus!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateHttp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateHttpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateHttpArgs | SlbTemplateHttpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateHttpState | undefined;
            resourceInputs["allowedMethods"] = state ? state.allowedMethods : undefined;
            resourceInputs["allowedMethodsAction"] = state ? state.allowedMethodsAction : undefined;
            resourceInputs["bypassSg"] = state ? state.bypassSg : undefined;
            resourceInputs["clientIdleTimeout"] = state ? state.clientIdleTimeout : undefined;
            resourceInputs["clientIpHdrReplace"] = state ? state.clientIpHdrReplace : undefined;
            resourceInputs["clientPortHdrReplace"] = state ? state.clientPortHdrReplace : undefined;
            resourceInputs["compressionAutoDisableOnHighCpu"] = state ? state.compressionAutoDisableOnHighCpu : undefined;
            resourceInputs["compressionBrLevel"] = state ? state.compressionBrLevel : undefined;
            resourceInputs["compressionBrSlidingWindowSize"] = state ? state.compressionBrSlidingWindowSize : undefined;
            resourceInputs["compressionContentTypes"] = state ? state.compressionContentTypes : undefined;
            resourceInputs["compressionEnable"] = state ? state.compressionEnable : undefined;
            resourceInputs["compressionExcludeContentTypes"] = state ? state.compressionExcludeContentTypes : undefined;
            resourceInputs["compressionExcludeUris"] = state ? state.compressionExcludeUris : undefined;
            resourceInputs["compressionKeepAcceptEncoding"] = state ? state.compressionKeepAcceptEncoding : undefined;
            resourceInputs["compressionKeepAcceptEncodingEnable"] = state ? state.compressionKeepAcceptEncodingEnable : undefined;
            resourceInputs["compressionLevel"] = state ? state.compressionLevel : undefined;
            resourceInputs["compressionMethodOrder"] = state ? state.compressionMethodOrder : undefined;
            resourceInputs["compressionMinimumContentLength"] = state ? state.compressionMinimumContentLength : undefined;
            resourceInputs["contWaitForReqComplete100"] = state ? state.contWaitForReqComplete100 : undefined;
            resourceInputs["cookieFormat"] = state ? state.cookieFormat : undefined;
            resourceInputs["cookieSamesite"] = state ? state.cookieSamesite : undefined;
            resourceInputs["defaultCharset"] = state ? state.defaultCharset : undefined;
            resourceInputs["disallowedMethods"] = state ? state.disallowedMethods : undefined;
            resourceInputs["disallowedMethodsAction"] = state ? state.disallowedMethodsAction : undefined;
            resourceInputs["failoverUrl"] = state ? state.failoverUrl : undefined;
            resourceInputs["frameLimit"] = state ? state.frameLimit : undefined;
            resourceInputs["hostSwitchings"] = state ? state.hostSwitchings : undefined;
            resourceInputs["http2ClientNoSnat"] = state ? state.http2ClientNoSnat : undefined;
            resourceInputs["httpProtocolCheck"] = state ? state.httpProtocolCheck : undefined;
            resourceInputs["insertClientIp"] = state ? state.insertClientIp : undefined;
            resourceInputs["insertClientIpHeaderName"] = state ? state.insertClientIpHeaderName : undefined;
            resourceInputs["insertClientPort"] = state ? state.insertClientPort : undefined;
            resourceInputs["insertClientPortHeaderName"] = state ? state.insertClientPortHeaderName : undefined;
            resourceInputs["keepClientAlive"] = state ? state.keepClientAlive : undefined;
            resourceInputs["logRetry"] = state ? state.logRetry : undefined;
            resourceInputs["maxConcurrentStreams"] = state ? state.maxConcurrentStreams : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonHttpBypass"] = state ? state.nonHttpBypass : undefined;
            resourceInputs["persistOn401"] = state ? state.persistOn401 : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["rdPort"] = state ? state.rdPort : undefined;
            resourceInputs["rdRespCode"] = state ? state.rdRespCode : undefined;
            resourceInputs["rdSecure"] = state ? state.rdSecure : undefined;
            resourceInputs["rdSimpleLoc"] = state ? state.rdSimpleLoc : undefined;
            resourceInputs["redirect"] = state ? state.redirect : undefined;
            resourceInputs["redirectRewrite"] = state ? state.redirectRewrite : undefined;
            resourceInputs["reqHdrWaitTime"] = state ? state.reqHdrWaitTime : undefined;
            resourceInputs["reqHdrWaitTimeVal"] = state ? state.reqHdrWaitTimeVal : undefined;
            resourceInputs["requestHeaderEraseLists"] = state ? state.requestHeaderEraseLists : undefined;
            resourceInputs["requestHeaderInsertLists"] = state ? state.requestHeaderInsertLists : undefined;
            resourceInputs["requestLineCaseInsensitive"] = state ? state.requestLineCaseInsensitive : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["responseContentReplaceLists"] = state ? state.responseContentReplaceLists : undefined;
            resourceInputs["responseHeaderEraseLists"] = state ? state.responseHeaderEraseLists : undefined;
            resourceInputs["responseHeaderInsertLists"] = state ? state.responseHeaderInsertLists : undefined;
            resourceInputs["retryOn5xx"] = state ? state.retryOn5xx : undefined;
            resourceInputs["retryOn5xxPerReq"] = state ? state.retryOn5xxPerReq : undefined;
            resourceInputs["retryOn5xxPerReqVal"] = state ? state.retryOn5xxPerReqVal : undefined;
            resourceInputs["retryOn5xxVal"] = state ? state.retryOn5xxVal : undefined;
            resourceInputs["serverSupportHttp2Only"] = state ? state.serverSupportHttp2Only : undefined;
            resourceInputs["serverSupportHttp2OnlyValue"] = state ? state.serverSupportHttp2OnlyValue : undefined;
            resourceInputs["streamCancellationLimit"] = state ? state.streamCancellationLimit : undefined;
            resourceInputs["streamCancellationRate"] = state ? state.streamCancellationRate : undefined;
            resourceInputs["strictTransactionSwitch"] = state ? state.strictTransactionSwitch : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["term11clientHdrConnClose"] = state ? state.term11clientHdrConnClose : undefined;
            resourceInputs["urlHashFirst"] = state ? state.urlHashFirst : undefined;
            resourceInputs["urlHashLast"] = state ? state.urlHashLast : undefined;
            resourceInputs["urlHashOffset"] = state ? state.urlHashOffset : undefined;
            resourceInputs["urlHashPersist"] = state ? state.urlHashPersist : undefined;
            resourceInputs["urlSwitchings"] = state ? state.urlSwitchings : undefined;
            resourceInputs["useServerStatus"] = state ? state.useServerStatus : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateHttpArgs | undefined;
            resourceInputs["allowedMethods"] = args ? args.allowedMethods : undefined;
            resourceInputs["allowedMethodsAction"] = args ? args.allowedMethodsAction : undefined;
            resourceInputs["bypassSg"] = args ? args.bypassSg : undefined;
            resourceInputs["clientIdleTimeout"] = args ? args.clientIdleTimeout : undefined;
            resourceInputs["clientIpHdrReplace"] = args ? args.clientIpHdrReplace : undefined;
            resourceInputs["clientPortHdrReplace"] = args ? args.clientPortHdrReplace : undefined;
            resourceInputs["compressionAutoDisableOnHighCpu"] = args ? args.compressionAutoDisableOnHighCpu : undefined;
            resourceInputs["compressionBrLevel"] = args ? args.compressionBrLevel : undefined;
            resourceInputs["compressionBrSlidingWindowSize"] = args ? args.compressionBrSlidingWindowSize : undefined;
            resourceInputs["compressionContentTypes"] = args ? args.compressionContentTypes : undefined;
            resourceInputs["compressionEnable"] = args ? args.compressionEnable : undefined;
            resourceInputs["compressionExcludeContentTypes"] = args ? args.compressionExcludeContentTypes : undefined;
            resourceInputs["compressionExcludeUris"] = args ? args.compressionExcludeUris : undefined;
            resourceInputs["compressionKeepAcceptEncoding"] = args ? args.compressionKeepAcceptEncoding : undefined;
            resourceInputs["compressionKeepAcceptEncodingEnable"] = args ? args.compressionKeepAcceptEncodingEnable : undefined;
            resourceInputs["compressionLevel"] = args ? args.compressionLevel : undefined;
            resourceInputs["compressionMethodOrder"] = args ? args.compressionMethodOrder : undefined;
            resourceInputs["compressionMinimumContentLength"] = args ? args.compressionMinimumContentLength : undefined;
            resourceInputs["contWaitForReqComplete100"] = args ? args.contWaitForReqComplete100 : undefined;
            resourceInputs["cookieFormat"] = args ? args.cookieFormat : undefined;
            resourceInputs["cookieSamesite"] = args ? args.cookieSamesite : undefined;
            resourceInputs["defaultCharset"] = args ? args.defaultCharset : undefined;
            resourceInputs["disallowedMethods"] = args ? args.disallowedMethods : undefined;
            resourceInputs["disallowedMethodsAction"] = args ? args.disallowedMethodsAction : undefined;
            resourceInputs["failoverUrl"] = args ? args.failoverUrl : undefined;
            resourceInputs["frameLimit"] = args ? args.frameLimit : undefined;
            resourceInputs["hostSwitchings"] = args ? args.hostSwitchings : undefined;
            resourceInputs["http2ClientNoSnat"] = args ? args.http2ClientNoSnat : undefined;
            resourceInputs["httpProtocolCheck"] = args ? args.httpProtocolCheck : undefined;
            resourceInputs["insertClientIp"] = args ? args.insertClientIp : undefined;
            resourceInputs["insertClientIpHeaderName"] = args ? args.insertClientIpHeaderName : undefined;
            resourceInputs["insertClientPort"] = args ? args.insertClientPort : undefined;
            resourceInputs["insertClientPortHeaderName"] = args ? args.insertClientPortHeaderName : undefined;
            resourceInputs["keepClientAlive"] = args ? args.keepClientAlive : undefined;
            resourceInputs["logRetry"] = args ? args.logRetry : undefined;
            resourceInputs["maxConcurrentStreams"] = args ? args.maxConcurrentStreams : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nonHttpBypass"] = args ? args.nonHttpBypass : undefined;
            resourceInputs["persistOn401"] = args ? args.persistOn401 : undefined;
            resourceInputs["prefix"] = args ? args.prefix : undefined;
            resourceInputs["rdPort"] = args ? args.rdPort : undefined;
            resourceInputs["rdRespCode"] = args ? args.rdRespCode : undefined;
            resourceInputs["rdSecure"] = args ? args.rdSecure : undefined;
            resourceInputs["rdSimpleLoc"] = args ? args.rdSimpleLoc : undefined;
            resourceInputs["redirect"] = args ? args.redirect : undefined;
            resourceInputs["redirectRewrite"] = args ? args.redirectRewrite : undefined;
            resourceInputs["reqHdrWaitTime"] = args ? args.reqHdrWaitTime : undefined;
            resourceInputs["reqHdrWaitTimeVal"] = args ? args.reqHdrWaitTimeVal : undefined;
            resourceInputs["requestHeaderEraseLists"] = args ? args.requestHeaderEraseLists : undefined;
            resourceInputs["requestHeaderInsertLists"] = args ? args.requestHeaderInsertLists : undefined;
            resourceInputs["requestLineCaseInsensitive"] = args ? args.requestLineCaseInsensitive : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["responseContentReplaceLists"] = args ? args.responseContentReplaceLists : undefined;
            resourceInputs["responseHeaderEraseLists"] = args ? args.responseHeaderEraseLists : undefined;
            resourceInputs["responseHeaderInsertLists"] = args ? args.responseHeaderInsertLists : undefined;
            resourceInputs["retryOn5xx"] = args ? args.retryOn5xx : undefined;
            resourceInputs["retryOn5xxPerReq"] = args ? args.retryOn5xxPerReq : undefined;
            resourceInputs["retryOn5xxPerReqVal"] = args ? args.retryOn5xxPerReqVal : undefined;
            resourceInputs["retryOn5xxVal"] = args ? args.retryOn5xxVal : undefined;
            resourceInputs["serverSupportHttp2Only"] = args ? args.serverSupportHttp2Only : undefined;
            resourceInputs["serverSupportHttp2OnlyValue"] = args ? args.serverSupportHttp2OnlyValue : undefined;
            resourceInputs["streamCancellationLimit"] = args ? args.streamCancellationLimit : undefined;
            resourceInputs["streamCancellationRate"] = args ? args.streamCancellationRate : undefined;
            resourceInputs["strictTransactionSwitch"] = args ? args.strictTransactionSwitch : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["term11clientHdrConnClose"] = args ? args.term11clientHdrConnClose : undefined;
            resourceInputs["urlHashFirst"] = args ? args.urlHashFirst : undefined;
            resourceInputs["urlHashLast"] = args ? args.urlHashLast : undefined;
            resourceInputs["urlHashOffset"] = args ? args.urlHashOffset : undefined;
            resourceInputs["urlHashPersist"] = args ? args.urlHashPersist : undefined;
            resourceInputs["urlSwitchings"] = args ? args.urlSwitchings : undefined;
            resourceInputs["useServerStatus"] = args ? args.useServerStatus : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateHttp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateHttp resources.
 */
export interface SlbTemplateHttpState {
    /**
     * Enable allowed-method check (List of allowed HTTP methods)
     */
    allowedMethods?: pulumi.Input<string>;
    /**
     * 'drop': Respond 400 directly;
     */
    allowedMethodsAction?: pulumi.Input<string>;
    /**
     * Select service group for non-http traffic (Service Group Name)
     */
    bypassSg?: pulumi.Input<string>;
    /**
     * Client session timeout if the next request is not received (timeout in seconds. 0 means disable, default is 0)
     */
    clientIdleTimeout?: pulumi.Input<number>;
    /**
     * Replace the existing header
     */
    clientIpHdrReplace?: pulumi.Input<number>;
    /**
     * Replace the existing header
     */
    clientPortHdrReplace?: pulumi.Input<number>;
    /**
     * Auto-disable software compression on high cpu usage (Disable compression if cpu usage is above threshold. Default is
     * off.)
     */
    compressionAutoDisableOnHighCpu?: pulumi.Input<number>;
    /**
     * brotli compression level, default 1 (brotli compression level value, default is 1)
     */
    compressionBrLevel?: pulumi.Input<number>;
    /**
     * brotli compression sliding window size, default 10 (brotli compression sliding window size in the form of log (i.e., 10
     * means 1k-16MB bytes))
     */
    compressionBrSlidingWindowSize?: pulumi.Input<number>;
    compressionContentTypes?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpCompressionContentType>[]>;
    /**
     * Enable Compression
     */
    compressionEnable?: pulumi.Input<number>;
    compressionExcludeContentTypes?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpCompressionExcludeContentType>[]>;
    compressionExcludeUris?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpCompressionExcludeUri>[]>;
    /**
     * Keep accept encoding
     */
    compressionKeepAcceptEncoding?: pulumi.Input<number>;
    /**
     * Enable Server Accept Encoding
     */
    compressionKeepAcceptEncodingEnable?: pulumi.Input<number>;
    /**
     * gzip compression level, default 1 (gzip compression level value, default is 1)
     */
    compressionLevel?: pulumi.Input<number>;
    /**
     * Method Order (Order to decide which compression algorithm to be applied when multiple algorithms are acceptable)
     */
    compressionMethodOrder?: pulumi.Input<string>;
    /**
     * Minimum Content Length (Minimum content length for compression in bytes. Default is 120.)
     */
    compressionMinimumContentLength?: pulumi.Input<number>;
    /**
     * When REQ has Expect 100 and response is not 100, then wait for whole request to be sent
     */
    contWaitForReqComplete100?: pulumi.Input<number>;
    /**
     * 'rfc6265': Follow rfc6265;
     */
    cookieFormat?: pulumi.Input<string>;
    /**
     * 'none': none; 'lax': lax; 'strict': strict;
     */
    cookieSamesite?: pulumi.Input<string>;
    /**
     * 'iso-8859-1': Use ISO-8859-1 as the default charset; 'utf-8': Use UTF-8 as the default charset; 'us-ascii': Use US-ASCII
     * as the default charset;
     */
    defaultCharset?: pulumi.Input<string>;
    /**
     * Enable disallowed-method check (List of disallowed HTTP methods)
     */
    disallowedMethods?: pulumi.Input<string>;
    /**
     * 'drop': Respond 400 directly;
     */
    disallowedMethodsAction?: pulumi.Input<string>;
    /**
     * Failover to this URL (Failover URL Name)
     */
    failoverUrl?: pulumi.Input<string>;
    /**
     * Limit the number of CONTINUATION, PING, PRIORITY, RESET, SETTINGS and empty frames in one HTTP2 connection, default
     * 10000
     */
    frameLimit?: pulumi.Input<number>;
    hostSwitchings?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpHostSwitching>[]>;
    /**
     * Set max-concurrent-stream = 1 when the client side is HTTP2 and no source-nat configuration is under vport
     */
    http2ClientNoSnat?: pulumi.Input<number>;
    httpProtocolCheck?: pulumi.Input<inputs.SlbTemplateHttpHttpProtocolCheck>;
    /**
     * Insert Client IP address into HTTP header
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * HTTP Header Name for inserting Client IP
     */
    insertClientIpHeaderName?: pulumi.Input<string>;
    /**
     * Insert Client Port address into HTTP header
     */
    insertClientPort?: pulumi.Input<number>;
    /**
     * HTTP Header Name for inserting Client Port
     */
    insertClientPortHeaderName?: pulumi.Input<string>;
    /**
     * Keep client alive
     */
    keepClientAlive?: pulumi.Input<number>;
    /**
     * log when HTTP request retry
     */
    logRetry?: pulumi.Input<number>;
    /**
     * (http2 only) Max concurrent streams, default 50
     */
    maxConcurrentStreams?: pulumi.Input<number>;
    /**
     * HTTP Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Bypass non-http traffic instead of dropping
     */
    nonHttpBypass?: pulumi.Input<number>;
    /**
     * Persist to the same server if the response code is 401
     */
    persistOn401?: pulumi.Input<number>;
    /**
     * 'host': the cookie will have been set with a Secure attribute, a Path attribute with a value of /, and no Domain
     * attribute; 'secure': the cookie will have been set with a Secure attribute; 'check': check server prefix and enforce
     * prefix format;
     */
    prefix?: pulumi.Input<string>;
    /**
     * Port (Port Number)
     */
    rdPort?: pulumi.Input<number>;
    /**
     * '301': Moved Permanently; '302': Found; '303': See Other; '307': Temporary Redirect;
     */
    rdRespCode?: pulumi.Input<string>;
    /**
     * Use HTTPS
     */
    rdSecure?: pulumi.Input<number>;
    /**
     * Redirect location tag absolute URI string
     */
    rdSimpleLoc?: pulumi.Input<string>;
    /**
     * Automatically send a redirect response
     */
    redirect?: pulumi.Input<number>;
    redirectRewrite?: pulumi.Input<inputs.SlbTemplateHttpRedirectRewrite>;
    /**
     * HTTP request header wait time before abort connection
     */
    reqHdrWaitTime?: pulumi.Input<number>;
    /**
     * Number of seconds wait for client request header (default is 7)
     */
    reqHdrWaitTimeVal?: pulumi.Input<number>;
    requestHeaderEraseLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpRequestHeaderEraseList>[]>;
    requestHeaderInsertLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpRequestHeaderInsertList>[]>;
    /**
     * Parse http request line as case insensitive
     */
    requestLineCaseInsensitive?: pulumi.Input<number>;
    /**
     * Request timeout if response not received (timeout in seconds)
     */
    requestTimeout?: pulumi.Input<number>;
    responseContentReplaceLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpResponseContentReplaceList>[]>;
    responseHeaderEraseLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpResponseHeaderEraseList>[]>;
    responseHeaderInsertLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpResponseHeaderInsertList>[]>;
    /**
     * Retry http request on HTTP 5xx code and request timeout
     */
    retryOn5xx?: pulumi.Input<number>;
    /**
     * Retry http request on HTTP 5xx code for each request
     */
    retryOn5xxPerReq?: pulumi.Input<number>;
    /**
     * Number of times to retry (default is 3)
     */
    retryOn5xxPerReqVal?: pulumi.Input<number>;
    /**
     * Number of times to retry (default is 3)
     */
    retryOn5xxVal?: pulumi.Input<number>;
    /**
     * Notify the vport regarding whether server supports http2 only
     */
    serverSupportHttp2Only?: pulumi.Input<number>;
    /**
     * 'auto-detect': Commuincate with the server via HTTP/2 when an support-http2-only rport is detected; 'force': Communicate
     * with the server via HTTP/2 when possible;
     */
    serverSupportHttp2OnlyValue?: pulumi.Input<string>;
    /**
     * cancellation limit, default 0 (accumulated cancellation limit value, default is 0)
     */
    streamCancellationLimit?: pulumi.Input<number>;
    /**
     * cancellation rate, default 10 (cancellation rate value, default is 10)
     */
    streamCancellationRate?: pulumi.Input<number>;
    /**
     * Force server selection on every HTTP request
     */
    strictTransactionSwitch?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.SlbTemplateHttpTemplate>;
    /**
     * Terminate HTTP 1.1 client when req has Connection: close
     */
    term11clientHdrConnClose?: pulumi.Input<number>;
    /**
     * Use the begining part of URL to calculate hash value (URL string length to calculate hash value)
     */
    urlHashFirst?: pulumi.Input<number>;
    /**
     * Use the end part of URL to calculate hash value (URL string length to calculate hash value)
     */
    urlHashLast?: pulumi.Input<number>;
    /**
     * Skip part of URL to calculate hash value (Offset of the URL string)
     */
    urlHashOffset?: pulumi.Input<number>;
    /**
     * Use URL's hash value to select server
     */
    urlHashPersist?: pulumi.Input<number>;
    urlSwitchings?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpUrlSwitching>[]>;
    /**
     * Use Server-Status header to do URL hashing
     */
    useServerStatus?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateHttp resource.
 */
export interface SlbTemplateHttpArgs {
    /**
     * Enable allowed-method check (List of allowed HTTP methods)
     */
    allowedMethods?: pulumi.Input<string>;
    /**
     * 'drop': Respond 400 directly;
     */
    allowedMethodsAction?: pulumi.Input<string>;
    /**
     * Select service group for non-http traffic (Service Group Name)
     */
    bypassSg?: pulumi.Input<string>;
    /**
     * Client session timeout if the next request is not received (timeout in seconds. 0 means disable, default is 0)
     */
    clientIdleTimeout?: pulumi.Input<number>;
    /**
     * Replace the existing header
     */
    clientIpHdrReplace?: pulumi.Input<number>;
    /**
     * Replace the existing header
     */
    clientPortHdrReplace?: pulumi.Input<number>;
    /**
     * Auto-disable software compression on high cpu usage (Disable compression if cpu usage is above threshold. Default is
     * off.)
     */
    compressionAutoDisableOnHighCpu?: pulumi.Input<number>;
    /**
     * brotli compression level, default 1 (brotli compression level value, default is 1)
     */
    compressionBrLevel?: pulumi.Input<number>;
    /**
     * brotli compression sliding window size, default 10 (brotli compression sliding window size in the form of log (i.e., 10
     * means 1k-16MB bytes))
     */
    compressionBrSlidingWindowSize?: pulumi.Input<number>;
    compressionContentTypes?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpCompressionContentType>[]>;
    /**
     * Enable Compression
     */
    compressionEnable?: pulumi.Input<number>;
    compressionExcludeContentTypes?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpCompressionExcludeContentType>[]>;
    compressionExcludeUris?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpCompressionExcludeUri>[]>;
    /**
     * Keep accept encoding
     */
    compressionKeepAcceptEncoding?: pulumi.Input<number>;
    /**
     * Enable Server Accept Encoding
     */
    compressionKeepAcceptEncodingEnable?: pulumi.Input<number>;
    /**
     * gzip compression level, default 1 (gzip compression level value, default is 1)
     */
    compressionLevel?: pulumi.Input<number>;
    /**
     * Method Order (Order to decide which compression algorithm to be applied when multiple algorithms are acceptable)
     */
    compressionMethodOrder?: pulumi.Input<string>;
    /**
     * Minimum Content Length (Minimum content length for compression in bytes. Default is 120.)
     */
    compressionMinimumContentLength?: pulumi.Input<number>;
    /**
     * When REQ has Expect 100 and response is not 100, then wait for whole request to be sent
     */
    contWaitForReqComplete100?: pulumi.Input<number>;
    /**
     * 'rfc6265': Follow rfc6265;
     */
    cookieFormat?: pulumi.Input<string>;
    /**
     * 'none': none; 'lax': lax; 'strict': strict;
     */
    cookieSamesite?: pulumi.Input<string>;
    /**
     * 'iso-8859-1': Use ISO-8859-1 as the default charset; 'utf-8': Use UTF-8 as the default charset; 'us-ascii': Use US-ASCII
     * as the default charset;
     */
    defaultCharset?: pulumi.Input<string>;
    /**
     * Enable disallowed-method check (List of disallowed HTTP methods)
     */
    disallowedMethods?: pulumi.Input<string>;
    /**
     * 'drop': Respond 400 directly;
     */
    disallowedMethodsAction?: pulumi.Input<string>;
    /**
     * Failover to this URL (Failover URL Name)
     */
    failoverUrl?: pulumi.Input<string>;
    /**
     * Limit the number of CONTINUATION, PING, PRIORITY, RESET, SETTINGS and empty frames in one HTTP2 connection, default
     * 10000
     */
    frameLimit?: pulumi.Input<number>;
    hostSwitchings?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpHostSwitching>[]>;
    /**
     * Set max-concurrent-stream = 1 when the client side is HTTP2 and no source-nat configuration is under vport
     */
    http2ClientNoSnat?: pulumi.Input<number>;
    httpProtocolCheck?: pulumi.Input<inputs.SlbTemplateHttpHttpProtocolCheck>;
    /**
     * Insert Client IP address into HTTP header
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * HTTP Header Name for inserting Client IP
     */
    insertClientIpHeaderName?: pulumi.Input<string>;
    /**
     * Insert Client Port address into HTTP header
     */
    insertClientPort?: pulumi.Input<number>;
    /**
     * HTTP Header Name for inserting Client Port
     */
    insertClientPortHeaderName?: pulumi.Input<string>;
    /**
     * Keep client alive
     */
    keepClientAlive?: pulumi.Input<number>;
    /**
     * log when HTTP request retry
     */
    logRetry?: pulumi.Input<number>;
    /**
     * (http2 only) Max concurrent streams, default 50
     */
    maxConcurrentStreams?: pulumi.Input<number>;
    /**
     * HTTP Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Bypass non-http traffic instead of dropping
     */
    nonHttpBypass?: pulumi.Input<number>;
    /**
     * Persist to the same server if the response code is 401
     */
    persistOn401?: pulumi.Input<number>;
    /**
     * 'host': the cookie will have been set with a Secure attribute, a Path attribute with a value of /, and no Domain
     * attribute; 'secure': the cookie will have been set with a Secure attribute; 'check': check server prefix and enforce
     * prefix format;
     */
    prefix?: pulumi.Input<string>;
    /**
     * Port (Port Number)
     */
    rdPort?: pulumi.Input<number>;
    /**
     * '301': Moved Permanently; '302': Found; '303': See Other; '307': Temporary Redirect;
     */
    rdRespCode?: pulumi.Input<string>;
    /**
     * Use HTTPS
     */
    rdSecure?: pulumi.Input<number>;
    /**
     * Redirect location tag absolute URI string
     */
    rdSimpleLoc?: pulumi.Input<string>;
    /**
     * Automatically send a redirect response
     */
    redirect?: pulumi.Input<number>;
    redirectRewrite?: pulumi.Input<inputs.SlbTemplateHttpRedirectRewrite>;
    /**
     * HTTP request header wait time before abort connection
     */
    reqHdrWaitTime?: pulumi.Input<number>;
    /**
     * Number of seconds wait for client request header (default is 7)
     */
    reqHdrWaitTimeVal?: pulumi.Input<number>;
    requestHeaderEraseLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpRequestHeaderEraseList>[]>;
    requestHeaderInsertLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpRequestHeaderInsertList>[]>;
    /**
     * Parse http request line as case insensitive
     */
    requestLineCaseInsensitive?: pulumi.Input<number>;
    /**
     * Request timeout if response not received (timeout in seconds)
     */
    requestTimeout?: pulumi.Input<number>;
    responseContentReplaceLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpResponseContentReplaceList>[]>;
    responseHeaderEraseLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpResponseHeaderEraseList>[]>;
    responseHeaderInsertLists?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpResponseHeaderInsertList>[]>;
    /**
     * Retry http request on HTTP 5xx code and request timeout
     */
    retryOn5xx?: pulumi.Input<number>;
    /**
     * Retry http request on HTTP 5xx code for each request
     */
    retryOn5xxPerReq?: pulumi.Input<number>;
    /**
     * Number of times to retry (default is 3)
     */
    retryOn5xxPerReqVal?: pulumi.Input<number>;
    /**
     * Number of times to retry (default is 3)
     */
    retryOn5xxVal?: pulumi.Input<number>;
    /**
     * Notify the vport regarding whether server supports http2 only
     */
    serverSupportHttp2Only?: pulumi.Input<number>;
    /**
     * 'auto-detect': Commuincate with the server via HTTP/2 when an support-http2-only rport is detected; 'force': Communicate
     * with the server via HTTP/2 when possible;
     */
    serverSupportHttp2OnlyValue?: pulumi.Input<string>;
    /**
     * cancellation limit, default 0 (accumulated cancellation limit value, default is 0)
     */
    streamCancellationLimit?: pulumi.Input<number>;
    /**
     * cancellation rate, default 10 (cancellation rate value, default is 10)
     */
    streamCancellationRate?: pulumi.Input<number>;
    /**
     * Force server selection on every HTTP request
     */
    strictTransactionSwitch?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.SlbTemplateHttpTemplate>;
    /**
     * Terminate HTTP 1.1 client when req has Connection: close
     */
    term11clientHdrConnClose?: pulumi.Input<number>;
    /**
     * Use the begining part of URL to calculate hash value (URL string length to calculate hash value)
     */
    urlHashFirst?: pulumi.Input<number>;
    /**
     * Use the end part of URL to calculate hash value (URL string length to calculate hash value)
     */
    urlHashLast?: pulumi.Input<number>;
    /**
     * Skip part of URL to calculate hash value (Offset of the URL string)
     */
    urlHashOffset?: pulumi.Input<number>;
    /**
     * Use URL's hash value to select server
     */
    urlHashPersist?: pulumi.Input<number>;
    urlSwitchings?: pulumi.Input<pulumi.Input<inputs.SlbTemplateHttpUrlSwitching>[]>;
    /**
     * Use Server-Status header to do URL hashing
     */
    useServerStatus?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
