// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosZoneTemplateHttpFilter extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneTemplateHttpFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneTemplateHttpFilterState, opts?: pulumi.CustomResourceOptions): DdosZoneTemplateHttpFilter {
        return new DdosZoneTemplateHttpFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneTemplateHttpFilter:DdosZoneTemplateHttpFilter';

    /**
     * Returns true if the given object is an instance of DdosZoneTemplateHttpFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneTemplateHttpFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneTemplateHttpFilter.__pulumiType;
    }

    public readonly dst!: pulumi.Output<outputs.DdosZoneTemplateHttpFilterDst | undefined>;
    public readonly httpAgentCfg!: pulumi.Output<outputs.DdosZoneTemplateHttpFilterHttpAgentCfg | undefined>;
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src; 'reset': Reset client connection;
     */
    public readonly httpFilterAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take
     */
    public readonly httpFilterActionListName!: pulumi.Output<string | undefined>;
    public readonly httpFilterName!: pulumi.Output<string>;
    /**
     * Sequence number
     */
    public readonly httpFilterSeq!: pulumi.Output<number | undefined>;
    public readonly httpHeaderCfg!: pulumi.Output<outputs.DdosZoneTemplateHttpFilterHttpHeaderCfg | undefined>;
    public readonly httpRefererCfg!: pulumi.Output<outputs.DdosZoneTemplateHttpFilterHttpRefererCfg | undefined>;
    /**
     * HttpTmplName
     */
    public readonly httpTmplName!: pulumi.Output<string>;
    public readonly httpUriCfg!: pulumi.Output<outputs.DdosZoneTemplateHttpFilterHttpUriCfg | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosZoneTemplateHttpFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneTemplateHttpFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneTemplateHttpFilterArgs | DdosZoneTemplateHttpFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneTemplateHttpFilterState | undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["httpAgentCfg"] = state ? state.httpAgentCfg : undefined;
            resourceInputs["httpFilterAction"] = state ? state.httpFilterAction : undefined;
            resourceInputs["httpFilterActionListName"] = state ? state.httpFilterActionListName : undefined;
            resourceInputs["httpFilterName"] = state ? state.httpFilterName : undefined;
            resourceInputs["httpFilterSeq"] = state ? state.httpFilterSeq : undefined;
            resourceInputs["httpHeaderCfg"] = state ? state.httpHeaderCfg : undefined;
            resourceInputs["httpRefererCfg"] = state ? state.httpRefererCfg : undefined;
            resourceInputs["httpTmplName"] = state ? state.httpTmplName : undefined;
            resourceInputs["httpUriCfg"] = state ? state.httpUriCfg : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosZoneTemplateHttpFilterArgs | undefined;
            if ((!args || args.httpFilterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpFilterName'");
            }
            if ((!args || args.httpTmplName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpTmplName'");
            }
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["httpAgentCfg"] = args ? args.httpAgentCfg : undefined;
            resourceInputs["httpFilterAction"] = args ? args.httpFilterAction : undefined;
            resourceInputs["httpFilterActionListName"] = args ? args.httpFilterActionListName : undefined;
            resourceInputs["httpFilterName"] = args ? args.httpFilterName : undefined;
            resourceInputs["httpFilterSeq"] = args ? args.httpFilterSeq : undefined;
            resourceInputs["httpHeaderCfg"] = args ? args.httpHeaderCfg : undefined;
            resourceInputs["httpRefererCfg"] = args ? args.httpRefererCfg : undefined;
            resourceInputs["httpTmplName"] = args ? args.httpTmplName : undefined;
            resourceInputs["httpUriCfg"] = args ? args.httpUriCfg : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneTemplateHttpFilter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneTemplateHttpFilter resources.
 */
export interface DdosZoneTemplateHttpFilterState {
    dst?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterDst>;
    httpAgentCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpAgentCfg>;
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src; 'reset': Reset client connection;
     */
    httpFilterAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    httpFilterActionListName?: pulumi.Input<string>;
    httpFilterName?: pulumi.Input<string>;
    /**
     * Sequence number
     */
    httpFilterSeq?: pulumi.Input<number>;
    httpHeaderCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpHeaderCfg>;
    httpRefererCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpRefererCfg>;
    /**
     * HttpTmplName
     */
    httpTmplName?: pulumi.Input<string>;
    httpUriCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpUriCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosZoneTemplateHttpFilter resource.
 */
export interface DdosZoneTemplateHttpFilterArgs {
    dst?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterDst>;
    httpAgentCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpAgentCfg>;
    /**
     * 'drop': Drop packets (Default); 'ignore': Take no action; 'blacklist-src': Blacklist-src; 'authenticate-src':
     * Authenticate-src; 'reset': Reset client connection;
     */
    httpFilterAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take
     */
    httpFilterActionListName?: pulumi.Input<string>;
    httpFilterName: pulumi.Input<string>;
    /**
     * Sequence number
     */
    httpFilterSeq?: pulumi.Input<number>;
    httpHeaderCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpHeaderCfg>;
    httpRefererCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpRefererCfg>;
    /**
     * HttpTmplName
     */
    httpTmplName: pulumi.Input<string>;
    httpUriCfg?: pulumi.Input<inputs.DdosZoneTemplateHttpFilterHttpUriCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
