// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HarmonyControllerProfile extends pulumi.CustomResource {
    /**
     * Get an existing HarmonyControllerProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HarmonyControllerProfileState, opts?: pulumi.CustomResourceOptions): HarmonyControllerProfile {
        return new HarmonyControllerProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/harmonyControllerProfile:HarmonyControllerProfile';

    /**
     * Returns true if the given object is an instance of HarmonyControllerProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HarmonyControllerProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HarmonyControllerProfile.__pulumiType;
    }

    /**
     * 'register': Register the device to the controller; 'deregister': Deregister the device from controller;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * 'all': Export all the analytics information. This is the default value.; 'system': Export only system level policy for
     * device management.; 'disable': Disable all the exports from the device.;
     */
    public readonly analytics!: pulumi.Output<string | undefined>;
    /**
     * 'enable': enable auto analytics bus restart, default behavior is enable; 'disable': disable auto analytics bus restart;
     */
    public readonly autoRestartAction!: pulumi.Output<string | undefined>;
    /**
     * availablity zone of the thunder-device
     */
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    /**
     * id for the cluster in harmony controller, typically an uuid
     */
    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * name of cluster in harmony controller that this device is a member of
     */
    public readonly clusterName!: pulumi.Output<string | undefined>;
    /**
     * Set harmony controller host address
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * IPV6 address or FQDN for the host
     */
    public readonly hostIpv6!: pulumi.Output<string | undefined>;
    /**
     * auto analytics bus restart time interval in mins, default is 3 mins
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Set port for remote Harmony Controller
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * provider for the harmony-controller
     */
    public readonly provider1!: pulumi.Output<string | undefined>;
    public readonly reSync!: pulumi.Output<outputs.HarmonyControllerProfileReSync | undefined>;
    /**
     * region of the thunder-device
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * Specify the password for the user
     */
    public readonly secretValue!: pulumi.Output<string | undefined>;
    public readonly thunderMgmtIp!: pulumi.Output<outputs.HarmonyControllerProfileThunderMgmtIp | undefined>;
    public readonly tunnel!: pulumi.Output<outputs.HarmonyControllerProfileTunnel | undefined>;
    /**
     * Use management port for connections
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * user-name for the tenant
     */
    public readonly userName!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HarmonyControllerProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HarmonyControllerProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HarmonyControllerProfileArgs | HarmonyControllerProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HarmonyControllerProfileState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["analytics"] = state ? state.analytics : undefined;
            resourceInputs["autoRestartAction"] = state ? state.autoRestartAction : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["hostIpv6"] = state ? state.hostIpv6 : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["provider1"] = state ? state.provider1 : undefined;
            resourceInputs["reSync"] = state ? state.reSync : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secretValue"] = state ? state.secretValue : undefined;
            resourceInputs["thunderMgmtIp"] = state ? state.thunderMgmtIp : undefined;
            resourceInputs["tunnel"] = state ? state.tunnel : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HarmonyControllerProfileArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["analytics"] = args ? args.analytics : undefined;
            resourceInputs["autoRestartAction"] = args ? args.autoRestartAction : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["hostIpv6"] = args ? args.hostIpv6 : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["provider1"] = args ? args.provider1 : undefined;
            resourceInputs["reSync"] = args ? args.reSync : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secretValue"] = args ? args.secretValue : undefined;
            resourceInputs["thunderMgmtIp"] = args ? args.thunderMgmtIp : undefined;
            resourceInputs["tunnel"] = args ? args.tunnel : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HarmonyControllerProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HarmonyControllerProfile resources.
 */
export interface HarmonyControllerProfileState {
    /**
     * 'register': Register the device to the controller; 'deregister': Deregister the device from controller;
     */
    action?: pulumi.Input<string>;
    /**
     * 'all': Export all the analytics information. This is the default value.; 'system': Export only system level policy for
     * device management.; 'disable': Disable all the exports from the device.;
     */
    analytics?: pulumi.Input<string>;
    /**
     * 'enable': enable auto analytics bus restart, default behavior is enable; 'disable': disable auto analytics bus restart;
     */
    autoRestartAction?: pulumi.Input<string>;
    /**
     * availablity zone of the thunder-device
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * id for the cluster in harmony controller, typically an uuid
     */
    clusterId?: pulumi.Input<string>;
    /**
     * name of cluster in harmony controller that this device is a member of
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Set harmony controller host address
     */
    host?: pulumi.Input<string>;
    /**
     * IPV6 address or FQDN for the host
     */
    hostIpv6?: pulumi.Input<string>;
    /**
     * auto analytics bus restart time interval in mins, default is 3 mins
     */
    interval?: pulumi.Input<number>;
    /**
     * Set port for remote Harmony Controller
     */
    port?: pulumi.Input<number>;
    /**
     * provider for the harmony-controller
     */
    provider1?: pulumi.Input<string>;
    reSync?: pulumi.Input<inputs.HarmonyControllerProfileReSync>;
    /**
     * region of the thunder-device
     */
    region?: pulumi.Input<string>;
    /**
     * Specify the password for the user
     */
    secretValue?: pulumi.Input<string>;
    thunderMgmtIp?: pulumi.Input<inputs.HarmonyControllerProfileThunderMgmtIp>;
    tunnel?: pulumi.Input<inputs.HarmonyControllerProfileTunnel>;
    /**
     * Use management port for connections
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * user-name for the tenant
     */
    userName?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HarmonyControllerProfile resource.
 */
export interface HarmonyControllerProfileArgs {
    /**
     * 'register': Register the device to the controller; 'deregister': Deregister the device from controller;
     */
    action?: pulumi.Input<string>;
    /**
     * 'all': Export all the analytics information. This is the default value.; 'system': Export only system level policy for
     * device management.; 'disable': Disable all the exports from the device.;
     */
    analytics?: pulumi.Input<string>;
    /**
     * 'enable': enable auto analytics bus restart, default behavior is enable; 'disable': disable auto analytics bus restart;
     */
    autoRestartAction?: pulumi.Input<string>;
    /**
     * availablity zone of the thunder-device
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * id for the cluster in harmony controller, typically an uuid
     */
    clusterId?: pulumi.Input<string>;
    /**
     * name of cluster in harmony controller that this device is a member of
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Set harmony controller host address
     */
    host?: pulumi.Input<string>;
    /**
     * IPV6 address or FQDN for the host
     */
    hostIpv6?: pulumi.Input<string>;
    /**
     * auto analytics bus restart time interval in mins, default is 3 mins
     */
    interval?: pulumi.Input<number>;
    /**
     * Set port for remote Harmony Controller
     */
    port?: pulumi.Input<number>;
    /**
     * provider for the harmony-controller
     */
    provider1?: pulumi.Input<string>;
    reSync?: pulumi.Input<inputs.HarmonyControllerProfileReSync>;
    /**
     * region of the thunder-device
     */
    region?: pulumi.Input<string>;
    /**
     * Specify the password for the user
     */
    secretValue?: pulumi.Input<string>;
    thunderMgmtIp?: pulumi.Input<inputs.HarmonyControllerProfileThunderMgmtIp>;
    tunnel?: pulumi.Input<inputs.HarmonyControllerProfileTunnel>;
    /**
     * Use management port for connections
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * user-name for the tenant
     */
    userName?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
