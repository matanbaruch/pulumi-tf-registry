// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthMonitorMethodDns extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodDnsState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodDns {
        return new HealthMonitorMethodDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodDns:HealthMonitorMethodDns';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodDns.__pulumiType;
    }

    /**
     * DNS type
     */
    public readonly dns!: pulumi.Output<number | undefined>;
    /**
     * Specify fully qualified domain name of the host
     */
    public readonly dnsDomain!: pulumi.Output<string | undefined>;
    public readonly dnsDomainExpect!: pulumi.Output<outputs.HealthMonitorMethodDnsDnsDomainExpect | undefined>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    public readonly dnsDomainPort!: pulumi.Output<number | undefined>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    public readonly dnsDomainRecurse!: pulumi.Output<string | undefined>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    public readonly dnsDomainTcp!: pulumi.Output<number | undefined>;
    /**
     * 'A': Used for storing Ipv4 address (default); 'CNAME': Canonical name for a DNS alias; 'SOA': Start of authority; 'PTR':
     * Domain name pointer; 'MX': Mail exchanger; 'TXT': Text string; 'AAAA': Used for storing Ipv6 128-bits address;
     */
    public readonly dnsDomainType!: pulumi.Output<string | undefined>;
    /**
     * Reverse DNS lookup (Specify IPv4 or IPv6 address)
     */
    public readonly dnsIpKey!: pulumi.Output<number | undefined>;
    /**
     * Specify IPv4 address
     */
    public readonly dnsIpv4Addr!: pulumi.Output<string | undefined>;
    public readonly dnsIpv4Expect!: pulumi.Output<outputs.HealthMonitorMethodDnsDnsIpv4Expect | undefined>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    public readonly dnsIpv4Port!: pulumi.Output<number | undefined>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    public readonly dnsIpv4Recurse!: pulumi.Output<string | undefined>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    public readonly dnsIpv4Tcp!: pulumi.Output<number | undefined>;
    /**
     * Specify IPv6 address
     */
    public readonly dnsIpv6Addr!: pulumi.Output<string | undefined>;
    public readonly dnsIpv6Expect!: pulumi.Output<outputs.HealthMonitorMethodDnsDnsIpv6Expect | undefined>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    public readonly dnsIpv6Port!: pulumi.Output<number | undefined>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    public readonly dnsIpv6Recurse!: pulumi.Output<string | undefined>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    public readonly dnsIpv6Tcp!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitorMethodDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodDnsArgs | HealthMonitorMethodDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodDnsState | undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["dnsDomain"] = state ? state.dnsDomain : undefined;
            resourceInputs["dnsDomainExpect"] = state ? state.dnsDomainExpect : undefined;
            resourceInputs["dnsDomainPort"] = state ? state.dnsDomainPort : undefined;
            resourceInputs["dnsDomainRecurse"] = state ? state.dnsDomainRecurse : undefined;
            resourceInputs["dnsDomainTcp"] = state ? state.dnsDomainTcp : undefined;
            resourceInputs["dnsDomainType"] = state ? state.dnsDomainType : undefined;
            resourceInputs["dnsIpKey"] = state ? state.dnsIpKey : undefined;
            resourceInputs["dnsIpv4Addr"] = state ? state.dnsIpv4Addr : undefined;
            resourceInputs["dnsIpv4Expect"] = state ? state.dnsIpv4Expect : undefined;
            resourceInputs["dnsIpv4Port"] = state ? state.dnsIpv4Port : undefined;
            resourceInputs["dnsIpv4Recurse"] = state ? state.dnsIpv4Recurse : undefined;
            resourceInputs["dnsIpv4Tcp"] = state ? state.dnsIpv4Tcp : undefined;
            resourceInputs["dnsIpv6Addr"] = state ? state.dnsIpv6Addr : undefined;
            resourceInputs["dnsIpv6Expect"] = state ? state.dnsIpv6Expect : undefined;
            resourceInputs["dnsIpv6Port"] = state ? state.dnsIpv6Port : undefined;
            resourceInputs["dnsIpv6Recurse"] = state ? state.dnsIpv6Recurse : undefined;
            resourceInputs["dnsIpv6Tcp"] = state ? state.dnsIpv6Tcp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodDnsArgs | undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["dnsDomain"] = args ? args.dnsDomain : undefined;
            resourceInputs["dnsDomainExpect"] = args ? args.dnsDomainExpect : undefined;
            resourceInputs["dnsDomainPort"] = args ? args.dnsDomainPort : undefined;
            resourceInputs["dnsDomainRecurse"] = args ? args.dnsDomainRecurse : undefined;
            resourceInputs["dnsDomainTcp"] = args ? args.dnsDomainTcp : undefined;
            resourceInputs["dnsDomainType"] = args ? args.dnsDomainType : undefined;
            resourceInputs["dnsIpKey"] = args ? args.dnsIpKey : undefined;
            resourceInputs["dnsIpv4Addr"] = args ? args.dnsIpv4Addr : undefined;
            resourceInputs["dnsIpv4Expect"] = args ? args.dnsIpv4Expect : undefined;
            resourceInputs["dnsIpv4Port"] = args ? args.dnsIpv4Port : undefined;
            resourceInputs["dnsIpv4Recurse"] = args ? args.dnsIpv4Recurse : undefined;
            resourceInputs["dnsIpv4Tcp"] = args ? args.dnsIpv4Tcp : undefined;
            resourceInputs["dnsIpv6Addr"] = args ? args.dnsIpv6Addr : undefined;
            resourceInputs["dnsIpv6Expect"] = args ? args.dnsIpv6Expect : undefined;
            resourceInputs["dnsIpv6Port"] = args ? args.dnsIpv6Port : undefined;
            resourceInputs["dnsIpv6Recurse"] = args ? args.dnsIpv6Recurse : undefined;
            resourceInputs["dnsIpv6Tcp"] = args ? args.dnsIpv6Tcp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodDns resources.
 */
export interface HealthMonitorMethodDnsState {
    /**
     * DNS type
     */
    dns?: pulumi.Input<number>;
    /**
     * Specify fully qualified domain name of the host
     */
    dnsDomain?: pulumi.Input<string>;
    dnsDomainExpect?: pulumi.Input<inputs.HealthMonitorMethodDnsDnsDomainExpect>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    dnsDomainPort?: pulumi.Input<number>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    dnsDomainRecurse?: pulumi.Input<string>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    dnsDomainTcp?: pulumi.Input<number>;
    /**
     * 'A': Used for storing Ipv4 address (default); 'CNAME': Canonical name for a DNS alias; 'SOA': Start of authority; 'PTR':
     * Domain name pointer; 'MX': Mail exchanger; 'TXT': Text string; 'AAAA': Used for storing Ipv6 128-bits address;
     */
    dnsDomainType?: pulumi.Input<string>;
    /**
     * Reverse DNS lookup (Specify IPv4 or IPv6 address)
     */
    dnsIpKey?: pulumi.Input<number>;
    /**
     * Specify IPv4 address
     */
    dnsIpv4Addr?: pulumi.Input<string>;
    dnsIpv4Expect?: pulumi.Input<inputs.HealthMonitorMethodDnsDnsIpv4Expect>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    dnsIpv4Port?: pulumi.Input<number>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    dnsIpv4Recurse?: pulumi.Input<string>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    dnsIpv4Tcp?: pulumi.Input<number>;
    /**
     * Specify IPv6 address
     */
    dnsIpv6Addr?: pulumi.Input<string>;
    dnsIpv6Expect?: pulumi.Input<inputs.HealthMonitorMethodDnsDnsIpv6Expect>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    dnsIpv6Port?: pulumi.Input<number>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    dnsIpv6Recurse?: pulumi.Input<string>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    dnsIpv6Tcp?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodDns resource.
 */
export interface HealthMonitorMethodDnsArgs {
    /**
     * DNS type
     */
    dns?: pulumi.Input<number>;
    /**
     * Specify fully qualified domain name of the host
     */
    dnsDomain?: pulumi.Input<string>;
    dnsDomainExpect?: pulumi.Input<inputs.HealthMonitorMethodDnsDnsDomainExpect>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    dnsDomainPort?: pulumi.Input<number>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    dnsDomainRecurse?: pulumi.Input<string>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    dnsDomainTcp?: pulumi.Input<number>;
    /**
     * 'A': Used for storing Ipv4 address (default); 'CNAME': Canonical name for a DNS alias; 'SOA': Start of authority; 'PTR':
     * Domain name pointer; 'MX': Mail exchanger; 'TXT': Text string; 'AAAA': Used for storing Ipv6 128-bits address;
     */
    dnsDomainType?: pulumi.Input<string>;
    /**
     * Reverse DNS lookup (Specify IPv4 or IPv6 address)
     */
    dnsIpKey?: pulumi.Input<number>;
    /**
     * Specify IPv4 address
     */
    dnsIpv4Addr?: pulumi.Input<string>;
    dnsIpv4Expect?: pulumi.Input<inputs.HealthMonitorMethodDnsDnsIpv4Expect>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    dnsIpv4Port?: pulumi.Input<number>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    dnsIpv4Recurse?: pulumi.Input<string>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    dnsIpv4Tcp?: pulumi.Input<number>;
    /**
     * Specify IPv6 address
     */
    dnsIpv6Addr?: pulumi.Input<string>;
    dnsIpv6Expect?: pulumi.Input<inputs.HealthMonitorMethodDnsDnsIpv6Expect>;
    /**
     * Specify DNS port, default is 53 (DNS Port(default 53))
     */
    dnsIpv6Port?: pulumi.Input<number>;
    /**
     * 'enabled': Set the recursion bit; 'disabled': Clear the recursion bit;
     */
    dnsIpv6Recurse?: pulumi.Input<string>;
    /**
     * Configure DNS transport over TCP, default is UDP
     */
    dnsIpv6Tcp?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
