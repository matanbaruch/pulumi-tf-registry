// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Axdebug extends pulumi.CustomResource {
    /**
     * Get an existing Axdebug resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AxdebugState, opts?: pulumi.CustomResourceOptions): Axdebug {
        return new Axdebug(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/axdebug:Axdebug';

    /**
     * Returns true if the given object is an instance of Axdebug.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Axdebug {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Axdebug.__pulumiType;
    }

    public readonly applyConfig!: pulumi.Output<outputs.AxdebugApplyConfig | undefined>;
    public readonly capture!: pulumi.Output<outputs.AxdebugCapture | undefined>;
    /**
     * Maximum packets to capture per cpu. Default is 3000. (Maximum packets to capture. For umlimited, specify 0)
     */
    public readonly count1!: pulumi.Output<number | undefined>;
    public readonly delete!: pulumi.Output<outputs.AxdebugDelete | undefined>;
    public readonly exit!: pulumi.Output<outputs.AxdebugExit | undefined>;
    public readonly filterConfigLists!: pulumi.Output<outputs.AxdebugFilterConfigList[] | undefined>;
    /**
     * Port Numbers separated by commas(,) and hyphens(-) without spaces. ex: 4,5,10-30, or separated by spaces and
     * double-quoted(")
     */
    public readonly incPortNum!: pulumi.Output<string | undefined>;
    /**
     * Incoming interface. (For all ports, don't specify port number.)
     */
    public readonly incoming!: pulumi.Output<number | undefined>;
    /**
     * Packet length to capture
     */
    public readonly length!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of debug packet files. Default is 100
     */
    public readonly maxfile!: pulumi.Output<number | undefined>;
    /**
     * Port Numbers separated by commas(,) and hyphens(-) without spaces. ex: 4,5,10-30, or separated by spaces and
     * double-quoted(")
     */
    public readonly outPortNum!: pulumi.Output<string | undefined>;
    /**
     * Outgoing interface (For all ports, don't specify port number.)
     */
    public readonly outgoing!: pulumi.Output<number | undefined>;
    public readonly pcapngConfig!: pulumi.Output<outputs.AxdebugPcapngConfig | undefined>;
    public readonly saveConfig!: pulumi.Output<outputs.AxdebugSaveConfig | undefined>;
    /**
     * Disable session based filter
     */
    public readonly sessFilterDis!: pulumi.Output<number | undefined>;
    /**
     * Maximum number of minutes for a capture. Default is 5 minutes. For unlimited, specify 0
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Axdebug resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AxdebugArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AxdebugArgs | AxdebugState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AxdebugState | undefined;
            resourceInputs["applyConfig"] = state ? state.applyConfig : undefined;
            resourceInputs["capture"] = state ? state.capture : undefined;
            resourceInputs["count1"] = state ? state.count1 : undefined;
            resourceInputs["delete"] = state ? state.delete : undefined;
            resourceInputs["exit"] = state ? state.exit : undefined;
            resourceInputs["filterConfigLists"] = state ? state.filterConfigLists : undefined;
            resourceInputs["incPortNum"] = state ? state.incPortNum : undefined;
            resourceInputs["incoming"] = state ? state.incoming : undefined;
            resourceInputs["length"] = state ? state.length : undefined;
            resourceInputs["maxfile"] = state ? state.maxfile : undefined;
            resourceInputs["outPortNum"] = state ? state.outPortNum : undefined;
            resourceInputs["outgoing"] = state ? state.outgoing : undefined;
            resourceInputs["pcapngConfig"] = state ? state.pcapngConfig : undefined;
            resourceInputs["saveConfig"] = state ? state.saveConfig : undefined;
            resourceInputs["sessFilterDis"] = state ? state.sessFilterDis : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AxdebugArgs | undefined;
            resourceInputs["applyConfig"] = args ? args.applyConfig : undefined;
            resourceInputs["capture"] = args ? args.capture : undefined;
            resourceInputs["count1"] = args ? args.count1 : undefined;
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["exit"] = args ? args.exit : undefined;
            resourceInputs["filterConfigLists"] = args ? args.filterConfigLists : undefined;
            resourceInputs["incPortNum"] = args ? args.incPortNum : undefined;
            resourceInputs["incoming"] = args ? args.incoming : undefined;
            resourceInputs["length"] = args ? args.length : undefined;
            resourceInputs["maxfile"] = args ? args.maxfile : undefined;
            resourceInputs["outPortNum"] = args ? args.outPortNum : undefined;
            resourceInputs["outgoing"] = args ? args.outgoing : undefined;
            resourceInputs["pcapngConfig"] = args ? args.pcapngConfig : undefined;
            resourceInputs["saveConfig"] = args ? args.saveConfig : undefined;
            resourceInputs["sessFilterDis"] = args ? args.sessFilterDis : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Axdebug.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Axdebug resources.
 */
export interface AxdebugState {
    applyConfig?: pulumi.Input<inputs.AxdebugApplyConfig>;
    capture?: pulumi.Input<inputs.AxdebugCapture>;
    /**
     * Maximum packets to capture per cpu. Default is 3000. (Maximum packets to capture. For umlimited, specify 0)
     */
    count1?: pulumi.Input<number>;
    delete?: pulumi.Input<inputs.AxdebugDelete>;
    exit?: pulumi.Input<inputs.AxdebugExit>;
    filterConfigLists?: pulumi.Input<pulumi.Input<inputs.AxdebugFilterConfigList>[]>;
    /**
     * Port Numbers separated by commas(,) and hyphens(-) without spaces. ex: 4,5,10-30, or separated by spaces and
     * double-quoted(")
     */
    incPortNum?: pulumi.Input<string>;
    /**
     * Incoming interface. (For all ports, don't specify port number.)
     */
    incoming?: pulumi.Input<number>;
    /**
     * Packet length to capture
     */
    length?: pulumi.Input<number>;
    /**
     * Maximum number of debug packet files. Default is 100
     */
    maxfile?: pulumi.Input<number>;
    /**
     * Port Numbers separated by commas(,) and hyphens(-) without spaces. ex: 4,5,10-30, or separated by spaces and
     * double-quoted(")
     */
    outPortNum?: pulumi.Input<string>;
    /**
     * Outgoing interface (For all ports, don't specify port number.)
     */
    outgoing?: pulumi.Input<number>;
    pcapngConfig?: pulumi.Input<inputs.AxdebugPcapngConfig>;
    saveConfig?: pulumi.Input<inputs.AxdebugSaveConfig>;
    /**
     * Disable session based filter
     */
    sessFilterDis?: pulumi.Input<number>;
    /**
     * Maximum number of minutes for a capture. Default is 5 minutes. For unlimited, specify 0
     */
    timeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Axdebug resource.
 */
export interface AxdebugArgs {
    applyConfig?: pulumi.Input<inputs.AxdebugApplyConfig>;
    capture?: pulumi.Input<inputs.AxdebugCapture>;
    /**
     * Maximum packets to capture per cpu. Default is 3000. (Maximum packets to capture. For umlimited, specify 0)
     */
    count1?: pulumi.Input<number>;
    delete?: pulumi.Input<inputs.AxdebugDelete>;
    exit?: pulumi.Input<inputs.AxdebugExit>;
    filterConfigLists?: pulumi.Input<pulumi.Input<inputs.AxdebugFilterConfigList>[]>;
    /**
     * Port Numbers separated by commas(,) and hyphens(-) without spaces. ex: 4,5,10-30, or separated by spaces and
     * double-quoted(")
     */
    incPortNum?: pulumi.Input<string>;
    /**
     * Incoming interface. (For all ports, don't specify port number.)
     */
    incoming?: pulumi.Input<number>;
    /**
     * Packet length to capture
     */
    length?: pulumi.Input<number>;
    /**
     * Maximum number of debug packet files. Default is 100
     */
    maxfile?: pulumi.Input<number>;
    /**
     * Port Numbers separated by commas(,) and hyphens(-) without spaces. ex: 4,5,10-30, or separated by spaces and
     * double-quoted(")
     */
    outPortNum?: pulumi.Input<string>;
    /**
     * Outgoing interface (For all ports, don't specify port number.)
     */
    outgoing?: pulumi.Input<number>;
    pcapngConfig?: pulumi.Input<inputs.AxdebugPcapngConfig>;
    saveConfig?: pulumi.Input<inputs.AxdebugSaveConfig>;
    /**
     * Disable session based filter
     */
    sessFilterDis?: pulumi.Input<number>;
    /**
     * Maximum number of minutes for a capture. Default is 5 minutes. For unlimited, specify 0
     */
    timeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
