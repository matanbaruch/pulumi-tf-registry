// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosTemplateDns extends pulumi.CustomResource {
    /**
     * Get an existing DdosTemplateDns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosTemplateDnsState, opts?: pulumi.CustomResourceOptions): DdosTemplateDns {
        return new DdosTemplateDns(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosTemplateDns:DdosTemplateDns';

    /**
     * Returns true if the given object is an instance of DdosTemplateDns.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosTemplateDns {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosTemplateDns.__pulumiType;
    }

    /**
     * 'drop': Drop packets (Default action); 'reset': Send Client RST for TCP connections;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly allowQueryClass!: pulumi.Output<outputs.DdosTemplateDnsAllowQueryClass | undefined>;
    public readonly allowRecordType!: pulumi.Output<outputs.DdosTemplateDnsAllowRecordType | undefined>;
    /**
     * Drop DNS queries of Type ANY
     */
    public readonly dnsAnyCheck!: pulumi.Output<number | undefined>;
    public readonly dnsAuthCfg!: pulumi.Output<outputs.DdosTemplateDnsDnsAuthCfg | undefined>;
    public readonly dnsRequestRateLimit!: pulumi.Output<outputs.DdosTemplateDnsDnsRequestRateLimit | undefined>;
    /**
     * Apply a domain-group to the DNS template
     */
    public readonly domainGroupName!: pulumi.Output<string | undefined>;
    /**
     * 'drop': Drop the query (default); 'tunnel-encap-packet': Encapsulate the query and send on a tunnel;
     */
    public readonly domainGroupRateExceedAction!: pulumi.Output<string | undefined>;
    /**
     * Enable per service domain rate checking
     */
    public readonly domainGroupRatePerService!: pulumi.Output<number | undefined>;
    /**
     * DDOS encap template to sepcify the tunnel endpoint
     */
    public readonly encapTemplate!: pulumi.Output<string | undefined>;
    public readonly fqdnCfgs!: pulumi.Output<outputs.DdosTemplateDnsFqdnCfg[] | undefined>;
    /**
     * Maximum number of length of FQDN labels
     */
    public readonly fqdnLabelCount!: pulumi.Output<number | undefined>;
    public readonly fqdnLabelLenCfgs!: pulumi.Output<outputs.DdosTemplateDnsFqdnLabelLenCfg[] | undefined>;
    public readonly malformedQueryCheck!: pulumi.Output<outputs.DdosTemplateDnsMalformedQueryCheck | undefined>;
    public readonly multiPuThresholdDistribution!: pulumi.Output<outputs.DdosTemplateDnsMultiPuThresholdDistribution | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nxdomainCfg!: pulumi.Output<outputs.DdosTemplateDnsNxdomainCfg | undefined>;
    /**
     * 'permit': permit; 'deny': deny (default);
     */
    public readonly onNoMatch!: pulumi.Output<string | undefined>;
    /**
     * This is for DNS cache mode only, it sets a DNS query rate threshold such that queries under the rate threshold would be
     * forward
     */
    public readonly queryRateThresholdForCacheServing!: pulumi.Output<number | undefined>;
    public readonly symtimeoutCfg!: pulumi.Output<outputs.DdosTemplateDnsSymtimeoutCfg | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosTemplateDns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DdosTemplateDnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosTemplateDnsArgs | DdosTemplateDnsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosTemplateDnsState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["allowQueryClass"] = state ? state.allowQueryClass : undefined;
            resourceInputs["allowRecordType"] = state ? state.allowRecordType : undefined;
            resourceInputs["dnsAnyCheck"] = state ? state.dnsAnyCheck : undefined;
            resourceInputs["dnsAuthCfg"] = state ? state.dnsAuthCfg : undefined;
            resourceInputs["dnsRequestRateLimit"] = state ? state.dnsRequestRateLimit : undefined;
            resourceInputs["domainGroupName"] = state ? state.domainGroupName : undefined;
            resourceInputs["domainGroupRateExceedAction"] = state ? state.domainGroupRateExceedAction : undefined;
            resourceInputs["domainGroupRatePerService"] = state ? state.domainGroupRatePerService : undefined;
            resourceInputs["encapTemplate"] = state ? state.encapTemplate : undefined;
            resourceInputs["fqdnCfgs"] = state ? state.fqdnCfgs : undefined;
            resourceInputs["fqdnLabelCount"] = state ? state.fqdnLabelCount : undefined;
            resourceInputs["fqdnLabelLenCfgs"] = state ? state.fqdnLabelLenCfgs : undefined;
            resourceInputs["malformedQueryCheck"] = state ? state.malformedQueryCheck : undefined;
            resourceInputs["multiPuThresholdDistribution"] = state ? state.multiPuThresholdDistribution : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nxdomainCfg"] = state ? state.nxdomainCfg : undefined;
            resourceInputs["onNoMatch"] = state ? state.onNoMatch : undefined;
            resourceInputs["queryRateThresholdForCacheServing"] = state ? state.queryRateThresholdForCacheServing : undefined;
            resourceInputs["symtimeoutCfg"] = state ? state.symtimeoutCfg : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosTemplateDnsArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["allowQueryClass"] = args ? args.allowQueryClass : undefined;
            resourceInputs["allowRecordType"] = args ? args.allowRecordType : undefined;
            resourceInputs["dnsAnyCheck"] = args ? args.dnsAnyCheck : undefined;
            resourceInputs["dnsAuthCfg"] = args ? args.dnsAuthCfg : undefined;
            resourceInputs["dnsRequestRateLimit"] = args ? args.dnsRequestRateLimit : undefined;
            resourceInputs["domainGroupName"] = args ? args.domainGroupName : undefined;
            resourceInputs["domainGroupRateExceedAction"] = args ? args.domainGroupRateExceedAction : undefined;
            resourceInputs["domainGroupRatePerService"] = args ? args.domainGroupRatePerService : undefined;
            resourceInputs["encapTemplate"] = args ? args.encapTemplate : undefined;
            resourceInputs["fqdnCfgs"] = args ? args.fqdnCfgs : undefined;
            resourceInputs["fqdnLabelCount"] = args ? args.fqdnLabelCount : undefined;
            resourceInputs["fqdnLabelLenCfgs"] = args ? args.fqdnLabelLenCfgs : undefined;
            resourceInputs["malformedQueryCheck"] = args ? args.malformedQueryCheck : undefined;
            resourceInputs["multiPuThresholdDistribution"] = args ? args.multiPuThresholdDistribution : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nxdomainCfg"] = args ? args.nxdomainCfg : undefined;
            resourceInputs["onNoMatch"] = args ? args.onNoMatch : undefined;
            resourceInputs["queryRateThresholdForCacheServing"] = args ? args.queryRateThresholdForCacheServing : undefined;
            resourceInputs["symtimeoutCfg"] = args ? args.symtimeoutCfg : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosTemplateDns.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosTemplateDns resources.
 */
export interface DdosTemplateDnsState {
    /**
     * 'drop': Drop packets (Default action); 'reset': Send Client RST for TCP connections;
     */
    action?: pulumi.Input<string>;
    allowQueryClass?: pulumi.Input<inputs.DdosTemplateDnsAllowQueryClass>;
    allowRecordType?: pulumi.Input<inputs.DdosTemplateDnsAllowRecordType>;
    /**
     * Drop DNS queries of Type ANY
     */
    dnsAnyCheck?: pulumi.Input<number>;
    dnsAuthCfg?: pulumi.Input<inputs.DdosTemplateDnsDnsAuthCfg>;
    dnsRequestRateLimit?: pulumi.Input<inputs.DdosTemplateDnsDnsRequestRateLimit>;
    /**
     * Apply a domain-group to the DNS template
     */
    domainGroupName?: pulumi.Input<string>;
    /**
     * 'drop': Drop the query (default); 'tunnel-encap-packet': Encapsulate the query and send on a tunnel;
     */
    domainGroupRateExceedAction?: pulumi.Input<string>;
    /**
     * Enable per service domain rate checking
     */
    domainGroupRatePerService?: pulumi.Input<number>;
    /**
     * DDOS encap template to sepcify the tunnel endpoint
     */
    encapTemplate?: pulumi.Input<string>;
    fqdnCfgs?: pulumi.Input<pulumi.Input<inputs.DdosTemplateDnsFqdnCfg>[]>;
    /**
     * Maximum number of length of FQDN labels
     */
    fqdnLabelCount?: pulumi.Input<number>;
    fqdnLabelLenCfgs?: pulumi.Input<pulumi.Input<inputs.DdosTemplateDnsFqdnLabelLenCfg>[]>;
    malformedQueryCheck?: pulumi.Input<inputs.DdosTemplateDnsMalformedQueryCheck>;
    multiPuThresholdDistribution?: pulumi.Input<inputs.DdosTemplateDnsMultiPuThresholdDistribution>;
    name?: pulumi.Input<string>;
    nxdomainCfg?: pulumi.Input<inputs.DdosTemplateDnsNxdomainCfg>;
    /**
     * 'permit': permit; 'deny': deny (default);
     */
    onNoMatch?: pulumi.Input<string>;
    /**
     * This is for DNS cache mode only, it sets a DNS query rate threshold such that queries under the rate threshold would be
     * forward
     */
    queryRateThresholdForCacheServing?: pulumi.Input<number>;
    symtimeoutCfg?: pulumi.Input<inputs.DdosTemplateDnsSymtimeoutCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosTemplateDns resource.
 */
export interface DdosTemplateDnsArgs {
    /**
     * 'drop': Drop packets (Default action); 'reset': Send Client RST for TCP connections;
     */
    action?: pulumi.Input<string>;
    allowQueryClass?: pulumi.Input<inputs.DdosTemplateDnsAllowQueryClass>;
    allowRecordType?: pulumi.Input<inputs.DdosTemplateDnsAllowRecordType>;
    /**
     * Drop DNS queries of Type ANY
     */
    dnsAnyCheck?: pulumi.Input<number>;
    dnsAuthCfg?: pulumi.Input<inputs.DdosTemplateDnsDnsAuthCfg>;
    dnsRequestRateLimit?: pulumi.Input<inputs.DdosTemplateDnsDnsRequestRateLimit>;
    /**
     * Apply a domain-group to the DNS template
     */
    domainGroupName?: pulumi.Input<string>;
    /**
     * 'drop': Drop the query (default); 'tunnel-encap-packet': Encapsulate the query and send on a tunnel;
     */
    domainGroupRateExceedAction?: pulumi.Input<string>;
    /**
     * Enable per service domain rate checking
     */
    domainGroupRatePerService?: pulumi.Input<number>;
    /**
     * DDOS encap template to sepcify the tunnel endpoint
     */
    encapTemplate?: pulumi.Input<string>;
    fqdnCfgs?: pulumi.Input<pulumi.Input<inputs.DdosTemplateDnsFqdnCfg>[]>;
    /**
     * Maximum number of length of FQDN labels
     */
    fqdnLabelCount?: pulumi.Input<number>;
    fqdnLabelLenCfgs?: pulumi.Input<pulumi.Input<inputs.DdosTemplateDnsFqdnLabelLenCfg>[]>;
    malformedQueryCheck?: pulumi.Input<inputs.DdosTemplateDnsMalformedQueryCheck>;
    multiPuThresholdDistribution?: pulumi.Input<inputs.DdosTemplateDnsMultiPuThresholdDistribution>;
    name?: pulumi.Input<string>;
    nxdomainCfg?: pulumi.Input<inputs.DdosTemplateDnsNxdomainCfg>;
    /**
     * 'permit': permit; 'deny': deny (default);
     */
    onNoMatch?: pulumi.Input<string>;
    /**
     * This is for DNS cache mode only, it sets a DNS query rate threshold such that queries under the rate threshold would be
     * forward
     */
    queryRateThresholdForCacheServing?: pulumi.Input<number>;
    symtimeoutCfg?: pulumi.Input<inputs.DdosTemplateDnsSymtimeoutCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
