// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6LsnGlobal extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6LsnGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6LsnGlobalState, opts?: pulumi.CustomResourceOptions): Cgnv6LsnGlobal {
        return new Cgnv6LsnGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6LsnGlobal:Cgnv6LsnGlobal';

    /**
     * Returns true if the given object is an instance of Cgnv6LsnGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6LsnGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6LsnGlobal.__pulumiType;
    }

    /**
     * 'disable': Don't attempt port preservation for NAT allocation;
     */
    public readonly attemptPortPreservation!: pulumi.Output<string | undefined>;
    /**
     * Enable enhanced user tracking and visibility (default: disabled)
     */
    public readonly enhancedUserTracking!: pulumi.Output<number | undefined>;
    /**
     * 'filter-none': Allow self-hairpinning (default). Warning: Only applies to UDP. TCP will use filter-self-ip-port;
     * 'filter-self-ip': Block hairpinning to the user's own IP; 'filter-self-ip-port': Block hairpinning to the user's same IP
     * and port combination;
     */
    public readonly hairpinning!: pulumi.Output<string | undefined>;
    /**
     * Set LSN Half close timeout (Half close timeout in seconds (default not set))
     */
    public readonly halfCloseTimeout!: pulumi.Output<number | undefined>;
    public readonly icmp!: pulumi.Output<outputs.Cgnv6LsnGlobalIcmp | undefined>;
    /**
     * 'enable': Enable NAT Inbound Refresh Behavior; 'disable': Disable NAT Inbound Refresh Behavior;
     */
    public readonly inboundRefresh!: pulumi.Output<string | undefined>;
    /**
     * 'enable': Enable NAT full cone refresh for inbound flows; 'disable': Disable NAT full cone refresh for inbound flows;
     */
    public readonly inboundRefreshFullCone!: pulumi.Output<string | undefined>;
    /**
     * 'random': Random (long-run uniformly distributed) NAT IP selection (default); 'round-robin': Round-robin;
     * 'least-used-strict': Fewest NAT ports used; 'least-udp-used-strict': Fewest UDP NAT ports used; 'least-tcp-used-strict':
     * Fewest TCP NAT ports used; 'least-reserved-strict': Fewest NAT ports reserved; 'least-udp-reserved-strict': Fewest UDP
     * NAT ports reserved; 'least-tcp-reserved-strict': Fewest TCP NAT ports reserved; 'least-users-strict': Fewest number of
     * users;
     */
    public readonly ipSelection!: pulumi.Output<string | undefined>;
    public readonly logging!: pulumi.Output<outputs.Cgnv6LsnGlobalLogging | undefined>;
    public readonly portBatching!: pulumi.Output<outputs.Cgnv6LsnGlobalPortBatching | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.Cgnv6LsnGlobalSamplingEnable[] | undefined>;
    /**
     * Strictly adheres to sticky-nat (default: disabled)
     */
    public readonly strictlyStickyNat!: pulumi.Output<number | undefined>;
    /**
     * Set LSN SYN timeout (SYN idle-timeout in seconds (default: 4 seconds))
     */
    public readonly synTimeout!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6LsnGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6LsnGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6LsnGlobalArgs | Cgnv6LsnGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6LsnGlobalState | undefined;
            resourceInputs["attemptPortPreservation"] = state ? state.attemptPortPreservation : undefined;
            resourceInputs["enhancedUserTracking"] = state ? state.enhancedUserTracking : undefined;
            resourceInputs["hairpinning"] = state ? state.hairpinning : undefined;
            resourceInputs["halfCloseTimeout"] = state ? state.halfCloseTimeout : undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["inboundRefresh"] = state ? state.inboundRefresh : undefined;
            resourceInputs["inboundRefreshFullCone"] = state ? state.inboundRefreshFullCone : undefined;
            resourceInputs["ipSelection"] = state ? state.ipSelection : undefined;
            resourceInputs["logging"] = state ? state.logging : undefined;
            resourceInputs["portBatching"] = state ? state.portBatching : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["strictlyStickyNat"] = state ? state.strictlyStickyNat : undefined;
            resourceInputs["synTimeout"] = state ? state.synTimeout : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6LsnGlobalArgs | undefined;
            resourceInputs["attemptPortPreservation"] = args ? args.attemptPortPreservation : undefined;
            resourceInputs["enhancedUserTracking"] = args ? args.enhancedUserTracking : undefined;
            resourceInputs["hairpinning"] = args ? args.hairpinning : undefined;
            resourceInputs["halfCloseTimeout"] = args ? args.halfCloseTimeout : undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["inboundRefresh"] = args ? args.inboundRefresh : undefined;
            resourceInputs["inboundRefreshFullCone"] = args ? args.inboundRefreshFullCone : undefined;
            resourceInputs["ipSelection"] = args ? args.ipSelection : undefined;
            resourceInputs["logging"] = args ? args.logging : undefined;
            resourceInputs["portBatching"] = args ? args.portBatching : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["strictlyStickyNat"] = args ? args.strictlyStickyNat : undefined;
            resourceInputs["synTimeout"] = args ? args.synTimeout : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6LsnGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6LsnGlobal resources.
 */
export interface Cgnv6LsnGlobalState {
    /**
     * 'disable': Don't attempt port preservation for NAT allocation;
     */
    attemptPortPreservation?: pulumi.Input<string>;
    /**
     * Enable enhanced user tracking and visibility (default: disabled)
     */
    enhancedUserTracking?: pulumi.Input<number>;
    /**
     * 'filter-none': Allow self-hairpinning (default). Warning: Only applies to UDP. TCP will use filter-self-ip-port;
     * 'filter-self-ip': Block hairpinning to the user's own IP; 'filter-self-ip-port': Block hairpinning to the user's same IP
     * and port combination;
     */
    hairpinning?: pulumi.Input<string>;
    /**
     * Set LSN Half close timeout (Half close timeout in seconds (default not set))
     */
    halfCloseTimeout?: pulumi.Input<number>;
    icmp?: pulumi.Input<inputs.Cgnv6LsnGlobalIcmp>;
    /**
     * 'enable': Enable NAT Inbound Refresh Behavior; 'disable': Disable NAT Inbound Refresh Behavior;
     */
    inboundRefresh?: pulumi.Input<string>;
    /**
     * 'enable': Enable NAT full cone refresh for inbound flows; 'disable': Disable NAT full cone refresh for inbound flows;
     */
    inboundRefreshFullCone?: pulumi.Input<string>;
    /**
     * 'random': Random (long-run uniformly distributed) NAT IP selection (default); 'round-robin': Round-robin;
     * 'least-used-strict': Fewest NAT ports used; 'least-udp-used-strict': Fewest UDP NAT ports used; 'least-tcp-used-strict':
     * Fewest TCP NAT ports used; 'least-reserved-strict': Fewest NAT ports reserved; 'least-udp-reserved-strict': Fewest UDP
     * NAT ports reserved; 'least-tcp-reserved-strict': Fewest TCP NAT ports reserved; 'least-users-strict': Fewest number of
     * users;
     */
    ipSelection?: pulumi.Input<string>;
    logging?: pulumi.Input<inputs.Cgnv6LsnGlobalLogging>;
    portBatching?: pulumi.Input<inputs.Cgnv6LsnGlobalPortBatching>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6LsnGlobalSamplingEnable>[]>;
    /**
     * Strictly adheres to sticky-nat (default: disabled)
     */
    strictlyStickyNat?: pulumi.Input<number>;
    /**
     * Set LSN SYN timeout (SYN idle-timeout in seconds (default: 4 seconds))
     */
    synTimeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6LsnGlobal resource.
 */
export interface Cgnv6LsnGlobalArgs {
    /**
     * 'disable': Don't attempt port preservation for NAT allocation;
     */
    attemptPortPreservation?: pulumi.Input<string>;
    /**
     * Enable enhanced user tracking and visibility (default: disabled)
     */
    enhancedUserTracking?: pulumi.Input<number>;
    /**
     * 'filter-none': Allow self-hairpinning (default). Warning: Only applies to UDP. TCP will use filter-self-ip-port;
     * 'filter-self-ip': Block hairpinning to the user's own IP; 'filter-self-ip-port': Block hairpinning to the user's same IP
     * and port combination;
     */
    hairpinning?: pulumi.Input<string>;
    /**
     * Set LSN Half close timeout (Half close timeout in seconds (default not set))
     */
    halfCloseTimeout?: pulumi.Input<number>;
    icmp?: pulumi.Input<inputs.Cgnv6LsnGlobalIcmp>;
    /**
     * 'enable': Enable NAT Inbound Refresh Behavior; 'disable': Disable NAT Inbound Refresh Behavior;
     */
    inboundRefresh?: pulumi.Input<string>;
    /**
     * 'enable': Enable NAT full cone refresh for inbound flows; 'disable': Disable NAT full cone refresh for inbound flows;
     */
    inboundRefreshFullCone?: pulumi.Input<string>;
    /**
     * 'random': Random (long-run uniformly distributed) NAT IP selection (default); 'round-robin': Round-robin;
     * 'least-used-strict': Fewest NAT ports used; 'least-udp-used-strict': Fewest UDP NAT ports used; 'least-tcp-used-strict':
     * Fewest TCP NAT ports used; 'least-reserved-strict': Fewest NAT ports reserved; 'least-udp-reserved-strict': Fewest UDP
     * NAT ports reserved; 'least-tcp-reserved-strict': Fewest TCP NAT ports reserved; 'least-users-strict': Fewest number of
     * users;
     */
    ipSelection?: pulumi.Input<string>;
    logging?: pulumi.Input<inputs.Cgnv6LsnGlobalLogging>;
    portBatching?: pulumi.Input<inputs.Cgnv6LsnGlobalPortBatching>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6LsnGlobalSamplingEnable>[]>;
    /**
     * Strictly adheres to sticky-nat (default: disabled)
     */
    strictlyStickyNat?: pulumi.Input<number>;
    /**
     * Set LSN SYN timeout (SYN idle-timeout in seconds (default: 4 seconds))
     */
    synTimeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
