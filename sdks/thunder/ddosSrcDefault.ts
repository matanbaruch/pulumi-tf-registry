// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosSrcDefault extends pulumi.CustomResource {
    /**
     * Get an existing DdosSrcDefault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosSrcDefaultState, opts?: pulumi.CustomResourceOptions): DdosSrcDefault {
        return new DdosSrcDefault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosSrcDefault:DdosSrcDefault';

    /**
     * Returns true if the given object is an instance of DdosSrcDefault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosSrcDefault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosSrcDefault.__pulumiType;
    }

    /**
     * Idle age for ip entry
     */
    public readonly age!: pulumi.Output<number | undefined>;
    public readonly appTypeLists!: pulumi.Output<outputs.DdosSrcDefaultAppTypeList[] | undefined>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    public readonly applyPolicyOnOverflow!: pulumi.Output<number | undefined>;
    /**
     * 'ip': ip; 'ipv6': ipv6;
     */
    public readonly defaultAddressType!: pulumi.Output<string>;
    /**
     * Disable
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    public readonly exceedLogCfg!: pulumi.Output<outputs.DdosSrcDefaultExceedLogCfg | undefined>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    public readonly l4TypeLists!: pulumi.Output<outputs.DdosSrcDefaultL4TypeList[] | undefined>;
    /**
     * Enable periodic log while event is continuing
     */
    public readonly logPeriodic!: pulumi.Output<number | undefined>;
    /**
     * Maximum count for dynamic src entry
     */
    public readonly maxDynamicEntryCount!: pulumi.Output<number | undefined>;
    public readonly template!: pulumi.Output<outputs.DdosSrcDefaultTemplate | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosSrcDefault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosSrcDefaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosSrcDefaultArgs | DdosSrcDefaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosSrcDefaultState | undefined;
            resourceInputs["age"] = state ? state.age : undefined;
            resourceInputs["appTypeLists"] = state ? state.appTypeLists : undefined;
            resourceInputs["applyPolicyOnOverflow"] = state ? state.applyPolicyOnOverflow : undefined;
            resourceInputs["defaultAddressType"] = state ? state.defaultAddressType : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["exceedLogCfg"] = state ? state.exceedLogCfg : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["l4TypeLists"] = state ? state.l4TypeLists : undefined;
            resourceInputs["logPeriodic"] = state ? state.logPeriodic : undefined;
            resourceInputs["maxDynamicEntryCount"] = state ? state.maxDynamicEntryCount : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosSrcDefaultArgs | undefined;
            if ((!args || args.defaultAddressType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultAddressType'");
            }
            resourceInputs["age"] = args ? args.age : undefined;
            resourceInputs["appTypeLists"] = args ? args.appTypeLists : undefined;
            resourceInputs["applyPolicyOnOverflow"] = args ? args.applyPolicyOnOverflow : undefined;
            resourceInputs["defaultAddressType"] = args ? args.defaultAddressType : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["exceedLogCfg"] = args ? args.exceedLogCfg : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["l4TypeLists"] = args ? args.l4TypeLists : undefined;
            resourceInputs["logPeriodic"] = args ? args.logPeriodic : undefined;
            resourceInputs["maxDynamicEntryCount"] = args ? args.maxDynamicEntryCount : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosSrcDefault.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosSrcDefault resources.
 */
export interface DdosSrcDefaultState {
    /**
     * Idle age for ip entry
     */
    age?: pulumi.Input<number>;
    appTypeLists?: pulumi.Input<pulumi.Input<inputs.DdosSrcDefaultAppTypeList>[]>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    applyPolicyOnOverflow?: pulumi.Input<number>;
    /**
     * 'ip': ip; 'ipv6': ipv6;
     */
    defaultAddressType?: pulumi.Input<string>;
    /**
     * Disable
     */
    disable?: pulumi.Input<number>;
    exceedLogCfg?: pulumi.Input<inputs.DdosSrcDefaultExceedLogCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosSrcDefaultL4TypeList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * Maximum count for dynamic src entry
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.DdosSrcDefaultTemplate>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosSrcDefault resource.
 */
export interface DdosSrcDefaultArgs {
    /**
     * Idle age for ip entry
     */
    age?: pulumi.Input<number>;
    appTypeLists?: pulumi.Input<pulumi.Input<inputs.DdosSrcDefaultAppTypeList>[]>;
    /**
     * Enable this flag to apply overflow policy when dynamic entry count overflows
     */
    applyPolicyOnOverflow?: pulumi.Input<number>;
    /**
     * 'ip': ip; 'ipv6': ipv6;
     */
    defaultAddressType: pulumi.Input<string>;
    /**
     * Disable
     */
    disable?: pulumi.Input<number>;
    exceedLogCfg?: pulumi.Input<inputs.DdosSrcDefaultExceedLogCfg>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    l4TypeLists?: pulumi.Input<pulumi.Input<inputs.DdosSrcDefaultL4TypeList>[]>;
    /**
     * Enable periodic log while event is continuing
     */
    logPeriodic?: pulumi.Input<number>;
    /**
     * Maximum count for dynamic src entry
     */
    maxDynamicEntryCount?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.DdosSrcDefaultTemplate>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
