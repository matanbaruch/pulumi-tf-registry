// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AamAuthenticationServerRadiusInstance extends pulumi.CustomResource {
    /**
     * Get an existing AamAuthenticationServerRadiusInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAuthenticationServerRadiusInstanceState, opts?: pulumi.CustomResourceOptions): AamAuthenticationServerRadiusInstance {
        return new AamAuthenticationServerRadiusInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAuthenticationServerRadiusInstance:AamAuthenticationServerRadiusInstance';

    /**
     * Returns true if the given object is an instance of AamAuthenticationServerRadiusInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAuthenticationServerRadiusInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAuthenticationServerRadiusInstance.__pulumiType;
    }

    /**
     * Specify the RADIUS server's accounting port, default is 1813
     */
    public readonly accountingPort!: pulumi.Output<number | undefined>;
    /**
     * Specify accounting port health check method
     */
    public readonly acctPortHm!: pulumi.Output<string | undefined>;
    /**
     * Disable configured accounting port health check configuration
     */
    public readonly acctPortHmDisable!: pulumi.Output<number | undefined>;
    /**
     * 'pap': PAP authentication. Default; 'mschapv2': MS-CHAPv2 authentication; 'mschapv2-pap': Use MS-CHAPv2 first. If server
     * doesn't support it, try PAP;
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * Check server's health status
     */
    public readonly healthCheck!: pulumi.Output<number | undefined>;
    /**
     * Disable configured health check configuration
     */
    public readonly healthCheckDisable!: pulumi.Output<number | undefined>;
    /**
     * Health monitor name
     */
    public readonly healthCheckString!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<outputs.AamAuthenticationServerRadiusInstanceHost | undefined>;
    /**
     * Specify the interval time for resend the request (second), default is 3 seconds (The interval time(second), default is 3
     * seconds)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * Specify RADIUS authentication server name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    /**
     * Specify the RADIUS server's authentication port, default is 1812
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Check port's health status
     */
    public readonly portHm!: pulumi.Output<string | undefined>;
    /**
     * Disable configured port health check configuration
     */
    public readonly portHmDisable!: pulumi.Output<number | undefined>;
    /**
     * Specify the retry number for resend the request, default is 5 (The retry number, default is 5)
     */
    public readonly retry!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.AamAuthenticationServerRadiusInstanceSamplingEnable[] | undefined>;
    /**
     * Specify the RADIUS server's secret
     */
    public readonly secret!: pulumi.Output<number | undefined>;
    /**
     * The RADIUS server's secret
     */
    public readonly secretString!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AamAuthenticationServerRadiusInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AamAuthenticationServerRadiusInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAuthenticationServerRadiusInstanceArgs | AamAuthenticationServerRadiusInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAuthenticationServerRadiusInstanceState | undefined;
            resourceInputs["accountingPort"] = state ? state.accountingPort : undefined;
            resourceInputs["acctPortHm"] = state ? state.acctPortHm : undefined;
            resourceInputs["acctPortHmDisable"] = state ? state.acctPortHmDisable : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = state ? state.healthCheckDisable : undefined;
            resourceInputs["healthCheckString"] = state ? state.healthCheckString : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portHm"] = state ? state.portHm : undefined;
            resourceInputs["portHmDisable"] = state ? state.portHmDisable : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["secretString"] = state ? state.secretString : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AamAuthenticationServerRadiusInstanceArgs | undefined;
            resourceInputs["accountingPort"] = args ? args.accountingPort : undefined;
            resourceInputs["acctPortHm"] = args ? args.acctPortHm : undefined;
            resourceInputs["acctPortHmDisable"] = args ? args.acctPortHmDisable : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = args ? args.healthCheckDisable : undefined;
            resourceInputs["healthCheckString"] = args ? args.healthCheckString : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["portHm"] = args ? args.portHm : undefined;
            resourceInputs["portHmDisable"] = args ? args.portHmDisable : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["secretString"] = args ? args.secretString : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAuthenticationServerRadiusInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAuthenticationServerRadiusInstance resources.
 */
export interface AamAuthenticationServerRadiusInstanceState {
    /**
     * Specify the RADIUS server's accounting port, default is 1813
     */
    accountingPort?: pulumi.Input<number>;
    /**
     * Specify accounting port health check method
     */
    acctPortHm?: pulumi.Input<string>;
    /**
     * Disable configured accounting port health check configuration
     */
    acctPortHmDisable?: pulumi.Input<number>;
    /**
     * 'pap': PAP authentication. Default; 'mschapv2': MS-CHAPv2 authentication; 'mschapv2-pap': Use MS-CHAPv2 first. If server
     * doesn't support it, try PAP;
     */
    authType?: pulumi.Input<string>;
    /**
     * Check server's health status
     */
    healthCheck?: pulumi.Input<number>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Health monitor name
     */
    healthCheckString?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.AamAuthenticationServerRadiusInstanceHost>;
    /**
     * Specify the interval time for resend the request (second), default is 3 seconds (The interval time(second), default is 3
     * seconds)
     */
    interval?: pulumi.Input<number>;
    /**
     * Specify RADIUS authentication server name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Specify the RADIUS server's authentication port, default is 1812
     */
    port?: pulumi.Input<number>;
    /**
     * Check port's health status
     */
    portHm?: pulumi.Input<string>;
    /**
     * Disable configured port health check configuration
     */
    portHmDisable?: pulumi.Input<number>;
    /**
     * Specify the retry number for resend the request, default is 5 (The retry number, default is 5)
     */
    retry?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationServerRadiusInstanceSamplingEnable>[]>;
    /**
     * Specify the RADIUS server's secret
     */
    secret?: pulumi.Input<number>;
    /**
     * The RADIUS server's secret
     */
    secretString?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAuthenticationServerRadiusInstance resource.
 */
export interface AamAuthenticationServerRadiusInstanceArgs {
    /**
     * Specify the RADIUS server's accounting port, default is 1813
     */
    accountingPort?: pulumi.Input<number>;
    /**
     * Specify accounting port health check method
     */
    acctPortHm?: pulumi.Input<string>;
    /**
     * Disable configured accounting port health check configuration
     */
    acctPortHmDisable?: pulumi.Input<number>;
    /**
     * 'pap': PAP authentication. Default; 'mschapv2': MS-CHAPv2 authentication; 'mschapv2-pap': Use MS-CHAPv2 first. If server
     * doesn't support it, try PAP;
     */
    authType?: pulumi.Input<string>;
    /**
     * Check server's health status
     */
    healthCheck?: pulumi.Input<number>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Health monitor name
     */
    healthCheckString?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.AamAuthenticationServerRadiusInstanceHost>;
    /**
     * Specify the interval time for resend the request (second), default is 3 seconds (The interval time(second), default is 3
     * seconds)
     */
    interval?: pulumi.Input<number>;
    /**
     * Specify RADIUS authentication server name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Specify the RADIUS server's authentication port, default is 1812
     */
    port?: pulumi.Input<number>;
    /**
     * Check port's health status
     */
    portHm?: pulumi.Input<string>;
    /**
     * Disable configured port health check configuration
     */
    portHmDisable?: pulumi.Input<number>;
    /**
     * Specify the retry number for resend the request, default is 5 (The retry number, default is 5)
     */
    retry?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationServerRadiusInstanceSamplingEnable>[]>;
    /**
     * Specify the RADIUS server's secret
     */
    secret?: pulumi.Input<number>;
    /**
     * The RADIUS server's secret
     */
    secretString?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
