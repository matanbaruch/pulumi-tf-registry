// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SflowPolling extends pulumi.CustomResource {
    /**
     * Get an existing SflowPolling resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SflowPollingState, opts?: pulumi.CustomResourceOptions): SflowPolling {
        return new SflowPolling(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/sflowPolling:SflowPolling';

    /**
     * Returns true if the given object is an instance of SflowPolling.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SflowPolling {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SflowPolling.__pulumiType;
    }

    public readonly a10Proprietary!: pulumi.Output<outputs.SflowPollingA10Proprietary | undefined>;
    /**
     * Polling CPU usage
     */
    public readonly cpuUsage!: pulumi.Output<number | undefined>;
    public readonly ddos!: pulumi.Output<outputs.SflowPollingDdos | undefined>;
    public readonly ethLists!: pulumi.Output<outputs.SflowPollingEthList[] | undefined>;
    public readonly ethernetExtLists!: pulumi.Output<outputs.SflowPollingEthernetExtList[] | undefined>;
    public readonly ethernetLists!: pulumi.Output<outputs.SflowPollingEthernetList[] | undefined>;
    public readonly http!: pulumi.Output<outputs.SflowPollingHttp | undefined>;
    /**
     * Polling HTTP counters
     */
    public readonly httpCounter!: pulumi.Output<number | undefined>;
    public readonly systemHealth!: pulumi.Output<outputs.SflowPollingSystemHealth | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly veLists!: pulumi.Output<outputs.SflowPollingVeList[] | undefined>;

    /**
     * Create a SflowPolling resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SflowPollingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SflowPollingArgs | SflowPollingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SflowPollingState | undefined;
            resourceInputs["a10Proprietary"] = state ? state.a10Proprietary : undefined;
            resourceInputs["cpuUsage"] = state ? state.cpuUsage : undefined;
            resourceInputs["ddos"] = state ? state.ddos : undefined;
            resourceInputs["ethLists"] = state ? state.ethLists : undefined;
            resourceInputs["ethernetExtLists"] = state ? state.ethernetExtLists : undefined;
            resourceInputs["ethernetLists"] = state ? state.ethernetLists : undefined;
            resourceInputs["http"] = state ? state.http : undefined;
            resourceInputs["httpCounter"] = state ? state.httpCounter : undefined;
            resourceInputs["systemHealth"] = state ? state.systemHealth : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["veLists"] = state ? state.veLists : undefined;
        } else {
            const args = argsOrState as SflowPollingArgs | undefined;
            resourceInputs["a10Proprietary"] = args ? args.a10Proprietary : undefined;
            resourceInputs["cpuUsage"] = args ? args.cpuUsage : undefined;
            resourceInputs["ddos"] = args ? args.ddos : undefined;
            resourceInputs["ethLists"] = args ? args.ethLists : undefined;
            resourceInputs["ethernetExtLists"] = args ? args.ethernetExtLists : undefined;
            resourceInputs["ethernetLists"] = args ? args.ethernetLists : undefined;
            resourceInputs["http"] = args ? args.http : undefined;
            resourceInputs["httpCounter"] = args ? args.httpCounter : undefined;
            resourceInputs["systemHealth"] = args ? args.systemHealth : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["veLists"] = args ? args.veLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SflowPolling.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SflowPolling resources.
 */
export interface SflowPollingState {
    a10Proprietary?: pulumi.Input<inputs.SflowPollingA10Proprietary>;
    /**
     * Polling CPU usage
     */
    cpuUsage?: pulumi.Input<number>;
    ddos?: pulumi.Input<inputs.SflowPollingDdos>;
    ethLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingEthList>[]>;
    ethernetExtLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingEthernetExtList>[]>;
    ethernetLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingEthernetList>[]>;
    http?: pulumi.Input<inputs.SflowPollingHttp>;
    /**
     * Polling HTTP counters
     */
    httpCounter?: pulumi.Input<number>;
    systemHealth?: pulumi.Input<inputs.SflowPollingSystemHealth>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    veLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingVeList>[]>;
}

/**
 * The set of arguments for constructing a SflowPolling resource.
 */
export interface SflowPollingArgs {
    a10Proprietary?: pulumi.Input<inputs.SflowPollingA10Proprietary>;
    /**
     * Polling CPU usage
     */
    cpuUsage?: pulumi.Input<number>;
    ddos?: pulumi.Input<inputs.SflowPollingDdos>;
    ethLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingEthList>[]>;
    ethernetExtLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingEthernetExtList>[]>;
    ethernetLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingEthernetList>[]>;
    http?: pulumi.Input<inputs.SflowPollingHttp>;
    /**
     * Polling HTTP counters
     */
    httpCounter?: pulumi.Input<number>;
    systemHealth?: pulumi.Input<inputs.SflowPollingSystemHealth>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    veLists?: pulumi.Input<pulumi.Input<inputs.SflowPollingVeList>[]>;
}
