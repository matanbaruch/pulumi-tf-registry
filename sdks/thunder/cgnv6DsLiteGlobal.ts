// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cgnv6DsLiteGlobal extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6DsLiteGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6DsLiteGlobalState, opts?: pulumi.CustomResourceOptions): Cgnv6DsLiteGlobal {
        return new Cgnv6DsLiteGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6DsLiteGlobal:Cgnv6DsLiteGlobal';

    /**
     * Returns true if the given object is an instance of Cgnv6DsLiteGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6DsLiteGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6DsLiteGlobal.__pulumiType;
    }

    public readonly icmp!: pulumi.Output<outputs.Cgnv6DsLiteGlobalIcmp | undefined>;
    public readonly inside!: pulumi.Output<outputs.Cgnv6DsLiteGlobalInside | undefined>;
    /**
     * 'fix': Fix the bad checksum (default); 'drop': Drop packets with a bad checksum;
     */
    public readonly ipChecksumError!: pulumi.Output<string | undefined>;
    /**
     * 'propagate': Propagate the bad checksum (default); 'fix': Fix the bad checksum; 'drop': Drop packets with a bad
     * checksum;
     */
    public readonly l4ChecksumError!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.Cgnv6DsLiteGlobalSamplingEnable[] | undefined>;
    public readonly tcp!: pulumi.Output<outputs.Cgnv6DsLiteGlobalTcp | undefined>;
    /**
     * User Quota Prefix Length (Default: 128)
     */
    public readonly userQuotaPrefixLength!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6DsLiteGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6DsLiteGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6DsLiteGlobalArgs | Cgnv6DsLiteGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6DsLiteGlobalState | undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["inside"] = state ? state.inside : undefined;
            resourceInputs["ipChecksumError"] = state ? state.ipChecksumError : undefined;
            resourceInputs["l4ChecksumError"] = state ? state.l4ChecksumError : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["userQuotaPrefixLength"] = state ? state.userQuotaPrefixLength : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6DsLiteGlobalArgs | undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["inside"] = args ? args.inside : undefined;
            resourceInputs["ipChecksumError"] = args ? args.ipChecksumError : undefined;
            resourceInputs["l4ChecksumError"] = args ? args.l4ChecksumError : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["userQuotaPrefixLength"] = args ? args.userQuotaPrefixLength : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6DsLiteGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6DsLiteGlobal resources.
 */
export interface Cgnv6DsLiteGlobalState {
    icmp?: pulumi.Input<inputs.Cgnv6DsLiteGlobalIcmp>;
    inside?: pulumi.Input<inputs.Cgnv6DsLiteGlobalInside>;
    /**
     * 'fix': Fix the bad checksum (default); 'drop': Drop packets with a bad checksum;
     */
    ipChecksumError?: pulumi.Input<string>;
    /**
     * 'propagate': Propagate the bad checksum (default); 'fix': Fix the bad checksum; 'drop': Drop packets with a bad
     * checksum;
     */
    l4ChecksumError?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6DsLiteGlobalSamplingEnable>[]>;
    tcp?: pulumi.Input<inputs.Cgnv6DsLiteGlobalTcp>;
    /**
     * User Quota Prefix Length (Default: 128)
     */
    userQuotaPrefixLength?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6DsLiteGlobal resource.
 */
export interface Cgnv6DsLiteGlobalArgs {
    icmp?: pulumi.Input<inputs.Cgnv6DsLiteGlobalIcmp>;
    inside?: pulumi.Input<inputs.Cgnv6DsLiteGlobalInside>;
    /**
     * 'fix': Fix the bad checksum (default); 'drop': Drop packets with a bad checksum;
     */
    ipChecksumError?: pulumi.Input<string>;
    /**
     * 'propagate': Propagate the bad checksum (default); 'fix': Fix the bad checksum; 'drop': Drop packets with a bad
     * checksum;
     */
    l4ChecksumError?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.Cgnv6DsLiteGlobalSamplingEnable>[]>;
    tcp?: pulumi.Input<inputs.Cgnv6DsLiteGlobalTcp>;
    /**
     * User Quota Prefix Length (Default: 128)
     */
    userQuotaPrefixLength?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
