// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VisibilityPortScanDetection extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityPortScanDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityPortScanDetectionState, opts?: pulumi.CustomResourceOptions): VisibilityPortScanDetection {
        return new VisibilityPortScanDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityPortScanDetection:VisibilityPortScanDetection';

    /**
     * Returns true if the given object is an instance of VisibilityPortScanDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityPortScanDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityPortScanDetection.__pulumiType;
    }

    /**
     * Number of scanned port events (default 10)
     */
    public readonly events!: pulumi.Output<number | undefined>;
    /**
     * Time interval for port scan detection (default 60)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Class list of ipv4 addresses to be whitelisted
     */
    public readonly v4List!: pulumi.Output<string | undefined>;
    /**
     * Class list of ipv6 addresses to be whitelisted
     */
    public readonly v6List!: pulumi.Output<string | undefined>;

    /**
     * Create a VisibilityPortScanDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VisibilityPortScanDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityPortScanDetectionArgs | VisibilityPortScanDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityPortScanDetectionState | undefined;
            resourceInputs["events"] = state ? state.events : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["v4List"] = state ? state.v4List : undefined;
            resourceInputs["v6List"] = state ? state.v6List : undefined;
        } else {
            const args = argsOrState as VisibilityPortScanDetectionArgs | undefined;
            resourceInputs["events"] = args ? args.events : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["v4List"] = args ? args.v4List : undefined;
            resourceInputs["v6List"] = args ? args.v6List : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityPortScanDetection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityPortScanDetection resources.
 */
export interface VisibilityPortScanDetectionState {
    /**
     * Number of scanned port events (default 10)
     */
    events?: pulumi.Input<number>;
    /**
     * Time interval for port scan detection (default 60)
     */
    interval?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Class list of ipv4 addresses to be whitelisted
     */
    v4List?: pulumi.Input<string>;
    /**
     * Class list of ipv6 addresses to be whitelisted
     */
    v6List?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VisibilityPortScanDetection resource.
 */
export interface VisibilityPortScanDetectionArgs {
    /**
     * Number of scanned port events (default 10)
     */
    events?: pulumi.Input<number>;
    /**
     * Time interval for port scan detection (default 60)
     */
    interval?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Class list of ipv4 addresses to be whitelisted
     */
    v4List?: pulumi.Input<string>;
    /**
     * Class list of ipv6 addresses to be whitelisted
     */
    v6List?: pulumi.Input<string>;
}
