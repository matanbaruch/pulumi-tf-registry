// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DnssecTemplate extends pulumi.CustomResource {
    /**
     * Get an existing DnssecTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnssecTemplateState, opts?: pulumi.CustomResourceOptions): DnssecTemplate {
        return new DnssecTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/dnssecTemplate:DnssecTemplate';

    /**
     * Returns true if the given object is an instance of DnssecTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnssecTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnssecTemplate.__pulumiType;
    }

    /**
     * 'RSASHA1': RSASHA1 algorithm; 'RSASHA256': RSASHA256 algorithm; 'RSASHA512': RSASHA512 algorithm;
     */
    public readonly algorithm!: pulumi.Output<string | undefined>;
    /**
     * the max number of combinations per RRset (Default value is 31)
     */
    public readonly combinationsLimit!: pulumi.Output<number | undefined>;
    /**
     * The TTL value of DNSKEY RR
     */
    public readonly dnskeyTtlK!: pulumi.Output<number | undefined>;
    /**
     * in seconds, 14400 seconds by default
     */
    public readonly dnskeyTtlV!: pulumi.Output<number | undefined>;
    /**
     * DNSSEC Template Name
     */
    public readonly dnssecTempName!: pulumi.Output<string>;
    public readonly dnssecTemplateKsk!: pulumi.Output<outputs.DnssecTemplateDnssecTemplateKsk | undefined>;
    public readonly dnssecTemplateZsk!: pulumi.Output<outputs.DnssecTemplateDnssecTemplateZsk | undefined>;
    /**
     * enable NSEC3 support. disabled by default
     */
    public readonly enableNsec3!: pulumi.Output<number | undefined>;
    /**
     * specify the HSM template
     */
    public readonly hsm!: pulumi.Output<string | undefined>;
    /**
     * return NSEC/NSEC3 or not on failure case. return by default
     */
    public readonly returnNsecOnFailure!: pulumi.Output<number | undefined>;
    /**
     * The period that a signature is valid
     */
    public readonly signatureValidityPeriodK!: pulumi.Output<number | undefined>;
    /**
     * in days, 10 days by default
     */
    public readonly signatureValidityPeriodV!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DnssecTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnssecTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnssecTemplateArgs | DnssecTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnssecTemplateState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["combinationsLimit"] = state ? state.combinationsLimit : undefined;
            resourceInputs["dnskeyTtlK"] = state ? state.dnskeyTtlK : undefined;
            resourceInputs["dnskeyTtlV"] = state ? state.dnskeyTtlV : undefined;
            resourceInputs["dnssecTempName"] = state ? state.dnssecTempName : undefined;
            resourceInputs["dnssecTemplateKsk"] = state ? state.dnssecTemplateKsk : undefined;
            resourceInputs["dnssecTemplateZsk"] = state ? state.dnssecTemplateZsk : undefined;
            resourceInputs["enableNsec3"] = state ? state.enableNsec3 : undefined;
            resourceInputs["hsm"] = state ? state.hsm : undefined;
            resourceInputs["returnNsecOnFailure"] = state ? state.returnNsecOnFailure : undefined;
            resourceInputs["signatureValidityPeriodK"] = state ? state.signatureValidityPeriodK : undefined;
            resourceInputs["signatureValidityPeriodV"] = state ? state.signatureValidityPeriodV : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DnssecTemplateArgs | undefined;
            if ((!args || args.dnssecTempName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnssecTempName'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["combinationsLimit"] = args ? args.combinationsLimit : undefined;
            resourceInputs["dnskeyTtlK"] = args ? args.dnskeyTtlK : undefined;
            resourceInputs["dnskeyTtlV"] = args ? args.dnskeyTtlV : undefined;
            resourceInputs["dnssecTempName"] = args ? args.dnssecTempName : undefined;
            resourceInputs["dnssecTemplateKsk"] = args ? args.dnssecTemplateKsk : undefined;
            resourceInputs["dnssecTemplateZsk"] = args ? args.dnssecTemplateZsk : undefined;
            resourceInputs["enableNsec3"] = args ? args.enableNsec3 : undefined;
            resourceInputs["hsm"] = args ? args.hsm : undefined;
            resourceInputs["returnNsecOnFailure"] = args ? args.returnNsecOnFailure : undefined;
            resourceInputs["signatureValidityPeriodK"] = args ? args.signatureValidityPeriodK : undefined;
            resourceInputs["signatureValidityPeriodV"] = args ? args.signatureValidityPeriodV : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnssecTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DnssecTemplate resources.
 */
export interface DnssecTemplateState {
    /**
     * 'RSASHA1': RSASHA1 algorithm; 'RSASHA256': RSASHA256 algorithm; 'RSASHA512': RSASHA512 algorithm;
     */
    algorithm?: pulumi.Input<string>;
    /**
     * the max number of combinations per RRset (Default value is 31)
     */
    combinationsLimit?: pulumi.Input<number>;
    /**
     * The TTL value of DNSKEY RR
     */
    dnskeyTtlK?: pulumi.Input<number>;
    /**
     * in seconds, 14400 seconds by default
     */
    dnskeyTtlV?: pulumi.Input<number>;
    /**
     * DNSSEC Template Name
     */
    dnssecTempName?: pulumi.Input<string>;
    dnssecTemplateKsk?: pulumi.Input<inputs.DnssecTemplateDnssecTemplateKsk>;
    dnssecTemplateZsk?: pulumi.Input<inputs.DnssecTemplateDnssecTemplateZsk>;
    /**
     * enable NSEC3 support. disabled by default
     */
    enableNsec3?: pulumi.Input<number>;
    /**
     * specify the HSM template
     */
    hsm?: pulumi.Input<string>;
    /**
     * return NSEC/NSEC3 or not on failure case. return by default
     */
    returnNsecOnFailure?: pulumi.Input<number>;
    /**
     * The period that a signature is valid
     */
    signatureValidityPeriodK?: pulumi.Input<number>;
    /**
     * in days, 10 days by default
     */
    signatureValidityPeriodV?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnssecTemplate resource.
 */
export interface DnssecTemplateArgs {
    /**
     * 'RSASHA1': RSASHA1 algorithm; 'RSASHA256': RSASHA256 algorithm; 'RSASHA512': RSASHA512 algorithm;
     */
    algorithm?: pulumi.Input<string>;
    /**
     * the max number of combinations per RRset (Default value is 31)
     */
    combinationsLimit?: pulumi.Input<number>;
    /**
     * The TTL value of DNSKEY RR
     */
    dnskeyTtlK?: pulumi.Input<number>;
    /**
     * in seconds, 14400 seconds by default
     */
    dnskeyTtlV?: pulumi.Input<number>;
    /**
     * DNSSEC Template Name
     */
    dnssecTempName: pulumi.Input<string>;
    dnssecTemplateKsk?: pulumi.Input<inputs.DnssecTemplateDnssecTemplateKsk>;
    dnssecTemplateZsk?: pulumi.Input<inputs.DnssecTemplateDnssecTemplateZsk>;
    /**
     * enable NSEC3 support. disabled by default
     */
    enableNsec3?: pulumi.Input<number>;
    /**
     * specify the HSM template
     */
    hsm?: pulumi.Input<string>;
    /**
     * return NSEC/NSEC3 or not on failure case. return by default
     */
    returnNsecOnFailure?: pulumi.Input<number>;
    /**
     * The period that a signature is valid
     */
    signatureValidityPeriodK?: pulumi.Input<number>;
    /**
     * in days, 10 days by default
     */
    signatureValidityPeriodV?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
