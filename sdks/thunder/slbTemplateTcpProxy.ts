// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SlbTemplateTcpProxy extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateTcpProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateTcpProxyState, opts?: pulumi.CustomResourceOptions): SlbTemplateTcpProxy {
        return new SlbTemplateTcpProxy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateTcpProxy:SlbTemplateTcpProxy';

    /**
     * Returns true if the given object is an instance of SlbTemplateTcpProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateTcpProxy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateTcpProxy.__pulumiType;
    }

    /**
     * 'low': Delayed ACK; 'medium': Delayed ACK, with ACK on each packet with PUSH flag; 'high': ACK on each packet;
     */
    public readonly ackAggressiveness!: pulumi.Output<string | undefined>;
    /**
     * keep connection alive if active traffic
     */
    public readonly aliveIfActive!: pulumi.Output<number | undefined>;
    /**
     * The TCP window scale used for the server side, default is off (number)
     */
    public readonly backendWscale!: pulumi.Output<number | undefined>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    public readonly delSessionOnServerDown!: pulumi.Output<number | undefined>;
    /**
     * send reset to client when server is disabled
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * Appropriate Byte Counting RFC 3465 Disabled, default is enabled (Appropriate Byte Counting (ABC) is enabled by default)
     */
    public readonly disableAbc!: pulumi.Output<number | undefined>;
    /**
     * disable Selective Ack Option
     */
    public readonly disableSack!: pulumi.Output<number | undefined>;
    /**
     * disable TCP Timestamps Option
     */
    public readonly disableTcpTimestamps!: pulumi.Output<number | undefined>;
    /**
     * disable TCP Window-Scale Option
     */
    public readonly disableWindowScale!: pulumi.Output<number | undefined>;
    /**
     * send reset to client when server is down
     */
    public readonly down!: pulumi.Output<number | undefined>;
    /**
     * Optimally adjust the transmit and receive buffer sizes of TCP proxy while keeping their sum constant
     */
    public readonly dynamicBufferAllocation!: pulumi.Output<number | undefined>;
    /**
     * Configure the Early-Retransmit Algorithm (RFC 5827) (Early-Retransmit is disabled by default)
     */
    public readonly earlyRetransmit!: pulumi.Output<number | undefined>;
    /**
     * FIN timeout (sec), default is disabled (number)
     */
    public readonly finTimeout!: pulumi.Output<number | undefined>;
    /**
     * The maximum time that a session can stay in the system before being deleted, default is off (number (second))
     */
    public readonly forceDeleteTimeout!: pulumi.Output<number | undefined>;
    /**
     * The maximum time that a session can stay in the system before being deleted, default is off (number in 100ms)
     */
    public readonly forceDeleteTimeout100ms!: pulumi.Output<number | undefined>;
    /**
     * TCP Half Close Idle Timeout (sec), default is off (cmd is deprecated, use fin-timeout instead) (number)
     */
    public readonly halfCloseIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * TCP Half Open Idle Timeout (sec), default is off (number)
     */
    public readonly halfOpenIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Idle Timeout (Interval of 60 seconds), default is 600 (idle timeout in second, default 600)
     */
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    /**
     * The initial congestion control window size (packets), default is 10 (init-cwnd in packets, default 10)
     */
    public readonly initCwnd!: pulumi.Output<number | undefined>;
    /**
     * Set the initial window size, default is off (number)
     */
    public readonly initialWindowSize!: pulumi.Output<number | undefined>;
    /**
     * Insert client ip into TCP option
     */
    public readonly insertClientIp!: pulumi.Output<number | undefined>;
    /**
     * Invalid Packet Response Rate Limit (ms), default is 500 (number default 500 challenges)
     */
    public readonly invalidRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Interval between keepalive probes (sec), default is off (number (seconds))
     */
    public readonly keepaliveInterval!: pulumi.Output<number | undefined>;
    /**
     * Number of keepalive probes sent, default is off
     */
    public readonly keepaliveProbes!: pulumi.Output<number | undefined>;
    /**
     * RFC 3742 Limited Slow-Start for TCP with Large Congestion Windows (number)
     */
    public readonly limitedSlowstart!: pulumi.Output<number | undefined>;
    /**
     * The max packet count sent per transmission event (number)
     */
    public readonly maxburst!: pulumi.Output<number | undefined>;
    /**
     * The minmum retransmission timeout, default is 200ms (number)
     */
    public readonly minRto!: pulumi.Output<number | undefined>;
    /**
     * Responding MSS to use if client MSS is large, default is off (number)
     */
    public readonly mss!: pulumi.Output<number | undefined>;
    /**
     * Enable Nagle Algorithm
     */
    public readonly nagle!: pulumi.Output<number | undefined>;
    /**
     * Send naked ack before data during 3-way handshake
     */
    public readonly nakedAckOnHandshake!: pulumi.Output<number | undefined>;
    /**
     * TCP Proxy Template Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly proxyHeader!: pulumi.Output<outputs.SlbTemplateTcpProxyProxyHeader | undefined>;
    /**
     * Enable Optimized PSH Flag Use
     */
    public readonly pshFlagOptimization!: pulumi.Output<number | undefined>;
    /**
     * QOS level (number)
     */
    public readonly qos!: pulumi.Output<number | undefined>;
    /**
     * The reassembly queuing limit, default is 25 segments (number)
     */
    public readonly reassemblyLimit!: pulumi.Output<number | undefined>;
    /**
     * The reassembly timeout, default is 30sec (number)
     */
    public readonly reassemblyTimeout!: pulumi.Output<number | undefined>;
    /**
     * TCP Receive Buffer (default 200k) (number default 200000 bytes)
     */
    public readonly receiveBuffer!: pulumi.Output<number | undefined>;
    /**
     * Enable Reno Congestion Control Algorithm
     */
    public readonly reno!: pulumi.Output<number | undefined>;
    /**
     * send reset to server if error happens
     */
    public readonly resetFwd!: pulumi.Output<number | undefined>;
    /**
     * send reset to client if error happens
     */
    public readonly resetRev!: pulumi.Output<number | undefined>;
    /**
     * Number of Retries for Retransmit, default is 5
     */
    public readonly retransmitRetries!: pulumi.Output<number | undefined>;
    /**
     * 'FIN': FIN Connection; 'RST': Reset Connection;
     */
    public readonly serverDownAction!: pulumi.Output<string | undefined>;
    /**
     * SYN Retry Numbers, default is 5
     */
    public readonly synRetries!: pulumi.Output<number | undefined>;
    /**
     * Timewait Threshold (sec), default 5 (number)
     */
    public readonly timewait!: pulumi.Output<number | undefined>;
    /**
     * TCP Transmit Buffer (default 200k) (number default 200000 bytes)
     */
    public readonly transmitBuffer!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateTcpProxy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateTcpProxyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateTcpProxyArgs | SlbTemplateTcpProxyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateTcpProxyState | undefined;
            resourceInputs["ackAggressiveness"] = state ? state.ackAggressiveness : undefined;
            resourceInputs["aliveIfActive"] = state ? state.aliveIfActive : undefined;
            resourceInputs["backendWscale"] = state ? state.backendWscale : undefined;
            resourceInputs["delSessionOnServerDown"] = state ? state.delSessionOnServerDown : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableAbc"] = state ? state.disableAbc : undefined;
            resourceInputs["disableSack"] = state ? state.disableSack : undefined;
            resourceInputs["disableTcpTimestamps"] = state ? state.disableTcpTimestamps : undefined;
            resourceInputs["disableWindowScale"] = state ? state.disableWindowScale : undefined;
            resourceInputs["down"] = state ? state.down : undefined;
            resourceInputs["dynamicBufferAllocation"] = state ? state.dynamicBufferAllocation : undefined;
            resourceInputs["earlyRetransmit"] = state ? state.earlyRetransmit : undefined;
            resourceInputs["finTimeout"] = state ? state.finTimeout : undefined;
            resourceInputs["forceDeleteTimeout"] = state ? state.forceDeleteTimeout : undefined;
            resourceInputs["forceDeleteTimeout100ms"] = state ? state.forceDeleteTimeout100ms : undefined;
            resourceInputs["halfCloseIdleTimeout"] = state ? state.halfCloseIdleTimeout : undefined;
            resourceInputs["halfOpenIdleTimeout"] = state ? state.halfOpenIdleTimeout : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["initCwnd"] = state ? state.initCwnd : undefined;
            resourceInputs["initialWindowSize"] = state ? state.initialWindowSize : undefined;
            resourceInputs["insertClientIp"] = state ? state.insertClientIp : undefined;
            resourceInputs["invalidRateLimit"] = state ? state.invalidRateLimit : undefined;
            resourceInputs["keepaliveInterval"] = state ? state.keepaliveInterval : undefined;
            resourceInputs["keepaliveProbes"] = state ? state.keepaliveProbes : undefined;
            resourceInputs["limitedSlowstart"] = state ? state.limitedSlowstart : undefined;
            resourceInputs["maxburst"] = state ? state.maxburst : undefined;
            resourceInputs["minRto"] = state ? state.minRto : undefined;
            resourceInputs["mss"] = state ? state.mss : undefined;
            resourceInputs["nagle"] = state ? state.nagle : undefined;
            resourceInputs["nakedAckOnHandshake"] = state ? state.nakedAckOnHandshake : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyHeader"] = state ? state.proxyHeader : undefined;
            resourceInputs["pshFlagOptimization"] = state ? state.pshFlagOptimization : undefined;
            resourceInputs["qos"] = state ? state.qos : undefined;
            resourceInputs["reassemblyLimit"] = state ? state.reassemblyLimit : undefined;
            resourceInputs["reassemblyTimeout"] = state ? state.reassemblyTimeout : undefined;
            resourceInputs["receiveBuffer"] = state ? state.receiveBuffer : undefined;
            resourceInputs["reno"] = state ? state.reno : undefined;
            resourceInputs["resetFwd"] = state ? state.resetFwd : undefined;
            resourceInputs["resetRev"] = state ? state.resetRev : undefined;
            resourceInputs["retransmitRetries"] = state ? state.retransmitRetries : undefined;
            resourceInputs["serverDownAction"] = state ? state.serverDownAction : undefined;
            resourceInputs["synRetries"] = state ? state.synRetries : undefined;
            resourceInputs["timewait"] = state ? state.timewait : undefined;
            resourceInputs["transmitBuffer"] = state ? state.transmitBuffer : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateTcpProxyArgs | undefined;
            resourceInputs["ackAggressiveness"] = args ? args.ackAggressiveness : undefined;
            resourceInputs["aliveIfActive"] = args ? args.aliveIfActive : undefined;
            resourceInputs["backendWscale"] = args ? args.backendWscale : undefined;
            resourceInputs["delSessionOnServerDown"] = args ? args.delSessionOnServerDown : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableAbc"] = args ? args.disableAbc : undefined;
            resourceInputs["disableSack"] = args ? args.disableSack : undefined;
            resourceInputs["disableTcpTimestamps"] = args ? args.disableTcpTimestamps : undefined;
            resourceInputs["disableWindowScale"] = args ? args.disableWindowScale : undefined;
            resourceInputs["down"] = args ? args.down : undefined;
            resourceInputs["dynamicBufferAllocation"] = args ? args.dynamicBufferAllocation : undefined;
            resourceInputs["earlyRetransmit"] = args ? args.earlyRetransmit : undefined;
            resourceInputs["finTimeout"] = args ? args.finTimeout : undefined;
            resourceInputs["forceDeleteTimeout"] = args ? args.forceDeleteTimeout : undefined;
            resourceInputs["forceDeleteTimeout100ms"] = args ? args.forceDeleteTimeout100ms : undefined;
            resourceInputs["halfCloseIdleTimeout"] = args ? args.halfCloseIdleTimeout : undefined;
            resourceInputs["halfOpenIdleTimeout"] = args ? args.halfOpenIdleTimeout : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["initCwnd"] = args ? args.initCwnd : undefined;
            resourceInputs["initialWindowSize"] = args ? args.initialWindowSize : undefined;
            resourceInputs["insertClientIp"] = args ? args.insertClientIp : undefined;
            resourceInputs["invalidRateLimit"] = args ? args.invalidRateLimit : undefined;
            resourceInputs["keepaliveInterval"] = args ? args.keepaliveInterval : undefined;
            resourceInputs["keepaliveProbes"] = args ? args.keepaliveProbes : undefined;
            resourceInputs["limitedSlowstart"] = args ? args.limitedSlowstart : undefined;
            resourceInputs["maxburst"] = args ? args.maxburst : undefined;
            resourceInputs["minRto"] = args ? args.minRto : undefined;
            resourceInputs["mss"] = args ? args.mss : undefined;
            resourceInputs["nagle"] = args ? args.nagle : undefined;
            resourceInputs["nakedAckOnHandshake"] = args ? args.nakedAckOnHandshake : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyHeader"] = args ? args.proxyHeader : undefined;
            resourceInputs["pshFlagOptimization"] = args ? args.pshFlagOptimization : undefined;
            resourceInputs["qos"] = args ? args.qos : undefined;
            resourceInputs["reassemblyLimit"] = args ? args.reassemblyLimit : undefined;
            resourceInputs["reassemblyTimeout"] = args ? args.reassemblyTimeout : undefined;
            resourceInputs["receiveBuffer"] = args ? args.receiveBuffer : undefined;
            resourceInputs["reno"] = args ? args.reno : undefined;
            resourceInputs["resetFwd"] = args ? args.resetFwd : undefined;
            resourceInputs["resetRev"] = args ? args.resetRev : undefined;
            resourceInputs["retransmitRetries"] = args ? args.retransmitRetries : undefined;
            resourceInputs["serverDownAction"] = args ? args.serverDownAction : undefined;
            resourceInputs["synRetries"] = args ? args.synRetries : undefined;
            resourceInputs["timewait"] = args ? args.timewait : undefined;
            resourceInputs["transmitBuffer"] = args ? args.transmitBuffer : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateTcpProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateTcpProxy resources.
 */
export interface SlbTemplateTcpProxyState {
    /**
     * 'low': Delayed ACK; 'medium': Delayed ACK, with ACK on each packet with PUSH flag; 'high': ACK on each packet;
     */
    ackAggressiveness?: pulumi.Input<string>;
    /**
     * keep connection alive if active traffic
     */
    aliveIfActive?: pulumi.Input<number>;
    /**
     * The TCP window scale used for the server side, default is off (number)
     */
    backendWscale?: pulumi.Input<number>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    delSessionOnServerDown?: pulumi.Input<number>;
    /**
     * send reset to client when server is disabled
     */
    disable?: pulumi.Input<number>;
    /**
     * Appropriate Byte Counting RFC 3465 Disabled, default is enabled (Appropriate Byte Counting (ABC) is enabled by default)
     */
    disableAbc?: pulumi.Input<number>;
    /**
     * disable Selective Ack Option
     */
    disableSack?: pulumi.Input<number>;
    /**
     * disable TCP Timestamps Option
     */
    disableTcpTimestamps?: pulumi.Input<number>;
    /**
     * disable TCP Window-Scale Option
     */
    disableWindowScale?: pulumi.Input<number>;
    /**
     * send reset to client when server is down
     */
    down?: pulumi.Input<number>;
    /**
     * Optimally adjust the transmit and receive buffer sizes of TCP proxy while keeping their sum constant
     */
    dynamicBufferAllocation?: pulumi.Input<number>;
    /**
     * Configure the Early-Retransmit Algorithm (RFC 5827) (Early-Retransmit is disabled by default)
     */
    earlyRetransmit?: pulumi.Input<number>;
    /**
     * FIN timeout (sec), default is disabled (number)
     */
    finTimeout?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being deleted, default is off (number (second))
     */
    forceDeleteTimeout?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being deleted, default is off (number in 100ms)
     */
    forceDeleteTimeout100ms?: pulumi.Input<number>;
    /**
     * TCP Half Close Idle Timeout (sec), default is off (cmd is deprecated, use fin-timeout instead) (number)
     */
    halfCloseIdleTimeout?: pulumi.Input<number>;
    /**
     * TCP Half Open Idle Timeout (sec), default is off (number)
     */
    halfOpenIdleTimeout?: pulumi.Input<number>;
    /**
     * Idle Timeout (Interval of 60 seconds), default is 600 (idle timeout in second, default 600)
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * The initial congestion control window size (packets), default is 10 (init-cwnd in packets, default 10)
     */
    initCwnd?: pulumi.Input<number>;
    /**
     * Set the initial window size, default is off (number)
     */
    initialWindowSize?: pulumi.Input<number>;
    /**
     * Insert client ip into TCP option
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * Invalid Packet Response Rate Limit (ms), default is 500 (number default 500 challenges)
     */
    invalidRateLimit?: pulumi.Input<number>;
    /**
     * Interval between keepalive probes (sec), default is off (number (seconds))
     */
    keepaliveInterval?: pulumi.Input<number>;
    /**
     * Number of keepalive probes sent, default is off
     */
    keepaliveProbes?: pulumi.Input<number>;
    /**
     * RFC 3742 Limited Slow-Start for TCP with Large Congestion Windows (number)
     */
    limitedSlowstart?: pulumi.Input<number>;
    /**
     * The max packet count sent per transmission event (number)
     */
    maxburst?: pulumi.Input<number>;
    /**
     * The minmum retransmission timeout, default is 200ms (number)
     */
    minRto?: pulumi.Input<number>;
    /**
     * Responding MSS to use if client MSS is large, default is off (number)
     */
    mss?: pulumi.Input<number>;
    /**
     * Enable Nagle Algorithm
     */
    nagle?: pulumi.Input<number>;
    /**
     * Send naked ack before data during 3-way handshake
     */
    nakedAckOnHandshake?: pulumi.Input<number>;
    /**
     * TCP Proxy Template Name
     */
    name?: pulumi.Input<string>;
    proxyHeader?: pulumi.Input<inputs.SlbTemplateTcpProxyProxyHeader>;
    /**
     * Enable Optimized PSH Flag Use
     */
    pshFlagOptimization?: pulumi.Input<number>;
    /**
     * QOS level (number)
     */
    qos?: pulumi.Input<number>;
    /**
     * The reassembly queuing limit, default is 25 segments (number)
     */
    reassemblyLimit?: pulumi.Input<number>;
    /**
     * The reassembly timeout, default is 30sec (number)
     */
    reassemblyTimeout?: pulumi.Input<number>;
    /**
     * TCP Receive Buffer (default 200k) (number default 200000 bytes)
     */
    receiveBuffer?: pulumi.Input<number>;
    /**
     * Enable Reno Congestion Control Algorithm
     */
    reno?: pulumi.Input<number>;
    /**
     * send reset to server if error happens
     */
    resetFwd?: pulumi.Input<number>;
    /**
     * send reset to client if error happens
     */
    resetRev?: pulumi.Input<number>;
    /**
     * Number of Retries for Retransmit, default is 5
     */
    retransmitRetries?: pulumi.Input<number>;
    /**
     * 'FIN': FIN Connection; 'RST': Reset Connection;
     */
    serverDownAction?: pulumi.Input<string>;
    /**
     * SYN Retry Numbers, default is 5
     */
    synRetries?: pulumi.Input<number>;
    /**
     * Timewait Threshold (sec), default 5 (number)
     */
    timewait?: pulumi.Input<number>;
    /**
     * TCP Transmit Buffer (default 200k) (number default 200000 bytes)
     */
    transmitBuffer?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateTcpProxy resource.
 */
export interface SlbTemplateTcpProxyArgs {
    /**
     * 'low': Delayed ACK; 'medium': Delayed ACK, with ACK on each packet with PUSH flag; 'high': ACK on each packet;
     */
    ackAggressiveness?: pulumi.Input<string>;
    /**
     * keep connection alive if active traffic
     */
    aliveIfActive?: pulumi.Input<number>;
    /**
     * The TCP window scale used for the server side, default is off (number)
     */
    backendWscale?: pulumi.Input<number>;
    /**
     * Delete session if the server/port goes down (either disabled/hm down)
     */
    delSessionOnServerDown?: pulumi.Input<number>;
    /**
     * send reset to client when server is disabled
     */
    disable?: pulumi.Input<number>;
    /**
     * Appropriate Byte Counting RFC 3465 Disabled, default is enabled (Appropriate Byte Counting (ABC) is enabled by default)
     */
    disableAbc?: pulumi.Input<number>;
    /**
     * disable Selective Ack Option
     */
    disableSack?: pulumi.Input<number>;
    /**
     * disable TCP Timestamps Option
     */
    disableTcpTimestamps?: pulumi.Input<number>;
    /**
     * disable TCP Window-Scale Option
     */
    disableWindowScale?: pulumi.Input<number>;
    /**
     * send reset to client when server is down
     */
    down?: pulumi.Input<number>;
    /**
     * Optimally adjust the transmit and receive buffer sizes of TCP proxy while keeping their sum constant
     */
    dynamicBufferAllocation?: pulumi.Input<number>;
    /**
     * Configure the Early-Retransmit Algorithm (RFC 5827) (Early-Retransmit is disabled by default)
     */
    earlyRetransmit?: pulumi.Input<number>;
    /**
     * FIN timeout (sec), default is disabled (number)
     */
    finTimeout?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being deleted, default is off (number (second))
     */
    forceDeleteTimeout?: pulumi.Input<number>;
    /**
     * The maximum time that a session can stay in the system before being deleted, default is off (number in 100ms)
     */
    forceDeleteTimeout100ms?: pulumi.Input<number>;
    /**
     * TCP Half Close Idle Timeout (sec), default is off (cmd is deprecated, use fin-timeout instead) (number)
     */
    halfCloseIdleTimeout?: pulumi.Input<number>;
    /**
     * TCP Half Open Idle Timeout (sec), default is off (number)
     */
    halfOpenIdleTimeout?: pulumi.Input<number>;
    /**
     * Idle Timeout (Interval of 60 seconds), default is 600 (idle timeout in second, default 600)
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * The initial congestion control window size (packets), default is 10 (init-cwnd in packets, default 10)
     */
    initCwnd?: pulumi.Input<number>;
    /**
     * Set the initial window size, default is off (number)
     */
    initialWindowSize?: pulumi.Input<number>;
    /**
     * Insert client ip into TCP option
     */
    insertClientIp?: pulumi.Input<number>;
    /**
     * Invalid Packet Response Rate Limit (ms), default is 500 (number default 500 challenges)
     */
    invalidRateLimit?: pulumi.Input<number>;
    /**
     * Interval between keepalive probes (sec), default is off (number (seconds))
     */
    keepaliveInterval?: pulumi.Input<number>;
    /**
     * Number of keepalive probes sent, default is off
     */
    keepaliveProbes?: pulumi.Input<number>;
    /**
     * RFC 3742 Limited Slow-Start for TCP with Large Congestion Windows (number)
     */
    limitedSlowstart?: pulumi.Input<number>;
    /**
     * The max packet count sent per transmission event (number)
     */
    maxburst?: pulumi.Input<number>;
    /**
     * The minmum retransmission timeout, default is 200ms (number)
     */
    minRto?: pulumi.Input<number>;
    /**
     * Responding MSS to use if client MSS is large, default is off (number)
     */
    mss?: pulumi.Input<number>;
    /**
     * Enable Nagle Algorithm
     */
    nagle?: pulumi.Input<number>;
    /**
     * Send naked ack before data during 3-way handshake
     */
    nakedAckOnHandshake?: pulumi.Input<number>;
    /**
     * TCP Proxy Template Name
     */
    name?: pulumi.Input<string>;
    proxyHeader?: pulumi.Input<inputs.SlbTemplateTcpProxyProxyHeader>;
    /**
     * Enable Optimized PSH Flag Use
     */
    pshFlagOptimization?: pulumi.Input<number>;
    /**
     * QOS level (number)
     */
    qos?: pulumi.Input<number>;
    /**
     * The reassembly queuing limit, default is 25 segments (number)
     */
    reassemblyLimit?: pulumi.Input<number>;
    /**
     * The reassembly timeout, default is 30sec (number)
     */
    reassemblyTimeout?: pulumi.Input<number>;
    /**
     * TCP Receive Buffer (default 200k) (number default 200000 bytes)
     */
    receiveBuffer?: pulumi.Input<number>;
    /**
     * Enable Reno Congestion Control Algorithm
     */
    reno?: pulumi.Input<number>;
    /**
     * send reset to server if error happens
     */
    resetFwd?: pulumi.Input<number>;
    /**
     * send reset to client if error happens
     */
    resetRev?: pulumi.Input<number>;
    /**
     * Number of Retries for Retransmit, default is 5
     */
    retransmitRetries?: pulumi.Input<number>;
    /**
     * 'FIN': FIN Connection; 'RST': Reset Connection;
     */
    serverDownAction?: pulumi.Input<string>;
    /**
     * SYN Retry Numbers, default is 5
     */
    synRetries?: pulumi.Input<number>;
    /**
     * Timewait Threshold (sec), default 5 (number)
     */
    timewait?: pulumi.Input<number>;
    /**
     * TCP Transmit Buffer (default 200k) (number default 200000 bytes)
     */
    transmitBuffer?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
