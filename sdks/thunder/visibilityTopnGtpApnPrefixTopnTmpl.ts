// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VisibilityTopnGtpApnPrefixTopnTmpl extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityTopnGtpApnPrefixTopnTmpl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityTopnGtpApnPrefixTopnTmplState, opts?: pulumi.CustomResourceOptions): VisibilityTopnGtpApnPrefixTopnTmpl {
        return new VisibilityTopnGtpApnPrefixTopnTmpl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityTopnGtpApnPrefixTopnTmpl:VisibilityTopnGtpApnPrefixTopnTmpl';

    /**
     * Returns true if the given object is an instance of VisibilityTopnGtpApnPrefixTopnTmpl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityTopnGtpApnPrefixTopnTmpl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityTopnGtpApnPrefixTopnTmpl.__pulumiType;
    }

    /**
     * '5': 5 minutes; '15': 15 minutes; '30': 30 minutes; '60': 60 minutes; 'all-time': Since template is activated;
     */
    public readonly interval!: pulumi.Output<string | undefined>;
    public readonly metrics!: pulumi.Output<outputs.VisibilityTopnGtpApnPrefixTopnTmplMetrics | undefined>;
    /**
     * Template Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Congure value of N for topn
     */
    public readonly topnSize!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VisibilityTopnGtpApnPrefixTopnTmpl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VisibilityTopnGtpApnPrefixTopnTmplArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityTopnGtpApnPrefixTopnTmplArgs | VisibilityTopnGtpApnPrefixTopnTmplState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityTopnGtpApnPrefixTopnTmplState | undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["metrics"] = state ? state.metrics : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["topnSize"] = state ? state.topnSize : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VisibilityTopnGtpApnPrefixTopnTmplArgs | undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["metrics"] = args ? args.metrics : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["topnSize"] = args ? args.topnSize : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityTopnGtpApnPrefixTopnTmpl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityTopnGtpApnPrefixTopnTmpl resources.
 */
export interface VisibilityTopnGtpApnPrefixTopnTmplState {
    /**
     * '5': 5 minutes; '15': 15 minutes; '30': 30 minutes; '60': 60 minutes; 'all-time': Since template is activated;
     */
    interval?: pulumi.Input<string>;
    metrics?: pulumi.Input<inputs.VisibilityTopnGtpApnPrefixTopnTmplMetrics>;
    /**
     * Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Congure value of N for topn
     */
    topnSize?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VisibilityTopnGtpApnPrefixTopnTmpl resource.
 */
export interface VisibilityTopnGtpApnPrefixTopnTmplArgs {
    /**
     * '5': 5 minutes; '15': 15 minutes; '30': 30 minutes; '60': 60 minutes; 'all-time': Since template is activated;
     */
    interval?: pulumi.Input<string>;
    metrics?: pulumi.Input<inputs.VisibilityTopnGtpApnPrefixTopnTmplMetrics>;
    /**
     * Template Name
     */
    name?: pulumi.Input<string>;
    /**
     * Congure value of N for topn
     */
    topnSize?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
