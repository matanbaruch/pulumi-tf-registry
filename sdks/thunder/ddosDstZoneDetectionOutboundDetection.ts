// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstZoneDetectionOutboundDetection extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstZoneDetectionOutboundDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstZoneDetectionOutboundDetectionState, opts?: pulumi.CustomResourceOptions): DdosDstZoneDetectionOutboundDetection {
        return new DdosDstZoneDetectionOutboundDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstZoneDetectionOutboundDetection:DdosDstZoneDetectionOutboundDetection';

    /**
     * Returns true if the given object is an instance of DdosDstZoneDetectionOutboundDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstZoneDetectionOutboundDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstZoneDetectionOutboundDetection.__pulumiType;
    }

    /**
     * 'configuration': configuration;
     */
    public readonly configuration!: pulumi.Output<string>;
    /**
     * 'asn': Autonomous Systems number; 'country': Country;
     */
    public readonly discoveryMethod!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of top locations
     */
    public readonly discoveryRecord!: pulumi.Output<number | undefined>;
    public readonly enableTopKs!: pulumi.Output<outputs.DdosDstZoneDetectionOutboundDetectionEnableTopK[] | undefined>;
    public readonly indicatorLists!: pulumi.Output<outputs.DdosDstZoneDetectionOutboundDetectionIndicatorList[] | undefined>;
    /**
     * 'enable': Enable outbound detection; 'disable': Disable outbound detection;
     */
    public readonly toggle!: pulumi.Output<string | undefined>;
    public readonly topkSourceSubnet!: pulumi.Output<outputs.DdosDstZoneDetectionOutboundDetectionTopkSourceSubnet | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * ZoneName
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a DdosDstZoneDetectionOutboundDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstZoneDetectionOutboundDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstZoneDetectionOutboundDetectionArgs | DdosDstZoneDetectionOutboundDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstZoneDetectionOutboundDetectionState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["discoveryMethod"] = state ? state.discoveryMethod : undefined;
            resourceInputs["discoveryRecord"] = state ? state.discoveryRecord : undefined;
            resourceInputs["enableTopKs"] = state ? state.enableTopKs : undefined;
            resourceInputs["indicatorLists"] = state ? state.indicatorLists : undefined;
            resourceInputs["toggle"] = state ? state.toggle : undefined;
            resourceInputs["topkSourceSubnet"] = state ? state.topkSourceSubnet : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as DdosDstZoneDetectionOutboundDetectionArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["configuration"] = args ? args.configuration : undefined;
            resourceInputs["discoveryMethod"] = args ? args.discoveryMethod : undefined;
            resourceInputs["discoveryRecord"] = args ? args.discoveryRecord : undefined;
            resourceInputs["enableTopKs"] = args ? args.enableTopKs : undefined;
            resourceInputs["indicatorLists"] = args ? args.indicatorLists : undefined;
            resourceInputs["toggle"] = args ? args.toggle : undefined;
            resourceInputs["topkSourceSubnet"] = args ? args.topkSourceSubnet : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstZoneDetectionOutboundDetection.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstZoneDetectionOutboundDetection resources.
 */
export interface DdosDstZoneDetectionOutboundDetectionState {
    /**
     * 'configuration': configuration;
     */
    configuration?: pulumi.Input<string>;
    /**
     * 'asn': Autonomous Systems number; 'country': Country;
     */
    discoveryMethod?: pulumi.Input<string>;
    /**
     * Maximum number of top locations
     */
    discoveryRecord?: pulumi.Input<number>;
    enableTopKs?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetectionEnableTopK>[]>;
    indicatorLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetectionIndicatorList>[]>;
    /**
     * 'enable': Enable outbound detection; 'disable': Disable outbound detection;
     */
    toggle?: pulumi.Input<string>;
    topkSourceSubnet?: pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetectionTopkSourceSubnet>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDstZoneDetectionOutboundDetection resource.
 */
export interface DdosDstZoneDetectionOutboundDetectionArgs {
    /**
     * 'configuration': configuration;
     */
    configuration: pulumi.Input<string>;
    /**
     * 'asn': Autonomous Systems number; 'country': Country;
     */
    discoveryMethod?: pulumi.Input<string>;
    /**
     * Maximum number of top locations
     */
    discoveryRecord?: pulumi.Input<number>;
    enableTopKs?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetectionEnableTopK>[]>;
    indicatorLists?: pulumi.Input<pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetectionIndicatorList>[]>;
    /**
     * 'enable': Enable outbound detection; 'disable': Disable outbound detection;
     */
    toggle?: pulumi.Input<string>;
    topkSourceSubnet?: pulumi.Input<inputs.DdosDstZoneDetectionOutboundDetectionTopkSourceSubnet>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * ZoneName
     */
    zoneName: pulumi.Input<string>;
}
