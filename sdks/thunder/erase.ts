// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Erase extends pulumi.CustomResource {
    /**
     * Get an existing Erase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EraseState, opts?: pulumi.CustomResourceOptions): Erase {
        return new Erase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/erase:Erase';

    /**
     * Returns true if the given object is an instance of Erase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Erase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Erase.__pulumiType;
    }

    /**
     * Wipe out all service config for all partitions
     */
    public readonly allPartitions!: pulumi.Output<number | undefined>;
    /**
     * Reset boot grub settings
     */
    public readonly grubconfig!: pulumi.Output<number | undefined>;
    /**
     * preserve admin accounts
     */
    public readonly preserveAccounts!: pulumi.Output<number | undefined>;
    /**
     * preserve managememt ip and default gateway
     */
    public readonly preserveManagement!: pulumi.Output<number | undefined>;
    /**
     * reload after erase
     */
    public readonly reload!: pulumi.Output<number | undefined>;
    /**
     * Wipe out all service config
     */
    public readonly serviceConfig!: pulumi.Output<number | undefined>;

    /**
     * Create a Erase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EraseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EraseArgs | EraseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EraseState | undefined;
            resourceInputs["allPartitions"] = state ? state.allPartitions : undefined;
            resourceInputs["grubconfig"] = state ? state.grubconfig : undefined;
            resourceInputs["preserveAccounts"] = state ? state.preserveAccounts : undefined;
            resourceInputs["preserveManagement"] = state ? state.preserveManagement : undefined;
            resourceInputs["reload"] = state ? state.reload : undefined;
            resourceInputs["serviceConfig"] = state ? state.serviceConfig : undefined;
        } else {
            const args = argsOrState as EraseArgs | undefined;
            resourceInputs["allPartitions"] = args ? args.allPartitions : undefined;
            resourceInputs["grubconfig"] = args ? args.grubconfig : undefined;
            resourceInputs["preserveAccounts"] = args ? args.preserveAccounts : undefined;
            resourceInputs["preserveManagement"] = args ? args.preserveManagement : undefined;
            resourceInputs["reload"] = args ? args.reload : undefined;
            resourceInputs["serviceConfig"] = args ? args.serviceConfig : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Erase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Erase resources.
 */
export interface EraseState {
    /**
     * Wipe out all service config for all partitions
     */
    allPartitions?: pulumi.Input<number>;
    /**
     * Reset boot grub settings
     */
    grubconfig?: pulumi.Input<number>;
    /**
     * preserve admin accounts
     */
    preserveAccounts?: pulumi.Input<number>;
    /**
     * preserve managememt ip and default gateway
     */
    preserveManagement?: pulumi.Input<number>;
    /**
     * reload after erase
     */
    reload?: pulumi.Input<number>;
    /**
     * Wipe out all service config
     */
    serviceConfig?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Erase resource.
 */
export interface EraseArgs {
    /**
     * Wipe out all service config for all partitions
     */
    allPartitions?: pulumi.Input<number>;
    /**
     * Reset boot grub settings
     */
    grubconfig?: pulumi.Input<number>;
    /**
     * preserve admin accounts
     */
    preserveAccounts?: pulumi.Input<number>;
    /**
     * preserve managememt ip and default gateway
     */
    preserveManagement?: pulumi.Input<number>;
    /**
     * reload after erase
     */
    reload?: pulumi.Input<number>;
    /**
     * Wipe out all service config
     */
    serviceConfig?: pulumi.Input<number>;
}
