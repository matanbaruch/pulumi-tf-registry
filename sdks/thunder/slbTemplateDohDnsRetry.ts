// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbTemplateDohDnsRetry extends pulumi.CustomResource {
    /**
     * Get an existing SlbTemplateDohDnsRetry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbTemplateDohDnsRetryState, opts?: pulumi.CustomResourceOptions): SlbTemplateDohDnsRetry {
        return new SlbTemplateDohDnsRetry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbTemplateDohDnsRetry:SlbTemplateDohDnsRetry';

    /**
     * Returns true if the given object is an instance of SlbTemplateDohDnsRetry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbTemplateDohDnsRetry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbTemplateDohDnsRetry.__pulumiType;
    }

    /**
     * 'close': Close client side connection; 'retry-with-tcp': Retry DNS query to server using TCP (If UDP was tried
     * initially. Close after.);
     */
    public readonly afterTimeout!: pulumi.Output<string | undefined>;
    /**
     * Total number of times to try DNS query to server before closing client connection, default 3
     */
    public readonly maxTrials!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * DNS Retry Interval value 1 - 400 in units of 100ms, default is 10 (default is 1000ms) (1 - 400 in units of 100ms,
     * default is 10 (1000ms/1sec))
     */
    public readonly retryInterval!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbTemplateDohDnsRetry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SlbTemplateDohDnsRetryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbTemplateDohDnsRetryArgs | SlbTemplateDohDnsRetryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbTemplateDohDnsRetryState | undefined;
            resourceInputs["afterTimeout"] = state ? state.afterTimeout : undefined;
            resourceInputs["maxTrials"] = state ? state.maxTrials : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retryInterval"] = state ? state.retryInterval : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbTemplateDohDnsRetryArgs | undefined;
            resourceInputs["afterTimeout"] = args ? args.afterTimeout : undefined;
            resourceInputs["maxTrials"] = args ? args.maxTrials : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retryInterval"] = args ? args.retryInterval : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbTemplateDohDnsRetry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbTemplateDohDnsRetry resources.
 */
export interface SlbTemplateDohDnsRetryState {
    /**
     * 'close': Close client side connection; 'retry-with-tcp': Retry DNS query to server using TCP (If UDP was tried
     * initially. Close after.);
     */
    afterTimeout?: pulumi.Input<string>;
    /**
     * Total number of times to try DNS query to server before closing client connection, default 3
     */
    maxTrials?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * DNS Retry Interval value 1 - 400 in units of 100ms, default is 10 (default is 1000ms) (1 - 400 in units of 100ms,
     * default is 10 (1000ms/1sec))
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbTemplateDohDnsRetry resource.
 */
export interface SlbTemplateDohDnsRetryArgs {
    /**
     * 'close': Close client side connection; 'retry-with-tcp': Retry DNS query to server using TCP (If UDP was tried
     * initially. Close after.);
     */
    afterTimeout?: pulumi.Input<string>;
    /**
     * Total number of times to try DNS query to server before closing client connection, default 3
     */
    maxTrials?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * DNS Retry Interval value 1 - 400 in units of 100ms, default is 10 (default is 1000ms) (1 - 400 in units of 100ms,
     * default is 10 (1000ms/1sec))
     */
    retryInterval?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
