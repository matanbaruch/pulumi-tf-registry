// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Glid extends pulumi.CustomResource {
    /**
     * Get an existing Glid resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlidState, opts?: pulumi.CustomResourceOptions): Glid {
        return new Glid(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/glid:Glid';

    /**
     * Returns true if the given object is an instance of Glid.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Glid {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Glid.__pulumiType;
    }

    /**
     * Kibit (kibibit / 1024-bit) rate limit per rate-interval
     */
    public readonly bitRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Connection Limit for the GLID (PBSLB range 1-1048575)
     */
    public readonly connLimit!: pulumi.Output<number | undefined>;
    /**
     * Connection rate limit per rate-interval (TPS range 1-16000000)
     */
    public readonly connRateLimit!: pulumi.Output<number | undefined>;
    public readonly connRateLimitInterval!: pulumi.Output<number | undefined>;
    /**
     * Description for glid
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly dns!: pulumi.Output<outputs.GlidDns | undefined>;
    public readonly dns64!: pulumi.Output<outputs.GlidDns64 | undefined>;
    /**
     * Fragmented packet rate limit per rate-interval
     */
    public readonly fragPktRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Global Limit ID Name (PBSLB allows number only)
     */
    public readonly name!: pulumi.Output<string>;
    public readonly overLimitCfg!: pulumi.Output<outputs.GlidOverLimitCfg | undefined>;
    /**
     * Packet rate limit per rate-interval
     */
    public readonly pktRateLimit!: pulumi.Output<number | undefined>;
    /**
     * '1sec': 1sec for internal glid rate unit; 'system-global-setting': use global rate interval;
     */
    public readonly rateUnit!: pulumi.Output<string | undefined>;
    /**
     * Request limit
     */
    public readonly requestLimit!: pulumi.Output<number | undefined>;
    /**
     * Request rate limit
     */
    public readonly requestRateLimit!: pulumi.Output<number | undefined>;
    /**
     * Number of 100ms
     */
    public readonly requestRateLimitInterval!: pulumi.Output<number | undefined>;
    /**
     * Syn Cookie threshold for the GLID
     */
    public readonly synCookieThr!: pulumi.Output<number | undefined>;
    /**
     * Use NAT pool specified to do reverse NAT for class list members bound to the lid
     */
    public readonly useNatPool!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Glid resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GlidArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlidArgs | GlidState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlidState | undefined;
            resourceInputs["bitRateLimit"] = state ? state.bitRateLimit : undefined;
            resourceInputs["connLimit"] = state ? state.connLimit : undefined;
            resourceInputs["connRateLimit"] = state ? state.connRateLimit : undefined;
            resourceInputs["connRateLimitInterval"] = state ? state.connRateLimitInterval : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["dns64"] = state ? state.dns64 : undefined;
            resourceInputs["fragPktRateLimit"] = state ? state.fragPktRateLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overLimitCfg"] = state ? state.overLimitCfg : undefined;
            resourceInputs["pktRateLimit"] = state ? state.pktRateLimit : undefined;
            resourceInputs["rateUnit"] = state ? state.rateUnit : undefined;
            resourceInputs["requestLimit"] = state ? state.requestLimit : undefined;
            resourceInputs["requestRateLimit"] = state ? state.requestRateLimit : undefined;
            resourceInputs["requestRateLimitInterval"] = state ? state.requestRateLimitInterval : undefined;
            resourceInputs["synCookieThr"] = state ? state.synCookieThr : undefined;
            resourceInputs["useNatPool"] = state ? state.useNatPool : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as GlidArgs | undefined;
            resourceInputs["bitRateLimit"] = args ? args.bitRateLimit : undefined;
            resourceInputs["connLimit"] = args ? args.connLimit : undefined;
            resourceInputs["connRateLimit"] = args ? args.connRateLimit : undefined;
            resourceInputs["connRateLimitInterval"] = args ? args.connRateLimitInterval : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["dns64"] = args ? args.dns64 : undefined;
            resourceInputs["fragPktRateLimit"] = args ? args.fragPktRateLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overLimitCfg"] = args ? args.overLimitCfg : undefined;
            resourceInputs["pktRateLimit"] = args ? args.pktRateLimit : undefined;
            resourceInputs["rateUnit"] = args ? args.rateUnit : undefined;
            resourceInputs["requestLimit"] = args ? args.requestLimit : undefined;
            resourceInputs["requestRateLimit"] = args ? args.requestRateLimit : undefined;
            resourceInputs["requestRateLimitInterval"] = args ? args.requestRateLimitInterval : undefined;
            resourceInputs["synCookieThr"] = args ? args.synCookieThr : undefined;
            resourceInputs["useNatPool"] = args ? args.useNatPool : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Glid.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Glid resources.
 */
export interface GlidState {
    /**
     * Kibit (kibibit / 1024-bit) rate limit per rate-interval
     */
    bitRateLimit?: pulumi.Input<number>;
    /**
     * Connection Limit for the GLID (PBSLB range 1-1048575)
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Connection rate limit per rate-interval (TPS range 1-16000000)
     */
    connRateLimit?: pulumi.Input<number>;
    connRateLimitInterval?: pulumi.Input<number>;
    /**
     * Description for glid
     */
    description?: pulumi.Input<string>;
    dns?: pulumi.Input<inputs.GlidDns>;
    dns64?: pulumi.Input<inputs.GlidDns64>;
    /**
     * Fragmented packet rate limit per rate-interval
     */
    fragPktRateLimit?: pulumi.Input<number>;
    /**
     * Global Limit ID Name (PBSLB allows number only)
     */
    name?: pulumi.Input<string>;
    overLimitCfg?: pulumi.Input<inputs.GlidOverLimitCfg>;
    /**
     * Packet rate limit per rate-interval
     */
    pktRateLimit?: pulumi.Input<number>;
    /**
     * '1sec': 1sec for internal glid rate unit; 'system-global-setting': use global rate interval;
     */
    rateUnit?: pulumi.Input<string>;
    /**
     * Request limit
     */
    requestLimit?: pulumi.Input<number>;
    /**
     * Request rate limit
     */
    requestRateLimit?: pulumi.Input<number>;
    /**
     * Number of 100ms
     */
    requestRateLimitInterval?: pulumi.Input<number>;
    /**
     * Syn Cookie threshold for the GLID
     */
    synCookieThr?: pulumi.Input<number>;
    /**
     * Use NAT pool specified to do reverse NAT for class list members bound to the lid
     */
    useNatPool?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Glid resource.
 */
export interface GlidArgs {
    /**
     * Kibit (kibibit / 1024-bit) rate limit per rate-interval
     */
    bitRateLimit?: pulumi.Input<number>;
    /**
     * Connection Limit for the GLID (PBSLB range 1-1048575)
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Connection rate limit per rate-interval (TPS range 1-16000000)
     */
    connRateLimit?: pulumi.Input<number>;
    connRateLimitInterval?: pulumi.Input<number>;
    /**
     * Description for glid
     */
    description?: pulumi.Input<string>;
    dns?: pulumi.Input<inputs.GlidDns>;
    dns64?: pulumi.Input<inputs.GlidDns64>;
    /**
     * Fragmented packet rate limit per rate-interval
     */
    fragPktRateLimit?: pulumi.Input<number>;
    /**
     * Global Limit ID Name (PBSLB allows number only)
     */
    name?: pulumi.Input<string>;
    overLimitCfg?: pulumi.Input<inputs.GlidOverLimitCfg>;
    /**
     * Packet rate limit per rate-interval
     */
    pktRateLimit?: pulumi.Input<number>;
    /**
     * '1sec': 1sec for internal glid rate unit; 'system-global-setting': use global rate interval;
     */
    rateUnit?: pulumi.Input<string>;
    /**
     * Request limit
     */
    requestLimit?: pulumi.Input<number>;
    /**
     * Request rate limit
     */
    requestRateLimit?: pulumi.Input<number>;
    /**
     * Number of 100ms
     */
    requestRateLimitInterval?: pulumi.Input<number>;
    /**
     * Syn Cookie threshold for the GLID
     */
    synCookieThr?: pulumi.Input<number>;
    /**
     * Use NAT pool specified to do reverse NAT for class list members bound to the lid
     */
    useNatPool?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
