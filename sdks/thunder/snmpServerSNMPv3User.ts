// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SnmpServerSNMPv3User extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerSNMPv3User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerSNMPv3UserState, opts?: pulumi.CustomResourceOptions): SnmpServerSNMPv3User {
        return new SnmpServerSNMPv3User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerSNMPv3User:SnmpServerSNMPv3User';

    /**
     * Returns true if the given object is an instance of SnmpServerSNMPv3User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerSNMPv3User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerSNMPv3User.__pulumiType;
    }

    /**
     * 'md5': Use HMAC MD5 algorithm for authentication; 'sha': Use HMAC SHA algorithm for authentication; 'sha-512': Use HMAC
     * SHA-512 algorithm for authentication; 'sha-384': Use HMAC SHA-384 algorithm for authentication; 'sha-256': Use HMAC
     * SHA-256 algorithm for authentication; 'sha-224': Use HMAC SHA-224 algorithm for authentication;
     */
    public readonly authVal!: pulumi.Output<string | undefined>;
    /**
     * Passphrase for encryption
     */
    public readonly encpasswd!: pulumi.Output<string | undefined>;
    /**
     * Group to which the user belongs
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Password of this user
     */
    public readonly passwd!: pulumi.Output<string | undefined>;
    /**
     * 'des': DES encryption alogrithm; 'aes': AES encryption alogrithm; 'aes-192': AES-192 encryption alogrithm; 'aes-256':
     * AES-256 encryption alogrithm; (Encryption type)
     */
    public readonly priv!: pulumi.Output<string | undefined>;
    /**
     * Name of the user
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * 'auth': Using the authNoPriv Security Level; 'noauth': Using the noAuthNoPriv Security Level;
     */
    public readonly v3!: pulumi.Output<string | undefined>;

    /**
     * Create a SnmpServerSNMPv3User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnmpServerSNMPv3UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerSNMPv3UserArgs | SnmpServerSNMPv3UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerSNMPv3UserState | undefined;
            resourceInputs["authVal"] = state ? state.authVal : undefined;
            resourceInputs["encpasswd"] = state ? state.encpasswd : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["passwd"] = state ? state.passwd : undefined;
            resourceInputs["priv"] = state ? state.priv : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["v3"] = state ? state.v3 : undefined;
        } else {
            const args = argsOrState as SnmpServerSNMPv3UserArgs | undefined;
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authVal"] = args ? args.authVal : undefined;
            resourceInputs["encpasswd"] = args ? args.encpasswd : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["passwd"] = args ? args.passwd : undefined;
            resourceInputs["priv"] = args ? args.priv : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["v3"] = args ? args.v3 : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerSNMPv3User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerSNMPv3User resources.
 */
export interface SnmpServerSNMPv3UserState {
    /**
     * 'md5': Use HMAC MD5 algorithm for authentication; 'sha': Use HMAC SHA algorithm for authentication; 'sha-512': Use HMAC
     * SHA-512 algorithm for authentication; 'sha-384': Use HMAC SHA-384 algorithm for authentication; 'sha-256': Use HMAC
     * SHA-256 algorithm for authentication; 'sha-224': Use HMAC SHA-224 algorithm for authentication;
     */
    authVal?: pulumi.Input<string>;
    /**
     * Passphrase for encryption
     */
    encpasswd?: pulumi.Input<string>;
    /**
     * Group to which the user belongs
     */
    group?: pulumi.Input<string>;
    /**
     * Password of this user
     */
    passwd?: pulumi.Input<string>;
    /**
     * 'des': DES encryption alogrithm; 'aes': AES encryption alogrithm; 'aes-192': AES-192 encryption alogrithm; 'aes-256':
     * AES-256 encryption alogrithm; (Encryption type)
     */
    priv?: pulumi.Input<string>;
    /**
     * Name of the user
     */
    username?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'auth': Using the authNoPriv Security Level; 'noauth': Using the noAuthNoPriv Security Level;
     */
    v3?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnmpServerSNMPv3User resource.
 */
export interface SnmpServerSNMPv3UserArgs {
    /**
     * 'md5': Use HMAC MD5 algorithm for authentication; 'sha': Use HMAC SHA algorithm for authentication; 'sha-512': Use HMAC
     * SHA-512 algorithm for authentication; 'sha-384': Use HMAC SHA-384 algorithm for authentication; 'sha-256': Use HMAC
     * SHA-256 algorithm for authentication; 'sha-224': Use HMAC SHA-224 algorithm for authentication;
     */
    authVal?: pulumi.Input<string>;
    /**
     * Passphrase for encryption
     */
    encpasswd?: pulumi.Input<string>;
    /**
     * Group to which the user belongs
     */
    group?: pulumi.Input<string>;
    /**
     * Password of this user
     */
    passwd?: pulumi.Input<string>;
    /**
     * 'des': DES encryption alogrithm; 'aes': AES encryption alogrithm; 'aes-192': AES-192 encryption alogrithm; 'aes-256':
     * AES-256 encryption alogrithm; (Encryption type)
     */
    priv?: pulumi.Input<string>;
    /**
     * Name of the user
     */
    username: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * 'auth': Using the authNoPriv Security Level; 'noauth': Using the noAuthNoPriv Security Level;
     */
    v3?: pulumi.Input<string>;
}
