// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AamAuthenticationServerLdapInstance extends pulumi.CustomResource {
    /**
     * Get an existing AamAuthenticationServerLdapInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAuthenticationServerLdapInstanceState, opts?: pulumi.CustomResourceOptions): AamAuthenticationServerLdapInstance {
        return new AamAuthenticationServerLdapInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAuthenticationServerLdapInstance:AamAuthenticationServerLdapInstance';

    /**
     * Returns true if the given object is an instance of AamAuthenticationServerLdapInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAuthenticationServerLdapInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAuthenticationServerLdapInstance.__pulumiType;
    }

    /**
     * The LDAP server's admin DN
     */
    public readonly adminDn!: pulumi.Output<string | undefined>;
    /**
     * Specify the LDAP server's admin secret password
     */
    public readonly adminSecret!: pulumi.Output<number | undefined>;
    /**
     * 'ad': Active Directory. Default; 'open-ldap': OpenLDAP;
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * Specify the LDAP server's search base
     */
    public readonly base!: pulumi.Output<string | undefined>;
    /**
     * Enforce using DN for LDAP binding(All user input name will be used to create DN)
     */
    public readonly bindWithDn!: pulumi.Output<number | undefined>;
    /**
     * Specify the LDAPS CA cert filename (Trusted LDAPS CA cert filename)
     */
    public readonly caCert!: pulumi.Output<string | undefined>;
    /**
     * Specify default domain for LDAP
     */
    public readonly defaultDomain!: pulumi.Output<string | undefined>;
    public readonly deriveBindDn!: pulumi.Output<outputs.AamAuthenticationServerLdapInstanceDeriveBindDn | undefined>;
    /**
     * Specify Distinguished Name attribute, default is CN
     */
    public readonly dnAttribute!: pulumi.Output<string | undefined>;
    /**
     * Check server's health status
     */
    public readonly healthCheck!: pulumi.Output<number | undefined>;
    /**
     * Disable configured health check configuration
     */
    public readonly healthCheckDisable!: pulumi.Output<number | undefined>;
    /**
     * Health monitor name
     */
    public readonly healthCheckString!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<outputs.AamAuthenticationServerLdapInstanceHost | undefined>;
    /**
     * Specify LDAPS connection reuse idle timeout value (in seconds) (Specify idle timeout value (in seconds), default is 0
     * (not reuse LDAPS connection))
     */
    public readonly ldapsConnReuseIdleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Specify LDAP authentication server name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    /**
     * Specify the LDAP server's authentication port, default is 389
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * Check port's health status
     */
    public readonly portHm!: pulumi.Output<string | undefined>;
    /**
     * Disable configured port health check configuration
     */
    public readonly portHmDisable!: pulumi.Output<number | undefined>;
    /**
     * Prompt user to change password before expiration in N days. This option only takes effect when server type is AD (Prompt
     * user to change password before expiration in N days, default is not to prompt the user)
     */
    public readonly promptPwChangeBeforeExp!: pulumi.Output<number | undefined>;
    /**
     * 'ldap': Use LDAP (default); 'ldaps': Use LDAP over SSL; 'starttls': Use LDAP StartTLS;
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Specify the LDAP server's default password expiration time (in seconds) (The LDAP server's default password expiration
     * time (in seconds), default is 0 (no expiration))
     */
    public readonly pwdmaxage!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.AamAuthenticationServerLdapInstanceSamplingEnable[] | undefined>;
    /**
     * secret password
     */
    public readonly secretString!: pulumi.Output<string | undefined>;
    /**
     * Specify timout for LDAP, default is 10 seconds (The timeout, default is 10 seconds)
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AamAuthenticationServerLdapInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AamAuthenticationServerLdapInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAuthenticationServerLdapInstanceArgs | AamAuthenticationServerLdapInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAuthenticationServerLdapInstanceState | undefined;
            resourceInputs["adminDn"] = state ? state.adminDn : undefined;
            resourceInputs["adminSecret"] = state ? state.adminSecret : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["base"] = state ? state.base : undefined;
            resourceInputs["bindWithDn"] = state ? state.bindWithDn : undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["defaultDomain"] = state ? state.defaultDomain : undefined;
            resourceInputs["deriveBindDn"] = state ? state.deriveBindDn : undefined;
            resourceInputs["dnAttribute"] = state ? state.dnAttribute : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = state ? state.healthCheckDisable : undefined;
            resourceInputs["healthCheckString"] = state ? state.healthCheckString : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ldapsConnReuseIdleTimeout"] = state ? state.ldapsConnReuseIdleTimeout : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["portHm"] = state ? state.portHm : undefined;
            resourceInputs["portHmDisable"] = state ? state.portHmDisable : undefined;
            resourceInputs["promptPwChangeBeforeExp"] = state ? state.promptPwChangeBeforeExp : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["pwdmaxage"] = state ? state.pwdmaxage : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["secretString"] = state ? state.secretString : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AamAuthenticationServerLdapInstanceArgs | undefined;
            resourceInputs["adminDn"] = args ? args.adminDn : undefined;
            resourceInputs["adminSecret"] = args ? args.adminSecret : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["base"] = args ? args.base : undefined;
            resourceInputs["bindWithDn"] = args ? args.bindWithDn : undefined;
            resourceInputs["caCert"] = args ? args.caCert : undefined;
            resourceInputs["defaultDomain"] = args ? args.defaultDomain : undefined;
            resourceInputs["deriveBindDn"] = args ? args.deriveBindDn : undefined;
            resourceInputs["dnAttribute"] = args ? args.dnAttribute : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["healthCheckDisable"] = args ? args.healthCheckDisable : undefined;
            resourceInputs["healthCheckString"] = args ? args.healthCheckString : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["ldapsConnReuseIdleTimeout"] = args ? args.ldapsConnReuseIdleTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["portHm"] = args ? args.portHm : undefined;
            resourceInputs["portHmDisable"] = args ? args.portHmDisable : undefined;
            resourceInputs["promptPwChangeBeforeExp"] = args ? args.promptPwChangeBeforeExp : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["pwdmaxage"] = args ? args.pwdmaxage : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["secretString"] = args ? args.secretString : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAuthenticationServerLdapInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAuthenticationServerLdapInstance resources.
 */
export interface AamAuthenticationServerLdapInstanceState {
    /**
     * The LDAP server's admin DN
     */
    adminDn?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's admin secret password
     */
    adminSecret?: pulumi.Input<number>;
    /**
     * 'ad': Active Directory. Default; 'open-ldap': OpenLDAP;
     */
    authType?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's search base
     */
    base?: pulumi.Input<string>;
    /**
     * Enforce using DN for LDAP binding(All user input name will be used to create DN)
     */
    bindWithDn?: pulumi.Input<number>;
    /**
     * Specify the LDAPS CA cert filename (Trusted LDAPS CA cert filename)
     */
    caCert?: pulumi.Input<string>;
    /**
     * Specify default domain for LDAP
     */
    defaultDomain?: pulumi.Input<string>;
    deriveBindDn?: pulumi.Input<inputs.AamAuthenticationServerLdapInstanceDeriveBindDn>;
    /**
     * Specify Distinguished Name attribute, default is CN
     */
    dnAttribute?: pulumi.Input<string>;
    /**
     * Check server's health status
     */
    healthCheck?: pulumi.Input<number>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Health monitor name
     */
    healthCheckString?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.AamAuthenticationServerLdapInstanceHost>;
    /**
     * Specify LDAPS connection reuse idle timeout value (in seconds) (Specify idle timeout value (in seconds), default is 0
     * (not reuse LDAPS connection))
     */
    ldapsConnReuseIdleTimeout?: pulumi.Input<number>;
    /**
     * Specify LDAP authentication server name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's authentication port, default is 389
     */
    port?: pulumi.Input<number>;
    /**
     * Check port's health status
     */
    portHm?: pulumi.Input<string>;
    /**
     * Disable configured port health check configuration
     */
    portHmDisable?: pulumi.Input<number>;
    /**
     * Prompt user to change password before expiration in N days. This option only takes effect when server type is AD (Prompt
     * user to change password before expiration in N days, default is not to prompt the user)
     */
    promptPwChangeBeforeExp?: pulumi.Input<number>;
    /**
     * 'ldap': Use LDAP (default); 'ldaps': Use LDAP over SSL; 'starttls': Use LDAP StartTLS;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's default password expiration time (in seconds) (The LDAP server's default password expiration
     * time (in seconds), default is 0 (no expiration))
     */
    pwdmaxage?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationServerLdapInstanceSamplingEnable>[]>;
    /**
     * secret password
     */
    secretString?: pulumi.Input<string>;
    /**
     * Specify timout for LDAP, default is 10 seconds (The timeout, default is 10 seconds)
     */
    timeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAuthenticationServerLdapInstance resource.
 */
export interface AamAuthenticationServerLdapInstanceArgs {
    /**
     * The LDAP server's admin DN
     */
    adminDn?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's admin secret password
     */
    adminSecret?: pulumi.Input<number>;
    /**
     * 'ad': Active Directory. Default; 'open-ldap': OpenLDAP;
     */
    authType?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's search base
     */
    base?: pulumi.Input<string>;
    /**
     * Enforce using DN for LDAP binding(All user input name will be used to create DN)
     */
    bindWithDn?: pulumi.Input<number>;
    /**
     * Specify the LDAPS CA cert filename (Trusted LDAPS CA cert filename)
     */
    caCert?: pulumi.Input<string>;
    /**
     * Specify default domain for LDAP
     */
    defaultDomain?: pulumi.Input<string>;
    deriveBindDn?: pulumi.Input<inputs.AamAuthenticationServerLdapInstanceDeriveBindDn>;
    /**
     * Specify Distinguished Name attribute, default is CN
     */
    dnAttribute?: pulumi.Input<string>;
    /**
     * Check server's health status
     */
    healthCheck?: pulumi.Input<number>;
    /**
     * Disable configured health check configuration
     */
    healthCheckDisable?: pulumi.Input<number>;
    /**
     * Health monitor name
     */
    healthCheckString?: pulumi.Input<string>;
    host?: pulumi.Input<inputs.AamAuthenticationServerLdapInstanceHost>;
    /**
     * Specify LDAPS connection reuse idle timeout value (in seconds) (Specify idle timeout value (in seconds), default is 0
     * (not reuse LDAPS connection))
     */
    ldapsConnReuseIdleTimeout?: pulumi.Input<number>;
    /**
     * Specify LDAP authentication server name
     */
    name?: pulumi.Input<string>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's authentication port, default is 389
     */
    port?: pulumi.Input<number>;
    /**
     * Check port's health status
     */
    portHm?: pulumi.Input<string>;
    /**
     * Disable configured port health check configuration
     */
    portHmDisable?: pulumi.Input<number>;
    /**
     * Prompt user to change password before expiration in N days. This option only takes effect when server type is AD (Prompt
     * user to change password before expiration in N days, default is not to prompt the user)
     */
    promptPwChangeBeforeExp?: pulumi.Input<number>;
    /**
     * 'ldap': Use LDAP (default); 'ldaps': Use LDAP over SSL; 'starttls': Use LDAP StartTLS;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Specify the LDAP server's default password expiration time (in seconds) (The LDAP server's default password expiration
     * time (in seconds), default is 0 (no expiration))
     */
    pwdmaxage?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationServerLdapInstanceSamplingEnable>[]>;
    /**
     * secret password
     */
    secretString?: pulumi.Input<string>;
    /**
     * Specify timout for LDAP, default is 10 seconds (The timeout, default is 10 seconds)
     */
    timeout?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
