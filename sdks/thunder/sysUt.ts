// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SysUt extends pulumi.CustomResource {
    /**
     * Get an existing SysUt resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SysUtState, opts?: pulumi.CustomResourceOptions): SysUt {
        return new SysUt(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/sysUt:SysUt';

    /**
     * Returns true if the given object is an instance of SysUt.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SysUt {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SysUt.__pulumiType;
    }

    /**
     * 'enable': Set device to SUT mode; 'disable': Set device to normal mode;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly common!: pulumi.Output<outputs.SysUtCommon | undefined>;
    public readonly eventLists!: pulumi.Output<outputs.SysUtEventList[] | undefined>;
    public readonly runTest!: pulumi.Output<outputs.SysUtRunTest | undefined>;
    /**
     * Minor test case name. This is autogenerated
     */
    public readonly secondaryName!: pulumi.Output<string | undefined>;
    public readonly stateLists!: pulumi.Output<outputs.SysUtStateList[] | undefined>;
    public readonly templateLists!: pulumi.Output<outputs.SysUtTemplateList[] | undefined>;
    /**
     * Name for this test case
     */
    public readonly testName!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SysUt resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SysUtArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SysUtArgs | SysUtState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SysUtState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["common"] = state ? state.common : undefined;
            resourceInputs["eventLists"] = state ? state.eventLists : undefined;
            resourceInputs["runTest"] = state ? state.runTest : undefined;
            resourceInputs["secondaryName"] = state ? state.secondaryName : undefined;
            resourceInputs["stateLists"] = state ? state.stateLists : undefined;
            resourceInputs["templateLists"] = state ? state.templateLists : undefined;
            resourceInputs["testName"] = state ? state.testName : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SysUtArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["common"] = args ? args.common : undefined;
            resourceInputs["eventLists"] = args ? args.eventLists : undefined;
            resourceInputs["runTest"] = args ? args.runTest : undefined;
            resourceInputs["secondaryName"] = args ? args.secondaryName : undefined;
            resourceInputs["stateLists"] = args ? args.stateLists : undefined;
            resourceInputs["templateLists"] = args ? args.templateLists : undefined;
            resourceInputs["testName"] = args ? args.testName : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SysUt.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SysUt resources.
 */
export interface SysUtState {
    /**
     * 'enable': Set device to SUT mode; 'disable': Set device to normal mode;
     */
    action?: pulumi.Input<string>;
    common?: pulumi.Input<inputs.SysUtCommon>;
    eventLists?: pulumi.Input<pulumi.Input<inputs.SysUtEventList>[]>;
    runTest?: pulumi.Input<inputs.SysUtRunTest>;
    /**
     * Minor test case name. This is autogenerated
     */
    secondaryName?: pulumi.Input<string>;
    stateLists?: pulumi.Input<pulumi.Input<inputs.SysUtStateList>[]>;
    templateLists?: pulumi.Input<pulumi.Input<inputs.SysUtTemplateList>[]>;
    /**
     * Name for this test case
     */
    testName?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SysUt resource.
 */
export interface SysUtArgs {
    /**
     * 'enable': Set device to SUT mode; 'disable': Set device to normal mode;
     */
    action?: pulumi.Input<string>;
    common?: pulumi.Input<inputs.SysUtCommon>;
    eventLists?: pulumi.Input<pulumi.Input<inputs.SysUtEventList>[]>;
    runTest?: pulumi.Input<inputs.SysUtRunTest>;
    /**
     * Minor test case name. This is autogenerated
     */
    secondaryName?: pulumi.Input<string>;
    stateLists?: pulumi.Input<pulumi.Input<inputs.SysUtStateList>[]>;
    templateLists?: pulumi.Input<pulumi.Input<inputs.SysUtTemplateList>[]>;
    /**
     * Name for this test case
     */
    testName?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
