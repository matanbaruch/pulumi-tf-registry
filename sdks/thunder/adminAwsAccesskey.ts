// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AdminAwsAccesskey extends pulumi.CustomResource {
    /**
     * Get an existing AdminAwsAccesskey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminAwsAccesskeyState, opts?: pulumi.CustomResourceOptions): AdminAwsAccesskey {
        return new AdminAwsAccesskey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/adminAwsAccesskey:AdminAwsAccesskey';

    /**
     * Returns true if the given object is an instance of AdminAwsAccesskey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdminAwsAccesskey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdminAwsAccesskey.__pulumiType;
    }

    /**
     * Delete an authorized aws accesskey
     */
    public readonly delete!: pulumi.Output<number | undefined>;
    /**
     * File URL
     */
    public readonly fileUrl!: pulumi.Output<string | undefined>;
    /**
     * Import an aws-accesskey
     */
    public readonly import!: pulumi.Output<number | undefined>;
    /**
     * Show authorized aws accesskey
     */
    public readonly show!: pulumi.Output<number | undefined>;
    /**
     * Use management port as source port
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * User
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a AdminAwsAccesskey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdminAwsAccesskeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminAwsAccesskeyArgs | AdminAwsAccesskeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminAwsAccesskeyState | undefined;
            resourceInputs["delete"] = state ? state.delete : undefined;
            resourceInputs["fileUrl"] = state ? state.fileUrl : undefined;
            resourceInputs["import"] = state ? state.import : undefined;
            resourceInputs["show"] = state ? state.show : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as AdminAwsAccesskeyArgs | undefined;
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["delete"] = args ? args.delete : undefined;
            resourceInputs["fileUrl"] = args ? args.fileUrl : undefined;
            resourceInputs["import"] = args ? args.import : undefined;
            resourceInputs["show"] = args ? args.show : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdminAwsAccesskey.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AdminAwsAccesskey resources.
 */
export interface AdminAwsAccesskeyState {
    /**
     * Delete an authorized aws accesskey
     */
    delete?: pulumi.Input<number>;
    /**
     * File URL
     */
    fileUrl?: pulumi.Input<string>;
    /**
     * Import an aws-accesskey
     */
    import?: pulumi.Input<number>;
    /**
     * Show authorized aws accesskey
     */
    show?: pulumi.Input<number>;
    /**
     * Use management port as source port
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * User
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AdminAwsAccesskey resource.
 */
export interface AdminAwsAccesskeyArgs {
    /**
     * Delete an authorized aws accesskey
     */
    delete?: pulumi.Input<number>;
    /**
     * File URL
     */
    fileUrl?: pulumi.Input<string>;
    /**
     * Import an aws-accesskey
     */
    import?: pulumi.Input<number>;
    /**
     * Show authorized aws accesskey
     */
    show?: pulumi.Input<number>;
    /**
     * Use management port as source port
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * User
     */
    user: pulumi.Input<string>;
}
