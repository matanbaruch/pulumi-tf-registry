// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HealthMonitorMethodSip extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodSip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodSipState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodSip {
        return new HealthMonitorMethodSip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodSip:HealthMonitorMethodSip';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodSip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodSip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodSip.__pulumiType;
    }

    /**
     * Specify accepted response codes (e.g. 200, 400-430, any) (Format is xxx,xxx-xxx,any (xxx between [100,899]))
     */
    public readonly expectResponseCode!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Send SIP REGISTER message, default is to send OPTION message
     */
    public readonly register!: pulumi.Output<number | undefined>;
    /**
     * SIP type
     */
    public readonly sip!: pulumi.Output<number | undefined>;
    /**
     * Specify the SIP hostname that used in request
     */
    public readonly sipHostname!: pulumi.Output<string | undefined>;
    /**
     * Specify the SIP port, default is 5060 (Port Number)
     */
    public readonly sipPort!: pulumi.Output<number | undefined>;
    /**
     * Use TCP for transmission, default is UDP
     */
    public readonly sipTcp!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitorMethodSip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodSipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodSipArgs | HealthMonitorMethodSipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodSipState | undefined;
            resourceInputs["expectResponseCode"] = state ? state.expectResponseCode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["register"] = state ? state.register : undefined;
            resourceInputs["sip"] = state ? state.sip : undefined;
            resourceInputs["sipHostname"] = state ? state.sipHostname : undefined;
            resourceInputs["sipPort"] = state ? state.sipPort : undefined;
            resourceInputs["sipTcp"] = state ? state.sipTcp : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodSipArgs | undefined;
            resourceInputs["expectResponseCode"] = args ? args.expectResponseCode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["register"] = args ? args.register : undefined;
            resourceInputs["sip"] = args ? args.sip : undefined;
            resourceInputs["sipHostname"] = args ? args.sipHostname : undefined;
            resourceInputs["sipPort"] = args ? args.sipPort : undefined;
            resourceInputs["sipTcp"] = args ? args.sipTcp : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodSip.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodSip resources.
 */
export interface HealthMonitorMethodSipState {
    /**
     * Specify accepted response codes (e.g. 200, 400-430, any) (Format is xxx,xxx-xxx,any (xxx between [100,899]))
     */
    expectResponseCode?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Send SIP REGISTER message, default is to send OPTION message
     */
    register?: pulumi.Input<number>;
    /**
     * SIP type
     */
    sip?: pulumi.Input<number>;
    /**
     * Specify the SIP hostname that used in request
     */
    sipHostname?: pulumi.Input<string>;
    /**
     * Specify the SIP port, default is 5060 (Port Number)
     */
    sipPort?: pulumi.Input<number>;
    /**
     * Use TCP for transmission, default is UDP
     */
    sipTcp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodSip resource.
 */
export interface HealthMonitorMethodSipArgs {
    /**
     * Specify accepted response codes (e.g. 200, 400-430, any) (Format is xxx,xxx-xxx,any (xxx between [100,899]))
     */
    expectResponseCode?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Send SIP REGISTER message, default is to send OPTION message
     */
    register?: pulumi.Input<number>;
    /**
     * SIP type
     */
    sip?: pulumi.Input<number>;
    /**
     * Specify the SIP hostname that used in request
     */
    sipHostname?: pulumi.Input<string>;
    /**
     * Specify the SIP port, default is 5060 (Port Number)
     */
    sipPort?: pulumi.Input<number>;
    /**
     * Use TCP for transmission, default is UDP
     */
    sipTcp?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
