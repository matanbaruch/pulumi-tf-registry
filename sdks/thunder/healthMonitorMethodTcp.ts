// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthMonitorMethodTcp extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodTcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodTcpState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodTcp {
        return new HealthMonitorMethodTcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodTcp:HealthMonitorMethodTcp';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodTcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodTcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodTcp.__pulumiType;
    }

    /**
     * Specify response text for maintenance
     */
    public readonly maintenance!: pulumi.Output<number | undefined>;
    /**
     * Specify text for maintenance
     */
    public readonly maintenanceText!: pulumi.Output<string | undefined>;
    /**
     * TCP type
     */
    public readonly methodTcp!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set TCP SYN check
     */
    public readonly portHalfopen!: pulumi.Output<number | undefined>;
    public readonly portResp!: pulumi.Output<outputs.HealthMonitorMethodTcpPortResp | undefined>;
    /**
     * Send a string to server (Specify the string)
     */
    public readonly portSend!: pulumi.Output<string | undefined>;
    /**
     * Specify TCP port (Specify port number)
     */
    public readonly tcpPort!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitorMethodTcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodTcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodTcpArgs | HealthMonitorMethodTcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodTcpState | undefined;
            resourceInputs["maintenance"] = state ? state.maintenance : undefined;
            resourceInputs["maintenanceText"] = state ? state.maintenanceText : undefined;
            resourceInputs["methodTcp"] = state ? state.methodTcp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portHalfopen"] = state ? state.portHalfopen : undefined;
            resourceInputs["portResp"] = state ? state.portResp : undefined;
            resourceInputs["portSend"] = state ? state.portSend : undefined;
            resourceInputs["tcpPort"] = state ? state.tcpPort : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodTcpArgs | undefined;
            resourceInputs["maintenance"] = args ? args.maintenance : undefined;
            resourceInputs["maintenanceText"] = args ? args.maintenanceText : undefined;
            resourceInputs["methodTcp"] = args ? args.methodTcp : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portHalfopen"] = args ? args.portHalfopen : undefined;
            resourceInputs["portResp"] = args ? args.portResp : undefined;
            resourceInputs["portSend"] = args ? args.portSend : undefined;
            resourceInputs["tcpPort"] = args ? args.tcpPort : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodTcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodTcp resources.
 */
export interface HealthMonitorMethodTcpState {
    /**
     * Specify response text for maintenance
     */
    maintenance?: pulumi.Input<number>;
    /**
     * Specify text for maintenance
     */
    maintenanceText?: pulumi.Input<string>;
    /**
     * TCP type
     */
    methodTcp?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Set TCP SYN check
     */
    portHalfopen?: pulumi.Input<number>;
    portResp?: pulumi.Input<inputs.HealthMonitorMethodTcpPortResp>;
    /**
     * Send a string to server (Specify the string)
     */
    portSend?: pulumi.Input<string>;
    /**
     * Specify TCP port (Specify port number)
     */
    tcpPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodTcp resource.
 */
export interface HealthMonitorMethodTcpArgs {
    /**
     * Specify response text for maintenance
     */
    maintenance?: pulumi.Input<number>;
    /**
     * Specify text for maintenance
     */
    maintenanceText?: pulumi.Input<string>;
    /**
     * TCP type
     */
    methodTcp?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Set TCP SYN check
     */
    portHalfopen?: pulumi.Input<number>;
    portResp?: pulumi.Input<inputs.HealthMonitorMethodTcpPortResp>;
    /**
     * Send a string to server (Specify the string)
     */
    portSend?: pulumi.Input<string>;
    /**
     * Specify TCP port (Specify port number)
     */
    tcpPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
