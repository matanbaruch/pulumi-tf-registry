// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NetworkIcmpv6RateLimit extends pulumi.CustomResource {
    /**
     * Get an existing NetworkIcmpv6RateLimit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkIcmpv6RateLimitState, opts?: pulumi.CustomResourceOptions): NetworkIcmpv6RateLimit {
        return new NetworkIcmpv6RateLimit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/networkIcmpv6RateLimit:NetworkIcmpv6RateLimit';

    /**
     * Returns true if the given object is an instance of NetworkIcmpv6RateLimit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkIcmpv6RateLimit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkIcmpv6RateLimit.__pulumiType;
    }

    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    public readonly icmpv6Lockup!: pulumi.Output<number | undefined>;
    /**
     * Lockup period (second)
     */
    public readonly icmpv6LockupPeriod!: pulumi.Output<number | undefined>;
    /**
     * Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit
     */
    public readonly icmpv6NormalRateLimit!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NetworkIcmpv6RateLimit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkIcmpv6RateLimitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkIcmpv6RateLimitArgs | NetworkIcmpv6RateLimitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkIcmpv6RateLimitState | undefined;
            resourceInputs["icmpv6Lockup"] = state ? state.icmpv6Lockup : undefined;
            resourceInputs["icmpv6LockupPeriod"] = state ? state.icmpv6LockupPeriod : undefined;
            resourceInputs["icmpv6NormalRateLimit"] = state ? state.icmpv6NormalRateLimit : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetworkIcmpv6RateLimitArgs | undefined;
            resourceInputs["icmpv6Lockup"] = args ? args.icmpv6Lockup : undefined;
            resourceInputs["icmpv6LockupPeriod"] = args ? args.icmpv6LockupPeriod : undefined;
            resourceInputs["icmpv6NormalRateLimit"] = args ? args.icmpv6NormalRateLimit : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkIcmpv6RateLimit.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkIcmpv6RateLimit resources.
 */
export interface NetworkIcmpv6RateLimitState {
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    icmpv6Lockup?: pulumi.Input<number>;
    /**
     * Lockup period (second)
     */
    icmpv6LockupPeriod?: pulumi.Input<number>;
    /**
     * Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit
     */
    icmpv6NormalRateLimit?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkIcmpv6RateLimit resource.
 */
export interface NetworkIcmpv6RateLimitArgs {
    /**
     * Enter lockup state when ICMP rate exceeds lockup rate limit (Maximum rate limit. If exceeds this limit, drop all ICMP
     * packet for a time period)
     */
    icmpv6Lockup?: pulumi.Input<number>;
    /**
     * Lockup period (second)
     */
    icmpv6LockupPeriod?: pulumi.Input<number>;
    /**
     * Normal rate limit. If exceeds this limit, drop the ICMP packet that goes over the limit
     */
    icmpv6NormalRateLimit?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
