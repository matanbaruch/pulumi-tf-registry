// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FileCsr extends pulumi.CustomResource {
    /**
     * Get an existing FileCsr resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileCsrState, opts?: pulumi.CustomResourceOptions): FileCsr {
        return new FileCsr(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/fileCsr:FileCsr';

    /**
     * Returns true if the given object is an instance of FileCsr.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileCsr {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileCsr.__pulumiType;
    }

    /**
     * Certificate type
     */
    public readonly certType!: pulumi.Output<string | undefined>;
    /**
     * Common name
     */
    public readonly commonName!: pulumi.Output<string>;
    /**
     * Country
     */
    public readonly country!: pulumi.Output<string>;
    /**
     * Digest type
     */
    public readonly digest!: pulumi.Output<string | undefined>;
    /**
     * Division
     */
    public readonly division!: pulumi.Output<string | undefined>;
    /**
     * Email address
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * Key size
     */
    public readonly keySize!: pulumi.Output<string | undefined>;
    /**
     * Locality
     */
    public readonly locality!: pulumi.Output<string | undefined>;
    /**
     * Local file name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization
     */
    public readonly organization!: pulumi.Output<string | undefined>;
    /**
     * Mark key as non-exportable
     */
    public readonly secured!: pulumi.Output<number | undefined>;
    /**
     * State province
     */
    public readonly stateProvince!: pulumi.Output<string | undefined>;
    /**
     * Valid days
     */
    public readonly validDays!: pulumi.Output<number | undefined>;

    /**
     * Create a FileCsr resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileCsrArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileCsrArgs | FileCsrState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileCsrState | undefined;
            resourceInputs["certType"] = state ? state.certType : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["country"] = state ? state.country : undefined;
            resourceInputs["digest"] = state ? state.digest : undefined;
            resourceInputs["division"] = state ? state.division : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["keySize"] = state ? state.keySize : undefined;
            resourceInputs["locality"] = state ? state.locality : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["secured"] = state ? state.secured : undefined;
            resourceInputs["stateProvince"] = state ? state.stateProvince : undefined;
            resourceInputs["validDays"] = state ? state.validDays : undefined;
        } else {
            const args = argsOrState as FileCsrArgs | undefined;
            if ((!args || args.commonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commonName'");
            }
            if ((!args || args.country === undefined) && !opts.urn) {
                throw new Error("Missing required property 'country'");
            }
            resourceInputs["certType"] = args ? args.certType : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["country"] = args ? args.country : undefined;
            resourceInputs["digest"] = args ? args.digest : undefined;
            resourceInputs["division"] = args ? args.division : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["keySize"] = args ? args.keySize : undefined;
            resourceInputs["locality"] = args ? args.locality : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["secured"] = args ? args.secured : undefined;
            resourceInputs["stateProvince"] = args ? args.stateProvince : undefined;
            resourceInputs["validDays"] = args ? args.validDays : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileCsr.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FileCsr resources.
 */
export interface FileCsrState {
    /**
     * Certificate type
     */
    certType?: pulumi.Input<string>;
    /**
     * Common name
     */
    commonName?: pulumi.Input<string>;
    /**
     * Country
     */
    country?: pulumi.Input<string>;
    /**
     * Digest type
     */
    digest?: pulumi.Input<string>;
    /**
     * Division
     */
    division?: pulumi.Input<string>;
    /**
     * Email address
     */
    email?: pulumi.Input<string>;
    /**
     * Key size
     */
    keySize?: pulumi.Input<string>;
    /**
     * Locality
     */
    locality?: pulumi.Input<string>;
    /**
     * Local file name
     */
    name?: pulumi.Input<string>;
    /**
     * Organization
     */
    organization?: pulumi.Input<string>;
    /**
     * Mark key as non-exportable
     */
    secured?: pulumi.Input<number>;
    /**
     * State province
     */
    stateProvince?: pulumi.Input<string>;
    /**
     * Valid days
     */
    validDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a FileCsr resource.
 */
export interface FileCsrArgs {
    /**
     * Certificate type
     */
    certType?: pulumi.Input<string>;
    /**
     * Common name
     */
    commonName: pulumi.Input<string>;
    /**
     * Country
     */
    country: pulumi.Input<string>;
    /**
     * Digest type
     */
    digest?: pulumi.Input<string>;
    /**
     * Division
     */
    division?: pulumi.Input<string>;
    /**
     * Email address
     */
    email?: pulumi.Input<string>;
    /**
     * Key size
     */
    keySize?: pulumi.Input<string>;
    /**
     * Locality
     */
    locality?: pulumi.Input<string>;
    /**
     * Local file name
     */
    name?: pulumi.Input<string>;
    /**
     * Organization
     */
    organization?: pulumi.Input<string>;
    /**
     * Mark key as non-exportable
     */
    secured?: pulumi.Input<number>;
    /**
     * State province
     */
    stateProvince?: pulumi.Input<string>;
    /**
     * Valid days
     */
    validDays?: pulumi.Input<number>;
}
