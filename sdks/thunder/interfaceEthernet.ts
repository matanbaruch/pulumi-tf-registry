// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceEthernet extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceEthernet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceEthernetState, opts?: pulumi.CustomResourceOptions): InterfaceEthernet {
        return new InterfaceEthernet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/interfaceEthernet:InterfaceEthernet';

    /**
     * Returns true if the given object is an instance of InterfaceEthernet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceEthernet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceEthernet.__pulumiType;
    }

    public readonly accessList!: pulumi.Output<outputs.InterfaceEthernetAccessList | undefined>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * enable auto-negotiation
     */
    public readonly autoNegEnable!: pulumi.Output<number | undefined>;
    public readonly bfd!: pulumi.Output<outputs.InterfaceEthernetBfd | undefined>;
    /**
     * All Packets to this port are processed by CPU
     */
    public readonly cpuProcess!: pulumi.Output<number | undefined>;
    /**
     * 'primary': Primary board; 'blade': blade board; 'hash-dip': Hash based on the Destination IP; 'hash-sip': Hash based on
     * the Source IP; 'hash-dmac': Hash based on the Destination MAC; 'hash-smac': Hash based on the Source MAC;
     */
    public readonly cpuProcessDir!: pulumi.Output<string | undefined>;
    public readonly ddos!: pulumi.Output<outputs.InterfaceEthernetDdos | undefined>;
    /**
     * 'Full': Full; 'Half': Half; 'auto': auto;
     */
    public readonly duplexity!: pulumi.Output<string | undefined>;
    /**
     * turn off the FEC
     */
    public readonly fecForcedOff!: pulumi.Output<number | undefined>;
    /**
     * turn on the FEC
     */
    public readonly fecForcedOn!: pulumi.Output<number | undefined>;
    /**
     * Enable 802.3x flow control on full duplex port
     */
    public readonly flowControl!: pulumi.Output<number | undefined>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    public readonly gamingProtocolCompliance!: pulumi.Output<number | undefined>;
    public readonly icmpRateLimit!: pulumi.Output<outputs.InterfaceEthernetIcmpRateLimit | undefined>;
    public readonly icmpv6RateLimit!: pulumi.Output<outputs.InterfaceEthernetIcmpv6RateLimit | undefined>;
    /**
     * Ethernet interface number
     */
    public readonly ifnum!: pulumi.Output<number>;
    public readonly ip!: pulumi.Output<outputs.InterfaceEthernetIp | undefined>;
    /**
     * Set Inter-packet-gap interval in bit timing, default is 96
     */
    public readonly ipgBitTime!: pulumi.Output<number | undefined>;
    public readonly ipv6!: pulumi.Output<outputs.InterfaceEthernetIpv6 | undefined>;
    public readonly isis!: pulumi.Output<outputs.InterfaceEthernetIsis | undefined>;
    public readonly l3VlanFwdDisable!: pulumi.Output<number | undefined>;
    public readonly lldp!: pulumi.Output<outputs.InterfaceEthernetLldp | undefined>;
    /**
     * Configure Load Interval (Seconds (5-300, Multiple of 5), default 300)
     */
    public readonly loadInterval!: pulumi.Output<number | undefined>;
    public readonly lw4o6!: pulumi.Output<outputs.InterfaceEthernetLw4o6 | undefined>;
    /**
     * 'enable': Enable MAC learning; 'disable': Disable MAC learning; 'dmac-only': Enable destination MAC learning only;
     */
    public readonly macLearning!: pulumi.Output<string | undefined>;
    public readonly map!: pulumi.Output<outputs.InterfaceEthernetMap | undefined>;
    /**
     * Set the media type to copper
     */
    public readonly mediaTypeCopper!: pulumi.Output<number | undefined>;
    public readonly monitorLists!: pulumi.Output<outputs.InterfaceEthernetMonitorList[] | undefined>;
    /**
     * Interface mtu (Interface MTU, default 1 (min MTU is 1280 for IPv6))
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Name for the interface
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nptv6!: pulumi.Output<outputs.InterfaceEthernetNptv6 | undefined>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    public readonly packetCaptureTemplate!: pulumi.Output<string | undefined>;
    /**
     * 'enable': Enabl ping sweep detection; 'disable': Disable ping sweep detection(default);
     */
    public readonly pingSweepDetection!: pulumi.Output<string | undefined>;
    /**
     * '4x10G': Breakout 100G/40G ports into 4x10G ports; '4x25G': Breakout 100G ports into 4x25G ports; '2x50G': Breakout 100G
     * ports into 2x50G ports;
     */
    public readonly portBreakout!: pulumi.Output<string | undefined>;
    /**
     * 'enable': Enable port scan detection; 'disable': Disable port scan detection(default);
     */
    public readonly portScanDetection!: pulumi.Output<string | undefined>;
    /**
     * Remove the vlan tag for egressing packets
     */
    public readonly removeVlanTag!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.InterfaceEthernetSamplingEnable[] | undefined>;
    public readonly spanningTree!: pulumi.Output<outputs.InterfaceEthernetSpanningTree | undefined>;
    /**
     * '10': 10; '100': 100; '1000': 1000; 'auto': auto;
     */
    public readonly speed!: pulumi.Output<string | undefined>;
    /**
     * force the speed to be 10G on 25G link
     */
    public readonly speedForced10g!: pulumi.Output<number | undefined>;
    /**
     * force the speed to be 1G on 25G link
     */
    public readonly speedForced1g!: pulumi.Output<number | undefined>;
    /**
     * force the speed to be 40G on 100G link
     */
    public readonly speedForced40g!: pulumi.Output<number | undefined>;
    /**
     * 'sip': sip; 'dip': dip; 'primary': primary; 'blade': blade; 'l4-src-port': l4-src-port; 'l4-dst-port': l4-dst-port;
     */
    public readonly trafficDistributionMode!: pulumi.Output<string | undefined>;
    /**
     * The trap source
     */
    public readonly trapSource!: pulumi.Output<number | undefined>;
    public readonly trunkGroupLists!: pulumi.Output<outputs.InterfaceEthernetTrunkGroupList[] | undefined>;
    /**
     * Update and use received L2 information
     */
    public readonly updateL2Info!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Mark ethernet as a virtual wire interface
     */
    public readonly virtualWire!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable VLAN learning; 'disable': Disable VLAN learning;
     */
    public readonly vlanLearning!: pulumi.Output<string | undefined>;

    /**
     * Create a InterfaceEthernet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceEthernetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceEthernetArgs | InterfaceEthernetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceEthernetState | undefined;
            resourceInputs["accessList"] = state ? state.accessList : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["autoNegEnable"] = state ? state.autoNegEnable : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["cpuProcess"] = state ? state.cpuProcess : undefined;
            resourceInputs["cpuProcessDir"] = state ? state.cpuProcessDir : undefined;
            resourceInputs["ddos"] = state ? state.ddos : undefined;
            resourceInputs["duplexity"] = state ? state.duplexity : undefined;
            resourceInputs["fecForcedOff"] = state ? state.fecForcedOff : undefined;
            resourceInputs["fecForcedOn"] = state ? state.fecForcedOn : undefined;
            resourceInputs["flowControl"] = state ? state.flowControl : undefined;
            resourceInputs["gamingProtocolCompliance"] = state ? state.gamingProtocolCompliance : undefined;
            resourceInputs["icmpRateLimit"] = state ? state.icmpRateLimit : undefined;
            resourceInputs["icmpv6RateLimit"] = state ? state.icmpv6RateLimit : undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["ipgBitTime"] = state ? state.ipgBitTime : undefined;
            resourceInputs["ipv6"] = state ? state.ipv6 : undefined;
            resourceInputs["isis"] = state ? state.isis : undefined;
            resourceInputs["l3VlanFwdDisable"] = state ? state.l3VlanFwdDisable : undefined;
            resourceInputs["lldp"] = state ? state.lldp : undefined;
            resourceInputs["loadInterval"] = state ? state.loadInterval : undefined;
            resourceInputs["lw4o6"] = state ? state.lw4o6 : undefined;
            resourceInputs["macLearning"] = state ? state.macLearning : undefined;
            resourceInputs["map"] = state ? state.map : undefined;
            resourceInputs["mediaTypeCopper"] = state ? state.mediaTypeCopper : undefined;
            resourceInputs["monitorLists"] = state ? state.monitorLists : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nptv6"] = state ? state.nptv6 : undefined;
            resourceInputs["packetCaptureTemplate"] = state ? state.packetCaptureTemplate : undefined;
            resourceInputs["pingSweepDetection"] = state ? state.pingSweepDetection : undefined;
            resourceInputs["portBreakout"] = state ? state.portBreakout : undefined;
            resourceInputs["portScanDetection"] = state ? state.portScanDetection : undefined;
            resourceInputs["removeVlanTag"] = state ? state.removeVlanTag : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["spanningTree"] = state ? state.spanningTree : undefined;
            resourceInputs["speed"] = state ? state.speed : undefined;
            resourceInputs["speedForced10g"] = state ? state.speedForced10g : undefined;
            resourceInputs["speedForced1g"] = state ? state.speedForced1g : undefined;
            resourceInputs["speedForced40g"] = state ? state.speedForced40g : undefined;
            resourceInputs["trafficDistributionMode"] = state ? state.trafficDistributionMode : undefined;
            resourceInputs["trapSource"] = state ? state.trapSource : undefined;
            resourceInputs["trunkGroupLists"] = state ? state.trunkGroupLists : undefined;
            resourceInputs["updateL2Info"] = state ? state.updateL2Info : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["virtualWire"] = state ? state.virtualWire : undefined;
            resourceInputs["vlanLearning"] = state ? state.vlanLearning : undefined;
        } else {
            const args = argsOrState as InterfaceEthernetArgs | undefined;
            if ((!args || args.ifnum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifnum'");
            }
            resourceInputs["accessList"] = args ? args.accessList : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["autoNegEnable"] = args ? args.autoNegEnable : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["cpuProcess"] = args ? args.cpuProcess : undefined;
            resourceInputs["cpuProcessDir"] = args ? args.cpuProcessDir : undefined;
            resourceInputs["ddos"] = args ? args.ddos : undefined;
            resourceInputs["duplexity"] = args ? args.duplexity : undefined;
            resourceInputs["fecForcedOff"] = args ? args.fecForcedOff : undefined;
            resourceInputs["fecForcedOn"] = args ? args.fecForcedOn : undefined;
            resourceInputs["flowControl"] = args ? args.flowControl : undefined;
            resourceInputs["gamingProtocolCompliance"] = args ? args.gamingProtocolCompliance : undefined;
            resourceInputs["icmpRateLimit"] = args ? args.icmpRateLimit : undefined;
            resourceInputs["icmpv6RateLimit"] = args ? args.icmpv6RateLimit : undefined;
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["ipgBitTime"] = args ? args.ipgBitTime : undefined;
            resourceInputs["ipv6"] = args ? args.ipv6 : undefined;
            resourceInputs["isis"] = args ? args.isis : undefined;
            resourceInputs["l3VlanFwdDisable"] = args ? args.l3VlanFwdDisable : undefined;
            resourceInputs["lldp"] = args ? args.lldp : undefined;
            resourceInputs["loadInterval"] = args ? args.loadInterval : undefined;
            resourceInputs["lw4o6"] = args ? args.lw4o6 : undefined;
            resourceInputs["macLearning"] = args ? args.macLearning : undefined;
            resourceInputs["map"] = args ? args.map : undefined;
            resourceInputs["mediaTypeCopper"] = args ? args.mediaTypeCopper : undefined;
            resourceInputs["monitorLists"] = args ? args.monitorLists : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nptv6"] = args ? args.nptv6 : undefined;
            resourceInputs["packetCaptureTemplate"] = args ? args.packetCaptureTemplate : undefined;
            resourceInputs["pingSweepDetection"] = args ? args.pingSweepDetection : undefined;
            resourceInputs["portBreakout"] = args ? args.portBreakout : undefined;
            resourceInputs["portScanDetection"] = args ? args.portScanDetection : undefined;
            resourceInputs["removeVlanTag"] = args ? args.removeVlanTag : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["spanningTree"] = args ? args.spanningTree : undefined;
            resourceInputs["speed"] = args ? args.speed : undefined;
            resourceInputs["speedForced10g"] = args ? args.speedForced10g : undefined;
            resourceInputs["speedForced1g"] = args ? args.speedForced1g : undefined;
            resourceInputs["speedForced40g"] = args ? args.speedForced40g : undefined;
            resourceInputs["trafficDistributionMode"] = args ? args.trafficDistributionMode : undefined;
            resourceInputs["trapSource"] = args ? args.trapSource : undefined;
            resourceInputs["trunkGroupLists"] = args ? args.trunkGroupLists : undefined;
            resourceInputs["updateL2Info"] = args ? args.updateL2Info : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["virtualWire"] = args ? args.virtualWire : undefined;
            resourceInputs["vlanLearning"] = args ? args.vlanLearning : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceEthernet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceEthernet resources.
 */
export interface InterfaceEthernetState {
    accessList?: pulumi.Input<inputs.InterfaceEthernetAccessList>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    /**
     * enable auto-negotiation
     */
    autoNegEnable?: pulumi.Input<number>;
    bfd?: pulumi.Input<inputs.InterfaceEthernetBfd>;
    /**
     * All Packets to this port are processed by CPU
     */
    cpuProcess?: pulumi.Input<number>;
    /**
     * 'primary': Primary board; 'blade': blade board; 'hash-dip': Hash based on the Destination IP; 'hash-sip': Hash based on
     * the Source IP; 'hash-dmac': Hash based on the Destination MAC; 'hash-smac': Hash based on the Source MAC;
     */
    cpuProcessDir?: pulumi.Input<string>;
    ddos?: pulumi.Input<inputs.InterfaceEthernetDdos>;
    /**
     * 'Full': Full; 'Half': Half; 'auto': auto;
     */
    duplexity?: pulumi.Input<string>;
    /**
     * turn off the FEC
     */
    fecForcedOff?: pulumi.Input<number>;
    /**
     * turn on the FEC
     */
    fecForcedOn?: pulumi.Input<number>;
    /**
     * Enable 802.3x flow control on full duplex port
     */
    flowControl?: pulumi.Input<number>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    gamingProtocolCompliance?: pulumi.Input<number>;
    icmpRateLimit?: pulumi.Input<inputs.InterfaceEthernetIcmpRateLimit>;
    icmpv6RateLimit?: pulumi.Input<inputs.InterfaceEthernetIcmpv6RateLimit>;
    /**
     * Ethernet interface number
     */
    ifnum?: pulumi.Input<number>;
    ip?: pulumi.Input<inputs.InterfaceEthernetIp>;
    /**
     * Set Inter-packet-gap interval in bit timing, default is 96
     */
    ipgBitTime?: pulumi.Input<number>;
    ipv6?: pulumi.Input<inputs.InterfaceEthernetIpv6>;
    isis?: pulumi.Input<inputs.InterfaceEthernetIsis>;
    l3VlanFwdDisable?: pulumi.Input<number>;
    lldp?: pulumi.Input<inputs.InterfaceEthernetLldp>;
    /**
     * Configure Load Interval (Seconds (5-300, Multiple of 5), default 300)
     */
    loadInterval?: pulumi.Input<number>;
    lw4o6?: pulumi.Input<inputs.InterfaceEthernetLw4o6>;
    /**
     * 'enable': Enable MAC learning; 'disable': Disable MAC learning; 'dmac-only': Enable destination MAC learning only;
     */
    macLearning?: pulumi.Input<string>;
    map?: pulumi.Input<inputs.InterfaceEthernetMap>;
    /**
     * Set the media type to copper
     */
    mediaTypeCopper?: pulumi.Input<number>;
    monitorLists?: pulumi.Input<pulumi.Input<inputs.InterfaceEthernetMonitorList>[]>;
    /**
     * Interface mtu (Interface MTU, default 1 (min MTU is 1280 for IPv6))
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name for the interface
     */
    name?: pulumi.Input<string>;
    nptv6?: pulumi.Input<inputs.InterfaceEthernetNptv6>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * 'enable': Enabl ping sweep detection; 'disable': Disable ping sweep detection(default);
     */
    pingSweepDetection?: pulumi.Input<string>;
    /**
     * '4x10G': Breakout 100G/40G ports into 4x10G ports; '4x25G': Breakout 100G ports into 4x25G ports; '2x50G': Breakout 100G
     * ports into 2x50G ports;
     */
    portBreakout?: pulumi.Input<string>;
    /**
     * 'enable': Enable port scan detection; 'disable': Disable port scan detection(default);
     */
    portScanDetection?: pulumi.Input<string>;
    /**
     * Remove the vlan tag for egressing packets
     */
    removeVlanTag?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.InterfaceEthernetSamplingEnable>[]>;
    spanningTree?: pulumi.Input<inputs.InterfaceEthernetSpanningTree>;
    /**
     * '10': 10; '100': 100; '1000': 1000; 'auto': auto;
     */
    speed?: pulumi.Input<string>;
    /**
     * force the speed to be 10G on 25G link
     */
    speedForced10g?: pulumi.Input<number>;
    /**
     * force the speed to be 1G on 25G link
     */
    speedForced1g?: pulumi.Input<number>;
    /**
     * force the speed to be 40G on 100G link
     */
    speedForced40g?: pulumi.Input<number>;
    /**
     * 'sip': sip; 'dip': dip; 'primary': primary; 'blade': blade; 'l4-src-port': l4-src-port; 'l4-dst-port': l4-dst-port;
     */
    trafficDistributionMode?: pulumi.Input<string>;
    /**
     * The trap source
     */
    trapSource?: pulumi.Input<number>;
    trunkGroupLists?: pulumi.Input<pulumi.Input<inputs.InterfaceEthernetTrunkGroupList>[]>;
    /**
     * Update and use received L2 information
     */
    updateL2Info?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Mark ethernet as a virtual wire interface
     */
    virtualWire?: pulumi.Input<number>;
    /**
     * 'enable': Enable VLAN learning; 'disable': Disable VLAN learning;
     */
    vlanLearning?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceEthernet resource.
 */
export interface InterfaceEthernetArgs {
    accessList?: pulumi.Input<inputs.InterfaceEthernetAccessList>;
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    /**
     * enable auto-negotiation
     */
    autoNegEnable?: pulumi.Input<number>;
    bfd?: pulumi.Input<inputs.InterfaceEthernetBfd>;
    /**
     * All Packets to this port are processed by CPU
     */
    cpuProcess?: pulumi.Input<number>;
    /**
     * 'primary': Primary board; 'blade': blade board; 'hash-dip': Hash based on the Destination IP; 'hash-sip': Hash based on
     * the Source IP; 'hash-dmac': Hash based on the Destination MAC; 'hash-smac': Hash based on the Source MAC;
     */
    cpuProcessDir?: pulumi.Input<string>;
    ddos?: pulumi.Input<inputs.InterfaceEthernetDdos>;
    /**
     * 'Full': Full; 'Half': Half; 'auto': auto;
     */
    duplexity?: pulumi.Input<string>;
    /**
     * turn off the FEC
     */
    fecForcedOff?: pulumi.Input<number>;
    /**
     * turn on the FEC
     */
    fecForcedOn?: pulumi.Input<number>;
    /**
     * Enable 802.3x flow control on full duplex port
     */
    flowControl?: pulumi.Input<number>;
    /**
     * Enable Gaming Protocol Compliance Check
     */
    gamingProtocolCompliance?: pulumi.Input<number>;
    icmpRateLimit?: pulumi.Input<inputs.InterfaceEthernetIcmpRateLimit>;
    icmpv6RateLimit?: pulumi.Input<inputs.InterfaceEthernetIcmpv6RateLimit>;
    /**
     * Ethernet interface number
     */
    ifnum: pulumi.Input<number>;
    ip?: pulumi.Input<inputs.InterfaceEthernetIp>;
    /**
     * Set Inter-packet-gap interval in bit timing, default is 96
     */
    ipgBitTime?: pulumi.Input<number>;
    ipv6?: pulumi.Input<inputs.InterfaceEthernetIpv6>;
    isis?: pulumi.Input<inputs.InterfaceEthernetIsis>;
    l3VlanFwdDisable?: pulumi.Input<number>;
    lldp?: pulumi.Input<inputs.InterfaceEthernetLldp>;
    /**
     * Configure Load Interval (Seconds (5-300, Multiple of 5), default 300)
     */
    loadInterval?: pulumi.Input<number>;
    lw4o6?: pulumi.Input<inputs.InterfaceEthernetLw4o6>;
    /**
     * 'enable': Enable MAC learning; 'disable': Disable MAC learning; 'dmac-only': Enable destination MAC learning only;
     */
    macLearning?: pulumi.Input<string>;
    map?: pulumi.Input<inputs.InterfaceEthernetMap>;
    /**
     * Set the media type to copper
     */
    mediaTypeCopper?: pulumi.Input<number>;
    monitorLists?: pulumi.Input<pulumi.Input<inputs.InterfaceEthernetMonitorList>[]>;
    /**
     * Interface mtu (Interface MTU, default 1 (min MTU is 1280 for IPv6))
     */
    mtu?: pulumi.Input<number>;
    /**
     * Name for the interface
     */
    name?: pulumi.Input<string>;
    nptv6?: pulumi.Input<inputs.InterfaceEthernetNptv6>;
    /**
     * Name of the packet capture template to be bind with this object
     */
    packetCaptureTemplate?: pulumi.Input<string>;
    /**
     * 'enable': Enabl ping sweep detection; 'disable': Disable ping sweep detection(default);
     */
    pingSweepDetection?: pulumi.Input<string>;
    /**
     * '4x10G': Breakout 100G/40G ports into 4x10G ports; '4x25G': Breakout 100G ports into 4x25G ports; '2x50G': Breakout 100G
     * ports into 2x50G ports;
     */
    portBreakout?: pulumi.Input<string>;
    /**
     * 'enable': Enable port scan detection; 'disable': Disable port scan detection(default);
     */
    portScanDetection?: pulumi.Input<string>;
    /**
     * Remove the vlan tag for egressing packets
     */
    removeVlanTag?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.InterfaceEthernetSamplingEnable>[]>;
    spanningTree?: pulumi.Input<inputs.InterfaceEthernetSpanningTree>;
    /**
     * '10': 10; '100': 100; '1000': 1000; 'auto': auto;
     */
    speed?: pulumi.Input<string>;
    /**
     * force the speed to be 10G on 25G link
     */
    speedForced10g?: pulumi.Input<number>;
    /**
     * force the speed to be 1G on 25G link
     */
    speedForced1g?: pulumi.Input<number>;
    /**
     * force the speed to be 40G on 100G link
     */
    speedForced40g?: pulumi.Input<number>;
    /**
     * 'sip': sip; 'dip': dip; 'primary': primary; 'blade': blade; 'l4-src-port': l4-src-port; 'l4-dst-port': l4-dst-port;
     */
    trafficDistributionMode?: pulumi.Input<string>;
    /**
     * The trap source
     */
    trapSource?: pulumi.Input<number>;
    trunkGroupLists?: pulumi.Input<pulumi.Input<inputs.InterfaceEthernetTrunkGroupList>[]>;
    /**
     * Update and use received L2 information
     */
    updateL2Info?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Mark ethernet as a virtual wire interface
     */
    virtualWire?: pulumi.Input<number>;
    /**
     * 'enable': Enable VLAN learning; 'disable': Disable VLAN learning;
     */
    vlanLearning?: pulumi.Input<string>;
}
