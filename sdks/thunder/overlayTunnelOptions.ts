// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OverlayTunnelOptions extends pulumi.CustomResource {
    /**
     * Get an existing OverlayTunnelOptions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OverlayTunnelOptionsState, opts?: pulumi.CustomResourceOptions): OverlayTunnelOptions {
        return new OverlayTunnelOptions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/overlayTunnelOptions:OverlayTunnelOptions';

    /**
     * Returns true if the given object is an instance of OverlayTunnelOptions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OverlayTunnelOptions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OverlayTunnelOptions.__pulumiType;
    }

    /**
     * Enable the inner-fragmentation
     */
    public readonly fragmentationModeInner!: pulumi.Output<number | undefined>;
    /**
     * MAC to be used with Gateway segment Id (MAC Address for the Gateway segment)
     */
    public readonly gatewayMac!: pulumi.Output<string | undefined>;
    /**
     * Copy DSCP bits from inner IP to outer IP header
     */
    public readonly ipDscpPreserve!: pulumi.Output<number | undefined>;
    /**
     * Disable Flow-ID computation for NVGRE
     */
    public readonly nvgreDisableFlowId!: pulumi.Output<number | undefined>;
    /**
     * Use the lower 24-bits of the GRE key as the VSID
     */
    public readonly nvgreKeyModeLower24!: pulumi.Output<number | undefined>;
    public readonly srcPortRange!: pulumi.Output<outputs.OverlayTunnelOptionsSrcPortRange | undefined>;
    /**
     * Disable TCP MSS adjustment in SYN packet for tunnels
     */
    public readonly tcpMssAdjustDisable!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * VXLAN UDP Destination Port (UDP Port Number (default 4789))
     */
    public readonly vxlanDestPort!: pulumi.Output<number | undefined>;

    /**
     * Create a OverlayTunnelOptions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OverlayTunnelOptionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OverlayTunnelOptionsArgs | OverlayTunnelOptionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OverlayTunnelOptionsState | undefined;
            resourceInputs["fragmentationModeInner"] = state ? state.fragmentationModeInner : undefined;
            resourceInputs["gatewayMac"] = state ? state.gatewayMac : undefined;
            resourceInputs["ipDscpPreserve"] = state ? state.ipDscpPreserve : undefined;
            resourceInputs["nvgreDisableFlowId"] = state ? state.nvgreDisableFlowId : undefined;
            resourceInputs["nvgreKeyModeLower24"] = state ? state.nvgreKeyModeLower24 : undefined;
            resourceInputs["srcPortRange"] = state ? state.srcPortRange : undefined;
            resourceInputs["tcpMssAdjustDisable"] = state ? state.tcpMssAdjustDisable : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["vxlanDestPort"] = state ? state.vxlanDestPort : undefined;
        } else {
            const args = argsOrState as OverlayTunnelOptionsArgs | undefined;
            resourceInputs["fragmentationModeInner"] = args ? args.fragmentationModeInner : undefined;
            resourceInputs["gatewayMac"] = args ? args.gatewayMac : undefined;
            resourceInputs["ipDscpPreserve"] = args ? args.ipDscpPreserve : undefined;
            resourceInputs["nvgreDisableFlowId"] = args ? args.nvgreDisableFlowId : undefined;
            resourceInputs["nvgreKeyModeLower24"] = args ? args.nvgreKeyModeLower24 : undefined;
            resourceInputs["srcPortRange"] = args ? args.srcPortRange : undefined;
            resourceInputs["tcpMssAdjustDisable"] = args ? args.tcpMssAdjustDisable : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["vxlanDestPort"] = args ? args.vxlanDestPort : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OverlayTunnelOptions.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OverlayTunnelOptions resources.
 */
export interface OverlayTunnelOptionsState {
    /**
     * Enable the inner-fragmentation
     */
    fragmentationModeInner?: pulumi.Input<number>;
    /**
     * MAC to be used with Gateway segment Id (MAC Address for the Gateway segment)
     */
    gatewayMac?: pulumi.Input<string>;
    /**
     * Copy DSCP bits from inner IP to outer IP header
     */
    ipDscpPreserve?: pulumi.Input<number>;
    /**
     * Disable Flow-ID computation for NVGRE
     */
    nvgreDisableFlowId?: pulumi.Input<number>;
    /**
     * Use the lower 24-bits of the GRE key as the VSID
     */
    nvgreKeyModeLower24?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<inputs.OverlayTunnelOptionsSrcPortRange>;
    /**
     * Disable TCP MSS adjustment in SYN packet for tunnels
     */
    tcpMssAdjustDisable?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * VXLAN UDP Destination Port (UDP Port Number (default 4789))
     */
    vxlanDestPort?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a OverlayTunnelOptions resource.
 */
export interface OverlayTunnelOptionsArgs {
    /**
     * Enable the inner-fragmentation
     */
    fragmentationModeInner?: pulumi.Input<number>;
    /**
     * MAC to be used with Gateway segment Id (MAC Address for the Gateway segment)
     */
    gatewayMac?: pulumi.Input<string>;
    /**
     * Copy DSCP bits from inner IP to outer IP header
     */
    ipDscpPreserve?: pulumi.Input<number>;
    /**
     * Disable Flow-ID computation for NVGRE
     */
    nvgreDisableFlowId?: pulumi.Input<number>;
    /**
     * Use the lower 24-bits of the GRE key as the VSID
     */
    nvgreKeyModeLower24?: pulumi.Input<number>;
    srcPortRange?: pulumi.Input<inputs.OverlayTunnelOptionsSrcPortRange>;
    /**
     * Disable TCP MSS adjustment in SYN packet for tunnels
     */
    tcpMssAdjustDisable?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * VXLAN UDP Destination Port (UDP Port Number (default 4789))
     */
    vxlanDestPort?: pulumi.Input<number>;
}
