// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VisibilityReportingTemplateNotificationTemplateName extends pulumi.CustomResource {
    /**
     * Get an existing VisibilityReportingTemplateNotificationTemplateName resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VisibilityReportingTemplateNotificationTemplateNameState, opts?: pulumi.CustomResourceOptions): VisibilityReportingTemplateNotificationTemplateName {
        return new VisibilityReportingTemplateNotificationTemplateName(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/visibilityReportingTemplateNotificationTemplateName:VisibilityReportingTemplateNotificationTemplateName';

    /**
     * Returns true if the given object is an instance of VisibilityReportingTemplateNotificationTemplateName.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VisibilityReportingTemplateNotificationTemplateName {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VisibilityReportingTemplateNotificationTemplateName.__pulumiType;
    }

    /**
     * 'enable': Enable; 'disable': Disable;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly authentication!: pulumi.Output<outputs.VisibilityReportingTemplateNotificationTemplateNameAuthentication | undefined>;
    /**
     * Enable debug mode
     */
    public readonly debugMode!: pulumi.Output<number | undefined>;
    /**
     * Configure the host name(e.g www.a10networks.com)
     */
    public readonly hostName!: pulumi.Output<string | undefined>;
    /**
     * Configure the http port to use(default 80) (http port(default 80))
     */
    public readonly httpPort!: pulumi.Output<number | undefined>;
    /**
     * Configure the https port to use(default 443) (http port(default 443))
     */
    public readonly httpsPort!: pulumi.Output<number | undefined>;
    /**
     * Configure the host IPv4 address
     */
    public readonly ipv4Address!: pulumi.Output<string | undefined>;
    /**
     * Configure the host IPv6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * Notification template name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 'http': Use http protocol; 'https': Use https protocol(default); (http protocol)
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * Configure the relative uri(e.g /example , default /)
     */
    public readonly relativeUri!: pulumi.Output<string | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.VisibilityReportingTemplateNotificationTemplateNameSamplingEnable[] | undefined>;
    /**
     * Test connectivity to notification receiver
     */
    public readonly testConnectivity!: pulumi.Output<number | undefined>;
    /**
     * Use management port for notifications
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a VisibilityReportingTemplateNotificationTemplateName resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VisibilityReportingTemplateNotificationTemplateNameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VisibilityReportingTemplateNotificationTemplateNameArgs | VisibilityReportingTemplateNotificationTemplateNameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VisibilityReportingTemplateNotificationTemplateNameState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["debugMode"] = state ? state.debugMode : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["httpPort"] = state ? state.httpPort : undefined;
            resourceInputs["httpsPort"] = state ? state.httpsPort : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["relativeUri"] = state ? state.relativeUri : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["testConnectivity"] = state ? state.testConnectivity : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as VisibilityReportingTemplateNotificationTemplateNameArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["debugMode"] = args ? args.debugMode : undefined;
            resourceInputs["hostName"] = args ? args.hostName : undefined;
            resourceInputs["httpPort"] = args ? args.httpPort : undefined;
            resourceInputs["httpsPort"] = args ? args.httpsPort : undefined;
            resourceInputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["relativeUri"] = args ? args.relativeUri : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["testConnectivity"] = args ? args.testConnectivity : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VisibilityReportingTemplateNotificationTemplateName.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VisibilityReportingTemplateNotificationTemplateName resources.
 */
export interface VisibilityReportingTemplateNotificationTemplateNameState {
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.VisibilityReportingTemplateNotificationTemplateNameAuthentication>;
    /**
     * Enable debug mode
     */
    debugMode?: pulumi.Input<number>;
    /**
     * Configure the host name(e.g www.a10networks.com)
     */
    hostName?: pulumi.Input<string>;
    /**
     * Configure the http port to use(default 80) (http port(default 80))
     */
    httpPort?: pulumi.Input<number>;
    /**
     * Configure the https port to use(default 443) (http port(default 443))
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * Configure the host IPv4 address
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * Configure the host IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Notification template name
     */
    name?: pulumi.Input<string>;
    /**
     * 'http': Use http protocol; 'https': Use https protocol(default); (http protocol)
     */
    protocol?: pulumi.Input<string>;
    /**
     * Configure the relative uri(e.g /example , default /)
     */
    relativeUri?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VisibilityReportingTemplateNotificationTemplateNameSamplingEnable>[]>;
    /**
     * Test connectivity to notification receiver
     */
    testConnectivity?: pulumi.Input<number>;
    /**
     * Use management port for notifications
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VisibilityReportingTemplateNotificationTemplateName resource.
 */
export interface VisibilityReportingTemplateNotificationTemplateNameArgs {
    /**
     * 'enable': Enable; 'disable': Disable;
     */
    action?: pulumi.Input<string>;
    authentication?: pulumi.Input<inputs.VisibilityReportingTemplateNotificationTemplateNameAuthentication>;
    /**
     * Enable debug mode
     */
    debugMode?: pulumi.Input<number>;
    /**
     * Configure the host name(e.g www.a10networks.com)
     */
    hostName?: pulumi.Input<string>;
    /**
     * Configure the http port to use(default 80) (http port(default 80))
     */
    httpPort?: pulumi.Input<number>;
    /**
     * Configure the https port to use(default 443) (http port(default 443))
     */
    httpsPort?: pulumi.Input<number>;
    /**
     * Configure the host IPv4 address
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * Configure the host IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Notification template name
     */
    name?: pulumi.Input<string>;
    /**
     * 'http': Use http protocol; 'https': Use https protocol(default); (http protocol)
     */
    protocol?: pulumi.Input<string>;
    /**
     * Configure the relative uri(e.g /example , default /)
     */
    relativeUri?: pulumi.Input<string>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.VisibilityReportingTemplateNotificationTemplateNameSamplingEnable>[]>;
    /**
     * Test connectivity to notification receiver
     */
    testConnectivity?: pulumi.Input<number>;
    /**
     * Use management port for notifications
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
