// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosTemplateHttp extends pulumi.CustomResource {
    /**
     * Get an existing DdosTemplateHttp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosTemplateHttpState, opts?: pulumi.CustomResourceOptions): DdosTemplateHttp {
        return new DdosTemplateHttp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosTemplateHttp:DdosTemplateHttp';

    /**
     * Returns true if the given object is an instance of DdosTemplateHttp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosTemplateHttp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosTemplateHttp.__pulumiType;
    }

    /**
     * 'drop': Drop packets for the connection; 'reset': Send RST for the connection;
     */
    public readonly action!: pulumi.Output<string | undefined>;
    public readonly agentFilter!: pulumi.Output<outputs.DdosTemplateHttpAgentFilter | undefined>;
    /**
     * Set the cookie name used to send back to client. Default is sto-idd
     */
    public readonly challengeCookieName!: pulumi.Output<string | undefined>;
    /**
     * Specify the challenge interval. Default is 8 seconds
     */
    public readonly challengeInterval!: pulumi.Output<number | undefined>;
    /**
     * Keep the challenge cookie from client and forward to backend. Default is do not keep
     */
    public readonly challengeKeepCookie!: pulumi.Output<number | undefined>;
    /**
     * 'http-redirect': http-redirect; 'javascript': javascript;
     */
    public readonly challengeMethod!: pulumi.Output<string | undefined>;
    /**
     * '302': 302 Found; '307': 307 Temporary Redirect;
     */
    public readonly challengeRedirectCode!: pulumi.Output<string | undefined>;
    /**
     * Encode the challenge phrase in uri instead of in http cookie. Default encoded in http cookie
     */
    public readonly challengeUriEncode!: pulumi.Output<number | undefined>;
    /**
     * Disable this template
     */
    public readonly disable!: pulumi.Output<number | undefined>;
    /**
     * Do not allow HTTP Connect method (asymmetric mode only)
     */
    public readonly disallowConnectMethod!: pulumi.Output<number | undefined>;
    public readonly filterHeaderLists!: pulumi.Output<outputs.DdosTemplateHttpFilterHeaderList[] | undefined>;
    /**
     * DDOS HTTP Template Name
     */
    public readonly httpTmplName!: pulumi.Output<string>;
    /**
     * Set the the idle timeout value in seconds for HTTP connections
     */
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Don't reset idle timer on packets with zero payload length from clients
     */
    public readonly ignoreZeroPayload!: pulumi.Output<number | undefined>;
    public readonly malformedHttp!: pulumi.Output<outputs.DdosTemplateHttpMalformedHttp | undefined>;
    public readonly mssCfg!: pulumi.Output<outputs.DdosTemplateHttpMssCfg | undefined>;
    public readonly multiPuThresholdDistribution!: pulumi.Output<outputs.DdosTemplateHttpMultiPuThresholdDistribution | undefined>;
    /**
     * Bypass non-http traffic instead of dropping
     */
    public readonly nonHttpBypass!: pulumi.Output<number | undefined>;
    /**
     * Set the number of packets for the out-of-order HTTP queue (asym mode only)
     */
    public readonly outOfOrderQueueSize!: pulumi.Output<number | undefined>;
    /**
     * Set the timeout value in seconds for out-of-order queue in HTTP (asym mode only)
     */
    public readonly outOfOrderQueueTimeout!: pulumi.Output<number | undefined>;
    /**
     * Configure rate limiting for HTTP POST request
     */
    public readonly postRateLimit!: pulumi.Output<number | undefined>;
    public readonly refererFilter!: pulumi.Output<outputs.DdosTemplateHttpRefererFilter | undefined>;
    public readonly requestHeader!: pulumi.Output<outputs.DdosTemplateHttpRequestHeader | undefined>;
    public readonly requestRateLimit!: pulumi.Output<outputs.DdosTemplateHttpRequestRateLimit | undefined>;
    public readonly responseRateLimit!: pulumi.Output<outputs.DdosTemplateHttpResponseRateLimit | undefined>;
    public readonly slowReadDrop!: pulumi.Output<outputs.DdosTemplateHttpSlowReadDrop | undefined>;
    public readonly useHdrIpCfg!: pulumi.Output<outputs.DdosTemplateHttpUseHdrIpCfg | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosTemplateHttp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosTemplateHttpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosTemplateHttpArgs | DdosTemplateHttpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosTemplateHttpState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["agentFilter"] = state ? state.agentFilter : undefined;
            resourceInputs["challengeCookieName"] = state ? state.challengeCookieName : undefined;
            resourceInputs["challengeInterval"] = state ? state.challengeInterval : undefined;
            resourceInputs["challengeKeepCookie"] = state ? state.challengeKeepCookie : undefined;
            resourceInputs["challengeMethod"] = state ? state.challengeMethod : undefined;
            resourceInputs["challengeRedirectCode"] = state ? state.challengeRedirectCode : undefined;
            resourceInputs["challengeUriEncode"] = state ? state.challengeUriEncode : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disallowConnectMethod"] = state ? state.disallowConnectMethod : undefined;
            resourceInputs["filterHeaderLists"] = state ? state.filterHeaderLists : undefined;
            resourceInputs["httpTmplName"] = state ? state.httpTmplName : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["ignoreZeroPayload"] = state ? state.ignoreZeroPayload : undefined;
            resourceInputs["malformedHttp"] = state ? state.malformedHttp : undefined;
            resourceInputs["mssCfg"] = state ? state.mssCfg : undefined;
            resourceInputs["multiPuThresholdDistribution"] = state ? state.multiPuThresholdDistribution : undefined;
            resourceInputs["nonHttpBypass"] = state ? state.nonHttpBypass : undefined;
            resourceInputs["outOfOrderQueueSize"] = state ? state.outOfOrderQueueSize : undefined;
            resourceInputs["outOfOrderQueueTimeout"] = state ? state.outOfOrderQueueTimeout : undefined;
            resourceInputs["postRateLimit"] = state ? state.postRateLimit : undefined;
            resourceInputs["refererFilter"] = state ? state.refererFilter : undefined;
            resourceInputs["requestHeader"] = state ? state.requestHeader : undefined;
            resourceInputs["requestRateLimit"] = state ? state.requestRateLimit : undefined;
            resourceInputs["responseRateLimit"] = state ? state.responseRateLimit : undefined;
            resourceInputs["slowReadDrop"] = state ? state.slowReadDrop : undefined;
            resourceInputs["useHdrIpCfg"] = state ? state.useHdrIpCfg : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosTemplateHttpArgs | undefined;
            if ((!args || args.httpTmplName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpTmplName'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["agentFilter"] = args ? args.agentFilter : undefined;
            resourceInputs["challengeCookieName"] = args ? args.challengeCookieName : undefined;
            resourceInputs["challengeInterval"] = args ? args.challengeInterval : undefined;
            resourceInputs["challengeKeepCookie"] = args ? args.challengeKeepCookie : undefined;
            resourceInputs["challengeMethod"] = args ? args.challengeMethod : undefined;
            resourceInputs["challengeRedirectCode"] = args ? args.challengeRedirectCode : undefined;
            resourceInputs["challengeUriEncode"] = args ? args.challengeUriEncode : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disallowConnectMethod"] = args ? args.disallowConnectMethod : undefined;
            resourceInputs["filterHeaderLists"] = args ? args.filterHeaderLists : undefined;
            resourceInputs["httpTmplName"] = args ? args.httpTmplName : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["ignoreZeroPayload"] = args ? args.ignoreZeroPayload : undefined;
            resourceInputs["malformedHttp"] = args ? args.malformedHttp : undefined;
            resourceInputs["mssCfg"] = args ? args.mssCfg : undefined;
            resourceInputs["multiPuThresholdDistribution"] = args ? args.multiPuThresholdDistribution : undefined;
            resourceInputs["nonHttpBypass"] = args ? args.nonHttpBypass : undefined;
            resourceInputs["outOfOrderQueueSize"] = args ? args.outOfOrderQueueSize : undefined;
            resourceInputs["outOfOrderQueueTimeout"] = args ? args.outOfOrderQueueTimeout : undefined;
            resourceInputs["postRateLimit"] = args ? args.postRateLimit : undefined;
            resourceInputs["refererFilter"] = args ? args.refererFilter : undefined;
            resourceInputs["requestHeader"] = args ? args.requestHeader : undefined;
            resourceInputs["requestRateLimit"] = args ? args.requestRateLimit : undefined;
            resourceInputs["responseRateLimit"] = args ? args.responseRateLimit : undefined;
            resourceInputs["slowReadDrop"] = args ? args.slowReadDrop : undefined;
            resourceInputs["useHdrIpCfg"] = args ? args.useHdrIpCfg : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosTemplateHttp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosTemplateHttp resources.
 */
export interface DdosTemplateHttpState {
    /**
     * 'drop': Drop packets for the connection; 'reset': Send RST for the connection;
     */
    action?: pulumi.Input<string>;
    agentFilter?: pulumi.Input<inputs.DdosTemplateHttpAgentFilter>;
    /**
     * Set the cookie name used to send back to client. Default is sto-idd
     */
    challengeCookieName?: pulumi.Input<string>;
    /**
     * Specify the challenge interval. Default is 8 seconds
     */
    challengeInterval?: pulumi.Input<number>;
    /**
     * Keep the challenge cookie from client and forward to backend. Default is do not keep
     */
    challengeKeepCookie?: pulumi.Input<number>;
    /**
     * 'http-redirect': http-redirect; 'javascript': javascript;
     */
    challengeMethod?: pulumi.Input<string>;
    /**
     * '302': 302 Found; '307': 307 Temporary Redirect;
     */
    challengeRedirectCode?: pulumi.Input<string>;
    /**
     * Encode the challenge phrase in uri instead of in http cookie. Default encoded in http cookie
     */
    challengeUriEncode?: pulumi.Input<number>;
    /**
     * Disable this template
     */
    disable?: pulumi.Input<number>;
    /**
     * Do not allow HTTP Connect method (asymmetric mode only)
     */
    disallowConnectMethod?: pulumi.Input<number>;
    filterHeaderLists?: pulumi.Input<pulumi.Input<inputs.DdosTemplateHttpFilterHeaderList>[]>;
    /**
     * DDOS HTTP Template Name
     */
    httpTmplName?: pulumi.Input<string>;
    /**
     * Set the the idle timeout value in seconds for HTTP connections
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Don't reset idle timer on packets with zero payload length from clients
     */
    ignoreZeroPayload?: pulumi.Input<number>;
    malformedHttp?: pulumi.Input<inputs.DdosTemplateHttpMalformedHttp>;
    mssCfg?: pulumi.Input<inputs.DdosTemplateHttpMssCfg>;
    multiPuThresholdDistribution?: pulumi.Input<inputs.DdosTemplateHttpMultiPuThresholdDistribution>;
    /**
     * Bypass non-http traffic instead of dropping
     */
    nonHttpBypass?: pulumi.Input<number>;
    /**
     * Set the number of packets for the out-of-order HTTP queue (asym mode only)
     */
    outOfOrderQueueSize?: pulumi.Input<number>;
    /**
     * Set the timeout value in seconds for out-of-order queue in HTTP (asym mode only)
     */
    outOfOrderQueueTimeout?: pulumi.Input<number>;
    /**
     * Configure rate limiting for HTTP POST request
     */
    postRateLimit?: pulumi.Input<number>;
    refererFilter?: pulumi.Input<inputs.DdosTemplateHttpRefererFilter>;
    requestHeader?: pulumi.Input<inputs.DdosTemplateHttpRequestHeader>;
    requestRateLimit?: pulumi.Input<inputs.DdosTemplateHttpRequestRateLimit>;
    responseRateLimit?: pulumi.Input<inputs.DdosTemplateHttpResponseRateLimit>;
    slowReadDrop?: pulumi.Input<inputs.DdosTemplateHttpSlowReadDrop>;
    useHdrIpCfg?: pulumi.Input<inputs.DdosTemplateHttpUseHdrIpCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosTemplateHttp resource.
 */
export interface DdosTemplateHttpArgs {
    /**
     * 'drop': Drop packets for the connection; 'reset': Send RST for the connection;
     */
    action?: pulumi.Input<string>;
    agentFilter?: pulumi.Input<inputs.DdosTemplateHttpAgentFilter>;
    /**
     * Set the cookie name used to send back to client. Default is sto-idd
     */
    challengeCookieName?: pulumi.Input<string>;
    /**
     * Specify the challenge interval. Default is 8 seconds
     */
    challengeInterval?: pulumi.Input<number>;
    /**
     * Keep the challenge cookie from client and forward to backend. Default is do not keep
     */
    challengeKeepCookie?: pulumi.Input<number>;
    /**
     * 'http-redirect': http-redirect; 'javascript': javascript;
     */
    challengeMethod?: pulumi.Input<string>;
    /**
     * '302': 302 Found; '307': 307 Temporary Redirect;
     */
    challengeRedirectCode?: pulumi.Input<string>;
    /**
     * Encode the challenge phrase in uri instead of in http cookie. Default encoded in http cookie
     */
    challengeUriEncode?: pulumi.Input<number>;
    /**
     * Disable this template
     */
    disable?: pulumi.Input<number>;
    /**
     * Do not allow HTTP Connect method (asymmetric mode only)
     */
    disallowConnectMethod?: pulumi.Input<number>;
    filterHeaderLists?: pulumi.Input<pulumi.Input<inputs.DdosTemplateHttpFilterHeaderList>[]>;
    /**
     * DDOS HTTP Template Name
     */
    httpTmplName: pulumi.Input<string>;
    /**
     * Set the the idle timeout value in seconds for HTTP connections
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Don't reset idle timer on packets with zero payload length from clients
     */
    ignoreZeroPayload?: pulumi.Input<number>;
    malformedHttp?: pulumi.Input<inputs.DdosTemplateHttpMalformedHttp>;
    mssCfg?: pulumi.Input<inputs.DdosTemplateHttpMssCfg>;
    multiPuThresholdDistribution?: pulumi.Input<inputs.DdosTemplateHttpMultiPuThresholdDistribution>;
    /**
     * Bypass non-http traffic instead of dropping
     */
    nonHttpBypass?: pulumi.Input<number>;
    /**
     * Set the number of packets for the out-of-order HTTP queue (asym mode only)
     */
    outOfOrderQueueSize?: pulumi.Input<number>;
    /**
     * Set the timeout value in seconds for out-of-order queue in HTTP (asym mode only)
     */
    outOfOrderQueueTimeout?: pulumi.Input<number>;
    /**
     * Configure rate limiting for HTTP POST request
     */
    postRateLimit?: pulumi.Input<number>;
    refererFilter?: pulumi.Input<inputs.DdosTemplateHttpRefererFilter>;
    requestHeader?: pulumi.Input<inputs.DdosTemplateHttpRequestHeader>;
    requestRateLimit?: pulumi.Input<inputs.DdosTemplateHttpRequestRateLimit>;
    responseRateLimit?: pulumi.Input<inputs.DdosTemplateHttpResponseRateLimit>;
    slowReadDrop?: pulumi.Input<inputs.DdosTemplateHttpSlowReadDrop>;
    useHdrIpCfg?: pulumi.Input<inputs.DdosTemplateHttpUseHdrIpCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
