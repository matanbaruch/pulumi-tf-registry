// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosDstEntryL4Type extends pulumi.CustomResource {
    /**
     * Get an existing DdosDstEntryL4Type resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosDstEntryL4TypeState, opts?: pulumi.CustomResourceOptions): DdosDstEntryL4Type {
        return new DdosDstEntryL4Type(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosDstEntryL4Type:DdosDstEntryL4Type';

    /**
     * Returns true if the given object is an instance of DdosDstEntryL4Type.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosDstEntryL4Type {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosDstEntryL4Type.__pulumiType;
    }

    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    public readonly deny!: pulumi.Output<number | undefined>;
    /**
     * Enable ddos detection
     */
    public readonly detectionEnable!: pulumi.Output<number | undefined>;
    /**
     * Disable TCP SYN Authentication
     */
    public readonly disableSynAuth!: pulumi.Output<number | undefined>;
    /**
     * Drop fragmented packets
     */
    public readonly dropFragPkt!: pulumi.Output<number | undefined>;
    /**
     * 'disable': disable; 'enable': enable;
     */
    public readonly dropOnNoPortMatch!: pulumi.Output<string | undefined>;
    /**
     * DstEntryName
     */
    public readonly dstEntryName!: pulumi.Output<string>;
    /**
     * Enable ddos top-k entries
     */
    public readonly enableTopK!: pulumi.Output<number | undefined>;
    /**
     * Global limit ID
     */
    public readonly glid!: pulumi.Output<string | undefined>;
    public readonly glidExceedAction!: pulumi.Output<outputs.DdosDstEntryL4TypeGlidExceedAction | undefined>;
    /**
     * Configure IP Filter
     */
    public readonly ipFilteringPolicy!: pulumi.Output<string | undefined>;
    public readonly ipFilteringPolicyOper!: pulumi.Output<outputs.DdosDstEntryL4TypeIpFilteringPolicyOper | undefined>;
    /**
     * Maximum number of re-transmit SYN per flow
     */
    public readonly maxRexmitSynPerFlow!: pulumi.Output<number | undefined>;
    /**
     * 'drop': Drop the packet; 'black-list': Add the source IP into black list;
     */
    public readonly maxRexmitSynPerFlowExceedAction!: pulumi.Output<string | undefined>;
    public readonly portInd!: pulumi.Output<outputs.DdosDstEntryL4TypePortInd | undefined>;
    public readonly progressionTracking!: pulumi.Output<outputs.DdosDstEntryL4TypeProgressionTracking | undefined>;
    /**
     * 'tcp': L4-Type TCP; 'udp': L4-Type UDP; 'icmp': L4-Type ICMP; 'other': L4-Type OTHER;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    public readonly setCounterBaseVal!: pulumi.Output<number | undefined>;
    /**
     * Enable stateful tracking of sessions (Default is stateless)
     */
    public readonly stateful!: pulumi.Output<number | undefined>;
    /**
     * 'send-rst': Send RST to client upon client ACK; 'force-rst-by-ack': Force client RST via the use of ACK;
     * 'force-rst-by-synack': Force client RST via the use of bad SYN|ACK; 'disable': Disable TCP SYN Authentication;
     */
    public readonly synAuth!: pulumi.Output<string | undefined>;
    /**
     * Enable SYN Cookie
     */
    public readonly synCookie!: pulumi.Output<number | undefined>;
    /**
     * Send reset to client when rate exceeds or session ages out
     */
    public readonly tcpResetClient!: pulumi.Output<number | undefined>;
    /**
     * Send reset to server when rate exceeds or session ages out
     */
    public readonly tcpResetServer!: pulumi.Output<number | undefined>;
    public readonly template!: pulumi.Output<outputs.DdosDstEntryL4TypeTemplate | undefined>;
    /**
     * Maximum number of records to show in topk
     */
    public readonly topkNumRecords!: pulumi.Output<number | undefined>;
    public readonly topkSources!: pulumi.Output<outputs.DdosDstEntryL4TypeTopkSources | undefined>;
    public readonly tunnelDecap!: pulumi.Output<outputs.DdosDstEntryL4TypeTunnelDecap | undefined>;
    public readonly tunnelRateLimit!: pulumi.Output<outputs.DdosDstEntryL4TypeTunnelRateLimit | undefined>;
    public readonly undefinedPortHitStatistics!: pulumi.Output<outputs.DdosDstEntryL4TypeUndefinedPortHitStatistics | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosDstEntryL4Type resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosDstEntryL4TypeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosDstEntryL4TypeArgs | DdosDstEntryL4TypeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosDstEntryL4TypeState | undefined;
            resourceInputs["deny"] = state ? state.deny : undefined;
            resourceInputs["detectionEnable"] = state ? state.detectionEnable : undefined;
            resourceInputs["disableSynAuth"] = state ? state.disableSynAuth : undefined;
            resourceInputs["dropFragPkt"] = state ? state.dropFragPkt : undefined;
            resourceInputs["dropOnNoPortMatch"] = state ? state.dropOnNoPortMatch : undefined;
            resourceInputs["dstEntryName"] = state ? state.dstEntryName : undefined;
            resourceInputs["enableTopK"] = state ? state.enableTopK : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["glidExceedAction"] = state ? state.glidExceedAction : undefined;
            resourceInputs["ipFilteringPolicy"] = state ? state.ipFilteringPolicy : undefined;
            resourceInputs["ipFilteringPolicyOper"] = state ? state.ipFilteringPolicyOper : undefined;
            resourceInputs["maxRexmitSynPerFlow"] = state ? state.maxRexmitSynPerFlow : undefined;
            resourceInputs["maxRexmitSynPerFlowExceedAction"] = state ? state.maxRexmitSynPerFlowExceedAction : undefined;
            resourceInputs["portInd"] = state ? state.portInd : undefined;
            resourceInputs["progressionTracking"] = state ? state.progressionTracking : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["setCounterBaseVal"] = state ? state.setCounterBaseVal : undefined;
            resourceInputs["stateful"] = state ? state.stateful : undefined;
            resourceInputs["synAuth"] = state ? state.synAuth : undefined;
            resourceInputs["synCookie"] = state ? state.synCookie : undefined;
            resourceInputs["tcpResetClient"] = state ? state.tcpResetClient : undefined;
            resourceInputs["tcpResetServer"] = state ? state.tcpResetServer : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["topkNumRecords"] = state ? state.topkNumRecords : undefined;
            resourceInputs["topkSources"] = state ? state.topkSources : undefined;
            resourceInputs["tunnelDecap"] = state ? state.tunnelDecap : undefined;
            resourceInputs["tunnelRateLimit"] = state ? state.tunnelRateLimit : undefined;
            resourceInputs["undefinedPortHitStatistics"] = state ? state.undefinedPortHitStatistics : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosDstEntryL4TypeArgs | undefined;
            if ((!args || args.dstEntryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dstEntryName'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["deny"] = args ? args.deny : undefined;
            resourceInputs["detectionEnable"] = args ? args.detectionEnable : undefined;
            resourceInputs["disableSynAuth"] = args ? args.disableSynAuth : undefined;
            resourceInputs["dropFragPkt"] = args ? args.dropFragPkt : undefined;
            resourceInputs["dropOnNoPortMatch"] = args ? args.dropOnNoPortMatch : undefined;
            resourceInputs["dstEntryName"] = args ? args.dstEntryName : undefined;
            resourceInputs["enableTopK"] = args ? args.enableTopK : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["glidExceedAction"] = args ? args.glidExceedAction : undefined;
            resourceInputs["ipFilteringPolicy"] = args ? args.ipFilteringPolicy : undefined;
            resourceInputs["ipFilteringPolicyOper"] = args ? args.ipFilteringPolicyOper : undefined;
            resourceInputs["maxRexmitSynPerFlow"] = args ? args.maxRexmitSynPerFlow : undefined;
            resourceInputs["maxRexmitSynPerFlowExceedAction"] = args ? args.maxRexmitSynPerFlowExceedAction : undefined;
            resourceInputs["portInd"] = args ? args.portInd : undefined;
            resourceInputs["progressionTracking"] = args ? args.progressionTracking : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["setCounterBaseVal"] = args ? args.setCounterBaseVal : undefined;
            resourceInputs["stateful"] = args ? args.stateful : undefined;
            resourceInputs["synAuth"] = args ? args.synAuth : undefined;
            resourceInputs["synCookie"] = args ? args.synCookie : undefined;
            resourceInputs["tcpResetClient"] = args ? args.tcpResetClient : undefined;
            resourceInputs["tcpResetServer"] = args ? args.tcpResetServer : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["topkNumRecords"] = args ? args.topkNumRecords : undefined;
            resourceInputs["topkSources"] = args ? args.topkSources : undefined;
            resourceInputs["tunnelDecap"] = args ? args.tunnelDecap : undefined;
            resourceInputs["tunnelRateLimit"] = args ? args.tunnelRateLimit : undefined;
            resourceInputs["undefinedPortHitStatistics"] = args ? args.undefinedPortHitStatistics : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosDstEntryL4Type.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosDstEntryL4Type resources.
 */
export interface DdosDstEntryL4TypeState {
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    deny?: pulumi.Input<number>;
    /**
     * Enable ddos detection
     */
    detectionEnable?: pulumi.Input<number>;
    /**
     * Disable TCP SYN Authentication
     */
    disableSynAuth?: pulumi.Input<number>;
    /**
     * Drop fragmented packets
     */
    dropFragPkt?: pulumi.Input<number>;
    /**
     * 'disable': disable; 'enable': enable;
     */
    dropOnNoPortMatch?: pulumi.Input<string>;
    /**
     * DstEntryName
     */
    dstEntryName?: pulumi.Input<string>;
    /**
     * Enable ddos top-k entries
     */
    enableTopK?: pulumi.Input<number>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    glidExceedAction?: pulumi.Input<inputs.DdosDstEntryL4TypeGlidExceedAction>;
    /**
     * Configure IP Filter
     */
    ipFilteringPolicy?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.DdosDstEntryL4TypeIpFilteringPolicyOper>;
    /**
     * Maximum number of re-transmit SYN per flow
     */
    maxRexmitSynPerFlow?: pulumi.Input<number>;
    /**
     * 'drop': Drop the packet; 'black-list': Add the source IP into black list;
     */
    maxRexmitSynPerFlowExceedAction?: pulumi.Input<string>;
    portInd?: pulumi.Input<inputs.DdosDstEntryL4TypePortInd>;
    progressionTracking?: pulumi.Input<inputs.DdosDstEntryL4TypeProgressionTracking>;
    /**
     * 'tcp': L4-Type TCP; 'udp': L4-Type UDP; 'icmp': L4-Type ICMP; 'other': L4-Type OTHER;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    /**
     * Enable stateful tracking of sessions (Default is stateless)
     */
    stateful?: pulumi.Input<number>;
    /**
     * 'send-rst': Send RST to client upon client ACK; 'force-rst-by-ack': Force client RST via the use of ACK;
     * 'force-rst-by-synack': Force client RST via the use of bad SYN|ACK; 'disable': Disable TCP SYN Authentication;
     */
    synAuth?: pulumi.Input<string>;
    /**
     * Enable SYN Cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Send reset to client when rate exceeds or session ages out
     */
    tcpResetClient?: pulumi.Input<number>;
    /**
     * Send reset to server when rate exceeds or session ages out
     */
    tcpResetServer?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.DdosDstEntryL4TypeTemplate>;
    /**
     * Maximum number of records to show in topk
     */
    topkNumRecords?: pulumi.Input<number>;
    topkSources?: pulumi.Input<inputs.DdosDstEntryL4TypeTopkSources>;
    tunnelDecap?: pulumi.Input<inputs.DdosDstEntryL4TypeTunnelDecap>;
    tunnelRateLimit?: pulumi.Input<inputs.DdosDstEntryL4TypeTunnelRateLimit>;
    undefinedPortHitStatistics?: pulumi.Input<inputs.DdosDstEntryL4TypeUndefinedPortHitStatistics>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosDstEntryL4Type resource.
 */
export interface DdosDstEntryL4TypeArgs {
    /**
     * Blacklist and Drop all incoming packets for protocol
     */
    deny?: pulumi.Input<number>;
    /**
     * Enable ddos detection
     */
    detectionEnable?: pulumi.Input<number>;
    /**
     * Disable TCP SYN Authentication
     */
    disableSynAuth?: pulumi.Input<number>;
    /**
     * Drop fragmented packets
     */
    dropFragPkt?: pulumi.Input<number>;
    /**
     * 'disable': disable; 'enable': enable;
     */
    dropOnNoPortMatch?: pulumi.Input<string>;
    /**
     * DstEntryName
     */
    dstEntryName: pulumi.Input<string>;
    /**
     * Enable ddos top-k entries
     */
    enableTopK?: pulumi.Input<number>;
    /**
     * Global limit ID
     */
    glid?: pulumi.Input<string>;
    glidExceedAction?: pulumi.Input<inputs.DdosDstEntryL4TypeGlidExceedAction>;
    /**
     * Configure IP Filter
     */
    ipFilteringPolicy?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.DdosDstEntryL4TypeIpFilteringPolicyOper>;
    /**
     * Maximum number of re-transmit SYN per flow
     */
    maxRexmitSynPerFlow?: pulumi.Input<number>;
    /**
     * 'drop': Drop the packet; 'black-list': Add the source IP into black list;
     */
    maxRexmitSynPerFlowExceedAction?: pulumi.Input<string>;
    portInd?: pulumi.Input<inputs.DdosDstEntryL4TypePortInd>;
    progressionTracking?: pulumi.Input<inputs.DdosDstEntryL4TypeProgressionTracking>;
    /**
     * 'tcp': L4-Type TCP; 'udp': L4-Type UDP; 'icmp': L4-Type ICMP; 'other': L4-Type OTHER;
     */
    protocol: pulumi.Input<string>;
    /**
     * Set T2 counter value of current context to specified value
     */
    setCounterBaseVal?: pulumi.Input<number>;
    /**
     * Enable stateful tracking of sessions (Default is stateless)
     */
    stateful?: pulumi.Input<number>;
    /**
     * 'send-rst': Send RST to client upon client ACK; 'force-rst-by-ack': Force client RST via the use of ACK;
     * 'force-rst-by-synack': Force client RST via the use of bad SYN|ACK; 'disable': Disable TCP SYN Authentication;
     */
    synAuth?: pulumi.Input<string>;
    /**
     * Enable SYN Cookie
     */
    synCookie?: pulumi.Input<number>;
    /**
     * Send reset to client when rate exceeds or session ages out
     */
    tcpResetClient?: pulumi.Input<number>;
    /**
     * Send reset to server when rate exceeds or session ages out
     */
    tcpResetServer?: pulumi.Input<number>;
    template?: pulumi.Input<inputs.DdosDstEntryL4TypeTemplate>;
    /**
     * Maximum number of records to show in topk
     */
    topkNumRecords?: pulumi.Input<number>;
    topkSources?: pulumi.Input<inputs.DdosDstEntryL4TypeTopkSources>;
    tunnelDecap?: pulumi.Input<inputs.DdosDstEntryL4TypeTunnelDecap>;
    tunnelRateLimit?: pulumi.Input<inputs.DdosDstEntryL4TypeTunnelRateLimit>;
    undefinedPortHitStatistics?: pulumi.Input<inputs.DdosDstEntryL4TypeUndefinedPortHitStatistics>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
