// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SlbCommonConnRateLimitSrcIp extends pulumi.CustomResource {
    /**
     * Get an existing SlbCommonConnRateLimitSrcIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbCommonConnRateLimitSrcIpState, opts?: pulumi.CustomResourceOptions): SlbCommonConnRateLimitSrcIp {
        return new SlbCommonConnRateLimitSrcIp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/slbCommonConnRateLimitSrcIp:SlbCommonConnRateLimitSrcIp';

    /**
     * Returns true if the given object is an instance of SlbCommonConnRateLimitSrcIp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SlbCommonConnRateLimitSrcIp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SlbCommonConnRateLimitSrcIp.__pulumiType;
    }

    public readonly disableIpv6Support!: pulumi.Output<number>;
    /**
     * Set action if threshold exceeded
     */
    public readonly exceedAction!: pulumi.Output<number | undefined>;
    /**
     * Set max connections per period
     */
    public readonly limit!: pulumi.Output<number | undefined>;
    /**
     * '100': 100 ms; '1000': 1000 ms;
     */
    public readonly limitPeriod!: pulumi.Output<string | undefined>;
    /**
     * Set lockout period in seconds if threshold exceeded
     */
    public readonly lockOut!: pulumi.Output<number | undefined>;
    /**
     * Send log if threshold exceeded
     */
    public readonly log!: pulumi.Output<number | undefined>;
    /**
     * 'tcp': Set TCP connection rate limit; 'udp': Set UDP packet rate limit;
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * Set threshold shared amongst all virtual ports
     */
    public readonly shared!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SlbCommonConnRateLimitSrcIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlbCommonConnRateLimitSrcIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbCommonConnRateLimitSrcIpArgs | SlbCommonConnRateLimitSrcIpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbCommonConnRateLimitSrcIpState | undefined;
            resourceInputs["disableIpv6Support"] = state ? state.disableIpv6Support : undefined;
            resourceInputs["exceedAction"] = state ? state.exceedAction : undefined;
            resourceInputs["limit"] = state ? state.limit : undefined;
            resourceInputs["limitPeriod"] = state ? state.limitPeriod : undefined;
            resourceInputs["lockOut"] = state ? state.lockOut : undefined;
            resourceInputs["log"] = state ? state.log : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["shared"] = state ? state.shared : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SlbCommonConnRateLimitSrcIpArgs | undefined;
            if ((!args || args.disableIpv6Support === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disableIpv6Support'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["disableIpv6Support"] = args ? args.disableIpv6Support : undefined;
            resourceInputs["exceedAction"] = args ? args.exceedAction : undefined;
            resourceInputs["limit"] = args ? args.limit : undefined;
            resourceInputs["limitPeriod"] = args ? args.limitPeriod : undefined;
            resourceInputs["lockOut"] = args ? args.lockOut : undefined;
            resourceInputs["log"] = args ? args.log : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["shared"] = args ? args.shared : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SlbCommonConnRateLimitSrcIp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SlbCommonConnRateLimitSrcIp resources.
 */
export interface SlbCommonConnRateLimitSrcIpState {
    disableIpv6Support?: pulumi.Input<number>;
    /**
     * Set action if threshold exceeded
     */
    exceedAction?: pulumi.Input<number>;
    /**
     * Set max connections per period
     */
    limit?: pulumi.Input<number>;
    /**
     * '100': 100 ms; '1000': 1000 ms;
     */
    limitPeriod?: pulumi.Input<string>;
    /**
     * Set lockout period in seconds if threshold exceeded
     */
    lockOut?: pulumi.Input<number>;
    /**
     * Send log if threshold exceeded
     */
    log?: pulumi.Input<number>;
    /**
     * 'tcp': Set TCP connection rate limit; 'udp': Set UDP packet rate limit;
     */
    protocol?: pulumi.Input<string>;
    /**
     * Set threshold shared amongst all virtual ports
     */
    shared?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SlbCommonConnRateLimitSrcIp resource.
 */
export interface SlbCommonConnRateLimitSrcIpArgs {
    disableIpv6Support: pulumi.Input<number>;
    /**
     * Set action if threshold exceeded
     */
    exceedAction?: pulumi.Input<number>;
    /**
     * Set max connections per period
     */
    limit?: pulumi.Input<number>;
    /**
     * '100': 100 ms; '1000': 1000 ms;
     */
    limitPeriod?: pulumi.Input<string>;
    /**
     * Set lockout period in seconds if threshold exceeded
     */
    lockOut?: pulumi.Input<number>;
    /**
     * Send log if threshold exceeded
     */
    log?: pulumi.Input<number>;
    /**
     * 'tcp': Set TCP connection rate limit; 'udp': Set UDP packet rate limit;
     */
    protocol: pulumi.Input<string>;
    /**
     * Set threshold shared amongst all virtual ports
     */
    shared?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
