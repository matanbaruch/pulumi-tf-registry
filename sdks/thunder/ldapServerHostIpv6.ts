// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LdapServerHostIpv6 extends pulumi.CustomResource {
    /**
     * Get an existing LdapServerHostIpv6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapServerHostIpv6State, opts?: pulumi.CustomResourceOptions): LdapServerHostIpv6 {
        return new LdapServerHostIpv6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ldapServerHostIpv6:LdapServerHostIpv6';

    /**
     * Returns true if the given object is an instance of LdapServerHostIpv6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapServerHostIpv6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapServerHostIpv6.__pulumiType;
    }

    /**
     * Configure the group DN which user belongs to
     */
    public readonly base!: pulumi.Output<string | undefined>;
    /**
     * LDAP common name identifier (i.e.: cn, uid)
     */
    public readonly cnValue!: pulumi.Output<string | undefined>;
    /**
     * LDAP distinguished name (dn)
     */
    public readonly dnValue!: pulumi.Output<string | undefined>;
    /**
     * Configure AD domain name
     */
    public readonly domain!: pulumi.Output<string | undefined>;
    public readonly domainCfg!: pulumi.Output<outputs.LdapServerHostIpv6DomainCfg | undefined>;
    /**
     * Configure the group DN which user belongs to
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * IPV6 address of ldap server
     */
    public readonly ipv6Addr!: pulumi.Output<string>;
    public readonly ipv6AddrCfg!: pulumi.Output<outputs.LdapServerHostIpv6Ipv6AddrCfg | undefined>;
    public readonly portCfg!: pulumi.Output<outputs.LdapServerHostIpv6PortCfg | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a LdapServerHostIpv6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapServerHostIpv6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapServerHostIpv6Args | LdapServerHostIpv6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapServerHostIpv6State | undefined;
            resourceInputs["base"] = state ? state.base : undefined;
            resourceInputs["cnValue"] = state ? state.cnValue : undefined;
            resourceInputs["dnValue"] = state ? state.dnValue : undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["domainCfg"] = state ? state.domainCfg : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["ipv6Addr"] = state ? state.ipv6Addr : undefined;
            resourceInputs["ipv6AddrCfg"] = state ? state.ipv6AddrCfg : undefined;
            resourceInputs["portCfg"] = state ? state.portCfg : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as LdapServerHostIpv6Args | undefined;
            if ((!args || args.ipv6Addr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipv6Addr'");
            }
            resourceInputs["base"] = args ? args.base : undefined;
            resourceInputs["cnValue"] = args ? args.cnValue : undefined;
            resourceInputs["dnValue"] = args ? args.dnValue : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["domainCfg"] = args ? args.domainCfg : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["ipv6Addr"] = args ? args.ipv6Addr : undefined;
            resourceInputs["ipv6AddrCfg"] = args ? args.ipv6AddrCfg : undefined;
            resourceInputs["portCfg"] = args ? args.portCfg : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LdapServerHostIpv6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LdapServerHostIpv6 resources.
 */
export interface LdapServerHostIpv6State {
    /**
     * Configure the group DN which user belongs to
     */
    base?: pulumi.Input<string>;
    /**
     * LDAP common name identifier (i.e.: cn, uid)
     */
    cnValue?: pulumi.Input<string>;
    /**
     * LDAP distinguished name (dn)
     */
    dnValue?: pulumi.Input<string>;
    /**
     * Configure AD domain name
     */
    domain?: pulumi.Input<string>;
    domainCfg?: pulumi.Input<inputs.LdapServerHostIpv6DomainCfg>;
    /**
     * Configure the group DN which user belongs to
     */
    group?: pulumi.Input<string>;
    /**
     * IPV6 address of ldap server
     */
    ipv6Addr?: pulumi.Input<string>;
    ipv6AddrCfg?: pulumi.Input<inputs.LdapServerHostIpv6Ipv6AddrCfg>;
    portCfg?: pulumi.Input<inputs.LdapServerHostIpv6PortCfg>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LdapServerHostIpv6 resource.
 */
export interface LdapServerHostIpv6Args {
    /**
     * Configure the group DN which user belongs to
     */
    base?: pulumi.Input<string>;
    /**
     * LDAP common name identifier (i.e.: cn, uid)
     */
    cnValue?: pulumi.Input<string>;
    /**
     * LDAP distinguished name (dn)
     */
    dnValue?: pulumi.Input<string>;
    /**
     * Configure AD domain name
     */
    domain?: pulumi.Input<string>;
    domainCfg?: pulumi.Input<inputs.LdapServerHostIpv6DomainCfg>;
    /**
     * Configure the group DN which user belongs to
     */
    group?: pulumi.Input<string>;
    /**
     * IPV6 address of ldap server
     */
    ipv6Addr: pulumi.Input<string>;
    ipv6AddrCfg?: pulumi.Input<inputs.LdapServerHostIpv6Ipv6AddrCfg>;
    portCfg?: pulumi.Input<inputs.LdapServerHostIpv6PortCfg>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
