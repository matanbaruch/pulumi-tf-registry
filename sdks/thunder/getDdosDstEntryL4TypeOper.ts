// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDdosDstEntryL4TypeOper(args: GetDdosDstEntryL4TypeOperArgs, opts?: pulumi.InvokeOptions): Promise<GetDdosDstEntryL4TypeOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getDdosDstEntryL4TypeOper:getDdosDstEntryL4TypeOper", {
        "dstEntryName": args.dstEntryName,
        "id": args.id,
        "ipFilteringPolicyOper": args.ipFilteringPolicyOper,
        "oper": args.oper,
        "portInd": args.portInd,
        "progressionTracking": args.progressionTracking,
        "protocol": args.protocol,
        "topkSources": args.topkSources,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDdosDstEntryL4TypeOper.
 */
export interface GetDdosDstEntryL4TypeOperArgs {
    dstEntryName: string;
    id?: string;
    ipFilteringPolicyOper?: inputs.GetDdosDstEntryL4TypeOperIpFilteringPolicyOper;
    oper?: inputs.GetDdosDstEntryL4TypeOperOper;
    portInd?: inputs.GetDdosDstEntryL4TypeOperPortInd;
    progressionTracking?: inputs.GetDdosDstEntryL4TypeOperProgressionTracking;
    protocol: string;
    topkSources?: inputs.GetDdosDstEntryL4TypeOperTopkSources;
}

/**
 * A collection of values returned by getDdosDstEntryL4TypeOper.
 */
export interface GetDdosDstEntryL4TypeOperResult {
    readonly dstEntryName: string;
    readonly id: string;
    readonly ipFilteringPolicyOper?: outputs.GetDdosDstEntryL4TypeOperIpFilteringPolicyOper;
    readonly oper?: outputs.GetDdosDstEntryL4TypeOperOper;
    readonly portInd?: outputs.GetDdosDstEntryL4TypeOperPortInd;
    readonly progressionTracking?: outputs.GetDdosDstEntryL4TypeOperProgressionTracking;
    readonly protocol: string;
    readonly topkSources?: outputs.GetDdosDstEntryL4TypeOperTopkSources;
}
export function getDdosDstEntryL4TypeOperOutput(args: GetDdosDstEntryL4TypeOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDdosDstEntryL4TypeOperResult> {
    return pulumi.output(args).apply((a: any) => getDdosDstEntryL4TypeOper(a, opts))
}

/**
 * A collection of arguments for invoking getDdosDstEntryL4TypeOper.
 */
export interface GetDdosDstEntryL4TypeOperOutputArgs {
    dstEntryName: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ipFilteringPolicyOper?: pulumi.Input<inputs.GetDdosDstEntryL4TypeOperIpFilteringPolicyOperArgs>;
    oper?: pulumi.Input<inputs.GetDdosDstEntryL4TypeOperOperArgs>;
    portInd?: pulumi.Input<inputs.GetDdosDstEntryL4TypeOperPortIndArgs>;
    progressionTracking?: pulumi.Input<inputs.GetDdosDstEntryL4TypeOperProgressionTrackingArgs>;
    protocol: pulumi.Input<string>;
    topkSources?: pulumi.Input<inputs.GetDdosDstEntryL4TypeOperTopkSourcesArgs>;
}
