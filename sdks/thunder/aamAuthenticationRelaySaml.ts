// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AamAuthenticationRelaySaml extends pulumi.CustomResource {
    /**
     * Get an existing AamAuthenticationRelaySaml resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AamAuthenticationRelaySamlState, opts?: pulumi.CustomResourceOptions): AamAuthenticationRelaySaml {
        return new AamAuthenticationRelaySaml(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/aamAuthenticationRelaySaml:AamAuthenticationRelaySaml';

    /**
     * Returns true if the given object is an instance of AamAuthenticationRelaySaml.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AamAuthenticationRelaySaml {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AamAuthenticationRelaySaml.__pulumiType;
    }

    /**
     * Specify the URI for IDP to handle SAML authentication request
     */
    public readonly idpAuthUri!: pulumi.Output<string | undefined>;
    /**
     * 'equals': URI exactly matches the string; 'contains': URI string contains another sub string; 'starts-with': URI string
     * starts with sub string; 'ends-with': URI string ends with sub string;
     */
    public readonly matchType!: pulumi.Output<string | undefined>;
    /**
     * Match URI
     */
    public readonly matchUri!: pulumi.Output<string | undefined>;
    /**
     * 'get-from-backend': Get RelayState parameter from backend server; 'request-uri': Use the (URL encoded) current
     * request-uri as the RelayState;
     */
    public readonly method!: pulumi.Output<string | undefined>;
    /**
     * Specify SAML authentication relay name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify the backend server assertion consuming service URI
     */
    public readonly relayAcsUri!: pulumi.Output<string | undefined>;
    /**
     * Specify how many continuous fail for SAML relay will trigger. Default will not retry.
     */
    public readonly retryNumber!: pulumi.Output<number | undefined>;
    public readonly samplingEnables!: pulumi.Output<outputs.AamAuthenticationRelaySamlSamplingEnable[] | undefined>;
    /**
     * Specify the cookie name that used by backend server for authenticated users
     */
    public readonly serverCookieName!: pulumi.Output<string | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    /**
     * Use the fixed string as the RelayState
     */
    public readonly value!: pulumi.Output<string | undefined>;

    /**
     * Create a AamAuthenticationRelaySaml resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AamAuthenticationRelaySamlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AamAuthenticationRelaySamlArgs | AamAuthenticationRelaySamlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AamAuthenticationRelaySamlState | undefined;
            resourceInputs["idpAuthUri"] = state ? state.idpAuthUri : undefined;
            resourceInputs["matchType"] = state ? state.matchType : undefined;
            resourceInputs["matchUri"] = state ? state.matchUri : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["relayAcsUri"] = state ? state.relayAcsUri : undefined;
            resourceInputs["retryNumber"] = state ? state.retryNumber : undefined;
            resourceInputs["samplingEnables"] = state ? state.samplingEnables : undefined;
            resourceInputs["serverCookieName"] = state ? state.serverCookieName : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as AamAuthenticationRelaySamlArgs | undefined;
            resourceInputs["idpAuthUri"] = args ? args.idpAuthUri : undefined;
            resourceInputs["matchType"] = args ? args.matchType : undefined;
            resourceInputs["matchUri"] = args ? args.matchUri : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["relayAcsUri"] = args ? args.relayAcsUri : undefined;
            resourceInputs["retryNumber"] = args ? args.retryNumber : undefined;
            resourceInputs["samplingEnables"] = args ? args.samplingEnables : undefined;
            resourceInputs["serverCookieName"] = args ? args.serverCookieName : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AamAuthenticationRelaySaml.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AamAuthenticationRelaySaml resources.
 */
export interface AamAuthenticationRelaySamlState {
    /**
     * Specify the URI for IDP to handle SAML authentication request
     */
    idpAuthUri?: pulumi.Input<string>;
    /**
     * 'equals': URI exactly matches the string; 'contains': URI string contains another sub string; 'starts-with': URI string
     * starts with sub string; 'ends-with': URI string ends with sub string;
     */
    matchType?: pulumi.Input<string>;
    /**
     * Match URI
     */
    matchUri?: pulumi.Input<string>;
    /**
     * 'get-from-backend': Get RelayState parameter from backend server; 'request-uri': Use the (URL encoded) current
     * request-uri as the RelayState;
     */
    method?: pulumi.Input<string>;
    /**
     * Specify SAML authentication relay name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify the backend server assertion consuming service URI
     */
    relayAcsUri?: pulumi.Input<string>;
    /**
     * Specify how many continuous fail for SAML relay will trigger. Default will not retry.
     */
    retryNumber?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationRelaySamlSamplingEnable>[]>;
    /**
     * Specify the cookie name that used by backend server for authenticated users
     */
    serverCookieName?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Use the fixed string as the RelayState
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AamAuthenticationRelaySaml resource.
 */
export interface AamAuthenticationRelaySamlArgs {
    /**
     * Specify the URI for IDP to handle SAML authentication request
     */
    idpAuthUri?: pulumi.Input<string>;
    /**
     * 'equals': URI exactly matches the string; 'contains': URI string contains another sub string; 'starts-with': URI string
     * starts with sub string; 'ends-with': URI string ends with sub string;
     */
    matchType?: pulumi.Input<string>;
    /**
     * Match URI
     */
    matchUri?: pulumi.Input<string>;
    /**
     * 'get-from-backend': Get RelayState parameter from backend server; 'request-uri': Use the (URL encoded) current
     * request-uri as the RelayState;
     */
    method?: pulumi.Input<string>;
    /**
     * Specify SAML authentication relay name
     */
    name?: pulumi.Input<string>;
    /**
     * Specify the backend server assertion consuming service URI
     */
    relayAcsUri?: pulumi.Input<string>;
    /**
     * Specify how many continuous fail for SAML relay will trigger. Default will not retry.
     */
    retryNumber?: pulumi.Input<number>;
    samplingEnables?: pulumi.Input<pulumi.Input<inputs.AamAuthenticationRelaySamlSamplingEnable>[]>;
    /**
     * Specify the cookie name that used by backend server for authenticated users
     */
    serverCookieName?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    /**
     * Use the fixed string as the RelayState
     */
    value?: pulumi.Input<string>;
}
