// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DeleteGlmLicense extends pulumi.CustomResource {
    /**
     * Get an existing DeleteGlmLicense resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeleteGlmLicenseState, opts?: pulumi.CustomResourceOptions): DeleteGlmLicense {
        return new DeleteGlmLicense(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/deleteGlmLicense:DeleteGlmLicense';

    /**
     * Returns true if the given object is an instance of DeleteGlmLicense.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DeleteGlmLicense {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DeleteGlmLicense.__pulumiType;
    }

    /**
     * only remove A10 Threat Intel license
     */
    public readonly a10Ti!: pulumi.Output<number | undefined>;
    /**
     * only remove IPSEC VPN license
     */
    public readonly ipsecVpn!: pulumi.Output<number | undefined>;
    /**
     * only remove NGWAF license
     */
    public readonly ngwaf!: pulumi.Output<number | undefined>;
    /**
     * only remove QOSMOS license
     */
    public readonly qosmos!: pulumi.Output<number | undefined>;
    /**
     * only remove Secure gaming license
     */
    public readonly secureGaming!: pulumi.Output<number | undefined>;
    /**
     * only remove ThreatSTOP license
     */
    public readonly threatstop!: pulumi.Output<number | undefined>;
    /**
     * only remove Webroot license
     */
    public readonly webroot!: pulumi.Output<number | undefined>;
    /**
     * only remove Webroot Threat Intel license
     */
    public readonly webrootTi!: pulumi.Output<number | undefined>;

    /**
     * Create a DeleteGlmLicense resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeleteGlmLicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeleteGlmLicenseArgs | DeleteGlmLicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeleteGlmLicenseState | undefined;
            resourceInputs["a10Ti"] = state ? state.a10Ti : undefined;
            resourceInputs["ipsecVpn"] = state ? state.ipsecVpn : undefined;
            resourceInputs["ngwaf"] = state ? state.ngwaf : undefined;
            resourceInputs["qosmos"] = state ? state.qosmos : undefined;
            resourceInputs["secureGaming"] = state ? state.secureGaming : undefined;
            resourceInputs["threatstop"] = state ? state.threatstop : undefined;
            resourceInputs["webroot"] = state ? state.webroot : undefined;
            resourceInputs["webrootTi"] = state ? state.webrootTi : undefined;
        } else {
            const args = argsOrState as DeleteGlmLicenseArgs | undefined;
            resourceInputs["a10Ti"] = args ? args.a10Ti : undefined;
            resourceInputs["ipsecVpn"] = args ? args.ipsecVpn : undefined;
            resourceInputs["ngwaf"] = args ? args.ngwaf : undefined;
            resourceInputs["qosmos"] = args ? args.qosmos : undefined;
            resourceInputs["secureGaming"] = args ? args.secureGaming : undefined;
            resourceInputs["threatstop"] = args ? args.threatstop : undefined;
            resourceInputs["webroot"] = args ? args.webroot : undefined;
            resourceInputs["webrootTi"] = args ? args.webrootTi : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DeleteGlmLicense.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DeleteGlmLicense resources.
 */
export interface DeleteGlmLicenseState {
    /**
     * only remove A10 Threat Intel license
     */
    a10Ti?: pulumi.Input<number>;
    /**
     * only remove IPSEC VPN license
     */
    ipsecVpn?: pulumi.Input<number>;
    /**
     * only remove NGWAF license
     */
    ngwaf?: pulumi.Input<number>;
    /**
     * only remove QOSMOS license
     */
    qosmos?: pulumi.Input<number>;
    /**
     * only remove Secure gaming license
     */
    secureGaming?: pulumi.Input<number>;
    /**
     * only remove ThreatSTOP license
     */
    threatstop?: pulumi.Input<number>;
    /**
     * only remove Webroot license
     */
    webroot?: pulumi.Input<number>;
    /**
     * only remove Webroot Threat Intel license
     */
    webrootTi?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DeleteGlmLicense resource.
 */
export interface DeleteGlmLicenseArgs {
    /**
     * only remove A10 Threat Intel license
     */
    a10Ti?: pulumi.Input<number>;
    /**
     * only remove IPSEC VPN license
     */
    ipsecVpn?: pulumi.Input<number>;
    /**
     * only remove NGWAF license
     */
    ngwaf?: pulumi.Input<number>;
    /**
     * only remove QOSMOS license
     */
    qosmos?: pulumi.Input<number>;
    /**
     * only remove Secure gaming license
     */
    secureGaming?: pulumi.Input<number>;
    /**
     * only remove ThreatSTOP license
     */
    threatstop?: pulumi.Input<number>;
    /**
     * only remove Webroot license
     */
    webroot?: pulumi.Input<number>;
    /**
     * only remove Webroot Threat Intel license
     */
    webrootTi?: pulumi.Input<number>;
}
