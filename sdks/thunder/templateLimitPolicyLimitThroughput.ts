// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TemplateLimitPolicyLimitThroughput extends pulumi.CustomResource {
    /**
     * Get an existing TemplateLimitPolicyLimitThroughput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TemplateLimitPolicyLimitThroughputState, opts?: pulumi.CustomResourceOptions): TemplateLimitPolicyLimitThroughput {
        return new TemplateLimitPolicyLimitThroughput(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/templateLimitPolicyLimitThroughput:TemplateLimitPolicyLimitThroughput';

    /**
     * Returns true if the given object is an instance of TemplateLimitPolicyLimitThroughput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TemplateLimitPolicyLimitThroughput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TemplateLimitPolicyLimitThroughput.__pulumiType;
    }

    /**
     * Downlink Throughput limit (Mega Bits per second)
     */
    public readonly downlink!: pulumi.Output<number | undefined>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    public readonly downlinkBurstsize!: pulumi.Output<number | undefined>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    public readonly downlinkRelaxed!: pulumi.Output<number | undefined>;
    /**
     * PolicyNumber
     */
    public readonly policyNumber!: pulumi.Output<string>;
    /**
     * Total Throughput limit (Mega Bits per second)
     */
    public readonly total!: pulumi.Output<number | undefined>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    public readonly totalBurstsize!: pulumi.Output<number | undefined>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    public readonly totalRelaxed!: pulumi.Output<number | undefined>;
    /**
     * Uplink Throughput limit (Mega Bits per second)
     */
    public readonly uplink!: pulumi.Output<number | undefined>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    public readonly uplinkBurstsize!: pulumi.Output<number | undefined>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    public readonly uplinkRelaxed!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a TemplateLimitPolicyLimitThroughput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TemplateLimitPolicyLimitThroughputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TemplateLimitPolicyLimitThroughputArgs | TemplateLimitPolicyLimitThroughputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TemplateLimitPolicyLimitThroughputState | undefined;
            resourceInputs["downlink"] = state ? state.downlink : undefined;
            resourceInputs["downlinkBurstsize"] = state ? state.downlinkBurstsize : undefined;
            resourceInputs["downlinkRelaxed"] = state ? state.downlinkRelaxed : undefined;
            resourceInputs["policyNumber"] = state ? state.policyNumber : undefined;
            resourceInputs["total"] = state ? state.total : undefined;
            resourceInputs["totalBurstsize"] = state ? state.totalBurstsize : undefined;
            resourceInputs["totalRelaxed"] = state ? state.totalRelaxed : undefined;
            resourceInputs["uplink"] = state ? state.uplink : undefined;
            resourceInputs["uplinkBurstsize"] = state ? state.uplinkBurstsize : undefined;
            resourceInputs["uplinkRelaxed"] = state ? state.uplinkRelaxed : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as TemplateLimitPolicyLimitThroughputArgs | undefined;
            if ((!args || args.policyNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyNumber'");
            }
            resourceInputs["downlink"] = args ? args.downlink : undefined;
            resourceInputs["downlinkBurstsize"] = args ? args.downlinkBurstsize : undefined;
            resourceInputs["downlinkRelaxed"] = args ? args.downlinkRelaxed : undefined;
            resourceInputs["policyNumber"] = args ? args.policyNumber : undefined;
            resourceInputs["total"] = args ? args.total : undefined;
            resourceInputs["totalBurstsize"] = args ? args.totalBurstsize : undefined;
            resourceInputs["totalRelaxed"] = args ? args.totalRelaxed : undefined;
            resourceInputs["uplink"] = args ? args.uplink : undefined;
            resourceInputs["uplinkBurstsize"] = args ? args.uplinkBurstsize : undefined;
            resourceInputs["uplinkRelaxed"] = args ? args.uplinkRelaxed : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TemplateLimitPolicyLimitThroughput.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TemplateLimitPolicyLimitThroughput resources.
 */
export interface TemplateLimitPolicyLimitThroughputState {
    /**
     * Downlink Throughput limit (Mega Bits per second)
     */
    downlink?: pulumi.Input<number>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    downlinkBurstsize?: pulumi.Input<number>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    downlinkRelaxed?: pulumi.Input<number>;
    /**
     * PolicyNumber
     */
    policyNumber?: pulumi.Input<string>;
    /**
     * Total Throughput limit (Mega Bits per second)
     */
    total?: pulumi.Input<number>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    totalBurstsize?: pulumi.Input<number>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    totalRelaxed?: pulumi.Input<number>;
    /**
     * Uplink Throughput limit (Mega Bits per second)
     */
    uplink?: pulumi.Input<number>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    uplinkBurstsize?: pulumi.Input<number>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    uplinkRelaxed?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TemplateLimitPolicyLimitThroughput resource.
 */
export interface TemplateLimitPolicyLimitThroughputArgs {
    /**
     * Downlink Throughput limit (Mega Bits per second)
     */
    downlink?: pulumi.Input<number>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    downlinkBurstsize?: pulumi.Input<number>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    downlinkRelaxed?: pulumi.Input<number>;
    /**
     * PolicyNumber
     */
    policyNumber: pulumi.Input<string>;
    /**
     * Total Throughput limit (Mega Bits per second)
     */
    total?: pulumi.Input<number>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    totalBurstsize?: pulumi.Input<number>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    totalRelaxed?: pulumi.Input<number>;
    /**
     * Uplink Throughput limit (Mega Bits per second)
     */
    uplink?: pulumi.Input<number>;
    /**
     * Token Bucket Size (Must Exceed Configured Rate) (In Mega Bits per second)
     */
    uplinkBurstsize?: pulumi.Input<number>;
    /**
     * Relax the limitation when the policy has more tokens from the parent of policy
     */
    uplinkRelaxed?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
