// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FlowspecIcmpCode extends pulumi.CustomResource {
    /**
     * Get an existing FlowspecIcmpCode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowspecIcmpCodeState, opts?: pulumi.CustomResourceOptions): FlowspecIcmpCode {
        return new FlowspecIcmpCode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/flowspecIcmpCode:FlowspecIcmpCode';

    /**
     * Returns true if the given object is an instance of FlowspecIcmpCode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowspecIcmpCode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowspecIcmpCode.__pulumiType;
    }

    /**
     * Specify the ICMP Code
     */
    public readonly code!: pulumi.Output<number>;
    /**
     * Specify the ICMP Code
     */
    public readonly codeEnd!: pulumi.Output<number | undefined>;
    /**
     * 'eq': Match only packets on a given ICMP Code; 'gt': Match only packets with a greater ICMP Code; 'lt': Match only
     * packets with a lower ICMP Code; 'range': match only packets in the range of ICMP Codes;
     */
    public readonly icmpCodeAttribute!: pulumi.Output<string>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a FlowspecIcmpCode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowspecIcmpCodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowspecIcmpCodeArgs | FlowspecIcmpCodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowspecIcmpCodeState | undefined;
            resourceInputs["code"] = state ? state.code : undefined;
            resourceInputs["codeEnd"] = state ? state.codeEnd : undefined;
            resourceInputs["icmpCodeAttribute"] = state ? state.icmpCodeAttribute : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as FlowspecIcmpCodeArgs | undefined;
            if ((!args || args.code === undefined) && !opts.urn) {
                throw new Error("Missing required property 'code'");
            }
            if ((!args || args.icmpCodeAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'icmpCodeAttribute'");
            }
            resourceInputs["code"] = args ? args.code : undefined;
            resourceInputs["codeEnd"] = args ? args.codeEnd : undefined;
            resourceInputs["icmpCodeAttribute"] = args ? args.icmpCodeAttribute : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowspecIcmpCode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering FlowspecIcmpCode resources.
 */
export interface FlowspecIcmpCodeState {
    /**
     * Specify the ICMP Code
     */
    code?: pulumi.Input<number>;
    /**
     * Specify the ICMP Code
     */
    codeEnd?: pulumi.Input<number>;
    /**
     * 'eq': Match only packets on a given ICMP Code; 'gt': Match only packets with a greater ICMP Code; 'lt': Match only
     * packets with a lower ICMP Code; 'range': match only packets in the range of ICMP Codes;
     */
    icmpCodeAttribute?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowspecIcmpCode resource.
 */
export interface FlowspecIcmpCodeArgs {
    /**
     * Specify the ICMP Code
     */
    code: pulumi.Input<number>;
    /**
     * Specify the ICMP Code
     */
    codeEnd?: pulumi.Input<number>;
    /**
     * 'eq': Match only packets on a given ICMP Code; 'gt': Match only packets with a greater ICMP Code; 'lt': Match only
     * packets with a lower ICMP Code; 'range': match only packets in the range of ICMP Codes;
     */
    icmpCodeAttribute: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
