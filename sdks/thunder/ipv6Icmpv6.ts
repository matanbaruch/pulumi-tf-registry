// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Ipv6Icmpv6 extends pulumi.CustomResource {
    /**
     * Get an existing Ipv6Icmpv6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Ipv6Icmpv6State, opts?: pulumi.CustomResourceOptions): Ipv6Icmpv6 {
        return new Ipv6Icmpv6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ipv6Icmpv6:Ipv6Icmpv6';

    /**
     * Returns true if the given object is an instance of Ipv6Icmpv6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ipv6Icmpv6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ipv6Icmpv6.__pulumiType;
    }

    /**
     * Disable outbound ICMPv6 redirect messages
     */
    public readonly redirect!: pulumi.Output<number | undefined>;
    /**
     * Disable outbound ICMPv6 unreachable messages
     */
    public readonly unreachable!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Ipv6Icmpv6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Ipv6Icmpv6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Ipv6Icmpv6Args | Ipv6Icmpv6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Ipv6Icmpv6State | undefined;
            resourceInputs["redirect"] = state ? state.redirect : undefined;
            resourceInputs["unreachable"] = state ? state.unreachable : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Ipv6Icmpv6Args | undefined;
            resourceInputs["redirect"] = args ? args.redirect : undefined;
            resourceInputs["unreachable"] = args ? args.unreachable : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ipv6Icmpv6.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Ipv6Icmpv6 resources.
 */
export interface Ipv6Icmpv6State {
    /**
     * Disable outbound ICMPv6 redirect messages
     */
    redirect?: pulumi.Input<number>;
    /**
     * Disable outbound ICMPv6 unreachable messages
     */
    unreachable?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ipv6Icmpv6 resource.
 */
export interface Ipv6Icmpv6Args {
    /**
     * Disable outbound ICMPv6 redirect messages
     */
    redirect?: pulumi.Input<number>;
    /**
     * Disable outbound ICMPv6 unreachable messages
     */
    unreachable?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
