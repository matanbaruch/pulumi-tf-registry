// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdosZoneTemplateIcmpV6TypeOther extends pulumi.CustomResource {
    /**
     * Get an existing DdosZoneTemplateIcmpV6TypeOther resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdosZoneTemplateIcmpV6TypeOtherState, opts?: pulumi.CustomResourceOptions): DdosZoneTemplateIcmpV6TypeOther {
        return new DdosZoneTemplateIcmpV6TypeOther(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/ddosZoneTemplateIcmpV6TypeOther:DdosZoneTemplateIcmpV6TypeOther';

    /**
     * Returns true if the given object is an instance of DdosZoneTemplateIcmpV6TypeOther.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdosZoneTemplateIcmpV6TypeOther {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdosZoneTemplateIcmpV6TypeOther.__pulumiType;
    }

    public readonly dst!: pulumi.Output<outputs.DdosZoneTemplateIcmpV6TypeOtherDst | undefined>;
    /**
     * IcmpTmplName
     */
    public readonly icmpTmplName!: pulumi.Output<string>;
    /**
     * 'drop': Reject wildcard ICMP type; 'blacklist-src': Blacklist-src wildcard ICMP type; 'ignore': Ignore wildcard ICMP
     * type;
     */
    public readonly icmpTypeOtherAction!: pulumi.Output<string | undefined>;
    /**
     * Configure action-list to take for wildcard ICMP match
     */
    public readonly icmpTypeOtherActionListName!: pulumi.Output<string | undefined>;
    public readonly src!: pulumi.Output<outputs.DdosZoneTemplateIcmpV6TypeOtherSrc | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a DdosZoneTemplateIcmpV6TypeOther resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdosZoneTemplateIcmpV6TypeOtherArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdosZoneTemplateIcmpV6TypeOtherArgs | DdosZoneTemplateIcmpV6TypeOtherState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdosZoneTemplateIcmpV6TypeOtherState | undefined;
            resourceInputs["dst"] = state ? state.dst : undefined;
            resourceInputs["icmpTmplName"] = state ? state.icmpTmplName : undefined;
            resourceInputs["icmpTypeOtherAction"] = state ? state.icmpTypeOtherAction : undefined;
            resourceInputs["icmpTypeOtherActionListName"] = state ? state.icmpTypeOtherActionListName : undefined;
            resourceInputs["src"] = state ? state.src : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as DdosZoneTemplateIcmpV6TypeOtherArgs | undefined;
            if ((!args || args.icmpTmplName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'icmpTmplName'");
            }
            resourceInputs["dst"] = args ? args.dst : undefined;
            resourceInputs["icmpTmplName"] = args ? args.icmpTmplName : undefined;
            resourceInputs["icmpTypeOtherAction"] = args ? args.icmpTypeOtherAction : undefined;
            resourceInputs["icmpTypeOtherActionListName"] = args ? args.icmpTypeOtherActionListName : undefined;
            resourceInputs["src"] = args ? args.src : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdosZoneTemplateIcmpV6TypeOther.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DdosZoneTemplateIcmpV6TypeOther resources.
 */
export interface DdosZoneTemplateIcmpV6TypeOtherState {
    dst?: pulumi.Input<inputs.DdosZoneTemplateIcmpV6TypeOtherDst>;
    /**
     * IcmpTmplName
     */
    icmpTmplName?: pulumi.Input<string>;
    /**
     * 'drop': Reject wildcard ICMP type; 'blacklist-src': Blacklist-src wildcard ICMP type; 'ignore': Ignore wildcard ICMP
     * type;
     */
    icmpTypeOtherAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take for wildcard ICMP match
     */
    icmpTypeOtherActionListName?: pulumi.Input<string>;
    src?: pulumi.Input<inputs.DdosZoneTemplateIcmpV6TypeOtherSrc>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdosZoneTemplateIcmpV6TypeOther resource.
 */
export interface DdosZoneTemplateIcmpV6TypeOtherArgs {
    dst?: pulumi.Input<inputs.DdosZoneTemplateIcmpV6TypeOtherDst>;
    /**
     * IcmpTmplName
     */
    icmpTmplName: pulumi.Input<string>;
    /**
     * 'drop': Reject wildcard ICMP type; 'blacklist-src': Blacklist-src wildcard ICMP type; 'ignore': Ignore wildcard ICMP
     * type;
     */
    icmpTypeOtherAction?: pulumi.Input<string>;
    /**
     * Configure action-list to take for wildcard ICMP match
     */
    icmpTypeOtherActionListName?: pulumi.Input<string>;
    src?: pulumi.Input<inputs.DdosZoneTemplateIcmpV6TypeOtherSrc>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
