// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SnmpServerSNMPv1V2cUserOid extends pulumi.CustomResource {
    /**
     * Get an existing SnmpServerSNMPv1V2cUserOid resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnmpServerSNMPv1V2cUserOidState, opts?: pulumi.CustomResourceOptions): SnmpServerSNMPv1V2cUserOid {
        return new SnmpServerSNMPv1V2cUserOid(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/snmpServerSNMPv1V2cUserOid:SnmpServerSNMPv1V2cUserOid';

    /**
     * Returns true if the given object is an instance of SnmpServerSNMPv1V2cUserOid.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnmpServerSNMPv1V2cUserOid {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnmpServerSNMPv1V2cUserOid.__pulumiType;
    }

    /**
     * specific the oid (The oid value, object-key)
     */
    public readonly oidVal!: pulumi.Output<string>;
    public readonly remote!: pulumi.Output<outputs.SnmpServerSNMPv1V2cUserOidRemote | undefined>;
    /**
     * User
     */
    public readonly user!: pulumi.Output<string>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a SnmpServerSNMPv1V2cUserOid resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnmpServerSNMPv1V2cUserOidArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnmpServerSNMPv1V2cUserOidArgs | SnmpServerSNMPv1V2cUserOidState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnmpServerSNMPv1V2cUserOidState | undefined;
            resourceInputs["oidVal"] = state ? state.oidVal : undefined;
            resourceInputs["remote"] = state ? state.remote : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SnmpServerSNMPv1V2cUserOidArgs | undefined;
            if ((!args || args.oidVal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oidVal'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["oidVal"] = args ? args.oidVal : undefined;
            resourceInputs["remote"] = args ? args.remote : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnmpServerSNMPv1V2cUserOid.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SnmpServerSNMPv1V2cUserOid resources.
 */
export interface SnmpServerSNMPv1V2cUserOidState {
    /**
     * specific the oid (The oid value, object-key)
     */
    oidVal?: pulumi.Input<string>;
    remote?: pulumi.Input<inputs.SnmpServerSNMPv1V2cUserOidRemote>;
    /**
     * User
     */
    user?: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnmpServerSNMPv1V2cUserOid resource.
 */
export interface SnmpServerSNMPv1V2cUserOidArgs {
    /**
     * specific the oid (The oid value, object-key)
     */
    oidVal: pulumi.Input<string>;
    remote?: pulumi.Input<inputs.SnmpServerSNMPv1V2cUserOidRemote>;
    /**
     * User
     */
    user: pulumi.Input<string>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
