// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class System extends pulumi.CustomResource {
    /**
     * Get an existing System resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemState, opts?: pulumi.CustomResourceOptions): System {
        return new System(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/system:System';

    /**
     * Returns true if the given object is an instance of System.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is System {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === System.__pulumiType;
    }

    public readonly addCpuCore!: pulumi.Output<outputs.SystemAddCpuCore | undefined>;
    public readonly addPort!: pulumi.Output<outputs.SystemAddPort | undefined>;
    public readonly allVlanLimit!: pulumi.Output<outputs.SystemAllVlanLimit | undefined>;
    /**
     * log system anomalies
     */
    public readonly anomalyLog!: pulumi.Output<number | undefined>;
    /**
     * Anomaly log rate-limit per second, default 32
     */
    public readonly anomalyLogRateLimit!: pulumi.Output<number | undefined>;
    public readonly appPerformance!: pulumi.Output<outputs.SystemAppPerformance | undefined>;
    public readonly appsGlobal!: pulumi.Output<outputs.SystemAppsGlobal | undefined>;
    public readonly asicDebugDump!: pulumi.Output<outputs.SystemAsicDebugDump | undefined>;
    public readonly asicMmuFailSafe!: pulumi.Output<outputs.SystemAsicMmuFailSafe | undefined>;
    /**
     * log attack anomalies
     */
    public readonly attackLog!: pulumi.Output<number | undefined>;
    public readonly bandwidth!: pulumi.Output<outputs.SystemBandwidth | undefined>;
    public readonly bfd!: pulumi.Output<outputs.SystemBfd | undefined>;
    /**
     * Enable class list hit count
     */
    public readonly classListHitcountEnable!: pulumi.Output<number | undefined>;
    public readonly cliMonitorInterval!: pulumi.Output<outputs.SystemCliMonitorInterval | undefined>;
    public readonly cmUpdateFileNameRef!: pulumi.Output<outputs.SystemCmUpdateFileNameRef | undefined>;
    public readonly controlCpu!: pulumi.Output<outputs.SystemControlCpu | undefined>;
    public readonly core!: pulumi.Output<outputs.SystemCore | undefined>;
    public readonly cosqShow!: pulumi.Output<outputs.SystemCosqShow | undefined>;
    public readonly cosqStats!: pulumi.Output<outputs.SystemCosqStats | undefined>;
    public readonly counterLibAccounting!: pulumi.Output<outputs.SystemCounterLibAccounting | undefined>;
    public readonly cpuHyperThread!: pulumi.Output<outputs.SystemCpuHyperThread | undefined>;
    public readonly cpuList!: pulumi.Output<outputs.SystemCpuList | undefined>;
    public readonly cpuLoadSharing!: pulumi.Output<outputs.SystemCpuLoadSharing | undefined>;
    public readonly cpuMap!: pulumi.Output<outputs.SystemCpuMap | undefined>;
    public readonly cpuPacketPrioSupport!: pulumi.Output<outputs.SystemCpuPacketPrioSupport | undefined>;
    public readonly dataCpu!: pulumi.Output<outputs.SystemDataCpu | undefined>;
    /**
     * System DDoS Attack
     */
    public readonly ddosAttack!: pulumi.Output<number | undefined>;
    /**
     * log DDoS attack anomalies
     */
    public readonly ddosLog!: pulumi.Output<number | undefined>;
    /**
     * Set all interfaces default mtu (Interface MTU, default 1 (System jumbo needs to be enabled))
     */
    public readonly defaultMtu!: pulumi.Output<number | undefined>;
    public readonly delPort!: pulumi.Output<outputs.SystemDelPort | undefined>;
    public readonly deleteCpuCore!: pulumi.Output<outputs.SystemDeleteCpuCore | undefined>;
    public readonly dns!: pulumi.Output<outputs.SystemDns | undefined>;
    public readonly dnsCache!: pulumi.Output<outputs.SystemDnsCache | undefined>;
    /**
     * Enable class list hit count
     */
    public readonly domainListHitcountEnable!: pulumi.Output<number | undefined>;
    public readonly domainListInfo!: pulumi.Output<outputs.SystemDomainListInfo | undefined>;
    public readonly dpdkStats!: pulumi.Output<outputs.SystemDpdkStats | undefined>;
    /**
     * 'enable': enable (default); 'disable': disable;
     */
    public readonly dropLinuxClosedPortSyn!: pulumi.Output<string | undefined>;
    /**
     * Enable socket pool for dynamic-service DNS
     */
    public readonly dynamicServiceDnsSocketPool!: pulumi.Output<number | undefined>;
    public readonly enablePassword!: pulumi.Output<outputs.SystemEnablePassword | undefined>;
    public readonly environment!: pulumi.Output<outputs.SystemEnvironment | undefined>;
    public readonly extOnlyLogging!: pulumi.Output<outputs.SystemExtOnlyLogging | undefined>;
    public readonly fpgaCoreCrc!: pulumi.Output<outputs.SystemFpgaCoreCrc | undefined>;
    public readonly fpgaDrop!: pulumi.Output<outputs.SystemFpgaDrop | undefined>;
    public readonly fw!: pulumi.Output<outputs.SystemFw | undefined>;
    /**
     * Enable Geolocation database hit count
     */
    public readonly geoDbHitcountEnable!: pulumi.Output<number | undefined>;
    public readonly geoLocation!: pulumi.Output<outputs.SystemGeoLocation | undefined>;
    public readonly geoloc!: pulumi.Output<outputs.SystemGeoloc | undefined>;
    public readonly geolocListLists!: pulumi.Output<outputs.SystemGeolocListList[] | undefined>;
    public readonly geolocNameHelper!: pulumi.Output<outputs.SystemGeolocNameHelper | undefined>;
    public readonly geolocationFile!: pulumi.Output<outputs.SystemGeolocationFile | undefined>;
    public readonly glid!: pulumi.Output<outputs.SystemGlid | undefined>;
    public readonly guestFile!: pulumi.Output<outputs.SystemGuestFile | undefined>;
    public readonly guiImageList!: pulumi.Output<outputs.SystemGuiImageList | undefined>;
    public readonly hardware!: pulumi.Output<outputs.SystemHardware | undefined>;
    public readonly hardwareAccelerate!: pulumi.Output<outputs.SystemHardwareAccelerate | undefined>;
    public readonly healthCheckLists!: pulumi.Output<outputs.SystemHealthCheckList[] | undefined>;
    public readonly highMemoryL4Session!: pulumi.Output<outputs.SystemHighMemoryL4Session | undefined>;
    public readonly hrxqStatus!: pulumi.Output<outputs.SystemHrxqStatus | undefined>;
    /**
     * Enable system hardware blocking (default disabled)
     */
    public readonly hwBlockingEnable!: pulumi.Output<number | undefined>;
    public readonly icmp!: pulumi.Output<outputs.SystemIcmp | undefined>;
    public readonly icmp6!: pulumi.Output<outputs.SystemIcmp6 | undefined>;
    public readonly icmpRate!: pulumi.Output<outputs.SystemIcmpRate | undefined>;
    public readonly inuseCpuList!: pulumi.Output<outputs.SystemInuseCpuList | undefined>;
    public readonly inusePortList!: pulumi.Output<outputs.SystemInusePortList | undefined>;
    public readonly ioCpu!: pulumi.Output<outputs.SystemIoCpu | undefined>;
    public readonly ip6Stats!: pulumi.Output<outputs.SystemIp6Stats | undefined>;
    public readonly ipDnsCache!: pulumi.Output<outputs.SystemIpDnsCache | undefined>;
    public readonly ipStats!: pulumi.Output<outputs.SystemIpStats | undefined>;
    public readonly ipThreatList!: pulumi.Output<outputs.SystemIpThreatList | undefined>;
    public readonly ipmi!: pulumi.Output<outputs.SystemIpmi | undefined>;
    public readonly ipmiService!: pulumi.Output<outputs.SystemIpmiService | undefined>;
    public readonly ipsec!: pulumi.Output<outputs.SystemIpsec | undefined>;
    /**
     * Length of IPv6 prefix used to determine the user-group and the PU, by default 128
     */
    public readonly ipv6PrefixLength!: pulumi.Output<number | undefined>;
    public readonly jobOffload!: pulumi.Output<outputs.SystemJobOffload | undefined>;
    public readonly linkCapability!: pulumi.Output<outputs.SystemLinkCapability | undefined>;
    public readonly linkMonitor!: pulumi.Output<outputs.SystemLinkMonitor | undefined>;
    public readonly lro!: pulumi.Output<outputs.SystemLro | undefined>;
    public readonly managementInterfaceMode!: pulumi.Output<outputs.SystemManagementInterfaceMode | undefined>;
    public readonly memory!: pulumi.Output<outputs.SystemMemory | undefined>;
    public readonly memoryBlockDebug!: pulumi.Output<outputs.SystemMemoryBlockDebug | undefined>;
    public readonly mfaAuth!: pulumi.Output<outputs.SystemMfaAuth | undefined>;
    public readonly mfaCertStore!: pulumi.Output<outputs.SystemMfaCertStore | undefined>;
    public readonly mfaManagement!: pulumi.Output<outputs.SystemMfaManagement | undefined>;
    public readonly mfaValidationType!: pulumi.Output<outputs.SystemMfaValidationType | undefined>;
    public readonly mgmtPort!: pulumi.Output<outputs.SystemMgmtPort | undefined>;
    public readonly modifyPort!: pulumi.Output<outputs.SystemModifyPort | undefined>;
    /**
     * 'high': high cpu usage; 'low': low cpu usage; 'medium': medium cpu usage;
     */
    public readonly moduleCtrlCpu!: pulumi.Output<string | undefined>;
    public readonly monTemplate!: pulumi.Output<outputs.SystemMonTemplate | undefined>;
    public readonly multiQueueSupport!: pulumi.Output<outputs.SystemMultiQueueSupport | undefined>;
    public readonly ndiscRa!: pulumi.Output<outputs.SystemNdiscRa | undefined>;
    public readonly netvscMonitor!: pulumi.Output<outputs.SystemNetvscMonitor | undefined>;
    public readonly nsmA10lb!: pulumi.Output<outputs.SystemNsmA10lb | undefined>;
    public readonly passwordPolicy!: pulumi.Output<outputs.SystemPasswordPolicy | undefined>;
    public readonly pathLists!: pulumi.Output<outputs.SystemPathList[] | undefined>;
    public readonly pbslb!: pulumi.Output<outputs.SystemPbslb | undefined>;
    public readonly perVlanLimit!: pulumi.Output<outputs.SystemPerVlanLimit | undefined>;
    public readonly platformtype!: pulumi.Output<outputs.SystemPlatformtype | undefined>;
    public readonly portCount!: pulumi.Output<outputs.SystemPortCount | undefined>;
    public readonly portInfo!: pulumi.Output<outputs.SystemPortInfo | undefined>;
    public readonly portList!: pulumi.Output<outputs.SystemPortList | undefined>;
    public readonly ports!: pulumi.Output<outputs.SystemPorts | undefined>;
    public readonly powerOnSelfTest!: pulumi.Output<outputs.SystemPowerOnSelfTest | undefined>;
    public readonly probeNetworkDevices!: pulumi.Output<outputs.SystemProbeNetworkDevices | undefined>;
    /**
     * Run in promiscous mode settings
     */
    public readonly promiscuousMode!: pulumi.Output<number | undefined>;
    public readonly psuInfo!: pulumi.Output<outputs.SystemPsuInfo | undefined>;
    public readonly qInQ!: pulumi.Output<outputs.SystemQInQ | undefined>;
    public readonly queuingBuffer!: pulumi.Output<outputs.SystemQueuingBuffer | undefined>;
    public readonly radius!: pulumi.Output<outputs.SystemRadius | undefined>;
    public readonly reboot!: pulumi.Output<outputs.SystemReboot | undefined>;
    public readonly resourceAccounting!: pulumi.Output<outputs.SystemResourceAccounting | undefined>;
    public readonly resourceUsage!: pulumi.Output<outputs.SystemResourceUsage | undefined>;
    public readonly session!: pulumi.Output<outputs.SystemSession | undefined>;
    public readonly sessionReclaimLimit!: pulumi.Output<outputs.SystemSessionReclaimLimit | undefined>;
    public readonly setRxtxDescSize!: pulumi.Output<outputs.SystemSetRxtxDescSize | undefined>;
    public readonly setRxtxQueue!: pulumi.Output<outputs.SystemSetRxtxQueue | undefined>;
    public readonly setTcpSynPerSec!: pulumi.Output<outputs.SystemSetTcpSynPerSec | undefined>;
    public readonly sharedPollMode!: pulumi.Output<outputs.SystemSharedPollMode | undefined>;
    public readonly shellPrivileges!: pulumi.Output<outputs.SystemShellPrivileges | undefined>;
    public readonly shmLogging!: pulumi.Output<outputs.SystemShmLogging | undefined>;
    public readonly shutdown!: pulumi.Output<outputs.SystemShutdown | undefined>;
    /**
     * Disable sockstress protection
     */
    public readonly sockstressDisable!: pulumi.Output<number | undefined>;
    public readonly speProfile!: pulumi.Output<outputs.SystemSpeProfile | undefined>;
    public readonly speStatus!: pulumi.Output<outputs.SystemSpeStatus | undefined>;
    /**
     * Enable source ip hash
     */
    public readonly srcIpHashEnable!: pulumi.Output<number | undefined>;
    public readonly sslReqQ!: pulumi.Output<outputs.SystemSslReqQ | undefined>;
    public readonly sslScv!: pulumi.Output<outputs.SystemSslScv | undefined>;
    public readonly sslScvVerifyCrlSign!: pulumi.Output<outputs.SystemSslScvVerifyCrlSign | undefined>;
    public readonly sslScvVerifyHost!: pulumi.Output<outputs.SystemSslScvVerifyHost | undefined>;
    public readonly sslSetCompatibleCipher!: pulumi.Output<outputs.SystemSslSetCompatibleCipher | undefined>;
    public readonly sslStatus!: pulumi.Output<outputs.SystemSslStatus | undefined>;
    public readonly syslogTimeMsec!: pulumi.Output<outputs.SystemSyslogTimeMsec | undefined>;
    /**
     * Enable port split for the chassis
     */
    public readonly systemChassisPortSplitEnable!: pulumi.Output<number | undefined>;
    public readonly tableIntegrity!: pulumi.Output<outputs.SystemTableIntegrity | undefined>;
    public readonly tcp!: pulumi.Output<outputs.SystemTcp | undefined>;
    public readonly tcpStats!: pulumi.Output<outputs.SystemTcpStats | undefined>;
    public readonly tcpSynPerSec!: pulumi.Output<outputs.SystemTcpSynPerSec | undefined>;
    public readonly telemetryLog!: pulumi.Output<outputs.SystemTelemetryLog | undefined>;
    public readonly template!: pulumi.Output<outputs.SystemTemplate | undefined>;
    public readonly templateBind!: pulumi.Output<outputs.SystemTemplateBind | undefined>;
    public readonly throughput!: pulumi.Output<outputs.SystemThroughput | undefined>;
    public readonly timeoutValue!: pulumi.Output<outputs.SystemTimeoutValue | undefined>;
    public readonly tls13Mgmt!: pulumi.Output<outputs.SystemTls13Mgmt | undefined>;
    public readonly trunk!: pulumi.Output<outputs.SystemTrunk | undefined>;
    public readonly trunkHwHash!: pulumi.Output<outputs.SystemTrunkHwHash | undefined>;
    public readonly trunkXauiHwHash!: pulumi.Output<outputs.SystemTrunkXauiHwHash | undefined>;
    public readonly tso!: pulumi.Output<outputs.SystemTso | undefined>;
    public readonly upgradeStatus!: pulumi.Output<outputs.SystemUpgradeStatus | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;
    public readonly veMacScheme!: pulumi.Output<outputs.SystemVeMacScheme | undefined>;
    public readonly xauiDlbMode!: pulumi.Output<outputs.SystemXauiDlbMode | undefined>;

    /**
     * Create a System resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemArgs | SystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemState | undefined;
            resourceInputs["addCpuCore"] = state ? state.addCpuCore : undefined;
            resourceInputs["addPort"] = state ? state.addPort : undefined;
            resourceInputs["allVlanLimit"] = state ? state.allVlanLimit : undefined;
            resourceInputs["anomalyLog"] = state ? state.anomalyLog : undefined;
            resourceInputs["anomalyLogRateLimit"] = state ? state.anomalyLogRateLimit : undefined;
            resourceInputs["appPerformance"] = state ? state.appPerformance : undefined;
            resourceInputs["appsGlobal"] = state ? state.appsGlobal : undefined;
            resourceInputs["asicDebugDump"] = state ? state.asicDebugDump : undefined;
            resourceInputs["asicMmuFailSafe"] = state ? state.asicMmuFailSafe : undefined;
            resourceInputs["attackLog"] = state ? state.attackLog : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["bfd"] = state ? state.bfd : undefined;
            resourceInputs["classListHitcountEnable"] = state ? state.classListHitcountEnable : undefined;
            resourceInputs["cliMonitorInterval"] = state ? state.cliMonitorInterval : undefined;
            resourceInputs["cmUpdateFileNameRef"] = state ? state.cmUpdateFileNameRef : undefined;
            resourceInputs["controlCpu"] = state ? state.controlCpu : undefined;
            resourceInputs["core"] = state ? state.core : undefined;
            resourceInputs["cosqShow"] = state ? state.cosqShow : undefined;
            resourceInputs["cosqStats"] = state ? state.cosqStats : undefined;
            resourceInputs["counterLibAccounting"] = state ? state.counterLibAccounting : undefined;
            resourceInputs["cpuHyperThread"] = state ? state.cpuHyperThread : undefined;
            resourceInputs["cpuList"] = state ? state.cpuList : undefined;
            resourceInputs["cpuLoadSharing"] = state ? state.cpuLoadSharing : undefined;
            resourceInputs["cpuMap"] = state ? state.cpuMap : undefined;
            resourceInputs["cpuPacketPrioSupport"] = state ? state.cpuPacketPrioSupport : undefined;
            resourceInputs["dataCpu"] = state ? state.dataCpu : undefined;
            resourceInputs["ddosAttack"] = state ? state.ddosAttack : undefined;
            resourceInputs["ddosLog"] = state ? state.ddosLog : undefined;
            resourceInputs["defaultMtu"] = state ? state.defaultMtu : undefined;
            resourceInputs["delPort"] = state ? state.delPort : undefined;
            resourceInputs["deleteCpuCore"] = state ? state.deleteCpuCore : undefined;
            resourceInputs["dns"] = state ? state.dns : undefined;
            resourceInputs["dnsCache"] = state ? state.dnsCache : undefined;
            resourceInputs["domainListHitcountEnable"] = state ? state.domainListHitcountEnable : undefined;
            resourceInputs["domainListInfo"] = state ? state.domainListInfo : undefined;
            resourceInputs["dpdkStats"] = state ? state.dpdkStats : undefined;
            resourceInputs["dropLinuxClosedPortSyn"] = state ? state.dropLinuxClosedPortSyn : undefined;
            resourceInputs["dynamicServiceDnsSocketPool"] = state ? state.dynamicServiceDnsSocketPool : undefined;
            resourceInputs["enablePassword"] = state ? state.enablePassword : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["extOnlyLogging"] = state ? state.extOnlyLogging : undefined;
            resourceInputs["fpgaCoreCrc"] = state ? state.fpgaCoreCrc : undefined;
            resourceInputs["fpgaDrop"] = state ? state.fpgaDrop : undefined;
            resourceInputs["fw"] = state ? state.fw : undefined;
            resourceInputs["geoDbHitcountEnable"] = state ? state.geoDbHitcountEnable : undefined;
            resourceInputs["geoLocation"] = state ? state.geoLocation : undefined;
            resourceInputs["geoloc"] = state ? state.geoloc : undefined;
            resourceInputs["geolocListLists"] = state ? state.geolocListLists : undefined;
            resourceInputs["geolocNameHelper"] = state ? state.geolocNameHelper : undefined;
            resourceInputs["geolocationFile"] = state ? state.geolocationFile : undefined;
            resourceInputs["glid"] = state ? state.glid : undefined;
            resourceInputs["guestFile"] = state ? state.guestFile : undefined;
            resourceInputs["guiImageList"] = state ? state.guiImageList : undefined;
            resourceInputs["hardware"] = state ? state.hardware : undefined;
            resourceInputs["hardwareAccelerate"] = state ? state.hardwareAccelerate : undefined;
            resourceInputs["healthCheckLists"] = state ? state.healthCheckLists : undefined;
            resourceInputs["highMemoryL4Session"] = state ? state.highMemoryL4Session : undefined;
            resourceInputs["hrxqStatus"] = state ? state.hrxqStatus : undefined;
            resourceInputs["hwBlockingEnable"] = state ? state.hwBlockingEnable : undefined;
            resourceInputs["icmp"] = state ? state.icmp : undefined;
            resourceInputs["icmp6"] = state ? state.icmp6 : undefined;
            resourceInputs["icmpRate"] = state ? state.icmpRate : undefined;
            resourceInputs["inuseCpuList"] = state ? state.inuseCpuList : undefined;
            resourceInputs["inusePortList"] = state ? state.inusePortList : undefined;
            resourceInputs["ioCpu"] = state ? state.ioCpu : undefined;
            resourceInputs["ip6Stats"] = state ? state.ip6Stats : undefined;
            resourceInputs["ipDnsCache"] = state ? state.ipDnsCache : undefined;
            resourceInputs["ipStats"] = state ? state.ipStats : undefined;
            resourceInputs["ipThreatList"] = state ? state.ipThreatList : undefined;
            resourceInputs["ipmi"] = state ? state.ipmi : undefined;
            resourceInputs["ipmiService"] = state ? state.ipmiService : undefined;
            resourceInputs["ipsec"] = state ? state.ipsec : undefined;
            resourceInputs["ipv6PrefixLength"] = state ? state.ipv6PrefixLength : undefined;
            resourceInputs["jobOffload"] = state ? state.jobOffload : undefined;
            resourceInputs["linkCapability"] = state ? state.linkCapability : undefined;
            resourceInputs["linkMonitor"] = state ? state.linkMonitor : undefined;
            resourceInputs["lro"] = state ? state.lro : undefined;
            resourceInputs["managementInterfaceMode"] = state ? state.managementInterfaceMode : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["memoryBlockDebug"] = state ? state.memoryBlockDebug : undefined;
            resourceInputs["mfaAuth"] = state ? state.mfaAuth : undefined;
            resourceInputs["mfaCertStore"] = state ? state.mfaCertStore : undefined;
            resourceInputs["mfaManagement"] = state ? state.mfaManagement : undefined;
            resourceInputs["mfaValidationType"] = state ? state.mfaValidationType : undefined;
            resourceInputs["mgmtPort"] = state ? state.mgmtPort : undefined;
            resourceInputs["modifyPort"] = state ? state.modifyPort : undefined;
            resourceInputs["moduleCtrlCpu"] = state ? state.moduleCtrlCpu : undefined;
            resourceInputs["monTemplate"] = state ? state.monTemplate : undefined;
            resourceInputs["multiQueueSupport"] = state ? state.multiQueueSupport : undefined;
            resourceInputs["ndiscRa"] = state ? state.ndiscRa : undefined;
            resourceInputs["netvscMonitor"] = state ? state.netvscMonitor : undefined;
            resourceInputs["nsmA10lb"] = state ? state.nsmA10lb : undefined;
            resourceInputs["passwordPolicy"] = state ? state.passwordPolicy : undefined;
            resourceInputs["pathLists"] = state ? state.pathLists : undefined;
            resourceInputs["pbslb"] = state ? state.pbslb : undefined;
            resourceInputs["perVlanLimit"] = state ? state.perVlanLimit : undefined;
            resourceInputs["platformtype"] = state ? state.platformtype : undefined;
            resourceInputs["portCount"] = state ? state.portCount : undefined;
            resourceInputs["portInfo"] = state ? state.portInfo : undefined;
            resourceInputs["portList"] = state ? state.portList : undefined;
            resourceInputs["ports"] = state ? state.ports : undefined;
            resourceInputs["powerOnSelfTest"] = state ? state.powerOnSelfTest : undefined;
            resourceInputs["probeNetworkDevices"] = state ? state.probeNetworkDevices : undefined;
            resourceInputs["promiscuousMode"] = state ? state.promiscuousMode : undefined;
            resourceInputs["psuInfo"] = state ? state.psuInfo : undefined;
            resourceInputs["qInQ"] = state ? state.qInQ : undefined;
            resourceInputs["queuingBuffer"] = state ? state.queuingBuffer : undefined;
            resourceInputs["radius"] = state ? state.radius : undefined;
            resourceInputs["reboot"] = state ? state.reboot : undefined;
            resourceInputs["resourceAccounting"] = state ? state.resourceAccounting : undefined;
            resourceInputs["resourceUsage"] = state ? state.resourceUsage : undefined;
            resourceInputs["session"] = state ? state.session : undefined;
            resourceInputs["sessionReclaimLimit"] = state ? state.sessionReclaimLimit : undefined;
            resourceInputs["setRxtxDescSize"] = state ? state.setRxtxDescSize : undefined;
            resourceInputs["setRxtxQueue"] = state ? state.setRxtxQueue : undefined;
            resourceInputs["setTcpSynPerSec"] = state ? state.setTcpSynPerSec : undefined;
            resourceInputs["sharedPollMode"] = state ? state.sharedPollMode : undefined;
            resourceInputs["shellPrivileges"] = state ? state.shellPrivileges : undefined;
            resourceInputs["shmLogging"] = state ? state.shmLogging : undefined;
            resourceInputs["shutdown"] = state ? state.shutdown : undefined;
            resourceInputs["sockstressDisable"] = state ? state.sockstressDisable : undefined;
            resourceInputs["speProfile"] = state ? state.speProfile : undefined;
            resourceInputs["speStatus"] = state ? state.speStatus : undefined;
            resourceInputs["srcIpHashEnable"] = state ? state.srcIpHashEnable : undefined;
            resourceInputs["sslReqQ"] = state ? state.sslReqQ : undefined;
            resourceInputs["sslScv"] = state ? state.sslScv : undefined;
            resourceInputs["sslScvVerifyCrlSign"] = state ? state.sslScvVerifyCrlSign : undefined;
            resourceInputs["sslScvVerifyHost"] = state ? state.sslScvVerifyHost : undefined;
            resourceInputs["sslSetCompatibleCipher"] = state ? state.sslSetCompatibleCipher : undefined;
            resourceInputs["sslStatus"] = state ? state.sslStatus : undefined;
            resourceInputs["syslogTimeMsec"] = state ? state.syslogTimeMsec : undefined;
            resourceInputs["systemChassisPortSplitEnable"] = state ? state.systemChassisPortSplitEnable : undefined;
            resourceInputs["tableIntegrity"] = state ? state.tableIntegrity : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["tcpStats"] = state ? state.tcpStats : undefined;
            resourceInputs["tcpSynPerSec"] = state ? state.tcpSynPerSec : undefined;
            resourceInputs["telemetryLog"] = state ? state.telemetryLog : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["templateBind"] = state ? state.templateBind : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
            resourceInputs["timeoutValue"] = state ? state.timeoutValue : undefined;
            resourceInputs["tls13Mgmt"] = state ? state.tls13Mgmt : undefined;
            resourceInputs["trunk"] = state ? state.trunk : undefined;
            resourceInputs["trunkHwHash"] = state ? state.trunkHwHash : undefined;
            resourceInputs["trunkXauiHwHash"] = state ? state.trunkXauiHwHash : undefined;
            resourceInputs["tso"] = state ? state.tso : undefined;
            resourceInputs["upgradeStatus"] = state ? state.upgradeStatus : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["veMacScheme"] = state ? state.veMacScheme : undefined;
            resourceInputs["xauiDlbMode"] = state ? state.xauiDlbMode : undefined;
        } else {
            const args = argsOrState as SystemArgs | undefined;
            resourceInputs["addCpuCore"] = args ? args.addCpuCore : undefined;
            resourceInputs["addPort"] = args ? args.addPort : undefined;
            resourceInputs["allVlanLimit"] = args ? args.allVlanLimit : undefined;
            resourceInputs["anomalyLog"] = args ? args.anomalyLog : undefined;
            resourceInputs["anomalyLogRateLimit"] = args ? args.anomalyLogRateLimit : undefined;
            resourceInputs["appPerformance"] = args ? args.appPerformance : undefined;
            resourceInputs["appsGlobal"] = args ? args.appsGlobal : undefined;
            resourceInputs["asicDebugDump"] = args ? args.asicDebugDump : undefined;
            resourceInputs["asicMmuFailSafe"] = args ? args.asicMmuFailSafe : undefined;
            resourceInputs["attackLog"] = args ? args.attackLog : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["bfd"] = args ? args.bfd : undefined;
            resourceInputs["classListHitcountEnable"] = args ? args.classListHitcountEnable : undefined;
            resourceInputs["cliMonitorInterval"] = args ? args.cliMonitorInterval : undefined;
            resourceInputs["cmUpdateFileNameRef"] = args ? args.cmUpdateFileNameRef : undefined;
            resourceInputs["controlCpu"] = args ? args.controlCpu : undefined;
            resourceInputs["core"] = args ? args.core : undefined;
            resourceInputs["cosqShow"] = args ? args.cosqShow : undefined;
            resourceInputs["cosqStats"] = args ? args.cosqStats : undefined;
            resourceInputs["counterLibAccounting"] = args ? args.counterLibAccounting : undefined;
            resourceInputs["cpuHyperThread"] = args ? args.cpuHyperThread : undefined;
            resourceInputs["cpuList"] = args ? args.cpuList : undefined;
            resourceInputs["cpuLoadSharing"] = args ? args.cpuLoadSharing : undefined;
            resourceInputs["cpuMap"] = args ? args.cpuMap : undefined;
            resourceInputs["cpuPacketPrioSupport"] = args ? args.cpuPacketPrioSupport : undefined;
            resourceInputs["dataCpu"] = args ? args.dataCpu : undefined;
            resourceInputs["ddosAttack"] = args ? args.ddosAttack : undefined;
            resourceInputs["ddosLog"] = args ? args.ddosLog : undefined;
            resourceInputs["defaultMtu"] = args ? args.defaultMtu : undefined;
            resourceInputs["delPort"] = args ? args.delPort : undefined;
            resourceInputs["deleteCpuCore"] = args ? args.deleteCpuCore : undefined;
            resourceInputs["dns"] = args ? args.dns : undefined;
            resourceInputs["dnsCache"] = args ? args.dnsCache : undefined;
            resourceInputs["domainListHitcountEnable"] = args ? args.domainListHitcountEnable : undefined;
            resourceInputs["domainListInfo"] = args ? args.domainListInfo : undefined;
            resourceInputs["dpdkStats"] = args ? args.dpdkStats : undefined;
            resourceInputs["dropLinuxClosedPortSyn"] = args ? args.dropLinuxClosedPortSyn : undefined;
            resourceInputs["dynamicServiceDnsSocketPool"] = args ? args.dynamicServiceDnsSocketPool : undefined;
            resourceInputs["enablePassword"] = args ? args.enablePassword : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["extOnlyLogging"] = args ? args.extOnlyLogging : undefined;
            resourceInputs["fpgaCoreCrc"] = args ? args.fpgaCoreCrc : undefined;
            resourceInputs["fpgaDrop"] = args ? args.fpgaDrop : undefined;
            resourceInputs["fw"] = args ? args.fw : undefined;
            resourceInputs["geoDbHitcountEnable"] = args ? args.geoDbHitcountEnable : undefined;
            resourceInputs["geoLocation"] = args ? args.geoLocation : undefined;
            resourceInputs["geoloc"] = args ? args.geoloc : undefined;
            resourceInputs["geolocListLists"] = args ? args.geolocListLists : undefined;
            resourceInputs["geolocNameHelper"] = args ? args.geolocNameHelper : undefined;
            resourceInputs["geolocationFile"] = args ? args.geolocationFile : undefined;
            resourceInputs["glid"] = args ? args.glid : undefined;
            resourceInputs["guestFile"] = args ? args.guestFile : undefined;
            resourceInputs["guiImageList"] = args ? args.guiImageList : undefined;
            resourceInputs["hardware"] = args ? args.hardware : undefined;
            resourceInputs["hardwareAccelerate"] = args ? args.hardwareAccelerate : undefined;
            resourceInputs["healthCheckLists"] = args ? args.healthCheckLists : undefined;
            resourceInputs["highMemoryL4Session"] = args ? args.highMemoryL4Session : undefined;
            resourceInputs["hrxqStatus"] = args ? args.hrxqStatus : undefined;
            resourceInputs["hwBlockingEnable"] = args ? args.hwBlockingEnable : undefined;
            resourceInputs["icmp"] = args ? args.icmp : undefined;
            resourceInputs["icmp6"] = args ? args.icmp6 : undefined;
            resourceInputs["icmpRate"] = args ? args.icmpRate : undefined;
            resourceInputs["inuseCpuList"] = args ? args.inuseCpuList : undefined;
            resourceInputs["inusePortList"] = args ? args.inusePortList : undefined;
            resourceInputs["ioCpu"] = args ? args.ioCpu : undefined;
            resourceInputs["ip6Stats"] = args ? args.ip6Stats : undefined;
            resourceInputs["ipDnsCache"] = args ? args.ipDnsCache : undefined;
            resourceInputs["ipStats"] = args ? args.ipStats : undefined;
            resourceInputs["ipThreatList"] = args ? args.ipThreatList : undefined;
            resourceInputs["ipmi"] = args ? args.ipmi : undefined;
            resourceInputs["ipmiService"] = args ? args.ipmiService : undefined;
            resourceInputs["ipsec"] = args ? args.ipsec : undefined;
            resourceInputs["ipv6PrefixLength"] = args ? args.ipv6PrefixLength : undefined;
            resourceInputs["jobOffload"] = args ? args.jobOffload : undefined;
            resourceInputs["linkCapability"] = args ? args.linkCapability : undefined;
            resourceInputs["linkMonitor"] = args ? args.linkMonitor : undefined;
            resourceInputs["lro"] = args ? args.lro : undefined;
            resourceInputs["managementInterfaceMode"] = args ? args.managementInterfaceMode : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["memoryBlockDebug"] = args ? args.memoryBlockDebug : undefined;
            resourceInputs["mfaAuth"] = args ? args.mfaAuth : undefined;
            resourceInputs["mfaCertStore"] = args ? args.mfaCertStore : undefined;
            resourceInputs["mfaManagement"] = args ? args.mfaManagement : undefined;
            resourceInputs["mfaValidationType"] = args ? args.mfaValidationType : undefined;
            resourceInputs["mgmtPort"] = args ? args.mgmtPort : undefined;
            resourceInputs["modifyPort"] = args ? args.modifyPort : undefined;
            resourceInputs["moduleCtrlCpu"] = args ? args.moduleCtrlCpu : undefined;
            resourceInputs["monTemplate"] = args ? args.monTemplate : undefined;
            resourceInputs["multiQueueSupport"] = args ? args.multiQueueSupport : undefined;
            resourceInputs["ndiscRa"] = args ? args.ndiscRa : undefined;
            resourceInputs["netvscMonitor"] = args ? args.netvscMonitor : undefined;
            resourceInputs["nsmA10lb"] = args ? args.nsmA10lb : undefined;
            resourceInputs["passwordPolicy"] = args ? args.passwordPolicy : undefined;
            resourceInputs["pathLists"] = args ? args.pathLists : undefined;
            resourceInputs["pbslb"] = args ? args.pbslb : undefined;
            resourceInputs["perVlanLimit"] = args ? args.perVlanLimit : undefined;
            resourceInputs["platformtype"] = args ? args.platformtype : undefined;
            resourceInputs["portCount"] = args ? args.portCount : undefined;
            resourceInputs["portInfo"] = args ? args.portInfo : undefined;
            resourceInputs["portList"] = args ? args.portList : undefined;
            resourceInputs["ports"] = args ? args.ports : undefined;
            resourceInputs["powerOnSelfTest"] = args ? args.powerOnSelfTest : undefined;
            resourceInputs["probeNetworkDevices"] = args ? args.probeNetworkDevices : undefined;
            resourceInputs["promiscuousMode"] = args ? args.promiscuousMode : undefined;
            resourceInputs["psuInfo"] = args ? args.psuInfo : undefined;
            resourceInputs["qInQ"] = args ? args.qInQ : undefined;
            resourceInputs["queuingBuffer"] = args ? args.queuingBuffer : undefined;
            resourceInputs["radius"] = args ? args.radius : undefined;
            resourceInputs["reboot"] = args ? args.reboot : undefined;
            resourceInputs["resourceAccounting"] = args ? args.resourceAccounting : undefined;
            resourceInputs["resourceUsage"] = args ? args.resourceUsage : undefined;
            resourceInputs["session"] = args ? args.session : undefined;
            resourceInputs["sessionReclaimLimit"] = args ? args.sessionReclaimLimit : undefined;
            resourceInputs["setRxtxDescSize"] = args ? args.setRxtxDescSize : undefined;
            resourceInputs["setRxtxQueue"] = args ? args.setRxtxQueue : undefined;
            resourceInputs["setTcpSynPerSec"] = args ? args.setTcpSynPerSec : undefined;
            resourceInputs["sharedPollMode"] = args ? args.sharedPollMode : undefined;
            resourceInputs["shellPrivileges"] = args ? args.shellPrivileges : undefined;
            resourceInputs["shmLogging"] = args ? args.shmLogging : undefined;
            resourceInputs["shutdown"] = args ? args.shutdown : undefined;
            resourceInputs["sockstressDisable"] = args ? args.sockstressDisable : undefined;
            resourceInputs["speProfile"] = args ? args.speProfile : undefined;
            resourceInputs["speStatus"] = args ? args.speStatus : undefined;
            resourceInputs["srcIpHashEnable"] = args ? args.srcIpHashEnable : undefined;
            resourceInputs["sslReqQ"] = args ? args.sslReqQ : undefined;
            resourceInputs["sslScv"] = args ? args.sslScv : undefined;
            resourceInputs["sslScvVerifyCrlSign"] = args ? args.sslScvVerifyCrlSign : undefined;
            resourceInputs["sslScvVerifyHost"] = args ? args.sslScvVerifyHost : undefined;
            resourceInputs["sslSetCompatibleCipher"] = args ? args.sslSetCompatibleCipher : undefined;
            resourceInputs["sslStatus"] = args ? args.sslStatus : undefined;
            resourceInputs["syslogTimeMsec"] = args ? args.syslogTimeMsec : undefined;
            resourceInputs["systemChassisPortSplitEnable"] = args ? args.systemChassisPortSplitEnable : undefined;
            resourceInputs["tableIntegrity"] = args ? args.tableIntegrity : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["tcpStats"] = args ? args.tcpStats : undefined;
            resourceInputs["tcpSynPerSec"] = args ? args.tcpSynPerSec : undefined;
            resourceInputs["telemetryLog"] = args ? args.telemetryLog : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["templateBind"] = args ? args.templateBind : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["timeoutValue"] = args ? args.timeoutValue : undefined;
            resourceInputs["tls13Mgmt"] = args ? args.tls13Mgmt : undefined;
            resourceInputs["trunk"] = args ? args.trunk : undefined;
            resourceInputs["trunkHwHash"] = args ? args.trunkHwHash : undefined;
            resourceInputs["trunkXauiHwHash"] = args ? args.trunkXauiHwHash : undefined;
            resourceInputs["tso"] = args ? args.tso : undefined;
            resourceInputs["upgradeStatus"] = args ? args.upgradeStatus : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["veMacScheme"] = args ? args.veMacScheme : undefined;
            resourceInputs["xauiDlbMode"] = args ? args.xauiDlbMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(System.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering System resources.
 */
export interface SystemState {
    addCpuCore?: pulumi.Input<inputs.SystemAddCpuCore>;
    addPort?: pulumi.Input<inputs.SystemAddPort>;
    allVlanLimit?: pulumi.Input<inputs.SystemAllVlanLimit>;
    /**
     * log system anomalies
     */
    anomalyLog?: pulumi.Input<number>;
    /**
     * Anomaly log rate-limit per second, default 32
     */
    anomalyLogRateLimit?: pulumi.Input<number>;
    appPerformance?: pulumi.Input<inputs.SystemAppPerformance>;
    appsGlobal?: pulumi.Input<inputs.SystemAppsGlobal>;
    asicDebugDump?: pulumi.Input<inputs.SystemAsicDebugDump>;
    asicMmuFailSafe?: pulumi.Input<inputs.SystemAsicMmuFailSafe>;
    /**
     * log attack anomalies
     */
    attackLog?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<inputs.SystemBandwidth>;
    bfd?: pulumi.Input<inputs.SystemBfd>;
    /**
     * Enable class list hit count
     */
    classListHitcountEnable?: pulumi.Input<number>;
    cliMonitorInterval?: pulumi.Input<inputs.SystemCliMonitorInterval>;
    cmUpdateFileNameRef?: pulumi.Input<inputs.SystemCmUpdateFileNameRef>;
    controlCpu?: pulumi.Input<inputs.SystemControlCpu>;
    core?: pulumi.Input<inputs.SystemCore>;
    cosqShow?: pulumi.Input<inputs.SystemCosqShow>;
    cosqStats?: pulumi.Input<inputs.SystemCosqStats>;
    counterLibAccounting?: pulumi.Input<inputs.SystemCounterLibAccounting>;
    cpuHyperThread?: pulumi.Input<inputs.SystemCpuHyperThread>;
    cpuList?: pulumi.Input<inputs.SystemCpuList>;
    cpuLoadSharing?: pulumi.Input<inputs.SystemCpuLoadSharing>;
    cpuMap?: pulumi.Input<inputs.SystemCpuMap>;
    cpuPacketPrioSupport?: pulumi.Input<inputs.SystemCpuPacketPrioSupport>;
    dataCpu?: pulumi.Input<inputs.SystemDataCpu>;
    /**
     * System DDoS Attack
     */
    ddosAttack?: pulumi.Input<number>;
    /**
     * log DDoS attack anomalies
     */
    ddosLog?: pulumi.Input<number>;
    /**
     * Set all interfaces default mtu (Interface MTU, default 1 (System jumbo needs to be enabled))
     */
    defaultMtu?: pulumi.Input<number>;
    delPort?: pulumi.Input<inputs.SystemDelPort>;
    deleteCpuCore?: pulumi.Input<inputs.SystemDeleteCpuCore>;
    dns?: pulumi.Input<inputs.SystemDns>;
    dnsCache?: pulumi.Input<inputs.SystemDnsCache>;
    /**
     * Enable class list hit count
     */
    domainListHitcountEnable?: pulumi.Input<number>;
    domainListInfo?: pulumi.Input<inputs.SystemDomainListInfo>;
    dpdkStats?: pulumi.Input<inputs.SystemDpdkStats>;
    /**
     * 'enable': enable (default); 'disable': disable;
     */
    dropLinuxClosedPortSyn?: pulumi.Input<string>;
    /**
     * Enable socket pool for dynamic-service DNS
     */
    dynamicServiceDnsSocketPool?: pulumi.Input<number>;
    enablePassword?: pulumi.Input<inputs.SystemEnablePassword>;
    environment?: pulumi.Input<inputs.SystemEnvironment>;
    extOnlyLogging?: pulumi.Input<inputs.SystemExtOnlyLogging>;
    fpgaCoreCrc?: pulumi.Input<inputs.SystemFpgaCoreCrc>;
    fpgaDrop?: pulumi.Input<inputs.SystemFpgaDrop>;
    fw?: pulumi.Input<inputs.SystemFw>;
    /**
     * Enable Geolocation database hit count
     */
    geoDbHitcountEnable?: pulumi.Input<number>;
    geoLocation?: pulumi.Input<inputs.SystemGeoLocation>;
    geoloc?: pulumi.Input<inputs.SystemGeoloc>;
    geolocListLists?: pulumi.Input<pulumi.Input<inputs.SystemGeolocListList>[]>;
    geolocNameHelper?: pulumi.Input<inputs.SystemGeolocNameHelper>;
    geolocationFile?: pulumi.Input<inputs.SystemGeolocationFile>;
    glid?: pulumi.Input<inputs.SystemGlid>;
    guestFile?: pulumi.Input<inputs.SystemGuestFile>;
    guiImageList?: pulumi.Input<inputs.SystemGuiImageList>;
    hardware?: pulumi.Input<inputs.SystemHardware>;
    hardwareAccelerate?: pulumi.Input<inputs.SystemHardwareAccelerate>;
    healthCheckLists?: pulumi.Input<pulumi.Input<inputs.SystemHealthCheckList>[]>;
    highMemoryL4Session?: pulumi.Input<inputs.SystemHighMemoryL4Session>;
    hrxqStatus?: pulumi.Input<inputs.SystemHrxqStatus>;
    /**
     * Enable system hardware blocking (default disabled)
     */
    hwBlockingEnable?: pulumi.Input<number>;
    icmp?: pulumi.Input<inputs.SystemIcmp>;
    icmp6?: pulumi.Input<inputs.SystemIcmp6>;
    icmpRate?: pulumi.Input<inputs.SystemIcmpRate>;
    inuseCpuList?: pulumi.Input<inputs.SystemInuseCpuList>;
    inusePortList?: pulumi.Input<inputs.SystemInusePortList>;
    ioCpu?: pulumi.Input<inputs.SystemIoCpu>;
    ip6Stats?: pulumi.Input<inputs.SystemIp6Stats>;
    ipDnsCache?: pulumi.Input<inputs.SystemIpDnsCache>;
    ipStats?: pulumi.Input<inputs.SystemIpStats>;
    ipThreatList?: pulumi.Input<inputs.SystemIpThreatList>;
    ipmi?: pulumi.Input<inputs.SystemIpmi>;
    ipmiService?: pulumi.Input<inputs.SystemIpmiService>;
    ipsec?: pulumi.Input<inputs.SystemIpsec>;
    /**
     * Length of IPv6 prefix used to determine the user-group and the PU, by default 128
     */
    ipv6PrefixLength?: pulumi.Input<number>;
    jobOffload?: pulumi.Input<inputs.SystemJobOffload>;
    linkCapability?: pulumi.Input<inputs.SystemLinkCapability>;
    linkMonitor?: pulumi.Input<inputs.SystemLinkMonitor>;
    lro?: pulumi.Input<inputs.SystemLro>;
    managementInterfaceMode?: pulumi.Input<inputs.SystemManagementInterfaceMode>;
    memory?: pulumi.Input<inputs.SystemMemory>;
    memoryBlockDebug?: pulumi.Input<inputs.SystemMemoryBlockDebug>;
    mfaAuth?: pulumi.Input<inputs.SystemMfaAuth>;
    mfaCertStore?: pulumi.Input<inputs.SystemMfaCertStore>;
    mfaManagement?: pulumi.Input<inputs.SystemMfaManagement>;
    mfaValidationType?: pulumi.Input<inputs.SystemMfaValidationType>;
    mgmtPort?: pulumi.Input<inputs.SystemMgmtPort>;
    modifyPort?: pulumi.Input<inputs.SystemModifyPort>;
    /**
     * 'high': high cpu usage; 'low': low cpu usage; 'medium': medium cpu usage;
     */
    moduleCtrlCpu?: pulumi.Input<string>;
    monTemplate?: pulumi.Input<inputs.SystemMonTemplate>;
    multiQueueSupport?: pulumi.Input<inputs.SystemMultiQueueSupport>;
    ndiscRa?: pulumi.Input<inputs.SystemNdiscRa>;
    netvscMonitor?: pulumi.Input<inputs.SystemNetvscMonitor>;
    nsmA10lb?: pulumi.Input<inputs.SystemNsmA10lb>;
    passwordPolicy?: pulumi.Input<inputs.SystemPasswordPolicy>;
    pathLists?: pulumi.Input<pulumi.Input<inputs.SystemPathList>[]>;
    pbslb?: pulumi.Input<inputs.SystemPbslb>;
    perVlanLimit?: pulumi.Input<inputs.SystemPerVlanLimit>;
    platformtype?: pulumi.Input<inputs.SystemPlatformtype>;
    portCount?: pulumi.Input<inputs.SystemPortCount>;
    portInfo?: pulumi.Input<inputs.SystemPortInfo>;
    portList?: pulumi.Input<inputs.SystemPortList>;
    ports?: pulumi.Input<inputs.SystemPorts>;
    powerOnSelfTest?: pulumi.Input<inputs.SystemPowerOnSelfTest>;
    probeNetworkDevices?: pulumi.Input<inputs.SystemProbeNetworkDevices>;
    /**
     * Run in promiscous mode settings
     */
    promiscuousMode?: pulumi.Input<number>;
    psuInfo?: pulumi.Input<inputs.SystemPsuInfo>;
    qInQ?: pulumi.Input<inputs.SystemQInQ>;
    queuingBuffer?: pulumi.Input<inputs.SystemQueuingBuffer>;
    radius?: pulumi.Input<inputs.SystemRadius>;
    reboot?: pulumi.Input<inputs.SystemReboot>;
    resourceAccounting?: pulumi.Input<inputs.SystemResourceAccounting>;
    resourceUsage?: pulumi.Input<inputs.SystemResourceUsage>;
    session?: pulumi.Input<inputs.SystemSession>;
    sessionReclaimLimit?: pulumi.Input<inputs.SystemSessionReclaimLimit>;
    setRxtxDescSize?: pulumi.Input<inputs.SystemSetRxtxDescSize>;
    setRxtxQueue?: pulumi.Input<inputs.SystemSetRxtxQueue>;
    setTcpSynPerSec?: pulumi.Input<inputs.SystemSetTcpSynPerSec>;
    sharedPollMode?: pulumi.Input<inputs.SystemSharedPollMode>;
    shellPrivileges?: pulumi.Input<inputs.SystemShellPrivileges>;
    shmLogging?: pulumi.Input<inputs.SystemShmLogging>;
    shutdown?: pulumi.Input<inputs.SystemShutdown>;
    /**
     * Disable sockstress protection
     */
    sockstressDisable?: pulumi.Input<number>;
    speProfile?: pulumi.Input<inputs.SystemSpeProfile>;
    speStatus?: pulumi.Input<inputs.SystemSpeStatus>;
    /**
     * Enable source ip hash
     */
    srcIpHashEnable?: pulumi.Input<number>;
    sslReqQ?: pulumi.Input<inputs.SystemSslReqQ>;
    sslScv?: pulumi.Input<inputs.SystemSslScv>;
    sslScvVerifyCrlSign?: pulumi.Input<inputs.SystemSslScvVerifyCrlSign>;
    sslScvVerifyHost?: pulumi.Input<inputs.SystemSslScvVerifyHost>;
    sslSetCompatibleCipher?: pulumi.Input<inputs.SystemSslSetCompatibleCipher>;
    sslStatus?: pulumi.Input<inputs.SystemSslStatus>;
    syslogTimeMsec?: pulumi.Input<inputs.SystemSyslogTimeMsec>;
    /**
     * Enable port split for the chassis
     */
    systemChassisPortSplitEnable?: pulumi.Input<number>;
    tableIntegrity?: pulumi.Input<inputs.SystemTableIntegrity>;
    tcp?: pulumi.Input<inputs.SystemTcp>;
    tcpStats?: pulumi.Input<inputs.SystemTcpStats>;
    tcpSynPerSec?: pulumi.Input<inputs.SystemTcpSynPerSec>;
    telemetryLog?: pulumi.Input<inputs.SystemTelemetryLog>;
    template?: pulumi.Input<inputs.SystemTemplate>;
    templateBind?: pulumi.Input<inputs.SystemTemplateBind>;
    throughput?: pulumi.Input<inputs.SystemThroughput>;
    timeoutValue?: pulumi.Input<inputs.SystemTimeoutValue>;
    tls13Mgmt?: pulumi.Input<inputs.SystemTls13Mgmt>;
    trunk?: pulumi.Input<inputs.SystemTrunk>;
    trunkHwHash?: pulumi.Input<inputs.SystemTrunkHwHash>;
    trunkXauiHwHash?: pulumi.Input<inputs.SystemTrunkXauiHwHash>;
    tso?: pulumi.Input<inputs.SystemTso>;
    upgradeStatus?: pulumi.Input<inputs.SystemUpgradeStatus>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    veMacScheme?: pulumi.Input<inputs.SystemVeMacScheme>;
    xauiDlbMode?: pulumi.Input<inputs.SystemXauiDlbMode>;
}

/**
 * The set of arguments for constructing a System resource.
 */
export interface SystemArgs {
    addCpuCore?: pulumi.Input<inputs.SystemAddCpuCore>;
    addPort?: pulumi.Input<inputs.SystemAddPort>;
    allVlanLimit?: pulumi.Input<inputs.SystemAllVlanLimit>;
    /**
     * log system anomalies
     */
    anomalyLog?: pulumi.Input<number>;
    /**
     * Anomaly log rate-limit per second, default 32
     */
    anomalyLogRateLimit?: pulumi.Input<number>;
    appPerformance?: pulumi.Input<inputs.SystemAppPerformance>;
    appsGlobal?: pulumi.Input<inputs.SystemAppsGlobal>;
    asicDebugDump?: pulumi.Input<inputs.SystemAsicDebugDump>;
    asicMmuFailSafe?: pulumi.Input<inputs.SystemAsicMmuFailSafe>;
    /**
     * log attack anomalies
     */
    attackLog?: pulumi.Input<number>;
    bandwidth?: pulumi.Input<inputs.SystemBandwidth>;
    bfd?: pulumi.Input<inputs.SystemBfd>;
    /**
     * Enable class list hit count
     */
    classListHitcountEnable?: pulumi.Input<number>;
    cliMonitorInterval?: pulumi.Input<inputs.SystemCliMonitorInterval>;
    cmUpdateFileNameRef?: pulumi.Input<inputs.SystemCmUpdateFileNameRef>;
    controlCpu?: pulumi.Input<inputs.SystemControlCpu>;
    core?: pulumi.Input<inputs.SystemCore>;
    cosqShow?: pulumi.Input<inputs.SystemCosqShow>;
    cosqStats?: pulumi.Input<inputs.SystemCosqStats>;
    counterLibAccounting?: pulumi.Input<inputs.SystemCounterLibAccounting>;
    cpuHyperThread?: pulumi.Input<inputs.SystemCpuHyperThread>;
    cpuList?: pulumi.Input<inputs.SystemCpuList>;
    cpuLoadSharing?: pulumi.Input<inputs.SystemCpuLoadSharing>;
    cpuMap?: pulumi.Input<inputs.SystemCpuMap>;
    cpuPacketPrioSupport?: pulumi.Input<inputs.SystemCpuPacketPrioSupport>;
    dataCpu?: pulumi.Input<inputs.SystemDataCpu>;
    /**
     * System DDoS Attack
     */
    ddosAttack?: pulumi.Input<number>;
    /**
     * log DDoS attack anomalies
     */
    ddosLog?: pulumi.Input<number>;
    /**
     * Set all interfaces default mtu (Interface MTU, default 1 (System jumbo needs to be enabled))
     */
    defaultMtu?: pulumi.Input<number>;
    delPort?: pulumi.Input<inputs.SystemDelPort>;
    deleteCpuCore?: pulumi.Input<inputs.SystemDeleteCpuCore>;
    dns?: pulumi.Input<inputs.SystemDns>;
    dnsCache?: pulumi.Input<inputs.SystemDnsCache>;
    /**
     * Enable class list hit count
     */
    domainListHitcountEnable?: pulumi.Input<number>;
    domainListInfo?: pulumi.Input<inputs.SystemDomainListInfo>;
    dpdkStats?: pulumi.Input<inputs.SystemDpdkStats>;
    /**
     * 'enable': enable (default); 'disable': disable;
     */
    dropLinuxClosedPortSyn?: pulumi.Input<string>;
    /**
     * Enable socket pool for dynamic-service DNS
     */
    dynamicServiceDnsSocketPool?: pulumi.Input<number>;
    enablePassword?: pulumi.Input<inputs.SystemEnablePassword>;
    environment?: pulumi.Input<inputs.SystemEnvironment>;
    extOnlyLogging?: pulumi.Input<inputs.SystemExtOnlyLogging>;
    fpgaCoreCrc?: pulumi.Input<inputs.SystemFpgaCoreCrc>;
    fpgaDrop?: pulumi.Input<inputs.SystemFpgaDrop>;
    fw?: pulumi.Input<inputs.SystemFw>;
    /**
     * Enable Geolocation database hit count
     */
    geoDbHitcountEnable?: pulumi.Input<number>;
    geoLocation?: pulumi.Input<inputs.SystemGeoLocation>;
    geoloc?: pulumi.Input<inputs.SystemGeoloc>;
    geolocListLists?: pulumi.Input<pulumi.Input<inputs.SystemGeolocListList>[]>;
    geolocNameHelper?: pulumi.Input<inputs.SystemGeolocNameHelper>;
    geolocationFile?: pulumi.Input<inputs.SystemGeolocationFile>;
    glid?: pulumi.Input<inputs.SystemGlid>;
    guestFile?: pulumi.Input<inputs.SystemGuestFile>;
    guiImageList?: pulumi.Input<inputs.SystemGuiImageList>;
    hardware?: pulumi.Input<inputs.SystemHardware>;
    hardwareAccelerate?: pulumi.Input<inputs.SystemHardwareAccelerate>;
    healthCheckLists?: pulumi.Input<pulumi.Input<inputs.SystemHealthCheckList>[]>;
    highMemoryL4Session?: pulumi.Input<inputs.SystemHighMemoryL4Session>;
    hrxqStatus?: pulumi.Input<inputs.SystemHrxqStatus>;
    /**
     * Enable system hardware blocking (default disabled)
     */
    hwBlockingEnable?: pulumi.Input<number>;
    icmp?: pulumi.Input<inputs.SystemIcmp>;
    icmp6?: pulumi.Input<inputs.SystemIcmp6>;
    icmpRate?: pulumi.Input<inputs.SystemIcmpRate>;
    inuseCpuList?: pulumi.Input<inputs.SystemInuseCpuList>;
    inusePortList?: pulumi.Input<inputs.SystemInusePortList>;
    ioCpu?: pulumi.Input<inputs.SystemIoCpu>;
    ip6Stats?: pulumi.Input<inputs.SystemIp6Stats>;
    ipDnsCache?: pulumi.Input<inputs.SystemIpDnsCache>;
    ipStats?: pulumi.Input<inputs.SystemIpStats>;
    ipThreatList?: pulumi.Input<inputs.SystemIpThreatList>;
    ipmi?: pulumi.Input<inputs.SystemIpmi>;
    ipmiService?: pulumi.Input<inputs.SystemIpmiService>;
    ipsec?: pulumi.Input<inputs.SystemIpsec>;
    /**
     * Length of IPv6 prefix used to determine the user-group and the PU, by default 128
     */
    ipv6PrefixLength?: pulumi.Input<number>;
    jobOffload?: pulumi.Input<inputs.SystemJobOffload>;
    linkCapability?: pulumi.Input<inputs.SystemLinkCapability>;
    linkMonitor?: pulumi.Input<inputs.SystemLinkMonitor>;
    lro?: pulumi.Input<inputs.SystemLro>;
    managementInterfaceMode?: pulumi.Input<inputs.SystemManagementInterfaceMode>;
    memory?: pulumi.Input<inputs.SystemMemory>;
    memoryBlockDebug?: pulumi.Input<inputs.SystemMemoryBlockDebug>;
    mfaAuth?: pulumi.Input<inputs.SystemMfaAuth>;
    mfaCertStore?: pulumi.Input<inputs.SystemMfaCertStore>;
    mfaManagement?: pulumi.Input<inputs.SystemMfaManagement>;
    mfaValidationType?: pulumi.Input<inputs.SystemMfaValidationType>;
    mgmtPort?: pulumi.Input<inputs.SystemMgmtPort>;
    modifyPort?: pulumi.Input<inputs.SystemModifyPort>;
    /**
     * 'high': high cpu usage; 'low': low cpu usage; 'medium': medium cpu usage;
     */
    moduleCtrlCpu?: pulumi.Input<string>;
    monTemplate?: pulumi.Input<inputs.SystemMonTemplate>;
    multiQueueSupport?: pulumi.Input<inputs.SystemMultiQueueSupport>;
    ndiscRa?: pulumi.Input<inputs.SystemNdiscRa>;
    netvscMonitor?: pulumi.Input<inputs.SystemNetvscMonitor>;
    nsmA10lb?: pulumi.Input<inputs.SystemNsmA10lb>;
    passwordPolicy?: pulumi.Input<inputs.SystemPasswordPolicy>;
    pathLists?: pulumi.Input<pulumi.Input<inputs.SystemPathList>[]>;
    pbslb?: pulumi.Input<inputs.SystemPbslb>;
    perVlanLimit?: pulumi.Input<inputs.SystemPerVlanLimit>;
    platformtype?: pulumi.Input<inputs.SystemPlatformtype>;
    portCount?: pulumi.Input<inputs.SystemPortCount>;
    portInfo?: pulumi.Input<inputs.SystemPortInfo>;
    portList?: pulumi.Input<inputs.SystemPortList>;
    ports?: pulumi.Input<inputs.SystemPorts>;
    powerOnSelfTest?: pulumi.Input<inputs.SystemPowerOnSelfTest>;
    probeNetworkDevices?: pulumi.Input<inputs.SystemProbeNetworkDevices>;
    /**
     * Run in promiscous mode settings
     */
    promiscuousMode?: pulumi.Input<number>;
    psuInfo?: pulumi.Input<inputs.SystemPsuInfo>;
    qInQ?: pulumi.Input<inputs.SystemQInQ>;
    queuingBuffer?: pulumi.Input<inputs.SystemQueuingBuffer>;
    radius?: pulumi.Input<inputs.SystemRadius>;
    reboot?: pulumi.Input<inputs.SystemReboot>;
    resourceAccounting?: pulumi.Input<inputs.SystemResourceAccounting>;
    resourceUsage?: pulumi.Input<inputs.SystemResourceUsage>;
    session?: pulumi.Input<inputs.SystemSession>;
    sessionReclaimLimit?: pulumi.Input<inputs.SystemSessionReclaimLimit>;
    setRxtxDescSize?: pulumi.Input<inputs.SystemSetRxtxDescSize>;
    setRxtxQueue?: pulumi.Input<inputs.SystemSetRxtxQueue>;
    setTcpSynPerSec?: pulumi.Input<inputs.SystemSetTcpSynPerSec>;
    sharedPollMode?: pulumi.Input<inputs.SystemSharedPollMode>;
    shellPrivileges?: pulumi.Input<inputs.SystemShellPrivileges>;
    shmLogging?: pulumi.Input<inputs.SystemShmLogging>;
    shutdown?: pulumi.Input<inputs.SystemShutdown>;
    /**
     * Disable sockstress protection
     */
    sockstressDisable?: pulumi.Input<number>;
    speProfile?: pulumi.Input<inputs.SystemSpeProfile>;
    speStatus?: pulumi.Input<inputs.SystemSpeStatus>;
    /**
     * Enable source ip hash
     */
    srcIpHashEnable?: pulumi.Input<number>;
    sslReqQ?: pulumi.Input<inputs.SystemSslReqQ>;
    sslScv?: pulumi.Input<inputs.SystemSslScv>;
    sslScvVerifyCrlSign?: pulumi.Input<inputs.SystemSslScvVerifyCrlSign>;
    sslScvVerifyHost?: pulumi.Input<inputs.SystemSslScvVerifyHost>;
    sslSetCompatibleCipher?: pulumi.Input<inputs.SystemSslSetCompatibleCipher>;
    sslStatus?: pulumi.Input<inputs.SystemSslStatus>;
    syslogTimeMsec?: pulumi.Input<inputs.SystemSyslogTimeMsec>;
    /**
     * Enable port split for the chassis
     */
    systemChassisPortSplitEnable?: pulumi.Input<number>;
    tableIntegrity?: pulumi.Input<inputs.SystemTableIntegrity>;
    tcp?: pulumi.Input<inputs.SystemTcp>;
    tcpStats?: pulumi.Input<inputs.SystemTcpStats>;
    tcpSynPerSec?: pulumi.Input<inputs.SystemTcpSynPerSec>;
    telemetryLog?: pulumi.Input<inputs.SystemTelemetryLog>;
    template?: pulumi.Input<inputs.SystemTemplate>;
    templateBind?: pulumi.Input<inputs.SystemTemplateBind>;
    throughput?: pulumi.Input<inputs.SystemThroughput>;
    timeoutValue?: pulumi.Input<inputs.SystemTimeoutValue>;
    tls13Mgmt?: pulumi.Input<inputs.SystemTls13Mgmt>;
    trunk?: pulumi.Input<inputs.SystemTrunk>;
    trunkHwHash?: pulumi.Input<inputs.SystemTrunkHwHash>;
    trunkXauiHwHash?: pulumi.Input<inputs.SystemTrunkXauiHwHash>;
    tso?: pulumi.Input<inputs.SystemTso>;
    upgradeStatus?: pulumi.Input<inputs.SystemUpgradeStatus>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
    veMacScheme?: pulumi.Input<inputs.SystemVeMacScheme>;
    xauiDlbMode?: pulumi.Input<inputs.SystemXauiDlbMode>;
}
