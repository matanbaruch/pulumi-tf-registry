// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AdminLockout extends pulumi.CustomResource {
    /**
     * Get an existing AdminLockout resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminLockoutState, opts?: pulumi.CustomResourceOptions): AdminLockout {
        return new AdminLockout(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/adminLockout:AdminLockout';

    /**
     * Returns true if the given object is an instance of AdminLockout.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdminLockout {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdminLockout.__pulumiType;
    }

    /**
     * Admin user lockout duration, in minutes, by default 10 (Admin user lockout duration in minutes, 0 means forever)
     */
    public readonly duration!: pulumi.Output<number | undefined>;
    /**
     * Enable admin user lockout
     */
    public readonly enable!: pulumi.Output<number | undefined>;
    /**
     * After how long to reset the lockout counter, in minutes, by default 10 (Time in minutes after which to reset the lockout
     * counter)
     */
    public readonly resetTime!: pulumi.Output<number | undefined>;
    /**
     * Admin user lockout threshold, by default 5
     */
    public readonly threshold!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a AdminLockout resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AdminLockoutArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminLockoutArgs | AdminLockoutState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminLockoutState | undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["resetTime"] = state ? state.resetTime : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as AdminLockoutArgs | undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["resetTime"] = args ? args.resetTime : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdminLockout.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AdminLockout resources.
 */
export interface AdminLockoutState {
    /**
     * Admin user lockout duration, in minutes, by default 10 (Admin user lockout duration in minutes, 0 means forever)
     */
    duration?: pulumi.Input<number>;
    /**
     * Enable admin user lockout
     */
    enable?: pulumi.Input<number>;
    /**
     * After how long to reset the lockout counter, in minutes, by default 10 (Time in minutes after which to reset the lockout
     * counter)
     */
    resetTime?: pulumi.Input<number>;
    /**
     * Admin user lockout threshold, by default 5
     */
    threshold?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AdminLockout resource.
 */
export interface AdminLockoutArgs {
    /**
     * Admin user lockout duration, in minutes, by default 10 (Admin user lockout duration in minutes, 0 means forever)
     */
    duration?: pulumi.Input<number>;
    /**
     * Enable admin user lockout
     */
    enable?: pulumi.Input<number>;
    /**
     * After how long to reset the lockout counter, in minutes, by default 10 (Time in minutes after which to reset the lockout
     * counter)
     */
    resetTime?: pulumi.Input<number>;
    /**
     * Admin user lockout threshold, by default 5
     */
    threshold?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
