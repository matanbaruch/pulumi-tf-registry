// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LicenseManager extends pulumi.CustomResource {
    /**
     * Get an existing LicenseManager resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseManagerState, opts?: pulumi.CustomResourceOptions): LicenseManager {
        return new LicenseManager(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/licenseManager:LicenseManager';

    /**
     * Returns true if the given object is an instance of LicenseManager.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LicenseManager {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LicenseManager.__pulumiType;
    }

    /**
     * Configure feature bandwidth base (Mb)
     */
    public readonly bandwidthBase!: pulumi.Output<number | undefined>;
    /**
     * Set the bandwidth to maximum
     */
    public readonly bandwidthUnrestricted!: pulumi.Output<number | undefined>;
    public readonly connect!: pulumi.Output<outputs.LicenseManagerConnect | undefined>;
    public readonly hostLists!: pulumi.Output<outputs.LicenseManagerHostList[] | undefined>;
    /**
     * Configure instance name [format: (string).(string).(string).(string)]
     */
    public readonly instanceName!: pulumi.Output<string | undefined>;
    /**
     * Configure interval profile (1 monthly, 2 daily, 3 hourly)
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    public readonly ngWafModule!: pulumi.Output<outputs.LicenseManagerNgWafModule | undefined>;
    public readonly overage!: pulumi.Output<outputs.LicenseManagerOverage | undefined>;
    public readonly reminderLists!: pulumi.Output<outputs.LicenseManagerReminderList[] | undefined>;
    /**
     * serial number
     */
    public readonly sn!: pulumi.Output<string | undefined>;
    /**
     * Use management port to connect license server
     */
    public readonly useMgmtPort!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a LicenseManager resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: LicenseManagerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseManagerArgs | LicenseManagerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseManagerState | undefined;
            resourceInputs["bandwidthBase"] = state ? state.bandwidthBase : undefined;
            resourceInputs["bandwidthUnrestricted"] = state ? state.bandwidthUnrestricted : undefined;
            resourceInputs["connect"] = state ? state.connect : undefined;
            resourceInputs["hostLists"] = state ? state.hostLists : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ngWafModule"] = state ? state.ngWafModule : undefined;
            resourceInputs["overage"] = state ? state.overage : undefined;
            resourceInputs["reminderLists"] = state ? state.reminderLists : undefined;
            resourceInputs["sn"] = state ? state.sn : undefined;
            resourceInputs["useMgmtPort"] = state ? state.useMgmtPort : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as LicenseManagerArgs | undefined;
            resourceInputs["bandwidthBase"] = args ? args.bandwidthBase : undefined;
            resourceInputs["bandwidthUnrestricted"] = args ? args.bandwidthUnrestricted : undefined;
            resourceInputs["connect"] = args ? args.connect : undefined;
            resourceInputs["hostLists"] = args ? args.hostLists : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ngWafModule"] = args ? args.ngWafModule : undefined;
            resourceInputs["overage"] = args ? args.overage : undefined;
            resourceInputs["reminderLists"] = args ? args.reminderLists : undefined;
            resourceInputs["sn"] = args ? args.sn : undefined;
            resourceInputs["useMgmtPort"] = args ? args.useMgmtPort : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LicenseManager.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LicenseManager resources.
 */
export interface LicenseManagerState {
    /**
     * Configure feature bandwidth base (Mb)
     */
    bandwidthBase?: pulumi.Input<number>;
    /**
     * Set the bandwidth to maximum
     */
    bandwidthUnrestricted?: pulumi.Input<number>;
    connect?: pulumi.Input<inputs.LicenseManagerConnect>;
    hostLists?: pulumi.Input<pulumi.Input<inputs.LicenseManagerHostList>[]>;
    /**
     * Configure instance name [format: (string).(string).(string).(string)]
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Configure interval profile (1 monthly, 2 daily, 3 hourly)
     */
    interval?: pulumi.Input<number>;
    ngWafModule?: pulumi.Input<inputs.LicenseManagerNgWafModule>;
    overage?: pulumi.Input<inputs.LicenseManagerOverage>;
    reminderLists?: pulumi.Input<pulumi.Input<inputs.LicenseManagerReminderList>[]>;
    /**
     * serial number
     */
    sn?: pulumi.Input<string>;
    /**
     * Use management port to connect license server
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LicenseManager resource.
 */
export interface LicenseManagerArgs {
    /**
     * Configure feature bandwidth base (Mb)
     */
    bandwidthBase?: pulumi.Input<number>;
    /**
     * Set the bandwidth to maximum
     */
    bandwidthUnrestricted?: pulumi.Input<number>;
    connect?: pulumi.Input<inputs.LicenseManagerConnect>;
    hostLists?: pulumi.Input<pulumi.Input<inputs.LicenseManagerHostList>[]>;
    /**
     * Configure instance name [format: (string).(string).(string).(string)]
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Configure interval profile (1 monthly, 2 daily, 3 hourly)
     */
    interval?: pulumi.Input<number>;
    ngWafModule?: pulumi.Input<inputs.LicenseManagerNgWafModule>;
    overage?: pulumi.Input<inputs.LicenseManagerOverage>;
    reminderLists?: pulumi.Input<pulumi.Input<inputs.LicenseManagerReminderList>[]>;
    /**
     * serial number
     */
    sn?: pulumi.Input<string>;
    /**
     * Use management port to connect license server
     */
    useMgmtPort?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
