// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class HealthMonitor extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorState, opts?: pulumi.CustomResourceOptions): HealthMonitor {
        return new HealthMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitor:HealthMonitor';

    /**
     * Returns true if the given object is an instance of HealthMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitor.__pulumiType;
    }

    /**
     * Initial health state will default to UP
     */
    public readonly defaultStateUp!: pulumi.Output<number | undefined>;
    /**
     * Disable the target if health check failed
     */
    public readonly disableAfterDown!: pulumi.Output<number | undefined>;
    /**
     * 'enable': Enable health-check on dplane; 'disable': Disable health-check on dplane; 'auto(default)': Auto select;
     */
    public readonly dplane!: pulumi.Output<string | undefined>;
    /**
     * Enable strict L2dsr health-check
     */
    public readonly dsrL2Strict!: pulumi.Output<number | undefined>;
    public readonly headerInsert!: pulumi.Output<outputs.HealthMonitorHeaderInsert | undefined>;
    /**
     * Specify the Healthcheck Interval (Interval Value, in seconds (default 5))
     */
    public readonly interval!: pulumi.Output<number | undefined>;
    public readonly method!: pulumi.Output<outputs.HealthMonitorMethod | undefined>;
    /**
     * Monitor Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Override implicitly inherited IPv4 address from target
     */
    public readonly overrideIpv4!: pulumi.Output<string | undefined>;
    /**
     * Override implicitly inherited IPv6 address from target
     */
    public readonly overrideIpv6!: pulumi.Output<string | undefined>;
    /**
     * Override implicitly inherited port from target (Port number (1-65534))
     */
    public readonly overridePort!: pulumi.Output<number | undefined>;
    /**
     * Specify passive mode
     */
    public readonly passive!: pulumi.Output<number | undefined>;
    /**
     * Interval to do manual health checking while in passive mode (Specify value in seconds (Default is 10 s))
     */
    public readonly passiveInterval!: pulumi.Output<number | undefined>;
    public readonly proxyHeader!: pulumi.Output<outputs.HealthMonitorProxyHeader | undefined>;
    /**
     * Specify the Healthcheck Retries (Retry Count (default 3))
     */
    public readonly retry!: pulumi.Output<number | undefined>;
    /**
     * Number of samples in one epoch above which passive HC is enabled. If below or equal to the threshold, passive HC is
     * disabled (Specify number of samples in one second (Default is 50). If the number of samples is 0, no action is taken)
     */
    public readonly sampleThreshold!: pulumi.Output<number | undefined>;
    /**
     * Specify OpenSSL Cipher Suite name(s) for Health check (OpenSSL Cipher Suite(s) (Eg: AES128-SHA256), if the cipher is
     * invalid, would give information at HM down reason)
     */
    public readonly sslCiphers!: pulumi.Output<string | undefined>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    public readonly sslDgversion!: pulumi.Output<number | undefined>;
    /**
     * Enable SSL-Ticket Session Resumption
     */
    public readonly sslTicket!: pulumi.Output<number | undefined>;
    /**
     * SSL-Ticket lifetime (seconds)
     */
    public readonly sslTicketLifetime!: pulumi.Output<number | undefined>;
    /**
     * TLS/SSL version (TLS/SSL version: 31-TLSv1.0, 32-TLSv1.1, 33-TLSv1.2 and 34-TLSv1.3)
     */
    public readonly sslVersion!: pulumi.Output<number | undefined>;
    /**
     * 'status-code-2xx': Enable passive mode with 2xx http status code; 'status-code-non-5xx': Enable passive mode with
     * non-5xx http status code;
     */
    public readonly statusCode!: pulumi.Output<string | undefined>;
    /**
     * Require strictly retry
     */
    public readonly strictRetryOnServerErrResp!: pulumi.Output<number | undefined>;
    /**
     * Server side SSL template for health monitor (Server side SSL Name)
     */
    public readonly templateServerSsl!: pulumi.Output<string | undefined>;
    /**
     * Threshold percentage above which passive mode is enabled (Specify percentage (Default is 75%))
     */
    public readonly threshold!: pulumi.Output<number | undefined>;
    /**
     * Specify the Healthcheck Timeout (Timeout Value, in seconds(default 5), Timeout should be less than or equal to interval)
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Specify the Healthcheck Retries before declaring target up (Up-retry count (default 1))
     */
    public readonly upRetry!: pulumi.Output<number | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorArgs | HealthMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorState | undefined;
            resourceInputs["defaultStateUp"] = state ? state.defaultStateUp : undefined;
            resourceInputs["disableAfterDown"] = state ? state.disableAfterDown : undefined;
            resourceInputs["dplane"] = state ? state.dplane : undefined;
            resourceInputs["dsrL2Strict"] = state ? state.dsrL2Strict : undefined;
            resourceInputs["headerInsert"] = state ? state.headerInsert : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overrideIpv4"] = state ? state.overrideIpv4 : undefined;
            resourceInputs["overrideIpv6"] = state ? state.overrideIpv6 : undefined;
            resourceInputs["overridePort"] = state ? state.overridePort : undefined;
            resourceInputs["passive"] = state ? state.passive : undefined;
            resourceInputs["passiveInterval"] = state ? state.passiveInterval : undefined;
            resourceInputs["proxyHeader"] = state ? state.proxyHeader : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["sampleThreshold"] = state ? state.sampleThreshold : undefined;
            resourceInputs["sslCiphers"] = state ? state.sslCiphers : undefined;
            resourceInputs["sslDgversion"] = state ? state.sslDgversion : undefined;
            resourceInputs["sslTicket"] = state ? state.sslTicket : undefined;
            resourceInputs["sslTicketLifetime"] = state ? state.sslTicketLifetime : undefined;
            resourceInputs["sslVersion"] = state ? state.sslVersion : undefined;
            resourceInputs["statusCode"] = state ? state.statusCode : undefined;
            resourceInputs["strictRetryOnServerErrResp"] = state ? state.strictRetryOnServerErrResp : undefined;
            resourceInputs["templateServerSsl"] = state ? state.templateServerSsl : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["upRetry"] = state ? state.upRetry : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorArgs | undefined;
            resourceInputs["defaultStateUp"] = args ? args.defaultStateUp : undefined;
            resourceInputs["disableAfterDown"] = args ? args.disableAfterDown : undefined;
            resourceInputs["dplane"] = args ? args.dplane : undefined;
            resourceInputs["dsrL2Strict"] = args ? args.dsrL2Strict : undefined;
            resourceInputs["headerInsert"] = args ? args.headerInsert : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overrideIpv4"] = args ? args.overrideIpv4 : undefined;
            resourceInputs["overrideIpv6"] = args ? args.overrideIpv6 : undefined;
            resourceInputs["overridePort"] = args ? args.overridePort : undefined;
            resourceInputs["passive"] = args ? args.passive : undefined;
            resourceInputs["passiveInterval"] = args ? args.passiveInterval : undefined;
            resourceInputs["proxyHeader"] = args ? args.proxyHeader : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["sampleThreshold"] = args ? args.sampleThreshold : undefined;
            resourceInputs["sslCiphers"] = args ? args.sslCiphers : undefined;
            resourceInputs["sslDgversion"] = args ? args.sslDgversion : undefined;
            resourceInputs["sslTicket"] = args ? args.sslTicket : undefined;
            resourceInputs["sslTicketLifetime"] = args ? args.sslTicketLifetime : undefined;
            resourceInputs["sslVersion"] = args ? args.sslVersion : undefined;
            resourceInputs["statusCode"] = args ? args.statusCode : undefined;
            resourceInputs["strictRetryOnServerErrResp"] = args ? args.strictRetryOnServerErrResp : undefined;
            resourceInputs["templateServerSsl"] = args ? args.templateServerSsl : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["upRetry"] = args ? args.upRetry : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitor resources.
 */
export interface HealthMonitorState {
    /**
     * Initial health state will default to UP
     */
    defaultStateUp?: pulumi.Input<number>;
    /**
     * Disable the target if health check failed
     */
    disableAfterDown?: pulumi.Input<number>;
    /**
     * 'enable': Enable health-check on dplane; 'disable': Disable health-check on dplane; 'auto(default)': Auto select;
     */
    dplane?: pulumi.Input<string>;
    /**
     * Enable strict L2dsr health-check
     */
    dsrL2Strict?: pulumi.Input<number>;
    headerInsert?: pulumi.Input<inputs.HealthMonitorHeaderInsert>;
    /**
     * Specify the Healthcheck Interval (Interval Value, in seconds (default 5))
     */
    interval?: pulumi.Input<number>;
    method?: pulumi.Input<inputs.HealthMonitorMethod>;
    /**
     * Monitor Name
     */
    name?: pulumi.Input<string>;
    /**
     * Override implicitly inherited IPv4 address from target
     */
    overrideIpv4?: pulumi.Input<string>;
    /**
     * Override implicitly inherited IPv6 address from target
     */
    overrideIpv6?: pulumi.Input<string>;
    /**
     * Override implicitly inherited port from target (Port number (1-65534))
     */
    overridePort?: pulumi.Input<number>;
    /**
     * Specify passive mode
     */
    passive?: pulumi.Input<number>;
    /**
     * Interval to do manual health checking while in passive mode (Specify value in seconds (Default is 10 s))
     */
    passiveInterval?: pulumi.Input<number>;
    proxyHeader?: pulumi.Input<inputs.HealthMonitorProxyHeader>;
    /**
     * Specify the Healthcheck Retries (Retry Count (default 3))
     */
    retry?: pulumi.Input<number>;
    /**
     * Number of samples in one epoch above which passive HC is enabled. If below or equal to the threshold, passive HC is
     * disabled (Specify number of samples in one second (Default is 50). If the number of samples is 0, no action is taken)
     */
    sampleThreshold?: pulumi.Input<number>;
    /**
     * Specify OpenSSL Cipher Suite name(s) for Health check (OpenSSL Cipher Suite(s) (Eg: AES128-SHA256), if the cipher is
     * invalid, would give information at HM down reason)
     */
    sslCiphers?: pulumi.Input<string>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    sslDgversion?: pulumi.Input<number>;
    /**
     * Enable SSL-Ticket Session Resumption
     */
    sslTicket?: pulumi.Input<number>;
    /**
     * SSL-Ticket lifetime (seconds)
     */
    sslTicketLifetime?: pulumi.Input<number>;
    /**
     * TLS/SSL version (TLS/SSL version: 31-TLSv1.0, 32-TLSv1.1, 33-TLSv1.2 and 34-TLSv1.3)
     */
    sslVersion?: pulumi.Input<number>;
    /**
     * 'status-code-2xx': Enable passive mode with 2xx http status code; 'status-code-non-5xx': Enable passive mode with
     * non-5xx http status code;
     */
    statusCode?: pulumi.Input<string>;
    /**
     * Require strictly retry
     */
    strictRetryOnServerErrResp?: pulumi.Input<number>;
    /**
     * Server side SSL template for health monitor (Server side SSL Name)
     */
    templateServerSsl?: pulumi.Input<string>;
    /**
     * Threshold percentage above which passive mode is enabled (Specify percentage (Default is 75%))
     */
    threshold?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Timeout (Timeout Value, in seconds(default 5), Timeout should be less than or equal to interval)
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Retries before declaring target up (Up-retry count (default 1))
     */
    upRetry?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitor resource.
 */
export interface HealthMonitorArgs {
    /**
     * Initial health state will default to UP
     */
    defaultStateUp?: pulumi.Input<number>;
    /**
     * Disable the target if health check failed
     */
    disableAfterDown?: pulumi.Input<number>;
    /**
     * 'enable': Enable health-check on dplane; 'disable': Disable health-check on dplane; 'auto(default)': Auto select;
     */
    dplane?: pulumi.Input<string>;
    /**
     * Enable strict L2dsr health-check
     */
    dsrL2Strict?: pulumi.Input<number>;
    headerInsert?: pulumi.Input<inputs.HealthMonitorHeaderInsert>;
    /**
     * Specify the Healthcheck Interval (Interval Value, in seconds (default 5))
     */
    interval?: pulumi.Input<number>;
    method?: pulumi.Input<inputs.HealthMonitorMethod>;
    /**
     * Monitor Name
     */
    name?: pulumi.Input<string>;
    /**
     * Override implicitly inherited IPv4 address from target
     */
    overrideIpv4?: pulumi.Input<string>;
    /**
     * Override implicitly inherited IPv6 address from target
     */
    overrideIpv6?: pulumi.Input<string>;
    /**
     * Override implicitly inherited port from target (Port number (1-65534))
     */
    overridePort?: pulumi.Input<number>;
    /**
     * Specify passive mode
     */
    passive?: pulumi.Input<number>;
    /**
     * Interval to do manual health checking while in passive mode (Specify value in seconds (Default is 10 s))
     */
    passiveInterval?: pulumi.Input<number>;
    proxyHeader?: pulumi.Input<inputs.HealthMonitorProxyHeader>;
    /**
     * Specify the Healthcheck Retries (Retry Count (default 3))
     */
    retry?: pulumi.Input<number>;
    /**
     * Number of samples in one epoch above which passive HC is enabled. If below or equal to the threshold, passive HC is
     * disabled (Specify number of samples in one second (Default is 50). If the number of samples is 0, no action is taken)
     */
    sampleThreshold?: pulumi.Input<number>;
    /**
     * Specify OpenSSL Cipher Suite name(s) for Health check (OpenSSL Cipher Suite(s) (Eg: AES128-SHA256), if the cipher is
     * invalid, would give information at HM down reason)
     */
    sslCiphers?: pulumi.Input<string>;
    /**
     * Lower TLS/SSL version can be downgraded
     */
    sslDgversion?: pulumi.Input<number>;
    /**
     * Enable SSL-Ticket Session Resumption
     */
    sslTicket?: pulumi.Input<number>;
    /**
     * SSL-Ticket lifetime (seconds)
     */
    sslTicketLifetime?: pulumi.Input<number>;
    /**
     * TLS/SSL version (TLS/SSL version: 31-TLSv1.0, 32-TLSv1.1, 33-TLSv1.2 and 34-TLSv1.3)
     */
    sslVersion?: pulumi.Input<number>;
    /**
     * 'status-code-2xx': Enable passive mode with 2xx http status code; 'status-code-non-5xx': Enable passive mode with
     * non-5xx http status code;
     */
    statusCode?: pulumi.Input<string>;
    /**
     * Require strictly retry
     */
    strictRetryOnServerErrResp?: pulumi.Input<number>;
    /**
     * Server side SSL template for health monitor (Server side SSL Name)
     */
    templateServerSsl?: pulumi.Input<string>;
    /**
     * Threshold percentage above which passive mode is enabled (Specify percentage (Default is 75%))
     */
    threshold?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Timeout (Timeout Value, in seconds(default 5), Timeout should be less than or equal to interval)
     */
    timeout?: pulumi.Input<number>;
    /**
     * Specify the Healthcheck Retries before declaring target up (Up-retry count (default 1))
     */
    upRetry?: pulumi.Input<number>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
