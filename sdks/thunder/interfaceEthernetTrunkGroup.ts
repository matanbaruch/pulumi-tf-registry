// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InterfaceEthernetTrunkGroup extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceEthernetTrunkGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceEthernetTrunkGroupState, opts?: pulumi.CustomResourceOptions): InterfaceEthernetTrunkGroup {
        return new InterfaceEthernetTrunkGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/interfaceEthernetTrunkGroup:InterfaceEthernetTrunkGroup';

    /**
     * Returns true if the given object is an instance of InterfaceEthernetTrunkGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceEthernetTrunkGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceEthernetTrunkGroup.__pulumiType;
    }

    /**
     * LACP admin key (Admin key value)
     */
    public readonly adminKey!: pulumi.Output<number | undefined>;
    /**
     * Ifnum
     */
    public readonly ifnum!: pulumi.Output<string>;
    /**
     * 'active': enable initiation of LACP negotiation on a port(default); 'passive': disable initiation of LACP negotiation on
     * a port;
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * Set LACP priority for a port (LACP port priority)
     */
    public readonly portPriority!: pulumi.Output<number | undefined>;
    /**
     * 'long': Set LACP long timeout (default); 'short': Set LACP short timeout;
     */
    public readonly timeout!: pulumi.Output<string | undefined>;
    /**
     * Trunk Number
     */
    public readonly trunkNumber!: pulumi.Output<number>;
    /**
     * 'static': Static (default); 'lacp': lacp; 'lacp-udld': lacp-udld;
     */
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly udldTimeoutCfg!: pulumi.Output<outputs.InterfaceEthernetTrunkGroupUdldTimeoutCfg | undefined>;
    /**
     * Customized tag
     */
    public readonly userTag!: pulumi.Output<string | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a InterfaceEthernetTrunkGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceEthernetTrunkGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceEthernetTrunkGroupArgs | InterfaceEthernetTrunkGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceEthernetTrunkGroupState | undefined;
            resourceInputs["adminKey"] = state ? state.adminKey : undefined;
            resourceInputs["ifnum"] = state ? state.ifnum : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["portPriority"] = state ? state.portPriority : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["trunkNumber"] = state ? state.trunkNumber : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["udldTimeoutCfg"] = state ? state.udldTimeoutCfg : undefined;
            resourceInputs["userTag"] = state ? state.userTag : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as InterfaceEthernetTrunkGroupArgs | undefined;
            if ((!args || args.ifnum === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ifnum'");
            }
            if ((!args || args.trunkNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trunkNumber'");
            }
            resourceInputs["adminKey"] = args ? args.adminKey : undefined;
            resourceInputs["ifnum"] = args ? args.ifnum : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["portPriority"] = args ? args.portPriority : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["trunkNumber"] = args ? args.trunkNumber : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["udldTimeoutCfg"] = args ? args.udldTimeoutCfg : undefined;
            resourceInputs["userTag"] = args ? args.userTag : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceEthernetTrunkGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InterfaceEthernetTrunkGroup resources.
 */
export interface InterfaceEthernetTrunkGroupState {
    /**
     * LACP admin key (Admin key value)
     */
    adminKey?: pulumi.Input<number>;
    /**
     * Ifnum
     */
    ifnum?: pulumi.Input<string>;
    /**
     * 'active': enable initiation of LACP negotiation on a port(default); 'passive': disable initiation of LACP negotiation on
     * a port;
     */
    mode?: pulumi.Input<string>;
    /**
     * Set LACP priority for a port (LACP port priority)
     */
    portPriority?: pulumi.Input<number>;
    /**
     * 'long': Set LACP long timeout (default); 'short': Set LACP short timeout;
     */
    timeout?: pulumi.Input<string>;
    /**
     * Trunk Number
     */
    trunkNumber?: pulumi.Input<number>;
    /**
     * 'static': Static (default); 'lacp': lacp; 'lacp-udld': lacp-udld;
     */
    type?: pulumi.Input<string>;
    udldTimeoutCfg?: pulumi.Input<inputs.InterfaceEthernetTrunkGroupUdldTimeoutCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InterfaceEthernetTrunkGroup resource.
 */
export interface InterfaceEthernetTrunkGroupArgs {
    /**
     * LACP admin key (Admin key value)
     */
    adminKey?: pulumi.Input<number>;
    /**
     * Ifnum
     */
    ifnum: pulumi.Input<string>;
    /**
     * 'active': enable initiation of LACP negotiation on a port(default); 'passive': disable initiation of LACP negotiation on
     * a port;
     */
    mode?: pulumi.Input<string>;
    /**
     * Set LACP priority for a port (LACP port priority)
     */
    portPriority?: pulumi.Input<number>;
    /**
     * 'long': Set LACP long timeout (default); 'short': Set LACP short timeout;
     */
    timeout?: pulumi.Input<string>;
    /**
     * Trunk Number
     */
    trunkNumber: pulumi.Input<number>;
    /**
     * 'static': Static (default); 'lacp': lacp; 'lacp-udld': lacp-udld;
     */
    type?: pulumi.Input<string>;
    udldTimeoutCfg?: pulumi.Input<inputs.InterfaceEthernetTrunkGroupUdldTimeoutCfg>;
    /**
     * Customized tag
     */
    userTag?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
