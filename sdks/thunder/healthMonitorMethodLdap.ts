// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HealthMonitorMethodLdap extends pulumi.CustomResource {
    /**
     * Get an existing HealthMonitorMethodLdap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthMonitorMethodLdapState, opts?: pulumi.CustomResourceOptions): HealthMonitorMethodLdap {
        return new HealthMonitorMethodLdap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/healthMonitorMethodLdap:HealthMonitorMethodLdap';

    /**
     * Returns true if the given object is an instance of HealthMonitorMethodLdap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HealthMonitorMethodLdap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HealthMonitorMethodLdap.__pulumiType;
    }

    /**
     * Mark server up on receiving a not-found response
     */
    public readonly acceptnotfound!: pulumi.Output<number | undefined>;
    /**
     * Mark server up on receiving a search result reference response
     */
    public readonly acceptresref!: pulumi.Output<number | undefined>;
    /**
     * Specify LDAP DN distinguished name
     */
    public readonly basedn!: pulumi.Output<string | undefined>;
    /**
     * LDAP type
     */
    public readonly ldap!: pulumi.Output<number | undefined>;
    /**
     * Specify the distinguished name for bindRequest (LDAP DN distinguished name)
     */
    public readonly ldapBinddn!: pulumi.Output<string | undefined>;
    /**
     * Specify the user password
     */
    public readonly ldapPassword!: pulumi.Output<number | undefined>;
    /**
     * Configure password, '' means empty password
     */
    public readonly ldapPasswordString!: pulumi.Output<string | undefined>;
    /**
     * Specify the LDAP port (Speciry port number, default is 389, or 636 if LDAP over SSL)
     */
    public readonly ldapPort!: pulumi.Output<number | undefined>;
    /**
     * LDAP query to be excuted
     */
    public readonly ldapQuery!: pulumi.Output<string | undefined>;
    /**
     * Specify a query to be executed
     */
    public readonly ldapRunSearch!: pulumi.Output<number | undefined>;
    /**
     * 'overssl': Set LDAP over SSL; 'StartTLS': LDAP switch to TLS;
     */
    public readonly ldapSecurity!: pulumi.Output<string | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a HealthMonitorMethodLdap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HealthMonitorMethodLdapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthMonitorMethodLdapArgs | HealthMonitorMethodLdapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthMonitorMethodLdapState | undefined;
            resourceInputs["acceptnotfound"] = state ? state.acceptnotfound : undefined;
            resourceInputs["acceptresref"] = state ? state.acceptresref : undefined;
            resourceInputs["basedn"] = state ? state.basedn : undefined;
            resourceInputs["ldap"] = state ? state.ldap : undefined;
            resourceInputs["ldapBinddn"] = state ? state.ldapBinddn : undefined;
            resourceInputs["ldapPassword"] = state ? state.ldapPassword : undefined;
            resourceInputs["ldapPasswordString"] = state ? state.ldapPasswordString : undefined;
            resourceInputs["ldapPort"] = state ? state.ldapPort : undefined;
            resourceInputs["ldapQuery"] = state ? state.ldapQuery : undefined;
            resourceInputs["ldapRunSearch"] = state ? state.ldapRunSearch : undefined;
            resourceInputs["ldapSecurity"] = state ? state.ldapSecurity : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as HealthMonitorMethodLdapArgs | undefined;
            resourceInputs["acceptnotfound"] = args ? args.acceptnotfound : undefined;
            resourceInputs["acceptresref"] = args ? args.acceptresref : undefined;
            resourceInputs["basedn"] = args ? args.basedn : undefined;
            resourceInputs["ldap"] = args ? args.ldap : undefined;
            resourceInputs["ldapBinddn"] = args ? args.ldapBinddn : undefined;
            resourceInputs["ldapPassword"] = args ? args.ldapPassword : undefined;
            resourceInputs["ldapPasswordString"] = args ? args.ldapPasswordString : undefined;
            resourceInputs["ldapPort"] = args ? args.ldapPort : undefined;
            resourceInputs["ldapQuery"] = args ? args.ldapQuery : undefined;
            resourceInputs["ldapRunSearch"] = args ? args.ldapRunSearch : undefined;
            resourceInputs["ldapSecurity"] = args ? args.ldapSecurity : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HealthMonitorMethodLdap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HealthMonitorMethodLdap resources.
 */
export interface HealthMonitorMethodLdapState {
    /**
     * Mark server up on receiving a not-found response
     */
    acceptnotfound?: pulumi.Input<number>;
    /**
     * Mark server up on receiving a search result reference response
     */
    acceptresref?: pulumi.Input<number>;
    /**
     * Specify LDAP DN distinguished name
     */
    basedn?: pulumi.Input<string>;
    /**
     * LDAP type
     */
    ldap?: pulumi.Input<number>;
    /**
     * Specify the distinguished name for bindRequest (LDAP DN distinguished name)
     */
    ldapBinddn?: pulumi.Input<string>;
    /**
     * Specify the user password
     */
    ldapPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    ldapPasswordString?: pulumi.Input<string>;
    /**
     * Specify the LDAP port (Speciry port number, default is 389, or 636 if LDAP over SSL)
     */
    ldapPort?: pulumi.Input<number>;
    /**
     * LDAP query to be excuted
     */
    ldapQuery?: pulumi.Input<string>;
    /**
     * Specify a query to be executed
     */
    ldapRunSearch?: pulumi.Input<number>;
    /**
     * 'overssl': Set LDAP over SSL; 'StartTLS': LDAP switch to TLS;
     */
    ldapSecurity?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HealthMonitorMethodLdap resource.
 */
export interface HealthMonitorMethodLdapArgs {
    /**
     * Mark server up on receiving a not-found response
     */
    acceptnotfound?: pulumi.Input<number>;
    /**
     * Mark server up on receiving a search result reference response
     */
    acceptresref?: pulumi.Input<number>;
    /**
     * Specify LDAP DN distinguished name
     */
    basedn?: pulumi.Input<string>;
    /**
     * LDAP type
     */
    ldap?: pulumi.Input<number>;
    /**
     * Specify the distinguished name for bindRequest (LDAP DN distinguished name)
     */
    ldapBinddn?: pulumi.Input<string>;
    /**
     * Specify the user password
     */
    ldapPassword?: pulumi.Input<number>;
    /**
     * Configure password, '' means empty password
     */
    ldapPasswordString?: pulumi.Input<string>;
    /**
     * Specify the LDAP port (Speciry port number, default is 389, or 636 if LDAP over SSL)
     */
    ldapPort?: pulumi.Input<number>;
    /**
     * LDAP query to be excuted
     */
    ldapQuery?: pulumi.Input<string>;
    /**
     * Specify a query to be executed
     */
    ldapRunSearch?: pulumi.Input<number>;
    /**
     * 'overssl': Set LDAP over SSL; 'StartTLS': LDAP switch to TLS;
     */
    ldapSecurity?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
