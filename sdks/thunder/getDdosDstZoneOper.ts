// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getDdosDstZoneOper(args: GetDdosDstZoneOperArgs, opts?: pulumi.InvokeOptions): Promise<GetDdosDstZoneOperResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("thunder:index/getDdosDstZoneOper:getDdosDstZoneOper", {
        "detection": args.detection,
        "id": args.id,
        "ipProto": args.ipProto,
        "oper": args.oper,
        "outboundPolicy": args.outboundPolicy,
        "packetAnomalyDetection": args.packetAnomalyDetection,
        "port": args.port,
        "portRangeLists": args.portRangeLists,
        "srcPort": args.srcPort,
        "srcPortRangeLists": args.srcPortRangeLists,
        "topkDestinations": args.topkDestinations,
        "zoneName": args.zoneName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getDdosDstZoneOper.
 */
export interface GetDdosDstZoneOperArgs {
    detection?: inputs.GetDdosDstZoneOperDetection;
    id?: string;
    ipProto?: inputs.GetDdosDstZoneOperIpProto;
    oper?: inputs.GetDdosDstZoneOperOper;
    outboundPolicy?: inputs.GetDdosDstZoneOperOutboundPolicy;
    packetAnomalyDetection?: inputs.GetDdosDstZoneOperPacketAnomalyDetection;
    port?: inputs.GetDdosDstZoneOperPort;
    portRangeLists?: inputs.GetDdosDstZoneOperPortRangeList[];
    srcPort?: inputs.GetDdosDstZoneOperSrcPort;
    srcPortRangeLists?: inputs.GetDdosDstZoneOperSrcPortRangeList[];
    topkDestinations?: inputs.GetDdosDstZoneOperTopkDestinations;
    zoneName: string;
}

/**
 * A collection of values returned by getDdosDstZoneOper.
 */
export interface GetDdosDstZoneOperResult {
    readonly detection?: outputs.GetDdosDstZoneOperDetection;
    readonly id: string;
    readonly ipProto?: outputs.GetDdosDstZoneOperIpProto;
    readonly oper?: outputs.GetDdosDstZoneOperOper;
    readonly outboundPolicy?: outputs.GetDdosDstZoneOperOutboundPolicy;
    readonly packetAnomalyDetection?: outputs.GetDdosDstZoneOperPacketAnomalyDetection;
    readonly port?: outputs.GetDdosDstZoneOperPort;
    readonly portRangeLists?: outputs.GetDdosDstZoneOperPortRangeList[];
    readonly srcPort?: outputs.GetDdosDstZoneOperSrcPort;
    readonly srcPortRangeLists?: outputs.GetDdosDstZoneOperSrcPortRangeList[];
    readonly topkDestinations?: outputs.GetDdosDstZoneOperTopkDestinations;
    readonly zoneName: string;
}
export function getDdosDstZoneOperOutput(args: GetDdosDstZoneOperOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDdosDstZoneOperResult> {
    return pulumi.output(args).apply((a: any) => getDdosDstZoneOper(a, opts))
}

/**
 * A collection of arguments for invoking getDdosDstZoneOper.
 */
export interface GetDdosDstZoneOperOutputArgs {
    detection?: pulumi.Input<inputs.GetDdosDstZoneOperDetectionArgs>;
    id?: pulumi.Input<string>;
    ipProto?: pulumi.Input<inputs.GetDdosDstZoneOperIpProtoArgs>;
    oper?: pulumi.Input<inputs.GetDdosDstZoneOperOperArgs>;
    outboundPolicy?: pulumi.Input<inputs.GetDdosDstZoneOperOutboundPolicyArgs>;
    packetAnomalyDetection?: pulumi.Input<inputs.GetDdosDstZoneOperPacketAnomalyDetectionArgs>;
    port?: pulumi.Input<inputs.GetDdosDstZoneOperPortArgs>;
    portRangeLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstZoneOperPortRangeListArgs>[]>;
    srcPort?: pulumi.Input<inputs.GetDdosDstZoneOperSrcPortArgs>;
    srcPortRangeLists?: pulumi.Input<pulumi.Input<inputs.GetDdosDstZoneOperSrcPortRangeListArgs>[]>;
    topkDestinations?: pulumi.Input<inputs.GetDdosDstZoneOperTopkDestinationsArgs>;
    zoneName: pulumi.Input<string>;
}
