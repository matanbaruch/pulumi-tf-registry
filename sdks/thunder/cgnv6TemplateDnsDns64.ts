// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Cgnv6TemplateDnsDns64 extends pulumi.CustomResource {
    /**
     * Get an existing Cgnv6TemplateDnsDns64 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Cgnv6TemplateDnsDns64State, opts?: pulumi.CustomResourceOptions): Cgnv6TemplateDnsDns64 {
        return new Cgnv6TemplateDnsDns64(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/cgnv6TemplateDnsDns64:Cgnv6TemplateDnsDns64';

    /**
     * Returns true if the given object is an instance of Cgnv6TemplateDnsDns64.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cgnv6TemplateDnsDns64 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cgnv6TemplateDnsDns64.__pulumiType;
    }

    /**
     * Disable Only translate the Answer Section
     */
    public readonly answerOnlyDisable!: pulumi.Output<number | undefined>;
    /**
     * Set AA flag in DNS Response
     */
    public readonly authData!: pulumi.Output<number | undefined>;
    /**
     * Use a cached A-query response to provide AAAA query responses for the same hostname
     */
    public readonly cache!: pulumi.Output<number | undefined>;
    /**
     * Always change incoming AAAA DNS Query to A
     */
    public readonly changeQuery!: pulumi.Output<number | undefined>;
    /**
     * Disable Always try DNS Compression
     */
    public readonly compressDisable!: pulumi.Output<number | undefined>;
    /**
     * Check DNS Question Record
     */
    public readonly deepCheckQr!: pulumi.Output<number | undefined>;
    /**
     * Disable Check DNS Response Records
     */
    public readonly deepCheckRrDisable!: pulumi.Output<number | undefined>;
    /**
     * Disable Drop DNS CNAME Response
     */
    public readonly dropCnameDisable!: pulumi.Output<number | undefined>;
    /**
     * Append EDNS Record when send A Query to server
     */
    public readonly ednsAppend!: pulumi.Output<number | undefined>;
    /**
     * Enable DNS64 (Need to config this option before config any other dns64 options)
     */
    public readonly enable!: pulumi.Output<number | undefined>;
    /**
     * Append translated Records when original Response only has Answer Section
     */
    public readonly fastAppend!: pulumi.Output<number | undefined>;
    /**
     * Disable Ignore DNS error Response with rcode 3
     */
    public readonly ignoreRcode3Disable!: pulumi.Output<number | undefined>;
    /**
     * Max Question Record Length, default is 128
     */
    public readonly maxQrLength!: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Forward AAAA Query & generate A Query in parallel
     */
    public readonly parallelQuery!: pulumi.Output<number | undefined>;
    /**
     * Disable Generate A query upon empty or error Response
     */
    public readonly passiveQueryDisable!: pulumi.Output<number | undefined>;
    /**
     * Retry count, default is 3 (Retry Number)
     */
    public readonly retry!: pulumi.Output<number | undefined>;
    /**
     * Disable Single Response which is used to avoid ambiguity
     */
    public readonly singleResponseDisable!: pulumi.Output<number | undefined>;
    /**
     * Timeout to send additional Queries, unit: second, default is 1
     */
    public readonly timeout!: pulumi.Output<number | undefined>;
    /**
     * Translate DNS PTR Records
     */
    public readonly transPtr!: pulumi.Output<number | undefined>;
    /**
     * Translate DNS PTR Query
     */
    public readonly transPtrQuery!: pulumi.Output<number | undefined>;
    /**
     * Specify Max TTL in DNS Response, unit: second
     */
    public readonly ttl!: pulumi.Output<number | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Cgnv6TemplateDnsDns64 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: Cgnv6TemplateDnsDns64Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Cgnv6TemplateDnsDns64Args | Cgnv6TemplateDnsDns64State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Cgnv6TemplateDnsDns64State | undefined;
            resourceInputs["answerOnlyDisable"] = state ? state.answerOnlyDisable : undefined;
            resourceInputs["authData"] = state ? state.authData : undefined;
            resourceInputs["cache"] = state ? state.cache : undefined;
            resourceInputs["changeQuery"] = state ? state.changeQuery : undefined;
            resourceInputs["compressDisable"] = state ? state.compressDisable : undefined;
            resourceInputs["deepCheckQr"] = state ? state.deepCheckQr : undefined;
            resourceInputs["deepCheckRrDisable"] = state ? state.deepCheckRrDisable : undefined;
            resourceInputs["dropCnameDisable"] = state ? state.dropCnameDisable : undefined;
            resourceInputs["ednsAppend"] = state ? state.ednsAppend : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["fastAppend"] = state ? state.fastAppend : undefined;
            resourceInputs["ignoreRcode3Disable"] = state ? state.ignoreRcode3Disable : undefined;
            resourceInputs["maxQrLength"] = state ? state.maxQrLength : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parallelQuery"] = state ? state.parallelQuery : undefined;
            resourceInputs["passiveQueryDisable"] = state ? state.passiveQueryDisable : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["singleResponseDisable"] = state ? state.singleResponseDisable : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["transPtr"] = state ? state.transPtr : undefined;
            resourceInputs["transPtrQuery"] = state ? state.transPtrQuery : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as Cgnv6TemplateDnsDns64Args | undefined;
            resourceInputs["answerOnlyDisable"] = args ? args.answerOnlyDisable : undefined;
            resourceInputs["authData"] = args ? args.authData : undefined;
            resourceInputs["cache"] = args ? args.cache : undefined;
            resourceInputs["changeQuery"] = args ? args.changeQuery : undefined;
            resourceInputs["compressDisable"] = args ? args.compressDisable : undefined;
            resourceInputs["deepCheckQr"] = args ? args.deepCheckQr : undefined;
            resourceInputs["deepCheckRrDisable"] = args ? args.deepCheckRrDisable : undefined;
            resourceInputs["dropCnameDisable"] = args ? args.dropCnameDisable : undefined;
            resourceInputs["ednsAppend"] = args ? args.ednsAppend : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["fastAppend"] = args ? args.fastAppend : undefined;
            resourceInputs["ignoreRcode3Disable"] = args ? args.ignoreRcode3Disable : undefined;
            resourceInputs["maxQrLength"] = args ? args.maxQrLength : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parallelQuery"] = args ? args.parallelQuery : undefined;
            resourceInputs["passiveQueryDisable"] = args ? args.passiveQueryDisable : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["singleResponseDisable"] = args ? args.singleResponseDisable : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["transPtr"] = args ? args.transPtr : undefined;
            resourceInputs["transPtrQuery"] = args ? args.transPtrQuery : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cgnv6TemplateDnsDns64.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cgnv6TemplateDnsDns64 resources.
 */
export interface Cgnv6TemplateDnsDns64State {
    /**
     * Disable Only translate the Answer Section
     */
    answerOnlyDisable?: pulumi.Input<number>;
    /**
     * Set AA flag in DNS Response
     */
    authData?: pulumi.Input<number>;
    /**
     * Use a cached A-query response to provide AAAA query responses for the same hostname
     */
    cache?: pulumi.Input<number>;
    /**
     * Always change incoming AAAA DNS Query to A
     */
    changeQuery?: pulumi.Input<number>;
    /**
     * Disable Always try DNS Compression
     */
    compressDisable?: pulumi.Input<number>;
    /**
     * Check DNS Question Record
     */
    deepCheckQr?: pulumi.Input<number>;
    /**
     * Disable Check DNS Response Records
     */
    deepCheckRrDisable?: pulumi.Input<number>;
    /**
     * Disable Drop DNS CNAME Response
     */
    dropCnameDisable?: pulumi.Input<number>;
    /**
     * Append EDNS Record when send A Query to server
     */
    ednsAppend?: pulumi.Input<number>;
    /**
     * Enable DNS64 (Need to config this option before config any other dns64 options)
     */
    enable?: pulumi.Input<number>;
    /**
     * Append translated Records when original Response only has Answer Section
     */
    fastAppend?: pulumi.Input<number>;
    /**
     * Disable Ignore DNS error Response with rcode 3
     */
    ignoreRcode3Disable?: pulumi.Input<number>;
    /**
     * Max Question Record Length, default is 128
     */
    maxQrLength?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Forward AAAA Query & generate A Query in parallel
     */
    parallelQuery?: pulumi.Input<number>;
    /**
     * Disable Generate A query upon empty or error Response
     */
    passiveQueryDisable?: pulumi.Input<number>;
    /**
     * Retry count, default is 3 (Retry Number)
     */
    retry?: pulumi.Input<number>;
    /**
     * Disable Single Response which is used to avoid ambiguity
     */
    singleResponseDisable?: pulumi.Input<number>;
    /**
     * Timeout to send additional Queries, unit: second, default is 1
     */
    timeout?: pulumi.Input<number>;
    /**
     * Translate DNS PTR Records
     */
    transPtr?: pulumi.Input<number>;
    /**
     * Translate DNS PTR Query
     */
    transPtrQuery?: pulumi.Input<number>;
    /**
     * Specify Max TTL in DNS Response, unit: second
     */
    ttl?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cgnv6TemplateDnsDns64 resource.
 */
export interface Cgnv6TemplateDnsDns64Args {
    /**
     * Disable Only translate the Answer Section
     */
    answerOnlyDisable?: pulumi.Input<number>;
    /**
     * Set AA flag in DNS Response
     */
    authData?: pulumi.Input<number>;
    /**
     * Use a cached A-query response to provide AAAA query responses for the same hostname
     */
    cache?: pulumi.Input<number>;
    /**
     * Always change incoming AAAA DNS Query to A
     */
    changeQuery?: pulumi.Input<number>;
    /**
     * Disable Always try DNS Compression
     */
    compressDisable?: pulumi.Input<number>;
    /**
     * Check DNS Question Record
     */
    deepCheckQr?: pulumi.Input<number>;
    /**
     * Disable Check DNS Response Records
     */
    deepCheckRrDisable?: pulumi.Input<number>;
    /**
     * Disable Drop DNS CNAME Response
     */
    dropCnameDisable?: pulumi.Input<number>;
    /**
     * Append EDNS Record when send A Query to server
     */
    ednsAppend?: pulumi.Input<number>;
    /**
     * Enable DNS64 (Need to config this option before config any other dns64 options)
     */
    enable?: pulumi.Input<number>;
    /**
     * Append translated Records when original Response only has Answer Section
     */
    fastAppend?: pulumi.Input<number>;
    /**
     * Disable Ignore DNS error Response with rcode 3
     */
    ignoreRcode3Disable?: pulumi.Input<number>;
    /**
     * Max Question Record Length, default is 128
     */
    maxQrLength?: pulumi.Input<number>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    /**
     * Forward AAAA Query & generate A Query in parallel
     */
    parallelQuery?: pulumi.Input<number>;
    /**
     * Disable Generate A query upon empty or error Response
     */
    passiveQueryDisable?: pulumi.Input<number>;
    /**
     * Retry count, default is 3 (Retry Number)
     */
    retry?: pulumi.Input<number>;
    /**
     * Disable Single Response which is used to avoid ambiguity
     */
    singleResponseDisable?: pulumi.Input<number>;
    /**
     * Timeout to send additional Queries, unit: second, default is 1
     */
    timeout?: pulumi.Input<number>;
    /**
     * Translate DNS PTR Records
     */
    transPtr?: pulumi.Input<number>;
    /**
     * Translate DNS PTR Query
     */
    transPtrQuery?: pulumi.Input<number>;
    /**
     * Specify Max TTL in DNS Response, unit: second
     */
    ttl?: pulumi.Input<number>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
