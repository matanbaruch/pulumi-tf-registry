// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkLldp extends pulumi.CustomResource {
    /**
     * Get an existing NetworkLldp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkLldpState, opts?: pulumi.CustomResourceOptions): NetworkLldp {
        return new NetworkLldp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'thunder:index/networkLldp:NetworkLldp';

    /**
     * Returns true if the given object is an instance of NetworkLldp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkLldp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkLldp.__pulumiType;
    }

    public readonly enableCfg!: pulumi.Output<outputs.NetworkLldpEnableCfg | undefined>;
    public readonly managementAddress!: pulumi.Output<outputs.NetworkLldpManagementAddress | undefined>;
    public readonly notificationCfg!: pulumi.Output<outputs.NetworkLldpNotificationCfg | undefined>;
    /**
     * Configure lldp system description
     */
    public readonly systemDescription!: pulumi.Output<string | undefined>;
    /**
     * Configure lldp system name
     */
    public readonly systemName!: pulumi.Output<string | undefined>;
    public readonly txSet!: pulumi.Output<outputs.NetworkLldpTxSet | undefined>;
    /**
     * uuid of the object
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a NetworkLldp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NetworkLldpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkLldpArgs | NetworkLldpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkLldpState | undefined;
            resourceInputs["enableCfg"] = state ? state.enableCfg : undefined;
            resourceInputs["managementAddress"] = state ? state.managementAddress : undefined;
            resourceInputs["notificationCfg"] = state ? state.notificationCfg : undefined;
            resourceInputs["systemDescription"] = state ? state.systemDescription : undefined;
            resourceInputs["systemName"] = state ? state.systemName : undefined;
            resourceInputs["txSet"] = state ? state.txSet : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as NetworkLldpArgs | undefined;
            resourceInputs["enableCfg"] = args ? args.enableCfg : undefined;
            resourceInputs["managementAddress"] = args ? args.managementAddress : undefined;
            resourceInputs["notificationCfg"] = args ? args.notificationCfg : undefined;
            resourceInputs["systemDescription"] = args ? args.systemDescription : undefined;
            resourceInputs["systemName"] = args ? args.systemName : undefined;
            resourceInputs["txSet"] = args ? args.txSet : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkLldp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkLldp resources.
 */
export interface NetworkLldpState {
    enableCfg?: pulumi.Input<inputs.NetworkLldpEnableCfg>;
    managementAddress?: pulumi.Input<inputs.NetworkLldpManagementAddress>;
    notificationCfg?: pulumi.Input<inputs.NetworkLldpNotificationCfg>;
    /**
     * Configure lldp system description
     */
    systemDescription?: pulumi.Input<string>;
    /**
     * Configure lldp system name
     */
    systemName?: pulumi.Input<string>;
    txSet?: pulumi.Input<inputs.NetworkLldpTxSet>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkLldp resource.
 */
export interface NetworkLldpArgs {
    enableCfg?: pulumi.Input<inputs.NetworkLldpEnableCfg>;
    managementAddress?: pulumi.Input<inputs.NetworkLldpManagementAddress>;
    notificationCfg?: pulumi.Input<inputs.NetworkLldpNotificationCfg>;
    /**
     * Configure lldp system description
     */
    systemDescription?: pulumi.Input<string>;
    /**
     * Configure lldp system name
     */
    systemName?: pulumi.Input<string>;
    txSet?: pulumi.Input<inputs.NetworkLldpTxSet>;
    /**
     * uuid of the object
     */
    uuid?: pulumi.Input<string>;
}
