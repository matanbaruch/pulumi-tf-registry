// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Credential extends pulumi.CustomResource {
    /**
     * Get an existing Credential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialState, opts?: pulumi.CustomResourceOptions): Credential {
        return new Credential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloudcompute:index/credential:Credential';

    /**
     * Returns true if the given object is an instance of Credential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Credential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Credential.__pulumiType;
    }

    /**
     * Account identifier (username, access key, etc.).
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * The plain and encrypted version of the API token (the plain version is never stored in the database)
     */
    public readonly apiToken!: pulumi.Output<outputs.CredentialApiToken | undefined>;
    /**
     * CA certificate for certificate-based authentication.
     */
    public readonly caCert!: pulumi.Output<string | undefined>;
    /**
     * Description of the credential.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates if the credential is external (true) or not (false).
     */
    public readonly external!: pulumi.Output<boolean | undefined>;
    /**
     * IBM Cloud account GUID.
     */
    public readonly ibmAccountGuid!: pulumi.Output<string | undefined>;
    /**
     * Unique name for the credential.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the role to assume.
     */
    public readonly roleArn!: pulumi.Output<string | undefined>;
    /**
     * Plain and encrypted version of the credential (the plain version is never stored in the database)
     */
    public readonly secret!: pulumi.Output<outputs.CredentialSecret | undefined>;
    /**
     * SkipVerify if should skip certificate verification in tls communication.
     */
    public readonly skipCertVerification!: pulumi.Output<boolean | undefined>;
    /**
     * Credential type.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * URL is the server base url.
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Indicates if authentication should be done with the instance's attached credentials (EC2 IAM Role).
     */
    public readonly useAwsRole!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether to use the regional STS endpoint for an STS session.
     */
    public readonly useStsRegionalEndpoint!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Credential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialArgs | CredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["apiToken"] = state ? state.apiToken : undefined;
            resourceInputs["caCert"] = state ? state.caCert : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["ibmAccountGuid"] = state ? state.ibmAccountGuid : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["skipCertVerification"] = state ? state.skipCertVerification : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["useAwsRole"] = state ? state.useAwsRole : undefined;
            resourceInputs["useStsRegionalEndpoint"] = state ? state.useStsRegionalEndpoint : undefined;
        } else {
            const args = argsOrState as CredentialArgs | undefined;
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["apiToken"] = args ? args.apiToken : undefined;
            resourceInputs["caCert"] = args ? args.caCert : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["ibmAccountGuid"] = args ? args.ibmAccountGuid : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["secret"] = args ? args.secret : undefined;
            resourceInputs["skipCertVerification"] = args ? args.skipCertVerification : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["useAwsRole"] = args ? args.useAwsRole : undefined;
            resourceInputs["useStsRegionalEndpoint"] = args ? args.useStsRegionalEndpoint : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Credential.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Credential resources.
 */
export interface CredentialState {
    /**
     * Account identifier (username, access key, etc.).
     */
    accountId?: pulumi.Input<string>;
    /**
     * The plain and encrypted version of the API token (the plain version is never stored in the database)
     */
    apiToken?: pulumi.Input<inputs.CredentialApiToken>;
    /**
     * CA certificate for certificate-based authentication.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Description of the credential.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if the credential is external (true) or not (false).
     */
    external?: pulumi.Input<boolean>;
    /**
     * IBM Cloud account GUID.
     */
    ibmAccountGuid?: pulumi.Input<string>;
    /**
     * Unique name for the credential.
     */
    name?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the role to assume.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Plain and encrypted version of the credential (the plain version is never stored in the database)
     */
    secret?: pulumi.Input<inputs.CredentialSecret>;
    /**
     * SkipVerify if should skip certificate verification in tls communication.
     */
    skipCertVerification?: pulumi.Input<boolean>;
    /**
     * Credential type.
     */
    type?: pulumi.Input<string>;
    /**
     * URL is the server base url.
     */
    url?: pulumi.Input<string>;
    /**
     * Indicates if authentication should be done with the instance's attached credentials (EC2 IAM Role).
     */
    useAwsRole?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use the regional STS endpoint for an STS session.
     */
    useStsRegionalEndpoint?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Credential resource.
 */
export interface CredentialArgs {
    /**
     * Account identifier (username, access key, etc.).
     */
    accountId?: pulumi.Input<string>;
    /**
     * The plain and encrypted version of the API token (the plain version is never stored in the database)
     */
    apiToken?: pulumi.Input<inputs.CredentialApiToken>;
    /**
     * CA certificate for certificate-based authentication.
     */
    caCert?: pulumi.Input<string>;
    /**
     * Description of the credential.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates if the credential is external (true) or not (false).
     */
    external?: pulumi.Input<boolean>;
    /**
     * IBM Cloud account GUID.
     */
    ibmAccountGuid?: pulumi.Input<string>;
    /**
     * Unique name for the credential.
     */
    name?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the role to assume.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Plain and encrypted version of the credential (the plain version is never stored in the database)
     */
    secret?: pulumi.Input<inputs.CredentialSecret>;
    /**
     * SkipVerify if should skip certificate verification in tls communication.
     */
    skipCertVerification?: pulumi.Input<boolean>;
    /**
     * Credential type.
     */
    type?: pulumi.Input<string>;
    /**
     * URL is the server base url.
     */
    url?: pulumi.Input<string>;
    /**
     * Indicates if authentication should be done with the instance's attached credentials (EC2 IAM Role).
     */
    useAwsRole?: pulumi.Input<boolean>;
    /**
     * Indicates whether to use the regional STS endpoint for an STS session.
     */
    useStsRegionalEndpoint?: pulumi.Input<boolean>;
}
