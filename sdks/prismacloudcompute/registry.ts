// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prismacloudcompute:index/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    /**
     * The maximum number of images to scan from each repository, sorted by most recently modified.
     */
    public readonly cap!: pulumi.Output<number | undefined>;
    /**
     * The set of Defenders available for scanning.
     */
    public readonly collections!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the credential from the credentials store to use for authenticating with the registry.
     */
    public readonly credential!: pulumi.Output<string | undefined>;
    /**
     * Repositories to exclude from scanning.
     */
    public readonly excludedRepositories!: pulumi.Output<string[] | undefined>;
    /**
     * Tags to exclude from scanning.
     */
    public readonly excludedTags!: pulumi.Output<string[] | undefined>;
    /**
     * Use temporary tokens provided by Harbor to scan images in projects with the deployment security setting enabled.
     */
    public readonly harborDeploymentSecurity!: pulumi.Output<boolean | undefined>;
    /**
     * JFrog Artifactory repository types to scan.
     */
    public readonly jfrogRepoTypes!: pulumi.Output<string[] | undefined>;
    /**
     * IBM Cloud namespace.
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * The base OS of the registry images.
     */
    public readonly os!: pulumi.Output<string | undefined>;
    /**
     * Registry address.
     */
    public readonly registry!: pulumi.Output<string | undefined>;
    /**
     * Repositories to scan. Pattern matching is supported.
     */
    public readonly repository!: pulumi.Output<string | undefined>;
    /**
     * Number of Defenders that can be utilized for each scan job.
     */
    public readonly scanners!: pulumi.Output<number | undefined>;
    /**
     * Tags to scan. Pattern matching is supported.
     */
    public readonly tag!: pulumi.Output<string | undefined>;
    /**
     * Registry type.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * Pattern used by the scanner to identify the latest tags without querying the registry for additional metadata. If a
     * pattern specifies both date and version, date takes precedence over version.
     */
    public readonly versionPattern!: pulumi.Output<string | undefined>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            resourceInputs["cap"] = state ? state.cap : undefined;
            resourceInputs["collections"] = state ? state.collections : undefined;
            resourceInputs["credential"] = state ? state.credential : undefined;
            resourceInputs["excludedRepositories"] = state ? state.excludedRepositories : undefined;
            resourceInputs["excludedTags"] = state ? state.excludedTags : undefined;
            resourceInputs["harborDeploymentSecurity"] = state ? state.harborDeploymentSecurity : undefined;
            resourceInputs["jfrogRepoTypes"] = state ? state.jfrogRepoTypes : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
            resourceInputs["scanners"] = state ? state.scanners : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["versionPattern"] = state ? state.versionPattern : undefined;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            resourceInputs["cap"] = args ? args.cap : undefined;
            resourceInputs["collections"] = args ? args.collections : undefined;
            resourceInputs["credential"] = args ? args.credential : undefined;
            resourceInputs["excludedRepositories"] = args ? args.excludedRepositories : undefined;
            resourceInputs["excludedTags"] = args ? args.excludedTags : undefined;
            resourceInputs["harborDeploymentSecurity"] = args ? args.harborDeploymentSecurity : undefined;
            resourceInputs["jfrogRepoTypes"] = args ? args.jfrogRepoTypes : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
            resourceInputs["scanners"] = args ? args.scanners : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["versionPattern"] = args ? args.versionPattern : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Registry.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    /**
     * The maximum number of images to scan from each repository, sorted by most recently modified.
     */
    cap?: pulumi.Input<number>;
    /**
     * The set of Defenders available for scanning.
     */
    collections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the credential from the credentials store to use for authenticating with the registry.
     */
    credential?: pulumi.Input<string>;
    /**
     * Repositories to exclude from scanning.
     */
    excludedRepositories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags to exclude from scanning.
     */
    excludedTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use temporary tokens provided by Harbor to scan images in projects with the deployment security setting enabled.
     */
    harborDeploymentSecurity?: pulumi.Input<boolean>;
    /**
     * JFrog Artifactory repository types to scan.
     */
    jfrogRepoTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IBM Cloud namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The base OS of the registry images.
     */
    os?: pulumi.Input<string>;
    /**
     * Registry address.
     */
    registry?: pulumi.Input<string>;
    /**
     * Repositories to scan. Pattern matching is supported.
     */
    repository?: pulumi.Input<string>;
    /**
     * Number of Defenders that can be utilized for each scan job.
     */
    scanners?: pulumi.Input<number>;
    /**
     * Tags to scan. Pattern matching is supported.
     */
    tag?: pulumi.Input<string>;
    /**
     * Registry type.
     */
    type?: pulumi.Input<string>;
    /**
     * Pattern used by the scanner to identify the latest tags without querying the registry for additional metadata. If a
     * pattern specifies both date and version, date takes precedence over version.
     */
    versionPattern?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    /**
     * The maximum number of images to scan from each repository, sorted by most recently modified.
     */
    cap?: pulumi.Input<number>;
    /**
     * The set of Defenders available for scanning.
     */
    collections?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the credential from the credentials store to use for authenticating with the registry.
     */
    credential?: pulumi.Input<string>;
    /**
     * Repositories to exclude from scanning.
     */
    excludedRepositories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags to exclude from scanning.
     */
    excludedTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use temporary tokens provided by Harbor to scan images in projects with the deployment security setting enabled.
     */
    harborDeploymentSecurity?: pulumi.Input<boolean>;
    /**
     * JFrog Artifactory repository types to scan.
     */
    jfrogRepoTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IBM Cloud namespace.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The base OS of the registry images.
     */
    os?: pulumi.Input<string>;
    /**
     * Registry address.
     */
    registry?: pulumi.Input<string>;
    /**
     * Repositories to scan. Pattern matching is supported.
     */
    repository?: pulumi.Input<string>;
    /**
     * Number of Defenders that can be utilized for each scan job.
     */
    scanners?: pulumi.Input<number>;
    /**
     * Tags to scan. Pattern matching is supported.
     */
    tag?: pulumi.Input<string>;
    /**
     * Registry type.
     */
    type?: pulumi.Input<string>;
    /**
     * Pattern used by the scanner to identify the latest tags without querying the registry for additional metadata. If a
     * pattern specifies both date and version, date takes precedence over version.
     */
    versionPattern?: pulumi.Input<string>;
}
