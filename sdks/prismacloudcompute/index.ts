// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdmissionPolicyArgs, AdmissionPolicyState } from "./admissionPolicy";
export type AdmissionPolicy = import("./admissionPolicy").AdmissionPolicy;
export const AdmissionPolicy: typeof import("./admissionPolicy").AdmissionPolicy = null as any;
utilities.lazyLoad(exports, ["AdmissionPolicy"], () => require("./admissionPolicy"));

export { AlertprofileArgs, AlertprofileState } from "./alertprofile";
export type Alertprofile = import("./alertprofile").Alertprofile;
export const Alertprofile: typeof import("./alertprofile").Alertprofile = null as any;
utilities.lazyLoad(exports, ["Alertprofile"], () => require("./alertprofile"));

export { CiCoderepoCompliancePolicyArgs, CiCoderepoCompliancePolicyState } from "./ciCoderepoCompliancePolicy";
export type CiCoderepoCompliancePolicy = import("./ciCoderepoCompliancePolicy").CiCoderepoCompliancePolicy;
export const CiCoderepoCompliancePolicy: typeof import("./ciCoderepoCompliancePolicy").CiCoderepoCompliancePolicy = null as any;
utilities.lazyLoad(exports, ["CiCoderepoCompliancePolicy"], () => require("./ciCoderepoCompliancePolicy"));

export { CiCoderepoVulnerabilityPolicyArgs, CiCoderepoVulnerabilityPolicyState } from "./ciCoderepoVulnerabilityPolicy";
export type CiCoderepoVulnerabilityPolicy = import("./ciCoderepoVulnerabilityPolicy").CiCoderepoVulnerabilityPolicy;
export const CiCoderepoVulnerabilityPolicy: typeof import("./ciCoderepoVulnerabilityPolicy").CiCoderepoVulnerabilityPolicy = null as any;
utilities.lazyLoad(exports, ["CiCoderepoVulnerabilityPolicy"], () => require("./ciCoderepoVulnerabilityPolicy"));

export { CiImageCompliancePolicyArgs, CiImageCompliancePolicyState } from "./ciImageCompliancePolicy";
export type CiImageCompliancePolicy = import("./ciImageCompliancePolicy").CiImageCompliancePolicy;
export const CiImageCompliancePolicy: typeof import("./ciImageCompliancePolicy").CiImageCompliancePolicy = null as any;
utilities.lazyLoad(exports, ["CiImageCompliancePolicy"], () => require("./ciImageCompliancePolicy"));

export { CiImageVulnerabilityPolicyArgs, CiImageVulnerabilityPolicyState } from "./ciImageVulnerabilityPolicy";
export type CiImageVulnerabilityPolicy = import("./ciImageVulnerabilityPolicy").CiImageVulnerabilityPolicy;
export const CiImageVulnerabilityPolicy: typeof import("./ciImageVulnerabilityPolicy").CiImageVulnerabilityPolicy = null as any;
utilities.lazyLoad(exports, ["CiImageVulnerabilityPolicy"], () => require("./ciImageVulnerabilityPolicy"));

export { CloudAccountArgs, CloudAccountState } from "./cloudAccount";
export type CloudAccount = import("./cloudAccount").CloudAccount;
export const CloudAccount: typeof import("./cloudAccount").CloudAccount = null as any;
utilities.lazyLoad(exports, ["CloudAccount"], () => require("./cloudAccount"));

export { CoderepoCompliancePolicyArgs, CoderepoCompliancePolicyState } from "./coderepoCompliancePolicy";
export type CoderepoCompliancePolicy = import("./coderepoCompliancePolicy").CoderepoCompliancePolicy;
export const CoderepoCompliancePolicy: typeof import("./coderepoCompliancePolicy").CoderepoCompliancePolicy = null as any;
utilities.lazyLoad(exports, ["CoderepoCompliancePolicy"], () => require("./coderepoCompliancePolicy"));

export { CoderepoVulnerabilityPolicyArgs, CoderepoVulnerabilityPolicyState } from "./coderepoVulnerabilityPolicy";
export type CoderepoVulnerabilityPolicy = import("./coderepoVulnerabilityPolicy").CoderepoVulnerabilityPolicy;
export const CoderepoVulnerabilityPolicy: typeof import("./coderepoVulnerabilityPolicy").CoderepoVulnerabilityPolicy = null as any;
utilities.lazyLoad(exports, ["CoderepoVulnerabilityPolicy"], () => require("./coderepoVulnerabilityPolicy"));

export { CollectionArgs, CollectionState } from "./collection";
export type Collection = import("./collection").Collection;
export const Collection: typeof import("./collection").Collection = null as any;
utilities.lazyLoad(exports, ["Collection"], () => require("./collection"));

export { ContainerCompliancePolicyArgs, ContainerCompliancePolicyState } from "./containerCompliancePolicy";
export type ContainerCompliancePolicy = import("./containerCompliancePolicy").ContainerCompliancePolicy;
export const ContainerCompliancePolicy: typeof import("./containerCompliancePolicy").ContainerCompliancePolicy = null as any;
utilities.lazyLoad(exports, ["ContainerCompliancePolicy"], () => require("./containerCompliancePolicy"));

export { ContainerRuntimePolicyArgs, ContainerRuntimePolicyState } from "./containerRuntimePolicy";
export type ContainerRuntimePolicy = import("./containerRuntimePolicy").ContainerRuntimePolicy;
export const ContainerRuntimePolicy: typeof import("./containerRuntimePolicy").ContainerRuntimePolicy = null as any;
utilities.lazyLoad(exports, ["ContainerRuntimePolicy"], () => require("./containerRuntimePolicy"));

export { CredentialArgs, CredentialState } from "./credential";
export type Credential = import("./credential").Credential;
export const Credential: typeof import("./credential").Credential = null as any;
utilities.lazyLoad(exports, ["Credential"], () => require("./credential"));

export { CustomComplianceArgs, CustomComplianceState } from "./customCompliance";
export type CustomCompliance = import("./customCompliance").CustomCompliance;
export const CustomCompliance: typeof import("./customCompliance").CustomCompliance = null as any;
utilities.lazyLoad(exports, ["CustomCompliance"], () => require("./customCompliance"));

export { CustomRuleArgs, CustomRuleState } from "./customRule";
export type CustomRule = import("./customRule").CustomRule;
export const CustomRule: typeof import("./customRule").CustomRule = null as any;
utilities.lazyLoad(exports, ["CustomRule"], () => require("./customRule"));

export { GetCustomComplianceArgs, GetCustomComplianceResult, GetCustomComplianceOutputArgs } from "./getCustomCompliance";
export const getCustomCompliance: typeof import("./getCustomCompliance").getCustomCompliance = null as any;
export const getCustomComplianceOutput: typeof import("./getCustomCompliance").getCustomComplianceOutput = null as any;
utilities.lazyLoad(exports, ["getCustomCompliance","getCustomComplianceOutput"], () => require("./getCustomCompliance"));

export { GetCustomRuleArgs, GetCustomRuleResult, GetCustomRuleOutputArgs } from "./getCustomRule";
export const getCustomRule: typeof import("./getCustomRule").getCustomRule = null as any;
export const getCustomRuleOutput: typeof import("./getCustomRule").getCustomRuleOutput = null as any;
utilities.lazyLoad(exports, ["getCustomRule","getCustomRuleOutput"], () => require("./getCustomRule"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { HostCompliancePolicyArgs, HostCompliancePolicyState } from "./hostCompliancePolicy";
export type HostCompliancePolicy = import("./hostCompliancePolicy").HostCompliancePolicy;
export const HostCompliancePolicy: typeof import("./hostCompliancePolicy").HostCompliancePolicy = null as any;
utilities.lazyLoad(exports, ["HostCompliancePolicy"], () => require("./hostCompliancePolicy"));

export { HostRuntimePolicyArgs, HostRuntimePolicyState } from "./hostRuntimePolicy";
export type HostRuntimePolicy = import("./hostRuntimePolicy").HostRuntimePolicy;
export const HostRuntimePolicy: typeof import("./hostRuntimePolicy").HostRuntimePolicy = null as any;
utilities.lazyLoad(exports, ["HostRuntimePolicy"], () => require("./hostRuntimePolicy"));

export { HostVulnerabilityPolicyArgs, HostVulnerabilityPolicyState } from "./hostVulnerabilityPolicy";
export type HostVulnerabilityPolicy = import("./hostVulnerabilityPolicy").HostVulnerabilityPolicy;
export const HostVulnerabilityPolicy: typeof import("./hostVulnerabilityPolicy").HostVulnerabilityPolicy = null as any;
utilities.lazyLoad(exports, ["HostVulnerabilityPolicy"], () => require("./hostVulnerabilityPolicy"));

export { ImageVulnerabilityPolicyArgs, ImageVulnerabilityPolicyState } from "./imageVulnerabilityPolicy";
export type ImageVulnerabilityPolicy = import("./imageVulnerabilityPolicy").ImageVulnerabilityPolicy;
export const ImageVulnerabilityPolicy: typeof import("./imageVulnerabilityPolicy").ImageVulnerabilityPolicy = null as any;
utilities.lazyLoad(exports, ["ImageVulnerabilityPolicy"], () => require("./imageVulnerabilityPolicy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RegistryArgs, RegistryState } from "./registry";
export type Registry = import("./registry").Registry;
export const Registry: typeof import("./registry").Registry = null as any;
utilities.lazyLoad(exports, ["Registry"], () => require("./registry"));

export { RegistrySettingsArgs, RegistrySettingsState } from "./registrySettings";
export type RegistrySettings = import("./registrySettings").RegistrySettings;
export const RegistrySettings: typeof import("./registrySettings").RegistrySettings = null as any;
utilities.lazyLoad(exports, ["RegistrySettings"], () => require("./registrySettings"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "prismacloudcompute:index/admissionPolicy:AdmissionPolicy":
                return new AdmissionPolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/alertprofile:Alertprofile":
                return new Alertprofile(name, <any>undefined, { urn })
            case "prismacloudcompute:index/ciCoderepoCompliancePolicy:CiCoderepoCompliancePolicy":
                return new CiCoderepoCompliancePolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/ciCoderepoVulnerabilityPolicy:CiCoderepoVulnerabilityPolicy":
                return new CiCoderepoVulnerabilityPolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/ciImageCompliancePolicy:CiImageCompliancePolicy":
                return new CiImageCompliancePolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/ciImageVulnerabilityPolicy:CiImageVulnerabilityPolicy":
                return new CiImageVulnerabilityPolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/cloudAccount:CloudAccount":
                return new CloudAccount(name, <any>undefined, { urn })
            case "prismacloudcompute:index/coderepoCompliancePolicy:CoderepoCompliancePolicy":
                return new CoderepoCompliancePolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/coderepoVulnerabilityPolicy:CoderepoVulnerabilityPolicy":
                return new CoderepoVulnerabilityPolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/collection:Collection":
                return new Collection(name, <any>undefined, { urn })
            case "prismacloudcompute:index/containerCompliancePolicy:ContainerCompliancePolicy":
                return new ContainerCompliancePolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/containerRuntimePolicy:ContainerRuntimePolicy":
                return new ContainerRuntimePolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/credential:Credential":
                return new Credential(name, <any>undefined, { urn })
            case "prismacloudcompute:index/customCompliance:CustomCompliance":
                return new CustomCompliance(name, <any>undefined, { urn })
            case "prismacloudcompute:index/customRule:CustomRule":
                return new CustomRule(name, <any>undefined, { urn })
            case "prismacloudcompute:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "prismacloudcompute:index/hostCompliancePolicy:HostCompliancePolicy":
                return new HostCompliancePolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/hostRuntimePolicy:HostRuntimePolicy":
                return new HostRuntimePolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/hostVulnerabilityPolicy:HostVulnerabilityPolicy":
                return new HostVulnerabilityPolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/imageVulnerabilityPolicy:ImageVulnerabilityPolicy":
                return new ImageVulnerabilityPolicy(name, <any>undefined, { urn })
            case "prismacloudcompute:index/registry:Registry":
                return new Registry(name, <any>undefined, { urn })
            case "prismacloudcompute:index/registrySettings:RegistrySettings":
                return new RegistrySettings(name, <any>undefined, { urn })
            case "prismacloudcompute:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "prismacloudcompute:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/admissionPolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/alertprofile", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/ciCoderepoCompliancePolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/ciCoderepoVulnerabilityPolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/ciImageCompliancePolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/ciImageVulnerabilityPolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/cloudAccount", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/coderepoCompliancePolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/coderepoVulnerabilityPolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/collection", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/containerCompliancePolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/containerRuntimePolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/credential", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/customCompliance", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/customRule", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/group", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/hostCompliancePolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/hostRuntimePolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/hostVulnerabilityPolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/imageVulnerabilityPolicy", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/registry", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/registrySettings", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/role", _module)
pulumi.runtime.registerResourceModule("prismacloudcompute", "index/user", _module)
pulumi.runtime.registerResourcePackage("prismacloudcompute", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:prismacloudcompute") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
