// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AppCnameArgs, AppCnameState } from "./appCname";
export type AppCname = import("./appCname").AppCname;
export const AppCname: typeof import("./appCname").AppCname = null as any;
utilities.lazyLoad(exports, ["AppCname"], () => require("./appCname"));

export { AppDeployArgs, AppDeployState } from "./appDeploy";
export type AppDeploy = import("./appDeploy").AppDeploy;
export const AppDeploy: typeof import("./appDeploy").AppDeploy = null as any;
utilities.lazyLoad(exports, ["AppDeploy"], () => require("./appDeploy"));

export { AppEnvArgs, AppEnvState } from "./appEnv";
export type AppEnv = import("./appEnv").AppEnv;
export const AppEnv: typeof import("./appEnv").AppEnv = null as any;
utilities.lazyLoad(exports, ["AppEnv"], () => require("./appEnv"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { FrameworkArgs, FrameworkState } from "./framework";
export type Framework = import("./framework").Framework;
export const Framework: typeof import("./framework").Framework = null as any;
utilities.lazyLoad(exports, ["Framework"], () => require("./framework"));

export { GetAppArgs, GetAppResult, GetAppOutputArgs } from "./getApp";
export const getApp: typeof import("./getApp").getApp = null as any;
export const getAppOutput: typeof import("./getApp").getAppOutput = null as any;
utilities.lazyLoad(exports, ["getApp","getAppOutput"], () => require("./getApp"));

export { GetAppsArgs, GetAppsResult, GetAppsOutputArgs } from "./getApps";
export const getApps: typeof import("./getApps").getApps = null as any;
export const getAppsOutput: typeof import("./getApps").getAppsOutput = null as any;
utilities.lazyLoad(exports, ["getApps","getAppsOutput"], () => require("./getApps"));

export { GetFrameworkArgs, GetFrameworkResult, GetFrameworkOutputArgs } from "./getFramework";
export const getFramework: typeof import("./getFramework").getFramework = null as any;
export const getFrameworkOutput: typeof import("./getFramework").getFrameworkOutput = null as any;
utilities.lazyLoad(exports, ["getFramework","getFrameworkOutput"], () => require("./getFramework"));

export { GetFrameworksArgs, GetFrameworksResult, GetFrameworksOutputArgs } from "./getFrameworks";
export const getFrameworks: typeof import("./getFrameworks").getFrameworks = null as any;
export const getFrameworksOutput: typeof import("./getFrameworks").getFrameworksOutput = null as any;
utilities.lazyLoad(exports, ["getFrameworks","getFrameworksOutput"], () => require("./getFrameworks"));

export { NetworkPolicyArgs, NetworkPolicyState } from "./networkPolicy";
export type NetworkPolicy = import("./networkPolicy").NetworkPolicy;
export const NetworkPolicy: typeof import("./networkPolicy").NetworkPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkPolicy"], () => require("./networkPolicy"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PlanArgs, PlanState } from "./plan";
export type Plan = import("./plan").Plan;
export const Plan: typeof import("./plan").Plan = null as any;
utilities.lazyLoad(exports, ["Plan"], () => require("./plan"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleAssociationArgs, RoleAssociationState } from "./roleAssociation";
export type RoleAssociation = import("./roleAssociation").RoleAssociation;
export const RoleAssociation: typeof import("./roleAssociation").RoleAssociation = null as any;
utilities.lazyLoad(exports, ["RoleAssociation"], () => require("./roleAssociation"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "shipa:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "shipa:index/appCname:AppCname":
                return new AppCname(name, <any>undefined, { urn })
            case "shipa:index/appDeploy:AppDeploy":
                return new AppDeploy(name, <any>undefined, { urn })
            case "shipa:index/appEnv:AppEnv":
                return new AppEnv(name, <any>undefined, { urn })
            case "shipa:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "shipa:index/framework:Framework":
                return new Framework(name, <any>undefined, { urn })
            case "shipa:index/networkPolicy:NetworkPolicy":
                return new NetworkPolicy(name, <any>undefined, { urn })
            case "shipa:index/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "shipa:index/plan:Plan":
                return new Plan(name, <any>undefined, { urn })
            case "shipa:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "shipa:index/roleAssociation:RoleAssociation":
                return new RoleAssociation(name, <any>undefined, { urn })
            case "shipa:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "shipa:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("shipa", "index/app", _module)
pulumi.runtime.registerResourceModule("shipa", "index/appCname", _module)
pulumi.runtime.registerResourceModule("shipa", "index/appDeploy", _module)
pulumi.runtime.registerResourceModule("shipa", "index/appEnv", _module)
pulumi.runtime.registerResourceModule("shipa", "index/cluster", _module)
pulumi.runtime.registerResourceModule("shipa", "index/framework", _module)
pulumi.runtime.registerResourceModule("shipa", "index/networkPolicy", _module)
pulumi.runtime.registerResourceModule("shipa", "index/permission", _module)
pulumi.runtime.registerResourceModule("shipa", "index/plan", _module)
pulumi.runtime.registerResourceModule("shipa", "index/role", _module)
pulumi.runtime.registerResourceModule("shipa", "index/roleAssociation", _module)
pulumi.runtime.registerResourceModule("shipa", "index/team", _module)
pulumi.runtime.registerResourceModule("shipa", "index/user", _module)
pulumi.runtime.registerResourcePackage("shipa", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:shipa") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
