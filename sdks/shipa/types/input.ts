// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppApp {
    description?: pulumi.Input<string>;
    entrypoints?: pulumi.Input<pulumi.Input<inputs.AppAppEntrypoint>[]>;
    environment: pulumi.Input<string>;
    error?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    locks?: pulumi.Input<pulumi.Input<inputs.AppAppLock>[]>;
    name: pulumi.Input<string>;
    org?: pulumi.Input<string>;
    plans?: pulumi.Input<pulumi.Input<inputs.AppAppPlan>[]>;
    platform?: pulumi.Input<string>;
    routers?: pulumi.Input<pulumi.Input<inputs.AppAppRouter>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    teamowner: pulumi.Input<string>;
    units?: pulumi.Input<pulumi.Input<inputs.AppAppUnit>[]>;
}

export interface AppAppEntrypoint {
    cname: pulumi.Input<string>;
    scheme: pulumi.Input<string>;
}

export interface AppAppLock {
    acquireDate: pulumi.Input<string>;
    locked: pulumi.Input<boolean>;
    owner: pulumi.Input<string>;
    reason: pulumi.Input<string>;
}

export interface AppAppPlan {
    cpushare: pulumi.Input<number>;
    default: pulumi.Input<boolean>;
    memory: pulumi.Input<number>;
    name: pulumi.Input<string>;
    org: pulumi.Input<string>;
    public: pulumi.Input<boolean>;
    swap: pulumi.Input<number>;
    teams: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AppAppRouter {
    address: pulumi.Input<string>;
    default: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    opts: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}

export interface AppAppUnit {
    addresses: pulumi.Input<pulumi.Input<inputs.AppAppUnitAddress>[]>;
    appName: pulumi.Input<string>;
    hostAddr: pulumi.Input<string>;
    hostPort: pulumi.Input<string>;
    id: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    name: pulumi.Input<string>;
    org: pulumi.Input<string>;
    processName: pulumi.Input<string>;
    status: pulumi.Input<string>;
    type: pulumi.Input<string>;
    version: pulumi.Input<string>;
}

export interface AppAppUnitAddress {
    forceQuery: pulumi.Input<boolean>;
    fragment: pulumi.Input<string>;
    host: pulumi.Input<string>;
    opaque: pulumi.Input<string>;
    path: pulumi.Input<string>;
    rawFragment: pulumi.Input<string>;
    rawPath: pulumi.Input<string>;
    rawQuery: pulumi.Input<string>;
    scheme: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface AppDeployDeploy {
    description?: pulumi.Input<string>;
    detach?: pulumi.Input<boolean>;
    environment?: pulumi.Input<string>;
    envs?: pulumi.Input<pulumi.Input<string>[]>;
    image: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    plans?: pulumi.Input<pulumi.Input<inputs.AppDeployDeployPlan>[]>;
    port?: pulumi.Input<number>;
    privateImage?: pulumi.Input<boolean>;
    protocol?: pulumi.Input<string>;
    registrySecret?: pulumi.Input<string>;
    registryUser?: pulumi.Input<string>;
    routers?: pulumi.Input<pulumi.Input<inputs.AppDeployDeployRouter>[]>;
    shipaYaml?: pulumi.Input<string>;
    stepInterval?: pulumi.Input<number>;
    stepWeight?: pulumi.Input<number>;
    steps?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    team?: pulumi.Input<string>;
}

export interface AppDeployDeployPlan {
    cpushare: pulumi.Input<number>;
    default: pulumi.Input<boolean>;
    memory: pulumi.Input<number>;
    name: pulumi.Input<string>;
    org: pulumi.Input<string>;
    public: pulumi.Input<boolean>;
    swap: pulumi.Input<number>;
    teams: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AppDeployDeployRouter {
    address: pulumi.Input<string>;
    default: pulumi.Input<boolean>;
    name: pulumi.Input<string>;
    opts: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}

export interface AppDeployTimeouts {
    default?: pulumi.Input<string>;
}

export interface AppEnvAppEnv {
    envs: pulumi.Input<pulumi.Input<inputs.AppEnvAppEnvEnv>[]>;
    norestart?: pulumi.Input<boolean>;
    private?: pulumi.Input<boolean>;
}

export interface AppEnvAppEnvEnv {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ClusterCluster {
    endpoint: pulumi.Input<inputs.ClusterClusterEndpoint>;
    name: pulumi.Input<string>;
    resources: pulumi.Input<pulumi.Input<inputs.ClusterClusterResource>[]>;
}

export interface ClusterClusterEndpoint {
    addresses: pulumi.Input<pulumi.Input<string>[]>;
    caCert: pulumi.Input<string>;
    clientCert?: pulumi.Input<string>;
    clientKey?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ClusterClusterResource {
    ingressControllers?: pulumi.Input<pulumi.Input<inputs.ClusterClusterResourceIngressController>[]>;
}

export interface ClusterClusterResourceIngressController {
    acmeEmail?: pulumi.Input<string>;
    acmeServer?: pulumi.Input<string>;
    debug?: pulumi.Input<boolean>;
    httpPort?: pulumi.Input<number>;
    httpsPort?: pulumi.Input<number>;
    ingressIp?: pulumi.Input<string>;
    protectedPort?: pulumi.Input<number>;
    serviceType?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface FrameworkFramework {
    name: pulumi.Input<string>;
    provisioner: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.FrameworkFrameworkResources>;
}

export interface FrameworkFrameworkResources {
    general?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneral>;
    shipaNode?: pulumi.Input<inputs.FrameworkFrameworkResourcesShipaNode>;
}

export interface FrameworkFrameworkResourcesGeneral {
    access?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralAccess>;
    appQuota?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralAppQuota>;
    containerPolicy?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralContainerPolicy>;
    domainPolicy?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralDomainPolicy>;
    networkPolicy?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicy>;
    nodeSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNodeSelector>;
    plan?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralPlan>;
    podAutoScaler?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralPodAutoScaler>;
    router?: pulumi.Input<string>;
    security?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralSecurity>;
    services?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralServices>;
    setup?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralSetup>;
    volumes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralAccess {
    appends?: pulumi.Input<pulumi.Input<string>[]>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralAppQuota {
    limit?: pulumi.Input<string>;
}

export interface FrameworkFrameworkResourcesGeneralContainerPolicy {
    allowedHosts?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralDomainPolicy {
    allowedCnames?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicy {
    disableAppPolicies?: pulumi.Input<boolean>;
    egress?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgress>;
    ingress?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngress>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgress {
    customRules?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRule>[]>;
    policyMode?: pulumi.Input<string>;
    shipaRules?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRule>[]>;
    shipaRulesEnableds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePort>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelector>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePort>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelector>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngress {
    customRules?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRule>[]>;
    policyMode?: pulumi.Input<string>;
    shipaRules?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRule>[]>;
    shipaRulesEnableds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePort>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelector>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePort>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelector>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface FrameworkFrameworkResourcesGeneralNodeSelector {
    strict?: pulumi.Input<boolean>;
    terms: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface FrameworkFrameworkResourcesGeneralPlan {
    name?: pulumi.Input<string>;
}

export interface FrameworkFrameworkResourcesGeneralPodAutoScaler {
    disableAppOverride?: pulumi.Input<boolean>;
    maxReplicas: pulumi.Input<number>;
    minReplicas: pulumi.Input<number>;
    targetCpuUtilizationPercentage: pulumi.Input<number>;
}

export interface FrameworkFrameworkResourcesGeneralSecurity {
    disableScan?: pulumi.Input<boolean>;
    ignoreComponents?: pulumi.Input<pulumi.Input<string>[]>;
    ignoreCves?: pulumi.Input<pulumi.Input<string>[]>;
    scanPlatformLayers?: pulumi.Input<boolean>;
}

export interface FrameworkFrameworkResourcesGeneralServices {
    appends?: pulumi.Input<pulumi.Input<string>[]>;
    blacklists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesGeneralSetup {
    default?: pulumi.Input<boolean>;
    kubernetesNamespace?: pulumi.Input<string>;
    provisioner?: pulumi.Input<string>;
    public?: pulumi.Input<boolean>;
}

export interface FrameworkFrameworkResourcesShipaNode {
    autoScale?: pulumi.Input<inputs.FrameworkFrameworkResourcesShipaNodeAutoScale>;
    drivers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FrameworkFrameworkResourcesShipaNodeAutoScale {
    maxContainer?: pulumi.Input<number>;
    maxMemory?: pulumi.Input<number>;
    rebalance?: pulumi.Input<boolean>;
    scaleDown?: pulumi.Input<number>;
}

export interface NetworkPolicyNetworkPolicy {
    app: pulumi.Input<string>;
    networkPolicy?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicy>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicy {
    egress?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgress>;
    ingress?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngress>;
    restartApp?: pulumi.Input<boolean>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgress {
    customRules?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRule>[]>;
    policyMode?: pulumi.Input<string>;
    shipaRules?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRule>[]>;
    shipaRulesEnableds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePort>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelector>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePort>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelector>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngress {
    customRules?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRule>[]>;
    policyMode?: pulumi.Input<string>;
    shipaRules?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRule>[]>;
    shipaRulesEnableds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePort>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelector>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRule {
    allowedApps?: pulumi.Input<pulumi.Input<string>[]>;
    allowedFrameworks?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    peers?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeer>[]>;
    ports?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePort>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeer {
    ipBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    namespaceSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelector>;
    podSelector?: pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelector>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelector {
    matchExpressions?: pulumi.Input<pulumi.Input<inputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression>[]>;
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression {
    key?: pulumi.Input<string>;
    operator?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePort {
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface PlanPlan {
    cpushare: pulumi.Input<number>;
    default?: pulumi.Input<boolean>;
    memory: pulumi.Input<number>;
    name: pulumi.Input<string>;
    org?: pulumi.Input<string>;
    public?: pulumi.Input<boolean>;
    swap: pulumi.Input<number>;
    teams: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TeamTeam {
    name: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
