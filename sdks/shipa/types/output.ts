// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AppApp {
    description?: string;
    entrypoints: outputs.AppAppEntrypoint[];
    environment: string;
    error: string;
    ip: string;
    locks: outputs.AppAppLock[];
    name: string;
    org: string;
    plans: outputs.AppAppPlan[];
    platform?: string;
    routers: outputs.AppAppRouter[];
    status: string;
    tags?: string[];
    teamowner: string;
    units: outputs.AppAppUnit[];
}

export interface AppAppEntrypoint {
    cname: string;
    scheme: string;
}

export interface AppAppLock {
    acquireDate: string;
    locked: boolean;
    owner: string;
    reason: string;
}

export interface AppAppPlan {
    cpushare: number;
    default: boolean;
    memory: number;
    name: string;
    org: string;
    public: boolean;
    swap: number;
    teams: string[];
}

export interface AppAppRouter {
    address: string;
    default: boolean;
    name: string;
    opts: {[key: string]: string};
    type: string;
}

export interface AppAppUnit {
    addresses: outputs.AppAppUnitAddress[];
    appName: string;
    hostAddr: string;
    hostPort: string;
    id: string;
    ip: string;
    name: string;
    org: string;
    processName: string;
    status: string;
    type: string;
    version: string;
}

export interface AppAppUnitAddress {
    forceQuery: boolean;
    fragment: string;
    host: string;
    opaque: string;
    path: string;
    rawFragment: string;
    rawPath: string;
    rawQuery: string;
    scheme: string;
    user: string;
}

export interface AppDeployDeploy {
    description?: string;
    detach?: boolean;
    environment?: string;
    envs?: string[];
    image: string;
    message?: string;
    origin?: string;
    plans: outputs.AppDeployDeployPlan[];
    port?: number;
    privateImage?: boolean;
    protocol?: string;
    registrySecret?: string;
    registryUser?: string;
    routers: outputs.AppDeployDeployRouter[];
    shipaYaml?: string;
    stepInterval?: number;
    stepWeight?: number;
    steps?: number;
    tags?: string[];
    team?: string;
}

export interface AppDeployDeployPlan {
    cpushare: number;
    default: boolean;
    memory: number;
    name: string;
    org: string;
    public: boolean;
    swap: number;
    teams: string[];
}

export interface AppDeployDeployRouter {
    address: string;
    default: boolean;
    name: string;
    opts: {[key: string]: string};
    type: string;
}

export interface AppDeployTimeouts {
    default?: string;
}

export interface AppEnvAppEnv {
    envs: outputs.AppEnvAppEnvEnv[];
    norestart?: boolean;
    private?: boolean;
}

export interface AppEnvAppEnvEnv {
    name: string;
    value: string;
}

export interface ClusterCluster {
    endpoint: outputs.ClusterClusterEndpoint;
    name: string;
    resources: outputs.ClusterClusterResource[];
}

export interface ClusterClusterEndpoint {
    addresses: string[];
    caCert: string;
    clientCert?: string;
    clientKey?: string;
    password?: string;
    token?: string;
    username?: string;
}

export interface ClusterClusterResource {
    ingressControllers?: outputs.ClusterClusterResourceIngressController[];
}

export interface ClusterClusterResourceIngressController {
    acmeEmail?: string;
    acmeServer?: string;
    debug?: boolean;
    httpPort?: number;
    httpsPort?: number;
    ingressIp?: string;
    protectedPort?: number;
    serviceType?: string;
    type?: string;
}

export interface FrameworkFramework {
    name: string;
    provisioner: string;
    resources?: outputs.FrameworkFrameworkResources;
}

export interface FrameworkFrameworkResources {
    general?: outputs.FrameworkFrameworkResourcesGeneral;
    shipaNode?: outputs.FrameworkFrameworkResourcesShipaNode;
}

export interface FrameworkFrameworkResourcesGeneral {
    access?: outputs.FrameworkFrameworkResourcesGeneralAccess;
    appQuota?: outputs.FrameworkFrameworkResourcesGeneralAppQuota;
    containerPolicy?: outputs.FrameworkFrameworkResourcesGeneralContainerPolicy;
    domainPolicy?: outputs.FrameworkFrameworkResourcesGeneralDomainPolicy;
    networkPolicy?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicy;
    nodeSelector?: outputs.FrameworkFrameworkResourcesGeneralNodeSelector;
    plan?: outputs.FrameworkFrameworkResourcesGeneralPlan;
    podAutoScaler?: outputs.FrameworkFrameworkResourcesGeneralPodAutoScaler;
    router?: string;
    security?: outputs.FrameworkFrameworkResourcesGeneralSecurity;
    services?: outputs.FrameworkFrameworkResourcesGeneralServices;
    setup?: outputs.FrameworkFrameworkResourcesGeneralSetup;
    volumes?: string[];
}

export interface FrameworkFrameworkResourcesGeneralAccess {
    appends?: string[];
    blacklists?: string[];
}

export interface FrameworkFrameworkResourcesGeneralAppQuota {
    limit?: string;
}

export interface FrameworkFrameworkResourcesGeneralContainerPolicy {
    allowedHosts?: string[];
}

export interface FrameworkFrameworkResourcesGeneralDomainPolicy {
    allowedCnames?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicy {
    disableAppPolicies?: boolean;
    egress?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgress;
    ingress?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngress;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgress {
    customRules?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRule[];
    policyMode?: string;
    shipaRules?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRule[];
    shipaRulesEnableds?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeer[];
    ports?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePort[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelector;
    podSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelector;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressCustomRulePort {
    port?: number;
    protocol?: string;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeer[];
    ports?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePort[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelector;
    podSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelector;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyEgressShipaRulePort {
    port?: number;
    protocol?: string;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngress {
    customRules?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRule[];
    policyMode?: string;
    shipaRules?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRule[];
    shipaRulesEnableds?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeer[];
    ports?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePort[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelector;
    podSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelector;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressCustomRulePort {
    port?: number;
    protocol?: string;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeer[];
    ports?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePort[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelector;
    podSelector?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelector;
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelector {
    matchExpressions?: outputs.FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface FrameworkFrameworkResourcesGeneralNetworkPolicyIngressShipaRulePort {
    port?: number;
    protocol?: string;
}

export interface FrameworkFrameworkResourcesGeneralNodeSelector {
    strict?: boolean;
    terms: {[key: string]: string};
}

export interface FrameworkFrameworkResourcesGeneralPlan {
    name?: string;
}

export interface FrameworkFrameworkResourcesGeneralPodAutoScaler {
    disableAppOverride?: boolean;
    maxReplicas: number;
    minReplicas: number;
    targetCpuUtilizationPercentage: number;
}

export interface FrameworkFrameworkResourcesGeneralSecurity {
    disableScan?: boolean;
    ignoreComponents?: string[];
    ignoreCves?: string[];
    scanPlatformLayers?: boolean;
}

export interface FrameworkFrameworkResourcesGeneralServices {
    appends?: string[];
    blacklists?: string[];
}

export interface FrameworkFrameworkResourcesGeneralSetup {
    default?: boolean;
    kubernetesNamespace?: string;
    provisioner?: string;
    public?: boolean;
}

export interface FrameworkFrameworkResourcesShipaNode {
    autoScale?: outputs.FrameworkFrameworkResourcesShipaNodeAutoScale;
    drivers?: string[];
}

export interface FrameworkFrameworkResourcesShipaNodeAutoScale {
    maxContainer?: number;
    maxMemory?: number;
    rebalance?: boolean;
    scaleDown?: number;
}

export interface GetAppApp {
    description: string;
    entrypoints: outputs.GetAppAppEntrypoint[];
    environments: outputs.GetAppAppEnvironment[];
    error: string;
    ip: string;
    locks: outputs.GetAppAppLock[];
    name: string;
    org: string;
    plans: outputs.GetAppAppPlan[];
    platform: string;
    routers: outputs.GetAppAppRouter[];
    status: string;
    tags: string[];
    teamowner: string;
    units: outputs.GetAppAppUnit[];
}

export interface GetAppAppEntrypoint {
    cname: string;
    scheme: string;
}

export interface GetAppAppEnvironment {
    framework: string;
    id: string;
    name: string;
    namespace: string;
}

export interface GetAppAppLock {
    acquireDate: string;
    locked: boolean;
    owner: string;
    reason: string;
}

export interface GetAppAppPlan {
    cpushare: number;
    default: boolean;
    memory: number;
    name: string;
    org: string;
    public: boolean;
    swap: number;
    teams: string[];
}

export interface GetAppAppRouter {
    address: string;
    default: boolean;
    name: string;
    opts: {[key: string]: string};
    type: string;
}

export interface GetAppAppUnit {
    addresses: outputs.GetAppAppUnitAddress[];
    appName: string;
    hostAddr: string;
    hostPort: string;
    id: string;
    ip: string;
    name: string;
    org: string;
    processName: string;
    status: string;
    type: string;
    version: string;
}

export interface GetAppAppUnitAddress {
    forceQuery: boolean;
    fragment: string;
    host: string;
    opaque: string;
    path: string;
    rawFragment: string;
    rawPath: string;
    rawQuery: string;
    scheme: string;
    user: string;
}

export interface GetAppsApp {
    description: string;
    entrypoints: outputs.GetAppsAppEntrypoint[];
    environments: outputs.GetAppsAppEnvironment[];
    error: string;
    ip: string;
    locks: outputs.GetAppsAppLock[];
    name: string;
    org: string;
    plans: outputs.GetAppsAppPlan[];
    platform: string;
    routers: outputs.GetAppsAppRouter[];
    status: string;
    tags: string[];
    teamowner: string;
    units: outputs.GetAppsAppUnit[];
}

export interface GetAppsAppEntrypoint {
    cname: string;
    scheme: string;
}

export interface GetAppsAppEnvironment {
    framework: string;
    id: string;
    name: string;
    namespace: string;
}

export interface GetAppsAppLock {
    acquireDate: string;
    locked: boolean;
    owner: string;
    reason: string;
}

export interface GetAppsAppPlan {
    cpushare: number;
    default: boolean;
    memory: number;
    name: string;
    org: string;
    public: boolean;
    swap: number;
    teams: string[];
}

export interface GetAppsAppRouter {
    address: string;
    default: boolean;
    name: string;
    opts: {[key: string]: string};
    type: string;
}

export interface GetAppsAppUnit {
    addresses: outputs.GetAppsAppUnitAddress[];
    appName: string;
    hostAddr: string;
    hostPort: string;
    id: string;
    ip: string;
    name: string;
    org: string;
    processName: string;
    status: string;
    type: string;
    version: string;
}

export interface GetAppsAppUnitAddress {
    forceQuery: boolean;
    fragment: string;
    host: string;
    opaque: string;
    path: string;
    rawFragment: string;
    rawPath: string;
    rawQuery: string;
    scheme: string;
    user: string;
}

export interface GetFrameworkFramework {
    alloweds: outputs.GetFrameworkFrameworkAllowed[];
    default: boolean;
    name: string;
    provisioner: string;
    public: boolean;
    teams: string[];
}

export interface GetFrameworkFrameworkAllowed {
    drivers: string[];
    plans: string[];
    teams: string[];
}

export interface GetFrameworksFramework {
    alloweds: outputs.GetFrameworksFrameworkAllowed[];
    default: boolean;
    name: string;
    provisioner: string;
    public: boolean;
    teams: string[];
}

export interface GetFrameworksFrameworkAllowed {
    drivers: string[];
    plans: string[];
    teams: string[];
}

export interface NetworkPolicyNetworkPolicy {
    app: string;
    networkPolicy?: outputs.NetworkPolicyNetworkPolicyNetworkPolicy;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicy {
    egress?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgress;
    ingress?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngress;
    restartApp?: boolean;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgress {
    customRules?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRule[];
    policyMode?: string;
    shipaRules?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRule[];
    shipaRulesEnableds?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeer[];
    ports?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePort[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelector;
    podSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelector;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressCustomRulePort {
    port?: number;
    protocol?: string;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeer[];
    ports?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePort[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelector;
    podSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelector;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyEgressShipaRulePort {
    port?: number;
    protocol?: string;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngress {
    customRules?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRule[];
    policyMode?: string;
    shipaRules?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRule[];
    shipaRulesEnableds?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeer[];
    ports?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePort[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelector;
    podSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelector;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressCustomRulePort {
    port?: number;
    protocol?: string;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRule {
    allowedApps?: string[];
    allowedFrameworks?: string[];
    description?: string;
    enabled?: boolean;
    id?: string;
    peers?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeer[];
    ports?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePort[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeer {
    ipBlocks?: string[];
    namespaceSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelector;
    podSelector?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelector;
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerNamespaceSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelector {
    matchExpressions?: outputs.NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression[];
    matchLabels?: {[key: string]: string};
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePeerPodSelectorMatchExpression {
    key?: string;
    operator?: string;
    values?: string[];
}

export interface NetworkPolicyNetworkPolicyNetworkPolicyIngressShipaRulePort {
    port?: number;
    protocol?: string;
}

export interface PlanPlan {
    cpushare: number;
    default?: boolean;
    memory: number;
    name: string;
    org?: string;
    public?: boolean;
    swap: number;
    teams: string[];
}

export interface TeamTeam {
    name: string;
    tags?: string[];
}

