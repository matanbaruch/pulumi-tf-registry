// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Deployment extends pulumi.CustomResource {
    /**
     * Get an existing Deployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DeploymentState, opts?: pulumi.CustomResourceOptions): Deployment {
        return new Deployment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra7:index/deployment:Deployment';

    /**
     * Returns true if the given object is an instance of Deployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Deployment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Deployment.__pulumiType;
    }

    public readonly businessgroupId!: pulumi.Output<string>;
    public readonly businessgroupName!: pulumi.Output<string>;
    public readonly catalogItemId!: pulumi.Output<string>;
    public readonly catalogItemName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    public readonly deploymentConfiguration!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly deploymentDestroy!: pulumi.Output<boolean | undefined>;
    public readonly deploymentDestroyAction!: pulumi.Output<string | undefined>;
    public /*out*/ readonly deploymentId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly expiryDate!: pulumi.Output<string>;
    public readonly leaseDays!: pulumi.Output<number>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly owners!: pulumi.Output<outputs.DeploymentOwner[]>;
    public readonly reasons!: pulumi.Output<string | undefined>;
    public /*out*/ readonly requestStatus!: pulumi.Output<string>;
    public readonly resourceConfigurations!: pulumi.Output<outputs.DeploymentResourceConfiguration[] | undefined>;
    public readonly waitTimeout!: pulumi.Output<number | undefined>;

    /**
     * Create a Deployment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DeploymentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DeploymentArgs | DeploymentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DeploymentState | undefined;
            resourceInputs["businessgroupId"] = state ? state.businessgroupId : undefined;
            resourceInputs["businessgroupName"] = state ? state.businessgroupName : undefined;
            resourceInputs["catalogItemId"] = state ? state.catalogItemId : undefined;
            resourceInputs["catalogItemName"] = state ? state.catalogItemName : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["deploymentConfiguration"] = state ? state.deploymentConfiguration : undefined;
            resourceInputs["deploymentDestroy"] = state ? state.deploymentDestroy : undefined;
            resourceInputs["deploymentDestroyAction"] = state ? state.deploymentDestroyAction : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiryDate"] = state ? state.expiryDate : undefined;
            resourceInputs["leaseDays"] = state ? state.leaseDays : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["reasons"] = state ? state.reasons : undefined;
            resourceInputs["requestStatus"] = state ? state.requestStatus : undefined;
            resourceInputs["resourceConfigurations"] = state ? state.resourceConfigurations : undefined;
            resourceInputs["waitTimeout"] = state ? state.waitTimeout : undefined;
        } else {
            const args = argsOrState as DeploymentArgs | undefined;
            resourceInputs["businessgroupId"] = args ? args.businessgroupId : undefined;
            resourceInputs["businessgroupName"] = args ? args.businessgroupName : undefined;
            resourceInputs["catalogItemId"] = args ? args.catalogItemId : undefined;
            resourceInputs["catalogItemName"] = args ? args.catalogItemName : undefined;
            resourceInputs["deploymentConfiguration"] = args ? args.deploymentConfiguration : undefined;
            resourceInputs["deploymentDestroy"] = args ? args.deploymentDestroy : undefined;
            resourceInputs["deploymentDestroyAction"] = args ? args.deploymentDestroyAction : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["expiryDate"] = args ? args.expiryDate : undefined;
            resourceInputs["leaseDays"] = args ? args.leaseDays : undefined;
            resourceInputs["reasons"] = args ? args.reasons : undefined;
            resourceInputs["resourceConfigurations"] = args ? args.resourceConfigurations : undefined;
            resourceInputs["waitTimeout"] = args ? args.waitTimeout : undefined;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["deploymentId"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["owners"] = undefined /*out*/;
            resourceInputs["requestStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Deployment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Deployment resources.
 */
export interface DeploymentState {
    businessgroupId?: pulumi.Input<string>;
    businessgroupName?: pulumi.Input<string>;
    catalogItemId?: pulumi.Input<string>;
    catalogItemName?: pulumi.Input<string>;
    createdDate?: pulumi.Input<string>;
    deploymentConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentDestroy?: pulumi.Input<boolean>;
    deploymentDestroyAction?: pulumi.Input<string>;
    deploymentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    expiryDate?: pulumi.Input<string>;
    leaseDays?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    owners?: pulumi.Input<pulumi.Input<inputs.DeploymentOwner>[]>;
    reasons?: pulumi.Input<string>;
    requestStatus?: pulumi.Input<string>;
    resourceConfigurations?: pulumi.Input<pulumi.Input<inputs.DeploymentResourceConfiguration>[]>;
    waitTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Deployment resource.
 */
export interface DeploymentArgs {
    businessgroupId?: pulumi.Input<string>;
    businessgroupName?: pulumi.Input<string>;
    catalogItemId?: pulumi.Input<string>;
    catalogItemName?: pulumi.Input<string>;
    deploymentConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentDestroy?: pulumi.Input<boolean>;
    deploymentDestroyAction?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    expiryDate?: pulumi.Input<string>;
    leaseDays?: pulumi.Input<number>;
    reasons?: pulumi.Input<string>;
    resourceConfigurations?: pulumi.Input<pulumi.Input<inputs.DeploymentResourceConfiguration>[]>;
    waitTimeout?: pulumi.Input<number>;
}
