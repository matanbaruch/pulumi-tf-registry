// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AwsVpcPeerV2 extends pulumi.CustomResource {
    /**
     * Get an existing AwsVpcPeerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsVpcPeerV2State, opts?: pulumi.CustomResourceOptions): AwsVpcPeerV2 {
        return new AwsVpcPeerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/awsVpcPeerV2:AwsVpcPeerV2';

    /**
     * Returns true if the given object is an instance of AwsVpcPeerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsVpcPeerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsVpcPeerV2.__pulumiType;
    }

    /**
     * ID of the Cluster Data Centre
     */
    public readonly cdcId!: pulumi.Output<string>;
    /**
     * ID of the current data centre VPC.
     */
    public readonly dataCentreVpcId!: pulumi.Output<string>;
    /**
     * The AWS account ID of the owner of the accepter VPC.
     */
    public readonly peerAwsAccountId!: pulumi.Output<string>;
    /**
     * Region code for the accepter VPC.
     */
    public readonly peerRegion!: pulumi.Output<string>;
    /**
     * The subnets for the peering VPC.
     */
    public readonly peerSubnets!: pulumi.Output<string[]>;
    /**
     * ID of the VPC with which the peering connection is created.
     */
    public readonly peerVpcId!: pulumi.Output<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `pending-acceptance`, `failed`, `expired`, `provisioning`, `active`,
     * `deleting`, `deleted` or `rejected`.
     */
    public readonly statusCode!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AwsVpcPeerV2Timeouts | undefined>;

    /**
     * Create a AwsVpcPeerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsVpcPeerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsVpcPeerV2Args | AwsVpcPeerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsVpcPeerV2State | undefined;
            resourceInputs["cdcId"] = state ? state.cdcId : undefined;
            resourceInputs["dataCentreVpcId"] = state ? state.dataCentreVpcId : undefined;
            resourceInputs["peerAwsAccountId"] = state ? state.peerAwsAccountId : undefined;
            resourceInputs["peerRegion"] = state ? state.peerRegion : undefined;
            resourceInputs["peerSubnets"] = state ? state.peerSubnets : undefined;
            resourceInputs["peerVpcId"] = state ? state.peerVpcId : undefined;
            resourceInputs["statusCode"] = state ? state.statusCode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AwsVpcPeerV2Args | undefined;
            if ((!args || args.cdcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdcId'");
            }
            if ((!args || args.peerAwsAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerAwsAccountId'");
            }
            if ((!args || args.peerRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerRegion'");
            }
            if ((!args || args.peerSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerSubnets'");
            }
            if ((!args || args.peerVpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpcId'");
            }
            resourceInputs["cdcId"] = args ? args.cdcId : undefined;
            resourceInputs["dataCentreVpcId"] = args ? args.dataCentreVpcId : undefined;
            resourceInputs["peerAwsAccountId"] = args ? args.peerAwsAccountId : undefined;
            resourceInputs["peerRegion"] = args ? args.peerRegion : undefined;
            resourceInputs["peerSubnets"] = args ? args.peerSubnets : undefined;
            resourceInputs["peerVpcId"] = args ? args.peerVpcId : undefined;
            resourceInputs["statusCode"] = args ? args.statusCode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsVpcPeerV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsVpcPeerV2 resources.
 */
export interface AwsVpcPeerV2State {
    /**
     * ID of the Cluster Data Centre
     */
    cdcId?: pulumi.Input<string>;
    /**
     * ID of the current data centre VPC.
     */
    dataCentreVpcId?: pulumi.Input<string>;
    /**
     * The AWS account ID of the owner of the accepter VPC.
     */
    peerAwsAccountId?: pulumi.Input<string>;
    /**
     * Region code for the accepter VPC.
     */
    peerRegion?: pulumi.Input<string>;
    /**
     * The subnets for the peering VPC.
     */
    peerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the VPC with which the peering connection is created.
     */
    peerVpcId?: pulumi.Input<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `pending-acceptance`, `failed`, `expired`, `provisioning`, `active`,
     * `deleting`, `deleted` or `rejected`.
     */
    statusCode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AwsVpcPeerV2Timeouts>;
}

/**
 * The set of arguments for constructing a AwsVpcPeerV2 resource.
 */
export interface AwsVpcPeerV2Args {
    /**
     * ID of the Cluster Data Centre
     */
    cdcId: pulumi.Input<string>;
    /**
     * ID of the current data centre VPC.
     */
    dataCentreVpcId?: pulumi.Input<string>;
    /**
     * The AWS account ID of the owner of the accepter VPC.
     */
    peerAwsAccountId: pulumi.Input<string>;
    /**
     * Region code for the accepter VPC.
     */
    peerRegion: pulumi.Input<string>;
    /**
     * The subnets for the peering VPC.
     */
    peerSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * ID of the VPC with which the peering connection is created.
     */
    peerVpcId: pulumi.Input<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `pending-acceptance`, `failed`, `expired`, `provisioning`, `active`,
     * `deleting`, `deleted` or `rejected`.
     */
    statusCode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AwsVpcPeerV2Timeouts>;
}
