// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterNetworkFirewallRulesV2 extends pulumi.CustomResource {
    /**
     * Get an existing ClusterNetworkFirewallRulesV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterNetworkFirewallRulesV2State, opts?: pulumi.CustomResourceOptions): ClusterNetworkFirewallRulesV2 {
        return new ClusterNetworkFirewallRulesV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/clusterNetworkFirewallRulesV2:ClusterNetworkFirewallRulesV2';

    /**
     * Returns true if the given object is an instance of ClusterNetworkFirewallRulesV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterNetworkFirewallRulesV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterNetworkFirewallRulesV2.__pulumiType;
    }

    /**
     * ID of the cluster
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Firewall rules
     */
    public readonly firewallRules!: pulumi.Output<outputs.ClusterNetworkFirewallRulesV2FirewallRule[]>;
    /**
     * The status of the cluster
     */
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ClusterNetworkFirewallRulesV2Timeouts | undefined>;

    /**
     * Create a ClusterNetworkFirewallRulesV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterNetworkFirewallRulesV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterNetworkFirewallRulesV2Args | ClusterNetworkFirewallRulesV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterNetworkFirewallRulesV2State | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["firewallRules"] = state ? state.firewallRules : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ClusterNetworkFirewallRulesV2Args | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.firewallRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallRules'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["firewallRules"] = args ? args.firewallRules : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterNetworkFirewallRulesV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterNetworkFirewallRulesV2 resources.
 */
export interface ClusterNetworkFirewallRulesV2State {
    /**
     * ID of the cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Firewall rules
     */
    firewallRules?: pulumi.Input<pulumi.Input<inputs.ClusterNetworkFirewallRulesV2FirewallRule>[]>;
    /**
     * The status of the cluster
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterNetworkFirewallRulesV2Timeouts>;
}

/**
 * The set of arguments for constructing a ClusterNetworkFirewallRulesV2 resource.
 */
export interface ClusterNetworkFirewallRulesV2Args {
    /**
     * ID of the cluster
     */
    clusterId: pulumi.Input<string>;
    /**
     * Firewall rules
     */
    firewallRules: pulumi.Input<pulumi.Input<inputs.ClusterNetworkFirewallRulesV2FirewallRule>[]>;
    /**
     * The status of the cluster
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ClusterNetworkFirewallRulesV2Timeouts>;
}
