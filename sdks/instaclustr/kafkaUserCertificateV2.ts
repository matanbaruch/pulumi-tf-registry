// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaUserCertificateV2 extends pulumi.CustomResource {
    /**
     * Get an existing KafkaUserCertificateV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaUserCertificateV2State, opts?: pulumi.CustomResourceOptions): KafkaUserCertificateV2 {
        return new KafkaUserCertificateV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/kafkaUserCertificateV2:KafkaUserCertificateV2';

    /**
     * Returns true if the given object is an instance of KafkaUserCertificateV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaUserCertificateV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaUserCertificateV2.__pulumiType;
    }

    /**
     * ID of the kafka cluster
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Certificate signing request.
     */
    public readonly csr!: pulumi.Output<string>;
    /**
     * Date certificate expires.
     */
    public readonly expiryDate!: pulumi.Output<string>;
    /**
     * The Kafka username
     */
    public readonly kafkaUsername!: pulumi.Output<string>;
    /**
     * Generated client signed certificate.
     */
    public readonly signedCertificate!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KafkaUserCertificateV2Timeouts | undefined>;
    /**
     * Number of months for which the certificate will be valid.
     */
    public readonly validPeriod!: pulumi.Output<number>;

    /**
     * Create a KafkaUserCertificateV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaUserCertificateV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaUserCertificateV2Args | KafkaUserCertificateV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaUserCertificateV2State | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["expiryDate"] = state ? state.expiryDate : undefined;
            resourceInputs["kafkaUsername"] = state ? state.kafkaUsername : undefined;
            resourceInputs["signedCertificate"] = state ? state.signedCertificate : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["validPeriod"] = state ? state.validPeriod : undefined;
        } else {
            const args = argsOrState as KafkaUserCertificateV2Args | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.csr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'csr'");
            }
            if ((!args || args.kafkaUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaUsername'");
            }
            if ((!args || args.validPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validPeriod'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["csr"] = args ? args.csr : undefined;
            resourceInputs["expiryDate"] = args ? args.expiryDate : undefined;
            resourceInputs["kafkaUsername"] = args ? args.kafkaUsername : undefined;
            resourceInputs["signedCertificate"] = args ? args.signedCertificate : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["validPeriod"] = args ? args.validPeriod : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaUserCertificateV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KafkaUserCertificateV2 resources.
 */
export interface KafkaUserCertificateV2State {
    /**
     * ID of the kafka cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Certificate signing request.
     */
    csr?: pulumi.Input<string>;
    /**
     * Date certificate expires.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * The Kafka username
     */
    kafkaUsername?: pulumi.Input<string>;
    /**
     * Generated client signed certificate.
     */
    signedCertificate?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KafkaUserCertificateV2Timeouts>;
    /**
     * Number of months for which the certificate will be valid.
     */
    validPeriod?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KafkaUserCertificateV2 resource.
 */
export interface KafkaUserCertificateV2Args {
    /**
     * ID of the kafka cluster
     */
    clusterId: pulumi.Input<string>;
    /**
     * Certificate signing request.
     */
    csr: pulumi.Input<string>;
    /**
     * Date certificate expires.
     */
    expiryDate?: pulumi.Input<string>;
    /**
     * The Kafka username
     */
    kafkaUsername: pulumi.Input<string>;
    /**
     * Generated client signed certificate.
     */
    signedCertificate?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KafkaUserCertificateV2Timeouts>;
    /**
     * Number of months for which the certificate will be valid.
     */
    validPeriod: pulumi.Input<number>;
}
