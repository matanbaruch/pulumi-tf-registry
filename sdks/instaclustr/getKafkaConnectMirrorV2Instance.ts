// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKafkaConnectMirrorV2Instance(args: GetKafkaConnectMirrorV2InstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetKafkaConnectMirrorV2InstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("instaclustr:index/getKafkaConnectMirrorV2Instance:getKafkaConnectMirrorV2Instance", {
        "connectorName": args.connectorName,
        "connectors": args.connectors,
        "id": args.id,
        "kafkaConnectClusterId": args.kafkaConnectClusterId,
        "maxTasks": args.maxTasks,
        "mirroredTopics": args.mirroredTopics,
        "renameMirroredTopics": args.renameMirroredTopics,
        "sourceClusters": args.sourceClusters,
        "status": args.status,
        "targetLatency": args.targetLatency,
        "topicsRegex": args.topicsRegex,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKafkaConnectMirrorV2Instance.
 */
export interface GetKafkaConnectMirrorV2InstanceArgs {
    connectorName?: string;
    connectors?: inputs.GetKafkaConnectMirrorV2InstanceConnector[];
    id: string;
    kafkaConnectClusterId?: string;
    maxTasks?: number;
    mirroredTopics?: inputs.GetKafkaConnectMirrorV2InstanceMirroredTopic[];
    renameMirroredTopics?: boolean;
    sourceClusters?: inputs.GetKafkaConnectMirrorV2InstanceSourceCluster[];
    status?: string;
    targetLatency?: number;
    topicsRegex?: string;
}

/**
 * A collection of values returned by getKafkaConnectMirrorV2Instance.
 */
export interface GetKafkaConnectMirrorV2InstanceResult {
    readonly connectorName: string;
    readonly connectors?: outputs.GetKafkaConnectMirrorV2InstanceConnector[];
    readonly id: string;
    readonly kafkaConnectClusterId: string;
    readonly maxTasks: number;
    readonly mirroredTopics?: outputs.GetKafkaConnectMirrorV2InstanceMirroredTopic[];
    readonly renameMirroredTopics: boolean;
    readonly sourceClusters?: outputs.GetKafkaConnectMirrorV2InstanceSourceCluster[];
    readonly status: string;
    readonly targetLatency: number;
    readonly topicsRegex: string;
}
export function getKafkaConnectMirrorV2InstanceOutput(args: GetKafkaConnectMirrorV2InstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaConnectMirrorV2InstanceResult> {
    return pulumi.output(args).apply((a: any) => getKafkaConnectMirrorV2Instance(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaConnectMirrorV2Instance.
 */
export interface GetKafkaConnectMirrorV2InstanceOutputArgs {
    connectorName?: pulumi.Input<string>;
    connectors?: pulumi.Input<pulumi.Input<inputs.GetKafkaConnectMirrorV2InstanceConnectorArgs>[]>;
    id: pulumi.Input<string>;
    kafkaConnectClusterId?: pulumi.Input<string>;
    maxTasks?: pulumi.Input<number>;
    mirroredTopics?: pulumi.Input<pulumi.Input<inputs.GetKafkaConnectMirrorV2InstanceMirroredTopicArgs>[]>;
    renameMirroredTopics?: pulumi.Input<boolean>;
    sourceClusters?: pulumi.Input<pulumi.Input<inputs.GetKafkaConnectMirrorV2InstanceSourceClusterArgs>[]>;
    status?: pulumi.Input<string>;
    targetLatency?: pulumi.Input<number>;
    topicsRegex?: pulumi.Input<string>;
}
