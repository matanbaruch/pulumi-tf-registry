// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GcpVpcPeerV2 extends pulumi.CustomResource {
    /**
     * Get an existing GcpVpcPeerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpVpcPeerV2State, opts?: pulumi.CustomResourceOptions): GcpVpcPeerV2 {
        return new GcpVpcPeerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/gcpVpcPeerV2:GcpVpcPeerV2';

    /**
     * Returns true if the given object is an instance of GcpVpcPeerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpVpcPeerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpVpcPeerV2.__pulumiType;
    }

    /**
     * ID of the Cluster Data Centre.
     */
    public readonly cdcId!: pulumi.Output<string>;
    /**
     * GCP Project ID of the Data Centre.
     */
    public readonly dataCentreProjectId!: pulumi.Output<string>;
    /**
     * Vpc Network Name of the Data Centre VPC.
     */
    public readonly dataCentreVpcNetworkName!: pulumi.Output<string>;
    /**
     * Reason for Peering Connection Failure.
     */
    public readonly failureReason!: pulumi.Output<string>;
    /**
     * Name of the Peering Connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project ID of the owner of the accepter VPC.
     */
    public readonly peerProjectId!: pulumi.Output<string>;
    /**
     * The subnets for the peering VPC.
     */
    public readonly peerSubnets!: pulumi.Output<string[]>;
    /**
     * The name of the VPC Network you wish to peer to.
     */
    public readonly peerVpcNetworkName!: pulumi.Output<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `GENESIS`, `PROVISIONING`, `FAILED`, `INACTIVE`, `ACTIVE` or
     * `UNKNOWN`.
     */
    public readonly statusCode!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.GcpVpcPeerV2Timeouts | undefined>;

    /**
     * Create a GcpVpcPeerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpVpcPeerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpVpcPeerV2Args | GcpVpcPeerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpVpcPeerV2State | undefined;
            resourceInputs["cdcId"] = state ? state.cdcId : undefined;
            resourceInputs["dataCentreProjectId"] = state ? state.dataCentreProjectId : undefined;
            resourceInputs["dataCentreVpcNetworkName"] = state ? state.dataCentreVpcNetworkName : undefined;
            resourceInputs["failureReason"] = state ? state.failureReason : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerProjectId"] = state ? state.peerProjectId : undefined;
            resourceInputs["peerSubnets"] = state ? state.peerSubnets : undefined;
            resourceInputs["peerVpcNetworkName"] = state ? state.peerVpcNetworkName : undefined;
            resourceInputs["statusCode"] = state ? state.statusCode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as GcpVpcPeerV2Args | undefined;
            if ((!args || args.cdcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdcId'");
            }
            if ((!args || args.peerProjectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerProjectId'");
            }
            if ((!args || args.peerSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerSubnets'");
            }
            if ((!args || args.peerVpcNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVpcNetworkName'");
            }
            resourceInputs["cdcId"] = args ? args.cdcId : undefined;
            resourceInputs["dataCentreProjectId"] = args ? args.dataCentreProjectId : undefined;
            resourceInputs["dataCentreVpcNetworkName"] = args ? args.dataCentreVpcNetworkName : undefined;
            resourceInputs["failureReason"] = args ? args.failureReason : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerProjectId"] = args ? args.peerProjectId : undefined;
            resourceInputs["peerSubnets"] = args ? args.peerSubnets : undefined;
            resourceInputs["peerVpcNetworkName"] = args ? args.peerVpcNetworkName : undefined;
            resourceInputs["statusCode"] = args ? args.statusCode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpVpcPeerV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GcpVpcPeerV2 resources.
 */
export interface GcpVpcPeerV2State {
    /**
     * ID of the Cluster Data Centre.
     */
    cdcId?: pulumi.Input<string>;
    /**
     * GCP Project ID of the Data Centre.
     */
    dataCentreProjectId?: pulumi.Input<string>;
    /**
     * Vpc Network Name of the Data Centre VPC.
     */
    dataCentreVpcNetworkName?: pulumi.Input<string>;
    /**
     * Reason for Peering Connection Failure.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * Name of the Peering Connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The project ID of the owner of the accepter VPC.
     */
    peerProjectId?: pulumi.Input<string>;
    /**
     * The subnets for the peering VPC.
     */
    peerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the VPC Network you wish to peer to.
     */
    peerVpcNetworkName?: pulumi.Input<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `GENESIS`, `PROVISIONING`, `FAILED`, `INACTIVE`, `ACTIVE` or
     * `UNKNOWN`.
     */
    statusCode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GcpVpcPeerV2Timeouts>;
}

/**
 * The set of arguments for constructing a GcpVpcPeerV2 resource.
 */
export interface GcpVpcPeerV2Args {
    /**
     * ID of the Cluster Data Centre.
     */
    cdcId: pulumi.Input<string>;
    /**
     * GCP Project ID of the Data Centre.
     */
    dataCentreProjectId?: pulumi.Input<string>;
    /**
     * Vpc Network Name of the Data Centre VPC.
     */
    dataCentreVpcNetworkName?: pulumi.Input<string>;
    /**
     * Reason for Peering Connection Failure.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * Name of the Peering Connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The project ID of the owner of the accepter VPC.
     */
    peerProjectId: pulumi.Input<string>;
    /**
     * The subnets for the peering VPC.
     */
    peerSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the VPC Network you wish to peer to.
     */
    peerVpcNetworkName: pulumi.Input<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `GENESIS`, `PROVISIONING`, `FAILED`, `INACTIVE`, `ACTIVE` or
     * `UNKNOWN`.
     */
    statusCode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.GcpVpcPeerV2Timeouts>;
}
