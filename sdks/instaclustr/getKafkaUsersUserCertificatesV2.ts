// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKafkaUsersUserCertificatesV2(args: GetKafkaUsersUserCertificatesV2Args, opts?: pulumi.InvokeOptions): Promise<GetKafkaUsersUserCertificatesV2Result> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("instaclustr:index/getKafkaUsersUserCertificatesV2:getKafkaUsersUserCertificatesV2", {
        "clusterId": args.clusterId,
        "csr": args.csr,
        "expiryDate": args.expiryDate,
        "filters": args.filters,
        "id": args.id,
        "kafkaUsername": args.kafkaUsername,
        "kafkaUsersId": args.kafkaUsersId,
        "signedCertificate": args.signedCertificate,
        "validPeriod": args.validPeriod,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKafkaUsersUserCertificatesV2.
 */
export interface GetKafkaUsersUserCertificatesV2Args {
    clusterId?: string;
    csr?: string;
    expiryDate?: string;
    filters?: inputs.GetKafkaUsersUserCertificatesV2Filter[];
    id?: string;
    kafkaUsername?: string;
    kafkaUsersId: string;
    signedCertificate?: string;
    validPeriod?: number;
}

/**
 * A collection of values returned by getKafkaUsersUserCertificatesV2.
 */
export interface GetKafkaUsersUserCertificatesV2Result {
    readonly clusterId: string;
    readonly csr: string;
    readonly expiryDate: string;
    readonly filters?: outputs.GetKafkaUsersUserCertificatesV2Filter[];
    readonly id: string;
    readonly kafkaUsername: string;
    readonly kafkaUsersId: string;
    readonly signedCertificate: string;
    readonly validPeriod: number;
}
export function getKafkaUsersUserCertificatesV2Output(args: GetKafkaUsersUserCertificatesV2OutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKafkaUsersUserCertificatesV2Result> {
    return pulumi.output(args).apply((a: any) => getKafkaUsersUserCertificatesV2(a, opts))
}

/**
 * A collection of arguments for invoking getKafkaUsersUserCertificatesV2.
 */
export interface GetKafkaUsersUserCertificatesV2OutputArgs {
    clusterId?: pulumi.Input<string>;
    csr?: pulumi.Input<string>;
    expiryDate?: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetKafkaUsersUserCertificatesV2FilterArgs>[]>;
    id?: pulumi.Input<string>;
    kafkaUsername?: pulumi.Input<string>;
    kafkaUsersId: pulumi.Input<string>;
    signedCertificate?: pulumi.Input<string>;
    validPeriod?: pulumi.Input<number>;
}
