// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RedisClusterV2 extends pulumi.CustomResource {
    /**
     * Get an existing RedisClusterV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RedisClusterV2State, opts?: pulumi.CustomResourceOptions): RedisClusterV2 {
        return new RedisClusterV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/redisClusterV2:RedisClusterV2';

    /**
     * Returns true if the given object is an instance of RedisClusterV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RedisClusterV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RedisClusterV2.__pulumiType;
    }

    /**
     * Enables Client ⇄ Node Encryption.
     */
    public readonly clientToNodeEncryption!: pulumi.Output<boolean>;
    /**
     * Indicates if the cluster is currently performing any restructuring operation such as being created or resized
     */
    public readonly currentClusterOperationStatus!: pulumi.Output<string>;
    /**
     * List of data centre settings.
     */
    public readonly dataCentres!: pulumi.Output<outputs.RedisClusterV2DataCentre[]>;
    /**
     * A description of the cluster
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Name of the cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Enables Password Authentication and User Authorization.
     */
    public readonly passwordAndUserAuth!: pulumi.Output<boolean>;
    /**
     * Creates a PCI compliant cluster, see [PCI
     * Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
     */
    public readonly pciComplianceMode!: pulumi.Output<boolean>;
    /**
     * Creates the cluster with private network only, see [Private Network
     * Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
     */
    public readonly privateNetworkCluster!: pulumi.Output<boolean>;
    /**
     * Version of Redis to run on the cluster. Available versions: <ul> <li>`6.2.14`</li> <li>`7.2.4`</li> <li>`7.0.14`</li>
     * </ul>
     */
    public readonly redisVersion!: pulumi.Output<string>;
    /**
     * Settings to determine how resize requests will be performed for the cluster.
     */
    public readonly resizeSettings!: pulumi.Output<outputs.RedisClusterV2ResizeSetting[] | undefined>;
    /**
     * SLA Tier of the cluster. Non-production clusters may receive lower priority support and reduced SLAs. Production tier is
     * not available when using Developer class nodes. See [SLA
     * Tier](https://www.instaclustr.com/support/documentation/useful-information/sla-tier/) for more information.
     */
    public readonly slaTier!: pulumi.Output<string>;
    /**
     * Status of the cluster.
     */
    public readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.RedisClusterV2Timeouts | undefined>;
    public readonly twoFactorDeletes!: pulumi.Output<outputs.RedisClusterV2TwoFactorDelete[] | undefined>;

    /**
     * Create a RedisClusterV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RedisClusterV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RedisClusterV2Args | RedisClusterV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RedisClusterV2State | undefined;
            resourceInputs["clientToNodeEncryption"] = state ? state.clientToNodeEncryption : undefined;
            resourceInputs["currentClusterOperationStatus"] = state ? state.currentClusterOperationStatus : undefined;
            resourceInputs["dataCentres"] = state ? state.dataCentres : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passwordAndUserAuth"] = state ? state.passwordAndUserAuth : undefined;
            resourceInputs["pciComplianceMode"] = state ? state.pciComplianceMode : undefined;
            resourceInputs["privateNetworkCluster"] = state ? state.privateNetworkCluster : undefined;
            resourceInputs["redisVersion"] = state ? state.redisVersion : undefined;
            resourceInputs["resizeSettings"] = state ? state.resizeSettings : undefined;
            resourceInputs["slaTier"] = state ? state.slaTier : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["twoFactorDeletes"] = state ? state.twoFactorDeletes : undefined;
        } else {
            const args = argsOrState as RedisClusterV2Args | undefined;
            if ((!args || args.clientToNodeEncryption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientToNodeEncryption'");
            }
            if ((!args || args.dataCentres === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataCentres'");
            }
            if ((!args || args.passwordAndUserAuth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'passwordAndUserAuth'");
            }
            if ((!args || args.pciComplianceMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pciComplianceMode'");
            }
            if ((!args || args.privateNetworkCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateNetworkCluster'");
            }
            if ((!args || args.redisVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redisVersion'");
            }
            if ((!args || args.slaTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slaTier'");
            }
            resourceInputs["clientToNodeEncryption"] = args ? args.clientToNodeEncryption : undefined;
            resourceInputs["currentClusterOperationStatus"] = args ? args.currentClusterOperationStatus : undefined;
            resourceInputs["dataCentres"] = args ? args.dataCentres : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passwordAndUserAuth"] = args ? args.passwordAndUserAuth : undefined;
            resourceInputs["pciComplianceMode"] = args ? args.pciComplianceMode : undefined;
            resourceInputs["privateNetworkCluster"] = args ? args.privateNetworkCluster : undefined;
            resourceInputs["redisVersion"] = args ? args.redisVersion : undefined;
            resourceInputs["resizeSettings"] = args ? args.resizeSettings : undefined;
            resourceInputs["slaTier"] = args ? args.slaTier : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["twoFactorDeletes"] = args ? args.twoFactorDeletes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RedisClusterV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RedisClusterV2 resources.
 */
export interface RedisClusterV2State {
    /**
     * Enables Client ⇄ Node Encryption.
     */
    clientToNodeEncryption?: pulumi.Input<boolean>;
    /**
     * Indicates if the cluster is currently performing any restructuring operation such as being created or resized
     */
    currentClusterOperationStatus?: pulumi.Input<string>;
    /**
     * List of data centre settings.
     */
    dataCentres?: pulumi.Input<pulumi.Input<inputs.RedisClusterV2DataCentre>[]>;
    /**
     * A description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Enables Password Authentication and User Authorization.
     */
    passwordAndUserAuth?: pulumi.Input<boolean>;
    /**
     * Creates a PCI compliant cluster, see [PCI
     * Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
     */
    pciComplianceMode?: pulumi.Input<boolean>;
    /**
     * Creates the cluster with private network only, see [Private Network
     * Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
     */
    privateNetworkCluster?: pulumi.Input<boolean>;
    /**
     * Version of Redis to run on the cluster. Available versions: <ul> <li>`6.2.14`</li> <li>`7.2.4`</li> <li>`7.0.14`</li>
     * </ul>
     */
    redisVersion?: pulumi.Input<string>;
    /**
     * Settings to determine how resize requests will be performed for the cluster.
     */
    resizeSettings?: pulumi.Input<pulumi.Input<inputs.RedisClusterV2ResizeSetting>[]>;
    /**
     * SLA Tier of the cluster. Non-production clusters may receive lower priority support and reduced SLAs. Production tier is
     * not available when using Developer class nodes. See [SLA
     * Tier](https://www.instaclustr.com/support/documentation/useful-information/sla-tier/) for more information.
     */
    slaTier?: pulumi.Input<string>;
    /**
     * Status of the cluster.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedisClusterV2Timeouts>;
    twoFactorDeletes?: pulumi.Input<pulumi.Input<inputs.RedisClusterV2TwoFactorDelete>[]>;
}

/**
 * The set of arguments for constructing a RedisClusterV2 resource.
 */
export interface RedisClusterV2Args {
    /**
     * Enables Client ⇄ Node Encryption.
     */
    clientToNodeEncryption: pulumi.Input<boolean>;
    /**
     * Indicates if the cluster is currently performing any restructuring operation such as being created or resized
     */
    currentClusterOperationStatus?: pulumi.Input<string>;
    /**
     * List of data centre settings.
     */
    dataCentres: pulumi.Input<pulumi.Input<inputs.RedisClusterV2DataCentre>[]>;
    /**
     * A description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Enables Password Authentication and User Authorization.
     */
    passwordAndUserAuth: pulumi.Input<boolean>;
    /**
     * Creates a PCI compliant cluster, see [PCI
     * Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
     */
    pciComplianceMode: pulumi.Input<boolean>;
    /**
     * Creates the cluster with private network only, see [Private Network
     * Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
     */
    privateNetworkCluster: pulumi.Input<boolean>;
    /**
     * Version of Redis to run on the cluster. Available versions: <ul> <li>`6.2.14`</li> <li>`7.2.4`</li> <li>`7.0.14`</li>
     * </ul>
     */
    redisVersion: pulumi.Input<string>;
    /**
     * Settings to determine how resize requests will be performed for the cluster.
     */
    resizeSettings?: pulumi.Input<pulumi.Input<inputs.RedisClusterV2ResizeSetting>[]>;
    /**
     * SLA Tier of the cluster. Non-production clusters may receive lower priority support and reduced SLAs. Production tier is
     * not available when using Developer class nodes. See [SLA
     * Tier](https://www.instaclustr.com/support/documentation/useful-information/sla-tier/) for more information.
     */
    slaTier: pulumi.Input<string>;
    /**
     * Status of the cluster.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.RedisClusterV2Timeouts>;
    twoFactorDeletes?: pulumi.Input<pulumi.Input<inputs.RedisClusterV2TwoFactorDelete>[]>;
}
