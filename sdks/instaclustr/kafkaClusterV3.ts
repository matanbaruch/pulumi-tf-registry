// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaClusterV3 extends pulumi.CustomResource {
    /**
     * Get an existing KafkaClusterV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaClusterV3State, opts?: pulumi.CustomResourceOptions): KafkaClusterV3 {
        return new KafkaClusterV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/kafkaClusterV3:KafkaClusterV3';

    /**
     * Returns true if the given object is an instance of KafkaClusterV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaClusterV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaClusterV3.__pulumiType;
    }

    /**
     * Allows topics to be deleted via the kafka-topics tool
     */
    public readonly allowDeleteTopics!: pulumi.Output<boolean>;
    /**
     * Allows topics to be auto created by brokers when messages are published to a non-existent topic
     */
    public readonly autoCreateTopics!: pulumi.Output<boolean>;
    /**
     * Provision this cluster for [Bundled Use
     * only](https://www.instaclustr.com/support/documentation/cadence/getting-started-with-cadence/bundled-use-only-cluster-deployments/).
     */
    public readonly bundledUseOnly!: pulumi.Output<boolean>;
    /**
     * Enables Client ⇄ Broker Authentication with mTLS.
     */
    public readonly clientBrokerAuthWithMtls!: pulumi.Output<boolean | undefined>;
    /**
     * Enables Client ⇄ Cluster Encryption.
     */
    public readonly clientToClusterEncryption!: pulumi.Output<boolean>;
    /**
     * Create a Collocated Zookeeper Cluster - use this to create a collocated zookeeper based Kafka cluster for kafka versions
     * >= 3.6.1. Note that collocated KRaft mode is the default mode for Kafka clusters using versions older than 3.6.1. Kafka
     * 3.6.1 and later will use KRaft instead of Zookeeper unless this is specified.
     */
    public readonly collocatedZookeepers!: pulumi.Output<outputs.KafkaClusterV3CollocatedZookeeper[] | undefined>;
    /**
     * Indicates if the cluster is currently performing any restructuring operation such as being created or resized
     */
    public readonly currentClusterOperationStatus!: pulumi.Output<string>;
    /**
     * List of data centre settings.
     */
    public readonly dataCentres!: pulumi.Output<outputs.KafkaClusterV3DataCentre[]>;
    /**
     * Provision additional dedicated nodes for KRaft Controllers. If this is not provided, some Kafka brokers will be required
     * to act as KRaft controllers.
     */
    public readonly dedicatedKraftControllers!: pulumi.Output<outputs.KafkaClusterV3DedicatedKraftController[] | undefined>;
    /**
     * Provision additional dedicated nodes for Apache Zookeeper to run on. Zookeeper nodes will be co-located with Kafka if
     * this is not provided
     */
    public readonly dedicatedZookeepers!: pulumi.Output<outputs.KafkaClusterV3DedicatedZookeeper[] | undefined>;
    /**
     * Default number of partitions to use when created new topics.
     */
    public readonly defaultNumberOfPartitions!: pulumi.Output<number>;
    /**
     * Default Replication factor to use for new topic. Also represents the number of racks to use when allocating nodes.
     */
    public readonly defaultReplicationFactor!: pulumi.Output<number>;
    /**
     * Password for the default Kafka user
     */
    public readonly defaultUserPassword!: pulumi.Output<string>;
    /**
     * A description of the cluster
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Version of Kafka to run on the cluster. Available versions: <ul> <li>`3.6.1`</li> <li>`3.5.1`</li> <li>`3.7.1`</li>
     * <li>`3.6.2`</li> </ul>
     */
    public readonly kafkaVersion!: pulumi.Output<string>;
    /**
     * Adds the specified version of Kafka Karapace REST Proxy to this Kafka cluster.
     */
    public readonly karapaceRestProxies!: pulumi.Output<outputs.KafkaClusterV3KarapaceRestProxy[] | undefined>;
    /**
     * Adds the specified version of Kafka Karapace Schema Registry to this Kafka cluster.
     */
    public readonly karapaceSchemaRegistries!: pulumi.Output<outputs.KafkaClusterV3KarapaceSchemaRegistry[] | undefined>;
    /**
     * Create a collocated KRaft Cluster. Note that this is the default behaviour for Kafka clusters provisioned using Kafka
     * 3.6.1 and later. Kafka clusters provisioned with earlier Kafka versions will use a collocated Zookeeper cluster instead.
     */
    public readonly krafts!: pulumi.Output<outputs.KafkaClusterV3Kraft[] | undefined>;
    /**
     * Name of the cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Creates a PCI compliant cluster, see [PCI
     * Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
     */
    public readonly pciComplianceMode!: pulumi.Output<boolean>;
    /**
     * Creates the cluster with private network only, see [Private Network
     * Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
     */
    public readonly privateNetworkCluster!: pulumi.Output<boolean>;
    /**
     * Settings to determine how resize requests will be performed for the cluster.
     */
    public readonly resizeSettings!: pulumi.Output<outputs.KafkaClusterV3ResizeSetting[] | undefined>;
    /**
     * Adds the specified version of Kafka REST Proxy to this Kafka cluster.
     */
    public readonly restProxies!: pulumi.Output<outputs.KafkaClusterV3RestProxy[] | undefined>;
    /**
     * Adds the specified version of Kafka Schema Registry to this Kafka cluster.
     */
    public readonly schemaRegistries!: pulumi.Output<outputs.KafkaClusterV3SchemaRegistry[] | undefined>;
    /**
     * SLA Tier of the cluster. Non-production clusters may receive lower priority support and reduced SLAs. Production tier is
     * not available when using Developer class nodes. See [SLA
     * Tier](https://www.instaclustr.com/support/documentation/useful-information/sla-tier/) for more information.
     */
    public readonly slaTier!: pulumi.Output<string>;
    /**
     * Status of the cluster.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Enable Tiered Storage for Kafka
     */
    public readonly tieredStorages!: pulumi.Output<outputs.KafkaClusterV3TieredStorage[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.KafkaClusterV3Timeouts | undefined>;
    public readonly twoFactorDeletes!: pulumi.Output<outputs.KafkaClusterV3TwoFactorDelete[] | undefined>;

    /**
     * Create a KafkaClusterV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaClusterV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaClusterV3Args | KafkaClusterV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaClusterV3State | undefined;
            resourceInputs["allowDeleteTopics"] = state ? state.allowDeleteTopics : undefined;
            resourceInputs["autoCreateTopics"] = state ? state.autoCreateTopics : undefined;
            resourceInputs["bundledUseOnly"] = state ? state.bundledUseOnly : undefined;
            resourceInputs["clientBrokerAuthWithMtls"] = state ? state.clientBrokerAuthWithMtls : undefined;
            resourceInputs["clientToClusterEncryption"] = state ? state.clientToClusterEncryption : undefined;
            resourceInputs["collocatedZookeepers"] = state ? state.collocatedZookeepers : undefined;
            resourceInputs["currentClusterOperationStatus"] = state ? state.currentClusterOperationStatus : undefined;
            resourceInputs["dataCentres"] = state ? state.dataCentres : undefined;
            resourceInputs["dedicatedKraftControllers"] = state ? state.dedicatedKraftControllers : undefined;
            resourceInputs["dedicatedZookeepers"] = state ? state.dedicatedZookeepers : undefined;
            resourceInputs["defaultNumberOfPartitions"] = state ? state.defaultNumberOfPartitions : undefined;
            resourceInputs["defaultReplicationFactor"] = state ? state.defaultReplicationFactor : undefined;
            resourceInputs["defaultUserPassword"] = state ? state.defaultUserPassword : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kafkaVersion"] = state ? state.kafkaVersion : undefined;
            resourceInputs["karapaceRestProxies"] = state ? state.karapaceRestProxies : undefined;
            resourceInputs["karapaceSchemaRegistries"] = state ? state.karapaceSchemaRegistries : undefined;
            resourceInputs["krafts"] = state ? state.krafts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pciComplianceMode"] = state ? state.pciComplianceMode : undefined;
            resourceInputs["privateNetworkCluster"] = state ? state.privateNetworkCluster : undefined;
            resourceInputs["resizeSettings"] = state ? state.resizeSettings : undefined;
            resourceInputs["restProxies"] = state ? state.restProxies : undefined;
            resourceInputs["schemaRegistries"] = state ? state.schemaRegistries : undefined;
            resourceInputs["slaTier"] = state ? state.slaTier : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tieredStorages"] = state ? state.tieredStorages : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["twoFactorDeletes"] = state ? state.twoFactorDeletes : undefined;
        } else {
            const args = argsOrState as KafkaClusterV3Args | undefined;
            if ((!args || args.allowDeleteTopics === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowDeleteTopics'");
            }
            if ((!args || args.autoCreateTopics === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoCreateTopics'");
            }
            if ((!args || args.clientToClusterEncryption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientToClusterEncryption'");
            }
            if ((!args || args.dataCentres === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataCentres'");
            }
            if ((!args || args.defaultNumberOfPartitions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultNumberOfPartitions'");
            }
            if ((!args || args.defaultReplicationFactor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultReplicationFactor'");
            }
            if ((!args || args.kafkaVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaVersion'");
            }
            if ((!args || args.pciComplianceMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pciComplianceMode'");
            }
            if ((!args || args.privateNetworkCluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateNetworkCluster'");
            }
            if ((!args || args.slaTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slaTier'");
            }
            resourceInputs["allowDeleteTopics"] = args ? args.allowDeleteTopics : undefined;
            resourceInputs["autoCreateTopics"] = args ? args.autoCreateTopics : undefined;
            resourceInputs["bundledUseOnly"] = args ? args.bundledUseOnly : undefined;
            resourceInputs["clientBrokerAuthWithMtls"] = args ? args.clientBrokerAuthWithMtls : undefined;
            resourceInputs["clientToClusterEncryption"] = args ? args.clientToClusterEncryption : undefined;
            resourceInputs["collocatedZookeepers"] = args ? args.collocatedZookeepers : undefined;
            resourceInputs["currentClusterOperationStatus"] = args ? args.currentClusterOperationStatus : undefined;
            resourceInputs["dataCentres"] = args ? args.dataCentres : undefined;
            resourceInputs["dedicatedKraftControllers"] = args ? args.dedicatedKraftControllers : undefined;
            resourceInputs["dedicatedZookeepers"] = args ? args.dedicatedZookeepers : undefined;
            resourceInputs["defaultNumberOfPartitions"] = args ? args.defaultNumberOfPartitions : undefined;
            resourceInputs["defaultReplicationFactor"] = args ? args.defaultReplicationFactor : undefined;
            resourceInputs["defaultUserPassword"] = args?.defaultUserPassword ? pulumi.secret(args.defaultUserPassword) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kafkaVersion"] = args ? args.kafkaVersion : undefined;
            resourceInputs["karapaceRestProxies"] = args ? args.karapaceRestProxies : undefined;
            resourceInputs["karapaceSchemaRegistries"] = args ? args.karapaceSchemaRegistries : undefined;
            resourceInputs["krafts"] = args ? args.krafts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pciComplianceMode"] = args ? args.pciComplianceMode : undefined;
            resourceInputs["privateNetworkCluster"] = args ? args.privateNetworkCluster : undefined;
            resourceInputs["resizeSettings"] = args ? args.resizeSettings : undefined;
            resourceInputs["restProxies"] = args ? args.restProxies : undefined;
            resourceInputs["schemaRegistries"] = args ? args.schemaRegistries : undefined;
            resourceInputs["slaTier"] = args ? args.slaTier : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tieredStorages"] = args ? args.tieredStorages : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["twoFactorDeletes"] = args ? args.twoFactorDeletes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["defaultUserPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KafkaClusterV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KafkaClusterV3 resources.
 */
export interface KafkaClusterV3State {
    /**
     * Allows topics to be deleted via the kafka-topics tool
     */
    allowDeleteTopics?: pulumi.Input<boolean>;
    /**
     * Allows topics to be auto created by brokers when messages are published to a non-existent topic
     */
    autoCreateTopics?: pulumi.Input<boolean>;
    /**
     * Provision this cluster for [Bundled Use
     * only](https://www.instaclustr.com/support/documentation/cadence/getting-started-with-cadence/bundled-use-only-cluster-deployments/).
     */
    bundledUseOnly?: pulumi.Input<boolean>;
    /**
     * Enables Client ⇄ Broker Authentication with mTLS.
     */
    clientBrokerAuthWithMtls?: pulumi.Input<boolean>;
    /**
     * Enables Client ⇄ Cluster Encryption.
     */
    clientToClusterEncryption?: pulumi.Input<boolean>;
    /**
     * Create a Collocated Zookeeper Cluster - use this to create a collocated zookeeper based Kafka cluster for kafka versions
     * >= 3.6.1. Note that collocated KRaft mode is the default mode for Kafka clusters using versions older than 3.6.1. Kafka
     * 3.6.1 and later will use KRaft instead of Zookeeper unless this is specified.
     */
    collocatedZookeepers?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3CollocatedZookeeper>[]>;
    /**
     * Indicates if the cluster is currently performing any restructuring operation such as being created or resized
     */
    currentClusterOperationStatus?: pulumi.Input<string>;
    /**
     * List of data centre settings.
     */
    dataCentres?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3DataCentre>[]>;
    /**
     * Provision additional dedicated nodes for KRaft Controllers. If this is not provided, some Kafka brokers will be required
     * to act as KRaft controllers.
     */
    dedicatedKraftControllers?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3DedicatedKraftController>[]>;
    /**
     * Provision additional dedicated nodes for Apache Zookeeper to run on. Zookeeper nodes will be co-located with Kafka if
     * this is not provided
     */
    dedicatedZookeepers?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3DedicatedZookeeper>[]>;
    /**
     * Default number of partitions to use when created new topics.
     */
    defaultNumberOfPartitions?: pulumi.Input<number>;
    /**
     * Default Replication factor to use for new topic. Also represents the number of racks to use when allocating nodes.
     */
    defaultReplicationFactor?: pulumi.Input<number>;
    /**
     * Password for the default Kafka user
     */
    defaultUserPassword?: pulumi.Input<string>;
    /**
     * A description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Version of Kafka to run on the cluster. Available versions: <ul> <li>`3.6.1`</li> <li>`3.5.1`</li> <li>`3.7.1`</li>
     * <li>`3.6.2`</li> </ul>
     */
    kafkaVersion?: pulumi.Input<string>;
    /**
     * Adds the specified version of Kafka Karapace REST Proxy to this Kafka cluster.
     */
    karapaceRestProxies?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3KarapaceRestProxy>[]>;
    /**
     * Adds the specified version of Kafka Karapace Schema Registry to this Kafka cluster.
     */
    karapaceSchemaRegistries?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3KarapaceSchemaRegistry>[]>;
    /**
     * Create a collocated KRaft Cluster. Note that this is the default behaviour for Kafka clusters provisioned using Kafka
     * 3.6.1 and later. Kafka clusters provisioned with earlier Kafka versions will use a collocated Zookeeper cluster instead.
     */
    krafts?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3Kraft>[]>;
    /**
     * Name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a PCI compliant cluster, see [PCI
     * Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
     */
    pciComplianceMode?: pulumi.Input<boolean>;
    /**
     * Creates the cluster with private network only, see [Private Network
     * Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
     */
    privateNetworkCluster?: pulumi.Input<boolean>;
    /**
     * Settings to determine how resize requests will be performed for the cluster.
     */
    resizeSettings?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3ResizeSetting>[]>;
    /**
     * Adds the specified version of Kafka REST Proxy to this Kafka cluster.
     */
    restProxies?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3RestProxy>[]>;
    /**
     * Adds the specified version of Kafka Schema Registry to this Kafka cluster.
     */
    schemaRegistries?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3SchemaRegistry>[]>;
    /**
     * SLA Tier of the cluster. Non-production clusters may receive lower priority support and reduced SLAs. Production tier is
     * not available when using Developer class nodes. See [SLA
     * Tier](https://www.instaclustr.com/support/documentation/useful-information/sla-tier/) for more information.
     */
    slaTier?: pulumi.Input<string>;
    /**
     * Status of the cluster.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable Tiered Storage for Kafka
     */
    tieredStorages?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3TieredStorage>[]>;
    timeouts?: pulumi.Input<inputs.KafkaClusterV3Timeouts>;
    twoFactorDeletes?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3TwoFactorDelete>[]>;
}

/**
 * The set of arguments for constructing a KafkaClusterV3 resource.
 */
export interface KafkaClusterV3Args {
    /**
     * Allows topics to be deleted via the kafka-topics tool
     */
    allowDeleteTopics: pulumi.Input<boolean>;
    /**
     * Allows topics to be auto created by brokers when messages are published to a non-existent topic
     */
    autoCreateTopics: pulumi.Input<boolean>;
    /**
     * Provision this cluster for [Bundled Use
     * only](https://www.instaclustr.com/support/documentation/cadence/getting-started-with-cadence/bundled-use-only-cluster-deployments/).
     */
    bundledUseOnly?: pulumi.Input<boolean>;
    /**
     * Enables Client ⇄ Broker Authentication with mTLS.
     */
    clientBrokerAuthWithMtls?: pulumi.Input<boolean>;
    /**
     * Enables Client ⇄ Cluster Encryption.
     */
    clientToClusterEncryption: pulumi.Input<boolean>;
    /**
     * Create a Collocated Zookeeper Cluster - use this to create a collocated zookeeper based Kafka cluster for kafka versions
     * >= 3.6.1. Note that collocated KRaft mode is the default mode for Kafka clusters using versions older than 3.6.1. Kafka
     * 3.6.1 and later will use KRaft instead of Zookeeper unless this is specified.
     */
    collocatedZookeepers?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3CollocatedZookeeper>[]>;
    /**
     * Indicates if the cluster is currently performing any restructuring operation such as being created or resized
     */
    currentClusterOperationStatus?: pulumi.Input<string>;
    /**
     * List of data centre settings.
     */
    dataCentres: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3DataCentre>[]>;
    /**
     * Provision additional dedicated nodes for KRaft Controllers. If this is not provided, some Kafka brokers will be required
     * to act as KRaft controllers.
     */
    dedicatedKraftControllers?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3DedicatedKraftController>[]>;
    /**
     * Provision additional dedicated nodes for Apache Zookeeper to run on. Zookeeper nodes will be co-located with Kafka if
     * this is not provided
     */
    dedicatedZookeepers?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3DedicatedZookeeper>[]>;
    /**
     * Default number of partitions to use when created new topics.
     */
    defaultNumberOfPartitions: pulumi.Input<number>;
    /**
     * Default Replication factor to use for new topic. Also represents the number of racks to use when allocating nodes.
     */
    defaultReplicationFactor: pulumi.Input<number>;
    /**
     * Password for the default Kafka user
     */
    defaultUserPassword?: pulumi.Input<string>;
    /**
     * A description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Version of Kafka to run on the cluster. Available versions: <ul> <li>`3.6.1`</li> <li>`3.5.1`</li> <li>`3.7.1`</li>
     * <li>`3.6.2`</li> </ul>
     */
    kafkaVersion: pulumi.Input<string>;
    /**
     * Adds the specified version of Kafka Karapace REST Proxy to this Kafka cluster.
     */
    karapaceRestProxies?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3KarapaceRestProxy>[]>;
    /**
     * Adds the specified version of Kafka Karapace Schema Registry to this Kafka cluster.
     */
    karapaceSchemaRegistries?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3KarapaceSchemaRegistry>[]>;
    /**
     * Create a collocated KRaft Cluster. Note that this is the default behaviour for Kafka clusters provisioned using Kafka
     * 3.6.1 and later. Kafka clusters provisioned with earlier Kafka versions will use a collocated Zookeeper cluster instead.
     */
    krafts?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3Kraft>[]>;
    /**
     * Name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * Creates a PCI compliant cluster, see [PCI
     * Compliance](https://www.instaclustr.com/support/documentation/useful-information/pci-compliance/).
     */
    pciComplianceMode: pulumi.Input<boolean>;
    /**
     * Creates the cluster with private network only, see [Private Network
     * Clusters](https://www.instaclustr.com/support/documentation/useful-information/private-network-clusters/).
     */
    privateNetworkCluster: pulumi.Input<boolean>;
    /**
     * Settings to determine how resize requests will be performed for the cluster.
     */
    resizeSettings?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3ResizeSetting>[]>;
    /**
     * Adds the specified version of Kafka REST Proxy to this Kafka cluster.
     */
    restProxies?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3RestProxy>[]>;
    /**
     * Adds the specified version of Kafka Schema Registry to this Kafka cluster.
     */
    schemaRegistries?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3SchemaRegistry>[]>;
    /**
     * SLA Tier of the cluster. Non-production clusters may receive lower priority support and reduced SLAs. Production tier is
     * not available when using Developer class nodes. See [SLA
     * Tier](https://www.instaclustr.com/support/documentation/useful-information/sla-tier/) for more information.
     */
    slaTier: pulumi.Input<string>;
    /**
     * Status of the cluster.
     */
    status?: pulumi.Input<string>;
    /**
     * Enable Tiered Storage for Kafka
     */
    tieredStorages?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3TieredStorage>[]>;
    timeouts?: pulumi.Input<inputs.KafkaClusterV3Timeouts>;
    twoFactorDeletes?: pulumi.Input<pulumi.Input<inputs.KafkaClusterV3TwoFactorDelete>[]>;
}
