// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaAclV3 extends pulumi.CustomResource {
    /**
     * Get an existing KafkaAclV3 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaAclV3State, opts?: pulumi.CustomResourceOptions): KafkaAclV3 {
        return new KafkaAclV3(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/kafkaAclV3:KafkaAclV3';

    /**
     * Returns true if the given object is an instance of KafkaAclV3.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaAclV3 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaAclV3.__pulumiType;
    }

    /**
     * List of ACLs for the given principal.
     */
    public readonly acls!: pulumi.Output<outputs.KafkaAclV3Acl[]>;
    /**
     * UUID of the Kafka cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Indicates if the cluster is currently performing any operation such as being created, updated, or deleted
     */
    public readonly currentOperationStatus!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KafkaAclV3Timeouts | undefined>;
    /**
     * This is the principal without the `User:` prefix.
     */
    public readonly userQuery!: pulumi.Output<string>;

    /**
     * Create a KafkaAclV3 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaAclV3Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaAclV3Args | KafkaAclV3State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaAclV3State | undefined;
            resourceInputs["acls"] = state ? state.acls : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["currentOperationStatus"] = state ? state.currentOperationStatus : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userQuery"] = state ? state.userQuery : undefined;
        } else {
            const args = argsOrState as KafkaAclV3Args | undefined;
            if ((!args || args.acls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'acls'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.userQuery === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userQuery'");
            }
            resourceInputs["acls"] = args ? args.acls : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["currentOperationStatus"] = args ? args.currentOperationStatus : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userQuery"] = args ? args.userQuery : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaAclV3.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KafkaAclV3 resources.
 */
export interface KafkaAclV3State {
    /**
     * List of ACLs for the given principal.
     */
    acls?: pulumi.Input<pulumi.Input<inputs.KafkaAclV3Acl>[]>;
    /**
     * UUID of the Kafka cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Indicates if the cluster is currently performing any operation such as being created, updated, or deleted
     */
    currentOperationStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KafkaAclV3Timeouts>;
    /**
     * This is the principal without the `User:` prefix.
     */
    userQuery?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaAclV3 resource.
 */
export interface KafkaAclV3Args {
    /**
     * List of ACLs for the given principal.
     */
    acls: pulumi.Input<pulumi.Input<inputs.KafkaAclV3Acl>[]>;
    /**
     * UUID of the Kafka cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Indicates if the cluster is currently performing any operation such as being created, updated, or deleted
     */
    currentOperationStatus?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KafkaAclV3Timeouts>;
    /**
     * This is the principal without the `User:` prefix.
     */
    userQuery: pulumi.Input<string>;
}
