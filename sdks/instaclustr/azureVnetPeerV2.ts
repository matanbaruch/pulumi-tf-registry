// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureVnetPeerV2 extends pulumi.CustomResource {
    /**
     * Get an existing AzureVnetPeerV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureVnetPeerV2State, opts?: pulumi.CustomResourceOptions): AzureVnetPeerV2 {
        return new AzureVnetPeerV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/azureVnetPeerV2:AzureVnetPeerV2';

    /**
     * Returns true if the given object is an instance of AzureVnetPeerV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureVnetPeerV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureVnetPeerV2.__pulumiType;
    }

    /**
     * ID of the Cluster Data Centre.
     */
    public readonly cdcId!: pulumi.Output<string>;
    /**
     * Resource Group Name of the Data Centre Virtual Network.
     */
    public readonly dataCentreResourceGroup!: pulumi.Output<string>;
    /**
     * Subscription ID of the Data Centre Virtual Network.
     */
    public readonly dataCentreSubscriptionId!: pulumi.Output<string>;
    /**
     * The name of the Data Centre Virtual Network.
     */
    public readonly dataCentreVirtualNetworkName!: pulumi.Output<string>;
    /**
     * Reason for Peering Connection Failure.
     */
    public readonly failureReason!: pulumi.Output<string>;
    /**
     * Name of the Vpc Peering Connection.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the Active Directory Object to give peering permissions to, required for cross subscription peering.
     */
    public readonly peerAdObjectId!: pulumi.Output<string | undefined>;
    /**
     * Resource Group Name of the Virtual Network.
     */
    public readonly peerResourceGroup!: pulumi.Output<string>;
    /**
     * The subnets for the peering VPC.
     */
    public readonly peerSubnets!: pulumi.Output<string[]>;
    /**
     * Subscription ID of the Virtual Network.
     */
    public readonly peerSubscriptionId!: pulumi.Output<string>;
    /**
     * The name of the VPC Network you wish to peer to.
     */
    public readonly peerVirtualNetworkName!: pulumi.Output<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `GENESIS`, `PROVISIONING`, `FAILED`, `INACTIVE`, `CONNECTED` or
     * `UNKNOWN`.
     */
    public readonly statusCode!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.AzureVnetPeerV2Timeouts | undefined>;

    /**
     * Create a AzureVnetPeerV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureVnetPeerV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureVnetPeerV2Args | AzureVnetPeerV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureVnetPeerV2State | undefined;
            resourceInputs["cdcId"] = state ? state.cdcId : undefined;
            resourceInputs["dataCentreResourceGroup"] = state ? state.dataCentreResourceGroup : undefined;
            resourceInputs["dataCentreSubscriptionId"] = state ? state.dataCentreSubscriptionId : undefined;
            resourceInputs["dataCentreVirtualNetworkName"] = state ? state.dataCentreVirtualNetworkName : undefined;
            resourceInputs["failureReason"] = state ? state.failureReason : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerAdObjectId"] = state ? state.peerAdObjectId : undefined;
            resourceInputs["peerResourceGroup"] = state ? state.peerResourceGroup : undefined;
            resourceInputs["peerSubnets"] = state ? state.peerSubnets : undefined;
            resourceInputs["peerSubscriptionId"] = state ? state.peerSubscriptionId : undefined;
            resourceInputs["peerVirtualNetworkName"] = state ? state.peerVirtualNetworkName : undefined;
            resourceInputs["statusCode"] = state ? state.statusCode : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AzureVnetPeerV2Args | undefined;
            if ((!args || args.cdcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cdcId'");
            }
            if ((!args || args.peerResourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerResourceGroup'");
            }
            if ((!args || args.peerSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerSubnets'");
            }
            if ((!args || args.peerSubscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerSubscriptionId'");
            }
            if ((!args || args.peerVirtualNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerVirtualNetworkName'");
            }
            resourceInputs["cdcId"] = args ? args.cdcId : undefined;
            resourceInputs["dataCentreResourceGroup"] = args ? args.dataCentreResourceGroup : undefined;
            resourceInputs["dataCentreSubscriptionId"] = args ? args.dataCentreSubscriptionId : undefined;
            resourceInputs["dataCentreVirtualNetworkName"] = args ? args.dataCentreVirtualNetworkName : undefined;
            resourceInputs["failureReason"] = args ? args.failureReason : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerAdObjectId"] = args ? args.peerAdObjectId : undefined;
            resourceInputs["peerResourceGroup"] = args ? args.peerResourceGroup : undefined;
            resourceInputs["peerSubnets"] = args ? args.peerSubnets : undefined;
            resourceInputs["peerSubscriptionId"] = args ? args.peerSubscriptionId : undefined;
            resourceInputs["peerVirtualNetworkName"] = args ? args.peerVirtualNetworkName : undefined;
            resourceInputs["statusCode"] = args ? args.statusCode : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureVnetPeerV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureVnetPeerV2 resources.
 */
export interface AzureVnetPeerV2State {
    /**
     * ID of the Cluster Data Centre.
     */
    cdcId?: pulumi.Input<string>;
    /**
     * Resource Group Name of the Data Centre Virtual Network.
     */
    dataCentreResourceGroup?: pulumi.Input<string>;
    /**
     * Subscription ID of the Data Centre Virtual Network.
     */
    dataCentreSubscriptionId?: pulumi.Input<string>;
    /**
     * The name of the Data Centre Virtual Network.
     */
    dataCentreVirtualNetworkName?: pulumi.Input<string>;
    /**
     * Reason for Peering Connection Failure.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * Name of the Vpc Peering Connection.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Active Directory Object to give peering permissions to, required for cross subscription peering.
     */
    peerAdObjectId?: pulumi.Input<string>;
    /**
     * Resource Group Name of the Virtual Network.
     */
    peerResourceGroup?: pulumi.Input<string>;
    /**
     * The subnets for the peering VPC.
     */
    peerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subscription ID of the Virtual Network.
     */
    peerSubscriptionId?: pulumi.Input<string>;
    /**
     * The name of the VPC Network you wish to peer to.
     */
    peerVirtualNetworkName?: pulumi.Input<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `GENESIS`, `PROVISIONING`, `FAILED`, `INACTIVE`, `CONNECTED` or
     * `UNKNOWN`.
     */
    statusCode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AzureVnetPeerV2Timeouts>;
}

/**
 * The set of arguments for constructing a AzureVnetPeerV2 resource.
 */
export interface AzureVnetPeerV2Args {
    /**
     * ID of the Cluster Data Centre.
     */
    cdcId: pulumi.Input<string>;
    /**
     * Resource Group Name of the Data Centre Virtual Network.
     */
    dataCentreResourceGroup?: pulumi.Input<string>;
    /**
     * Subscription ID of the Data Centre Virtual Network.
     */
    dataCentreSubscriptionId?: pulumi.Input<string>;
    /**
     * The name of the Data Centre Virtual Network.
     */
    dataCentreVirtualNetworkName?: pulumi.Input<string>;
    /**
     * Reason for Peering Connection Failure.
     */
    failureReason?: pulumi.Input<string>;
    /**
     * Name of the Vpc Peering Connection.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the Active Directory Object to give peering permissions to, required for cross subscription peering.
     */
    peerAdObjectId?: pulumi.Input<string>;
    /**
     * Resource Group Name of the Virtual Network.
     */
    peerResourceGroup: pulumi.Input<string>;
    /**
     * The subnets for the peering VPC.
     */
    peerSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Subscription ID of the Virtual Network.
     */
    peerSubscriptionId: pulumi.Input<string>;
    /**
     * The name of the VPC Network you wish to peer to.
     */
    peerVirtualNetworkName: pulumi.Input<string>;
    /**
     * Status of the VPC Peering Connection. Values can be `GENESIS`, `PROVISIONING`, `FAILED`, `INACTIVE`, `CONNECTED` or
     * `UNKNOWN`.
     */
    statusCode?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.AzureVnetPeerV2Timeouts>;
}
