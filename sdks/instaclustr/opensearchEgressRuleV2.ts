// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OpensearchEgressRuleV2 extends pulumi.CustomResource {
    /**
     * Get an existing OpensearchEgressRuleV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OpensearchEgressRuleV2State, opts?: pulumi.CustomResourceOptions): OpensearchEgressRuleV2 {
        return new OpensearchEgressRuleV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/opensearchEgressRuleV2:OpensearchEgressRuleV2';

    /**
     * Returns true if the given object is an instance of OpensearchEgressRuleV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OpensearchEgressRuleV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OpensearchEgressRuleV2.__pulumiType;
    }

    /**
     * OpenSearch cluster Id
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Name of channel/desination assosciated with webhook
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * OpenSearch ID for alerting/notifications channel/destination for webhook
     */
    public readonly openSearchBindingId!: pulumi.Output<string>;
    /**
     * Source OpenSearch plugin that manages the channel/destination
     */
    public readonly source!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.OpensearchEgressRuleV2Timeouts | undefined>;
    /**
     * Type of the channel/destination
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a OpensearchEgressRuleV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OpensearchEgressRuleV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OpensearchEgressRuleV2Args | OpensearchEgressRuleV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OpensearchEgressRuleV2State | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openSearchBindingId"] = state ? state.openSearchBindingId : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as OpensearchEgressRuleV2Args | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.openSearchBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'openSearchBindingId'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openSearchBindingId"] = args ? args.openSearchBindingId : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OpensearchEgressRuleV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OpensearchEgressRuleV2 resources.
 */
export interface OpensearchEgressRuleV2State {
    /**
     * OpenSearch cluster Id
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Name of channel/desination assosciated with webhook
     */
    name?: pulumi.Input<string>;
    /**
     * OpenSearch ID for alerting/notifications channel/destination for webhook
     */
    openSearchBindingId?: pulumi.Input<string>;
    /**
     * Source OpenSearch plugin that manages the channel/destination
     */
    source?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OpensearchEgressRuleV2Timeouts>;
    /**
     * Type of the channel/destination
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OpensearchEgressRuleV2 resource.
 */
export interface OpensearchEgressRuleV2Args {
    /**
     * OpenSearch cluster Id
     */
    clusterId: pulumi.Input<string>;
    /**
     * Name of channel/desination assosciated with webhook
     */
    name?: pulumi.Input<string>;
    /**
     * OpenSearch ID for alerting/notifications channel/destination for webhook
     */
    openSearchBindingId: pulumi.Input<string>;
    /**
     * Source OpenSearch plugin that manages the channel/destination
     */
    source: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.OpensearchEgressRuleV2Timeouts>;
    /**
     * Type of the channel/destination
     */
    type?: pulumi.Input<string>;
}
