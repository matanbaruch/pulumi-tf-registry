// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getClusterExclusionWindowV2Instance(args: GetClusterExclusionWindowV2InstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterExclusionWindowV2InstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("instaclustr:index/getClusterExclusionWindowV2Instance:getClusterExclusionWindowV2Instance", {
        "clusterId": args.clusterId,
        "dayOfWeek": args.dayOfWeek,
        "durationInHours": args.durationInHours,
        "id": args.id,
        "startHour": args.startHour,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getClusterExclusionWindowV2Instance.
 */
export interface GetClusterExclusionWindowV2InstanceArgs {
    clusterId?: string;
    dayOfWeek?: string;
    durationInHours?: number;
    id: string;
    startHour?: number;
}

/**
 * A collection of values returned by getClusterExclusionWindowV2Instance.
 */
export interface GetClusterExclusionWindowV2InstanceResult {
    readonly clusterId: string;
    readonly dayOfWeek: string;
    readonly durationInHours: number;
    readonly id: string;
    readonly startHour: number;
}
export function getClusterExclusionWindowV2InstanceOutput(args: GetClusterExclusionWindowV2InstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetClusterExclusionWindowV2InstanceResult> {
    return pulumi.output(args).apply((a: any) => getClusterExclusionWindowV2Instance(a, opts))
}

/**
 * A collection of arguments for invoking getClusterExclusionWindowV2Instance.
 */
export interface GetClusterExclusionWindowV2InstanceOutputArgs {
    clusterId?: pulumi.Input<string>;
    dayOfWeek?: pulumi.Input<string>;
    durationInHours?: pulumi.Input<number>;
    id: pulumi.Input<string>;
    startHour?: pulumi.Input<number>;
}
