// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getAzureVnetPeerV2Instance(args: GetAzureVnetPeerV2InstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetAzureVnetPeerV2InstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("instaclustr:index/getAzureVnetPeerV2Instance:getAzureVnetPeerV2Instance", {
        "cdcId": args.cdcId,
        "dataCentreResourceGroup": args.dataCentreResourceGroup,
        "dataCentreSubscriptionId": args.dataCentreSubscriptionId,
        "dataCentreVirtualNetworkName": args.dataCentreVirtualNetworkName,
        "failureReason": args.failureReason,
        "id": args.id,
        "name": args.name,
        "peerAdObjectId": args.peerAdObjectId,
        "peerResourceGroup": args.peerResourceGroup,
        "peerSubnets": args.peerSubnets,
        "peerSubscriptionId": args.peerSubscriptionId,
        "peerVirtualNetworkName": args.peerVirtualNetworkName,
        "statusCode": args.statusCode,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getAzureVnetPeerV2Instance.
 */
export interface GetAzureVnetPeerV2InstanceArgs {
    cdcId?: string;
    dataCentreResourceGroup?: string;
    dataCentreSubscriptionId?: string;
    dataCentreVirtualNetworkName?: string;
    failureReason?: string;
    id: string;
    name?: string;
    peerAdObjectId?: string;
    peerResourceGroup?: string;
    peerSubnets?: string[];
    peerSubscriptionId?: string;
    peerVirtualNetworkName?: string;
    statusCode?: string;
}

/**
 * A collection of values returned by getAzureVnetPeerV2Instance.
 */
export interface GetAzureVnetPeerV2InstanceResult {
    readonly cdcId: string;
    readonly dataCentreResourceGroup: string;
    readonly dataCentreSubscriptionId: string;
    readonly dataCentreVirtualNetworkName: string;
    readonly failureReason: string;
    readonly id: string;
    readonly name: string;
    readonly peerAdObjectId: string;
    readonly peerResourceGroup: string;
    readonly peerSubnets: string[];
    readonly peerSubscriptionId: string;
    readonly peerVirtualNetworkName: string;
    readonly statusCode: string;
}
export function getAzureVnetPeerV2InstanceOutput(args: GetAzureVnetPeerV2InstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAzureVnetPeerV2InstanceResult> {
    return pulumi.output(args).apply((a: any) => getAzureVnetPeerV2Instance(a, opts))
}

/**
 * A collection of arguments for invoking getAzureVnetPeerV2Instance.
 */
export interface GetAzureVnetPeerV2InstanceOutputArgs {
    cdcId?: pulumi.Input<string>;
    dataCentreResourceGroup?: pulumi.Input<string>;
    dataCentreSubscriptionId?: pulumi.Input<string>;
    dataCentreVirtualNetworkName?: pulumi.Input<string>;
    failureReason?: pulumi.Input<string>;
    id: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    peerAdObjectId?: pulumi.Input<string>;
    peerResourceGroup?: pulumi.Input<string>;
    peerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    peerSubscriptionId?: pulumi.Input<string>;
    peerVirtualNetworkName?: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
}
