// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsEncryptionKeyV2Args, AwsEncryptionKeyV2State } from "./awsEncryptionKeyV2";
export type AwsEncryptionKeyV2 = import("./awsEncryptionKeyV2").AwsEncryptionKeyV2;
export const AwsEncryptionKeyV2: typeof import("./awsEncryptionKeyV2").AwsEncryptionKeyV2 = null as any;
utilities.lazyLoad(exports, ["AwsEncryptionKeyV2"], () => require("./awsEncryptionKeyV2"));

export { AwsEndpointServicePrincipalV2Args, AwsEndpointServicePrincipalV2State } from "./awsEndpointServicePrincipalV2";
export type AwsEndpointServicePrincipalV2 = import("./awsEndpointServicePrincipalV2").AwsEndpointServicePrincipalV2;
export const AwsEndpointServicePrincipalV2: typeof import("./awsEndpointServicePrincipalV2").AwsEndpointServicePrincipalV2 = null as any;
utilities.lazyLoad(exports, ["AwsEndpointServicePrincipalV2"], () => require("./awsEndpointServicePrincipalV2"));

export { AwsSecurityGroupFirewallRuleV2Args, AwsSecurityGroupFirewallRuleV2State } from "./awsSecurityGroupFirewallRuleV2";
export type AwsSecurityGroupFirewallRuleV2 = import("./awsSecurityGroupFirewallRuleV2").AwsSecurityGroupFirewallRuleV2;
export const AwsSecurityGroupFirewallRuleV2: typeof import("./awsSecurityGroupFirewallRuleV2").AwsSecurityGroupFirewallRuleV2 = null as any;
utilities.lazyLoad(exports, ["AwsSecurityGroupFirewallRuleV2"], () => require("./awsSecurityGroupFirewallRuleV2"));

export { AwsSecurityGroupFirewallRulesV2Args, AwsSecurityGroupFirewallRulesV2State } from "./awsSecurityGroupFirewallRulesV2";
export type AwsSecurityGroupFirewallRulesV2 = import("./awsSecurityGroupFirewallRulesV2").AwsSecurityGroupFirewallRulesV2;
export const AwsSecurityGroupFirewallRulesV2: typeof import("./awsSecurityGroupFirewallRulesV2").AwsSecurityGroupFirewallRulesV2 = null as any;
utilities.lazyLoad(exports, ["AwsSecurityGroupFirewallRulesV2"], () => require("./awsSecurityGroupFirewallRulesV2"));

export { AwsVpcPeerV2Args, AwsVpcPeerV2State } from "./awsVpcPeerV2";
export type AwsVpcPeerV2 = import("./awsVpcPeerV2").AwsVpcPeerV2;
export const AwsVpcPeerV2: typeof import("./awsVpcPeerV2").AwsVpcPeerV2 = null as any;
utilities.lazyLoad(exports, ["AwsVpcPeerV2"], () => require("./awsVpcPeerV2"));

export { AzureVnetPeerV2Args, AzureVnetPeerV2State } from "./azureVnetPeerV2";
export type AzureVnetPeerV2 = import("./azureVnetPeerV2").AzureVnetPeerV2;
export const AzureVnetPeerV2: typeof import("./azureVnetPeerV2").AzureVnetPeerV2 = null as any;
utilities.lazyLoad(exports, ["AzureVnetPeerV2"], () => require("./azureVnetPeerV2"));

export { CadenceClusterV2Args, CadenceClusterV2State } from "./cadenceClusterV2";
export type CadenceClusterV2 = import("./cadenceClusterV2").CadenceClusterV2;
export const CadenceClusterV2: typeof import("./cadenceClusterV2").CadenceClusterV2 = null as any;
utilities.lazyLoad(exports, ["CadenceClusterV2"], () => require("./cadenceClusterV2"));

export { CassandraClusterV2Args, CassandraClusterV2State } from "./cassandraClusterV2";
export type CassandraClusterV2 = import("./cassandraClusterV2").CassandraClusterV2;
export const CassandraClusterV2: typeof import("./cassandraClusterV2").CassandraClusterV2 = null as any;
utilities.lazyLoad(exports, ["CassandraClusterV2"], () => require("./cassandraClusterV2"));

export { ClickhouseClusterV2Args, ClickhouseClusterV2State } from "./clickhouseClusterV2";
export type ClickhouseClusterV2 = import("./clickhouseClusterV2").ClickhouseClusterV2;
export const ClickhouseClusterV2: typeof import("./clickhouseClusterV2").ClickhouseClusterV2 = null as any;
utilities.lazyLoad(exports, ["ClickhouseClusterV2"], () => require("./clickhouseClusterV2"));

export { ClusterExclusionWindowV2Args, ClusterExclusionWindowV2State } from "./clusterExclusionWindowV2";
export type ClusterExclusionWindowV2 = import("./clusterExclusionWindowV2").ClusterExclusionWindowV2;
export const ClusterExclusionWindowV2: typeof import("./clusterExclusionWindowV2").ClusterExclusionWindowV2 = null as any;
utilities.lazyLoad(exports, ["ClusterExclusionWindowV2"], () => require("./clusterExclusionWindowV2"));

export { ClusterNetworkFirewallRuleV2Args, ClusterNetworkFirewallRuleV2State } from "./clusterNetworkFirewallRuleV2";
export type ClusterNetworkFirewallRuleV2 = import("./clusterNetworkFirewallRuleV2").ClusterNetworkFirewallRuleV2;
export const ClusterNetworkFirewallRuleV2: typeof import("./clusterNetworkFirewallRuleV2").ClusterNetworkFirewallRuleV2 = null as any;
utilities.lazyLoad(exports, ["ClusterNetworkFirewallRuleV2"], () => require("./clusterNetworkFirewallRuleV2"));

export { ClusterNetworkFirewallRulesV2Args, ClusterNetworkFirewallRulesV2State } from "./clusterNetworkFirewallRulesV2";
export type ClusterNetworkFirewallRulesV2 = import("./clusterNetworkFirewallRulesV2").ClusterNetworkFirewallRulesV2;
export const ClusterNetworkFirewallRulesV2: typeof import("./clusterNetworkFirewallRulesV2").ClusterNetworkFirewallRulesV2 = null as any;
utilities.lazyLoad(exports, ["ClusterNetworkFirewallRulesV2"], () => require("./clusterNetworkFirewallRulesV2"));

export { ClusterWaiterV2Args, ClusterWaiterV2State } from "./clusterWaiterV2";
export type ClusterWaiterV2 = import("./clusterWaiterV2").ClusterWaiterV2;
export const ClusterWaiterV2: typeof import("./clusterWaiterV2").ClusterWaiterV2 = null as any;
utilities.lazyLoad(exports, ["ClusterWaiterV2"], () => require("./clusterWaiterV2"));

export { CouchbaseClusterV2Args, CouchbaseClusterV2State } from "./couchbaseClusterV2";
export type CouchbaseClusterV2 = import("./couchbaseClusterV2").CouchbaseClusterV2;
export const CouchbaseClusterV2: typeof import("./couchbaseClusterV2").CouchbaseClusterV2 = null as any;
utilities.lazyLoad(exports, ["CouchbaseClusterV2"], () => require("./couchbaseClusterV2"));

export { GcpVpcPeerV2Args, GcpVpcPeerV2State } from "./gcpVpcPeerV2";
export type GcpVpcPeerV2 = import("./gcpVpcPeerV2").GcpVpcPeerV2;
export const GcpVpcPeerV2: typeof import("./gcpVpcPeerV2").GcpVpcPeerV2 = null as any;
utilities.lazyLoad(exports, ["GcpVpcPeerV2"], () => require("./gcpVpcPeerV2"));

export { GetAwsClusterSecurityGroupFirewallRulesV2Args, GetAwsClusterSecurityGroupFirewallRulesV2Result, GetAwsClusterSecurityGroupFirewallRulesV2OutputArgs } from "./getAwsClusterSecurityGroupFirewallRulesV2";
export const getAwsClusterSecurityGroupFirewallRulesV2: typeof import("./getAwsClusterSecurityGroupFirewallRulesV2").getAwsClusterSecurityGroupFirewallRulesV2 = null as any;
export const getAwsClusterSecurityGroupFirewallRulesV2Output: typeof import("./getAwsClusterSecurityGroupFirewallRulesV2").getAwsClusterSecurityGroupFirewallRulesV2Output = null as any;
utilities.lazyLoad(exports, ["getAwsClusterSecurityGroupFirewallRulesV2","getAwsClusterSecurityGroupFirewallRulesV2Output"], () => require("./getAwsClusterSecurityGroupFirewallRulesV2"));

export { GetAwsEncryptionKeyV2InstanceArgs, GetAwsEncryptionKeyV2InstanceResult, GetAwsEncryptionKeyV2InstanceOutputArgs } from "./getAwsEncryptionKeyV2Instance";
export const getAwsEncryptionKeyV2Instance: typeof import("./getAwsEncryptionKeyV2Instance").getAwsEncryptionKeyV2Instance = null as any;
export const getAwsEncryptionKeyV2InstanceOutput: typeof import("./getAwsEncryptionKeyV2Instance").getAwsEncryptionKeyV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAwsEncryptionKeyV2Instance","getAwsEncryptionKeyV2InstanceOutput"], () => require("./getAwsEncryptionKeyV2Instance"));

export { GetAwsEncryptionKeysV2Args, GetAwsEncryptionKeysV2Result, GetAwsEncryptionKeysV2OutputArgs } from "./getAwsEncryptionKeysV2";
export const getAwsEncryptionKeysV2: typeof import("./getAwsEncryptionKeysV2").getAwsEncryptionKeysV2 = null as any;
export const getAwsEncryptionKeysV2Output: typeof import("./getAwsEncryptionKeysV2").getAwsEncryptionKeysV2Output = null as any;
utilities.lazyLoad(exports, ["getAwsEncryptionKeysV2","getAwsEncryptionKeysV2Output"], () => require("./getAwsEncryptionKeysV2"));

export { GetAwsEndpointServicePrincipalV2InstanceArgs, GetAwsEndpointServicePrincipalV2InstanceResult, GetAwsEndpointServicePrincipalV2InstanceOutputArgs } from "./getAwsEndpointServicePrincipalV2Instance";
export const getAwsEndpointServicePrincipalV2Instance: typeof import("./getAwsEndpointServicePrincipalV2Instance").getAwsEndpointServicePrincipalV2Instance = null as any;
export const getAwsEndpointServicePrincipalV2InstanceOutput: typeof import("./getAwsEndpointServicePrincipalV2Instance").getAwsEndpointServicePrincipalV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAwsEndpointServicePrincipalV2Instance","getAwsEndpointServicePrincipalV2InstanceOutput"], () => require("./getAwsEndpointServicePrincipalV2Instance"));

export { GetAwsSecurityGroupFirewallRuleV2InstanceArgs, GetAwsSecurityGroupFirewallRuleV2InstanceResult, GetAwsSecurityGroupFirewallRuleV2InstanceOutputArgs } from "./getAwsSecurityGroupFirewallRuleV2Instance";
export const getAwsSecurityGroupFirewallRuleV2Instance: typeof import("./getAwsSecurityGroupFirewallRuleV2Instance").getAwsSecurityGroupFirewallRuleV2Instance = null as any;
export const getAwsSecurityGroupFirewallRuleV2InstanceOutput: typeof import("./getAwsSecurityGroupFirewallRuleV2Instance").getAwsSecurityGroupFirewallRuleV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAwsSecurityGroupFirewallRuleV2Instance","getAwsSecurityGroupFirewallRuleV2InstanceOutput"], () => require("./getAwsSecurityGroupFirewallRuleV2Instance"));

export { GetAwsSecurityGroupFirewallRulesV2InstanceArgs, GetAwsSecurityGroupFirewallRulesV2InstanceResult, GetAwsSecurityGroupFirewallRulesV2InstanceOutputArgs } from "./getAwsSecurityGroupFirewallRulesV2Instance";
export const getAwsSecurityGroupFirewallRulesV2Instance: typeof import("./getAwsSecurityGroupFirewallRulesV2Instance").getAwsSecurityGroupFirewallRulesV2Instance = null as any;
export const getAwsSecurityGroupFirewallRulesV2InstanceOutput: typeof import("./getAwsSecurityGroupFirewallRulesV2Instance").getAwsSecurityGroupFirewallRulesV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAwsSecurityGroupFirewallRulesV2Instance","getAwsSecurityGroupFirewallRulesV2InstanceOutput"], () => require("./getAwsSecurityGroupFirewallRulesV2Instance"));

export { GetAwsVpcPeerV2InstanceArgs, GetAwsVpcPeerV2InstanceResult, GetAwsVpcPeerV2InstanceOutputArgs } from "./getAwsVpcPeerV2Instance";
export const getAwsVpcPeerV2Instance: typeof import("./getAwsVpcPeerV2Instance").getAwsVpcPeerV2Instance = null as any;
export const getAwsVpcPeerV2InstanceOutput: typeof import("./getAwsVpcPeerV2Instance").getAwsVpcPeerV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAwsVpcPeerV2Instance","getAwsVpcPeerV2InstanceOutput"], () => require("./getAwsVpcPeerV2Instance"));

export { GetAwsVpcPeersV2Args, GetAwsVpcPeersV2Result, GetAwsVpcPeersV2OutputArgs } from "./getAwsVpcPeersV2";
export const getAwsVpcPeersV2: typeof import("./getAwsVpcPeersV2").getAwsVpcPeersV2 = null as any;
export const getAwsVpcPeersV2Output: typeof import("./getAwsVpcPeersV2").getAwsVpcPeersV2Output = null as any;
utilities.lazyLoad(exports, ["getAwsVpcPeersV2","getAwsVpcPeersV2Output"], () => require("./getAwsVpcPeersV2"));

export { GetAzureVnetPeerV2InstanceArgs, GetAzureVnetPeerV2InstanceResult, GetAzureVnetPeerV2InstanceOutputArgs } from "./getAzureVnetPeerV2Instance";
export const getAzureVnetPeerV2Instance: typeof import("./getAzureVnetPeerV2Instance").getAzureVnetPeerV2Instance = null as any;
export const getAzureVnetPeerV2InstanceOutput: typeof import("./getAzureVnetPeerV2Instance").getAzureVnetPeerV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getAzureVnetPeerV2Instance","getAzureVnetPeerV2InstanceOutput"], () => require("./getAzureVnetPeerV2Instance"));

export { GetAzureVnetPeersV2Args, GetAzureVnetPeersV2Result, GetAzureVnetPeersV2OutputArgs } from "./getAzureVnetPeersV2";
export const getAzureVnetPeersV2: typeof import("./getAzureVnetPeersV2").getAzureVnetPeersV2 = null as any;
export const getAzureVnetPeersV2Output: typeof import("./getAzureVnetPeersV2").getAzureVnetPeersV2Output = null as any;
utilities.lazyLoad(exports, ["getAzureVnetPeersV2","getAzureVnetPeersV2Output"], () => require("./getAzureVnetPeersV2"));

export { GetCadenceClusterV2InstanceArgs, GetCadenceClusterV2InstanceResult, GetCadenceClusterV2InstanceOutputArgs } from "./getCadenceClusterV2Instance";
export const getCadenceClusterV2Instance: typeof import("./getCadenceClusterV2Instance").getCadenceClusterV2Instance = null as any;
export const getCadenceClusterV2InstanceOutput: typeof import("./getCadenceClusterV2Instance").getCadenceClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getCadenceClusterV2Instance","getCadenceClusterV2InstanceOutput"], () => require("./getCadenceClusterV2Instance"));

export { GetCassandraClusterV2InstanceArgs, GetCassandraClusterV2InstanceResult, GetCassandraClusterV2InstanceOutputArgs } from "./getCassandraClusterV2Instance";
export const getCassandraClusterV2Instance: typeof import("./getCassandraClusterV2Instance").getCassandraClusterV2Instance = null as any;
export const getCassandraClusterV2InstanceOutput: typeof import("./getCassandraClusterV2Instance").getCassandraClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getCassandraClusterV2Instance","getCassandraClusterV2InstanceOutput"], () => require("./getCassandraClusterV2Instance"));

export { GetClickhouseClusterV2InstanceArgs, GetClickhouseClusterV2InstanceResult, GetClickhouseClusterV2InstanceOutputArgs } from "./getClickhouseClusterV2Instance";
export const getClickhouseClusterV2Instance: typeof import("./getClickhouseClusterV2Instance").getClickhouseClusterV2Instance = null as any;
export const getClickhouseClusterV2InstanceOutput: typeof import("./getClickhouseClusterV2Instance").getClickhouseClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getClickhouseClusterV2Instance","getClickhouseClusterV2InstanceOutput"], () => require("./getClickhouseClusterV2Instance"));

export { GetClusterDataCenterAwsEndpointServicePrincipalsV2Args, GetClusterDataCenterAwsEndpointServicePrincipalsV2Result, GetClusterDataCenterAwsEndpointServicePrincipalsV2OutputArgs } from "./getClusterDataCenterAwsEndpointServicePrincipalsV2";
export const getClusterDataCenterAwsEndpointServicePrincipalsV2: typeof import("./getClusterDataCenterAwsEndpointServicePrincipalsV2").getClusterDataCenterAwsEndpointServicePrincipalsV2 = null as any;
export const getClusterDataCenterAwsEndpointServicePrincipalsV2Output: typeof import("./getClusterDataCenterAwsEndpointServicePrincipalsV2").getClusterDataCenterAwsEndpointServicePrincipalsV2Output = null as any;
utilities.lazyLoad(exports, ["getClusterDataCenterAwsEndpointServicePrincipalsV2","getClusterDataCenterAwsEndpointServicePrincipalsV2Output"], () => require("./getClusterDataCenterAwsEndpointServicePrincipalsV2"));

export { GetClusterExclusionWindowV2InstanceArgs, GetClusterExclusionWindowV2InstanceResult, GetClusterExclusionWindowV2InstanceOutputArgs } from "./getClusterExclusionWindowV2Instance";
export const getClusterExclusionWindowV2Instance: typeof import("./getClusterExclusionWindowV2Instance").getClusterExclusionWindowV2Instance = null as any;
export const getClusterExclusionWindowV2InstanceOutput: typeof import("./getClusterExclusionWindowV2Instance").getClusterExclusionWindowV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterExclusionWindowV2Instance","getClusterExclusionWindowV2InstanceOutput"], () => require("./getClusterExclusionWindowV2Instance"));

export { GetClusterExclusionWindowsV2Args, GetClusterExclusionWindowsV2Result, GetClusterExclusionWindowsV2OutputArgs } from "./getClusterExclusionWindowsV2";
export const getClusterExclusionWindowsV2: typeof import("./getClusterExclusionWindowsV2").getClusterExclusionWindowsV2 = null as any;
export const getClusterExclusionWindowsV2Output: typeof import("./getClusterExclusionWindowsV2").getClusterExclusionWindowsV2Output = null as any;
utilities.lazyLoad(exports, ["getClusterExclusionWindowsV2","getClusterExclusionWindowsV2Output"], () => require("./getClusterExclusionWindowsV2"));

export { GetClusterNetworkFirewallRuleV2InstanceArgs, GetClusterNetworkFirewallRuleV2InstanceResult, GetClusterNetworkFirewallRuleV2InstanceOutputArgs } from "./getClusterNetworkFirewallRuleV2Instance";
export const getClusterNetworkFirewallRuleV2Instance: typeof import("./getClusterNetworkFirewallRuleV2Instance").getClusterNetworkFirewallRuleV2Instance = null as any;
export const getClusterNetworkFirewallRuleV2InstanceOutput: typeof import("./getClusterNetworkFirewallRuleV2Instance").getClusterNetworkFirewallRuleV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterNetworkFirewallRuleV2Instance","getClusterNetworkFirewallRuleV2InstanceOutput"], () => require("./getClusterNetworkFirewallRuleV2Instance"));

export { GetClusterNetworkFirewallRulesV2Args, GetClusterNetworkFirewallRulesV2Result, GetClusterNetworkFirewallRulesV2OutputArgs } from "./getClusterNetworkFirewallRulesV2";
export const getClusterNetworkFirewallRulesV2: typeof import("./getClusterNetworkFirewallRulesV2").getClusterNetworkFirewallRulesV2 = null as any;
export const getClusterNetworkFirewallRulesV2Output: typeof import("./getClusterNetworkFirewallRulesV2").getClusterNetworkFirewallRulesV2Output = null as any;
utilities.lazyLoad(exports, ["getClusterNetworkFirewallRulesV2","getClusterNetworkFirewallRulesV2Output"], () => require("./getClusterNetworkFirewallRulesV2"));

export { GetClusterNetworkFirewallRulesV2InstanceArgs, GetClusterNetworkFirewallRulesV2InstanceResult, GetClusterNetworkFirewallRulesV2InstanceOutputArgs } from "./getClusterNetworkFirewallRulesV2Instance";
export const getClusterNetworkFirewallRulesV2Instance: typeof import("./getClusterNetworkFirewallRulesV2Instance").getClusterNetworkFirewallRulesV2Instance = null as any;
export const getClusterNetworkFirewallRulesV2InstanceOutput: typeof import("./getClusterNetworkFirewallRulesV2Instance").getClusterNetworkFirewallRulesV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterNetworkFirewallRulesV2Instance","getClusterNetworkFirewallRulesV2InstanceOutput"], () => require("./getClusterNetworkFirewallRulesV2Instance"));

export { GetClusterV2Args, GetClusterV2Result, GetClusterV2OutputArgs } from "./getClusterV2";
export const getClusterV2: typeof import("./getClusterV2").getClusterV2 = null as any;
export const getClusterV2Output: typeof import("./getClusterV2").getClusterV2Output = null as any;
utilities.lazyLoad(exports, ["getClusterV2","getClusterV2Output"], () => require("./getClusterV2"));

export { GetClusterWaiterV2InstanceArgs, GetClusterWaiterV2InstanceResult, GetClusterWaiterV2InstanceOutputArgs } from "./getClusterWaiterV2Instance";
export const getClusterWaiterV2Instance: typeof import("./getClusterWaiterV2Instance").getClusterWaiterV2Instance = null as any;
export const getClusterWaiterV2InstanceOutput: typeof import("./getClusterWaiterV2Instance").getClusterWaiterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getClusterWaiterV2Instance","getClusterWaiterV2InstanceOutput"], () => require("./getClusterWaiterV2Instance"));

export { GetClustersV2Args, GetClustersV2Result, GetClustersV2OutputArgs } from "./getClustersV2";
export const getClustersV2: typeof import("./getClustersV2").getClustersV2 = null as any;
export const getClustersV2Output: typeof import("./getClustersV2").getClustersV2Output = null as any;
utilities.lazyLoad(exports, ["getClustersV2","getClustersV2Output"], () => require("./getClustersV2"));

export { GetCouchbaseClusterV2InstanceArgs, GetCouchbaseClusterV2InstanceResult, GetCouchbaseClusterV2InstanceOutputArgs } from "./getCouchbaseClusterV2Instance";
export const getCouchbaseClusterV2Instance: typeof import("./getCouchbaseClusterV2Instance").getCouchbaseClusterV2Instance = null as any;
export const getCouchbaseClusterV2InstanceOutput: typeof import("./getCouchbaseClusterV2Instance").getCouchbaseClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getCouchbaseClusterV2Instance","getCouchbaseClusterV2InstanceOutput"], () => require("./getCouchbaseClusterV2Instance"));

export { GetGcpVpcPeerV2InstanceArgs, GetGcpVpcPeerV2InstanceResult, GetGcpVpcPeerV2InstanceOutputArgs } from "./getGcpVpcPeerV2Instance";
export const getGcpVpcPeerV2Instance: typeof import("./getGcpVpcPeerV2Instance").getGcpVpcPeerV2Instance = null as any;
export const getGcpVpcPeerV2InstanceOutput: typeof import("./getGcpVpcPeerV2Instance").getGcpVpcPeerV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getGcpVpcPeerV2Instance","getGcpVpcPeerV2InstanceOutput"], () => require("./getGcpVpcPeerV2Instance"));

export { GetGcpVpcPeersV2Args, GetGcpVpcPeersV2Result, GetGcpVpcPeersV2OutputArgs } from "./getGcpVpcPeersV2";
export const getGcpVpcPeersV2: typeof import("./getGcpVpcPeersV2").getGcpVpcPeersV2 = null as any;
export const getGcpVpcPeersV2Output: typeof import("./getGcpVpcPeersV2").getGcpVpcPeersV2Output = null as any;
utilities.lazyLoad(exports, ["getGcpVpcPeersV2","getGcpVpcPeersV2Output"], () => require("./getGcpVpcPeersV2"));

export { GetKafkaAclV2InstanceArgs, GetKafkaAclV2InstanceResult, GetKafkaAclV2InstanceOutputArgs } from "./getKafkaAclV2Instance";
export const getKafkaAclV2Instance: typeof import("./getKafkaAclV2Instance").getKafkaAclV2Instance = null as any;
export const getKafkaAclV2InstanceOutput: typeof import("./getKafkaAclV2Instance").getKafkaAclV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaAclV2Instance","getKafkaAclV2InstanceOutput"], () => require("./getKafkaAclV2Instance"));

export { GetKafkaAclV3InstanceArgs, GetKafkaAclV3InstanceResult, GetKafkaAclV3InstanceOutputArgs } from "./getKafkaAclV3Instance";
export const getKafkaAclV3Instance: typeof import("./getKafkaAclV3Instance").getKafkaAclV3Instance = null as any;
export const getKafkaAclV3InstanceOutput: typeof import("./getKafkaAclV3Instance").getKafkaAclV3InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaAclV3Instance","getKafkaAclV3InstanceOutput"], () => require("./getKafkaAclV3Instance"));

export { GetKafkaClusterAclsV2Args, GetKafkaClusterAclsV2Result, GetKafkaClusterAclsV2OutputArgs } from "./getKafkaClusterAclsV2";
export const getKafkaClusterAclsV2: typeof import("./getKafkaClusterAclsV2").getKafkaClusterAclsV2 = null as any;
export const getKafkaClusterAclsV2Output: typeof import("./getKafkaClusterAclsV2").getKafkaClusterAclsV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaClusterAclsV2","getKafkaClusterAclsV2Output"], () => require("./getKafkaClusterAclsV2"));

export { GetKafkaClusterKafkaTopicsV2Args, GetKafkaClusterKafkaTopicsV2Result, GetKafkaClusterKafkaTopicsV2OutputArgs } from "./getKafkaClusterKafkaTopicsV2";
export const getKafkaClusterKafkaTopicsV2: typeof import("./getKafkaClusterKafkaTopicsV2").getKafkaClusterKafkaTopicsV2 = null as any;
export const getKafkaClusterKafkaTopicsV2Output: typeof import("./getKafkaClusterKafkaTopicsV2").getKafkaClusterKafkaTopicsV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaClusterKafkaTopicsV2","getKafkaClusterKafkaTopicsV2Output"], () => require("./getKafkaClusterKafkaTopicsV2"));

export { GetKafkaClusterSearchV2Args, GetKafkaClusterSearchV2Result, GetKafkaClusterSearchV2OutputArgs } from "./getKafkaClusterSearchV2";
export const getKafkaClusterSearchV2: typeof import("./getKafkaClusterSearchV2").getKafkaClusterSearchV2 = null as any;
export const getKafkaClusterSearchV2Output: typeof import("./getKafkaClusterSearchV2").getKafkaClusterSearchV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaClusterSearchV2","getKafkaClusterSearchV2Output"], () => require("./getKafkaClusterSearchV2"));

export { GetKafkaClusterUsersV2Args, GetKafkaClusterUsersV2Result, GetKafkaClusterUsersV2OutputArgs } from "./getKafkaClusterUsersV2";
export const getKafkaClusterUsersV2: typeof import("./getKafkaClusterUsersV2").getKafkaClusterUsersV2 = null as any;
export const getKafkaClusterUsersV2Output: typeof import("./getKafkaClusterUsersV2").getKafkaClusterUsersV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaClusterUsersV2","getKafkaClusterUsersV2Output"], () => require("./getKafkaClusterUsersV2"));

export { GetKafkaClusterV2InstanceArgs, GetKafkaClusterV2InstanceResult, GetKafkaClusterV2InstanceOutputArgs } from "./getKafkaClusterV2Instance";
export const getKafkaClusterV2Instance: typeof import("./getKafkaClusterV2Instance").getKafkaClusterV2Instance = null as any;
export const getKafkaClusterV2InstanceOutput: typeof import("./getKafkaClusterV2Instance").getKafkaClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaClusterV2Instance","getKafkaClusterV2InstanceOutput"], () => require("./getKafkaClusterV2Instance"));

export { GetKafkaClusterV3InstanceArgs, GetKafkaClusterV3InstanceResult, GetKafkaClusterV3InstanceOutputArgs } from "./getKafkaClusterV3Instance";
export const getKafkaClusterV3Instance: typeof import("./getKafkaClusterV3Instance").getKafkaClusterV3Instance = null as any;
export const getKafkaClusterV3InstanceOutput: typeof import("./getKafkaClusterV3Instance").getKafkaClusterV3InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaClusterV3Instance","getKafkaClusterV3InstanceOutput"], () => require("./getKafkaClusterV3Instance"));

export { GetKafkaConnectClusterMirrorsV2Args, GetKafkaConnectClusterMirrorsV2Result, GetKafkaConnectClusterMirrorsV2OutputArgs } from "./getKafkaConnectClusterMirrorsV2";
export const getKafkaConnectClusterMirrorsV2: typeof import("./getKafkaConnectClusterMirrorsV2").getKafkaConnectClusterMirrorsV2 = null as any;
export const getKafkaConnectClusterMirrorsV2Output: typeof import("./getKafkaConnectClusterMirrorsV2").getKafkaConnectClusterMirrorsV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaConnectClusterMirrorsV2","getKafkaConnectClusterMirrorsV2Output"], () => require("./getKafkaConnectClusterMirrorsV2"));

export { GetKafkaConnectClusterV2InstanceArgs, GetKafkaConnectClusterV2InstanceResult, GetKafkaConnectClusterV2InstanceOutputArgs } from "./getKafkaConnectClusterV2Instance";
export const getKafkaConnectClusterV2Instance: typeof import("./getKafkaConnectClusterV2Instance").getKafkaConnectClusterV2Instance = null as any;
export const getKafkaConnectClusterV2InstanceOutput: typeof import("./getKafkaConnectClusterV2Instance").getKafkaConnectClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaConnectClusterV2Instance","getKafkaConnectClusterV2InstanceOutput"], () => require("./getKafkaConnectClusterV2Instance"));

export { GetKafkaConnectMirrorV2InstanceArgs, GetKafkaConnectMirrorV2InstanceResult, GetKafkaConnectMirrorV2InstanceOutputArgs } from "./getKafkaConnectMirrorV2Instance";
export const getKafkaConnectMirrorV2Instance: typeof import("./getKafkaConnectMirrorV2Instance").getKafkaConnectMirrorV2Instance = null as any;
export const getKafkaConnectMirrorV2InstanceOutput: typeof import("./getKafkaConnectMirrorV2Instance").getKafkaConnectMirrorV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaConnectMirrorV2Instance","getKafkaConnectMirrorV2InstanceOutput"], () => require("./getKafkaConnectMirrorV2Instance"));

export { GetKafkaRestProxyClusterUsersV2Args, GetKafkaRestProxyClusterUsersV2Result, GetKafkaRestProxyClusterUsersV2OutputArgs } from "./getKafkaRestProxyClusterUsersV2";
export const getKafkaRestProxyClusterUsersV2: typeof import("./getKafkaRestProxyClusterUsersV2").getKafkaRestProxyClusterUsersV2 = null as any;
export const getKafkaRestProxyClusterUsersV2Output: typeof import("./getKafkaRestProxyClusterUsersV2").getKafkaRestProxyClusterUsersV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaRestProxyClusterUsersV2","getKafkaRestProxyClusterUsersV2Output"], () => require("./getKafkaRestProxyClusterUsersV2"));

export { GetKafkaSchemaRegistryClusterUsersV2Args, GetKafkaSchemaRegistryClusterUsersV2Result, GetKafkaSchemaRegistryClusterUsersV2OutputArgs } from "./getKafkaSchemaRegistryClusterUsersV2";
export const getKafkaSchemaRegistryClusterUsersV2: typeof import("./getKafkaSchemaRegistryClusterUsersV2").getKafkaSchemaRegistryClusterUsersV2 = null as any;
export const getKafkaSchemaRegistryClusterUsersV2Output: typeof import("./getKafkaSchemaRegistryClusterUsersV2").getKafkaSchemaRegistryClusterUsersV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaSchemaRegistryClusterUsersV2","getKafkaSchemaRegistryClusterUsersV2Output"], () => require("./getKafkaSchemaRegistryClusterUsersV2"));

export { GetKafkaTopicV2InstanceArgs, GetKafkaTopicV2InstanceResult, GetKafkaTopicV2InstanceOutputArgs } from "./getKafkaTopicV2Instance";
export const getKafkaTopicV2Instance: typeof import("./getKafkaTopicV2Instance").getKafkaTopicV2Instance = null as any;
export const getKafkaTopicV2InstanceOutput: typeof import("./getKafkaTopicV2Instance").getKafkaTopicV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaTopicV2Instance","getKafkaTopicV2InstanceOutput"], () => require("./getKafkaTopicV2Instance"));

export { GetKafkaTopicV3InstanceArgs, GetKafkaTopicV3InstanceResult, GetKafkaTopicV3InstanceOutputArgs } from "./getKafkaTopicV3Instance";
export const getKafkaTopicV3Instance: typeof import("./getKafkaTopicV3Instance").getKafkaTopicV3Instance = null as any;
export const getKafkaTopicV3InstanceOutput: typeof import("./getKafkaTopicV3Instance").getKafkaTopicV3InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaTopicV3Instance","getKafkaTopicV3InstanceOutput"], () => require("./getKafkaTopicV3Instance"));

export { GetKafkaUserCertificateV2InstanceArgs, GetKafkaUserCertificateV2InstanceResult, GetKafkaUserCertificateV2InstanceOutputArgs } from "./getKafkaUserCertificateV2Instance";
export const getKafkaUserCertificateV2Instance: typeof import("./getKafkaUserCertificateV2Instance").getKafkaUserCertificateV2Instance = null as any;
export const getKafkaUserCertificateV2InstanceOutput: typeof import("./getKafkaUserCertificateV2Instance").getKafkaUserCertificateV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaUserCertificateV2Instance","getKafkaUserCertificateV2InstanceOutput"], () => require("./getKafkaUserCertificateV2Instance"));

export { GetKafkaUserV2InstanceArgs, GetKafkaUserV2InstanceResult, GetKafkaUserV2InstanceOutputArgs } from "./getKafkaUserV2Instance";
export const getKafkaUserV2Instance: typeof import("./getKafkaUserV2Instance").getKafkaUserV2Instance = null as any;
export const getKafkaUserV2InstanceOutput: typeof import("./getKafkaUserV2Instance").getKafkaUserV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaUserV2Instance","getKafkaUserV2InstanceOutput"], () => require("./getKafkaUserV2Instance"));

export { GetKafkaUserV3InstanceArgs, GetKafkaUserV3InstanceResult, GetKafkaUserV3InstanceOutputArgs } from "./getKafkaUserV3Instance";
export const getKafkaUserV3Instance: typeof import("./getKafkaUserV3Instance").getKafkaUserV3Instance = null as any;
export const getKafkaUserV3InstanceOutput: typeof import("./getKafkaUserV3Instance").getKafkaUserV3InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaUserV3Instance","getKafkaUserV3InstanceOutput"], () => require("./getKafkaUserV3Instance"));

export { GetKafkaUserV4InstanceArgs, GetKafkaUserV4InstanceResult, GetKafkaUserV4InstanceOutputArgs } from "./getKafkaUserV4Instance";
export const getKafkaUserV4Instance: typeof import("./getKafkaUserV4Instance").getKafkaUserV4Instance = null as any;
export const getKafkaUserV4InstanceOutput: typeof import("./getKafkaUserV4Instance").getKafkaUserV4InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaUserV4Instance","getKafkaUserV4InstanceOutput"], () => require("./getKafkaUserV4Instance"));

export { GetKafkaUserV5InstanceArgs, GetKafkaUserV5InstanceResult, GetKafkaUserV5InstanceOutputArgs } from "./getKafkaUserV5Instance";
export const getKafkaUserV5Instance: typeof import("./getKafkaUserV5Instance").getKafkaUserV5Instance = null as any;
export const getKafkaUserV5InstanceOutput: typeof import("./getKafkaUserV5Instance").getKafkaUserV5InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaUserV5Instance","getKafkaUserV5InstanceOutput"], () => require("./getKafkaUserV5Instance"));

export { GetKafkaUsersUserCertificatesV2Args, GetKafkaUsersUserCertificatesV2Result, GetKafkaUsersUserCertificatesV2OutputArgs } from "./getKafkaUsersUserCertificatesV2";
export const getKafkaUsersUserCertificatesV2: typeof import("./getKafkaUsersUserCertificatesV2").getKafkaUsersUserCertificatesV2 = null as any;
export const getKafkaUsersUserCertificatesV2Output: typeof import("./getKafkaUsersUserCertificatesV2").getKafkaUsersUserCertificatesV2Output = null as any;
utilities.lazyLoad(exports, ["getKafkaUsersUserCertificatesV2","getKafkaUsersUserCertificatesV2Output"], () => require("./getKafkaUsersUserCertificatesV2"));

export { GetKarapaceRestProxyClusterUsersV2Args, GetKarapaceRestProxyClusterUsersV2Result, GetKarapaceRestProxyClusterUsersV2OutputArgs } from "./getKarapaceRestProxyClusterUsersV2";
export const getKarapaceRestProxyClusterUsersV2: typeof import("./getKarapaceRestProxyClusterUsersV2").getKarapaceRestProxyClusterUsersV2 = null as any;
export const getKarapaceRestProxyClusterUsersV2Output: typeof import("./getKarapaceRestProxyClusterUsersV2").getKarapaceRestProxyClusterUsersV2Output = null as any;
utilities.lazyLoad(exports, ["getKarapaceRestProxyClusterUsersV2","getKarapaceRestProxyClusterUsersV2Output"], () => require("./getKarapaceRestProxyClusterUsersV2"));

export { GetKarapaceSchemaRegistryClusterUsersV2Args, GetKarapaceSchemaRegistryClusterUsersV2Result, GetKarapaceSchemaRegistryClusterUsersV2OutputArgs } from "./getKarapaceSchemaRegistryClusterUsersV2";
export const getKarapaceSchemaRegistryClusterUsersV2: typeof import("./getKarapaceSchemaRegistryClusterUsersV2").getKarapaceSchemaRegistryClusterUsersV2 = null as any;
export const getKarapaceSchemaRegistryClusterUsersV2Output: typeof import("./getKarapaceSchemaRegistryClusterUsersV2").getKarapaceSchemaRegistryClusterUsersV2Output = null as any;
utilities.lazyLoad(exports, ["getKarapaceSchemaRegistryClusterUsersV2","getKarapaceSchemaRegistryClusterUsersV2Output"], () => require("./getKarapaceSchemaRegistryClusterUsersV2"));

export { GetMongodbClusterV2InstanceArgs, GetMongodbClusterV2InstanceResult, GetMongodbClusterV2InstanceOutputArgs } from "./getMongodbClusterV2Instance";
export const getMongodbClusterV2Instance: typeof import("./getMongodbClusterV2Instance").getMongodbClusterV2Instance = null as any;
export const getMongodbClusterV2InstanceOutput: typeof import("./getMongodbClusterV2Instance").getMongodbClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getMongodbClusterV2Instance","getMongodbClusterV2InstanceOutput"], () => require("./getMongodbClusterV2Instance"));

export { GetOpensearchClusterEgressRulesV2Args, GetOpensearchClusterEgressRulesV2Result, GetOpensearchClusterEgressRulesV2OutputArgs } from "./getOpensearchClusterEgressRulesV2";
export const getOpensearchClusterEgressRulesV2: typeof import("./getOpensearchClusterEgressRulesV2").getOpensearchClusterEgressRulesV2 = null as any;
export const getOpensearchClusterEgressRulesV2Output: typeof import("./getOpensearchClusterEgressRulesV2").getOpensearchClusterEgressRulesV2Output = null as any;
utilities.lazyLoad(exports, ["getOpensearchClusterEgressRulesV2","getOpensearchClusterEgressRulesV2Output"], () => require("./getOpensearchClusterEgressRulesV2"));

export { GetOpensearchClusterV2InstanceArgs, GetOpensearchClusterV2InstanceResult, GetOpensearchClusterV2InstanceOutputArgs } from "./getOpensearchClusterV2Instance";
export const getOpensearchClusterV2Instance: typeof import("./getOpensearchClusterV2Instance").getOpensearchClusterV2Instance = null as any;
export const getOpensearchClusterV2InstanceOutput: typeof import("./getOpensearchClusterV2Instance").getOpensearchClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchClusterV2Instance","getOpensearchClusterV2InstanceOutput"], () => require("./getOpensearchClusterV2Instance"));

export { GetOpensearchEgressRuleV2InstanceArgs, GetOpensearchEgressRuleV2InstanceResult, GetOpensearchEgressRuleV2InstanceOutputArgs } from "./getOpensearchEgressRuleV2Instance";
export const getOpensearchEgressRuleV2Instance: typeof import("./getOpensearchEgressRuleV2Instance").getOpensearchEgressRuleV2Instance = null as any;
export const getOpensearchEgressRuleV2InstanceOutput: typeof import("./getOpensearchEgressRuleV2Instance").getOpensearchEgressRuleV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchEgressRuleV2Instance","getOpensearchEgressRuleV2InstanceOutput"], () => require("./getOpensearchEgressRuleV2Instance"));

export { GetOpensearchPortal26ClusterV2InstanceArgs, GetOpensearchPortal26ClusterV2InstanceResult, GetOpensearchPortal26ClusterV2InstanceOutputArgs } from "./getOpensearchPortal26ClusterV2Instance";
export const getOpensearchPortal26ClusterV2Instance: typeof import("./getOpensearchPortal26ClusterV2Instance").getOpensearchPortal26ClusterV2Instance = null as any;
export const getOpensearchPortal26ClusterV2InstanceOutput: typeof import("./getOpensearchPortal26ClusterV2Instance").getOpensearchPortal26ClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getOpensearchPortal26ClusterV2Instance","getOpensearchPortal26ClusterV2InstanceOutput"], () => require("./getOpensearchPortal26ClusterV2Instance"));

export { GetPostgresqlClusterConfigurationsV2Args, GetPostgresqlClusterConfigurationsV2Result, GetPostgresqlClusterConfigurationsV2OutputArgs } from "./getPostgresqlClusterConfigurationsV2";
export const getPostgresqlClusterConfigurationsV2: typeof import("./getPostgresqlClusterConfigurationsV2").getPostgresqlClusterConfigurationsV2 = null as any;
export const getPostgresqlClusterConfigurationsV2Output: typeof import("./getPostgresqlClusterConfigurationsV2").getPostgresqlClusterConfigurationsV2Output = null as any;
utilities.lazyLoad(exports, ["getPostgresqlClusterConfigurationsV2","getPostgresqlClusterConfigurationsV2Output"], () => require("./getPostgresqlClusterConfigurationsV2"));

export { GetPostgresqlClusterV2InstanceArgs, GetPostgresqlClusterV2InstanceResult, GetPostgresqlClusterV2InstanceOutputArgs } from "./getPostgresqlClusterV2Instance";
export const getPostgresqlClusterV2Instance: typeof import("./getPostgresqlClusterV2Instance").getPostgresqlClusterV2Instance = null as any;
export const getPostgresqlClusterV2InstanceOutput: typeof import("./getPostgresqlClusterV2Instance").getPostgresqlClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlClusterV2Instance","getPostgresqlClusterV2InstanceOutput"], () => require("./getPostgresqlClusterV2Instance"));

export { GetPostgresqlConfigurationV2InstanceArgs, GetPostgresqlConfigurationV2InstanceResult, GetPostgresqlConfigurationV2InstanceOutputArgs } from "./getPostgresqlConfigurationV2Instance";
export const getPostgresqlConfigurationV2Instance: typeof import("./getPostgresqlConfigurationV2Instance").getPostgresqlConfigurationV2Instance = null as any;
export const getPostgresqlConfigurationV2InstanceOutput: typeof import("./getPostgresqlConfigurationV2Instance").getPostgresqlConfigurationV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresqlConfigurationV2Instance","getPostgresqlConfigurationV2InstanceOutput"], () => require("./getPostgresqlConfigurationV2Instance"));

export { GetRedisClusterUsersV2Args, GetRedisClusterUsersV2Result, GetRedisClusterUsersV2OutputArgs } from "./getRedisClusterUsersV2";
export const getRedisClusterUsersV2: typeof import("./getRedisClusterUsersV2").getRedisClusterUsersV2 = null as any;
export const getRedisClusterUsersV2Output: typeof import("./getRedisClusterUsersV2").getRedisClusterUsersV2Output = null as any;
utilities.lazyLoad(exports, ["getRedisClusterUsersV2","getRedisClusterUsersV2Output"], () => require("./getRedisClusterUsersV2"));

export { GetRedisClusterV2InstanceArgs, GetRedisClusterV2InstanceResult, GetRedisClusterV2InstanceOutputArgs } from "./getRedisClusterV2Instance";
export const getRedisClusterV2Instance: typeof import("./getRedisClusterV2Instance").getRedisClusterV2Instance = null as any;
export const getRedisClusterV2InstanceOutput: typeof import("./getRedisClusterV2Instance").getRedisClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRedisClusterV2Instance","getRedisClusterV2InstanceOutput"], () => require("./getRedisClusterV2Instance"));

export { GetRedisUserV2InstanceArgs, GetRedisUserV2InstanceResult, GetRedisUserV2InstanceOutputArgs } from "./getRedisUserV2Instance";
export const getRedisUserV2Instance: typeof import("./getRedisUserV2Instance").getRedisUserV2Instance = null as any;
export const getRedisUserV2InstanceOutput: typeof import("./getRedisUserV2Instance").getRedisUserV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getRedisUserV2Instance","getRedisUserV2InstanceOutput"], () => require("./getRedisUserV2Instance"));

export { GetV2Args, GetV2Result, GetV2OutputArgs } from "./getV2";
export const getV2: typeof import("./getV2").getV2 = null as any;
export const getV2Output: typeof import("./getV2").getV2Output = null as any;
utilities.lazyLoad(exports, ["getV2","getV2Output"], () => require("./getV2"));

export { GetZookeeperClusterV2InstanceArgs, GetZookeeperClusterV2InstanceResult, GetZookeeperClusterV2InstanceOutputArgs } from "./getZookeeperClusterV2Instance";
export const getZookeeperClusterV2Instance: typeof import("./getZookeeperClusterV2Instance").getZookeeperClusterV2Instance = null as any;
export const getZookeeperClusterV2InstanceOutput: typeof import("./getZookeeperClusterV2Instance").getZookeeperClusterV2InstanceOutput = null as any;
utilities.lazyLoad(exports, ["getZookeeperClusterV2Instance","getZookeeperClusterV2InstanceOutput"], () => require("./getZookeeperClusterV2Instance"));

export { KafkaAclV2Args, KafkaAclV2State } from "./kafkaAclV2";
export type KafkaAclV2 = import("./kafkaAclV2").KafkaAclV2;
export const KafkaAclV2: typeof import("./kafkaAclV2").KafkaAclV2 = null as any;
utilities.lazyLoad(exports, ["KafkaAclV2"], () => require("./kafkaAclV2"));

export { KafkaAclV3Args, KafkaAclV3State } from "./kafkaAclV3";
export type KafkaAclV3 = import("./kafkaAclV3").KafkaAclV3;
export const KafkaAclV3: typeof import("./kafkaAclV3").KafkaAclV3 = null as any;
utilities.lazyLoad(exports, ["KafkaAclV3"], () => require("./kafkaAclV3"));

export { KafkaClusterV2Args, KafkaClusterV2State } from "./kafkaClusterV2";
export type KafkaClusterV2 = import("./kafkaClusterV2").KafkaClusterV2;
export const KafkaClusterV2: typeof import("./kafkaClusterV2").KafkaClusterV2 = null as any;
utilities.lazyLoad(exports, ["KafkaClusterV2"], () => require("./kafkaClusterV2"));

export { KafkaClusterV3Args, KafkaClusterV3State } from "./kafkaClusterV3";
export type KafkaClusterV3 = import("./kafkaClusterV3").KafkaClusterV3;
export const KafkaClusterV3: typeof import("./kafkaClusterV3").KafkaClusterV3 = null as any;
utilities.lazyLoad(exports, ["KafkaClusterV3"], () => require("./kafkaClusterV3"));

export { KafkaConnectClusterV2Args, KafkaConnectClusterV2State } from "./kafkaConnectClusterV2";
export type KafkaConnectClusterV2 = import("./kafkaConnectClusterV2").KafkaConnectClusterV2;
export const KafkaConnectClusterV2: typeof import("./kafkaConnectClusterV2").KafkaConnectClusterV2 = null as any;
utilities.lazyLoad(exports, ["KafkaConnectClusterV2"], () => require("./kafkaConnectClusterV2"));

export { KafkaConnectMirrorV2Args, KafkaConnectMirrorV2State } from "./kafkaConnectMirrorV2";
export type KafkaConnectMirrorV2 = import("./kafkaConnectMirrorV2").KafkaConnectMirrorV2;
export const KafkaConnectMirrorV2: typeof import("./kafkaConnectMirrorV2").KafkaConnectMirrorV2 = null as any;
utilities.lazyLoad(exports, ["KafkaConnectMirrorV2"], () => require("./kafkaConnectMirrorV2"));

export { KafkaTopicV2Args, KafkaTopicV2State } from "./kafkaTopicV2";
export type KafkaTopicV2 = import("./kafkaTopicV2").KafkaTopicV2;
export const KafkaTopicV2: typeof import("./kafkaTopicV2").KafkaTopicV2 = null as any;
utilities.lazyLoad(exports, ["KafkaTopicV2"], () => require("./kafkaTopicV2"));

export { KafkaTopicV3Args, KafkaTopicV3State } from "./kafkaTopicV3";
export type KafkaTopicV3 = import("./kafkaTopicV3").KafkaTopicV3;
export const KafkaTopicV3: typeof import("./kafkaTopicV3").KafkaTopicV3 = null as any;
utilities.lazyLoad(exports, ["KafkaTopicV3"], () => require("./kafkaTopicV3"));

export { KafkaUserCertificateV2Args, KafkaUserCertificateV2State } from "./kafkaUserCertificateV2";
export type KafkaUserCertificateV2 = import("./kafkaUserCertificateV2").KafkaUserCertificateV2;
export const KafkaUserCertificateV2: typeof import("./kafkaUserCertificateV2").KafkaUserCertificateV2 = null as any;
utilities.lazyLoad(exports, ["KafkaUserCertificateV2"], () => require("./kafkaUserCertificateV2"));

export { KafkaUserV2Args, KafkaUserV2State } from "./kafkaUserV2";
export type KafkaUserV2 = import("./kafkaUserV2").KafkaUserV2;
export const KafkaUserV2: typeof import("./kafkaUserV2").KafkaUserV2 = null as any;
utilities.lazyLoad(exports, ["KafkaUserV2"], () => require("./kafkaUserV2"));

export { KafkaUserV3Args, KafkaUserV3State } from "./kafkaUserV3";
export type KafkaUserV3 = import("./kafkaUserV3").KafkaUserV3;
export const KafkaUserV3: typeof import("./kafkaUserV3").KafkaUserV3 = null as any;
utilities.lazyLoad(exports, ["KafkaUserV3"], () => require("./kafkaUserV3"));

export { KafkaUserV4Args, KafkaUserV4State } from "./kafkaUserV4";
export type KafkaUserV4 = import("./kafkaUserV4").KafkaUserV4;
export const KafkaUserV4: typeof import("./kafkaUserV4").KafkaUserV4 = null as any;
utilities.lazyLoad(exports, ["KafkaUserV4"], () => require("./kafkaUserV4"));

export { KafkaUserV5Args, KafkaUserV5State } from "./kafkaUserV5";
export type KafkaUserV5 = import("./kafkaUserV5").KafkaUserV5;
export const KafkaUserV5: typeof import("./kafkaUserV5").KafkaUserV5 = null as any;
utilities.lazyLoad(exports, ["KafkaUserV5"], () => require("./kafkaUserV5"));

export { MongodbClusterV2Args, MongodbClusterV2State } from "./mongodbClusterV2";
export type MongodbClusterV2 = import("./mongodbClusterV2").MongodbClusterV2;
export const MongodbClusterV2: typeof import("./mongodbClusterV2").MongodbClusterV2 = null as any;
utilities.lazyLoad(exports, ["MongodbClusterV2"], () => require("./mongodbClusterV2"));

export { OpensearchClusterV2Args, OpensearchClusterV2State } from "./opensearchClusterV2";
export type OpensearchClusterV2 = import("./opensearchClusterV2").OpensearchClusterV2;
export const OpensearchClusterV2: typeof import("./opensearchClusterV2").OpensearchClusterV2 = null as any;
utilities.lazyLoad(exports, ["OpensearchClusterV2"], () => require("./opensearchClusterV2"));

export { OpensearchEgressRuleV2Args, OpensearchEgressRuleV2State } from "./opensearchEgressRuleV2";
export type OpensearchEgressRuleV2 = import("./opensearchEgressRuleV2").OpensearchEgressRuleV2;
export const OpensearchEgressRuleV2: typeof import("./opensearchEgressRuleV2").OpensearchEgressRuleV2 = null as any;
utilities.lazyLoad(exports, ["OpensearchEgressRuleV2"], () => require("./opensearchEgressRuleV2"));

export { OpensearchPortal26ClusterV2Args, OpensearchPortal26ClusterV2State } from "./opensearchPortal26ClusterV2";
export type OpensearchPortal26ClusterV2 = import("./opensearchPortal26ClusterV2").OpensearchPortal26ClusterV2;
export const OpensearchPortal26ClusterV2: typeof import("./opensearchPortal26ClusterV2").OpensearchPortal26ClusterV2 = null as any;
utilities.lazyLoad(exports, ["OpensearchPortal26ClusterV2"], () => require("./opensearchPortal26ClusterV2"));

export { PostgresqlClusterV2Args, PostgresqlClusterV2State } from "./postgresqlClusterV2";
export type PostgresqlClusterV2 = import("./postgresqlClusterV2").PostgresqlClusterV2;
export const PostgresqlClusterV2: typeof import("./postgresqlClusterV2").PostgresqlClusterV2 = null as any;
utilities.lazyLoad(exports, ["PostgresqlClusterV2"], () => require("./postgresqlClusterV2"));

export { PostgresqlConfigurationV2Args, PostgresqlConfigurationV2State } from "./postgresqlConfigurationV2";
export type PostgresqlConfigurationV2 = import("./postgresqlConfigurationV2").PostgresqlConfigurationV2;
export const PostgresqlConfigurationV2: typeof import("./postgresqlConfigurationV2").PostgresqlConfigurationV2 = null as any;
utilities.lazyLoad(exports, ["PostgresqlConfigurationV2"], () => require("./postgresqlConfigurationV2"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RedisClusterV2Args, RedisClusterV2State } from "./redisClusterV2";
export type RedisClusterV2 = import("./redisClusterV2").RedisClusterV2;
export const RedisClusterV2: typeof import("./redisClusterV2").RedisClusterV2 = null as any;
utilities.lazyLoad(exports, ["RedisClusterV2"], () => require("./redisClusterV2"));

export { RedisUserV2Args, RedisUserV2State } from "./redisUserV2";
export type RedisUserV2 = import("./redisUserV2").RedisUserV2;
export const RedisUserV2: typeof import("./redisUserV2").RedisUserV2 = null as any;
utilities.lazyLoad(exports, ["RedisUserV2"], () => require("./redisUserV2"));

export { ZookeeperClusterV2Args, ZookeeperClusterV2State } from "./zookeeperClusterV2";
export type ZookeeperClusterV2 = import("./zookeeperClusterV2").ZookeeperClusterV2;
export const ZookeeperClusterV2: typeof import("./zookeeperClusterV2").ZookeeperClusterV2 = null as any;
utilities.lazyLoad(exports, ["ZookeeperClusterV2"], () => require("./zookeeperClusterV2"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "instaclustr:index/awsEncryptionKeyV2:AwsEncryptionKeyV2":
                return new AwsEncryptionKeyV2(name, <any>undefined, { urn })
            case "instaclustr:index/awsEndpointServicePrincipalV2:AwsEndpointServicePrincipalV2":
                return new AwsEndpointServicePrincipalV2(name, <any>undefined, { urn })
            case "instaclustr:index/awsSecurityGroupFirewallRuleV2:AwsSecurityGroupFirewallRuleV2":
                return new AwsSecurityGroupFirewallRuleV2(name, <any>undefined, { urn })
            case "instaclustr:index/awsSecurityGroupFirewallRulesV2:AwsSecurityGroupFirewallRulesV2":
                return new AwsSecurityGroupFirewallRulesV2(name, <any>undefined, { urn })
            case "instaclustr:index/awsVpcPeerV2:AwsVpcPeerV2":
                return new AwsVpcPeerV2(name, <any>undefined, { urn })
            case "instaclustr:index/azureVnetPeerV2:AzureVnetPeerV2":
                return new AzureVnetPeerV2(name, <any>undefined, { urn })
            case "instaclustr:index/cadenceClusterV2:CadenceClusterV2":
                return new CadenceClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/cassandraClusterV2:CassandraClusterV2":
                return new CassandraClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/clickhouseClusterV2:ClickhouseClusterV2":
                return new ClickhouseClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/clusterExclusionWindowV2:ClusterExclusionWindowV2":
                return new ClusterExclusionWindowV2(name, <any>undefined, { urn })
            case "instaclustr:index/clusterNetworkFirewallRuleV2:ClusterNetworkFirewallRuleV2":
                return new ClusterNetworkFirewallRuleV2(name, <any>undefined, { urn })
            case "instaclustr:index/clusterNetworkFirewallRulesV2:ClusterNetworkFirewallRulesV2":
                return new ClusterNetworkFirewallRulesV2(name, <any>undefined, { urn })
            case "instaclustr:index/clusterWaiterV2:ClusterWaiterV2":
                return new ClusterWaiterV2(name, <any>undefined, { urn })
            case "instaclustr:index/couchbaseClusterV2:CouchbaseClusterV2":
                return new CouchbaseClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/gcpVpcPeerV2:GcpVpcPeerV2":
                return new GcpVpcPeerV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaAclV2:KafkaAclV2":
                return new KafkaAclV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaAclV3:KafkaAclV3":
                return new KafkaAclV3(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaClusterV2:KafkaClusterV2":
                return new KafkaClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaClusterV3:KafkaClusterV3":
                return new KafkaClusterV3(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaConnectClusterV2:KafkaConnectClusterV2":
                return new KafkaConnectClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaConnectMirrorV2:KafkaConnectMirrorV2":
                return new KafkaConnectMirrorV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaTopicV2:KafkaTopicV2":
                return new KafkaTopicV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaTopicV3:KafkaTopicV3":
                return new KafkaTopicV3(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaUserCertificateV2:KafkaUserCertificateV2":
                return new KafkaUserCertificateV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaUserV2:KafkaUserV2":
                return new KafkaUserV2(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaUserV3:KafkaUserV3":
                return new KafkaUserV3(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaUserV4:KafkaUserV4":
                return new KafkaUserV4(name, <any>undefined, { urn })
            case "instaclustr:index/kafkaUserV5:KafkaUserV5":
                return new KafkaUserV5(name, <any>undefined, { urn })
            case "instaclustr:index/mongodbClusterV2:MongodbClusterV2":
                return new MongodbClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/opensearchClusterV2:OpensearchClusterV2":
                return new OpensearchClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/opensearchEgressRuleV2:OpensearchEgressRuleV2":
                return new OpensearchEgressRuleV2(name, <any>undefined, { urn })
            case "instaclustr:index/opensearchPortal26ClusterV2:OpensearchPortal26ClusterV2":
                return new OpensearchPortal26ClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/postgresqlClusterV2:PostgresqlClusterV2":
                return new PostgresqlClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/postgresqlConfigurationV2:PostgresqlConfigurationV2":
                return new PostgresqlConfigurationV2(name, <any>undefined, { urn })
            case "instaclustr:index/redisClusterV2:RedisClusterV2":
                return new RedisClusterV2(name, <any>undefined, { urn })
            case "instaclustr:index/redisUserV2:RedisUserV2":
                return new RedisUserV2(name, <any>undefined, { urn })
            case "instaclustr:index/zookeeperClusterV2:ZookeeperClusterV2":
                return new ZookeeperClusterV2(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("instaclustr", "index/awsEncryptionKeyV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/awsEndpointServicePrincipalV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/awsSecurityGroupFirewallRuleV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/awsSecurityGroupFirewallRulesV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/awsVpcPeerV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/azureVnetPeerV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/cadenceClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/cassandraClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/clickhouseClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/clusterExclusionWindowV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/clusterNetworkFirewallRuleV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/clusterNetworkFirewallRulesV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/clusterWaiterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/couchbaseClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/gcpVpcPeerV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaAclV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaAclV3", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaClusterV3", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaConnectClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaConnectMirrorV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaTopicV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaTopicV3", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaUserCertificateV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaUserV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaUserV3", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaUserV4", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/kafkaUserV5", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/mongodbClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/opensearchClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/opensearchEgressRuleV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/opensearchPortal26ClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/postgresqlClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/postgresqlConfigurationV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/redisClusterV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/redisUserV2", _module)
pulumi.runtime.registerResourceModule("instaclustr", "index/zookeeperClusterV2", _module)
pulumi.runtime.registerResourcePackage("instaclustr", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:instaclustr") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
