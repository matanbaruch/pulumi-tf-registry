// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOpensearchClusterV2Instance(args: GetOpensearchClusterV2InstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetOpensearchClusterV2InstanceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("instaclustr:index/getOpensearchClusterV2Instance:getOpensearchClusterV2Instance", {
        "alertingPlugin": args.alertingPlugin,
        "anomalyDetectionPlugin": args.anomalyDetectionPlugin,
        "asynchronousSearchPlugin": args.asynchronousSearchPlugin,
        "bundledUseOnly": args.bundledUseOnly,
        "clusterManagerNodes": args.clusterManagerNodes,
        "crossClusterReplicationPlugin": args.crossClusterReplicationPlugin,
        "currentClusterOperationStatus": args.currentClusterOperationStatus,
        "dataCentres": args.dataCentres,
        "dataNodes": args.dataNodes,
        "defaultUserPassword": args.defaultUserPassword,
        "defaultUsername": args.defaultUsername,
        "description": args.description,
        "icuPlugin": args.icuPlugin,
        "id": args.id,
        "indexManagementPlugin": args.indexManagementPlugin,
        "ingestNodes": args.ingestNodes,
        "ingestNodesLoadBalancerConnectionUrl": args.ingestNodesLoadBalancerConnectionUrl,
        "knnPlugin": args.knnPlugin,
        "leaderClusterAccount": args.leaderClusterAccount,
        "leaderClusterId": args.leaderClusterId,
        "loadBalancer": args.loadBalancer,
        "loadBalancerConnectionUrl": args.loadBalancerConnectionUrl,
        "name": args.name,
        "notificationsPlugin": args.notificationsPlugin,
        "opensearchDashboards": args.opensearchDashboards,
        "opensearchMajorVersion": args.opensearchMajorVersion,
        "opensearchVersion": args.opensearchVersion,
        "pciComplianceMode": args.pciComplianceMode,
        "portal26Plugin": args.portal26Plugin,
        "privateEndpoint": args.privateEndpoint,
        "privateNetworkCluster": args.privateNetworkCluster,
        "publicEndpoint": args.publicEndpoint,
        "reportingPlugin": args.reportingPlugin,
        "resizeSettings": args.resizeSettings,
        "searchableSnapshots": args.searchableSnapshots,
        "slaTier": args.slaTier,
        "sqlPlugin": args.sqlPlugin,
        "status": args.status,
        "twoFactorDeletes": args.twoFactorDeletes,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOpensearchClusterV2Instance.
 */
export interface GetOpensearchClusterV2InstanceArgs {
    alertingPlugin?: boolean;
    anomalyDetectionPlugin?: boolean;
    asynchronousSearchPlugin?: boolean;
    bundledUseOnly?: boolean;
    clusterManagerNodes?: inputs.GetOpensearchClusterV2InstanceClusterManagerNode[];
    crossClusterReplicationPlugin?: boolean;
    currentClusterOperationStatus?: string;
    dataCentres?: inputs.GetOpensearchClusterV2InstanceDataCentre[];
    dataNodes?: inputs.GetOpensearchClusterV2InstanceDataNode[];
    defaultUserPassword?: string;
    defaultUsername?: string;
    description?: string;
    icuPlugin?: boolean;
    id: string;
    indexManagementPlugin?: boolean;
    ingestNodes?: inputs.GetOpensearchClusterV2InstanceIngestNode[];
    ingestNodesLoadBalancerConnectionUrl?: string;
    knnPlugin?: boolean;
    leaderClusterAccount?: string;
    leaderClusterId?: string;
    loadBalancer?: boolean;
    loadBalancerConnectionUrl?: string;
    name?: string;
    notificationsPlugin?: boolean;
    opensearchDashboards?: inputs.GetOpensearchClusterV2InstanceOpensearchDashboard[];
    opensearchMajorVersion?: number;
    opensearchVersion?: string;
    pciComplianceMode?: boolean;
    portal26Plugin?: boolean;
    privateEndpoint?: string;
    privateNetworkCluster?: boolean;
    publicEndpoint?: string;
    reportingPlugin?: boolean;
    resizeSettings?: inputs.GetOpensearchClusterV2InstanceResizeSetting[];
    searchableSnapshots?: boolean;
    slaTier?: string;
    sqlPlugin?: boolean;
    status?: string;
    twoFactorDeletes?: inputs.GetOpensearchClusterV2InstanceTwoFactorDelete[];
}

/**
 * A collection of values returned by getOpensearchClusterV2Instance.
 */
export interface GetOpensearchClusterV2InstanceResult {
    readonly alertingPlugin: boolean;
    readonly anomalyDetectionPlugin: boolean;
    readonly asynchronousSearchPlugin: boolean;
    readonly bundledUseOnly: boolean;
    readonly clusterManagerNodes?: outputs.GetOpensearchClusterV2InstanceClusterManagerNode[];
    readonly crossClusterReplicationPlugin: boolean;
    readonly currentClusterOperationStatus: string;
    readonly dataCentres?: outputs.GetOpensearchClusterV2InstanceDataCentre[];
    readonly dataNodes?: outputs.GetOpensearchClusterV2InstanceDataNode[];
    readonly defaultUserPassword: string;
    readonly defaultUsername: string;
    readonly description: string;
    readonly icuPlugin: boolean;
    readonly id: string;
    readonly indexManagementPlugin: boolean;
    readonly ingestNodes?: outputs.GetOpensearchClusterV2InstanceIngestNode[];
    readonly ingestNodesLoadBalancerConnectionUrl: string;
    readonly knnPlugin: boolean;
    readonly leaderClusterAccount: string;
    readonly leaderClusterId: string;
    readonly loadBalancer: boolean;
    readonly loadBalancerConnectionUrl: string;
    readonly name: string;
    readonly notificationsPlugin: boolean;
    readonly opensearchDashboards?: outputs.GetOpensearchClusterV2InstanceOpensearchDashboard[];
    readonly opensearchMajorVersion: number;
    readonly opensearchVersion: string;
    readonly pciComplianceMode: boolean;
    readonly portal26Plugin: boolean;
    readonly privateEndpoint: string;
    readonly privateNetworkCluster: boolean;
    readonly publicEndpoint: string;
    readonly reportingPlugin: boolean;
    readonly resizeSettings?: outputs.GetOpensearchClusterV2InstanceResizeSetting[];
    readonly searchableSnapshots: boolean;
    readonly slaTier: string;
    readonly sqlPlugin: boolean;
    readonly status: string;
    readonly twoFactorDeletes?: outputs.GetOpensearchClusterV2InstanceTwoFactorDelete[];
}
export function getOpensearchClusterV2InstanceOutput(args: GetOpensearchClusterV2InstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOpensearchClusterV2InstanceResult> {
    return pulumi.output(args).apply((a: any) => getOpensearchClusterV2Instance(a, opts))
}

/**
 * A collection of arguments for invoking getOpensearchClusterV2Instance.
 */
export interface GetOpensearchClusterV2InstanceOutputArgs {
    alertingPlugin?: pulumi.Input<boolean>;
    anomalyDetectionPlugin?: pulumi.Input<boolean>;
    asynchronousSearchPlugin?: pulumi.Input<boolean>;
    bundledUseOnly?: pulumi.Input<boolean>;
    clusterManagerNodes?: pulumi.Input<pulumi.Input<inputs.GetOpensearchClusterV2InstanceClusterManagerNodeArgs>[]>;
    crossClusterReplicationPlugin?: pulumi.Input<boolean>;
    currentClusterOperationStatus?: pulumi.Input<string>;
    dataCentres?: pulumi.Input<pulumi.Input<inputs.GetOpensearchClusterV2InstanceDataCentreArgs>[]>;
    dataNodes?: pulumi.Input<pulumi.Input<inputs.GetOpensearchClusterV2InstanceDataNodeArgs>[]>;
    defaultUserPassword?: pulumi.Input<string>;
    defaultUsername?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    icuPlugin?: pulumi.Input<boolean>;
    id: pulumi.Input<string>;
    indexManagementPlugin?: pulumi.Input<boolean>;
    ingestNodes?: pulumi.Input<pulumi.Input<inputs.GetOpensearchClusterV2InstanceIngestNodeArgs>[]>;
    ingestNodesLoadBalancerConnectionUrl?: pulumi.Input<string>;
    knnPlugin?: pulumi.Input<boolean>;
    leaderClusterAccount?: pulumi.Input<string>;
    leaderClusterId?: pulumi.Input<string>;
    loadBalancer?: pulumi.Input<boolean>;
    loadBalancerConnectionUrl?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    notificationsPlugin?: pulumi.Input<boolean>;
    opensearchDashboards?: pulumi.Input<pulumi.Input<inputs.GetOpensearchClusterV2InstanceOpensearchDashboardArgs>[]>;
    opensearchMajorVersion?: pulumi.Input<number>;
    opensearchVersion?: pulumi.Input<string>;
    pciComplianceMode?: pulumi.Input<boolean>;
    portal26Plugin?: pulumi.Input<boolean>;
    privateEndpoint?: pulumi.Input<string>;
    privateNetworkCluster?: pulumi.Input<boolean>;
    publicEndpoint?: pulumi.Input<string>;
    reportingPlugin?: pulumi.Input<boolean>;
    resizeSettings?: pulumi.Input<pulumi.Input<inputs.GetOpensearchClusterV2InstanceResizeSettingArgs>[]>;
    searchableSnapshots?: pulumi.Input<boolean>;
    slaTier?: pulumi.Input<string>;
    sqlPlugin?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    twoFactorDeletes?: pulumi.Input<pulumi.Input<inputs.GetOpensearchClusterV2InstanceTwoFactorDeleteArgs>[]>;
}
