// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaUserV2 extends pulumi.CustomResource {
    /**
     * Get an existing KafkaUserV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaUserV2State, opts?: pulumi.CustomResourceOptions): KafkaUserV2 {
        return new KafkaUserV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/kafkaUserV2:KafkaUserV2';

    /**
     * Returns true if the given object is an instance of KafkaUserV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaUserV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaUserV2.__pulumiType;
    }

    /**
     * Authentication mechanisms supported for KafkaClusters.
     */
    public readonly authMechanism!: pulumi.Output<string | undefined>;
    /**
     * ID of the Kafka cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Permissions initially granted to Kafka user upon creation.
     */
    public readonly initialPermissions!: pulumi.Output<string>;
    /**
     * Initial options used when creating Kafka user
     */
    public readonly options!: pulumi.Output<outputs.KafkaUserV2Options>;
    /**
     * Password for the Kafka user.
     */
    public readonly password!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.KafkaUserV2Timeouts | undefined>;
    /**
     * Username of the Kafka user.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a KafkaUserV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaUserV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaUserV2Args | KafkaUserV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaUserV2State | undefined;
            resourceInputs["authMechanism"] = state ? state.authMechanism : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["initialPermissions"] = state ? state.initialPermissions : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as KafkaUserV2Args | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.initialPermissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'initialPermissions'");
            }
            if ((!args || args.options === undefined) && !opts.urn) {
                throw new Error("Missing required property 'options'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authMechanism"] = args ? args.authMechanism : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["initialPermissions"] = args ? args.initialPermissions : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KafkaUserV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KafkaUserV2 resources.
 */
export interface KafkaUserV2State {
    /**
     * Authentication mechanisms supported for KafkaClusters.
     */
    authMechanism?: pulumi.Input<string>;
    /**
     * ID of the Kafka cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Permissions initially granted to Kafka user upon creation.
     */
    initialPermissions?: pulumi.Input<string>;
    /**
     * Initial options used when creating Kafka user
     */
    options?: pulumi.Input<inputs.KafkaUserV2Options>;
    /**
     * Password for the Kafka user.
     */
    password?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KafkaUserV2Timeouts>;
    /**
     * Username of the Kafka user.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaUserV2 resource.
 */
export interface KafkaUserV2Args {
    /**
     * Authentication mechanisms supported for KafkaClusters.
     */
    authMechanism?: pulumi.Input<string>;
    /**
     * ID of the Kafka cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Permissions initially granted to Kafka user upon creation.
     */
    initialPermissions: pulumi.Input<string>;
    /**
     * Initial options used when creating Kafka user
     */
    options: pulumi.Input<inputs.KafkaUserV2Options>;
    /**
     * Password for the Kafka user.
     */
    password: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.KafkaUserV2Timeouts>;
    /**
     * Username of the Kafka user.
     */
    username: pulumi.Input<string>;
}
