// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KafkaConnectMirrorV2 extends pulumi.CustomResource {
    /**
     * Get an existing KafkaConnectMirrorV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaConnectMirrorV2State, opts?: pulumi.CustomResourceOptions): KafkaConnectMirrorV2 {
        return new KafkaConnectMirrorV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'instaclustr:index/kafkaConnectMirrorV2:KafkaConnectMirrorV2';

    /**
     * Returns true if the given object is an instance of KafkaConnectMirrorV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaConnectMirrorV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaConnectMirrorV2.__pulumiType;
    }

    /**
     * Name of the mirror connector. The value of this property has the form: [source-cluster].[target-cluster].[random-string]
     */
    public readonly connectorName!: pulumi.Output<string>;
    /**
     * Detailed list of Connectors for the mirror.
     */
    public readonly connectors!: pulumi.Output<outputs.KafkaConnectMirrorV2Connector[] | undefined>;
    /**
     * ID of the kafka connect cluster
     */
    public readonly kafkaConnectClusterId!: pulumi.Output<string>;
    /**
     * Maximum number of tasks for Kafka Connect to use. Should be greater than 0.
     */
    public readonly maxTasks!: pulumi.Output<number>;
    /**
     * Detailed list of Mirrored topics.
     */
    public readonly mirroredTopics!: pulumi.Output<outputs.KafkaConnectMirrorV2MirroredTopic[] | undefined>;
    /**
     * Whether to rename topics as they are mirrored, by prefixing the sourceCluster.alias to the topic name.
     */
    public readonly renameMirroredTopics!: pulumi.Output<boolean>;
    /**
     * Details to connect to the source kafka cluster
     */
    public readonly sourceClusters!: pulumi.Output<outputs.KafkaConnectMirrorV2SourceCluster[]>;
    /**
     * The overall status of this mirror.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The latency in milliseconds above which this mirror will be considered out of sync. It can not be less than 1000ms. The
     * suggested initial latency is 30000ms for connectors to be created.
     */
    public readonly targetLatency!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.KafkaConnectMirrorV2Timeouts | undefined>;
    /**
     * Regex to select which topics to mirror.
     */
    public readonly topicsRegex!: pulumi.Output<string>;

    /**
     * Create a KafkaConnectMirrorV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaConnectMirrorV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaConnectMirrorV2Args | KafkaConnectMirrorV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaConnectMirrorV2State | undefined;
            resourceInputs["connectorName"] = state ? state.connectorName : undefined;
            resourceInputs["connectors"] = state ? state.connectors : undefined;
            resourceInputs["kafkaConnectClusterId"] = state ? state.kafkaConnectClusterId : undefined;
            resourceInputs["maxTasks"] = state ? state.maxTasks : undefined;
            resourceInputs["mirroredTopics"] = state ? state.mirroredTopics : undefined;
            resourceInputs["renameMirroredTopics"] = state ? state.renameMirroredTopics : undefined;
            resourceInputs["sourceClusters"] = state ? state.sourceClusters : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetLatency"] = state ? state.targetLatency : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["topicsRegex"] = state ? state.topicsRegex : undefined;
        } else {
            const args = argsOrState as KafkaConnectMirrorV2Args | undefined;
            if ((!args || args.kafkaConnectClusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaConnectClusterId'");
            }
            if ((!args || args.maxTasks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxTasks'");
            }
            if ((!args || args.renameMirroredTopics === undefined) && !opts.urn) {
                throw new Error("Missing required property 'renameMirroredTopics'");
            }
            if ((!args || args.sourceClusters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceClusters'");
            }
            if ((!args || args.targetLatency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetLatency'");
            }
            if ((!args || args.topicsRegex === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicsRegex'");
            }
            resourceInputs["connectorName"] = args ? args.connectorName : undefined;
            resourceInputs["connectors"] = args ? args.connectors : undefined;
            resourceInputs["kafkaConnectClusterId"] = args ? args.kafkaConnectClusterId : undefined;
            resourceInputs["maxTasks"] = args ? args.maxTasks : undefined;
            resourceInputs["mirroredTopics"] = args ? args.mirroredTopics : undefined;
            resourceInputs["renameMirroredTopics"] = args ? args.renameMirroredTopics : undefined;
            resourceInputs["sourceClusters"] = args ? args.sourceClusters : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["targetLatency"] = args ? args.targetLatency : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["topicsRegex"] = args ? args.topicsRegex : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaConnectMirrorV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KafkaConnectMirrorV2 resources.
 */
export interface KafkaConnectMirrorV2State {
    /**
     * Name of the mirror connector. The value of this property has the form: [source-cluster].[target-cluster].[random-string]
     */
    connectorName?: pulumi.Input<string>;
    /**
     * Detailed list of Connectors for the mirror.
     */
    connectors?: pulumi.Input<pulumi.Input<inputs.KafkaConnectMirrorV2Connector>[]>;
    /**
     * ID of the kafka connect cluster
     */
    kafkaConnectClusterId?: pulumi.Input<string>;
    /**
     * Maximum number of tasks for Kafka Connect to use. Should be greater than 0.
     */
    maxTasks?: pulumi.Input<number>;
    /**
     * Detailed list of Mirrored topics.
     */
    mirroredTopics?: pulumi.Input<pulumi.Input<inputs.KafkaConnectMirrorV2MirroredTopic>[]>;
    /**
     * Whether to rename topics as they are mirrored, by prefixing the sourceCluster.alias to the topic name.
     */
    renameMirroredTopics?: pulumi.Input<boolean>;
    /**
     * Details to connect to the source kafka cluster
     */
    sourceClusters?: pulumi.Input<pulumi.Input<inputs.KafkaConnectMirrorV2SourceCluster>[]>;
    /**
     * The overall status of this mirror.
     */
    status?: pulumi.Input<string>;
    /**
     * The latency in milliseconds above which this mirror will be considered out of sync. It can not be less than 1000ms. The
     * suggested initial latency is 30000ms for connectors to be created.
     */
    targetLatency?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.KafkaConnectMirrorV2Timeouts>;
    /**
     * Regex to select which topics to mirror.
     */
    topicsRegex?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaConnectMirrorV2 resource.
 */
export interface KafkaConnectMirrorV2Args {
    /**
     * Name of the mirror connector. The value of this property has the form: [source-cluster].[target-cluster].[random-string]
     */
    connectorName?: pulumi.Input<string>;
    /**
     * Detailed list of Connectors for the mirror.
     */
    connectors?: pulumi.Input<pulumi.Input<inputs.KafkaConnectMirrorV2Connector>[]>;
    /**
     * ID of the kafka connect cluster
     */
    kafkaConnectClusterId: pulumi.Input<string>;
    /**
     * Maximum number of tasks for Kafka Connect to use. Should be greater than 0.
     */
    maxTasks: pulumi.Input<number>;
    /**
     * Detailed list of Mirrored topics.
     */
    mirroredTopics?: pulumi.Input<pulumi.Input<inputs.KafkaConnectMirrorV2MirroredTopic>[]>;
    /**
     * Whether to rename topics as they are mirrored, by prefixing the sourceCluster.alias to the topic name.
     */
    renameMirroredTopics: pulumi.Input<boolean>;
    /**
     * Details to connect to the source kafka cluster
     */
    sourceClusters: pulumi.Input<pulumi.Input<inputs.KafkaConnectMirrorV2SourceCluster>[]>;
    /**
     * The overall status of this mirror.
     */
    status?: pulumi.Input<string>;
    /**
     * The latency in milliseconds above which this mirror will be considered out of sync. It can not be less than 1000ms. The
     * suggested initial latency is 30000ms for connectors to be created.
     */
    targetLatency: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.KafkaConnectMirrorV2Timeouts>;
    /**
     * Regex to select which topics to mirror.
     */
    topicsRegex: pulumi.Input<string>;
}
