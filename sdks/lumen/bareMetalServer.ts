// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BareMetalServer extends pulumi.CustomResource {
    /**
     * Get an existing BareMetalServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BareMetalServerState, opts?: pulumi.CustomResourceOptions): BareMetalServer {
        return new BareMetalServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lumen:index/bareMetalServer:BareMetalServer';

    /**
     * Returns true if the given object is an instance of BareMetalServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BareMetalServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BareMetalServer.__pulumiType;
    }

    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * A boolean (true/false) value indicating whether or not to assign an IPv6 address for this server if using a dual stack
     * network. Defaults to false if not set.
     */
    public readonly assignIpv6Address!: pulumi.Output<boolean | undefined>;
    /**
     * List of existing networks to attach to the server being provisioned. If providing multiple values it will require you to
     * make server configuration changes for change to take effect.
     */
    public readonly attachNetworks!: pulumi.Output<outputs.BareMetalServerAttachNetwork[] | undefined>;
    public /*out*/ readonly bootDisk!: pulumi.Output<string>;
    public /*out*/ readonly configurationCores!: pulumi.Output<number>;
    public /*out*/ readonly configurationDisks!: pulumi.Output<number>;
    public /*out*/ readonly configurationMemory!: pulumi.Output<string>;
    public readonly configurationName!: pulumi.Output<string>;
    public /*out*/ readonly configurationNics!: pulumi.Output<number>;
    public /*out*/ readonly configurationProcessors!: pulumi.Output<number>;
    public /*out*/ readonly configurationStorage!: pulumi.Output<string>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * User parameter to enable hyperthreading on the server. Defaults to true if not set.
     */
    public readonly enableHyperthreading!: pulumi.Output<boolean | undefined>;
    /**
     * Server hyperthreading status.
     */
    public /*out*/ readonly hyperthreading!: pulumi.Output<boolean>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    public readonly locationId!: pulumi.Output<string>;
    public /*out*/ readonly machineId!: pulumi.Output<string>;
    public /*out*/ readonly machineName!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the new network to create, this is only used on initial creation.
     */
    public readonly networkName!: pulumi.Output<string | undefined>;
    /**
     * The id of the network size being used for the new network, this is only used on initial creation.
     */
    public readonly networkSizeId!: pulumi.Output<string | undefined>;
    /**
     * The type of network being provisioned for this server.
     */
    public readonly networkType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly networks!: pulumi.Output<outputs.BareMetalServerNetwork[]>;
    public readonly osImageName!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public /*out*/ readonly prices!: pulumi.Output<outputs.BareMetalServerPrice[]>;
    public /*out*/ readonly serviceId!: pulumi.Output<string>;
    public readonly sshPublicKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly statusMessage!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BareMetalServerTimeouts | undefined>;
    public /*out*/ readonly updated!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;
    /**
     * For private networks, this is an existing VRF to be used in creating the new network.
     */
    public readonly vrf!: pulumi.Output<string | undefined>;
    /**
     * For private networks, create a new VRF with this description and use it in creating the new network.
     */
    public readonly vrfDescription!: pulumi.Output<string | undefined>;

    /**
     * Create a BareMetalServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BareMetalServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BareMetalServerArgs | BareMetalServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BareMetalServerState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["assignIpv6Address"] = state ? state.assignIpv6Address : undefined;
            resourceInputs["attachNetworks"] = state ? state.attachNetworks : undefined;
            resourceInputs["bootDisk"] = state ? state.bootDisk : undefined;
            resourceInputs["configurationCores"] = state ? state.configurationCores : undefined;
            resourceInputs["configurationDisks"] = state ? state.configurationDisks : undefined;
            resourceInputs["configurationMemory"] = state ? state.configurationMemory : undefined;
            resourceInputs["configurationName"] = state ? state.configurationName : undefined;
            resourceInputs["configurationNics"] = state ? state.configurationNics : undefined;
            resourceInputs["configurationProcessors"] = state ? state.configurationProcessors : undefined;
            resourceInputs["configurationStorage"] = state ? state.configurationStorage : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["enableHyperthreading"] = state ? state.enableHyperthreading : undefined;
            resourceInputs["hyperthreading"] = state ? state.hyperthreading : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["machineId"] = state ? state.machineId : undefined;
            resourceInputs["machineName"] = state ? state.machineName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkName"] = state ? state.networkName : undefined;
            resourceInputs["networkSizeId"] = state ? state.networkSizeId : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["osImageName"] = state ? state.osImageName : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["prices"] = state ? state.prices : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["sshPublicKey"] = state ? state.sshPublicKey : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusMessage"] = state ? state.statusMessage : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
            resourceInputs["vrfDescription"] = state ? state.vrfDescription : undefined;
        } else {
            const args = argsOrState as BareMetalServerArgs | undefined;
            if ((!args || args.configurationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationName'");
            }
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            if ((!args || args.osImageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osImageName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["assignIpv6Address"] = args ? args.assignIpv6Address : undefined;
            resourceInputs["attachNetworks"] = args ? args.attachNetworks : undefined;
            resourceInputs["configurationName"] = args ? args.configurationName : undefined;
            resourceInputs["enableHyperthreading"] = args ? args.enableHyperthreading : undefined;
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkName"] = args ? args.networkName : undefined;
            resourceInputs["networkSizeId"] = args ? args.networkSizeId : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["osImageName"] = args ? args.osImageName : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["sshPublicKey"] = args?.sshPublicKey ? pulumi.secret(args.sshPublicKey) : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["username"] = args?.username ? pulumi.secret(args.username) : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["vrfDescription"] = args ? args.vrfDescription : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["bootDisk"] = undefined /*out*/;
            resourceInputs["configurationCores"] = undefined /*out*/;
            resourceInputs["configurationDisks"] = undefined /*out*/;
            resourceInputs["configurationMemory"] = undefined /*out*/;
            resourceInputs["configurationNics"] = undefined /*out*/;
            resourceInputs["configurationProcessors"] = undefined /*out*/;
            resourceInputs["configurationStorage"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["hyperthreading"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["machineId"] = undefined /*out*/;
            resourceInputs["machineName"] = undefined /*out*/;
            resourceInputs["networks"] = undefined /*out*/;
            resourceInputs["prices"] = undefined /*out*/;
            resourceInputs["serviceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "sshPublicKey", "username"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BareMetalServer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BareMetalServer resources.
 */
export interface BareMetalServerState {
    accountId?: pulumi.Input<string>;
    /**
     * A boolean (true/false) value indicating whether or not to assign an IPv6 address for this server if using a dual stack
     * network. Defaults to false if not set.
     */
    assignIpv6Address?: pulumi.Input<boolean>;
    /**
     * List of existing networks to attach to the server being provisioned. If providing multiple values it will require you to
     * make server configuration changes for change to take effect.
     */
    attachNetworks?: pulumi.Input<pulumi.Input<inputs.BareMetalServerAttachNetwork>[]>;
    bootDisk?: pulumi.Input<string>;
    configurationCores?: pulumi.Input<number>;
    configurationDisks?: pulumi.Input<number>;
    configurationMemory?: pulumi.Input<string>;
    configurationName?: pulumi.Input<string>;
    configurationNics?: pulumi.Input<number>;
    configurationProcessors?: pulumi.Input<number>;
    configurationStorage?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    /**
     * User parameter to enable hyperthreading on the server. Defaults to true if not set.
     */
    enableHyperthreading?: pulumi.Input<boolean>;
    /**
     * Server hyperthreading status.
     */
    hyperthreading?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    locationId?: pulumi.Input<string>;
    machineId?: pulumi.Input<string>;
    machineName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The name of the new network to create, this is only used on initial creation.
     */
    networkName?: pulumi.Input<string>;
    /**
     * The id of the network size being used for the new network, this is only used on initial creation.
     */
    networkSizeId?: pulumi.Input<string>;
    /**
     * The type of network being provisioned for this server.
     */
    networkType?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.BareMetalServerNetwork>[]>;
    osImageName?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    prices?: pulumi.Input<pulumi.Input<inputs.BareMetalServerPrice>[]>;
    serviceId?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    statusMessage?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BareMetalServerTimeouts>;
    updated?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
    /**
     * For private networks, this is an existing VRF to be used in creating the new network.
     */
    vrf?: pulumi.Input<string>;
    /**
     * For private networks, create a new VRF with this description and use it in creating the new network.
     */
    vrfDescription?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BareMetalServer resource.
 */
export interface BareMetalServerArgs {
    /**
     * A boolean (true/false) value indicating whether or not to assign an IPv6 address for this server if using a dual stack
     * network. Defaults to false if not set.
     */
    assignIpv6Address?: pulumi.Input<boolean>;
    /**
     * List of existing networks to attach to the server being provisioned. If providing multiple values it will require you to
     * make server configuration changes for change to take effect.
     */
    attachNetworks?: pulumi.Input<pulumi.Input<inputs.BareMetalServerAttachNetwork>[]>;
    configurationName: pulumi.Input<string>;
    /**
     * User parameter to enable hyperthreading on the server. Defaults to true if not set.
     */
    enableHyperthreading?: pulumi.Input<boolean>;
    locationId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The name of the new network to create, this is only used on initial creation.
     */
    networkName?: pulumi.Input<string>;
    /**
     * The id of the network size being used for the new network, this is only used on initial creation.
     */
    networkSizeId?: pulumi.Input<string>;
    /**
     * The type of network being provisioned for this server.
     */
    networkType?: pulumi.Input<string>;
    osImageName: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    sshPublicKey?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BareMetalServerTimeouts>;
    username: pulumi.Input<string>;
    /**
     * For private networks, this is an existing VRF to be used in creating the new network.
     */
    vrf?: pulumi.Input<string>;
    /**
     * For private networks, create a new VRF with this description and use it in creating the new network.
     */
    vrfDescription?: pulumi.Input<string>;
}
