// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BareMetalNetwork extends pulumi.CustomResource {
    /**
     * Get an existing BareMetalNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BareMetalNetworkState, opts?: pulumi.CustomResourceOptions): BareMetalNetwork {
        return new BareMetalNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'lumen:index/bareMetalNetwork:BareMetalNetwork';

    /**
     * Returns true if the given object is an instance of BareMetalNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BareMetalNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BareMetalNetwork.__pulumiType;
    }

    public /*out*/ readonly accountId!: pulumi.Output<string>;
    public /*out*/ readonly availableIps!: pulumi.Output<number>;
    public /*out*/ readonly created!: pulumi.Output<string>;
    public /*out*/ readonly gateway!: pulumi.Output<string>;
    public /*out*/ readonly ipBlock!: pulumi.Output<string>;
    public /*out*/ readonly ipv6Block!: pulumi.Output<string>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    public readonly locationId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkSizeId!: pulumi.Output<string | undefined>;
    public readonly networkType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly prices!: pulumi.Output<outputs.BareMetalNetworkPrice[]>;
    public /*out*/ readonly serviceId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BareMetalNetworkTimeouts | undefined>;
    public /*out*/ readonly totalIps!: pulumi.Output<number>;
    public /*out*/ readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updated!: pulumi.Output<string>;
    /**
     * For private networks, this is an existing VRF to be used in creating the new network.
     */
    public readonly vrf!: pulumi.Output<string | undefined>;
    /**
     * For private networks, create a new VRF with this description and use it in creating the new network.
     */
    public readonly vrfDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly vrfDescriptionValue!: pulumi.Output<string>;
    public /*out*/ readonly vrfValue!: pulumi.Output<string>;

    /**
     * Create a BareMetalNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BareMetalNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BareMetalNetworkArgs | BareMetalNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BareMetalNetworkState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["availableIps"] = state ? state.availableIps : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["ipBlock"] = state ? state.ipBlock : undefined;
            resourceInputs["ipv6Block"] = state ? state.ipv6Block : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["locationId"] = state ? state.locationId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkSizeId"] = state ? state.networkSizeId : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["prices"] = state ? state.prices : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["totalIps"] = state ? state.totalIps : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
            resourceInputs["vrf"] = state ? state.vrf : undefined;
            resourceInputs["vrfDescription"] = state ? state.vrfDescription : undefined;
            resourceInputs["vrfDescriptionValue"] = state ? state.vrfDescriptionValue : undefined;
            resourceInputs["vrfValue"] = state ? state.vrfValue : undefined;
        } else {
            const args = argsOrState as BareMetalNetworkArgs | undefined;
            if ((!args || args.locationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'locationId'");
            }
            resourceInputs["locationId"] = args ? args.locationId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkSizeId"] = args ? args.networkSizeId : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vrf"] = args ? args.vrf : undefined;
            resourceInputs["vrfDescription"] = args ? args.vrfDescription : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["availableIps"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["ipBlock"] = undefined /*out*/;
            resourceInputs["ipv6Block"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["prices"] = undefined /*out*/;
            resourceInputs["serviceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalIps"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
            resourceInputs["vrfDescriptionValue"] = undefined /*out*/;
            resourceInputs["vrfValue"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BareMetalNetwork.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BareMetalNetwork resources.
 */
export interface BareMetalNetworkState {
    accountId?: pulumi.Input<string>;
    availableIps?: pulumi.Input<number>;
    created?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    ipBlock?: pulumi.Input<string>;
    ipv6Block?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    locationId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkSizeId?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    prices?: pulumi.Input<pulumi.Input<inputs.BareMetalNetworkPrice>[]>;
    serviceId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BareMetalNetworkTimeouts>;
    totalIps?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    updated?: pulumi.Input<string>;
    /**
     * For private networks, this is an existing VRF to be used in creating the new network.
     */
    vrf?: pulumi.Input<string>;
    /**
     * For private networks, create a new VRF with this description and use it in creating the new network.
     */
    vrfDescription?: pulumi.Input<string>;
    vrfDescriptionValue?: pulumi.Input<string>;
    vrfValue?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BareMetalNetwork resource.
 */
export interface BareMetalNetworkArgs {
    locationId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkSizeId?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BareMetalNetworkTimeouts>;
    /**
     * For private networks, this is an existing VRF to be used in creating the new network.
     */
    vrf?: pulumi.Input<string>;
    /**
     * For private networks, create a new VRF with this description and use it in creating the new network.
     */
    vrfDescription?: pulumi.Input<string>;
}
