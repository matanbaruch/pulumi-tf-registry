// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BareMetalNetworkArgs, BareMetalNetworkState } from "./bareMetalNetwork";
export type BareMetalNetwork = import("./bareMetalNetwork").BareMetalNetwork;
export const BareMetalNetwork: typeof import("./bareMetalNetwork").BareMetalNetwork = null as any;
utilities.lazyLoad(exports, ["BareMetalNetwork"], () => require("./bareMetalNetwork"));

export { BareMetalServerArgs, BareMetalServerState } from "./bareMetalServer";
export type BareMetalServer = import("./bareMetalServer").BareMetalServer;
export const BareMetalServer: typeof import("./bareMetalServer").BareMetalServer = null as any;
utilities.lazyLoad(exports, ["BareMetalServer"], () => require("./bareMetalServer"));

export { GetBareMetalConfigurationsArgs, GetBareMetalConfigurationsResult, GetBareMetalConfigurationsOutputArgs } from "./getBareMetalConfigurations";
export const getBareMetalConfigurations: typeof import("./getBareMetalConfigurations").getBareMetalConfigurations = null as any;
export const getBareMetalConfigurationsOutput: typeof import("./getBareMetalConfigurations").getBareMetalConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getBareMetalConfigurations","getBareMetalConfigurationsOutput"], () => require("./getBareMetalConfigurations"));

export { GetBareMetalLocationsArgs, GetBareMetalLocationsResult, GetBareMetalLocationsOutputArgs } from "./getBareMetalLocations";
export const getBareMetalLocations: typeof import("./getBareMetalLocations").getBareMetalLocations = null as any;
export const getBareMetalLocationsOutput: typeof import("./getBareMetalLocations").getBareMetalLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getBareMetalLocations","getBareMetalLocationsOutput"], () => require("./getBareMetalLocations"));

export { GetBareMetalNetworkSizesArgs, GetBareMetalNetworkSizesResult, GetBareMetalNetworkSizesOutputArgs } from "./getBareMetalNetworkSizes";
export const getBareMetalNetworkSizes: typeof import("./getBareMetalNetworkSizes").getBareMetalNetworkSizes = null as any;
export const getBareMetalNetworkSizesOutput: typeof import("./getBareMetalNetworkSizes").getBareMetalNetworkSizesOutput = null as any;
utilities.lazyLoad(exports, ["getBareMetalNetworkSizes","getBareMetalNetworkSizesOutput"], () => require("./getBareMetalNetworkSizes"));

export { GetBareMetalOsImagesArgs, GetBareMetalOsImagesResult, GetBareMetalOsImagesOutputArgs } from "./getBareMetalOsImages";
export const getBareMetalOsImages: typeof import("./getBareMetalOsImages").getBareMetalOsImages = null as any;
export const getBareMetalOsImagesOutput: typeof import("./getBareMetalOsImages").getBareMetalOsImagesOutput = null as any;
utilities.lazyLoad(exports, ["getBareMetalOsImages","getBareMetalOsImagesOutput"], () => require("./getBareMetalOsImages"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "lumen:index/bareMetalNetwork:BareMetalNetwork":
                return new BareMetalNetwork(name, <any>undefined, { urn })
            case "lumen:index/bareMetalServer:BareMetalServer":
                return new BareMetalServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("lumen", "index/bareMetalNetwork", _module)
pulumi.runtime.registerResourceModule("lumen", "index/bareMetalServer", _module)
pulumi.runtime.registerResourcePackage("lumen", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:lumen") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
