// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DirgroupGeoArgs, DirgroupGeoState } from "./dirgroupGeo";
export type DirgroupGeo = import("./dirgroupGeo").DirgroupGeo;
export const DirgroupGeo: typeof import("./dirgroupGeo").DirgroupGeo = null as any;
utilities.lazyLoad(exports, ["DirgroupGeo"], () => require("./dirgroupGeo"));

export { DirgroupIpArgs, DirgroupIpState } from "./dirgroupIp";
export type DirgroupIp = import("./dirgroupIp").DirgroupIp;
export const DirgroupIp: typeof import("./dirgroupIp").DirgroupIp = null as any;
utilities.lazyLoad(exports, ["DirgroupIp"], () => require("./dirgroupIp"));

export { DirpoolArgs, DirpoolState } from "./dirpool";
export type Dirpool = import("./dirpool").Dirpool;
export const Dirpool: typeof import("./dirpool").Dirpool = null as any;
utilities.lazyLoad(exports, ["Dirpool"], () => require("./dirpool"));

export { GetDirgroupGeoArgs, GetDirgroupGeoResult, GetDirgroupGeoOutputArgs } from "./getDirgroupGeo";
export const getDirgroupGeo: typeof import("./getDirgroupGeo").getDirgroupGeo = null as any;
export const getDirgroupGeoOutput: typeof import("./getDirgroupGeo").getDirgroupGeoOutput = null as any;
utilities.lazyLoad(exports, ["getDirgroupGeo","getDirgroupGeoOutput"], () => require("./getDirgroupGeo"));

export { GetDirgroupIpArgs, GetDirgroupIpResult, GetDirgroupIpOutputArgs } from "./getDirgroupIp";
export const getDirgroupIp: typeof import("./getDirgroupIp").getDirgroupIp = null as any;
export const getDirgroupIpOutput: typeof import("./getDirgroupIp").getDirgroupIpOutput = null as any;
utilities.lazyLoad(exports, ["getDirgroupIp","getDirgroupIpOutput"], () => require("./getDirgroupIp"));

export { GetDirpoolArgs, GetDirpoolResult, GetDirpoolOutputArgs } from "./getDirpool";
export const getDirpool: typeof import("./getDirpool").getDirpool = null as any;
export const getDirpoolOutput: typeof import("./getDirpool").getDirpoolOutput = null as any;
utilities.lazyLoad(exports, ["getDirpool","getDirpoolOutput"], () => require("./getDirpool"));

export { GetProbeDnsArgs, GetProbeDnsResult, GetProbeDnsOutputArgs } from "./getProbeDns";
export const getProbeDns: typeof import("./getProbeDns").getProbeDns = null as any;
export const getProbeDnsOutput: typeof import("./getProbeDns").getProbeDnsOutput = null as any;
utilities.lazyLoad(exports, ["getProbeDns","getProbeDnsOutput"], () => require("./getProbeDns"));

export { GetProbeHttpArgs, GetProbeHttpResult, GetProbeHttpOutputArgs } from "./getProbeHttp";
export const getProbeHttp: typeof import("./getProbeHttp").getProbeHttp = null as any;
export const getProbeHttpOutput: typeof import("./getProbeHttp").getProbeHttpOutput = null as any;
utilities.lazyLoad(exports, ["getProbeHttp","getProbeHttpOutput"], () => require("./getProbeHttp"));

export { GetProbePingArgs, GetProbePingResult, GetProbePingOutputArgs } from "./getProbePing";
export const getProbePing: typeof import("./getProbePing").getProbePing = null as any;
export const getProbePingOutput: typeof import("./getProbePing").getProbePingOutput = null as any;
utilities.lazyLoad(exports, ["getProbePing","getProbePingOutput"], () => require("./getProbePing"));

export { GetProbeTcpArgs, GetProbeTcpResult, GetProbeTcpOutputArgs } from "./getProbeTcp";
export const getProbeTcp: typeof import("./getProbeTcp").getProbeTcp = null as any;
export const getProbeTcpOutput: typeof import("./getProbeTcp").getProbeTcpOutput = null as any;
utilities.lazyLoad(exports, ["getProbeTcp","getProbeTcpOutput"], () => require("./getProbeTcp"));

export { GetRdpoolArgs, GetRdpoolResult, GetRdpoolOutputArgs } from "./getRdpool";
export const getRdpool: typeof import("./getRdpool").getRdpool = null as any;
export const getRdpoolOutput: typeof import("./getRdpool").getRdpoolOutput = null as any;
utilities.lazyLoad(exports, ["getRdpool","getRdpoolOutput"], () => require("./getRdpool"));

export { GetRecordArgs, GetRecordResult, GetRecordOutputArgs } from "./getRecord";
export const getRecord: typeof import("./getRecord").getRecord = null as any;
export const getRecordOutput: typeof import("./getRecord").getRecordOutput = null as any;
utilities.lazyLoad(exports, ["getRecord","getRecordOutput"], () => require("./getRecord"));

export { GetSbpoolArgs, GetSbpoolResult, GetSbpoolOutputArgs } from "./getSbpool";
export const getSbpool: typeof import("./getSbpool").getSbpool = null as any;
export const getSbpoolOutput: typeof import("./getSbpool").getSbpoolOutput = null as any;
utilities.lazyLoad(exports, ["getSbpool","getSbpoolOutput"], () => require("./getSbpool"));

export { GetSfpoolArgs, GetSfpoolResult, GetSfpoolOutputArgs } from "./getSfpool";
export const getSfpool: typeof import("./getSfpool").getSfpool = null as any;
export const getSfpoolOutput: typeof import("./getSfpool").getSfpoolOutput = null as any;
utilities.lazyLoad(exports, ["getSfpool","getSfpoolOutput"], () => require("./getSfpool"));

export { GetSlbpoolArgs, GetSlbpoolResult, GetSlbpoolOutputArgs } from "./getSlbpool";
export const getSlbpool: typeof import("./getSlbpool").getSlbpool = null as any;
export const getSlbpoolOutput: typeof import("./getSlbpool").getSlbpoolOutput = null as any;
utilities.lazyLoad(exports, ["getSlbpool","getSlbpoolOutput"], () => require("./getSlbpool"));

export { GetTcpoolArgs, GetTcpoolResult, GetTcpoolOutputArgs } from "./getTcpool";
export const getTcpool: typeof import("./getTcpool").getTcpool = null as any;
export const getTcpoolOutput: typeof import("./getTcpool").getTcpoolOutput = null as any;
utilities.lazyLoad(exports, ["getTcpool","getTcpoolOutput"], () => require("./getTcpool"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { ProbeDnsArgs, ProbeDnsState } from "./probeDns";
export type ProbeDns = import("./probeDns").ProbeDns;
export const ProbeDns: typeof import("./probeDns").ProbeDns = null as any;
utilities.lazyLoad(exports, ["ProbeDns"], () => require("./probeDns"));

export { ProbeHttpArgs, ProbeHttpState } from "./probeHttp";
export type ProbeHttp = import("./probeHttp").ProbeHttp;
export const ProbeHttp: typeof import("./probeHttp").ProbeHttp = null as any;
utilities.lazyLoad(exports, ["ProbeHttp"], () => require("./probeHttp"));

export { ProbePingArgs, ProbePingState } from "./probePing";
export type ProbePing = import("./probePing").ProbePing;
export const ProbePing: typeof import("./probePing").ProbePing = null as any;
utilities.lazyLoad(exports, ["ProbePing"], () => require("./probePing"));

export { ProbeTcpArgs, ProbeTcpState } from "./probeTcp";
export type ProbeTcp = import("./probeTcp").ProbeTcp;
export const ProbeTcp: typeof import("./probeTcp").ProbeTcp = null as any;
utilities.lazyLoad(exports, ["ProbeTcp"], () => require("./probeTcp"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RdpoolArgs, RdpoolState } from "./rdpool";
export type Rdpool = import("./rdpool").Rdpool;
export const Rdpool: typeof import("./rdpool").Rdpool = null as any;
utilities.lazyLoad(exports, ["Rdpool"], () => require("./rdpool"));

export { RecordArgs, RecordState } from "./record";
export type Record = import("./record").Record;
export const Record: typeof import("./record").Record = null as any;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));

export { SbpoolArgs, SbpoolState } from "./sbpool";
export type Sbpool = import("./sbpool").Sbpool;
export const Sbpool: typeof import("./sbpool").Sbpool = null as any;
utilities.lazyLoad(exports, ["Sbpool"], () => require("./sbpool"));

export { SfpoolArgs, SfpoolState } from "./sfpool";
export type Sfpool = import("./sfpool").Sfpool;
export const Sfpool: typeof import("./sfpool").Sfpool = null as any;
utilities.lazyLoad(exports, ["Sfpool"], () => require("./sfpool"));

export { SlbpoolArgs, SlbpoolState } from "./slbpool";
export type Slbpool = import("./slbpool").Slbpool;
export const Slbpool: typeof import("./slbpool").Slbpool = null as any;
utilities.lazyLoad(exports, ["Slbpool"], () => require("./slbpool"));

export { TcpoolArgs, TcpoolState } from "./tcpool";
export type Tcpool = import("./tcpool").Tcpool;
export const Tcpool: typeof import("./tcpool").Tcpool = null as any;
utilities.lazyLoad(exports, ["Tcpool"], () => require("./tcpool"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ultradns:index/dirgroupGeo:DirgroupGeo":
                return new DirgroupGeo(name, <any>undefined, { urn })
            case "ultradns:index/dirgroupIp:DirgroupIp":
                return new DirgroupIp(name, <any>undefined, { urn })
            case "ultradns:index/dirpool:Dirpool":
                return new Dirpool(name, <any>undefined, { urn })
            case "ultradns:index/probeDns:ProbeDns":
                return new ProbeDns(name, <any>undefined, { urn })
            case "ultradns:index/probeHttp:ProbeHttp":
                return new ProbeHttp(name, <any>undefined, { urn })
            case "ultradns:index/probePing:ProbePing":
                return new ProbePing(name, <any>undefined, { urn })
            case "ultradns:index/probeTcp:ProbeTcp":
                return new ProbeTcp(name, <any>undefined, { urn })
            case "ultradns:index/rdpool:Rdpool":
                return new Rdpool(name, <any>undefined, { urn })
            case "ultradns:index/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "ultradns:index/sbpool:Sbpool":
                return new Sbpool(name, <any>undefined, { urn })
            case "ultradns:index/sfpool:Sfpool":
                return new Sfpool(name, <any>undefined, { urn })
            case "ultradns:index/slbpool:Slbpool":
                return new Slbpool(name, <any>undefined, { urn })
            case "ultradns:index/tcpool:Tcpool":
                return new Tcpool(name, <any>undefined, { urn })
            case "ultradns:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ultradns", "index/dirgroupGeo", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/dirgroupIp", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/dirpool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/probeDns", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/probeHttp", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/probePing", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/probeTcp", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/rdpool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/record", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/sbpool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/sfpool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/slbpool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/tcpool", _module)
pulumi.runtime.registerResourceModule("ultradns", "index/zone", _module)
pulumi.runtime.registerResourcePackage("ultradns", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ultradns") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
