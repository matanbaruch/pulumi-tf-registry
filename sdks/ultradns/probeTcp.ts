// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProbeTcp extends pulumi.CustomResource {
    /**
     * Get an existing ProbeTcp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProbeTcpState, opts?: pulumi.CustomResourceOptions): ProbeTcp {
        return new ProbeTcp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ultradns:index/probeTcp:ProbeTcp';

    /**
     * Returns true if the given object is an instance of ProbeTcp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProbeTcp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProbeTcp.__pulumiType;
    }

    public readonly agents!: pulumi.Output<string[]>;
    public readonly avgConnectLimit!: pulumi.Output<outputs.ProbeTcpAvgConnectLimit | undefined>;
    public readonly connectLimit!: pulumi.Output<outputs.ProbeTcpConnectLimit>;
    public readonly controlIp!: pulumi.Output<string | undefined>;
    public /*out*/ readonly guid!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string | undefined>;
    public readonly ownerName!: pulumi.Output<string>;
    public readonly poolRecord!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly threshold!: pulumi.Output<number>;
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a ProbeTcp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProbeTcpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProbeTcpArgs | ProbeTcpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProbeTcpState | undefined;
            resourceInputs["agents"] = state ? state.agents : undefined;
            resourceInputs["avgConnectLimit"] = state ? state.avgConnectLimit : undefined;
            resourceInputs["connectLimit"] = state ? state.connectLimit : undefined;
            resourceInputs["controlIp"] = state ? state.controlIp : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["poolRecord"] = state ? state.poolRecord : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as ProbeTcpArgs | undefined;
            if ((!args || args.agents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agents'");
            }
            if ((!args || args.connectLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectLimit'");
            }
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["agents"] = args ? args.agents : undefined;
            resourceInputs["avgConnectLimit"] = args ? args.avgConnectLimit : undefined;
            resourceInputs["connectLimit"] = args ? args.connectLimit : undefined;
            resourceInputs["controlIp"] = args ? args.controlIp : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["poolRecord"] = args ? args.poolRecord : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["guid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProbeTcp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProbeTcp resources.
 */
export interface ProbeTcpState {
    agents?: pulumi.Input<pulumi.Input<string>[]>;
    avgConnectLimit?: pulumi.Input<inputs.ProbeTcpAvgConnectLimit>;
    connectLimit?: pulumi.Input<inputs.ProbeTcpConnectLimit>;
    controlIp?: pulumi.Input<string>;
    guid?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    ownerName?: pulumi.Input<string>;
    poolRecord?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    threshold?: pulumi.Input<number>;
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProbeTcp resource.
 */
export interface ProbeTcpArgs {
    agents: pulumi.Input<pulumi.Input<string>[]>;
    avgConnectLimit?: pulumi.Input<inputs.ProbeTcpAvgConnectLimit>;
    connectLimit: pulumi.Input<inputs.ProbeTcpConnectLimit>;
    controlIp?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    ownerName: pulumi.Input<string>;
    poolRecord?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    threshold: pulumi.Input<number>;
    zoneName: pulumi.Input<string>;
}
