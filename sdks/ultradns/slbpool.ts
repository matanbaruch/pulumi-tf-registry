// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Slbpool extends pulumi.CustomResource {
    /**
     * Get an existing Slbpool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SlbpoolState, opts?: pulumi.CustomResourceOptions): Slbpool {
        return new Slbpool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ultradns:index/slbpool:Slbpool';

    /**
     * Returns true if the given object is an instance of Slbpool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Slbpool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Slbpool.__pulumiType;
    }

    public readonly allFailRecord!: pulumi.Output<outputs.SlbpoolAllFailRecord>;
    public readonly monitor!: pulumi.Output<outputs.SlbpoolMonitor>;
    public readonly ownerName!: pulumi.Output<string>;
    public readonly poolDescription!: pulumi.Output<string | undefined>;
    public readonly rdataInfos!: pulumi.Output<outputs.SlbpoolRdataInfo[]>;
    public readonly recordType!: pulumi.Output<string>;
    public readonly regionFailureSensitivity!: pulumi.Output<string>;
    public readonly responseMethod!: pulumi.Output<string>;
    public readonly servingPreference!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a Slbpool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SlbpoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SlbpoolArgs | SlbpoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SlbpoolState | undefined;
            resourceInputs["allFailRecord"] = state ? state.allFailRecord : undefined;
            resourceInputs["monitor"] = state ? state.monitor : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["poolDescription"] = state ? state.poolDescription : undefined;
            resourceInputs["rdataInfos"] = state ? state.rdataInfos : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["regionFailureSensitivity"] = state ? state.regionFailureSensitivity : undefined;
            resourceInputs["responseMethod"] = state ? state.responseMethod : undefined;
            resourceInputs["servingPreference"] = state ? state.servingPreference : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as SlbpoolArgs | undefined;
            if ((!args || args.allFailRecord === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allFailRecord'");
            }
            if ((!args || args.monitor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitor'");
            }
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.rdataInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdataInfos'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            if ((!args || args.regionFailureSensitivity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionFailureSensitivity'");
            }
            if ((!args || args.responseMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'responseMethod'");
            }
            if ((!args || args.servingPreference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'servingPreference'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["allFailRecord"] = args ? args.allFailRecord : undefined;
            resourceInputs["monitor"] = args ? args.monitor : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["poolDescription"] = args ? args.poolDescription : undefined;
            resourceInputs["rdataInfos"] = args ? args.rdataInfos : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["regionFailureSensitivity"] = args ? args.regionFailureSensitivity : undefined;
            resourceInputs["responseMethod"] = args ? args.responseMethod : undefined;
            resourceInputs["servingPreference"] = args ? args.servingPreference : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Slbpool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Slbpool resources.
 */
export interface SlbpoolState {
    allFailRecord?: pulumi.Input<inputs.SlbpoolAllFailRecord>;
    monitor?: pulumi.Input<inputs.SlbpoolMonitor>;
    ownerName?: pulumi.Input<string>;
    poolDescription?: pulumi.Input<string>;
    rdataInfos?: pulumi.Input<pulumi.Input<inputs.SlbpoolRdataInfo>[]>;
    recordType?: pulumi.Input<string>;
    regionFailureSensitivity?: pulumi.Input<string>;
    responseMethod?: pulumi.Input<string>;
    servingPreference?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Slbpool resource.
 */
export interface SlbpoolArgs {
    allFailRecord: pulumi.Input<inputs.SlbpoolAllFailRecord>;
    monitor: pulumi.Input<inputs.SlbpoolMonitor>;
    ownerName: pulumi.Input<string>;
    poolDescription?: pulumi.Input<string>;
    rdataInfos: pulumi.Input<pulumi.Input<inputs.SlbpoolRdataInfo>[]>;
    recordType: pulumi.Input<string>;
    regionFailureSensitivity: pulumi.Input<string>;
    responseMethod: pulumi.Input<string>;
    servingPreference: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    zoneName: pulumi.Input<string>;
}
