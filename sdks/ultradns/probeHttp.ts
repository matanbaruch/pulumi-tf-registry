// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProbeHttp extends pulumi.CustomResource {
    /**
     * Get an existing ProbeHttp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProbeHttpState, opts?: pulumi.CustomResourceOptions): ProbeHttp {
        return new ProbeHttp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ultradns:index/probeHttp:ProbeHttp';

    /**
     * Returns true if the given object is an instance of ProbeHttp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProbeHttp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProbeHttp.__pulumiType;
    }

    public readonly agents!: pulumi.Output<string[]>;
    public /*out*/ readonly guid!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string | undefined>;
    public readonly ownerName!: pulumi.Output<string>;
    public readonly poolRecord!: pulumi.Output<string | undefined>;
    public readonly threshold!: pulumi.Output<number>;
    public readonly totalLimit!: pulumi.Output<outputs.ProbeHttpTotalLimit | undefined>;
    public readonly transactions!: pulumi.Output<outputs.ProbeHttpTransaction[]>;
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a ProbeHttp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProbeHttpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProbeHttpArgs | ProbeHttpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProbeHttpState | undefined;
            resourceInputs["agents"] = state ? state.agents : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["poolRecord"] = state ? state.poolRecord : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["totalLimit"] = state ? state.totalLimit : undefined;
            resourceInputs["transactions"] = state ? state.transactions : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as ProbeHttpArgs | undefined;
            if ((!args || args.agents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agents'");
            }
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.transactions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transactions'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["agents"] = args ? args.agents : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["poolRecord"] = args ? args.poolRecord : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["totalLimit"] = args ? args.totalLimit : undefined;
            resourceInputs["transactions"] = args ? args.transactions : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["guid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProbeHttp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProbeHttp resources.
 */
export interface ProbeHttpState {
    agents?: pulumi.Input<pulumi.Input<string>[]>;
    guid?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    ownerName?: pulumi.Input<string>;
    poolRecord?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    totalLimit?: pulumi.Input<inputs.ProbeHttpTotalLimit>;
    transactions?: pulumi.Input<pulumi.Input<inputs.ProbeHttpTransaction>[]>;
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProbeHttp resource.
 */
export interface ProbeHttpArgs {
    agents: pulumi.Input<pulumi.Input<string>[]>;
    interval?: pulumi.Input<string>;
    ownerName: pulumi.Input<string>;
    poolRecord?: pulumi.Input<string>;
    threshold: pulumi.Input<number>;
    totalLimit?: pulumi.Input<inputs.ProbeHttpTotalLimit>;
    transactions: pulumi.Input<pulumi.Input<inputs.ProbeHttpTransaction>[]>;
    zoneName: pulumi.Input<string>;
}
