// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DirgroupIpIp {
    address?: pulumi.Input<string>;
    cidr?: pulumi.Input<string>;
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface DirpoolNoResponse {
    allNonConfigured?: pulumi.Input<boolean>;
    geoAccountLevel?: pulumi.Input<boolean>;
    geoCodes?: pulumi.Input<pulumi.Input<string>[]>;
    geoGroupName?: pulumi.Input<string>;
    ipAccountLevel?: pulumi.Input<boolean>;
    ipGroupName?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.DirpoolNoResponseIp>[]>;
}

export interface DirpoolNoResponseIp {
    address?: pulumi.Input<string>;
    cidr?: pulumi.Input<string>;
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface DirpoolRdataInfo {
    allNonConfigured?: pulumi.Input<boolean>;
    geoAccountLevel?: pulumi.Input<boolean>;
    geoCodes?: pulumi.Input<pulumi.Input<string>[]>;
    geoGroupName?: pulumi.Input<string>;
    ipAccountLevel?: pulumi.Input<boolean>;
    ipGroupName?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<inputs.DirpoolRdataInfoIp>[]>;
    rdata: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface DirpoolRdataInfoIp {
    address?: pulumi.Input<string>;
    cidr?: pulumi.Input<string>;
    end?: pulumi.Input<string>;
    start?: pulumi.Input<string>;
}

export interface ProbeDnsAvgRunLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeDnsResponse {
    critical?: pulumi.Input<string>;
    fail?: pulumi.Input<string>;
    warning?: pulumi.Input<string>;
}

export interface ProbeDnsRunLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeHttpTotalLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeHttpTransaction {
    avgConnectLimit?: pulumi.Input<inputs.ProbeHttpTransactionAvgConnectLimit>;
    avgRunLimit?: pulumi.Input<inputs.ProbeHttpTransactionAvgRunLimit>;
    connectLimit?: pulumi.Input<inputs.ProbeHttpTransactionConnectLimit>;
    expectedResponse?: pulumi.Input<string>;
    followRedirects?: pulumi.Input<boolean>;
    method: pulumi.Input<string>;
    protocolVersion: pulumi.Input<string>;
    runLimit?: pulumi.Input<inputs.ProbeHttpTransactionRunLimit>;
    searchString?: pulumi.Input<inputs.ProbeHttpTransactionSearchString>;
    transmittedData?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface ProbeHttpTransactionAvgConnectLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeHttpTransactionAvgRunLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeHttpTransactionConnectLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeHttpTransactionRunLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeHttpTransactionSearchString {
    critical?: pulumi.Input<string>;
    fail?: pulumi.Input<string>;
    warning?: pulumi.Input<string>;
}

export interface ProbePingAverageLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbePingAvgRunLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbePingLossPercentLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbePingRunLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbePingTotalLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeTcpAvgConnectLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface ProbeTcpConnectLimit {
    critical?: pulumi.Input<number>;
    fail?: pulumi.Input<number>;
    warning?: pulumi.Input<number>;
}

export interface SbpoolBackupRecord {
    availableToServe?: pulumi.Input<boolean>;
    failoverDelay?: pulumi.Input<number>;
    rdata: pulumi.Input<string>;
}

export interface SbpoolRdataInfo {
    availableToServe?: pulumi.Input<boolean>;
    failoverDelay?: pulumi.Input<number>;
    priority: pulumi.Input<number>;
    rdata: pulumi.Input<string>;
    runProbes?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
}

export interface SfpoolBackupRecord {
    description?: pulumi.Input<string>;
    rdata: pulumi.Input<string>;
}

export interface SfpoolMonitor {
    method: pulumi.Input<string>;
    searchString?: pulumi.Input<string>;
    transmittedData?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface SlbpoolAllFailRecord {
    description?: pulumi.Input<string>;
    rdata: pulumi.Input<string>;
    serving?: pulumi.Input<boolean>;
}

export interface SlbpoolMonitor {
    method: pulumi.Input<string>;
    searchString?: pulumi.Input<string>;
    transmittedData?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface SlbpoolRdataInfo {
    availableToServe?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    forcedState?: pulumi.Input<string>;
    probingEnabled?: pulumi.Input<boolean>;
    rdata: pulumi.Input<string>;
}

export interface TcpoolBackupRecord {
    availableToServe?: pulumi.Input<boolean>;
    failoverDelay?: pulumi.Input<number>;
    rdata: pulumi.Input<string>;
}

export interface TcpoolRdataInfo {
    availableToServe?: pulumi.Input<boolean>;
    failoverDelay?: pulumi.Input<number>;
    priority: pulumi.Input<number>;
    rdata: pulumi.Input<string>;
    runProbes?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    threshold?: pulumi.Input<number>;
    weight?: pulumi.Input<number>;
}

export interface ZoneAliasCreateInfo {
    originalZoneName: pulumi.Input<string>;
}

export interface ZonePrimaryCreateInfo {
    createType: pulumi.Input<string>;
    forceImport?: pulumi.Input<boolean>;
    inherit?: pulumi.Input<string>;
    nameServer?: pulumi.Input<inputs.ZonePrimaryCreateInfoNameServer>;
    notifyAddresses?: pulumi.Input<pulumi.Input<inputs.ZonePrimaryCreateInfoNotifyAddress>[]>;
    originalZoneName?: pulumi.Input<string>;
    restrictIps?: pulumi.Input<pulumi.Input<inputs.ZonePrimaryCreateInfoRestrictIp>[]>;
    tsig?: pulumi.Input<inputs.ZonePrimaryCreateInfoTsig>;
}

export interface ZonePrimaryCreateInfoNameServer {
    ip: pulumi.Input<string>;
    tsigAlgorithm?: pulumi.Input<string>;
    tsigKey?: pulumi.Input<string>;
    tsigKeyValue?: pulumi.Input<string>;
}

export interface ZonePrimaryCreateInfoNotifyAddress {
    description?: pulumi.Input<string>;
    notifyAddress: pulumi.Input<string>;
}

export interface ZonePrimaryCreateInfoRestrictIp {
    cidr?: pulumi.Input<string>;
    comment?: pulumi.Input<string>;
    endIp?: pulumi.Input<string>;
    singleIp?: pulumi.Input<string>;
    startIp?: pulumi.Input<string>;
}

export interface ZonePrimaryCreateInfoTsig {
    description?: pulumi.Input<string>;
    tsigAlgorithm: pulumi.Input<string>;
    tsigKeyName: pulumi.Input<string>;
    tsigKeyValue: pulumi.Input<string>;
}

export interface ZoneRegistrarInfo {
    nameServers?: pulumi.Input<pulumi.Input<inputs.ZoneRegistrarInfoNameServer>[]>;
    registrar?: pulumi.Input<string>;
    whoIsExpiration?: pulumi.Input<string>;
}

export interface ZoneRegistrarInfoNameServer {
    incorrects: pulumi.Input<pulumi.Input<string>[]>;
    missings: pulumi.Input<pulumi.Input<string>[]>;
    oks: pulumi.Input<pulumi.Input<string>[]>;
    unknowns: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ZoneSecondaryCreateInfo {
    notificationEmailAddress?: pulumi.Input<string>;
    primaryNameServer1: pulumi.Input<inputs.ZoneSecondaryCreateInfoPrimaryNameServer1>;
    primaryNameServer2?: pulumi.Input<inputs.ZoneSecondaryCreateInfoPrimaryNameServer2>;
    primaryNameServer3?: pulumi.Input<inputs.ZoneSecondaryCreateInfoPrimaryNameServer3>;
}

export interface ZoneSecondaryCreateInfoPrimaryNameServer1 {
    ip: pulumi.Input<string>;
    tsigAlgorithm?: pulumi.Input<string>;
    tsigKey?: pulumi.Input<string>;
    tsigKeyValue?: pulumi.Input<string>;
}

export interface ZoneSecondaryCreateInfoPrimaryNameServer2 {
    ip: pulumi.Input<string>;
    tsigAlgorithm?: pulumi.Input<string>;
    tsigKey?: pulumi.Input<string>;
    tsigKeyValue?: pulumi.Input<string>;
}

export interface ZoneSecondaryCreateInfoPrimaryNameServer3 {
    ip: pulumi.Input<string>;
    tsigAlgorithm?: pulumi.Input<string>;
    tsigKey?: pulumi.Input<string>;
    tsigKeyValue?: pulumi.Input<string>;
}

export interface ZoneTransferStatusDetails {
    lastRefresh?: pulumi.Input<string>;
    lastRefreshStatus?: pulumi.Input<string>;
    lastRefreshStatusMessage?: pulumi.Input<string>;
    nextRefresh?: pulumi.Input<string>;
}
