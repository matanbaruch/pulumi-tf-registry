// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ProbePing extends pulumi.CustomResource {
    /**
     * Get an existing ProbePing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProbePingState, opts?: pulumi.CustomResourceOptions): ProbePing {
        return new ProbePing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ultradns:index/probePing:ProbePing';

    /**
     * Returns true if the given object is an instance of ProbePing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProbePing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProbePing.__pulumiType;
    }

    public readonly agents!: pulumi.Output<string[]>;
    public readonly averageLimit!: pulumi.Output<outputs.ProbePingAverageLimit | undefined>;
    public readonly avgRunLimit!: pulumi.Output<outputs.ProbePingAvgRunLimit | undefined>;
    public /*out*/ readonly guid!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<string | undefined>;
    public readonly lossPercentLimit!: pulumi.Output<outputs.ProbePingLossPercentLimit | undefined>;
    public readonly ownerName!: pulumi.Output<string>;
    public readonly packetSize!: pulumi.Output<number | undefined>;
    public readonly packets!: pulumi.Output<number | undefined>;
    public readonly poolRecord!: pulumi.Output<string | undefined>;
    public readonly runLimit!: pulumi.Output<outputs.ProbePingRunLimit | undefined>;
    public readonly threshold!: pulumi.Output<number>;
    public readonly totalLimit!: pulumi.Output<outputs.ProbePingTotalLimit | undefined>;
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a ProbePing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProbePingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProbePingArgs | ProbePingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProbePingState | undefined;
            resourceInputs["agents"] = state ? state.agents : undefined;
            resourceInputs["averageLimit"] = state ? state.averageLimit : undefined;
            resourceInputs["avgRunLimit"] = state ? state.avgRunLimit : undefined;
            resourceInputs["guid"] = state ? state.guid : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["lossPercentLimit"] = state ? state.lossPercentLimit : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["packetSize"] = state ? state.packetSize : undefined;
            resourceInputs["packets"] = state ? state.packets : undefined;
            resourceInputs["poolRecord"] = state ? state.poolRecord : undefined;
            resourceInputs["runLimit"] = state ? state.runLimit : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["totalLimit"] = state ? state.totalLimit : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as ProbePingArgs | undefined;
            if ((!args || args.agents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agents'");
            }
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["agents"] = args ? args.agents : undefined;
            resourceInputs["averageLimit"] = args ? args.averageLimit : undefined;
            resourceInputs["avgRunLimit"] = args ? args.avgRunLimit : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["lossPercentLimit"] = args ? args.lossPercentLimit : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["packetSize"] = args ? args.packetSize : undefined;
            resourceInputs["packets"] = args ? args.packets : undefined;
            resourceInputs["poolRecord"] = args ? args.poolRecord : undefined;
            resourceInputs["runLimit"] = args ? args.runLimit : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["totalLimit"] = args ? args.totalLimit : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["guid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProbePing.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ProbePing resources.
 */
export interface ProbePingState {
    agents?: pulumi.Input<pulumi.Input<string>[]>;
    averageLimit?: pulumi.Input<inputs.ProbePingAverageLimit>;
    avgRunLimit?: pulumi.Input<inputs.ProbePingAvgRunLimit>;
    guid?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    lossPercentLimit?: pulumi.Input<inputs.ProbePingLossPercentLimit>;
    ownerName?: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    packets?: pulumi.Input<number>;
    poolRecord?: pulumi.Input<string>;
    runLimit?: pulumi.Input<inputs.ProbePingRunLimit>;
    threshold?: pulumi.Input<number>;
    totalLimit?: pulumi.Input<inputs.ProbePingTotalLimit>;
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProbePing resource.
 */
export interface ProbePingArgs {
    agents: pulumi.Input<pulumi.Input<string>[]>;
    averageLimit?: pulumi.Input<inputs.ProbePingAverageLimit>;
    avgRunLimit?: pulumi.Input<inputs.ProbePingAvgRunLimit>;
    interval?: pulumi.Input<string>;
    lossPercentLimit?: pulumi.Input<inputs.ProbePingLossPercentLimit>;
    ownerName: pulumi.Input<string>;
    packetSize?: pulumi.Input<number>;
    packets?: pulumi.Input<number>;
    poolRecord?: pulumi.Input<string>;
    runLimit?: pulumi.Input<inputs.ProbePingRunLimit>;
    threshold: pulumi.Input<number>;
    totalLimit?: pulumi.Input<inputs.ProbePingTotalLimit>;
    zoneName: pulumi.Input<string>;
}
