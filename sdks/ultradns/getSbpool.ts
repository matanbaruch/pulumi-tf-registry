// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSbpool(args: GetSbpoolArgs, opts?: pulumi.InvokeOptions): Promise<GetSbpoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ultradns:index/getSbpool:getSbpool", {
        "id": args.id,
        "ownerName": args.ownerName,
        "recordType": args.recordType,
        "zoneName": args.zoneName,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getSbpool.
 */
export interface GetSbpoolArgs {
    id?: string;
    ownerName: string;
    recordType: string;
    zoneName: string;
}

/**
 * A collection of values returned by getSbpool.
 */
export interface GetSbpoolResult {
    readonly actOnProbes: boolean;
    readonly backupRecords: outputs.GetSbpoolBackupRecord[];
    readonly failureThreshold: number;
    readonly id: string;
    readonly maxActive: number;
    readonly maxServed: number;
    readonly order: string;
    readonly ownerName: string;
    readonly poolDescription: string;
    readonly rdataInfos: outputs.GetSbpoolRdataInfo[];
    readonly recordType: string;
    readonly runProbes: boolean;
    readonly status: string;
    readonly ttl: number;
    readonly zoneName: string;
}
export function getSbpoolOutput(args: GetSbpoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSbpoolResult> {
    return pulumi.output(args).apply((a: any) => getSbpool(a, opts))
}

/**
 * A collection of arguments for invoking getSbpool.
 */
export interface GetSbpoolOutputArgs {
    id?: pulumi.Input<string>;
    ownerName: pulumi.Input<string>;
    recordType: pulumi.Input<string>;
    zoneName: pulumi.Input<string>;
}
