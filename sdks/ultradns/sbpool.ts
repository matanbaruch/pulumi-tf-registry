// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Sbpool extends pulumi.CustomResource {
    /**
     * Get an existing Sbpool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SbpoolState, opts?: pulumi.CustomResourceOptions): Sbpool {
        return new Sbpool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ultradns:index/sbpool:Sbpool';

    /**
     * Returns true if the given object is an instance of Sbpool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Sbpool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Sbpool.__pulumiType;
    }

    public readonly actOnProbes!: pulumi.Output<boolean | undefined>;
    public readonly backupRecords!: pulumi.Output<outputs.SbpoolBackupRecord[] | undefined>;
    public readonly failureThreshold!: pulumi.Output<number | undefined>;
    public readonly maxActive!: pulumi.Output<number | undefined>;
    public readonly maxServed!: pulumi.Output<number>;
    public readonly order!: pulumi.Output<string | undefined>;
    public readonly ownerName!: pulumi.Output<string>;
    public readonly poolDescription!: pulumi.Output<string | undefined>;
    public readonly rdataInfos!: pulumi.Output<outputs.SbpoolRdataInfo[]>;
    public readonly recordType!: pulumi.Output<string>;
    public readonly runProbes!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly ttl!: pulumi.Output<number | undefined>;
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a Sbpool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SbpoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SbpoolArgs | SbpoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SbpoolState | undefined;
            resourceInputs["actOnProbes"] = state ? state.actOnProbes : undefined;
            resourceInputs["backupRecords"] = state ? state.backupRecords : undefined;
            resourceInputs["failureThreshold"] = state ? state.failureThreshold : undefined;
            resourceInputs["maxActive"] = state ? state.maxActive : undefined;
            resourceInputs["maxServed"] = state ? state.maxServed : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["ownerName"] = state ? state.ownerName : undefined;
            resourceInputs["poolDescription"] = state ? state.poolDescription : undefined;
            resourceInputs["rdataInfos"] = state ? state.rdataInfos : undefined;
            resourceInputs["recordType"] = state ? state.recordType : undefined;
            resourceInputs["runProbes"] = state ? state.runProbes : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as SbpoolArgs | undefined;
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.rdataInfos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdataInfos'");
            }
            if ((!args || args.recordType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recordType'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["actOnProbes"] = args ? args.actOnProbes : undefined;
            resourceInputs["backupRecords"] = args ? args.backupRecords : undefined;
            resourceInputs["failureThreshold"] = args ? args.failureThreshold : undefined;
            resourceInputs["maxActive"] = args ? args.maxActive : undefined;
            resourceInputs["maxServed"] = args ? args.maxServed : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["ownerName"] = args ? args.ownerName : undefined;
            resourceInputs["poolDescription"] = args ? args.poolDescription : undefined;
            resourceInputs["rdataInfos"] = args ? args.rdataInfos : undefined;
            resourceInputs["recordType"] = args ? args.recordType : undefined;
            resourceInputs["runProbes"] = args ? args.runProbes : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Sbpool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Sbpool resources.
 */
export interface SbpoolState {
    actOnProbes?: pulumi.Input<boolean>;
    backupRecords?: pulumi.Input<pulumi.Input<inputs.SbpoolBackupRecord>[]>;
    failureThreshold?: pulumi.Input<number>;
    maxActive?: pulumi.Input<number>;
    maxServed?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
    ownerName?: pulumi.Input<string>;
    poolDescription?: pulumi.Input<string>;
    rdataInfos?: pulumi.Input<pulumi.Input<inputs.SbpoolRdataInfo>[]>;
    recordType?: pulumi.Input<string>;
    runProbes?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Sbpool resource.
 */
export interface SbpoolArgs {
    actOnProbes?: pulumi.Input<boolean>;
    backupRecords?: pulumi.Input<pulumi.Input<inputs.SbpoolBackupRecord>[]>;
    failureThreshold?: pulumi.Input<number>;
    maxActive?: pulumi.Input<number>;
    maxServed?: pulumi.Input<number>;
    order?: pulumi.Input<string>;
    ownerName: pulumi.Input<string>;
    poolDescription?: pulumi.Input<string>;
    rdataInfos: pulumi.Input<pulumi.Input<inputs.SbpoolRdataInfo>[]>;
    recordType: pulumi.Input<string>;
    runProbes?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
    zoneName: pulumi.Input<string>;
}
