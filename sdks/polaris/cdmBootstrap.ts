// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CdmBootstrap extends pulumi.CustomResource {
    /**
     * Get an existing CdmBootstrap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CdmBootstrapState, opts?: pulumi.CustomResourceOptions): CdmBootstrap {
        return new CdmBootstrap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'polaris:index/cdmBootstrap:CdmBootstrap';

    /**
     * Returns true if the given object is an instance of CdmBootstrap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CdmBootstrap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CdmBootstrap.__pulumiType;
    }

    /**
     * The Rubrik cluster sends messages for the admin account to this email address.
     */
    public readonly adminEmail!: pulumi.Output<string>;
    /**
     * Password for the admin account.
     */
    public readonly adminPassword!: pulumi.Output<string>;
    /**
     * Unique name to assign to the Rubrik cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The node name and IP formatted as a map.
     */
    public readonly clusterNodes!: pulumi.Output<{[key: string]: string}>;
    /**
     * IPv4 addresses of DNS servers.
     */
    public readonly dnsNameServers!: pulumi.Output<string[]>;
    /**
     * The search domain that the DNS Service will use to resolve hostnames that are not fully qualified.
     */
    public readonly dnsSearchDomains!: pulumi.Output<string[]>;
    /**
     * Enable software data encryption at rest.
     */
    public readonly enableEncryption!: pulumi.Output<boolean | undefined>;
    /**
     * IP address assigned to the management network gateway
     */
    public readonly managementGateway!: pulumi.Output<string>;
    /**
     * Subnet mask assigned to the management network.
     */
    public readonly managementSubnetMask!: pulumi.Output<string>;
    /**
     * Symmetric key material for NTP server #1.
     */
    public readonly ntpServer1Key!: pulumi.Output<string | undefined>;
    /**
     * Key id number for NTP server #1 (typically this is 0).
     */
    public readonly ntpServer1KeyId!: pulumi.Output<number | undefined>;
    /**
     * Symmetric key type for NTP server #1.
     */
    public readonly ntpServer1KeyType!: pulumi.Output<string | undefined>;
    /**
     * IP address for NTP server #1.
     */
    public readonly ntpServer1Name!: pulumi.Output<string>;
    /**
     * Symmetric key material for NTP server #2.
     */
    public readonly ntpServer2Key!: pulumi.Output<string | undefined>;
    /**
     * Key id number for NTP server #2 (typically this is 1).
     */
    public readonly ntpServer2KeyId!: pulumi.Output<number | undefined>;
    /**
     * Symmetric key type for NTP server #2.
     */
    public readonly ntpServer2KeyType!: pulumi.Output<string | undefined>;
    /**
     * IP address for NTP server #2.
     */
    public readonly ntpServer2Name!: pulumi.Output<string>;
    /**
     * The time to wait to establish a connection the Rubrik cluster before returning an error (defaults to `4m`).
     */
    public readonly timeout!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.CdmBootstrapTimeouts | undefined>;
    public readonly waitForCompletion!: pulumi.Output<boolean | undefined>;

    /**
     * Create a CdmBootstrap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CdmBootstrapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CdmBootstrapArgs | CdmBootstrapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CdmBootstrapState | undefined;
            resourceInputs["adminEmail"] = state ? state.adminEmail : undefined;
            resourceInputs["adminPassword"] = state ? state.adminPassword : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterNodes"] = state ? state.clusterNodes : undefined;
            resourceInputs["dnsNameServers"] = state ? state.dnsNameServers : undefined;
            resourceInputs["dnsSearchDomains"] = state ? state.dnsSearchDomains : undefined;
            resourceInputs["enableEncryption"] = state ? state.enableEncryption : undefined;
            resourceInputs["managementGateway"] = state ? state.managementGateway : undefined;
            resourceInputs["managementSubnetMask"] = state ? state.managementSubnetMask : undefined;
            resourceInputs["ntpServer1Key"] = state ? state.ntpServer1Key : undefined;
            resourceInputs["ntpServer1KeyId"] = state ? state.ntpServer1KeyId : undefined;
            resourceInputs["ntpServer1KeyType"] = state ? state.ntpServer1KeyType : undefined;
            resourceInputs["ntpServer1Name"] = state ? state.ntpServer1Name : undefined;
            resourceInputs["ntpServer2Key"] = state ? state.ntpServer2Key : undefined;
            resourceInputs["ntpServer2KeyId"] = state ? state.ntpServer2KeyId : undefined;
            resourceInputs["ntpServer2KeyType"] = state ? state.ntpServer2KeyType : undefined;
            resourceInputs["ntpServer2Name"] = state ? state.ntpServer2Name : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitForCompletion"] = state ? state.waitForCompletion : undefined;
        } else {
            const args = argsOrState as CdmBootstrapArgs | undefined;
            if ((!args || args.adminEmail === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminEmail'");
            }
            if ((!args || args.adminPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminPassword'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.clusterNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterNodes'");
            }
            if ((!args || args.dnsNameServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsNameServers'");
            }
            if ((!args || args.dnsSearchDomains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsSearchDomains'");
            }
            if ((!args || args.managementGateway === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementGateway'");
            }
            if ((!args || args.managementSubnetMask === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementSubnetMask'");
            }
            if ((!args || args.ntpServer1Name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ntpServer1Name'");
            }
            if ((!args || args.ntpServer2Name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ntpServer2Name'");
            }
            resourceInputs["adminEmail"] = args ? args.adminEmail : undefined;
            resourceInputs["adminPassword"] = args?.adminPassword ? pulumi.secret(args.adminPassword) : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterNodes"] = args ? args.clusterNodes : undefined;
            resourceInputs["dnsNameServers"] = args ? args.dnsNameServers : undefined;
            resourceInputs["dnsSearchDomains"] = args ? args.dnsSearchDomains : undefined;
            resourceInputs["enableEncryption"] = args ? args.enableEncryption : undefined;
            resourceInputs["managementGateway"] = args ? args.managementGateway : undefined;
            resourceInputs["managementSubnetMask"] = args ? args.managementSubnetMask : undefined;
            resourceInputs["ntpServer1Key"] = args ? args.ntpServer1Key : undefined;
            resourceInputs["ntpServer1KeyId"] = args ? args.ntpServer1KeyId : undefined;
            resourceInputs["ntpServer1KeyType"] = args ? args.ntpServer1KeyType : undefined;
            resourceInputs["ntpServer1Name"] = args ? args.ntpServer1Name : undefined;
            resourceInputs["ntpServer2Key"] = args ? args.ntpServer2Key : undefined;
            resourceInputs["ntpServer2KeyId"] = args ? args.ntpServer2KeyId : undefined;
            resourceInputs["ntpServer2KeyType"] = args ? args.ntpServer2KeyType : undefined;
            resourceInputs["ntpServer2Name"] = args ? args.ntpServer2Name : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitForCompletion"] = args ? args.waitForCompletion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CdmBootstrap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CdmBootstrap resources.
 */
export interface CdmBootstrapState {
    /**
     * The Rubrik cluster sends messages for the admin account to this email address.
     */
    adminEmail?: pulumi.Input<string>;
    /**
     * Password for the admin account.
     */
    adminPassword?: pulumi.Input<string>;
    /**
     * Unique name to assign to the Rubrik cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The node name and IP formatted as a map.
     */
    clusterNodes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * IPv4 addresses of DNS servers.
     */
    dnsNameServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The search domain that the DNS Service will use to resolve hostnames that are not fully qualified.
     */
    dnsSearchDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable software data encryption at rest.
     */
    enableEncryption?: pulumi.Input<boolean>;
    /**
     * IP address assigned to the management network gateway
     */
    managementGateway?: pulumi.Input<string>;
    /**
     * Subnet mask assigned to the management network.
     */
    managementSubnetMask?: pulumi.Input<string>;
    /**
     * Symmetric key material for NTP server #1.
     */
    ntpServer1Key?: pulumi.Input<string>;
    /**
     * Key id number for NTP server #1 (typically this is 0).
     */
    ntpServer1KeyId?: pulumi.Input<number>;
    /**
     * Symmetric key type for NTP server #1.
     */
    ntpServer1KeyType?: pulumi.Input<string>;
    /**
     * IP address for NTP server #1.
     */
    ntpServer1Name?: pulumi.Input<string>;
    /**
     * Symmetric key material for NTP server #2.
     */
    ntpServer2Key?: pulumi.Input<string>;
    /**
     * Key id number for NTP server #2 (typically this is 1).
     */
    ntpServer2KeyId?: pulumi.Input<number>;
    /**
     * Symmetric key type for NTP server #2.
     */
    ntpServer2KeyType?: pulumi.Input<string>;
    /**
     * IP address for NTP server #2.
     */
    ntpServer2Name?: pulumi.Input<string>;
    /**
     * The time to wait to establish a connection the Rubrik cluster before returning an error (defaults to `4m`).
     */
    timeout?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CdmBootstrapTimeouts>;
    waitForCompletion?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a CdmBootstrap resource.
 */
export interface CdmBootstrapArgs {
    /**
     * The Rubrik cluster sends messages for the admin account to this email address.
     */
    adminEmail: pulumi.Input<string>;
    /**
     * Password for the admin account.
     */
    adminPassword: pulumi.Input<string>;
    /**
     * Unique name to assign to the Rubrik cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The node name and IP formatted as a map.
     */
    clusterNodes: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * IPv4 addresses of DNS servers.
     */
    dnsNameServers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The search domain that the DNS Service will use to resolve hostnames that are not fully qualified.
     */
    dnsSearchDomains: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable software data encryption at rest.
     */
    enableEncryption?: pulumi.Input<boolean>;
    /**
     * IP address assigned to the management network gateway
     */
    managementGateway: pulumi.Input<string>;
    /**
     * Subnet mask assigned to the management network.
     */
    managementSubnetMask: pulumi.Input<string>;
    /**
     * Symmetric key material for NTP server #1.
     */
    ntpServer1Key?: pulumi.Input<string>;
    /**
     * Key id number for NTP server #1 (typically this is 0).
     */
    ntpServer1KeyId?: pulumi.Input<number>;
    /**
     * Symmetric key type for NTP server #1.
     */
    ntpServer1KeyType?: pulumi.Input<string>;
    /**
     * IP address for NTP server #1.
     */
    ntpServer1Name: pulumi.Input<string>;
    /**
     * Symmetric key material for NTP server #2.
     */
    ntpServer2Key?: pulumi.Input<string>;
    /**
     * Key id number for NTP server #2 (typically this is 1).
     */
    ntpServer2KeyId?: pulumi.Input<number>;
    /**
     * Symmetric key type for NTP server #2.
     */
    ntpServer2KeyType?: pulumi.Input<string>;
    /**
     * IP address for NTP server #2.
     */
    ntpServer2Name: pulumi.Input<string>;
    /**
     * The time to wait to establish a connection the Rubrik cluster before returning an error (defaults to `4m`).
     */
    timeout?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.CdmBootstrapTimeouts>;
    waitForCompletion?: pulumi.Input<boolean>;
}
