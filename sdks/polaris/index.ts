// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsAccountArgs, AwsAccountState } from "./awsAccount";
export type AwsAccount = import("./awsAccount").AwsAccount;
export const AwsAccount: typeof import("./awsAccount").AwsAccount = null as any;
utilities.lazyLoad(exports, ["AwsAccount"], () => require("./awsAccount"));

export { AwsArchivalLocationArgs, AwsArchivalLocationState } from "./awsArchivalLocation";
export type AwsArchivalLocation = import("./awsArchivalLocation").AwsArchivalLocation;
export const AwsArchivalLocation: typeof import("./awsArchivalLocation").AwsArchivalLocation = null as any;
utilities.lazyLoad(exports, ["AwsArchivalLocation"], () => require("./awsArchivalLocation"));

export { AwsCnpAccountArgs, AwsCnpAccountState } from "./awsCnpAccount";
export type AwsCnpAccount = import("./awsCnpAccount").AwsCnpAccount;
export const AwsCnpAccount: typeof import("./awsCnpAccount").AwsCnpAccount = null as any;
utilities.lazyLoad(exports, ["AwsCnpAccount"], () => require("./awsCnpAccount"));

export { AwsCnpAccountAttachmentsArgs, AwsCnpAccountAttachmentsState } from "./awsCnpAccountAttachments";
export type AwsCnpAccountAttachments = import("./awsCnpAccountAttachments").AwsCnpAccountAttachments;
export const AwsCnpAccountAttachments: typeof import("./awsCnpAccountAttachments").AwsCnpAccountAttachments = null as any;
utilities.lazyLoad(exports, ["AwsCnpAccountAttachments"], () => require("./awsCnpAccountAttachments"));

export { AwsCnpAccountTrustPolicyArgs, AwsCnpAccountTrustPolicyState } from "./awsCnpAccountTrustPolicy";
export type AwsCnpAccountTrustPolicy = import("./awsCnpAccountTrustPolicy").AwsCnpAccountTrustPolicy;
export const AwsCnpAccountTrustPolicy: typeof import("./awsCnpAccountTrustPolicy").AwsCnpAccountTrustPolicy = null as any;
utilities.lazyLoad(exports, ["AwsCnpAccountTrustPolicy"], () => require("./awsCnpAccountTrustPolicy"));

export { AwsExocomputeArgs, AwsExocomputeState } from "./awsExocompute";
export type AwsExocompute = import("./awsExocompute").AwsExocompute;
export const AwsExocompute: typeof import("./awsExocompute").AwsExocompute = null as any;
utilities.lazyLoad(exports, ["AwsExocompute"], () => require("./awsExocompute"));

export { AwsExocomputeClusterAttachmentArgs, AwsExocomputeClusterAttachmentState } from "./awsExocomputeClusterAttachment";
export type AwsExocomputeClusterAttachment = import("./awsExocomputeClusterAttachment").AwsExocomputeClusterAttachment;
export const AwsExocomputeClusterAttachment: typeof import("./awsExocomputeClusterAttachment").AwsExocomputeClusterAttachment = null as any;
utilities.lazyLoad(exports, ["AwsExocomputeClusterAttachment"], () => require("./awsExocomputeClusterAttachment"));

export { AwsPrivateContainerRegistryArgs, AwsPrivateContainerRegistryState } from "./awsPrivateContainerRegistry";
export type AwsPrivateContainerRegistry = import("./awsPrivateContainerRegistry").AwsPrivateContainerRegistry;
export const AwsPrivateContainerRegistry: typeof import("./awsPrivateContainerRegistry").AwsPrivateContainerRegistry = null as any;
utilities.lazyLoad(exports, ["AwsPrivateContainerRegistry"], () => require("./awsPrivateContainerRegistry"));

export { AzureArchivalLocationArgs, AzureArchivalLocationState } from "./azureArchivalLocation";
export type AzureArchivalLocation = import("./azureArchivalLocation").AzureArchivalLocation;
export const AzureArchivalLocation: typeof import("./azureArchivalLocation").AzureArchivalLocation = null as any;
utilities.lazyLoad(exports, ["AzureArchivalLocation"], () => require("./azureArchivalLocation"));

export { AzureExocomputeArgs, AzureExocomputeState } from "./azureExocompute";
export type AzureExocompute = import("./azureExocompute").AzureExocompute;
export const AzureExocompute: typeof import("./azureExocompute").AzureExocompute = null as any;
utilities.lazyLoad(exports, ["AzureExocompute"], () => require("./azureExocompute"));

export { AzureServicePrincipalArgs, AzureServicePrincipalState } from "./azureServicePrincipal";
export type AzureServicePrincipal = import("./azureServicePrincipal").AzureServicePrincipal;
export const AzureServicePrincipal: typeof import("./azureServicePrincipal").AzureServicePrincipal = null as any;
utilities.lazyLoad(exports, ["AzureServicePrincipal"], () => require("./azureServicePrincipal"));

export { AzureSubscriptionArgs, AzureSubscriptionState } from "./azureSubscription";
export type AzureSubscription = import("./azureSubscription").AzureSubscription;
export const AzureSubscription: typeof import("./azureSubscription").AzureSubscription = null as any;
utilities.lazyLoad(exports, ["AzureSubscription"], () => require("./azureSubscription"));

export { CdmBootstrapArgs, CdmBootstrapState } from "./cdmBootstrap";
export type CdmBootstrap = import("./cdmBootstrap").CdmBootstrap;
export const CdmBootstrap: typeof import("./cdmBootstrap").CdmBootstrap = null as any;
utilities.lazyLoad(exports, ["CdmBootstrap"], () => require("./cdmBootstrap"));

export { CdmBootstrapCcesAwsArgs, CdmBootstrapCcesAwsState } from "./cdmBootstrapCcesAws";
export type CdmBootstrapCcesAws = import("./cdmBootstrapCcesAws").CdmBootstrapCcesAws;
export const CdmBootstrapCcesAws: typeof import("./cdmBootstrapCcesAws").CdmBootstrapCcesAws = null as any;
utilities.lazyLoad(exports, ["CdmBootstrapCcesAws"], () => require("./cdmBootstrapCcesAws"));

export { CdmBootstrapCcesAzureArgs, CdmBootstrapCcesAzureState } from "./cdmBootstrapCcesAzure";
export type CdmBootstrapCcesAzure = import("./cdmBootstrapCcesAzure").CdmBootstrapCcesAzure;
export const CdmBootstrapCcesAzure: typeof import("./cdmBootstrapCcesAzure").CdmBootstrapCcesAzure = null as any;
utilities.lazyLoad(exports, ["CdmBootstrapCcesAzure"], () => require("./cdmBootstrapCcesAzure"));

export { CustomRoleArgs, CustomRoleState } from "./customRole";
export type CustomRole = import("./customRole").CustomRole;
export const CustomRole: typeof import("./customRole").CustomRole = null as any;
utilities.lazyLoad(exports, ["CustomRole"], () => require("./customRole"));

export { GcpProjectArgs, GcpProjectState } from "./gcpProject";
export type GcpProject = import("./gcpProject").GcpProject;
export const GcpProject: typeof import("./gcpProject").GcpProject = null as any;
utilities.lazyLoad(exports, ["GcpProject"], () => require("./gcpProject"));

export { GcpServiceAccountArgs, GcpServiceAccountState } from "./gcpServiceAccount";
export type GcpServiceAccount = import("./gcpServiceAccount").GcpServiceAccount;
export const GcpServiceAccount: typeof import("./gcpServiceAccount").GcpServiceAccount = null as any;
utilities.lazyLoad(exports, ["GcpServiceAccount"], () => require("./gcpServiceAccount"));

export { GetAccountResult } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAwsAccountArgs, GetAwsAccountResult, GetAwsAccountOutputArgs } from "./getAwsAccount";
export const getAwsAccount: typeof import("./getAwsAccount").getAwsAccount = null as any;
export const getAwsAccountOutput: typeof import("./getAwsAccount").getAwsAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAwsAccount","getAwsAccountOutput"], () => require("./getAwsAccount"));

export { GetAwsArchivalLocationArgs, GetAwsArchivalLocationResult, GetAwsArchivalLocationOutputArgs } from "./getAwsArchivalLocation";
export const getAwsArchivalLocation: typeof import("./getAwsArchivalLocation").getAwsArchivalLocation = null as any;
export const getAwsArchivalLocationOutput: typeof import("./getAwsArchivalLocation").getAwsArchivalLocationOutput = null as any;
utilities.lazyLoad(exports, ["getAwsArchivalLocation","getAwsArchivalLocationOutput"], () => require("./getAwsArchivalLocation"));

export { GetAwsCnpArtifactsArgs, GetAwsCnpArtifactsResult, GetAwsCnpArtifactsOutputArgs } from "./getAwsCnpArtifacts";
export const getAwsCnpArtifacts: typeof import("./getAwsCnpArtifacts").getAwsCnpArtifacts = null as any;
export const getAwsCnpArtifactsOutput: typeof import("./getAwsCnpArtifacts").getAwsCnpArtifactsOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCnpArtifacts","getAwsCnpArtifactsOutput"], () => require("./getAwsCnpArtifacts"));

export { GetAwsCnpPermissionsArgs, GetAwsCnpPermissionsResult, GetAwsCnpPermissionsOutputArgs } from "./getAwsCnpPermissions";
export const getAwsCnpPermissions: typeof import("./getAwsCnpPermissions").getAwsCnpPermissions = null as any;
export const getAwsCnpPermissionsOutput: typeof import("./getAwsCnpPermissions").getAwsCnpPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getAwsCnpPermissions","getAwsCnpPermissionsOutput"], () => require("./getAwsCnpPermissions"));

export { GetAzureArchivalLocationArgs, GetAzureArchivalLocationResult, GetAzureArchivalLocationOutputArgs } from "./getAzureArchivalLocation";
export const getAzureArchivalLocation: typeof import("./getAzureArchivalLocation").getAzureArchivalLocation = null as any;
export const getAzureArchivalLocationOutput: typeof import("./getAzureArchivalLocation").getAzureArchivalLocationOutput = null as any;
utilities.lazyLoad(exports, ["getAzureArchivalLocation","getAzureArchivalLocationOutput"], () => require("./getAzureArchivalLocation"));

export { GetAzurePermissionsArgs, GetAzurePermissionsResult, GetAzurePermissionsOutputArgs } from "./getAzurePermissions";
export const getAzurePermissions: typeof import("./getAzurePermissions").getAzurePermissions = null as any;
export const getAzurePermissionsOutput: typeof import("./getAzurePermissions").getAzurePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getAzurePermissions","getAzurePermissionsOutput"], () => require("./getAzurePermissions"));

export { GetAzureSubscriptionArgs, GetAzureSubscriptionResult, GetAzureSubscriptionOutputArgs } from "./getAzureSubscription";
export const getAzureSubscription: typeof import("./getAzureSubscription").getAzureSubscription = null as any;
export const getAzureSubscriptionOutput: typeof import("./getAzureSubscription").getAzureSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getAzureSubscription","getAzureSubscriptionOutput"], () => require("./getAzureSubscription"));

export { GetDeploymentResult } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetFeaturesResult } from "./getFeatures";
export const getFeatures: typeof import("./getFeatures").getFeatures = null as any;
export const getFeaturesOutput: typeof import("./getFeatures").getFeaturesOutput = null as any;
utilities.lazyLoad(exports, ["getFeatures","getFeaturesOutput"], () => require("./getFeatures"));

export { GetGcpPermissionsArgs, GetGcpPermissionsResult, GetGcpPermissionsOutputArgs } from "./getGcpPermissions";
export const getGcpPermissions: typeof import("./getGcpPermissions").getGcpPermissions = null as any;
export const getGcpPermissionsOutput: typeof import("./getGcpPermissions").getGcpPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getGcpPermissions","getGcpPermissionsOutput"], () => require("./getGcpPermissions"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetRoleTemplateArgs, GetRoleTemplateResult, GetRoleTemplateOutputArgs } from "./getRoleTemplate";
export const getRoleTemplate: typeof import("./getRoleTemplate").getRoleTemplate = null as any;
export const getRoleTemplateOutput: typeof import("./getRoleTemplate").getRoleTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getRoleTemplate","getRoleTemplateOutput"], () => require("./getRoleTemplate"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleAssignmentArgs, RoleAssignmentState } from "./roleAssignment";
export type RoleAssignment = import("./roleAssignment").RoleAssignment;
export const RoleAssignment: typeof import("./roleAssignment").RoleAssignment = null as any;
utilities.lazyLoad(exports, ["RoleAssignment"], () => require("./roleAssignment"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "polaris:index/awsAccount:AwsAccount":
                return new AwsAccount(name, <any>undefined, { urn })
            case "polaris:index/awsArchivalLocation:AwsArchivalLocation":
                return new AwsArchivalLocation(name, <any>undefined, { urn })
            case "polaris:index/awsCnpAccount:AwsCnpAccount":
                return new AwsCnpAccount(name, <any>undefined, { urn })
            case "polaris:index/awsCnpAccountAttachments:AwsCnpAccountAttachments":
                return new AwsCnpAccountAttachments(name, <any>undefined, { urn })
            case "polaris:index/awsCnpAccountTrustPolicy:AwsCnpAccountTrustPolicy":
                return new AwsCnpAccountTrustPolicy(name, <any>undefined, { urn })
            case "polaris:index/awsExocompute:AwsExocompute":
                return new AwsExocompute(name, <any>undefined, { urn })
            case "polaris:index/awsExocomputeClusterAttachment:AwsExocomputeClusterAttachment":
                return new AwsExocomputeClusterAttachment(name, <any>undefined, { urn })
            case "polaris:index/awsPrivateContainerRegistry:AwsPrivateContainerRegistry":
                return new AwsPrivateContainerRegistry(name, <any>undefined, { urn })
            case "polaris:index/azureArchivalLocation:AzureArchivalLocation":
                return new AzureArchivalLocation(name, <any>undefined, { urn })
            case "polaris:index/azureExocompute:AzureExocompute":
                return new AzureExocompute(name, <any>undefined, { urn })
            case "polaris:index/azureServicePrincipal:AzureServicePrincipal":
                return new AzureServicePrincipal(name, <any>undefined, { urn })
            case "polaris:index/azureSubscription:AzureSubscription":
                return new AzureSubscription(name, <any>undefined, { urn })
            case "polaris:index/cdmBootstrap:CdmBootstrap":
                return new CdmBootstrap(name, <any>undefined, { urn })
            case "polaris:index/cdmBootstrapCcesAws:CdmBootstrapCcesAws":
                return new CdmBootstrapCcesAws(name, <any>undefined, { urn })
            case "polaris:index/cdmBootstrapCcesAzure:CdmBootstrapCcesAzure":
                return new CdmBootstrapCcesAzure(name, <any>undefined, { urn })
            case "polaris:index/customRole:CustomRole":
                return new CustomRole(name, <any>undefined, { urn })
            case "polaris:index/gcpProject:GcpProject":
                return new GcpProject(name, <any>undefined, { urn })
            case "polaris:index/gcpServiceAccount:GcpServiceAccount":
                return new GcpServiceAccount(name, <any>undefined, { urn })
            case "polaris:index/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "polaris:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("polaris", "index/awsAccount", _module)
pulumi.runtime.registerResourceModule("polaris", "index/awsArchivalLocation", _module)
pulumi.runtime.registerResourceModule("polaris", "index/awsCnpAccount", _module)
pulumi.runtime.registerResourceModule("polaris", "index/awsCnpAccountAttachments", _module)
pulumi.runtime.registerResourceModule("polaris", "index/awsCnpAccountTrustPolicy", _module)
pulumi.runtime.registerResourceModule("polaris", "index/awsExocompute", _module)
pulumi.runtime.registerResourceModule("polaris", "index/awsExocomputeClusterAttachment", _module)
pulumi.runtime.registerResourceModule("polaris", "index/awsPrivateContainerRegistry", _module)
pulumi.runtime.registerResourceModule("polaris", "index/azureArchivalLocation", _module)
pulumi.runtime.registerResourceModule("polaris", "index/azureExocompute", _module)
pulumi.runtime.registerResourceModule("polaris", "index/azureServicePrincipal", _module)
pulumi.runtime.registerResourceModule("polaris", "index/azureSubscription", _module)
pulumi.runtime.registerResourceModule("polaris", "index/cdmBootstrap", _module)
pulumi.runtime.registerResourceModule("polaris", "index/cdmBootstrapCcesAws", _module)
pulumi.runtime.registerResourceModule("polaris", "index/cdmBootstrapCcesAzure", _module)
pulumi.runtime.registerResourceModule("polaris", "index/customRole", _module)
pulumi.runtime.registerResourceModule("polaris", "index/gcpProject", _module)
pulumi.runtime.registerResourceModule("polaris", "index/gcpServiceAccount", _module)
pulumi.runtime.registerResourceModule("polaris", "index/roleAssignment", _module)
pulumi.runtime.registerResourceModule("polaris", "index/user", _module)
pulumi.runtime.registerResourcePackage("polaris", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:polaris") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
