// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureArchivalLocation extends pulumi.CustomResource {
    /**
     * Get an existing AzureArchivalLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureArchivalLocationState, opts?: pulumi.CustomResourceOptions): AzureArchivalLocation {
        return new AzureArchivalLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'polaris:index/azureArchivalLocation:AzureArchivalLocation';

    /**
     * Returns true if the given object is an instance of AzureArchivalLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureArchivalLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureArchivalLocation.__pulumiType;
    }

    /**
     * RSC cloud account ID. Changing this forces a new resource to be created.
     */
    public readonly cloudAccountId!: pulumi.Output<string>;
    /**
     * Connection status of the cloud native archival location.
     */
    public /*out*/ readonly connectionStatus!: pulumi.Output<string>;
    /**
     * Azure storage container name.
     */
    public /*out*/ readonly containerName!: pulumi.Output<string>;
    /**
     * Customer managed storage encryption. Specify the regions and their respective encryption details. For other regions,
     * data will be encrypted using platform managed keys.
     */
    public readonly customerManagedKeys!: pulumi.Output<outputs.AzureArchivalLocationCustomerManagedKey[] | undefined>;
    /**
     * RSC location template. If a storage account region was specified, it will be `SPECIFIC_REGION`, otherwise
     * `SOURCE_REGION`.
     */
    public /*out*/ readonly locationTemplate!: pulumi.Output<string>;
    /**
     * Cloud native archival location name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Azure storage redundancy. Possible values are `GRS`, `GZRS`, `LRS`, `RA_GRS`, `RA_GZRS` and `ZRS`. Default value is
     * `LRS`. Changing this forces a new resource to be created.
     */
    public readonly redundancy!: pulumi.Output<string | undefined>;
    /**
     * Azure storage account name prefix. The storage account name prefix cannot be longer than 14 characters and can only
     * consist of numbers and lower case letters. Changing this forces a new resource to be created.
     */
    public readonly storageAccountNamePrefix!: pulumi.Output<string>;
    /**
     * Azure region to store the snapshots in. If not specified, the snapshots will be stored in the same region as the
     * workload. Changing this forces a new resource to be created.
     */
    public readonly storageAccountRegion!: pulumi.Output<string | undefined>;
    /**
     * Azure storage account tags. Each tag will be added to the storage account created by RSC.
     */
    public readonly storageAccountTags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Azure storage tier. Possible values are `COOL` and `HOT`. Default value is `COOL`.
     */
    public readonly storageTier!: pulumi.Output<string | undefined>;

    /**
     * Create a AzureArchivalLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureArchivalLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureArchivalLocationArgs | AzureArchivalLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureArchivalLocationState | undefined;
            resourceInputs["cloudAccountId"] = state ? state.cloudAccountId : undefined;
            resourceInputs["connectionStatus"] = state ? state.connectionStatus : undefined;
            resourceInputs["containerName"] = state ? state.containerName : undefined;
            resourceInputs["customerManagedKeys"] = state ? state.customerManagedKeys : undefined;
            resourceInputs["locationTemplate"] = state ? state.locationTemplate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redundancy"] = state ? state.redundancy : undefined;
            resourceInputs["storageAccountNamePrefix"] = state ? state.storageAccountNamePrefix : undefined;
            resourceInputs["storageAccountRegion"] = state ? state.storageAccountRegion : undefined;
            resourceInputs["storageAccountTags"] = state ? state.storageAccountTags : undefined;
            resourceInputs["storageTier"] = state ? state.storageTier : undefined;
        } else {
            const args = argsOrState as AzureArchivalLocationArgs | undefined;
            if ((!args || args.cloudAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudAccountId'");
            }
            if ((!args || args.storageAccountNamePrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountNamePrefix'");
            }
            resourceInputs["cloudAccountId"] = args ? args.cloudAccountId : undefined;
            resourceInputs["customerManagedKeys"] = args ? args.customerManagedKeys : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["redundancy"] = args ? args.redundancy : undefined;
            resourceInputs["storageAccountNamePrefix"] = args ? args.storageAccountNamePrefix : undefined;
            resourceInputs["storageAccountRegion"] = args ? args.storageAccountRegion : undefined;
            resourceInputs["storageAccountTags"] = args ? args.storageAccountTags : undefined;
            resourceInputs["storageTier"] = args ? args.storageTier : undefined;
            resourceInputs["connectionStatus"] = undefined /*out*/;
            resourceInputs["containerName"] = undefined /*out*/;
            resourceInputs["locationTemplate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureArchivalLocation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureArchivalLocation resources.
 */
export interface AzureArchivalLocationState {
    /**
     * RSC cloud account ID. Changing this forces a new resource to be created.
     */
    cloudAccountId?: pulumi.Input<string>;
    /**
     * Connection status of the cloud native archival location.
     */
    connectionStatus?: pulumi.Input<string>;
    /**
     * Azure storage container name.
     */
    containerName?: pulumi.Input<string>;
    /**
     * Customer managed storage encryption. Specify the regions and their respective encryption details. For other regions,
     * data will be encrypted using platform managed keys.
     */
    customerManagedKeys?: pulumi.Input<pulumi.Input<inputs.AzureArchivalLocationCustomerManagedKey>[]>;
    /**
     * RSC location template. If a storage account region was specified, it will be `SPECIFIC_REGION`, otherwise
     * `SOURCE_REGION`.
     */
    locationTemplate?: pulumi.Input<string>;
    /**
     * Cloud native archival location name.
     */
    name?: pulumi.Input<string>;
    /**
     * Azure storage redundancy. Possible values are `GRS`, `GZRS`, `LRS`, `RA_GRS`, `RA_GZRS` and `ZRS`. Default value is
     * `LRS`. Changing this forces a new resource to be created.
     */
    redundancy?: pulumi.Input<string>;
    /**
     * Azure storage account name prefix. The storage account name prefix cannot be longer than 14 characters and can only
     * consist of numbers and lower case letters. Changing this forces a new resource to be created.
     */
    storageAccountNamePrefix?: pulumi.Input<string>;
    /**
     * Azure region to store the snapshots in. If not specified, the snapshots will be stored in the same region as the
     * workload. Changing this forces a new resource to be created.
     */
    storageAccountRegion?: pulumi.Input<string>;
    /**
     * Azure storage account tags. Each tag will be added to the storage account created by RSC.
     */
    storageAccountTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Azure storage tier. Possible values are `COOL` and `HOT`. Default value is `COOL`.
     */
    storageTier?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AzureArchivalLocation resource.
 */
export interface AzureArchivalLocationArgs {
    /**
     * RSC cloud account ID. Changing this forces a new resource to be created.
     */
    cloudAccountId: pulumi.Input<string>;
    /**
     * Customer managed storage encryption. Specify the regions and their respective encryption details. For other regions,
     * data will be encrypted using platform managed keys.
     */
    customerManagedKeys?: pulumi.Input<pulumi.Input<inputs.AzureArchivalLocationCustomerManagedKey>[]>;
    /**
     * Cloud native archival location name.
     */
    name?: pulumi.Input<string>;
    /**
     * Azure storage redundancy. Possible values are `GRS`, `GZRS`, `LRS`, `RA_GRS`, `RA_GZRS` and `ZRS`. Default value is
     * `LRS`. Changing this forces a new resource to be created.
     */
    redundancy?: pulumi.Input<string>;
    /**
     * Azure storage account name prefix. The storage account name prefix cannot be longer than 14 characters and can only
     * consist of numbers and lower case letters. Changing this forces a new resource to be created.
     */
    storageAccountNamePrefix: pulumi.Input<string>;
    /**
     * Azure region to store the snapshots in. If not specified, the snapshots will be stored in the same region as the
     * workload. Changing this forces a new resource to be created.
     */
    storageAccountRegion?: pulumi.Input<string>;
    /**
     * Azure storage account tags. Each tag will be added to the storage account created by RSC.
     */
    storageAccountTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Azure storage tier. Possible values are `COOL` and `HOT`. Default value is `COOL`.
     */
    storageTier?: pulumi.Input<string>;
}
