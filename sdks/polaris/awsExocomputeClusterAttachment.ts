// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AwsExocomputeClusterAttachment extends pulumi.CustomResource {
    /**
     * Get an existing AwsExocomputeClusterAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsExocomputeClusterAttachmentState, opts?: pulumi.CustomResourceOptions): AwsExocomputeClusterAttachment {
        return new AwsExocomputeClusterAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'polaris:index/awsExocomputeClusterAttachment:AwsExocomputeClusterAttachment';

    /**
     * Returns true if the given object is an instance of AwsExocomputeClusterAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsExocomputeClusterAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsExocomputeClusterAttachment.__pulumiType;
    }

    /**
     * AWS EKS cluster name. Changing this forces a new resource to be created.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * `kubectl` command which can be executed inside the EKS cluster to create a connection between the cluster and RSC. See
     * setup_yaml for an alternative connection method.
     */
    public /*out*/ readonly connectionCommand!: pulumi.Output<string>;
    /**
     * RSC exocompute configuration ID (UUID). Changing this forces a new resource to be created.
     */
    public readonly exocomputeId!: pulumi.Output<string>;
    /**
     * K8s spec which can be passed to `kubectl apply` inside the EKS cluster to create a connection between the cluster and
     * RSC. See connection_command for an alternative connection method.
     */
    public /*out*/ readonly setupYaml!: pulumi.Output<string>;
    /**
     * To force a refresh of the token, part of the connection command, increase the value of this field. The token is valid
     * for 24 hours.
     */
    public readonly tokenRefresh!: pulumi.Output<number | undefined>;

    /**
     * Create a AwsExocomputeClusterAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsExocomputeClusterAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsExocomputeClusterAttachmentArgs | AwsExocomputeClusterAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsExocomputeClusterAttachmentState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["connectionCommand"] = state ? state.connectionCommand : undefined;
            resourceInputs["exocomputeId"] = state ? state.exocomputeId : undefined;
            resourceInputs["setupYaml"] = state ? state.setupYaml : undefined;
            resourceInputs["tokenRefresh"] = state ? state.tokenRefresh : undefined;
        } else {
            const args = argsOrState as AwsExocomputeClusterAttachmentArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.exocomputeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exocomputeId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["exocomputeId"] = args ? args.exocomputeId : undefined;
            resourceInputs["tokenRefresh"] = args ? args.tokenRefresh : undefined;
            resourceInputs["connectionCommand"] = undefined /*out*/;
            resourceInputs["setupYaml"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsExocomputeClusterAttachment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsExocomputeClusterAttachment resources.
 */
export interface AwsExocomputeClusterAttachmentState {
    /**
     * AWS EKS cluster name. Changing this forces a new resource to be created.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * `kubectl` command which can be executed inside the EKS cluster to create a connection between the cluster and RSC. See
     * setup_yaml for an alternative connection method.
     */
    connectionCommand?: pulumi.Input<string>;
    /**
     * RSC exocompute configuration ID (UUID). Changing this forces a new resource to be created.
     */
    exocomputeId?: pulumi.Input<string>;
    /**
     * K8s spec which can be passed to `kubectl apply` inside the EKS cluster to create a connection between the cluster and
     * RSC. See connection_command for an alternative connection method.
     */
    setupYaml?: pulumi.Input<string>;
    /**
     * To force a refresh of the token, part of the connection command, increase the value of this field. The token is valid
     * for 24 hours.
     */
    tokenRefresh?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AwsExocomputeClusterAttachment resource.
 */
export interface AwsExocomputeClusterAttachmentArgs {
    /**
     * AWS EKS cluster name. Changing this forces a new resource to be created.
     */
    clusterName: pulumi.Input<string>;
    /**
     * RSC exocompute configuration ID (UUID). Changing this forces a new resource to be created.
     */
    exocomputeId: pulumi.Input<string>;
    /**
     * To force a refresh of the token, part of the connection command, increase the value of this field. The token is valid
     * for 24 hours.
     */
    tokenRefresh?: pulumi.Input<number>;
}
