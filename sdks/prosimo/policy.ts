// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * app access type, e.g: access, transit
     */
    public readonly appAccessType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdtime!: pulumi.Output<string>;
    public readonly details!: pulumi.Output<outputs.PolicyDetail[]>;
    /**
     * only applicable for access app access type, set it to true to enable device posture
     */
    public readonly devicePostureConfigured!: pulumi.Output<boolean | undefined>;
    /**
     * name of policy
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Policy Namespace, only applicable for transit app_access_type
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly teamid!: pulumi.Output<string | undefined>;
    /**
     * type of policy, e.g: default, managed
     */
    public readonly types!: pulumi.Output<string | undefined>;
    public /*out*/ readonly updatedtime!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["appAccessType"] = state ? state.appAccessType : undefined;
            resourceInputs["createdtime"] = state ? state.createdtime : undefined;
            resourceInputs["details"] = state ? state.details : undefined;
            resourceInputs["devicePostureConfigured"] = state ? state.devicePostureConfigured : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["teamid"] = state ? state.teamid : undefined;
            resourceInputs["types"] = state ? state.types : undefined;
            resourceInputs["updatedtime"] = state ? state.updatedtime : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.details === undefined) && !opts.urn) {
                throw new Error("Missing required property 'details'");
            }
            resourceInputs["appAccessType"] = args ? args.appAccessType : undefined;
            resourceInputs["details"] = args ? args.details : undefined;
            resourceInputs["devicePostureConfigured"] = args ? args.devicePostureConfigured : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["teamid"] = args ? args.teamid : undefined;
            resourceInputs["types"] = args ? args.types : undefined;
            resourceInputs["createdtime"] = undefined /*out*/;
            resourceInputs["updatedtime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * app access type, e.g: access, transit
     */
    appAccessType?: pulumi.Input<string>;
    createdtime?: pulumi.Input<string>;
    details?: pulumi.Input<pulumi.Input<inputs.PolicyDetail>[]>;
    /**
     * only applicable for access app access type, set it to true to enable device posture
     */
    devicePostureConfigured?: pulumi.Input<boolean>;
    /**
     * name of policy
     */
    name?: pulumi.Input<string>;
    /**
     * Policy Namespace, only applicable for transit app_access_type
     */
    namespace?: pulumi.Input<string>;
    teamid?: pulumi.Input<string>;
    /**
     * type of policy, e.g: default, managed
     */
    types?: pulumi.Input<string>;
    updatedtime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * app access type, e.g: access, transit
     */
    appAccessType?: pulumi.Input<string>;
    details: pulumi.Input<pulumi.Input<inputs.PolicyDetail>[]>;
    /**
     * only applicable for access app access type, set it to true to enable device posture
     */
    devicePostureConfigured?: pulumi.Input<boolean>;
    /**
     * name of policy
     */
    name?: pulumi.Input<string>;
    /**
     * Policy Namespace, only applicable for transit app_access_type
     */
    namespace?: pulumi.Input<string>;
    teamid?: pulumi.Input<string>;
    /**
     * type of policy, e.g: default, managed
     */
    types?: pulumi.Input<string>;
}
