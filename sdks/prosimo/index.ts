// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppOnboardingCitrixvdiArgs, AppOnboardingCitrixvdiState } from "./appOnboardingCitrixvdi";
export type AppOnboardingCitrixvdi = import("./appOnboardingCitrixvdi").AppOnboardingCitrixvdi;
export const AppOnboardingCitrixvdi: typeof import("./appOnboardingCitrixvdi").AppOnboardingCitrixvdi = null as any;
utilities.lazyLoad(exports, ["AppOnboardingCitrixvdi"], () => require("./appOnboardingCitrixvdi"));

export { AppOnboardingCloudsvcArgs, AppOnboardingCloudsvcState } from "./appOnboardingCloudsvc";
export type AppOnboardingCloudsvc = import("./appOnboardingCloudsvc").AppOnboardingCloudsvc;
export const AppOnboardingCloudsvc: typeof import("./appOnboardingCloudsvc").AppOnboardingCloudsvc = null as any;
utilities.lazyLoad(exports, ["AppOnboardingCloudsvc"], () => require("./appOnboardingCloudsvc"));

export { AppOnboardingDnsArgs, AppOnboardingDnsState } from "./appOnboardingDns";
export type AppOnboardingDns = import("./appOnboardingDns").AppOnboardingDns;
export const AppOnboardingDns: typeof import("./appOnboardingDns").AppOnboardingDns = null as any;
utilities.lazyLoad(exports, ["AppOnboardingDns"], () => require("./appOnboardingDns"));

export { AppOnboardingFqdnArgs, AppOnboardingFqdnState } from "./appOnboardingFqdn";
export type AppOnboardingFqdn = import("./appOnboardingFqdn").AppOnboardingFqdn;
export const AppOnboardingFqdn: typeof import("./appOnboardingFqdn").AppOnboardingFqdn = null as any;
utilities.lazyLoad(exports, ["AppOnboardingFqdn"], () => require("./appOnboardingFqdn"));

export { AppOnboardingJumpboxArgs, AppOnboardingJumpboxState } from "./appOnboardingJumpbox";
export type AppOnboardingJumpbox = import("./appOnboardingJumpbox").AppOnboardingJumpbox;
export const AppOnboardingJumpbox: typeof import("./appOnboardingJumpbox").AppOnboardingJumpbox = null as any;
utilities.lazyLoad(exports, ["AppOnboardingJumpbox"], () => require("./appOnboardingJumpbox"));

export { AppOnboardingWebArgs, AppOnboardingWebState } from "./appOnboardingWeb";
export type AppOnboardingWeb = import("./appOnboardingWeb").AppOnboardingWeb;
export const AppOnboardingWeb: typeof import("./appOnboardingWeb").AppOnboardingWeb = null as any;
utilities.lazyLoad(exports, ["AppOnboardingWeb"], () => require("./appOnboardingWeb"));

export { CacheRulesArgs, CacheRulesState } from "./cacheRules";
export type CacheRules = import("./cacheRules").CacheRules;
export const CacheRules: typeof import("./cacheRules").CacheRules = null as any;
utilities.lazyLoad(exports, ["CacheRules"], () => require("./cacheRules"));

export { CertificatesArgs, CertificatesState } from "./certificates";
export type Certificates = import("./certificates").Certificates;
export const Certificates: typeof import("./certificates").Certificates = null as any;
utilities.lazyLoad(exports, ["Certificates"], () => require("./certificates"));

export { CloudCredsArgs, CloudCredsState } from "./cloudCreds";
export type CloudCreds = import("./cloudCreds").CloudCreds;
export const CloudCreds: typeof import("./cloudCreds").CloudCreds = null as any;
utilities.lazyLoad(exports, ["CloudCreds"], () => require("./cloudCreds"));

export { CloudGatewayArgs, CloudGatewayState } from "./cloudGateway";
export type CloudGateway = import("./cloudGateway").CloudGateway;
export const CloudGateway: typeof import("./cloudGateway").CloudGateway = null as any;
utilities.lazyLoad(exports, ["CloudGateway"], () => require("./cloudGateway"));

export { ConnectorPlacementArgs, ConnectorPlacementState } from "./connectorPlacement";
export type ConnectorPlacement = import("./connectorPlacement").ConnectorPlacement;
export const ConnectorPlacement: typeof import("./connectorPlacement").ConnectorPlacement = null as any;
utilities.lazyLoad(exports, ["ConnectorPlacement"], () => require("./connectorPlacement"));

export { DpProfileArgs, DpProfileState } from "./dpProfile";
export type DpProfile = import("./dpProfile").DpProfile;
export const DpProfile: typeof import("./dpProfile").DpProfile = null as any;
utilities.lazyLoad(exports, ["DpProfile"], () => require("./dpProfile"));

export { DpSettingsArgs, DpSettingsState } from "./dpSettings";
export type DpSettings = import("./dpSettings").DpSettings;
export const DpSettings: typeof import("./dpSettings").DpSettings = null as any;
utilities.lazyLoad(exports, ["DpSettings"], () => require("./dpSettings"));

export { DynamicRiskArgs, DynamicRiskState } from "./dynamicRisk";
export type DynamicRisk = import("./dynamicRisk").DynamicRisk;
export const DynamicRisk: typeof import("./dynamicRisk").DynamicRisk = null as any;
utilities.lazyLoad(exports, ["DynamicRisk"], () => require("./dynamicRisk"));

export { EdgeArgs, EdgeState } from "./edge";
export type Edge = import("./edge").Edge;
export const Edge: typeof import("./edge").Edge = null as any;
utilities.lazyLoad(exports, ["Edge"], () => require("./edge"));

export { EdrIntegrationArgs, EdrIntegrationState } from "./edrIntegration";
export type EdrIntegration = import("./edrIntegration").EdrIntegration;
export const EdrIntegration: typeof import("./edrIntegration").EdrIntegration = null as any;
utilities.lazyLoad(exports, ["EdrIntegration"], () => require("./edrIntegration"));

export { EdrProfileArgs, EdrProfileState } from "./edrProfile";
export type EdrProfile = import("./edrProfile").EdrProfile;
export const EdrProfile: typeof import("./edrProfile").EdrProfile = null as any;
utilities.lazyLoad(exports, ["EdrProfile"], () => require("./edrProfile"));

export { FirewallManagerArgs, FirewallManagerState } from "./firewallManager";
export type FirewallManager = import("./firewallManager").FirewallManager;
export const FirewallManager: typeof import("./firewallManager").FirewallManager = null as any;
utilities.lazyLoad(exports, ["FirewallManager"], () => require("./firewallManager"));

export { GeoLocationArgs, GeoLocationState } from "./geoLocation";
export type GeoLocation = import("./geoLocation").GeoLocation;
export const GeoLocation: typeof import("./geoLocation").GeoLocation = null as any;
utilities.lazyLoad(exports, ["GeoLocation"], () => require("./geoLocation"));

export { GetAppOnboardingArgs, GetAppOnboardingResult, GetAppOnboardingOutputArgs } from "./getAppOnboarding";
export const getAppOnboarding: typeof import("./getAppOnboarding").getAppOnboarding = null as any;
export const getAppOnboardingOutput: typeof import("./getAppOnboarding").getAppOnboardingOutput = null as any;
utilities.lazyLoad(exports, ["getAppOnboarding","getAppOnboardingOutput"], () => require("./getAppOnboarding"));

export { GetCertificatesArgs, GetCertificatesResult, GetCertificatesOutputArgs } from "./getCertificates";
export const getCertificates: typeof import("./getCertificates").getCertificates = null as any;
export const getCertificatesOutput: typeof import("./getCertificates").getCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificates","getCertificatesOutput"], () => require("./getCertificates"));

export { GetCloudCredsArgs, GetCloudCredsResult, GetCloudCredsOutputArgs } from "./getCloudCreds";
export const getCloudCreds: typeof import("./getCloudCreds").getCloudCreds = null as any;
export const getCloudCredsOutput: typeof import("./getCloudCreds").getCloudCredsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudCreds","getCloudCredsOutput"], () => require("./getCloudCreds"));

export { GetDiscoveredNetworksArgs, GetDiscoveredNetworksResult, GetDiscoveredNetworksOutputArgs } from "./getDiscoveredNetworks";
export const getDiscoveredNetworks: typeof import("./getDiscoveredNetworks").getDiscoveredNetworks = null as any;
export const getDiscoveredNetworksOutput: typeof import("./getDiscoveredNetworks").getDiscoveredNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getDiscoveredNetworks","getDiscoveredNetworksOutput"], () => require("./getDiscoveredNetworks"));

export { GetEdgeArgs, GetEdgeResult, GetEdgeOutputArgs } from "./getEdge";
export const getEdge: typeof import("./getEdge").getEdge = null as any;
export const getEdgeOutput: typeof import("./getEdge").getEdgeOutput = null as any;
utilities.lazyLoad(exports, ["getEdge","getEdgeOutput"], () => require("./getEdge"));

export { GetIdpArgs, GetIdpResult, GetIdpOutputArgs } from "./getIdp";
export const getIdp: typeof import("./getIdp").getIdp = null as any;
export const getIdpOutput: typeof import("./getIdp").getIdpOutput = null as any;
utilities.lazyLoad(exports, ["getIdp","getIdpOutput"], () => require("./getIdp"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetNetworkOnboardingArgs, GetNetworkOnboardingResult, GetNetworkOnboardingOutputArgs } from "./getNetworkOnboarding";
export const getNetworkOnboarding: typeof import("./getNetworkOnboarding").getNetworkOnboarding = null as any;
export const getNetworkOnboardingOutput: typeof import("./getNetworkOnboarding").getNetworkOnboardingOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkOnboarding","getNetworkOnboardingOutput"], () => require("./getNetworkOnboarding"));

export { GetNetworkPrefixArgs, GetNetworkPrefixResult, GetNetworkPrefixOutputArgs } from "./getNetworkPrefix";
export const getNetworkPrefix: typeof import("./getNetworkPrefix").getNetworkPrefix = null as any;
export const getNetworkPrefixOutput: typeof import("./getNetworkPrefix").getNetworkPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPrefix","getNetworkPrefixOutput"], () => require("./getNetworkPrefix"));

export { GetPolicyAccessArgs, GetPolicyAccessResult, GetPolicyAccessOutputArgs } from "./getPolicyAccess";
export const getPolicyAccess: typeof import("./getPolicyAccess").getPolicyAccess = null as any;
export const getPolicyAccessOutput: typeof import("./getPolicyAccess").getPolicyAccessOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyAccess","getPolicyAccessOutput"], () => require("./getPolicyAccess"));

export { GetPolicyTransitArgs, GetPolicyTransitResult, GetPolicyTransitOutputArgs } from "./getPolicyTransit";
export const getPolicyTransit: typeof import("./getPolicyTransit").getPolicyTransit = null as any;
export const getPolicyTransitOutput: typeof import("./getPolicyTransit").getPolicyTransitOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyTransit","getPolicyTransitOutput"], () => require("./getPolicyTransit"));

export { GetPrivateLinksArgs, GetPrivateLinksResult, GetPrivateLinksOutputArgs } from "./getPrivateLinks";
export const getPrivateLinks: typeof import("./getPrivateLinks").getPrivateLinks = null as any;
export const getPrivateLinksOutput: typeof import("./getPrivateLinks").getPrivateLinksOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinks","getPrivateLinksOutput"], () => require("./getPrivateLinks"));

export { GetRegionalPrefixArgs, GetRegionalPrefixResult, GetRegionalPrefixOutputArgs } from "./getRegionalPrefix";
export const getRegionalPrefix: typeof import("./getRegionalPrefix").getRegionalPrefix = null as any;
export const getRegionalPrefixOutput: typeof import("./getRegionalPrefix").getRegionalPrefixOutput = null as any;
utilities.lazyLoad(exports, ["getRegionalPrefix","getRegionalPrefixOutput"], () => require("./getRegionalPrefix"));

export { GetS3bucketArgs, GetS3bucketResult, GetS3bucketOutputArgs } from "./getS3bucket";
export const getS3bucket: typeof import("./getS3bucket").getS3bucket = null as any;
export const getS3bucketOutput: typeof import("./getS3bucket").getS3bucketOutput = null as any;
utilities.lazyLoad(exports, ["getS3bucket","getS3bucketOutput"], () => require("./getS3bucket"));

export { GetServiceInsertionArgs, GetServiceInsertionResult, GetServiceInsertionOutputArgs } from "./getServiceInsertion";
export const getServiceInsertion: typeof import("./getServiceInsertion").getServiceInsertion = null as any;
export const getServiceInsertionOutput: typeof import("./getServiceInsertion").getServiceInsertionOutput = null as any;
utilities.lazyLoad(exports, ["getServiceInsertion","getServiceInsertionOutput"], () => require("./getServiceInsertion"));

export { GetSharedServicesArgs, GetSharedServicesResult, GetSharedServicesOutputArgs } from "./getSharedServices";
export const getSharedServices: typeof import("./getSharedServices").getSharedServices = null as any;
export const getSharedServicesOutput: typeof import("./getSharedServices").getSharedServicesOutput = null as any;
utilities.lazyLoad(exports, ["getSharedServices","getSharedServicesOutput"], () => require("./getSharedServices"));

export { GroupingArgs, GroupingState } from "./grouping";
export type Grouping = import("./grouping").Grouping;
export const Grouping: typeof import("./grouping").Grouping = null as any;
utilities.lazyLoad(exports, ["Grouping"], () => require("./grouping"));

export { IdpArgs, IdpState } from "./idp";
export type Idp = import("./idp").Idp;
export const Idp: typeof import("./idp").Idp = null as any;
utilities.lazyLoad(exports, ["Idp"], () => require("./idp"));

export { InternetEgressArgs, InternetEgressState } from "./internetEgress";
export type InternetEgress = import("./internetEgress").InternetEgress;
export const InternetEgress: typeof import("./internetEgress").InternetEgress = null as any;
utilities.lazyLoad(exports, ["InternetEgress"], () => require("./internetEgress"));

export { IpReputationArgs, IpReputationState } from "./ipReputation";
export type IpReputation = import("./ipReputation").IpReputation;
export const IpReputation: typeof import("./ipReputation").IpReputation = null as any;
utilities.lazyLoad(exports, ["IpReputation"], () => require("./ipReputation"));

export { LogExporterArgs, LogExporterState } from "./logExporter";
export type LogExporter = import("./logExporter").LogExporter;
export const LogExporter: typeof import("./logExporter").LogExporter = null as any;
utilities.lazyLoad(exports, ["LogExporter"], () => require("./logExporter"));

export { ManagedFirewallArgs, ManagedFirewallState } from "./managedFirewall";
export type ManagedFirewall = import("./managedFirewall").ManagedFirewall;
export const ManagedFirewall: typeof import("./managedFirewall").ManagedFirewall = null as any;
utilities.lazyLoad(exports, ["ManagedFirewall"], () => require("./managedFirewall"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NamespaceExportArgs, NamespaceExportState } from "./namespaceExport";
export type NamespaceExport = import("./namespaceExport").NamespaceExport;
export const NamespaceExport: typeof import("./namespaceExport").NamespaceExport = null as any;
utilities.lazyLoad(exports, ["NamespaceExport"], () => require("./namespaceExport"));

export { NetworkOnboardingArgs, NetworkOnboardingState } from "./networkOnboarding";
export type NetworkOnboarding = import("./networkOnboarding").NetworkOnboarding;
export const NetworkOnboarding: typeof import("./networkOnboarding").NetworkOnboarding = null as any;
utilities.lazyLoad(exports, ["NetworkOnboarding"], () => require("./networkOnboarding"));

export { NetworkPrefixArgs, NetworkPrefixState } from "./networkPrefix";
export type NetworkPrefix = import("./networkPrefix").NetworkPrefix;
export const NetworkPrefix: typeof import("./networkPrefix").NetworkPrefix = null as any;
utilities.lazyLoad(exports, ["NetworkPrefix"], () => require("./networkPrefix"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PrivateLinkMappingArgs, PrivateLinkMappingState } from "./privateLinkMapping";
export type PrivateLinkMapping = import("./privateLinkMapping").PrivateLinkMapping;
export const PrivateLinkMapping: typeof import("./privateLinkMapping").PrivateLinkMapping = null as any;
utilities.lazyLoad(exports, ["PrivateLinkMapping"], () => require("./privateLinkMapping"));

export { PrivateLinkSourceArgs, PrivateLinkSourceState } from "./privateLinkSource";
export type PrivateLinkSource = import("./privateLinkSource").PrivateLinkSource;
export const PrivateLinkSource: typeof import("./privateLinkSource").PrivateLinkSource = null as any;
utilities.lazyLoad(exports, ["PrivateLinkSource"], () => require("./privateLinkSource"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RegionalPrefixArgs, RegionalPrefixState } from "./regionalPrefix";
export type RegionalPrefix = import("./regionalPrefix").RegionalPrefix;
export const RegionalPrefix: typeof import("./regionalPrefix").RegionalPrefix = null as any;
utilities.lazyLoad(exports, ["RegionalPrefix"], () => require("./regionalPrefix"));

export { ServiceInsertionArgs, ServiceInsertionState } from "./serviceInsertion";
export type ServiceInsertion = import("./serviceInsertion").ServiceInsertion;
export const ServiceInsertion: typeof import("./serviceInsertion").ServiceInsertion = null as any;
utilities.lazyLoad(exports, ["ServiceInsertion"], () => require("./serviceInsertion"));

export { SharedServicesArgs, SharedServicesState } from "./sharedServices";
export type SharedServices = import("./sharedServices").SharedServices;
export const SharedServices: typeof import("./sharedServices").SharedServices = null as any;
utilities.lazyLoad(exports, ["SharedServices"], () => require("./sharedServices"));

export { UserSettingsArgs, UserSettingsState } from "./userSettings";
export type UserSettings = import("./userSettings").UserSettings;
export const UserSettings: typeof import("./userSettings").UserSettings = null as any;
utilities.lazyLoad(exports, ["UserSettings"], () => require("./userSettings"));

export { VisualTransitArgs, VisualTransitState } from "./visualTransit";
export type VisualTransit = import("./visualTransit").VisualTransit;
export const VisualTransit: typeof import("./visualTransit").VisualTransit = null as any;
utilities.lazyLoad(exports, ["VisualTransit"], () => require("./visualTransit"));

export { WafArgs, WafState } from "./waf";
export type Waf = import("./waf").Waf;
export const Waf: typeof import("./waf").Waf = null as any;
utilities.lazyLoad(exports, ["Waf"], () => require("./waf"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "prosimo:index/appOnboardingCitrixvdi:AppOnboardingCitrixvdi":
                return new AppOnboardingCitrixvdi(name, <any>undefined, { urn })
            case "prosimo:index/appOnboardingCloudsvc:AppOnboardingCloudsvc":
                return new AppOnboardingCloudsvc(name, <any>undefined, { urn })
            case "prosimo:index/appOnboardingDns:AppOnboardingDns":
                return new AppOnboardingDns(name, <any>undefined, { urn })
            case "prosimo:index/appOnboardingFqdn:AppOnboardingFqdn":
                return new AppOnboardingFqdn(name, <any>undefined, { urn })
            case "prosimo:index/appOnboardingJumpbox:AppOnboardingJumpbox":
                return new AppOnboardingJumpbox(name, <any>undefined, { urn })
            case "prosimo:index/appOnboardingWeb:AppOnboardingWeb":
                return new AppOnboardingWeb(name, <any>undefined, { urn })
            case "prosimo:index/cacheRules:CacheRules":
                return new CacheRules(name, <any>undefined, { urn })
            case "prosimo:index/certificates:Certificates":
                return new Certificates(name, <any>undefined, { urn })
            case "prosimo:index/cloudCreds:CloudCreds":
                return new CloudCreds(name, <any>undefined, { urn })
            case "prosimo:index/cloudGateway:CloudGateway":
                return new CloudGateway(name, <any>undefined, { urn })
            case "prosimo:index/connectorPlacement:ConnectorPlacement":
                return new ConnectorPlacement(name, <any>undefined, { urn })
            case "prosimo:index/dpProfile:DpProfile":
                return new DpProfile(name, <any>undefined, { urn })
            case "prosimo:index/dpSettings:DpSettings":
                return new DpSettings(name, <any>undefined, { urn })
            case "prosimo:index/dynamicRisk:DynamicRisk":
                return new DynamicRisk(name, <any>undefined, { urn })
            case "prosimo:index/edge:Edge":
                return new Edge(name, <any>undefined, { urn })
            case "prosimo:index/edrIntegration:EdrIntegration":
                return new EdrIntegration(name, <any>undefined, { urn })
            case "prosimo:index/edrProfile:EdrProfile":
                return new EdrProfile(name, <any>undefined, { urn })
            case "prosimo:index/firewallManager:FirewallManager":
                return new FirewallManager(name, <any>undefined, { urn })
            case "prosimo:index/geoLocation:GeoLocation":
                return new GeoLocation(name, <any>undefined, { urn })
            case "prosimo:index/grouping:Grouping":
                return new Grouping(name, <any>undefined, { urn })
            case "prosimo:index/idp:Idp":
                return new Idp(name, <any>undefined, { urn })
            case "prosimo:index/internetEgress:InternetEgress":
                return new InternetEgress(name, <any>undefined, { urn })
            case "prosimo:index/ipReputation:IpReputation":
                return new IpReputation(name, <any>undefined, { urn })
            case "prosimo:index/logExporter:LogExporter":
                return new LogExporter(name, <any>undefined, { urn })
            case "prosimo:index/managedFirewall:ManagedFirewall":
                return new ManagedFirewall(name, <any>undefined, { urn })
            case "prosimo:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "prosimo:index/namespaceExport:NamespaceExport":
                return new NamespaceExport(name, <any>undefined, { urn })
            case "prosimo:index/networkOnboarding:NetworkOnboarding":
                return new NetworkOnboarding(name, <any>undefined, { urn })
            case "prosimo:index/networkPrefix:NetworkPrefix":
                return new NetworkPrefix(name, <any>undefined, { urn })
            case "prosimo:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "prosimo:index/privateLinkMapping:PrivateLinkMapping":
                return new PrivateLinkMapping(name, <any>undefined, { urn })
            case "prosimo:index/privateLinkSource:PrivateLinkSource":
                return new PrivateLinkSource(name, <any>undefined, { urn })
            case "prosimo:index/regionalPrefix:RegionalPrefix":
                return new RegionalPrefix(name, <any>undefined, { urn })
            case "prosimo:index/serviceInsertion:ServiceInsertion":
                return new ServiceInsertion(name, <any>undefined, { urn })
            case "prosimo:index/sharedServices:SharedServices":
                return new SharedServices(name, <any>undefined, { urn })
            case "prosimo:index/userSettings:UserSettings":
                return new UserSettings(name, <any>undefined, { urn })
            case "prosimo:index/visualTransit:VisualTransit":
                return new VisualTransit(name, <any>undefined, { urn })
            case "prosimo:index/waf:Waf":
                return new Waf(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("prosimo", "index/appOnboardingCitrixvdi", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/appOnboardingCloudsvc", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/appOnboardingDns", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/appOnboardingFqdn", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/appOnboardingJumpbox", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/appOnboardingWeb", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/cacheRules", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/certificates", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/cloudCreds", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/cloudGateway", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/connectorPlacement", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/dpProfile", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/dpSettings", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/dynamicRisk", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/edge", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/edrIntegration", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/edrProfile", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/firewallManager", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/geoLocation", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/grouping", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/idp", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/internetEgress", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/ipReputation", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/logExporter", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/managedFirewall", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/namespace", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/namespaceExport", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/networkOnboarding", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/networkPrefix", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/policy", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/privateLinkMapping", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/privateLinkSource", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/regionalPrefix", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/serviceInsertion", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/sharedServices", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/userSettings", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/visualTransit", _module)
pulumi.runtime.registerResourceModule("prosimo", "index/waf", _module)
pulumi.runtime.registerResourcePackage("prosimo", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:prosimo") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
