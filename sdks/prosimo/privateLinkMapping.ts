// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PrivateLinkMapping extends pulumi.CustomResource {
    /**
     * Get an existing PrivateLinkMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivateLinkMappingState, opts?: pulumi.CustomResourceOptions): PrivateLinkMapping {
        return new PrivateLinkMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/privateLinkMapping:PrivateLinkMapping';

    /**
     * Returns true if the given object is an instance of PrivateLinkMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivateLinkMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateLinkMapping.__pulumiType;
    }

    public readonly hostedZones!: pulumi.Output<outputs.PrivateLinkMappingHostedZone[]>;
    /**
     * Private Link Source Name
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * Target App/Network name
     */
    public readonly target!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.PrivateLinkMappingTimeouts | undefined>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    public readonly waitForRollout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a PrivateLinkMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivateLinkMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivateLinkMappingArgs | PrivateLinkMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivateLinkMappingState | undefined;
            resourceInputs["hostedZones"] = state ? state.hostedZones : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitForRollout"] = state ? state.waitForRollout : undefined;
        } else {
            const args = argsOrState as PrivateLinkMappingArgs | undefined;
            if ((!args || args.hostedZones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostedZones'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["hostedZones"] = args ? args.hostedZones : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitForRollout"] = args ? args.waitForRollout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateLinkMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering PrivateLinkMapping resources.
 */
export interface PrivateLinkMappingState {
    hostedZones?: pulumi.Input<pulumi.Input<inputs.PrivateLinkMappingHostedZone>[]>;
    /**
     * Private Link Source Name
     */
    source?: pulumi.Input<string>;
    /**
     * Target App/Network name
     */
    target?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivateLinkMappingTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PrivateLinkMapping resource.
 */
export interface PrivateLinkMappingArgs {
    hostedZones: pulumi.Input<pulumi.Input<inputs.PrivateLinkMappingHostedZone>[]>;
    /**
     * Private Link Source Name
     */
    source: pulumi.Input<string>;
    /**
     * Target App/Network name
     */
    target: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PrivateLinkMappingTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}
