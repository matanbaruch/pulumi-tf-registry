// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppOnboardingJumpbox extends pulumi.CustomResource {
    /**
     * Get an existing AppOnboardingJumpbox resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppOnboardingJumpboxState, opts?: pulumi.CustomResourceOptions): AppOnboardingJumpbox {
        return new AppOnboardingJumpbox(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/appOnboardingJumpbox:AppOnboardingJumpbox';

    /**
     * Returns true if the given object is an instance of AppOnboardingJumpbox.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppOnboardingJumpbox {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppOnboardingJumpbox.__pulumiType;
    }

    /**
     * e.g: Agent or Agentless
     */
    public /*out*/ readonly appAccessType!: pulumi.Output<string>;
    /**
     * name for the application
     */
    public readonly appName!: pulumi.Output<string>;
    /**
     * e.g: type of app onboarded, e.g: citrix, web, fqdn, jumpbox
     */
    public /*out*/ readonly appType!: pulumi.Output<string>;
    public readonly appUrls!: pulumi.Output<outputs.AppOnboardingJumpboxAppUrl[]>;
    /**
     * Client Cert details
     */
    public readonly clientCert!: pulumi.Output<string | undefined>;
    /**
     * Choose any custom policy created from the policy library or create one.
     */
    public readonly customizePolicy!: pulumi.Output<outputs.AppOnboardingJumpboxCustomizePolicy | undefined>;
    /**
     * Set this to true if you would like app to be offboarded from fabric
     */
    public readonly decommissionApp!: pulumi.Output<boolean>;
    /**
     * Setting this to true would leverage multi clouds to optimize the app performance
     */
    public readonly enableMultiCloudAccess!: pulumi.Output<boolean | undefined>;
    /**
     * Force app offboarding incase of normal offboarding failure.
     */
    public readonly forceOffboard!: pulumi.Output<boolean | undefined>;
    /**
     * IDP provider name.
     */
    public readonly idpName!: pulumi.Output<string | undefined>;
    /**
     * Set this to true if you would like app to be onboarded to fabric
     */
    public readonly onboardApp!: pulumi.Output<boolean>;
    /**
     * Optimization option for app: e.g: CostSaving, PerformanceEnhanced, FastLane
     */
    public readonly optimizationOption!: pulumi.Output<string>;
    /**
     * Select policy name.e.g: ALLOW-ALL-USERS, DENY-ALL-USERS or CUSTOMIZE.Conditional access policies and Web Application
     * Firewall policies for the application
     */
    public readonly policyNames!: pulumi.Output<string[]>;
    public readonly timeouts!: pulumi.Output<outputs.AppOnboardingJumpboxTimeouts | undefined>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    public readonly waitForRollout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AppOnboardingJumpbox resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppOnboardingJumpboxArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppOnboardingJumpboxArgs | AppOnboardingJumpboxState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppOnboardingJumpboxState | undefined;
            resourceInputs["appAccessType"] = state ? state.appAccessType : undefined;
            resourceInputs["appName"] = state ? state.appName : undefined;
            resourceInputs["appType"] = state ? state.appType : undefined;
            resourceInputs["appUrls"] = state ? state.appUrls : undefined;
            resourceInputs["clientCert"] = state ? state.clientCert : undefined;
            resourceInputs["customizePolicy"] = state ? state.customizePolicy : undefined;
            resourceInputs["decommissionApp"] = state ? state.decommissionApp : undefined;
            resourceInputs["enableMultiCloudAccess"] = state ? state.enableMultiCloudAccess : undefined;
            resourceInputs["forceOffboard"] = state ? state.forceOffboard : undefined;
            resourceInputs["idpName"] = state ? state.idpName : undefined;
            resourceInputs["onboardApp"] = state ? state.onboardApp : undefined;
            resourceInputs["optimizationOption"] = state ? state.optimizationOption : undefined;
            resourceInputs["policyNames"] = state ? state.policyNames : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitForRollout"] = state ? state.waitForRollout : undefined;
        } else {
            const args = argsOrState as AppOnboardingJumpboxArgs | undefined;
            if ((!args || args.appName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appName'");
            }
            if ((!args || args.appUrls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appUrls'");
            }
            if ((!args || args.decommissionApp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'decommissionApp'");
            }
            if ((!args || args.onboardApp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onboardApp'");
            }
            if ((!args || args.optimizationOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'optimizationOption'");
            }
            if ((!args || args.policyNames === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyNames'");
            }
            resourceInputs["appName"] = args ? args.appName : undefined;
            resourceInputs["appUrls"] = args ? args.appUrls : undefined;
            resourceInputs["clientCert"] = args ? args.clientCert : undefined;
            resourceInputs["customizePolicy"] = args ? args.customizePolicy : undefined;
            resourceInputs["decommissionApp"] = args ? args.decommissionApp : undefined;
            resourceInputs["enableMultiCloudAccess"] = args ? args.enableMultiCloudAccess : undefined;
            resourceInputs["forceOffboard"] = args ? args.forceOffboard : undefined;
            resourceInputs["idpName"] = args ? args.idpName : undefined;
            resourceInputs["onboardApp"] = args ? args.onboardApp : undefined;
            resourceInputs["optimizationOption"] = args ? args.optimizationOption : undefined;
            resourceInputs["policyNames"] = args ? args.policyNames : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitForRollout"] = args ? args.waitForRollout : undefined;
            resourceInputs["appAccessType"] = undefined /*out*/;
            resourceInputs["appType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppOnboardingJumpbox.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppOnboardingJumpbox resources.
 */
export interface AppOnboardingJumpboxState {
    /**
     * e.g: Agent or Agentless
     */
    appAccessType?: pulumi.Input<string>;
    /**
     * name for the application
     */
    appName?: pulumi.Input<string>;
    /**
     * e.g: type of app onboarded, e.g: citrix, web, fqdn, jumpbox
     */
    appType?: pulumi.Input<string>;
    appUrls?: pulumi.Input<pulumi.Input<inputs.AppOnboardingJumpboxAppUrl>[]>;
    /**
     * Client Cert details
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Choose any custom policy created from the policy library or create one.
     */
    customizePolicy?: pulumi.Input<inputs.AppOnboardingJumpboxCustomizePolicy>;
    /**
     * Set this to true if you would like app to be offboarded from fabric
     */
    decommissionApp?: pulumi.Input<boolean>;
    /**
     * Setting this to true would leverage multi clouds to optimize the app performance
     */
    enableMultiCloudAccess?: pulumi.Input<boolean>;
    /**
     * Force app offboarding incase of normal offboarding failure.
     */
    forceOffboard?: pulumi.Input<boolean>;
    /**
     * IDP provider name.
     */
    idpName?: pulumi.Input<string>;
    /**
     * Set this to true if you would like app to be onboarded to fabric
     */
    onboardApp?: pulumi.Input<boolean>;
    /**
     * Optimization option for app: e.g: CostSaving, PerformanceEnhanced, FastLane
     */
    optimizationOption?: pulumi.Input<string>;
    /**
     * Select policy name.e.g: ALLOW-ALL-USERS, DENY-ALL-USERS or CUSTOMIZE.Conditional access policies and Web Application
     * Firewall policies for the application
     */
    policyNames?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AppOnboardingJumpboxTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppOnboardingJumpbox resource.
 */
export interface AppOnboardingJumpboxArgs {
    /**
     * name for the application
     */
    appName: pulumi.Input<string>;
    appUrls: pulumi.Input<pulumi.Input<inputs.AppOnboardingJumpboxAppUrl>[]>;
    /**
     * Client Cert details
     */
    clientCert?: pulumi.Input<string>;
    /**
     * Choose any custom policy created from the policy library or create one.
     */
    customizePolicy?: pulumi.Input<inputs.AppOnboardingJumpboxCustomizePolicy>;
    /**
     * Set this to true if you would like app to be offboarded from fabric
     */
    decommissionApp: pulumi.Input<boolean>;
    /**
     * Setting this to true would leverage multi clouds to optimize the app performance
     */
    enableMultiCloudAccess?: pulumi.Input<boolean>;
    /**
     * Force app offboarding incase of normal offboarding failure.
     */
    forceOffboard?: pulumi.Input<boolean>;
    /**
     * IDP provider name.
     */
    idpName?: pulumi.Input<string>;
    /**
     * Set this to true if you would like app to be onboarded to fabric
     */
    onboardApp: pulumi.Input<boolean>;
    /**
     * Optimization option for app: e.g: CostSaving, PerformanceEnhanced, FastLane
     */
    optimizationOption: pulumi.Input<string>;
    /**
     * Select policy name.e.g: ALLOW-ALL-USERS, DENY-ALL-USERS or CUSTOMIZE.Conditional access policies and Web Application
     * Firewall policies for the application
     */
    policyNames: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.AppOnboardingJumpboxTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}
