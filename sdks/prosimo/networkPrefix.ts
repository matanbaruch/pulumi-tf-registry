// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkPrefix extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPrefix resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPrefixState, opts?: pulumi.CustomResourceOptions): NetworkPrefix {
        return new NetworkPrefix(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/networkPrefix:NetworkPrefix';

    /**
     * Returns true if the given object is an instance of NetworkPrefix.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPrefix {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPrefix.__pulumiType;
    }

    /**
     * cloud account name
     */
    public readonly cloudAccount!: pulumi.Output<string>;
    /**
     * name of cloud network
     */
    public readonly cloudNetwork!: pulumi.Output<string>;
    /**
     * name of cloud region
     */
    public readonly cloudRegion!: pulumi.Output<string>;
    public readonly enable!: pulumi.Output<boolean | undefined>;
    /**
     * Selected Regions where the entries would be added.
     */
    public readonly prefixRouteTables!: pulumi.Output<outputs.NetworkPrefixPrefixRouteTable[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkPrefixTimeouts | undefined>;

    /**
     * Create a NetworkPrefix resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPrefixArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPrefixArgs | NetworkPrefixState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkPrefixState | undefined;
            resourceInputs["cloudAccount"] = state ? state.cloudAccount : undefined;
            resourceInputs["cloudNetwork"] = state ? state.cloudNetwork : undefined;
            resourceInputs["cloudRegion"] = state ? state.cloudRegion : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["prefixRouteTables"] = state ? state.prefixRouteTables : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetworkPrefixArgs | undefined;
            if ((!args || args.cloudAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudAccount'");
            }
            if ((!args || args.cloudNetwork === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudNetwork'");
            }
            if ((!args || args.cloudRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudRegion'");
            }
            resourceInputs["cloudAccount"] = args ? args.cloudAccount : undefined;
            resourceInputs["cloudNetwork"] = args ? args.cloudNetwork : undefined;
            resourceInputs["cloudRegion"] = args ? args.cloudRegion : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["prefixRouteTables"] = args ? args.prefixRouteTables : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPrefix.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkPrefix resources.
 */
export interface NetworkPrefixState {
    /**
     * cloud account name
     */
    cloudAccount?: pulumi.Input<string>;
    /**
     * name of cloud network
     */
    cloudNetwork?: pulumi.Input<string>;
    /**
     * name of cloud region
     */
    cloudRegion?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    /**
     * Selected Regions where the entries would be added.
     */
    prefixRouteTables?: pulumi.Input<pulumi.Input<inputs.NetworkPrefixPrefixRouteTable>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkPrefixTimeouts>;
}

/**
 * The set of arguments for constructing a NetworkPrefix resource.
 */
export interface NetworkPrefixArgs {
    /**
     * cloud account name
     */
    cloudAccount: pulumi.Input<string>;
    /**
     * name of cloud network
     */
    cloudNetwork: pulumi.Input<string>;
    /**
     * name of cloud region
     */
    cloudRegion: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    /**
     * Selected Regions where the entries would be added.
     */
    prefixRouteTables?: pulumi.Input<pulumi.Input<inputs.NetworkPrefixPrefixRouteTable>[]>;
    timeouts?: pulumi.Input<inputs.NetworkPrefixTimeouts>;
}
