// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class NetworkOnboarding extends pulumi.CustomResource {
    /**
     * Get an existing NetworkOnboarding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkOnboardingState, opts?: pulumi.CustomResourceOptions): NetworkOnboarding {
        return new NetworkOnboarding(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/networkOnboarding:NetworkOnboarding';

    /**
     * Returns true if the given object is an instance of NetworkOnboarding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkOnboarding {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkOnboarding.__pulumiType;
    }

    /**
     * Set this to true if you would like the network to be offboarded from fabric
     */
    public readonly decommissionApp!: pulumi.Output<boolean>;
    public /*out*/ readonly deployed!: pulumi.Output<boolean>;
    /**
     * Force app offboarding incase of normal offboarding failure.
     */
    public readonly forceOffboard!: pulumi.Output<boolean | undefined>;
    /**
     * Select list of internet egress control policies
     */
    public readonly internetEgressControls!: pulumi.Output<string[] | undefined>;
    /**
     * name for the application
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Assigned Namespace
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * Mark Network Exportable in Policy
     */
    public readonly networkExportablePolicy!: pulumi.Output<boolean>;
    /**
     * Set this to true if you would like the network to be onboarded to fabric
     */
    public readonly onboardApp!: pulumi.Output<boolean>;
    public /*out*/ readonly pamCname!: pulumi.Output<string>;
    /**
     * Select policy name.e.g: ALLOW-ALL-NETWORKS, DENY-ALL-NETWORKS or Custom Policies
     */
    public readonly policies!: pulumi.Output<string[] | undefined>;
    public readonly privateClouds!: pulumi.Output<outputs.NetworkOnboardingPrivateCloud[] | undefined>;
    public readonly publicClouds!: pulumi.Output<outputs.NetworkOnboardingPublicCloud[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetworkOnboardingTimeouts | undefined>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    public readonly waitForRollout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a NetworkOnboarding resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkOnboardingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkOnboardingArgs | NetworkOnboardingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkOnboardingState | undefined;
            resourceInputs["decommissionApp"] = state ? state.decommissionApp : undefined;
            resourceInputs["deployed"] = state ? state.deployed : undefined;
            resourceInputs["forceOffboard"] = state ? state.forceOffboard : undefined;
            resourceInputs["internetEgressControls"] = state ? state.internetEgressControls : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["networkExportablePolicy"] = state ? state.networkExportablePolicy : undefined;
            resourceInputs["onboardApp"] = state ? state.onboardApp : undefined;
            resourceInputs["pamCname"] = state ? state.pamCname : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["privateClouds"] = state ? state.privateClouds : undefined;
            resourceInputs["publicClouds"] = state ? state.publicClouds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitForRollout"] = state ? state.waitForRollout : undefined;
        } else {
            const args = argsOrState as NetworkOnboardingArgs | undefined;
            if ((!args || args.decommissionApp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'decommissionApp'");
            }
            if ((!args || args.networkExportablePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkExportablePolicy'");
            }
            if ((!args || args.onboardApp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onboardApp'");
            }
            resourceInputs["decommissionApp"] = args ? args.decommissionApp : undefined;
            resourceInputs["forceOffboard"] = args ? args.forceOffboard : undefined;
            resourceInputs["internetEgressControls"] = args ? args.internetEgressControls : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["networkExportablePolicy"] = args ? args.networkExportablePolicy : undefined;
            resourceInputs["onboardApp"] = args ? args.onboardApp : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["privateClouds"] = args ? args.privateClouds : undefined;
            resourceInputs["publicClouds"] = args ? args.publicClouds : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitForRollout"] = args ? args.waitForRollout : undefined;
            resourceInputs["deployed"] = undefined /*out*/;
            resourceInputs["pamCname"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkOnboarding.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering NetworkOnboarding resources.
 */
export interface NetworkOnboardingState {
    /**
     * Set this to true if you would like the network to be offboarded from fabric
     */
    decommissionApp?: pulumi.Input<boolean>;
    deployed?: pulumi.Input<boolean>;
    /**
     * Force app offboarding incase of normal offboarding failure.
     */
    forceOffboard?: pulumi.Input<boolean>;
    /**
     * Select list of internet egress control policies
     */
    internetEgressControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * name for the application
     */
    name?: pulumi.Input<string>;
    /**
     * Assigned Namespace
     */
    namespace?: pulumi.Input<string>;
    /**
     * Mark Network Exportable in Policy
     */
    networkExportablePolicy?: pulumi.Input<boolean>;
    /**
     * Set this to true if you would like the network to be onboarded to fabric
     */
    onboardApp?: pulumi.Input<boolean>;
    pamCname?: pulumi.Input<string>;
    /**
     * Select policy name.e.g: ALLOW-ALL-NETWORKS, DENY-ALL-NETWORKS or Custom Policies
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    privateClouds?: pulumi.Input<pulumi.Input<inputs.NetworkOnboardingPrivateCloud>[]>;
    publicClouds?: pulumi.Input<pulumi.Input<inputs.NetworkOnboardingPublicCloud>[]>;
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetworkOnboardingTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NetworkOnboarding resource.
 */
export interface NetworkOnboardingArgs {
    /**
     * Set this to true if you would like the network to be offboarded from fabric
     */
    decommissionApp: pulumi.Input<boolean>;
    /**
     * Force app offboarding incase of normal offboarding failure.
     */
    forceOffboard?: pulumi.Input<boolean>;
    /**
     * Select list of internet egress control policies
     */
    internetEgressControls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * name for the application
     */
    name?: pulumi.Input<string>;
    /**
     * Assigned Namespace
     */
    namespace?: pulumi.Input<string>;
    /**
     * Mark Network Exportable in Policy
     */
    networkExportablePolicy: pulumi.Input<boolean>;
    /**
     * Set this to true if you would like the network to be onboarded to fabric
     */
    onboardApp: pulumi.Input<boolean>;
    /**
     * Select policy name.e.g: ALLOW-ALL-NETWORKS, DENY-ALL-NETWORKS or Custom Policies
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    privateClouds?: pulumi.Input<pulumi.Input<inputs.NetworkOnboardingPrivateCloud>[]>;
    publicClouds?: pulumi.Input<pulumi.Input<inputs.NetworkOnboardingPublicCloud>[]>;
    timeouts?: pulumi.Input<inputs.NetworkOnboardingTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}
