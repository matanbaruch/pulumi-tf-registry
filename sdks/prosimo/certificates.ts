// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Certificates extends pulumi.CustomResource {
    /**
     * Get an existing Certificates resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificatesState, opts?: pulumi.CustomResourceOptions): Certificates {
        return new Certificates(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/certificates:Certificates';

    /**
     * Returns true if the given object is an instance of Certificates.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificates {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificates.__pulumiType;
    }

    /**
     * Status of certficate, e.g Valid, Invalid
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly teamId!: pulumi.Output<string>;
    /**
     * Certficate Option: e.g Domain, Client and CA
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Certficate option for uploading Certificate Authority (CA)
     */
    public readonly uploadCaCerts!: pulumi.Output<outputs.CertificatesUploadCaCert[] | undefined>;
    /**
     * Certficate option for uploading Source Certificate
     */
    public readonly uploadClientCerts!: pulumi.Output<outputs.CertificatesUploadClientCert[] | undefined>;
    /**
     * Certficate option for uploading Custom Domain Certificate
     */
    public readonly uploadDomainCerts!: pulumi.Output<outputs.CertificatesUploadDomainCert[] | undefined>;
    /**
     * Common Name of the certificate
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a Certificates resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CertificatesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificatesArgs | CertificatesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificatesState | undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uploadCaCerts"] = state ? state.uploadCaCerts : undefined;
            resourceInputs["uploadClientCerts"] = state ? state.uploadClientCerts : undefined;
            resourceInputs["uploadDomainCerts"] = state ? state.uploadDomainCerts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as CertificatesArgs | undefined;
            resourceInputs["uploadCaCerts"] = args ? args.uploadCaCerts : undefined;
            resourceInputs["uploadClientCerts"] = args ? args.uploadClientCerts : undefined;
            resourceInputs["uploadDomainCerts"] = args ? args.uploadDomainCerts : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["teamId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificates.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Certificates resources.
 */
export interface CertificatesState {
    /**
     * Status of certficate, e.g Valid, Invalid
     */
    status?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
    /**
     * Certficate Option: e.g Domain, Client and CA
     */
    type?: pulumi.Input<string>;
    /**
     * Certficate option for uploading Certificate Authority (CA)
     */
    uploadCaCerts?: pulumi.Input<pulumi.Input<inputs.CertificatesUploadCaCert>[]>;
    /**
     * Certficate option for uploading Source Certificate
     */
    uploadClientCerts?: pulumi.Input<pulumi.Input<inputs.CertificatesUploadClientCert>[]>;
    /**
     * Certficate option for uploading Custom Domain Certificate
     */
    uploadDomainCerts?: pulumi.Input<pulumi.Input<inputs.CertificatesUploadDomainCert>[]>;
    /**
     * Common Name of the certificate
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Certificates resource.
 */
export interface CertificatesArgs {
    /**
     * Certficate option for uploading Certificate Authority (CA)
     */
    uploadCaCerts?: pulumi.Input<pulumi.Input<inputs.CertificatesUploadCaCert>[]>;
    /**
     * Certficate option for uploading Source Certificate
     */
    uploadClientCerts?: pulumi.Input<pulumi.Input<inputs.CertificatesUploadClientCert>[]>;
    /**
     * Certficate option for uploading Custom Domain Certificate
     */
    uploadDomainCerts?: pulumi.Input<pulumi.Input<inputs.CertificatesUploadDomainCert>[]>;
}
