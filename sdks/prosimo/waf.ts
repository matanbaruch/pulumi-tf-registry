// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Waf extends pulumi.CustomResource {
    /**
     * Get an existing Waf resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WafState, opts?: pulumi.CustomResourceOptions): Waf {
        return new Waf(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/waf:Waf';

    /**
     * Returns true if the given object is an instance of Waf.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Waf {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Waf.__pulumiType;
    }

    /**
     * List of app domain to which waf would apply
     */
    public readonly appDomains!: pulumi.Output<string[] | undefined>;
    /**
     * waf detect mode, e.g: enforce, detect
     */
    public readonly mode!: pulumi.Output<string>;
    public readonly rulesets!: pulumi.Output<outputs.WafRulesets | undefined>;
    /**
     * When the Anomaly Score exceeds the Anomaly Threshold, a notification is generated by prosimo fabric in Detect mode or
     * along with the notification the request is blocked in Enforce mode
     */
    public readonly threshold!: pulumi.Output<number>;
    /**
     * Name of the waf policy set
     */
    public readonly wafName!: pulumi.Output<string>;

    /**
     * Create a Waf resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WafArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WafArgs | WafState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WafState | undefined;
            resourceInputs["appDomains"] = state ? state.appDomains : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["rulesets"] = state ? state.rulesets : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
            resourceInputs["wafName"] = state ? state.wafName : undefined;
        } else {
            const args = argsOrState as WafArgs | undefined;
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            if ((!args || args.wafName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wafName'");
            }
            resourceInputs["appDomains"] = args ? args.appDomains : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["rulesets"] = args ? args.rulesets : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
            resourceInputs["wafName"] = args ? args.wafName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Waf.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Waf resources.
 */
export interface WafState {
    /**
     * List of app domain to which waf would apply
     */
    appDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * waf detect mode, e.g: enforce, detect
     */
    mode?: pulumi.Input<string>;
    rulesets?: pulumi.Input<inputs.WafRulesets>;
    /**
     * When the Anomaly Score exceeds the Anomaly Threshold, a notification is generated by prosimo fabric in Detect mode or
     * along with the notification the request is blocked in Enforce mode
     */
    threshold?: pulumi.Input<number>;
    /**
     * Name of the waf policy set
     */
    wafName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Waf resource.
 */
export interface WafArgs {
    /**
     * List of app domain to which waf would apply
     */
    appDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * waf detect mode, e.g: enforce, detect
     */
    mode: pulumi.Input<string>;
    rulesets?: pulumi.Input<inputs.WafRulesets>;
    /**
     * When the Anomaly Score exceeds the Anomaly Threshold, a notification is generated by prosimo fabric in Detect mode or
     * along with the notification the request is blocked in Enforce mode
     */
    threshold: pulumi.Input<number>;
    /**
     * Name of the waf policy set
     */
    wafName: pulumi.Input<string>;
}
