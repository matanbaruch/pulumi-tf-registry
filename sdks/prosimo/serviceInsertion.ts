// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServiceInsertion extends pulumi.CustomResource {
    /**
     * Get an existing ServiceInsertion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceInsertionState, opts?: pulumi.CustomResourceOptions): ServiceInsertion {
        return new ServiceInsertion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/serviceInsertion:ServiceInsertion';

    /**
     * Returns true if the given object is an instance of ServiceInsertion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceInsertion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceInsertion.__pulumiType;
    }

    /**
     * Insertion Policy Rules
     */
    public readonly ipRules!: pulumi.Output<outputs.ServiceInsertionIpRule[] | undefined>;
    /**
     * Name of Service Insertion
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Policy Namespace, Defaults to default
     */
    public readonly namespace!: pulumi.Output<string | undefined>;
    /**
     * TRUE if you would like Prosimo to update Firewal VNET Roue Table
     */
    public readonly prosimoManagedRouting!: pulumi.Output<boolean | undefined>;
    /**
     * List of Route Table ID
     */
    public readonly routeTables!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the Shared Service
     */
    public readonly serviceName!: pulumi.Output<string>;
    public readonly sources!: pulumi.Output<outputs.ServiceInsertionSource[] | undefined>;
    /**
     * Service Insertion Deployment Status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly targets!: pulumi.Output<outputs.ServiceInsertionTarget[] | undefined>;
    /**
     * Service Insertion Type
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceInsertion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceInsertionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceInsertionArgs | ServiceInsertionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceInsertionState | undefined;
            resourceInputs["ipRules"] = state ? state.ipRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["prosimoManagedRouting"] = state ? state.prosimoManagedRouting : undefined;
            resourceInputs["routeTables"] = state ? state.routeTables : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ServiceInsertionArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["ipRules"] = args ? args.ipRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["prosimoManagedRouting"] = args ? args.prosimoManagedRouting : undefined;
            resourceInputs["routeTables"] = args ? args.routeTables : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceInsertion.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServiceInsertion resources.
 */
export interface ServiceInsertionState {
    /**
     * Insertion Policy Rules
     */
    ipRules?: pulumi.Input<pulumi.Input<inputs.ServiceInsertionIpRule>[]>;
    /**
     * Name of Service Insertion
     */
    name?: pulumi.Input<string>;
    /**
     * Policy Namespace, Defaults to default
     */
    namespace?: pulumi.Input<string>;
    /**
     * TRUE if you would like Prosimo to update Firewal VNET Roue Table
     */
    prosimoManagedRouting?: pulumi.Input<boolean>;
    /**
     * List of Route Table ID
     */
    routeTables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Shared Service
     */
    serviceName?: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.ServiceInsertionSource>[]>;
    /**
     * Service Insertion Deployment Status
     */
    status?: pulumi.Input<string>;
    targets?: pulumi.Input<pulumi.Input<inputs.ServiceInsertionTarget>[]>;
    /**
     * Service Insertion Type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceInsertion resource.
 */
export interface ServiceInsertionArgs {
    /**
     * Insertion Policy Rules
     */
    ipRules?: pulumi.Input<pulumi.Input<inputs.ServiceInsertionIpRule>[]>;
    /**
     * Name of Service Insertion
     */
    name?: pulumi.Input<string>;
    /**
     * Policy Namespace, Defaults to default
     */
    namespace?: pulumi.Input<string>;
    /**
     * TRUE if you would like Prosimo to update Firewal VNET Roue Table
     */
    prosimoManagedRouting?: pulumi.Input<boolean>;
    /**
     * List of Route Table ID
     */
    routeTables?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the Shared Service
     */
    serviceName: pulumi.Input<string>;
    sources?: pulumi.Input<pulumi.Input<inputs.ServiceInsertionSource>[]>;
    targets?: pulumi.Input<pulumi.Input<inputs.ServiceInsertionTarget>[]>;
    /**
     * Service Insertion Type
     */
    type?: pulumi.Input<string>;
}
