// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagedFirewall extends pulumi.CustomResource {
    /**
     * Get an existing ManagedFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedFirewallState, opts?: pulumi.CustomResourceOptions): ManagedFirewall {
        return new ManagedFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/managedFirewall:ManagedFirewall';

    /**
     * Returns true if the given object is an instance of ManagedFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedFirewall.__pulumiType;
    }

    /**
     * Access Details
     */
    public readonly accessDetails!: pulumi.Output<outputs.ManagedFirewallAccessDetail[]>;
    /**
     * Assignment Config
     */
    public readonly assignments!: pulumi.Output<outputs.ManagedFirewallAssignment[]>;
    /**
     * Instance Auth Key
     */
    public readonly authCode!: pulumi.Output<string>;
    /**
     * Instance Auth Key
     */
    public readonly authKey!: pulumi.Output<string>;
    /**
     * Region Level IP Prefixes
     */
    public readonly bootstrap!: pulumi.Output<string | undefined>;
    /**
     * CIDR range
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Cloud Account Name
     */
    public readonly cloudCredsName!: pulumi.Output<string>;
    /**
     * Cloud Region
     */
    public readonly cloudRegion!: pulumi.Output<string>;
    /**
     * Set this to true if you would like to Decommission Managed Firewall
     */
    public readonly decommission!: pulumi.Output<boolean>;
    /**
     * Type of Firewall, e.g: vmseries
     */
    public readonly firewallType!: pulumi.Output<string>;
    /**
     * Instance size to be filled in Instance details Section
     */
    public readonly instanceSize!: pulumi.Output<string>;
    /**
     * Name of the Resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set this to true if you would like to onboard Managed Firewall
     */
    public readonly onboard!: pulumi.Output<boolean>;
    /**
     * Scaling Settings
     */
    public readonly scalingSettings!: pulumi.Output<outputs.ManagedFirewallScalingSetting[]>;
    /**
     * Satatus of deployment
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ManagedFirewallTimeouts | undefined>;
    /**
     * Version to be filled in Instance details Section
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    public readonly waitForRollout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ManagedFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ManagedFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedFirewallArgs | ManagedFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedFirewallState | undefined;
            resourceInputs["accessDetails"] = state ? state.accessDetails : undefined;
            resourceInputs["assignments"] = state ? state.assignments : undefined;
            resourceInputs["authCode"] = state ? state.authCode : undefined;
            resourceInputs["authKey"] = state ? state.authKey : undefined;
            resourceInputs["bootstrap"] = state ? state.bootstrap : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["cloudCredsName"] = state ? state.cloudCredsName : undefined;
            resourceInputs["cloudRegion"] = state ? state.cloudRegion : undefined;
            resourceInputs["decommission"] = state ? state.decommission : undefined;
            resourceInputs["firewallType"] = state ? state.firewallType : undefined;
            resourceInputs["instanceSize"] = state ? state.instanceSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onboard"] = state ? state.onboard : undefined;
            resourceInputs["scalingSettings"] = state ? state.scalingSettings : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["waitForRollout"] = state ? state.waitForRollout : undefined;
        } else {
            const args = argsOrState as ManagedFirewallArgs | undefined;
            if ((!args || args.accessDetails === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessDetails'");
            }
            if ((!args || args.assignments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assignments'");
            }
            if ((!args || args.authCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authCode'");
            }
            if ((!args || args.authKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authKey'");
            }
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.cloudCredsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudCredsName'");
            }
            if ((!args || args.cloudRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudRegion'");
            }
            if ((!args || args.decommission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'decommission'");
            }
            if ((!args || args.firewallType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallType'");
            }
            if ((!args || args.instanceSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceSize'");
            }
            if ((!args || args.onboard === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onboard'");
            }
            if ((!args || args.scalingSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingSettings'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["accessDetails"] = args ? args.accessDetails : undefined;
            resourceInputs["assignments"] = args ? args.assignments : undefined;
            resourceInputs["authCode"] = args ? args.authCode : undefined;
            resourceInputs["authKey"] = args ? args.authKey : undefined;
            resourceInputs["bootstrap"] = args ? args.bootstrap : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["cloudCredsName"] = args ? args.cloudCredsName : undefined;
            resourceInputs["cloudRegion"] = args ? args.cloudRegion : undefined;
            resourceInputs["decommission"] = args ? args.decommission : undefined;
            resourceInputs["firewallType"] = args ? args.firewallType : undefined;
            resourceInputs["instanceSize"] = args ? args.instanceSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onboard"] = args ? args.onboard : undefined;
            resourceInputs["scalingSettings"] = args ? args.scalingSettings : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["waitForRollout"] = args ? args.waitForRollout : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ManagedFirewall resources.
 */
export interface ManagedFirewallState {
    /**
     * Access Details
     */
    accessDetails?: pulumi.Input<pulumi.Input<inputs.ManagedFirewallAccessDetail>[]>;
    /**
     * Assignment Config
     */
    assignments?: pulumi.Input<pulumi.Input<inputs.ManagedFirewallAssignment>[]>;
    /**
     * Instance Auth Key
     */
    authCode?: pulumi.Input<string>;
    /**
     * Instance Auth Key
     */
    authKey?: pulumi.Input<string>;
    /**
     * Region Level IP Prefixes
     */
    bootstrap?: pulumi.Input<string>;
    /**
     * CIDR range
     */
    cidr?: pulumi.Input<string>;
    /**
     * Cloud Account Name
     */
    cloudCredsName?: pulumi.Input<string>;
    /**
     * Cloud Region
     */
    cloudRegion?: pulumi.Input<string>;
    /**
     * Set this to true if you would like to Decommission Managed Firewall
     */
    decommission?: pulumi.Input<boolean>;
    /**
     * Type of Firewall, e.g: vmseries
     */
    firewallType?: pulumi.Input<string>;
    /**
     * Instance size to be filled in Instance details Section
     */
    instanceSize?: pulumi.Input<string>;
    /**
     * Name of the Resource
     */
    name?: pulumi.Input<string>;
    /**
     * Set this to true if you would like to onboard Managed Firewall
     */
    onboard?: pulumi.Input<boolean>;
    /**
     * Scaling Settings
     */
    scalingSettings?: pulumi.Input<pulumi.Input<inputs.ManagedFirewallScalingSetting>[]>;
    /**
     * Satatus of deployment
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ManagedFirewallTimeouts>;
    /**
     * Version to be filled in Instance details Section
     */
    version?: pulumi.Input<string>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ManagedFirewall resource.
 */
export interface ManagedFirewallArgs {
    /**
     * Access Details
     */
    accessDetails: pulumi.Input<pulumi.Input<inputs.ManagedFirewallAccessDetail>[]>;
    /**
     * Assignment Config
     */
    assignments: pulumi.Input<pulumi.Input<inputs.ManagedFirewallAssignment>[]>;
    /**
     * Instance Auth Key
     */
    authCode: pulumi.Input<string>;
    /**
     * Instance Auth Key
     */
    authKey: pulumi.Input<string>;
    /**
     * Region Level IP Prefixes
     */
    bootstrap?: pulumi.Input<string>;
    /**
     * CIDR range
     */
    cidr: pulumi.Input<string>;
    /**
     * Cloud Account Name
     */
    cloudCredsName: pulumi.Input<string>;
    /**
     * Cloud Region
     */
    cloudRegion: pulumi.Input<string>;
    /**
     * Set this to true if you would like to Decommission Managed Firewall
     */
    decommission: pulumi.Input<boolean>;
    /**
     * Type of Firewall, e.g: vmseries
     */
    firewallType: pulumi.Input<string>;
    /**
     * Instance size to be filled in Instance details Section
     */
    instanceSize: pulumi.Input<string>;
    /**
     * Name of the Resource
     */
    name?: pulumi.Input<string>;
    /**
     * Set this to true if you would like to onboard Managed Firewall
     */
    onboard: pulumi.Input<boolean>;
    /**
     * Scaling Settings
     */
    scalingSettings: pulumi.Input<pulumi.Input<inputs.ManagedFirewallScalingSetting>[]>;
    timeouts?: pulumi.Input<inputs.ManagedFirewallTimeouts>;
    /**
     * Version to be filled in Instance details Section
     */
    version: pulumi.Input<string>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}
