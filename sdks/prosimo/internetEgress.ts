// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InternetEgress extends pulumi.CustomResource {
    /**
     * Get an existing InternetEgress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InternetEgressState, opts?: pulumi.CustomResourceOptions): InternetEgress {
        return new InternetEgress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/internetEgress:InternetEgress';

    /**
     * Returns true if the given object is an instance of InternetEgress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InternetEgress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InternetEgress.__pulumiType;
    }

    /**
     * Policy action, e.g: allow, deny
     */
    public readonly action!: pulumi.Output<string>;
    public /*out*/ readonly createdtime!: pulumi.Output<string>;
    public readonly matches!: pulumi.Output<outputs.InternetEgressMatch[]>;
    /**
     * Name of Internet Egress Policy
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Policy Namespace where the policy can be in the action
     */
    public readonly namespaces!: pulumi.Output<outputs.InternetEgressNamespace[] | undefined>;
    /**
     * Network group details to attach to the policy
     */
    public readonly networkGroups!: pulumi.Output<outputs.InternetEgressNetworkGroup[] | undefined>;
    /**
     * Network details to attach to the policy
     */
    public readonly networks!: pulumi.Output<outputs.InternetEgressNetwork[] | undefined>;
    public /*out*/ readonly updatedtime!: pulumi.Output<string>;

    /**
     * Create a InternetEgress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InternetEgressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InternetEgressArgs | InternetEgressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InternetEgressState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["createdtime"] = state ? state.createdtime : undefined;
            resourceInputs["matches"] = state ? state.matches : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaces"] = state ? state.namespaces : undefined;
            resourceInputs["networkGroups"] = state ? state.networkGroups : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["updatedtime"] = state ? state.updatedtime : undefined;
        } else {
            const args = argsOrState as InternetEgressArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.matches === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matches'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["matches"] = args ? args.matches : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaces"] = args ? args.namespaces : undefined;
            resourceInputs["networkGroups"] = args ? args.networkGroups : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["createdtime"] = undefined /*out*/;
            resourceInputs["updatedtime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InternetEgress.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InternetEgress resources.
 */
export interface InternetEgressState {
    /**
     * Policy action, e.g: allow, deny
     */
    action?: pulumi.Input<string>;
    createdtime?: pulumi.Input<string>;
    matches?: pulumi.Input<pulumi.Input<inputs.InternetEgressMatch>[]>;
    /**
     * Name of Internet Egress Policy
     */
    name?: pulumi.Input<string>;
    /**
     * Policy Namespace where the policy can be in the action
     */
    namespaces?: pulumi.Input<pulumi.Input<inputs.InternetEgressNamespace>[]>;
    /**
     * Network group details to attach to the policy
     */
    networkGroups?: pulumi.Input<pulumi.Input<inputs.InternetEgressNetworkGroup>[]>;
    /**
     * Network details to attach to the policy
     */
    networks?: pulumi.Input<pulumi.Input<inputs.InternetEgressNetwork>[]>;
    updatedtime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InternetEgress resource.
 */
export interface InternetEgressArgs {
    /**
     * Policy action, e.g: allow, deny
     */
    action: pulumi.Input<string>;
    matches: pulumi.Input<pulumi.Input<inputs.InternetEgressMatch>[]>;
    /**
     * Name of Internet Egress Policy
     */
    name?: pulumi.Input<string>;
    /**
     * Policy Namespace where the policy can be in the action
     */
    namespaces?: pulumi.Input<pulumi.Input<inputs.InternetEgressNamespace>[]>;
    /**
     * Network group details to attach to the policy
     */
    networkGroups?: pulumi.Input<pulumi.Input<inputs.InternetEgressNetworkGroup>[]>;
    /**
     * Network details to attach to the policy
     */
    networks?: pulumi.Input<pulumi.Input<inputs.InternetEgressNetwork>[]>;
}
