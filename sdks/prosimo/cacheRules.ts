// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CacheRules extends pulumi.CustomResource {
    /**
     * Get an existing CacheRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CacheRulesState, opts?: pulumi.CustomResourceOptions): CacheRules {
        return new CacheRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/cacheRules:CacheRules';

    /**
     * Returns true if the given object is an instance of CacheRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CacheRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheRules.__pulumiType;
    }

    public readonly appDomains!: pulumi.Output<outputs.CacheRulesAppDomain[] | undefined>;
    /**
     * Defaults to false, set it to true if you want to bypass cache.
     */
    public readonly bypassCache!: pulumi.Output<boolean | undefined>;
    public readonly bypassInfos!: pulumi.Output<outputs.CacheRulesBypassInfo[] | undefined>;
    /**
     * Defaults to false, set it to true if you want to skip cache control.
     */
    public readonly cacheControlIgnored!: pulumi.Output<boolean | undefined>;
    public readonly default!: pulumi.Output<boolean | undefined>;
    public readonly editable!: pulumi.Output<boolean | undefined>;
    public readonly isNew!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of cache rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Path pattern list.
     */
    public readonly pathPatterns!: pulumi.Output<outputs.CacheRulesPathPattern[]>;
    /**
     * Defaults to false, set it to true if you want to share static content.
     */
    public readonly shareStaticContent!: pulumi.Output<boolean | undefined>;
    public readonly teamid!: pulumi.Output<string | undefined>;

    /**
     * Create a CacheRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CacheRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CacheRulesArgs | CacheRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CacheRulesState | undefined;
            resourceInputs["appDomains"] = state ? state.appDomains : undefined;
            resourceInputs["bypassCache"] = state ? state.bypassCache : undefined;
            resourceInputs["bypassInfos"] = state ? state.bypassInfos : undefined;
            resourceInputs["cacheControlIgnored"] = state ? state.cacheControlIgnored : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["editable"] = state ? state.editable : undefined;
            resourceInputs["isNew"] = state ? state.isNew : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathPatterns"] = state ? state.pathPatterns : undefined;
            resourceInputs["shareStaticContent"] = state ? state.shareStaticContent : undefined;
            resourceInputs["teamid"] = state ? state.teamid : undefined;
        } else {
            const args = argsOrState as CacheRulesArgs | undefined;
            if ((!args || args.pathPatterns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pathPatterns'");
            }
            resourceInputs["appDomains"] = args ? args.appDomains : undefined;
            resourceInputs["bypassCache"] = args ? args.bypassCache : undefined;
            resourceInputs["bypassInfos"] = args ? args.bypassInfos : undefined;
            resourceInputs["cacheControlIgnored"] = args ? args.cacheControlIgnored : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["editable"] = args ? args.editable : undefined;
            resourceInputs["isNew"] = args ? args.isNew : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathPatterns"] = args ? args.pathPatterns : undefined;
            resourceInputs["shareStaticContent"] = args ? args.shareStaticContent : undefined;
            resourceInputs["teamid"] = args ? args.teamid : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CacheRules resources.
 */
export interface CacheRulesState {
    appDomains?: pulumi.Input<pulumi.Input<inputs.CacheRulesAppDomain>[]>;
    /**
     * Defaults to false, set it to true if you want to bypass cache.
     */
    bypassCache?: pulumi.Input<boolean>;
    bypassInfos?: pulumi.Input<pulumi.Input<inputs.CacheRulesBypassInfo>[]>;
    /**
     * Defaults to false, set it to true if you want to skip cache control.
     */
    cacheControlIgnored?: pulumi.Input<boolean>;
    default?: pulumi.Input<boolean>;
    editable?: pulumi.Input<boolean>;
    isNew?: pulumi.Input<boolean>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of cache rule
     */
    name?: pulumi.Input<string>;
    /**
     * Path pattern list.
     */
    pathPatterns?: pulumi.Input<pulumi.Input<inputs.CacheRulesPathPattern>[]>;
    /**
     * Defaults to false, set it to true if you want to share static content.
     */
    shareStaticContent?: pulumi.Input<boolean>;
    teamid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CacheRules resource.
 */
export interface CacheRulesArgs {
    appDomains?: pulumi.Input<pulumi.Input<inputs.CacheRulesAppDomain>[]>;
    /**
     * Defaults to false, set it to true if you want to bypass cache.
     */
    bypassCache?: pulumi.Input<boolean>;
    bypassInfos?: pulumi.Input<pulumi.Input<inputs.CacheRulesBypassInfo>[]>;
    /**
     * Defaults to false, set it to true if you want to skip cache control.
     */
    cacheControlIgnored?: pulumi.Input<boolean>;
    default?: pulumi.Input<boolean>;
    editable?: pulumi.Input<boolean>;
    isNew?: pulumi.Input<boolean>;
    /**
     * Name of cache rule
     */
    name?: pulumi.Input<string>;
    /**
     * Path pattern list.
     */
    pathPatterns: pulumi.Input<pulumi.Input<inputs.CacheRulesPathPattern>[]>;
    /**
     * Defaults to false, set it to true if you want to share static content.
     */
    shareStaticContent?: pulumi.Input<boolean>;
    teamid?: pulumi.Input<string>;
}
