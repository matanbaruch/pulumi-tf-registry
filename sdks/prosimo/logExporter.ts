// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LogExporter extends pulumi.CustomResource {
    /**
     * Get an existing LogExporter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogExporterState, opts?: pulumi.CustomResourceOptions): LogExporter {
        return new LogExporter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/logExporter:LogExporter';

    /**
     * Returns true if the given object is an instance of LogExporter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogExporter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogExporter.__pulumiType;
    }

    /**
     * Authentication token from receiver endpoint
     */
    public readonly authToken!: pulumi.Output<string>;
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * Description about log receiver
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * IP address of log receiver endpoint
     */
    public readonly ip!: pulumi.Output<string>;
    /**
     * Name of log receiver endpoint
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * port of log receiver endpoint
     */
    public readonly tcpPort!: pulumi.Output<number>;
    public /*out*/ readonly teamId!: pulumi.Output<string>;
    /**
     * Defaults to false, set it true to enable tls verification
     */
    public readonly tlsEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a LogExporter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogExporterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogExporterArgs | LogExporterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogExporterState | undefined;
            resourceInputs["authToken"] = state ? state.authToken : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tcpPort"] = state ? state.tcpPort : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["tlsEnabled"] = state ? state.tlsEnabled : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as LogExporterArgs | undefined;
            if ((!args || args.authToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authToken'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.tcpPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tcpPort'");
            }
            if ((!args || args.tlsEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tlsEnabled'");
            }
            resourceInputs["authToken"] = args?.authToken ? pulumi.secret(args.authToken) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tcpPort"] = args ? args.tcpPort : undefined;
            resourceInputs["tlsEnabled"] = args ? args.tlsEnabled : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["teamId"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LogExporter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogExporter resources.
 */
export interface LogExporterState {
    /**
     * Authentication token from receiver endpoint
     */
    authToken?: pulumi.Input<string>;
    createdTime?: pulumi.Input<string>;
    /**
     * Description about log receiver
     */
    description?: pulumi.Input<string>;
    /**
     * IP address of log receiver endpoint
     */
    ip?: pulumi.Input<string>;
    /**
     * Name of log receiver endpoint
     */
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    /**
     * port of log receiver endpoint
     */
    tcpPort?: pulumi.Input<number>;
    teamId?: pulumi.Input<string>;
    /**
     * Defaults to false, set it true to enable tls verification
     */
    tlsEnabled?: pulumi.Input<boolean>;
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogExporter resource.
 */
export interface LogExporterArgs {
    /**
     * Authentication token from receiver endpoint
     */
    authToken: pulumi.Input<string>;
    /**
     * Description about log receiver
     */
    description: pulumi.Input<string>;
    /**
     * IP address of log receiver endpoint
     */
    ip: pulumi.Input<string>;
    /**
     * Name of log receiver endpoint
     */
    name?: pulumi.Input<string>;
    /**
     * port of log receiver endpoint
     */
    tcpPort: pulumi.Input<number>;
    /**
     * Defaults to false, set it true to enable tls verification
     */
    tlsEnabled: pulumi.Input<boolean>;
}
