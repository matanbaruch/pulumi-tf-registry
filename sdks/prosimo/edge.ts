// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Edge extends pulumi.CustomResource {
    /**
     * Get an existing Edge resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EdgeState, opts?: pulumi.CustomResourceOptions): Edge {
        return new Edge(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/edge:Edge';

    /**
     * Returns true if the given object is an instance of Edge.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Edge {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Edge.__pulumiType;
    }

    /**
     * Name of the Cloud Account
     */
    public readonly cloudName!: pulumi.Output<string>;
    /**
     * Cloud Region
     */
    public readonly cloudRegion!: pulumi.Output<string>;
    /**
     * Name of the Cloud Service Provider, e.g: AWS, AZURE, GCP
     */
    public /*out*/ readonly cloudType!: pulumi.Output<string>;
    /**
     * Name of the edge cluster
     */
    public /*out*/ readonly clusterName!: pulumi.Output<string>;
    /**
     * Set this to true if you would like the edge to be decommissioned.
     */
    public readonly decommissionEdge!: pulumi.Output<boolean>;
    /**
     * Set this to true if you would like to deploy the edge
     */
    public readonly deployEdge!: pulumi.Output<boolean>;
    /**
     * Subnet Range
     */
    public readonly ipRange!: pulumi.Output<string>;
    public readonly nodeSizeSettings!: pulumi.Output<outputs.EdgeNodeSizeSetting[] | undefined>;
    /**
     * pappFqdn URL
     */
    public /*out*/ readonly pappFqdn!: pulumi.Output<string>;
    public /*out*/ readonly regStatus!: pulumi.Output<string>;
    /**
     * Deployment Status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly teamId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EdgeTimeouts | undefined>;
    /**
     * Name of source vpc, applicable when vpc_source is existing vpc
     */
    public readonly vpcName!: pulumi.Output<string | undefined>;
    /**
     * VPC Source: Available options: Prosimo/Existing, applicable only for AWS
     */
    public readonly vpcSource!: pulumi.Output<string | undefined>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    public readonly waitForRollout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Edge resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EdgeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EdgeArgs | EdgeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EdgeState | undefined;
            resourceInputs["cloudName"] = state ? state.cloudName : undefined;
            resourceInputs["cloudRegion"] = state ? state.cloudRegion : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["decommissionEdge"] = state ? state.decommissionEdge : undefined;
            resourceInputs["deployEdge"] = state ? state.deployEdge : undefined;
            resourceInputs["ipRange"] = state ? state.ipRange : undefined;
            resourceInputs["nodeSizeSettings"] = state ? state.nodeSizeSettings : undefined;
            resourceInputs["pappFqdn"] = state ? state.pappFqdn : undefined;
            resourceInputs["regStatus"] = state ? state.regStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcName"] = state ? state.vpcName : undefined;
            resourceInputs["vpcSource"] = state ? state.vpcSource : undefined;
            resourceInputs["waitForRollout"] = state ? state.waitForRollout : undefined;
        } else {
            const args = argsOrState as EdgeArgs | undefined;
            if ((!args || args.cloudName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudName'");
            }
            if ((!args || args.cloudRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudRegion'");
            }
            if ((!args || args.decommissionEdge === undefined) && !opts.urn) {
                throw new Error("Missing required property 'decommissionEdge'");
            }
            if ((!args || args.deployEdge === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployEdge'");
            }
            if ((!args || args.ipRange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipRange'");
            }
            resourceInputs["cloudName"] = args ? args.cloudName : undefined;
            resourceInputs["cloudRegion"] = args ? args.cloudRegion : undefined;
            resourceInputs["decommissionEdge"] = args ? args.decommissionEdge : undefined;
            resourceInputs["deployEdge"] = args ? args.deployEdge : undefined;
            resourceInputs["ipRange"] = args ? args.ipRange : undefined;
            resourceInputs["nodeSizeSettings"] = args ? args.nodeSizeSettings : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcName"] = args ? args.vpcName : undefined;
            resourceInputs["vpcSource"] = args ? args.vpcSource : undefined;
            resourceInputs["waitForRollout"] = args ? args.waitForRollout : undefined;
            resourceInputs["cloudType"] = undefined /*out*/;
            resourceInputs["clusterName"] = undefined /*out*/;
            resourceInputs["pappFqdn"] = undefined /*out*/;
            resourceInputs["regStatus"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["teamId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Edge.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Edge resources.
 */
export interface EdgeState {
    /**
     * Name of the Cloud Account
     */
    cloudName?: pulumi.Input<string>;
    /**
     * Cloud Region
     */
    cloudRegion?: pulumi.Input<string>;
    /**
     * Name of the Cloud Service Provider, e.g: AWS, AZURE, GCP
     */
    cloudType?: pulumi.Input<string>;
    /**
     * Name of the edge cluster
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Set this to true if you would like the edge to be decommissioned.
     */
    decommissionEdge?: pulumi.Input<boolean>;
    /**
     * Set this to true if you would like to deploy the edge
     */
    deployEdge?: pulumi.Input<boolean>;
    /**
     * Subnet Range
     */
    ipRange?: pulumi.Input<string>;
    nodeSizeSettings?: pulumi.Input<pulumi.Input<inputs.EdgeNodeSizeSetting>[]>;
    /**
     * pappFqdn URL
     */
    pappFqdn?: pulumi.Input<string>;
    regStatus?: pulumi.Input<string>;
    /**
     * Deployment Status
     */
    status?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EdgeTimeouts>;
    /**
     * Name of source vpc, applicable when vpc_source is existing vpc
     */
    vpcName?: pulumi.Input<string>;
    /**
     * VPC Source: Available options: Prosimo/Existing, applicable only for AWS
     */
    vpcSource?: pulumi.Input<string>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Edge resource.
 */
export interface EdgeArgs {
    /**
     * Name of the Cloud Account
     */
    cloudName: pulumi.Input<string>;
    /**
     * Cloud Region
     */
    cloudRegion: pulumi.Input<string>;
    /**
     * Set this to true if you would like the edge to be decommissioned.
     */
    decommissionEdge: pulumi.Input<boolean>;
    /**
     * Set this to true if you would like to deploy the edge
     */
    deployEdge: pulumi.Input<boolean>;
    /**
     * Subnet Range
     */
    ipRange: pulumi.Input<string>;
    nodeSizeSettings?: pulumi.Input<pulumi.Input<inputs.EdgeNodeSizeSetting>[]>;
    timeouts?: pulumi.Input<inputs.EdgeTimeouts>;
    /**
     * Name of source vpc, applicable when vpc_source is existing vpc
     */
    vpcName?: pulumi.Input<string>;
    /**
     * VPC Source: Available options: Prosimo/Existing, applicable only for AWS
     */
    vpcSource?: pulumi.Input<string>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}
