// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Idp extends pulumi.CustomResource {
    /**
     * Get an existing Idp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdpState, opts?: pulumi.CustomResourceOptions): Idp {
        return new Idp(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/idp:Idp';

    /**
     * Returns true if the given object is an instance of Idp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Idp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Idp.__pulumiType;
    }

    /**
     * IDP account url
     */
    public readonly accountUrl!: pulumi.Output<string>;
    public readonly apiCredProvided!: pulumi.Output<string>;
    public /*out*/ readonly apiCredsFileName!: pulumi.Output<boolean>;
    /**
     * Authentication type, e.g: oidc, saml
     */
    public readonly authType!: pulumi.Output<string>;
    /**
     * Identity provider, choose among okta, azure_ad, one_login, ping-one, ping-federate, google, other
     */
    public readonly idpAccount!: pulumi.Output<string>;
    public /*out*/ readonly isFileUpdated!: pulumi.Output<boolean>;
    /**
     * Auth type OIDC options
     */
    public readonly oidc!: pulumi.Output<outputs.IdpOidc | undefined>;
    public readonly partner!: pulumi.Output<outputs.IdpPartner | undefined>;
    public readonly saml!: pulumi.Output<outputs.IdpSaml | undefined>;
    /**
     * IDP type, e.g: primary, partner
     */
    public readonly selectType!: pulumi.Output<string>;
    /**
     * IDP status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * IDP subnet range
     */
    public /*out*/ readonly subnet!: pulumi.Output<string>;
    public /*out*/ readonly teamId!: pulumi.Output<string>;

    /**
     * Create a Idp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdpArgs | IdpState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdpState | undefined;
            resourceInputs["accountUrl"] = state ? state.accountUrl : undefined;
            resourceInputs["apiCredProvided"] = state ? state.apiCredProvided : undefined;
            resourceInputs["apiCredsFileName"] = state ? state.apiCredsFileName : undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["idpAccount"] = state ? state.idpAccount : undefined;
            resourceInputs["isFileUpdated"] = state ? state.isFileUpdated : undefined;
            resourceInputs["oidc"] = state ? state.oidc : undefined;
            resourceInputs["partner"] = state ? state.partner : undefined;
            resourceInputs["saml"] = state ? state.saml : undefined;
            resourceInputs["selectType"] = state ? state.selectType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as IdpArgs | undefined;
            if ((!args || args.accountUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountUrl'");
            }
            if ((!args || args.apiCredProvided === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiCredProvided'");
            }
            if ((!args || args.authType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authType'");
            }
            if ((!args || args.idpAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'idpAccount'");
            }
            if ((!args || args.selectType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'selectType'");
            }
            resourceInputs["accountUrl"] = args ? args.accountUrl : undefined;
            resourceInputs["apiCredProvided"] = args ? args.apiCredProvided : undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["idpAccount"] = args ? args.idpAccount : undefined;
            resourceInputs["oidc"] = args ? args.oidc : undefined;
            resourceInputs["partner"] = args ? args.partner : undefined;
            resourceInputs["saml"] = args ? args.saml : undefined;
            resourceInputs["selectType"] = args ? args.selectType : undefined;
            resourceInputs["apiCredsFileName"] = undefined /*out*/;
            resourceInputs["isFileUpdated"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnet"] = undefined /*out*/;
            resourceInputs["teamId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Idp.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Idp resources.
 */
export interface IdpState {
    /**
     * IDP account url
     */
    accountUrl?: pulumi.Input<string>;
    apiCredProvided?: pulumi.Input<string>;
    apiCredsFileName?: pulumi.Input<boolean>;
    /**
     * Authentication type, e.g: oidc, saml
     */
    authType?: pulumi.Input<string>;
    /**
     * Identity provider, choose among okta, azure_ad, one_login, ping-one, ping-federate, google, other
     */
    idpAccount?: pulumi.Input<string>;
    isFileUpdated?: pulumi.Input<boolean>;
    /**
     * Auth type OIDC options
     */
    oidc?: pulumi.Input<inputs.IdpOidc>;
    partner?: pulumi.Input<inputs.IdpPartner>;
    saml?: pulumi.Input<inputs.IdpSaml>;
    /**
     * IDP type, e.g: primary, partner
     */
    selectType?: pulumi.Input<string>;
    /**
     * IDP status
     */
    status?: pulumi.Input<string>;
    /**
     * IDP subnet range
     */
    subnet?: pulumi.Input<string>;
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Idp resource.
 */
export interface IdpArgs {
    /**
     * IDP account url
     */
    accountUrl: pulumi.Input<string>;
    apiCredProvided: pulumi.Input<string>;
    /**
     * Authentication type, e.g: oidc, saml
     */
    authType: pulumi.Input<string>;
    /**
     * Identity provider, choose among okta, azure_ad, one_login, ping-one, ping-federate, google, other
     */
    idpAccount: pulumi.Input<string>;
    /**
     * Auth type OIDC options
     */
    oidc?: pulumi.Input<inputs.IdpOidc>;
    partner?: pulumi.Input<inputs.IdpPartner>;
    saml?: pulumi.Input<inputs.IdpSaml>;
    /**
     * IDP type, e.g: primary, partner
     */
    selectType: pulumi.Input<string>;
}
