// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SharedServices extends pulumi.CustomResource {
    /**
     * Get an existing SharedServices resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedServicesState, opts?: pulumi.CustomResourceOptions): SharedServices {
        return new SharedServices(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prosimo:index/sharedServices:SharedServices';

    /**
     * Returns true if the given object is an instance of SharedServices.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedServices {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedServices.__pulumiType;
    }

    /**
     * Set this to true if you would like to decommission an already onboarded Shared Service
     */
    public readonly decommission!: pulumi.Output<boolean>;
    /**
     * Name of the Shared Service
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Set this to true if you would like to onboard a saved Shared Service with out any config changes
     */
    public readonly onboard!: pulumi.Output<boolean>;
    public readonly regions!: pulumi.Output<outputs.SharedServicesRegion[] | undefined>;
    /**
     * Type of Shared Service
     */
    public readonly serviceType!: pulumi.Output<string | undefined>;
    /**
     * Shared Service Deployment Status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Resource TEAM ID
     */
    public /*out*/ readonly teamid!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SharedServicesTimeouts | undefined>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    public readonly waitForRollout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SharedServices resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedServicesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedServicesArgs | SharedServicesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedServicesState | undefined;
            resourceInputs["decommission"] = state ? state.decommission : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onboard"] = state ? state.onboard : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["serviceType"] = state ? state.serviceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["teamid"] = state ? state.teamid : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["waitForRollout"] = state ? state.waitForRollout : undefined;
        } else {
            const args = argsOrState as SharedServicesArgs | undefined;
            if ((!args || args.decommission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'decommission'");
            }
            if ((!args || args.onboard === undefined) && !opts.urn) {
                throw new Error("Missing required property 'onboard'");
            }
            resourceInputs["decommission"] = args ? args.decommission : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onboard"] = args ? args.onboard : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["serviceType"] = args ? args.serviceType : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["waitForRollout"] = args ? args.waitForRollout : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["teamid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedServices.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SharedServices resources.
 */
export interface SharedServicesState {
    /**
     * Set this to true if you would like to decommission an already onboarded Shared Service
     */
    decommission?: pulumi.Input<boolean>;
    /**
     * Name of the Shared Service
     */
    name?: pulumi.Input<string>;
    /**
     * Set this to true if you would like to onboard a saved Shared Service with out any config changes
     */
    onboard?: pulumi.Input<boolean>;
    regions?: pulumi.Input<pulumi.Input<inputs.SharedServicesRegion>[]>;
    /**
     * Type of Shared Service
     */
    serviceType?: pulumi.Input<string>;
    /**
     * Shared Service Deployment Status
     */
    status?: pulumi.Input<string>;
    /**
     * Resource TEAM ID
     */
    teamid?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SharedServicesTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SharedServices resource.
 */
export interface SharedServicesArgs {
    /**
     * Set this to true if you would like to decommission an already onboarded Shared Service
     */
    decommission: pulumi.Input<boolean>;
    /**
     * Name of the Shared Service
     */
    name?: pulumi.Input<string>;
    /**
     * Set this to true if you would like to onboard a saved Shared Service with out any config changes
     */
    onboard: pulumi.Input<boolean>;
    regions?: pulumi.Input<pulumi.Input<inputs.SharedServicesRegion>[]>;
    /**
     * Type of Shared Service
     */
    serviceType?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SharedServicesTimeouts>;
    /**
     * Wait for the rollout of the task to complete. Defaults to true.
     */
    waitForRollout?: pulumi.Input<boolean>;
}
