// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetPackageFileArgs, GetPackageFileResult, GetPackageFileOutputArgs } from "./getPackageFile";
export const getPackageFile: typeof import("./getPackageFile").getPackageFile = null as any;
export const getPackageFileOutput: typeof import("./getPackageFile").getPackageFileOutput = null as any;
utilities.lazyLoad(exports, ["getPackageFile","getPackageFileOutput"], () => require("./getPackageFile"));

export { GetRequirementsFileArgs, GetRequirementsFileResult, GetRequirementsFileOutputArgs } from "./getRequirementsFile";
export const getRequirementsFile: typeof import("./getRequirementsFile").getRequirementsFile = null as any;
export const getRequirementsFileOutput: typeof import("./getRequirementsFile").getRequirementsFileOutput = null as any;
utilities.lazyLoad(exports, ["getRequirementsFile","getRequirementsFileOutput"], () => require("./getRequirementsFile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};
pulumi.runtime.registerResourcePackage("pypi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pypi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
