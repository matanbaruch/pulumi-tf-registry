// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Extractor extends pulumi.CustomResource {
    /**
     * Get an existing Extractor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtractorState, opts?: pulumi.CustomResourceOptions): Extractor {
        return new Extractor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'graylog:index/extractor:Extractor';

    /**
     * Returns true if the given object is an instance of Extractor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Extractor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Extractor.__pulumiType;
    }

    public readonly conditionType!: pulumi.Output<string>;
    public readonly conditionValue!: pulumi.Output<string | undefined>;
    public readonly converters!: pulumi.Output<outputs.ExtractorConverter[] | undefined>;
    public readonly cursorStrategy!: pulumi.Output<string>;
    public readonly extractorConfig!: pulumi.Output<string>;
    public readonly extractorId!: pulumi.Output<string>;
    public readonly inputId!: pulumi.Output<string>;
    public readonly order!: pulumi.Output<number | undefined>;
    public readonly sourceField!: pulumi.Output<string>;
    public readonly targetField!: pulumi.Output<string | undefined>;
    public readonly title!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Extractor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtractorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtractorArgs | ExtractorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtractorState | undefined;
            resourceInputs["conditionType"] = state ? state.conditionType : undefined;
            resourceInputs["conditionValue"] = state ? state.conditionValue : undefined;
            resourceInputs["converters"] = state ? state.converters : undefined;
            resourceInputs["cursorStrategy"] = state ? state.cursorStrategy : undefined;
            resourceInputs["extractorConfig"] = state ? state.extractorConfig : undefined;
            resourceInputs["extractorId"] = state ? state.extractorId : undefined;
            resourceInputs["inputId"] = state ? state.inputId : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["sourceField"] = state ? state.sourceField : undefined;
            resourceInputs["targetField"] = state ? state.targetField : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ExtractorArgs | undefined;
            if ((!args || args.conditionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditionType'");
            }
            if ((!args || args.cursorStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cursorStrategy'");
            }
            if ((!args || args.extractorConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extractorConfig'");
            }
            if ((!args || args.inputId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputId'");
            }
            if ((!args || args.sourceField === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceField'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["conditionType"] = args ? args.conditionType : undefined;
            resourceInputs["conditionValue"] = args ? args.conditionValue : undefined;
            resourceInputs["converters"] = args ? args.converters : undefined;
            resourceInputs["cursorStrategy"] = args ? args.cursorStrategy : undefined;
            resourceInputs["extractorConfig"] = args ? args.extractorConfig : undefined;
            resourceInputs["extractorId"] = args ? args.extractorId : undefined;
            resourceInputs["inputId"] = args ? args.inputId : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["sourceField"] = args ? args.sourceField : undefined;
            resourceInputs["targetField"] = args ? args.targetField : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Extractor.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Extractor resources.
 */
export interface ExtractorState {
    conditionType?: pulumi.Input<string>;
    conditionValue?: pulumi.Input<string>;
    converters?: pulumi.Input<pulumi.Input<inputs.ExtractorConverter>[]>;
    cursorStrategy?: pulumi.Input<string>;
    extractorConfig?: pulumi.Input<string>;
    extractorId?: pulumi.Input<string>;
    inputId?: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    sourceField?: pulumi.Input<string>;
    targetField?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Extractor resource.
 */
export interface ExtractorArgs {
    conditionType: pulumi.Input<string>;
    conditionValue?: pulumi.Input<string>;
    converters?: pulumi.Input<pulumi.Input<inputs.ExtractorConverter>[]>;
    cursorStrategy: pulumi.Input<string>;
    extractorConfig: pulumi.Input<string>;
    extractorId?: pulumi.Input<string>;
    inputId: pulumi.Input<string>;
    order?: pulumi.Input<number>;
    sourceField: pulumi.Input<string>;
    targetField?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    type: pulumi.Input<string>;
}
