// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlarmCallbackArgs, AlarmCallbackState } from "./alarmCallback";
export type AlarmCallback = import("./alarmCallback").AlarmCallback;
export const AlarmCallback: typeof import("./alarmCallback").AlarmCallback = null as any;
utilities.lazyLoad(exports, ["AlarmCallback"], () => require("./alarmCallback"));

export { AlertConditionArgs, AlertConditionState } from "./alertCondition";
export type AlertCondition = import("./alertCondition").AlertCondition;
export const AlertCondition: typeof import("./alertCondition").AlertCondition = null as any;
utilities.lazyLoad(exports, ["AlertCondition"], () => require("./alertCondition"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardWidgetArgs, DashboardWidgetState } from "./dashboardWidget";
export type DashboardWidget = import("./dashboardWidget").DashboardWidget;
export const DashboardWidget: typeof import("./dashboardWidget").DashboardWidget = null as any;
utilities.lazyLoad(exports, ["DashboardWidget"], () => require("./dashboardWidget"));

export { DashboardWidgetPositionsArgs, DashboardWidgetPositionsState } from "./dashboardWidgetPositions";
export type DashboardWidgetPositions = import("./dashboardWidgetPositions").DashboardWidgetPositions;
export const DashboardWidgetPositions: typeof import("./dashboardWidgetPositions").DashboardWidgetPositions = null as any;
utilities.lazyLoad(exports, ["DashboardWidgetPositions"], () => require("./dashboardWidgetPositions"));

export { EventDefinitionArgs, EventDefinitionState } from "./eventDefinition";
export type EventDefinition = import("./eventDefinition").EventDefinition;
export const EventDefinition: typeof import("./eventDefinition").EventDefinition = null as any;
utilities.lazyLoad(exports, ["EventDefinition"], () => require("./eventDefinition"));

export { EventNotificationArgs, EventNotificationState } from "./eventNotification";
export type EventNotification = import("./eventNotification").EventNotification;
export const EventNotification: typeof import("./eventNotification").EventNotification = null as any;
utilities.lazyLoad(exports, ["EventNotification"], () => require("./eventNotification"));

export { ExtractorArgs, ExtractorState } from "./extractor";
export type Extractor = import("./extractor").Extractor;
export const Extractor: typeof import("./extractor").Extractor = null as any;
utilities.lazyLoad(exports, ["Extractor"], () => require("./extractor"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetIndexSetArgs, GetIndexSetResult, GetIndexSetOutputArgs } from "./getIndexSet";
export const getIndexSet: typeof import("./getIndexSet").getIndexSet = null as any;
export const getIndexSetOutput: typeof import("./getIndexSet").getIndexSetOutput = null as any;
utilities.lazyLoad(exports, ["getIndexSet","getIndexSetOutput"], () => require("./getIndexSet"));

export { GetSidecarArgs, GetSidecarResult, GetSidecarOutputArgs } from "./getSidecar";
export const getSidecar: typeof import("./getSidecar").getSidecar = null as any;
export const getSidecarOutput: typeof import("./getSidecar").getSidecarOutput = null as any;
utilities.lazyLoad(exports, ["getSidecar","getSidecarOutput"], () => require("./getSidecar"));

export { GetStreamArgs, GetStreamResult, GetStreamOutputArgs } from "./getStream";
export const getStream: typeof import("./getStream").getStream = null as any;
export const getStreamOutput: typeof import("./getStream").getStreamOutput = null as any;
utilities.lazyLoad(exports, ["getStream","getStreamOutput"], () => require("./getStream"));

export { GrokPatternArgs, GrokPatternState } from "./grokPattern";
export type GrokPattern = import("./grokPattern").GrokPattern;
export const GrokPattern: typeof import("./grokPattern").GrokPattern = null as any;
utilities.lazyLoad(exports, ["GrokPattern"], () => require("./grokPattern"));

export { IndexSetArgs, IndexSetState } from "./indexSet";
export type IndexSet = import("./indexSet").IndexSet;
export const IndexSet: typeof import("./indexSet").IndexSet = null as any;
utilities.lazyLoad(exports, ["IndexSet"], () => require("./indexSet"));

export { InputArgs, InputState } from "./input";
export type Input = import("./input").Input;
export const Input: typeof import("./input").Input = null as any;
utilities.lazyLoad(exports, ["Input"], () => require("./input"));

export { InputStaticFieldsArgs, InputStaticFieldsState } from "./inputStaticFields";
export type InputStaticFields = import("./inputStaticFields").InputStaticFields;
export const InputStaticFields: typeof import("./inputStaticFields").InputStaticFields = null as any;
utilities.lazyLoad(exports, ["InputStaticFields"], () => require("./inputStaticFields"));

export { LdapSettingArgs, LdapSettingState } from "./ldapSetting";
export type LdapSetting = import("./ldapSetting").LdapSetting;
export const LdapSetting: typeof import("./ldapSetting").LdapSetting = null as any;
utilities.lazyLoad(exports, ["LdapSetting"], () => require("./ldapSetting"));

export { OutputArgs, OutputState } from "./output";
export type Output = import("./output").Output;
export const Output: typeof import("./output").Output = null as any;
utilities.lazyLoad(exports, ["Output"], () => require("./output"));

export { PipelineArgs, PipelineState } from "./pipeline";
export type Pipeline = import("./pipeline").Pipeline;
export const Pipeline: typeof import("./pipeline").Pipeline = null as any;
utilities.lazyLoad(exports, ["Pipeline"], () => require("./pipeline"));

export { PipelineConnectionArgs, PipelineConnectionState } from "./pipelineConnection";
export type PipelineConnection = import("./pipelineConnection").PipelineConnection;
export const PipelineConnection: typeof import("./pipelineConnection").PipelineConnection = null as any;
utilities.lazyLoad(exports, ["PipelineConnection"], () => require("./pipelineConnection"));

export { PipelineRuleArgs, PipelineRuleState } from "./pipelineRule";
export type PipelineRule = import("./pipelineRule").PipelineRule;
export const PipelineRule: typeof import("./pipelineRule").PipelineRule = null as any;
utilities.lazyLoad(exports, ["PipelineRule"], () => require("./pipelineRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { SidecarCollectorArgs, SidecarCollectorState } from "./sidecarCollector";
export type SidecarCollector = import("./sidecarCollector").SidecarCollector;
export const SidecarCollector: typeof import("./sidecarCollector").SidecarCollector = null as any;
utilities.lazyLoad(exports, ["SidecarCollector"], () => require("./sidecarCollector"));

export { SidecarConfigurationArgs, SidecarConfigurationState } from "./sidecarConfiguration";
export type SidecarConfiguration = import("./sidecarConfiguration").SidecarConfiguration;
export const SidecarConfiguration: typeof import("./sidecarConfiguration").SidecarConfiguration = null as any;
utilities.lazyLoad(exports, ["SidecarConfiguration"], () => require("./sidecarConfiguration"));

export { SidecarsArgs, SidecarsState } from "./sidecars";
export type Sidecars = import("./sidecars").Sidecars;
export const Sidecars: typeof import("./sidecars").Sidecars = null as any;
utilities.lazyLoad(exports, ["Sidecars"], () => require("./sidecars"));

export { StreamArgs, StreamState } from "./stream";
export type Stream = import("./stream").Stream;
export const Stream: typeof import("./stream").Stream = null as any;
utilities.lazyLoad(exports, ["Stream"], () => require("./stream"));

export { StreamOutputArgs, StreamOutputState } from "./streamOutput";
export type StreamOutput = import("./streamOutput").StreamOutput;
export const StreamOutput: typeof import("./streamOutput").StreamOutput = null as any;
utilities.lazyLoad(exports, ["StreamOutput"], () => require("./streamOutput"));

export { StreamRuleArgs, StreamRuleState } from "./streamRule";
export type StreamRule = import("./streamRule").StreamRule;
export const StreamRule: typeof import("./streamRule").StreamRule = null as any;
utilities.lazyLoad(exports, ["StreamRule"], () => require("./streamRule"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "graylog:index/alarmCallback:AlarmCallback":
                return new AlarmCallback(name, <any>undefined, { urn })
            case "graylog:index/alertCondition:AlertCondition":
                return new AlertCondition(name, <any>undefined, { urn })
            case "graylog:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "graylog:index/dashboardWidget:DashboardWidget":
                return new DashboardWidget(name, <any>undefined, { urn })
            case "graylog:index/dashboardWidgetPositions:DashboardWidgetPositions":
                return new DashboardWidgetPositions(name, <any>undefined, { urn })
            case "graylog:index/eventDefinition:EventDefinition":
                return new EventDefinition(name, <any>undefined, { urn })
            case "graylog:index/eventNotification:EventNotification":
                return new EventNotification(name, <any>undefined, { urn })
            case "graylog:index/extractor:Extractor":
                return new Extractor(name, <any>undefined, { urn })
            case "graylog:index/grokPattern:GrokPattern":
                return new GrokPattern(name, <any>undefined, { urn })
            case "graylog:index/indexSet:IndexSet":
                return new IndexSet(name, <any>undefined, { urn })
            case "graylog:index/input:Input":
                return new Input(name, <any>undefined, { urn })
            case "graylog:index/inputStaticFields:InputStaticFields":
                return new InputStaticFields(name, <any>undefined, { urn })
            case "graylog:index/ldapSetting:LdapSetting":
                return new LdapSetting(name, <any>undefined, { urn })
            case "graylog:index/output:Output":
                return new Output(name, <any>undefined, { urn })
            case "graylog:index/pipeline:Pipeline":
                return new Pipeline(name, <any>undefined, { urn })
            case "graylog:index/pipelineConnection:PipelineConnection":
                return new PipelineConnection(name, <any>undefined, { urn })
            case "graylog:index/pipelineRule:PipelineRule":
                return new PipelineRule(name, <any>undefined, { urn })
            case "graylog:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "graylog:index/sidecarCollector:SidecarCollector":
                return new SidecarCollector(name, <any>undefined, { urn })
            case "graylog:index/sidecarConfiguration:SidecarConfiguration":
                return new SidecarConfiguration(name, <any>undefined, { urn })
            case "graylog:index/sidecars:Sidecars":
                return new Sidecars(name, <any>undefined, { urn })
            case "graylog:index/stream:Stream":
                return new Stream(name, <any>undefined, { urn })
            case "graylog:index/streamOutput:StreamOutput":
                return new StreamOutput(name, <any>undefined, { urn })
            case "graylog:index/streamRule:StreamRule":
                return new StreamRule(name, <any>undefined, { urn })
            case "graylog:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("graylog", "index/alarmCallback", _module)
pulumi.runtime.registerResourceModule("graylog", "index/alertCondition", _module)
pulumi.runtime.registerResourceModule("graylog", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("graylog", "index/dashboardWidget", _module)
pulumi.runtime.registerResourceModule("graylog", "index/dashboardWidgetPositions", _module)
pulumi.runtime.registerResourceModule("graylog", "index/eventDefinition", _module)
pulumi.runtime.registerResourceModule("graylog", "index/eventNotification", _module)
pulumi.runtime.registerResourceModule("graylog", "index/extractor", _module)
pulumi.runtime.registerResourceModule("graylog", "index/grokPattern", _module)
pulumi.runtime.registerResourceModule("graylog", "index/indexSet", _module)
pulumi.runtime.registerResourceModule("graylog", "index/input", _module)
pulumi.runtime.registerResourceModule("graylog", "index/inputStaticFields", _module)
pulumi.runtime.registerResourceModule("graylog", "index/ldapSetting", _module)
pulumi.runtime.registerResourceModule("graylog", "index/output", _module)
pulumi.runtime.registerResourceModule("graylog", "index/pipeline", _module)
pulumi.runtime.registerResourceModule("graylog", "index/pipelineConnection", _module)
pulumi.runtime.registerResourceModule("graylog", "index/pipelineRule", _module)
pulumi.runtime.registerResourceModule("graylog", "index/role", _module)
pulumi.runtime.registerResourceModule("graylog", "index/sidecarCollector", _module)
pulumi.runtime.registerResourceModule("graylog", "index/sidecarConfiguration", _module)
pulumi.runtime.registerResourceModule("graylog", "index/sidecars", _module)
pulumi.runtime.registerResourceModule("graylog", "index/stream", _module)
pulumi.runtime.registerResourceModule("graylog", "index/streamOutput", _module)
pulumi.runtime.registerResourceModule("graylog", "index/streamRule", _module)
pulumi.runtime.registerResourceModule("graylog", "index/user", _module)
pulumi.runtime.registerResourcePackage("graylog", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:graylog") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
