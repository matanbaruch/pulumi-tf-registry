// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'graylog:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public readonly clientAddress!: pulumi.Output<string>;
    public readonly email!: pulumi.Output<string>;
    public readonly external!: pulumi.Output<boolean>;
    public readonly fullName!: pulumi.Output<string>;
    public /*out*/ readonly lastActivity!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly permissions!: pulumi.Output<string[]>;
    public readonly readOnly!: pulumi.Output<boolean>;
    public readonly roles!: pulumi.Output<string[] | undefined>;
    public readonly sessionActive!: pulumi.Output<boolean>;
    public readonly sessionTimeoutMs!: pulumi.Output<number>;
    public readonly timezone!: pulumi.Output<string>;
    public readonly userId!: pulumi.Output<string>;
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["clientAddress"] = state ? state.clientAddress : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["external"] = state ? state.external : undefined;
            resourceInputs["fullName"] = state ? state.fullName : undefined;
            resourceInputs["lastActivity"] = state ? state.lastActivity : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["readOnly"] = state ? state.readOnly : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["sessionActive"] = state ? state.sessionActive : undefined;
            resourceInputs["sessionTimeoutMs"] = state ? state.sessionTimeoutMs : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.fullName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fullName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["clientAddress"] = args ? args.clientAddress : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["external"] = args ? args.external : undefined;
            resourceInputs["fullName"] = args ? args.fullName : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["readOnly"] = args ? args.readOnly : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["sessionActive"] = args ? args.sessionActive : undefined;
            resourceInputs["sessionTimeoutMs"] = args ? args.sessionTimeoutMs : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["lastActivity"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    clientAddress?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    external?: pulumi.Input<boolean>;
    fullName?: pulumi.Input<string>;
    lastActivity?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    readOnly?: pulumi.Input<boolean>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    sessionActive?: pulumi.Input<boolean>;
    sessionTimeoutMs?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    clientAddress?: pulumi.Input<string>;
    email: pulumi.Input<string>;
    external?: pulumi.Input<boolean>;
    fullName: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    readOnly?: pulumi.Input<boolean>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    sessionActive?: pulumi.Input<boolean>;
    sessionTimeoutMs?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    username: pulumi.Input<string>;
}
