// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EventDefinition extends pulumi.CustomResource {
    /**
     * Get an existing EventDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventDefinitionState, opts?: pulumi.CustomResourceOptions): EventDefinition {
        return new EventDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'graylog:index/eventDefinition:EventDefinition';

    /**
     * Returns true if the given object is an instance of EventDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventDefinition.__pulumiType;
    }

    public readonly alert!: pulumi.Output<boolean | undefined>;
    public readonly config!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fieldSpec!: pulumi.Output<string | undefined>;
    public readonly keySpecs!: pulumi.Output<string[] | undefined>;
    public readonly notificationSettings!: pulumi.Output<outputs.EventDefinitionNotificationSettings>;
    public readonly notifications!: pulumi.Output<outputs.EventDefinitionNotification[] | undefined>;
    public readonly priority!: pulumi.Output<number>;
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a EventDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventDefinitionArgs | EventDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventDefinitionState | undefined;
            resourceInputs["alert"] = state ? state.alert : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fieldSpec"] = state ? state.fieldSpec : undefined;
            resourceInputs["keySpecs"] = state ? state.keySpecs : undefined;
            resourceInputs["notificationSettings"] = state ? state.notificationSettings : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as EventDefinitionArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.notificationSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationSettings'");
            }
            if ((!args || args.priority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["alert"] = args ? args.alert : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fieldSpec"] = args ? args.fieldSpec : undefined;
            resourceInputs["keySpecs"] = args ? args.keySpecs : undefined;
            resourceInputs["notificationSettings"] = args ? args.notificationSettings : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EventDefinition resources.
 */
export interface EventDefinitionState {
    alert?: pulumi.Input<boolean>;
    config?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fieldSpec?: pulumi.Input<string>;
    keySpecs?: pulumi.Input<pulumi.Input<string>[]>;
    notificationSettings?: pulumi.Input<inputs.EventDefinitionNotificationSettings>;
    notifications?: pulumi.Input<pulumi.Input<inputs.EventDefinitionNotification>[]>;
    priority?: pulumi.Input<number>;
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventDefinition resource.
 */
export interface EventDefinitionArgs {
    alert?: pulumi.Input<boolean>;
    config: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fieldSpec?: pulumi.Input<string>;
    keySpecs?: pulumi.Input<pulumi.Input<string>[]>;
    notificationSettings: pulumi.Input<inputs.EventDefinitionNotificationSettings>;
    notifications?: pulumi.Input<pulumi.Input<inputs.EventDefinitionNotification>[]>;
    priority: pulumi.Input<number>;
    title: pulumi.Input<string>;
}
