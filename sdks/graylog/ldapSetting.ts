// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class LdapSetting extends pulumi.CustomResource {
    /**
     * Get an existing LdapSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapSettingState, opts?: pulumi.CustomResourceOptions): LdapSetting {
        return new LdapSetting(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'graylog:index/ldapSetting:LdapSetting';

    /**
     * Returns true if the given object is an instance of LdapSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapSetting {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapSetting.__pulumiType;
    }

    public readonly activeDirectory!: pulumi.Output<boolean | undefined>;
    public readonly additionalDefaultGroups!: pulumi.Output<string[] | undefined>;
    public readonly defaultGroup!: pulumi.Output<string>;
    public readonly displayNameAttribute!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly groupIdAttribute!: pulumi.Output<string | undefined>;
    public readonly groupMapping!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly groupSearchBase!: pulumi.Output<string | undefined>;
    public readonly groupSearchPattern!: pulumi.Output<string | undefined>;
    public readonly ldapUri!: pulumi.Output<string>;
    public readonly searchBase!: pulumi.Output<string>;
    public readonly searchPattern!: pulumi.Output<string>;
    public readonly systemPassword!: pulumi.Output<string>;
    public readonly systemPasswordSet!: pulumi.Output<boolean>;
    public readonly systemUsername!: pulumi.Output<string>;
    public readonly trustAllCertificates!: pulumi.Output<boolean | undefined>;
    public readonly useStartTls!: pulumi.Output<boolean | undefined>;

    /**
     * Create a LdapSetting resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapSettingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapSettingArgs | LdapSettingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapSettingState | undefined;
            resourceInputs["activeDirectory"] = state ? state.activeDirectory : undefined;
            resourceInputs["additionalDefaultGroups"] = state ? state.additionalDefaultGroups : undefined;
            resourceInputs["defaultGroup"] = state ? state.defaultGroup : undefined;
            resourceInputs["displayNameAttribute"] = state ? state.displayNameAttribute : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["groupIdAttribute"] = state ? state.groupIdAttribute : undefined;
            resourceInputs["groupMapping"] = state ? state.groupMapping : undefined;
            resourceInputs["groupSearchBase"] = state ? state.groupSearchBase : undefined;
            resourceInputs["groupSearchPattern"] = state ? state.groupSearchPattern : undefined;
            resourceInputs["ldapUri"] = state ? state.ldapUri : undefined;
            resourceInputs["searchBase"] = state ? state.searchBase : undefined;
            resourceInputs["searchPattern"] = state ? state.searchPattern : undefined;
            resourceInputs["systemPassword"] = state ? state.systemPassword : undefined;
            resourceInputs["systemPasswordSet"] = state ? state.systemPasswordSet : undefined;
            resourceInputs["systemUsername"] = state ? state.systemUsername : undefined;
            resourceInputs["trustAllCertificates"] = state ? state.trustAllCertificates : undefined;
            resourceInputs["useStartTls"] = state ? state.useStartTls : undefined;
        } else {
            const args = argsOrState as LdapSettingArgs | undefined;
            if ((!args || args.defaultGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultGroup'");
            }
            if ((!args || args.displayNameAttribute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayNameAttribute'");
            }
            if ((!args || args.ldapUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ldapUri'");
            }
            if ((!args || args.searchBase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchBase'");
            }
            if ((!args || args.searchPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchPattern'");
            }
            if ((!args || args.systemUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'systemUsername'");
            }
            resourceInputs["activeDirectory"] = args ? args.activeDirectory : undefined;
            resourceInputs["additionalDefaultGroups"] = args ? args.additionalDefaultGroups : undefined;
            resourceInputs["defaultGroup"] = args ? args.defaultGroup : undefined;
            resourceInputs["displayNameAttribute"] = args ? args.displayNameAttribute : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["groupIdAttribute"] = args ? args.groupIdAttribute : undefined;
            resourceInputs["groupMapping"] = args ? args.groupMapping : undefined;
            resourceInputs["groupSearchBase"] = args ? args.groupSearchBase : undefined;
            resourceInputs["groupSearchPattern"] = args ? args.groupSearchPattern : undefined;
            resourceInputs["ldapUri"] = args ? args.ldapUri : undefined;
            resourceInputs["searchBase"] = args ? args.searchBase : undefined;
            resourceInputs["searchPattern"] = args ? args.searchPattern : undefined;
            resourceInputs["systemPassword"] = args?.systemPassword ? pulumi.secret(args.systemPassword) : undefined;
            resourceInputs["systemPasswordSet"] = args ? args.systemPasswordSet : undefined;
            resourceInputs["systemUsername"] = args ? args.systemUsername : undefined;
            resourceInputs["trustAllCertificates"] = args ? args.trustAllCertificates : undefined;
            resourceInputs["useStartTls"] = args ? args.useStartTls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["systemPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LdapSetting.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LdapSetting resources.
 */
export interface LdapSettingState {
    activeDirectory?: pulumi.Input<boolean>;
    additionalDefaultGroups?: pulumi.Input<pulumi.Input<string>[]>;
    defaultGroup?: pulumi.Input<string>;
    displayNameAttribute?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    groupIdAttribute?: pulumi.Input<string>;
    groupMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    groupSearchBase?: pulumi.Input<string>;
    groupSearchPattern?: pulumi.Input<string>;
    ldapUri?: pulumi.Input<string>;
    searchBase?: pulumi.Input<string>;
    searchPattern?: pulumi.Input<string>;
    systemPassword?: pulumi.Input<string>;
    systemPasswordSet?: pulumi.Input<boolean>;
    systemUsername?: pulumi.Input<string>;
    trustAllCertificates?: pulumi.Input<boolean>;
    useStartTls?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a LdapSetting resource.
 */
export interface LdapSettingArgs {
    activeDirectory?: pulumi.Input<boolean>;
    additionalDefaultGroups?: pulumi.Input<pulumi.Input<string>[]>;
    defaultGroup: pulumi.Input<string>;
    displayNameAttribute: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    groupIdAttribute?: pulumi.Input<string>;
    groupMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    groupSearchBase?: pulumi.Input<string>;
    groupSearchPattern?: pulumi.Input<string>;
    ldapUri: pulumi.Input<string>;
    searchBase: pulumi.Input<string>;
    searchPattern: pulumi.Input<string>;
    systemPassword?: pulumi.Input<string>;
    systemPasswordSet?: pulumi.Input<boolean>;
    systemUsername: pulumi.Input<string>;
    trustAllCertificates?: pulumi.Input<boolean>;
    useStartTls?: pulumi.Input<boolean>;
}
