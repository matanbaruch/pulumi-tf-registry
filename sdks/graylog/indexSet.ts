// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IndexSet extends pulumi.CustomResource {
    /**
     * Get an existing IndexSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexSetState, opts?: pulumi.CustomResourceOptions): IndexSet {
        return new IndexSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'graylog:index/indexSet:IndexSet';

    /**
     * Returns true if the given object is an instance of IndexSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IndexSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IndexSet.__pulumiType;
    }

    public readonly creationDate!: pulumi.Output<string>;
    public readonly default!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly fieldTypeRefreshInterval!: pulumi.Output<number | undefined>;
    public readonly indexAnalyzer!: pulumi.Output<string>;
    public readonly indexOptimizationDisabled!: pulumi.Output<boolean | undefined>;
    public readonly indexOptimizationMaxNumSegments!: pulumi.Output<number>;
    public readonly indexPrefix!: pulumi.Output<string>;
    public readonly replicas!: pulumi.Output<number | undefined>;
    public readonly retentionStrategy!: pulumi.Output<string>;
    public readonly retentionStrategyClass!: pulumi.Output<string>;
    public readonly rotationStrategy!: pulumi.Output<string>;
    public readonly rotationStrategyClass!: pulumi.Output<string>;
    public readonly shards!: pulumi.Output<number>;
    public readonly title!: pulumi.Output<string>;
    public readonly writable!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IndexSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IndexSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexSetArgs | IndexSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndexSetState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fieldTypeRefreshInterval"] = state ? state.fieldTypeRefreshInterval : undefined;
            resourceInputs["indexAnalyzer"] = state ? state.indexAnalyzer : undefined;
            resourceInputs["indexOptimizationDisabled"] = state ? state.indexOptimizationDisabled : undefined;
            resourceInputs["indexOptimizationMaxNumSegments"] = state ? state.indexOptimizationMaxNumSegments : undefined;
            resourceInputs["indexPrefix"] = state ? state.indexPrefix : undefined;
            resourceInputs["replicas"] = state ? state.replicas : undefined;
            resourceInputs["retentionStrategy"] = state ? state.retentionStrategy : undefined;
            resourceInputs["retentionStrategyClass"] = state ? state.retentionStrategyClass : undefined;
            resourceInputs["rotationStrategy"] = state ? state.rotationStrategy : undefined;
            resourceInputs["rotationStrategyClass"] = state ? state.rotationStrategyClass : undefined;
            resourceInputs["shards"] = state ? state.shards : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["writable"] = state ? state.writable : undefined;
        } else {
            const args = argsOrState as IndexSetArgs | undefined;
            if ((!args || args.indexAnalyzer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexAnalyzer'");
            }
            if ((!args || args.indexOptimizationMaxNumSegments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexOptimizationMaxNumSegments'");
            }
            if ((!args || args.indexPrefix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexPrefix'");
            }
            if ((!args || args.retentionStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionStrategy'");
            }
            if ((!args || args.retentionStrategyClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retentionStrategyClass'");
            }
            if ((!args || args.rotationStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rotationStrategy'");
            }
            if ((!args || args.rotationStrategyClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rotationStrategyClass'");
            }
            if ((!args || args.shards === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shards'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["creationDate"] = args ? args.creationDate : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fieldTypeRefreshInterval"] = args ? args.fieldTypeRefreshInterval : undefined;
            resourceInputs["indexAnalyzer"] = args ? args.indexAnalyzer : undefined;
            resourceInputs["indexOptimizationDisabled"] = args ? args.indexOptimizationDisabled : undefined;
            resourceInputs["indexOptimizationMaxNumSegments"] = args ? args.indexOptimizationMaxNumSegments : undefined;
            resourceInputs["indexPrefix"] = args ? args.indexPrefix : undefined;
            resourceInputs["replicas"] = args ? args.replicas : undefined;
            resourceInputs["retentionStrategy"] = args ? args.retentionStrategy : undefined;
            resourceInputs["retentionStrategyClass"] = args ? args.retentionStrategyClass : undefined;
            resourceInputs["rotationStrategy"] = args ? args.rotationStrategy : undefined;
            resourceInputs["rotationStrategyClass"] = args ? args.rotationStrategyClass : undefined;
            resourceInputs["shards"] = args ? args.shards : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["writable"] = args ? args.writable : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IndexSet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IndexSet resources.
 */
export interface IndexSetState {
    creationDate?: pulumi.Input<string>;
    default?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    fieldTypeRefreshInterval?: pulumi.Input<number>;
    indexAnalyzer?: pulumi.Input<string>;
    indexOptimizationDisabled?: pulumi.Input<boolean>;
    indexOptimizationMaxNumSegments?: pulumi.Input<number>;
    indexPrefix?: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    retentionStrategy?: pulumi.Input<string>;
    retentionStrategyClass?: pulumi.Input<string>;
    rotationStrategy?: pulumi.Input<string>;
    rotationStrategyClass?: pulumi.Input<string>;
    shards?: pulumi.Input<number>;
    title?: pulumi.Input<string>;
    writable?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IndexSet resource.
 */
export interface IndexSetArgs {
    creationDate?: pulumi.Input<string>;
    default?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    fieldTypeRefreshInterval?: pulumi.Input<number>;
    indexAnalyzer: pulumi.Input<string>;
    indexOptimizationDisabled?: pulumi.Input<boolean>;
    indexOptimizationMaxNumSegments: pulumi.Input<number>;
    indexPrefix: pulumi.Input<string>;
    replicas?: pulumi.Input<number>;
    retentionStrategy: pulumi.Input<string>;
    retentionStrategyClass: pulumi.Input<string>;
    rotationStrategy: pulumi.Input<string>;
    rotationStrategyClass: pulumi.Input<string>;
    shards: pulumi.Input<number>;
    title: pulumi.Input<string>;
    writable?: pulumi.Input<boolean>;
}
