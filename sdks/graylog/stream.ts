// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamState, opts?: pulumi.CustomResourceOptions): Stream {
        return new Stream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'graylog:index/stream:Stream';

    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }

    public readonly createdAt!: pulumi.Output<string>;
    public readonly creatorUserId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly indexSetId!: pulumi.Output<string>;
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    public readonly matchingType!: pulumi.Output<string | undefined>;
    public readonly removeMatchesFromDefaultStream!: pulumi.Output<boolean | undefined>;
    public readonly title!: pulumi.Output<string>;

    /**
     * Create a Stream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamArgs | StreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["creatorUserId"] = state ? state.creatorUserId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["indexSetId"] = state ? state.indexSetId : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["matchingType"] = state ? state.matchingType : undefined;
            resourceInputs["removeMatchesFromDefaultStream"] = state ? state.removeMatchesFromDefaultStream : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as StreamArgs | undefined;
            if ((!args || args.indexSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'indexSetId'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["creatorUserId"] = args ? args.creatorUserId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["indexSetId"] = args ? args.indexSetId : undefined;
            resourceInputs["isDefault"] = args ? args.isDefault : undefined;
            resourceInputs["matchingType"] = args ? args.matchingType : undefined;
            resourceInputs["removeMatchesFromDefaultStream"] = args ? args.removeMatchesFromDefaultStream : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stream.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Stream resources.
 */
export interface StreamState {
    createdAt?: pulumi.Input<string>;
    creatorUserId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    indexSetId?: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    matchingType?: pulumi.Input<string>;
    removeMatchesFromDefaultStream?: pulumi.Input<boolean>;
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Stream resource.
 */
export interface StreamArgs {
    createdAt?: pulumi.Input<string>;
    creatorUserId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    indexSetId: pulumi.Input<string>;
    isDefault?: pulumi.Input<boolean>;
    matchingType?: pulumi.Input<string>;
    removeMatchesFromDefaultStream?: pulumi.Input<boolean>;
    title: pulumi.Input<string>;
}
