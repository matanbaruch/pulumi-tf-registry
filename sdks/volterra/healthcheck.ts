// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Healthcheck extends pulumi.CustomResource {
    /**
     * Get an existing Healthcheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HealthcheckState, opts?: pulumi.CustomResourceOptions): Healthcheck {
        return new Healthcheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/healthcheck:Healthcheck';

    /**
     * Returns true if the given object is an instance of Healthcheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Healthcheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Healthcheck.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dnsHealthChecks!: pulumi.Output<outputs.HealthcheckDnsHealthCheck[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dnsProxyIcmpHealthCheck!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dnsProxyTcpHealthChecks!: pulumi.Output<outputs.HealthcheckDnsProxyTcpHealthCheck[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dnsProxyUdpHealthChecks!: pulumi.Output<outputs.HealthcheckDnsProxyUdpHealthCheck[] | undefined>;
    public readonly healthyThreshold!: pulumi.Output<number>;
    public readonly httpHealthChecks!: pulumi.Output<outputs.HealthcheckHttpHealthCheck[] | undefined>;
    public readonly interval!: pulumi.Output<number>;
    public readonly jitterPercent!: pulumi.Output<number | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly tcpHealthChecks!: pulumi.Output<outputs.HealthcheckTcpHealthCheck[] | undefined>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly unhealthyThreshold!: pulumi.Output<number>;

    /**
     * Create a Healthcheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HealthcheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HealthcheckArgs | HealthcheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HealthcheckState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dnsHealthChecks"] = state ? state.dnsHealthChecks : undefined;
            resourceInputs["dnsProxyIcmpHealthCheck"] = state ? state.dnsProxyIcmpHealthCheck : undefined;
            resourceInputs["dnsProxyTcpHealthChecks"] = state ? state.dnsProxyTcpHealthChecks : undefined;
            resourceInputs["dnsProxyUdpHealthChecks"] = state ? state.dnsProxyUdpHealthChecks : undefined;
            resourceInputs["healthyThreshold"] = state ? state.healthyThreshold : undefined;
            resourceInputs["httpHealthChecks"] = state ? state.httpHealthChecks : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["jitterPercent"] = state ? state.jitterPercent : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["tcpHealthChecks"] = state ? state.tcpHealthChecks : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["unhealthyThreshold"] = state ? state.unhealthyThreshold : undefined;
        } else {
            const args = argsOrState as HealthcheckArgs | undefined;
            if ((!args || args.healthyThreshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'healthyThreshold'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            if ((!args || args.unhealthyThreshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unhealthyThreshold'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["dnsHealthChecks"] = args ? args.dnsHealthChecks : undefined;
            resourceInputs["dnsProxyIcmpHealthCheck"] = args ? args.dnsProxyIcmpHealthCheck : undefined;
            resourceInputs["dnsProxyTcpHealthChecks"] = args ? args.dnsProxyTcpHealthChecks : undefined;
            resourceInputs["dnsProxyUdpHealthChecks"] = args ? args.dnsProxyUdpHealthChecks : undefined;
            resourceInputs["healthyThreshold"] = args ? args.healthyThreshold : undefined;
            resourceInputs["httpHealthChecks"] = args ? args.httpHealthChecks : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["jitterPercent"] = args ? args.jitterPercent : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["tcpHealthChecks"] = args ? args.tcpHealthChecks : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["unhealthyThreshold"] = args ? args.unhealthyThreshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Healthcheck.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Healthcheck resources.
 */
export interface HealthcheckState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    dnsHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckDnsHealthCheck>[]>;
    /**
     * @deprecated Deprecated
     */
    dnsProxyIcmpHealthCheck?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    dnsProxyTcpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckDnsProxyTcpHealthCheck>[]>;
    /**
     * @deprecated Deprecated
     */
    dnsProxyUdpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckDnsProxyUdpHealthCheck>[]>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckHttpHealthCheck>[]>;
    interval?: pulumi.Input<number>;
    jitterPercent?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    tcpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckTcpHealthCheck>[]>;
    timeout?: pulumi.Input<number>;
    unhealthyThreshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Healthcheck resource.
 */
export interface HealthcheckArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    dnsHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckDnsHealthCheck>[]>;
    /**
     * @deprecated Deprecated
     */
    dnsProxyIcmpHealthCheck?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    dnsProxyTcpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckDnsProxyTcpHealthCheck>[]>;
    /**
     * @deprecated Deprecated
     */
    dnsProxyUdpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckDnsProxyUdpHealthCheck>[]>;
    healthyThreshold: pulumi.Input<number>;
    httpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckHttpHealthCheck>[]>;
    interval: pulumi.Input<number>;
    jitterPercent?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    tcpHealthChecks?: pulumi.Input<pulumi.Input<inputs.HealthcheckTcpHealthCheck>[]>;
    timeout: pulumi.Input<number>;
    unhealthyThreshold: pulumi.Input<number>;
}
