// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VoltstackSite extends pulumi.CustomResource {
    /**
     * Get an existing VoltstackSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VoltstackSiteState, opts?: pulumi.CustomResourceOptions): VoltstackSite {
        return new VoltstackSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/voltstackSite:VoltstackSite';

    /**
     * Returns true if the given object is an instance of VoltstackSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VoltstackSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VoltstackSite.__pulumiType;
    }

    public readonly address!: pulumi.Output<string | undefined>;
    public readonly allowAllUsb!: pulumi.Output<boolean | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly blockedServices!: pulumi.Output<outputs.VoltstackSiteBlockedService[] | undefined>;
    public readonly bondDeviceLists!: pulumi.Output<outputs.VoltstackSiteBondDeviceList[] | undefined>;
    public readonly coordinates!: pulumi.Output<outputs.VoltstackSiteCoordinate[] | undefined>;
    public readonly customDns!: pulumi.Output<outputs.VoltstackSiteCustomDn[] | undefined>;
    public readonly customNetworkConfigs!: pulumi.Output<outputs.VoltstackSiteCustomNetworkConfig[] | undefined>;
    public readonly customStorageConfigs!: pulumi.Output<outputs.VoltstackSiteCustomStorageConfig[] | undefined>;
    public readonly defaultBlockedServices!: pulumi.Output<boolean | undefined>;
    public readonly defaultNetworkConfig!: pulumi.Output<boolean | undefined>;
    public readonly defaultSriovInterface!: pulumi.Output<boolean | undefined>;
    public readonly defaultStorageConfig!: pulumi.Output<boolean | undefined>;
    public readonly denyAllUsb!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly disableGpu!: pulumi.Output<boolean | undefined>;
    public readonly disableVm!: pulumi.Output<boolean | undefined>;
    public readonly enableGpu!: pulumi.Output<boolean | undefined>;
    public readonly enableVgpus!: pulumi.Output<outputs.VoltstackSiteEnableVgpus[] | undefined>;
    public readonly enableVms!: pulumi.Output<outputs.VoltstackSiteEnableVm[] | undefined>;
    public readonly k8sClusters!: pulumi.Output<outputs.VoltstackSiteK8sCluster[] | undefined>;
    public readonly kubernetesUpgradeDrains!: pulumi.Output<outputs.VoltstackSiteKubernetesUpgradeDrain[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly localControlPlanes!: pulumi.Output<outputs.VoltstackSiteLocalControlPlane[] | undefined>;
    public readonly logReceivers!: pulumi.Output<outputs.VoltstackSiteLogReceiver[] | undefined>;
    public readonly logsStreamingDisabled!: pulumi.Output<boolean | undefined>;
    public readonly masterNodeConfigurations!: pulumi.Output<outputs.VoltstackSiteMasterNodeConfiguration[]>;
    /**
     * @deprecated Deprecated
     */
    public readonly masterNodes!: pulumi.Output<string[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noBondDevices!: pulumi.Output<boolean | undefined>;
    public readonly noK8sCluster!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly noLocalControlPlane!: pulumi.Output<boolean | undefined>;
    public readonly offlineSurvivabilityModes!: pulumi.Output<outputs.VoltstackSiteOfflineSurvivabilityMode[] | undefined>;
    public readonly os!: pulumi.Output<outputs.VoltstackSiteO[] | undefined>;
    public readonly sriovInterfaces!: pulumi.Output<outputs.VoltstackSiteSriovInterface[] | undefined>;
    public readonly sws!: pulumi.Output<outputs.VoltstackSiteSw[] | undefined>;
    public readonly usbPolicies!: pulumi.Output<outputs.VoltstackSiteUsbPolicy[] | undefined>;
    public readonly volterraCertifiedHw!: pulumi.Output<string>;
    public readonly workerNodes!: pulumi.Output<string[] | undefined>;

    /**
     * Create a VoltstackSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VoltstackSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VoltstackSiteArgs | VoltstackSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VoltstackSiteState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["allowAllUsb"] = state ? state.allowAllUsb : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["blockedServices"] = state ? state.blockedServices : undefined;
            resourceInputs["bondDeviceLists"] = state ? state.bondDeviceLists : undefined;
            resourceInputs["coordinates"] = state ? state.coordinates : undefined;
            resourceInputs["customDns"] = state ? state.customDns : undefined;
            resourceInputs["customNetworkConfigs"] = state ? state.customNetworkConfigs : undefined;
            resourceInputs["customStorageConfigs"] = state ? state.customStorageConfigs : undefined;
            resourceInputs["defaultBlockedServices"] = state ? state.defaultBlockedServices : undefined;
            resourceInputs["defaultNetworkConfig"] = state ? state.defaultNetworkConfig : undefined;
            resourceInputs["defaultSriovInterface"] = state ? state.defaultSriovInterface : undefined;
            resourceInputs["defaultStorageConfig"] = state ? state.defaultStorageConfig : undefined;
            resourceInputs["denyAllUsb"] = state ? state.denyAllUsb : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableGpu"] = state ? state.disableGpu : undefined;
            resourceInputs["disableVm"] = state ? state.disableVm : undefined;
            resourceInputs["enableGpu"] = state ? state.enableGpu : undefined;
            resourceInputs["enableVgpus"] = state ? state.enableVgpus : undefined;
            resourceInputs["enableVms"] = state ? state.enableVms : undefined;
            resourceInputs["k8sClusters"] = state ? state.k8sClusters : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = state ? state.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["localControlPlanes"] = state ? state.localControlPlanes : undefined;
            resourceInputs["logReceivers"] = state ? state.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = state ? state.logsStreamingDisabled : undefined;
            resourceInputs["masterNodeConfigurations"] = state ? state.masterNodeConfigurations : undefined;
            resourceInputs["masterNodes"] = state ? state.masterNodes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noBondDevices"] = state ? state.noBondDevices : undefined;
            resourceInputs["noK8sCluster"] = state ? state.noK8sCluster : undefined;
            resourceInputs["noLocalControlPlane"] = state ? state.noLocalControlPlane : undefined;
            resourceInputs["offlineSurvivabilityModes"] = state ? state.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["sriovInterfaces"] = state ? state.sriovInterfaces : undefined;
            resourceInputs["sws"] = state ? state.sws : undefined;
            resourceInputs["usbPolicies"] = state ? state.usbPolicies : undefined;
            resourceInputs["volterraCertifiedHw"] = state ? state.volterraCertifiedHw : undefined;
            resourceInputs["workerNodes"] = state ? state.workerNodes : undefined;
        } else {
            const args = argsOrState as VoltstackSiteArgs | undefined;
            if ((!args || args.masterNodeConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeConfigurations'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.volterraCertifiedHw === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volterraCertifiedHw'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["allowAllUsb"] = args ? args.allowAllUsb : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["blockedServices"] = args ? args.blockedServices : undefined;
            resourceInputs["bondDeviceLists"] = args ? args.bondDeviceLists : undefined;
            resourceInputs["coordinates"] = args ? args.coordinates : undefined;
            resourceInputs["customDns"] = args ? args.customDns : undefined;
            resourceInputs["customNetworkConfigs"] = args ? args.customNetworkConfigs : undefined;
            resourceInputs["customStorageConfigs"] = args ? args.customStorageConfigs : undefined;
            resourceInputs["defaultBlockedServices"] = args ? args.defaultBlockedServices : undefined;
            resourceInputs["defaultNetworkConfig"] = args ? args.defaultNetworkConfig : undefined;
            resourceInputs["defaultSriovInterface"] = args ? args.defaultSriovInterface : undefined;
            resourceInputs["defaultStorageConfig"] = args ? args.defaultStorageConfig : undefined;
            resourceInputs["denyAllUsb"] = args ? args.denyAllUsb : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableGpu"] = args ? args.disableGpu : undefined;
            resourceInputs["disableVm"] = args ? args.disableVm : undefined;
            resourceInputs["enableGpu"] = args ? args.enableGpu : undefined;
            resourceInputs["enableVgpus"] = args ? args.enableVgpus : undefined;
            resourceInputs["enableVms"] = args ? args.enableVms : undefined;
            resourceInputs["k8sClusters"] = args ? args.k8sClusters : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = args ? args.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["localControlPlanes"] = args ? args.localControlPlanes : undefined;
            resourceInputs["logReceivers"] = args ? args.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = args ? args.logsStreamingDisabled : undefined;
            resourceInputs["masterNodeConfigurations"] = args ? args.masterNodeConfigurations : undefined;
            resourceInputs["masterNodes"] = args ? args.masterNodes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noBondDevices"] = args ? args.noBondDevices : undefined;
            resourceInputs["noK8sCluster"] = args ? args.noK8sCluster : undefined;
            resourceInputs["noLocalControlPlane"] = args ? args.noLocalControlPlane : undefined;
            resourceInputs["offlineSurvivabilityModes"] = args ? args.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["sriovInterfaces"] = args ? args.sriovInterfaces : undefined;
            resourceInputs["sws"] = args ? args.sws : undefined;
            resourceInputs["usbPolicies"] = args ? args.usbPolicies : undefined;
            resourceInputs["volterraCertifiedHw"] = args ? args.volterraCertifiedHw : undefined;
            resourceInputs["workerNodes"] = args ? args.workerNodes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VoltstackSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering VoltstackSite resources.
 */
export interface VoltstackSiteState {
    address?: pulumi.Input<string>;
    allowAllUsb?: pulumi.Input<boolean>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteBlockedService>[]>;
    bondDeviceLists?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteBondDeviceList>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCustomDn>[]>;
    customNetworkConfigs?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCustomNetworkConfig>[]>;
    customStorageConfigs?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCustomStorageConfig>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    defaultNetworkConfig?: pulumi.Input<boolean>;
    defaultSriovInterface?: pulumi.Input<boolean>;
    defaultStorageConfig?: pulumi.Input<boolean>;
    denyAllUsb?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    disableGpu?: pulumi.Input<boolean>;
    disableVm?: pulumi.Input<boolean>;
    enableGpu?: pulumi.Input<boolean>;
    enableVgpus?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteEnableVgpus>[]>;
    enableVms?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteEnableVm>[]>;
    k8sClusters?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteK8sCluster>[]>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    localControlPlanes?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteLocalControlPlane>[]>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    masterNodeConfigurations?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteMasterNodeConfiguration>[]>;
    /**
     * @deprecated Deprecated
     */
    masterNodes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noBondDevices?: pulumi.Input<boolean>;
    noK8sCluster?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    noLocalControlPlane?: pulumi.Input<boolean>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteO>[]>;
    sriovInterfaces?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteSriovInterface>[]>;
    sws?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteSw>[]>;
    usbPolicies?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteUsbPolicy>[]>;
    volterraCertifiedHw?: pulumi.Input<string>;
    workerNodes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VoltstackSite resource.
 */
export interface VoltstackSiteArgs {
    address?: pulumi.Input<string>;
    allowAllUsb?: pulumi.Input<boolean>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteBlockedService>[]>;
    bondDeviceLists?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteBondDeviceList>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCustomDn>[]>;
    customNetworkConfigs?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCustomNetworkConfig>[]>;
    customStorageConfigs?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteCustomStorageConfig>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    defaultNetworkConfig?: pulumi.Input<boolean>;
    defaultSriovInterface?: pulumi.Input<boolean>;
    defaultStorageConfig?: pulumi.Input<boolean>;
    denyAllUsb?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    disableGpu?: pulumi.Input<boolean>;
    disableVm?: pulumi.Input<boolean>;
    enableGpu?: pulumi.Input<boolean>;
    enableVgpus?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteEnableVgpus>[]>;
    enableVms?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteEnableVm>[]>;
    k8sClusters?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteK8sCluster>[]>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    localControlPlanes?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteLocalControlPlane>[]>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    masterNodeConfigurations: pulumi.Input<pulumi.Input<inputs.VoltstackSiteMasterNodeConfiguration>[]>;
    /**
     * @deprecated Deprecated
     */
    masterNodes?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noBondDevices?: pulumi.Input<boolean>;
    noK8sCluster?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    noLocalControlPlane?: pulumi.Input<boolean>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteO>[]>;
    sriovInterfaces?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteSriovInterface>[]>;
    sws?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteSw>[]>;
    usbPolicies?: pulumi.Input<pulumi.Input<inputs.VoltstackSiteUsbPolicy>[]>;
    volterraCertifiedHw: pulumi.Input<string>;
    workerNodes?: pulumi.Input<pulumi.Input<string>[]>;
}
