// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FleetState, opts?: pulumi.CustomResourceOptions): Fleet {
        return new Fleet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/fleet:Fleet';

    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }

    public readonly allowAllUsb!: pulumi.Output<boolean | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly blockedServices!: pulumi.Output<outputs.FleetBlockedService[] | undefined>;
    public readonly bondDeviceLists!: pulumi.Output<outputs.FleetBondDeviceList[] | undefined>;
    public readonly dcClusterGroupInsides!: pulumi.Output<outputs.FleetDcClusterGroupInside[] | undefined>;
    public readonly dcClusterGroups!: pulumi.Output<outputs.FleetDcClusterGroup[] | undefined>;
    public readonly defaultConfig!: pulumi.Output<boolean | undefined>;
    public readonly defaultSriovInterface!: pulumi.Output<boolean | undefined>;
    public readonly defaultStorageClass!: pulumi.Output<boolean | undefined>;
    public readonly denyAllUsb!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly deviceLists!: pulumi.Output<outputs.FleetDeviceList[] | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly disableGpu!: pulumi.Output<boolean | undefined>;
    public readonly disableVm!: pulumi.Output<boolean | undefined>;
    public readonly enableDefaultFleetConfigDownload!: pulumi.Output<boolean | undefined>;
    public readonly enableGpu!: pulumi.Output<boolean | undefined>;
    public readonly enableVgpus!: pulumi.Output<outputs.FleetEnableVgpus[] | undefined>;
    public readonly enableVms!: pulumi.Output<outputs.FleetEnableVm[] | undefined>;
    public readonly fleetLabel!: pulumi.Output<string>;
    public readonly insideVirtualNetworks!: pulumi.Output<outputs.FleetInsideVirtualNetwork[] | undefined>;
    public readonly interfaceLists!: pulumi.Output<outputs.FleetInterfaceList[] | undefined>;
    public readonly kubernetesUpgradeDrains!: pulumi.Output<outputs.FleetKubernetesUpgradeDrain[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly logReceivers!: pulumi.Output<outputs.FleetLogReceiver[] | undefined>;
    public readonly logsStreamingDisabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly networkConnectors!: pulumi.Output<outputs.FleetNetworkConnector[] | undefined>;
    public readonly networkFirewalls!: pulumi.Output<outputs.FleetNetworkFirewall[] | undefined>;
    public readonly noBondDevices!: pulumi.Output<boolean | undefined>;
    public readonly noDcClusterGroup!: pulumi.Output<boolean | undefined>;
    public readonly noStorageDevice!: pulumi.Output<boolean | undefined>;
    public readonly noStorageInterfaces!: pulumi.Output<boolean | undefined>;
    public readonly noStorageStaticRoutes!: pulumi.Output<boolean | undefined>;
    public readonly operatingSystemVersion!: pulumi.Output<string | undefined>;
    public readonly outsideVirtualNetworks!: pulumi.Output<outputs.FleetOutsideVirtualNetwork[] | undefined>;
    public readonly performanceEnhancementModes!: pulumi.Output<outputs.FleetPerformanceEnhancementMode[] | undefined>;
    public readonly sriovInterfaces!: pulumi.Output<outputs.FleetSriovInterface[] | undefined>;
    public readonly storageClassLists!: pulumi.Output<outputs.FleetStorageClassList[] | undefined>;
    public readonly storageDeviceLists!: pulumi.Output<outputs.FleetStorageDeviceList[] | undefined>;
    public readonly storageInterfaceLists!: pulumi.Output<outputs.FleetStorageInterfaceList[] | undefined>;
    public readonly storageStaticRoutes!: pulumi.Output<outputs.FleetStorageStaticRoute[] | undefined>;
    public readonly usbPolicies!: pulumi.Output<outputs.FleetUsbPolicy[] | undefined>;
    public readonly volterraSoftwareVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FleetArgs | FleetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FleetState | undefined;
            resourceInputs["allowAllUsb"] = state ? state.allowAllUsb : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["blockedServices"] = state ? state.blockedServices : undefined;
            resourceInputs["bondDeviceLists"] = state ? state.bondDeviceLists : undefined;
            resourceInputs["dcClusterGroupInsides"] = state ? state.dcClusterGroupInsides : undefined;
            resourceInputs["dcClusterGroups"] = state ? state.dcClusterGroups : undefined;
            resourceInputs["defaultConfig"] = state ? state.defaultConfig : undefined;
            resourceInputs["defaultSriovInterface"] = state ? state.defaultSriovInterface : undefined;
            resourceInputs["defaultStorageClass"] = state ? state.defaultStorageClass : undefined;
            resourceInputs["denyAllUsb"] = state ? state.denyAllUsb : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceLists"] = state ? state.deviceLists : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableGpu"] = state ? state.disableGpu : undefined;
            resourceInputs["disableVm"] = state ? state.disableVm : undefined;
            resourceInputs["enableDefaultFleetConfigDownload"] = state ? state.enableDefaultFleetConfigDownload : undefined;
            resourceInputs["enableGpu"] = state ? state.enableGpu : undefined;
            resourceInputs["enableVgpus"] = state ? state.enableVgpus : undefined;
            resourceInputs["enableVms"] = state ? state.enableVms : undefined;
            resourceInputs["fleetLabel"] = state ? state.fleetLabel : undefined;
            resourceInputs["insideVirtualNetworks"] = state ? state.insideVirtualNetworks : undefined;
            resourceInputs["interfaceLists"] = state ? state.interfaceLists : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = state ? state.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logReceivers"] = state ? state.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = state ? state.logsStreamingDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["networkConnectors"] = state ? state.networkConnectors : undefined;
            resourceInputs["networkFirewalls"] = state ? state.networkFirewalls : undefined;
            resourceInputs["noBondDevices"] = state ? state.noBondDevices : undefined;
            resourceInputs["noDcClusterGroup"] = state ? state.noDcClusterGroup : undefined;
            resourceInputs["noStorageDevice"] = state ? state.noStorageDevice : undefined;
            resourceInputs["noStorageInterfaces"] = state ? state.noStorageInterfaces : undefined;
            resourceInputs["noStorageStaticRoutes"] = state ? state.noStorageStaticRoutes : undefined;
            resourceInputs["operatingSystemVersion"] = state ? state.operatingSystemVersion : undefined;
            resourceInputs["outsideVirtualNetworks"] = state ? state.outsideVirtualNetworks : undefined;
            resourceInputs["performanceEnhancementModes"] = state ? state.performanceEnhancementModes : undefined;
            resourceInputs["sriovInterfaces"] = state ? state.sriovInterfaces : undefined;
            resourceInputs["storageClassLists"] = state ? state.storageClassLists : undefined;
            resourceInputs["storageDeviceLists"] = state ? state.storageDeviceLists : undefined;
            resourceInputs["storageInterfaceLists"] = state ? state.storageInterfaceLists : undefined;
            resourceInputs["storageStaticRoutes"] = state ? state.storageStaticRoutes : undefined;
            resourceInputs["usbPolicies"] = state ? state.usbPolicies : undefined;
            resourceInputs["volterraSoftwareVersion"] = state ? state.volterraSoftwareVersion : undefined;
        } else {
            const args = argsOrState as FleetArgs | undefined;
            if ((!args || args.fleetLabel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fleetLabel'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["allowAllUsb"] = args ? args.allowAllUsb : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["blockedServices"] = args ? args.blockedServices : undefined;
            resourceInputs["bondDeviceLists"] = args ? args.bondDeviceLists : undefined;
            resourceInputs["dcClusterGroupInsides"] = args ? args.dcClusterGroupInsides : undefined;
            resourceInputs["dcClusterGroups"] = args ? args.dcClusterGroups : undefined;
            resourceInputs["defaultConfig"] = args ? args.defaultConfig : undefined;
            resourceInputs["defaultSriovInterface"] = args ? args.defaultSriovInterface : undefined;
            resourceInputs["defaultStorageClass"] = args ? args.defaultStorageClass : undefined;
            resourceInputs["denyAllUsb"] = args ? args.denyAllUsb : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceLists"] = args ? args.deviceLists : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableGpu"] = args ? args.disableGpu : undefined;
            resourceInputs["disableVm"] = args ? args.disableVm : undefined;
            resourceInputs["enableDefaultFleetConfigDownload"] = args ? args.enableDefaultFleetConfigDownload : undefined;
            resourceInputs["enableGpu"] = args ? args.enableGpu : undefined;
            resourceInputs["enableVgpus"] = args ? args.enableVgpus : undefined;
            resourceInputs["enableVms"] = args ? args.enableVms : undefined;
            resourceInputs["fleetLabel"] = args ? args.fleetLabel : undefined;
            resourceInputs["insideVirtualNetworks"] = args ? args.insideVirtualNetworks : undefined;
            resourceInputs["interfaceLists"] = args ? args.interfaceLists : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = args ? args.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["logReceivers"] = args ? args.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = args ? args.logsStreamingDisabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["networkConnectors"] = args ? args.networkConnectors : undefined;
            resourceInputs["networkFirewalls"] = args ? args.networkFirewalls : undefined;
            resourceInputs["noBondDevices"] = args ? args.noBondDevices : undefined;
            resourceInputs["noDcClusterGroup"] = args ? args.noDcClusterGroup : undefined;
            resourceInputs["noStorageDevice"] = args ? args.noStorageDevice : undefined;
            resourceInputs["noStorageInterfaces"] = args ? args.noStorageInterfaces : undefined;
            resourceInputs["noStorageStaticRoutes"] = args ? args.noStorageStaticRoutes : undefined;
            resourceInputs["operatingSystemVersion"] = args ? args.operatingSystemVersion : undefined;
            resourceInputs["outsideVirtualNetworks"] = args ? args.outsideVirtualNetworks : undefined;
            resourceInputs["performanceEnhancementModes"] = args ? args.performanceEnhancementModes : undefined;
            resourceInputs["sriovInterfaces"] = args ? args.sriovInterfaces : undefined;
            resourceInputs["storageClassLists"] = args ? args.storageClassLists : undefined;
            resourceInputs["storageDeviceLists"] = args ? args.storageDeviceLists : undefined;
            resourceInputs["storageInterfaceLists"] = args ? args.storageInterfaceLists : undefined;
            resourceInputs["storageStaticRoutes"] = args ? args.storageStaticRoutes : undefined;
            resourceInputs["usbPolicies"] = args ? args.usbPolicies : undefined;
            resourceInputs["volterraSoftwareVersion"] = args ? args.volterraSoftwareVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fleet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Fleet resources.
 */
export interface FleetState {
    allowAllUsb?: pulumi.Input<boolean>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.FleetBlockedService>[]>;
    bondDeviceLists?: pulumi.Input<pulumi.Input<inputs.FleetBondDeviceList>[]>;
    dcClusterGroupInsides?: pulumi.Input<pulumi.Input<inputs.FleetDcClusterGroupInside>[]>;
    dcClusterGroups?: pulumi.Input<pulumi.Input<inputs.FleetDcClusterGroup>[]>;
    defaultConfig?: pulumi.Input<boolean>;
    defaultSriovInterface?: pulumi.Input<boolean>;
    defaultStorageClass?: pulumi.Input<boolean>;
    denyAllUsb?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    deviceLists?: pulumi.Input<pulumi.Input<inputs.FleetDeviceList>[]>;
    disable?: pulumi.Input<boolean>;
    disableGpu?: pulumi.Input<boolean>;
    disableVm?: pulumi.Input<boolean>;
    enableDefaultFleetConfigDownload?: pulumi.Input<boolean>;
    enableGpu?: pulumi.Input<boolean>;
    enableVgpus?: pulumi.Input<pulumi.Input<inputs.FleetEnableVgpus>[]>;
    enableVms?: pulumi.Input<pulumi.Input<inputs.FleetEnableVm>[]>;
    fleetLabel?: pulumi.Input<string>;
    insideVirtualNetworks?: pulumi.Input<pulumi.Input<inputs.FleetInsideVirtualNetwork>[]>;
    interfaceLists?: pulumi.Input<pulumi.Input<inputs.FleetInterfaceList>[]>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.FleetKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.FleetLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    networkConnectors?: pulumi.Input<pulumi.Input<inputs.FleetNetworkConnector>[]>;
    networkFirewalls?: pulumi.Input<pulumi.Input<inputs.FleetNetworkFirewall>[]>;
    noBondDevices?: pulumi.Input<boolean>;
    noDcClusterGroup?: pulumi.Input<boolean>;
    noStorageDevice?: pulumi.Input<boolean>;
    noStorageInterfaces?: pulumi.Input<boolean>;
    noStorageStaticRoutes?: pulumi.Input<boolean>;
    operatingSystemVersion?: pulumi.Input<string>;
    outsideVirtualNetworks?: pulumi.Input<pulumi.Input<inputs.FleetOutsideVirtualNetwork>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.FleetPerformanceEnhancementMode>[]>;
    sriovInterfaces?: pulumi.Input<pulumi.Input<inputs.FleetSriovInterface>[]>;
    storageClassLists?: pulumi.Input<pulumi.Input<inputs.FleetStorageClassList>[]>;
    storageDeviceLists?: pulumi.Input<pulumi.Input<inputs.FleetStorageDeviceList>[]>;
    storageInterfaceLists?: pulumi.Input<pulumi.Input<inputs.FleetStorageInterfaceList>[]>;
    storageStaticRoutes?: pulumi.Input<pulumi.Input<inputs.FleetStorageStaticRoute>[]>;
    usbPolicies?: pulumi.Input<pulumi.Input<inputs.FleetUsbPolicy>[]>;
    volterraSoftwareVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Fleet resource.
 */
export interface FleetArgs {
    allowAllUsb?: pulumi.Input<boolean>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.FleetBlockedService>[]>;
    bondDeviceLists?: pulumi.Input<pulumi.Input<inputs.FleetBondDeviceList>[]>;
    dcClusterGroupInsides?: pulumi.Input<pulumi.Input<inputs.FleetDcClusterGroupInside>[]>;
    dcClusterGroups?: pulumi.Input<pulumi.Input<inputs.FleetDcClusterGroup>[]>;
    defaultConfig?: pulumi.Input<boolean>;
    defaultSriovInterface?: pulumi.Input<boolean>;
    defaultStorageClass?: pulumi.Input<boolean>;
    denyAllUsb?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    deviceLists?: pulumi.Input<pulumi.Input<inputs.FleetDeviceList>[]>;
    disable?: pulumi.Input<boolean>;
    disableGpu?: pulumi.Input<boolean>;
    disableVm?: pulumi.Input<boolean>;
    enableDefaultFleetConfigDownload?: pulumi.Input<boolean>;
    enableGpu?: pulumi.Input<boolean>;
    enableVgpus?: pulumi.Input<pulumi.Input<inputs.FleetEnableVgpus>[]>;
    enableVms?: pulumi.Input<pulumi.Input<inputs.FleetEnableVm>[]>;
    fleetLabel: pulumi.Input<string>;
    insideVirtualNetworks?: pulumi.Input<pulumi.Input<inputs.FleetInsideVirtualNetwork>[]>;
    interfaceLists?: pulumi.Input<pulumi.Input<inputs.FleetInterfaceList>[]>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.FleetKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.FleetLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    networkConnectors?: pulumi.Input<pulumi.Input<inputs.FleetNetworkConnector>[]>;
    networkFirewalls?: pulumi.Input<pulumi.Input<inputs.FleetNetworkFirewall>[]>;
    noBondDevices?: pulumi.Input<boolean>;
    noDcClusterGroup?: pulumi.Input<boolean>;
    noStorageDevice?: pulumi.Input<boolean>;
    noStorageInterfaces?: pulumi.Input<boolean>;
    noStorageStaticRoutes?: pulumi.Input<boolean>;
    operatingSystemVersion?: pulumi.Input<string>;
    outsideVirtualNetworks?: pulumi.Input<pulumi.Input<inputs.FleetOutsideVirtualNetwork>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.FleetPerformanceEnhancementMode>[]>;
    sriovInterfaces?: pulumi.Input<pulumi.Input<inputs.FleetSriovInterface>[]>;
    storageClassLists?: pulumi.Input<pulumi.Input<inputs.FleetStorageClassList>[]>;
    storageDeviceLists?: pulumi.Input<pulumi.Input<inputs.FleetStorageDeviceList>[]>;
    storageInterfaceLists?: pulumi.Input<pulumi.Input<inputs.FleetStorageInterfaceList>[]>;
    storageStaticRoutes?: pulumi.Input<pulumi.Input<inputs.FleetStorageStaticRoute>[]>;
    usbPolicies?: pulumi.Input<pulumi.Input<inputs.FleetUsbPolicy>[]>;
    volterraSoftwareVersion?: pulumi.Input<string>;
}
