// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ModifySite extends pulumi.CustomResource {
    /**
     * Get an existing ModifySite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ModifySiteState, opts?: pulumi.CustomResourceOptions): ModifySite {
        return new ModifySite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/modifySite:ModifySite';

    /**
     * Returns true if the given object is an instance of ModifySite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ModifySite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ModifySite.__pulumiType;
    }

    public readonly address!: pulumi.Output<string | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly bgpPeerAddress!: pulumi.Output<string | undefined>;
    public readonly bgpRouterId!: pulumi.Output<string | undefined>;
    public readonly coordinates!: pulumi.Output<outputs.ModifySiteCoordinate[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly desiredPoolCount!: pulumi.Output<number | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly insideNameserver!: pulumi.Output<string | undefined>;
    public readonly insideVip!: pulumi.Output<string | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly operatingSystemVersion!: pulumi.Output<string | undefined>;
    public readonly outsideNameserver!: pulumi.Output<string | undefined>;
    public readonly outsideVip!: pulumi.Output<string | undefined>;
    public readonly retry!: pulumi.Output<number | undefined>;
    public readonly siteToSiteNetworkType!: pulumi.Output<string | undefined>;
    public readonly siteToSiteTunnelIp!: pulumi.Output<string | undefined>;
    public readonly tunnelDeadTimeout!: pulumi.Output<number | undefined>;
    public readonly tunnelType!: pulumi.Output<string | undefined>;
    public readonly vipVrrpMode!: pulumi.Output<string | undefined>;
    public readonly volterraSoftwareOveride!: pulumi.Output<string | undefined>;
    public readonly volterraSoftwareVersion!: pulumi.Output<string | undefined>;
    public readonly waitTime!: pulumi.Output<number | undefined>;

    /**
     * Create a ModifySite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ModifySiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ModifySiteArgs | ModifySiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ModifySiteState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["bgpPeerAddress"] = state ? state.bgpPeerAddress : undefined;
            resourceInputs["bgpRouterId"] = state ? state.bgpRouterId : undefined;
            resourceInputs["coordinates"] = state ? state.coordinates : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["desiredPoolCount"] = state ? state.desiredPoolCount : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["insideNameserver"] = state ? state.insideNameserver : undefined;
            resourceInputs["insideVip"] = state ? state.insideVip : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["operatingSystemVersion"] = state ? state.operatingSystemVersion : undefined;
            resourceInputs["outsideNameserver"] = state ? state.outsideNameserver : undefined;
            resourceInputs["outsideVip"] = state ? state.outsideVip : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["siteToSiteNetworkType"] = state ? state.siteToSiteNetworkType : undefined;
            resourceInputs["siteToSiteTunnelIp"] = state ? state.siteToSiteTunnelIp : undefined;
            resourceInputs["tunnelDeadTimeout"] = state ? state.tunnelDeadTimeout : undefined;
            resourceInputs["tunnelType"] = state ? state.tunnelType : undefined;
            resourceInputs["vipVrrpMode"] = state ? state.vipVrrpMode : undefined;
            resourceInputs["volterraSoftwareOveride"] = state ? state.volterraSoftwareOveride : undefined;
            resourceInputs["volterraSoftwareVersion"] = state ? state.volterraSoftwareVersion : undefined;
            resourceInputs["waitTime"] = state ? state.waitTime : undefined;
        } else {
            const args = argsOrState as ModifySiteArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["bgpPeerAddress"] = args ? args.bgpPeerAddress : undefined;
            resourceInputs["bgpRouterId"] = args ? args.bgpRouterId : undefined;
            resourceInputs["coordinates"] = args ? args.coordinates : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["desiredPoolCount"] = args ? args.desiredPoolCount : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["insideNameserver"] = args ? args.insideNameserver : undefined;
            resourceInputs["insideVip"] = args ? args.insideVip : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["operatingSystemVersion"] = args ? args.operatingSystemVersion : undefined;
            resourceInputs["outsideNameserver"] = args ? args.outsideNameserver : undefined;
            resourceInputs["outsideVip"] = args ? args.outsideVip : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["siteToSiteNetworkType"] = args ? args.siteToSiteNetworkType : undefined;
            resourceInputs["siteToSiteTunnelIp"] = args ? args.siteToSiteTunnelIp : undefined;
            resourceInputs["tunnelDeadTimeout"] = args ? args.tunnelDeadTimeout : undefined;
            resourceInputs["tunnelType"] = args ? args.tunnelType : undefined;
            resourceInputs["vipVrrpMode"] = args ? args.vipVrrpMode : undefined;
            resourceInputs["volterraSoftwareOveride"] = args ? args.volterraSoftwareOveride : undefined;
            resourceInputs["volterraSoftwareVersion"] = args ? args.volterraSoftwareVersion : undefined;
            resourceInputs["waitTime"] = args ? args.waitTime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ModifySite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ModifySite resources.
 */
export interface ModifySiteState {
    address?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bgpPeerAddress?: pulumi.Input<string>;
    bgpRouterId?: pulumi.Input<string>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.ModifySiteCoordinate>[]>;
    description?: pulumi.Input<string>;
    desiredPoolCount?: pulumi.Input<number>;
    disable?: pulumi.Input<boolean>;
    insideNameserver?: pulumi.Input<string>;
    insideVip?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    operatingSystemVersion?: pulumi.Input<string>;
    outsideNameserver?: pulumi.Input<string>;
    outsideVip?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    siteToSiteNetworkType?: pulumi.Input<string>;
    siteToSiteTunnelIp?: pulumi.Input<string>;
    tunnelDeadTimeout?: pulumi.Input<number>;
    tunnelType?: pulumi.Input<string>;
    vipVrrpMode?: pulumi.Input<string>;
    volterraSoftwareOveride?: pulumi.Input<string>;
    volterraSoftwareVersion?: pulumi.Input<string>;
    waitTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ModifySite resource.
 */
export interface ModifySiteArgs {
    address?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    bgpPeerAddress?: pulumi.Input<string>;
    bgpRouterId?: pulumi.Input<string>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.ModifySiteCoordinate>[]>;
    description?: pulumi.Input<string>;
    desiredPoolCount?: pulumi.Input<number>;
    disable?: pulumi.Input<boolean>;
    insideNameserver?: pulumi.Input<string>;
    insideVip?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    operatingSystemVersion?: pulumi.Input<string>;
    outsideNameserver?: pulumi.Input<string>;
    outsideVip?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    siteToSiteNetworkType?: pulumi.Input<string>;
    siteToSiteTunnelIp?: pulumi.Input<string>;
    tunnelDeadTimeout?: pulumi.Input<number>;
    tunnelType?: pulumi.Input<string>;
    vipVrrpMode?: pulumi.Input<string>;
    volterraSoftwareOveride?: pulumi.Input<string>;
    volterraSoftwareVersion?: pulumi.Input<string>;
    waitTime?: pulumi.Input<number>;
}
