// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RegistrationApproval extends pulumi.CustomResource {
    /**
     * Get an existing RegistrationApproval resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistrationApprovalState, opts?: pulumi.CustomResourceOptions): RegistrationApproval {
        return new RegistrationApproval(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/registrationApproval:RegistrationApproval';

    /**
     * Returns true if the given object is an instance of RegistrationApproval.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistrationApproval {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistrationApproval.__pulumiType;
    }

    public readonly clusterName!: pulumi.Output<string>;
    public readonly clusterSize!: pulumi.Output<number>;
    public readonly connectedRegion!: pulumi.Output<string | undefined>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly latitude!: pulumi.Output<number | undefined>;
    public readonly longitude!: pulumi.Output<number | undefined>;
    public readonly privateNetworkName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly registrationName!: pulumi.Output<string>;
    public readonly retry!: pulumi.Output<number | undefined>;
    public readonly tunnelType!: pulumi.Output<string | undefined>;
    public readonly waitTime!: pulumi.Output<number | undefined>;

    /**
     * Create a RegistrationApproval resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistrationApprovalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistrationApprovalArgs | RegistrationApprovalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistrationApprovalState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterSize"] = state ? state.clusterSize : undefined;
            resourceInputs["connectedRegion"] = state ? state.connectedRegion : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["latitude"] = state ? state.latitude : undefined;
            resourceInputs["longitude"] = state ? state.longitude : undefined;
            resourceInputs["privateNetworkName"] = state ? state.privateNetworkName : undefined;
            resourceInputs["registrationName"] = state ? state.registrationName : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["tunnelType"] = state ? state.tunnelType : undefined;
            resourceInputs["waitTime"] = state ? state.waitTime : undefined;
        } else {
            const args = argsOrState as RegistrationApprovalArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.clusterSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterSize'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterSize"] = args ? args.clusterSize : undefined;
            resourceInputs["connectedRegion"] = args ? args.connectedRegion : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["latitude"] = args ? args.latitude : undefined;
            resourceInputs["longitude"] = args ? args.longitude : undefined;
            resourceInputs["privateNetworkName"] = args ? args.privateNetworkName : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["tunnelType"] = args ? args.tunnelType : undefined;
            resourceInputs["waitTime"] = args ? args.waitTime : undefined;
            resourceInputs["registrationName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistrationApproval.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RegistrationApproval resources.
 */
export interface RegistrationApprovalState {
    clusterName?: pulumi.Input<string>;
    clusterSize?: pulumi.Input<number>;
    connectedRegion?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    latitude?: pulumi.Input<number>;
    longitude?: pulumi.Input<number>;
    privateNetworkName?: pulumi.Input<string>;
    registrationName?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    tunnelType?: pulumi.Input<string>;
    waitTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a RegistrationApproval resource.
 */
export interface RegistrationApprovalArgs {
    clusterName: pulumi.Input<string>;
    clusterSize: pulumi.Input<number>;
    connectedRegion?: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    latitude?: pulumi.Input<number>;
    longitude?: pulumi.Input<number>;
    privateNetworkName?: pulumi.Input<string>;
    retry?: pulumi.Input<number>;
    tunnelType?: pulumi.Input<string>;
    waitTime?: pulumi.Input<number>;
}
