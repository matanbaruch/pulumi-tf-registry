// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class UztnaDomainView extends pulumi.CustomResource {
    /**
     * Get an existing UztnaDomainView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UztnaDomainViewState, opts?: pulumi.CustomResourceOptions): UztnaDomainView {
        return new UztnaDomainView(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/uztnaDomainView:UztnaDomainView';

    /**
     * Returns true if the given object is an instance of UztnaDomainView.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UztnaDomainView {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UztnaDomainView.__pulumiType;
    }

    public readonly accessUrl!: pulumi.Output<string>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly certs!: pulumi.Output<outputs.UztnaDomainViewCert[]>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly gateways!: pulumi.Output<outputs.UztnaDomainViewGateway[]>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly leasePools!: pulumi.Output<outputs.UztnaDomainViewLeasePool[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly profileName!: pulumi.Output<string>;

    /**
     * Create a UztnaDomainView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UztnaDomainViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UztnaDomainViewArgs | UztnaDomainViewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UztnaDomainViewState | undefined;
            resourceInputs["accessUrl"] = state ? state.accessUrl : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["certs"] = state ? state.certs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["gateways"] = state ? state.gateways : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["leasePools"] = state ? state.leasePools : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
        } else {
            const args = argsOrState as UztnaDomainViewArgs | undefined;
            if ((!args || args.accessUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessUrl'");
            }
            if ((!args || args.certs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certs'");
            }
            if ((!args || args.gateways === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gateways'");
            }
            if ((!args || args.leasePools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'leasePools'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            resourceInputs["accessUrl"] = args ? args.accessUrl : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["certs"] = args ? args.certs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["gateways"] = args ? args.gateways : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["leasePools"] = args ? args.leasePools : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UztnaDomainView.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering UztnaDomainView resources.
 */
export interface UztnaDomainViewState {
    accessUrl?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    certs?: pulumi.Input<pulumi.Input<inputs.UztnaDomainViewCert>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    gateways?: pulumi.Input<pulumi.Input<inputs.UztnaDomainViewGateway>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    leasePools?: pulumi.Input<pulumi.Input<inputs.UztnaDomainViewLeasePool>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    profileName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UztnaDomainView resource.
 */
export interface UztnaDomainViewArgs {
    accessUrl: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    certs: pulumi.Input<pulumi.Input<inputs.UztnaDomainViewCert>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    gateways: pulumi.Input<pulumi.Input<inputs.UztnaDomainViewGateway>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    leasePools: pulumi.Input<pulumi.Input<inputs.UztnaDomainViewLeasePool>[]>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    profileName: pulumi.Input<string>;
}
