// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AwsTgwSite extends pulumi.CustomResource {
    /**
     * Get an existing AwsTgwSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsTgwSiteState, opts?: pulumi.CustomResourceOptions): AwsTgwSite {
        return new AwsTgwSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/awsTgwSite:AwsTgwSite';

    /**
     * Returns true if the given object is an instance of AwsTgwSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsTgwSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsTgwSite.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly awsParameters!: pulumi.Output<outputs.AwsTgwSiteAwsParameter[]>;
    public readonly blockAllServices!: pulumi.Output<boolean | undefined>;
    public readonly blockedServices!: pulumi.Output<outputs.AwsTgwSiteBlockedService[] | undefined>;
    public readonly coordinates!: pulumi.Output<outputs.AwsTgwSiteCoordinate[] | undefined>;
    public readonly customDns!: pulumi.Output<outputs.AwsTgwSiteCustomDn[] | undefined>;
    public readonly defaultBlockedServices!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly directConnectDisabled!: pulumi.Output<boolean | undefined>;
    public readonly directConnectEnableds!: pulumi.Output<outputs.AwsTgwSiteDirectConnectEnabled[] | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly kubernetesUpgradeDrains!: pulumi.Output<outputs.AwsTgwSiteKubernetesUpgradeDrain[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly logReceivers!: pulumi.Output<outputs.AwsTgwSiteLogReceiver[] | undefined>;
    public readonly logsStreamingDisabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly offlineSurvivabilityModes!: pulumi.Output<outputs.AwsTgwSiteOfflineSurvivabilityMode[] | undefined>;
    public readonly os!: pulumi.Output<outputs.AwsTgwSiteO[] | undefined>;
    public readonly performanceEnhancementModes!: pulumi.Output<outputs.AwsTgwSitePerformanceEnhancementMode[] | undefined>;
    public readonly privateConnectivities!: pulumi.Output<outputs.AwsTgwSitePrivateConnectivity[] | undefined>;
    public readonly sws!: pulumi.Output<outputs.AwsTgwSiteSw[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tgwSecurities!: pulumi.Output<outputs.AwsTgwSiteTgwSecurity[] | undefined>;
    public readonly vnConfigs!: pulumi.Output<outputs.AwsTgwSiteVnConfig[] | undefined>;
    public readonly vpcAttachments!: pulumi.Output<outputs.AwsTgwSiteVpcAttachment[] | undefined>;

    /**
     * Create a AwsTgwSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsTgwSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsTgwSiteArgs | AwsTgwSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsTgwSiteState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["awsParameters"] = state ? state.awsParameters : undefined;
            resourceInputs["blockAllServices"] = state ? state.blockAllServices : undefined;
            resourceInputs["blockedServices"] = state ? state.blockedServices : undefined;
            resourceInputs["coordinates"] = state ? state.coordinates : undefined;
            resourceInputs["customDns"] = state ? state.customDns : undefined;
            resourceInputs["defaultBlockedServices"] = state ? state.defaultBlockedServices : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directConnectDisabled"] = state ? state.directConnectDisabled : undefined;
            resourceInputs["directConnectEnableds"] = state ? state.directConnectEnableds : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = state ? state.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logReceivers"] = state ? state.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = state ? state.logsStreamingDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["offlineSurvivabilityModes"] = state ? state.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["performanceEnhancementModes"] = state ? state.performanceEnhancementModes : undefined;
            resourceInputs["privateConnectivities"] = state ? state.privateConnectivities : undefined;
            resourceInputs["sws"] = state ? state.sws : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tgwSecurities"] = state ? state.tgwSecurities : undefined;
            resourceInputs["vnConfigs"] = state ? state.vnConfigs : undefined;
            resourceInputs["vpcAttachments"] = state ? state.vpcAttachments : undefined;
        } else {
            const args = argsOrState as AwsTgwSiteArgs | undefined;
            if ((!args || args.awsParameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsParameters'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["awsParameters"] = args ? args.awsParameters : undefined;
            resourceInputs["blockAllServices"] = args ? args.blockAllServices : undefined;
            resourceInputs["blockedServices"] = args ? args.blockedServices : undefined;
            resourceInputs["coordinates"] = args ? args.coordinates : undefined;
            resourceInputs["customDns"] = args ? args.customDns : undefined;
            resourceInputs["defaultBlockedServices"] = args ? args.defaultBlockedServices : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directConnectDisabled"] = args ? args.directConnectDisabled : undefined;
            resourceInputs["directConnectEnableds"] = args ? args.directConnectEnableds : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = args ? args.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["logReceivers"] = args ? args.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = args ? args.logsStreamingDisabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["offlineSurvivabilityModes"] = args ? args.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["performanceEnhancementModes"] = args ? args.performanceEnhancementModes : undefined;
            resourceInputs["privateConnectivities"] = args ? args.privateConnectivities : undefined;
            resourceInputs["sws"] = args ? args.sws : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tgwSecurities"] = args ? args.tgwSecurities : undefined;
            resourceInputs["vnConfigs"] = args ? args.vnConfigs : undefined;
            resourceInputs["vpcAttachments"] = args ? args.vpcAttachments : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsTgwSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AwsTgwSite resources.
 */
export interface AwsTgwSiteState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    awsParameters?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteAwsParameter>[]>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteBlockedService>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteCustomDn>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    directConnectDisabled?: pulumi.Input<boolean>;
    directConnectEnableds?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteDirectConnectEnabled>[]>;
    disable?: pulumi.Input<boolean>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteO>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.AwsTgwSitePerformanceEnhancementMode>[]>;
    privateConnectivities?: pulumi.Input<pulumi.Input<inputs.AwsTgwSitePrivateConnectivity>[]>;
    sws?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteSw>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tgwSecurities?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteTgwSecurity>[]>;
    vnConfigs?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteVnConfig>[]>;
    vpcAttachments?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteVpcAttachment>[]>;
}

/**
 * The set of arguments for constructing a AwsTgwSite resource.
 */
export interface AwsTgwSiteArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    awsParameters: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteAwsParameter>[]>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteBlockedService>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteCustomDn>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    directConnectDisabled?: pulumi.Input<boolean>;
    directConnectEnableds?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteDirectConnectEnabled>[]>;
    disable?: pulumi.Input<boolean>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteO>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.AwsTgwSitePerformanceEnhancementMode>[]>;
    privateConnectivities?: pulumi.Input<pulumi.Input<inputs.AwsTgwSitePrivateConnectivity>[]>;
    sws?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteSw>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tgwSecurities?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteTgwSecurity>[]>;
    vnConfigs?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteVnConfig>[]>;
    vpcAttachments?: pulumi.Input<pulumi.Input<inputs.AwsTgwSiteVpcAttachment>[]>;
}
