// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ServicePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePolicyState, opts?: pulumi.CustomResourceOptions): ServicePolicy {
        return new ServicePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/servicePolicy:ServicePolicy';

    /**
     * Returns true if the given object is an instance of ServicePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePolicy.__pulumiType;
    }

    public readonly algo!: pulumi.Output<string>;
    public readonly allowAllRequests!: pulumi.Output<boolean | undefined>;
    public readonly allowLists!: pulumi.Output<outputs.ServicePolicyAllowList[] | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly anyServer!: pulumi.Output<boolean | undefined>;
    public readonly denyAllRequests!: pulumi.Output<boolean | undefined>;
    public readonly denyLists!: pulumi.Output<outputs.ServicePolicyDenyList[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly internallyGenerated!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly legacyRuleLists!: pulumi.Output<outputs.ServicePolicyLegacyRuleList[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly portMatchers!: pulumi.Output<outputs.ServicePolicyPortMatcher[] | undefined>;
    public readonly ruleLists!: pulumi.Output<outputs.ServicePolicyRuleList[] | undefined>;
    public readonly serverName!: pulumi.Output<string | undefined>;
    public readonly serverNameMatchers!: pulumi.Output<outputs.ServicePolicyServerNameMatcher[] | undefined>;
    public readonly serverSelectors!: pulumi.Output<outputs.ServicePolicyServerSelector[] | undefined>;

    /**
     * Create a ServicePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePolicyArgs | ServicePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePolicyState | undefined;
            resourceInputs["algo"] = state ? state.algo : undefined;
            resourceInputs["allowAllRequests"] = state ? state.allowAllRequests : undefined;
            resourceInputs["allowLists"] = state ? state.allowLists : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["anyServer"] = state ? state.anyServer : undefined;
            resourceInputs["denyAllRequests"] = state ? state.denyAllRequests : undefined;
            resourceInputs["denyLists"] = state ? state.denyLists : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["internallyGenerated"] = state ? state.internallyGenerated : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["legacyRuleLists"] = state ? state.legacyRuleLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["portMatchers"] = state ? state.portMatchers : undefined;
            resourceInputs["ruleLists"] = state ? state.ruleLists : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["serverNameMatchers"] = state ? state.serverNameMatchers : undefined;
            resourceInputs["serverSelectors"] = state ? state.serverSelectors : undefined;
        } else {
            const args = argsOrState as ServicePolicyArgs | undefined;
            if ((!args || args.algo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'algo'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["algo"] = args ? args.algo : undefined;
            resourceInputs["allowAllRequests"] = args ? args.allowAllRequests : undefined;
            resourceInputs["allowLists"] = args ? args.allowLists : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["anyServer"] = args ? args.anyServer : undefined;
            resourceInputs["denyAllRequests"] = args ? args.denyAllRequests : undefined;
            resourceInputs["denyLists"] = args ? args.denyLists : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["internallyGenerated"] = args ? args.internallyGenerated : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["legacyRuleLists"] = args ? args.legacyRuleLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["portMatchers"] = args ? args.portMatchers : undefined;
            resourceInputs["ruleLists"] = args ? args.ruleLists : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["serverNameMatchers"] = args ? args.serverNameMatchers : undefined;
            resourceInputs["serverSelectors"] = args ? args.serverSelectors : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicePolicy resources.
 */
export interface ServicePolicyState {
    algo?: pulumi.Input<string>;
    allowAllRequests?: pulumi.Input<boolean>;
    allowLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyAllowList>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    anyServer?: pulumi.Input<boolean>;
    denyAllRequests?: pulumi.Input<boolean>;
    denyLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyDenyList>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    internallyGenerated?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    legacyRuleLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyLegacyRuleList>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    portMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyPortMatcher>[]>;
    ruleLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleList>[]>;
    serverName?: pulumi.Input<string>;
    serverNameMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyServerNameMatcher>[]>;
    serverSelectors?: pulumi.Input<pulumi.Input<inputs.ServicePolicyServerSelector>[]>;
}

/**
 * The set of arguments for constructing a ServicePolicy resource.
 */
export interface ServicePolicyArgs {
    algo: pulumi.Input<string>;
    allowAllRequests?: pulumi.Input<boolean>;
    allowLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyAllowList>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    anyServer?: pulumi.Input<boolean>;
    denyAllRequests?: pulumi.Input<boolean>;
    denyLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyDenyList>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    internallyGenerated?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    legacyRuleLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyLegacyRuleList>[]>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    portMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyPortMatcher>[]>;
    ruleLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleList>[]>;
    serverName?: pulumi.Input<string>;
    serverNameMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyServerNameMatcher>[]>;
    serverSelectors?: pulumi.Input<pulumi.Input<inputs.ServicePolicyServerSelector>[]>;
}
