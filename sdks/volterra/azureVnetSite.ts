// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AzureVnetSite extends pulumi.CustomResource {
    /**
     * Get an existing AzureVnetSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AzureVnetSiteState, opts?: pulumi.CustomResourceOptions): AzureVnetSite {
        return new AzureVnetSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/azureVnetSite:AzureVnetSite';

    /**
     * Returns true if the given object is an instance of AzureVnetSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AzureVnetSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AzureVnetSite.__pulumiType;
    }

    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly adminPasswords!: pulumi.Output<outputs.AzureVnetSiteAdminPassword[] | undefined>;
    public readonly alternateRegion!: pulumi.Output<string | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly azureCreds!: pulumi.Output<outputs.AzureVnetSiteAzureCred[] | undefined>;
    public readonly azureRegion!: pulumi.Output<string | undefined>;
    public readonly blockAllServices!: pulumi.Output<boolean | undefined>;
    public readonly blockedServices!: pulumi.Output<outputs.AzureVnetSiteBlockedService[] | undefined>;
    public readonly coordinates!: pulumi.Output<outputs.AzureVnetSiteCoordinate[] | undefined>;
    public readonly customDns!: pulumi.Output<outputs.AzureVnetSiteCustomDn[] | undefined>;
    public readonly defaultBlockedServices!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly diskSize!: pulumi.Output<number | undefined>;
    public readonly ingressEgressGwArs!: pulumi.Output<outputs.AzureVnetSiteIngressEgressGwAr[] | undefined>;
    public readonly ingressEgressGws!: pulumi.Output<outputs.AzureVnetSiteIngressEgressGw[] | undefined>;
    public readonly ingressGwArs!: pulumi.Output<outputs.AzureVnetSiteIngressGwAr[] | undefined>;
    public readonly ingressGws!: pulumi.Output<outputs.AzureVnetSiteIngressGw[] | undefined>;
    public readonly kubernetesUpgradeDrains!: pulumi.Output<outputs.AzureVnetSiteKubernetesUpgradeDrain[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly logReceivers!: pulumi.Output<outputs.AzureVnetSiteLogReceiver[] | undefined>;
    public readonly logsStreamingDisabled!: pulumi.Output<boolean | undefined>;
    public readonly machineType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noWorkerNodes!: pulumi.Output<boolean | undefined>;
    public readonly nodesPerAz!: pulumi.Output<number | undefined>;
    public readonly offlineSurvivabilityModes!: pulumi.Output<outputs.AzureVnetSiteOfflineSurvivabilityMode[] | undefined>;
    public readonly os!: pulumi.Output<outputs.AzureVnetSiteO[] | undefined>;
    public readonly resourceGroup!: pulumi.Output<string>;
    public readonly sshKey!: pulumi.Output<string>;
    public readonly sws!: pulumi.Output<outputs.AzureVnetSiteSw[] | undefined>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly totalNodes!: pulumi.Output<number | undefined>;
    public readonly vnets!: pulumi.Output<outputs.AzureVnetSiteVnet[]>;
    public readonly voltstackClusterArs!: pulumi.Output<outputs.AzureVnetSiteVoltstackClusterAr[] | undefined>;
    public readonly voltstackClusters!: pulumi.Output<outputs.AzureVnetSiteVoltstackCluster[] | undefined>;

    /**
     * Create a AzureVnetSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AzureVnetSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AzureVnetSiteArgs | AzureVnetSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AzureVnetSiteState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["adminPasswords"] = state ? state.adminPasswords : undefined;
            resourceInputs["alternateRegion"] = state ? state.alternateRegion : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["azureCreds"] = state ? state.azureCreds : undefined;
            resourceInputs["azureRegion"] = state ? state.azureRegion : undefined;
            resourceInputs["blockAllServices"] = state ? state.blockAllServices : undefined;
            resourceInputs["blockedServices"] = state ? state.blockedServices : undefined;
            resourceInputs["coordinates"] = state ? state.coordinates : undefined;
            resourceInputs["customDns"] = state ? state.customDns : undefined;
            resourceInputs["defaultBlockedServices"] = state ? state.defaultBlockedServices : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["ingressEgressGwArs"] = state ? state.ingressEgressGwArs : undefined;
            resourceInputs["ingressEgressGws"] = state ? state.ingressEgressGws : undefined;
            resourceInputs["ingressGwArs"] = state ? state.ingressGwArs : undefined;
            resourceInputs["ingressGws"] = state ? state.ingressGws : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = state ? state.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logReceivers"] = state ? state.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = state ? state.logsStreamingDisabled : undefined;
            resourceInputs["machineType"] = state ? state.machineType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noWorkerNodes"] = state ? state.noWorkerNodes : undefined;
            resourceInputs["nodesPerAz"] = state ? state.nodesPerAz : undefined;
            resourceInputs["offlineSurvivabilityModes"] = state ? state.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["resourceGroup"] = state ? state.resourceGroup : undefined;
            resourceInputs["sshKey"] = state ? state.sshKey : undefined;
            resourceInputs["sws"] = state ? state.sws : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["totalNodes"] = state ? state.totalNodes : undefined;
            resourceInputs["vnets"] = state ? state.vnets : undefined;
            resourceInputs["voltstackClusterArs"] = state ? state.voltstackClusterArs : undefined;
            resourceInputs["voltstackClusters"] = state ? state.voltstackClusters : undefined;
        } else {
            const args = argsOrState as AzureVnetSiteArgs | undefined;
            if ((!args || args.machineType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'machineType'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.resourceGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroup'");
            }
            if ((!args || args.sshKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshKey'");
            }
            if ((!args || args.vnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vnets'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["adminPasswords"] = args ? args.adminPasswords : undefined;
            resourceInputs["alternateRegion"] = args ? args.alternateRegion : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["azureCreds"] = args ? args.azureCreds : undefined;
            resourceInputs["azureRegion"] = args ? args.azureRegion : undefined;
            resourceInputs["blockAllServices"] = args ? args.blockAllServices : undefined;
            resourceInputs["blockedServices"] = args ? args.blockedServices : undefined;
            resourceInputs["coordinates"] = args ? args.coordinates : undefined;
            resourceInputs["customDns"] = args ? args.customDns : undefined;
            resourceInputs["defaultBlockedServices"] = args ? args.defaultBlockedServices : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["ingressEgressGwArs"] = args ? args.ingressEgressGwArs : undefined;
            resourceInputs["ingressEgressGws"] = args ? args.ingressEgressGws : undefined;
            resourceInputs["ingressGwArs"] = args ? args.ingressGwArs : undefined;
            resourceInputs["ingressGws"] = args ? args.ingressGws : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = args ? args.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["logReceivers"] = args ? args.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = args ? args.logsStreamingDisabled : undefined;
            resourceInputs["machineType"] = args ? args.machineType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noWorkerNodes"] = args ? args.noWorkerNodes : undefined;
            resourceInputs["nodesPerAz"] = args ? args.nodesPerAz : undefined;
            resourceInputs["offlineSurvivabilityModes"] = args ? args.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["resourceGroup"] = args ? args.resourceGroup : undefined;
            resourceInputs["sshKey"] = args ? args.sshKey : undefined;
            resourceInputs["sws"] = args ? args.sws : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["totalNodes"] = args ? args.totalNodes : undefined;
            resourceInputs["vnets"] = args ? args.vnets : undefined;
            resourceInputs["voltstackClusterArs"] = args ? args.voltstackClusterArs : undefined;
            resourceInputs["voltstackClusters"] = args ? args.voltstackClusters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AzureVnetSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AzureVnetSite resources.
 */
export interface AzureVnetSiteState {
    address?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    adminPasswords?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteAdminPassword>[]>;
    alternateRegion?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    azureCreds?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteAzureCred>[]>;
    azureRegion?: pulumi.Input<string>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteBlockedService>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteCustomDn>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    diskSize?: pulumi.Input<number>;
    ingressEgressGwArs?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressEgressGwAr>[]>;
    ingressEgressGws?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressEgressGw>[]>;
    ingressGwArs?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressGwAr>[]>;
    ingressGws?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressGw>[]>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    machineType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noWorkerNodes?: pulumi.Input<boolean>;
    nodesPerAz?: pulumi.Input<number>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteO>[]>;
    resourceGroup?: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    sws?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteSw>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    totalNodes?: pulumi.Input<number>;
    vnets?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteVnet>[]>;
    voltstackClusterArs?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteVoltstackClusterAr>[]>;
    voltstackClusters?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteVoltstackCluster>[]>;
}

/**
 * The set of arguments for constructing a AzureVnetSite resource.
 */
export interface AzureVnetSiteArgs {
    address?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    adminPasswords?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteAdminPassword>[]>;
    alternateRegion?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    azureCreds?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteAzureCred>[]>;
    azureRegion?: pulumi.Input<string>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteBlockedService>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteCustomDn>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    diskSize?: pulumi.Input<number>;
    ingressEgressGwArs?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressEgressGwAr>[]>;
    ingressEgressGws?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressEgressGw>[]>;
    ingressGwArs?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressGwAr>[]>;
    ingressGws?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteIngressGw>[]>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    machineType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noWorkerNodes?: pulumi.Input<boolean>;
    nodesPerAz?: pulumi.Input<number>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteO>[]>;
    resourceGroup: pulumi.Input<string>;
    sshKey: pulumi.Input<string>;
    sws?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteSw>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    totalNodes?: pulumi.Input<number>;
    vnets: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteVnet>[]>;
    voltstackClusterArs?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteVoltstackClusterAr>[]>;
    voltstackClusters?: pulumi.Input<pulumi.Input<inputs.AzureVnetSiteVoltstackCluster>[]>;
}
