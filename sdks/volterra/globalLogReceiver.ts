// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GlobalLogReceiver extends pulumi.CustomResource {
    /**
     * Get an existing GlobalLogReceiver resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalLogReceiverState, opts?: pulumi.CustomResourceOptions): GlobalLogReceiver {
        return new GlobalLogReceiver(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/globalLogReceiver:GlobalLogReceiver';

    /**
     * Returns true if the given object is an instance of GlobalLogReceiver.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalLogReceiver {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalLogReceiver.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly auditLogs!: pulumi.Output<boolean | undefined>;
    public readonly awsCloudWatchReceivers!: pulumi.Output<outputs.GlobalLogReceiverAwsCloudWatchReceiver[] | undefined>;
    public readonly azureEventHubsReceivers!: pulumi.Output<outputs.GlobalLogReceiverAzureEventHubsReceiver[] | undefined>;
    public readonly azureReceivers!: pulumi.Output<outputs.GlobalLogReceiverAzureReceiver[] | undefined>;
    public readonly datadogReceivers!: pulumi.Output<outputs.GlobalLogReceiverDatadogReceiver[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly dnsLogs!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly elasticReceivers!: pulumi.Output<outputs.GlobalLogReceiverElasticReceiver[] | undefined>;
    public readonly gcpBucketReceivers!: pulumi.Output<outputs.GlobalLogReceiverGcpBucketReceiver[] | undefined>;
    public readonly httpReceivers!: pulumi.Output<outputs.GlobalLogReceiverHttpReceiver[] | undefined>;
    public readonly kafkaReceivers!: pulumi.Output<outputs.GlobalLogReceiverKafkaReceiver[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly newRelicReceivers!: pulumi.Output<outputs.GlobalLogReceiverNewRelicReceiver[] | undefined>;
    public readonly nsAll!: pulumi.Output<boolean | undefined>;
    public readonly nsCurrent!: pulumi.Output<boolean | undefined>;
    public readonly nsLists!: pulumi.Output<outputs.GlobalLogReceiverNsList[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly nsSystem!: pulumi.Output<boolean | undefined>;
    public readonly qradarReceivers!: pulumi.Output<outputs.GlobalLogReceiverQradarReceiver[] | undefined>;
    public readonly requestLogs!: pulumi.Output<boolean | undefined>;
    public readonly s3Receivers!: pulumi.Output<outputs.GlobalLogReceiverS3Receiver[] | undefined>;
    public readonly securityEvents!: pulumi.Output<boolean | undefined>;
    public readonly splunkReceivers!: pulumi.Output<outputs.GlobalLogReceiverSplunkReceiver[] | undefined>;
    public readonly sumoLogicReceivers!: pulumi.Output<outputs.GlobalLogReceiverSumoLogicReceiver[] | undefined>;

    /**
     * Create a GlobalLogReceiver resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalLogReceiverArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalLogReceiverArgs | GlobalLogReceiverState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalLogReceiverState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["auditLogs"] = state ? state.auditLogs : undefined;
            resourceInputs["awsCloudWatchReceivers"] = state ? state.awsCloudWatchReceivers : undefined;
            resourceInputs["azureEventHubsReceivers"] = state ? state.azureEventHubsReceivers : undefined;
            resourceInputs["azureReceivers"] = state ? state.azureReceivers : undefined;
            resourceInputs["datadogReceivers"] = state ? state.datadogReceivers : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dnsLogs"] = state ? state.dnsLogs : undefined;
            resourceInputs["elasticReceivers"] = state ? state.elasticReceivers : undefined;
            resourceInputs["gcpBucketReceivers"] = state ? state.gcpBucketReceivers : undefined;
            resourceInputs["httpReceivers"] = state ? state.httpReceivers : undefined;
            resourceInputs["kafkaReceivers"] = state ? state.kafkaReceivers : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["newRelicReceivers"] = state ? state.newRelicReceivers : undefined;
            resourceInputs["nsAll"] = state ? state.nsAll : undefined;
            resourceInputs["nsCurrent"] = state ? state.nsCurrent : undefined;
            resourceInputs["nsLists"] = state ? state.nsLists : undefined;
            resourceInputs["nsSystem"] = state ? state.nsSystem : undefined;
            resourceInputs["qradarReceivers"] = state ? state.qradarReceivers : undefined;
            resourceInputs["requestLogs"] = state ? state.requestLogs : undefined;
            resourceInputs["s3Receivers"] = state ? state.s3Receivers : undefined;
            resourceInputs["securityEvents"] = state ? state.securityEvents : undefined;
            resourceInputs["splunkReceivers"] = state ? state.splunkReceivers : undefined;
            resourceInputs["sumoLogicReceivers"] = state ? state.sumoLogicReceivers : undefined;
        } else {
            const args = argsOrState as GlobalLogReceiverArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["auditLogs"] = args ? args.auditLogs : undefined;
            resourceInputs["awsCloudWatchReceivers"] = args ? args.awsCloudWatchReceivers : undefined;
            resourceInputs["azureEventHubsReceivers"] = args ? args.azureEventHubsReceivers : undefined;
            resourceInputs["azureReceivers"] = args ? args.azureReceivers : undefined;
            resourceInputs["datadogReceivers"] = args ? args.datadogReceivers : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["dnsLogs"] = args ? args.dnsLogs : undefined;
            resourceInputs["elasticReceivers"] = args ? args.elasticReceivers : undefined;
            resourceInputs["gcpBucketReceivers"] = args ? args.gcpBucketReceivers : undefined;
            resourceInputs["httpReceivers"] = args ? args.httpReceivers : undefined;
            resourceInputs["kafkaReceivers"] = args ? args.kafkaReceivers : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["newRelicReceivers"] = args ? args.newRelicReceivers : undefined;
            resourceInputs["nsAll"] = args ? args.nsAll : undefined;
            resourceInputs["nsCurrent"] = args ? args.nsCurrent : undefined;
            resourceInputs["nsLists"] = args ? args.nsLists : undefined;
            resourceInputs["nsSystem"] = args ? args.nsSystem : undefined;
            resourceInputs["qradarReceivers"] = args ? args.qradarReceivers : undefined;
            resourceInputs["requestLogs"] = args ? args.requestLogs : undefined;
            resourceInputs["s3Receivers"] = args ? args.s3Receivers : undefined;
            resourceInputs["securityEvents"] = args ? args.securityEvents : undefined;
            resourceInputs["splunkReceivers"] = args ? args.splunkReceivers : undefined;
            resourceInputs["sumoLogicReceivers"] = args ? args.sumoLogicReceivers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalLogReceiver.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GlobalLogReceiver resources.
 */
export interface GlobalLogReceiverState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    auditLogs?: pulumi.Input<boolean>;
    awsCloudWatchReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverAwsCloudWatchReceiver>[]>;
    azureEventHubsReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverAzureEventHubsReceiver>[]>;
    azureReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverAzureReceiver>[]>;
    datadogReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverDatadogReceiver>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    dnsLogs?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    elasticReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverElasticReceiver>[]>;
    gcpBucketReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverGcpBucketReceiver>[]>;
    httpReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverHttpReceiver>[]>;
    kafkaReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverKafkaReceiver>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    newRelicReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverNewRelicReceiver>[]>;
    nsAll?: pulumi.Input<boolean>;
    nsCurrent?: pulumi.Input<boolean>;
    nsLists?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverNsList>[]>;
    /**
     * @deprecated Deprecated
     */
    nsSystem?: pulumi.Input<boolean>;
    qradarReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverQradarReceiver>[]>;
    requestLogs?: pulumi.Input<boolean>;
    s3Receivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverS3Receiver>[]>;
    securityEvents?: pulumi.Input<boolean>;
    splunkReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverSplunkReceiver>[]>;
    sumoLogicReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverSumoLogicReceiver>[]>;
}

/**
 * The set of arguments for constructing a GlobalLogReceiver resource.
 */
export interface GlobalLogReceiverArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    auditLogs?: pulumi.Input<boolean>;
    awsCloudWatchReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverAwsCloudWatchReceiver>[]>;
    azureEventHubsReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverAzureEventHubsReceiver>[]>;
    azureReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverAzureReceiver>[]>;
    datadogReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverDatadogReceiver>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    dnsLogs?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    elasticReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverElasticReceiver>[]>;
    gcpBucketReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverGcpBucketReceiver>[]>;
    httpReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverHttpReceiver>[]>;
    kafkaReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverKafkaReceiver>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    newRelicReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverNewRelicReceiver>[]>;
    nsAll?: pulumi.Input<boolean>;
    nsCurrent?: pulumi.Input<boolean>;
    nsLists?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverNsList>[]>;
    /**
     * @deprecated Deprecated
     */
    nsSystem?: pulumi.Input<boolean>;
    qradarReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverQradarReceiver>[]>;
    requestLogs?: pulumi.Input<boolean>;
    s3Receivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverS3Receiver>[]>;
    securityEvents?: pulumi.Input<boolean>;
    splunkReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverSplunkReceiver>[]>;
    sumoLogicReceivers?: pulumi.Input<pulumi.Input<inputs.GlobalLogReceiverSumoLogicReceiver>[]>;
}
