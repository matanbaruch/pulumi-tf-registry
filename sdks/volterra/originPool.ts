// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OriginPool extends pulumi.CustomResource {
    /**
     * Get an existing OriginPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OriginPoolState, opts?: pulumi.CustomResourceOptions): OriginPool {
        return new OriginPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/originPool:OriginPool';

    /**
     * Returns true if the given object is an instance of OriginPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OriginPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OriginPool.__pulumiType;
    }

    public readonly advancedOptions!: pulumi.Output<outputs.OriginPoolAdvancedOption[] | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly automaticPort!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly endpointSelection!: pulumi.Output<string>;
    public readonly healthCheckPort!: pulumi.Output<number | undefined>;
    public readonly healthchecks!: pulumi.Output<outputs.OriginPoolHealthcheck[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly lbPort!: pulumi.Output<boolean | undefined>;
    public readonly loadbalancerAlgorithm!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noTls!: pulumi.Output<boolean | undefined>;
    public readonly originServers!: pulumi.Output<outputs.OriginPoolOriginServer[]>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly sameAsEndpointPort!: pulumi.Output<boolean | undefined>;
    public readonly useTls!: pulumi.Output<outputs.OriginPoolUseTl[] | undefined>;

    /**
     * Create a OriginPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OriginPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OriginPoolArgs | OriginPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OriginPoolState | undefined;
            resourceInputs["advancedOptions"] = state ? state.advancedOptions : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["automaticPort"] = state ? state.automaticPort : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["endpointSelection"] = state ? state.endpointSelection : undefined;
            resourceInputs["healthCheckPort"] = state ? state.healthCheckPort : undefined;
            resourceInputs["healthchecks"] = state ? state.healthchecks : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lbPort"] = state ? state.lbPort : undefined;
            resourceInputs["loadbalancerAlgorithm"] = state ? state.loadbalancerAlgorithm : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noTls"] = state ? state.noTls : undefined;
            resourceInputs["originServers"] = state ? state.originServers : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["sameAsEndpointPort"] = state ? state.sameAsEndpointPort : undefined;
            resourceInputs["useTls"] = state ? state.useTls : undefined;
        } else {
            const args = argsOrState as OriginPoolArgs | undefined;
            if ((!args || args.endpointSelection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointSelection'");
            }
            if ((!args || args.loadbalancerAlgorithm === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerAlgorithm'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.originServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originServers'");
            }
            resourceInputs["advancedOptions"] = args ? args.advancedOptions : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["automaticPort"] = args ? args.automaticPort : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["endpointSelection"] = args ? args.endpointSelection : undefined;
            resourceInputs["healthCheckPort"] = args ? args.healthCheckPort : undefined;
            resourceInputs["healthchecks"] = args ? args.healthchecks : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lbPort"] = args ? args.lbPort : undefined;
            resourceInputs["loadbalancerAlgorithm"] = args ? args.loadbalancerAlgorithm : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noTls"] = args ? args.noTls : undefined;
            resourceInputs["originServers"] = args ? args.originServers : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["sameAsEndpointPort"] = args ? args.sameAsEndpointPort : undefined;
            resourceInputs["useTls"] = args ? args.useTls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OriginPool.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OriginPool resources.
 */
export interface OriginPoolState {
    advancedOptions?: pulumi.Input<pulumi.Input<inputs.OriginPoolAdvancedOption>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    automaticPort?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    endpointSelection?: pulumi.Input<string>;
    healthCheckPort?: pulumi.Input<number>;
    healthchecks?: pulumi.Input<pulumi.Input<inputs.OriginPoolHealthcheck>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lbPort?: pulumi.Input<boolean>;
    loadbalancerAlgorithm?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noTls?: pulumi.Input<boolean>;
    originServers?: pulumi.Input<pulumi.Input<inputs.OriginPoolOriginServer>[]>;
    port?: pulumi.Input<number>;
    sameAsEndpointPort?: pulumi.Input<boolean>;
    useTls?: pulumi.Input<pulumi.Input<inputs.OriginPoolUseTl>[]>;
}

/**
 * The set of arguments for constructing a OriginPool resource.
 */
export interface OriginPoolArgs {
    advancedOptions?: pulumi.Input<pulumi.Input<inputs.OriginPoolAdvancedOption>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    automaticPort?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    endpointSelection: pulumi.Input<string>;
    healthCheckPort?: pulumi.Input<number>;
    healthchecks?: pulumi.Input<pulumi.Input<inputs.OriginPoolHealthcheck>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lbPort?: pulumi.Input<boolean>;
    loadbalancerAlgorithm: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noTls?: pulumi.Input<boolean>;
    originServers: pulumi.Input<pulumi.Input<inputs.OriginPoolOriginServer>[]>;
    port?: pulumi.Input<number>;
    sameAsEndpointPort?: pulumi.Input<boolean>;
    useTls?: pulumi.Input<pulumi.Input<inputs.OriginPoolUseTl>[]>;
}
