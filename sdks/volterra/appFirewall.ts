// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AppFirewall extends pulumi.CustomResource {
    /**
     * Get an existing AppFirewall resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppFirewallState, opts?: pulumi.CustomResourceOptions): AppFirewall {
        return new AppFirewall(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/appFirewall:AppFirewall';

    /**
     * Returns true if the given object is an instance of AppFirewall.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppFirewall {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppFirewall.__pulumiType;
    }

    public readonly allowAllResponseCodes!: pulumi.Output<boolean | undefined>;
    public readonly allowedResponseCodes!: pulumi.Output<outputs.AppFirewallAllowedResponseCode[] | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly blocking!: pulumi.Output<boolean | undefined>;
    public readonly blockingPages!: pulumi.Output<outputs.AppFirewallBlockingPage[] | undefined>;
    public readonly botProtectionSettings!: pulumi.Output<outputs.AppFirewallBotProtectionSetting[] | undefined>;
    public readonly customAnonymizations!: pulumi.Output<outputs.AppFirewallCustomAnonymization[] | undefined>;
    public readonly defaultAnonymization!: pulumi.Output<boolean | undefined>;
    public readonly defaultBotSetting!: pulumi.Output<boolean | undefined>;
    public readonly defaultDetectionSettings!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly detectionSettings!: pulumi.Output<outputs.AppFirewallDetectionSetting[] | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly disableAnonymization!: pulumi.Output<boolean | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly monitoring!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly useDefaultBlockingPage!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly useLoadbalancerSetting!: pulumi.Output<boolean | undefined>;

    /**
     * Create a AppFirewall resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppFirewallArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppFirewallArgs | AppFirewallState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppFirewallState | undefined;
            resourceInputs["allowAllResponseCodes"] = state ? state.allowAllResponseCodes : undefined;
            resourceInputs["allowedResponseCodes"] = state ? state.allowedResponseCodes : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["blocking"] = state ? state.blocking : undefined;
            resourceInputs["blockingPages"] = state ? state.blockingPages : undefined;
            resourceInputs["botProtectionSettings"] = state ? state.botProtectionSettings : undefined;
            resourceInputs["customAnonymizations"] = state ? state.customAnonymizations : undefined;
            resourceInputs["defaultAnonymization"] = state ? state.defaultAnonymization : undefined;
            resourceInputs["defaultBotSetting"] = state ? state.defaultBotSetting : undefined;
            resourceInputs["defaultDetectionSettings"] = state ? state.defaultDetectionSettings : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectionSettings"] = state ? state.detectionSettings : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableAnonymization"] = state ? state.disableAnonymization : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["useDefaultBlockingPage"] = state ? state.useDefaultBlockingPage : undefined;
            resourceInputs["useLoadbalancerSetting"] = state ? state.useLoadbalancerSetting : undefined;
        } else {
            const args = argsOrState as AppFirewallArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["allowAllResponseCodes"] = args ? args.allowAllResponseCodes : undefined;
            resourceInputs["allowedResponseCodes"] = args ? args.allowedResponseCodes : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["blocking"] = args ? args.blocking : undefined;
            resourceInputs["blockingPages"] = args ? args.blockingPages : undefined;
            resourceInputs["botProtectionSettings"] = args ? args.botProtectionSettings : undefined;
            resourceInputs["customAnonymizations"] = args ? args.customAnonymizations : undefined;
            resourceInputs["defaultAnonymization"] = args ? args.defaultAnonymization : undefined;
            resourceInputs["defaultBotSetting"] = args ? args.defaultBotSetting : undefined;
            resourceInputs["defaultDetectionSettings"] = args ? args.defaultDetectionSettings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectionSettings"] = args ? args.detectionSettings : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableAnonymization"] = args ? args.disableAnonymization : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["useDefaultBlockingPage"] = args ? args.useDefaultBlockingPage : undefined;
            resourceInputs["useLoadbalancerSetting"] = args ? args.useLoadbalancerSetting : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppFirewall.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppFirewall resources.
 */
export interface AppFirewallState {
    allowAllResponseCodes?: pulumi.Input<boolean>;
    allowedResponseCodes?: pulumi.Input<pulumi.Input<inputs.AppFirewallAllowedResponseCode>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blocking?: pulumi.Input<boolean>;
    blockingPages?: pulumi.Input<pulumi.Input<inputs.AppFirewallBlockingPage>[]>;
    botProtectionSettings?: pulumi.Input<pulumi.Input<inputs.AppFirewallBotProtectionSetting>[]>;
    customAnonymizations?: pulumi.Input<pulumi.Input<inputs.AppFirewallCustomAnonymization>[]>;
    defaultAnonymization?: pulumi.Input<boolean>;
    defaultBotSetting?: pulumi.Input<boolean>;
    defaultDetectionSettings?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    detectionSettings?: pulumi.Input<pulumi.Input<inputs.AppFirewallDetectionSetting>[]>;
    disable?: pulumi.Input<boolean>;
    disableAnonymization?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    monitoring?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    useDefaultBlockingPage?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    useLoadbalancerSetting?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AppFirewall resource.
 */
export interface AppFirewallArgs {
    allowAllResponseCodes?: pulumi.Input<boolean>;
    allowedResponseCodes?: pulumi.Input<pulumi.Input<inputs.AppFirewallAllowedResponseCode>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blocking?: pulumi.Input<boolean>;
    blockingPages?: pulumi.Input<pulumi.Input<inputs.AppFirewallBlockingPage>[]>;
    botProtectionSettings?: pulumi.Input<pulumi.Input<inputs.AppFirewallBotProtectionSetting>[]>;
    customAnonymizations?: pulumi.Input<pulumi.Input<inputs.AppFirewallCustomAnonymization>[]>;
    defaultAnonymization?: pulumi.Input<boolean>;
    defaultBotSetting?: pulumi.Input<boolean>;
    defaultDetectionSettings?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    detectionSettings?: pulumi.Input<pulumi.Input<inputs.AppFirewallDetectionSetting>[]>;
    disable?: pulumi.Input<boolean>;
    disableAnonymization?: pulumi.Input<boolean>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    monitoring?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    useDefaultBlockingPage?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    useLoadbalancerSetting?: pulumi.Input<boolean>;
}
