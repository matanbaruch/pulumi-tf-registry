// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly autoHttpConfig!: pulumi.Output<boolean | undefined>;
    public readonly circuitBreakers!: pulumi.Output<outputs.ClusterCircuitBreaker[] | undefined>;
    public readonly connectionTimeout!: pulumi.Output<number | undefined>;
    public readonly defaultSubset!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly disableProxyProtocol!: pulumi.Output<boolean | undefined>;
    public readonly endpointSelection!: pulumi.Output<string | undefined>;
    public readonly endpointSubsets!: pulumi.Output<outputs.ClusterEndpointSubset[] | undefined>;
    public readonly endpoints!: pulumi.Output<outputs.ClusterEndpoint[] | undefined>;
    public readonly fallbackPolicy!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly headerTransformationTypes!: pulumi.Output<outputs.ClusterHeaderTransformationType[] | undefined>;
    public readonly healthChecks!: pulumi.Output<outputs.ClusterHealthCheck[] | undefined>;
    public readonly http1Configs!: pulumi.Output<outputs.ClusterHttp1Config[] | undefined>;
    public readonly http2Options!: pulumi.Output<outputs.ClusterHttp2Option[] | undefined>;
    public readonly httpIdleTimeout!: pulumi.Output<number | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly loadbalancerAlgorithm!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noPanicThreshold!: pulumi.Output<boolean | undefined>;
    public readonly outlierDetections!: pulumi.Output<outputs.ClusterOutlierDetection[] | undefined>;
    public readonly panicThreshold!: pulumi.Output<number | undefined>;
    public readonly proxyProtocolV1!: pulumi.Output<boolean | undefined>;
    public readonly proxyProtocolV2!: pulumi.Output<boolean | undefined>;
    public readonly tlsParameters!: pulumi.Output<outputs.ClusterTlsParameter[] | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["autoHttpConfig"] = state ? state.autoHttpConfig : undefined;
            resourceInputs["circuitBreakers"] = state ? state.circuitBreakers : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["defaultSubset"] = state ? state.defaultSubset : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableProxyProtocol"] = state ? state.disableProxyProtocol : undefined;
            resourceInputs["endpointSelection"] = state ? state.endpointSelection : undefined;
            resourceInputs["endpointSubsets"] = state ? state.endpointSubsets : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["fallbackPolicy"] = state ? state.fallbackPolicy : undefined;
            resourceInputs["headerTransformationTypes"] = state ? state.headerTransformationTypes : undefined;
            resourceInputs["healthChecks"] = state ? state.healthChecks : undefined;
            resourceInputs["http1Configs"] = state ? state.http1Configs : undefined;
            resourceInputs["http2Options"] = state ? state.http2Options : undefined;
            resourceInputs["httpIdleTimeout"] = state ? state.httpIdleTimeout : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loadbalancerAlgorithm"] = state ? state.loadbalancerAlgorithm : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noPanicThreshold"] = state ? state.noPanicThreshold : undefined;
            resourceInputs["outlierDetections"] = state ? state.outlierDetections : undefined;
            resourceInputs["panicThreshold"] = state ? state.panicThreshold : undefined;
            resourceInputs["proxyProtocolV1"] = state ? state.proxyProtocolV1 : undefined;
            resourceInputs["proxyProtocolV2"] = state ? state.proxyProtocolV2 : undefined;
            resourceInputs["tlsParameters"] = state ? state.tlsParameters : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["autoHttpConfig"] = args ? args.autoHttpConfig : undefined;
            resourceInputs["circuitBreakers"] = args ? args.circuitBreakers : undefined;
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["defaultSubset"] = args ? args.defaultSubset : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableProxyProtocol"] = args ? args.disableProxyProtocol : undefined;
            resourceInputs["endpointSelection"] = args ? args.endpointSelection : undefined;
            resourceInputs["endpointSubsets"] = args ? args.endpointSubsets : undefined;
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["fallbackPolicy"] = args ? args.fallbackPolicy : undefined;
            resourceInputs["headerTransformationTypes"] = args ? args.headerTransformationTypes : undefined;
            resourceInputs["healthChecks"] = args ? args.healthChecks : undefined;
            resourceInputs["http1Configs"] = args ? args.http1Configs : undefined;
            resourceInputs["http2Options"] = args ? args.http2Options : undefined;
            resourceInputs["httpIdleTimeout"] = args ? args.httpIdleTimeout : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadbalancerAlgorithm"] = args ? args.loadbalancerAlgorithm : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noPanicThreshold"] = args ? args.noPanicThreshold : undefined;
            resourceInputs["outlierDetections"] = args ? args.outlierDetections : undefined;
            resourceInputs["panicThreshold"] = args ? args.panicThreshold : undefined;
            resourceInputs["proxyProtocolV1"] = args ? args.proxyProtocolV1 : undefined;
            resourceInputs["proxyProtocolV2"] = args ? args.proxyProtocolV2 : undefined;
            resourceInputs["tlsParameters"] = args ? args.tlsParameters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    autoHttpConfig?: pulumi.Input<boolean>;
    circuitBreakers?: pulumi.Input<pulumi.Input<inputs.ClusterCircuitBreaker>[]>;
    connectionTimeout?: pulumi.Input<number>;
    defaultSubset?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    disableProxyProtocol?: pulumi.Input<boolean>;
    endpointSelection?: pulumi.Input<string>;
    endpointSubsets?: pulumi.Input<pulumi.Input<inputs.ClusterEndpointSubset>[]>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.ClusterEndpoint>[]>;
    fallbackPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    headerTransformationTypes?: pulumi.Input<pulumi.Input<inputs.ClusterHeaderTransformationType>[]>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.ClusterHealthCheck>[]>;
    http1Configs?: pulumi.Input<pulumi.Input<inputs.ClusterHttp1Config>[]>;
    http2Options?: pulumi.Input<pulumi.Input<inputs.ClusterHttp2Option>[]>;
    httpIdleTimeout?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadbalancerAlgorithm?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noPanicThreshold?: pulumi.Input<boolean>;
    outlierDetections?: pulumi.Input<pulumi.Input<inputs.ClusterOutlierDetection>[]>;
    panicThreshold?: pulumi.Input<number>;
    proxyProtocolV1?: pulumi.Input<boolean>;
    proxyProtocolV2?: pulumi.Input<boolean>;
    tlsParameters?: pulumi.Input<pulumi.Input<inputs.ClusterTlsParameter>[]>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    autoHttpConfig?: pulumi.Input<boolean>;
    circuitBreakers?: pulumi.Input<pulumi.Input<inputs.ClusterCircuitBreaker>[]>;
    connectionTimeout?: pulumi.Input<number>;
    defaultSubset?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    disableProxyProtocol?: pulumi.Input<boolean>;
    endpointSelection?: pulumi.Input<string>;
    endpointSubsets?: pulumi.Input<pulumi.Input<inputs.ClusterEndpointSubset>[]>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.ClusterEndpoint>[]>;
    fallbackPolicy?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    headerTransformationTypes?: pulumi.Input<pulumi.Input<inputs.ClusterHeaderTransformationType>[]>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.ClusterHealthCheck>[]>;
    http1Configs?: pulumi.Input<pulumi.Input<inputs.ClusterHttp1Config>[]>;
    http2Options?: pulumi.Input<pulumi.Input<inputs.ClusterHttp2Option>[]>;
    httpIdleTimeout?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadbalancerAlgorithm?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noPanicThreshold?: pulumi.Input<boolean>;
    outlierDetections?: pulumi.Input<pulumi.Input<inputs.ClusterOutlierDetection>[]>;
    panicThreshold?: pulumi.Input<number>;
    proxyProtocolV1?: pulumi.Input<boolean>;
    proxyProtocolV2?: pulumi.Input<boolean>;
    tlsParameters?: pulumi.Input<pulumi.Input<inputs.ClusterTlsParameter>[]>;
}
