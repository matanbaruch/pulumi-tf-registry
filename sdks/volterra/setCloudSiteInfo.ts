// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SetCloudSiteInfo extends pulumi.CustomResource {
    /**
     * Get an existing SetCloudSiteInfo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SetCloudSiteInfoState, opts?: pulumi.CustomResourceOptions): SetCloudSiteInfo {
        return new SetCloudSiteInfo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/setCloudSiteInfo:SetCloudSiteInfo';

    /**
     * Returns true if the given object is an instance of SetCloudSiteInfo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SetCloudSiteInfo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SetCloudSiteInfo.__pulumiType;
    }

    public readonly directConnectInfos!: pulumi.Output<outputs.SetCloudSiteInfoDirectConnectInfo[] | undefined>;
    public readonly expressRouteInfos!: pulumi.Output<outputs.SetCloudSiteInfoExpressRouteInfo[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeInfos!: pulumi.Output<outputs.SetCloudSiteInfoNodeInfo[] | undefined>;
    public readonly privateIps!: pulumi.Output<string[]>;
    public readonly publicIps!: pulumi.Output<string[] | undefined>;
    public readonly siteType!: pulumi.Output<string>;
    public readonly spokeVnetPrefixInfos!: pulumi.Output<outputs.SetCloudSiteInfoSpokeVnetPrefixInfo[] | undefined>;
    public readonly subnetIds!: pulumi.Output<outputs.SetCloudSiteInfoSubnetId[] | undefined>;
    public readonly vnets!: pulumi.Output<outputs.SetCloudSiteInfoVnet[] | undefined>;
    public readonly vpcId!: pulumi.Output<string | undefined>;
    public readonly vpcName!: pulumi.Output<string | undefined>;

    /**
     * Create a SetCloudSiteInfo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SetCloudSiteInfoArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SetCloudSiteInfoArgs | SetCloudSiteInfoState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SetCloudSiteInfoState | undefined;
            resourceInputs["directConnectInfos"] = state ? state.directConnectInfos : undefined;
            resourceInputs["expressRouteInfos"] = state ? state.expressRouteInfos : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeInfos"] = state ? state.nodeInfos : undefined;
            resourceInputs["privateIps"] = state ? state.privateIps : undefined;
            resourceInputs["publicIps"] = state ? state.publicIps : undefined;
            resourceInputs["siteType"] = state ? state.siteType : undefined;
            resourceInputs["spokeVnetPrefixInfos"] = state ? state.spokeVnetPrefixInfos : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["vnets"] = state ? state.vnets : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcName"] = state ? state.vpcName : undefined;
        } else {
            const args = argsOrState as SetCloudSiteInfoArgs | undefined;
            if ((!args || args.privateIps === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateIps'");
            }
            if ((!args || args.siteType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteType'");
            }
            resourceInputs["directConnectInfos"] = args ? args.directConnectInfos : undefined;
            resourceInputs["expressRouteInfos"] = args ? args.expressRouteInfos : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeInfos"] = args ? args.nodeInfos : undefined;
            resourceInputs["privateIps"] = args ? args.privateIps : undefined;
            resourceInputs["publicIps"] = args ? args.publicIps : undefined;
            resourceInputs["siteType"] = args ? args.siteType : undefined;
            resourceInputs["spokeVnetPrefixInfos"] = args ? args.spokeVnetPrefixInfos : undefined;
            resourceInputs["subnetIds"] = args ? args.subnetIds : undefined;
            resourceInputs["vnets"] = args ? args.vnets : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["vpcName"] = args ? args.vpcName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SetCloudSiteInfo.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SetCloudSiteInfo resources.
 */
export interface SetCloudSiteInfoState {
    directConnectInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoDirectConnectInfo>[]>;
    expressRouteInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoExpressRouteInfo>[]>;
    name?: pulumi.Input<string>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoNodeInfo>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    siteType?: pulumi.Input<string>;
    spokeVnetPrefixInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoSpokeVnetPrefixInfo>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoSubnetId>[]>;
    vnets?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoVnet>[]>;
    vpcId?: pulumi.Input<string>;
    vpcName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SetCloudSiteInfo resource.
 */
export interface SetCloudSiteInfoArgs {
    directConnectInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoDirectConnectInfo>[]>;
    expressRouteInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoExpressRouteInfo>[]>;
    name?: pulumi.Input<string>;
    nodeInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoNodeInfo>[]>;
    privateIps: pulumi.Input<pulumi.Input<string>[]>;
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    siteType: pulumi.Input<string>;
    spokeVnetPrefixInfos?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoSpokeVnetPrefixInfo>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoSubnetId>[]>;
    vnets?: pulumi.Input<pulumi.Input<inputs.SetCloudSiteInfoVnet>[]>;
    vpcId?: pulumi.Input<string>;
    vpcName?: pulumi.Input<string>;
}
