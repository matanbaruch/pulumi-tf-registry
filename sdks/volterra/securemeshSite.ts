// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecuremeshSite extends pulumi.CustomResource {
    /**
     * Get an existing SecuremeshSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecuremeshSiteState, opts?: pulumi.CustomResourceOptions): SecuremeshSite {
        return new SecuremeshSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/securemeshSite:SecuremeshSite';

    /**
     * Returns true if the given object is an instance of SecuremeshSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecuremeshSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecuremeshSite.__pulumiType;
    }

    public readonly address!: pulumi.Output<string | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly blockedServices!: pulumi.Output<outputs.SecuremeshSiteBlockedService[] | undefined>;
    public readonly bondDeviceLists!: pulumi.Output<outputs.SecuremeshSiteBondDeviceList[] | undefined>;
    public readonly coordinates!: pulumi.Output<outputs.SecuremeshSiteCoordinate[] | undefined>;
    public readonly customNetworkConfigs!: pulumi.Output<outputs.SecuremeshSiteCustomNetworkConfig[] | undefined>;
    public readonly defaultBlockedServices!: pulumi.Output<boolean | undefined>;
    public readonly defaultNetworkConfig!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly kubernetesUpgradeDrains!: pulumi.Output<outputs.SecuremeshSiteKubernetesUpgradeDrain[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly logReceivers!: pulumi.Output<outputs.SecuremeshSiteLogReceiver[] | undefined>;
    public readonly logsStreamingDisabled!: pulumi.Output<boolean | undefined>;
    public readonly masterNodeConfigurations!: pulumi.Output<outputs.SecuremeshSiteMasterNodeConfiguration[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noBondDevices!: pulumi.Output<boolean | undefined>;
    public readonly offlineSurvivabilityModes!: pulumi.Output<outputs.SecuremeshSiteOfflineSurvivabilityMode[] | undefined>;
    public readonly os!: pulumi.Output<outputs.SecuremeshSiteO[] | undefined>;
    public readonly performanceEnhancementModes!: pulumi.Output<outputs.SecuremeshSitePerformanceEnhancementMode[] | undefined>;
    public readonly sws!: pulumi.Output<outputs.SecuremeshSiteSw[] | undefined>;
    public readonly volterraCertifiedHw!: pulumi.Output<string>;
    public readonly workerNodes!: pulumi.Output<string[] | undefined>;

    /**
     * Create a SecuremeshSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecuremeshSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecuremeshSiteArgs | SecuremeshSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecuremeshSiteState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["blockedServices"] = state ? state.blockedServices : undefined;
            resourceInputs["bondDeviceLists"] = state ? state.bondDeviceLists : undefined;
            resourceInputs["coordinates"] = state ? state.coordinates : undefined;
            resourceInputs["customNetworkConfigs"] = state ? state.customNetworkConfigs : undefined;
            resourceInputs["defaultBlockedServices"] = state ? state.defaultBlockedServices : undefined;
            resourceInputs["defaultNetworkConfig"] = state ? state.defaultNetworkConfig : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = state ? state.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logReceivers"] = state ? state.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = state ? state.logsStreamingDisabled : undefined;
            resourceInputs["masterNodeConfigurations"] = state ? state.masterNodeConfigurations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noBondDevices"] = state ? state.noBondDevices : undefined;
            resourceInputs["offlineSurvivabilityModes"] = state ? state.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["performanceEnhancementModes"] = state ? state.performanceEnhancementModes : undefined;
            resourceInputs["sws"] = state ? state.sws : undefined;
            resourceInputs["volterraCertifiedHw"] = state ? state.volterraCertifiedHw : undefined;
            resourceInputs["workerNodes"] = state ? state.workerNodes : undefined;
        } else {
            const args = argsOrState as SecuremeshSiteArgs | undefined;
            if ((!args || args.masterNodeConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'masterNodeConfigurations'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.volterraCertifiedHw === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volterraCertifiedHw'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["blockedServices"] = args ? args.blockedServices : undefined;
            resourceInputs["bondDeviceLists"] = args ? args.bondDeviceLists : undefined;
            resourceInputs["coordinates"] = args ? args.coordinates : undefined;
            resourceInputs["customNetworkConfigs"] = args ? args.customNetworkConfigs : undefined;
            resourceInputs["defaultBlockedServices"] = args ? args.defaultBlockedServices : undefined;
            resourceInputs["defaultNetworkConfig"] = args ? args.defaultNetworkConfig : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = args ? args.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["logReceivers"] = args ? args.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = args ? args.logsStreamingDisabled : undefined;
            resourceInputs["masterNodeConfigurations"] = args ? args.masterNodeConfigurations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noBondDevices"] = args ? args.noBondDevices : undefined;
            resourceInputs["offlineSurvivabilityModes"] = args ? args.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["performanceEnhancementModes"] = args ? args.performanceEnhancementModes : undefined;
            resourceInputs["sws"] = args ? args.sws : undefined;
            resourceInputs["volterraCertifiedHw"] = args ? args.volterraCertifiedHw : undefined;
            resourceInputs["workerNodes"] = args ? args.workerNodes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecuremeshSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecuremeshSite resources.
 */
export interface SecuremeshSiteState {
    address?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteBlockedService>[]>;
    bondDeviceLists?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteBondDeviceList>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteCoordinate>[]>;
    customNetworkConfigs?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteCustomNetworkConfig>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    defaultNetworkConfig?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    masterNodeConfigurations?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteMasterNodeConfiguration>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noBondDevices?: pulumi.Input<boolean>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteO>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSitePerformanceEnhancementMode>[]>;
    sws?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteSw>[]>;
    volterraCertifiedHw?: pulumi.Input<string>;
    workerNodes?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a SecuremeshSite resource.
 */
export interface SecuremeshSiteArgs {
    address?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteBlockedService>[]>;
    bondDeviceLists?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteBondDeviceList>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteCoordinate>[]>;
    customNetworkConfigs?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteCustomNetworkConfig>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    defaultNetworkConfig?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    masterNodeConfigurations: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteMasterNodeConfiguration>[]>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noBondDevices?: pulumi.Input<boolean>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteO>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSitePerformanceEnhancementMode>[]>;
    sws?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteSw>[]>;
    volterraCertifiedHw: pulumi.Input<string>;
    workerNodes?: pulumi.Input<pulumi.Input<string>[]>;
}
