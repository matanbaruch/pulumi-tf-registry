// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActiveAlertPoliciesArgs, ActiveAlertPoliciesState } from "./activeAlertPolicies";
export type ActiveAlertPolicies = import("./activeAlertPolicies").ActiveAlertPolicies;
export const ActiveAlertPolicies: typeof import("./activeAlertPolicies").ActiveAlertPolicies = null as any;
utilities.lazyLoad(exports, ["ActiveAlertPolicies"], () => require("./activeAlertPolicies"));

export { ActiveNetworkPoliciesArgs, ActiveNetworkPoliciesState } from "./activeNetworkPolicies";
export type ActiveNetworkPolicies = import("./activeNetworkPolicies").ActiveNetworkPolicies;
export const ActiveNetworkPolicies: typeof import("./activeNetworkPolicies").ActiveNetworkPolicies = null as any;
utilities.lazyLoad(exports, ["ActiveNetworkPolicies"], () => require("./activeNetworkPolicies"));

export { ActiveServicePoliciesArgs, ActiveServicePoliciesState } from "./activeServicePolicies";
export type ActiveServicePolicies = import("./activeServicePolicies").ActiveServicePolicies;
export const ActiveServicePolicies: typeof import("./activeServicePolicies").ActiveServicePolicies = null as any;
utilities.lazyLoad(exports, ["ActiveServicePolicies"], () => require("./activeServicePolicies"));

export { AdvertisePolicyArgs, AdvertisePolicyState } from "./advertisePolicy";
export type AdvertisePolicy = import("./advertisePolicy").AdvertisePolicy;
export const AdvertisePolicy: typeof import("./advertisePolicy").AdvertisePolicy = null as any;
utilities.lazyLoad(exports, ["AdvertisePolicy"], () => require("./advertisePolicy"));

export { AlertPolicyArgs, AlertPolicyState } from "./alertPolicy";
export type AlertPolicy = import("./alertPolicy").AlertPolicy;
export const AlertPolicy: typeof import("./alertPolicy").AlertPolicy = null as any;
utilities.lazyLoad(exports, ["AlertPolicy"], () => require("./alertPolicy"));

export { AlertReceiverArgs, AlertReceiverState } from "./alertReceiver";
export type AlertReceiver = import("./alertReceiver").AlertReceiver;
export const AlertReceiver: typeof import("./alertReceiver").AlertReceiver = null as any;
utilities.lazyLoad(exports, ["AlertReceiver"], () => require("./alertReceiver"));

export { ApiCredentialArgs, ApiCredentialState } from "./apiCredential";
export type ApiCredential = import("./apiCredential").ApiCredential;
export const ApiCredential: typeof import("./apiCredential").ApiCredential = null as any;
utilities.lazyLoad(exports, ["ApiCredential"], () => require("./apiCredential"));

export { ApiDefinitionArgs, ApiDefinitionState } from "./apiDefinition";
export type ApiDefinition = import("./apiDefinition").ApiDefinition;
export const ApiDefinition: typeof import("./apiDefinition").ApiDefinition = null as any;
utilities.lazyLoad(exports, ["ApiDefinition"], () => require("./apiDefinition"));

export { ApmArgs, ApmState } from "./apm";
export type Apm = import("./apm").Apm;
export const Apm: typeof import("./apm").Apm = null as any;
utilities.lazyLoad(exports, ["Apm"], () => require("./apm"));

export { AppApiGroupArgs, AppApiGroupState } from "./appApiGroup";
export type AppApiGroup = import("./appApiGroup").AppApiGroup;
export const AppApiGroup: typeof import("./appApiGroup").AppApiGroup = null as any;
utilities.lazyLoad(exports, ["AppApiGroup"], () => require("./appApiGroup"));

export { AppFirewallArgs, AppFirewallState } from "./appFirewall";
export type AppFirewall = import("./appFirewall").AppFirewall;
export const AppFirewall: typeof import("./appFirewall").AppFirewall = null as any;
utilities.lazyLoad(exports, ["AppFirewall"], () => require("./appFirewall"));

export { AppSettingArgs, AppSettingState } from "./appSetting";
export type AppSetting = import("./appSetting").AppSetting;
export const AppSetting: typeof import("./appSetting").AppSetting = null as any;
utilities.lazyLoad(exports, ["AppSetting"], () => require("./appSetting"));

export { AppTypeArgs, AppTypeState } from "./appType";
export type AppType = import("./appType").AppType;
export const AppType: typeof import("./appType").AppType = null as any;
utilities.lazyLoad(exports, ["AppType"], () => require("./appType"));

export { AwsTgwSiteArgs, AwsTgwSiteState } from "./awsTgwSite";
export type AwsTgwSite = import("./awsTgwSite").AwsTgwSite;
export const AwsTgwSite: typeof import("./awsTgwSite").AwsTgwSite = null as any;
utilities.lazyLoad(exports, ["AwsTgwSite"], () => require("./awsTgwSite"));

export { AwsVpcSiteArgs, AwsVpcSiteState } from "./awsVpcSite";
export type AwsVpcSite = import("./awsVpcSite").AwsVpcSite;
export const AwsVpcSite: typeof import("./awsVpcSite").AwsVpcSite = null as any;
utilities.lazyLoad(exports, ["AwsVpcSite"], () => require("./awsVpcSite"));

export { AzureVnetSiteArgs, AzureVnetSiteState } from "./azureVnetSite";
export type AzureVnetSite = import("./azureVnetSite").AzureVnetSite;
export const AzureVnetSite: typeof import("./azureVnetSite").AzureVnetSite = null as any;
utilities.lazyLoad(exports, ["AzureVnetSite"], () => require("./azureVnetSite"));

export { BgpArgs, BgpState } from "./bgp";
export type Bgp = import("./bgp").Bgp;
export const Bgp: typeof import("./bgp").Bgp = null as any;
utilities.lazyLoad(exports, ["Bgp"], () => require("./bgp"));

export { BgpAsnSetArgs, BgpAsnSetState } from "./bgpAsnSet";
export type BgpAsnSet = import("./bgpAsnSet").BgpAsnSet;
export const BgpAsnSet: typeof import("./bgpAsnSet").BgpAsnSet = null as any;
utilities.lazyLoad(exports, ["BgpAsnSet"], () => require("./bgpAsnSet"));

export { CdnLoadbalancerArgs, CdnLoadbalancerState } from "./cdnLoadbalancer";
export type CdnLoadbalancer = import("./cdnLoadbalancer").CdnLoadbalancer;
export const CdnLoadbalancer: typeof import("./cdnLoadbalancer").CdnLoadbalancer = null as any;
utilities.lazyLoad(exports, ["CdnLoadbalancer"], () => require("./cdnLoadbalancer"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificateChainArgs, CertificateChainState } from "./certificateChain";
export type CertificateChain = import("./certificateChain").CertificateChain;
export const CertificateChain: typeof import("./certificateChain").CertificateChain = null as any;
utilities.lazyLoad(exports, ["CertificateChain"], () => require("./certificateChain"));

export { CloudCredentialsArgs, CloudCredentialsState } from "./cloudCredentials";
export type CloudCredentials = import("./cloudCredentials").CloudCredentials;
export const CloudCredentials: typeof import("./cloudCredentials").CloudCredentials = null as any;
utilities.lazyLoad(exports, ["CloudCredentials"], () => require("./cloudCredentials"));

export { CloudLinkArgs, CloudLinkState } from "./cloudLink";
export type CloudLink = import("./cloudLink").CloudLink;
export const CloudLink: typeof import("./cloudLink").CloudLink = null as any;
utilities.lazyLoad(exports, ["CloudLink"], () => require("./cloudLink"));

export { CloudSiteLabelsArgs, CloudSiteLabelsState } from "./cloudSiteLabels";
export type CloudSiteLabels = import("./cloudSiteLabels").CloudSiteLabels;
export const CloudSiteLabels: typeof import("./cloudSiteLabels").CloudSiteLabels = null as any;
utilities.lazyLoad(exports, ["CloudSiteLabels"], () => require("./cloudSiteLabels"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ContainerRegistryArgs, ContainerRegistryState } from "./containerRegistry";
export type ContainerRegistry = import("./containerRegistry").ContainerRegistry;
export const ContainerRegistry: typeof import("./containerRegistry").ContainerRegistry = null as any;
utilities.lazyLoad(exports, ["ContainerRegistry"], () => require("./containerRegistry"));

export { CrlArgs, CrlState } from "./crl";
export type Crl = import("./crl").Crl;
export const Crl: typeof import("./crl").Crl = null as any;
utilities.lazyLoad(exports, ["Crl"], () => require("./crl"));

export { DataTypeArgs, DataTypeState } from "./dataType";
export type DataType = import("./dataType").DataType;
export const DataType: typeof import("./dataType").DataType = null as any;
utilities.lazyLoad(exports, ["DataType"], () => require("./dataType"));

export { DcClusterGroupArgs, DcClusterGroupState } from "./dcClusterGroup";
export type DcClusterGroup = import("./dcClusterGroup").DcClusterGroup;
export const DcClusterGroup: typeof import("./dcClusterGroup").DcClusterGroup = null as any;
utilities.lazyLoad(exports, ["DcClusterGroup"], () => require("./dcClusterGroup"));

export { DiscoveryArgs, DiscoveryState } from "./discovery";
export type Discovery = import("./discovery").Discovery;
export const Discovery: typeof import("./discovery").Discovery = null as any;
utilities.lazyLoad(exports, ["Discovery"], () => require("./discovery"));

export { DnsComplianceChecksArgs, DnsComplianceChecksState } from "./dnsComplianceChecks";
export type DnsComplianceChecks = import("./dnsComplianceChecks").DnsComplianceChecks;
export const DnsComplianceChecks: typeof import("./dnsComplianceChecks").DnsComplianceChecks = null as any;
utilities.lazyLoad(exports, ["DnsComplianceChecks"], () => require("./dnsComplianceChecks"));

export { DnsDomainArgs, DnsDomainState } from "./dnsDomain";
export type DnsDomain = import("./dnsDomain").DnsDomain;
export const DnsDomain: typeof import("./dnsDomain").DnsDomain = null as any;
utilities.lazyLoad(exports, ["DnsDomain"], () => require("./dnsDomain"));

export { DnsLbHealthCheckArgs, DnsLbHealthCheckState } from "./dnsLbHealthCheck";
export type DnsLbHealthCheck = import("./dnsLbHealthCheck").DnsLbHealthCheck;
export const DnsLbHealthCheck: typeof import("./dnsLbHealthCheck").DnsLbHealthCheck = null as any;
utilities.lazyLoad(exports, ["DnsLbHealthCheck"], () => require("./dnsLbHealthCheck"));

export { DnsLbPoolArgs, DnsLbPoolState } from "./dnsLbPool";
export type DnsLbPool = import("./dnsLbPool").DnsLbPool;
export const DnsLbPool: typeof import("./dnsLbPool").DnsLbPool = null as any;
utilities.lazyLoad(exports, ["DnsLbPool"], () => require("./dnsLbPool"));

export { DnsLoadBalancerArgs, DnsLoadBalancerState } from "./dnsLoadBalancer";
export type DnsLoadBalancer = import("./dnsLoadBalancer").DnsLoadBalancer;
export const DnsLoadBalancer: typeof import("./dnsLoadBalancer").DnsLoadBalancer = null as any;
utilities.lazyLoad(exports, ["DnsLoadBalancer"], () => require("./dnsLoadBalancer"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { DnsZoneRecordArgs, DnsZoneRecordState } from "./dnsZoneRecord";
export type DnsZoneRecord = import("./dnsZoneRecord").DnsZoneRecord;
export const DnsZoneRecord: typeof import("./dnsZoneRecord").DnsZoneRecord = null as any;
utilities.lazyLoad(exports, ["DnsZoneRecord"], () => require("./dnsZoneRecord"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { EnhancedFirewallPolicyArgs, EnhancedFirewallPolicyState } from "./enhancedFirewallPolicy";
export type EnhancedFirewallPolicy = import("./enhancedFirewallPolicy").EnhancedFirewallPolicy;
export const EnhancedFirewallPolicy: typeof import("./enhancedFirewallPolicy").EnhancedFirewallPolicy = null as any;
utilities.lazyLoad(exports, ["EnhancedFirewallPolicy"], () => require("./enhancedFirewallPolicy"));

export { FastAclArgs, FastAclState } from "./fastAcl";
export type FastAcl = import("./fastAcl").FastAcl;
export const FastAcl: typeof import("./fastAcl").FastAcl = null as any;
utilities.lazyLoad(exports, ["FastAcl"], () => require("./fastAcl"));

export { FastAclForInternetVipsArgs, FastAclForInternetVipsState } from "./fastAclForInternetVips";
export type FastAclForInternetVips = import("./fastAclForInternetVips").FastAclForInternetVips;
export const FastAclForInternetVips: typeof import("./fastAclForInternetVips").FastAclForInternetVips = null as any;
utilities.lazyLoad(exports, ["FastAclForInternetVips"], () => require("./fastAclForInternetVips"));

export { FastAclRuleArgs, FastAclRuleState } from "./fastAclRule";
export type FastAclRule = import("./fastAclRule").FastAclRule;
export const FastAclRule: typeof import("./fastAclRule").FastAclRule = null as any;
utilities.lazyLoad(exports, ["FastAclRule"], () => require("./fastAclRule"));

export { FilterSetArgs, FilterSetState } from "./filterSet";
export type FilterSet = import("./filterSet").FilterSet;
export const FilterSet: typeof import("./filterSet").FilterSet = null as any;
utilities.lazyLoad(exports, ["FilterSet"], () => require("./filterSet"));

export { FleetArgs, FleetState } from "./fleet";
export type Fleet = import("./fleet").Fleet;
export const Fleet: typeof import("./fleet").Fleet = null as any;
utilities.lazyLoad(exports, ["Fleet"], () => require("./fleet"));

export { ForwardProxyPolicyArgs, ForwardProxyPolicyState } from "./forwardProxyPolicy";
export type ForwardProxyPolicy = import("./forwardProxyPolicy").ForwardProxyPolicy;
export const ForwardProxyPolicy: typeof import("./forwardProxyPolicy").ForwardProxyPolicy = null as any;
utilities.lazyLoad(exports, ["ForwardProxyPolicy"], () => require("./forwardProxyPolicy"));

export { GcpVpcSiteArgs, GcpVpcSiteState } from "./gcpVpcSite";
export type GcpVpcSite = import("./gcpVpcSite").GcpVpcSite;
export const GcpVpcSite: typeof import("./gcpVpcSite").GcpVpcSite = null as any;
utilities.lazyLoad(exports, ["GcpVpcSite"], () => require("./gcpVpcSite"));

export { GetAddressAllocatorArgs, GetAddressAllocatorResult, GetAddressAllocatorOutputArgs } from "./getAddressAllocator";
export const getAddressAllocator: typeof import("./getAddressAllocator").getAddressAllocator = null as any;
export const getAddressAllocatorOutput: typeof import("./getAddressAllocator").getAddressAllocatorOutput = null as any;
utilities.lazyLoad(exports, ["getAddressAllocator","getAddressAllocatorOutput"], () => require("./getAddressAllocator"));

export { GetHttpLoadbalancerStateArgs, GetHttpLoadbalancerStateResult, GetHttpLoadbalancerStateOutputArgs } from "./getHttpLoadbalancerState";
export const getHttpLoadbalancerState: typeof import("./getHttpLoadbalancerState").getHttpLoadbalancerState = null as any;
export const getHttpLoadbalancerStateOutput: typeof import("./getHttpLoadbalancerState").getHttpLoadbalancerStateOutput = null as any;
utilities.lazyLoad(exports, ["getHttpLoadbalancerState","getHttpLoadbalancerStateOutput"], () => require("./getHttpLoadbalancerState"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetParseAwsCgwConfigurationArgs, GetParseAwsCgwConfigurationResult, GetParseAwsCgwConfigurationOutputArgs } from "./getParseAwsCgwConfiguration";
export const getParseAwsCgwConfiguration: typeof import("./getParseAwsCgwConfiguration").getParseAwsCgwConfiguration = null as any;
export const getParseAwsCgwConfigurationOutput: typeof import("./getParseAwsCgwConfiguration").getParseAwsCgwConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getParseAwsCgwConfiguration","getParseAwsCgwConfigurationOutput"], () => require("./getParseAwsCgwConfiguration"));

export { GetTunnelArgs, GetTunnelResult, GetTunnelOutputArgs } from "./getTunnel";
export const getTunnel: typeof import("./getTunnel").getTunnel = null as any;
export const getTunnelOutput: typeof import("./getTunnel").getTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getTunnel","getTunnelOutput"], () => require("./getTunnel"));

export { GetVirtualHostDnsInfoArgs, GetVirtualHostDnsInfoResult, GetVirtualHostDnsInfoOutputArgs } from "./getVirtualHostDnsInfo";
export const getVirtualHostDnsInfo: typeof import("./getVirtualHostDnsInfo").getVirtualHostDnsInfo = null as any;
export const getVirtualHostDnsInfoOutput: typeof import("./getVirtualHostDnsInfo").getVirtualHostDnsInfoOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHostDnsInfo","getVirtualHostDnsInfoOutput"], () => require("./getVirtualHostDnsInfo"));

export { GlobalLogReceiverArgs, GlobalLogReceiverState } from "./globalLogReceiver";
export type GlobalLogReceiver = import("./globalLogReceiver").GlobalLogReceiver;
export const GlobalLogReceiver: typeof import("./globalLogReceiver").GlobalLogReceiver = null as any;
utilities.lazyLoad(exports, ["GlobalLogReceiver"], () => require("./globalLogReceiver"));

export { HealthcheckArgs, HealthcheckState } from "./healthcheck";
export type Healthcheck = import("./healthcheck").Healthcheck;
export const Healthcheck: typeof import("./healthcheck").Healthcheck = null as any;
utilities.lazyLoad(exports, ["Healthcheck"], () => require("./healthcheck"));

export { HttpLoadbalancerArgs, HttpLoadbalancerState } from "./httpLoadbalancer";
export type HttpLoadbalancer = import("./httpLoadbalancer").HttpLoadbalancer;
export const HttpLoadbalancer: typeof import("./httpLoadbalancer").HttpLoadbalancer = null as any;
utilities.lazyLoad(exports, ["HttpLoadbalancer"], () => require("./httpLoadbalancer"));

export { IpPrefixSetArgs, IpPrefixSetState } from "./ipPrefixSet";
export type IpPrefixSet = import("./ipPrefixSet").IpPrefixSet;
export const IpPrefixSet: typeof import("./ipPrefixSet").IpPrefixSet = null as any;
utilities.lazyLoad(exports, ["IpPrefixSet"], () => require("./ipPrefixSet"));

export { K8sClusterArgs, K8sClusterState } from "./k8sCluster";
export type K8sCluster = import("./k8sCluster").K8sCluster;
export const K8sCluster: typeof import("./k8sCluster").K8sCluster = null as any;
utilities.lazyLoad(exports, ["K8sCluster"], () => require("./k8sCluster"));

export { K8sClusterRoleArgs, K8sClusterRoleState } from "./k8sClusterRole";
export type K8sClusterRole = import("./k8sClusterRole").K8sClusterRole;
export const K8sClusterRole: typeof import("./k8sClusterRole").K8sClusterRole = null as any;
utilities.lazyLoad(exports, ["K8sClusterRole"], () => require("./k8sClusterRole"));

export { K8sClusterRoleBindingArgs, K8sClusterRoleBindingState } from "./k8sClusterRoleBinding";
export type K8sClusterRoleBinding = import("./k8sClusterRoleBinding").K8sClusterRoleBinding;
export const K8sClusterRoleBinding: typeof import("./k8sClusterRoleBinding").K8sClusterRoleBinding = null as any;
utilities.lazyLoad(exports, ["K8sClusterRoleBinding"], () => require("./k8sClusterRoleBinding"));

export { K8sPodSecurityAdmissionArgs, K8sPodSecurityAdmissionState } from "./k8sPodSecurityAdmission";
export type K8sPodSecurityAdmission = import("./k8sPodSecurityAdmission").K8sPodSecurityAdmission;
export const K8sPodSecurityAdmission: typeof import("./k8sPodSecurityAdmission").K8sPodSecurityAdmission = null as any;
utilities.lazyLoad(exports, ["K8sPodSecurityAdmission"], () => require("./k8sPodSecurityAdmission"));

export { K8sPodSecurityPolicyArgs, K8sPodSecurityPolicyState } from "./k8sPodSecurityPolicy";
export type K8sPodSecurityPolicy = import("./k8sPodSecurityPolicy").K8sPodSecurityPolicy;
export const K8sPodSecurityPolicy: typeof import("./k8sPodSecurityPolicy").K8sPodSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["K8sPodSecurityPolicy"], () => require("./k8sPodSecurityPolicy"));

export { KnownLabelArgs, KnownLabelState } from "./knownLabel";
export type KnownLabel = import("./knownLabel").KnownLabel;
export const KnownLabel: typeof import("./knownLabel").KnownLabel = null as any;
utilities.lazyLoad(exports, ["KnownLabel"], () => require("./knownLabel"));

export { KnownLabelKeyArgs, KnownLabelKeyState } from "./knownLabelKey";
export type KnownLabelKey = import("./knownLabelKey").KnownLabelKey;
export const KnownLabelKey: typeof import("./knownLabelKey").KnownLabelKey = null as any;
utilities.lazyLoad(exports, ["KnownLabelKey"], () => require("./knownLabelKey"));

export { LogReceiverArgs, LogReceiverState } from "./logReceiver";
export type LogReceiver = import("./logReceiver").LogReceiver;
export const LogReceiver: typeof import("./logReceiver").LogReceiver = null as any;
utilities.lazyLoad(exports, ["LogReceiver"], () => require("./logReceiver"));

export { MaliciousUserMitigationArgs, MaliciousUserMitigationState } from "./maliciousUserMitigation";
export type MaliciousUserMitigation = import("./maliciousUserMitigation").MaliciousUserMitigation;
export const MaliciousUserMitigation: typeof import("./maliciousUserMitigation").MaliciousUserMitigation = null as any;
utilities.lazyLoad(exports, ["MaliciousUserMitigation"], () => require("./maliciousUserMitigation"));

export { ModifySiteArgs, ModifySiteState } from "./modifySite";
export type ModifySite = import("./modifySite").ModifySite;
export const ModifySite: typeof import("./modifySite").ModifySite = null as any;
utilities.lazyLoad(exports, ["ModifySite"], () => require("./modifySite"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NetworkConnectorArgs, NetworkConnectorState } from "./networkConnector";
export type NetworkConnector = import("./networkConnector").NetworkConnector;
export const NetworkConnector: typeof import("./networkConnector").NetworkConnector = null as any;
utilities.lazyLoad(exports, ["NetworkConnector"], () => require("./networkConnector"));

export { NetworkFirewallArgs, NetworkFirewallState } from "./networkFirewall";
export type NetworkFirewall = import("./networkFirewall").NetworkFirewall;
export const NetworkFirewall: typeof import("./networkFirewall").NetworkFirewall = null as any;
utilities.lazyLoad(exports, ["NetworkFirewall"], () => require("./networkFirewall"));

export { NetworkInterfaceArgs, NetworkInterfaceState } from "./networkInterface";
export type NetworkInterface = import("./networkInterface").NetworkInterface;
export const NetworkInterface: typeof import("./networkInterface").NetworkInterface = null as any;
utilities.lazyLoad(exports, ["NetworkInterface"], () => require("./networkInterface"));

export { NetworkPolicyArgs, NetworkPolicyState } from "./networkPolicy";
export type NetworkPolicy = import("./networkPolicy").NetworkPolicy;
export const NetworkPolicy: typeof import("./networkPolicy").NetworkPolicy = null as any;
utilities.lazyLoad(exports, ["NetworkPolicy"], () => require("./networkPolicy"));

export { NetworkPolicyRuleArgs, NetworkPolicyRuleState } from "./networkPolicyRule";
export type NetworkPolicyRule = import("./networkPolicyRule").NetworkPolicyRule;
export const NetworkPolicyRule: typeof import("./networkPolicyRule").NetworkPolicyRule = null as any;
utilities.lazyLoad(exports, ["NetworkPolicyRule"], () => require("./networkPolicyRule"));

export { NetworkPolicyViewArgs, NetworkPolicyViewState } from "./networkPolicyView";
export type NetworkPolicyView = import("./networkPolicyView").NetworkPolicyView;
export const NetworkPolicyView: typeof import("./networkPolicyView").NetworkPolicyView = null as any;
utilities.lazyLoad(exports, ["NetworkPolicyView"], () => require("./networkPolicyView"));

export { NfvServiceArgs, NfvServiceState } from "./nfvService";
export type NfvService = import("./nfvService").NfvService;
export const NfvService: typeof import("./nfvService").NfvService = null as any;
utilities.lazyLoad(exports, ["NfvService"], () => require("./nfvService"));

export { OriginPoolArgs, OriginPoolState } from "./originPool";
export type OriginPool = import("./originPool").OriginPool;
export const OriginPool: typeof import("./originPool").OriginPool = null as any;
utilities.lazyLoad(exports, ["OriginPool"], () => require("./originPool"));

export { PolicerArgs, PolicerState } from "./policer";
export type Policer = import("./policer").Policer;
export const Policer: typeof import("./policer").Policer = null as any;
utilities.lazyLoad(exports, ["Policer"], () => require("./policer"));

export { ProtocolInspectionArgs, ProtocolInspectionState } from "./protocolInspection";
export type ProtocolInspection = import("./protocolInspection").ProtocolInspection;
export const ProtocolInspection: typeof import("./protocolInspection").ProtocolInspection = null as any;
utilities.lazyLoad(exports, ["ProtocolInspection"], () => require("./protocolInspection"));

export { ProtocolPolicerArgs, ProtocolPolicerState } from "./protocolPolicer";
export type ProtocolPolicer = import("./protocolPolicer").ProtocolPolicer;
export const ProtocolPolicer: typeof import("./protocolPolicer").ProtocolPolicer = null as any;
utilities.lazyLoad(exports, ["ProtocolPolicer"], () => require("./protocolPolicer"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { RateLimiterArgs, RateLimiterState } from "./rateLimiter";
export type RateLimiter = import("./rateLimiter").RateLimiter;
export const RateLimiter: typeof import("./rateLimiter").RateLimiter = null as any;
utilities.lazyLoad(exports, ["RateLimiter"], () => require("./rateLimiter"));

export { RateLimiterPolicyArgs, RateLimiterPolicyState } from "./rateLimiterPolicy";
export type RateLimiterPolicy = import("./rateLimiterPolicy").RateLimiterPolicy;
export const RateLimiterPolicy: typeof import("./rateLimiterPolicy").RateLimiterPolicy = null as any;
utilities.lazyLoad(exports, ["RateLimiterPolicy"], () => require("./rateLimiterPolicy"));

export { RegistrationApprovalArgs, RegistrationApprovalState } from "./registrationApproval";
export type RegistrationApproval = import("./registrationApproval").RegistrationApproval;
export const RegistrationApproval: typeof import("./registrationApproval").RegistrationApproval = null as any;
utilities.lazyLoad(exports, ["RegistrationApproval"], () => require("./registrationApproval"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { SecretPolicyArgs, SecretPolicyState } from "./secretPolicy";
export type SecretPolicy = import("./secretPolicy").SecretPolicy;
export const SecretPolicy: typeof import("./secretPolicy").SecretPolicy = null as any;
utilities.lazyLoad(exports, ["SecretPolicy"], () => require("./secretPolicy"));

export { SecretPolicyRuleArgs, SecretPolicyRuleState } from "./secretPolicyRule";
export type SecretPolicyRule = import("./secretPolicyRule").SecretPolicyRule;
export const SecretPolicyRule: typeof import("./secretPolicyRule").SecretPolicyRule = null as any;
utilities.lazyLoad(exports, ["SecretPolicyRule"], () => require("./secretPolicyRule"));

export { SecuremeshSiteArgs, SecuremeshSiteState } from "./securemeshSite";
export type SecuremeshSite = import("./securemeshSite").SecuremeshSite;
export const SecuremeshSite: typeof import("./securemeshSite").SecuremeshSite = null as any;
utilities.lazyLoad(exports, ["SecuremeshSite"], () => require("./securemeshSite"));

export { SecuremeshSiteV2Args, SecuremeshSiteV2State } from "./securemeshSiteV2";
export type SecuremeshSiteV2 = import("./securemeshSiteV2").SecuremeshSiteV2;
export const SecuremeshSiteV2: typeof import("./securemeshSiteV2").SecuremeshSiteV2 = null as any;
utilities.lazyLoad(exports, ["SecuremeshSiteV2"], () => require("./securemeshSiteV2"));

export { SensitiveDataPolicyArgs, SensitiveDataPolicyState } from "./sensitiveDataPolicy";
export type SensitiveDataPolicy = import("./sensitiveDataPolicy").SensitiveDataPolicy;
export const SensitiveDataPolicy: typeof import("./sensitiveDataPolicy").SensitiveDataPolicy = null as any;
utilities.lazyLoad(exports, ["SensitiveDataPolicy"], () => require("./sensitiveDataPolicy"));

export { ServicePolicyArgs, ServicePolicyState } from "./servicePolicy";
export type ServicePolicy = import("./servicePolicy").ServicePolicy;
export const ServicePolicy: typeof import("./servicePolicy").ServicePolicy = null as any;
utilities.lazyLoad(exports, ["ServicePolicy"], () => require("./servicePolicy"));

export { ServicePolicyRuleArgs, ServicePolicyRuleState } from "./servicePolicyRule";
export type ServicePolicyRule = import("./servicePolicyRule").ServicePolicyRule;
export const ServicePolicyRule: typeof import("./servicePolicyRule").ServicePolicyRule = null as any;
utilities.lazyLoad(exports, ["ServicePolicyRule"], () => require("./servicePolicyRule"));

export { SetCloudSiteInfoArgs, SetCloudSiteInfoState } from "./setCloudSiteInfo";
export type SetCloudSiteInfo = import("./setCloudSiteInfo").SetCloudSiteInfo;
export const SetCloudSiteInfo: typeof import("./setCloudSiteInfo").SetCloudSiteInfo = null as any;
utilities.lazyLoad(exports, ["SetCloudSiteInfo"], () => require("./setCloudSiteInfo"));

export { SiteMeshGroupArgs, SiteMeshGroupState } from "./siteMeshGroup";
export type SiteMeshGroup = import("./siteMeshGroup").SiteMeshGroup;
export const SiteMeshGroup: typeof import("./siteMeshGroup").SiteMeshGroup = null as any;
utilities.lazyLoad(exports, ["SiteMeshGroup"], () => require("./siteMeshGroup"));

export { SiteSetVipInfoArgs, SiteSetVipInfoState } from "./siteSetVipInfo";
export type SiteSetVipInfo = import("./siteSetVipInfo").SiteSetVipInfo;
export const SiteSetVipInfo: typeof import("./siteSetVipInfo").SiteSetVipInfo = null as any;
utilities.lazyLoad(exports, ["SiteSetVipInfo"], () => require("./siteSetVipInfo"));

export { SiteStateArgs, SiteStateState } from "./siteState";
export type SiteState = import("./siteState").SiteState;
export const SiteState: typeof import("./siteState").SiteState = null as any;
utilities.lazyLoad(exports, ["SiteState"], () => require("./siteState"));

export { TcpLoadbalancerArgs, TcpLoadbalancerState } from "./tcpLoadbalancer";
export type TcpLoadbalancer = import("./tcpLoadbalancer").TcpLoadbalancer;
export const TcpLoadbalancer: typeof import("./tcpLoadbalancer").TcpLoadbalancer = null as any;
utilities.lazyLoad(exports, ["TcpLoadbalancer"], () => require("./tcpLoadbalancer"));

export { TfParamsActionArgs, TfParamsActionState } from "./tfParamsAction";
export type TfParamsAction = import("./tfParamsAction").TfParamsAction;
export const TfParamsAction: typeof import("./tfParamsAction").TfParamsAction = null as any;
utilities.lazyLoad(exports, ["TfParamsAction"], () => require("./tfParamsAction"));

export { TgwInfoArgs, TgwInfoState } from "./tgwInfo";
export type TgwInfo = import("./tgwInfo").TgwInfo;
export const TgwInfo: typeof import("./tgwInfo").TgwInfo = null as any;
utilities.lazyLoad(exports, ["TgwInfo"], () => require("./tgwInfo"));

export { TgwVpcIpPrefixesArgs, TgwVpcIpPrefixesState } from "./tgwVpcIpPrefixes";
export type TgwVpcIpPrefixes = import("./tgwVpcIpPrefixes").TgwVpcIpPrefixes;
export const TgwVpcIpPrefixes: typeof import("./tgwVpcIpPrefixes").TgwVpcIpPrefixes = null as any;
utilities.lazyLoad(exports, ["TgwVpcIpPrefixes"], () => require("./tgwVpcIpPrefixes"));

export { TgwVpnTunnelsArgs, TgwVpnTunnelsState } from "./tgwVpnTunnels";
export type TgwVpnTunnels = import("./tgwVpnTunnels").TgwVpnTunnels;
export const TgwVpnTunnels: typeof import("./tgwVpnTunnels").TgwVpnTunnels = null as any;
utilities.lazyLoad(exports, ["TgwVpnTunnels"], () => require("./tgwVpnTunnels"));

export { TokenArgs, TokenState } from "./token";
export type Token = import("./token").Token;
export const Token: typeof import("./token").Token = null as any;
utilities.lazyLoad(exports, ["Token"], () => require("./token"));

export { TrustedCaListArgs, TrustedCaListState } from "./trustedCaList";
export type TrustedCaList = import("./trustedCaList").TrustedCaList;
export const TrustedCaList: typeof import("./trustedCaList").TrustedCaList = null as any;
utilities.lazyLoad(exports, ["TrustedCaList"], () => require("./trustedCaList"));

export { UsbPolicyArgs, UsbPolicyState } from "./usbPolicy";
export type UsbPolicy = import("./usbPolicy").UsbPolicy;
export const UsbPolicy: typeof import("./usbPolicy").UsbPolicy = null as any;
utilities.lazyLoad(exports, ["UsbPolicy"], () => require("./usbPolicy"));

export { UserIdentificationArgs, UserIdentificationState } from "./userIdentification";
export type UserIdentification = import("./userIdentification").UserIdentification;
export const UserIdentification: typeof import("./userIdentification").UserIdentification = null as any;
utilities.lazyLoad(exports, ["UserIdentification"], () => require("./userIdentification"));

export { UztnaDomainArgs, UztnaDomainState } from "./uztnaDomain";
export type UztnaDomain = import("./uztnaDomain").UztnaDomain;
export const UztnaDomain: typeof import("./uztnaDomain").UztnaDomain = null as any;
utilities.lazyLoad(exports, ["UztnaDomain"], () => require("./uztnaDomain"));

export { UztnaDomainViewArgs, UztnaDomainViewState } from "./uztnaDomainView";
export type UztnaDomainView = import("./uztnaDomainView").UztnaDomainView;
export const UztnaDomainView: typeof import("./uztnaDomainView").UztnaDomainView = null as any;
utilities.lazyLoad(exports, ["UztnaDomainView"], () => require("./uztnaDomainView"));

export { UztnaGatewayArgs, UztnaGatewayState } from "./uztnaGateway";
export type UztnaGateway = import("./uztnaGateway").UztnaGateway;
export const UztnaGateway: typeof import("./uztnaGateway").UztnaGateway = null as any;
utilities.lazyLoad(exports, ["UztnaGateway"], () => require("./uztnaGateway"));

export { UztnaLeasepoolArgs, UztnaLeasepoolState } from "./uztnaLeasepool";
export type UztnaLeasepool = import("./uztnaLeasepool").UztnaLeasepool;
export const UztnaLeasepool: typeof import("./uztnaLeasepool").UztnaLeasepool = null as any;
utilities.lazyLoad(exports, ["UztnaLeasepool"], () => require("./uztnaLeasepool"));

export { VirtualHostArgs, VirtualHostState } from "./virtualHost";
export type VirtualHost = import("./virtualHost").VirtualHost;
export const VirtualHost: typeof import("./virtualHost").VirtualHost = null as any;
utilities.lazyLoad(exports, ["VirtualHost"], () => require("./virtualHost"));

export { VirtualK8sArgs, VirtualK8sState } from "./virtualK8s";
export type VirtualK8s = import("./virtualK8s").VirtualK8s;
export const VirtualK8s: typeof import("./virtualK8s").VirtualK8s = null as any;
utilities.lazyLoad(exports, ["VirtualK8s"], () => require("./virtualK8s"));

export { VirtualNetworkArgs, VirtualNetworkState } from "./virtualNetwork";
export type VirtualNetwork = import("./virtualNetwork").VirtualNetwork;
export const VirtualNetwork: typeof import("./virtualNetwork").VirtualNetwork = null as any;
utilities.lazyLoad(exports, ["VirtualNetwork"], () => require("./virtualNetwork"));

export { VirtualSiteArgs, VirtualSiteState } from "./virtualSite";
export type VirtualSite = import("./virtualSite").VirtualSite;
export const VirtualSite: typeof import("./virtualSite").VirtualSite = null as any;
utilities.lazyLoad(exports, ["VirtualSite"], () => require("./virtualSite"));

export { VoltstackSiteArgs, VoltstackSiteState } from "./voltstackSite";
export type VoltstackSite = import("./voltstackSite").VoltstackSite;
export const VoltstackSite: typeof import("./voltstackSite").VoltstackSite = null as any;
utilities.lazyLoad(exports, ["VoltstackSite"], () => require("./voltstackSite"));

export { VpcK8sHostnamesArgs, VpcK8sHostnamesState } from "./vpcK8sHostnames";
export type VpcK8sHostnames = import("./vpcK8sHostnames").VpcK8sHostnames;
export const VpcK8sHostnames: typeof import("./vpcK8sHostnames").VpcK8sHostnames = null as any;
utilities.lazyLoad(exports, ["VpcK8sHostnames"], () => require("./vpcK8sHostnames"));

export { ZtnaArgs, ZtnaState } from "./ztna";
export type Ztna = import("./ztna").Ztna;
export const Ztna: typeof import("./ztna").Ztna = null as any;
utilities.lazyLoad(exports, ["Ztna"], () => require("./ztna"));

export { ZtnaApplicationArgs, ZtnaApplicationState } from "./ztnaApplication";
export type ZtnaApplication = import("./ztnaApplication").ZtnaApplication;
export const ZtnaApplication: typeof import("./ztnaApplication").ZtnaApplication = null as any;
utilities.lazyLoad(exports, ["ZtnaApplication"], () => require("./ztnaApplication"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volterra:index/activeAlertPolicies:ActiveAlertPolicies":
                return new ActiveAlertPolicies(name, <any>undefined, { urn })
            case "volterra:index/activeNetworkPolicies:ActiveNetworkPolicies":
                return new ActiveNetworkPolicies(name, <any>undefined, { urn })
            case "volterra:index/activeServicePolicies:ActiveServicePolicies":
                return new ActiveServicePolicies(name, <any>undefined, { urn })
            case "volterra:index/advertisePolicy:AdvertisePolicy":
                return new AdvertisePolicy(name, <any>undefined, { urn })
            case "volterra:index/alertPolicy:AlertPolicy":
                return new AlertPolicy(name, <any>undefined, { urn })
            case "volterra:index/alertReceiver:AlertReceiver":
                return new AlertReceiver(name, <any>undefined, { urn })
            case "volterra:index/apiCredential:ApiCredential":
                return new ApiCredential(name, <any>undefined, { urn })
            case "volterra:index/apiDefinition:ApiDefinition":
                return new ApiDefinition(name, <any>undefined, { urn })
            case "volterra:index/apm:Apm":
                return new Apm(name, <any>undefined, { urn })
            case "volterra:index/appApiGroup:AppApiGroup":
                return new AppApiGroup(name, <any>undefined, { urn })
            case "volterra:index/appFirewall:AppFirewall":
                return new AppFirewall(name, <any>undefined, { urn })
            case "volterra:index/appSetting:AppSetting":
                return new AppSetting(name, <any>undefined, { urn })
            case "volterra:index/appType:AppType":
                return new AppType(name, <any>undefined, { urn })
            case "volterra:index/awsTgwSite:AwsTgwSite":
                return new AwsTgwSite(name, <any>undefined, { urn })
            case "volterra:index/awsVpcSite:AwsVpcSite":
                return new AwsVpcSite(name, <any>undefined, { urn })
            case "volterra:index/azureVnetSite:AzureVnetSite":
                return new AzureVnetSite(name, <any>undefined, { urn })
            case "volterra:index/bgp:Bgp":
                return new Bgp(name, <any>undefined, { urn })
            case "volterra:index/bgpAsnSet:BgpAsnSet":
                return new BgpAsnSet(name, <any>undefined, { urn })
            case "volterra:index/cdnLoadbalancer:CdnLoadbalancer":
                return new CdnLoadbalancer(name, <any>undefined, { urn })
            case "volterra:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "volterra:index/certificateChain:CertificateChain":
                return new CertificateChain(name, <any>undefined, { urn })
            case "volterra:index/cloudCredentials:CloudCredentials":
                return new CloudCredentials(name, <any>undefined, { urn })
            case "volterra:index/cloudLink:CloudLink":
                return new CloudLink(name, <any>undefined, { urn })
            case "volterra:index/cloudSiteLabels:CloudSiteLabels":
                return new CloudSiteLabels(name, <any>undefined, { urn })
            case "volterra:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "volterra:index/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "volterra:index/crl:Crl":
                return new Crl(name, <any>undefined, { urn })
            case "volterra:index/dataType:DataType":
                return new DataType(name, <any>undefined, { urn })
            case "volterra:index/dcClusterGroup:DcClusterGroup":
                return new DcClusterGroup(name, <any>undefined, { urn })
            case "volterra:index/discovery:Discovery":
                return new Discovery(name, <any>undefined, { urn })
            case "volterra:index/dnsComplianceChecks:DnsComplianceChecks":
                return new DnsComplianceChecks(name, <any>undefined, { urn })
            case "volterra:index/dnsDomain:DnsDomain":
                return new DnsDomain(name, <any>undefined, { urn })
            case "volterra:index/dnsLbHealthCheck:DnsLbHealthCheck":
                return new DnsLbHealthCheck(name, <any>undefined, { urn })
            case "volterra:index/dnsLbPool:DnsLbPool":
                return new DnsLbPool(name, <any>undefined, { urn })
            case "volterra:index/dnsLoadBalancer:DnsLoadBalancer":
                return new DnsLoadBalancer(name, <any>undefined, { urn })
            case "volterra:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "volterra:index/dnsZoneRecord:DnsZoneRecord":
                return new DnsZoneRecord(name, <any>undefined, { urn })
            case "volterra:index/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "volterra:index/enhancedFirewallPolicy:EnhancedFirewallPolicy":
                return new EnhancedFirewallPolicy(name, <any>undefined, { urn })
            case "volterra:index/fastAcl:FastAcl":
                return new FastAcl(name, <any>undefined, { urn })
            case "volterra:index/fastAclForInternetVips:FastAclForInternetVips":
                return new FastAclForInternetVips(name, <any>undefined, { urn })
            case "volterra:index/fastAclRule:FastAclRule":
                return new FastAclRule(name, <any>undefined, { urn })
            case "volterra:index/filterSet:FilterSet":
                return new FilterSet(name, <any>undefined, { urn })
            case "volterra:index/fleet:Fleet":
                return new Fleet(name, <any>undefined, { urn })
            case "volterra:index/forwardProxyPolicy:ForwardProxyPolicy":
                return new ForwardProxyPolicy(name, <any>undefined, { urn })
            case "volterra:index/gcpVpcSite:GcpVpcSite":
                return new GcpVpcSite(name, <any>undefined, { urn })
            case "volterra:index/globalLogReceiver:GlobalLogReceiver":
                return new GlobalLogReceiver(name, <any>undefined, { urn })
            case "volterra:index/healthcheck:Healthcheck":
                return new Healthcheck(name, <any>undefined, { urn })
            case "volterra:index/httpLoadbalancer:HttpLoadbalancer":
                return new HttpLoadbalancer(name, <any>undefined, { urn })
            case "volterra:index/ipPrefixSet:IpPrefixSet":
                return new IpPrefixSet(name, <any>undefined, { urn })
            case "volterra:index/k8sCluster:K8sCluster":
                return new K8sCluster(name, <any>undefined, { urn })
            case "volterra:index/k8sClusterRole:K8sClusterRole":
                return new K8sClusterRole(name, <any>undefined, { urn })
            case "volterra:index/k8sClusterRoleBinding:K8sClusterRoleBinding":
                return new K8sClusterRoleBinding(name, <any>undefined, { urn })
            case "volterra:index/k8sPodSecurityAdmission:K8sPodSecurityAdmission":
                return new K8sPodSecurityAdmission(name, <any>undefined, { urn })
            case "volterra:index/k8sPodSecurityPolicy:K8sPodSecurityPolicy":
                return new K8sPodSecurityPolicy(name, <any>undefined, { urn })
            case "volterra:index/knownLabel:KnownLabel":
                return new KnownLabel(name, <any>undefined, { urn })
            case "volterra:index/knownLabelKey:KnownLabelKey":
                return new KnownLabelKey(name, <any>undefined, { urn })
            case "volterra:index/logReceiver:LogReceiver":
                return new LogReceiver(name, <any>undefined, { urn })
            case "volterra:index/maliciousUserMitigation:MaliciousUserMitigation":
                return new MaliciousUserMitigation(name, <any>undefined, { urn })
            case "volterra:index/modifySite:ModifySite":
                return new ModifySite(name, <any>undefined, { urn })
            case "volterra:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "volterra:index/networkConnector:NetworkConnector":
                return new NetworkConnector(name, <any>undefined, { urn })
            case "volterra:index/networkFirewall:NetworkFirewall":
                return new NetworkFirewall(name, <any>undefined, { urn })
            case "volterra:index/networkInterface:NetworkInterface":
                return new NetworkInterface(name, <any>undefined, { urn })
            case "volterra:index/networkPolicy:NetworkPolicy":
                return new NetworkPolicy(name, <any>undefined, { urn })
            case "volterra:index/networkPolicyRule:NetworkPolicyRule":
                return new NetworkPolicyRule(name, <any>undefined, { urn })
            case "volterra:index/networkPolicyView:NetworkPolicyView":
                return new NetworkPolicyView(name, <any>undefined, { urn })
            case "volterra:index/nfvService:NfvService":
                return new NfvService(name, <any>undefined, { urn })
            case "volterra:index/originPool:OriginPool":
                return new OriginPool(name, <any>undefined, { urn })
            case "volterra:index/policer:Policer":
                return new Policer(name, <any>undefined, { urn })
            case "volterra:index/protocolInspection:ProtocolInspection":
                return new ProtocolInspection(name, <any>undefined, { urn })
            case "volterra:index/protocolPolicer:ProtocolPolicer":
                return new ProtocolPolicer(name, <any>undefined, { urn })
            case "volterra:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "volterra:index/rateLimiter:RateLimiter":
                return new RateLimiter(name, <any>undefined, { urn })
            case "volterra:index/rateLimiterPolicy:RateLimiterPolicy":
                return new RateLimiterPolicy(name, <any>undefined, { urn })
            case "volterra:index/registrationApproval:RegistrationApproval":
                return new RegistrationApproval(name, <any>undefined, { urn })
            case "volterra:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "volterra:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "volterra:index/secretPolicy:SecretPolicy":
                return new SecretPolicy(name, <any>undefined, { urn })
            case "volterra:index/secretPolicyRule:SecretPolicyRule":
                return new SecretPolicyRule(name, <any>undefined, { urn })
            case "volterra:index/securemeshSite:SecuremeshSite":
                return new SecuremeshSite(name, <any>undefined, { urn })
            case "volterra:index/securemeshSiteV2:SecuremeshSiteV2":
                return new SecuremeshSiteV2(name, <any>undefined, { urn })
            case "volterra:index/sensitiveDataPolicy:SensitiveDataPolicy":
                return new SensitiveDataPolicy(name, <any>undefined, { urn })
            case "volterra:index/servicePolicy:ServicePolicy":
                return new ServicePolicy(name, <any>undefined, { urn })
            case "volterra:index/servicePolicyRule:ServicePolicyRule":
                return new ServicePolicyRule(name, <any>undefined, { urn })
            case "volterra:index/setCloudSiteInfo:SetCloudSiteInfo":
                return new SetCloudSiteInfo(name, <any>undefined, { urn })
            case "volterra:index/siteMeshGroup:SiteMeshGroup":
                return new SiteMeshGroup(name, <any>undefined, { urn })
            case "volterra:index/siteSetVipInfo:SiteSetVipInfo":
                return new SiteSetVipInfo(name, <any>undefined, { urn })
            case "volterra:index/siteState:SiteState":
                return new SiteState(name, <any>undefined, { urn })
            case "volterra:index/tcpLoadbalancer:TcpLoadbalancer":
                return new TcpLoadbalancer(name, <any>undefined, { urn })
            case "volterra:index/tfParamsAction:TfParamsAction":
                return new TfParamsAction(name, <any>undefined, { urn })
            case "volterra:index/tgwInfo:TgwInfo":
                return new TgwInfo(name, <any>undefined, { urn })
            case "volterra:index/tgwVpcIpPrefixes:TgwVpcIpPrefixes":
                return new TgwVpcIpPrefixes(name, <any>undefined, { urn })
            case "volterra:index/tgwVpnTunnels:TgwVpnTunnels":
                return new TgwVpnTunnels(name, <any>undefined, { urn })
            case "volterra:index/token:Token":
                return new Token(name, <any>undefined, { urn })
            case "volterra:index/trustedCaList:TrustedCaList":
                return new TrustedCaList(name, <any>undefined, { urn })
            case "volterra:index/usbPolicy:UsbPolicy":
                return new UsbPolicy(name, <any>undefined, { urn })
            case "volterra:index/userIdentification:UserIdentification":
                return new UserIdentification(name, <any>undefined, { urn })
            case "volterra:index/uztnaDomain:UztnaDomain":
                return new UztnaDomain(name, <any>undefined, { urn })
            case "volterra:index/uztnaDomainView:UztnaDomainView":
                return new UztnaDomainView(name, <any>undefined, { urn })
            case "volterra:index/uztnaGateway:UztnaGateway":
                return new UztnaGateway(name, <any>undefined, { urn })
            case "volterra:index/uztnaLeasepool:UztnaLeasepool":
                return new UztnaLeasepool(name, <any>undefined, { urn })
            case "volterra:index/virtualHost:VirtualHost":
                return new VirtualHost(name, <any>undefined, { urn })
            case "volterra:index/virtualK8s:VirtualK8s":
                return new VirtualK8s(name, <any>undefined, { urn })
            case "volterra:index/virtualNetwork:VirtualNetwork":
                return new VirtualNetwork(name, <any>undefined, { urn })
            case "volterra:index/virtualSite:VirtualSite":
                return new VirtualSite(name, <any>undefined, { urn })
            case "volterra:index/voltstackSite:VoltstackSite":
                return new VoltstackSite(name, <any>undefined, { urn })
            case "volterra:index/vpcK8sHostnames:VpcK8sHostnames":
                return new VpcK8sHostnames(name, <any>undefined, { urn })
            case "volterra:index/ztna:Ztna":
                return new Ztna(name, <any>undefined, { urn })
            case "volterra:index/ztnaApplication:ZtnaApplication":
                return new ZtnaApplication(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volterra", "index/activeAlertPolicies", _module)
pulumi.runtime.registerResourceModule("volterra", "index/activeNetworkPolicies", _module)
pulumi.runtime.registerResourceModule("volterra", "index/activeServicePolicies", _module)
pulumi.runtime.registerResourceModule("volterra", "index/advertisePolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/alertPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/alertReceiver", _module)
pulumi.runtime.registerResourceModule("volterra", "index/apiCredential", _module)
pulumi.runtime.registerResourceModule("volterra", "index/apiDefinition", _module)
pulumi.runtime.registerResourceModule("volterra", "index/apm", _module)
pulumi.runtime.registerResourceModule("volterra", "index/appApiGroup", _module)
pulumi.runtime.registerResourceModule("volterra", "index/appFirewall", _module)
pulumi.runtime.registerResourceModule("volterra", "index/appSetting", _module)
pulumi.runtime.registerResourceModule("volterra", "index/appType", _module)
pulumi.runtime.registerResourceModule("volterra", "index/awsTgwSite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/awsVpcSite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/azureVnetSite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/bgp", _module)
pulumi.runtime.registerResourceModule("volterra", "index/bgpAsnSet", _module)
pulumi.runtime.registerResourceModule("volterra", "index/cdnLoadbalancer", _module)
pulumi.runtime.registerResourceModule("volterra", "index/certificate", _module)
pulumi.runtime.registerResourceModule("volterra", "index/certificateChain", _module)
pulumi.runtime.registerResourceModule("volterra", "index/cloudCredentials", _module)
pulumi.runtime.registerResourceModule("volterra", "index/cloudLink", _module)
pulumi.runtime.registerResourceModule("volterra", "index/cloudSiteLabels", _module)
pulumi.runtime.registerResourceModule("volterra", "index/cluster", _module)
pulumi.runtime.registerResourceModule("volterra", "index/containerRegistry", _module)
pulumi.runtime.registerResourceModule("volterra", "index/crl", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dataType", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dcClusterGroup", _module)
pulumi.runtime.registerResourceModule("volterra", "index/discovery", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dnsComplianceChecks", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dnsDomain", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dnsLbHealthCheck", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dnsLbPool", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dnsLoadBalancer", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("volterra", "index/dnsZoneRecord", _module)
pulumi.runtime.registerResourceModule("volterra", "index/endpoint", _module)
pulumi.runtime.registerResourceModule("volterra", "index/enhancedFirewallPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/fastAcl", _module)
pulumi.runtime.registerResourceModule("volterra", "index/fastAclForInternetVips", _module)
pulumi.runtime.registerResourceModule("volterra", "index/fastAclRule", _module)
pulumi.runtime.registerResourceModule("volterra", "index/filterSet", _module)
pulumi.runtime.registerResourceModule("volterra", "index/fleet", _module)
pulumi.runtime.registerResourceModule("volterra", "index/forwardProxyPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/gcpVpcSite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/globalLogReceiver", _module)
pulumi.runtime.registerResourceModule("volterra", "index/healthcheck", _module)
pulumi.runtime.registerResourceModule("volterra", "index/httpLoadbalancer", _module)
pulumi.runtime.registerResourceModule("volterra", "index/ipPrefixSet", _module)
pulumi.runtime.registerResourceModule("volterra", "index/k8sCluster", _module)
pulumi.runtime.registerResourceModule("volterra", "index/k8sClusterRole", _module)
pulumi.runtime.registerResourceModule("volterra", "index/k8sClusterRoleBinding", _module)
pulumi.runtime.registerResourceModule("volterra", "index/k8sPodSecurityAdmission", _module)
pulumi.runtime.registerResourceModule("volterra", "index/k8sPodSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/knownLabel", _module)
pulumi.runtime.registerResourceModule("volterra", "index/knownLabelKey", _module)
pulumi.runtime.registerResourceModule("volterra", "index/logReceiver", _module)
pulumi.runtime.registerResourceModule("volterra", "index/maliciousUserMitigation", _module)
pulumi.runtime.registerResourceModule("volterra", "index/modifySite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/namespace", _module)
pulumi.runtime.registerResourceModule("volterra", "index/networkConnector", _module)
pulumi.runtime.registerResourceModule("volterra", "index/networkFirewall", _module)
pulumi.runtime.registerResourceModule("volterra", "index/networkInterface", _module)
pulumi.runtime.registerResourceModule("volterra", "index/networkPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/networkPolicyRule", _module)
pulumi.runtime.registerResourceModule("volterra", "index/networkPolicyView", _module)
pulumi.runtime.registerResourceModule("volterra", "index/nfvService", _module)
pulumi.runtime.registerResourceModule("volterra", "index/originPool", _module)
pulumi.runtime.registerResourceModule("volterra", "index/policer", _module)
pulumi.runtime.registerResourceModule("volterra", "index/protocolInspection", _module)
pulumi.runtime.registerResourceModule("volterra", "index/protocolPolicer", _module)
pulumi.runtime.registerResourceModule("volterra", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("volterra", "index/rateLimiter", _module)
pulumi.runtime.registerResourceModule("volterra", "index/rateLimiterPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/registrationApproval", _module)
pulumi.runtime.registerResourceModule("volterra", "index/role", _module)
pulumi.runtime.registerResourceModule("volterra", "index/route", _module)
pulumi.runtime.registerResourceModule("volterra", "index/secretPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/secretPolicyRule", _module)
pulumi.runtime.registerResourceModule("volterra", "index/securemeshSite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/securemeshSiteV2", _module)
pulumi.runtime.registerResourceModule("volterra", "index/sensitiveDataPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/servicePolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/servicePolicyRule", _module)
pulumi.runtime.registerResourceModule("volterra", "index/setCloudSiteInfo", _module)
pulumi.runtime.registerResourceModule("volterra", "index/siteMeshGroup", _module)
pulumi.runtime.registerResourceModule("volterra", "index/siteSetVipInfo", _module)
pulumi.runtime.registerResourceModule("volterra", "index/siteState", _module)
pulumi.runtime.registerResourceModule("volterra", "index/tcpLoadbalancer", _module)
pulumi.runtime.registerResourceModule("volterra", "index/tfParamsAction", _module)
pulumi.runtime.registerResourceModule("volterra", "index/tgwInfo", _module)
pulumi.runtime.registerResourceModule("volterra", "index/tgwVpcIpPrefixes", _module)
pulumi.runtime.registerResourceModule("volterra", "index/tgwVpnTunnels", _module)
pulumi.runtime.registerResourceModule("volterra", "index/token", _module)
pulumi.runtime.registerResourceModule("volterra", "index/trustedCaList", _module)
pulumi.runtime.registerResourceModule("volterra", "index/usbPolicy", _module)
pulumi.runtime.registerResourceModule("volterra", "index/userIdentification", _module)
pulumi.runtime.registerResourceModule("volterra", "index/uztnaDomain", _module)
pulumi.runtime.registerResourceModule("volterra", "index/uztnaDomainView", _module)
pulumi.runtime.registerResourceModule("volterra", "index/uztnaGateway", _module)
pulumi.runtime.registerResourceModule("volterra", "index/uztnaLeasepool", _module)
pulumi.runtime.registerResourceModule("volterra", "index/virtualHost", _module)
pulumi.runtime.registerResourceModule("volterra", "index/virtualK8s", _module)
pulumi.runtime.registerResourceModule("volterra", "index/virtualNetwork", _module)
pulumi.runtime.registerResourceModule("volterra", "index/virtualSite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/voltstackSite", _module)
pulumi.runtime.registerResourceModule("volterra", "index/vpcK8sHostnames", _module)
pulumi.runtime.registerResourceModule("volterra", "index/ztna", _module)
pulumi.runtime.registerResourceModule("volterra", "index/ztnaApplication", _module)
pulumi.runtime.registerResourcePackage("volterra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:volterra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
