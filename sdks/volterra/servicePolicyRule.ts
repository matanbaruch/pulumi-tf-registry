// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ServicePolicyRule extends pulumi.CustomResource {
    /**
     * Get an existing ServicePolicyRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePolicyRuleState, opts?: pulumi.CustomResourceOptions): ServicePolicyRule {
        return new ServicePolicyRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/servicePolicyRule:ServicePolicyRule';

    /**
     * Returns true if the given object is an instance of ServicePolicyRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServicePolicyRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServicePolicyRule.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly anyAsn!: pulumi.Output<boolean | undefined>;
    public readonly anyClient!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly anyDstAsn!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly anyDstIp!: pulumi.Output<boolean | undefined>;
    public readonly anyIp!: pulumi.Output<boolean | undefined>;
    public readonly apiGroupMatchers!: pulumi.Output<outputs.ServicePolicyRuleApiGroupMatcher[] | undefined>;
    public readonly argMatchers!: pulumi.Output<outputs.ServicePolicyRuleArgMatcher[] | undefined>;
    public readonly asnLists!: pulumi.Output<outputs.ServicePolicyRuleAsnList[] | undefined>;
    public readonly asnMatchers!: pulumi.Output<outputs.ServicePolicyRuleAsnMatcher[] | undefined>;
    public readonly bodyMatchers!: pulumi.Output<outputs.ServicePolicyRuleBodyMatcher[] | undefined>;
    public readonly botActions!: pulumi.Output<outputs.ServicePolicyRuleBotAction[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly challengeAction!: pulumi.Output<string>;
    public readonly clientName!: pulumi.Output<string | undefined>;
    public readonly clientNameMatchers!: pulumi.Output<outputs.ServicePolicyRuleClientNameMatcher[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly clientRoles!: pulumi.Output<outputs.ServicePolicyRuleClientRole[] | undefined>;
    public readonly clientSelectors!: pulumi.Output<outputs.ServicePolicyRuleClientSelector[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly contentRewriteActions!: pulumi.Output<outputs.ServicePolicyRuleContentRewriteAction[] | undefined>;
    public readonly cookieMatchers!: pulumi.Output<outputs.ServicePolicyRuleCookieMatcher[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly domainMatchers!: pulumi.Output<outputs.ServicePolicyRuleDomainMatcher[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dstAsnLists!: pulumi.Output<outputs.ServicePolicyRuleDstAsnList[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dstAsnMatchers!: pulumi.Output<outputs.ServicePolicyRuleDstAsnMatcher[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dstIpMatchers!: pulumi.Output<outputs.ServicePolicyRuleDstIpMatcher[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly dstIpPrefixLists!: pulumi.Output<outputs.ServicePolicyRuleDstIpPrefixList[] | undefined>;
    public readonly expirationTimestamp!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly gotoPolicies!: pulumi.Output<outputs.ServicePolicyRuleGotoPolicy[] | undefined>;
    public readonly headers!: pulumi.Output<outputs.ServicePolicyRuleHeader[] | undefined>;
    public readonly httpMethods!: pulumi.Output<outputs.ServicePolicyRuleHttpMethod[] | undefined>;
    public readonly ipMatchers!: pulumi.Output<outputs.ServicePolicyRuleIpMatcher[] | undefined>;
    public readonly ipPrefixLists!: pulumi.Output<outputs.ServicePolicyRuleIpPrefixList[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly ipReputationActions!: pulumi.Output<outputs.ServicePolicyRuleIpReputationAction[] | undefined>;
    public readonly ipThreatCategoryLists!: pulumi.Output<outputs.ServicePolicyRuleIpThreatCategoryList[] | undefined>;
    public readonly jwtClaims!: pulumi.Output<outputs.ServicePolicyRuleJwtClaim[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly l4DestMatchers!: pulumi.Output<outputs.ServicePolicyRuleL4DestMatcher[] | undefined>;
    public readonly labelMatchers!: pulumi.Output<outputs.ServicePolicyRuleLabelMatcher[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly mumActions!: pulumi.Output<outputs.ServicePolicyRuleMumAction[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly originServerSubsetsAction!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly paths!: pulumi.Output<outputs.ServicePolicyRulePath[] | undefined>;
    public readonly portMatchers!: pulumi.Output<outputs.ServicePolicyRulePortMatcher[] | undefined>;
    public readonly queryParams!: pulumi.Output<outputs.ServicePolicyRuleQueryParam[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly rateLimiters!: pulumi.Output<outputs.ServicePolicyRuleRateLimiter[] | undefined>;
    public readonly requestConstraints!: pulumi.Output<outputs.ServicePolicyRuleRequestConstraint[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly schemes!: pulumi.Output<string[] | undefined>;
    public readonly segmentPolicies!: pulumi.Output<outputs.ServicePolicyRuleSegmentPolicy[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly serverSelectors!: pulumi.Output<outputs.ServicePolicyRuleServerSelector[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly shapeProtectedEndpointActions!: pulumi.Output<outputs.ServicePolicyRuleShapeProtectedEndpointAction[] | undefined>;
    public readonly tlsFingerprintMatchers!: pulumi.Output<outputs.ServicePolicyRuleTlsFingerprintMatcher[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly urlMatchers!: pulumi.Output<outputs.ServicePolicyRuleUrlMatcher[] | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly virtualHostMatchers!: pulumi.Output<outputs.ServicePolicyRuleVirtualHostMatcher[] | undefined>;
    public readonly wafActions!: pulumi.Output<outputs.ServicePolicyRuleWafAction[]>;

    /**
     * Create a ServicePolicyRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePolicyRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServicePolicyRuleArgs | ServicePolicyRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServicePolicyRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["anyAsn"] = state ? state.anyAsn : undefined;
            resourceInputs["anyClient"] = state ? state.anyClient : undefined;
            resourceInputs["anyDstAsn"] = state ? state.anyDstAsn : undefined;
            resourceInputs["anyDstIp"] = state ? state.anyDstIp : undefined;
            resourceInputs["anyIp"] = state ? state.anyIp : undefined;
            resourceInputs["apiGroupMatchers"] = state ? state.apiGroupMatchers : undefined;
            resourceInputs["argMatchers"] = state ? state.argMatchers : undefined;
            resourceInputs["asnLists"] = state ? state.asnLists : undefined;
            resourceInputs["asnMatchers"] = state ? state.asnMatchers : undefined;
            resourceInputs["bodyMatchers"] = state ? state.bodyMatchers : undefined;
            resourceInputs["botActions"] = state ? state.botActions : undefined;
            resourceInputs["challengeAction"] = state ? state.challengeAction : undefined;
            resourceInputs["clientName"] = state ? state.clientName : undefined;
            resourceInputs["clientNameMatchers"] = state ? state.clientNameMatchers : undefined;
            resourceInputs["clientRoles"] = state ? state.clientRoles : undefined;
            resourceInputs["clientSelectors"] = state ? state.clientSelectors : undefined;
            resourceInputs["contentRewriteActions"] = state ? state.contentRewriteActions : undefined;
            resourceInputs["cookieMatchers"] = state ? state.cookieMatchers : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["domainMatchers"] = state ? state.domainMatchers : undefined;
            resourceInputs["dstAsnLists"] = state ? state.dstAsnLists : undefined;
            resourceInputs["dstAsnMatchers"] = state ? state.dstAsnMatchers : undefined;
            resourceInputs["dstIpMatchers"] = state ? state.dstIpMatchers : undefined;
            resourceInputs["dstIpPrefixLists"] = state ? state.dstIpPrefixLists : undefined;
            resourceInputs["expirationTimestamp"] = state ? state.expirationTimestamp : undefined;
            resourceInputs["gotoPolicies"] = state ? state.gotoPolicies : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["httpMethods"] = state ? state.httpMethods : undefined;
            resourceInputs["ipMatchers"] = state ? state.ipMatchers : undefined;
            resourceInputs["ipPrefixLists"] = state ? state.ipPrefixLists : undefined;
            resourceInputs["ipReputationActions"] = state ? state.ipReputationActions : undefined;
            resourceInputs["ipThreatCategoryLists"] = state ? state.ipThreatCategoryLists : undefined;
            resourceInputs["jwtClaims"] = state ? state.jwtClaims : undefined;
            resourceInputs["l4DestMatchers"] = state ? state.l4DestMatchers : undefined;
            resourceInputs["labelMatchers"] = state ? state.labelMatchers : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["mumActions"] = state ? state.mumActions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["originServerSubsetsAction"] = state ? state.originServerSubsetsAction : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["portMatchers"] = state ? state.portMatchers : undefined;
            resourceInputs["queryParams"] = state ? state.queryParams : undefined;
            resourceInputs["rateLimiters"] = state ? state.rateLimiters : undefined;
            resourceInputs["requestConstraints"] = state ? state.requestConstraints : undefined;
            resourceInputs["schemes"] = state ? state.schemes : undefined;
            resourceInputs["segmentPolicies"] = state ? state.segmentPolicies : undefined;
            resourceInputs["serverSelectors"] = state ? state.serverSelectors : undefined;
            resourceInputs["shapeProtectedEndpointActions"] = state ? state.shapeProtectedEndpointActions : undefined;
            resourceInputs["tlsFingerprintMatchers"] = state ? state.tlsFingerprintMatchers : undefined;
            resourceInputs["urlMatchers"] = state ? state.urlMatchers : undefined;
            resourceInputs["virtualHostMatchers"] = state ? state.virtualHostMatchers : undefined;
            resourceInputs["wafActions"] = state ? state.wafActions : undefined;
        } else {
            const args = argsOrState as ServicePolicyRuleArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.challengeAction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'challengeAction'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.wafActions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'wafActions'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["anyAsn"] = args ? args.anyAsn : undefined;
            resourceInputs["anyClient"] = args ? args.anyClient : undefined;
            resourceInputs["anyDstAsn"] = args ? args.anyDstAsn : undefined;
            resourceInputs["anyDstIp"] = args ? args.anyDstIp : undefined;
            resourceInputs["anyIp"] = args ? args.anyIp : undefined;
            resourceInputs["apiGroupMatchers"] = args ? args.apiGroupMatchers : undefined;
            resourceInputs["argMatchers"] = args ? args.argMatchers : undefined;
            resourceInputs["asnLists"] = args ? args.asnLists : undefined;
            resourceInputs["asnMatchers"] = args ? args.asnMatchers : undefined;
            resourceInputs["bodyMatchers"] = args ? args.bodyMatchers : undefined;
            resourceInputs["botActions"] = args ? args.botActions : undefined;
            resourceInputs["challengeAction"] = args ? args.challengeAction : undefined;
            resourceInputs["clientName"] = args ? args.clientName : undefined;
            resourceInputs["clientNameMatchers"] = args ? args.clientNameMatchers : undefined;
            resourceInputs["clientRoles"] = args ? args.clientRoles : undefined;
            resourceInputs["clientSelectors"] = args ? args.clientSelectors : undefined;
            resourceInputs["contentRewriteActions"] = args ? args.contentRewriteActions : undefined;
            resourceInputs["cookieMatchers"] = args ? args.cookieMatchers : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["domainMatchers"] = args ? args.domainMatchers : undefined;
            resourceInputs["dstAsnLists"] = args ? args.dstAsnLists : undefined;
            resourceInputs["dstAsnMatchers"] = args ? args.dstAsnMatchers : undefined;
            resourceInputs["dstIpMatchers"] = args ? args.dstIpMatchers : undefined;
            resourceInputs["dstIpPrefixLists"] = args ? args.dstIpPrefixLists : undefined;
            resourceInputs["expirationTimestamp"] = args ? args.expirationTimestamp : undefined;
            resourceInputs["gotoPolicies"] = args ? args.gotoPolicies : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["httpMethods"] = args ? args.httpMethods : undefined;
            resourceInputs["ipMatchers"] = args ? args.ipMatchers : undefined;
            resourceInputs["ipPrefixLists"] = args ? args.ipPrefixLists : undefined;
            resourceInputs["ipReputationActions"] = args ? args.ipReputationActions : undefined;
            resourceInputs["ipThreatCategoryLists"] = args ? args.ipThreatCategoryLists : undefined;
            resourceInputs["jwtClaims"] = args ? args.jwtClaims : undefined;
            resourceInputs["l4DestMatchers"] = args ? args.l4DestMatchers : undefined;
            resourceInputs["labelMatchers"] = args ? args.labelMatchers : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["mumActions"] = args ? args.mumActions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["originServerSubsetsAction"] = args ? args.originServerSubsetsAction : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["portMatchers"] = args ? args.portMatchers : undefined;
            resourceInputs["queryParams"] = args ? args.queryParams : undefined;
            resourceInputs["rateLimiters"] = args ? args.rateLimiters : undefined;
            resourceInputs["requestConstraints"] = args ? args.requestConstraints : undefined;
            resourceInputs["schemes"] = args ? args.schemes : undefined;
            resourceInputs["segmentPolicies"] = args ? args.segmentPolicies : undefined;
            resourceInputs["serverSelectors"] = args ? args.serverSelectors : undefined;
            resourceInputs["shapeProtectedEndpointActions"] = args ? args.shapeProtectedEndpointActions : undefined;
            resourceInputs["tlsFingerprintMatchers"] = args ? args.tlsFingerprintMatchers : undefined;
            resourceInputs["urlMatchers"] = args ? args.urlMatchers : undefined;
            resourceInputs["virtualHostMatchers"] = args ? args.virtualHostMatchers : undefined;
            resourceInputs["wafActions"] = args ? args.wafActions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServicePolicyRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ServicePolicyRule resources.
 */
export interface ServicePolicyRuleState {
    action?: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    anyAsn?: pulumi.Input<boolean>;
    anyClient?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    anyDstAsn?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    anyDstIp?: pulumi.Input<boolean>;
    anyIp?: pulumi.Input<boolean>;
    apiGroupMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleApiGroupMatcher>[]>;
    argMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleArgMatcher>[]>;
    asnLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleAsnList>[]>;
    asnMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleAsnMatcher>[]>;
    bodyMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleBodyMatcher>[]>;
    botActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleBotAction>[]>;
    /**
     * @deprecated Deprecated
     */
    challengeAction?: pulumi.Input<string>;
    clientName?: pulumi.Input<string>;
    clientNameMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleClientNameMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    clientRoles?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleClientRole>[]>;
    clientSelectors?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleClientSelector>[]>;
    /**
     * @deprecated Deprecated
     */
    contentRewriteActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleContentRewriteAction>[]>;
    cookieMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleCookieMatcher>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    domainMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDomainMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    dstAsnLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstAsnList>[]>;
    /**
     * @deprecated Deprecated
     */
    dstAsnMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstAsnMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    dstIpMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstIpMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    dstIpPrefixLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstIpPrefixList>[]>;
    expirationTimestamp?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    gotoPolicies?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleGotoPolicy>[]>;
    headers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleHeader>[]>;
    httpMethods?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleHttpMethod>[]>;
    ipMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpMatcher>[]>;
    ipPrefixLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpPrefixList>[]>;
    /**
     * @deprecated Deprecated
     */
    ipReputationActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpReputationAction>[]>;
    ipThreatCategoryLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpThreatCategoryList>[]>;
    jwtClaims?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleJwtClaim>[]>;
    /**
     * @deprecated Deprecated
     */
    l4DestMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleL4DestMatcher>[]>;
    labelMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleLabelMatcher>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    mumActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleMumAction>[]>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    originServerSubsetsAction?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    paths?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRulePath>[]>;
    portMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRulePortMatcher>[]>;
    queryParams?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleQueryParam>[]>;
    /**
     * @deprecated Deprecated
     */
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleRateLimiter>[]>;
    requestConstraints?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleRequestConstraint>[]>;
    /**
     * @deprecated Deprecated
     */
    schemes?: pulumi.Input<pulumi.Input<string>[]>;
    segmentPolicies?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleSegmentPolicy>[]>;
    /**
     * @deprecated Deprecated
     */
    serverSelectors?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleServerSelector>[]>;
    /**
     * @deprecated Deprecated
     */
    shapeProtectedEndpointActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleShapeProtectedEndpointAction>[]>;
    tlsFingerprintMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleTlsFingerprintMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    urlMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleUrlMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    virtualHostMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleVirtualHostMatcher>[]>;
    wafActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleWafAction>[]>;
}

/**
 * The set of arguments for constructing a ServicePolicyRule resource.
 */
export interface ServicePolicyRuleArgs {
    action: pulumi.Input<string>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    anyAsn?: pulumi.Input<boolean>;
    anyClient?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    anyDstAsn?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    anyDstIp?: pulumi.Input<boolean>;
    anyIp?: pulumi.Input<boolean>;
    apiGroupMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleApiGroupMatcher>[]>;
    argMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleArgMatcher>[]>;
    asnLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleAsnList>[]>;
    asnMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleAsnMatcher>[]>;
    bodyMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleBodyMatcher>[]>;
    botActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleBotAction>[]>;
    /**
     * @deprecated Deprecated
     */
    challengeAction: pulumi.Input<string>;
    clientName?: pulumi.Input<string>;
    clientNameMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleClientNameMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    clientRoles?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleClientRole>[]>;
    clientSelectors?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleClientSelector>[]>;
    /**
     * @deprecated Deprecated
     */
    contentRewriteActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleContentRewriteAction>[]>;
    cookieMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleCookieMatcher>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    domainMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDomainMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    dstAsnLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstAsnList>[]>;
    /**
     * @deprecated Deprecated
     */
    dstAsnMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstAsnMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    dstIpMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstIpMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    dstIpPrefixLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleDstIpPrefixList>[]>;
    expirationTimestamp?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    gotoPolicies?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleGotoPolicy>[]>;
    headers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleHeader>[]>;
    httpMethods?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleHttpMethod>[]>;
    ipMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpMatcher>[]>;
    ipPrefixLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpPrefixList>[]>;
    /**
     * @deprecated Deprecated
     */
    ipReputationActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpReputationAction>[]>;
    ipThreatCategoryLists?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleIpThreatCategoryList>[]>;
    jwtClaims?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleJwtClaim>[]>;
    /**
     * @deprecated Deprecated
     */
    l4DestMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleL4DestMatcher>[]>;
    labelMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleLabelMatcher>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    mumActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleMumAction>[]>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    originServerSubsetsAction?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    paths?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRulePath>[]>;
    portMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRulePortMatcher>[]>;
    queryParams?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleQueryParam>[]>;
    /**
     * @deprecated Deprecated
     */
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleRateLimiter>[]>;
    requestConstraints?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleRequestConstraint>[]>;
    /**
     * @deprecated Deprecated
     */
    schemes?: pulumi.Input<pulumi.Input<string>[]>;
    segmentPolicies?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleSegmentPolicy>[]>;
    /**
     * @deprecated Deprecated
     */
    serverSelectors?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleServerSelector>[]>;
    /**
     * @deprecated Deprecated
     */
    shapeProtectedEndpointActions?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleShapeProtectedEndpointAction>[]>;
    tlsFingerprintMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleTlsFingerprintMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    urlMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleUrlMatcher>[]>;
    /**
     * @deprecated Deprecated
     */
    virtualHostMatchers?: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleVirtualHostMatcher>[]>;
    wafActions: pulumi.Input<pulumi.Input<inputs.ServicePolicyRuleWafAction>[]>;
}
