// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SecuremeshSiteV2 extends pulumi.CustomResource {
    /**
     * Get an existing SecuremeshSiteV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecuremeshSiteV2State, opts?: pulumi.CustomResourceOptions): SecuremeshSiteV2 {
        return new SecuremeshSiteV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/securemeshSiteV2:SecuremeshSiteV2';

    /**
     * Returns true if the given object is an instance of SecuremeshSiteV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecuremeshSiteV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecuremeshSiteV2.__pulumiType;
    }

    public readonly activeEnhancedFirewallPolicies!: pulumi.Output<outputs.SecuremeshSiteV2ActiveEnhancedFirewallPolicy[] | undefined>;
    public readonly activeForwardProxyPolicies!: pulumi.Output<outputs.SecuremeshSiteV2ActiveForwardProxyPolicy[] | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly aws!: pulumi.Output<outputs.SecuremeshSiteV2Aw[] | undefined>;
    public readonly azures!: pulumi.Output<outputs.SecuremeshSiteV2Azure[] | undefined>;
    public readonly baremetals!: pulumi.Output<outputs.SecuremeshSiteV2Baremetal[] | undefined>;
    public readonly blockAllServices!: pulumi.Output<boolean | undefined>;
    public readonly blockedServices!: pulumi.Output<outputs.SecuremeshSiteV2BlockedService[] | undefined>;
    public readonly dcClusterGroupSlis!: pulumi.Output<outputs.SecuremeshSiteV2DcClusterGroupSli[] | undefined>;
    public readonly dcClusterGroupSlos!: pulumi.Output<outputs.SecuremeshSiteV2DcClusterGroupSlo[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly disableHa!: pulumi.Output<boolean | undefined>;
    public readonly enableHa!: pulumi.Output<boolean | undefined>;
    public readonly gcps!: pulumi.Output<outputs.SecuremeshSiteV2Gcp[] | undefined>;
    public readonly kvms!: pulumi.Output<outputs.SecuremeshSiteV2Kvm[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly loadBalancings!: pulumi.Output<outputs.SecuremeshSiteV2LoadBalancing[] | undefined>;
    public readonly localVrves!: pulumi.Output<outputs.SecuremeshSiteV2LocalVrf[] | undefined>;
    public readonly logReceivers!: pulumi.Output<outputs.SecuremeshSiteV2LogReceiver[] | undefined>;
    public readonly logsStreamingDisabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noForwardProxy!: pulumi.Output<boolean | undefined>;
    public readonly noNetworkPolicy!: pulumi.Output<boolean | undefined>;
    public readonly noS2sConnectivitySli!: pulumi.Output<boolean | undefined>;
    public readonly noS2sConnectivitySlo!: pulumi.Output<boolean | undefined>;
    public readonly ocis!: pulumi.Output<outputs.SecuremeshSiteV2Oci[] | undefined>;
    public readonly offlineSurvivabilityModes!: pulumi.Output<outputs.SecuremeshSiteV2OfflineSurvivabilityMode[] | undefined>;
    public readonly performanceEnhancementModes!: pulumi.Output<outputs.SecuremeshSiteV2PerformanceEnhancementMode[] | undefined>;
    public readonly reSelects!: pulumi.Output<outputs.SecuremeshSiteV2ReSelect[] | undefined>;
    public readonly rseries!: pulumi.Output<outputs.SecuremeshSiteV2Rseries[] | undefined>;
    public readonly siteMeshGroupOnSlos!: pulumi.Output<outputs.SecuremeshSiteV2SiteMeshGroupOnSlo[] | undefined>;
    public readonly softwareSettings!: pulumi.Output<outputs.SecuremeshSiteV2SoftwareSetting[] | undefined>;
    public readonly tunnelDeadTimeout!: pulumi.Output<number | undefined>;
    public readonly tunnelType!: pulumi.Output<string | undefined>;
    public readonly upgradeSettings!: pulumi.Output<outputs.SecuremeshSiteV2UpgradeSetting[] | undefined>;
    public readonly vmwares!: pulumi.Output<outputs.SecuremeshSiteV2Vmware[] | undefined>;

    /**
     * Create a SecuremeshSiteV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecuremeshSiteV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecuremeshSiteV2Args | SecuremeshSiteV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecuremeshSiteV2State | undefined;
            resourceInputs["activeEnhancedFirewallPolicies"] = state ? state.activeEnhancedFirewallPolicies : undefined;
            resourceInputs["activeForwardProxyPolicies"] = state ? state.activeForwardProxyPolicies : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["azures"] = state ? state.azures : undefined;
            resourceInputs["baremetals"] = state ? state.baremetals : undefined;
            resourceInputs["blockAllServices"] = state ? state.blockAllServices : undefined;
            resourceInputs["blockedServices"] = state ? state.blockedServices : undefined;
            resourceInputs["dcClusterGroupSlis"] = state ? state.dcClusterGroupSlis : undefined;
            resourceInputs["dcClusterGroupSlos"] = state ? state.dcClusterGroupSlos : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["disableHa"] = state ? state.disableHa : undefined;
            resourceInputs["enableHa"] = state ? state.enableHa : undefined;
            resourceInputs["gcps"] = state ? state.gcps : undefined;
            resourceInputs["kvms"] = state ? state.kvms : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loadBalancings"] = state ? state.loadBalancings : undefined;
            resourceInputs["localVrves"] = state ? state.localVrves : undefined;
            resourceInputs["logReceivers"] = state ? state.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = state ? state.logsStreamingDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noForwardProxy"] = state ? state.noForwardProxy : undefined;
            resourceInputs["noNetworkPolicy"] = state ? state.noNetworkPolicy : undefined;
            resourceInputs["noS2sConnectivitySli"] = state ? state.noS2sConnectivitySli : undefined;
            resourceInputs["noS2sConnectivitySlo"] = state ? state.noS2sConnectivitySlo : undefined;
            resourceInputs["ocis"] = state ? state.ocis : undefined;
            resourceInputs["offlineSurvivabilityModes"] = state ? state.offlineSurvivabilityModes : undefined;
            resourceInputs["performanceEnhancementModes"] = state ? state.performanceEnhancementModes : undefined;
            resourceInputs["reSelects"] = state ? state.reSelects : undefined;
            resourceInputs["rseries"] = state ? state.rseries : undefined;
            resourceInputs["siteMeshGroupOnSlos"] = state ? state.siteMeshGroupOnSlos : undefined;
            resourceInputs["softwareSettings"] = state ? state.softwareSettings : undefined;
            resourceInputs["tunnelDeadTimeout"] = state ? state.tunnelDeadTimeout : undefined;
            resourceInputs["tunnelType"] = state ? state.tunnelType : undefined;
            resourceInputs["upgradeSettings"] = state ? state.upgradeSettings : undefined;
            resourceInputs["vmwares"] = state ? state.vmwares : undefined;
        } else {
            const args = argsOrState as SecuremeshSiteV2Args | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["activeEnhancedFirewallPolicies"] = args ? args.activeEnhancedFirewallPolicies : undefined;
            resourceInputs["activeForwardProxyPolicies"] = args ? args.activeForwardProxyPolicies : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["aws"] = args ? args.aws : undefined;
            resourceInputs["azures"] = args ? args.azures : undefined;
            resourceInputs["baremetals"] = args ? args.baremetals : undefined;
            resourceInputs["blockAllServices"] = args ? args.blockAllServices : undefined;
            resourceInputs["blockedServices"] = args ? args.blockedServices : undefined;
            resourceInputs["dcClusterGroupSlis"] = args ? args.dcClusterGroupSlis : undefined;
            resourceInputs["dcClusterGroupSlos"] = args ? args.dcClusterGroupSlos : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["disableHa"] = args ? args.disableHa : undefined;
            resourceInputs["enableHa"] = args ? args.enableHa : undefined;
            resourceInputs["gcps"] = args ? args.gcps : undefined;
            resourceInputs["kvms"] = args ? args.kvms : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadBalancings"] = args ? args.loadBalancings : undefined;
            resourceInputs["localVrves"] = args ? args.localVrves : undefined;
            resourceInputs["logReceivers"] = args ? args.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = args ? args.logsStreamingDisabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noForwardProxy"] = args ? args.noForwardProxy : undefined;
            resourceInputs["noNetworkPolicy"] = args ? args.noNetworkPolicy : undefined;
            resourceInputs["noS2sConnectivitySli"] = args ? args.noS2sConnectivitySli : undefined;
            resourceInputs["noS2sConnectivitySlo"] = args ? args.noS2sConnectivitySlo : undefined;
            resourceInputs["ocis"] = args ? args.ocis : undefined;
            resourceInputs["offlineSurvivabilityModes"] = args ? args.offlineSurvivabilityModes : undefined;
            resourceInputs["performanceEnhancementModes"] = args ? args.performanceEnhancementModes : undefined;
            resourceInputs["reSelects"] = args ? args.reSelects : undefined;
            resourceInputs["rseries"] = args ? args.rseries : undefined;
            resourceInputs["siteMeshGroupOnSlos"] = args ? args.siteMeshGroupOnSlos : undefined;
            resourceInputs["softwareSettings"] = args ? args.softwareSettings : undefined;
            resourceInputs["tunnelDeadTimeout"] = args ? args.tunnelDeadTimeout : undefined;
            resourceInputs["tunnelType"] = args ? args.tunnelType : undefined;
            resourceInputs["upgradeSettings"] = args ? args.upgradeSettings : undefined;
            resourceInputs["vmwares"] = args ? args.vmwares : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecuremeshSiteV2.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecuremeshSiteV2 resources.
 */
export interface SecuremeshSiteV2State {
    activeEnhancedFirewallPolicies?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2ActiveEnhancedFirewallPolicy>[]>;
    activeForwardProxyPolicies?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2ActiveForwardProxyPolicy>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    aws?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Aw>[]>;
    azures?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Azure>[]>;
    baremetals?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Baremetal>[]>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2BlockedService>[]>;
    dcClusterGroupSlis?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2DcClusterGroupSli>[]>;
    dcClusterGroupSlos?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2DcClusterGroupSlo>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    disableHa?: pulumi.Input<boolean>;
    enableHa?: pulumi.Input<boolean>;
    gcps?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Gcp>[]>;
    kvms?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Kvm>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadBalancings?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2LoadBalancing>[]>;
    localVrves?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2LocalVrf>[]>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2LogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noForwardProxy?: pulumi.Input<boolean>;
    noNetworkPolicy?: pulumi.Input<boolean>;
    noS2sConnectivitySli?: pulumi.Input<boolean>;
    noS2sConnectivitySlo?: pulumi.Input<boolean>;
    ocis?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Oci>[]>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2OfflineSurvivabilityMode>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2PerformanceEnhancementMode>[]>;
    reSelects?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2ReSelect>[]>;
    rseries?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Rseries>[]>;
    siteMeshGroupOnSlos?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2SiteMeshGroupOnSlo>[]>;
    softwareSettings?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2SoftwareSetting>[]>;
    tunnelDeadTimeout?: pulumi.Input<number>;
    tunnelType?: pulumi.Input<string>;
    upgradeSettings?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2UpgradeSetting>[]>;
    vmwares?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Vmware>[]>;
}

/**
 * The set of arguments for constructing a SecuremeshSiteV2 resource.
 */
export interface SecuremeshSiteV2Args {
    activeEnhancedFirewallPolicies?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2ActiveEnhancedFirewallPolicy>[]>;
    activeForwardProxyPolicies?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2ActiveForwardProxyPolicy>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    aws?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Aw>[]>;
    azures?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Azure>[]>;
    baremetals?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Baremetal>[]>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2BlockedService>[]>;
    dcClusterGroupSlis?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2DcClusterGroupSli>[]>;
    dcClusterGroupSlos?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2DcClusterGroupSlo>[]>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    disableHa?: pulumi.Input<boolean>;
    enableHa?: pulumi.Input<boolean>;
    gcps?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Gcp>[]>;
    kvms?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Kvm>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadBalancings?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2LoadBalancing>[]>;
    localVrves?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2LocalVrf>[]>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2LogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noForwardProxy?: pulumi.Input<boolean>;
    noNetworkPolicy?: pulumi.Input<boolean>;
    noS2sConnectivitySli?: pulumi.Input<boolean>;
    noS2sConnectivitySlo?: pulumi.Input<boolean>;
    ocis?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Oci>[]>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2OfflineSurvivabilityMode>[]>;
    performanceEnhancementModes?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2PerformanceEnhancementMode>[]>;
    reSelects?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2ReSelect>[]>;
    rseries?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Rseries>[]>;
    siteMeshGroupOnSlos?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2SiteMeshGroupOnSlo>[]>;
    softwareSettings?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2SoftwareSetting>[]>;
    tunnelDeadTimeout?: pulumi.Input<number>;
    tunnelType?: pulumi.Input<string>;
    upgradeSettings?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2UpgradeSetting>[]>;
    vmwares?: pulumi.Input<pulumi.Input<inputs.SecuremeshSiteV2Vmware>[]>;
}
