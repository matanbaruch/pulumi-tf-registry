// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GcpVpcSite extends pulumi.CustomResource {
    /**
     * Get an existing GcpVpcSite resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GcpVpcSiteState, opts?: pulumi.CustomResourceOptions): GcpVpcSite {
        return new GcpVpcSite(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/gcpVpcSite:GcpVpcSite';

    /**
     * Returns true if the given object is an instance of GcpVpcSite.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GcpVpcSite {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GcpVpcSite.__pulumiType;
    }

    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly adminPasswords!: pulumi.Output<outputs.GcpVpcSiteAdminPassword[] | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly blockAllServices!: pulumi.Output<boolean | undefined>;
    public readonly blockedServices!: pulumi.Output<outputs.GcpVpcSiteBlockedService[] | undefined>;
    public readonly cloudCredentials!: pulumi.Output<outputs.GcpVpcSiteCloudCredential[] | undefined>;
    public readonly coordinates!: pulumi.Output<outputs.GcpVpcSiteCoordinate[] | undefined>;
    public readonly customDns!: pulumi.Output<outputs.GcpVpcSiteCustomDn[] | undefined>;
    public readonly defaultBlockedServices!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly diskSize!: pulumi.Output<number | undefined>;
    public readonly gcpLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly gcpRegion!: pulumi.Output<string>;
    public readonly ingressEgressGws!: pulumi.Output<outputs.GcpVpcSiteIngressEgressGw[] | undefined>;
    public readonly ingressGws!: pulumi.Output<outputs.GcpVpcSiteIngressGw[] | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly kubernetesUpgradeDrains!: pulumi.Output<outputs.GcpVpcSiteKubernetesUpgradeDrain[] | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly logReceivers!: pulumi.Output<outputs.GcpVpcSiteLogReceiver[] | undefined>;
    public readonly logsStreamingDisabled!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly nodesPerAz!: pulumi.Output<number | undefined>;
    public readonly offlineSurvivabilityModes!: pulumi.Output<outputs.GcpVpcSiteOfflineSurvivabilityMode[] | undefined>;
    public readonly os!: pulumi.Output<outputs.GcpVpcSiteO[] | undefined>;
    public readonly privateConnectDisabled!: pulumi.Output<boolean | undefined>;
    public readonly privateConnectivities!: pulumi.Output<outputs.GcpVpcSitePrivateConnectivity[] | undefined>;
    public readonly sshKey!: pulumi.Output<string>;
    public readonly sws!: pulumi.Output<outputs.GcpVpcSiteSw[] | undefined>;
    public readonly voltstackClusters!: pulumi.Output<outputs.GcpVpcSiteVoltstackCluster[] | undefined>;

    /**
     * Create a GcpVpcSite resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GcpVpcSiteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GcpVpcSiteArgs | GcpVpcSiteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GcpVpcSiteState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["adminPasswords"] = state ? state.adminPasswords : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["blockAllServices"] = state ? state.blockAllServices : undefined;
            resourceInputs["blockedServices"] = state ? state.blockedServices : undefined;
            resourceInputs["cloudCredentials"] = state ? state.cloudCredentials : undefined;
            resourceInputs["coordinates"] = state ? state.coordinates : undefined;
            resourceInputs["customDns"] = state ? state.customDns : undefined;
            resourceInputs["defaultBlockedServices"] = state ? state.defaultBlockedServices : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["gcpLabels"] = state ? state.gcpLabels : undefined;
            resourceInputs["gcpRegion"] = state ? state.gcpRegion : undefined;
            resourceInputs["ingressEgressGws"] = state ? state.ingressEgressGws : undefined;
            resourceInputs["ingressGws"] = state ? state.ingressGws : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = state ? state.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logReceivers"] = state ? state.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = state ? state.logsStreamingDisabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["nodesPerAz"] = state ? state.nodesPerAz : undefined;
            resourceInputs["offlineSurvivabilityModes"] = state ? state.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["privateConnectDisabled"] = state ? state.privateConnectDisabled : undefined;
            resourceInputs["privateConnectivities"] = state ? state.privateConnectivities : undefined;
            resourceInputs["sshKey"] = state ? state.sshKey : undefined;
            resourceInputs["sws"] = state ? state.sws : undefined;
            resourceInputs["voltstackClusters"] = state ? state.voltstackClusters : undefined;
        } else {
            const args = argsOrState as GcpVpcSiteArgs | undefined;
            if ((!args || args.gcpRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gcpRegion'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.sshKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sshKey'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["adminPasswords"] = args ? args.adminPasswords : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["blockAllServices"] = args ? args.blockAllServices : undefined;
            resourceInputs["blockedServices"] = args ? args.blockedServices : undefined;
            resourceInputs["cloudCredentials"] = args ? args.cloudCredentials : undefined;
            resourceInputs["coordinates"] = args ? args.coordinates : undefined;
            resourceInputs["customDns"] = args ? args.customDns : undefined;
            resourceInputs["defaultBlockedServices"] = args ? args.defaultBlockedServices : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["gcpLabels"] = args ? args.gcpLabels : undefined;
            resourceInputs["gcpRegion"] = args ? args.gcpRegion : undefined;
            resourceInputs["ingressEgressGws"] = args ? args.ingressEgressGws : undefined;
            resourceInputs["ingressGws"] = args ? args.ingressGws : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["kubernetesUpgradeDrains"] = args ? args.kubernetesUpgradeDrains : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["logReceivers"] = args ? args.logReceivers : undefined;
            resourceInputs["logsStreamingDisabled"] = args ? args.logsStreamingDisabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["nodesPerAz"] = args ? args.nodesPerAz : undefined;
            resourceInputs["offlineSurvivabilityModes"] = args ? args.offlineSurvivabilityModes : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["privateConnectDisabled"] = args ? args.privateConnectDisabled : undefined;
            resourceInputs["privateConnectivities"] = args ? args.privateConnectivities : undefined;
            resourceInputs["sshKey"] = args ? args.sshKey : undefined;
            resourceInputs["sws"] = args ? args.sws : undefined;
            resourceInputs["voltstackClusters"] = args ? args.voltstackClusters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GcpVpcSite.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GcpVpcSite resources.
 */
export interface GcpVpcSiteState {
    address?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    adminPasswords?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteAdminPassword>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteBlockedService>[]>;
    cloudCredentials?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteCloudCredential>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteCustomDn>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    diskSize?: pulumi.Input<number>;
    gcpLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gcpRegion?: pulumi.Input<string>;
    ingressEgressGws?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteIngressEgressGw>[]>;
    ingressGws?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteIngressGw>[]>;
    instanceType?: pulumi.Input<string>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nodesPerAz?: pulumi.Input<number>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteO>[]>;
    privateConnectDisabled?: pulumi.Input<boolean>;
    privateConnectivities?: pulumi.Input<pulumi.Input<inputs.GcpVpcSitePrivateConnectivity>[]>;
    sshKey?: pulumi.Input<string>;
    sws?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteSw>[]>;
    voltstackClusters?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteVoltstackCluster>[]>;
}

/**
 * The set of arguments for constructing a GcpVpcSite resource.
 */
export interface GcpVpcSiteArgs {
    address?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    adminPasswords?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteAdminPassword>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    blockAllServices?: pulumi.Input<boolean>;
    blockedServices?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteBlockedService>[]>;
    cloudCredentials?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteCloudCredential>[]>;
    coordinates?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteCoordinate>[]>;
    customDns?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteCustomDn>[]>;
    defaultBlockedServices?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    diskSize?: pulumi.Input<number>;
    gcpLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gcpRegion: pulumi.Input<string>;
    ingressEgressGws?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteIngressEgressGw>[]>;
    ingressGws?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteIngressGw>[]>;
    instanceType: pulumi.Input<string>;
    kubernetesUpgradeDrains?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteKubernetesUpgradeDrain>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    logReceivers?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteLogReceiver>[]>;
    logsStreamingDisabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    nodesPerAz?: pulumi.Input<number>;
    offlineSurvivabilityModes?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteOfflineSurvivabilityMode>[]>;
    os?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteO>[]>;
    privateConnectDisabled?: pulumi.Input<boolean>;
    privateConnectivities?: pulumi.Input<pulumi.Input<inputs.GcpVpcSitePrivateConnectivity>[]>;
    sshKey: pulumi.Input<string>;
    sws?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteSw>[]>;
    voltstackClusters?: pulumi.Input<pulumi.Input<inputs.GcpVpcSiteVoltstackCluster>[]>;
}
