// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TcpLoadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing TcpLoadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TcpLoadbalancerState, opts?: pulumi.CustomResourceOptions): TcpLoadbalancer {
        return new TcpLoadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volterra:index/tcpLoadbalancer:TcpLoadbalancer';

    /**
     * Returns true if the given object is an instance of TcpLoadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TcpLoadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TcpLoadbalancer.__pulumiType;
    }

    public readonly activeServicePolicies!: pulumi.Output<outputs.TcpLoadbalancerActiveServicePolicy[] | undefined>;
    public readonly advertiseCustoms!: pulumi.Output<outputs.TcpLoadbalancerAdvertiseCustom[] | undefined>;
    public readonly advertiseOnPublicDefaultVip!: pulumi.Output<boolean | undefined>;
    public readonly advertiseOnPublics!: pulumi.Output<outputs.TcpLoadbalancerAdvertiseOnPublic[] | undefined>;
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly cname!: pulumi.Output<string>;
    public readonly defaultLbWithSni!: pulumi.Output<boolean | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disable!: pulumi.Output<boolean | undefined>;
    public readonly dnsVolterraManaged!: pulumi.Output<boolean | undefined>;
    public readonly doNotAdvertise!: pulumi.Output<boolean | undefined>;
    public readonly doNotRetractCluster!: pulumi.Output<boolean | undefined>;
    public readonly domains!: pulumi.Output<string[] | undefined>;
    public readonly hashPolicyChoiceLeastActive!: pulumi.Output<boolean | undefined>;
    public readonly hashPolicyChoiceRandom!: pulumi.Output<boolean | undefined>;
    public readonly hashPolicyChoiceRoundRobin!: pulumi.Output<boolean | undefined>;
    public readonly hashPolicyChoiceSourceIpStickiness!: pulumi.Output<boolean | undefined>;
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly listenPort!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string>;
    public readonly noServicePolicies!: pulumi.Output<boolean | undefined>;
    public readonly noSni!: pulumi.Output<boolean | undefined>;
    public readonly originPoolsWeights!: pulumi.Output<outputs.TcpLoadbalancerOriginPoolsWeight[] | undefined>;
    public readonly portRanges!: pulumi.Output<string | undefined>;
    public readonly retractCluster!: pulumi.Output<boolean | undefined>;
    public readonly servicePoliciesFromNamespace!: pulumi.Output<boolean | undefined>;
    public readonly sni!: pulumi.Output<boolean | undefined>;
    public readonly tcp!: pulumi.Output<boolean | undefined>;
    public readonly tlsTcpAutoCerts!: pulumi.Output<outputs.TcpLoadbalancerTlsTcpAutoCert[] | undefined>;
    public readonly tlsTcps!: pulumi.Output<outputs.TcpLoadbalancerTlsTcp[] | undefined>;

    /**
     * Create a TcpLoadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TcpLoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TcpLoadbalancerArgs | TcpLoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TcpLoadbalancerState | undefined;
            resourceInputs["activeServicePolicies"] = state ? state.activeServicePolicies : undefined;
            resourceInputs["advertiseCustoms"] = state ? state.advertiseCustoms : undefined;
            resourceInputs["advertiseOnPublicDefaultVip"] = state ? state.advertiseOnPublicDefaultVip : undefined;
            resourceInputs["advertiseOnPublics"] = state ? state.advertiseOnPublics : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["defaultLbWithSni"] = state ? state.defaultLbWithSni : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disable"] = state ? state.disable : undefined;
            resourceInputs["dnsVolterraManaged"] = state ? state.dnsVolterraManaged : undefined;
            resourceInputs["doNotAdvertise"] = state ? state.doNotAdvertise : undefined;
            resourceInputs["doNotRetractCluster"] = state ? state.doNotRetractCluster : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["hashPolicyChoiceLeastActive"] = state ? state.hashPolicyChoiceLeastActive : undefined;
            resourceInputs["hashPolicyChoiceRandom"] = state ? state.hashPolicyChoiceRandom : undefined;
            resourceInputs["hashPolicyChoiceRoundRobin"] = state ? state.hashPolicyChoiceRoundRobin : undefined;
            resourceInputs["hashPolicyChoiceSourceIpStickiness"] = state ? state.hashPolicyChoiceSourceIpStickiness : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["listenPort"] = state ? state.listenPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["noServicePolicies"] = state ? state.noServicePolicies : undefined;
            resourceInputs["noSni"] = state ? state.noSni : undefined;
            resourceInputs["originPoolsWeights"] = state ? state.originPoolsWeights : undefined;
            resourceInputs["portRanges"] = state ? state.portRanges : undefined;
            resourceInputs["retractCluster"] = state ? state.retractCluster : undefined;
            resourceInputs["servicePoliciesFromNamespace"] = state ? state.servicePoliciesFromNamespace : undefined;
            resourceInputs["sni"] = state ? state.sni : undefined;
            resourceInputs["tcp"] = state ? state.tcp : undefined;
            resourceInputs["tlsTcpAutoCerts"] = state ? state.tlsTcpAutoCerts : undefined;
            resourceInputs["tlsTcps"] = state ? state.tlsTcps : undefined;
        } else {
            const args = argsOrState as TcpLoadbalancerArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            resourceInputs["activeServicePolicies"] = args ? args.activeServicePolicies : undefined;
            resourceInputs["advertiseCustoms"] = args ? args.advertiseCustoms : undefined;
            resourceInputs["advertiseOnPublicDefaultVip"] = args ? args.advertiseOnPublicDefaultVip : undefined;
            resourceInputs["advertiseOnPublics"] = args ? args.advertiseOnPublics : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["defaultLbWithSni"] = args ? args.defaultLbWithSni : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disable"] = args ? args.disable : undefined;
            resourceInputs["dnsVolterraManaged"] = args ? args.dnsVolterraManaged : undefined;
            resourceInputs["doNotAdvertise"] = args ? args.doNotAdvertise : undefined;
            resourceInputs["doNotRetractCluster"] = args ? args.doNotRetractCluster : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["hashPolicyChoiceLeastActive"] = args ? args.hashPolicyChoiceLeastActive : undefined;
            resourceInputs["hashPolicyChoiceRandom"] = args ? args.hashPolicyChoiceRandom : undefined;
            resourceInputs["hashPolicyChoiceRoundRobin"] = args ? args.hashPolicyChoiceRoundRobin : undefined;
            resourceInputs["hashPolicyChoiceSourceIpStickiness"] = args ? args.hashPolicyChoiceSourceIpStickiness : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["listenPort"] = args ? args.listenPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["noServicePolicies"] = args ? args.noServicePolicies : undefined;
            resourceInputs["noSni"] = args ? args.noSni : undefined;
            resourceInputs["originPoolsWeights"] = args ? args.originPoolsWeights : undefined;
            resourceInputs["portRanges"] = args ? args.portRanges : undefined;
            resourceInputs["retractCluster"] = args ? args.retractCluster : undefined;
            resourceInputs["servicePoliciesFromNamespace"] = args ? args.servicePoliciesFromNamespace : undefined;
            resourceInputs["sni"] = args ? args.sni : undefined;
            resourceInputs["tcp"] = args ? args.tcp : undefined;
            resourceInputs["tlsTcpAutoCerts"] = args ? args.tlsTcpAutoCerts : undefined;
            resourceInputs["tlsTcps"] = args ? args.tlsTcps : undefined;
            resourceInputs["cname"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TcpLoadbalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TcpLoadbalancer resources.
 */
export interface TcpLoadbalancerState {
    activeServicePolicies?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerActiveServicePolicy>[]>;
    advertiseCustoms?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerAdvertiseCustom>[]>;
    advertiseOnPublicDefaultVip?: pulumi.Input<boolean>;
    advertiseOnPublics?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerAdvertiseOnPublic>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    cname?: pulumi.Input<string>;
    defaultLbWithSni?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    dnsVolterraManaged?: pulumi.Input<boolean>;
    doNotAdvertise?: pulumi.Input<boolean>;
    doNotRetractCluster?: pulumi.Input<boolean>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    hashPolicyChoiceLeastActive?: pulumi.Input<boolean>;
    hashPolicyChoiceRandom?: pulumi.Input<boolean>;
    hashPolicyChoiceRoundRobin?: pulumi.Input<boolean>;
    hashPolicyChoiceSourceIpStickiness?: pulumi.Input<boolean>;
    idleTimeout?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    listenPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    noServicePolicies?: pulumi.Input<boolean>;
    noSni?: pulumi.Input<boolean>;
    originPoolsWeights?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerOriginPoolsWeight>[]>;
    portRanges?: pulumi.Input<string>;
    retractCluster?: pulumi.Input<boolean>;
    servicePoliciesFromNamespace?: pulumi.Input<boolean>;
    sni?: pulumi.Input<boolean>;
    tcp?: pulumi.Input<boolean>;
    tlsTcpAutoCerts?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerTlsTcpAutoCert>[]>;
    tlsTcps?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerTlsTcp>[]>;
}

/**
 * The set of arguments for constructing a TcpLoadbalancer resource.
 */
export interface TcpLoadbalancerArgs {
    activeServicePolicies?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerActiveServicePolicy>[]>;
    advertiseCustoms?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerAdvertiseCustom>[]>;
    advertiseOnPublicDefaultVip?: pulumi.Input<boolean>;
    advertiseOnPublics?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerAdvertiseOnPublic>[]>;
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    defaultLbWithSni?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    disable?: pulumi.Input<boolean>;
    dnsVolterraManaged?: pulumi.Input<boolean>;
    doNotAdvertise?: pulumi.Input<boolean>;
    doNotRetractCluster?: pulumi.Input<boolean>;
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    hashPolicyChoiceLeastActive?: pulumi.Input<boolean>;
    hashPolicyChoiceRandom?: pulumi.Input<boolean>;
    hashPolicyChoiceRoundRobin?: pulumi.Input<boolean>;
    hashPolicyChoiceSourceIpStickiness?: pulumi.Input<boolean>;
    idleTimeout?: pulumi.Input<number>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    listenPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    namespace: pulumi.Input<string>;
    noServicePolicies?: pulumi.Input<boolean>;
    noSni?: pulumi.Input<boolean>;
    originPoolsWeights?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerOriginPoolsWeight>[]>;
    portRanges?: pulumi.Input<string>;
    retractCluster?: pulumi.Input<boolean>;
    servicePoliciesFromNamespace?: pulumi.Input<boolean>;
    sni?: pulumi.Input<boolean>;
    tcp?: pulumi.Input<boolean>;
    tlsTcpAutoCerts?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerTlsTcpAutoCert>[]>;
    tlsTcps?: pulumi.Input<pulumi.Input<inputs.TcpLoadbalancerTlsTcp>[]>;
}
