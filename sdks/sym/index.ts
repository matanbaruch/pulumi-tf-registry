// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { ErrorLoggerArgs, ErrorLoggerState } from "./errorLogger";
export type ErrorLogger = import("./errorLogger").ErrorLogger;
export const ErrorLogger: typeof import("./errorLogger").ErrorLogger = null as any;
utilities.lazyLoad(exports, ["ErrorLogger"], () => require("./errorLogger"));

export { FlowArgs, FlowState } from "./flow";
export type Flow = import("./flow").Flow;
export const Flow: typeof import("./flow").Flow = null as any;
utilities.lazyLoad(exports, ["Flow"], () => require("./flow"));

export { FlowsFilterArgs, FlowsFilterState } from "./flowsFilter";
export type FlowsFilter = import("./flowsFilter").FlowsFilter;
export const FlowsFilter: typeof import("./flowsFilter").FlowsFilter = null as any;
utilities.lazyLoad(exports, ["FlowsFilter"], () => require("./flowsFilter"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));

export { GetRuntimeArgs, GetRuntimeResult, GetRuntimeOutputArgs } from "./getRuntime";
export const getRuntime: typeof import("./getRuntime").getRuntime = null as any;
export const getRuntimeOutput: typeof import("./getRuntime").getRuntimeOutput = null as any;
utilities.lazyLoad(exports, ["getRuntime","getRuntimeOutput"], () => require("./getRuntime"));

export { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { LogDestinationArgs, LogDestinationState } from "./logDestination";
export type LogDestination = import("./logDestination").LogDestination;
export const LogDestination: typeof import("./logDestination").LogDestination = null as any;
utilities.lazyLoad(exports, ["LogDestination"], () => require("./logDestination"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RuntimeArgs, RuntimeState } from "./runtime";
export type Runtime = import("./runtime").Runtime;
export const Runtime: typeof import("./runtime").Runtime = null as any;
utilities.lazyLoad(exports, ["Runtime"], () => require("./runtime"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretsArgs, SecretsState } from "./secrets";
export type Secrets = import("./secrets").Secrets;
export const Secrets: typeof import("./secrets").Secrets = null as any;
utilities.lazyLoad(exports, ["Secrets"], () => require("./secrets"));

export { StrategyArgs, StrategyState } from "./strategy";
export type Strategy = import("./strategy").Strategy;
export const Strategy: typeof import("./strategy").Strategy = null as any;
utilities.lazyLoad(exports, ["Strategy"], () => require("./strategy"));

export { TargetArgs, TargetState } from "./target";
export type Target = import("./target").Target;
export const Target: typeof import("./target").Target = null as any;
utilities.lazyLoad(exports, ["Target"], () => require("./target"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sym:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "sym:index/errorLogger:ErrorLogger":
                return new ErrorLogger(name, <any>undefined, { urn })
            case "sym:index/flow:Flow":
                return new Flow(name, <any>undefined, { urn })
            case "sym:index/flowsFilter:FlowsFilter":
                return new FlowsFilter(name, <any>undefined, { urn })
            case "sym:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "sym:index/logDestination:LogDestination":
                return new LogDestination(name, <any>undefined, { urn })
            case "sym:index/runtime:Runtime":
                return new Runtime(name, <any>undefined, { urn })
            case "sym:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "sym:index/secrets:Secrets":
                return new Secrets(name, <any>undefined, { urn })
            case "sym:index/strategy:Strategy":
                return new Strategy(name, <any>undefined, { urn })
            case "sym:index/target:Target":
                return new Target(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sym", "index/environment", _module)
pulumi.runtime.registerResourceModule("sym", "index/errorLogger", _module)
pulumi.runtime.registerResourceModule("sym", "index/flow", _module)
pulumi.runtime.registerResourceModule("sym", "index/flowsFilter", _module)
pulumi.runtime.registerResourceModule("sym", "index/integration", _module)
pulumi.runtime.registerResourceModule("sym", "index/logDestination", _module)
pulumi.runtime.registerResourceModule("sym", "index/runtime", _module)
pulumi.runtime.registerResourceModule("sym", "index/secret", _module)
pulumi.runtime.registerResourceModule("sym", "index/secrets", _module)
pulumi.runtime.registerResourceModule("sym", "index/strategy", _module)
pulumi.runtime.registerResourceModule("sym", "index/target", _module)
pulumi.runtime.registerResourcePackage("sym", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sym") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
