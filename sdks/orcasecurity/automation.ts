// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Automation extends pulumi.CustomResource {
    /**
     * Get an existing Automation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AutomationState, opts?: pulumi.CustomResourceOptions): Automation {
        return new Automation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'orcasecurity:index/automation:Automation';

    /**
     * Returns true if the given object is an instance of Automation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Automation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Automation.__pulumiType;
    }

    /**
     * Automation description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Create a Jira ticket using template.
     */
    public readonly jiraIssue!: pulumi.Output<outputs.AutomationJiraIssue | undefined>;
    /**
     * Automation name.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The query to fetch the alerts.
     */
    public readonly query!: pulumi.Output<outputs.AutomationQuery>;
    /**
     * SumoLogic integration
     */
    public readonly sumologic!: pulumi.Output<outputs.AutomationSumologic | undefined>;
    /**
     * Notify via Web hook.
     */
    public readonly webhook!: pulumi.Output<outputs.AutomationWebhook | undefined>;

    /**
     * Create a Automation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AutomationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AutomationArgs | AutomationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AutomationState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["jiraIssue"] = state ? state.jiraIssue : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["query"] = state ? state.query : undefined;
            resourceInputs["sumologic"] = state ? state.sumologic : undefined;
            resourceInputs["webhook"] = state ? state.webhook : undefined;
        } else {
            const args = argsOrState as AutomationArgs | undefined;
            if ((!args || args.query === undefined) && !opts.urn) {
                throw new Error("Missing required property 'query'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["jiraIssue"] = args ? args.jiraIssue : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["query"] = args ? args.query : undefined;
            resourceInputs["sumologic"] = args ? args.sumologic : undefined;
            resourceInputs["webhook"] = args ? args.webhook : undefined;
            resourceInputs["organizationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Automation.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Automation resources.
 */
export interface AutomationState {
    /**
     * Automation description.
     */
    description?: pulumi.Input<string>;
    /**
     * Create a Jira ticket using template.
     */
    jiraIssue?: pulumi.Input<inputs.AutomationJiraIssue>;
    /**
     * Automation name.
     */
    name?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    /**
     * The query to fetch the alerts.
     */
    query?: pulumi.Input<inputs.AutomationQuery>;
    /**
     * SumoLogic integration
     */
    sumologic?: pulumi.Input<inputs.AutomationSumologic>;
    /**
     * Notify via Web hook.
     */
    webhook?: pulumi.Input<inputs.AutomationWebhook>;
}

/**
 * The set of arguments for constructing a Automation resource.
 */
export interface AutomationArgs {
    /**
     * Automation description.
     */
    description?: pulumi.Input<string>;
    /**
     * Create a Jira ticket using template.
     */
    jiraIssue?: pulumi.Input<inputs.AutomationJiraIssue>;
    /**
     * Automation name.
     */
    name?: pulumi.Input<string>;
    /**
     * The query to fetch the alerts.
     */
    query: pulumi.Input<inputs.AutomationQuery>;
    /**
     * SumoLogic integration
     */
    sumologic?: pulumi.Input<inputs.AutomationSumologic>;
    /**
     * Notify via Web hook.
     */
    webhook?: pulumi.Input<inputs.AutomationWebhook>;
}
