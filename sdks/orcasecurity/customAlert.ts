// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CustomAlert extends pulumi.CustomResource {
    /**
     * Get an existing CustomAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomAlertState, opts?: pulumi.CustomResourceOptions): CustomAlert {
        return new CustomAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'orcasecurity:index/customAlert:CustomAlert';

    /**
     * Returns true if the given object is an instance of CustomAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomAlert.__pulumiType;
    }

    /**
     * Allow Orca to adjust the score using asset context.
     */
    public readonly allowAdjusting!: pulumi.Output<boolean>;
    /**
     * Category.
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * Attach compliance framework.
     */
    public readonly complianceFrameworks!: pulumi.Output<outputs.CustomAlertComplianceFramework[] | undefined>;
    /**
     * Automation description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Automation name.
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * Add custom manual remediation.
     */
    public readonly remediationText!: pulumi.Output<outputs.CustomAlertRemediationText | undefined>;
    /**
     * Rule query.
     */
    public readonly rule!: pulumi.Output<string>;
    /**
     * Alert type.
     */
    public /*out*/ readonly ruleType!: pulumi.Output<string>;
    /**
     * Alert score.
     */
    public readonly score!: pulumi.Output<number>;

    /**
     * Create a CustomAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomAlertArgs | CustomAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomAlertState | undefined;
            resourceInputs["allowAdjusting"] = state ? state.allowAdjusting : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["complianceFrameworks"] = state ? state.complianceFrameworks : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["remediationText"] = state ? state.remediationText : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["ruleType"] = state ? state.ruleType : undefined;
            resourceInputs["score"] = state ? state.score : undefined;
        } else {
            const args = argsOrState as CustomAlertArgs | undefined;
            if ((!args || args.allowAdjusting === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowAdjusting'");
            }
            if ((!args || args.category === undefined) && !opts.urn) {
                throw new Error("Missing required property 'category'");
            }
            if ((!args || args.rule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            if ((!args || args.score === undefined) && !opts.urn) {
                throw new Error("Missing required property 'score'");
            }
            resourceInputs["allowAdjusting"] = args ? args.allowAdjusting : undefined;
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["complianceFrameworks"] = args ? args.complianceFrameworks : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["remediationText"] = args ? args.remediationText : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["score"] = args ? args.score : undefined;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["ruleType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CustomAlert resources.
 */
export interface CustomAlertState {
    /**
     * Allow Orca to adjust the score using asset context.
     */
    allowAdjusting?: pulumi.Input<boolean>;
    /**
     * Category.
     */
    category?: pulumi.Input<string>;
    /**
     * Attach compliance framework.
     */
    complianceFrameworks?: pulumi.Input<pulumi.Input<inputs.CustomAlertComplianceFramework>[]>;
    /**
     * Automation description.
     */
    description?: pulumi.Input<string>;
    /**
     * Automation name.
     */
    name?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    /**
     * Add custom manual remediation.
     */
    remediationText?: pulumi.Input<inputs.CustomAlertRemediationText>;
    /**
     * Rule query.
     */
    rule?: pulumi.Input<string>;
    /**
     * Alert type.
     */
    ruleType?: pulumi.Input<string>;
    /**
     * Alert score.
     */
    score?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CustomAlert resource.
 */
export interface CustomAlertArgs {
    /**
     * Allow Orca to adjust the score using asset context.
     */
    allowAdjusting: pulumi.Input<boolean>;
    /**
     * Category.
     */
    category: pulumi.Input<string>;
    /**
     * Attach compliance framework.
     */
    complianceFrameworks?: pulumi.Input<pulumi.Input<inputs.CustomAlertComplianceFramework>[]>;
    /**
     * Automation description.
     */
    description?: pulumi.Input<string>;
    /**
     * Automation name.
     */
    name?: pulumi.Input<string>;
    /**
     * Add custom manual remediation.
     */
    remediationText?: pulumi.Input<inputs.CustomAlertRemediationText>;
    /**
     * Rule query.
     */
    rule: pulumi.Input<string>;
    /**
     * Alert score.
     */
    score: pulumi.Input<number>;
}
