// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StatusPage extends pulumi.CustomResource {
    /**
     * Get an existing StatusPage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StatusPageState, opts?: pulumi.CustomResourceOptions): StatusPage {
        return new StatusPage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/statusPage:StatusPage';

    /**
     * Returns true if the given object is an instance of StatusPage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StatusPage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StatusPage.__pulumiType;
    }

    /**
     * The overall status of this status page.
     */
    public /*out*/ readonly aggregateState!: pulumi.Output<string>;
    /**
     * Add an announcement to your status page.
     */
    public readonly announcement!: pulumi.Output<string>;
    /**
     * Modify the design of the announcement embed.
     */
    public readonly announcementEmbedCss!: pulumi.Output<string>;
    /**
     * Point your embedded announcement to a specified URL.
     */
    public readonly announcementEmbedLink!: pulumi.Output<string>;
    /**
     * Toggle this field if you want to show an announcement in your embed. You can embed the announcement using this snippet:
     * `<script src="https://uptime.betterstack.com/widgets/announcement.js" data-id="<SET STATUS_PAGE_ID>" async="async"
     * type="text/javascript"></script>`
     */
    public readonly announcementEmbedVisible!: pulumi.Output<boolean>;
    /**
     * Generate automatic reports when your services go down
     */
    public readonly automaticReports!: pulumi.Output<boolean>;
    /**
     * Name of your company.
     */
    public readonly companyName!: pulumi.Output<string>;
    /**
     * URL of your company's website.
     */
    public readonly companyUrl!: pulumi.Output<string>;
    /**
     * URL that should be used for contacting you in case of an emergency.
     */
    public readonly contactUrl!: pulumi.Output<string>;
    /**
     * The time when this status page was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Unleash your inner designer and tweak our status page design to fit your branding.
     */
    public readonly customCss!: pulumi.Output<string>;
    /**
     * Do you want a custom domain on your status page? Add a CNAME record that points your domain to status.betteruptime.com.
     * Example: `CNAME status.walmine.com statuspage.betteruptime.com`
     */
    public readonly customDomain!: pulumi.Output<string>;
    /**
     * Add custom behavior to your status page. It is only allowed for status pages with a custom domain name.
     */
    public readonly customJavascript!: pulumi.Output<string>;
    /**
     * Choose between classic and modern status page design. Possible values: 'v1', 'v2'.
     */
    public readonly design!: pulumi.Output<string>;
    /**
     * Specify your own Google Analytics ID if you want to receive hits on your status page.
     */
    public readonly googleAnalyticsId!: pulumi.Output<string>;
    /**
     * Hide your status page from search engines.
     */
    public readonly hideFromSearchEngines!: pulumi.Output<boolean>;
    /**
     * Number of days to display on the status page. Between 7 and 365 days.
     */
    public readonly history!: pulumi.Output<number>;
    /**
     * Choose usual vertical layout or space-saving horizontal layout. Only applicable when design: v2. Possible values:
     * 'vertical', 'horizontal'.
     */
    public readonly layout!: pulumi.Output<string>;
    /**
     * A direct link to your company's logo. The image should be under 20MB in size.
     */
    public readonly logoUrl!: pulumi.Output<string>;
    /**
     * If you don't want to display short incidents on your status page, this attribute is for you.
     */
    public readonly minIncidentLength!: pulumi.Output<number>;
    /**
     * Set a password of your status page (we won't store it as plaintext, promise). Required when password_enabled: true. We
     * will set password_enabled: false automatically when you send us an empty password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Do you want to enable password protection on your status page?
     */
    public readonly passwordEnabled!: pulumi.Output<boolean>;
    /**
     * Set this attribute if you want to add this status page to a status page group.
     */
    public readonly statusPageGroupId!: pulumi.Output<number>;
    /**
     * What subdomain should we use for your status page? This needs to be unique across our entire application, so choose
     * carefully
     */
    public readonly subdomain!: pulumi.Output<string>;
    /**
     * Do you want to allow users to subscribe to your status page changes?
     */
    public readonly subscribable!: pulumi.Output<boolean>;
    /**
     * Choose theme of your status page. Only applicable when design: v2. Possible values: 'light', 'dark'.
     */
    public readonly theme!: pulumi.Output<string>;
    /**
     * What timezone should we display your status page in? The accepted values can be found in the Rails TimeZone
     * documentation. https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
     */
    public readonly timezone!: pulumi.Output<string>;
    /**
     * The time when this status page was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a StatusPage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StatusPageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StatusPageArgs | StatusPageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StatusPageState | undefined;
            resourceInputs["aggregateState"] = state ? state.aggregateState : undefined;
            resourceInputs["announcement"] = state ? state.announcement : undefined;
            resourceInputs["announcementEmbedCss"] = state ? state.announcementEmbedCss : undefined;
            resourceInputs["announcementEmbedLink"] = state ? state.announcementEmbedLink : undefined;
            resourceInputs["announcementEmbedVisible"] = state ? state.announcementEmbedVisible : undefined;
            resourceInputs["automaticReports"] = state ? state.automaticReports : undefined;
            resourceInputs["companyName"] = state ? state.companyName : undefined;
            resourceInputs["companyUrl"] = state ? state.companyUrl : undefined;
            resourceInputs["contactUrl"] = state ? state.contactUrl : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customCss"] = state ? state.customCss : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["customJavascript"] = state ? state.customJavascript : undefined;
            resourceInputs["design"] = state ? state.design : undefined;
            resourceInputs["googleAnalyticsId"] = state ? state.googleAnalyticsId : undefined;
            resourceInputs["hideFromSearchEngines"] = state ? state.hideFromSearchEngines : undefined;
            resourceInputs["history"] = state ? state.history : undefined;
            resourceInputs["layout"] = state ? state.layout : undefined;
            resourceInputs["logoUrl"] = state ? state.logoUrl : undefined;
            resourceInputs["minIncidentLength"] = state ? state.minIncidentLength : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordEnabled"] = state ? state.passwordEnabled : undefined;
            resourceInputs["statusPageGroupId"] = state ? state.statusPageGroupId : undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
            resourceInputs["subscribable"] = state ? state.subscribable : undefined;
            resourceInputs["theme"] = state ? state.theme : undefined;
            resourceInputs["timezone"] = state ? state.timezone : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as StatusPageArgs | undefined;
            if ((!args || args.companyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'companyName'");
            }
            if ((!args || args.companyUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'companyUrl'");
            }
            if ((!args || args.subdomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subdomain'");
            }
            if ((!args || args.timezone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timezone'");
            }
            resourceInputs["announcement"] = args ? args.announcement : undefined;
            resourceInputs["announcementEmbedCss"] = args ? args.announcementEmbedCss : undefined;
            resourceInputs["announcementEmbedLink"] = args ? args.announcementEmbedLink : undefined;
            resourceInputs["announcementEmbedVisible"] = args ? args.announcementEmbedVisible : undefined;
            resourceInputs["automaticReports"] = args ? args.automaticReports : undefined;
            resourceInputs["companyName"] = args ? args.companyName : undefined;
            resourceInputs["companyUrl"] = args ? args.companyUrl : undefined;
            resourceInputs["contactUrl"] = args ? args.contactUrl : undefined;
            resourceInputs["customCss"] = args ? args.customCss : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["customJavascript"] = args ? args.customJavascript : undefined;
            resourceInputs["design"] = args ? args.design : undefined;
            resourceInputs["googleAnalyticsId"] = args ? args.googleAnalyticsId : undefined;
            resourceInputs["hideFromSearchEngines"] = args ? args.hideFromSearchEngines : undefined;
            resourceInputs["history"] = args ? args.history : undefined;
            resourceInputs["layout"] = args ? args.layout : undefined;
            resourceInputs["logoUrl"] = args ? args.logoUrl : undefined;
            resourceInputs["minIncidentLength"] = args ? args.minIncidentLength : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordEnabled"] = args ? args.passwordEnabled : undefined;
            resourceInputs["statusPageGroupId"] = args ? args.statusPageGroupId : undefined;
            resourceInputs["subdomain"] = args ? args.subdomain : undefined;
            resourceInputs["subscribable"] = args ? args.subscribable : undefined;
            resourceInputs["theme"] = args ? args.theme : undefined;
            resourceInputs["timezone"] = args ? args.timezone : undefined;
            resourceInputs["aggregateState"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StatusPage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StatusPage resources.
 */
export interface StatusPageState {
    /**
     * The overall status of this status page.
     */
    aggregateState?: pulumi.Input<string>;
    /**
     * Add an announcement to your status page.
     */
    announcement?: pulumi.Input<string>;
    /**
     * Modify the design of the announcement embed.
     */
    announcementEmbedCss?: pulumi.Input<string>;
    /**
     * Point your embedded announcement to a specified URL.
     */
    announcementEmbedLink?: pulumi.Input<string>;
    /**
     * Toggle this field if you want to show an announcement in your embed. You can embed the announcement using this snippet:
     * `<script src="https://uptime.betterstack.com/widgets/announcement.js" data-id="<SET STATUS_PAGE_ID>" async="async"
     * type="text/javascript"></script>`
     */
    announcementEmbedVisible?: pulumi.Input<boolean>;
    /**
     * Generate automatic reports when your services go down
     */
    automaticReports?: pulumi.Input<boolean>;
    /**
     * Name of your company.
     */
    companyName?: pulumi.Input<string>;
    /**
     * URL of your company's website.
     */
    companyUrl?: pulumi.Input<string>;
    /**
     * URL that should be used for contacting you in case of an emergency.
     */
    contactUrl?: pulumi.Input<string>;
    /**
     * The time when this status page was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Unleash your inner designer and tweak our status page design to fit your branding.
     */
    customCss?: pulumi.Input<string>;
    /**
     * Do you want a custom domain on your status page? Add a CNAME record that points your domain to status.betteruptime.com.
     * Example: `CNAME status.walmine.com statuspage.betteruptime.com`
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Add custom behavior to your status page. It is only allowed for status pages with a custom domain name.
     */
    customJavascript?: pulumi.Input<string>;
    /**
     * Choose between classic and modern status page design. Possible values: 'v1', 'v2'.
     */
    design?: pulumi.Input<string>;
    /**
     * Specify your own Google Analytics ID if you want to receive hits on your status page.
     */
    googleAnalyticsId?: pulumi.Input<string>;
    /**
     * Hide your status page from search engines.
     */
    hideFromSearchEngines?: pulumi.Input<boolean>;
    /**
     * Number of days to display on the status page. Between 7 and 365 days.
     */
    history?: pulumi.Input<number>;
    /**
     * Choose usual vertical layout or space-saving horizontal layout. Only applicable when design: v2. Possible values:
     * 'vertical', 'horizontal'.
     */
    layout?: pulumi.Input<string>;
    /**
     * A direct link to your company's logo. The image should be under 20MB in size.
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * If you don't want to display short incidents on your status page, this attribute is for you.
     */
    minIncidentLength?: pulumi.Input<number>;
    /**
     * Set a password of your status page (we won't store it as plaintext, promise). Required when password_enabled: true. We
     * will set password_enabled: false automatically when you send us an empty password.
     */
    password?: pulumi.Input<string>;
    /**
     * Do you want to enable password protection on your status page?
     */
    passwordEnabled?: pulumi.Input<boolean>;
    /**
     * Set this attribute if you want to add this status page to a status page group.
     */
    statusPageGroupId?: pulumi.Input<number>;
    /**
     * What subdomain should we use for your status page? This needs to be unique across our entire application, so choose
     * carefully
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Do you want to allow users to subscribe to your status page changes?
     */
    subscribable?: pulumi.Input<boolean>;
    /**
     * Choose theme of your status page. Only applicable when design: v2. Possible values: 'light', 'dark'.
     */
    theme?: pulumi.Input<string>;
    /**
     * What timezone should we display your status page in? The accepted values can be found in the Rails TimeZone
     * documentation. https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
     */
    timezone?: pulumi.Input<string>;
    /**
     * The time when this status page was updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StatusPage resource.
 */
export interface StatusPageArgs {
    /**
     * Add an announcement to your status page.
     */
    announcement?: pulumi.Input<string>;
    /**
     * Modify the design of the announcement embed.
     */
    announcementEmbedCss?: pulumi.Input<string>;
    /**
     * Point your embedded announcement to a specified URL.
     */
    announcementEmbedLink?: pulumi.Input<string>;
    /**
     * Toggle this field if you want to show an announcement in your embed. You can embed the announcement using this snippet:
     * `<script src="https://uptime.betterstack.com/widgets/announcement.js" data-id="<SET STATUS_PAGE_ID>" async="async"
     * type="text/javascript"></script>`
     */
    announcementEmbedVisible?: pulumi.Input<boolean>;
    /**
     * Generate automatic reports when your services go down
     */
    automaticReports?: pulumi.Input<boolean>;
    /**
     * Name of your company.
     */
    companyName: pulumi.Input<string>;
    /**
     * URL of your company's website.
     */
    companyUrl: pulumi.Input<string>;
    /**
     * URL that should be used for contacting you in case of an emergency.
     */
    contactUrl?: pulumi.Input<string>;
    /**
     * Unleash your inner designer and tweak our status page design to fit your branding.
     */
    customCss?: pulumi.Input<string>;
    /**
     * Do you want a custom domain on your status page? Add a CNAME record that points your domain to status.betteruptime.com.
     * Example: `CNAME status.walmine.com statuspage.betteruptime.com`
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Add custom behavior to your status page. It is only allowed for status pages with a custom domain name.
     */
    customJavascript?: pulumi.Input<string>;
    /**
     * Choose between classic and modern status page design. Possible values: 'v1', 'v2'.
     */
    design?: pulumi.Input<string>;
    /**
     * Specify your own Google Analytics ID if you want to receive hits on your status page.
     */
    googleAnalyticsId?: pulumi.Input<string>;
    /**
     * Hide your status page from search engines.
     */
    hideFromSearchEngines?: pulumi.Input<boolean>;
    /**
     * Number of days to display on the status page. Between 7 and 365 days.
     */
    history?: pulumi.Input<number>;
    /**
     * Choose usual vertical layout or space-saving horizontal layout. Only applicable when design: v2. Possible values:
     * 'vertical', 'horizontal'.
     */
    layout?: pulumi.Input<string>;
    /**
     * A direct link to your company's logo. The image should be under 20MB in size.
     */
    logoUrl?: pulumi.Input<string>;
    /**
     * If you don't want to display short incidents on your status page, this attribute is for you.
     */
    minIncidentLength?: pulumi.Input<number>;
    /**
     * Set a password of your status page (we won't store it as plaintext, promise). Required when password_enabled: true. We
     * will set password_enabled: false automatically when you send us an empty password.
     */
    password?: pulumi.Input<string>;
    /**
     * Do you want to enable password protection on your status page?
     */
    passwordEnabled?: pulumi.Input<boolean>;
    /**
     * Set this attribute if you want to add this status page to a status page group.
     */
    statusPageGroupId?: pulumi.Input<number>;
    /**
     * What subdomain should we use for your status page? This needs to be unique across our entire application, so choose
     * carefully
     */
    subdomain: pulumi.Input<string>;
    /**
     * Do you want to allow users to subscribe to your status page changes?
     */
    subscribable?: pulumi.Input<boolean>;
    /**
     * Choose theme of your status page. Only applicable when design: v2. Possible values: 'light', 'dark'.
     */
    theme?: pulumi.Input<string>;
    /**
     * What timezone should we display your status page in? The accepted values can be found in the Rails TimeZone
     * documentation. https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
     */
    timezone: pulumi.Input<string>;
}
