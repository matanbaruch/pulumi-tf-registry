// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AwsCloudwatchIntegrationArgs, AwsCloudwatchIntegrationState } from "./awsCloudwatchIntegration";
export type AwsCloudwatchIntegration = import("./awsCloudwatchIntegration").AwsCloudwatchIntegration;
export const AwsCloudwatchIntegration: typeof import("./awsCloudwatchIntegration").AwsCloudwatchIntegration = null as any;
utilities.lazyLoad(exports, ["AwsCloudwatchIntegration"], () => require("./awsCloudwatchIntegration"));

export { AzureIntegrationArgs, AzureIntegrationState } from "./azureIntegration";
export type AzureIntegration = import("./azureIntegration").AzureIntegration;
export const AzureIntegration: typeof import("./azureIntegration").AzureIntegration = null as any;
utilities.lazyLoad(exports, ["AzureIntegration"], () => require("./azureIntegration"));

export { DatadogIntegrationArgs, DatadogIntegrationState } from "./datadogIntegration";
export type DatadogIntegration = import("./datadogIntegration").DatadogIntegration;
export const DatadogIntegration: typeof import("./datadogIntegration").DatadogIntegration = null as any;
utilities.lazyLoad(exports, ["DatadogIntegration"], () => require("./datadogIntegration"));

export { EmailIntegrationArgs, EmailIntegrationState } from "./emailIntegration";
export type EmailIntegration = import("./emailIntegration").EmailIntegration;
export const EmailIntegration: typeof import("./emailIntegration").EmailIntegration = null as any;
utilities.lazyLoad(exports, ["EmailIntegration"], () => require("./emailIntegration"));

export { GetIncomingWebhookArgs, GetIncomingWebhookResult, GetIncomingWebhookOutputArgs } from "./getIncomingWebhook";
export const getIncomingWebhook: typeof import("./getIncomingWebhook").getIncomingWebhook = null as any;
export const getIncomingWebhookOutput: typeof import("./getIncomingWebhook").getIncomingWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getIncomingWebhook","getIncomingWebhookOutput"], () => require("./getIncomingWebhook"));

export { GetIpListArgs, GetIpListResult, GetIpListOutputArgs } from "./getIpList";
export const getIpList: typeof import("./getIpList").getIpList = null as any;
export const getIpListOutput: typeof import("./getIpList").getIpListOutput = null as any;
utilities.lazyLoad(exports, ["getIpList","getIpListOutput"], () => require("./getIpList"));

export { GetMonitorArgs, GetMonitorResult, GetMonitorOutputArgs } from "./getMonitor";
export const getMonitor: typeof import("./getMonitor").getMonitor = null as any;
export const getMonitorOutput: typeof import("./getMonitor").getMonitorOutput = null as any;
utilities.lazyLoad(exports, ["getMonitor","getMonitorOutput"], () => require("./getMonitor"));

export { GetOnCallCalendarArgs, GetOnCallCalendarResult, GetOnCallCalendarOutputArgs } from "./getOnCallCalendar";
export const getOnCallCalendar: typeof import("./getOnCallCalendar").getOnCallCalendar = null as any;
export const getOnCallCalendarOutput: typeof import("./getOnCallCalendar").getOnCallCalendarOutput = null as any;
utilities.lazyLoad(exports, ["getOnCallCalendar","getOnCallCalendarOutput"], () => require("./getOnCallCalendar"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetSeverityArgs, GetSeverityResult, GetSeverityOutputArgs } from "./getSeverity";
export const getSeverity: typeof import("./getSeverity").getSeverity = null as any;
export const getSeverityOutput: typeof import("./getSeverity").getSeverityOutput = null as any;
utilities.lazyLoad(exports, ["getSeverity","getSeverityOutput"], () => require("./getSeverity"));

export { GetSlackIntegrationArgs, GetSlackIntegrationResult, GetSlackIntegrationOutputArgs } from "./getSlackIntegration";
export const getSlackIntegration: typeof import("./getSlackIntegration").getSlackIntegration = null as any;
export const getSlackIntegrationOutput: typeof import("./getSlackIntegration").getSlackIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getSlackIntegration","getSlackIntegrationOutput"], () => require("./getSlackIntegration"));

export { GoogleMonitoringIntegrationArgs, GoogleMonitoringIntegrationState } from "./googleMonitoringIntegration";
export type GoogleMonitoringIntegration = import("./googleMonitoringIntegration").GoogleMonitoringIntegration;
export const GoogleMonitoringIntegration: typeof import("./googleMonitoringIntegration").GoogleMonitoringIntegration = null as any;
utilities.lazyLoad(exports, ["GoogleMonitoringIntegration"], () => require("./googleMonitoringIntegration"));

export { GrafanaIntegrationArgs, GrafanaIntegrationState } from "./grafanaIntegration";
export type GrafanaIntegration = import("./grafanaIntegration").GrafanaIntegration;
export const GrafanaIntegration: typeof import("./grafanaIntegration").GrafanaIntegration = null as any;
utilities.lazyLoad(exports, ["GrafanaIntegration"], () => require("./grafanaIntegration"));

export { HeartbeatArgs, HeartbeatState } from "./heartbeat";
export type Heartbeat = import("./heartbeat").Heartbeat;
export const Heartbeat: typeof import("./heartbeat").Heartbeat = null as any;
utilities.lazyLoad(exports, ["Heartbeat"], () => require("./heartbeat"));

export { HeartbeatGroupArgs, HeartbeatGroupState } from "./heartbeatGroup";
export type HeartbeatGroup = import("./heartbeatGroup").HeartbeatGroup;
export const HeartbeatGroup: typeof import("./heartbeatGroup").HeartbeatGroup = null as any;
utilities.lazyLoad(exports, ["HeartbeatGroup"], () => require("./heartbeatGroup"));

export { IncomingWebhookArgs, IncomingWebhookState } from "./incomingWebhook";
export type IncomingWebhook = import("./incomingWebhook").IncomingWebhook;
export const IncomingWebhook: typeof import("./incomingWebhook").IncomingWebhook = null as any;
utilities.lazyLoad(exports, ["IncomingWebhook"], () => require("./incomingWebhook"));

export { MetadataArgs, MetadataState } from "./metadata";
export type Metadata = import("./metadata").Metadata;
export const Metadata: typeof import("./metadata").Metadata = null as any;
utilities.lazyLoad(exports, ["Metadata"], () => require("./metadata"));

export { MonitorArgs, MonitorState } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));

export { MonitorGroupArgs, MonitorGroupState } from "./monitorGroup";
export type MonitorGroup = import("./monitorGroup").MonitorGroup;
export const MonitorGroup: typeof import("./monitorGroup").MonitorGroup = null as any;
utilities.lazyLoad(exports, ["MonitorGroup"], () => require("./monitorGroup"));

export { NewRelicIntegrationArgs, NewRelicIntegrationState } from "./newRelicIntegration";
export type NewRelicIntegration = import("./newRelicIntegration").NewRelicIntegration;
export const NewRelicIntegration: typeof import("./newRelicIntegration").NewRelicIntegration = null as any;
utilities.lazyLoad(exports, ["NewRelicIntegration"], () => require("./newRelicIntegration"));

export { PagerdutyIntegrationArgs, PagerdutyIntegrationState } from "./pagerdutyIntegration";
export type PagerdutyIntegration = import("./pagerdutyIntegration").PagerdutyIntegration;
export const PagerdutyIntegration: typeof import("./pagerdutyIntegration").PagerdutyIntegration = null as any;
utilities.lazyLoad(exports, ["PagerdutyIntegration"], () => require("./pagerdutyIntegration"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { PolicyGroupArgs, PolicyGroupState } from "./policyGroup";
export type PolicyGroup = import("./policyGroup").PolicyGroup;
export const PolicyGroup: typeof import("./policyGroup").PolicyGroup = null as any;
utilities.lazyLoad(exports, ["PolicyGroup"], () => require("./policyGroup"));

export { PrometheusIntegrationArgs, PrometheusIntegrationState } from "./prometheusIntegration";
export type PrometheusIntegration = import("./prometheusIntegration").PrometheusIntegration;
export const PrometheusIntegration: typeof import("./prometheusIntegration").PrometheusIntegration = null as any;
utilities.lazyLoad(exports, ["PrometheusIntegration"], () => require("./prometheusIntegration"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SeverityArgs, SeverityState } from "./severity";
export type Severity = import("./severity").Severity;
export const Severity: typeof import("./severity").Severity = null as any;
utilities.lazyLoad(exports, ["Severity"], () => require("./severity"));

export { SeverityGroupArgs, SeverityGroupState } from "./severityGroup";
export type SeverityGroup = import("./severityGroup").SeverityGroup;
export const SeverityGroup: typeof import("./severityGroup").SeverityGroup = null as any;
utilities.lazyLoad(exports, ["SeverityGroup"], () => require("./severityGroup"));

export { SplunkOncallIntegrationArgs, SplunkOncallIntegrationState } from "./splunkOncallIntegration";
export type SplunkOncallIntegration = import("./splunkOncallIntegration").SplunkOncallIntegration;
export const SplunkOncallIntegration: typeof import("./splunkOncallIntegration").SplunkOncallIntegration = null as any;
utilities.lazyLoad(exports, ["SplunkOncallIntegration"], () => require("./splunkOncallIntegration"));

export { StatusPageArgs, StatusPageState } from "./statusPage";
export type StatusPage = import("./statusPage").StatusPage;
export const StatusPage: typeof import("./statusPage").StatusPage = null as any;
utilities.lazyLoad(exports, ["StatusPage"], () => require("./statusPage"));

export { StatusPageGroupArgs, StatusPageGroupState } from "./statusPageGroup";
export type StatusPageGroup = import("./statusPageGroup").StatusPageGroup;
export const StatusPageGroup: typeof import("./statusPageGroup").StatusPageGroup = null as any;
utilities.lazyLoad(exports, ["StatusPageGroup"], () => require("./statusPageGroup"));

export { StatusPageResourceArgs, StatusPageResourceState } from "./statusPageResource";
export type StatusPageResource = import("./statusPageResource").StatusPageResource;
export const StatusPageResource: typeof import("./statusPageResource").StatusPageResource = null as any;
utilities.lazyLoad(exports, ["StatusPageResource"], () => require("./statusPageResource"));

export { StatusPageSectionArgs, StatusPageSectionState } from "./statusPageSection";
export type StatusPageSection = import("./statusPageSection").StatusPageSection;
export const StatusPageSection: typeof import("./statusPageSection").StatusPageSection = null as any;
utilities.lazyLoad(exports, ["StatusPageSection"], () => require("./statusPageSection"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "better-uptime:index/awsCloudwatchIntegration:AwsCloudwatchIntegration":
                return new AwsCloudwatchIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/azureIntegration:AzureIntegration":
                return new AzureIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/datadogIntegration:DatadogIntegration":
                return new DatadogIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/emailIntegration:EmailIntegration":
                return new EmailIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/googleMonitoringIntegration:GoogleMonitoringIntegration":
                return new GoogleMonitoringIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/grafanaIntegration:GrafanaIntegration":
                return new GrafanaIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/heartbeat:Heartbeat":
                return new Heartbeat(name, <any>undefined, { urn })
            case "better-uptime:index/heartbeatGroup:HeartbeatGroup":
                return new HeartbeatGroup(name, <any>undefined, { urn })
            case "better-uptime:index/incomingWebhook:IncomingWebhook":
                return new IncomingWebhook(name, <any>undefined, { urn })
            case "better-uptime:index/metadata:Metadata":
                return new Metadata(name, <any>undefined, { urn })
            case "better-uptime:index/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "better-uptime:index/monitorGroup:MonitorGroup":
                return new MonitorGroup(name, <any>undefined, { urn })
            case "better-uptime:index/newRelicIntegration:NewRelicIntegration":
                return new NewRelicIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/pagerdutyIntegration:PagerdutyIntegration":
                return new PagerdutyIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "better-uptime:index/policyGroup:PolicyGroup":
                return new PolicyGroup(name, <any>undefined, { urn })
            case "better-uptime:index/prometheusIntegration:PrometheusIntegration":
                return new PrometheusIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/severity:Severity":
                return new Severity(name, <any>undefined, { urn })
            case "better-uptime:index/severityGroup:SeverityGroup":
                return new SeverityGroup(name, <any>undefined, { urn })
            case "better-uptime:index/splunkOncallIntegration:SplunkOncallIntegration":
                return new SplunkOncallIntegration(name, <any>undefined, { urn })
            case "better-uptime:index/statusPage:StatusPage":
                return new StatusPage(name, <any>undefined, { urn })
            case "better-uptime:index/statusPageGroup:StatusPageGroup":
                return new StatusPageGroup(name, <any>undefined, { urn })
            case "better-uptime:index/statusPageResource:StatusPageResource":
                return new StatusPageResource(name, <any>undefined, { urn })
            case "better-uptime:index/statusPageSection:StatusPageSection":
                return new StatusPageSection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("better-uptime", "index/awsCloudwatchIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/azureIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/datadogIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/emailIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/googleMonitoringIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/grafanaIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/heartbeat", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/heartbeatGroup", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/incomingWebhook", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/metadata", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/monitor", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/monitorGroup", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/newRelicIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/pagerdutyIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/policy", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/policyGroup", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/prometheusIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/severity", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/severityGroup", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/splunkOncallIntegration", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/statusPage", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/statusPageGroup", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/statusPageResource", _module)
pulumi.runtime.registerResourceModule("better-uptime", "index/statusPageSection", _module)
pulumi.runtime.registerResourcePackage("better-uptime", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:better-uptime") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
