// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StatusPageResource extends pulumi.CustomResource {
    /**
     * Get an existing StatusPageResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StatusPageResourceState, opts?: pulumi.CustomResourceOptions): StatusPageResource {
        return new StatusPageResource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'better-uptime:index/statusPageResource:StatusPageResource';

    /**
     * Returns true if the given object is an instance of StatusPageResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StatusPageResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StatusPageResource.__pulumiType;
    }

    /**
     * The availability of this resource (from 0.0 to 1.0).
     */
    public /*out*/ readonly availability!: pulumi.Output<number>;
    /**
     * A detailed text displayed as a help icon.
     */
    public readonly explanation!: pulumi.Output<string>;
    /**
     * Do you want to display detailed historical status for this item? This field is deprecated, use widget_type instead.
     *
     * @deprecated Deprecated
     */
    public readonly history!: pulumi.Output<boolean>;
    /**
     * The position of this resource on your status page, indexed from zero. If you don't specify a position, we add the
     * resource to the end of the status page. When you specify a position of an existing resource, we add the resource to this
     * position and shift resources below to accommodate.
     */
    public readonly position!: pulumi.Output<number>;
    /**
     * The resource name displayed publicly on your status page.
     */
    public readonly publicName!: pulumi.Output<string>;
    /**
     * The ID of the resource you are adding.
     */
    public readonly resourceId!: pulumi.Output<number>;
    /**
     * The type of the resource you are adding. Available values: Monitor, Heartbeat, WebhookIntegration, EmailIntegration,
     * IncomingWebhook.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The current status of the resource. Can be one of `not_monitored` (when the underlying monitor is paused),
     * `operational`, `maintenance`, `degraded`, or `downtime`
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * History of a single status page resource history
     */
    public /*out*/ readonly statusHistories!: pulumi.Output<outputs.StatusPageResourceStatusHistory[]>;
    /**
     * The ID of the Status Page.
     */
    public readonly statusPageId!: pulumi.Output<string>;
    /**
     * The ID of the Status Page Section. If you don't specify a status_page_section_id, we add the resource to the first
     * section. If there are no sections in the status page yet, one will be automatically created for you.
     */
    public readonly statusPageSectionId!: pulumi.Output<number>;
    /**
     * What widget to display for this resource. Expects one of three values: plain - only display status, history - display
     * detailed historical status, response_times - add a response times chart (only for Monitor resource type). This takes
     * preference over history when both parameters are present.
     */
    public readonly widgetType!: pulumi.Output<string>;

    /**
     * Create a StatusPageResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StatusPageResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StatusPageResourceArgs | StatusPageResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StatusPageResourceState | undefined;
            resourceInputs["availability"] = state ? state.availability : undefined;
            resourceInputs["explanation"] = state ? state.explanation : undefined;
            resourceInputs["history"] = state ? state.history : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["publicName"] = state ? state.publicName : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusHistories"] = state ? state.statusHistories : undefined;
            resourceInputs["statusPageId"] = state ? state.statusPageId : undefined;
            resourceInputs["statusPageSectionId"] = state ? state.statusPageSectionId : undefined;
            resourceInputs["widgetType"] = state ? state.widgetType : undefined;
        } else {
            const args = argsOrState as StatusPageResourceArgs | undefined;
            if ((!args || args.publicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicName'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.statusPageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statusPageId'");
            }
            resourceInputs["explanation"] = args ? args.explanation : undefined;
            resourceInputs["history"] = args ? args.history : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["publicName"] = args ? args.publicName : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["statusPageId"] = args ? args.statusPageId : undefined;
            resourceInputs["statusPageSectionId"] = args ? args.statusPageSectionId : undefined;
            resourceInputs["widgetType"] = args ? args.widgetType : undefined;
            resourceInputs["availability"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusHistories"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StatusPageResource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StatusPageResource resources.
 */
export interface StatusPageResourceState {
    /**
     * The availability of this resource (from 0.0 to 1.0).
     */
    availability?: pulumi.Input<number>;
    /**
     * A detailed text displayed as a help icon.
     */
    explanation?: pulumi.Input<string>;
    /**
     * Do you want to display detailed historical status for this item? This field is deprecated, use widget_type instead.
     *
     * @deprecated Deprecated
     */
    history?: pulumi.Input<boolean>;
    /**
     * The position of this resource on your status page, indexed from zero. If you don't specify a position, we add the
     * resource to the end of the status page. When you specify a position of an existing resource, we add the resource to this
     * position and shift resources below to accommodate.
     */
    position?: pulumi.Input<number>;
    /**
     * The resource name displayed publicly on your status page.
     */
    publicName?: pulumi.Input<string>;
    /**
     * The ID of the resource you are adding.
     */
    resourceId?: pulumi.Input<number>;
    /**
     * The type of the resource you are adding. Available values: Monitor, Heartbeat, WebhookIntegration, EmailIntegration,
     * IncomingWebhook.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The current status of the resource. Can be one of `not_monitored` (when the underlying monitor is paused),
     * `operational`, `maintenance`, `degraded`, or `downtime`
     */
    status?: pulumi.Input<string>;
    /**
     * History of a single status page resource history
     */
    statusHistories?: pulumi.Input<pulumi.Input<inputs.StatusPageResourceStatusHistory>[]>;
    /**
     * The ID of the Status Page.
     */
    statusPageId?: pulumi.Input<string>;
    /**
     * The ID of the Status Page Section. If you don't specify a status_page_section_id, we add the resource to the first
     * section. If there are no sections in the status page yet, one will be automatically created for you.
     */
    statusPageSectionId?: pulumi.Input<number>;
    /**
     * What widget to display for this resource. Expects one of three values: plain - only display status, history - display
     * detailed historical status, response_times - add a response times chart (only for Monitor resource type). This takes
     * preference over history when both parameters are present.
     */
    widgetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StatusPageResource resource.
 */
export interface StatusPageResourceArgs {
    /**
     * A detailed text displayed as a help icon.
     */
    explanation?: pulumi.Input<string>;
    /**
     * Do you want to display detailed historical status for this item? This field is deprecated, use widget_type instead.
     *
     * @deprecated Deprecated
     */
    history?: pulumi.Input<boolean>;
    /**
     * The position of this resource on your status page, indexed from zero. If you don't specify a position, we add the
     * resource to the end of the status page. When you specify a position of an existing resource, we add the resource to this
     * position and shift resources below to accommodate.
     */
    position?: pulumi.Input<number>;
    /**
     * The resource name displayed publicly on your status page.
     */
    publicName: pulumi.Input<string>;
    /**
     * The ID of the resource you are adding.
     */
    resourceId: pulumi.Input<number>;
    /**
     * The type of the resource you are adding. Available values: Monitor, Heartbeat, WebhookIntegration, EmailIntegration,
     * IncomingWebhook.
     */
    resourceType: pulumi.Input<string>;
    /**
     * The ID of the Status Page.
     */
    statusPageId: pulumi.Input<string>;
    /**
     * The ID of the Status Page Section. If you don't specify a status_page_section_id, we add the resource to the first
     * section. If there are no sections in the status page yet, one will be automatically created for you.
     */
    statusPageSectionId?: pulumi.Input<number>;
    /**
     * What widget to display for this resource. Expects one of three values: plain - only display status, history - display
     * detailed historical status, response_times - add a response times chart (only for Monitor resource type). This takes
     * preference over history when both parameters are present.
     */
    widgetType?: pulumi.Input<string>;
}
