// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getMonitor(args: GetMonitorArgs, opts?: pulumi.InvokeOptions): Promise<GetMonitorResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("better-uptime:index/getMonitor:getMonitor", {
        "url": args.url,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMonitor.
 */
export interface GetMonitorArgs {
    url: string;
}

/**
 * A collection of values returned by getMonitor.
 */
export interface GetMonitorResult {
    readonly authPassword: string;
    readonly authUsername: string;
    readonly call: boolean;
    readonly checkFrequency: number;
    readonly confirmationPeriod: number;
    readonly createdAt: string;
    readonly domainExpiration: number;
    readonly email: boolean;
    readonly expectedStatusCodes: number[];
    readonly followRedirects: boolean;
    readonly httpMethod: string;
    readonly id: string;
    readonly ipVersion: string;
    readonly lastCheckedAt: string;
    readonly maintenanceDays: string[];
    readonly maintenanceFrom: string;
    readonly maintenanceTimezone: string;
    readonly maintenanceTo: string;
    readonly monitorGroupId: number;
    readonly monitorType: string;
    readonly paused: boolean;
    readonly pausedAt: string;
    readonly playwrightScript: string;
    readonly policyId: string;
    readonly port: string;
    readonly pronounceableName: string;
    readonly push: boolean;
    readonly recoveryPeriod: number;
    readonly regions: string[];
    readonly rememberCookies: boolean;
    readonly requestBody: string;
    readonly requestHeaders: {[key: string]: string}[];
    readonly requestTimeout: number;
    readonly requiredKeyword: string;
    readonly scenarioName: string;
    readonly sms: boolean;
    readonly sslExpiration: number;
    readonly status: string;
    readonly teamWait: number;
    readonly updatedAt: string;
    readonly url: string;
    readonly verifySsl: boolean;
}
export function getMonitorOutput(args: GetMonitorOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMonitorResult> {
    return pulumi.output(args).apply((a: any) => getMonitor(a, opts))
}

/**
 * A collection of arguments for invoking getMonitor.
 */
export interface GetMonitorOutputArgs {
    url: pulumi.Input<string>;
}
