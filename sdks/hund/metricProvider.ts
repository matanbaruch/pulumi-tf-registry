// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MetricProvider extends pulumi.CustomResource {
    /**
     * Get an existing MetricProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricProviderState, opts?: pulumi.CustomResourceOptions): MetricProvider {
        return new MetricProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hund:index/metricProvider:MetricProvider';

    /**
     * Returns true if the given object is an instance of MetricProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricProvider.__pulumiType;
    }

    public readonly default!: pulumi.Output<boolean>;
    /**
     * A Map of MetricInstances, which describe each Metric that the MetricProvider provides. The keys of this Map define the
     * slugs of each provided metric.
     */
    public readonly instances!: pulumi.Output<{[key: string]: outputs.MetricProviderInstances}>;
    /**
     * The service configuration for this MetricProvider, which describes how the given `instances` are provided.
     */
    public readonly service!: pulumi.Output<outputs.MetricProviderService>;
    /**
     * The Watchdog that owns this MetricProvider.
     */
    public readonly watchdog!: pulumi.Output<string>;

    /**
     * Create a MetricProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricProviderArgs | MetricProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricProviderState | undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["watchdog"] = state ? state.watchdog : undefined;
        } else {
            const args = argsOrState as MetricProviderArgs | undefined;
            if ((!args || args.watchdog === undefined) && !opts.urn) {
                throw new Error("Missing required property 'watchdog'");
            }
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["watchdog"] = args ? args.watchdog : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetricProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetricProvider resources.
 */
export interface MetricProviderState {
    default?: pulumi.Input<boolean>;
    /**
     * A Map of MetricInstances, which describe each Metric that the MetricProvider provides. The keys of this Map define the
     * slugs of each provided metric.
     */
    instances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.MetricProviderInstances>}>;
    /**
     * The service configuration for this MetricProvider, which describes how the given `instances` are provided.
     */
    service?: pulumi.Input<inputs.MetricProviderService>;
    /**
     * The Watchdog that owns this MetricProvider.
     */
    watchdog?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricProvider resource.
 */
export interface MetricProviderArgs {
    default?: pulumi.Input<boolean>;
    /**
     * A Map of MetricInstances, which describe each Metric that the MetricProvider provides. The keys of this Map define the
     * slugs of each provided metric.
     */
    instances?: pulumi.Input<{[key: string]: pulumi.Input<inputs.MetricProviderInstances>}>;
    /**
     * The service configuration for this MetricProvider, which describes how the given `instances` are provided.
     */
    service?: pulumi.Input<inputs.MetricProviderService>;
    /**
     * The Watchdog that owns this MetricProvider.
     */
    watchdog: pulumi.Input<string>;
}
