// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIssues(args?: GetIssuesArgs, opts?: pulumi.InvokeOptions): Promise<GetIssuesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hund:index/getIssues:getIssues", {
        "components": args.components,
        "resolved": args.resolved,
        "standing": args.standing,
        "upcoming": args.upcoming,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIssues.
 */
export interface GetIssuesArgs {
    components?: string[];
    resolved?: boolean;
    standing?: boolean;
    upcoming?: boolean;
}

/**
 * A collection of values returned by getIssues.
 */
export interface GetIssuesResult {
    readonly components?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly issues: outputs.GetIssuesIssue[];
    readonly resolved?: boolean;
    readonly standing?: boolean;
    readonly upcoming?: boolean;
}
export function getIssuesOutput(args?: GetIssuesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIssuesResult> {
    return pulumi.output(args).apply((a: any) => getIssues(a, opts))
}

/**
 * A collection of arguments for invoking getIssues.
 */
export interface GetIssuesOutputArgs {
    components?: pulumi.Input<pulumi.Input<string>[]>;
    resolved?: pulumi.Input<boolean>;
    standing?: pulumi.Input<boolean>;
    upcoming?: pulumi.Input<boolean>;
}
