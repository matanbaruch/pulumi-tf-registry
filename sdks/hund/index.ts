// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ComponentArgs, ComponentState } from "./component";
export type Component = import("./component").Component;
export const Component: typeof import("./component").Component = null as any;
utilities.lazyLoad(exports, ["Component"], () => require("./component"));

export { GetComponentsArgs, GetComponentsResult, GetComponentsOutputArgs } from "./getComponents";
export const getComponents: typeof import("./getComponents").getComponents = null as any;
export const getComponentsOutput: typeof import("./getComponents").getComponentsOutput = null as any;
utilities.lazyLoad(exports, ["getComponents","getComponentsOutput"], () => require("./getComponents"));

export { GetGroupsResult } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetIssueTemplatesArgs, GetIssueTemplatesResult, GetIssueTemplatesOutputArgs } from "./getIssueTemplates";
export const getIssueTemplates: typeof import("./getIssueTemplates").getIssueTemplates = null as any;
export const getIssueTemplatesOutput: typeof import("./getIssueTemplates").getIssueTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getIssueTemplates","getIssueTemplatesOutput"], () => require("./getIssueTemplates"));

export { GetIssuesArgs, GetIssuesResult, GetIssuesOutputArgs } from "./getIssues";
export const getIssues: typeof import("./getIssues").getIssues = null as any;
export const getIssuesOutput: typeof import("./getIssues").getIssuesOutput = null as any;
utilities.lazyLoad(exports, ["getIssues","getIssuesOutput"], () => require("./getIssues"));

export { GetMetricProvidersArgs, GetMetricProvidersResult, GetMetricProvidersOutputArgs } from "./getMetricProviders";
export const getMetricProviders: typeof import("./getMetricProviders").getMetricProviders = null as any;
export const getMetricProvidersOutput: typeof import("./getMetricProviders").getMetricProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getMetricProviders","getMetricProvidersOutput"], () => require("./getMetricProviders"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupComponentOrderingArgs, GroupComponentOrderingState } from "./groupComponentOrdering";
export type GroupComponentOrdering = import("./groupComponentOrdering").GroupComponentOrdering;
export const GroupComponentOrdering: typeof import("./groupComponentOrdering").GroupComponentOrdering = null as any;
utilities.lazyLoad(exports, ["GroupComponentOrdering"], () => require("./groupComponentOrdering"));

export { IssueArgs, IssueState } from "./issue";
export type Issue = import("./issue").Issue;
export const Issue: typeof import("./issue").Issue = null as any;
utilities.lazyLoad(exports, ["Issue"], () => require("./issue"));

export { IssueTemplateArgs, IssueTemplateState } from "./issueTemplate";
export type IssueTemplate = import("./issueTemplate").IssueTemplate;
export const IssueTemplate: typeof import("./issueTemplate").IssueTemplate = null as any;
utilities.lazyLoad(exports, ["IssueTemplate"], () => require("./issueTemplate"));

export { IssueUpdateArgs, IssueUpdateState } from "./issueUpdate";
export type IssueUpdate = import("./issueUpdate").IssueUpdate;
export const IssueUpdate: typeof import("./issueUpdate").IssueUpdate = null as any;
utilities.lazyLoad(exports, ["IssueUpdate"], () => require("./issueUpdate"));

export { MetricProviderArgs, MetricProviderState } from "./metricProvider";
export type MetricProvider = import("./metricProvider").MetricProvider;
export const MetricProvider: typeof import("./metricProvider").MetricProvider = null as any;
utilities.lazyLoad(exports, ["MetricProvider"], () => require("./metricProvider"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "hund:index/component:Component":
                return new Component(name, <any>undefined, { urn })
            case "hund:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "hund:index/groupComponentOrdering:GroupComponentOrdering":
                return new GroupComponentOrdering(name, <any>undefined, { urn })
            case "hund:index/issue:Issue":
                return new Issue(name, <any>undefined, { urn })
            case "hund:index/issueTemplate:IssueTemplate":
                return new IssueTemplate(name, <any>undefined, { urn })
            case "hund:index/issueUpdate:IssueUpdate":
                return new IssueUpdate(name, <any>undefined, { urn })
            case "hund:index/metricProvider:MetricProvider":
                return new MetricProvider(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("hund", "index/component", _module)
pulumi.runtime.registerResourceModule("hund", "index/group", _module)
pulumi.runtime.registerResourceModule("hund", "index/groupComponentOrdering", _module)
pulumi.runtime.registerResourceModule("hund", "index/issue", _module)
pulumi.runtime.registerResourceModule("hund", "index/issueTemplate", _module)
pulumi.runtime.registerResourceModule("hund", "index/issueUpdate", _module)
pulumi.runtime.registerResourceModule("hund", "index/metricProvider", _module)
pulumi.runtime.registerResourcePackage("hund", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:hund") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
