// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Issue extends pulumi.CustomResource {
    /**
     * Get an existing Issue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IssueState, opts?: pulumi.CustomResourceOptions): Issue {
        return new Issue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hund:index/issue:Issue';

    /**
     * Returns true if the given object is an instance of Issue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Issue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Issue.__pulumiType;
    }

    public readonly archiveOnDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The timestamp at which this Issue began affecting its given Components.
     */
    public readonly beganAt!: pulumi.Output<string>;
    /**
     * The initial body text of the issue in raw markdown, in the default translation.
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * An HTML rendered view of the markdown in `body`, in the default translation.
     */
    public /*out*/ readonly bodyHtml!: pulumi.Output<string>;
    /**
     * An HTML rendered view of the markdown in `body`, translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    public /*out*/ readonly bodyHtmlTranslations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The initial body text of the issue in raw markdown, translated into multiple languages. Map keys express the language
     * each string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    public readonly bodyTranslations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The time at which this Issue was cancelled. This field is `null` if the Issue has not been cancelled or is not
     * scheduled.
     */
    public /*out*/ readonly cancelledAt!: pulumi.Output<string>;
    /**
     * The Components IDs affected by this Issue.
     */
    public readonly componentIds!: pulumi.Output<string[]>;
    /**
     * The timestamp at which this Issue was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The effective duration of this Issue in seconds. That is, the total amount of time for which this Issue affects its
     * Components. Thus, this field only accumulates while the Issue is ongoing/open. > This value is zero for cancelled and
     * informational Issues. For scheduled Issues, this field will remain zero until the Issue begins according to the
     * Schedule.
     */
    public /*out*/ readonly duration!: pulumi.Output<number>;
    /**
     * The UNIX timestamp at which this Issue stopped affecting its given Components. This field is `null` if it has not ended
     * yet.
     */
    public readonly endedAt!: pulumi.Output<string>;
    /**
     * The initial label applied to the issue. The "current" label of the entire issue may be updated by the labels of Issue
     * Updates, though this must be taken from the latest Update in `updates`.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * The URL to an image which will be displayed alongside this issue when shared on social media websites.
     */
    public readonly openGraphImageUrl!: pulumi.Output<string | undefined>;
    /**
     * The integer priority of the Issue. Priority pertains to how notifications are triggered for this Issue: -1 indicates
     * **low priority**, meaning no notifications whatsoever will be triggered for this issue; 0 indicates **normal priority**,
     * which is the default behavior; and, 1 indicates **high priority**, meaning all subscriptions across all notifiers will
     * receive notifications for this Issue regardless of their notification preferences.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Whether this Issue is currently resolved, thus no longer affecting its given Components.
     */
    public /*out*/ readonly resolved!: pulumi.Output<boolean>;
    /**
     * Whether this Issue is retrospective; that is, the Issue was created both resolved *and* backdated.
     */
    public /*out*/ readonly retrospective!: pulumi.Output<boolean>;
    /**
     * An object detailing the Schedule of this issue if it is scheduled. This field is `null` if the Issue is not scheduled.
     */
    public readonly schedule!: pulumi.Output<outputs.IssueSchedule | undefined>;
    /**
     * Whether this Issue has a Schedule.
     */
    public /*out*/ readonly scheduled!: pulumi.Output<boolean>;
    /**
     * Whether this Issue has special abilities or connotations. `general` is the default behavior, indicating no
     * specialization. Other values include `maintenance`, which indicates an Issue shows affected components as "under
     * maintenance," and `informational`, which indicates that the Issue is an informational bulletin.
     */
    public /*out*/ readonly specialization!: pulumi.Output<string>;
    /**
     * Whether this Issue is currently active and affecting its given Components.
     */
    public /*out*/ readonly standing!: pulumi.Output<boolean>;
    /**
     * The integer state which overrides the state of affected Components in `component`. A value of `null` indicates no
     * override is present.
     */
    public readonly stateOverride!: pulumi.Output<number | undefined>;
    /**
     * An application of an IssueTemplate, which contains a copy of the template fields of the associated IssueTemplate, as
     * well as an object of user-defined variables that parameterize the template. > Alterations to this field do not affect
     * the associated `issue_template_id`, and will update the Issue/Update's content accordingly. Conversely,
     * modification/deletion of the associated IssueTemplate do not affect the attributes of this field.
     */
    public readonly template!: pulumi.Output<outputs.IssueTemplate | undefined>;
    /**
     * The title of the Issue, in the default translation.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The title of the Issue, translated into multiple languages. Map keys express the language each string value is to be
     * interpreted in. The `original` field of this map denotes the language used for the non-`_translations` version of this
     * attribute.
     */
    public readonly titleTranslations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The timestamp at which this Issue was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * An optional list of Updates to create when initially creating the Issue. When creating a sequence of Updates, ensure
     * that their `effective_after` timestamps do not encroach upon one another, or an error will occur. > This field is
     * primarily meant for assisting with the creation of retrospective Issues, rather than creating new Updates as they arise.
     * Please use the full hund.IssueUpdate resource instead, rather than configuring this field directly.
     */
    public readonly updates!: pulumi.Output<outputs.IssueUpdate[]>;

    /**
     * Create a Issue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IssueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IssueArgs | IssueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IssueState | undefined;
            resourceInputs["archiveOnDestroy"] = state ? state.archiveOnDestroy : undefined;
            resourceInputs["beganAt"] = state ? state.beganAt : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["bodyHtml"] = state ? state.bodyHtml : undefined;
            resourceInputs["bodyHtmlTranslations"] = state ? state.bodyHtmlTranslations : undefined;
            resourceInputs["bodyTranslations"] = state ? state.bodyTranslations : undefined;
            resourceInputs["cancelledAt"] = state ? state.cancelledAt : undefined;
            resourceInputs["componentIds"] = state ? state.componentIds : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["endedAt"] = state ? state.endedAt : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["openGraphImageUrl"] = state ? state.openGraphImageUrl : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["resolved"] = state ? state.resolved : undefined;
            resourceInputs["retrospective"] = state ? state.retrospective : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["scheduled"] = state ? state.scheduled : undefined;
            resourceInputs["specialization"] = state ? state.specialization : undefined;
            resourceInputs["standing"] = state ? state.standing : undefined;
            resourceInputs["stateOverride"] = state ? state.stateOverride : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["titleTranslations"] = state ? state.titleTranslations : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updates"] = state ? state.updates : undefined;
        } else {
            const args = argsOrState as IssueArgs | undefined;
            if ((!args || args.componentIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'componentIds'");
            }
            resourceInputs["archiveOnDestroy"] = args ? args.archiveOnDestroy : undefined;
            resourceInputs["beganAt"] = args ? args.beganAt : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["bodyTranslations"] = args ? args.bodyTranslations : undefined;
            resourceInputs["componentIds"] = args ? args.componentIds : undefined;
            resourceInputs["endedAt"] = args ? args.endedAt : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["openGraphImageUrl"] = args ? args.openGraphImageUrl : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["stateOverride"] = args ? args.stateOverride : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["titleTranslations"] = args ? args.titleTranslations : undefined;
            resourceInputs["updates"] = args ? args.updates : undefined;
            resourceInputs["bodyHtml"] = undefined /*out*/;
            resourceInputs["bodyHtmlTranslations"] = undefined /*out*/;
            resourceInputs["cancelledAt"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["resolved"] = undefined /*out*/;
            resourceInputs["retrospective"] = undefined /*out*/;
            resourceInputs["scheduled"] = undefined /*out*/;
            resourceInputs["specialization"] = undefined /*out*/;
            resourceInputs["standing"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Issue.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Issue resources.
 */
export interface IssueState {
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * The timestamp at which this Issue began affecting its given Components.
     */
    beganAt?: pulumi.Input<string>;
    /**
     * The initial body text of the issue in raw markdown, in the default translation.
     */
    body?: pulumi.Input<string>;
    /**
     * An HTML rendered view of the markdown in `body`, in the default translation.
     */
    bodyHtml?: pulumi.Input<string>;
    /**
     * An HTML rendered view of the markdown in `body`, translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyHtmlTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The initial body text of the issue in raw markdown, translated into multiple languages. Map keys express the language
     * each string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time at which this Issue was cancelled. This field is `null` if the Issue has not been cancelled or is not
     * scheduled.
     */
    cancelledAt?: pulumi.Input<string>;
    /**
     * The Components IDs affected by this Issue.
     */
    componentIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The timestamp at which this Issue was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The effective duration of this Issue in seconds. That is, the total amount of time for which this Issue affects its
     * Components. Thus, this field only accumulates while the Issue is ongoing/open. > This value is zero for cancelled and
     * informational Issues. For scheduled Issues, this field will remain zero until the Issue begins according to the
     * Schedule.
     */
    duration?: pulumi.Input<number>;
    /**
     * The UNIX timestamp at which this Issue stopped affecting its given Components. This field is `null` if it has not ended
     * yet.
     */
    endedAt?: pulumi.Input<string>;
    /**
     * The initial label applied to the issue. The "current" label of the entire issue may be updated by the labels of Issue
     * Updates, though this must be taken from the latest Update in `updates`.
     */
    label?: pulumi.Input<string>;
    /**
     * The URL to an image which will be displayed alongside this issue when shared on social media websites.
     */
    openGraphImageUrl?: pulumi.Input<string>;
    /**
     * The integer priority of the Issue. Priority pertains to how notifications are triggered for this Issue: -1 indicates
     * **low priority**, meaning no notifications whatsoever will be triggered for this issue; 0 indicates **normal priority**,
     * which is the default behavior; and, 1 indicates **high priority**, meaning all subscriptions across all notifiers will
     * receive notifications for this Issue regardless of their notification preferences.
     */
    priority?: pulumi.Input<number>;
    /**
     * Whether this Issue is currently resolved, thus no longer affecting its given Components.
     */
    resolved?: pulumi.Input<boolean>;
    /**
     * Whether this Issue is retrospective; that is, the Issue was created both resolved *and* backdated.
     */
    retrospective?: pulumi.Input<boolean>;
    /**
     * An object detailing the Schedule of this issue if it is scheduled. This field is `null` if the Issue is not scheduled.
     */
    schedule?: pulumi.Input<inputs.IssueSchedule>;
    /**
     * Whether this Issue has a Schedule.
     */
    scheduled?: pulumi.Input<boolean>;
    /**
     * Whether this Issue has special abilities or connotations. `general` is the default behavior, indicating no
     * specialization. Other values include `maintenance`, which indicates an Issue shows affected components as "under
     * maintenance," and `informational`, which indicates that the Issue is an informational bulletin.
     */
    specialization?: pulumi.Input<string>;
    /**
     * Whether this Issue is currently active and affecting its given Components.
     */
    standing?: pulumi.Input<boolean>;
    /**
     * The integer state which overrides the state of affected Components in `component`. A value of `null` indicates no
     * override is present.
     */
    stateOverride?: pulumi.Input<number>;
    /**
     * An application of an IssueTemplate, which contains a copy of the template fields of the associated IssueTemplate, as
     * well as an object of user-defined variables that parameterize the template. > Alterations to this field do not affect
     * the associated `issue_template_id`, and will update the Issue/Update's content accordingly. Conversely,
     * modification/deletion of the associated IssueTemplate do not affect the attributes of this field.
     */
    template?: pulumi.Input<inputs.IssueTemplate>;
    /**
     * The title of the Issue, in the default translation.
     */
    title?: pulumi.Input<string>;
    /**
     * The title of the Issue, translated into multiple languages. Map keys express the language each string value is to be
     * interpreted in. The `original` field of this map denotes the language used for the non-`_translations` version of this
     * attribute.
     */
    titleTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timestamp at which this Issue was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * An optional list of Updates to create when initially creating the Issue. When creating a sequence of Updates, ensure
     * that their `effective_after` timestamps do not encroach upon one another, or an error will occur. > This field is
     * primarily meant for assisting with the creation of retrospective Issues, rather than creating new Updates as they arise.
     * Please use the full hund.IssueUpdate resource instead, rather than configuring this field directly.
     */
    updates?: pulumi.Input<pulumi.Input<inputs.IssueUpdate>[]>;
}

/**
 * The set of arguments for constructing a Issue resource.
 */
export interface IssueArgs {
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * The timestamp at which this Issue began affecting its given Components.
     */
    beganAt?: pulumi.Input<string>;
    /**
     * The initial body text of the issue in raw markdown, in the default translation.
     */
    body?: pulumi.Input<string>;
    /**
     * The initial body text of the issue in raw markdown, translated into multiple languages. Map keys express the language
     * each string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Components IDs affected by this Issue.
     */
    componentIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The UNIX timestamp at which this Issue stopped affecting its given Components. This field is `null` if it has not ended
     * yet.
     */
    endedAt?: pulumi.Input<string>;
    /**
     * The initial label applied to the issue. The "current" label of the entire issue may be updated by the labels of Issue
     * Updates, though this must be taken from the latest Update in `updates`.
     */
    label?: pulumi.Input<string>;
    /**
     * The URL to an image which will be displayed alongside this issue when shared on social media websites.
     */
    openGraphImageUrl?: pulumi.Input<string>;
    /**
     * The integer priority of the Issue. Priority pertains to how notifications are triggered for this Issue: -1 indicates
     * **low priority**, meaning no notifications whatsoever will be triggered for this issue; 0 indicates **normal priority**,
     * which is the default behavior; and, 1 indicates **high priority**, meaning all subscriptions across all notifiers will
     * receive notifications for this Issue regardless of their notification preferences.
     */
    priority?: pulumi.Input<number>;
    /**
     * An object detailing the Schedule of this issue if it is scheduled. This field is `null` if the Issue is not scheduled.
     */
    schedule?: pulumi.Input<inputs.IssueSchedule>;
    /**
     * The integer state which overrides the state of affected Components in `component`. A value of `null` indicates no
     * override is present.
     */
    stateOverride?: pulumi.Input<number>;
    /**
     * An application of an IssueTemplate, which contains a copy of the template fields of the associated IssueTemplate, as
     * well as an object of user-defined variables that parameterize the template. > Alterations to this field do not affect
     * the associated `issue_template_id`, and will update the Issue/Update's content accordingly. Conversely,
     * modification/deletion of the associated IssueTemplate do not affect the attributes of this field.
     */
    template?: pulumi.Input<inputs.IssueTemplate>;
    /**
     * The title of the Issue, in the default translation.
     */
    title?: pulumi.Input<string>;
    /**
     * The title of the Issue, translated into multiple languages. Map keys express the language each string value is to be
     * interpreted in. The `original` field of this map denotes the language used for the non-`_translations` version of this
     * attribute.
     */
    titleTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An optional list of Updates to create when initially creating the Issue. When creating a sequence of Updates, ensure
     * that their `effective_after` timestamps do not encroach upon one another, or an error will occur. > This field is
     * primarily meant for assisting with the creation of retrospective Issues, rather than creating new Updates as they arise.
     * Please use the full hund.IssueUpdate resource instead, rather than configuring this field directly.
     */
    updates?: pulumi.Input<pulumi.Input<inputs.IssueUpdate>[]>;
}
