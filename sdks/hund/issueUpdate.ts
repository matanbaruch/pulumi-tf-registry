// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IssueUpdate extends pulumi.CustomResource {
    /**
     * Get an existing IssueUpdate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IssueUpdateState, opts?: pulumi.CustomResourceOptions): IssueUpdate {
        return new IssueUpdate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hund:index/issueUpdate:IssueUpdate';

    /**
     * Returns true if the given object is an instance of IssueUpdate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IssueUpdate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IssueUpdate.__pulumiType;
    }

    public readonly archiveOnDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The body text of this Update in raw markdown, in the default translation.
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * An HTML rendered view of the markdown in `body`, in the default translation.
     */
    public /*out*/ readonly bodyHtml!: pulumi.Output<string>;
    /**
     * An HTML rendered view of the markdown in `body`, translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    public /*out*/ readonly bodyHtmlTranslations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The body text of this Update in raw markdown, translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    public readonly bodyTranslations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The timestamp at which this Update was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * When true, denotes that this Update is the latest update on this Issue (hence, the "effective" Update according to
     * `effective_after`).
     */
    public /*out*/ readonly effective!: pulumi.Output<boolean>;
    /**
     * The time after which this Update is considered the latest Update on its Issue, until the `effective_after` time of the
     * Update succeeding this one, if one exists.
     */
    public readonly effectiveAfter!: pulumi.Output<string>;
    /**
     * The Issue that this Update pertains to.
     */
    public readonly issueId!: pulumi.Output<string>;
    /**
     * The label applied to this update, as well as the issue at large when this Update is the *latest* Update in the Issue.
     * The label can be thought of as the "state" of the Issue as of this Update (e.g. "Problem Identified", "Monitoring",
     * "Resolved").
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * Whether this Update reopened the Issue if it was already resolved in an Update before this one.
     */
    public /*out*/ readonly reopening!: pulumi.Output<boolean>;
    /**
     * The integer state which overrides the state of affected Components in `component`. A value of `null` indicates no
     * override is present.
     */
    public readonly stateOverride!: pulumi.Output<number | undefined>;
    /**
     * An application of an IssueTemplate, which contains a copy of the template fields of the associated IssueTemplate, as
     * well as an object of user-defined variables that parameterize the template. > Alterations to this field do not affect
     * the associated `issue_template_id`, and will update the Issue/Update's content accordingly. Conversely,
     * modification/deletion of the associated IssueTemplate do not affect the attributes of this field.
     */
    public readonly template!: pulumi.Output<outputs.IssueUpdateTemplate | undefined>;
    /**
     * The timestamp at which this Update was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a IssueUpdate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IssueUpdateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IssueUpdateArgs | IssueUpdateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IssueUpdateState | undefined;
            resourceInputs["archiveOnDestroy"] = state ? state.archiveOnDestroy : undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["bodyHtml"] = state ? state.bodyHtml : undefined;
            resourceInputs["bodyHtmlTranslations"] = state ? state.bodyHtmlTranslations : undefined;
            resourceInputs["bodyTranslations"] = state ? state.bodyTranslations : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["effective"] = state ? state.effective : undefined;
            resourceInputs["effectiveAfter"] = state ? state.effectiveAfter : undefined;
            resourceInputs["issueId"] = state ? state.issueId : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["reopening"] = state ? state.reopening : undefined;
            resourceInputs["stateOverride"] = state ? state.stateOverride : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as IssueUpdateArgs | undefined;
            if ((!args || args.issueId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issueId'");
            }
            resourceInputs["archiveOnDestroy"] = args ? args.archiveOnDestroy : undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["bodyTranslations"] = args ? args.bodyTranslations : undefined;
            resourceInputs["effectiveAfter"] = args ? args.effectiveAfter : undefined;
            resourceInputs["issueId"] = args ? args.issueId : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["stateOverride"] = args ? args.stateOverride : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["bodyHtml"] = undefined /*out*/;
            resourceInputs["bodyHtmlTranslations"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["effective"] = undefined /*out*/;
            resourceInputs["reopening"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IssueUpdate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IssueUpdate resources.
 */
export interface IssueUpdateState {
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * The body text of this Update in raw markdown, in the default translation.
     */
    body?: pulumi.Input<string>;
    /**
     * An HTML rendered view of the markdown in `body`, in the default translation.
     */
    bodyHtml?: pulumi.Input<string>;
    /**
     * An HTML rendered view of the markdown in `body`, translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyHtmlTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The body text of this Update in raw markdown, translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timestamp at which this Update was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * When true, denotes that this Update is the latest update on this Issue (hence, the "effective" Update according to
     * `effective_after`).
     */
    effective?: pulumi.Input<boolean>;
    /**
     * The time after which this Update is considered the latest Update on its Issue, until the `effective_after` time of the
     * Update succeeding this one, if one exists.
     */
    effectiveAfter?: pulumi.Input<string>;
    /**
     * The Issue that this Update pertains to.
     */
    issueId?: pulumi.Input<string>;
    /**
     * The label applied to this update, as well as the issue at large when this Update is the *latest* Update in the Issue.
     * The label can be thought of as the "state" of the Issue as of this Update (e.g. "Problem Identified", "Monitoring",
     * "Resolved").
     */
    label?: pulumi.Input<string>;
    /**
     * Whether this Update reopened the Issue if it was already resolved in an Update before this one.
     */
    reopening?: pulumi.Input<boolean>;
    /**
     * The integer state which overrides the state of affected Components in `component`. A value of `null` indicates no
     * override is present.
     */
    stateOverride?: pulumi.Input<number>;
    /**
     * An application of an IssueTemplate, which contains a copy of the template fields of the associated IssueTemplate, as
     * well as an object of user-defined variables that parameterize the template. > Alterations to this field do not affect
     * the associated `issue_template_id`, and will update the Issue/Update's content accordingly. Conversely,
     * modification/deletion of the associated IssueTemplate do not affect the attributes of this field.
     */
    template?: pulumi.Input<inputs.IssueUpdateTemplate>;
    /**
     * The timestamp at which this Update was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IssueUpdate resource.
 */
export interface IssueUpdateArgs {
    archiveOnDestroy?: pulumi.Input<boolean>;
    /**
     * The body text of this Update in raw markdown, in the default translation.
     */
    body?: pulumi.Input<string>;
    /**
     * The body text of this Update in raw markdown, translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time after which this Update is considered the latest Update on its Issue, until the `effective_after` time of the
     * Update succeeding this one, if one exists.
     */
    effectiveAfter?: pulumi.Input<string>;
    /**
     * The Issue that this Update pertains to.
     */
    issueId: pulumi.Input<string>;
    /**
     * The label applied to this update, as well as the issue at large when this Update is the *latest* Update in the Issue.
     * The label can be thought of as the "state" of the Issue as of this Update (e.g. "Problem Identified", "Monitoring",
     * "Resolved").
     */
    label?: pulumi.Input<string>;
    /**
     * The integer state which overrides the state of affected Components in `component`. A value of `null` indicates no
     * override is present.
     */
    stateOverride?: pulumi.Input<number>;
    /**
     * An application of an IssueTemplate, which contains a copy of the template fields of the associated IssueTemplate, as
     * well as an object of user-defined variables that parameterize the template. > Alterations to this field do not affect
     * the associated `issue_template_id`, and will update the Issue/Update's content accordingly. Conversely,
     * modification/deletion of the associated IssueTemplate do not affect the attributes of this field.
     */
    template?: pulumi.Input<inputs.IssueUpdateTemplate>;
}
