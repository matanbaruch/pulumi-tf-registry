// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IssueTemplate extends pulumi.CustomResource {
    /**
     * Get an existing IssueTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IssueTemplateState, opts?: pulumi.CustomResourceOptions): IssueTemplate {
        return new IssueTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'hund:index/issueTemplate:IssueTemplate';

    /**
     * Returns true if the given object is an instance of IssueTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IssueTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IssueTemplate.__pulumiType;
    }

    /**
     * The body to use for an Issue/Update applied against this template. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), in the default translation.
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * The body to use for an Issue/Update applied against this template. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    public readonly bodyTranslations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The timestamp at which this IssueTemplate was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The "kind" of this IssueTemplate. This field can be either `issue` or `update`, depending on whether this IssueTemplate
     * can be applied to an Issue or Issue Update, respectively.
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * The label to use for an Issue/Update applied against this template.
     */
    public readonly label!: pulumi.Output<string | undefined>;
    /**
     * An internal name for identifying this IssueTemplate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * When `kind` is `issue`, then the applied Issue will take on this title. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), in the default translation.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * When `kind` is `issue`, then the applied Issue will take on this title. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    public readonly titleTranslations!: pulumi.Output<{[key: string]: string}>;
    /**
     * The timestamp at which this IssueTemplate was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * An object defining a set of typed variables that can be provided in an application of this IssueTemplate. The variables
     * can be accessed from any field in the IssueTemplate supporting Liquid.
     */
    public readonly variables!: pulumi.Output<{[key: string]: outputs.IssueTemplateVariables} | undefined>;

    /**
     * Create a IssueTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IssueTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IssueTemplateArgs | IssueTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IssueTemplateState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["bodyTranslations"] = state ? state.bodyTranslations : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["titleTranslations"] = state ? state.titleTranslations : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as IssueTemplateArgs | undefined;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["bodyTranslations"] = args ? args.bodyTranslations : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["titleTranslations"] = args ? args.titleTranslations : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IssueTemplate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IssueTemplate resources.
 */
export interface IssueTemplateState {
    /**
     * The body to use for an Issue/Update applied against this template. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), in the default translation.
     */
    body?: pulumi.Input<string>;
    /**
     * The body to use for an Issue/Update applied against this template. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timestamp at which this IssueTemplate was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The "kind" of this IssueTemplate. This field can be either `issue` or `update`, depending on whether this IssueTemplate
     * can be applied to an Issue or Issue Update, respectively.
     */
    kind?: pulumi.Input<string>;
    /**
     * The label to use for an Issue/Update applied against this template.
     */
    label?: pulumi.Input<string>;
    /**
     * An internal name for identifying this IssueTemplate.
     */
    name?: pulumi.Input<string>;
    /**
     * When `kind` is `issue`, then the applied Issue will take on this title. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), in the default translation.
     */
    title?: pulumi.Input<string>;
    /**
     * When `kind` is `issue`, then the applied Issue will take on this title. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    titleTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The timestamp at which this IssueTemplate was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * An object defining a set of typed variables that can be provided in an application of this IssueTemplate. The variables
     * can be accessed from any field in the IssueTemplate supporting Liquid.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<inputs.IssueTemplateVariables>}>;
}

/**
 * The set of arguments for constructing a IssueTemplate resource.
 */
export interface IssueTemplateArgs {
    /**
     * The body to use for an Issue/Update applied against this template. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), in the default translation.
     */
    body?: pulumi.Input<string>;
    /**
     * The body to use for an Issue/Update applied against this template. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    bodyTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The "kind" of this IssueTemplate. This field can be either `issue` or `update`, depending on whether this IssueTemplate
     * can be applied to an Issue or Issue Update, respectively.
     */
    kind: pulumi.Input<string>;
    /**
     * The label to use for an Issue/Update applied against this template.
     */
    label?: pulumi.Input<string>;
    /**
     * An internal name for identifying this IssueTemplate.
     */
    name?: pulumi.Input<string>;
    /**
     * When `kind` is `issue`, then the applied Issue will take on this title. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), in the default translation.
     */
    title?: pulumi.Input<string>;
    /**
     * When `kind` is `issue`, then the applied Issue will take on this title. This field supports [Liquid
     * templating](https://shopify.github.io/liquid/), translated into multiple languages. Map keys express the language each
     * string value is to be interpreted in. The `original` field of this map denotes the language used for the
     * non-`_translations` version of this attribute.
     */
    titleTranslations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * An object defining a set of typed variables that can be provided in an application of this IssueTemplate. The variables
     * can be accessed from any field in the IssueTemplate supporting Liquid.
     */
    variables?: pulumi.Input<{[key: string]: pulumi.Input<inputs.IssueTemplateVariables>}>;
}
