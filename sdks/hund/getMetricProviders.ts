// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMetricProviders(args?: GetMetricProvidersArgs, opts?: pulumi.InvokeOptions): Promise<GetMetricProvidersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("hund:index/getMetricProviders:getMetricProviders", {
        "default": args.default,
        "watchdog": args.watchdog,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getMetricProviders.
 */
export interface GetMetricProvidersArgs {
    default?: boolean;
    watchdog?: string;
}

/**
 * A collection of values returned by getMetricProviders.
 */
export interface GetMetricProvidersResult {
    readonly default?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly metricProviders: outputs.GetMetricProvidersMetricProvider[];
    readonly watchdog?: string;
}
export function getMetricProvidersOutput(args?: GetMetricProvidersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMetricProvidersResult> {
    return pulumi.output(args).apply((a: any) => getMetricProviders(a, opts))
}

/**
 * A collection of arguments for invoking getMetricProviders.
 */
export interface GetMetricProvidersOutputArgs {
    default?: pulumi.Input<boolean>;
    watchdog?: pulumi.Input<string>;
}
