// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetIndexesArgs, GetIndexesResult, GetIndexesOutputArgs } from "./getIndexes";
export const getIndexes: typeof import("./getIndexes").getIndexes = null as any;
export const getIndexesOutput: typeof import("./getIndexes").getIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getIndexes","getIndexesOutput"], () => require("./getIndexes"));

export { HecTokensArgs, HecTokensState } from "./hecTokens";
export type HecTokens = import("./hecTokens").HecTokens;
export const HecTokens: typeof import("./hecTokens").HecTokens = null as any;
utilities.lazyLoad(exports, ["HecTokens"], () => require("./hecTokens"));

export { IndexesArgs, IndexesState } from "./indexes";
export type Indexes = import("./indexes").Indexes;
export const Indexes: typeof import("./indexes").Indexes = null as any;
utilities.lazyLoad(exports, ["Indexes"], () => require("./indexes"));

export { IpAllowlistsArgs, IpAllowlistsState } from "./ipAllowlists";
export type IpAllowlists = import("./ipAllowlists").IpAllowlists;
export const IpAllowlists: typeof import("./ipAllowlists").IpAllowlists = null as any;
utilities.lazyLoad(exports, ["IpAllowlists"], () => require("./ipAllowlists"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RolesArgs, RolesState } from "./roles";
export type Roles = import("./roles").Roles;
export const Roles: typeof import("./roles").Roles = null as any;
utilities.lazyLoad(exports, ["Roles"], () => require("./roles"));

export { UsersArgs, UsersState } from "./users";
export type Users = import("./users").Users;
export const Users: typeof import("./users").Users = null as any;
utilities.lazyLoad(exports, ["Users"], () => require("./users"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "scp:index/hecTokens:HecTokens":
                return new HecTokens(name, <any>undefined, { urn })
            case "scp:index/indexes:Indexes":
                return new Indexes(name, <any>undefined, { urn })
            case "scp:index/ipAllowlists:IpAllowlists":
                return new IpAllowlists(name, <any>undefined, { urn })
            case "scp:index/roles:Roles":
                return new Roles(name, <any>undefined, { urn })
            case "scp:index/users:Users":
                return new Users(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("scp", "index/hecTokens", _module)
pulumi.runtime.registerResourceModule("scp", "index/indexes", _module)
pulumi.runtime.registerResourceModule("scp", "index/ipAllowlists", _module)
pulumi.runtime.registerResourceModule("scp", "index/roles", _module)
pulumi.runtime.registerResourceModule("scp", "index/users", _module)
pulumi.runtime.registerResourcePackage("scp", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:scp") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
