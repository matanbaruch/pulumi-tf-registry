// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class HecTokens extends pulumi.CustomResource {
    /**
     * Get an existing HecTokens resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HecTokensState, opts?: pulumi.CustomResourceOptions): HecTokens {
        return new HecTokens(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scp:index/hecTokens:HecTokens';

    /**
     * Returns true if the given object is an instance of HecTokens.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HecTokens {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HecTokens.__pulumiType;
    }

    /**
     * Set of indexes allowed for events with this token
     */
    public readonly allowedIndexes!: pulumi.Output<string[]>;
    /**
     * Index to store generated events. Must not be an empty string. If allowed_indexes is provided, default_index must be one
     * of allowed_indexes
     */
    public readonly defaultIndex!: pulumi.Output<string>;
    /**
     * Default source for events with this token
     */
    public readonly defaultSource!: pulumi.Output<string | undefined>;
    /**
     * Default sourcetype for events with this token
     */
    public readonly defaultSourcetype!: pulumi.Output<string | undefined>;
    /**
     * Input disabled indicator: false = Input Not disabled, true = Input disabled
     */
    public readonly disabled!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    public readonly token!: pulumi.Output<string>;
    /**
     * Indexer acknowledgement for this token: false = disabled, true = enabled
     */
    public readonly useAck!: pulumi.Output<boolean>;

    /**
     * Create a HecTokens resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HecTokensArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HecTokensArgs | HecTokensState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HecTokensState | undefined;
            resourceInputs["allowedIndexes"] = state ? state.allowedIndexes : undefined;
            resourceInputs["defaultIndex"] = state ? state.defaultIndex : undefined;
            resourceInputs["defaultSource"] = state ? state.defaultSource : undefined;
            resourceInputs["defaultSourcetype"] = state ? state.defaultSourcetype : undefined;
            resourceInputs["disabled"] = state ? state.disabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["useAck"] = state ? state.useAck : undefined;
        } else {
            const args = argsOrState as HecTokensArgs | undefined;
            resourceInputs["allowedIndexes"] = args ? args.allowedIndexes : undefined;
            resourceInputs["defaultIndex"] = args ? args.defaultIndex : undefined;
            resourceInputs["defaultSource"] = args ? args.defaultSource : undefined;
            resourceInputs["defaultSourcetype"] = args ? args.defaultSourcetype : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["useAck"] = args ? args.useAck : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HecTokens.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering HecTokens resources.
 */
export interface HecTokensState {
    /**
     * Set of indexes allowed for events with this token
     */
    allowedIndexes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Index to store generated events. Must not be an empty string. If allowed_indexes is provided, default_index must be one
     * of allowed_indexes
     */
    defaultIndex?: pulumi.Input<string>;
    /**
     * Default source for events with this token
     */
    defaultSource?: pulumi.Input<string>;
    /**
     * Default sourcetype for events with this token
     */
    defaultSourcetype?: pulumi.Input<string>;
    /**
     * Input disabled indicator: false = Input Not disabled, true = Input disabled
     */
    disabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    /**
     * Indexer acknowledgement for this token: false = disabled, true = enabled
     */
    useAck?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a HecTokens resource.
 */
export interface HecTokensArgs {
    /**
     * Set of indexes allowed for events with this token
     */
    allowedIndexes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Index to store generated events. Must not be an empty string. If allowed_indexes is provided, default_index must be one
     * of allowed_indexes
     */
    defaultIndex?: pulumi.Input<string>;
    /**
     * Default source for events with this token
     */
    defaultSource?: pulumi.Input<string>;
    /**
     * Default sourcetype for events with this token
     */
    defaultSourcetype?: pulumi.Input<string>;
    /**
     * Input disabled indicator: false = Input Not disabled, true = Input disabled
     */
    disabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
    /**
     * Indexer acknowledgement for this token: false = disabled, true = enabled
     */
    useAck?: pulumi.Input<boolean>;
}
