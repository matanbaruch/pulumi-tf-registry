// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Roles extends pulumi.CustomResource {
    /**
     * Get an existing Roles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolesState, opts?: pulumi.CustomResourceOptions): Roles {
        return new Roles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scp:index/roles:Roles';

    /**
     * Returns true if the given object is an instance of Roles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Roles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Roles.__pulumiType;
    }

    /**
     * The capabilities attached to the role.
     */
    public readonly capabilities!: pulumi.Output<string[]>;
    /**
     * Maximum number of concurrently running real-time searches that all members of this role can have. The value must be a
     * non-negative number.
     */
    public readonly cumulativeRtSrchJobsQuota!: pulumi.Output<number>;
    /**
     * Maximum number of concurrently running historical searches that all members of this role can have. The value must be a
     * non-negative number.
     */
    public readonly cumulativeSrchJobsQuota!: pulumi.Output<number>;
    /**
     * Set the default app for this role.
     */
    public readonly defaultApp!: pulumi.Output<string>;
    /**
     * If 'imported_roles' or 'capabilities' contains the 'fsh_manage' capability, you must set this attribute to a value of
     * "Y". This header acknowledges that a role with the 'fsh_manage' capability can send search results outside the compliant
     * environment.
     */
    public readonly federatedSearchManageAck!: pulumi.Output<string | undefined>;
    /**
     * List of other roles and their associated capabilities that should be imported.
     */
    public readonly importedRoles!: pulumi.Output<string[]>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Maximum number of concurrently running real-time searches a member of this role can have. The value must be a
     * non-negative number.
     */
    public readonly rtSrchJobsQuota!: pulumi.Output<number>;
    /**
     * Maximum amount of disk space (MB) that can be used by search jobs of a user that belongs to this role. The value must be
     * a non-negative number.
     */
    public readonly srchDiskQuota!: pulumi.Output<number>;
    /**
     * List of search filters for this Role.
     */
    public readonly srchFilter!: pulumi.Output<string>;
    /**
     * List of indexes this role is allowed to search.
     */
    public readonly srchIndexesAlloweds!: pulumi.Output<string[]>;
    /**
     * List of indexes to search when no index is specified.
     */
    public readonly srchIndexesDefaults!: pulumi.Output<string[]>;
    /**
     * Maximum number of concurrently running historical searches a member of this role can have. The value must be a
     * non-negative number.
     */
    public readonly srchJobsQuota!: pulumi.Output<number>;
    /**
     * Maximum amount of time that searches of users from this role will be allowed to run. A value of -1 means unset, 0 means
     * infinite. Any other value is the amount of time in seconds, for example, 300 would mean 300s.
     */
    public readonly srchTimeEarliest!: pulumi.Output<number>;
    /**
     * Maximum time span of a search, in seconds. A value of -1 means unset, 0 means infinite. Any other value is the amount of
     * time in seconds, for example, 300 would mean 300s.
     */
    public readonly srchTimeWin!: pulumi.Output<number>;

    /**
     * Create a Roles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolesArgs | RolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolesState | undefined;
            resourceInputs["capabilities"] = state ? state.capabilities : undefined;
            resourceInputs["cumulativeRtSrchJobsQuota"] = state ? state.cumulativeRtSrchJobsQuota : undefined;
            resourceInputs["cumulativeSrchJobsQuota"] = state ? state.cumulativeSrchJobsQuota : undefined;
            resourceInputs["defaultApp"] = state ? state.defaultApp : undefined;
            resourceInputs["federatedSearchManageAck"] = state ? state.federatedSearchManageAck : undefined;
            resourceInputs["importedRoles"] = state ? state.importedRoles : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["rtSrchJobsQuota"] = state ? state.rtSrchJobsQuota : undefined;
            resourceInputs["srchDiskQuota"] = state ? state.srchDiskQuota : undefined;
            resourceInputs["srchFilter"] = state ? state.srchFilter : undefined;
            resourceInputs["srchIndexesAlloweds"] = state ? state.srchIndexesAlloweds : undefined;
            resourceInputs["srchIndexesDefaults"] = state ? state.srchIndexesDefaults : undefined;
            resourceInputs["srchJobsQuota"] = state ? state.srchJobsQuota : undefined;
            resourceInputs["srchTimeEarliest"] = state ? state.srchTimeEarliest : undefined;
            resourceInputs["srchTimeWin"] = state ? state.srchTimeWin : undefined;
        } else {
            const args = argsOrState as RolesArgs | undefined;
            resourceInputs["capabilities"] = args ? args.capabilities : undefined;
            resourceInputs["cumulativeRtSrchJobsQuota"] = args ? args.cumulativeRtSrchJobsQuota : undefined;
            resourceInputs["cumulativeSrchJobsQuota"] = args ? args.cumulativeSrchJobsQuota : undefined;
            resourceInputs["defaultApp"] = args ? args.defaultApp : undefined;
            resourceInputs["federatedSearchManageAck"] = args ? args.federatedSearchManageAck : undefined;
            resourceInputs["importedRoles"] = args ? args.importedRoles : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rtSrchJobsQuota"] = args ? args.rtSrchJobsQuota : undefined;
            resourceInputs["srchDiskQuota"] = args ? args.srchDiskQuota : undefined;
            resourceInputs["srchFilter"] = args ? args.srchFilter : undefined;
            resourceInputs["srchIndexesAlloweds"] = args ? args.srchIndexesAlloweds : undefined;
            resourceInputs["srchIndexesDefaults"] = args ? args.srchIndexesDefaults : undefined;
            resourceInputs["srchJobsQuota"] = args ? args.srchJobsQuota : undefined;
            resourceInputs["srchTimeEarliest"] = args ? args.srchTimeEarliest : undefined;
            resourceInputs["srchTimeWin"] = args ? args.srchTimeWin : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Roles.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Roles resources.
 */
export interface RolesState {
    /**
     * The capabilities attached to the role.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of concurrently running real-time searches that all members of this role can have. The value must be a
     * non-negative number.
     */
    cumulativeRtSrchJobsQuota?: pulumi.Input<number>;
    /**
     * Maximum number of concurrently running historical searches that all members of this role can have. The value must be a
     * non-negative number.
     */
    cumulativeSrchJobsQuota?: pulumi.Input<number>;
    /**
     * Set the default app for this role.
     */
    defaultApp?: pulumi.Input<string>;
    /**
     * If 'imported_roles' or 'capabilities' contains the 'fsh_manage' capability, you must set this attribute to a value of
     * "Y". This header acknowledges that a role with the 'fsh_manage' capability can send search results outside the compliant
     * environment.
     */
    federatedSearchManageAck?: pulumi.Input<string>;
    /**
     * List of other roles and their associated capabilities that should be imported.
     */
    importedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Maximum number of concurrently running real-time searches a member of this role can have. The value must be a
     * non-negative number.
     */
    rtSrchJobsQuota?: pulumi.Input<number>;
    /**
     * Maximum amount of disk space (MB) that can be used by search jobs of a user that belongs to this role. The value must be
     * a non-negative number.
     */
    srchDiskQuota?: pulumi.Input<number>;
    /**
     * List of search filters for this Role.
     */
    srchFilter?: pulumi.Input<string>;
    /**
     * List of indexes this role is allowed to search.
     */
    srchIndexesAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of indexes to search when no index is specified.
     */
    srchIndexesDefaults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of concurrently running historical searches a member of this role can have. The value must be a
     * non-negative number.
     */
    srchJobsQuota?: pulumi.Input<number>;
    /**
     * Maximum amount of time that searches of users from this role will be allowed to run. A value of -1 means unset, 0 means
     * infinite. Any other value is the amount of time in seconds, for example, 300 would mean 300s.
     */
    srchTimeEarliest?: pulumi.Input<number>;
    /**
     * Maximum time span of a search, in seconds. A value of -1 means unset, 0 means infinite. Any other value is the amount of
     * time in seconds, for example, 300 would mean 300s.
     */
    srchTimeWin?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Roles resource.
 */
export interface RolesArgs {
    /**
     * The capabilities attached to the role.
     */
    capabilities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of concurrently running real-time searches that all members of this role can have. The value must be a
     * non-negative number.
     */
    cumulativeRtSrchJobsQuota?: pulumi.Input<number>;
    /**
     * Maximum number of concurrently running historical searches that all members of this role can have. The value must be a
     * non-negative number.
     */
    cumulativeSrchJobsQuota?: pulumi.Input<number>;
    /**
     * Set the default app for this role.
     */
    defaultApp?: pulumi.Input<string>;
    /**
     * If 'imported_roles' or 'capabilities' contains the 'fsh_manage' capability, you must set this attribute to a value of
     * "Y". This header acknowledges that a role with the 'fsh_manage' capability can send search results outside the compliant
     * environment.
     */
    federatedSearchManageAck?: pulumi.Input<string>;
    /**
     * List of other roles and their associated capabilities that should be imported.
     */
    importedRoles?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * Maximum number of concurrently running real-time searches a member of this role can have. The value must be a
     * non-negative number.
     */
    rtSrchJobsQuota?: pulumi.Input<number>;
    /**
     * Maximum amount of disk space (MB) that can be used by search jobs of a user that belongs to this role. The value must be
     * a non-negative number.
     */
    srchDiskQuota?: pulumi.Input<number>;
    /**
     * List of search filters for this Role.
     */
    srchFilter?: pulumi.Input<string>;
    /**
     * List of indexes this role is allowed to search.
     */
    srchIndexesAlloweds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of indexes to search when no index is specified.
     */
    srchIndexesDefaults?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Maximum number of concurrently running historical searches a member of this role can have. The value must be a
     * non-negative number.
     */
    srchJobsQuota?: pulumi.Input<number>;
    /**
     * Maximum amount of time that searches of users from this role will be allowed to run. A value of -1 means unset, 0 means
     * infinite. Any other value is the amount of time in seconds, for example, 300 would mean 300s.
     */
    srchTimeEarliest?: pulumi.Input<number>;
    /**
     * Maximum time span of a search, in seconds. A value of -1 means unset, 0 means infinite. Any other value is the amount of
     * time in seconds, for example, 300 would mean 300s.
     */
    srchTimeWin?: pulumi.Input<number>;
}
