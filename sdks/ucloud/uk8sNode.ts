// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Uk8sNode extends pulumi.CustomResource {
    /**
     * Get an existing Uk8sNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Uk8sNodeState, opts?: pulumi.CustomResourceOptions): Uk8sNode {
        return new Uk8sNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:index/uk8sNode:Uk8sNode';

    /**
     * Returns true if the given object is an instance of Uk8sNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Uk8sNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Uk8sNode.__pulumiType;
    }

    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly bootDiskType!: pulumi.Output<string>;
    public readonly chargeType!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly dataDiskSize!: pulumi.Output<number>;
    public readonly dataDiskType!: pulumi.Output<string>;
    public readonly deleteDisksWithInstance!: pulumi.Output<boolean | undefined>;
    public readonly disableScheduleOnCreate!: pulumi.Output<boolean | undefined>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly initScript!: pulumi.Output<string | undefined>;
    public readonly instanceType!: pulumi.Output<string>;
    public /*out*/ readonly ipSets!: pulumi.Output<outputs.Uk8sNodeIpSet[]>;
    public readonly isolationGroup!: pulumi.Output<string>;
    public readonly minCpuPlatform!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.Uk8sNodeTimeouts | undefined>;
    public readonly userData!: pulumi.Output<string | undefined>;

    /**
     * Create a Uk8sNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Uk8sNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Uk8sNodeArgs | Uk8sNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Uk8sNodeState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bootDiskType"] = state ? state.bootDiskType : undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataDiskSize"] = state ? state.dataDiskSize : undefined;
            resourceInputs["dataDiskType"] = state ? state.dataDiskType : undefined;
            resourceInputs["deleteDisksWithInstance"] = state ? state.deleteDisksWithInstance : undefined;
            resourceInputs["disableScheduleOnCreate"] = state ? state.disableScheduleOnCreate : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initScript"] = state ? state.initScript : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["ipSets"] = state ? state.ipSets : undefined;
            resourceInputs["isolationGroup"] = state ? state.isolationGroup : undefined;
            resourceInputs["minCpuPlatform"] = state ? state.minCpuPlatform : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as Uk8sNodeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bootDiskType"] = args ? args.bootDiskType : undefined;
            resourceInputs["chargeType"] = args ? args.chargeType : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dataDiskSize"] = args ? args.dataDiskSize : undefined;
            resourceInputs["dataDiskType"] = args ? args.dataDiskType : undefined;
            resourceInputs["deleteDisksWithInstance"] = args ? args.deleteDisksWithInstance : undefined;
            resourceInputs["disableScheduleOnCreate"] = args ? args.disableScheduleOnCreate : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["initScript"] = args ? args.initScript : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["isolationGroup"] = args ? args.isolationGroup : undefined;
            resourceInputs["minCpuPlatform"] = args ? args.minCpuPlatform : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["ipSets"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Uk8sNode.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Uk8sNode resources.
 */
export interface Uk8sNodeState {
    availabilityZone?: pulumi.Input<string>;
    bootDiskType?: pulumi.Input<string>;
    chargeType?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    dataDiskSize?: pulumi.Input<number>;
    dataDiskType?: pulumi.Input<string>;
    deleteDisksWithInstance?: pulumi.Input<boolean>;
    disableScheduleOnCreate?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    expireTime?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    initScript?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    ipSets?: pulumi.Input<pulumi.Input<inputs.Uk8sNodeIpSet>[]>;
    isolationGroup?: pulumi.Input<string>;
    minCpuPlatform?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Uk8sNodeTimeouts>;
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Uk8sNode resource.
 */
export interface Uk8sNodeArgs {
    availabilityZone: pulumi.Input<string>;
    bootDiskType?: pulumi.Input<string>;
    chargeType?: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    dataDiskSize?: pulumi.Input<number>;
    dataDiskType?: pulumi.Input<string>;
    deleteDisksWithInstance?: pulumi.Input<boolean>;
    disableScheduleOnCreate?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    imageId?: pulumi.Input<string>;
    initScript?: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    isolationGroup?: pulumi.Input<string>;
    minCpuPlatform?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.Uk8sNodeTimeouts>;
    userData?: pulumi.Input<string>;
}
