// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BaremetalInstance extends pulumi.CustomResource {
    /**
     * Get an existing BaremetalInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BaremetalInstanceState, opts?: pulumi.CustomResourceOptions): BaremetalInstance {
        return new BaremetalInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:index/baremetalInstance:BaremetalInstance';

    /**
     * Returns true if the given object is an instance of BaremetalInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BaremetalInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BaremetalInstance.__pulumiType;
    }

    public readonly allowStoppingForResizing!: pulumi.Output<boolean | undefined>;
    public readonly allowStoppingForUpdate!: pulumi.Output<boolean | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly bootDiskId!: pulumi.Output<string>;
    public readonly bootDiskSize!: pulumi.Output<number | undefined>;
    public readonly bootDiskType!: pulumi.Output<string | undefined>;
    public readonly chargeType!: pulumi.Output<string | undefined>;
    public readonly dataDisks!: pulumi.Output<outputs.BaremetalInstanceDataDisks | undefined>;
    public readonly deleteDisksWithInstance!: pulumi.Output<boolean | undefined>;
    public readonly deleteEipsWithInstance!: pulumi.Output<boolean | undefined>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public readonly imageId!: pulumi.Output<string>;
    public readonly instanceType!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkInterface!: pulumi.Output<outputs.BaremetalInstanceNetworkInterface | undefined>;
    public readonly privateIp!: pulumi.Output<string>;
    public readonly raidType!: pulumi.Output<string | undefined>;
    public /*out*/ readonly rdmaClusterId!: pulumi.Output<string>;
    public readonly remark!: pulumi.Output<string | undefined>;
    public readonly rootPassword!: pulumi.Output<string | undefined>;
    public readonly securityGroup!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tag!: pulumi.Output<string | undefined>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a BaremetalInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BaremetalInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BaremetalInstanceArgs | BaremetalInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BaremetalInstanceState | undefined;
            resourceInputs["allowStoppingForResizing"] = state ? state.allowStoppingForResizing : undefined;
            resourceInputs["allowStoppingForUpdate"] = state ? state.allowStoppingForUpdate : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bootDiskId"] = state ? state.bootDiskId : undefined;
            resourceInputs["bootDiskSize"] = state ? state.bootDiskSize : undefined;
            resourceInputs["bootDiskType"] = state ? state.bootDiskType : undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["deleteDisksWithInstance"] = state ? state.deleteDisksWithInstance : undefined;
            resourceInputs["deleteEipsWithInstance"] = state ? state.deleteEipsWithInstance : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkInterface"] = state ? state.networkInterface : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["raidType"] = state ? state.raidType : undefined;
            resourceInputs["rdmaClusterId"] = state ? state.rdmaClusterId : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["rootPassword"] = state ? state.rootPassword : undefined;
            resourceInputs["securityGroup"] = state ? state.securityGroup : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as BaremetalInstanceArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.imageId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageId'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["allowStoppingForResizing"] = args ? args.allowStoppingForResizing : undefined;
            resourceInputs["allowStoppingForUpdate"] = args ? args.allowStoppingForUpdate : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bootDiskSize"] = args ? args.bootDiskSize : undefined;
            resourceInputs["bootDiskType"] = args ? args.bootDiskType : undefined;
            resourceInputs["chargeType"] = args ? args.chargeType : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["deleteDisksWithInstance"] = args ? args.deleteDisksWithInstance : undefined;
            resourceInputs["deleteEipsWithInstance"] = args ? args.deleteEipsWithInstance : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkInterface"] = args ? args.networkInterface : undefined;
            resourceInputs["privateIp"] = args ? args.privateIp : undefined;
            resourceInputs["raidType"] = args ? args.raidType : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["rootPassword"] = args?.rootPassword ? pulumi.secret(args.rootPassword) : undefined;
            resourceInputs["securityGroup"] = args ? args.securityGroup : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["bootDiskId"] = undefined /*out*/;
            resourceInputs["rdmaClusterId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["rootPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(BaremetalInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BaremetalInstance resources.
 */
export interface BaremetalInstanceState {
    allowStoppingForResizing?: pulumi.Input<boolean>;
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    availabilityZone?: pulumi.Input<string>;
    bootDiskId?: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    bootDiskType?: pulumi.Input<string>;
    chargeType?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<inputs.BaremetalInstanceDataDisks>;
    deleteDisksWithInstance?: pulumi.Input<boolean>;
    deleteEipsWithInstance?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    imageId?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterface?: pulumi.Input<inputs.BaremetalInstanceNetworkInterface>;
    privateIp?: pulumi.Input<string>;
    raidType?: pulumi.Input<string>;
    rdmaClusterId?: pulumi.Input<string>;
    remark?: pulumi.Input<string>;
    rootPassword?: pulumi.Input<string>;
    securityGroup?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BaremetalInstance resource.
 */
export interface BaremetalInstanceArgs {
    allowStoppingForResizing?: pulumi.Input<boolean>;
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    availabilityZone: pulumi.Input<string>;
    bootDiskSize?: pulumi.Input<number>;
    bootDiskType?: pulumi.Input<string>;
    chargeType?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<inputs.BaremetalInstanceDataDisks>;
    deleteDisksWithInstance?: pulumi.Input<boolean>;
    deleteEipsWithInstance?: pulumi.Input<boolean>;
    duration?: pulumi.Input<number>;
    imageId: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterface?: pulumi.Input<inputs.BaremetalInstanceNetworkInterface>;
    privateIp?: pulumi.Input<string>;
    raidType?: pulumi.Input<string>;
    remark?: pulumi.Input<string>;
    rootPassword?: pulumi.Input<string>;
    securityGroup?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}
