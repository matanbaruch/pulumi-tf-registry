// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AntiDdosRule extends pulumi.CustomResource {
    /**
     * Get an existing AntiDdosRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AntiDdosRuleState, opts?: pulumi.CustomResourceOptions): AntiDdosRule {
        return new AntiDdosRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:index/antiDdosRule:AntiDdosRule';

    /**
     * Returns true if the given object is an instance of AntiDdosRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AntiDdosRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AntiDdosRule.__pulumiType;
    }

    public readonly backupServer!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly comment!: pulumi.Output<string>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly ip!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number | undefined>;
    public readonly realServerDetection!: pulumi.Output<boolean | undefined>;
    public readonly realServerType!: pulumi.Output<string>;
    public readonly realServers!: pulumi.Output<outputs.AntiDdosRuleRealServer[]>;
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    public /*out*/ readonly ruleIndex!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly toaId!: pulumi.Output<number | undefined>;

    /**
     * Create a AntiDdosRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AntiDdosRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AntiDdosRuleArgs | AntiDdosRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AntiDdosRuleState | undefined;
            resourceInputs["backupServer"] = state ? state.backupServer : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["realServerDetection"] = state ? state.realServerDetection : undefined;
            resourceInputs["realServerType"] = state ? state.realServerType : undefined;
            resourceInputs["realServers"] = state ? state.realServers : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["ruleIndex"] = state ? state.ruleIndex : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["toaId"] = state ? state.toaId : undefined;
        } else {
            const args = argsOrState as AntiDdosRuleArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.ip === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ip'");
            }
            if ((!args || args.realServerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realServerType'");
            }
            if ((!args || args.realServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'realServers'");
            }
            resourceInputs["backupServer"] = args ? args.backupServer : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["ip"] = args ? args.ip : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["realServerDetection"] = args ? args.realServerDetection : undefined;
            resourceInputs["realServerType"] = args ? args.realServerType : undefined;
            resourceInputs["realServers"] = args ? args.realServers : undefined;
            resourceInputs["toaId"] = args ? args.toaId : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
            resourceInputs["ruleIndex"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AntiDdosRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AntiDdosRule resources.
 */
export interface AntiDdosRuleState {
    backupServer?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    comment?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    ip?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    realServerDetection?: pulumi.Input<boolean>;
    realServerType?: pulumi.Input<string>;
    realServers?: pulumi.Input<pulumi.Input<inputs.AntiDdosRuleRealServer>[]>;
    ruleId?: pulumi.Input<string>;
    ruleIndex?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    toaId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AntiDdosRule resource.
 */
export interface AntiDdosRuleArgs {
    backupServer?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    comment?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    realServerDetection?: pulumi.Input<boolean>;
    realServerType: pulumi.Input<string>;
    realServers: pulumi.Input<pulumi.Input<inputs.AntiDdosRuleRealServer>[]>;
    toaId?: pulumi.Input<number>;
}
