// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getImages(args?: GetImagesArgs, opts?: pulumi.InvokeOptions): Promise<GetImagesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ucloud:index/getImages:getImages", {
        "availabilityZone": args.availabilityZone,
        "id": args.id,
        "ids": args.ids,
        "imageId": args.imageId,
        "imageType": args.imageType,
        "mostRecent": args.mostRecent,
        "nameRegex": args.nameRegex,
        "osType": args.osType,
        "outputFile": args.outputFile,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getImages.
 */
export interface GetImagesArgs {
    availabilityZone?: string;
    id?: string;
    ids?: string[];
    imageId?: string;
    imageType?: string;
    mostRecent?: boolean;
    nameRegex?: string;
    osType?: string;
    outputFile?: string;
}

/**
 * A collection of values returned by getImages.
 */
export interface GetImagesResult {
    readonly availabilityZone?: string;
    readonly id: string;
    readonly ids: string[];
    readonly imageId?: string;
    readonly imageType?: string;
    readonly images: outputs.GetImagesImage[];
    readonly mostRecent?: boolean;
    readonly nameRegex?: string;
    readonly osType?: string;
    readonly outputFile?: string;
    readonly totalCount: number;
}
export function getImagesOutput(args?: GetImagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImagesResult> {
    return pulumi.output(args).apply((a: any) => getImages(a, opts))
}

/**
 * A collection of arguments for invoking getImages.
 */
export interface GetImagesOutputArgs {
    availabilityZone?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    imageId?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    mostRecent?: pulumi.Input<boolean>;
    nameRegex?: pulumi.Input<string>;
    osType?: pulumi.Input<string>;
    outputFile?: pulumi.Input<string>;
}
