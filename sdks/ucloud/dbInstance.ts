// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DbInstance extends pulumi.CustomResource {
    /**
     * Get an existing DbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DbInstanceState, opts?: pulumi.CustomResourceOptions): DbInstance {
        return new DbInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ucloud:index/dbInstance:DbInstance';

    /**
     * Returns true if the given object is an instance of DbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbInstance.__pulumiType;
    }

    public readonly allowStoppingForUpdate!: pulumi.Output<boolean | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly backupBeginTime!: pulumi.Output<number>;
    public readonly backupBlackLists!: pulumi.Output<string[]>;
    public readonly backupCount!: pulumi.Output<number | undefined>;
    public readonly backupDate!: pulumi.Output<string>;
    public readonly chargeType!: pulumi.Output<string>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    public readonly duration!: pulumi.Output<number | undefined>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public /*out*/ readonly expireTime!: pulumi.Output<string>;
    public readonly fromBackupId!: pulumi.Output<number | undefined>;
    public readonly instanceStorage!: pulumi.Output<number>;
    public readonly instanceType!: pulumi.Output<string>;
    public /*out*/ readonly modifyTime!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly parameterGroup!: pulumi.Output<string>;
    public readonly password!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public readonly standbyZone!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly subnetId!: pulumi.Output<string>;
    public readonly tag!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.DbInstanceTimeouts | undefined>;
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a DbInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DbInstanceArgs | DbInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DbInstanceState | undefined;
            resourceInputs["allowStoppingForUpdate"] = state ? state.allowStoppingForUpdate : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupBeginTime"] = state ? state.backupBeginTime : undefined;
            resourceInputs["backupBlackLists"] = state ? state.backupBlackLists : undefined;
            resourceInputs["backupCount"] = state ? state.backupCount : undefined;
            resourceInputs["backupDate"] = state ? state.backupDate : undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["expireTime"] = state ? state.expireTime : undefined;
            resourceInputs["fromBackupId"] = state ? state.fromBackupId : undefined;
            resourceInputs["instanceStorage"] = state ? state.instanceStorage : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["modifyTime"] = state ? state.modifyTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameterGroup"] = state ? state.parameterGroup : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["standbyZone"] = state ? state.standbyZone : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as DbInstanceArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.engineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            if ((!args || args.instanceStorage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceStorage'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            resourceInputs["allowStoppingForUpdate"] = args ? args.allowStoppingForUpdate : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupBeginTime"] = args ? args.backupBeginTime : undefined;
            resourceInputs["backupBlackLists"] = args ? args.backupBlackLists : undefined;
            resourceInputs["backupCount"] = args ? args.backupCount : undefined;
            resourceInputs["backupDate"] = args ? args.backupDate : undefined;
            resourceInputs["chargeType"] = args ? args.chargeType : undefined;
            resourceInputs["duration"] = args ? args.duration : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["fromBackupId"] = args ? args.fromBackupId : undefined;
            resourceInputs["instanceStorage"] = args ? args.instanceStorage : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameterGroup"] = args ? args.parameterGroup : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["standbyZone"] = args ? args.standbyZone : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["modifyTime"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DbInstance.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DbInstance resources.
 */
export interface DbInstanceState {
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    availabilityZone?: pulumi.Input<string>;
    backupBeginTime?: pulumi.Input<number>;
    backupBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    backupCount?: pulumi.Input<number>;
    backupDate?: pulumi.Input<string>;
    chargeType?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    expireTime?: pulumi.Input<string>;
    fromBackupId?: pulumi.Input<number>;
    instanceStorage?: pulumi.Input<number>;
    instanceType?: pulumi.Input<string>;
    modifyTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameterGroup?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    privateIp?: pulumi.Input<string>;
    standbyZone?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DbInstance resource.
 */
export interface DbInstanceArgs {
    allowStoppingForUpdate?: pulumi.Input<boolean>;
    availabilityZone: pulumi.Input<string>;
    backupBeginTime?: pulumi.Input<number>;
    backupBlackLists?: pulumi.Input<pulumi.Input<string>[]>;
    backupCount?: pulumi.Input<number>;
    backupDate?: pulumi.Input<string>;
    chargeType?: pulumi.Input<string>;
    duration?: pulumi.Input<number>;
    engine: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    fromBackupId?: pulumi.Input<number>;
    instanceStorage: pulumi.Input<number>;
    instanceType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameterGroup?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    standbyZone?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.DbInstanceTimeouts>;
    vpcId?: pulumi.Input<string>;
}
