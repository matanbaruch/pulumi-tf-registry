// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AntiDdosRuleRealServer {
    address: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface BaremetalInstanceDataDisks {
    deviceName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface BaremetalInstanceNetworkInterface {
    eipBandwidth: pulumi.Input<number>;
    eipChargeMode: pulumi.Input<string>;
    eipInternetType: pulumi.Input<string>;
}

export interface DbInstanceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface EipIpSet {
    internetType: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface GetIamPolicyDocumentStatement {
    actions: string[];
    effect?: string;
    resources?: string[];
}

export interface GetIamPolicyDocumentStatementArgs {
    actions: pulumi.Input<pulumi.Input<string>[]>;
    effect?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface InstanceDataDisks {
    size: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface InstanceDiskSet {
    id: pulumi.Input<string>;
    isBoot: pulumi.Input<boolean>;
    size: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface InstanceIpSet {
    internetType: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface InstanceNetworkInterface {
    eipBandwidth: pulumi.Input<number>;
    eipChargeMode: pulumi.Input<string>;
    eipInternetType: pulumi.Input<string>;
}

export interface InstanceTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface LbIpSet {
    internetType: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface MemcacheInstanceIpSet {
    ip: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface ProviderAssumeRole {
    /**
     * The duration of the role session. Valid time units are ns, us (or Âµs), ms, s, h, or m.
     */
    duration?: pulumi.Input<string>;
    /**
     * IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
     */
    policy?: pulumi.Input<string>;
    /**
     * UCloud Resource Name (URN) of an IAM Role to assume prior to making API calls.
     */
    roleUrn: pulumi.Input<string>;
    /**
     * An identifier for the assumed role session.
     */
    sessionName: pulumi.Input<string>;
}

export interface RedisInstanceIpSet {
    ip: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface SecurityGroupRule {
    cidrBlock?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    portRange?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface Uk8sClusterKubeProxy {
    mode?: pulumi.Input<string>;
}

export interface Uk8sClusterMaster {
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    bootDiskType?: pulumi.Input<string>;
    dataDiskSize?: pulumi.Input<number>;
    dataDiskType?: pulumi.Input<string>;
    instanceType: pulumi.Input<string>;
    minCpuPlatform?: pulumi.Input<string>;
}

export interface Uk8sClusterTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface Uk8sNodeIpSet {
    internetType: pulumi.Input<string>;
    ip: pulumi.Input<string>;
}

export interface Uk8sNodeTimeouts {
    create?: pulumi.Input<string>;
    delete?: pulumi.Input<string>;
    update?: pulumi.Input<string>;
}

export interface VpcNetworkInfo {
    cidrBlock: pulumi.Input<string>;
}

export interface VpnConnectionIkeConfig {
    authenticationAlgorithm?: pulumi.Input<string>;
    dhGroup?: pulumi.Input<string>;
    encryptionAlgorithm?: pulumi.Input<string>;
    exchangeMode?: pulumi.Input<string>;
    ikeVersion?: pulumi.Input<string>;
    localId?: pulumi.Input<string>;
    preSharedKey: pulumi.Input<string>;
    remoteId?: pulumi.Input<string>;
    saLifeTime?: pulumi.Input<number>;
}

export interface VpnConnectionIpsecConfig {
    authenticationAlgorithm?: pulumi.Input<string>;
    encryptionAlgorithm?: pulumi.Input<string>;
    localSubnetIds: pulumi.Input<pulumi.Input<string>[]>;
    pfsDhGroup?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    remoteSubnets: pulumi.Input<pulumi.Input<string>[]>;
    saLifeTime?: pulumi.Input<number>;
    saLifeTimeBytes?: pulumi.Input<number>;
}
export namespace config {
}
