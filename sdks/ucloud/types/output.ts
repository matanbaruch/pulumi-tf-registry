// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AntiDdosRuleRealServer {
    address: string;
    port?: number;
}

export interface BaremetalInstanceDataDisks {
    deviceName: string;
    id: string;
    size: number;
    type: string;
}

export interface BaremetalInstanceNetworkInterface {
    eipBandwidth: number;
    eipChargeMode: string;
    eipInternetType: string;
}

export interface DbInstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface EipIpSet {
    internetType: string;
    ip: string;
}

export interface GetAntiDdosInstancesInstance {
    area: string;
    bandwidth: number;
    baseDefenceValue: number;
    chargeType: string;
    createTime: string;
    dataCenter: string;
    expireTime: string;
    id: string;
    maxDefenceValue: number;
    name: string;
    status: string;
}

export interface GetAntiDdosIpsIp {
    comment: string;
    domain: string;
    instanceId: string;
    ip: string;
    proxyIps: string[];
    status: string;
}

export interface GetBaremetalImagesImage {
    availabilityZone: string;
    description: string;
    id: string;
    name: string;
    osName: string;
    osType: string;
    size: number;
    status: string;
    type: string;
}

export interface GetDbBackupsDbBackup {
    backupEndTime: string;
    backupId: number;
    backupName: string;
    backupSize: number;
    backupTime: string;
    backupType: number;
    backupZone: string;
    dbId: string;
    dbName: string;
    state: string;
    zone: string;
}

export interface GetDbInstancesDbInstance {
    availabilityZone: string;
    backupBeginTime: number;
    backupBlackLists: string[];
    backupCount: number;
    backupDate: string;
    chargeType: string;
    createTime: string;
    engine: string;
    engineVersion: string;
    expireTime: string;
    id: string;
    instanceStorage: number;
    instanceType: string;
    modifyTime: string;
    name: string;
    port: number;
    privateIp: string;
    standbyZone: string;
    status: string;
    subnetId: string;
    tag: string;
    vpcId: string;
}

export interface GetDbParameterGroupsParameterGroup {
    availabilityZone: string;
    engine: string;
    engineVersion: string;
    id: string;
    isDefault: boolean;
    name: string;
}

export interface GetDisksDisk {
    availabilityZone: string;
    chargeType: string;
    createTime: string;
    diskSize: number;
    diskType: string;
    expireTime: string;
    id: string;
    name: string;
    status: string;
    tag: string;
}

export interface GetEipsEip {
    bandwidth: number;
    chargeMode: string;
    chargeType: string;
    createTime: string;
    expireTime: string;
    ipSets: outputs.GetEipsEipIpSet[];
    name: string;
    remark: string;
    status: string;
    tag: string;
}

export interface GetEipsEipIpSet {
    internetType: string;
    ip: string;
}

export interface GetIamGroupsGroup {
    comment: string;
    name: string;
}

export interface GetIamPolicyDocumentStatement {
    actions: string[];
    effect?: string;
    resources?: string[];
}

export interface GetIamProjectsProject {
    createTime: string;
    id: string;
    name: string;
    userCount: number;
}

export interface GetIamUsersUser {
    displayName: string;
    email: string;
    loginEnable: boolean;
    name: string;
    status: string;
}

export interface GetImagesImage {
    availabilityZone: string;
    createTime: string;
    description: string;
    features: string[];
    id: string;
    name: string;
    osName: string;
    osType: string;
    size: number;
    status: string;
    type: string;
}

export interface GetInstancesInstance {
    autoRenew: boolean;
    availabilityZone: string;
    chargeType: string;
    cpu: number;
    createTime: string;
    diskSets: outputs.GetInstancesInstanceDiskSet[];
    expireTime: string;
    id: string;
    instanceType: string;
    ipSets: outputs.GetInstancesInstanceIpSet[];
    memory: number;
    name: string;
    privateIp: string;
    remark: string;
    status: string;
    subnetId: string;
    tag: string;
    vpcId: string;
}

export interface GetInstancesInstanceDiskSet {
    id: string;
    isBoot: boolean;
    size: number;
    type: string;
}

export interface GetInstancesInstanceIpSet {
    internetType: string;
    ip: string;
}

export interface GetLabelResourcesResource {
    id: string;
    name: string;
    type: string;
}

export interface GetLabelsLabel {
    key: string;
    projects: outputs.GetLabelsLabelProject[];
    value: string;
}

export interface GetLabelsLabelProject {
    disabledResourceTypes: string[];
    id: string;
    name: string;
    resourceTypes: string[];
}

export interface GetLbAttachmentsLbAttachment {
    id: string;
    port: number;
    privateIp: string;
    resourceId: string;
    status: string;
}

export interface GetLbListenersLbListener {
    domain: string;
    healthCheckType: string;
    id: string;
    idleTimeout: number;
    listenType: string;
    method: string;
    name: string;
    path: string;
    persistence: string;
    persistenceType: string;
    port: number;
    protocol: string;
    status: string;
}

export interface GetLbRulesLbRule {
    domain: string;
    id: string;
    path: string;
}

export interface GetLbSslsLbSsl {
    createTime: string;
    id: string;
    name: string;
}

export interface GetLbsLb {
    createTime: string;
    id: string;
    internal: boolean;
    ipSets: outputs.GetLbsLbIpSet[];
    name: string;
    privateIp: string;
    remark: string;
    subnetId: string;
    tag: string;
    vpcId: string;
}

export interface GetLbsLbIpSet {
    internetType: string;
    ip: string;
}

export interface GetNatGatewaysNatGateway {
    createTime: string;
    id: string;
    ipSets: outputs.GetNatGatewaysNatGatewayIpSet[];
    name: string;
    remark: string;
    securityGroup: string;
    subnetIds: string[];
    tag: string;
    vpcId: string;
}

export interface GetNatGatewaysNatGatewayIpSet {
    internetType: string;
    ip: string;
}

export interface GetProjectsProject {
    createTime: string;
    id: string;
    memberCount: number;
    name: string;
    parentId: string;
    parentName: string;
    resourceCount: number;
}

export interface GetSecurityGroupsSecurityGroup {
    createTime: string;
    id: string;
    name: string;
    remark: string;
    rules: outputs.GetSecurityGroupsSecurityGroupRule[];
    tag: string;
    type: string;
}

export interface GetSecurityGroupsSecurityGroupRule {
    cidrBlock: string;
    policy: string;
    portRange: string;
    priority: string;
    protocol: string;
}

export interface GetSubnetsSubnet {
    cidrBlock: string;
    createTime: string;
    id: string;
    name: string;
    remark: string;
    tag: string;
    vpcId: string;
}

export interface GetUfsVolumesUfsVolume {
    createTime: string;
    expireTime: string;
    id: string;
    name: string;
    protocolType: string;
    remark: string;
    size: number;
    storageType: string;
    tag: string;
}

export interface GetUs3BucketsUs3Bucket {
    createTime: string;
    name: string;
    sourceDomainNames: string[];
    tag: string;
    type: string;
}

export interface GetVpcsVpc {
    cidrBlocks: string[];
    createTime: string;
    id: string;
    name: string;
    tag: string;
    updateTime: string;
}

export interface GetVpnConnectionsVpnConnection {
    createTime: string;
    customerGatewayId: string;
    id: string;
    ikeConfigs: outputs.GetVpnConnectionsVpnConnectionIkeConfig[];
    ipsecConfigs: outputs.GetVpnConnectionsVpnConnectionIpsecConfig[];
    name: string;
    remark: string;
    tag: string;
    vpcId: string;
    vpnGatewayId: string;
}

export interface GetVpnConnectionsVpnConnectionIkeConfig {
    authenticationAlgorithm: string;
    dhGroup: string;
    encryptionAlgorithm: string;
    exchangeMode: string;
    ikeVersion: string;
    localId: string;
    preSharedKey: string;
    remoteId: string;
    saLifeTime: number;
}

export interface GetVpnConnectionsVpnConnectionIpsecConfig {
    authenticationAlgorithm: string;
    encryptionAlgorithm: string;
    localSubnetIds: string[];
    pfsDhGroup: string;
    protocol: string;
    remoteSubnets: string[];
    saLifeTime: number;
    saLifeTimeBytes: number;
}

export interface GetVpnCustomerGatewaysVpnCustomerGateway {
    createTime: string;
    id: string;
    ipAddress: string;
    name: string;
    remark: string;
    tag: string;
}

export interface GetVpnGatewaysVpnGateway {
    autoRenew: boolean;
    chargeType: string;
    createTime: string;
    expireTime: string;
    grade: string;
    id: string;
    ipSets: outputs.GetVpnGatewaysVpnGatewayIpSet[];
    name: string;
    remark: string;
    tag: string;
    vpcId: string;
}

export interface GetVpnGatewaysVpnGatewayIpSet {
    internetType: string;
    ip: string;
}

export interface GetZonesZone {
    id: string;
}

export interface InstanceDataDisks {
    size: number;
    type: string;
}

export interface InstanceDiskSet {
    id: string;
    isBoot: boolean;
    size: number;
    type: string;
}

export interface InstanceIpSet {
    internetType: string;
    ip: string;
}

export interface InstanceNetworkInterface {
    eipBandwidth: number;
    eipChargeMode: string;
    eipInternetType: string;
}

export interface InstanceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface LbIpSet {
    internetType: string;
    ip: string;
}

export interface MemcacheInstanceIpSet {
    ip: string;
    port: number;
}

export interface RedisInstanceIpSet {
    ip: string;
    port: number;
}

export interface SecurityGroupRule {
    cidrBlock?: string;
    policy?: string;
    portRange?: string;
    priority?: string;
    protocol?: string;
}

export interface Uk8sClusterKubeProxy {
    mode?: string;
}

export interface Uk8sClusterMaster {
    availabilityZones: string[];
    bootDiskType: string;
    dataDiskSize: number;
    dataDiskType: string;
    instanceType: string;
    minCpuPlatform?: string;
}

export interface Uk8sClusterTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface Uk8sNodeIpSet {
    internetType: string;
    ip: string;
}

export interface Uk8sNodeTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface VpcNetworkInfo {
    cidrBlock: string;
}

export interface VpnConnectionIkeConfig {
    authenticationAlgorithm?: string;
    dhGroup?: string;
    encryptionAlgorithm?: string;
    exchangeMode?: string;
    ikeVersion?: string;
    localId: string;
    preSharedKey: string;
    remoteId: string;
    saLifeTime?: number;
}

export interface VpnConnectionIpsecConfig {
    authenticationAlgorithm?: string;
    encryptionAlgorithm?: string;
    localSubnetIds: string[];
    pfsDhGroup?: string;
    protocol?: string;
    remoteSubnets: string[];
    saLifeTime?: number;
    saLifeTimeBytes: number;
}

export namespace config {
    export interface AssumeRole {
        /**
         * The duration of the role session. Valid time units are ns, us (or µs), ms, s, h, or m.
         */
        duration?: string;
        /**
         * IAM Policy JSON describing further restricting permissions for the IAM Role being assumed.
         */
        policy?: string;
        /**
         * UCloud Resource Name (URN) of an IAM Role to assume prior to making API calls.
         */
        roleUrn: string;
        /**
         * An identifier for the assumed role session.
         */
        sessionName: string;
    }

}
