// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AntiDdosAllowedDomainArgs, AntiDdosAllowedDomainState } from "./antiDdosAllowedDomain";
export type AntiDdosAllowedDomain = import("./antiDdosAllowedDomain").AntiDdosAllowedDomain;
export const AntiDdosAllowedDomain: typeof import("./antiDdosAllowedDomain").AntiDdosAllowedDomain = null as any;
utilities.lazyLoad(exports, ["AntiDdosAllowedDomain"], () => require("./antiDdosAllowedDomain"));

export { AntiDdosInstanceArgs, AntiDdosInstanceState } from "./antiDdosInstance";
export type AntiDdosInstance = import("./antiDdosInstance").AntiDdosInstance;
export const AntiDdosInstance: typeof import("./antiDdosInstance").AntiDdosInstance = null as any;
utilities.lazyLoad(exports, ["AntiDdosInstance"], () => require("./antiDdosInstance"));

export { AntiDdosIpArgs, AntiDdosIpState } from "./antiDdosIp";
export type AntiDdosIp = import("./antiDdosIp").AntiDdosIp;
export const AntiDdosIp: typeof import("./antiDdosIp").AntiDdosIp = null as any;
utilities.lazyLoad(exports, ["AntiDdosIp"], () => require("./antiDdosIp"));

export { AntiDdosRuleArgs, AntiDdosRuleState } from "./antiDdosRule";
export type AntiDdosRule = import("./antiDdosRule").AntiDdosRule;
export const AntiDdosRule: typeof import("./antiDdosRule").AntiDdosRule = null as any;
utilities.lazyLoad(exports, ["AntiDdosRule"], () => require("./antiDdosRule"));

export { BaremetalInstanceArgs, BaremetalInstanceState } from "./baremetalInstance";
export type BaremetalInstance = import("./baremetalInstance").BaremetalInstance;
export const BaremetalInstance: typeof import("./baremetalInstance").BaremetalInstance = null as any;
utilities.lazyLoad(exports, ["BaremetalInstance"], () => require("./baremetalInstance"));

export { DbInstanceArgs, DbInstanceState } from "./dbInstance";
export type DbInstance = import("./dbInstance").DbInstance;
export const DbInstance: typeof import("./dbInstance").DbInstance = null as any;
utilities.lazyLoad(exports, ["DbInstance"], () => require("./dbInstance"));

export { DiskArgs, DiskState } from "./disk";
export type Disk = import("./disk").Disk;
export const Disk: typeof import("./disk").Disk = null as any;
utilities.lazyLoad(exports, ["Disk"], () => require("./disk"));

export { DiskAttachmentArgs, DiskAttachmentState } from "./diskAttachment";
export type DiskAttachment = import("./diskAttachment").DiskAttachment;
export const DiskAttachment: typeof import("./diskAttachment").DiskAttachment = null as any;
utilities.lazyLoad(exports, ["DiskAttachment"], () => require("./diskAttachment"));

export { EipArgs, EipState } from "./eip";
export type Eip = import("./eip").Eip;
export const Eip: typeof import("./eip").Eip = null as any;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));

export { EipAssociationArgs, EipAssociationState } from "./eipAssociation";
export type EipAssociation = import("./eipAssociation").EipAssociation;
export const EipAssociation: typeof import("./eipAssociation").EipAssociation = null as any;
utilities.lazyLoad(exports, ["EipAssociation"], () => require("./eipAssociation"));

export { GetAntiDdosInstancesArgs, GetAntiDdosInstancesResult, GetAntiDdosInstancesOutputArgs } from "./getAntiDdosInstances";
export const getAntiDdosInstances: typeof import("./getAntiDdosInstances").getAntiDdosInstances = null as any;
export const getAntiDdosInstancesOutput: typeof import("./getAntiDdosInstances").getAntiDdosInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getAntiDdosInstances","getAntiDdosInstancesOutput"], () => require("./getAntiDdosInstances"));

export { GetAntiDdosIpsArgs, GetAntiDdosIpsResult, GetAntiDdosIpsOutputArgs } from "./getAntiDdosIps";
export const getAntiDdosIps: typeof import("./getAntiDdosIps").getAntiDdosIps = null as any;
export const getAntiDdosIpsOutput: typeof import("./getAntiDdosIps").getAntiDdosIpsOutput = null as any;
utilities.lazyLoad(exports, ["getAntiDdosIps","getAntiDdosIpsOutput"], () => require("./getAntiDdosIps"));

export { GetBaremetalImagesArgs, GetBaremetalImagesResult, GetBaremetalImagesOutputArgs } from "./getBaremetalImages";
export const getBaremetalImages: typeof import("./getBaremetalImages").getBaremetalImages = null as any;
export const getBaremetalImagesOutput: typeof import("./getBaremetalImages").getBaremetalImagesOutput = null as any;
utilities.lazyLoad(exports, ["getBaremetalImages","getBaremetalImagesOutput"], () => require("./getBaremetalImages"));

export { GetDbBackupsArgs, GetDbBackupsResult, GetDbBackupsOutputArgs } from "./getDbBackups";
export const getDbBackups: typeof import("./getDbBackups").getDbBackups = null as any;
export const getDbBackupsOutput: typeof import("./getDbBackups").getDbBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getDbBackups","getDbBackupsOutput"], () => require("./getDbBackups"));

export { GetDbInstancesArgs, GetDbInstancesResult, GetDbInstancesOutputArgs } from "./getDbInstances";
export const getDbInstances: typeof import("./getDbInstances").getDbInstances = null as any;
export const getDbInstancesOutput: typeof import("./getDbInstances").getDbInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDbInstances","getDbInstancesOutput"], () => require("./getDbInstances"));

export { GetDbParameterGroupsArgs, GetDbParameterGroupsResult, GetDbParameterGroupsOutputArgs } from "./getDbParameterGroups";
export const getDbParameterGroups: typeof import("./getDbParameterGroups").getDbParameterGroups = null as any;
export const getDbParameterGroupsOutput: typeof import("./getDbParameterGroups").getDbParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDbParameterGroups","getDbParameterGroupsOutput"], () => require("./getDbParameterGroups"));

export { GetDisksArgs, GetDisksResult, GetDisksOutputArgs } from "./getDisks";
export const getDisks: typeof import("./getDisks").getDisks = null as any;
export const getDisksOutput: typeof import("./getDisks").getDisksOutput = null as any;
utilities.lazyLoad(exports, ["getDisks","getDisksOutput"], () => require("./getDisks"));

export { GetEipsArgs, GetEipsResult, GetEipsOutputArgs } from "./getEips";
export const getEips: typeof import("./getEips").getEips = null as any;
export const getEipsOutput: typeof import("./getEips").getEipsOutput = null as any;
utilities.lazyLoad(exports, ["getEips","getEipsOutput"], () => require("./getEips"));

export { GetIamGroupsArgs, GetIamGroupsResult, GetIamGroupsOutputArgs } from "./getIamGroups";
export const getIamGroups: typeof import("./getIamGroups").getIamGroups = null as any;
export const getIamGroupsOutput: typeof import("./getIamGroups").getIamGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIamGroups","getIamGroupsOutput"], () => require("./getIamGroups"));

export { GetIamPolicyArgs, GetIamPolicyResult, GetIamPolicyOutputArgs } from "./getIamPolicy";
export const getIamPolicy: typeof import("./getIamPolicy").getIamPolicy = null as any;
export const getIamPolicyOutput: typeof import("./getIamPolicy").getIamPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicy","getIamPolicyOutput"], () => require("./getIamPolicy"));

export { GetIamPolicyDocumentArgs, GetIamPolicyDocumentResult, GetIamPolicyDocumentOutputArgs } from "./getIamPolicyDocument";
export const getIamPolicyDocument: typeof import("./getIamPolicyDocument").getIamPolicyDocument = null as any;
export const getIamPolicyDocumentOutput: typeof import("./getIamPolicyDocument").getIamPolicyDocumentOutput = null as any;
utilities.lazyLoad(exports, ["getIamPolicyDocument","getIamPolicyDocumentOutput"], () => require("./getIamPolicyDocument"));

export { GetIamProjectsArgs, GetIamProjectsResult, GetIamProjectsOutputArgs } from "./getIamProjects";
export const getIamProjects: typeof import("./getIamProjects").getIamProjects = null as any;
export const getIamProjectsOutput: typeof import("./getIamProjects").getIamProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getIamProjects","getIamProjectsOutput"], () => require("./getIamProjects"));

export { GetIamUsersArgs, GetIamUsersResult, GetIamUsersOutputArgs } from "./getIamUsers";
export const getIamUsers: typeof import("./getIamUsers").getIamUsers = null as any;
export const getIamUsersOutput: typeof import("./getIamUsers").getIamUsersOutput = null as any;
utilities.lazyLoad(exports, ["getIamUsers","getIamUsersOutput"], () => require("./getIamUsers"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetLabelResourcesArgs, GetLabelResourcesResult, GetLabelResourcesOutputArgs } from "./getLabelResources";
export const getLabelResources: typeof import("./getLabelResources").getLabelResources = null as any;
export const getLabelResourcesOutput: typeof import("./getLabelResources").getLabelResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getLabelResources","getLabelResourcesOutput"], () => require("./getLabelResources"));

export { GetLabelsArgs, GetLabelsResult, GetLabelsOutputArgs } from "./getLabels";
export const getLabels: typeof import("./getLabels").getLabels = null as any;
export const getLabelsOutput: typeof import("./getLabels").getLabelsOutput = null as any;
utilities.lazyLoad(exports, ["getLabels","getLabelsOutput"], () => require("./getLabels"));

export { GetLbAttachmentsArgs, GetLbAttachmentsResult, GetLbAttachmentsOutputArgs } from "./getLbAttachments";
export const getLbAttachments: typeof import("./getLbAttachments").getLbAttachments = null as any;
export const getLbAttachmentsOutput: typeof import("./getLbAttachments").getLbAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getLbAttachments","getLbAttachmentsOutput"], () => require("./getLbAttachments"));

export { GetLbListenersArgs, GetLbListenersResult, GetLbListenersOutputArgs } from "./getLbListeners";
export const getLbListeners: typeof import("./getLbListeners").getLbListeners = null as any;
export const getLbListenersOutput: typeof import("./getLbListeners").getLbListenersOutput = null as any;
utilities.lazyLoad(exports, ["getLbListeners","getLbListenersOutput"], () => require("./getLbListeners"));

export { GetLbRulesArgs, GetLbRulesResult, GetLbRulesOutputArgs } from "./getLbRules";
export const getLbRules: typeof import("./getLbRules").getLbRules = null as any;
export const getLbRulesOutput: typeof import("./getLbRules").getLbRulesOutput = null as any;
utilities.lazyLoad(exports, ["getLbRules","getLbRulesOutput"], () => require("./getLbRules"));

export { GetLbSslsArgs, GetLbSslsResult, GetLbSslsOutputArgs } from "./getLbSsls";
export const getLbSsls: typeof import("./getLbSsls").getLbSsls = null as any;
export const getLbSslsOutput: typeof import("./getLbSsls").getLbSslsOutput = null as any;
utilities.lazyLoad(exports, ["getLbSsls","getLbSslsOutput"], () => require("./getLbSsls"));

export { GetLbsArgs, GetLbsResult, GetLbsOutputArgs } from "./getLbs";
export const getLbs: typeof import("./getLbs").getLbs = null as any;
export const getLbsOutput: typeof import("./getLbs").getLbsOutput = null as any;
utilities.lazyLoad(exports, ["getLbs","getLbsOutput"], () => require("./getLbs"));

export { GetNatGatewaysArgs, GetNatGatewaysResult, GetNatGatewaysOutputArgs } from "./getNatGateways";
export const getNatGateways: typeof import("./getNatGateways").getNatGateways = null as any;
export const getNatGatewaysOutput: typeof import("./getNatGateways").getNatGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getNatGateways","getNatGatewaysOutput"], () => require("./getNatGateways"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetUfsVolumesArgs, GetUfsVolumesResult, GetUfsVolumesOutputArgs } from "./getUfsVolumes";
export const getUfsVolumes: typeof import("./getUfsVolumes").getUfsVolumes = null as any;
export const getUfsVolumesOutput: typeof import("./getUfsVolumes").getUfsVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getUfsVolumes","getUfsVolumesOutput"], () => require("./getUfsVolumes"));

export { GetUs3BucketsArgs, GetUs3BucketsResult, GetUs3BucketsOutputArgs } from "./getUs3Buckets";
export const getUs3Buckets: typeof import("./getUs3Buckets").getUs3Buckets = null as any;
export const getUs3BucketsOutput: typeof import("./getUs3Buckets").getUs3BucketsOutput = null as any;
utilities.lazyLoad(exports, ["getUs3Buckets","getUs3BucketsOutput"], () => require("./getUs3Buckets"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { GetVpnConnectionsArgs, GetVpnConnectionsResult, GetVpnConnectionsOutputArgs } from "./getVpnConnections";
export const getVpnConnections: typeof import("./getVpnConnections").getVpnConnections = null as any;
export const getVpnConnectionsOutput: typeof import("./getVpnConnections").getVpnConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnections","getVpnConnectionsOutput"], () => require("./getVpnConnections"));

export { GetVpnCustomerGatewaysArgs, GetVpnCustomerGatewaysResult, GetVpnCustomerGatewaysOutputArgs } from "./getVpnCustomerGateways";
export const getVpnCustomerGateways: typeof import("./getVpnCustomerGateways").getVpnCustomerGateways = null as any;
export const getVpnCustomerGatewaysOutput: typeof import("./getVpnCustomerGateways").getVpnCustomerGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnCustomerGateways","getVpnCustomerGatewaysOutput"], () => require("./getVpnCustomerGateways"));

export { GetVpnGatewaysArgs, GetVpnGatewaysResult, GetVpnGatewaysOutputArgs } from "./getVpnGateways";
export const getVpnGateways: typeof import("./getVpnGateways").getVpnGateways = null as any;
export const getVpnGatewaysOutput: typeof import("./getVpnGateways").getVpnGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateways","getVpnGatewaysOutput"], () => require("./getVpnGateways"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { IamAccessKeyArgs, IamAccessKeyState } from "./iamAccessKey";
export type IamAccessKey = import("./iamAccessKey").IamAccessKey;
export const IamAccessKey: typeof import("./iamAccessKey").IamAccessKey = null as any;
utilities.lazyLoad(exports, ["IamAccessKey"], () => require("./iamAccessKey"));

export { IamGroupArgs, IamGroupState } from "./iamGroup";
export type IamGroup = import("./iamGroup").IamGroup;
export const IamGroup: typeof import("./iamGroup").IamGroup = null as any;
utilities.lazyLoad(exports, ["IamGroup"], () => require("./iamGroup"));

export { IamGroupMembershipArgs, IamGroupMembershipState } from "./iamGroupMembership";
export type IamGroupMembership = import("./iamGroupMembership").IamGroupMembership;
export const IamGroupMembership: typeof import("./iamGroupMembership").IamGroupMembership = null as any;
utilities.lazyLoad(exports, ["IamGroupMembership"], () => require("./iamGroupMembership"));

export { IamGroupPolicyAttachmentArgs, IamGroupPolicyAttachmentState } from "./iamGroupPolicyAttachment";
export type IamGroupPolicyAttachment = import("./iamGroupPolicyAttachment").IamGroupPolicyAttachment;
export const IamGroupPolicyAttachment: typeof import("./iamGroupPolicyAttachment").IamGroupPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IamGroupPolicyAttachment"], () => require("./iamGroupPolicyAttachment"));

export { IamPolicyArgs, IamPolicyState } from "./iamPolicy";
export type IamPolicy = import("./iamPolicy").IamPolicy;
export const IamPolicy: typeof import("./iamPolicy").IamPolicy = null as any;
utilities.lazyLoad(exports, ["IamPolicy"], () => require("./iamPolicy"));

export { IamProjectArgs, IamProjectState } from "./iamProject";
export type IamProject = import("./iamProject").IamProject;
export const IamProject: typeof import("./iamProject").IamProject = null as any;
utilities.lazyLoad(exports, ["IamProject"], () => require("./iamProject"));

export { IamUserArgs, IamUserState } from "./iamUser";
export type IamUser = import("./iamUser").IamUser;
export const IamUser: typeof import("./iamUser").IamUser = null as any;
utilities.lazyLoad(exports, ["IamUser"], () => require("./iamUser"));

export { IamUserPolicyAttachmentArgs, IamUserPolicyAttachmentState } from "./iamUserPolicyAttachment";
export type IamUserPolicyAttachment = import("./iamUserPolicyAttachment").IamUserPolicyAttachment;
export const IamUserPolicyAttachment: typeof import("./iamUserPolicyAttachment").IamUserPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["IamUserPolicyAttachment"], () => require("./iamUserPolicyAttachment"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceStateArgs, InstanceStateState } from "./instanceState";
export type InstanceState = import("./instanceState").InstanceState;
export const InstanceState: typeof import("./instanceState").InstanceState = null as any;
utilities.lazyLoad(exports, ["InstanceState"], () => require("./instanceState"));

export { IsolationGroupArgs, IsolationGroupState } from "./isolationGroup";
export type IsolationGroup = import("./isolationGroup").IsolationGroup;
export const IsolationGroup: typeof import("./isolationGroup").IsolationGroup = null as any;
utilities.lazyLoad(exports, ["IsolationGroup"], () => require("./isolationGroup"));

export { LabelArgs, LabelState } from "./label";
export type Label = import("./label").Label;
export const Label: typeof import("./label").Label = null as any;
utilities.lazyLoad(exports, ["Label"], () => require("./label"));

export { LabelAttachmentArgs, LabelAttachmentState } from "./labelAttachment";
export type LabelAttachment = import("./labelAttachment").LabelAttachment;
export const LabelAttachment: typeof import("./labelAttachment").LabelAttachment = null as any;
utilities.lazyLoad(exports, ["LabelAttachment"], () => require("./labelAttachment"));

export { LbArgs, LbState } from "./lb";
export type Lb = import("./lb").Lb;
export const Lb: typeof import("./lb").Lb = null as any;
utilities.lazyLoad(exports, ["Lb"], () => require("./lb"));

export { LbAttachmentArgs, LbAttachmentState } from "./lbAttachment";
export type LbAttachment = import("./lbAttachment").LbAttachment;
export const LbAttachment: typeof import("./lbAttachment").LbAttachment = null as any;
utilities.lazyLoad(exports, ["LbAttachment"], () => require("./lbAttachment"));

export { LbListenerArgs, LbListenerState } from "./lbListener";
export type LbListener = import("./lbListener").LbListener;
export const LbListener: typeof import("./lbListener").LbListener = null as any;
utilities.lazyLoad(exports, ["LbListener"], () => require("./lbListener"));

export { LbRuleArgs, LbRuleState } from "./lbRule";
export type LbRule = import("./lbRule").LbRule;
export const LbRule: typeof import("./lbRule").LbRule = null as any;
utilities.lazyLoad(exports, ["LbRule"], () => require("./lbRule"));

export { LbSslArgs, LbSslState } from "./lbSsl";
export type LbSsl = import("./lbSsl").LbSsl;
export const LbSsl: typeof import("./lbSsl").LbSsl = null as any;
utilities.lazyLoad(exports, ["LbSsl"], () => require("./lbSsl"));

export { LbSslAttachmentArgs, LbSslAttachmentState } from "./lbSslAttachment";
export type LbSslAttachment = import("./lbSslAttachment").LbSslAttachment;
export const LbSslAttachment: typeof import("./lbSslAttachment").LbSslAttachment = null as any;
utilities.lazyLoad(exports, ["LbSslAttachment"], () => require("./lbSslAttachment"));

export { MemcacheInstanceArgs, MemcacheInstanceState } from "./memcacheInstance";
export type MemcacheInstance = import("./memcacheInstance").MemcacheInstance;
export const MemcacheInstance: typeof import("./memcacheInstance").MemcacheInstance = null as any;
utilities.lazyLoad(exports, ["MemcacheInstance"], () => require("./memcacheInstance"));

export { NatGatewayArgs, NatGatewayState } from "./natGateway";
export type NatGateway = import("./natGateway").NatGateway;
export const NatGateway: typeof import("./natGateway").NatGateway = null as any;
utilities.lazyLoad(exports, ["NatGateway"], () => require("./natGateway"));

export { NatGatewayRuleArgs, NatGatewayRuleState } from "./natGatewayRule";
export type NatGatewayRule = import("./natGatewayRule").NatGatewayRule;
export const NatGatewayRule: typeof import("./natGatewayRule").NatGatewayRule = null as any;
utilities.lazyLoad(exports, ["NatGatewayRule"], () => require("./natGatewayRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RedisInstanceArgs, RedisInstanceState } from "./redisInstance";
export type RedisInstance = import("./redisInstance").RedisInstance;
export const RedisInstance: typeof import("./redisInstance").RedisInstance = null as any;
utilities.lazyLoad(exports, ["RedisInstance"], () => require("./redisInstance"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { UdpnConnectionArgs, UdpnConnectionState } from "./udpnConnection";
export type UdpnConnection = import("./udpnConnection").UdpnConnection;
export const UdpnConnection: typeof import("./udpnConnection").UdpnConnection = null as any;
utilities.lazyLoad(exports, ["UdpnConnection"], () => require("./udpnConnection"));

export { UfsVolumeArgs, UfsVolumeState } from "./ufsVolume";
export type UfsVolume = import("./ufsVolume").UfsVolume;
export const UfsVolume: typeof import("./ufsVolume").UfsVolume = null as any;
utilities.lazyLoad(exports, ["UfsVolume"], () => require("./ufsVolume"));

export { UfsVolumeMountPointArgs, UfsVolumeMountPointState } from "./ufsVolumeMountPoint";
export type UfsVolumeMountPoint = import("./ufsVolumeMountPoint").UfsVolumeMountPoint;
export const UfsVolumeMountPoint: typeof import("./ufsVolumeMountPoint").UfsVolumeMountPoint = null as any;
utilities.lazyLoad(exports, ["UfsVolumeMountPoint"], () => require("./ufsVolumeMountPoint"));

export { Uk8sClusterArgs, Uk8sClusterState } from "./uk8sCluster";
export type Uk8sCluster = import("./uk8sCluster").Uk8sCluster;
export const Uk8sCluster: typeof import("./uk8sCluster").Uk8sCluster = null as any;
utilities.lazyLoad(exports, ["Uk8sCluster"], () => require("./uk8sCluster"));

export { Uk8sNodeArgs, Uk8sNodeState } from "./uk8sNode";
export type Uk8sNode = import("./uk8sNode").Uk8sNode;
export const Uk8sNode: typeof import("./uk8sNode").Uk8sNode = null as any;
utilities.lazyLoad(exports, ["Uk8sNode"], () => require("./uk8sNode"));

export { Us3BucketArgs, Us3BucketState } from "./us3Bucket";
export type Us3Bucket = import("./us3Bucket").Us3Bucket;
export const Us3Bucket: typeof import("./us3Bucket").Us3Bucket = null as any;
utilities.lazyLoad(exports, ["Us3Bucket"], () => require("./us3Bucket"));

export { VipArgs, VipState } from "./vip";
export type Vip = import("./vip").Vip;
export const Vip: typeof import("./vip").Vip = null as any;
utilities.lazyLoad(exports, ["Vip"], () => require("./vip"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));

export { VpcPeeringConnectionArgs, VpcPeeringConnectionState } from "./vpcPeeringConnection";
export type VpcPeeringConnection = import("./vpcPeeringConnection").VpcPeeringConnection;
export const VpcPeeringConnection: typeof import("./vpcPeeringConnection").VpcPeeringConnection = null as any;
utilities.lazyLoad(exports, ["VpcPeeringConnection"], () => require("./vpcPeeringConnection"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnCustomerGatewayArgs, VpnCustomerGatewayState } from "./vpnCustomerGateway";
export type VpnCustomerGateway = import("./vpnCustomerGateway").VpnCustomerGateway;
export const VpnCustomerGateway: typeof import("./vpnCustomerGateway").VpnCustomerGateway = null as any;
utilities.lazyLoad(exports, ["VpnCustomerGateway"], () => require("./vpnCustomerGateway"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ucloud:index/antiDdosAllowedDomain:AntiDdosAllowedDomain":
                return new AntiDdosAllowedDomain(name, <any>undefined, { urn })
            case "ucloud:index/antiDdosInstance:AntiDdosInstance":
                return new AntiDdosInstance(name, <any>undefined, { urn })
            case "ucloud:index/antiDdosIp:AntiDdosIp":
                return new AntiDdosIp(name, <any>undefined, { urn })
            case "ucloud:index/antiDdosRule:AntiDdosRule":
                return new AntiDdosRule(name, <any>undefined, { urn })
            case "ucloud:index/baremetalInstance:BaremetalInstance":
                return new BaremetalInstance(name, <any>undefined, { urn })
            case "ucloud:index/dbInstance:DbInstance":
                return new DbInstance(name, <any>undefined, { urn })
            case "ucloud:index/disk:Disk":
                return new Disk(name, <any>undefined, { urn })
            case "ucloud:index/diskAttachment:DiskAttachment":
                return new DiskAttachment(name, <any>undefined, { urn })
            case "ucloud:index/eip:Eip":
                return new Eip(name, <any>undefined, { urn })
            case "ucloud:index/eipAssociation:EipAssociation":
                return new EipAssociation(name, <any>undefined, { urn })
            case "ucloud:index/iamAccessKey:IamAccessKey":
                return new IamAccessKey(name, <any>undefined, { urn })
            case "ucloud:index/iamGroup:IamGroup":
                return new IamGroup(name, <any>undefined, { urn })
            case "ucloud:index/iamGroupMembership:IamGroupMembership":
                return new IamGroupMembership(name, <any>undefined, { urn })
            case "ucloud:index/iamGroupPolicyAttachment:IamGroupPolicyAttachment":
                return new IamGroupPolicyAttachment(name, <any>undefined, { urn })
            case "ucloud:index/iamPolicy:IamPolicy":
                return new IamPolicy(name, <any>undefined, { urn })
            case "ucloud:index/iamProject:IamProject":
                return new IamProject(name, <any>undefined, { urn })
            case "ucloud:index/iamUser:IamUser":
                return new IamUser(name, <any>undefined, { urn })
            case "ucloud:index/iamUserPolicyAttachment:IamUserPolicyAttachment":
                return new IamUserPolicyAttachment(name, <any>undefined, { urn })
            case "ucloud:index/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "ucloud:index/instanceState:InstanceState":
                return new InstanceState(name, <any>undefined, { urn })
            case "ucloud:index/isolationGroup:IsolationGroup":
                return new IsolationGroup(name, <any>undefined, { urn })
            case "ucloud:index/label:Label":
                return new Label(name, <any>undefined, { urn })
            case "ucloud:index/labelAttachment:LabelAttachment":
                return new LabelAttachment(name, <any>undefined, { urn })
            case "ucloud:index/lb:Lb":
                return new Lb(name, <any>undefined, { urn })
            case "ucloud:index/lbAttachment:LbAttachment":
                return new LbAttachment(name, <any>undefined, { urn })
            case "ucloud:index/lbListener:LbListener":
                return new LbListener(name, <any>undefined, { urn })
            case "ucloud:index/lbRule:LbRule":
                return new LbRule(name, <any>undefined, { urn })
            case "ucloud:index/lbSsl:LbSsl":
                return new LbSsl(name, <any>undefined, { urn })
            case "ucloud:index/lbSslAttachment:LbSslAttachment":
                return new LbSslAttachment(name, <any>undefined, { urn })
            case "ucloud:index/memcacheInstance:MemcacheInstance":
                return new MemcacheInstance(name, <any>undefined, { urn })
            case "ucloud:index/natGateway:NatGateway":
                return new NatGateway(name, <any>undefined, { urn })
            case "ucloud:index/natGatewayRule:NatGatewayRule":
                return new NatGatewayRule(name, <any>undefined, { urn })
            case "ucloud:index/redisInstance:RedisInstance":
                return new RedisInstance(name, <any>undefined, { urn })
            case "ucloud:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "ucloud:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "ucloud:index/udpnConnection:UdpnConnection":
                return new UdpnConnection(name, <any>undefined, { urn })
            case "ucloud:index/ufsVolume:UfsVolume":
                return new UfsVolume(name, <any>undefined, { urn })
            case "ucloud:index/ufsVolumeMountPoint:UfsVolumeMountPoint":
                return new UfsVolumeMountPoint(name, <any>undefined, { urn })
            case "ucloud:index/uk8sCluster:Uk8sCluster":
                return new Uk8sCluster(name, <any>undefined, { urn })
            case "ucloud:index/uk8sNode:Uk8sNode":
                return new Uk8sNode(name, <any>undefined, { urn })
            case "ucloud:index/us3Bucket:Us3Bucket":
                return new Us3Bucket(name, <any>undefined, { urn })
            case "ucloud:index/vip:Vip":
                return new Vip(name, <any>undefined, { urn })
            case "ucloud:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            case "ucloud:index/vpcPeeringConnection:VpcPeeringConnection":
                return new VpcPeeringConnection(name, <any>undefined, { urn })
            case "ucloud:index/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "ucloud:index/vpnCustomerGateway:VpnCustomerGateway":
                return new VpnCustomerGateway(name, <any>undefined, { urn })
            case "ucloud:index/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ucloud", "index/antiDdosAllowedDomain", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/antiDdosInstance", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/antiDdosIp", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/antiDdosRule", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/baremetalInstance", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/dbInstance", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/disk", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/diskAttachment", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/eip", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/eipAssociation", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamAccessKey", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamGroup", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamGroupMembership", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamGroupPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamPolicy", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamProject", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamUser", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/iamUserPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/instance", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/instanceState", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/isolationGroup", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/label", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/labelAttachment", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/lb", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/lbAttachment", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/lbListener", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/lbRule", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/lbSsl", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/lbSslAttachment", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/memcacheInstance", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/natGateway", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/natGatewayRule", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/redisInstance", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/subnet", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/udpnConnection", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/ufsVolume", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/ufsVolumeMountPoint", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/uk8sCluster", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/uk8sNode", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/us3Bucket", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/vip", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/vpc", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/vpcPeeringConnection", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/vpnConnection", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/vpnCustomerGateway", _module)
pulumi.runtime.registerResourceModule("ucloud", "index/vpnGateway", _module)
pulumi.runtime.registerResourcePackage("ucloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ucloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
