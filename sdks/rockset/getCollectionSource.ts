// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCollectionSource(args: GetCollectionSourceArgs, opts?: pulumi.InvokeOptions): Promise<GetCollectionSourceResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rockset:index/getCollectionSource:getCollectionSource", {
        "collection": args.collection,
        "id": args.id,
        "status": args.status,
        "workspace": args.workspace,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCollectionSource.
 */
export interface GetCollectionSourceArgs {
    collection: string;
    id: string;
    status?: inputs.GetCollectionSourceStatus;
    workspace: string;
}

/**
 * A collection of values returned by getCollectionSource.
 */
export interface GetCollectionSourceResult {
    readonly collection: string;
    readonly id: string;
    readonly integrationName: string;
    readonly resumeAt: string;
    readonly status?: outputs.GetCollectionSourceStatus;
    readonly suspendedAt: string;
    readonly workspace: string;
}
export function getCollectionSourceOutput(args: GetCollectionSourceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCollectionSourceResult> {
    return pulumi.output(args).apply((a: any) => getCollectionSource(a, opts))
}

/**
 * A collection of arguments for invoking getCollectionSource.
 */
export interface GetCollectionSourceOutputArgs {
    collection: pulumi.Input<string>;
    id: pulumi.Input<string>;
    status?: pulumi.Input<inputs.GetCollectionSourceStatusArgs>;
    workspace: pulumi.Input<string>;
}
