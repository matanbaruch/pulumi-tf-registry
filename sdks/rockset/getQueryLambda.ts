// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getQueryLambda(args: GetQueryLambdaArgs, opts?: pulumi.InvokeOptions): Promise<GetQueryLambdaResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("rockset:index/getQueryLambda:getQueryLambda", {
        "id": args.id,
        "name": args.name,
        "tag": args.tag,
        "workspace": args.workspace,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getQueryLambda.
 */
export interface GetQueryLambdaArgs {
    id?: string;
    name: string;
    tag?: string;
    workspace: string;
}

/**
 * A collection of values returned by getQueryLambda.
 */
export interface GetQueryLambdaResult {
    readonly description: string;
    readonly id: string;
    readonly lastExecuted: string;
    readonly name: string;
    readonly sql: string;
    readonly tag?: string;
    readonly version: string;
    readonly workspace: string;
}
export function getQueryLambdaOutput(args: GetQueryLambdaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetQueryLambdaResult> {
    return pulumi.output(args).apply((a: any) => getQueryLambda(a, opts))
}

/**
 * A collection of arguments for invoking getQueryLambda.
 */
export interface GetQueryLambdaOutputArgs {
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    workspace: pulumi.Input<string>;
}
