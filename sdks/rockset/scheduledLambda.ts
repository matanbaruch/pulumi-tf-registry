// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ScheduledLambda extends pulumi.CustomResource {
    /**
     * Get an existing ScheduledLambda resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduledLambdaState, opts?: pulumi.CustomResourceOptions): ScheduledLambda {
        return new ScheduledLambda(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rockset:index/scheduledLambda:ScheduledLambda';

    /**
     * Returns true if the given object is an instance of ScheduledLambda.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduledLambda {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduledLambda.__pulumiType;
    }

    /**
     * The apikey to use when triggering execution of the associated query lambda.
     */
    public readonly apikey!: pulumi.Output<string>;
    /**
     * The UNIX-formatted cron string for this scheduled query lambda.
     */
    public readonly cronString!: pulumi.Output<string>;
    /**
     * The name of the QL to use for scheduled execution.
     */
    public readonly queryLambdaName!: pulumi.Output<string>;
    /**
     * RRN of this Scheduled Lambda.
     */
    public /*out*/ readonly rrn!: pulumi.Output<string>;
    /**
     * The QL tag to use for scheduled execution.
     */
    public readonly tag!: pulumi.Output<string | undefined>;
    /**
     * The number of times to execute this scheduled query lambda. Once this scheduled query lambda has been executed this many
     * times, it will no longer be executed.
     */
    public readonly totalTimesToExecute!: pulumi.Output<number | undefined>;
    /**
     * The version of the QL to use for scheduled execution.
     */
    public readonly version!: pulumi.Output<string | undefined>;
    /**
     * The value to use as the authorization header when hitting the webhook.
     */
    public readonly webhookAuthHeader!: pulumi.Output<string | undefined>;
    /**
     * The payload that should be sent to the webhook. JSON format.
     */
    public readonly webhookPayload!: pulumi.Output<string | undefined>;
    /**
     * The URL of the webhook that should be triggered after this scheduled query lambda completes.
     */
    public readonly webhookUrl!: pulumi.Output<string | undefined>;
    /**
     * Workspace name.
     */
    public readonly workspace!: pulumi.Output<string>;

    /**
     * Create a ScheduledLambda resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduledLambdaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduledLambdaArgs | ScheduledLambdaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduledLambdaState | undefined;
            resourceInputs["apikey"] = state ? state.apikey : undefined;
            resourceInputs["cronString"] = state ? state.cronString : undefined;
            resourceInputs["queryLambdaName"] = state ? state.queryLambdaName : undefined;
            resourceInputs["rrn"] = state ? state.rrn : undefined;
            resourceInputs["tag"] = state ? state.tag : undefined;
            resourceInputs["totalTimesToExecute"] = state ? state.totalTimesToExecute : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["webhookAuthHeader"] = state ? state.webhookAuthHeader : undefined;
            resourceInputs["webhookPayload"] = state ? state.webhookPayload : undefined;
            resourceInputs["webhookUrl"] = state ? state.webhookUrl : undefined;
            resourceInputs["workspace"] = state ? state.workspace : undefined;
        } else {
            const args = argsOrState as ScheduledLambdaArgs | undefined;
            if ((!args || args.apikey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apikey'");
            }
            if ((!args || args.cronString === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cronString'");
            }
            if ((!args || args.queryLambdaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queryLambdaName'");
            }
            if ((!args || args.workspace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspace'");
            }
            resourceInputs["apikey"] = args?.apikey ? pulumi.secret(args.apikey) : undefined;
            resourceInputs["cronString"] = args ? args.cronString : undefined;
            resourceInputs["queryLambdaName"] = args ? args.queryLambdaName : undefined;
            resourceInputs["tag"] = args ? args.tag : undefined;
            resourceInputs["totalTimesToExecute"] = args ? args.totalTimesToExecute : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["webhookAuthHeader"] = args?.webhookAuthHeader ? pulumi.secret(args.webhookAuthHeader) : undefined;
            resourceInputs["webhookPayload"] = args ? args.webhookPayload : undefined;
            resourceInputs["webhookUrl"] = args ? args.webhookUrl : undefined;
            resourceInputs["workspace"] = args ? args.workspace : undefined;
            resourceInputs["rrn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apikey", "webhookAuthHeader"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ScheduledLambda.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ScheduledLambda resources.
 */
export interface ScheduledLambdaState {
    /**
     * The apikey to use when triggering execution of the associated query lambda.
     */
    apikey?: pulumi.Input<string>;
    /**
     * The UNIX-formatted cron string for this scheduled query lambda.
     */
    cronString?: pulumi.Input<string>;
    /**
     * The name of the QL to use for scheduled execution.
     */
    queryLambdaName?: pulumi.Input<string>;
    /**
     * RRN of this Scheduled Lambda.
     */
    rrn?: pulumi.Input<string>;
    /**
     * The QL tag to use for scheduled execution.
     */
    tag?: pulumi.Input<string>;
    /**
     * The number of times to execute this scheduled query lambda. Once this scheduled query lambda has been executed this many
     * times, it will no longer be executed.
     */
    totalTimesToExecute?: pulumi.Input<number>;
    /**
     * The version of the QL to use for scheduled execution.
     */
    version?: pulumi.Input<string>;
    /**
     * The value to use as the authorization header when hitting the webhook.
     */
    webhookAuthHeader?: pulumi.Input<string>;
    /**
     * The payload that should be sent to the webhook. JSON format.
     */
    webhookPayload?: pulumi.Input<string>;
    /**
     * The URL of the webhook that should be triggered after this scheduled query lambda completes.
     */
    webhookUrl?: pulumi.Input<string>;
    /**
     * Workspace name.
     */
    workspace?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduledLambda resource.
 */
export interface ScheduledLambdaArgs {
    /**
     * The apikey to use when triggering execution of the associated query lambda.
     */
    apikey: pulumi.Input<string>;
    /**
     * The UNIX-formatted cron string for this scheduled query lambda.
     */
    cronString: pulumi.Input<string>;
    /**
     * The name of the QL to use for scheduled execution.
     */
    queryLambdaName: pulumi.Input<string>;
    /**
     * The QL tag to use for scheduled execution.
     */
    tag?: pulumi.Input<string>;
    /**
     * The number of times to execute this scheduled query lambda. Once this scheduled query lambda has been executed this many
     * times, it will no longer be executed.
     */
    totalTimesToExecute?: pulumi.Input<number>;
    /**
     * The version of the QL to use for scheduled execution.
     */
    version?: pulumi.Input<string>;
    /**
     * The value to use as the authorization header when hitting the webhook.
     */
    webhookAuthHeader?: pulumi.Input<string>;
    /**
     * The payload that should be sent to the webhook. JSON format.
     */
    webhookPayload?: pulumi.Input<string>;
    /**
     * The URL of the webhook that should be triggered after this scheduled query lambda completes.
     */
    webhookUrl?: pulumi.Input<string>;
    /**
     * Workspace name.
     */
    workspace: pulumi.Input<string>;
}
