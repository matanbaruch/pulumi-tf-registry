// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GatewayStaticroute extends pulumi.CustomResource {
    /**
     * Get an existing GatewayStaticroute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayStaticrouteState, opts?: pulumi.CustomResourceOptions): GatewayStaticroute {
        return new GatewayStaticroute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskopebwan:index/gatewayStaticroute:GatewayStaticroute';

    /**
     * Returns true if the given object is an instance of GatewayStaticroute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayStaticroute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayStaticroute.__pulumiType;
    }

    public readonly advertise!: pulumi.Output<boolean>;
    public readonly cost!: pulumi.Output<number>;
    public readonly destination!: pulumi.Output<string>;
    public readonly device!: pulumi.Output<string>;
    public readonly gatewayId!: pulumi.Output<string>;
    public readonly install!: pulumi.Output<boolean>;
    public readonly nhop!: pulumi.Output<string>;

    /**
     * Create a GatewayStaticroute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayStaticrouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayStaticrouteArgs | GatewayStaticrouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayStaticrouteState | undefined;
            resourceInputs["advertise"] = state ? state.advertise : undefined;
            resourceInputs["cost"] = state ? state.cost : undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["device"] = state ? state.device : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["install"] = state ? state.install : undefined;
            resourceInputs["nhop"] = state ? state.nhop : undefined;
        } else {
            const args = argsOrState as GatewayStaticrouteArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.device === undefined) && !opts.urn) {
                throw new Error("Missing required property 'device'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.nhop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nhop'");
            }
            resourceInputs["advertise"] = args ? args.advertise : undefined;
            resourceInputs["cost"] = args ? args.cost : undefined;
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["device"] = args ? args.device : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["install"] = args ? args.install : undefined;
            resourceInputs["nhop"] = args ? args.nhop : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayStaticroute.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GatewayStaticroute resources.
 */
export interface GatewayStaticrouteState {
    advertise?: pulumi.Input<boolean>;
    cost?: pulumi.Input<number>;
    destination?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    install?: pulumi.Input<boolean>;
    nhop?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayStaticroute resource.
 */
export interface GatewayStaticrouteArgs {
    advertise?: pulumi.Input<boolean>;
    cost?: pulumi.Input<number>;
    destination: pulumi.Input<string>;
    device: pulumi.Input<string>;
    gatewayId: pulumi.Input<string>;
    install?: pulumi.Input<boolean>;
    nhop: pulumi.Input<string>;
}
