// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskopebwan:index/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    public readonly activated!: pulumi.Output<boolean>;
    public readonly assignedPolicy!: pulumi.Output<outputs.GatewayAssignedPolicy | undefined>;
    public readonly bgpConfigurations!: pulumi.Output<outputs.GatewayBgpConfiguration[] | undefined>;
    public readonly createdBy!: pulumi.Output<outputs.GatewayCreatedBy | undefined>;
    public readonly dateCreated!: pulumi.Output<string>;
    public readonly dateModified!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly interfaces!: pulumi.Output<outputs.GatewayInterface[] | undefined>;
    public readonly model!: pulumi.Output<string>;
    public readonly modifiedBy!: pulumi.Output<outputs.GatewayModifiedBy | undefined>;
    public readonly mqttConfiguration!: pulumi.Output<outputs.GatewayMqttConfiguration | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly one2OneNatRules!: pulumi.Output<outputs.GatewayOne2OneNatRule[] | undefined>;
    public readonly overlayConfiguration!: pulumi.Output<outputs.GatewayOverlayConfiguration | undefined>;
    public readonly portForwardingNatRules!: pulumi.Output<outputs.GatewayPortForwardingNatRule[] | undefined>;
    public readonly psk!: pulumi.Output<string>;
    public readonly publicKey!: pulumi.Output<string>;
    public readonly role!: pulumi.Output<string>;
    public readonly serialnumber!: pulumi.Output<string>;
    public readonly staticRoutes!: pulumi.Output<outputs.GatewayStaticRoute[] | undefined>;
    public readonly swmanifest!: pulumi.Output<string>;
    public readonly swversion!: pulumi.Output<string>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["activated"] = state ? state.activated : undefined;
            resourceInputs["assignedPolicy"] = state ? state.assignedPolicy : undefined;
            resourceInputs["bgpConfigurations"] = state ? state.bgpConfigurations : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["dateCreated"] = state ? state.dateCreated : undefined;
            resourceInputs["dateModified"] = state ? state.dateModified : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["interfaces"] = state ? state.interfaces : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["modifiedBy"] = state ? state.modifiedBy : undefined;
            resourceInputs["mqttConfiguration"] = state ? state.mqttConfiguration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["one2OneNatRules"] = state ? state.one2OneNatRules : undefined;
            resourceInputs["overlayConfiguration"] = state ? state.overlayConfiguration : undefined;
            resourceInputs["portForwardingNatRules"] = state ? state.portForwardingNatRules : undefined;
            resourceInputs["psk"] = state ? state.psk : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["serialnumber"] = state ? state.serialnumber : undefined;
            resourceInputs["staticRoutes"] = state ? state.staticRoutes : undefined;
            resourceInputs["swmanifest"] = state ? state.swmanifest : undefined;
            resourceInputs["swversion"] = state ? state.swversion : undefined;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            resourceInputs["activated"] = args ? args.activated : undefined;
            resourceInputs["assignedPolicy"] = args ? args.assignedPolicy : undefined;
            resourceInputs["bgpConfigurations"] = args ? args.bgpConfigurations : undefined;
            resourceInputs["createdBy"] = args ? args.createdBy : undefined;
            resourceInputs["dateCreated"] = args ? args.dateCreated : undefined;
            resourceInputs["dateModified"] = args ? args.dateModified : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["interfaces"] = args ? args.interfaces : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["modifiedBy"] = args ? args.modifiedBy : undefined;
            resourceInputs["mqttConfiguration"] = args ? args.mqttConfiguration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["one2OneNatRules"] = args ? args.one2OneNatRules : undefined;
            resourceInputs["overlayConfiguration"] = args ? args.overlayConfiguration : undefined;
            resourceInputs["portForwardingNatRules"] = args ? args.portForwardingNatRules : undefined;
            resourceInputs["psk"] = args ? args.psk : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["serialnumber"] = args ? args.serialnumber : undefined;
            resourceInputs["staticRoutes"] = args ? args.staticRoutes : undefined;
            resourceInputs["swmanifest"] = args ? args.swmanifest : undefined;
            resourceInputs["swversion"] = args ? args.swversion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    activated?: pulumi.Input<boolean>;
    assignedPolicy?: pulumi.Input<inputs.GatewayAssignedPolicy>;
    bgpConfigurations?: pulumi.Input<pulumi.Input<inputs.GatewayBgpConfiguration>[]>;
    createdBy?: pulumi.Input<inputs.GatewayCreatedBy>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.GatewayInterface>[]>;
    model?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<inputs.GatewayModifiedBy>;
    mqttConfiguration?: pulumi.Input<inputs.GatewayMqttConfiguration>;
    name?: pulumi.Input<string>;
    one2OneNatRules?: pulumi.Input<pulumi.Input<inputs.GatewayOne2OneNatRule>[]>;
    overlayConfiguration?: pulumi.Input<inputs.GatewayOverlayConfiguration>;
    portForwardingNatRules?: pulumi.Input<pulumi.Input<inputs.GatewayPortForwardingNatRule>[]>;
    psk?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serialnumber?: pulumi.Input<string>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.GatewayStaticRoute>[]>;
    swmanifest?: pulumi.Input<string>;
    swversion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    activated?: pulumi.Input<boolean>;
    assignedPolicy?: pulumi.Input<inputs.GatewayAssignedPolicy>;
    bgpConfigurations?: pulumi.Input<pulumi.Input<inputs.GatewayBgpConfiguration>[]>;
    createdBy?: pulumi.Input<inputs.GatewayCreatedBy>;
    dateCreated?: pulumi.Input<string>;
    dateModified?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    interfaces?: pulumi.Input<pulumi.Input<inputs.GatewayInterface>[]>;
    model?: pulumi.Input<string>;
    modifiedBy?: pulumi.Input<inputs.GatewayModifiedBy>;
    mqttConfiguration?: pulumi.Input<inputs.GatewayMqttConfiguration>;
    name?: pulumi.Input<string>;
    one2OneNatRules?: pulumi.Input<pulumi.Input<inputs.GatewayOne2OneNatRule>[]>;
    overlayConfiguration?: pulumi.Input<inputs.GatewayOverlayConfiguration>;
    portForwardingNatRules?: pulumi.Input<pulumi.Input<inputs.GatewayPortForwardingNatRule>[]>;
    psk?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    serialnumber?: pulumi.Input<string>;
    staticRoutes?: pulumi.Input<pulumi.Input<inputs.GatewayStaticRoute>[]>;
    swmanifest?: pulumi.Input<string>;
    swversion?: pulumi.Input<string>;
}
