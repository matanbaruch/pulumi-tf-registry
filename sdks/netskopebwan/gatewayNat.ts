// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GatewayNat extends pulumi.CustomResource {
    /**
     * Get an existing GatewayNat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayNatState, opts?: pulumi.CustomResourceOptions): GatewayNat {
        return new GatewayNat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskopebwan:index/gatewayNat:GatewayNat';

    /**
     * Returns true if the given object is an instance of GatewayNat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayNat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayNat.__pulumiType;
    }

    public readonly biDirectional!: pulumi.Output<boolean>;
    public readonly gatewayId!: pulumi.Output<string>;
    public readonly lanIp!: pulumi.Output<string>;
    public readonly lanPort!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly publicIp!: pulumi.Output<string>;
    public readonly publicPort!: pulumi.Output<number>;
    public readonly upLinkIfName!: pulumi.Output<string>;

    /**
     * Create a GatewayNat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayNatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayNatArgs | GatewayNatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayNatState | undefined;
            resourceInputs["biDirectional"] = state ? state.biDirectional : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["lanIp"] = state ? state.lanIp : undefined;
            resourceInputs["lanPort"] = state ? state.lanPort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicPort"] = state ? state.publicPort : undefined;
            resourceInputs["upLinkIfName"] = state ? state.upLinkIfName : undefined;
        } else {
            const args = argsOrState as GatewayNatArgs | undefined;
            if ((!args || args.biDirectional === undefined) && !opts.urn) {
                throw new Error("Missing required property 'biDirectional'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.lanIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lanIp'");
            }
            if ((!args || args.publicIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicIp'");
            }
            if ((!args || args.upLinkIfName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upLinkIfName'");
            }
            resourceInputs["biDirectional"] = args ? args.biDirectional : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["lanIp"] = args ? args.lanIp : undefined;
            resourceInputs["lanPort"] = args ? args.lanPort : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["publicPort"] = args ? args.publicPort : undefined;
            resourceInputs["upLinkIfName"] = args ? args.upLinkIfName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayNat.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GatewayNat resources.
 */
export interface GatewayNatState {
    biDirectional?: pulumi.Input<boolean>;
    gatewayId?: pulumi.Input<string>;
    lanIp?: pulumi.Input<string>;
    lanPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicPort?: pulumi.Input<number>;
    upLinkIfName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayNat resource.
 */
export interface GatewayNatArgs {
    biDirectional: pulumi.Input<boolean>;
    gatewayId: pulumi.Input<string>;
    lanIp: pulumi.Input<string>;
    lanPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    publicIp: pulumi.Input<string>;
    publicPort?: pulumi.Input<number>;
    upLinkIfName: pulumi.Input<string>;
}
