// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GatewayBgpconfig extends pulumi.CustomResource {
    /**
     * Get an existing GatewayBgpconfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayBgpconfigState, opts?: pulumi.CustomResourceOptions): GatewayBgpconfig {
        return new GatewayBgpconfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskopebwan:index/gatewayBgpconfig:GatewayBgpconfig';

    /**
     * Returns true if the given object is an instance of GatewayBgpconfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayBgpconfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayBgpconfig.__pulumiType;
    }

    public readonly bfdInterval!: pulumi.Output<number>;
    public readonly bfdMultiplier!: pulumi.Output<number>;
    public readonly bfdRecvInterval!: pulumi.Output<number>;
    public readonly gatewayId!: pulumi.Output<string>;
    public readonly isBfdEnabled!: pulumi.Output<boolean>;
    public readonly localAs!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly neighbor!: pulumi.Output<string>;
    public readonly remoteAs!: pulumi.Output<number>;
    public readonly routerId!: pulumi.Output<string>;

    /**
     * Create a GatewayBgpconfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayBgpconfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayBgpconfigArgs | GatewayBgpconfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayBgpconfigState | undefined;
            resourceInputs["bfdInterval"] = state ? state.bfdInterval : undefined;
            resourceInputs["bfdMultiplier"] = state ? state.bfdMultiplier : undefined;
            resourceInputs["bfdRecvInterval"] = state ? state.bfdRecvInterval : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["isBfdEnabled"] = state ? state.isBfdEnabled : undefined;
            resourceInputs["localAs"] = state ? state.localAs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["neighbor"] = state ? state.neighbor : undefined;
            resourceInputs["remoteAs"] = state ? state.remoteAs : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
        } else {
            const args = argsOrState as GatewayBgpconfigArgs | undefined;
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.neighbor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'neighbor'");
            }
            if ((!args || args.remoteAs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteAs'");
            }
            resourceInputs["bfdInterval"] = args ? args.bfdInterval : undefined;
            resourceInputs["bfdMultiplier"] = args ? args.bfdMultiplier : undefined;
            resourceInputs["bfdRecvInterval"] = args ? args.bfdRecvInterval : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["isBfdEnabled"] = args ? args.isBfdEnabled : undefined;
            resourceInputs["localAs"] = args ? args.localAs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["neighbor"] = args ? args.neighbor : undefined;
            resourceInputs["remoteAs"] = args ? args.remoteAs : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayBgpconfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GatewayBgpconfig resources.
 */
export interface GatewayBgpconfigState {
    bfdInterval?: pulumi.Input<number>;
    bfdMultiplier?: pulumi.Input<number>;
    bfdRecvInterval?: pulumi.Input<number>;
    gatewayId?: pulumi.Input<string>;
    isBfdEnabled?: pulumi.Input<boolean>;
    localAs?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    neighbor?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    routerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayBgpconfig resource.
 */
export interface GatewayBgpconfigArgs {
    bfdInterval?: pulumi.Input<number>;
    bfdMultiplier?: pulumi.Input<number>;
    bfdRecvInterval?: pulumi.Input<number>;
    gatewayId: pulumi.Input<string>;
    isBfdEnabled?: pulumi.Input<boolean>;
    localAs?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    neighbor: pulumi.Input<string>;
    remoteAs: pulumi.Input<number>;
    routerId?: pulumi.Input<string>;
}
