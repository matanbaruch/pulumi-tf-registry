// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GatewayAssignedPolicy {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GatewayBgpConfiguration {
    bfdInterval?: pulumi.Input<number>;
    bfdMultiplier?: pulumi.Input<number>;
    bfdRecvInterval?: pulumi.Input<number>;
    isBfdEnabled?: pulumi.Input<boolean>;
    localAs?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    neighbor?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    routerId?: pulumi.Input<string>;
}

export interface GatewayCreatedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GatewayInterface {
    8021xMab?: pulumi.Input<boolean>;
    addresses?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceAddress>[]>;
    allowedVlans?: pulumi.Input<pulumi.Input<number>[]>;
    bridgeMembers?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayServerSetting?: pulumi.Input<inputs.GatewayInterfaceDhcpRelayServerSetting>;
    dhcpServerSetting?: pulumi.Input<inputs.GatewayInterfaceDhcpServerSetting>;
    doAdvertise?: pulumi.Input<boolean>;
    enableNat?: pulumi.Input<boolean>;
    isDisabled?: pulumi.Input<boolean>;
    lteProps?: pulumi.Input<inputs.GatewayInterfaceLteProps>;
    macAddr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuDiscovery?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlaySetting?: pulumi.Input<inputs.GatewayInterfaceOverlaySetting>;
    proxyArpSettings?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceProxyArpSetting>[]>;
    radii?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceRadius>[]>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vrrp?: pulumi.Input<inputs.GatewayInterfaceVrrp>;
    wifiProps?: pulumi.Input<inputs.GatewayInterfaceWifiProps>;
    zone?: pulumi.Input<string>;
}

export interface GatewayInterfaceAddress {
    address?: pulumi.Input<string>;
    addressAssignment?: pulumi.Input<string>;
    addressFamily?: pulumi.Input<string>;
    dnsPrimary?: pulumi.Input<string>;
    dnsSecondary?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
}

export interface GatewayInterfaceDhcpRelayServerSetting {
    relayServerIpLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GatewayInterfaceDhcpServerSetting {
    addressRanges?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceDhcpServerSettingAddressRange>[]>;
    customOptions?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceDhcpServerSettingCustomOption>[]>;
    dnsPrimary?: pulumi.Input<string>;
    dnsSecondary?: pulumi.Input<string>;
    leaseDuration?: pulumi.Input<number>;
    macAddressToIpv4Bindings?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceDhcpServerSettingMacAddressToIpv4Binding>[]>;
    network?: pulumi.Input<string>;
}

export interface GatewayInterfaceDhcpServerSettingAddressRange {
    endIpv4?: pulumi.Input<string>;
    startIpv4?: pulumi.Input<string>;
}

export interface GatewayInterfaceDhcpServerSettingCustomOption {
    code?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GatewayInterfaceDhcpServerSettingMacAddressToIpv4Binding {
    ipv4Address?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GatewayInterfaceLteProps {
    apn?: pulumi.Input<string>;
    isPrimary?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface GatewayInterfaceOverlaySetting {
    bwMeasurementMode?: pulumi.Input<string>;
    dataUsageLimit?: pulumi.Input<inputs.GatewayInterfaceOverlaySettingDataUsageLimit>;
    doCopyTos?: pulumi.Input<boolean>;
    isBackup?: pulumi.Input<boolean>;
    isMetered?: pulumi.Input<boolean>;
    rxBwKbps?: pulumi.Input<number>;
    tag?: pulumi.Input<string>;
    txBwKbps?: pulumi.Input<number>;
}

export interface GatewayInterfaceOverlaySettingDataUsageLimit {
    dataLimitMb?: pulumi.Input<number>;
    dataUsagePeriod?: pulumi.Input<string>;
    dataUsagePeriodStartDate?: pulumi.Input<string>;
}

export interface GatewayInterfaceProxyArpSetting {
    ipv4Address?: pulumi.Input<string>;
    ipv4Gateway?: pulumi.Input<string>;
    ipv4Mask?: pulumi.Input<string>;
    lanInterfaceName?: pulumi.Input<string>;
}

export interface GatewayInterfaceRadius {
    accountingPort?: pulumi.Input<number>;
    clientInterfaceName?: pulumi.Input<string>;
    clientIpv4?: pulumi.Input<string>;
    ipv4?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
}

export interface GatewayInterfaceVrrp {
    advertiseInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    virtualIpv4?: pulumi.Input<string>;
    virtualRouterId?: pulumi.Input<number>;
}

export interface GatewayInterfaceWifiProps {
    bridge?: pulumi.Input<string>;
    channel?: pulumi.Input<number>;
    countryCode?: pulumi.Input<string>;
    encryption?: pulumi.Input<inputs.GatewayInterfaceWifiPropsEncryption>;
    freq?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    ssid?: pulumi.Input<string>;
}

export interface GatewayInterfaceWifiPropsEncryption {
    key?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface GatewayModifiedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GatewayMqttConfiguration {
    deviceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
    topics?: pulumi.Input<pulumi.Input<inputs.GatewayMqttConfigurationTopic>[]>;
}

export interface GatewayMqttConfigurationTopic {
    name?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GatewayOne2OneNatRule {
    biDirectional?: pulumi.Input<boolean>;
    lanIp?: pulumi.Input<string>;
    lanPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicPort?: pulumi.Input<number>;
    upLinkIfName?: pulumi.Input<string>;
}

export interface GatewayOverlayConfiguration {
    ip?: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    routableAddresses?: pulumi.Input<pulumi.Input<inputs.GatewayOverlayConfigurationRoutableAddress>[]>;
}

export interface GatewayOverlayConfigurationRoutableAddress {
    networkAddress?: pulumi.Input<string>;
    networkTag?: pulumi.Input<string>;
}

export interface GatewayPortForwardingNatRule {
    biDirectional?: pulumi.Input<boolean>;
    lanIp?: pulumi.Input<string>;
    lanPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicPort?: pulumi.Input<number>;
    upLinkIfName?: pulumi.Input<string>;
}

export interface GatewayStaticRoute {
    advertise?: pulumi.Input<boolean>;
    cost?: pulumi.Input<number>;
    destination?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    install?: pulumi.Input<boolean>;
    nhop?: pulumi.Input<string>;
}

export interface GetGatewayAssignedPolicy {
    id?: string;
    name?: string;
}

export interface GetGatewayAssignedPolicyArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetGatewayBgpConfiguration {
    bfdInterval?: number;
    bfdMultiplier?: number;
    bfdRecvInterval?: number;
    isBfdEnabled?: boolean;
    localAs?: number;
    name?: string;
    neighbor?: string;
    remoteAs?: number;
    routerId?: string;
}

export interface GetGatewayBgpConfigurationArgs {
    bfdInterval?: pulumi.Input<number>;
    bfdMultiplier?: pulumi.Input<number>;
    bfdRecvInterval?: pulumi.Input<number>;
    isBfdEnabled?: pulumi.Input<boolean>;
    localAs?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    neighbor?: pulumi.Input<string>;
    remoteAs?: pulumi.Input<number>;
    routerId?: pulumi.Input<string>;
}

export interface GetGatewayCreatedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetGatewayCreatedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetGatewayInterface {
    8021xMab?: boolean;
    addresses?: inputs.GetGatewayInterfaceAddress[];
    allowedVlans?: number[];
    bridgeMembers?: string[];
    dhcpRelayServerSetting?: inputs.GetGatewayInterfaceDhcpRelayServerSetting;
    dhcpServerSetting?: inputs.GetGatewayInterfaceDhcpServerSetting;
    doAdvertise?: boolean;
    enableNat?: boolean;
    isDisabled?: boolean;
    lteProps?: inputs.GetGatewayInterfaceLteProps;
    macAddr?: string;
    mode?: string;
    mtu?: number;
    mtuDiscovery?: string;
    name?: string;
    overlaySetting?: inputs.GetGatewayInterfaceOverlaySetting;
    proxyArpSettings?: inputs.GetGatewayInterfaceProxyArpSetting[];
    radii?: inputs.GetGatewayInterfaceRadius[];
    type?: string;
    vlan?: number;
    vrrp?: inputs.GetGatewayInterfaceVrrp;
    wifiProps?: inputs.GetGatewayInterfaceWifiProps;
    zone?: string;
}

export interface GetGatewayInterfaceArgs {
    8021xMab?: pulumi.Input<boolean>;
    addresses?: pulumi.Input<pulumi.Input<inputs.GetGatewayInterfaceAddressArgs>[]>;
    allowedVlans?: pulumi.Input<pulumi.Input<number>[]>;
    bridgeMembers?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayServerSetting?: pulumi.Input<inputs.GetGatewayInterfaceDhcpRelayServerSettingArgs>;
    dhcpServerSetting?: pulumi.Input<inputs.GetGatewayInterfaceDhcpServerSettingArgs>;
    doAdvertise?: pulumi.Input<boolean>;
    enableNat?: pulumi.Input<boolean>;
    isDisabled?: pulumi.Input<boolean>;
    lteProps?: pulumi.Input<inputs.GetGatewayInterfaceLtePropsArgs>;
    macAddr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuDiscovery?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlaySetting?: pulumi.Input<inputs.GetGatewayInterfaceOverlaySettingArgs>;
    proxyArpSettings?: pulumi.Input<pulumi.Input<inputs.GetGatewayInterfaceProxyArpSettingArgs>[]>;
    radii?: pulumi.Input<pulumi.Input<inputs.GetGatewayInterfaceRadiusArgs>[]>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vrrp?: pulumi.Input<inputs.GetGatewayInterfaceVrrpArgs>;
    wifiProps?: pulumi.Input<inputs.GetGatewayInterfaceWifiPropsArgs>;
    zone?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceAddress {
    address?: string;
    addressAssignment?: string;
    addressFamily?: string;
    dnsPrimary?: string;
    dnsSecondary?: string;
    gateway?: string;
    mask?: string;
}

export interface GetGatewayInterfaceAddressArgs {
    address?: pulumi.Input<string>;
    addressAssignment?: pulumi.Input<string>;
    addressFamily?: pulumi.Input<string>;
    dnsPrimary?: pulumi.Input<string>;
    dnsSecondary?: pulumi.Input<string>;
    gateway?: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceDhcpRelayServerSetting {
    relayServerIpLists?: string[];
}

export interface GetGatewayInterfaceDhcpRelayServerSettingArgs {
    relayServerIpLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetGatewayInterfaceDhcpServerSetting {
    addressRanges?: inputs.GetGatewayInterfaceDhcpServerSettingAddressRange[];
    customOptions?: inputs.GetGatewayInterfaceDhcpServerSettingCustomOption[];
    dnsPrimary?: string;
    dnsSecondary?: string;
    leaseDuration?: number;
    macAddressToIpv4Bindings?: inputs.GetGatewayInterfaceDhcpServerSettingMacAddressToIpv4Binding[];
    network?: string;
}

export interface GetGatewayInterfaceDhcpServerSettingArgs {
    addressRanges?: pulumi.Input<pulumi.Input<inputs.GetGatewayInterfaceDhcpServerSettingAddressRangeArgs>[]>;
    customOptions?: pulumi.Input<pulumi.Input<inputs.GetGatewayInterfaceDhcpServerSettingCustomOptionArgs>[]>;
    dnsPrimary?: pulumi.Input<string>;
    dnsSecondary?: pulumi.Input<string>;
    leaseDuration?: pulumi.Input<number>;
    macAddressToIpv4Bindings?: pulumi.Input<pulumi.Input<inputs.GetGatewayInterfaceDhcpServerSettingMacAddressToIpv4BindingArgs>[]>;
    network?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceDhcpServerSettingAddressRange {
    endIpv4?: string;
    startIpv4?: string;
}

export interface GetGatewayInterfaceDhcpServerSettingAddressRangeArgs {
    endIpv4?: pulumi.Input<string>;
    startIpv4?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceDhcpServerSettingCustomOption {
    code?: number;
    type?: string;
    value?: string;
}

export interface GetGatewayInterfaceDhcpServerSettingCustomOptionArgs {
    code?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceDhcpServerSettingMacAddressToIpv4Binding {
    ipv4Address?: string;
    macAddress?: string;
    name?: string;
}

export interface GetGatewayInterfaceDhcpServerSettingMacAddressToIpv4BindingArgs {
    ipv4Address?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceLteProps {
    apn?: string;
    isPrimary?: boolean;
    password?: string;
    userName?: string;
}

export interface GetGatewayInterfaceLtePropsArgs {
    apn?: pulumi.Input<string>;
    isPrimary?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceOverlaySetting {
    bwMeasurementMode?: string;
    dataUsageLimit?: inputs.GetGatewayInterfaceOverlaySettingDataUsageLimit;
    doCopyTos?: boolean;
    isBackup?: boolean;
    isMetered?: boolean;
    rxBwKbps?: number;
    tag?: string;
    txBwKbps?: number;
}

export interface GetGatewayInterfaceOverlaySettingArgs {
    bwMeasurementMode?: pulumi.Input<string>;
    dataUsageLimit?: pulumi.Input<inputs.GetGatewayInterfaceOverlaySettingDataUsageLimitArgs>;
    doCopyTos?: pulumi.Input<boolean>;
    isBackup?: pulumi.Input<boolean>;
    isMetered?: pulumi.Input<boolean>;
    rxBwKbps?: pulumi.Input<number>;
    tag?: pulumi.Input<string>;
    txBwKbps?: pulumi.Input<number>;
}

export interface GetGatewayInterfaceOverlaySettingDataUsageLimit {
    dataLimitMb?: number;
    dataUsagePeriod?: string;
    dataUsagePeriodStartDate?: string;
}

export interface GetGatewayInterfaceOverlaySettingDataUsageLimitArgs {
    dataLimitMb?: pulumi.Input<number>;
    dataUsagePeriod?: pulumi.Input<string>;
    dataUsagePeriodStartDate?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceProxyArpSetting {
    ipv4Address?: string;
    ipv4Gateway?: string;
    ipv4Mask?: string;
    lanInterfaceName?: string;
}

export interface GetGatewayInterfaceProxyArpSettingArgs {
    ipv4Address?: pulumi.Input<string>;
    ipv4Gateway?: pulumi.Input<string>;
    ipv4Mask?: pulumi.Input<string>;
    lanInterfaceName?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceRadius {
    accountingPort?: number;
    clientInterfaceName?: string;
    clientIpv4?: string;
    ipv4?: string;
    name?: string;
    port?: number;
    secret?: string;
}

export interface GetGatewayInterfaceRadiusArgs {
    accountingPort?: pulumi.Input<number>;
    clientInterfaceName?: pulumi.Input<string>;
    clientIpv4?: pulumi.Input<string>;
    ipv4?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    secret?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceVrrp {
    advertiseInterval?: number;
    priority?: number;
    state?: string;
    virtualIpv4?: string;
    virtualRouterId?: number;
}

export interface GetGatewayInterfaceVrrpArgs {
    advertiseInterval?: pulumi.Input<number>;
    priority?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
    virtualIpv4?: pulumi.Input<string>;
    virtualRouterId?: pulumi.Input<number>;
}

export interface GetGatewayInterfaceWifiProps {
    bridge?: string;
    channel?: number;
    countryCode?: string;
    encryption?: inputs.GetGatewayInterfaceWifiPropsEncryption;
    freq?: number;
    mode?: string;
    ssid?: string;
}

export interface GetGatewayInterfaceWifiPropsArgs {
    bridge?: pulumi.Input<string>;
    channel?: pulumi.Input<number>;
    countryCode?: pulumi.Input<string>;
    encryption?: pulumi.Input<inputs.GetGatewayInterfaceWifiPropsEncryptionArgs>;
    freq?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    ssid?: pulumi.Input<string>;
}

export interface GetGatewayInterfaceWifiPropsEncryption {
    key?: string;
    protocol?: string;
}

export interface GetGatewayInterfaceWifiPropsEncryptionArgs {
    key?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
}

export interface GetGatewayModifiedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetGatewayModifiedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetGatewayMqttConfiguration {
    deviceId?: string;
    name?: string;
    projectId?: string;
    region?: string;
    registry?: string;
    topics?: inputs.GetGatewayMqttConfigurationTopic[];
}

export interface GetGatewayMqttConfigurationArgs {
    deviceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    registry?: pulumi.Input<string>;
    topics?: pulumi.Input<pulumi.Input<inputs.GetGatewayMqttConfigurationTopicArgs>[]>;
}

export interface GetGatewayMqttConfigurationTopic {
    name?: string;
    uri?: string;
}

export interface GetGatewayMqttConfigurationTopicArgs {
    name?: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface GetGatewayOne2OneNatRule {
    biDirectional?: boolean;
    lanIp?: string;
    lanPort?: number;
    name?: string;
    publicIp?: string;
    publicPort?: number;
    upLinkIfName?: string;
}

export interface GetGatewayOne2OneNatRuleArgs {
    biDirectional?: pulumi.Input<boolean>;
    lanIp?: pulumi.Input<string>;
    lanPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicPort?: pulumi.Input<number>;
    upLinkIfName?: pulumi.Input<string>;
}

export interface GetGatewayOverlayConfiguration {
    ip?: string;
    mask?: string;
    routableAddresses?: inputs.GetGatewayOverlayConfigurationRoutableAddress[];
}

export interface GetGatewayOverlayConfigurationArgs {
    ip?: pulumi.Input<string>;
    mask?: pulumi.Input<string>;
    routableAddresses?: pulumi.Input<pulumi.Input<inputs.GetGatewayOverlayConfigurationRoutableAddressArgs>[]>;
}

export interface GetGatewayOverlayConfigurationRoutableAddress {
    networkAddress?: string;
    networkTag?: string;
}

export interface GetGatewayOverlayConfigurationRoutableAddressArgs {
    networkAddress?: pulumi.Input<string>;
    networkTag?: pulumi.Input<string>;
}

export interface GetGatewayPortForwardingNatRule {
    biDirectional?: boolean;
    lanIp?: string;
    lanPort?: number;
    name?: string;
    publicIp?: string;
    publicPort?: number;
    upLinkIfName?: string;
}

export interface GetGatewayPortForwardingNatRuleArgs {
    biDirectional?: pulumi.Input<boolean>;
    lanIp?: pulumi.Input<string>;
    lanPort?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicPort?: pulumi.Input<number>;
    upLinkIfName?: pulumi.Input<string>;
}

export interface GetGatewayStaticRoute {
    advertise?: boolean;
    cost?: number;
    destination?: string;
    device?: string;
    install?: boolean;
    nhop?: string;
}

export interface GetGatewayStaticRouteArgs {
    advertise?: pulumi.Input<boolean>;
    cost?: pulumi.Input<number>;
    destination?: pulumi.Input<string>;
    device?: pulumi.Input<string>;
    install?: pulumi.Input<boolean>;
    nhop?: pulumi.Input<string>;
}

export interface GetPolicyConfig {
    pcfgCosTables?: inputs.GetPolicyConfigPcfgCosTable[];
    pcfgFirewall?: inputs.GetPolicyConfigPcfgFirewall;
    pcfgGeneralSettings?: inputs.GetPolicyConfigPcfgGeneralSettings;
    pcfgQosPolicies?: inputs.GetPolicyConfigPcfgQosPolicy[];
    pcfgSchemaver?: number;
    pcfgSchemaverMinor?: number;
    pcfgUrlFilter?: inputs.GetPolicyConfigPcfgUrlFilter;
}

export interface GetPolicyConfigArgs {
    pcfgCosTables?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgCosTableArgs>[]>;
    pcfgFirewall?: pulumi.Input<inputs.GetPolicyConfigPcfgFirewallArgs>;
    pcfgGeneralSettings?: pulumi.Input<inputs.GetPolicyConfigPcfgGeneralSettingsArgs>;
    pcfgQosPolicies?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyArgs>[]>;
    pcfgSchemaver?: pulumi.Input<number>;
    pcfgSchemaverMinor?: pulumi.Input<number>;
    pcfgUrlFilter?: pulumi.Input<inputs.GetPolicyConfigPcfgUrlFilterArgs>;
}

export interface GetPolicyConfigPcfgCosTable {
    cosJitterMs?: number;
    cosLastResort?: boolean;
    cosLatencyMs?: number;
    cosLlq?: boolean;
    cosLossPercent?: number;
    cosMinGuaranteeBwPercent?: number;
    cosPriority?: string;
    cosTrafficClass?: string;
}

export interface GetPolicyConfigPcfgCosTableArgs {
    cosJitterMs?: pulumi.Input<number>;
    cosLastResort?: pulumi.Input<boolean>;
    cosLatencyMs?: pulumi.Input<number>;
    cosLlq?: pulumi.Input<boolean>;
    cosLossPercent?: pulumi.Input<number>;
    cosMinGuaranteeBwPercent?: pulumi.Input<number>;
    cosPriority?: pulumi.Input<string>;
    cosTrafficClass?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgFirewall {
    pcfgFirewallEnabled?: boolean;
    pcfgFwLogging?: inputs.GetPolicyConfigPcfgFirewallPcfgFwLogging;
    pcfgFwPolicies?: inputs.GetPolicyConfigPcfgFirewallPcfgFwPolicy[];
    pcfgFwStatefulEnabled?: boolean;
}

export interface GetPolicyConfigPcfgFirewallArgs {
    pcfgFirewallEnabled?: pulumi.Input<boolean>;
    pcfgFwLogging?: pulumi.Input<inputs.GetPolicyConfigPcfgFirewallPcfgFwLoggingArgs>;
    pcfgFwPolicies?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgFirewallPcfgFwPolicyArgs>[]>;
    pcfgFwStatefulEnabled?: pulumi.Input<boolean>;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwLogging {
    pcfgFwAllowLogEnabled?: boolean;
    pcfgFwDenyLogEnabled?: boolean;
    pcfgFwLogEnabled?: boolean;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwLoggingArgs {
    pcfgFwAllowLogEnabled?: pulumi.Input<boolean>;
    pcfgFwDenyLogEnabled?: pulumi.Input<boolean>;
    pcfgFwLogEnabled?: pulumi.Input<boolean>;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwPolicy {
    fwAction?: inputs.GetPolicyConfigPcfgFirewallPcfgFwPolicyFwAction;
    fwMatch?: inputs.GetPolicyConfigPcfgFirewallPcfgFwPolicyFwMatch;
    fwName?: string;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwPolicyArgs {
    fwAction?: pulumi.Input<inputs.GetPolicyConfigPcfgFirewallPcfgFwPolicyFwActionArgs>;
    fwMatch?: pulumi.Input<inputs.GetPolicyConfigPcfgFirewallPcfgFwPolicyFwMatchArgs>;
    fwName?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwPolicyFwAction {
    allowOrDeny?: string;
    logging?: boolean;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwPolicyFwActionArgs {
    allowOrDeny?: pulumi.Input<string>;
    logging?: pulumi.Input<boolean>;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwPolicyFwMatch {
    mtchAppIds?: number[];
    mtchDestInternet?: boolean;
    mtchDestIp?: string;
    mtchDestPort?: string;
    mtchDestZone?: string;
    mtchDstVlan?: number;
    mtchL4Protocol?: string;
    mtchSrcIp?: string;
    mtchSrcMac?: string;
    mtchSrcPort?: string;
    mtchSrcVlan?: number;
    mtchSrcZone?: string;
}

export interface GetPolicyConfigPcfgFirewallPcfgFwPolicyFwMatchArgs {
    mtchAppIds?: pulumi.Input<pulumi.Input<number>[]>;
    mtchDestInternet?: pulumi.Input<boolean>;
    mtchDestIp?: pulumi.Input<string>;
    mtchDestPort?: pulumi.Input<string>;
    mtchDestZone?: pulumi.Input<string>;
    mtchDstVlan?: pulumi.Input<number>;
    mtchL4Protocol?: pulumi.Input<string>;
    mtchSrcIp?: pulumi.Input<string>;
    mtchSrcMac?: pulumi.Input<string>;
    mtchSrcPort?: pulumi.Input<string>;
    mtchSrcVlan?: pulumi.Input<number>;
    mtchSrcZone?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgGeneralSettings {
    pcfgNetflow?: inputs.GetPolicyConfigPcfgGeneralSettingsPcfgNetflow;
    pcfgSnmpTraps?: inputs.GetPolicyConfigPcfgGeneralSettingsPcfgSnmpTrap[];
    pcfgSnmps?: inputs.GetPolicyConfigPcfgGeneralSettingsPcfgSnmp[];
    pcfgSyslogEnabled?: boolean;
    pcfgSyslogServers?: inputs.GetPolicyConfigPcfgGeneralSettingsPcfgSyslogServer[];
}

export interface GetPolicyConfigPcfgGeneralSettingsArgs {
    pcfgNetflow?: pulumi.Input<inputs.GetPolicyConfigPcfgGeneralSettingsPcfgNetflowArgs>;
    pcfgSnmpTraps?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgGeneralSettingsPcfgSnmpTrapArgs>[]>;
    pcfgSnmps?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgGeneralSettingsPcfgSnmpArgs>[]>;
    pcfgSyslogEnabled?: pulumi.Input<boolean>;
    pcfgSyslogServers?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgGeneralSettingsPcfgSyslogServerArgs>[]>;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgNetflow {
    pcfgNfEnabled?: boolean;
    pcfgNfExporterSettings?: inputs.GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettings;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgNetflowArgs {
    pcfgNfEnabled?: pulumi.Input<boolean>;
    pcfgNfExporterSettings?: pulumi.Input<inputs.GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsArgs>;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettings {
    nfCollectorSettings?: inputs.GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsNfCollectorSetting[];
    nfExportInterval?: number;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsArgs {
    nfCollectorSettings?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsNfCollectorSettingArgs>[]>;
    nfExportInterval?: pulumi.Input<number>;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsNfCollectorSetting {
    nfIp?: string;
    nfPort?: number;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsNfCollectorSettingArgs {
    nfIp?: pulumi.Input<string>;
    nfPort?: pulumi.Input<number>;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgSnmp {
    snmpAllowedIp?: string;
    snmpCommunity?: string;
    snmpVersion?: string;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgSnmpArgs {
    snmpAllowedIp?: pulumi.Input<string>;
    snmpCommunity?: pulumi.Input<string>;
    snmpVersion?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgSnmpTrap {
    snmptCommunity?: string;
    snmptPort?: number;
    snmptServer?: string;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgSnmpTrapArgs {
    snmptCommunity?: pulumi.Input<string>;
    snmptPort?: pulumi.Input<number>;
    snmptServer?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgSyslogServer {
    applications?: string[];
    facility?: string;
    format?: string;
    port?: number;
    protocol?: string;
    serverIp?: string;
    sourceInterface?: string;
    tag?: string;
}

export interface GetPolicyConfigPcfgGeneralSettingsPcfgSyslogServerArgs {
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    facility?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
    sourceInterface?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgQosPolicy {
    qosAction?: inputs.GetPolicyConfigPcfgQosPolicyQosAction;
    qosMatch?: inputs.GetPolicyConfigPcfgQosPolicyQosMatch;
}

export interface GetPolicyConfigPcfgQosPolicyArgs {
    qosAction?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionArgs>;
    qosMatch?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosMatchArgs>;
}

export interface GetPolicyConfigPcfgQosPolicyQosAction {
    firewallAction?: inputs.GetPolicyConfigPcfgQosPolicyQosActionFirewallAction;
    linkSteeringAction?: inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringAction;
    pbrAction?: inputs.GetPolicyConfigPcfgQosPolicyQosActionPbrAction;
    schedAction?: inputs.GetPolicyConfigPcfgQosPolicyQosActionSchedAction;
    trafficAction?: inputs.GetPolicyConfigPcfgQosPolicyQosActionTrafficAction;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionArgs {
    firewallAction?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionFirewallActionArgs>;
    linkSteeringAction?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionArgs>;
    pbrAction?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionPbrActionArgs>;
    schedAction?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionSchedActionArgs>;
    trafficAction?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionTrafficActionArgs>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionFirewallAction {
    allowOrDeny?: string;
    logging?: boolean;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionFirewallActionArgs {
    allowOrDeny?: pulumi.Input<string>;
    logging?: pulumi.Input<boolean>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringAction {
    lnksAlgo?: string;
    lnksInterface?: string;
    lnksLinkSteeringMode?: string;
    lnksVia?: inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksVia;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionArgs {
    lnksAlgo?: pulumi.Input<string>;
    lnksInterface?: pulumi.Input<string>;
    lnksLinkSteeringMode?: pulumi.Input<string>;
    lnksVia?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaArgs>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksVia {
    actives?: inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaActive[];
    backups?: inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaBackup[];
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaArgs {
    actives?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaActiveArgs>[]>;
    backups?: pulumi.Input<pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaBackupArgs>[]>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaActive {
    lnksWan?: string;
    path?: string;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaActiveArgs {
    lnksWan?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaBackup {
    lnksWan?: string;
    path?: string;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaBackupArgs {
    lnksWan?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionPbrAction {
    pbrNextHop?: string;
    pbrNextHopSite?: string;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionPbrActionArgs {
    pbrNextHop?: pulumi.Input<string>;
    pbrNextHopSite?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionSchedAction {
    schDropAlgo?: string;
    schQueueLimitBytes?: number;
    schRateLimitEnable?: boolean;
    schRxRateLimitKbps?: number;
    schTxRateLimitKbps?: number;
    schTxRateLimitType?: string;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionSchedActionArgs {
    schDropAlgo?: pulumi.Input<string>;
    schQueueLimitBytes?: pulumi.Input<number>;
    schRateLimitEnable?: pulumi.Input<boolean>;
    schRxRateLimitKbps?: pulumi.Input<number>;
    schTxRateLimitKbps?: pulumi.Input<number>;
    schTxRateLimitType?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionTrafficAction {
    class?: string;
    priority?: string;
}

export interface GetPolicyConfigPcfgQosPolicyQosActionTrafficActionArgs {
    class?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgQosPolicyQosMatch {
    cmapMatchCriteria?: inputs.GetPolicyConfigPcfgQosPolicyQosMatchCmapMatchCriteria;
    cmapMatchType?: string;
    cmapName?: string;
}

export interface GetPolicyConfigPcfgQosPolicyQosMatchArgs {
    cmapMatchCriteria?: pulumi.Input<inputs.GetPolicyConfigPcfgQosPolicyQosMatchCmapMatchCriteriaArgs>;
    cmapMatchType?: pulumi.Input<string>;
    cmapName?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgQosPolicyQosMatchCmapMatchCriteria {
    mtchAppIds?: number[];
    mtchDestInternet?: boolean;
    mtchDestIp?: string;
    mtchDestPort?: string;
    mtchDestZone?: string;
    mtchDstVlan?: number;
    mtchL4Protocol?: string;
    mtchSrcIp?: string;
    mtchSrcMac?: string;
    mtchSrcPort?: string;
    mtchSrcVlan?: number;
    mtchSrcZone?: string;
}

export interface GetPolicyConfigPcfgQosPolicyQosMatchCmapMatchCriteriaArgs {
    mtchAppIds?: pulumi.Input<pulumi.Input<number>[]>;
    mtchDestInternet?: pulumi.Input<boolean>;
    mtchDestIp?: pulumi.Input<string>;
    mtchDestPort?: pulumi.Input<string>;
    mtchDestZone?: pulumi.Input<string>;
    mtchDstVlan?: pulumi.Input<number>;
    mtchL4Protocol?: pulumi.Input<string>;
    mtchSrcIp?: pulumi.Input<string>;
    mtchSrcMac?: pulumi.Input<string>;
    mtchSrcPort?: pulumi.Input<string>;
    mtchSrcVlan?: pulumi.Input<number>;
    mtchSrcZone?: pulumi.Input<string>;
}

export interface GetPolicyConfigPcfgUrlFilter {
    pcfgUfAllowlists?: string[];
    pcfgUfBlockedCategories?: number[];
    pcfgUfBlocklists?: string[];
    pcfgUfEnabled?: boolean;
    pcfgUfReputationThreshold?: string;
}

export interface GetPolicyConfigPcfgUrlFilterArgs {
    pcfgUfAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    pcfgUfBlockedCategories?: pulumi.Input<pulumi.Input<number>[]>;
    pcfgUfBlocklists?: pulumi.Input<pulumi.Input<string>[]>;
    pcfgUfEnabled?: pulumi.Input<boolean>;
    pcfgUfReputationThreshold?: pulumi.Input<string>;
}

export interface GetPolicyCreatedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetPolicyCreatedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetPolicyHub {
    id?: string;
    name?: string;
    overlayIp?: string;
}

export interface GetPolicyHubArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlayIp?: pulumi.Input<string>;
}

export interface GetPolicyModifiedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetPolicyModifiedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetTenantCreatedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetTenantCreatedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetTenantModifiedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetTenantModifiedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetUserCreatedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetUserCreatedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetUserModifiedBy {
    email?: string;
    id?: string;
    name?: string;
}

export interface GetUserModifiedByArgs {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface PolicyConfig {
    pcfgCosTables?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgCosTable>[]>;
    pcfgFirewall?: pulumi.Input<inputs.PolicyConfigPcfgFirewall>;
    pcfgGeneralSettings?: pulumi.Input<inputs.PolicyConfigPcfgGeneralSettings>;
    pcfgQosPolicies?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgQosPolicy>[]>;
    pcfgSchemaver?: pulumi.Input<number>;
    pcfgSchemaverMinor?: pulumi.Input<number>;
    pcfgUrlFilter?: pulumi.Input<inputs.PolicyConfigPcfgUrlFilter>;
}

export interface PolicyConfigPcfgCosTable {
    cosJitterMs?: pulumi.Input<number>;
    cosLastResort?: pulumi.Input<boolean>;
    cosLatencyMs?: pulumi.Input<number>;
    cosLlq?: pulumi.Input<boolean>;
    cosLossPercent?: pulumi.Input<number>;
    cosMinGuaranteeBwPercent?: pulumi.Input<number>;
    cosPriority?: pulumi.Input<string>;
    cosTrafficClass?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgFirewall {
    pcfgFirewallEnabled?: pulumi.Input<boolean>;
    pcfgFwLogging?: pulumi.Input<inputs.PolicyConfigPcfgFirewallPcfgFwLogging>;
    pcfgFwPolicies?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgFirewallPcfgFwPolicy>[]>;
    pcfgFwStatefulEnabled?: pulumi.Input<boolean>;
}

export interface PolicyConfigPcfgFirewallPcfgFwLogging {
    pcfgFwAllowLogEnabled?: pulumi.Input<boolean>;
    pcfgFwDenyLogEnabled?: pulumi.Input<boolean>;
    pcfgFwLogEnabled?: pulumi.Input<boolean>;
}

export interface PolicyConfigPcfgFirewallPcfgFwPolicy {
    fwAction?: pulumi.Input<inputs.PolicyConfigPcfgFirewallPcfgFwPolicyFwAction>;
    fwMatch?: pulumi.Input<inputs.PolicyConfigPcfgFirewallPcfgFwPolicyFwMatch>;
    fwName?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgFirewallPcfgFwPolicyFwAction {
    allowOrDeny?: pulumi.Input<string>;
    logging?: pulumi.Input<boolean>;
}

export interface PolicyConfigPcfgFirewallPcfgFwPolicyFwMatch {
    mtchAppIds?: pulumi.Input<pulumi.Input<number>[]>;
    mtchDestInternet?: pulumi.Input<boolean>;
    mtchDestIp?: pulumi.Input<string>;
    mtchDestPort?: pulumi.Input<string>;
    mtchDestZone?: pulumi.Input<string>;
    mtchDstVlan?: pulumi.Input<number>;
    mtchL4Protocol?: pulumi.Input<string>;
    mtchSrcIp?: pulumi.Input<string>;
    mtchSrcMac?: pulumi.Input<string>;
    mtchSrcPort?: pulumi.Input<string>;
    mtchSrcVlan?: pulumi.Input<number>;
    mtchSrcZone?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgGeneralSettings {
    pcfgNetflow?: pulumi.Input<inputs.PolicyConfigPcfgGeneralSettingsPcfgNetflow>;
    pcfgSnmpTraps?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgGeneralSettingsPcfgSnmpTrap>[]>;
    pcfgSnmps?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgGeneralSettingsPcfgSnmp>[]>;
    pcfgSyslogEnabled?: pulumi.Input<boolean>;
    pcfgSyslogServers?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgGeneralSettingsPcfgSyslogServer>[]>;
}

export interface PolicyConfigPcfgGeneralSettingsPcfgNetflow {
    pcfgNfEnabled?: pulumi.Input<boolean>;
    pcfgNfExporterSettings?: pulumi.Input<inputs.PolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettings>;
}

export interface PolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettings {
    nfCollectorSettings?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsNfCollectorSetting>[]>;
    nfExportInterval?: pulumi.Input<number>;
}

export interface PolicyConfigPcfgGeneralSettingsPcfgNetflowPcfgNfExporterSettingsNfCollectorSetting {
    nfIp?: pulumi.Input<string>;
    nfPort?: pulumi.Input<number>;
}

export interface PolicyConfigPcfgGeneralSettingsPcfgSnmp {
    snmpAllowedIp?: pulumi.Input<string>;
    snmpCommunity?: pulumi.Input<string>;
    snmpVersion?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgGeneralSettingsPcfgSnmpTrap {
    snmptCommunity?: pulumi.Input<string>;
    snmptPort?: pulumi.Input<number>;
    snmptServer?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgGeneralSettingsPcfgSyslogServer {
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    facility?: pulumi.Input<string>;
    format?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    serverIp?: pulumi.Input<string>;
    sourceInterface?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgQosPolicy {
    qosAction?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosAction>;
    qosMatch?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosMatch>;
}

export interface PolicyConfigPcfgQosPolicyQosAction {
    firewallAction?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionFirewallAction>;
    linkSteeringAction?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionLinkSteeringAction>;
    pbrAction?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionPbrAction>;
    schedAction?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionSchedAction>;
    trafficAction?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionTrafficAction>;
}

export interface PolicyConfigPcfgQosPolicyQosActionFirewallAction {
    allowOrDeny?: pulumi.Input<string>;
    logging?: pulumi.Input<boolean>;
}

export interface PolicyConfigPcfgQosPolicyQosActionLinkSteeringAction {
    lnksAlgo?: pulumi.Input<string>;
    lnksInterface?: pulumi.Input<string>;
    lnksLinkSteeringMode?: pulumi.Input<string>;
    lnksVia?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksVia>;
}

export interface PolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksVia {
    actives?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaActive>[]>;
    backups?: pulumi.Input<pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaBackup>[]>;
}

export interface PolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaActive {
    lnksWan?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgQosPolicyQosActionLinkSteeringActionLnksViaBackup {
    lnksWan?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgQosPolicyQosActionPbrAction {
    pbrNextHop?: pulumi.Input<string>;
    pbrNextHopSite?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgQosPolicyQosActionSchedAction {
    schDropAlgo?: pulumi.Input<string>;
    schQueueLimitBytes?: pulumi.Input<number>;
    schRateLimitEnable?: pulumi.Input<boolean>;
    schRxRateLimitKbps?: pulumi.Input<number>;
    schTxRateLimitKbps?: pulumi.Input<number>;
    schTxRateLimitType?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgQosPolicyQosActionTrafficAction {
    class?: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgQosPolicyQosMatch {
    cmapMatchCriteria?: pulumi.Input<inputs.PolicyConfigPcfgQosPolicyQosMatchCmapMatchCriteria>;
    cmapMatchType?: pulumi.Input<string>;
    cmapName?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgQosPolicyQosMatchCmapMatchCriteria {
    mtchAppIds?: pulumi.Input<pulumi.Input<number>[]>;
    mtchDestInternet?: pulumi.Input<boolean>;
    mtchDestIp?: pulumi.Input<string>;
    mtchDestPort?: pulumi.Input<string>;
    mtchDestZone?: pulumi.Input<string>;
    mtchDstVlan?: pulumi.Input<number>;
    mtchL4Protocol?: pulumi.Input<string>;
    mtchSrcIp?: pulumi.Input<string>;
    mtchSrcMac?: pulumi.Input<string>;
    mtchSrcPort?: pulumi.Input<string>;
    mtchSrcVlan?: pulumi.Input<number>;
    mtchSrcZone?: pulumi.Input<string>;
}

export interface PolicyConfigPcfgUrlFilter {
    pcfgUfAllowlists?: pulumi.Input<pulumi.Input<string>[]>;
    pcfgUfBlockedCategories?: pulumi.Input<pulumi.Input<number>[]>;
    pcfgUfBlocklists?: pulumi.Input<pulumi.Input<string>[]>;
    pcfgUfEnabled?: pulumi.Input<boolean>;
    pcfgUfReputationThreshold?: pulumi.Input<string>;
}

export interface PolicyCreatedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface PolicyHub {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlayIp?: pulumi.Input<string>;
}

export interface PolicyModifiedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface TenantCreatedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface TenantModifiedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface UserCreatedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface UserModifiedBy {
    email?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
