// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class GatewayInterface extends pulumi.CustomResource {
    /**
     * Get an existing GatewayInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayInterfaceState, opts?: pulumi.CustomResourceOptions): GatewayInterface {
        return new GatewayInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netskopebwan:index/gatewayInterface:GatewayInterface';

    /**
     * Returns true if the given object is an instance of GatewayInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayInterface.__pulumiType;
    }

    public readonly 8021xMab!: pulumi.Output<boolean>;
    public readonly addresses!: pulumi.Output<outputs.GatewayInterfaceAddress[] | undefined>;
    public readonly allowedVlans!: pulumi.Output<number[]>;
    public readonly bridgeMembers!: pulumi.Output<string[]>;
    public readonly dhcpRelayServerSetting!: pulumi.Output<outputs.GatewayInterfaceDhcpRelayServerSetting | undefined>;
    public readonly dhcpServerSetting!: pulumi.Output<outputs.GatewayInterfaceDhcpServerSetting | undefined>;
    public readonly doAdvertise!: pulumi.Output<boolean>;
    public readonly enableNat!: pulumi.Output<boolean>;
    public readonly gatewayId!: pulumi.Output<string>;
    public readonly isDisabled!: pulumi.Output<boolean>;
    public readonly lteProps!: pulumi.Output<outputs.GatewayInterfaceLteProps | undefined>;
    public readonly macAddr!: pulumi.Output<string>;
    public readonly mode!: pulumi.Output<string>;
    public readonly mtu!: pulumi.Output<number>;
    public readonly mtuDiscovery!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly overlaySetting!: pulumi.Output<outputs.GatewayInterfaceOverlaySetting | undefined>;
    public readonly proxyArpSettings!: pulumi.Output<outputs.GatewayInterfaceProxyArpSetting[] | undefined>;
    public readonly radii!: pulumi.Output<outputs.GatewayInterfaceRadius[] | undefined>;
    public readonly type!: pulumi.Output<string>;
    public readonly vlan!: pulumi.Output<number>;
    public readonly vrrp!: pulumi.Output<outputs.GatewayInterfaceVrrp | undefined>;
    public readonly wifiProps!: pulumi.Output<outputs.GatewayInterfaceWifiProps | undefined>;
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a GatewayInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayInterfaceArgs | GatewayInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayInterfaceState | undefined;
            resourceInputs["8021xMab"] = state ? state.8021xMab : undefined;
            resourceInputs["addresses"] = state ? state.addresses : undefined;
            resourceInputs["allowedVlans"] = state ? state.allowedVlans : undefined;
            resourceInputs["bridgeMembers"] = state ? state.bridgeMembers : undefined;
            resourceInputs["dhcpRelayServerSetting"] = state ? state.dhcpRelayServerSetting : undefined;
            resourceInputs["dhcpServerSetting"] = state ? state.dhcpServerSetting : undefined;
            resourceInputs["doAdvertise"] = state ? state.doAdvertise : undefined;
            resourceInputs["enableNat"] = state ? state.enableNat : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["isDisabled"] = state ? state.isDisabled : undefined;
            resourceInputs["lteProps"] = state ? state.lteProps : undefined;
            resourceInputs["macAddr"] = state ? state.macAddr : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["mtuDiscovery"] = state ? state.mtuDiscovery : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overlaySetting"] = state ? state.overlaySetting : undefined;
            resourceInputs["proxyArpSettings"] = state ? state.proxyArpSettings : undefined;
            resourceInputs["radii"] = state ? state.radii : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vrrp"] = state ? state.vrrp : undefined;
            resourceInputs["wifiProps"] = state ? state.wifiProps : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as GatewayInterfaceArgs | undefined;
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.isDisabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'isDisabled'");
            }
            resourceInputs["8021xMab"] = args ? args.8021xMab : undefined;
            resourceInputs["addresses"] = args ? args.addresses : undefined;
            resourceInputs["allowedVlans"] = args ? args.allowedVlans : undefined;
            resourceInputs["bridgeMembers"] = args ? args.bridgeMembers : undefined;
            resourceInputs["dhcpRelayServerSetting"] = args ? args.dhcpRelayServerSetting : undefined;
            resourceInputs["dhcpServerSetting"] = args ? args.dhcpServerSetting : undefined;
            resourceInputs["doAdvertise"] = args ? args.doAdvertise : undefined;
            resourceInputs["enableNat"] = args ? args.enableNat : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["isDisabled"] = args ? args.isDisabled : undefined;
            resourceInputs["lteProps"] = args ? args.lteProps : undefined;
            resourceInputs["macAddr"] = args ? args.macAddr : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["mtuDiscovery"] = args ? args.mtuDiscovery : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overlaySetting"] = args ? args.overlaySetting : undefined;
            resourceInputs["proxyArpSettings"] = args ? args.proxyArpSettings : undefined;
            resourceInputs["radii"] = args ? args.radii : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vrrp"] = args ? args.vrrp : undefined;
            resourceInputs["wifiProps"] = args ? args.wifiProps : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayInterface.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering GatewayInterface resources.
 */
export interface GatewayInterfaceState {
    8021xMab?: pulumi.Input<boolean>;
    addresses?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceAddress>[]>;
    allowedVlans?: pulumi.Input<pulumi.Input<number>[]>;
    bridgeMembers?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayServerSetting?: pulumi.Input<inputs.GatewayInterfaceDhcpRelayServerSetting>;
    dhcpServerSetting?: pulumi.Input<inputs.GatewayInterfaceDhcpServerSetting>;
    doAdvertise?: pulumi.Input<boolean>;
    enableNat?: pulumi.Input<boolean>;
    gatewayId?: pulumi.Input<string>;
    isDisabled?: pulumi.Input<boolean>;
    lteProps?: pulumi.Input<inputs.GatewayInterfaceLteProps>;
    macAddr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuDiscovery?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlaySetting?: pulumi.Input<inputs.GatewayInterfaceOverlaySetting>;
    proxyArpSettings?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceProxyArpSetting>[]>;
    radii?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceRadius>[]>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vrrp?: pulumi.Input<inputs.GatewayInterfaceVrrp>;
    wifiProps?: pulumi.Input<inputs.GatewayInterfaceWifiProps>;
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayInterface resource.
 */
export interface GatewayInterfaceArgs {
    8021xMab?: pulumi.Input<boolean>;
    addresses?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceAddress>[]>;
    allowedVlans?: pulumi.Input<pulumi.Input<number>[]>;
    bridgeMembers?: pulumi.Input<pulumi.Input<string>[]>;
    dhcpRelayServerSetting?: pulumi.Input<inputs.GatewayInterfaceDhcpRelayServerSetting>;
    dhcpServerSetting?: pulumi.Input<inputs.GatewayInterfaceDhcpServerSetting>;
    doAdvertise?: pulumi.Input<boolean>;
    enableNat?: pulumi.Input<boolean>;
    gatewayId: pulumi.Input<string>;
    isDisabled: pulumi.Input<boolean>;
    lteProps?: pulumi.Input<inputs.GatewayInterfaceLteProps>;
    macAddr?: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    mtu?: pulumi.Input<number>;
    mtuDiscovery?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    overlaySetting?: pulumi.Input<inputs.GatewayInterfaceOverlaySetting>;
    proxyArpSettings?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceProxyArpSetting>[]>;
    radii?: pulumi.Input<pulumi.Input<inputs.GatewayInterfaceRadius>[]>;
    type?: pulumi.Input<string>;
    vlan?: pulumi.Input<number>;
    vrrp?: pulumi.Input<inputs.GatewayInterfaceVrrp>;
    wifiProps?: pulumi.Input<inputs.GatewayInterfaceWifiProps>;
    zone?: pulumi.Input<string>;
}
