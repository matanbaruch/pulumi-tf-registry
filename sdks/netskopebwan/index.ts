// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayActivateArgs, GatewayActivateState } from "./gatewayActivate";
export type GatewayActivate = import("./gatewayActivate").GatewayActivate;
export const GatewayActivate: typeof import("./gatewayActivate").GatewayActivate = null as any;
utilities.lazyLoad(exports, ["GatewayActivate"], () => require("./gatewayActivate"));

export { GatewayBgpconfigArgs, GatewayBgpconfigState } from "./gatewayBgpconfig";
export type GatewayBgpconfig = import("./gatewayBgpconfig").GatewayBgpconfig;
export const GatewayBgpconfig: typeof import("./gatewayBgpconfig").GatewayBgpconfig = null as any;
utilities.lazyLoad(exports, ["GatewayBgpconfig"], () => require("./gatewayBgpconfig"));

export { GatewayInterfaceArgs, GatewayInterfaceState } from "./gatewayInterface";
export type GatewayInterface = import("./gatewayInterface").GatewayInterface;
export const GatewayInterface: typeof import("./gatewayInterface").GatewayInterface = null as any;
utilities.lazyLoad(exports, ["GatewayInterface"], () => require("./gatewayInterface"));

export { GatewayNatArgs, GatewayNatState } from "./gatewayNat";
export type GatewayNat = import("./gatewayNat").GatewayNat;
export const GatewayNat: typeof import("./gatewayNat").GatewayNat = null as any;
utilities.lazyLoad(exports, ["GatewayNat"], () => require("./gatewayNat"));

export { GatewayPortForwardArgs, GatewayPortForwardState } from "./gatewayPortForward";
export type GatewayPortForward = import("./gatewayPortForward").GatewayPortForward;
export const GatewayPortForward: typeof import("./gatewayPortForward").GatewayPortForward = null as any;
utilities.lazyLoad(exports, ["GatewayPortForward"], () => require("./gatewayPortForward"));

export { GatewayStaticrouteArgs, GatewayStaticrouteState } from "./gatewayStaticroute";
export type GatewayStaticroute = import("./gatewayStaticroute").GatewayStaticroute;
export const GatewayStaticroute: typeof import("./gatewayStaticroute").GatewayStaticroute = null as any;
utilities.lazyLoad(exports, ["GatewayStaticroute"], () => require("./gatewayStaticroute"));

export { GetGatewayArgs, GetGatewayResult, GetGatewayOutputArgs } from "./getGateway";
export const getGateway: typeof import("./getGateway").getGateway = null as any;
export const getGatewayOutput: typeof import("./getGateway").getGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getGateway","getGatewayOutput"], () => require("./getGateway"));

export { GetGatewayBgpconfigArgs, GetGatewayBgpconfigResult, GetGatewayBgpconfigOutputArgs } from "./getGatewayBgpconfig";
export const getGatewayBgpconfig: typeof import("./getGatewayBgpconfig").getGatewayBgpconfig = null as any;
export const getGatewayBgpconfigOutput: typeof import("./getGatewayBgpconfig").getGatewayBgpconfigOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayBgpconfig","getGatewayBgpconfigOutput"], () => require("./getGatewayBgpconfig"));

export { GetGatewayInterfaceArgs, GetGatewayInterfaceResult, GetGatewayInterfaceOutputArgs } from "./getGatewayInterface";
export const getGatewayInterface: typeof import("./getGatewayInterface").getGatewayInterface = null as any;
export const getGatewayInterfaceOutput: typeof import("./getGatewayInterface").getGatewayInterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayInterface","getGatewayInterfaceOutput"], () => require("./getGatewayInterface"));

export { GetGatewayNatArgs, GetGatewayNatResult, GetGatewayNatOutputArgs } from "./getGatewayNat";
export const getGatewayNat: typeof import("./getGatewayNat").getGatewayNat = null as any;
export const getGatewayNatOutput: typeof import("./getGatewayNat").getGatewayNatOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayNat","getGatewayNatOutput"], () => require("./getGatewayNat"));

export { GetGatewayPortForwardArgs, GetGatewayPortForwardResult, GetGatewayPortForwardOutputArgs } from "./getGatewayPortForward";
export const getGatewayPortForward: typeof import("./getGatewayPortForward").getGatewayPortForward = null as any;
export const getGatewayPortForwardOutput: typeof import("./getGatewayPortForward").getGatewayPortForwardOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayPortForward","getGatewayPortForwardOutput"], () => require("./getGatewayPortForward"));

export { GetGatewayStaticrouteArgs, GetGatewayStaticrouteResult, GetGatewayStaticrouteOutputArgs } from "./getGatewayStaticroute";
export const getGatewayStaticroute: typeof import("./getGatewayStaticroute").getGatewayStaticroute = null as any;
export const getGatewayStaticrouteOutput: typeof import("./getGatewayStaticroute").getGatewayStaticrouteOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayStaticroute","getGatewayStaticrouteOutput"], () => require("./getGatewayStaticroute"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetTenantArgs, GetTenantResult, GetTenantOutputArgs } from "./getTenant";
export const getTenant: typeof import("./getTenant").getTenant = null as any;
export const getTenantOutput: typeof import("./getTenant").getTenantOutput = null as any;
utilities.lazyLoad(exports, ["getTenant","getTenantOutput"], () => require("./getTenant"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netskopebwan:index/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "netskopebwan:index/gatewayActivate:GatewayActivate":
                return new GatewayActivate(name, <any>undefined, { urn })
            case "netskopebwan:index/gatewayBgpconfig:GatewayBgpconfig":
                return new GatewayBgpconfig(name, <any>undefined, { urn })
            case "netskopebwan:index/gatewayInterface:GatewayInterface":
                return new GatewayInterface(name, <any>undefined, { urn })
            case "netskopebwan:index/gatewayNat:GatewayNat":
                return new GatewayNat(name, <any>undefined, { urn })
            case "netskopebwan:index/gatewayPortForward:GatewayPortForward":
                return new GatewayPortForward(name, <any>undefined, { urn })
            case "netskopebwan:index/gatewayStaticroute:GatewayStaticroute":
                return new GatewayStaticroute(name, <any>undefined, { urn })
            case "netskopebwan:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "netskopebwan:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "netskopebwan:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netskopebwan", "index/gateway", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/gatewayActivate", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/gatewayBgpconfig", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/gatewayInterface", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/gatewayNat", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/gatewayPortForward", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/gatewayStaticroute", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/policy", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/tenant", _module)
pulumi.runtime.registerResourceModule("netskopebwan", "index/user", _module)
pulumi.runtime.registerResourcePackage("netskopebwan", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netskopebwan") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
