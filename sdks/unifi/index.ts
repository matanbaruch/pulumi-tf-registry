// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DynamicDnsArgs, DynamicDnsState } from "./dynamicDns";
export type DynamicDns = import("./dynamicDns").DynamicDns;
export const DynamicDns: typeof import("./dynamicDns").DynamicDns = null as any;
utilities.lazyLoad(exports, ["DynamicDns"], () => require("./dynamicDns"));

export { FirewallGroupArgs, FirewallGroupState } from "./firewallGroup";
export type FirewallGroup = import("./firewallGroup").FirewallGroup;
export const FirewallGroup: typeof import("./firewallGroup").FirewallGroup = null as any;
utilities.lazyLoad(exports, ["FirewallGroup"], () => require("./firewallGroup"));

export { FirewallRuleArgs, FirewallRuleState } from "./firewallRule";
export type FirewallRule = import("./firewallRule").FirewallRule;
export const FirewallRule: typeof import("./firewallRule").FirewallRule = null as any;
utilities.lazyLoad(exports, ["FirewallRule"], () => require("./firewallRule"));

export { GetAccountArgs, GetAccountResult, GetAccountOutputArgs } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetApGroupArgs, GetApGroupResult, GetApGroupOutputArgs } from "./getApGroup";
export const getApGroup: typeof import("./getApGroup").getApGroup = null as any;
export const getApGroupOutput: typeof import("./getApGroup").getApGroupOutput = null as any;
utilities.lazyLoad(exports, ["getApGroup","getApGroupOutput"], () => require("./getApGroup"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetPortProfileArgs, GetPortProfileResult, GetPortProfileOutputArgs } from "./getPortProfile";
export const getPortProfile: typeof import("./getPortProfile").getPortProfile = null as any;
export const getPortProfileOutput: typeof import("./getPortProfile").getPortProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPortProfile","getPortProfileOutput"], () => require("./getPortProfile"));

export { GetRadiusProfileArgs, GetRadiusProfileResult, GetRadiusProfileOutputArgs } from "./getRadiusProfile";
export const getRadiusProfile: typeof import("./getRadiusProfile").getRadiusProfile = null as any;
export const getRadiusProfileOutput: typeof import("./getRadiusProfile").getRadiusProfileOutput = null as any;
utilities.lazyLoad(exports, ["getRadiusProfile","getRadiusProfileOutput"], () => require("./getRadiusProfile"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { PortForwardArgs, PortForwardState } from "./portForward";
export type PortForward = import("./portForward").PortForward;
export const PortForward: typeof import("./portForward").PortForward = null as any;
utilities.lazyLoad(exports, ["PortForward"], () => require("./portForward"));

export { PortProfileArgs, PortProfileState } from "./portProfile";
export type PortProfile = import("./portProfile").PortProfile;
export const PortProfile: typeof import("./portProfile").PortProfile = null as any;
utilities.lazyLoad(exports, ["PortProfile"], () => require("./portProfile"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RadiusProfileArgs, RadiusProfileState } from "./radiusProfile";
export type RadiusProfile = import("./radiusProfile").RadiusProfile;
export const RadiusProfile: typeof import("./radiusProfile").RadiusProfile = null as any;
utilities.lazyLoad(exports, ["RadiusProfile"], () => require("./radiusProfile"));

export { SettingMgmtArgs, SettingMgmtState } from "./settingMgmt";
export type SettingMgmt = import("./settingMgmt").SettingMgmt;
export const SettingMgmt: typeof import("./settingMgmt").SettingMgmt = null as any;
utilities.lazyLoad(exports, ["SettingMgmt"], () => require("./settingMgmt"));

export { SettingRadiusArgs, SettingRadiusState } from "./settingRadius";
export type SettingRadius = import("./settingRadius").SettingRadius;
export const SettingRadius: typeof import("./settingRadius").SettingRadius = null as any;
utilities.lazyLoad(exports, ["SettingRadius"], () => require("./settingRadius"));

export { SettingUsgArgs, SettingUsgState } from "./settingUsg";
export type SettingUsg = import("./settingUsg").SettingUsg;
export const SettingUsg: typeof import("./settingUsg").SettingUsg = null as any;
utilities.lazyLoad(exports, ["SettingUsg"], () => require("./settingUsg"));

export { SiteArgs, SiteState } from "./site";
export type Site = import("./site").Site;
export const Site: typeof import("./site").Site = null as any;
utilities.lazyLoad(exports, ["Site"], () => require("./site"));

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupArgs, UserGroupState } from "./userGroup";
export type UserGroup = import("./userGroup").UserGroup;
export const UserGroup: typeof import("./userGroup").UserGroup = null as any;
utilities.lazyLoad(exports, ["UserGroup"], () => require("./userGroup"));

export { WlanArgs, WlanState } from "./wlan";
export type Wlan = import("./wlan").Wlan;
export const Wlan: typeof import("./wlan").Wlan = null as any;
utilities.lazyLoad(exports, ["Wlan"], () => require("./wlan"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "unifi:index/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "unifi:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "unifi:index/dynamicDns:DynamicDns":
                return new DynamicDns(name, <any>undefined, { urn })
            case "unifi:index/firewallGroup:FirewallGroup":
                return new FirewallGroup(name, <any>undefined, { urn })
            case "unifi:index/firewallRule:FirewallRule":
                return new FirewallRule(name, <any>undefined, { urn })
            case "unifi:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "unifi:index/portForward:PortForward":
                return new PortForward(name, <any>undefined, { urn })
            case "unifi:index/portProfile:PortProfile":
                return new PortProfile(name, <any>undefined, { urn })
            case "unifi:index/radiusProfile:RadiusProfile":
                return new RadiusProfile(name, <any>undefined, { urn })
            case "unifi:index/settingMgmt:SettingMgmt":
                return new SettingMgmt(name, <any>undefined, { urn })
            case "unifi:index/settingRadius:SettingRadius":
                return new SettingRadius(name, <any>undefined, { urn })
            case "unifi:index/settingUsg:SettingUsg":
                return new SettingUsg(name, <any>undefined, { urn })
            case "unifi:index/site:Site":
                return new Site(name, <any>undefined, { urn })
            case "unifi:index/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "unifi:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "unifi:index/userGroup:UserGroup":
                return new UserGroup(name, <any>undefined, { urn })
            case "unifi:index/wlan:Wlan":
                return new Wlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("unifi", "index/account", _module)
pulumi.runtime.registerResourceModule("unifi", "index/device", _module)
pulumi.runtime.registerResourceModule("unifi", "index/dynamicDns", _module)
pulumi.runtime.registerResourceModule("unifi", "index/firewallGroup", _module)
pulumi.runtime.registerResourceModule("unifi", "index/firewallRule", _module)
pulumi.runtime.registerResourceModule("unifi", "index/network", _module)
pulumi.runtime.registerResourceModule("unifi", "index/portForward", _module)
pulumi.runtime.registerResourceModule("unifi", "index/portProfile", _module)
pulumi.runtime.registerResourceModule("unifi", "index/radiusProfile", _module)
pulumi.runtime.registerResourceModule("unifi", "index/settingMgmt", _module)
pulumi.runtime.registerResourceModule("unifi", "index/settingRadius", _module)
pulumi.runtime.registerResourceModule("unifi", "index/settingUsg", _module)
pulumi.runtime.registerResourceModule("unifi", "index/site", _module)
pulumi.runtime.registerResourceModule("unifi", "index/staticRoute", _module)
pulumi.runtime.registerResourceModule("unifi", "index/user", _module)
pulumi.runtime.registerResourceModule("unifi", "index/userGroup", _module)
pulumi.runtime.registerResourceModule("unifi", "index/wlan", _module)
pulumi.runtime.registerResourcePackage("unifi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:unifi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
