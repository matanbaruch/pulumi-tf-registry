// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RemoteImage extends pulumi.CustomResource {
    /**
     * Get an existing RemoteImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RemoteImageState, opts?: pulumi.CustomResourceOptions): RemoteImage {
        return new RemoteImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dockerless:index/remoteImage:RemoteImage';

    /**
     * Returns true if the given object is an instance of RemoteImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RemoteImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteImage.__pulumiType;
    }

    /**
     * The digest of the target docker image.
     */
    public /*out*/ readonly digest!: pulumi.Output<string>;
    /**
     * The docker image name and tag to source for pushing to the target image repository. Currently, this docker image must be
     * public or accessible using the same auth as the "target" image repository.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * The docker image name and tag to ensure exists in an image repository.
     */
    public readonly target!: pulumi.Output<string>;

    /**
     * Create a RemoteImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RemoteImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RemoteImageArgs | RemoteImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RemoteImageState | undefined;
            resourceInputs["digest"] = state ? state.digest : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
        } else {
            const args = argsOrState as RemoteImageArgs | undefined;
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["digest"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RemoteImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RemoteImage resources.
 */
export interface RemoteImageState {
    /**
     * The digest of the target docker image.
     */
    digest?: pulumi.Input<string>;
    /**
     * The docker image name and tag to source for pushing to the target image repository. Currently, this docker image must be
     * public or accessible using the same auth as the "target" image repository.
     */
    source?: pulumi.Input<string>;
    /**
     * The docker image name and tag to ensure exists in an image repository.
     */
    target?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RemoteImage resource.
 */
export interface RemoteImageArgs {
    /**
     * The docker image name and tag to source for pushing to the target image repository. Currently, this docker image must be
     * public or accessible using the same auth as the "target" image repository.
     */
    source: pulumi.Input<string>;
    /**
     * The docker image name and tag to ensure exists in an image repository.
     */
    target: pulumi.Input<string>;
}
