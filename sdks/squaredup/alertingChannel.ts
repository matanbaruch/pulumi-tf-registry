// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AlertingChannel extends pulumi.CustomResource {
    /**
     * Get an existing AlertingChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertingChannelState, opts?: pulumi.CustomResourceOptions): AlertingChannel {
        return new AlertingChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squaredup:index/alertingChannel:AlertingChannel';

    /**
     * Returns true if the given object is an instance of AlertingChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertingChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertingChannel.__pulumiType;
    }

    /**
     * The ID of the alerting channel type
     */
    public readonly channelTypeId!: pulumi.Output<string>;
    /**
     * The configuration of the alerting channel
     */
    public readonly config!: pulumi.Output<string>;
    /**
     * Description for the alerting channel
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The display name of the alerting channel
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Whether the alerting channel is enabled
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The last updated time of the alerting channel
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;

    /**
     * Create a AlertingChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertingChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertingChannelArgs | AlertingChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertingChannelState | undefined;
            resourceInputs["channelTypeId"] = state ? state.channelTypeId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
        } else {
            const args = argsOrState as AlertingChannelArgs | undefined;
            if ((!args || args.channelTypeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'channelTypeId'");
            }
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["channelTypeId"] = args ? args.channelTypeId : undefined;
            resourceInputs["config"] = args?.config ? pulumi.secret(args.config) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["config"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AlertingChannel.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AlertingChannel resources.
 */
export interface AlertingChannelState {
    /**
     * The ID of the alerting channel type
     */
    channelTypeId?: pulumi.Input<string>;
    /**
     * The configuration of the alerting channel
     */
    config?: pulumi.Input<string>;
    /**
     * Description for the alerting channel
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the alerting channel
     */
    displayName?: pulumi.Input<string>;
    /**
     * Whether the alerting channel is enabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The last updated time of the alerting channel
     */
    lastUpdated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertingChannel resource.
 */
export interface AlertingChannelArgs {
    /**
     * The ID of the alerting channel type
     */
    channelTypeId: pulumi.Input<string>;
    /**
     * The configuration of the alerting channel
     */
    config: pulumi.Input<string>;
    /**
     * Description for the alerting channel
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the alerting channel
     */
    displayName: pulumi.Input<string>;
    /**
     * Whether the alerting channel is enabled
     */
    enabled: pulumi.Input<boolean>;
}
