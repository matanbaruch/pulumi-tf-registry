// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DashboardShare extends pulumi.CustomResource {
    /**
     * Get an existing DashboardShare resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardShareState, opts?: pulumi.CustomResourceOptions): DashboardShare {
        return new DashboardShare(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'squaredup:index/dashboardShare:DashboardShare';

    /**
     * Returns true if the given object is an instance of DashboardShare.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardShare {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardShare.__pulumiType;
    }

    /**
     * The ID of the dashboard to share
     */
    public readonly dashboardId!: pulumi.Output<string>;
    /**
     * If false, sharing of the dashboard is disabled
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The last time the Dashboard Share was updated
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * If false, the dashboard will be accessible to anyone with the link
     */
    public readonly requireAuthentication!: pulumi.Output<boolean>;
    /**
     * The ID of the workspace where the dashboard is located
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a DashboardShare resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardShareArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardShareArgs | DashboardShareState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardShareState | undefined;
            resourceInputs["dashboardId"] = state ? state.dashboardId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["requireAuthentication"] = state ? state.requireAuthentication : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as DashboardShareArgs | undefined;
            if ((!args || args.dashboardId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardId'");
            }
            if ((!args || args.requireAuthentication === undefined) && !opts.urn) {
                throw new Error("Missing required property 'requireAuthentication'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["dashboardId"] = args ? args.dashboardId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["requireAuthentication"] = args ? args.requireAuthentication : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardShare.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DashboardShare resources.
 */
export interface DashboardShareState {
    /**
     * The ID of the dashboard to share
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * If false, sharing of the dashboard is disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The last time the Dashboard Share was updated
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * If false, the dashboard will be accessible to anyone with the link
     */
    requireAuthentication?: pulumi.Input<boolean>;
    /**
     * The ID of the workspace where the dashboard is located
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DashboardShare resource.
 */
export interface DashboardShareArgs {
    /**
     * The ID of the dashboard to share
     */
    dashboardId: pulumi.Input<string>;
    /**
     * If false, sharing of the dashboard is disabled
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * If false, the dashboard will be accessible to anyone with the link
     */
    requireAuthentication: pulumi.Input<boolean>;
    /**
     * The ID of the workspace where the dashboard is located
     */
    workspaceId: pulumi.Input<string>;
}
