// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertingChannelArgs, AlertingChannelState } from "./alertingChannel";
export type AlertingChannel = import("./alertingChannel").AlertingChannel;
export const AlertingChannel: typeof import("./alertingChannel").AlertingChannel = null as any;
utilities.lazyLoad(exports, ["AlertingChannel"], () => require("./alertingChannel"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardShareArgs, DashboardShareState } from "./dashboardShare";
export type DashboardShare = import("./dashboardShare").DashboardShare;
export const DashboardShare: typeof import("./dashboardShare").DashboardShare = null as any;
utilities.lazyLoad(exports, ["DashboardShare"], () => require("./dashboardShare"));

export { DatasourceArgs, DatasourceState } from "./datasource";
export type Datasource = import("./datasource").Datasource;
export const Datasource: typeof import("./datasource").Datasource = null as any;
utilities.lazyLoad(exports, ["Datasource"], () => require("./datasource"));

export { GetAlertingChannelTypesArgs, GetAlertingChannelTypesResult, GetAlertingChannelTypesOutputArgs } from "./getAlertingChannelTypes";
export const getAlertingChannelTypes: typeof import("./getAlertingChannelTypes").getAlertingChannelTypes = null as any;
export const getAlertingChannelTypesOutput: typeof import("./getAlertingChannelTypes").getAlertingChannelTypesOutput = null as any;
utilities.lazyLoad(exports, ["getAlertingChannelTypes","getAlertingChannelTypesOutput"], () => require("./getAlertingChannelTypes"));

export { GetDataStreamsArgs, GetDataStreamsResult, GetDataStreamsOutputArgs } from "./getDataStreams";
export const getDataStreams: typeof import("./getDataStreams").getDataStreams = null as any;
export const getDataStreamsOutput: typeof import("./getDataStreams").getDataStreamsOutput = null as any;
utilities.lazyLoad(exports, ["getDataStreams","getDataStreamsOutput"], () => require("./getDataStreams"));

export { GetDatasourcesArgs, GetDatasourcesResult, GetDatasourcesOutputArgs } from "./getDatasources";
export const getDatasources: typeof import("./getDatasources").getDatasources = null as any;
export const getDatasourcesOutput: typeof import("./getDatasources").getDatasourcesOutput = null as any;
utilities.lazyLoad(exports, ["getDatasources","getDatasourcesOutput"], () => require("./getDatasources"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ScopeArgs, ScopeState } from "./scope";
export type Scope = import("./scope").Scope;
export const Scope: typeof import("./scope").Scope = null as any;
utilities.lazyLoad(exports, ["Scope"], () => require("./scope"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspaceAlertArgs, WorkspaceAlertState } from "./workspaceAlert";
export type WorkspaceAlert = import("./workspaceAlert").WorkspaceAlert;
export const WorkspaceAlert: typeof import("./workspaceAlert").WorkspaceAlert = null as any;
utilities.lazyLoad(exports, ["WorkspaceAlert"], () => require("./workspaceAlert"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "squaredup:index/alertingChannel:AlertingChannel":
                return new AlertingChannel(name, <any>undefined, { urn })
            case "squaredup:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "squaredup:index/dashboardShare:DashboardShare":
                return new DashboardShare(name, <any>undefined, { urn })
            case "squaredup:index/datasource:Datasource":
                return new Datasource(name, <any>undefined, { urn })
            case "squaredup:index/scope:Scope":
                return new Scope(name, <any>undefined, { urn })
            case "squaredup:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "squaredup:index/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            case "squaredup:index/workspaceAlert:WorkspaceAlert":
                return new WorkspaceAlert(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("squaredup", "index/alertingChannel", _module)
pulumi.runtime.registerResourceModule("squaredup", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("squaredup", "index/dashboardShare", _module)
pulumi.runtime.registerResourceModule("squaredup", "index/datasource", _module)
pulumi.runtime.registerResourceModule("squaredup", "index/scope", _module)
pulumi.runtime.registerResourceModule("squaredup", "index/script", _module)
pulumi.runtime.registerResourceModule("squaredup", "index/workspace", _module)
pulumi.runtime.registerResourceModule("squaredup", "index/workspaceAlert", _module)
pulumi.runtime.registerResourcePackage("squaredup", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:squaredup") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
