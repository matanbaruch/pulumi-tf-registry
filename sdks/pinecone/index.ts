// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CollectionArgs, CollectionState } from "./collection";
export type Collection = import("./collection").Collection;
export const Collection: typeof import("./collection").Collection = null as any;
utilities.lazyLoad(exports, ["Collection"], () => require("./collection"));

export { GetCollectionArgs, GetCollectionResult, GetCollectionOutputArgs } from "./getCollection";
export const getCollection: typeof import("./getCollection").getCollection = null as any;
export const getCollectionOutput: typeof import("./getCollection").getCollectionOutput = null as any;
utilities.lazyLoad(exports, ["getCollection","getCollectionOutput"], () => require("./getCollection"));

export { GetCollectionsResult } from "./getCollections";
export const getCollections: typeof import("./getCollections").getCollections = null as any;
export const getCollectionsOutput: typeof import("./getCollections").getCollectionsOutput = null as any;
utilities.lazyLoad(exports, ["getCollections","getCollectionsOutput"], () => require("./getCollections"));

export { GetIndexArgs, GetIndexResult, GetIndexOutputArgs } from "./getIndex";
export const getIndex: typeof import("./getIndex").getIndex = null as any;
export const getIndexOutput: typeof import("./getIndex").getIndexOutput = null as any;
utilities.lazyLoad(exports, ["getIndex","getIndexOutput"], () => require("./getIndex"));

export { GetIndexesResult } from "./getIndexes";
export const getIndexes: typeof import("./getIndexes").getIndexes = null as any;
export const getIndexesOutput: typeof import("./getIndexes").getIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getIndexes","getIndexesOutput"], () => require("./getIndexes"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pinecone:index/collection:Collection":
                return new Collection(name, <any>undefined, { urn })
            case "pinecone:index/index:Index":
                return new Index(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pinecone", "index/collection", _module)
pulumi.runtime.registerResourceModule("pinecone", "index/index", _module)
pulumi.runtime.registerResourcePackage("pinecone", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pinecone") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
