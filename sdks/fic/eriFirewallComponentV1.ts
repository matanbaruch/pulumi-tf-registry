// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EriFirewallComponentV1 extends pulumi.CustomResource {
    /**
     * Get an existing EriFirewallComponentV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EriFirewallComponentV1State, opts?: pulumi.CustomResourceOptions): EriFirewallComponentV1 {
        return new EriFirewallComponentV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fic:index/eriFirewallComponentV1:EriFirewallComponentV1';

    /**
     * Returns true if the given object is an instance of EriFirewallComponentV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EriFirewallComponentV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EriFirewallComponentV1.__pulumiType;
    }

    public readonly applicationSets!: pulumi.Output<outputs.EriFirewallComponentV1ApplicationSet[] | undefined>;
    public readonly customApplications!: pulumi.Output<outputs.EriFirewallComponentV1CustomApplication[] | undefined>;
    public readonly firewallId!: pulumi.Output<string>;
    public /*out*/ readonly isActivated!: pulumi.Output<boolean>;
    public /*out*/ readonly redundant!: pulumi.Output<boolean>;
    public readonly routerId!: pulumi.Output<string>;
    public readonly routingGroupSettings!: pulumi.Output<outputs.EriFirewallComponentV1RoutingGroupSetting[] | undefined>;
    public readonly rules!: pulumi.Output<outputs.EriFirewallComponentV1Rule[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EriFirewallComponentV1Timeouts | undefined>;
    public readonly userIpAddresses!: pulumi.Output<string[]>;

    /**
     * Create a EriFirewallComponentV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EriFirewallComponentV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EriFirewallComponentV1Args | EriFirewallComponentV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EriFirewallComponentV1State | undefined;
            resourceInputs["applicationSets"] = state ? state.applicationSets : undefined;
            resourceInputs["customApplications"] = state ? state.customApplications : undefined;
            resourceInputs["firewallId"] = state ? state.firewallId : undefined;
            resourceInputs["isActivated"] = state ? state.isActivated : undefined;
            resourceInputs["redundant"] = state ? state.redundant : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["routingGroupSettings"] = state ? state.routingGroupSettings : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userIpAddresses"] = state ? state.userIpAddresses : undefined;
        } else {
            const args = argsOrState as EriFirewallComponentV1Args | undefined;
            if ((!args || args.firewallId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'firewallId'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            if ((!args || args.userIpAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userIpAddresses'");
            }
            resourceInputs["applicationSets"] = args ? args.applicationSets : undefined;
            resourceInputs["customApplications"] = args ? args.customApplications : undefined;
            resourceInputs["firewallId"] = args ? args.firewallId : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["routingGroupSettings"] = args ? args.routingGroupSettings : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userIpAddresses"] = args ? args.userIpAddresses : undefined;
            resourceInputs["isActivated"] = undefined /*out*/;
            resourceInputs["redundant"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EriFirewallComponentV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EriFirewallComponentV1 resources.
 */
export interface EriFirewallComponentV1State {
    applicationSets?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1ApplicationSet>[]>;
    customApplications?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1CustomApplication>[]>;
    firewallId?: pulumi.Input<string>;
    isActivated?: pulumi.Input<boolean>;
    redundant?: pulumi.Input<boolean>;
    routerId?: pulumi.Input<string>;
    routingGroupSettings?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1RoutingGroupSetting>[]>;
    rules?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1Rule>[]>;
    timeouts?: pulumi.Input<inputs.EriFirewallComponentV1Timeouts>;
    userIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EriFirewallComponentV1 resource.
 */
export interface EriFirewallComponentV1Args {
    applicationSets?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1ApplicationSet>[]>;
    customApplications?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1CustomApplication>[]>;
    firewallId: pulumi.Input<string>;
    routerId: pulumi.Input<string>;
    routingGroupSettings?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1RoutingGroupSetting>[]>;
    rules?: pulumi.Input<pulumi.Input<inputs.EriFirewallComponentV1Rule>[]>;
    timeouts?: pulumi.Input<inputs.EriFirewallComponentV1Timeouts>;
    userIpAddresses: pulumi.Input<pulumi.Input<string>[]>;
}
