// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EriNatComponentV1 extends pulumi.CustomResource {
    /**
     * Get an existing EriNatComponentV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EriNatComponentV1State, opts?: pulumi.CustomResourceOptions): EriNatComponentV1 {
        return new EriNatComponentV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fic:index/eriNatComponentV1:EriNatComponentV1';

    /**
     * Returns true if the given object is an instance of EriNatComponentV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EriNatComponentV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EriNatComponentV1.__pulumiType;
    }

    public readonly destinationNatRules!: pulumi.Output<outputs.EriNatComponentV1DestinationNatRule[] | undefined>;
    public readonly globalIpAddressSets!: pulumi.Output<outputs.EriNatComponentV1GlobalIpAddressSet[]>;
    public /*out*/ readonly isActivated!: pulumi.Output<boolean>;
    public readonly natId!: pulumi.Output<string>;
    public /*out*/ readonly redundant!: pulumi.Output<boolean>;
    public readonly routerId!: pulumi.Output<string>;
    public readonly sourceNaptRules!: pulumi.Output<outputs.EriNatComponentV1SourceNaptRule[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.EriNatComponentV1Timeouts | undefined>;
    public readonly userIpAddresses!: pulumi.Output<string[]>;

    /**
     * Create a EriNatComponentV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EriNatComponentV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EriNatComponentV1Args | EriNatComponentV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EriNatComponentV1State | undefined;
            resourceInputs["destinationNatRules"] = state ? state.destinationNatRules : undefined;
            resourceInputs["globalIpAddressSets"] = state ? state.globalIpAddressSets : undefined;
            resourceInputs["isActivated"] = state ? state.isActivated : undefined;
            resourceInputs["natId"] = state ? state.natId : undefined;
            resourceInputs["redundant"] = state ? state.redundant : undefined;
            resourceInputs["routerId"] = state ? state.routerId : undefined;
            resourceInputs["sourceNaptRules"] = state ? state.sourceNaptRules : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["userIpAddresses"] = state ? state.userIpAddresses : undefined;
        } else {
            const args = argsOrState as EriNatComponentV1Args | undefined;
            if ((!args || args.globalIpAddressSets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalIpAddressSets'");
            }
            if ((!args || args.natId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natId'");
            }
            if ((!args || args.routerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routerId'");
            }
            if ((!args || args.userIpAddresses === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userIpAddresses'");
            }
            resourceInputs["destinationNatRules"] = args ? args.destinationNatRules : undefined;
            resourceInputs["globalIpAddressSets"] = args ? args.globalIpAddressSets : undefined;
            resourceInputs["natId"] = args ? args.natId : undefined;
            resourceInputs["routerId"] = args ? args.routerId : undefined;
            resourceInputs["sourceNaptRules"] = args ? args.sourceNaptRules : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["userIpAddresses"] = args ? args.userIpAddresses : undefined;
            resourceInputs["isActivated"] = undefined /*out*/;
            resourceInputs["redundant"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EriNatComponentV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EriNatComponentV1 resources.
 */
export interface EriNatComponentV1State {
    destinationNatRules?: pulumi.Input<pulumi.Input<inputs.EriNatComponentV1DestinationNatRule>[]>;
    globalIpAddressSets?: pulumi.Input<pulumi.Input<inputs.EriNatComponentV1GlobalIpAddressSet>[]>;
    isActivated?: pulumi.Input<boolean>;
    natId?: pulumi.Input<string>;
    redundant?: pulumi.Input<boolean>;
    routerId?: pulumi.Input<string>;
    sourceNaptRules?: pulumi.Input<pulumi.Input<inputs.EriNatComponentV1SourceNaptRule>[]>;
    timeouts?: pulumi.Input<inputs.EriNatComponentV1Timeouts>;
    userIpAddresses?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a EriNatComponentV1 resource.
 */
export interface EriNatComponentV1Args {
    destinationNatRules?: pulumi.Input<pulumi.Input<inputs.EriNatComponentV1DestinationNatRule>[]>;
    globalIpAddressSets: pulumi.Input<pulumi.Input<inputs.EriNatComponentV1GlobalIpAddressSet>[]>;
    natId: pulumi.Input<string>;
    routerId: pulumi.Input<string>;
    sourceNaptRules?: pulumi.Input<pulumi.Input<inputs.EriNatComponentV1SourceNaptRule>[]>;
    timeouts?: pulumi.Input<inputs.EriNatComponentV1Timeouts>;
    userIpAddresses: pulumi.Input<pulumi.Input<string>[]>;
}
