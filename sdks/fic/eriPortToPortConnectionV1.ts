// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EriPortToPortConnectionV1 extends pulumi.CustomResource {
    /**
     * Get an existing EriPortToPortConnectionV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EriPortToPortConnectionV1State, opts?: pulumi.CustomResourceOptions): EriPortToPortConnectionV1 {
        return new EriPortToPortConnectionV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fic:index/eriPortToPortConnectionV1:EriPortToPortConnectionV1';

    /**
     * Returns true if the given object is an instance of EriPortToPortConnectionV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EriPortToPortConnectionV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EriPortToPortConnectionV1.__pulumiType;
    }

    public /*out*/ readonly area!: pulumi.Output<string>;
    public readonly bandwidth!: pulumi.Output<string>;
    public readonly destinationPortId!: pulumi.Output<string>;
    public readonly destinationVlan!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly redundant!: pulumi.Output<boolean>;
    public readonly sourcePortId!: pulumi.Output<string>;
    public readonly sourceVlan!: pulumi.Output<number>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EriPortToPortConnectionV1Timeouts | undefined>;

    /**
     * Create a EriPortToPortConnectionV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EriPortToPortConnectionV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EriPortToPortConnectionV1Args | EriPortToPortConnectionV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EriPortToPortConnectionV1State | undefined;
            resourceInputs["area"] = state ? state.area : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["destinationPortId"] = state ? state.destinationPortId : undefined;
            resourceInputs["destinationVlan"] = state ? state.destinationVlan : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["redundant"] = state ? state.redundant : undefined;
            resourceInputs["sourcePortId"] = state ? state.sourcePortId : undefined;
            resourceInputs["sourceVlan"] = state ? state.sourceVlan : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as EriPortToPortConnectionV1Args | undefined;
            if ((!args || args.bandwidth === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if ((!args || args.destinationPortId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationPortId'");
            }
            if ((!args || args.destinationVlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationVlan'");
            }
            if ((!args || args.sourcePortId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourcePortId'");
            }
            if ((!args || args.sourceVlan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceVlan'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["destinationPortId"] = args ? args.destinationPortId : undefined;
            resourceInputs["destinationVlan"] = args ? args.destinationVlan : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sourcePortId"] = args ? args.sourcePortId : undefined;
            resourceInputs["sourceVlan"] = args ? args.sourceVlan : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["area"] = undefined /*out*/;
            resourceInputs["redundant"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EriPortToPortConnectionV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EriPortToPortConnectionV1 resources.
 */
export interface EriPortToPortConnectionV1State {
    area?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<string>;
    destinationPortId?: pulumi.Input<string>;
    destinationVlan?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    redundant?: pulumi.Input<boolean>;
    sourcePortId?: pulumi.Input<string>;
    sourceVlan?: pulumi.Input<number>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EriPortToPortConnectionV1Timeouts>;
}

/**
 * The set of arguments for constructing a EriPortToPortConnectionV1 resource.
 */
export interface EriPortToPortConnectionV1Args {
    bandwidth: pulumi.Input<string>;
    destinationPortId: pulumi.Input<string>;
    destinationVlan: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    sourcePortId: pulumi.Input<string>;
    sourceVlan: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.EriPortToPortConnectionV1Timeouts>;
}
