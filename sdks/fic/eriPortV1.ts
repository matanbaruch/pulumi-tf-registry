// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EriPortV1 extends pulumi.CustomResource {
    /**
     * Get an existing EriPortV1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EriPortV1State, opts?: pulumi.CustomResourceOptions): EriPortV1 {
        return new EriPortV1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fic:index/eriPortV1:EriPortV1';

    /**
     * Returns true if the given object is an instance of EriPortV1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EriPortV1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EriPortV1.__pulumiType;
    }

    public /*out*/ readonly area!: pulumi.Output<string>;
    public readonly isActivated!: pulumi.Output<boolean>;
    public /*out*/ readonly location!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly numberOfVlans!: pulumi.Output<number | undefined>;
    public readonly portType!: pulumi.Output<string>;
    public readonly switchName!: pulumi.Output<string>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.EriPortV1Timeouts | undefined>;
    public readonly vlanRanges!: pulumi.Output<outputs.EriPortV1VlanRange[] | undefined>;
    public /*out*/ readonly vlans!: pulumi.Output<outputs.EriPortV1Vlan[]>;

    /**
     * Create a EriPortV1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EriPortV1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EriPortV1Args | EriPortV1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EriPortV1State | undefined;
            resourceInputs["area"] = state ? state.area : undefined;
            resourceInputs["isActivated"] = state ? state.isActivated : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfVlans"] = state ? state.numberOfVlans : undefined;
            resourceInputs["portType"] = state ? state.portType : undefined;
            resourceInputs["switchName"] = state ? state.switchName : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vlanRanges"] = state ? state.vlanRanges : undefined;
            resourceInputs["vlans"] = state ? state.vlans : undefined;
        } else {
            const args = argsOrState as EriPortV1Args | undefined;
            if ((!args || args.switchName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'switchName'");
            }
            resourceInputs["isActivated"] = args ? args.isActivated : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfVlans"] = args ? args.numberOfVlans : undefined;
            resourceInputs["portType"] = args ? args.portType : undefined;
            resourceInputs["switchName"] = args ? args.switchName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vlanRanges"] = args ? args.vlanRanges : undefined;
            resourceInputs["area"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["vlans"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EriPortV1.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EriPortV1 resources.
 */
export interface EriPortV1State {
    area?: pulumi.Input<string>;
    isActivated?: pulumi.Input<boolean>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    numberOfVlans?: pulumi.Input<number>;
    portType?: pulumi.Input<string>;
    switchName?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EriPortV1Timeouts>;
    vlanRanges?: pulumi.Input<pulumi.Input<inputs.EriPortV1VlanRange>[]>;
    vlans?: pulumi.Input<pulumi.Input<inputs.EriPortV1Vlan>[]>;
}

/**
 * The set of arguments for constructing a EriPortV1 resource.
 */
export interface EriPortV1Args {
    isActivated?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    numberOfVlans?: pulumi.Input<number>;
    portType?: pulumi.Input<string>;
    switchName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.EriPortV1Timeouts>;
    vlanRanges?: pulumi.Input<pulumi.Input<inputs.EriPortV1VlanRange>[]>;
}
