// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { EriFirewallComponentV1Args, EriFirewallComponentV1State } from "./eriFirewallComponentV1";
export type EriFirewallComponentV1 = import("./eriFirewallComponentV1").EriFirewallComponentV1;
export const EriFirewallComponentV1: typeof import("./eriFirewallComponentV1").EriFirewallComponentV1 = null as any;
utilities.lazyLoad(exports, ["EriFirewallComponentV1"], () => require("./eriFirewallComponentV1"));

export { EriNatComponentV1Args, EriNatComponentV1State } from "./eriNatComponentV1";
export type EriNatComponentV1 = import("./eriNatComponentV1").EriNatComponentV1;
export const EriNatComponentV1: typeof import("./eriNatComponentV1").EriNatComponentV1 = null as any;
utilities.lazyLoad(exports, ["EriNatComponentV1"], () => require("./eriNatComponentV1"));

export { EriNatGlobalIpAddressSetV1Args, EriNatGlobalIpAddressSetV1State } from "./eriNatGlobalIpAddressSetV1";
export type EriNatGlobalIpAddressSetV1 = import("./eriNatGlobalIpAddressSetV1").EriNatGlobalIpAddressSetV1;
export const EriNatGlobalIpAddressSetV1: typeof import("./eriNatGlobalIpAddressSetV1").EriNatGlobalIpAddressSetV1 = null as any;
utilities.lazyLoad(exports, ["EriNatGlobalIpAddressSetV1"], () => require("./eriNatGlobalIpAddressSetV1"));

export { EriPortToAzureMicrosoftConnectionV1Args, EriPortToAzureMicrosoftConnectionV1State } from "./eriPortToAzureMicrosoftConnectionV1";
export type EriPortToAzureMicrosoftConnectionV1 = import("./eriPortToAzureMicrosoftConnectionV1").EriPortToAzureMicrosoftConnectionV1;
export const EriPortToAzureMicrosoftConnectionV1: typeof import("./eriPortToAzureMicrosoftConnectionV1").EriPortToAzureMicrosoftConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriPortToAzureMicrosoftConnectionV1"], () => require("./eriPortToAzureMicrosoftConnectionV1"));

export { EriPortToAzurePrivateConnectionV1Args, EriPortToAzurePrivateConnectionV1State } from "./eriPortToAzurePrivateConnectionV1";
export type EriPortToAzurePrivateConnectionV1 = import("./eriPortToAzurePrivateConnectionV1").EriPortToAzurePrivateConnectionV1;
export const EriPortToAzurePrivateConnectionV1: typeof import("./eriPortToAzurePrivateConnectionV1").EriPortToAzurePrivateConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriPortToAzurePrivateConnectionV1"], () => require("./eriPortToAzurePrivateConnectionV1"));

export { EriPortToPortConnectionV1Args, EriPortToPortConnectionV1State } from "./eriPortToPortConnectionV1";
export type EriPortToPortConnectionV1 = import("./eriPortToPortConnectionV1").EriPortToPortConnectionV1;
export const EriPortToPortConnectionV1: typeof import("./eriPortToPortConnectionV1").EriPortToPortConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriPortToPortConnectionV1"], () => require("./eriPortToPortConnectionV1"));

export { EriPortV1Args, EriPortV1State } from "./eriPortV1";
export type EriPortV1 = import("./eriPortV1").EriPortV1;
export const EriPortV1: typeof import("./eriPortV1").EriPortV1 = null as any;
utilities.lazyLoad(exports, ["EriPortV1"], () => require("./eriPortV1"));

export { EriRouterPairedToGcpConnectionV1Args, EriRouterPairedToGcpConnectionV1State } from "./eriRouterPairedToGcpConnectionV1";
export type EriRouterPairedToGcpConnectionV1 = import("./eriRouterPairedToGcpConnectionV1").EriRouterPairedToGcpConnectionV1;
export const EriRouterPairedToGcpConnectionV1: typeof import("./eriRouterPairedToGcpConnectionV1").EriRouterPairedToGcpConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterPairedToGcpConnectionV1"], () => require("./eriRouterPairedToGcpConnectionV1"));

export { EriRouterPairedToPortConnectionV1Args, EriRouterPairedToPortConnectionV1State } from "./eriRouterPairedToPortConnectionV1";
export type EriRouterPairedToPortConnectionV1 = import("./eriRouterPairedToPortConnectionV1").EriRouterPairedToPortConnectionV1;
export const EriRouterPairedToPortConnectionV1: typeof import("./eriRouterPairedToPortConnectionV1").EriRouterPairedToPortConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterPairedToPortConnectionV1"], () => require("./eriRouterPairedToPortConnectionV1"));

export { EriRouterSingleToPortConnectionV1Args, EriRouterSingleToPortConnectionV1State } from "./eriRouterSingleToPortConnectionV1";
export type EriRouterSingleToPortConnectionV1 = import("./eriRouterSingleToPortConnectionV1").EriRouterSingleToPortConnectionV1;
export const EriRouterSingleToPortConnectionV1: typeof import("./eriRouterSingleToPortConnectionV1").EriRouterSingleToPortConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterSingleToPortConnectionV1"], () => require("./eriRouterSingleToPortConnectionV1"));

export { EriRouterToAzureMicrosoftConnectionV1Args, EriRouterToAzureMicrosoftConnectionV1State } from "./eriRouterToAzureMicrosoftConnectionV1";
export type EriRouterToAzureMicrosoftConnectionV1 = import("./eriRouterToAzureMicrosoftConnectionV1").EriRouterToAzureMicrosoftConnectionV1;
export const EriRouterToAzureMicrosoftConnectionV1: typeof import("./eriRouterToAzureMicrosoftConnectionV1").EriRouterToAzureMicrosoftConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterToAzureMicrosoftConnectionV1"], () => require("./eriRouterToAzureMicrosoftConnectionV1"));

export { EriRouterToAzurePrivateConnectionV1Args, EriRouterToAzurePrivateConnectionV1State } from "./eriRouterToAzurePrivateConnectionV1";
export type EriRouterToAzurePrivateConnectionV1 = import("./eriRouterToAzurePrivateConnectionV1").EriRouterToAzurePrivateConnectionV1;
export const EriRouterToAzurePrivateConnectionV1: typeof import("./eriRouterToAzurePrivateConnectionV1").EriRouterToAzurePrivateConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterToAzurePrivateConnectionV1"], () => require("./eriRouterToAzurePrivateConnectionV1"));

export { EriRouterToEclConnectionV1Args, EriRouterToEclConnectionV1State } from "./eriRouterToEclConnectionV1";
export type EriRouterToEclConnectionV1 = import("./eriRouterToEclConnectionV1").EriRouterToEclConnectionV1;
export const EriRouterToEclConnectionV1: typeof import("./eriRouterToEclConnectionV1").EriRouterToEclConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterToEclConnectionV1"], () => require("./eriRouterToEclConnectionV1"));

export { EriRouterToUnoConnectionV1Args, EriRouterToUnoConnectionV1State } from "./eriRouterToUnoConnectionV1";
export type EriRouterToUnoConnectionV1 = import("./eriRouterToUnoConnectionV1").EriRouterToUnoConnectionV1;
export const EriRouterToUnoConnectionV1: typeof import("./eriRouterToUnoConnectionV1").EriRouterToUnoConnectionV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterToUnoConnectionV1"], () => require("./eriRouterToUnoConnectionV1"));

export { EriRouterV1Args, EriRouterV1State } from "./eriRouterV1";
export type EriRouterV1 = import("./eriRouterV1").EriRouterV1;
export const EriRouterV1: typeof import("./eriRouterV1").EriRouterV1 = null as any;
utilities.lazyLoad(exports, ["EriRouterV1"], () => require("./eriRouterV1"));

export { GetEriSwitchV1Args, GetEriSwitchV1Result, GetEriSwitchV1OutputArgs } from "./getEriSwitchV1";
export const getEriSwitchV1: typeof import("./getEriSwitchV1").getEriSwitchV1 = null as any;
export const getEriSwitchV1Output: typeof import("./getEriSwitchV1").getEriSwitchV1Output = null as any;
utilities.lazyLoad(exports, ["getEriSwitchV1","getEriSwitchV1Output"], () => require("./getEriSwitchV1"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fic:index/eriFirewallComponentV1:EriFirewallComponentV1":
                return new EriFirewallComponentV1(name, <any>undefined, { urn })
            case "fic:index/eriNatComponentV1:EriNatComponentV1":
                return new EriNatComponentV1(name, <any>undefined, { urn })
            case "fic:index/eriNatGlobalIpAddressSetV1:EriNatGlobalIpAddressSetV1":
                return new EriNatGlobalIpAddressSetV1(name, <any>undefined, { urn })
            case "fic:index/eriPortToAzureMicrosoftConnectionV1:EriPortToAzureMicrosoftConnectionV1":
                return new EriPortToAzureMicrosoftConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriPortToAzurePrivateConnectionV1:EriPortToAzurePrivateConnectionV1":
                return new EriPortToAzurePrivateConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriPortToPortConnectionV1:EriPortToPortConnectionV1":
                return new EriPortToPortConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriPortV1:EriPortV1":
                return new EriPortV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterPairedToGcpConnectionV1:EriRouterPairedToGcpConnectionV1":
                return new EriRouterPairedToGcpConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterPairedToPortConnectionV1:EriRouterPairedToPortConnectionV1":
                return new EriRouterPairedToPortConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterSingleToPortConnectionV1:EriRouterSingleToPortConnectionV1":
                return new EriRouterSingleToPortConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterToAzureMicrosoftConnectionV1:EriRouterToAzureMicrosoftConnectionV1":
                return new EriRouterToAzureMicrosoftConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterToAzurePrivateConnectionV1:EriRouterToAzurePrivateConnectionV1":
                return new EriRouterToAzurePrivateConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterToEclConnectionV1:EriRouterToEclConnectionV1":
                return new EriRouterToEclConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterToUnoConnectionV1:EriRouterToUnoConnectionV1":
                return new EriRouterToUnoConnectionV1(name, <any>undefined, { urn })
            case "fic:index/eriRouterV1:EriRouterV1":
                return new EriRouterV1(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fic", "index/eriFirewallComponentV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriNatComponentV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriNatGlobalIpAddressSetV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriPortToAzureMicrosoftConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriPortToAzurePrivateConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriPortToPortConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriPortV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterPairedToGcpConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterPairedToPortConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterSingleToPortConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterToAzureMicrosoftConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterToAzurePrivateConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterToEclConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterToUnoConnectionV1", _module)
pulumi.runtime.registerResourceModule("fic", "index/eriRouterV1", _module)
pulumi.runtime.registerResourcePackage("fic", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fic") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
