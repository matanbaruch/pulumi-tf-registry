// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SessionAuthenticationPoliciesGlobal extends pulumi.CustomResource {
    /**
     * Get an existing SessionAuthenticationPoliciesGlobal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SessionAuthenticationPoliciesGlobalState, opts?: pulumi.CustomResourceOptions): SessionAuthenticationPoliciesGlobal {
        return new SessionAuthenticationPoliciesGlobal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/sessionAuthenticationPoliciesGlobal:SessionAuthenticationPoliciesGlobal';

    /**
     * Returns true if the given object is an instance of SessionAuthenticationPoliciesGlobal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SessionAuthenticationPoliciesGlobal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SessionAuthenticationPoliciesGlobal.__pulumiType;
    }

    /**
     * Determines whether authentication sessions are enabled globally.
     */
    public readonly enableSessions!: pulumi.Output<boolean>;
    /**
     * Determines whether to hash the value of the unique user key attribute. Default value is `false`.
     */
    public readonly hashUniqueUserKeyAttribute!: pulumi.Output<boolean>;
    /**
     * The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout value in minutes must correspond to a whole number value for the specified unit.
     * Supported values are `MINUTES`, `HOURS`, and `DAYS`. Default value is `MINUTES`.
     */
    public readonly idleTimeoutDisplayUnit!: pulumi.Output<string>;
    /**
     * The idle timeout period, in minutes. If set to `-1`, the idle timeout will be set to the maximum timeout. The default is
     * `60`.
     */
    public readonly idleTimeoutMins!: pulumi.Output<number>;
    /**
     * The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout value in minutes must correspond to a whole number value for the specified unit.
     * Supported values are `MINUTES`, `HOURS`, and `DAYS`. Default value is `MINUTES`.
     */
    public readonly maxTimeoutDisplayUnit!: pulumi.Output<string>;
    /**
     * The maximum timeout period, in minutes. If set to `-1`, sessions do not expire. The default is `480`.
     */
    public readonly maxTimeoutMins!: pulumi.Output<number>;
    /**
     * Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent
     * cookie and stored in a data store. This field is ignored if `enable_sessions` is `false`. Default values is `false`.
     */
    public readonly persistentSessions!: pulumi.Output<boolean>;

    /**
     * Create a SessionAuthenticationPoliciesGlobal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SessionAuthenticationPoliciesGlobalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SessionAuthenticationPoliciesGlobalArgs | SessionAuthenticationPoliciesGlobalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SessionAuthenticationPoliciesGlobalState | undefined;
            resourceInputs["enableSessions"] = state ? state.enableSessions : undefined;
            resourceInputs["hashUniqueUserKeyAttribute"] = state ? state.hashUniqueUserKeyAttribute : undefined;
            resourceInputs["idleTimeoutDisplayUnit"] = state ? state.idleTimeoutDisplayUnit : undefined;
            resourceInputs["idleTimeoutMins"] = state ? state.idleTimeoutMins : undefined;
            resourceInputs["maxTimeoutDisplayUnit"] = state ? state.maxTimeoutDisplayUnit : undefined;
            resourceInputs["maxTimeoutMins"] = state ? state.maxTimeoutMins : undefined;
            resourceInputs["persistentSessions"] = state ? state.persistentSessions : undefined;
        } else {
            const args = argsOrState as SessionAuthenticationPoliciesGlobalArgs | undefined;
            if ((!args || args.enableSessions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableSessions'");
            }
            resourceInputs["enableSessions"] = args ? args.enableSessions : undefined;
            resourceInputs["hashUniqueUserKeyAttribute"] = args ? args.hashUniqueUserKeyAttribute : undefined;
            resourceInputs["idleTimeoutDisplayUnit"] = args ? args.idleTimeoutDisplayUnit : undefined;
            resourceInputs["idleTimeoutMins"] = args ? args.idleTimeoutMins : undefined;
            resourceInputs["maxTimeoutDisplayUnit"] = args ? args.maxTimeoutDisplayUnit : undefined;
            resourceInputs["maxTimeoutMins"] = args ? args.maxTimeoutMins : undefined;
            resourceInputs["persistentSessions"] = args ? args.persistentSessions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SessionAuthenticationPoliciesGlobal.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SessionAuthenticationPoliciesGlobal resources.
 */
export interface SessionAuthenticationPoliciesGlobalState {
    /**
     * Determines whether authentication sessions are enabled globally.
     */
    enableSessions?: pulumi.Input<boolean>;
    /**
     * Determines whether to hash the value of the unique user key attribute. Default value is `false`.
     */
    hashUniqueUserKeyAttribute?: pulumi.Input<boolean>;
    /**
     * The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout value in minutes must correspond to a whole number value for the specified unit.
     * Supported values are `MINUTES`, `HOURS`, and `DAYS`. Default value is `MINUTES`.
     */
    idleTimeoutDisplayUnit?: pulumi.Input<string>;
    /**
     * The idle timeout period, in minutes. If set to `-1`, the idle timeout will be set to the maximum timeout. The default is
     * `60`.
     */
    idleTimeoutMins?: pulumi.Input<number>;
    /**
     * The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout value in minutes must correspond to a whole number value for the specified unit.
     * Supported values are `MINUTES`, `HOURS`, and `DAYS`. Default value is `MINUTES`.
     */
    maxTimeoutDisplayUnit?: pulumi.Input<string>;
    /**
     * The maximum timeout period, in minutes. If set to `-1`, sessions do not expire. The default is `480`.
     */
    maxTimeoutMins?: pulumi.Input<number>;
    /**
     * Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent
     * cookie and stored in a data store. This field is ignored if `enable_sessions` is `false`. Default values is `false`.
     */
    persistentSessions?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SessionAuthenticationPoliciesGlobal resource.
 */
export interface SessionAuthenticationPoliciesGlobalArgs {
    /**
     * Determines whether authentication sessions are enabled globally.
     */
    enableSessions: pulumi.Input<boolean>;
    /**
     * Determines whether to hash the value of the unique user key attribute. Default value is `false`.
     */
    hashUniqueUserKeyAttribute?: pulumi.Input<boolean>;
    /**
     * The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout value in minutes must correspond to a whole number value for the specified unit.
     * Supported values are `MINUTES`, `HOURS`, and `DAYS`. Default value is `MINUTES`.
     */
    idleTimeoutDisplayUnit?: pulumi.Input<string>;
    /**
     * The idle timeout period, in minutes. If set to `-1`, the idle timeout will be set to the maximum timeout. The default is
     * `60`.
     */
    idleTimeoutMins?: pulumi.Input<number>;
    /**
     * The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout value in minutes must correspond to a whole number value for the specified unit.
     * Supported values are `MINUTES`, `HOURS`, and `DAYS`. Default value is `MINUTES`.
     */
    maxTimeoutDisplayUnit?: pulumi.Input<string>;
    /**
     * The maximum timeout period, in minutes. If set to `-1`, sessions do not expire. The default is `480`.
     */
    maxTimeoutMins?: pulumi.Input<number>;
    /**
     * Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent
     * cookie and stored in a data store. This field is ignored if `enable_sessions` is `false`. Default values is `false`.
     */
    persistentSessions?: pulumi.Input<boolean>;
}
