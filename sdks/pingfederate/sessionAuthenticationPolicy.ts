// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SessionAuthenticationPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SessionAuthenticationPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SessionAuthenticationPolicyState, opts?: pulumi.CustomResourceOptions): SessionAuthenticationPolicy {
        return new SessionAuthenticationPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/sessionAuthenticationPolicy:SessionAuthenticationPolicy';

    /**
     * Returns true if the given object is an instance of SessionAuthenticationPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SessionAuthenticationPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SessionAuthenticationPolicy.__pulumiType;
    }

    /**
     * An authentication source (IdP adapter or IdP connection).
     */
    public readonly authenticationSource!: pulumi.Output<outputs.SessionAuthenticationPolicyAuthenticationSource>;
    /**
     * Determines whether the requested authentication context is considered when deciding whether an existing session is valid
     * for a given request. The default is `false`.
     */
    public readonly authnContextSensitive!: pulumi.Output<boolean>;
    /**
     * Determines whether sessions are enabled for the authentication source. This value overrides the `enable_sessions` value
     * from the global authentication session policy.
     */
    public readonly enableSessions!: pulumi.Output<boolean>;
    /**
     * The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used.
     * If set to `-1`, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value
     * must also be provided for `max_timeout_mins`.
     */
    public readonly idleTimeoutMins!: pulumi.Output<number | undefined>;
    /**
     * The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be
     * used. If set to `-1`, sessions do not expire. If a value is provided for this property, a value must also be provided
     * for `idle_timeout_mins`.
     */
    public readonly maxTimeoutMins!: pulumi.Output<number | undefined>;
    /**
     * Determines whether sessions for the authentication source are persistent. This value overrides the `persistent_sessions`
     * value from the global authentication session policy. This field is ignored if `enable_sessions` is `false`.
     */
    public readonly persistent!: pulumi.Output<boolean>;
    /**
     * The persistent, unique ID for the session policy. It can be any combination of `[a-zA-Z0-9._-]`. This property is
     * system-assigned if not specified.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The display unit for session timeout periods in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout values in minutes must correspond to a whole number value for the specified unit. Options
     * are `MINUTES`, `HOURS`, `DAYS`. If empty, the value will default to `MINUTES`.
     */
    public readonly timeoutDisplayUnit!: pulumi.Output<string>;
    /**
     * Determines the type of user device that the authentication session can be created on. Options are `PRIVATE`, `SHARED`,
     * `ANY`. If empty, the value will default to `PRIVATE`.
     */
    public readonly userDeviceType!: pulumi.Output<string>;

    /**
     * Create a SessionAuthenticationPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SessionAuthenticationPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SessionAuthenticationPolicyArgs | SessionAuthenticationPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SessionAuthenticationPolicyState | undefined;
            resourceInputs["authenticationSource"] = state ? state.authenticationSource : undefined;
            resourceInputs["authnContextSensitive"] = state ? state.authnContextSensitive : undefined;
            resourceInputs["enableSessions"] = state ? state.enableSessions : undefined;
            resourceInputs["idleTimeoutMins"] = state ? state.idleTimeoutMins : undefined;
            resourceInputs["maxTimeoutMins"] = state ? state.maxTimeoutMins : undefined;
            resourceInputs["persistent"] = state ? state.persistent : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["timeoutDisplayUnit"] = state ? state.timeoutDisplayUnit : undefined;
            resourceInputs["userDeviceType"] = state ? state.userDeviceType : undefined;
        } else {
            const args = argsOrState as SessionAuthenticationPolicyArgs | undefined;
            if ((!args || args.authenticationSource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationSource'");
            }
            if ((!args || args.enableSessions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableSessions'");
            }
            resourceInputs["authenticationSource"] = args ? args.authenticationSource : undefined;
            resourceInputs["authnContextSensitive"] = args ? args.authnContextSensitive : undefined;
            resourceInputs["enableSessions"] = args ? args.enableSessions : undefined;
            resourceInputs["idleTimeoutMins"] = args ? args.idleTimeoutMins : undefined;
            resourceInputs["maxTimeoutMins"] = args ? args.maxTimeoutMins : undefined;
            resourceInputs["persistent"] = args ? args.persistent : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["timeoutDisplayUnit"] = args ? args.timeoutDisplayUnit : undefined;
            resourceInputs["userDeviceType"] = args ? args.userDeviceType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SessionAuthenticationPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SessionAuthenticationPolicy resources.
 */
export interface SessionAuthenticationPolicyState {
    /**
     * An authentication source (IdP adapter or IdP connection).
     */
    authenticationSource?: pulumi.Input<inputs.SessionAuthenticationPolicyAuthenticationSource>;
    /**
     * Determines whether the requested authentication context is considered when deciding whether an existing session is valid
     * for a given request. The default is `false`.
     */
    authnContextSensitive?: pulumi.Input<boolean>;
    /**
     * Determines whether sessions are enabled for the authentication source. This value overrides the `enable_sessions` value
     * from the global authentication session policy.
     */
    enableSessions?: pulumi.Input<boolean>;
    /**
     * The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used.
     * If set to `-1`, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value
     * must also be provided for `max_timeout_mins`.
     */
    idleTimeoutMins?: pulumi.Input<number>;
    /**
     * The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be
     * used. If set to `-1`, sessions do not expire. If a value is provided for this property, a value must also be provided
     * for `idle_timeout_mins`.
     */
    maxTimeoutMins?: pulumi.Input<number>;
    /**
     * Determines whether sessions for the authentication source are persistent. This value overrides the `persistent_sessions`
     * value from the global authentication session policy. This field is ignored if `enable_sessions` is `false`.
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * The persistent, unique ID for the session policy. It can be any combination of `[a-zA-Z0-9._-]`. This property is
     * system-assigned if not specified.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The display unit for session timeout periods in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout values in minutes must correspond to a whole number value for the specified unit. Options
     * are `MINUTES`, `HOURS`, `DAYS`. If empty, the value will default to `MINUTES`.
     */
    timeoutDisplayUnit?: pulumi.Input<string>;
    /**
     * Determines the type of user device that the authentication session can be created on. Options are `PRIVATE`, `SHARED`,
     * `ANY`. If empty, the value will default to `PRIVATE`.
     */
    userDeviceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SessionAuthenticationPolicy resource.
 */
export interface SessionAuthenticationPolicyArgs {
    /**
     * An authentication source (IdP adapter or IdP connection).
     */
    authenticationSource: pulumi.Input<inputs.SessionAuthenticationPolicyAuthenticationSource>;
    /**
     * Determines whether the requested authentication context is considered when deciding whether an existing session is valid
     * for a given request. The default is `false`.
     */
    authnContextSensitive?: pulumi.Input<boolean>;
    /**
     * Determines whether sessions are enabled for the authentication source. This value overrides the `enable_sessions` value
     * from the global authentication session policy.
     */
    enableSessions: pulumi.Input<boolean>;
    /**
     * The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used.
     * If set to `-1`, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value
     * must also be provided for `max_timeout_mins`.
     */
    idleTimeoutMins?: pulumi.Input<number>;
    /**
     * The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be
     * used. If set to `-1`, sessions do not expire. If a value is provided for this property, a value must also be provided
     * for `idle_timeout_mins`.
     */
    maxTimeoutMins?: pulumi.Input<number>;
    /**
     * Determines whether sessions for the authentication source are persistent. This value overrides the `persistent_sessions`
     * value from the global authentication session policy. This field is ignored if `enable_sessions` is `false`.
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * The persistent, unique ID for the session policy. It can be any combination of `[a-zA-Z0-9._-]`. This property is
     * system-assigned if not specified.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The display unit for session timeout periods in the PingFederate administrative console. When the display unit is
     * `HOURS` or `DAYS`, the timeout values in minutes must correspond to a whole number value for the specified unit. Options
     * are `MINUTES`, `HOURS`, `DAYS`. If empty, the value will default to `MINUTES`.
     */
    timeoutDisplayUnit?: pulumi.Input<string>;
    /**
     * Determines the type of user device that the authentication session can be created on. Options are `PRIVATE`, `SHARED`,
     * `ANY`. If empty, the value will default to `PRIVATE`.
     */
    userDeviceType?: pulumi.Input<string>;
}
