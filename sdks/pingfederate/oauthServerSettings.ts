// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OauthServerSettings extends pulumi.CustomResource {
    /**
     * Get an existing OauthServerSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OauthServerSettingsState, opts?: pulumi.CustomResourceOptions): OauthServerSettings {
        return new OauthServerSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/oauthServerSettings:OauthServerSettings';

    /**
     * Returns true if the given object is an instance of OauthServerSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OauthServerSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OauthServerSettings.__pulumiType;
    }

    /**
     * Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The
     * default is AFTER_AUTHENTICATION.
     */
    public readonly activationCodeCheckMode!: pulumi.Output<string>;
    /**
     * The password credential validator reference that is used for authenticating access to the OAuth Administrative Web
     * Service.
     */
    public readonly adminWebServicePcvRef!: pulumi.Output<outputs.OauthServerSettingsAdminWebServicePcvRef | undefined>;
    /**
     * Allow unidentified clients to request extension grants. The default value is false.
     */
    public readonly allowUnidentifiedClientExtensionGrants!: pulumi.Output<boolean>;
    /**
     * Allow unidentified clients to request resource owner password credentials grants. The default value is false.
     */
    public readonly allowUnidentifiedClientRoCreds!: pulumi.Output<boolean>;
    /**
     * The list of allowed origins.
     */
    public readonly allowedOrigins!: pulumi.Output<string[]>;
    /**
     * Attribute from the external consent adapter's contract, intended for storing approved authorization details returned by
     * the external consent page.
     */
    public readonly approvedAuthorizationDetailAttribute!: pulumi.Output<string | undefined>;
    /**
     * Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external
     * consent page.
     */
    public readonly approvedScopesAttribute!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Access Token Manager used for OAuth enabled grant management.
     */
    public readonly atmIdForOauthGrantManagement!: pulumi.Output<string>;
    /**
     * The authorization code entropy, in bytes.
     */
    public readonly authorizationCodeEntropy!: pulumi.Output<number>;
    /**
     * The authorization code timeout, in seconds.
     */
    public readonly authorizationCodeTimeout!: pulumi.Output<number>;
    /**
     * Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end
     * user to authorize a device. The default is false.
     */
    public readonly bypassActivationCodeConfirmation!: pulumi.Output<boolean>;
    /**
     * Bypass authorization for previously approved consents. The default value is false. Supported in PF version 12.0 or
     * later.
     */
    public readonly bypassAuthorizationForApprovedConsents!: pulumi.Output<boolean>;
    /**
     * Bypass authorization for previously approved persistent grants. The default value is false.
     */
    public readonly bypassAuthorizationForApprovedGrants!: pulumi.Output<boolean>;
    /**
     * The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default
     * value is 0, which will disable secondary client secret retention.
     */
    public readonly clientSecretRetentionPeriod!: pulumi.Output<number>;
    /**
     * The consent lifetime in days. The default value is indefinite. -1 indicates an indefinite amount of time. Supported in
     * PF version 12.0 or later.
     */
    public readonly consentLifetimeDays!: pulumi.Output<number>;
    /**
     * The default scope description.
     */
    public readonly defaultScopeDescription!: pulumi.Output<string>;
    /**
     * The amount of time client should wait between polling requests, in seconds. The default is 5 seconds.
     */
    public readonly devicePollingInterval!: pulumi.Output<number>;
    /**
     * Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false.
     */
    public readonly disallowPlainPkce!: pulumi.Output<boolean>;
    /**
     * Determines whether Demonstrating Proof-of-Possession (DPoP) proof JWT replay prevention is enforced. The default value
     * is false. Supported in PF version 11.3 or later.
     */
    public readonly dpopProofEnforceReplayPrevention!: pulumi.Output<boolean>;
    /**
     * The lifetime, in seconds, of the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is 120. Supported
     * in PF version 11.3 or later.
     */
    public readonly dpopProofLifetimeSeconds!: pulumi.Output<number>;
    /**
     * Determines whether nonce is required in the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is
     * false. Supported in PF version 11.3 or later.
     */
    public readonly dpopProofRequireNonce!: pulumi.Output<boolean>;
    /**
     * Indicates if cookies should be used for state tracking when the user authorization endpoint is operating in
     * authentication API redirectless mode
     */
    public readonly enableCookielessUserAuthorizationAuthenticationApi!: pulumi.Output<boolean>;
    /**
     * The list of exclusive scope groups.
     */
    public readonly exclusiveScopeGroups!: pulumi.Output<outputs.OauthServerSettingsExclusiveScopeGroup[]>;
    /**
     * The list of exclusive scopes.
     */
    public readonly exclusiveScopes!: pulumi.Output<outputs.OauthServerSettingsExclusiveScope[]>;
    /**
     * Determines whether the authorization server's issuer value is added to the authorization response or not. The default
     * value is false.
     */
    public readonly includeIssuerInAuthorizationResponse!: pulumi.Output<boolean>;
    /**
     * The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600.
     */
    public readonly jwtSecuredAuthorizationResponseModeLifetime!: pulumi.Output<number>;
    /**
     * Determines whether offline_access requires the prompt parameter value be 'consent' or not. The value will be reset to
     * default if the 'requireOfflineAccessScopeToIssueRefreshTokens' attribute is set to false. The default value is false.
     */
    public readonly offlineAccessRequireConsentPrompt!: pulumi.Output<boolean>;
    /**
     * The entropy of pushed authorization request references, in bytes. The default value is 24.
     */
    public readonly parReferenceLength!: pulumi.Output<number>;
    /**
     * The timeout, in seconds, of the pushed authorization request reference. The default value is 60.
     */
    public readonly parReferenceTimeout!: pulumi.Output<number>;
    /**
     * The status of pushed authorization request support. The default value is ENABLED.
     */
    public readonly parStatus!: pulumi.Output<string>;
    /**
     * The 'device_code' and 'user_code' timeout, in seconds. The default is 600 seconds.
     */
    public readonly pendingAuthorizationTimeout!: pulumi.Output<number>;
    /**
     * The persistent grant contract defines attributes that are associated with OAuth persistent grants.
     */
    public readonly persistentGrantContract!: pulumi.Output<outputs.OauthServerSettingsPersistentGrantContract>;
    /**
     * The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time.
     */
    public readonly persistentGrantIdleTimeout!: pulumi.Output<number>;
    /**
     * The persistent grant idle timeout time unit. The default value is DAYS
     */
    public readonly persistentGrantIdleTimeoutTimeUnit!: pulumi.Output<string>;
    /**
     * The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time.
     */
    public readonly persistentGrantLifetime!: pulumi.Output<number>;
    /**
     * The persistent grant lifetime unit.
     */
    public readonly persistentGrantLifetimeUnit!: pulumi.Output<string>;
    /**
     * The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or
     * 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.
     */
    public readonly persistentGrantReuseGrantTypes!: pulumi.Output<string[]>;
    /**
     * The minimum interval to roll refresh tokens.
     */
    public readonly refreshRollingInterval!: pulumi.Output<number>;
    /**
     * The refresh token rolling interval time unit. The default unit is HOURS.
     */
    public readonly refreshRollingIntervalTimeUnit!: pulumi.Output<string>;
    /**
     * The refresh token length in number of characters.
     */
    public readonly refreshTokenLength!: pulumi.Output<number>;
    /**
     * The grace period that a rolled refresh token remains valid in seconds. The default value is 60.
     */
    public readonly refreshTokenRollingGracePeriod!: pulumi.Output<number>;
    /**
     * The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and
     * 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified
     */
    public readonly registeredAuthorizationPath!: pulumi.Output<string>;
    /**
     * Determines whether offline_access scope is required to issue refresh tokens or not. The default value is false.
     */
    public readonly requireOfflineAccessScopeToIssueRefreshTokens!: pulumi.Output<boolean>;
    /**
     * The roll refresh token values default policy. The default value is false.
     */
    public readonly rollRefreshTokenValues!: pulumi.Output<boolean>;
    /**
     * The OAuth scope to validate when accessing grant management service.
     */
    public readonly scopeForOauthGrantManagement!: pulumi.Output<string>;
    /**
     * The list of common scope groups.
     */
    public readonly scopeGroups!: pulumi.Output<outputs.OauthServerSettingsScopeGroup[]>;
    /**
     * The list of common scopes.
     */
    public readonly scopes!: pulumi.Output<outputs.OauthServerSettingsScope[]>;
    /**
     * The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication.
     */
    public readonly tokenEndpointBaseUrl!: pulumi.Output<string>;
    /**
     * Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left
     * unchanged.
     */
    public readonly trackUserSessionsForLogout!: pulumi.Output<boolean>;
    /**
     * Adapter ID of the external consent adapter to be used for the consent page user interface.
     */
    public readonly userAuthorizationConsentAdapter!: pulumi.Output<string | undefined>;
    /**
     * User Authorization Consent Page setting to use PingFederate's internal consent page or an external system
     */
    public readonly userAuthorizationConsentPageSetting!: pulumi.Output<string>;
    /**
     * The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request
     */
    public readonly userAuthorizationUrl!: pulumi.Output<string>;

    /**
     * Create a OauthServerSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OauthServerSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OauthServerSettingsArgs | OauthServerSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OauthServerSettingsState | undefined;
            resourceInputs["activationCodeCheckMode"] = state ? state.activationCodeCheckMode : undefined;
            resourceInputs["adminWebServicePcvRef"] = state ? state.adminWebServicePcvRef : undefined;
            resourceInputs["allowUnidentifiedClientExtensionGrants"] = state ? state.allowUnidentifiedClientExtensionGrants : undefined;
            resourceInputs["allowUnidentifiedClientRoCreds"] = state ? state.allowUnidentifiedClientRoCreds : undefined;
            resourceInputs["allowedOrigins"] = state ? state.allowedOrigins : undefined;
            resourceInputs["approvedAuthorizationDetailAttribute"] = state ? state.approvedAuthorizationDetailAttribute : undefined;
            resourceInputs["approvedScopesAttribute"] = state ? state.approvedScopesAttribute : undefined;
            resourceInputs["atmIdForOauthGrantManagement"] = state ? state.atmIdForOauthGrantManagement : undefined;
            resourceInputs["authorizationCodeEntropy"] = state ? state.authorizationCodeEntropy : undefined;
            resourceInputs["authorizationCodeTimeout"] = state ? state.authorizationCodeTimeout : undefined;
            resourceInputs["bypassActivationCodeConfirmation"] = state ? state.bypassActivationCodeConfirmation : undefined;
            resourceInputs["bypassAuthorizationForApprovedConsents"] = state ? state.bypassAuthorizationForApprovedConsents : undefined;
            resourceInputs["bypassAuthorizationForApprovedGrants"] = state ? state.bypassAuthorizationForApprovedGrants : undefined;
            resourceInputs["clientSecretRetentionPeriod"] = state ? state.clientSecretRetentionPeriod : undefined;
            resourceInputs["consentLifetimeDays"] = state ? state.consentLifetimeDays : undefined;
            resourceInputs["defaultScopeDescription"] = state ? state.defaultScopeDescription : undefined;
            resourceInputs["devicePollingInterval"] = state ? state.devicePollingInterval : undefined;
            resourceInputs["disallowPlainPkce"] = state ? state.disallowPlainPkce : undefined;
            resourceInputs["dpopProofEnforceReplayPrevention"] = state ? state.dpopProofEnforceReplayPrevention : undefined;
            resourceInputs["dpopProofLifetimeSeconds"] = state ? state.dpopProofLifetimeSeconds : undefined;
            resourceInputs["dpopProofRequireNonce"] = state ? state.dpopProofRequireNonce : undefined;
            resourceInputs["enableCookielessUserAuthorizationAuthenticationApi"] = state ? state.enableCookielessUserAuthorizationAuthenticationApi : undefined;
            resourceInputs["exclusiveScopeGroups"] = state ? state.exclusiveScopeGroups : undefined;
            resourceInputs["exclusiveScopes"] = state ? state.exclusiveScopes : undefined;
            resourceInputs["includeIssuerInAuthorizationResponse"] = state ? state.includeIssuerInAuthorizationResponse : undefined;
            resourceInputs["jwtSecuredAuthorizationResponseModeLifetime"] = state ? state.jwtSecuredAuthorizationResponseModeLifetime : undefined;
            resourceInputs["offlineAccessRequireConsentPrompt"] = state ? state.offlineAccessRequireConsentPrompt : undefined;
            resourceInputs["parReferenceLength"] = state ? state.parReferenceLength : undefined;
            resourceInputs["parReferenceTimeout"] = state ? state.parReferenceTimeout : undefined;
            resourceInputs["parStatus"] = state ? state.parStatus : undefined;
            resourceInputs["pendingAuthorizationTimeout"] = state ? state.pendingAuthorizationTimeout : undefined;
            resourceInputs["persistentGrantContract"] = state ? state.persistentGrantContract : undefined;
            resourceInputs["persistentGrantIdleTimeout"] = state ? state.persistentGrantIdleTimeout : undefined;
            resourceInputs["persistentGrantIdleTimeoutTimeUnit"] = state ? state.persistentGrantIdleTimeoutTimeUnit : undefined;
            resourceInputs["persistentGrantLifetime"] = state ? state.persistentGrantLifetime : undefined;
            resourceInputs["persistentGrantLifetimeUnit"] = state ? state.persistentGrantLifetimeUnit : undefined;
            resourceInputs["persistentGrantReuseGrantTypes"] = state ? state.persistentGrantReuseGrantTypes : undefined;
            resourceInputs["refreshRollingInterval"] = state ? state.refreshRollingInterval : undefined;
            resourceInputs["refreshRollingIntervalTimeUnit"] = state ? state.refreshRollingIntervalTimeUnit : undefined;
            resourceInputs["refreshTokenLength"] = state ? state.refreshTokenLength : undefined;
            resourceInputs["refreshTokenRollingGracePeriod"] = state ? state.refreshTokenRollingGracePeriod : undefined;
            resourceInputs["registeredAuthorizationPath"] = state ? state.registeredAuthorizationPath : undefined;
            resourceInputs["requireOfflineAccessScopeToIssueRefreshTokens"] = state ? state.requireOfflineAccessScopeToIssueRefreshTokens : undefined;
            resourceInputs["rollRefreshTokenValues"] = state ? state.rollRefreshTokenValues : undefined;
            resourceInputs["scopeForOauthGrantManagement"] = state ? state.scopeForOauthGrantManagement : undefined;
            resourceInputs["scopeGroups"] = state ? state.scopeGroups : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["tokenEndpointBaseUrl"] = state ? state.tokenEndpointBaseUrl : undefined;
            resourceInputs["trackUserSessionsForLogout"] = state ? state.trackUserSessionsForLogout : undefined;
            resourceInputs["userAuthorizationConsentAdapter"] = state ? state.userAuthorizationConsentAdapter : undefined;
            resourceInputs["userAuthorizationConsentPageSetting"] = state ? state.userAuthorizationConsentPageSetting : undefined;
            resourceInputs["userAuthorizationUrl"] = state ? state.userAuthorizationUrl : undefined;
        } else {
            const args = argsOrState as OauthServerSettingsArgs | undefined;
            if ((!args || args.authorizationCodeEntropy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationCodeEntropy'");
            }
            if ((!args || args.authorizationCodeTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationCodeTimeout'");
            }
            if ((!args || args.refreshRollingInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refreshRollingInterval'");
            }
            if ((!args || args.refreshTokenLength === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refreshTokenLength'");
            }
            resourceInputs["activationCodeCheckMode"] = args ? args.activationCodeCheckMode : undefined;
            resourceInputs["adminWebServicePcvRef"] = args ? args.adminWebServicePcvRef : undefined;
            resourceInputs["allowUnidentifiedClientExtensionGrants"] = args ? args.allowUnidentifiedClientExtensionGrants : undefined;
            resourceInputs["allowUnidentifiedClientRoCreds"] = args ? args.allowUnidentifiedClientRoCreds : undefined;
            resourceInputs["allowedOrigins"] = args ? args.allowedOrigins : undefined;
            resourceInputs["approvedAuthorizationDetailAttribute"] = args ? args.approvedAuthorizationDetailAttribute : undefined;
            resourceInputs["approvedScopesAttribute"] = args ? args.approvedScopesAttribute : undefined;
            resourceInputs["atmIdForOauthGrantManagement"] = args ? args.atmIdForOauthGrantManagement : undefined;
            resourceInputs["authorizationCodeEntropy"] = args ? args.authorizationCodeEntropy : undefined;
            resourceInputs["authorizationCodeTimeout"] = args ? args.authorizationCodeTimeout : undefined;
            resourceInputs["bypassActivationCodeConfirmation"] = args ? args.bypassActivationCodeConfirmation : undefined;
            resourceInputs["bypassAuthorizationForApprovedConsents"] = args ? args.bypassAuthorizationForApprovedConsents : undefined;
            resourceInputs["bypassAuthorizationForApprovedGrants"] = args ? args.bypassAuthorizationForApprovedGrants : undefined;
            resourceInputs["clientSecretRetentionPeriod"] = args ? args.clientSecretRetentionPeriod : undefined;
            resourceInputs["consentLifetimeDays"] = args ? args.consentLifetimeDays : undefined;
            resourceInputs["defaultScopeDescription"] = args ? args.defaultScopeDescription : undefined;
            resourceInputs["devicePollingInterval"] = args ? args.devicePollingInterval : undefined;
            resourceInputs["disallowPlainPkce"] = args ? args.disallowPlainPkce : undefined;
            resourceInputs["dpopProofEnforceReplayPrevention"] = args ? args.dpopProofEnforceReplayPrevention : undefined;
            resourceInputs["dpopProofLifetimeSeconds"] = args ? args.dpopProofLifetimeSeconds : undefined;
            resourceInputs["dpopProofRequireNonce"] = args ? args.dpopProofRequireNonce : undefined;
            resourceInputs["enableCookielessUserAuthorizationAuthenticationApi"] = args ? args.enableCookielessUserAuthorizationAuthenticationApi : undefined;
            resourceInputs["exclusiveScopeGroups"] = args ? args.exclusiveScopeGroups : undefined;
            resourceInputs["exclusiveScopes"] = args ? args.exclusiveScopes : undefined;
            resourceInputs["includeIssuerInAuthorizationResponse"] = args ? args.includeIssuerInAuthorizationResponse : undefined;
            resourceInputs["jwtSecuredAuthorizationResponseModeLifetime"] = args ? args.jwtSecuredAuthorizationResponseModeLifetime : undefined;
            resourceInputs["offlineAccessRequireConsentPrompt"] = args ? args.offlineAccessRequireConsentPrompt : undefined;
            resourceInputs["parReferenceLength"] = args ? args.parReferenceLength : undefined;
            resourceInputs["parReferenceTimeout"] = args ? args.parReferenceTimeout : undefined;
            resourceInputs["parStatus"] = args ? args.parStatus : undefined;
            resourceInputs["pendingAuthorizationTimeout"] = args ? args.pendingAuthorizationTimeout : undefined;
            resourceInputs["persistentGrantContract"] = args ? args.persistentGrantContract : undefined;
            resourceInputs["persistentGrantIdleTimeout"] = args ? args.persistentGrantIdleTimeout : undefined;
            resourceInputs["persistentGrantIdleTimeoutTimeUnit"] = args ? args.persistentGrantIdleTimeoutTimeUnit : undefined;
            resourceInputs["persistentGrantLifetime"] = args ? args.persistentGrantLifetime : undefined;
            resourceInputs["persistentGrantLifetimeUnit"] = args ? args.persistentGrantLifetimeUnit : undefined;
            resourceInputs["persistentGrantReuseGrantTypes"] = args ? args.persistentGrantReuseGrantTypes : undefined;
            resourceInputs["refreshRollingInterval"] = args ? args.refreshRollingInterval : undefined;
            resourceInputs["refreshRollingIntervalTimeUnit"] = args ? args.refreshRollingIntervalTimeUnit : undefined;
            resourceInputs["refreshTokenLength"] = args ? args.refreshTokenLength : undefined;
            resourceInputs["refreshTokenRollingGracePeriod"] = args ? args.refreshTokenRollingGracePeriod : undefined;
            resourceInputs["registeredAuthorizationPath"] = args ? args.registeredAuthorizationPath : undefined;
            resourceInputs["requireOfflineAccessScopeToIssueRefreshTokens"] = args ? args.requireOfflineAccessScopeToIssueRefreshTokens : undefined;
            resourceInputs["rollRefreshTokenValues"] = args ? args.rollRefreshTokenValues : undefined;
            resourceInputs["scopeForOauthGrantManagement"] = args ? args.scopeForOauthGrantManagement : undefined;
            resourceInputs["scopeGroups"] = args ? args.scopeGroups : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["tokenEndpointBaseUrl"] = args ? args.tokenEndpointBaseUrl : undefined;
            resourceInputs["trackUserSessionsForLogout"] = args ? args.trackUserSessionsForLogout : undefined;
            resourceInputs["userAuthorizationConsentAdapter"] = args ? args.userAuthorizationConsentAdapter : undefined;
            resourceInputs["userAuthorizationConsentPageSetting"] = args ? args.userAuthorizationConsentPageSetting : undefined;
            resourceInputs["userAuthorizationUrl"] = args ? args.userAuthorizationUrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OauthServerSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OauthServerSettings resources.
 */
export interface OauthServerSettingsState {
    /**
     * Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The
     * default is AFTER_AUTHENTICATION.
     */
    activationCodeCheckMode?: pulumi.Input<string>;
    /**
     * The password credential validator reference that is used for authenticating access to the OAuth Administrative Web
     * Service.
     */
    adminWebServicePcvRef?: pulumi.Input<inputs.OauthServerSettingsAdminWebServicePcvRef>;
    /**
     * Allow unidentified clients to request extension grants. The default value is false.
     */
    allowUnidentifiedClientExtensionGrants?: pulumi.Input<boolean>;
    /**
     * Allow unidentified clients to request resource owner password credentials grants. The default value is false.
     */
    allowUnidentifiedClientRoCreds?: pulumi.Input<boolean>;
    /**
     * The list of allowed origins.
     */
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Attribute from the external consent adapter's contract, intended for storing approved authorization details returned by
     * the external consent page.
     */
    approvedAuthorizationDetailAttribute?: pulumi.Input<string>;
    /**
     * Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external
     * consent page.
     */
    approvedScopesAttribute?: pulumi.Input<string>;
    /**
     * The ID of the Access Token Manager used for OAuth enabled grant management.
     */
    atmIdForOauthGrantManagement?: pulumi.Input<string>;
    /**
     * The authorization code entropy, in bytes.
     */
    authorizationCodeEntropy?: pulumi.Input<number>;
    /**
     * The authorization code timeout, in seconds.
     */
    authorizationCodeTimeout?: pulumi.Input<number>;
    /**
     * Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end
     * user to authorize a device. The default is false.
     */
    bypassActivationCodeConfirmation?: pulumi.Input<boolean>;
    /**
     * Bypass authorization for previously approved consents. The default value is false. Supported in PF version 12.0 or
     * later.
     */
    bypassAuthorizationForApprovedConsents?: pulumi.Input<boolean>;
    /**
     * Bypass authorization for previously approved persistent grants. The default value is false.
     */
    bypassAuthorizationForApprovedGrants?: pulumi.Input<boolean>;
    /**
     * The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default
     * value is 0, which will disable secondary client secret retention.
     */
    clientSecretRetentionPeriod?: pulumi.Input<number>;
    /**
     * The consent lifetime in days. The default value is indefinite. -1 indicates an indefinite amount of time. Supported in
     * PF version 12.0 or later.
     */
    consentLifetimeDays?: pulumi.Input<number>;
    /**
     * The default scope description.
     */
    defaultScopeDescription?: pulumi.Input<string>;
    /**
     * The amount of time client should wait between polling requests, in seconds. The default is 5 seconds.
     */
    devicePollingInterval?: pulumi.Input<number>;
    /**
     * Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false.
     */
    disallowPlainPkce?: pulumi.Input<boolean>;
    /**
     * Determines whether Demonstrating Proof-of-Possession (DPoP) proof JWT replay prevention is enforced. The default value
     * is false. Supported in PF version 11.3 or later.
     */
    dpopProofEnforceReplayPrevention?: pulumi.Input<boolean>;
    /**
     * The lifetime, in seconds, of the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is 120. Supported
     * in PF version 11.3 or later.
     */
    dpopProofLifetimeSeconds?: pulumi.Input<number>;
    /**
     * Determines whether nonce is required in the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is
     * false. Supported in PF version 11.3 or later.
     */
    dpopProofRequireNonce?: pulumi.Input<boolean>;
    /**
     * Indicates if cookies should be used for state tracking when the user authorization endpoint is operating in
     * authentication API redirectless mode
     */
    enableCookielessUserAuthorizationAuthenticationApi?: pulumi.Input<boolean>;
    /**
     * The list of exclusive scope groups.
     */
    exclusiveScopeGroups?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsExclusiveScopeGroup>[]>;
    /**
     * The list of exclusive scopes.
     */
    exclusiveScopes?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsExclusiveScope>[]>;
    /**
     * Determines whether the authorization server's issuer value is added to the authorization response or not. The default
     * value is false.
     */
    includeIssuerInAuthorizationResponse?: pulumi.Input<boolean>;
    /**
     * The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600.
     */
    jwtSecuredAuthorizationResponseModeLifetime?: pulumi.Input<number>;
    /**
     * Determines whether offline_access requires the prompt parameter value be 'consent' or not. The value will be reset to
     * default if the 'requireOfflineAccessScopeToIssueRefreshTokens' attribute is set to false. The default value is false.
     */
    offlineAccessRequireConsentPrompt?: pulumi.Input<boolean>;
    /**
     * The entropy of pushed authorization request references, in bytes. The default value is 24.
     */
    parReferenceLength?: pulumi.Input<number>;
    /**
     * The timeout, in seconds, of the pushed authorization request reference. The default value is 60.
     */
    parReferenceTimeout?: pulumi.Input<number>;
    /**
     * The status of pushed authorization request support. The default value is ENABLED.
     */
    parStatus?: pulumi.Input<string>;
    /**
     * The 'device_code' and 'user_code' timeout, in seconds. The default is 600 seconds.
     */
    pendingAuthorizationTimeout?: pulumi.Input<number>;
    /**
     * The persistent grant contract defines attributes that are associated with OAuth persistent grants.
     */
    persistentGrantContract?: pulumi.Input<inputs.OauthServerSettingsPersistentGrantContract>;
    /**
     * The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time.
     */
    persistentGrantIdleTimeout?: pulumi.Input<number>;
    /**
     * The persistent grant idle timeout time unit. The default value is DAYS
     */
    persistentGrantIdleTimeoutTimeUnit?: pulumi.Input<string>;
    /**
     * The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time.
     */
    persistentGrantLifetime?: pulumi.Input<number>;
    /**
     * The persistent grant lifetime unit.
     */
    persistentGrantLifetimeUnit?: pulumi.Input<string>;
    /**
     * The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or
     * 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.
     */
    persistentGrantReuseGrantTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum interval to roll refresh tokens.
     */
    refreshRollingInterval?: pulumi.Input<number>;
    /**
     * The refresh token rolling interval time unit. The default unit is HOURS.
     */
    refreshRollingIntervalTimeUnit?: pulumi.Input<string>;
    /**
     * The refresh token length in number of characters.
     */
    refreshTokenLength?: pulumi.Input<number>;
    /**
     * The grace period that a rolled refresh token remains valid in seconds. The default value is 60.
     */
    refreshTokenRollingGracePeriod?: pulumi.Input<number>;
    /**
     * The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and
     * 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified
     */
    registeredAuthorizationPath?: pulumi.Input<string>;
    /**
     * Determines whether offline_access scope is required to issue refresh tokens or not. The default value is false.
     */
    requireOfflineAccessScopeToIssueRefreshTokens?: pulumi.Input<boolean>;
    /**
     * The roll refresh token values default policy. The default value is false.
     */
    rollRefreshTokenValues?: pulumi.Input<boolean>;
    /**
     * The OAuth scope to validate when accessing grant management service.
     */
    scopeForOauthGrantManagement?: pulumi.Input<string>;
    /**
     * The list of common scope groups.
     */
    scopeGroups?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsScopeGroup>[]>;
    /**
     * The list of common scopes.
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsScope>[]>;
    /**
     * The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication.
     */
    tokenEndpointBaseUrl?: pulumi.Input<string>;
    /**
     * Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left
     * unchanged.
     */
    trackUserSessionsForLogout?: pulumi.Input<boolean>;
    /**
     * Adapter ID of the external consent adapter to be used for the consent page user interface.
     */
    userAuthorizationConsentAdapter?: pulumi.Input<string>;
    /**
     * User Authorization Consent Page setting to use PingFederate's internal consent page or an external system
     */
    userAuthorizationConsentPageSetting?: pulumi.Input<string>;
    /**
     * The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request
     */
    userAuthorizationUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OauthServerSettings resource.
 */
export interface OauthServerSettingsArgs {
    /**
     * Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The
     * default is AFTER_AUTHENTICATION.
     */
    activationCodeCheckMode?: pulumi.Input<string>;
    /**
     * The password credential validator reference that is used for authenticating access to the OAuth Administrative Web
     * Service.
     */
    adminWebServicePcvRef?: pulumi.Input<inputs.OauthServerSettingsAdminWebServicePcvRef>;
    /**
     * Allow unidentified clients to request extension grants. The default value is false.
     */
    allowUnidentifiedClientExtensionGrants?: pulumi.Input<boolean>;
    /**
     * Allow unidentified clients to request resource owner password credentials grants. The default value is false.
     */
    allowUnidentifiedClientRoCreds?: pulumi.Input<boolean>;
    /**
     * The list of allowed origins.
     */
    allowedOrigins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Attribute from the external consent adapter's contract, intended for storing approved authorization details returned by
     * the external consent page.
     */
    approvedAuthorizationDetailAttribute?: pulumi.Input<string>;
    /**
     * Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external
     * consent page.
     */
    approvedScopesAttribute?: pulumi.Input<string>;
    /**
     * The ID of the Access Token Manager used for OAuth enabled grant management.
     */
    atmIdForOauthGrantManagement?: pulumi.Input<string>;
    /**
     * The authorization code entropy, in bytes.
     */
    authorizationCodeEntropy: pulumi.Input<number>;
    /**
     * The authorization code timeout, in seconds.
     */
    authorizationCodeTimeout: pulumi.Input<number>;
    /**
     * Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end
     * user to authorize a device. The default is false.
     */
    bypassActivationCodeConfirmation?: pulumi.Input<boolean>;
    /**
     * Bypass authorization for previously approved consents. The default value is false. Supported in PF version 12.0 or
     * later.
     */
    bypassAuthorizationForApprovedConsents?: pulumi.Input<boolean>;
    /**
     * Bypass authorization for previously approved persistent grants. The default value is false.
     */
    bypassAuthorizationForApprovedGrants?: pulumi.Input<boolean>;
    /**
     * The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default
     * value is 0, which will disable secondary client secret retention.
     */
    clientSecretRetentionPeriod?: pulumi.Input<number>;
    /**
     * The consent lifetime in days. The default value is indefinite. -1 indicates an indefinite amount of time. Supported in
     * PF version 12.0 or later.
     */
    consentLifetimeDays?: pulumi.Input<number>;
    /**
     * The default scope description.
     */
    defaultScopeDescription?: pulumi.Input<string>;
    /**
     * The amount of time client should wait between polling requests, in seconds. The default is 5 seconds.
     */
    devicePollingInterval?: pulumi.Input<number>;
    /**
     * Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false.
     */
    disallowPlainPkce?: pulumi.Input<boolean>;
    /**
     * Determines whether Demonstrating Proof-of-Possession (DPoP) proof JWT replay prevention is enforced. The default value
     * is false. Supported in PF version 11.3 or later.
     */
    dpopProofEnforceReplayPrevention?: pulumi.Input<boolean>;
    /**
     * The lifetime, in seconds, of the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is 120. Supported
     * in PF version 11.3 or later.
     */
    dpopProofLifetimeSeconds?: pulumi.Input<number>;
    /**
     * Determines whether nonce is required in the Demonstrating Proof-of-Possession (DPoP) proof JWT. The default value is
     * false. Supported in PF version 11.3 or later.
     */
    dpopProofRequireNonce?: pulumi.Input<boolean>;
    /**
     * Indicates if cookies should be used for state tracking when the user authorization endpoint is operating in
     * authentication API redirectless mode
     */
    enableCookielessUserAuthorizationAuthenticationApi?: pulumi.Input<boolean>;
    /**
     * The list of exclusive scope groups.
     */
    exclusiveScopeGroups?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsExclusiveScopeGroup>[]>;
    /**
     * The list of exclusive scopes.
     */
    exclusiveScopes?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsExclusiveScope>[]>;
    /**
     * Determines whether the authorization server's issuer value is added to the authorization response or not. The default
     * value is false.
     */
    includeIssuerInAuthorizationResponse?: pulumi.Input<boolean>;
    /**
     * The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600.
     */
    jwtSecuredAuthorizationResponseModeLifetime?: pulumi.Input<number>;
    /**
     * Determines whether offline_access requires the prompt parameter value be 'consent' or not. The value will be reset to
     * default if the 'requireOfflineAccessScopeToIssueRefreshTokens' attribute is set to false. The default value is false.
     */
    offlineAccessRequireConsentPrompt?: pulumi.Input<boolean>;
    /**
     * The entropy of pushed authorization request references, in bytes. The default value is 24.
     */
    parReferenceLength?: pulumi.Input<number>;
    /**
     * The timeout, in seconds, of the pushed authorization request reference. The default value is 60.
     */
    parReferenceTimeout?: pulumi.Input<number>;
    /**
     * The status of pushed authorization request support. The default value is ENABLED.
     */
    parStatus?: pulumi.Input<string>;
    /**
     * The 'device_code' and 'user_code' timeout, in seconds. The default is 600 seconds.
     */
    pendingAuthorizationTimeout?: pulumi.Input<number>;
    /**
     * The persistent grant contract defines attributes that are associated with OAuth persistent grants.
     */
    persistentGrantContract?: pulumi.Input<inputs.OauthServerSettingsPersistentGrantContract>;
    /**
     * The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time.
     */
    persistentGrantIdleTimeout?: pulumi.Input<number>;
    /**
     * The persistent grant idle timeout time unit. The default value is DAYS
     */
    persistentGrantIdleTimeoutTimeUnit?: pulumi.Input<string>;
    /**
     * The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time.
     */
    persistentGrantLifetime?: pulumi.Input<number>;
    /**
     * The persistent grant lifetime unit.
     */
    persistentGrantLifetimeUnit?: pulumi.Input<string>;
    /**
     * The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or
     * 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.
     */
    persistentGrantReuseGrantTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The minimum interval to roll refresh tokens.
     */
    refreshRollingInterval: pulumi.Input<number>;
    /**
     * The refresh token rolling interval time unit. The default unit is HOURS.
     */
    refreshRollingIntervalTimeUnit?: pulumi.Input<string>;
    /**
     * The refresh token length in number of characters.
     */
    refreshTokenLength: pulumi.Input<number>;
    /**
     * The grace period that a rolled refresh token remains valid in seconds. The default value is 60.
     */
    refreshTokenRollingGracePeriod?: pulumi.Input<number>;
    /**
     * The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and
     * 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified
     */
    registeredAuthorizationPath?: pulumi.Input<string>;
    /**
     * Determines whether offline_access scope is required to issue refresh tokens or not. The default value is false.
     */
    requireOfflineAccessScopeToIssueRefreshTokens?: pulumi.Input<boolean>;
    /**
     * The roll refresh token values default policy. The default value is false.
     */
    rollRefreshTokenValues?: pulumi.Input<boolean>;
    /**
     * The OAuth scope to validate when accessing grant management service.
     */
    scopeForOauthGrantManagement?: pulumi.Input<string>;
    /**
     * The list of common scope groups.
     */
    scopeGroups?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsScopeGroup>[]>;
    /**
     * The list of common scopes.
     */
    scopes?: pulumi.Input<pulumi.Input<inputs.OauthServerSettingsScope>[]>;
    /**
     * The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication.
     */
    tokenEndpointBaseUrl?: pulumi.Input<string>;
    /**
     * Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left
     * unchanged.
     */
    trackUserSessionsForLogout?: pulumi.Input<boolean>;
    /**
     * Adapter ID of the external consent adapter to be used for the consent page user interface.
     */
    userAuthorizationConsentAdapter?: pulumi.Input<string>;
    /**
     * User Authorization Consent Page setting to use PingFederate's internal consent page or an external system
     */
    userAuthorizationConsentPageSetting?: pulumi.Input<string>;
    /**
     * The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request
     */
    userAuthorizationUrl?: pulumi.Input<string>;
}
