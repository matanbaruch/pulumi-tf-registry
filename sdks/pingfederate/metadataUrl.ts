// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MetadataUrl extends pulumi.CustomResource {
    /**
     * Get an existing MetadataUrl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetadataUrlState, opts?: pulumi.CustomResourceOptions): MetadataUrl {
        return new MetadataUrl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/metadataUrl:MetadataUrl';

    /**
     * Returns true if the given object is an instance of MetadataUrl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetadataUrl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetadataUrl.__pulumiType;
    }

    /**
     * The Signature Verification Certificate details. This property is read-only.
     */
    public /*out*/ readonly certView!: pulumi.Output<outputs.MetadataUrlCertView>;
    /**
     * The name for the Metadata URL.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Metadata URL.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The persistent, unique ID for the Metadata Url. It can be any combination of `[a-zA-Z0-9._-]`. This property is
     * system-assigned if not specified.
     */
    public readonly urlId!: pulumi.Output<string>;
    /**
     * Perform Metadata Signature Validation. The default value is `true`.
     */
    public readonly validateSignature!: pulumi.Output<boolean>;
    /**
     * Data of the Signature Verification Certificate for the Metadata URL.
     */
    public readonly x509File!: pulumi.Output<outputs.MetadataUrlX509File | undefined>;

    /**
     * Create a MetadataUrl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataUrlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetadataUrlArgs | MetadataUrlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetadataUrlState | undefined;
            resourceInputs["certView"] = state ? state.certView : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["urlId"] = state ? state.urlId : undefined;
            resourceInputs["validateSignature"] = state ? state.validateSignature : undefined;
            resourceInputs["x509File"] = state ? state.x509File : undefined;
        } else {
            const args = argsOrState as MetadataUrlArgs | undefined;
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["urlId"] = args ? args.urlId : undefined;
            resourceInputs["validateSignature"] = args ? args.validateSignature : undefined;
            resourceInputs["x509File"] = args ? args.x509File : undefined;
            resourceInputs["certView"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetadataUrl.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MetadataUrl resources.
 */
export interface MetadataUrlState {
    /**
     * The Signature Verification Certificate details. This property is read-only.
     */
    certView?: pulumi.Input<inputs.MetadataUrlCertView>;
    /**
     * The name for the Metadata URL.
     */
    name?: pulumi.Input<string>;
    /**
     * The Metadata URL.
     */
    url?: pulumi.Input<string>;
    /**
     * The persistent, unique ID for the Metadata Url. It can be any combination of `[a-zA-Z0-9._-]`. This property is
     * system-assigned if not specified.
     */
    urlId?: pulumi.Input<string>;
    /**
     * Perform Metadata Signature Validation. The default value is `true`.
     */
    validateSignature?: pulumi.Input<boolean>;
    /**
     * Data of the Signature Verification Certificate for the Metadata URL.
     */
    x509File?: pulumi.Input<inputs.MetadataUrlX509File>;
}

/**
 * The set of arguments for constructing a MetadataUrl resource.
 */
export interface MetadataUrlArgs {
    /**
     * The name for the Metadata URL.
     */
    name?: pulumi.Input<string>;
    /**
     * The Metadata URL.
     */
    url: pulumi.Input<string>;
    /**
     * The persistent, unique ID for the Metadata Url. It can be any combination of `[a-zA-Z0-9._-]`. This property is
     * system-assigned if not specified.
     */
    urlId?: pulumi.Input<string>;
    /**
     * Perform Metadata Signature Validation. The default value is `true`.
     */
    validateSignature?: pulumi.Input<boolean>;
    /**
     * Data of the Signature Verification Certificate for the Metadata URL.
     */
    x509File?: pulumi.Input<inputs.MetadataUrlX509File>;
}
