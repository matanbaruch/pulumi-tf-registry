// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AuthenticationPolicies extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticationPolicies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationPoliciesState, opts?: pulumi.CustomResourceOptions): AuthenticationPolicies {
        return new AuthenticationPolicies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/authenticationPolicies:AuthenticationPolicies';

    /**
     * Returns true if the given object is an instance of AuthenticationPolicies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthenticationPolicies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticationPolicies.__pulumiType;
    }

    /**
     * The list of authentication policy trees.
     */
    public readonly authnSelectionTrees!: pulumi.Output<outputs.AuthenticationPoliciesAuthnSelectionTree[] | undefined>;
    /**
     * The default authentication sources.
     */
    public readonly defaultAuthenticationSources!: pulumi.Output<outputs.AuthenticationPoliciesDefaultAuthenticationSource[] | undefined>;
    /**
     * Fail if policy finds no authentication source.
     */
    public readonly failIfNoSelection!: pulumi.Output<boolean | undefined>;
    /**
     * The HTTP request parameters to track and make available to authentication sources, selectors, and contract mappings
     * throughout the authentication policy.
     */
    public readonly trackedHttpParameters!: pulumi.Output<string[] | undefined>;

    /**
     * Create a AuthenticationPolicies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AuthenticationPoliciesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationPoliciesArgs | AuthenticationPoliciesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationPoliciesState | undefined;
            resourceInputs["authnSelectionTrees"] = state ? state.authnSelectionTrees : undefined;
            resourceInputs["defaultAuthenticationSources"] = state ? state.defaultAuthenticationSources : undefined;
            resourceInputs["failIfNoSelection"] = state ? state.failIfNoSelection : undefined;
            resourceInputs["trackedHttpParameters"] = state ? state.trackedHttpParameters : undefined;
        } else {
            const args = argsOrState as AuthenticationPoliciesArgs | undefined;
            resourceInputs["authnSelectionTrees"] = args ? args.authnSelectionTrees : undefined;
            resourceInputs["defaultAuthenticationSources"] = args ? args.defaultAuthenticationSources : undefined;
            resourceInputs["failIfNoSelection"] = args ? args.failIfNoSelection : undefined;
            resourceInputs["trackedHttpParameters"] = args ? args.trackedHttpParameters : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthenticationPolicies.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthenticationPolicies resources.
 */
export interface AuthenticationPoliciesState {
    /**
     * The list of authentication policy trees.
     */
    authnSelectionTrees?: pulumi.Input<pulumi.Input<inputs.AuthenticationPoliciesAuthnSelectionTree>[]>;
    /**
     * The default authentication sources.
     */
    defaultAuthenticationSources?: pulumi.Input<pulumi.Input<inputs.AuthenticationPoliciesDefaultAuthenticationSource>[]>;
    /**
     * Fail if policy finds no authentication source.
     */
    failIfNoSelection?: pulumi.Input<boolean>;
    /**
     * The HTTP request parameters to track and make available to authentication sources, selectors, and contract mappings
     * throughout the authentication policy.
     */
    trackedHttpParameters?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a AuthenticationPolicies resource.
 */
export interface AuthenticationPoliciesArgs {
    /**
     * The list of authentication policy trees.
     */
    authnSelectionTrees?: pulumi.Input<pulumi.Input<inputs.AuthenticationPoliciesAuthnSelectionTree>[]>;
    /**
     * The default authentication sources.
     */
    defaultAuthenticationSources?: pulumi.Input<pulumi.Input<inputs.AuthenticationPoliciesDefaultAuthenticationSource>[]>;
    /**
     * Fail if policy finds no authentication source.
     */
    failIfNoSelection?: pulumi.Input<boolean>;
    /**
     * The HTTP request parameters to track and make available to authentication sources, selectors, and contract mappings
     * throughout the authentication policy.
     */
    trackedHttpParameters?: pulumi.Input<pulumi.Input<string>[]>;
}
