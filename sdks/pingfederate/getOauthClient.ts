// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOauthClient(args: GetOauthClientArgs, opts?: pulumi.InvokeOptions): Promise<GetOauthClientResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingfederate:index/getOauthClient:getOauthClient", {
        "clientId": args.clientId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOauthClient.
 */
export interface GetOauthClientArgs {
    clientId: string;
}

/**
 * A collection of values returned by getOauthClient.
 */
export interface GetOauthClientResult {
    readonly allowAuthenticationApiInit: boolean;
    readonly authorizationDetailTypes: string[];
    readonly bypassActivationCodeConfirmationOverride: boolean;
    readonly bypassApprovalPage: boolean;
    readonly cibaDeliveryMode: string;
    readonly cibaNotificationEndpoint: string;
    readonly cibaPollingInterval: number;
    readonly cibaRequestObjectSigningAlgorithm: string;
    readonly cibaRequireSignedRequests: boolean;
    readonly cibaUserCodeSupported: boolean;
    readonly clientAuth: outputs.GetOauthClientClientAuth;
    readonly clientId: string;
    readonly clientSecretChangedTime: string;
    readonly clientSecretRetentionPeriod: number;
    readonly clientSecretRetentionPeriodType: string;
    readonly creationDate: string;
    readonly defaultAccessTokenManagerRef: outputs.GetOauthClientDefaultAccessTokenManagerRef;
    readonly description: string;
    readonly deviceFlowSettingType: string;
    readonly devicePollingIntervalOverride: number;
    readonly enableCookielessAuthenticationApi: boolean;
    readonly enabled: boolean;
    readonly exclusiveScopes: string[];
    readonly extendedParameters: {[key: string]: outputs.GetOauthClientExtendedParameters};
    readonly grantTypes: string[];
    readonly id: string;
    readonly jwksSettings: outputs.GetOauthClientJwksSettings;
    readonly jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm: string;
    readonly jwtSecuredAuthorizationResponseModeEncryptionAlgorithm: string;
    readonly jwtSecuredAuthorizationResponseModeSigningAlgorithm: string;
    readonly logoUrl: string;
    readonly modificationDate: string;
    readonly name: string;
    readonly offlineAccessRequireConsentPrompt: string;
    readonly oidcPolicy: outputs.GetOauthClientOidcPolicy;
    readonly pendingAuthorizationTimeoutOverride: number;
    readonly persistentGrantExpirationTime: number;
    readonly persistentGrantExpirationTimeUnit: string;
    readonly persistentGrantExpirationType: string;
    readonly persistentGrantIdleTimeout: number;
    readonly persistentGrantIdleTimeoutTimeUnit: string;
    readonly persistentGrantIdleTimeoutType: string;
    readonly persistentGrantReuseGrantTypes: string[];
    readonly persistentGrantReuseType: string;
    readonly redirectUris: string[];
    readonly refreshRolling: string;
    readonly refreshTokenRollingGracePeriod: number;
    readonly refreshTokenRollingGracePeriodType: string;
    readonly refreshTokenRollingInterval: number;
    readonly refreshTokenRollingIntervalTimeUnit: string;
    readonly refreshTokenRollingIntervalType: string;
    readonly requestObjectSigningAlgorithm: string;
    readonly requestPolicyRef: outputs.GetOauthClientRequestPolicyRef;
    readonly requireDpop: boolean;
    readonly requireJwtSecuredAuthorizationResponseMode: boolean;
    readonly requireOfflineAccessScopeToIssueRefreshTokens: string;
    readonly requireProofKeyForCodeExchange: boolean;
    readonly requirePushedAuthorizationRequests: boolean;
    readonly requireSignedRequests: boolean;
    readonly restrictScopes: boolean;
    readonly restrictToDefaultAccessTokenManager: boolean;
    readonly restrictedResponseTypes: string[];
    readonly restrictedScopes: string[];
    readonly tokenExchangeProcessorPolicyRef: outputs.GetOauthClientTokenExchangeProcessorPolicyRef;
    readonly tokenIntrospectionContentEncryptionAlgorithm: string;
    readonly tokenIntrospectionEncryptionAlgorithm: string;
    readonly tokenIntrospectionSigningAlgorithm: string;
    readonly userAuthorizationUrlOverride: string;
    readonly validateUsingAllEligibleAtms: boolean;
}
export function getOauthClientOutput(args: GetOauthClientOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOauthClientResult> {
    return pulumi.output(args).apply((a: any) => getOauthClient(a, opts))
}

/**
 * A collection of arguments for invoking getOauthClient.
 */
export interface GetOauthClientOutputArgs {
    clientId: pulumi.Input<string>;
}
