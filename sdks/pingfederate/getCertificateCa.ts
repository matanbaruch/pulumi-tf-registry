// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getCertificateCa(args: GetCertificateCaArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateCaResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingfederate:index/getCertificateCa:getCertificateCa", {
        "caId": args.caId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCertificateCa.
 */
export interface GetCertificateCaArgs {
    caId: string;
}

/**
 * A collection of values returned by getCertificateCa.
 */
export interface GetCertificateCaResult {
    readonly caId: string;
    readonly cryptoProvider: string;
    readonly expires: string;
    readonly id: string;
    readonly issuerDn: string;
    readonly keyAlgorithm: string;
    readonly keySize: number;
    readonly serialNumber: string;
    readonly sha1Fingerprint: string;
    readonly sha256Fingerprint: string;
    readonly signatureAlgorithm: string;
    readonly status: string;
    readonly subjectAlternativeNames: string[];
    readonly subjectDn: string;
    readonly validFrom: string;
    readonly version: number;
}
export function getCertificateCaOutput(args: GetCertificateCaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCertificateCaResult> {
    return pulumi.output(args).apply((a: any) => getCertificateCa(a, opts))
}

/**
 * A collection of arguments for invoking getCertificateCa.
 */
export interface GetCertificateCaOutputArgs {
    caId: pulumi.Input<string>;
}
