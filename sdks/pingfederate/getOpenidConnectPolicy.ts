// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOpenidConnectPolicy(args: GetOpenidConnectPolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetOpenidConnectPolicyResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingfederate:index/getOpenidConnectPolicy:getOpenidConnectPolicy", {
        "includeSriInIdToken": args.includeSriInIdToken,
        "policyId": args.policyId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getOpenidConnectPolicy.
 */
export interface GetOpenidConnectPolicyArgs {
    includeSriInIdToken?: boolean;
    policyId: string;
}

/**
 * A collection of values returned by getOpenidConnectPolicy.
 */
export interface GetOpenidConnectPolicyResult {
    readonly accessTokenManagerRef: outputs.GetOpenidConnectPolicyAccessTokenManagerRef;
    readonly attributeContract: outputs.GetOpenidConnectPolicyAttributeContract;
    readonly attributeMapping: outputs.GetOpenidConnectPolicyAttributeMapping;
    readonly id: string;
    readonly idTokenLifetime: number;
    readonly idTokenTypHeaderValue: string;
    readonly includeSHashInIdToken: boolean;
    readonly includeSriInIdToken: boolean;
    readonly includeUserInfoInIdToken: boolean;
    readonly includeX5tInIdToken: boolean;
    readonly name: string;
    readonly policyId: string;
    readonly reissueIdTokenInHybridFlow: boolean;
    readonly returnIdTokenOnRefreshGrant: boolean;
    readonly scopeAttributeMappings: {[key: string]: outputs.GetOpenidConnectPolicyScopeAttributeMappings};
}
export function getOpenidConnectPolicyOutput(args: GetOpenidConnectPolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetOpenidConnectPolicyResult> {
    return pulumi.output(args).apply((a: any) => getOpenidConnectPolicy(a, opts))
}

/**
 * A collection of arguments for invoking getOpenidConnectPolicy.
 */
export interface GetOpenidConnectPolicyOutputArgs {
    includeSriInIdToken?: pulumi.Input<boolean>;
    policyId: pulumi.Input<string>;
}
