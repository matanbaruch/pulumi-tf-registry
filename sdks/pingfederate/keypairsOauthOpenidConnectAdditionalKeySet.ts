// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeypairsOauthOpenidConnectAdditionalKeySet extends pulumi.CustomResource {
    /**
     * Get an existing KeypairsOauthOpenidConnectAdditionalKeySet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairsOauthOpenidConnectAdditionalKeySetState, opts?: pulumi.CustomResourceOptions): KeypairsOauthOpenidConnectAdditionalKeySet {
        return new KeypairsOauthOpenidConnectAdditionalKeySet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/keypairsOauthOpenidConnectAdditionalKeySet:KeypairsOauthOpenidConnectAdditionalKeySet';

    /**
     * Returns true if the given object is an instance of KeypairsOauthOpenidConnectAdditionalKeySet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeypairsOauthOpenidConnectAdditionalKeySet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeypairsOauthOpenidConnectAdditionalKeySet.__pulumiType;
    }

    /**
     * A description of the key set.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A list of virtual issuers that will use the current key set. Once assigned to a key set, the same virtual issuer cannot
     * be assigned to another key set instance.
     */
    public readonly issuers!: pulumi.Output<outputs.KeypairsOauthOpenidConnectAdditionalKeySetIssuer[]>;
    /**
     * The key set name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The unique ID for the key set. It can be any combination of `[a-zA-Z0-9._-]`. This property is system-assigned if not
     * specified.
     */
    public readonly setId!: pulumi.Output<string>;
    /**
     * Setting for a OAuth/OpenID Connect signing key set while using multiple virtual issuers.
     */
    public readonly signingKeys!: pulumi.Output<outputs.KeypairsOauthOpenidConnectAdditionalKeySetSigningKeys>;

    /**
     * Create a KeypairsOauthOpenidConnectAdditionalKeySet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeypairsOauthOpenidConnectAdditionalKeySetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeypairsOauthOpenidConnectAdditionalKeySetArgs | KeypairsOauthOpenidConnectAdditionalKeySetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeypairsOauthOpenidConnectAdditionalKeySetState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["issuers"] = state ? state.issuers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["setId"] = state ? state.setId : undefined;
            resourceInputs["signingKeys"] = state ? state.signingKeys : undefined;
        } else {
            const args = argsOrState as KeypairsOauthOpenidConnectAdditionalKeySetArgs | undefined;
            if ((!args || args.issuers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuers'");
            }
            if ((!args || args.signingKeys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'signingKeys'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["issuers"] = args ? args.issuers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["setId"] = args ? args.setId : undefined;
            resourceInputs["signingKeys"] = args ? args.signingKeys : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeypairsOauthOpenidConnectAdditionalKeySet.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeypairsOauthOpenidConnectAdditionalKeySet resources.
 */
export interface KeypairsOauthOpenidConnectAdditionalKeySetState {
    /**
     * A description of the key set.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of virtual issuers that will use the current key set. Once assigned to a key set, the same virtual issuer cannot
     * be assigned to another key set instance.
     */
    issuers?: pulumi.Input<pulumi.Input<inputs.KeypairsOauthOpenidConnectAdditionalKeySetIssuer>[]>;
    /**
     * The key set name.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique ID for the key set. It can be any combination of `[a-zA-Z0-9._-]`. This property is system-assigned if not
     * specified.
     */
    setId?: pulumi.Input<string>;
    /**
     * Setting for a OAuth/OpenID Connect signing key set while using multiple virtual issuers.
     */
    signingKeys?: pulumi.Input<inputs.KeypairsOauthOpenidConnectAdditionalKeySetSigningKeys>;
}

/**
 * The set of arguments for constructing a KeypairsOauthOpenidConnectAdditionalKeySet resource.
 */
export interface KeypairsOauthOpenidConnectAdditionalKeySetArgs {
    /**
     * A description of the key set.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of virtual issuers that will use the current key set. Once assigned to a key set, the same virtual issuer cannot
     * be assigned to another key set instance.
     */
    issuers: pulumi.Input<pulumi.Input<inputs.KeypairsOauthOpenidConnectAdditionalKeySetIssuer>[]>;
    /**
     * The key set name.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique ID for the key set. It can be any combination of `[a-zA-Z0-9._-]`. This property is system-assigned if not
     * specified.
     */
    setId?: pulumi.Input<string>;
    /**
     * Setting for a OAuth/OpenID Connect signing key set while using multiple virtual issuers.
     */
    signingKeys: pulumi.Input<inputs.KeypairsOauthOpenidConnectAdditionalKeySetSigningKeys>;
}
