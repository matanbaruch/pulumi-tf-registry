// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KerberosRealm extends pulumi.CustomResource {
    /**
     * Get an existing KerberosRealm resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KerberosRealmState, opts?: pulumi.CustomResourceOptions): KerberosRealm {
        return new KerberosRealm(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/kerberosRealm:KerberosRealm';

    /**
     * Returns true if the given object is an instance of KerberosRealm.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KerberosRealm {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KerberosRealm.__pulumiType;
    }

    /**
     * Controls how PingFederate connects to the Active Directory/Kerberos Realm. Options are `DIRECT` and `LDAP_GATEWAY`. The
     * default is `DIRECT`.
     */
    public readonly connectionType!: pulumi.Output<string>;
    /**
     * The Domain/Realm password. Required when 'connection_type' is `DIRECT`, otherwise should not be specified.
     */
    public readonly kerberosPassword!: pulumi.Output<string | undefined>;
    /**
     * The Domain/Realm name used for display in UI screens.
     */
    public readonly kerberosRealmName!: pulumi.Output<string>;
    /**
     * The Domain/Realm username. Required when 'connection_type' is `DIRECT`, otherwise should not be specified.
     */
    public readonly kerberosUsername!: pulumi.Output<string | undefined>;
    /**
     * The Domain Controller/Key Distribution Center Host Action Names. Only applicable when 'connection_type' is `DIRECT`.
     */
    public readonly keyDistributionCenters!: pulumi.Output<string[]>;
    /**
     * The LDAP gateway used by PingFederate to communicate with the Active Directory. Required when `connection_type` is
     * `LDAP_GATEWAY`.
     */
    public readonly ldapGatewayDataStoreRef!: pulumi.Output<outputs.KerberosRealmLdapGatewayDataStoreRef | undefined>;
    /**
     * The persistent, unique ID for the Kerberos Realm. It can be any combination of `[a-zA-Z0-9._-]`.
     */
    public readonly realmId!: pulumi.Output<string>;
    /**
     * Determines whether the previous encryption keys are retained when the password is updated. Retaining the previous keys
     * allows existing Kerberos tickets to continue to be validated. The default is `false`. Only applicable when
     * 'connection_type' is `DIRECT`.
     */
    public readonly retainPreviousKeysOnPasswordChange!: pulumi.Output<boolean>;
    /**
     * Controls whether the KDC hostnames and the realm name are concatenated in the auto-generated `krb5.conf` file. Only
     * applicable when 'connection_type' is `DIRECT`.
     */
    public readonly suppressDomainNameConcatenation!: pulumi.Output<boolean>;

    /**
     * Create a KerberosRealm resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KerberosRealmArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KerberosRealmArgs | KerberosRealmState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KerberosRealmState | undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["kerberosPassword"] = state ? state.kerberosPassword : undefined;
            resourceInputs["kerberosRealmName"] = state ? state.kerberosRealmName : undefined;
            resourceInputs["kerberosUsername"] = state ? state.kerberosUsername : undefined;
            resourceInputs["keyDistributionCenters"] = state ? state.keyDistributionCenters : undefined;
            resourceInputs["ldapGatewayDataStoreRef"] = state ? state.ldapGatewayDataStoreRef : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["retainPreviousKeysOnPasswordChange"] = state ? state.retainPreviousKeysOnPasswordChange : undefined;
            resourceInputs["suppressDomainNameConcatenation"] = state ? state.suppressDomainNameConcatenation : undefined;
        } else {
            const args = argsOrState as KerberosRealmArgs | undefined;
            if ((!args || args.kerberosRealmName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kerberosRealmName'");
            }
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["kerberosPassword"] = args?.kerberosPassword ? pulumi.secret(args.kerberosPassword) : undefined;
            resourceInputs["kerberosRealmName"] = args ? args.kerberosRealmName : undefined;
            resourceInputs["kerberosUsername"] = args ? args.kerberosUsername : undefined;
            resourceInputs["keyDistributionCenters"] = args ? args.keyDistributionCenters : undefined;
            resourceInputs["ldapGatewayDataStoreRef"] = args ? args.ldapGatewayDataStoreRef : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["retainPreviousKeysOnPasswordChange"] = args ? args.retainPreviousKeysOnPasswordChange : undefined;
            resourceInputs["suppressDomainNameConcatenation"] = args ? args.suppressDomainNameConcatenation : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kerberosPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KerberosRealm.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KerberosRealm resources.
 */
export interface KerberosRealmState {
    /**
     * Controls how PingFederate connects to the Active Directory/Kerberos Realm. Options are `DIRECT` and `LDAP_GATEWAY`. The
     * default is `DIRECT`.
     */
    connectionType?: pulumi.Input<string>;
    /**
     * The Domain/Realm password. Required when 'connection_type' is `DIRECT`, otherwise should not be specified.
     */
    kerberosPassword?: pulumi.Input<string>;
    /**
     * The Domain/Realm name used for display in UI screens.
     */
    kerberosRealmName?: pulumi.Input<string>;
    /**
     * The Domain/Realm username. Required when 'connection_type' is `DIRECT`, otherwise should not be specified.
     */
    kerberosUsername?: pulumi.Input<string>;
    /**
     * The Domain Controller/Key Distribution Center Host Action Names. Only applicable when 'connection_type' is `DIRECT`.
     */
    keyDistributionCenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The LDAP gateway used by PingFederate to communicate with the Active Directory. Required when `connection_type` is
     * `LDAP_GATEWAY`.
     */
    ldapGatewayDataStoreRef?: pulumi.Input<inputs.KerberosRealmLdapGatewayDataStoreRef>;
    /**
     * The persistent, unique ID for the Kerberos Realm. It can be any combination of `[a-zA-Z0-9._-]`.
     */
    realmId?: pulumi.Input<string>;
    /**
     * Determines whether the previous encryption keys are retained when the password is updated. Retaining the previous keys
     * allows existing Kerberos tickets to continue to be validated. The default is `false`. Only applicable when
     * 'connection_type' is `DIRECT`.
     */
    retainPreviousKeysOnPasswordChange?: pulumi.Input<boolean>;
    /**
     * Controls whether the KDC hostnames and the realm name are concatenated in the auto-generated `krb5.conf` file. Only
     * applicable when 'connection_type' is `DIRECT`.
     */
    suppressDomainNameConcatenation?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a KerberosRealm resource.
 */
export interface KerberosRealmArgs {
    /**
     * Controls how PingFederate connects to the Active Directory/Kerberos Realm. Options are `DIRECT` and `LDAP_GATEWAY`. The
     * default is `DIRECT`.
     */
    connectionType?: pulumi.Input<string>;
    /**
     * The Domain/Realm password. Required when 'connection_type' is `DIRECT`, otherwise should not be specified.
     */
    kerberosPassword?: pulumi.Input<string>;
    /**
     * The Domain/Realm name used for display in UI screens.
     */
    kerberosRealmName: pulumi.Input<string>;
    /**
     * The Domain/Realm username. Required when 'connection_type' is `DIRECT`, otherwise should not be specified.
     */
    kerberosUsername?: pulumi.Input<string>;
    /**
     * The Domain Controller/Key Distribution Center Host Action Names. Only applicable when 'connection_type' is `DIRECT`.
     */
    keyDistributionCenters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The LDAP gateway used by PingFederate to communicate with the Active Directory. Required when `connection_type` is
     * `LDAP_GATEWAY`.
     */
    ldapGatewayDataStoreRef?: pulumi.Input<inputs.KerberosRealmLdapGatewayDataStoreRef>;
    /**
     * The persistent, unique ID for the Kerberos Realm. It can be any combination of `[a-zA-Z0-9._-]`.
     */
    realmId?: pulumi.Input<string>;
    /**
     * Determines whether the previous encryption keys are retained when the password is updated. Retaining the previous keys
     * allows existing Kerberos tickets to continue to be validated. The default is `false`. Only applicable when
     * 'connection_type' is `DIRECT`.
     */
    retainPreviousKeysOnPasswordChange?: pulumi.Input<boolean>;
    /**
     * Controls whether the KDC hostnames and the realm name are concatenated in the auto-generated `krb5.conf` file. Only
     * applicable when 'connection_type' is `DIRECT`.
     */
    suppressDomainNameConcatenation?: pulumi.Input<boolean>;
}
