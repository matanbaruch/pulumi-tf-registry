// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AdministrativeAccountArgs, AdministrativeAccountState } from "./administrativeAccount";
export type AdministrativeAccount = import("./administrativeAccount").AdministrativeAccount;
export const AdministrativeAccount: typeof import("./administrativeAccount").AdministrativeAccount = null as any;
utilities.lazyLoad(exports, ["AdministrativeAccount"], () => require("./administrativeAccount"));

export { AuthenticationApiApplicationArgs, AuthenticationApiApplicationState } from "./authenticationApiApplication";
export type AuthenticationApiApplication = import("./authenticationApiApplication").AuthenticationApiApplication;
export const AuthenticationApiApplication: typeof import("./authenticationApiApplication").AuthenticationApiApplication = null as any;
utilities.lazyLoad(exports, ["AuthenticationApiApplication"], () => require("./authenticationApiApplication"));

export { AuthenticationApiSettingsArgs, AuthenticationApiSettingsState } from "./authenticationApiSettings";
export type AuthenticationApiSettings = import("./authenticationApiSettings").AuthenticationApiSettings;
export const AuthenticationApiSettings: typeof import("./authenticationApiSettings").AuthenticationApiSettings = null as any;
utilities.lazyLoad(exports, ["AuthenticationApiSettings"], () => require("./authenticationApiSettings"));

export { AuthenticationPoliciesArgs, AuthenticationPoliciesState } from "./authenticationPolicies";
export type AuthenticationPolicies = import("./authenticationPolicies").AuthenticationPolicies;
export const AuthenticationPolicies: typeof import("./authenticationPolicies").AuthenticationPolicies = null as any;
utilities.lazyLoad(exports, ["AuthenticationPolicies"], () => require("./authenticationPolicies"));

export { AuthenticationPoliciesFragmentArgs, AuthenticationPoliciesFragmentState } from "./authenticationPoliciesFragment";
export type AuthenticationPoliciesFragment = import("./authenticationPoliciesFragment").AuthenticationPoliciesFragment;
export const AuthenticationPoliciesFragment: typeof import("./authenticationPoliciesFragment").AuthenticationPoliciesFragment = null as any;
utilities.lazyLoad(exports, ["AuthenticationPoliciesFragment"], () => require("./authenticationPoliciesFragment"));

export { AuthenticationPoliciesSettingsArgs, AuthenticationPoliciesSettingsState } from "./authenticationPoliciesSettings";
export type AuthenticationPoliciesSettings = import("./authenticationPoliciesSettings").AuthenticationPoliciesSettings;
export const AuthenticationPoliciesSettings: typeof import("./authenticationPoliciesSettings").AuthenticationPoliciesSettings = null as any;
utilities.lazyLoad(exports, ["AuthenticationPoliciesSettings"], () => require("./authenticationPoliciesSettings"));

export { AuthenticationPolicyContractArgs, AuthenticationPolicyContractState } from "./authenticationPolicyContract";
export type AuthenticationPolicyContract = import("./authenticationPolicyContract").AuthenticationPolicyContract;
export const AuthenticationPolicyContract: typeof import("./authenticationPolicyContract").AuthenticationPolicyContract = null as any;
utilities.lazyLoad(exports, ["AuthenticationPolicyContract"], () => require("./authenticationPolicyContract"));

export { AuthenticationSelectorArgs, AuthenticationSelectorState } from "./authenticationSelector";
export type AuthenticationSelector = import("./authenticationSelector").AuthenticationSelector;
export const AuthenticationSelector: typeof import("./authenticationSelector").AuthenticationSelector = null as any;
utilities.lazyLoad(exports, ["AuthenticationSelector"], () => require("./authenticationSelector"));

export { CaptchaProviderArgs, CaptchaProviderState } from "./captchaProvider";
export type CaptchaProvider = import("./captchaProvider").CaptchaProvider;
export const CaptchaProvider: typeof import("./captchaProvider").CaptchaProvider = null as any;
utilities.lazyLoad(exports, ["CaptchaProvider"], () => require("./captchaProvider"));

export { CaptchaProviderSettingsArgs, CaptchaProviderSettingsState } from "./captchaProviderSettings";
export type CaptchaProviderSettings = import("./captchaProviderSettings").CaptchaProviderSettings;
export const CaptchaProviderSettings: typeof import("./captchaProviderSettings").CaptchaProviderSettings = null as any;
utilities.lazyLoad(exports, ["CaptchaProviderSettings"], () => require("./captchaProviderSettings"));

export { CertificateCaArgs, CertificateCaState } from "./certificateCa";
export type CertificateCa = import("./certificateCa").CertificateCa;
export const CertificateCa: typeof import("./certificateCa").CertificateCa = null as any;
utilities.lazyLoad(exports, ["CertificateCa"], () => require("./certificateCa"));

export { CertificatesRevocationSettingsArgs, CertificatesRevocationSettingsState } from "./certificatesRevocationSettings";
export type CertificatesRevocationSettings = import("./certificatesRevocationSettings").CertificatesRevocationSettings;
export const CertificatesRevocationSettings: typeof import("./certificatesRevocationSettings").CertificatesRevocationSettings = null as any;
utilities.lazyLoad(exports, ["CertificatesRevocationSettings"], () => require("./certificatesRevocationSettings"));

export { ClusterSettingsArgs, ClusterSettingsState } from "./clusterSettings";
export type ClusterSettings = import("./clusterSettings").ClusterSettings;
export const ClusterSettings: typeof import("./clusterSettings").ClusterSettings = null as any;
utilities.lazyLoad(exports, ["ClusterSettings"], () => require("./clusterSettings"));

export { ConnectionMetadataExportArgs, ConnectionMetadataExportState } from "./connectionMetadataExport";
export type ConnectionMetadataExport = import("./connectionMetadataExport").ConnectionMetadataExport;
export const ConnectionMetadataExport: typeof import("./connectionMetadataExport").ConnectionMetadataExport = null as any;
utilities.lazyLoad(exports, ["ConnectionMetadataExport"], () => require("./connectionMetadataExport"));

export { DataStoreArgs, DataStoreState } from "./dataStore";
export type DataStore = import("./dataStore").DataStore;
export const DataStore: typeof import("./dataStore").DataStore = null as any;
utilities.lazyLoad(exports, ["DataStore"], () => require("./dataStore"));

export { DefaultUrlsArgs, DefaultUrlsState } from "./defaultUrls";
export type DefaultUrls = import("./defaultUrls").DefaultUrls;
export const DefaultUrls: typeof import("./defaultUrls").DefaultUrls = null as any;
utilities.lazyLoad(exports, ["DefaultUrls"], () => require("./defaultUrls"));

export { ExtendedPropertiesArgs, ExtendedPropertiesState } from "./extendedProperties";
export type ExtendedProperties = import("./extendedProperties").ExtendedProperties;
export const ExtendedProperties: typeof import("./extendedProperties").ExtendedProperties = null as any;
utilities.lazyLoad(exports, ["ExtendedProperties"], () => require("./extendedProperties"));

export { GetAdministrativeAccountArgs, GetAdministrativeAccountResult, GetAdministrativeAccountOutputArgs } from "./getAdministrativeAccount";
export const getAdministrativeAccount: typeof import("./getAdministrativeAccount").getAdministrativeAccount = null as any;
export const getAdministrativeAccountOutput: typeof import("./getAdministrativeAccount").getAdministrativeAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAdministrativeAccount","getAdministrativeAccountOutput"], () => require("./getAdministrativeAccount"));

export { GetAuthenticationApiApplicationArgs, GetAuthenticationApiApplicationResult, GetAuthenticationApiApplicationOutputArgs } from "./getAuthenticationApiApplication";
export const getAuthenticationApiApplication: typeof import("./getAuthenticationApiApplication").getAuthenticationApiApplication = null as any;
export const getAuthenticationApiApplicationOutput: typeof import("./getAuthenticationApiApplication").getAuthenticationApiApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationApiApplication","getAuthenticationApiApplicationOutput"], () => require("./getAuthenticationApiApplication"));

export { GetAuthenticationApiSettingsResult } from "./getAuthenticationApiSettings";
export const getAuthenticationApiSettings: typeof import("./getAuthenticationApiSettings").getAuthenticationApiSettings = null as any;
export const getAuthenticationApiSettingsOutput: typeof import("./getAuthenticationApiSettings").getAuthenticationApiSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationApiSettings","getAuthenticationApiSettingsOutput"], () => require("./getAuthenticationApiSettings"));

export { GetAuthenticationPoliciesFragmentArgs, GetAuthenticationPoliciesFragmentResult, GetAuthenticationPoliciesFragmentOutputArgs } from "./getAuthenticationPoliciesFragment";
export const getAuthenticationPoliciesFragment: typeof import("./getAuthenticationPoliciesFragment").getAuthenticationPoliciesFragment = null as any;
export const getAuthenticationPoliciesFragmentOutput: typeof import("./getAuthenticationPoliciesFragment").getAuthenticationPoliciesFragmentOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationPoliciesFragment","getAuthenticationPoliciesFragmentOutput"], () => require("./getAuthenticationPoliciesFragment"));

export { GetAuthenticationPoliciesSettingsResult } from "./getAuthenticationPoliciesSettings";
export const getAuthenticationPoliciesSettings: typeof import("./getAuthenticationPoliciesSettings").getAuthenticationPoliciesSettings = null as any;
export const getAuthenticationPoliciesSettingsOutput: typeof import("./getAuthenticationPoliciesSettings").getAuthenticationPoliciesSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationPoliciesSettings","getAuthenticationPoliciesSettingsOutput"], () => require("./getAuthenticationPoliciesSettings"));

export { GetAuthenticationPolicyContractArgs, GetAuthenticationPolicyContractResult, GetAuthenticationPolicyContractOutputArgs } from "./getAuthenticationPolicyContract";
export const getAuthenticationPolicyContract: typeof import("./getAuthenticationPolicyContract").getAuthenticationPolicyContract = null as any;
export const getAuthenticationPolicyContractOutput: typeof import("./getAuthenticationPolicyContract").getAuthenticationPolicyContractOutput = null as any;
utilities.lazyLoad(exports, ["getAuthenticationPolicyContract","getAuthenticationPolicyContractOutput"], () => require("./getAuthenticationPolicyContract"));

export { GetCertificateCaArgs, GetCertificateCaResult, GetCertificateCaOutputArgs } from "./getCertificateCa";
export const getCertificateCa: typeof import("./getCertificateCa").getCertificateCa = null as any;
export const getCertificateCaOutput: typeof import("./getCertificateCa").getCertificateCaOutput = null as any;
utilities.lazyLoad(exports, ["getCertificateCa","getCertificateCaOutput"], () => require("./getCertificateCa"));

export { GetClusterStatusResult } from "./getClusterStatus";
export const getClusterStatus: typeof import("./getClusterStatus").getClusterStatus = null as any;
export const getClusterStatusOutput: typeof import("./getClusterStatus").getClusterStatusOutput = null as any;
utilities.lazyLoad(exports, ["getClusterStatus","getClusterStatusOutput"], () => require("./getClusterStatus"));

export { GetDataStoreArgs, GetDataStoreResult, GetDataStoreOutputArgs } from "./getDataStore";
export const getDataStore: typeof import("./getDataStore").getDataStore = null as any;
export const getDataStoreOutput: typeof import("./getDataStore").getDataStoreOutput = null as any;
utilities.lazyLoad(exports, ["getDataStore","getDataStoreOutput"], () => require("./getDataStore"));

export { GetIdpAdapterArgs, GetIdpAdapterResult, GetIdpAdapterOutputArgs } from "./getIdpAdapter";
export const getIdpAdapter: typeof import("./getIdpAdapter").getIdpAdapter = null as any;
export const getIdpAdapterOutput: typeof import("./getIdpAdapter").getIdpAdapterOutput = null as any;
utilities.lazyLoad(exports, ["getIdpAdapter","getIdpAdapterOutput"], () => require("./getIdpAdapter"));

export { GetIdpDefaultUrlsResult } from "./getIdpDefaultUrls";
export const getIdpDefaultUrls: typeof import("./getIdpDefaultUrls").getIdpDefaultUrls = null as any;
export const getIdpDefaultUrlsOutput: typeof import("./getIdpDefaultUrls").getIdpDefaultUrlsOutput = null as any;
utilities.lazyLoad(exports, ["getIdpDefaultUrls","getIdpDefaultUrlsOutput"], () => require("./getIdpDefaultUrls"));

export { GetIdpSpConnectionArgs, GetIdpSpConnectionResult, GetIdpSpConnectionOutputArgs } from "./getIdpSpConnection";
export const getIdpSpConnection: typeof import("./getIdpSpConnection").getIdpSpConnection = null as any;
export const getIdpSpConnectionOutput: typeof import("./getIdpSpConnection").getIdpSpConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getIdpSpConnection","getIdpSpConnectionOutput"], () => require("./getIdpSpConnection"));

export { GetKeyPairSigningImportArgs, GetKeyPairSigningImportResult, GetKeyPairSigningImportOutputArgs } from "./getKeyPairSigningImport";
export const getKeyPairSigningImport: typeof import("./getKeyPairSigningImport").getKeyPairSigningImport = null as any;
export const getKeyPairSigningImportOutput: typeof import("./getKeyPairSigningImport").getKeyPairSigningImportOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairSigningImport","getKeyPairSigningImportOutput"], () => require("./getKeyPairSigningImport"));

export { GetKeyPairSslServerImportArgs, GetKeyPairSslServerImportResult, GetKeyPairSslServerImportOutputArgs } from "./getKeyPairSslServerImport";
export const getKeyPairSslServerImport: typeof import("./getKeyPairSslServerImport").getKeyPairSslServerImport = null as any;
export const getKeyPairSslServerImportOutput: typeof import("./getKeyPairSslServerImport").getKeyPairSslServerImportOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairSslServerImport","getKeyPairSslServerImportOutput"], () => require("./getKeyPairSslServerImport"));

export { GetLicenseResult } from "./getLicense";
export const getLicense: typeof import("./getLicense").getLicense = null as any;
export const getLicenseOutput: typeof import("./getLicense").getLicenseOutput = null as any;
utilities.lazyLoad(exports, ["getLicense","getLicenseOutput"], () => require("./getLicense"));

export { GetLicenseAgreementResult } from "./getLicenseAgreement";
export const getLicenseAgreement: typeof import("./getLicenseAgreement").getLicenseAgreement = null as any;
export const getLicenseAgreementOutput: typeof import("./getLicenseAgreement").getLicenseAgreementOutput = null as any;
utilities.lazyLoad(exports, ["getLicenseAgreement","getLicenseAgreementOutput"], () => require("./getLicenseAgreement"));

export { GetLocalIdentityIdentityProfileArgs, GetLocalIdentityIdentityProfileResult, GetLocalIdentityIdentityProfileOutputArgs } from "./getLocalIdentityIdentityProfile";
export const getLocalIdentityIdentityProfile: typeof import("./getLocalIdentityIdentityProfile").getLocalIdentityIdentityProfile = null as any;
export const getLocalIdentityIdentityProfileOutput: typeof import("./getLocalIdentityIdentityProfile").getLocalIdentityIdentityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLocalIdentityIdentityProfile","getLocalIdentityIdentityProfileOutput"], () => require("./getLocalIdentityIdentityProfile"));

export { GetLocalIdentityProfileArgs, GetLocalIdentityProfileResult, GetLocalIdentityProfileOutputArgs } from "./getLocalIdentityProfile";
export const getLocalIdentityProfile: typeof import("./getLocalIdentityProfile").getLocalIdentityProfile = null as any;
export const getLocalIdentityProfileOutput: typeof import("./getLocalIdentityProfile").getLocalIdentityProfileOutput = null as any;
utilities.lazyLoad(exports, ["getLocalIdentityProfile","getLocalIdentityProfileOutput"], () => require("./getLocalIdentityProfile"));

export { GetOauthAccessTokenManagerArgs, GetOauthAccessTokenManagerResult, GetOauthAccessTokenManagerOutputArgs } from "./getOauthAccessTokenManager";
export const getOauthAccessTokenManager: typeof import("./getOauthAccessTokenManager").getOauthAccessTokenManager = null as any;
export const getOauthAccessTokenManagerOutput: typeof import("./getOauthAccessTokenManager").getOauthAccessTokenManagerOutput = null as any;
utilities.lazyLoad(exports, ["getOauthAccessTokenManager","getOauthAccessTokenManagerOutput"], () => require("./getOauthAccessTokenManager"));

export { GetOauthAuthServerSettingsResult } from "./getOauthAuthServerSettings";
export const getOauthAuthServerSettings: typeof import("./getOauthAuthServerSettings").getOauthAuthServerSettings = null as any;
export const getOauthAuthServerSettingsOutput: typeof import("./getOauthAuthServerSettings").getOauthAuthServerSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getOauthAuthServerSettings","getOauthAuthServerSettingsOutput"], () => require("./getOauthAuthServerSettings"));

export { GetOauthAuthServerSettingsScopesCommonScopeArgs, GetOauthAuthServerSettingsScopesCommonScopeResult, GetOauthAuthServerSettingsScopesCommonScopeOutputArgs } from "./getOauthAuthServerSettingsScopesCommonScope";
export const getOauthAuthServerSettingsScopesCommonScope: typeof import("./getOauthAuthServerSettingsScopesCommonScope").getOauthAuthServerSettingsScopesCommonScope = null as any;
export const getOauthAuthServerSettingsScopesCommonScopeOutput: typeof import("./getOauthAuthServerSettingsScopesCommonScope").getOauthAuthServerSettingsScopesCommonScopeOutput = null as any;
utilities.lazyLoad(exports, ["getOauthAuthServerSettingsScopesCommonScope","getOauthAuthServerSettingsScopesCommonScopeOutput"], () => require("./getOauthAuthServerSettingsScopesCommonScope"));

export { GetOauthAuthServerSettingsScopesExclusiveScopeArgs, GetOauthAuthServerSettingsScopesExclusiveScopeResult, GetOauthAuthServerSettingsScopesExclusiveScopeOutputArgs } from "./getOauthAuthServerSettingsScopesExclusiveScope";
export const getOauthAuthServerSettingsScopesExclusiveScope: typeof import("./getOauthAuthServerSettingsScopesExclusiveScope").getOauthAuthServerSettingsScopesExclusiveScope = null as any;
export const getOauthAuthServerSettingsScopesExclusiveScopeOutput: typeof import("./getOauthAuthServerSettingsScopesExclusiveScope").getOauthAuthServerSettingsScopesExclusiveScopeOutput = null as any;
utilities.lazyLoad(exports, ["getOauthAuthServerSettingsScopesExclusiveScope","getOauthAuthServerSettingsScopesExclusiveScopeOutput"], () => require("./getOauthAuthServerSettingsScopesExclusiveScope"));

export { GetOauthClientArgs, GetOauthClientResult, GetOauthClientOutputArgs } from "./getOauthClient";
export const getOauthClient: typeof import("./getOauthClient").getOauthClient = null as any;
export const getOauthClientOutput: typeof import("./getOauthClient").getOauthClientOutput = null as any;
utilities.lazyLoad(exports, ["getOauthClient","getOauthClientOutput"], () => require("./getOauthClient"));

export { GetOauthIssuerArgs, GetOauthIssuerResult, GetOauthIssuerOutputArgs } from "./getOauthIssuer";
export const getOauthIssuer: typeof import("./getOauthIssuer").getOauthIssuer = null as any;
export const getOauthIssuerOutput: typeof import("./getOauthIssuer").getOauthIssuerOutput = null as any;
utilities.lazyLoad(exports, ["getOauthIssuer","getOauthIssuerOutput"], () => require("./getOauthIssuer"));

export { GetOauthOpenIdConnectPolicyArgs, GetOauthOpenIdConnectPolicyResult, GetOauthOpenIdConnectPolicyOutputArgs } from "./getOauthOpenIdConnectPolicy";
export const getOauthOpenIdConnectPolicy: typeof import("./getOauthOpenIdConnectPolicy").getOauthOpenIdConnectPolicy = null as any;
export const getOauthOpenIdConnectPolicyOutput: typeof import("./getOauthOpenIdConnectPolicy").getOauthOpenIdConnectPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOauthOpenIdConnectPolicy","getOauthOpenIdConnectPolicyOutput"], () => require("./getOauthOpenIdConnectPolicy"));

export { GetOauthServerSettingsResult } from "./getOauthServerSettings";
export const getOauthServerSettings: typeof import("./getOauthServerSettings").getOauthServerSettings = null as any;
export const getOauthServerSettingsOutput: typeof import("./getOauthServerSettings").getOauthServerSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getOauthServerSettings","getOauthServerSettingsOutput"], () => require("./getOauthServerSettings"));

export { GetOauthTokenExchangeTokenGeneratorMappingArgs, GetOauthTokenExchangeTokenGeneratorMappingResult, GetOauthTokenExchangeTokenGeneratorMappingOutputArgs } from "./getOauthTokenExchangeTokenGeneratorMapping";
export const getOauthTokenExchangeTokenGeneratorMapping: typeof import("./getOauthTokenExchangeTokenGeneratorMapping").getOauthTokenExchangeTokenGeneratorMapping = null as any;
export const getOauthTokenExchangeTokenGeneratorMappingOutput: typeof import("./getOauthTokenExchangeTokenGeneratorMapping").getOauthTokenExchangeTokenGeneratorMappingOutput = null as any;
utilities.lazyLoad(exports, ["getOauthTokenExchangeTokenGeneratorMapping","getOauthTokenExchangeTokenGeneratorMappingOutput"], () => require("./getOauthTokenExchangeTokenGeneratorMapping"));

export { GetOpenidConnectPolicyArgs, GetOpenidConnectPolicyResult, GetOpenidConnectPolicyOutputArgs } from "./getOpenidConnectPolicy";
export const getOpenidConnectPolicy: typeof import("./getOpenidConnectPolicy").getOpenidConnectPolicy = null as any;
export const getOpenidConnectPolicyOutput: typeof import("./getOpenidConnectPolicy").getOpenidConnectPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getOpenidConnectPolicy","getOpenidConnectPolicyOutput"], () => require("./getOpenidConnectPolicy"));

export { GetPasswordCredentialValidatorArgs, GetPasswordCredentialValidatorResult, GetPasswordCredentialValidatorOutputArgs } from "./getPasswordCredentialValidator";
export const getPasswordCredentialValidator: typeof import("./getPasswordCredentialValidator").getPasswordCredentialValidator = null as any;
export const getPasswordCredentialValidatorOutput: typeof import("./getPasswordCredentialValidator").getPasswordCredentialValidatorOutput = null as any;
utilities.lazyLoad(exports, ["getPasswordCredentialValidator","getPasswordCredentialValidatorOutput"], () => require("./getPasswordCredentialValidator"));

export { GetProtocolMetadataLifetimeSettingsResult } from "./getProtocolMetadataLifetimeSettings";
export const getProtocolMetadataLifetimeSettings: typeof import("./getProtocolMetadataLifetimeSettings").getProtocolMetadataLifetimeSettings = null as any;
export const getProtocolMetadataLifetimeSettingsOutput: typeof import("./getProtocolMetadataLifetimeSettings").getProtocolMetadataLifetimeSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolMetadataLifetimeSettings","getProtocolMetadataLifetimeSettingsOutput"], () => require("./getProtocolMetadataLifetimeSettings"));

export { GetRedirectValidationResult } from "./getRedirectValidation";
export const getRedirectValidation: typeof import("./getRedirectValidation").getRedirectValidation = null as any;
export const getRedirectValidationOutput: typeof import("./getRedirectValidation").getRedirectValidationOutput = null as any;
utilities.lazyLoad(exports, ["getRedirectValidation","getRedirectValidationOutput"], () => require("./getRedirectValidation"));

export { GetServerSettingsResult } from "./getServerSettings";
export const getServerSettings: typeof import("./getServerSettings").getServerSettings = null as any;
export const getServerSettingsOutput: typeof import("./getServerSettings").getServerSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getServerSettings","getServerSettingsOutput"], () => require("./getServerSettings"));

export { GetServerSettingsGeneralResult } from "./getServerSettingsGeneral";
export const getServerSettingsGeneral: typeof import("./getServerSettingsGeneral").getServerSettingsGeneral = null as any;
export const getServerSettingsGeneralOutput: typeof import("./getServerSettingsGeneral").getServerSettingsGeneralOutput = null as any;
utilities.lazyLoad(exports, ["getServerSettingsGeneral","getServerSettingsGeneralOutput"], () => require("./getServerSettingsGeneral"));

export { GetServerSettingsGeneralSettingsResult } from "./getServerSettingsGeneralSettings";
export const getServerSettingsGeneralSettings: typeof import("./getServerSettingsGeneralSettings").getServerSettingsGeneralSettings = null as any;
export const getServerSettingsGeneralSettingsOutput: typeof import("./getServerSettingsGeneralSettings").getServerSettingsGeneralSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getServerSettingsGeneralSettings","getServerSettingsGeneralSettingsOutput"], () => require("./getServerSettingsGeneralSettings"));

export { GetServerSettingsLogSettingsResult } from "./getServerSettingsLogSettings";
export const getServerSettingsLogSettings: typeof import("./getServerSettingsLogSettings").getServerSettingsLogSettings = null as any;
export const getServerSettingsLogSettingsOutput: typeof import("./getServerSettingsLogSettings").getServerSettingsLogSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getServerSettingsLogSettings","getServerSettingsLogSettingsOutput"], () => require("./getServerSettingsLogSettings"));

export { GetServerSettingsLoggingResult } from "./getServerSettingsLogging";
export const getServerSettingsLogging: typeof import("./getServerSettingsLogging").getServerSettingsLogging = null as any;
export const getServerSettingsLoggingOutput: typeof import("./getServerSettingsLogging").getServerSettingsLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getServerSettingsLogging","getServerSettingsLoggingOutput"], () => require("./getServerSettingsLogging"));

export { GetServerSettingsSystemKeysResult } from "./getServerSettingsSystemKeys";
export const getServerSettingsSystemKeys: typeof import("./getServerSettingsSystemKeys").getServerSettingsSystemKeys = null as any;
export const getServerSettingsSystemKeysOutput: typeof import("./getServerSettingsSystemKeys").getServerSettingsSystemKeysOutput = null as any;
utilities.lazyLoad(exports, ["getServerSettingsSystemKeys","getServerSettingsSystemKeysOutput"], () => require("./getServerSettingsSystemKeys"));

export { GetSessionApplicationPolicyResult } from "./getSessionApplicationPolicy";
export const getSessionApplicationPolicy: typeof import("./getSessionApplicationPolicy").getSessionApplicationPolicy = null as any;
export const getSessionApplicationPolicyOutput: typeof import("./getSessionApplicationPolicy").getSessionApplicationPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSessionApplicationPolicy","getSessionApplicationPolicyOutput"], () => require("./getSessionApplicationPolicy"));

export { GetSessionApplicationSessionPolicyResult } from "./getSessionApplicationSessionPolicy";
export const getSessionApplicationSessionPolicy: typeof import("./getSessionApplicationSessionPolicy").getSessionApplicationSessionPolicy = null as any;
export const getSessionApplicationSessionPolicyOutput: typeof import("./getSessionApplicationSessionPolicy").getSessionApplicationSessionPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSessionApplicationSessionPolicy","getSessionApplicationSessionPolicyOutput"], () => require("./getSessionApplicationSessionPolicy"));

export { GetSessionAuthenticationPoliciesGlobalResult } from "./getSessionAuthenticationPoliciesGlobal";
export const getSessionAuthenticationPoliciesGlobal: typeof import("./getSessionAuthenticationPoliciesGlobal").getSessionAuthenticationPoliciesGlobal = null as any;
export const getSessionAuthenticationPoliciesGlobalOutput: typeof import("./getSessionAuthenticationPoliciesGlobal").getSessionAuthenticationPoliciesGlobalOutput = null as any;
utilities.lazyLoad(exports, ["getSessionAuthenticationPoliciesGlobal","getSessionAuthenticationPoliciesGlobalOutput"], () => require("./getSessionAuthenticationPoliciesGlobal"));

export { GetSessionAuthenticationSessionPoliciesGlobalResult } from "./getSessionAuthenticationSessionPoliciesGlobal";
export const getSessionAuthenticationSessionPoliciesGlobal: typeof import("./getSessionAuthenticationSessionPoliciesGlobal").getSessionAuthenticationSessionPoliciesGlobal = null as any;
export const getSessionAuthenticationSessionPoliciesGlobalOutput: typeof import("./getSessionAuthenticationSessionPoliciesGlobal").getSessionAuthenticationSessionPoliciesGlobalOutput = null as any;
utilities.lazyLoad(exports, ["getSessionAuthenticationSessionPoliciesGlobal","getSessionAuthenticationSessionPoliciesGlobalOutput"], () => require("./getSessionAuthenticationSessionPoliciesGlobal"));

export { GetSessionSettingsResult } from "./getSessionSettings";
export const getSessionSettings: typeof import("./getSessionSettings").getSessionSettings = null as any;
export const getSessionSettingsOutput: typeof import("./getSessionSettings").getSessionSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getSessionSettings","getSessionSettingsOutput"], () => require("./getSessionSettings"));

export { GetSpAuthenticationPolicyContractMappingArgs, GetSpAuthenticationPolicyContractMappingResult, GetSpAuthenticationPolicyContractMappingOutputArgs } from "./getSpAuthenticationPolicyContractMapping";
export const getSpAuthenticationPolicyContractMapping: typeof import("./getSpAuthenticationPolicyContractMapping").getSpAuthenticationPolicyContractMapping = null as any;
export const getSpAuthenticationPolicyContractMappingOutput: typeof import("./getSpAuthenticationPolicyContractMapping").getSpAuthenticationPolicyContractMappingOutput = null as any;
utilities.lazyLoad(exports, ["getSpAuthenticationPolicyContractMapping","getSpAuthenticationPolicyContractMappingOutput"], () => require("./getSpAuthenticationPolicyContractMapping"));

export { GetTokenProcessorToTokenGeneratorMappingArgs, GetTokenProcessorToTokenGeneratorMappingResult, GetTokenProcessorToTokenGeneratorMappingOutputArgs } from "./getTokenProcessorToTokenGeneratorMapping";
export const getTokenProcessorToTokenGeneratorMapping: typeof import("./getTokenProcessorToTokenGeneratorMapping").getTokenProcessorToTokenGeneratorMapping = null as any;
export const getTokenProcessorToTokenGeneratorMappingOutput: typeof import("./getTokenProcessorToTokenGeneratorMapping").getTokenProcessorToTokenGeneratorMappingOutput = null as any;
utilities.lazyLoad(exports, ["getTokenProcessorToTokenGeneratorMapping","getTokenProcessorToTokenGeneratorMappingOutput"], () => require("./getTokenProcessorToTokenGeneratorMapping"));

export { GetVirtualHostNamesResult } from "./getVirtualHostNames";
export const getVirtualHostNames: typeof import("./getVirtualHostNames").getVirtualHostNames = null as any;
export const getVirtualHostNamesOutput: typeof import("./getVirtualHostNames").getVirtualHostNamesOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualHostNames","getVirtualHostNamesOutput"], () => require("./getVirtualHostNames"));

export { IdpAdapterArgs, IdpAdapterState } from "./idpAdapter";
export type IdpAdapter = import("./idpAdapter").IdpAdapter;
export const IdpAdapter: typeof import("./idpAdapter").IdpAdapter = null as any;
utilities.lazyLoad(exports, ["IdpAdapter"], () => require("./idpAdapter"));

export { IdpDefaultUrlsArgs, IdpDefaultUrlsState } from "./idpDefaultUrls";
export type IdpDefaultUrls = import("./idpDefaultUrls").IdpDefaultUrls;
export const IdpDefaultUrls: typeof import("./idpDefaultUrls").IdpDefaultUrls = null as any;
utilities.lazyLoad(exports, ["IdpDefaultUrls"], () => require("./idpDefaultUrls"));

export { IdpSpConnectionArgs, IdpSpConnectionState } from "./idpSpConnection";
export type IdpSpConnection = import("./idpSpConnection").IdpSpConnection;
export const IdpSpConnection: typeof import("./idpSpConnection").IdpSpConnection = null as any;
utilities.lazyLoad(exports, ["IdpSpConnection"], () => require("./idpSpConnection"));

export { IdpStsRequestParametersContractArgs, IdpStsRequestParametersContractState } from "./idpStsRequestParametersContract";
export type IdpStsRequestParametersContract = import("./idpStsRequestParametersContract").IdpStsRequestParametersContract;
export const IdpStsRequestParametersContract: typeof import("./idpStsRequestParametersContract").IdpStsRequestParametersContract = null as any;
utilities.lazyLoad(exports, ["IdpStsRequestParametersContract"], () => require("./idpStsRequestParametersContract"));

export { IncomingProxySettingsArgs, IncomingProxySettingsState } from "./incomingProxySettings";
export type IncomingProxySettings = import("./incomingProxySettings").IncomingProxySettings;
export const IncomingProxySettings: typeof import("./incomingProxySettings").IncomingProxySettings = null as any;
utilities.lazyLoad(exports, ["IncomingProxySettings"], () => require("./incomingProxySettings"));

export { KerberosRealmArgs, KerberosRealmState } from "./kerberosRealm";
export type KerberosRealm = import("./kerberosRealm").KerberosRealm;
export const KerberosRealm: typeof import("./kerberosRealm").KerberosRealm = null as any;
utilities.lazyLoad(exports, ["KerberosRealm"], () => require("./kerberosRealm"));

export { KerberosRealmSettingsArgs, KerberosRealmSettingsState } from "./kerberosRealmSettings";
export type KerberosRealmSettings = import("./kerberosRealmSettings").KerberosRealmSettings;
export const KerberosRealmSettings: typeof import("./kerberosRealmSettings").KerberosRealmSettings = null as any;
utilities.lazyLoad(exports, ["KerberosRealmSettings"], () => require("./kerberosRealmSettings"));

export { KeyPairSigningImportArgs, KeyPairSigningImportState } from "./keyPairSigningImport";
export type KeyPairSigningImport = import("./keyPairSigningImport").KeyPairSigningImport;
export const KeyPairSigningImport: typeof import("./keyPairSigningImport").KeyPairSigningImport = null as any;
utilities.lazyLoad(exports, ["KeyPairSigningImport"], () => require("./keyPairSigningImport"));

export { KeyPairSslServerImportArgs, KeyPairSslServerImportState } from "./keyPairSslServerImport";
export type KeyPairSslServerImport = import("./keyPairSslServerImport").KeyPairSslServerImport;
export const KeyPairSslServerImport: typeof import("./keyPairSslServerImport").KeyPairSslServerImport = null as any;
utilities.lazyLoad(exports, ["KeyPairSslServerImport"], () => require("./keyPairSslServerImport"));

export { KeypairsOauthOpenidConnectAdditionalKeySetArgs, KeypairsOauthOpenidConnectAdditionalKeySetState } from "./keypairsOauthOpenidConnectAdditionalKeySet";
export type KeypairsOauthOpenidConnectAdditionalKeySet = import("./keypairsOauthOpenidConnectAdditionalKeySet").KeypairsOauthOpenidConnectAdditionalKeySet;
export const KeypairsOauthOpenidConnectAdditionalKeySet: typeof import("./keypairsOauthOpenidConnectAdditionalKeySet").KeypairsOauthOpenidConnectAdditionalKeySet = null as any;
utilities.lazyLoad(exports, ["KeypairsOauthOpenidConnectAdditionalKeySet"], () => require("./keypairsOauthOpenidConnectAdditionalKeySet"));

export { KeypairsSslServerSettingsArgs, KeypairsSslServerSettingsState } from "./keypairsSslServerSettings";
export type KeypairsSslServerSettings = import("./keypairsSslServerSettings").KeypairsSslServerSettings;
export const KeypairsSslServerSettings: typeof import("./keypairsSslServerSettings").KeypairsSslServerSettings = null as any;
utilities.lazyLoad(exports, ["KeypairsSslServerSettings"], () => require("./keypairsSslServerSettings"));

export { LicenseArgs, LicenseState } from "./license";
export type License = import("./license").License;
export const License: typeof import("./license").License = null as any;
utilities.lazyLoad(exports, ["License"], () => require("./license"));

export { LicenseAgreementArgs, LicenseAgreementState } from "./licenseAgreement";
export type LicenseAgreement = import("./licenseAgreement").LicenseAgreement;
export const LicenseAgreement: typeof import("./licenseAgreement").LicenseAgreement = null as any;
utilities.lazyLoad(exports, ["LicenseAgreement"], () => require("./licenseAgreement"));

export { LocalIdentityIdentityProfileArgs, LocalIdentityIdentityProfileState } from "./localIdentityIdentityProfile";
export type LocalIdentityIdentityProfile = import("./localIdentityIdentityProfile").LocalIdentityIdentityProfile;
export const LocalIdentityIdentityProfile: typeof import("./localIdentityIdentityProfile").LocalIdentityIdentityProfile = null as any;
utilities.lazyLoad(exports, ["LocalIdentityIdentityProfile"], () => require("./localIdentityIdentityProfile"));

export { LocalIdentityProfileArgs, LocalIdentityProfileState } from "./localIdentityProfile";
export type LocalIdentityProfile = import("./localIdentityProfile").LocalIdentityProfile;
export const LocalIdentityProfile: typeof import("./localIdentityProfile").LocalIdentityProfile = null as any;
utilities.lazyLoad(exports, ["LocalIdentityProfile"], () => require("./localIdentityProfile"));

export { MetadataUrlArgs, MetadataUrlState } from "./metadataUrl";
export type MetadataUrl = import("./metadataUrl").MetadataUrl;
export const MetadataUrl: typeof import("./metadataUrl").MetadataUrl = null as any;
utilities.lazyLoad(exports, ["MetadataUrl"], () => require("./metadataUrl"));

export { NotificationPublisherArgs, NotificationPublisherState } from "./notificationPublisher";
export type NotificationPublisher = import("./notificationPublisher").NotificationPublisher;
export const NotificationPublisher: typeof import("./notificationPublisher").NotificationPublisher = null as any;
utilities.lazyLoad(exports, ["NotificationPublisher"], () => require("./notificationPublisher"));

export { NotificationPublisherSettingsArgs, NotificationPublisherSettingsState } from "./notificationPublisherSettings";
export type NotificationPublisherSettings = import("./notificationPublisherSettings").NotificationPublisherSettings;
export const NotificationPublisherSettings: typeof import("./notificationPublisherSettings").NotificationPublisherSettings = null as any;
utilities.lazyLoad(exports, ["NotificationPublisherSettings"], () => require("./notificationPublisherSettings"));

export { NotificationPublishersSettingsArgs, NotificationPublishersSettingsState } from "./notificationPublishersSettings";
export type NotificationPublishersSettings = import("./notificationPublishersSettings").NotificationPublishersSettings;
export const NotificationPublishersSettings: typeof import("./notificationPublishersSettings").NotificationPublishersSettings = null as any;
utilities.lazyLoad(exports, ["NotificationPublishersSettings"], () => require("./notificationPublishersSettings"));

export { OauthAccessTokenManagerArgs, OauthAccessTokenManagerState } from "./oauthAccessTokenManager";
export type OauthAccessTokenManager = import("./oauthAccessTokenManager").OauthAccessTokenManager;
export const OauthAccessTokenManager: typeof import("./oauthAccessTokenManager").OauthAccessTokenManager = null as any;
utilities.lazyLoad(exports, ["OauthAccessTokenManager"], () => require("./oauthAccessTokenManager"));

export { OauthAccessTokenManagerSettingsArgs, OauthAccessTokenManagerSettingsState } from "./oauthAccessTokenManagerSettings";
export type OauthAccessTokenManagerSettings = import("./oauthAccessTokenManagerSettings").OauthAccessTokenManagerSettings;
export const OauthAccessTokenManagerSettings: typeof import("./oauthAccessTokenManagerSettings").OauthAccessTokenManagerSettings = null as any;
utilities.lazyLoad(exports, ["OauthAccessTokenManagerSettings"], () => require("./oauthAccessTokenManagerSettings"));

export { OauthAccessTokenMappingArgs, OauthAccessTokenMappingState } from "./oauthAccessTokenMapping";
export type OauthAccessTokenMapping = import("./oauthAccessTokenMapping").OauthAccessTokenMapping;
export const OauthAccessTokenMapping: typeof import("./oauthAccessTokenMapping").OauthAccessTokenMapping = null as any;
utilities.lazyLoad(exports, ["OauthAccessTokenMapping"], () => require("./oauthAccessTokenMapping"));

export { OauthAuthServerSettingsArgs, OauthAuthServerSettingsState } from "./oauthAuthServerSettings";
export type OauthAuthServerSettings = import("./oauthAuthServerSettings").OauthAuthServerSettings;
export const OauthAuthServerSettings: typeof import("./oauthAuthServerSettings").OauthAuthServerSettings = null as any;
utilities.lazyLoad(exports, ["OauthAuthServerSettings"], () => require("./oauthAuthServerSettings"));

export { OauthAuthServerSettingsScopesCommonScopeArgs, OauthAuthServerSettingsScopesCommonScopeState } from "./oauthAuthServerSettingsScopesCommonScope";
export type OauthAuthServerSettingsScopesCommonScope = import("./oauthAuthServerSettingsScopesCommonScope").OauthAuthServerSettingsScopesCommonScope;
export const OauthAuthServerSettingsScopesCommonScope: typeof import("./oauthAuthServerSettingsScopesCommonScope").OauthAuthServerSettingsScopesCommonScope = null as any;
utilities.lazyLoad(exports, ["OauthAuthServerSettingsScopesCommonScope"], () => require("./oauthAuthServerSettingsScopesCommonScope"));

export { OauthAuthServerSettingsScopesExclusiveScopeArgs, OauthAuthServerSettingsScopesExclusiveScopeState } from "./oauthAuthServerSettingsScopesExclusiveScope";
export type OauthAuthServerSettingsScopesExclusiveScope = import("./oauthAuthServerSettingsScopesExclusiveScope").OauthAuthServerSettingsScopesExclusiveScope;
export const OauthAuthServerSettingsScopesExclusiveScope: typeof import("./oauthAuthServerSettingsScopesExclusiveScope").OauthAuthServerSettingsScopesExclusiveScope = null as any;
utilities.lazyLoad(exports, ["OauthAuthServerSettingsScopesExclusiveScope"], () => require("./oauthAuthServerSettingsScopesExclusiveScope"));

export { OauthAuthenticationPolicyContractMappingArgs, OauthAuthenticationPolicyContractMappingState } from "./oauthAuthenticationPolicyContractMapping";
export type OauthAuthenticationPolicyContractMapping = import("./oauthAuthenticationPolicyContractMapping").OauthAuthenticationPolicyContractMapping;
export const OauthAuthenticationPolicyContractMapping: typeof import("./oauthAuthenticationPolicyContractMapping").OauthAuthenticationPolicyContractMapping = null as any;
utilities.lazyLoad(exports, ["OauthAuthenticationPolicyContractMapping"], () => require("./oauthAuthenticationPolicyContractMapping"));

export { OauthCibaServerPolicySettingsArgs, OauthCibaServerPolicySettingsState } from "./oauthCibaServerPolicySettings";
export type OauthCibaServerPolicySettings = import("./oauthCibaServerPolicySettings").OauthCibaServerPolicySettings;
export const OauthCibaServerPolicySettings: typeof import("./oauthCibaServerPolicySettings").OauthCibaServerPolicySettings = null as any;
utilities.lazyLoad(exports, ["OauthCibaServerPolicySettings"], () => require("./oauthCibaServerPolicySettings"));

export { OauthClientArgs, OauthClientState } from "./oauthClient";
export type OauthClient = import("./oauthClient").OauthClient;
export const OauthClient: typeof import("./oauthClient").OauthClient = null as any;
utilities.lazyLoad(exports, ["OauthClient"], () => require("./oauthClient"));

export { OauthIdpAdapterMappingArgs, OauthIdpAdapterMappingState } from "./oauthIdpAdapterMapping";
export type OauthIdpAdapterMapping = import("./oauthIdpAdapterMapping").OauthIdpAdapterMapping;
export const OauthIdpAdapterMapping: typeof import("./oauthIdpAdapterMapping").OauthIdpAdapterMapping = null as any;
utilities.lazyLoad(exports, ["OauthIdpAdapterMapping"], () => require("./oauthIdpAdapterMapping"));

export { OauthIssuerArgs, OauthIssuerState } from "./oauthIssuer";
export type OauthIssuer = import("./oauthIssuer").OauthIssuer;
export const OauthIssuer: typeof import("./oauthIssuer").OauthIssuer = null as any;
utilities.lazyLoad(exports, ["OauthIssuer"], () => require("./oauthIssuer"));

export { OauthOpenIdConnectPolicyArgs, OauthOpenIdConnectPolicyState } from "./oauthOpenIdConnectPolicy";
export type OauthOpenIdConnectPolicy = import("./oauthOpenIdConnectPolicy").OauthOpenIdConnectPolicy;
export const OauthOpenIdConnectPolicy: typeof import("./oauthOpenIdConnectPolicy").OauthOpenIdConnectPolicy = null as any;
utilities.lazyLoad(exports, ["OauthOpenIdConnectPolicy"], () => require("./oauthOpenIdConnectPolicy"));

export { OauthServerSettingsArgs, OauthServerSettingsState } from "./oauthServerSettings";
export type OauthServerSettings = import("./oauthServerSettings").OauthServerSettings;
export const OauthServerSettings: typeof import("./oauthServerSettings").OauthServerSettings = null as any;
utilities.lazyLoad(exports, ["OauthServerSettings"], () => require("./oauthServerSettings"));

export { OauthTokenExchangeGeneratorSettingsArgs, OauthTokenExchangeGeneratorSettingsState } from "./oauthTokenExchangeGeneratorSettings";
export type OauthTokenExchangeGeneratorSettings = import("./oauthTokenExchangeGeneratorSettings").OauthTokenExchangeGeneratorSettings;
export const OauthTokenExchangeGeneratorSettings: typeof import("./oauthTokenExchangeGeneratorSettings").OauthTokenExchangeGeneratorSettings = null as any;
utilities.lazyLoad(exports, ["OauthTokenExchangeGeneratorSettings"], () => require("./oauthTokenExchangeGeneratorSettings"));

export { OauthTokenExchangeTokenGeneratorMappingArgs, OauthTokenExchangeTokenGeneratorMappingState } from "./oauthTokenExchangeTokenGeneratorMapping";
export type OauthTokenExchangeTokenGeneratorMapping = import("./oauthTokenExchangeTokenGeneratorMapping").OauthTokenExchangeTokenGeneratorMapping;
export const OauthTokenExchangeTokenGeneratorMapping: typeof import("./oauthTokenExchangeTokenGeneratorMapping").OauthTokenExchangeTokenGeneratorMapping = null as any;
utilities.lazyLoad(exports, ["OauthTokenExchangeTokenGeneratorMapping"], () => require("./oauthTokenExchangeTokenGeneratorMapping"));

export { OpenIdConnectSettingsArgs, OpenIdConnectSettingsState } from "./openIdConnectSettings";
export type OpenIdConnectSettings = import("./openIdConnectSettings").OpenIdConnectSettings;
export const OpenIdConnectSettings: typeof import("./openIdConnectSettings").OpenIdConnectSettings = null as any;
utilities.lazyLoad(exports, ["OpenIdConnectSettings"], () => require("./openIdConnectSettings"));

export { OpenidConnectPolicyArgs, OpenidConnectPolicyState } from "./openidConnectPolicy";
export type OpenidConnectPolicy = import("./openidConnectPolicy").OpenidConnectPolicy;
export const OpenidConnectPolicy: typeof import("./openidConnectPolicy").OpenidConnectPolicy = null as any;
utilities.lazyLoad(exports, ["OpenidConnectPolicy"], () => require("./openidConnectPolicy"));

export { OpenidConnectSettingsArgs, OpenidConnectSettingsState } from "./openidConnectSettings";
export type OpenidConnectSettings = import("./openidConnectSettings").OpenidConnectSettings;
export const OpenidConnectSettings: typeof import("./openidConnectSettings").OpenidConnectSettings = null as any;
utilities.lazyLoad(exports, ["OpenidConnectSettings"], () => require("./openidConnectSettings"));

export { PasswordCredentialValidatorArgs, PasswordCredentialValidatorState } from "./passwordCredentialValidator";
export type PasswordCredentialValidator = import("./passwordCredentialValidator").PasswordCredentialValidator;
export const PasswordCredentialValidator: typeof import("./passwordCredentialValidator").PasswordCredentialValidator = null as any;
utilities.lazyLoad(exports, ["PasswordCredentialValidator"], () => require("./passwordCredentialValidator"));

export { PingOneConnectionArgs, PingOneConnectionState } from "./pingOneConnection";
export type PingOneConnection = import("./pingOneConnection").PingOneConnection;
export const PingOneConnection: typeof import("./pingOneConnection").PingOneConnection = null as any;
utilities.lazyLoad(exports, ["PingOneConnection"], () => require("./pingOneConnection"));

export { PingoneConnectionArgs, PingoneConnectionState } from "./pingoneConnection";
export type PingoneConnection = import("./pingoneConnection").PingoneConnection;
export const PingoneConnection: typeof import("./pingoneConnection").PingoneConnection = null as any;
utilities.lazyLoad(exports, ["PingoneConnection"], () => require("./pingoneConnection"));

export { ProtocolMetadataLifetimeSettingsArgs, ProtocolMetadataLifetimeSettingsState } from "./protocolMetadataLifetimeSettings";
export type ProtocolMetadataLifetimeSettings = import("./protocolMetadataLifetimeSettings").ProtocolMetadataLifetimeSettings;
export const ProtocolMetadataLifetimeSettings: typeof import("./protocolMetadataLifetimeSettings").ProtocolMetadataLifetimeSettings = null as any;
utilities.lazyLoad(exports, ["ProtocolMetadataLifetimeSettings"], () => require("./protocolMetadataLifetimeSettings"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RedirectValidationArgs, RedirectValidationState } from "./redirectValidation";
export type RedirectValidation = import("./redirectValidation").RedirectValidation;
export const RedirectValidation: typeof import("./redirectValidation").RedirectValidation = null as any;
utilities.lazyLoad(exports, ["RedirectValidation"], () => require("./redirectValidation"));

export { SecretManagerArgs, SecretManagerState } from "./secretManager";
export type SecretManager = import("./secretManager").SecretManager;
export const SecretManager: typeof import("./secretManager").SecretManager = null as any;
utilities.lazyLoad(exports, ["SecretManager"], () => require("./secretManager"));

export { ServerSettingsArgs, ServerSettingsState } from "./serverSettings";
export type ServerSettings = import("./serverSettings").ServerSettings;
export const ServerSettings: typeof import("./serverSettings").ServerSettings = null as any;
utilities.lazyLoad(exports, ["ServerSettings"], () => require("./serverSettings"));

export { ServerSettingsGeneralArgs, ServerSettingsGeneralState } from "./serverSettingsGeneral";
export type ServerSettingsGeneral = import("./serverSettingsGeneral").ServerSettingsGeneral;
export const ServerSettingsGeneral: typeof import("./serverSettingsGeneral").ServerSettingsGeneral = null as any;
utilities.lazyLoad(exports, ["ServerSettingsGeneral"], () => require("./serverSettingsGeneral"));

export { ServerSettingsGeneralSettingsArgs, ServerSettingsGeneralSettingsState } from "./serverSettingsGeneralSettings";
export type ServerSettingsGeneralSettings = import("./serverSettingsGeneralSettings").ServerSettingsGeneralSettings;
export const ServerSettingsGeneralSettings: typeof import("./serverSettingsGeneralSettings").ServerSettingsGeneralSettings = null as any;
utilities.lazyLoad(exports, ["ServerSettingsGeneralSettings"], () => require("./serverSettingsGeneralSettings"));

export { ServerSettingsLogSettingsArgs, ServerSettingsLogSettingsState } from "./serverSettingsLogSettings";
export type ServerSettingsLogSettings = import("./serverSettingsLogSettings").ServerSettingsLogSettings;
export const ServerSettingsLogSettings: typeof import("./serverSettingsLogSettings").ServerSettingsLogSettings = null as any;
utilities.lazyLoad(exports, ["ServerSettingsLogSettings"], () => require("./serverSettingsLogSettings"));

export { ServerSettingsLoggingArgs, ServerSettingsLoggingState } from "./serverSettingsLogging";
export type ServerSettingsLogging = import("./serverSettingsLogging").ServerSettingsLogging;
export const ServerSettingsLogging: typeof import("./serverSettingsLogging").ServerSettingsLogging = null as any;
utilities.lazyLoad(exports, ["ServerSettingsLogging"], () => require("./serverSettingsLogging"));

export { ServerSettingsSystemKeysArgs, ServerSettingsSystemKeysState } from "./serverSettingsSystemKeys";
export type ServerSettingsSystemKeys = import("./serverSettingsSystemKeys").ServerSettingsSystemKeys;
export const ServerSettingsSystemKeys: typeof import("./serverSettingsSystemKeys").ServerSettingsSystemKeys = null as any;
utilities.lazyLoad(exports, ["ServerSettingsSystemKeys"], () => require("./serverSettingsSystemKeys"));

export { SessionApplicationPolicyArgs, SessionApplicationPolicyState } from "./sessionApplicationPolicy";
export type SessionApplicationPolicy = import("./sessionApplicationPolicy").SessionApplicationPolicy;
export const SessionApplicationPolicy: typeof import("./sessionApplicationPolicy").SessionApplicationPolicy = null as any;
utilities.lazyLoad(exports, ["SessionApplicationPolicy"], () => require("./sessionApplicationPolicy"));

export { SessionApplicationSessionPolicyArgs, SessionApplicationSessionPolicyState } from "./sessionApplicationSessionPolicy";
export type SessionApplicationSessionPolicy = import("./sessionApplicationSessionPolicy").SessionApplicationSessionPolicy;
export const SessionApplicationSessionPolicy: typeof import("./sessionApplicationSessionPolicy").SessionApplicationSessionPolicy = null as any;
utilities.lazyLoad(exports, ["SessionApplicationSessionPolicy"], () => require("./sessionApplicationSessionPolicy"));

export { SessionAuthenticationPoliciesGlobalArgs, SessionAuthenticationPoliciesGlobalState } from "./sessionAuthenticationPoliciesGlobal";
export type SessionAuthenticationPoliciesGlobal = import("./sessionAuthenticationPoliciesGlobal").SessionAuthenticationPoliciesGlobal;
export const SessionAuthenticationPoliciesGlobal: typeof import("./sessionAuthenticationPoliciesGlobal").SessionAuthenticationPoliciesGlobal = null as any;
utilities.lazyLoad(exports, ["SessionAuthenticationPoliciesGlobal"], () => require("./sessionAuthenticationPoliciesGlobal"));

export { SessionAuthenticationPolicyArgs, SessionAuthenticationPolicyState } from "./sessionAuthenticationPolicy";
export type SessionAuthenticationPolicy = import("./sessionAuthenticationPolicy").SessionAuthenticationPolicy;
export const SessionAuthenticationPolicy: typeof import("./sessionAuthenticationPolicy").SessionAuthenticationPolicy = null as any;
utilities.lazyLoad(exports, ["SessionAuthenticationPolicy"], () => require("./sessionAuthenticationPolicy"));

export { SessionAuthenticationSessionPoliciesGlobalArgs, SessionAuthenticationSessionPoliciesGlobalState } from "./sessionAuthenticationSessionPoliciesGlobal";
export type SessionAuthenticationSessionPoliciesGlobal = import("./sessionAuthenticationSessionPoliciesGlobal").SessionAuthenticationSessionPoliciesGlobal;
export const SessionAuthenticationSessionPoliciesGlobal: typeof import("./sessionAuthenticationSessionPoliciesGlobal").SessionAuthenticationSessionPoliciesGlobal = null as any;
utilities.lazyLoad(exports, ["SessionAuthenticationSessionPoliciesGlobal"], () => require("./sessionAuthenticationSessionPoliciesGlobal"));

export { SessionSettingsArgs, SessionSettingsState } from "./sessionSettings";
export type SessionSettings = import("./sessionSettings").SessionSettings;
export const SessionSettings: typeof import("./sessionSettings").SessionSettings = null as any;
utilities.lazyLoad(exports, ["SessionSettings"], () => require("./sessionSettings"));

export { SpAuthenticationPolicyContractMappingArgs, SpAuthenticationPolicyContractMappingState } from "./spAuthenticationPolicyContractMapping";
export type SpAuthenticationPolicyContractMapping = import("./spAuthenticationPolicyContractMapping").SpAuthenticationPolicyContractMapping;
export const SpAuthenticationPolicyContractMapping: typeof import("./spAuthenticationPolicyContractMapping").SpAuthenticationPolicyContractMapping = null as any;
utilities.lazyLoad(exports, ["SpAuthenticationPolicyContractMapping"], () => require("./spAuthenticationPolicyContractMapping"));

export { SpTargetUrlMappingsArgs, SpTargetUrlMappingsState } from "./spTargetUrlMappings";
export type SpTargetUrlMappings = import("./spTargetUrlMappings").SpTargetUrlMappings;
export const SpTargetUrlMappings: typeof import("./spTargetUrlMappings").SpTargetUrlMappings = null as any;
utilities.lazyLoad(exports, ["SpTargetUrlMappings"], () => require("./spTargetUrlMappings"));

export { TokenProcessorToTokenGeneratorMappingArgs, TokenProcessorToTokenGeneratorMappingState } from "./tokenProcessorToTokenGeneratorMapping";
export type TokenProcessorToTokenGeneratorMapping = import("./tokenProcessorToTokenGeneratorMapping").TokenProcessorToTokenGeneratorMapping;
export const TokenProcessorToTokenGeneratorMapping: typeof import("./tokenProcessorToTokenGeneratorMapping").TokenProcessorToTokenGeneratorMapping = null as any;
utilities.lazyLoad(exports, ["TokenProcessorToTokenGeneratorMapping"], () => require("./tokenProcessorToTokenGeneratorMapping"));

export { VirtualHostNamesArgs, VirtualHostNamesState } from "./virtualHostNames";
export type VirtualHostNames = import("./virtualHostNames").VirtualHostNames;
export const VirtualHostNames: typeof import("./virtualHostNames").VirtualHostNames = null as any;
utilities.lazyLoad(exports, ["VirtualHostNames"], () => require("./virtualHostNames"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pingfederate:index/administrativeAccount:AdministrativeAccount":
                return new AdministrativeAccount(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationApiApplication:AuthenticationApiApplication":
                return new AuthenticationApiApplication(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationApiSettings:AuthenticationApiSettings":
                return new AuthenticationApiSettings(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPolicies:AuthenticationPolicies":
                return new AuthenticationPolicies(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPoliciesFragment:AuthenticationPoliciesFragment":
                return new AuthenticationPoliciesFragment(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPoliciesSettings:AuthenticationPoliciesSettings":
                return new AuthenticationPoliciesSettings(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPolicyContract:AuthenticationPolicyContract":
                return new AuthenticationPolicyContract(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationSelector:AuthenticationSelector":
                return new AuthenticationSelector(name, <any>undefined, { urn })
            case "pingfederate:index/captchaProvider:CaptchaProvider":
                return new CaptchaProvider(name, <any>undefined, { urn })
            case "pingfederate:index/captchaProviderSettings:CaptchaProviderSettings":
                return new CaptchaProviderSettings(name, <any>undefined, { urn })
            case "pingfederate:index/certificateCa:CertificateCa":
                return new CertificateCa(name, <any>undefined, { urn })
            case "pingfederate:index/certificatesRevocationSettings:CertificatesRevocationSettings":
                return new CertificatesRevocationSettings(name, <any>undefined, { urn })
            case "pingfederate:index/clusterSettings:ClusterSettings":
                return new ClusterSettings(name, <any>undefined, { urn })
            case "pingfederate:index/connectionMetadataExport:ConnectionMetadataExport":
                return new ConnectionMetadataExport(name, <any>undefined, { urn })
            case "pingfederate:index/dataStore:DataStore":
                return new DataStore(name, <any>undefined, { urn })
            case "pingfederate:index/defaultUrls:DefaultUrls":
                return new DefaultUrls(name, <any>undefined, { urn })
            case "pingfederate:index/extendedProperties:ExtendedProperties":
                return new ExtendedProperties(name, <any>undefined, { urn })
            case "pingfederate:index/idpAdapter:IdpAdapter":
                return new IdpAdapter(name, <any>undefined, { urn })
            case "pingfederate:index/idpDefaultUrls:IdpDefaultUrls":
                return new IdpDefaultUrls(name, <any>undefined, { urn })
            case "pingfederate:index/idpSpConnection:IdpSpConnection":
                return new IdpSpConnection(name, <any>undefined, { urn })
            case "pingfederate:index/idpStsRequestParametersContract:IdpStsRequestParametersContract":
                return new IdpStsRequestParametersContract(name, <any>undefined, { urn })
            case "pingfederate:index/incomingProxySettings:IncomingProxySettings":
                return new IncomingProxySettings(name, <any>undefined, { urn })
            case "pingfederate:index/kerberosRealm:KerberosRealm":
                return new KerberosRealm(name, <any>undefined, { urn })
            case "pingfederate:index/kerberosRealmSettings:KerberosRealmSettings":
                return new KerberosRealmSettings(name, <any>undefined, { urn })
            case "pingfederate:index/keyPairSigningImport:KeyPairSigningImport":
                return new KeyPairSigningImport(name, <any>undefined, { urn })
            case "pingfederate:index/keyPairSslServerImport:KeyPairSslServerImport":
                return new KeyPairSslServerImport(name, <any>undefined, { urn })
            case "pingfederate:index/keypairsOauthOpenidConnectAdditionalKeySet:KeypairsOauthOpenidConnectAdditionalKeySet":
                return new KeypairsOauthOpenidConnectAdditionalKeySet(name, <any>undefined, { urn })
            case "pingfederate:index/keypairsSslServerSettings:KeypairsSslServerSettings":
                return new KeypairsSslServerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/license:License":
                return new License(name, <any>undefined, { urn })
            case "pingfederate:index/licenseAgreement:LicenseAgreement":
                return new LicenseAgreement(name, <any>undefined, { urn })
            case "pingfederate:index/localIdentityIdentityProfile:LocalIdentityIdentityProfile":
                return new LocalIdentityIdentityProfile(name, <any>undefined, { urn })
            case "pingfederate:index/localIdentityProfile:LocalIdentityProfile":
                return new LocalIdentityProfile(name, <any>undefined, { urn })
            case "pingfederate:index/metadataUrl:MetadataUrl":
                return new MetadataUrl(name, <any>undefined, { urn })
            case "pingfederate:index/notificationPublisher:NotificationPublisher":
                return new NotificationPublisher(name, <any>undefined, { urn })
            case "pingfederate:index/notificationPublisherSettings:NotificationPublisherSettings":
                return new NotificationPublisherSettings(name, <any>undefined, { urn })
            case "pingfederate:index/notificationPublishersSettings:NotificationPublishersSettings":
                return new NotificationPublishersSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAccessTokenManager:OauthAccessTokenManager":
                return new OauthAccessTokenManager(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAccessTokenManagerSettings:OauthAccessTokenManagerSettings":
                return new OauthAccessTokenManagerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAccessTokenMapping:OauthAccessTokenMapping":
                return new OauthAccessTokenMapping(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAuthServerSettings:OauthAuthServerSettings":
                return new OauthAuthServerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAuthServerSettingsScopesCommonScope:OauthAuthServerSettingsScopesCommonScope":
                return new OauthAuthServerSettingsScopesCommonScope(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAuthServerSettingsScopesExclusiveScope:OauthAuthServerSettingsScopesExclusiveScope":
                return new OauthAuthServerSettingsScopesExclusiveScope(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAuthenticationPolicyContractMapping:OauthAuthenticationPolicyContractMapping":
                return new OauthAuthenticationPolicyContractMapping(name, <any>undefined, { urn })
            case "pingfederate:index/oauthCibaServerPolicySettings:OauthCibaServerPolicySettings":
                return new OauthCibaServerPolicySettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthClient:OauthClient":
                return new OauthClient(name, <any>undefined, { urn })
            case "pingfederate:index/oauthIdpAdapterMapping:OauthIdpAdapterMapping":
                return new OauthIdpAdapterMapping(name, <any>undefined, { urn })
            case "pingfederate:index/oauthIssuer:OauthIssuer":
                return new OauthIssuer(name, <any>undefined, { urn })
            case "pingfederate:index/oauthOpenIdConnectPolicy:OauthOpenIdConnectPolicy":
                return new OauthOpenIdConnectPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/oauthServerSettings:OauthServerSettings":
                return new OauthServerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthTokenExchangeGeneratorSettings:OauthTokenExchangeGeneratorSettings":
                return new OauthTokenExchangeGeneratorSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthTokenExchangeTokenGeneratorMapping:OauthTokenExchangeTokenGeneratorMapping":
                return new OauthTokenExchangeTokenGeneratorMapping(name, <any>undefined, { urn })
            case "pingfederate:index/openIdConnectSettings:OpenIdConnectSettings":
                return new OpenIdConnectSettings(name, <any>undefined, { urn })
            case "pingfederate:index/openidConnectPolicy:OpenidConnectPolicy":
                return new OpenidConnectPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/openidConnectSettings:OpenidConnectSettings":
                return new OpenidConnectSettings(name, <any>undefined, { urn })
            case "pingfederate:index/passwordCredentialValidator:PasswordCredentialValidator":
                return new PasswordCredentialValidator(name, <any>undefined, { urn })
            case "pingfederate:index/pingOneConnection:PingOneConnection":
                return new PingOneConnection(name, <any>undefined, { urn })
            case "pingfederate:index/pingoneConnection:PingoneConnection":
                return new PingoneConnection(name, <any>undefined, { urn })
            case "pingfederate:index/protocolMetadataLifetimeSettings:ProtocolMetadataLifetimeSettings":
                return new ProtocolMetadataLifetimeSettings(name, <any>undefined, { urn })
            case "pingfederate:index/redirectValidation:RedirectValidation":
                return new RedirectValidation(name, <any>undefined, { urn })
            case "pingfederate:index/secretManager:SecretManager":
                return new SecretManager(name, <any>undefined, { urn })
            case "pingfederate:index/serverSettings:ServerSettings":
                return new ServerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/serverSettingsGeneral:ServerSettingsGeneral":
                return new ServerSettingsGeneral(name, <any>undefined, { urn })
            case "pingfederate:index/serverSettingsGeneralSettings:ServerSettingsGeneralSettings":
                return new ServerSettingsGeneralSettings(name, <any>undefined, { urn })
            case "pingfederate:index/serverSettingsLogSettings:ServerSettingsLogSettings":
                return new ServerSettingsLogSettings(name, <any>undefined, { urn })
            case "pingfederate:index/serverSettingsLogging:ServerSettingsLogging":
                return new ServerSettingsLogging(name, <any>undefined, { urn })
            case "pingfederate:index/serverSettingsSystemKeys:ServerSettingsSystemKeys":
                return new ServerSettingsSystemKeys(name, <any>undefined, { urn })
            case "pingfederate:index/sessionApplicationPolicy:SessionApplicationPolicy":
                return new SessionApplicationPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/sessionApplicationSessionPolicy:SessionApplicationSessionPolicy":
                return new SessionApplicationSessionPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/sessionAuthenticationPoliciesGlobal:SessionAuthenticationPoliciesGlobal":
                return new SessionAuthenticationPoliciesGlobal(name, <any>undefined, { urn })
            case "pingfederate:index/sessionAuthenticationPolicy:SessionAuthenticationPolicy":
                return new SessionAuthenticationPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/sessionAuthenticationSessionPoliciesGlobal:SessionAuthenticationSessionPoliciesGlobal":
                return new SessionAuthenticationSessionPoliciesGlobal(name, <any>undefined, { urn })
            case "pingfederate:index/sessionSettings:SessionSettings":
                return new SessionSettings(name, <any>undefined, { urn })
            case "pingfederate:index/spAuthenticationPolicyContractMapping:SpAuthenticationPolicyContractMapping":
                return new SpAuthenticationPolicyContractMapping(name, <any>undefined, { urn })
            case "pingfederate:index/spTargetUrlMappings:SpTargetUrlMappings":
                return new SpTargetUrlMappings(name, <any>undefined, { urn })
            case "pingfederate:index/tokenProcessorToTokenGeneratorMapping:TokenProcessorToTokenGeneratorMapping":
                return new TokenProcessorToTokenGeneratorMapping(name, <any>undefined, { urn })
            case "pingfederate:index/virtualHostNames:VirtualHostNames":
                return new VirtualHostNames(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pingfederate", "index/administrativeAccount", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationApiApplication", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationApiSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPolicies", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPoliciesFragment", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPoliciesSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPolicyContract", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationSelector", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/captchaProvider", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/captchaProviderSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/certificateCa", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/certificatesRevocationSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/clusterSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/connectionMetadataExport", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/dataStore", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/defaultUrls", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/extendedProperties", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/idpAdapter", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/idpDefaultUrls", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/idpSpConnection", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/idpStsRequestParametersContract", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/incomingProxySettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/kerberosRealm", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/kerberosRealmSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keyPairSigningImport", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keyPairSslServerImport", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairsOauthOpenidConnectAdditionalKeySet", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairsSslServerSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/license", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/licenseAgreement", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/localIdentityIdentityProfile", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/localIdentityProfile", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/metadataUrl", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/notificationPublisher", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/notificationPublisherSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/notificationPublishersSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAccessTokenManager", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAccessTokenManagerSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAccessTokenMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAuthServerSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAuthServerSettingsScopesCommonScope", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAuthServerSettingsScopesExclusiveScope", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAuthenticationPolicyContractMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthCibaServerPolicySettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthClient", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthIdpAdapterMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthIssuer", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthOpenIdConnectPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthServerSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthTokenExchangeGeneratorSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthTokenExchangeTokenGeneratorMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/openIdConnectSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/openidConnectPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/openidConnectSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/passwordCredentialValidator", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/pingOneConnection", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/pingoneConnection", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/protocolMetadataLifetimeSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/redirectValidation", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/secretManager", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/serverSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/serverSettingsGeneral", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/serverSettingsGeneralSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/serverSettingsLogSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/serverSettingsLogging", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/serverSettingsSystemKeys", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/sessionApplicationPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/sessionApplicationSessionPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/sessionAuthenticationPoliciesGlobal", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/sessionAuthenticationPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/sessionAuthenticationSessionPoliciesGlobal", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/sessionSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/spAuthenticationPolicyContractMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/spTargetUrlMappings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/tokenProcessorToTokenGeneratorMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/virtualHostNames", _module)
pulumi.runtime.registerResourcePackage("pingfederate", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pingfederate") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
