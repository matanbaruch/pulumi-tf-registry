// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationSessionPolicyArgs, ApplicationSessionPolicyState } from "./applicationSessionPolicy";
export type ApplicationSessionPolicy = import("./applicationSessionPolicy").ApplicationSessionPolicy;
export const ApplicationSessionPolicy: typeof import("./applicationSessionPolicy").ApplicationSessionPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationSessionPolicy"], () => require("./applicationSessionPolicy"));

export { AuthenticationApiApplicationArgs, AuthenticationApiApplicationState } from "./authenticationApiApplication";
export type AuthenticationApiApplication = import("./authenticationApiApplication").AuthenticationApiApplication;
export const AuthenticationApiApplication: typeof import("./authenticationApiApplication").AuthenticationApiApplication = null as any;
utilities.lazyLoad(exports, ["AuthenticationApiApplication"], () => require("./authenticationApiApplication"));

export { AuthenticationApiSettingsArgs, AuthenticationApiSettingsState } from "./authenticationApiSettings";
export type AuthenticationApiSettings = import("./authenticationApiSettings").AuthenticationApiSettings;
export const AuthenticationApiSettings: typeof import("./authenticationApiSettings").AuthenticationApiSettings = null as any;
utilities.lazyLoad(exports, ["AuthenticationApiSettings"], () => require("./authenticationApiSettings"));

export { AuthenticationPoliciesArgs, AuthenticationPoliciesState } from "./authenticationPolicies";
export type AuthenticationPolicies = import("./authenticationPolicies").AuthenticationPolicies;
export const AuthenticationPolicies: typeof import("./authenticationPolicies").AuthenticationPolicies = null as any;
utilities.lazyLoad(exports, ["AuthenticationPolicies"], () => require("./authenticationPolicies"));

export { AuthenticationPoliciesSettingsArgs, AuthenticationPoliciesSettingsState } from "./authenticationPoliciesSettings";
export type AuthenticationPoliciesSettings = import("./authenticationPoliciesSettings").AuthenticationPoliciesSettings;
export const AuthenticationPoliciesSettings: typeof import("./authenticationPoliciesSettings").AuthenticationPoliciesSettings = null as any;
utilities.lazyLoad(exports, ["AuthenticationPoliciesSettings"], () => require("./authenticationPoliciesSettings"));

export { AuthenticationPolicyContractArgs, AuthenticationPolicyContractState } from "./authenticationPolicyContract";
export type AuthenticationPolicyContract = import("./authenticationPolicyContract").AuthenticationPolicyContract;
export const AuthenticationPolicyContract: typeof import("./authenticationPolicyContract").AuthenticationPolicyContract = null as any;
utilities.lazyLoad(exports, ["AuthenticationPolicyContract"], () => require("./authenticationPolicyContract"));

export { AuthenticationPolicyFragmentArgs, AuthenticationPolicyFragmentState } from "./authenticationPolicyFragment";
export type AuthenticationPolicyFragment = import("./authenticationPolicyFragment").AuthenticationPolicyFragment;
export const AuthenticationPolicyFragment: typeof import("./authenticationPolicyFragment").AuthenticationPolicyFragment = null as any;
utilities.lazyLoad(exports, ["AuthenticationPolicyFragment"], () => require("./authenticationPolicyFragment"));

export { AuthenticationSelectorArgs, AuthenticationSelectorState } from "./authenticationSelector";
export type AuthenticationSelector = import("./authenticationSelector").AuthenticationSelector;
export const AuthenticationSelector: typeof import("./authenticationSelector").AuthenticationSelector = null as any;
utilities.lazyLoad(exports, ["AuthenticationSelector"], () => require("./authenticationSelector"));

export { AuthenticationSessionPolicyArgs, AuthenticationSessionPolicyState } from "./authenticationSessionPolicy";
export type AuthenticationSessionPolicy = import("./authenticationSessionPolicy").AuthenticationSessionPolicy;
export const AuthenticationSessionPolicy: typeof import("./authenticationSessionPolicy").AuthenticationSessionPolicy = null as any;
utilities.lazyLoad(exports, ["AuthenticationSessionPolicy"], () => require("./authenticationSessionPolicy"));

export { CertificatesCaArgs, CertificatesCaState } from "./certificatesCa";
export type CertificatesCa = import("./certificatesCa").CertificatesCa;
export const CertificatesCa: typeof import("./certificatesCa").CertificatesCa = null as any;
utilities.lazyLoad(exports, ["CertificatesCa"], () => require("./certificatesCa"));

export { CertificatesRevocationSettingsArgs, CertificatesRevocationSettingsState } from "./certificatesRevocationSettings";
export type CertificatesRevocationSettings = import("./certificatesRevocationSettings").CertificatesRevocationSettings;
export const CertificatesRevocationSettings: typeof import("./certificatesRevocationSettings").CertificatesRevocationSettings = null as any;
utilities.lazyLoad(exports, ["CertificatesRevocationSettings"], () => require("./certificatesRevocationSettings"));

export { CustomDataStoreArgs, CustomDataStoreState } from "./customDataStore";
export type CustomDataStore = import("./customDataStore").CustomDataStore;
export const CustomDataStore: typeof import("./customDataStore").CustomDataStore = null as any;
utilities.lazyLoad(exports, ["CustomDataStore"], () => require("./customDataStore"));

export { ExtendedPropertiesArgs, ExtendedPropertiesState } from "./extendedProperties";
export type ExtendedProperties = import("./extendedProperties").ExtendedProperties;
export const ExtendedProperties: typeof import("./extendedProperties").ExtendedProperties = null as any;
utilities.lazyLoad(exports, ["ExtendedProperties"], () => require("./extendedProperties"));

export { GetCustomDataStoreArgs, GetCustomDataStoreResult, GetCustomDataStoreOutputArgs } from "./getCustomDataStore";
export const getCustomDataStore: typeof import("./getCustomDataStore").getCustomDataStore = null as any;
export const getCustomDataStoreOutput: typeof import("./getCustomDataStore").getCustomDataStoreOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDataStore","getCustomDataStoreOutput"], () => require("./getCustomDataStore"));

export { GetJdbcDataStoreArgs, GetJdbcDataStoreResult, GetJdbcDataStoreOutputArgs } from "./getJdbcDataStore";
export const getJdbcDataStore: typeof import("./getJdbcDataStore").getJdbcDataStore = null as any;
export const getJdbcDataStoreOutput: typeof import("./getJdbcDataStore").getJdbcDataStoreOutput = null as any;
utilities.lazyLoad(exports, ["getJdbcDataStore","getJdbcDataStoreOutput"], () => require("./getJdbcDataStore"));

export { GetKeypairSigningArgs, GetKeypairSigningResult, GetKeypairSigningOutputArgs } from "./getKeypairSigning";
export const getKeypairSigning: typeof import("./getKeypairSigning").getKeypairSigning = null as any;
export const getKeypairSigningOutput: typeof import("./getKeypairSigning").getKeypairSigningOutput = null as any;
utilities.lazyLoad(exports, ["getKeypairSigning","getKeypairSigningOutput"], () => require("./getKeypairSigning"));

export { GetKeypairSigningCsrArgs, GetKeypairSigningCsrResult, GetKeypairSigningCsrOutputArgs } from "./getKeypairSigningCsr";
export const getKeypairSigningCsr: typeof import("./getKeypairSigningCsr").getKeypairSigningCsr = null as any;
export const getKeypairSigningCsrOutput: typeof import("./getKeypairSigningCsr").getKeypairSigningCsrOutput = null as any;
utilities.lazyLoad(exports, ["getKeypairSigningCsr","getKeypairSigningCsrOutput"], () => require("./getKeypairSigningCsr"));

export { GetKeypairSslServerCsrArgs, GetKeypairSslServerCsrResult, GetKeypairSslServerCsrOutputArgs } from "./getKeypairSslServerCsr";
export const getKeypairSslServerCsr: typeof import("./getKeypairSslServerCsr").getKeypairSslServerCsr = null as any;
export const getKeypairSslServerCsrOutput: typeof import("./getKeypairSslServerCsr").getKeypairSslServerCsrOutput = null as any;
utilities.lazyLoad(exports, ["getKeypairSslServerCsr","getKeypairSslServerCsrOutput"], () => require("./getKeypairSslServerCsr"));

export { GetLdapDataStoreArgs, GetLdapDataStoreResult, GetLdapDataStoreOutputArgs } from "./getLdapDataStore";
export const getLdapDataStore: typeof import("./getLdapDataStore").getLdapDataStore = null as any;
export const getLdapDataStoreOutput: typeof import("./getLdapDataStore").getLdapDataStoreOutput = null as any;
utilities.lazyLoad(exports, ["getLdapDataStore","getLdapDataStoreOutput"], () => require("./getLdapDataStore"));

export { GetOauthAuthServerSettingsResult } from "./getOauthAuthServerSettings";
export const getOauthAuthServerSettings: typeof import("./getOauthAuthServerSettings").getOauthAuthServerSettings = null as any;
export const getOauthAuthServerSettingsOutput: typeof import("./getOauthAuthServerSettings").getOauthAuthServerSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getOauthAuthServerSettings","getOauthAuthServerSettingsOutput"], () => require("./getOauthAuthServerSettings"));

export { GetVersionArgs, GetVersionResult, GetVersionOutputArgs } from "./getVersion";
export const getVersion: typeof import("./getVersion").getVersion = null as any;
export const getVersionOutput: typeof import("./getVersion").getVersionOutput = null as any;
utilities.lazyLoad(exports, ["getVersion","getVersionOutput"], () => require("./getVersion"));

export { GlobalAuthenticationSessionPolicyArgs, GlobalAuthenticationSessionPolicyState } from "./globalAuthenticationSessionPolicy";
export type GlobalAuthenticationSessionPolicy = import("./globalAuthenticationSessionPolicy").GlobalAuthenticationSessionPolicy;
export const GlobalAuthenticationSessionPolicy: typeof import("./globalAuthenticationSessionPolicy").GlobalAuthenticationSessionPolicy = null as any;
utilities.lazyLoad(exports, ["GlobalAuthenticationSessionPolicy"], () => require("./globalAuthenticationSessionPolicy"));

export { IdpAdapterArgs, IdpAdapterState } from "./idpAdapter";
export type IdpAdapter = import("./idpAdapter").IdpAdapter;
export const IdpAdapter: typeof import("./idpAdapter").IdpAdapter = null as any;
utilities.lazyLoad(exports, ["IdpAdapter"], () => require("./idpAdapter"));

export { IdpSpConnectionArgs, IdpSpConnectionState } from "./idpSpConnection";
export type IdpSpConnection = import("./idpSpConnection").IdpSpConnection;
export const IdpSpConnection: typeof import("./idpSpConnection").IdpSpConnection = null as any;
utilities.lazyLoad(exports, ["IdpSpConnection"], () => require("./idpSpConnection"));

export { IdpTokenProcessorArgs, IdpTokenProcessorState } from "./idpTokenProcessor";
export type IdpTokenProcessor = import("./idpTokenProcessor").IdpTokenProcessor;
export const IdpTokenProcessor: typeof import("./idpTokenProcessor").IdpTokenProcessor = null as any;
utilities.lazyLoad(exports, ["IdpTokenProcessor"], () => require("./idpTokenProcessor"));

export { IncomingProxySettingsArgs, IncomingProxySettingsState } from "./incomingProxySettings";
export type IncomingProxySettings = import("./incomingProxySettings").IncomingProxySettings;
export const IncomingProxySettings: typeof import("./incomingProxySettings").IncomingProxySettings = null as any;
utilities.lazyLoad(exports, ["IncomingProxySettings"], () => require("./incomingProxySettings"));

export { JdbcDataStoreArgs, JdbcDataStoreState } from "./jdbcDataStore";
export type JdbcDataStore = import("./jdbcDataStore").JdbcDataStore;
export const JdbcDataStore: typeof import("./jdbcDataStore").JdbcDataStore = null as any;
utilities.lazyLoad(exports, ["JdbcDataStore"], () => require("./jdbcDataStore"));

export { KerberosRealmArgs, KerberosRealmState } from "./kerberosRealm";
export type KerberosRealm = import("./kerberosRealm").KerberosRealm;
export const KerberosRealm: typeof import("./kerberosRealm").KerberosRealm = null as any;
utilities.lazyLoad(exports, ["KerberosRealm"], () => require("./kerberosRealm"));

export { KeypairSigningArgs, KeypairSigningState } from "./keypairSigning";
export type KeypairSigning = import("./keypairSigning").KeypairSigning;
export const KeypairSigning: typeof import("./keypairSigning").KeypairSigning = null as any;
utilities.lazyLoad(exports, ["KeypairSigning"], () => require("./keypairSigning"));

export { KeypairSigningCsrArgs, KeypairSigningCsrState } from "./keypairSigningCsr";
export type KeypairSigningCsr = import("./keypairSigningCsr").KeypairSigningCsr;
export const KeypairSigningCsr: typeof import("./keypairSigningCsr").KeypairSigningCsr = null as any;
utilities.lazyLoad(exports, ["KeypairSigningCsr"], () => require("./keypairSigningCsr"));

export { KeypairSslServerArgs, KeypairSslServerState } from "./keypairSslServer";
export type KeypairSslServer = import("./keypairSslServer").KeypairSslServer;
export const KeypairSslServer: typeof import("./keypairSslServer").KeypairSslServer = null as any;
utilities.lazyLoad(exports, ["KeypairSslServer"], () => require("./keypairSslServer"));

export { KeypairSslServerCsrArgs, KeypairSslServerCsrState } from "./keypairSslServerCsr";
export type KeypairSslServerCsr = import("./keypairSslServerCsr").KeypairSslServerCsr;
export const KeypairSslServerCsr: typeof import("./keypairSslServerCsr").KeypairSslServerCsr = null as any;
utilities.lazyLoad(exports, ["KeypairSslServerCsr"], () => require("./keypairSslServerCsr"));

export { KeypairSslServerSettingsArgs, KeypairSslServerSettingsState } from "./keypairSslServerSettings";
export type KeypairSslServerSettings = import("./keypairSslServerSettings").KeypairSslServerSettings;
export const KeypairSslServerSettings: typeof import("./keypairSslServerSettings").KeypairSslServerSettings = null as any;
utilities.lazyLoad(exports, ["KeypairSslServerSettings"], () => require("./keypairSslServerSettings"));

export { KeypairsOauthOpenidConnectArgs, KeypairsOauthOpenidConnectState } from "./keypairsOauthOpenidConnect";
export type KeypairsOauthOpenidConnect = import("./keypairsOauthOpenidConnect").KeypairsOauthOpenidConnect;
export const KeypairsOauthOpenidConnect: typeof import("./keypairsOauthOpenidConnect").KeypairsOauthOpenidConnect = null as any;
utilities.lazyLoad(exports, ["KeypairsOauthOpenidConnect"], () => require("./keypairsOauthOpenidConnect"));

export { LdapDataStoreArgs, LdapDataStoreState } from "./ldapDataStore";
export type LdapDataStore = import("./ldapDataStore").LdapDataStore;
export const LdapDataStore: typeof import("./ldapDataStore").LdapDataStore = null as any;
utilities.lazyLoad(exports, ["LdapDataStore"], () => require("./ldapDataStore"));

export { MetadataUrlArgs, MetadataUrlState } from "./metadataUrl";
export type MetadataUrl = import("./metadataUrl").MetadataUrl;
export const MetadataUrl: typeof import("./metadataUrl").MetadataUrl = null as any;
utilities.lazyLoad(exports, ["MetadataUrl"], () => require("./metadataUrl"));

export { NotificationPublisherArgs, NotificationPublisherState } from "./notificationPublisher";
export type NotificationPublisher = import("./notificationPublisher").NotificationPublisher;
export const NotificationPublisher: typeof import("./notificationPublisher").NotificationPublisher = null as any;
utilities.lazyLoad(exports, ["NotificationPublisher"], () => require("./notificationPublisher"));

export { OauthAccessTokenManagerArgs, OauthAccessTokenManagerState } from "./oauthAccessTokenManager";
export type OauthAccessTokenManager = import("./oauthAccessTokenManager").OauthAccessTokenManager;
export const OauthAccessTokenManager: typeof import("./oauthAccessTokenManager").OauthAccessTokenManager = null as any;
utilities.lazyLoad(exports, ["OauthAccessTokenManager"], () => require("./oauthAccessTokenManager"));

export { OauthAccessTokenManagerSettingsArgs, OauthAccessTokenManagerSettingsState } from "./oauthAccessTokenManagerSettings";
export type OauthAccessTokenManagerSettings = import("./oauthAccessTokenManagerSettings").OauthAccessTokenManagerSettings;
export const OauthAccessTokenManagerSettings: typeof import("./oauthAccessTokenManagerSettings").OauthAccessTokenManagerSettings = null as any;
utilities.lazyLoad(exports, ["OauthAccessTokenManagerSettings"], () => require("./oauthAccessTokenManagerSettings"));

export { OauthAccessTokenMappingsArgs, OauthAccessTokenMappingsState } from "./oauthAccessTokenMappings";
export type OauthAccessTokenMappings = import("./oauthAccessTokenMappings").OauthAccessTokenMappings;
export const OauthAccessTokenMappings: typeof import("./oauthAccessTokenMappings").OauthAccessTokenMappings = null as any;
utilities.lazyLoad(exports, ["OauthAccessTokenMappings"], () => require("./oauthAccessTokenMappings"));

export { OauthAuthServerSettingsArgs, OauthAuthServerSettingsState } from "./oauthAuthServerSettings";
export type OauthAuthServerSettings = import("./oauthAuthServerSettings").OauthAuthServerSettings;
export const OauthAuthServerSettings: typeof import("./oauthAuthServerSettings").OauthAuthServerSettings = null as any;
utilities.lazyLoad(exports, ["OauthAuthServerSettings"], () => require("./oauthAuthServerSettings"));

export { OauthAuthenticationPolicyContractMappingArgs, OauthAuthenticationPolicyContractMappingState } from "./oauthAuthenticationPolicyContractMapping";
export type OauthAuthenticationPolicyContractMapping = import("./oauthAuthenticationPolicyContractMapping").OauthAuthenticationPolicyContractMapping;
export const OauthAuthenticationPolicyContractMapping: typeof import("./oauthAuthenticationPolicyContractMapping").OauthAuthenticationPolicyContractMapping = null as any;
utilities.lazyLoad(exports, ["OauthAuthenticationPolicyContractMapping"], () => require("./oauthAuthenticationPolicyContractMapping"));

export { OauthClientArgs, OauthClientState } from "./oauthClient";
export type OauthClient = import("./oauthClient").OauthClient;
export const OauthClient: typeof import("./oauthClient").OauthClient = null as any;
utilities.lazyLoad(exports, ["OauthClient"], () => require("./oauthClient"));

export { OauthClientRegistrationPolicyArgs, OauthClientRegistrationPolicyState } from "./oauthClientRegistrationPolicy";
export type OauthClientRegistrationPolicy = import("./oauthClientRegistrationPolicy").OauthClientRegistrationPolicy;
export const OauthClientRegistrationPolicy: typeof import("./oauthClientRegistrationPolicy").OauthClientRegistrationPolicy = null as any;
utilities.lazyLoad(exports, ["OauthClientRegistrationPolicy"], () => require("./oauthClientRegistrationPolicy"));

export { OauthClientSettingsArgs, OauthClientSettingsState } from "./oauthClientSettings";
export type OauthClientSettings = import("./oauthClientSettings").OauthClientSettings;
export const OauthClientSettings: typeof import("./oauthClientSettings").OauthClientSettings = null as any;
utilities.lazyLoad(exports, ["OauthClientSettings"], () => require("./oauthClientSettings"));

export { OauthOpenidConnectPolicyArgs, OauthOpenidConnectPolicyState } from "./oauthOpenidConnectPolicy";
export type OauthOpenidConnectPolicy = import("./oauthOpenidConnectPolicy").OauthOpenidConnectPolicy;
export const OauthOpenidConnectPolicy: typeof import("./oauthOpenidConnectPolicy").OauthOpenidConnectPolicy = null as any;
utilities.lazyLoad(exports, ["OauthOpenidConnectPolicy"], () => require("./oauthOpenidConnectPolicy"));

export { OauthResourceOwnerCredentialsMappingsArgs, OauthResourceOwnerCredentialsMappingsState } from "./oauthResourceOwnerCredentialsMappings";
export type OauthResourceOwnerCredentialsMappings = import("./oauthResourceOwnerCredentialsMappings").OauthResourceOwnerCredentialsMappings;
export const OauthResourceOwnerCredentialsMappings: typeof import("./oauthResourceOwnerCredentialsMappings").OauthResourceOwnerCredentialsMappings = null as any;
utilities.lazyLoad(exports, ["OauthResourceOwnerCredentialsMappings"], () => require("./oauthResourceOwnerCredentialsMappings"));

export { PasswordCredentialValidatorArgs, PasswordCredentialValidatorState } from "./passwordCredentialValidator";
export type PasswordCredentialValidator = import("./passwordCredentialValidator").PasswordCredentialValidator;
export const PasswordCredentialValidator: typeof import("./passwordCredentialValidator").PasswordCredentialValidator = null as any;
utilities.lazyLoad(exports, ["PasswordCredentialValidator"], () => require("./passwordCredentialValidator"));

export { PingoneConnectionArgs, PingoneConnectionState } from "./pingoneConnection";
export type PingoneConnection = import("./pingoneConnection").PingoneConnection;
export const PingoneConnection: typeof import("./pingoneConnection").PingoneConnection = null as any;
utilities.lazyLoad(exports, ["PingoneConnection"], () => require("./pingoneConnection"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RedirectValidationSettingsArgs, RedirectValidationSettingsState } from "./redirectValidationSettings";
export type RedirectValidationSettings = import("./redirectValidationSettings").RedirectValidationSettings;
export const RedirectValidationSettings: typeof import("./redirectValidationSettings").RedirectValidationSettings = null as any;
utilities.lazyLoad(exports, ["RedirectValidationSettings"], () => require("./redirectValidationSettings"));

export { ServerSettingsArgs, ServerSettingsState } from "./serverSettings";
export type ServerSettings = import("./serverSettings").ServerSettings;
export const ServerSettings: typeof import("./serverSettings").ServerSettings = null as any;
utilities.lazyLoad(exports, ["ServerSettings"], () => require("./serverSettings"));

export { SessionSettingsArgs, SessionSettingsState } from "./sessionSettings";
export type SessionSettings = import("./sessionSettings").SessionSettings;
export const SessionSettings: typeof import("./sessionSettings").SessionSettings = null as any;
utilities.lazyLoad(exports, ["SessionSettings"], () => require("./sessionSettings"));

export { SpAdapterArgs, SpAdapterState } from "./spAdapter";
export type SpAdapter = import("./spAdapter").SpAdapter;
export const SpAdapter: typeof import("./spAdapter").SpAdapter = null as any;
utilities.lazyLoad(exports, ["SpAdapter"], () => require("./spAdapter"));

export { SpAuthenticationPolicyContractMappingArgs, SpAuthenticationPolicyContractMappingState } from "./spAuthenticationPolicyContractMapping";
export type SpAuthenticationPolicyContractMapping = import("./spAuthenticationPolicyContractMapping").SpAuthenticationPolicyContractMapping;
export const SpAuthenticationPolicyContractMapping: typeof import("./spAuthenticationPolicyContractMapping").SpAuthenticationPolicyContractMapping = null as any;
utilities.lazyLoad(exports, ["SpAuthenticationPolicyContractMapping"], () => require("./spAuthenticationPolicyContractMapping"));

export { SpIdpConnectionArgs, SpIdpConnectionState } from "./spIdpConnection";
export type SpIdpConnection = import("./spIdpConnection").SpIdpConnection;
export const SpIdpConnection: typeof import("./spIdpConnection").SpIdpConnection = null as any;
utilities.lazyLoad(exports, ["SpIdpConnection"], () => require("./spIdpConnection"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pingfederate:index/applicationSessionPolicy:ApplicationSessionPolicy":
                return new ApplicationSessionPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationApiApplication:AuthenticationApiApplication":
                return new AuthenticationApiApplication(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationApiSettings:AuthenticationApiSettings":
                return new AuthenticationApiSettings(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPolicies:AuthenticationPolicies":
                return new AuthenticationPolicies(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPoliciesSettings:AuthenticationPoliciesSettings":
                return new AuthenticationPoliciesSettings(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPolicyContract:AuthenticationPolicyContract":
                return new AuthenticationPolicyContract(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationPolicyFragment:AuthenticationPolicyFragment":
                return new AuthenticationPolicyFragment(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationSelector:AuthenticationSelector":
                return new AuthenticationSelector(name, <any>undefined, { urn })
            case "pingfederate:index/authenticationSessionPolicy:AuthenticationSessionPolicy":
                return new AuthenticationSessionPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/certificatesCa:CertificatesCa":
                return new CertificatesCa(name, <any>undefined, { urn })
            case "pingfederate:index/certificatesRevocationSettings:CertificatesRevocationSettings":
                return new CertificatesRevocationSettings(name, <any>undefined, { urn })
            case "pingfederate:index/customDataStore:CustomDataStore":
                return new CustomDataStore(name, <any>undefined, { urn })
            case "pingfederate:index/extendedProperties:ExtendedProperties":
                return new ExtendedProperties(name, <any>undefined, { urn })
            case "pingfederate:index/globalAuthenticationSessionPolicy:GlobalAuthenticationSessionPolicy":
                return new GlobalAuthenticationSessionPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/idpAdapter:IdpAdapter":
                return new IdpAdapter(name, <any>undefined, { urn })
            case "pingfederate:index/idpSpConnection:IdpSpConnection":
                return new IdpSpConnection(name, <any>undefined, { urn })
            case "pingfederate:index/idpTokenProcessor:IdpTokenProcessor":
                return new IdpTokenProcessor(name, <any>undefined, { urn })
            case "pingfederate:index/incomingProxySettings:IncomingProxySettings":
                return new IncomingProxySettings(name, <any>undefined, { urn })
            case "pingfederate:index/jdbcDataStore:JdbcDataStore":
                return new JdbcDataStore(name, <any>undefined, { urn })
            case "pingfederate:index/kerberosRealm:KerberosRealm":
                return new KerberosRealm(name, <any>undefined, { urn })
            case "pingfederate:index/keypairSigning:KeypairSigning":
                return new KeypairSigning(name, <any>undefined, { urn })
            case "pingfederate:index/keypairSigningCsr:KeypairSigningCsr":
                return new KeypairSigningCsr(name, <any>undefined, { urn })
            case "pingfederate:index/keypairSslServer:KeypairSslServer":
                return new KeypairSslServer(name, <any>undefined, { urn })
            case "pingfederate:index/keypairSslServerCsr:KeypairSslServerCsr":
                return new KeypairSslServerCsr(name, <any>undefined, { urn })
            case "pingfederate:index/keypairSslServerSettings:KeypairSslServerSettings":
                return new KeypairSslServerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/keypairsOauthOpenidConnect:KeypairsOauthOpenidConnect":
                return new KeypairsOauthOpenidConnect(name, <any>undefined, { urn })
            case "pingfederate:index/ldapDataStore:LdapDataStore":
                return new LdapDataStore(name, <any>undefined, { urn })
            case "pingfederate:index/metadataUrl:MetadataUrl":
                return new MetadataUrl(name, <any>undefined, { urn })
            case "pingfederate:index/notificationPublisher:NotificationPublisher":
                return new NotificationPublisher(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAccessTokenManager:OauthAccessTokenManager":
                return new OauthAccessTokenManager(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAccessTokenManagerSettings:OauthAccessTokenManagerSettings":
                return new OauthAccessTokenManagerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAccessTokenMappings:OauthAccessTokenMappings":
                return new OauthAccessTokenMappings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAuthServerSettings:OauthAuthServerSettings":
                return new OauthAuthServerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthAuthenticationPolicyContractMapping:OauthAuthenticationPolicyContractMapping":
                return new OauthAuthenticationPolicyContractMapping(name, <any>undefined, { urn })
            case "pingfederate:index/oauthClient:OauthClient":
                return new OauthClient(name, <any>undefined, { urn })
            case "pingfederate:index/oauthClientRegistrationPolicy:OauthClientRegistrationPolicy":
                return new OauthClientRegistrationPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/oauthClientSettings:OauthClientSettings":
                return new OauthClientSettings(name, <any>undefined, { urn })
            case "pingfederate:index/oauthOpenidConnectPolicy:OauthOpenidConnectPolicy":
                return new OauthOpenidConnectPolicy(name, <any>undefined, { urn })
            case "pingfederate:index/oauthResourceOwnerCredentialsMappings:OauthResourceOwnerCredentialsMappings":
                return new OauthResourceOwnerCredentialsMappings(name, <any>undefined, { urn })
            case "pingfederate:index/passwordCredentialValidator:PasswordCredentialValidator":
                return new PasswordCredentialValidator(name, <any>undefined, { urn })
            case "pingfederate:index/pingoneConnection:PingoneConnection":
                return new PingoneConnection(name, <any>undefined, { urn })
            case "pingfederate:index/redirectValidationSettings:RedirectValidationSettings":
                return new RedirectValidationSettings(name, <any>undefined, { urn })
            case "pingfederate:index/serverSettings:ServerSettings":
                return new ServerSettings(name, <any>undefined, { urn })
            case "pingfederate:index/sessionSettings:SessionSettings":
                return new SessionSettings(name, <any>undefined, { urn })
            case "pingfederate:index/spAdapter:SpAdapter":
                return new SpAdapter(name, <any>undefined, { urn })
            case "pingfederate:index/spAuthenticationPolicyContractMapping:SpAuthenticationPolicyContractMapping":
                return new SpAuthenticationPolicyContractMapping(name, <any>undefined, { urn })
            case "pingfederate:index/spIdpConnection:SpIdpConnection":
                return new SpIdpConnection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pingfederate", "index/applicationSessionPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationApiApplication", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationApiSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPolicies", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPoliciesSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPolicyContract", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationPolicyFragment", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationSelector", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/authenticationSessionPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/certificatesCa", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/certificatesRevocationSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/customDataStore", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/extendedProperties", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/globalAuthenticationSessionPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/idpAdapter", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/idpSpConnection", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/idpTokenProcessor", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/incomingProxySettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/jdbcDataStore", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/kerberosRealm", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairSigning", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairSigningCsr", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairSslServer", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairSslServerCsr", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairSslServerSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/keypairsOauthOpenidConnect", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/ldapDataStore", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/metadataUrl", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/notificationPublisher", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAccessTokenManager", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAccessTokenManagerSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAccessTokenMappings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAuthServerSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthAuthenticationPolicyContractMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthClient", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthClientRegistrationPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthClientSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthOpenidConnectPolicy", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/oauthResourceOwnerCredentialsMappings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/passwordCredentialValidator", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/pingoneConnection", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/redirectValidationSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/serverSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/sessionSettings", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/spAdapter", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/spAuthenticationPolicyContractMapping", _module)
pulumi.runtime.registerResourceModule("pingfederate", "index/spIdpConnection", _module)
pulumi.runtime.registerResourcePackage("pingfederate", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pingfederate") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
