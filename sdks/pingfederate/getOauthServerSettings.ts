// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getOauthServerSettings(opts?: pulumi.InvokeOptions): Promise<GetOauthServerSettingsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingfederate:index/getOauthServerSettings:getOauthServerSettings", {
    }, opts, utilities.getPackage());
}

/**
 * A collection of values returned by getOauthServerSettings.
 */
export interface GetOauthServerSettingsResult {
    readonly activationCodeCheckMode: string;
    readonly adminWebServicePcvRef: outputs.GetOauthServerSettingsAdminWebServicePcvRef;
    readonly allowUnidentifiedClientExtensionGrants: boolean;
    readonly allowUnidentifiedClientRoCreds: boolean;
    readonly allowedOrigins: string[];
    readonly approvedAuthorizationDetailAttribute: string;
    readonly approvedScopesAttribute: string;
    readonly atmIdForOauthGrantManagement: string;
    readonly authorizationCodeEntropy: number;
    readonly authorizationCodeTimeout: number;
    readonly bypassActivationCodeConfirmation: boolean;
    readonly bypassAuthorizationForApprovedConsents: boolean;
    readonly bypassAuthorizationForApprovedGrants: boolean;
    readonly clientSecretRetentionPeriod: number;
    readonly consentLifetimeDays: number;
    readonly defaultScopeDescription: string;
    readonly devicePollingInterval: number;
    readonly disallowPlainPkce: boolean;
    readonly dpopProofEnforceReplayPrevention: boolean;
    readonly dpopProofLifetimeSeconds: number;
    readonly dpopProofRequireNonce: boolean;
    readonly enableCookielessUserAuthorizationAuthenticationApi: boolean;
    readonly exclusiveScopeGroups: outputs.GetOauthServerSettingsExclusiveScopeGroup[];
    readonly exclusiveScopes: outputs.GetOauthServerSettingsExclusiveScope[];
    readonly id: string;
    readonly includeIssuerInAuthorizationResponse: boolean;
    readonly jwtSecuredAuthorizationResponseModeLifetime: number;
    readonly offlineAccessRequireConsentPrompt: boolean;
    readonly parReferenceLength: number;
    readonly parReferenceTimeout: number;
    readonly parStatus: string;
    readonly pendingAuthorizationTimeout: number;
    readonly persistentGrantContract: outputs.GetOauthServerSettingsPersistentGrantContract;
    readonly persistentGrantIdleTimeout: number;
    readonly persistentGrantIdleTimeoutTimeUnit: string;
    readonly persistentGrantLifetime: number;
    readonly persistentGrantLifetimeUnit: string;
    readonly persistentGrantReuseGrantTypes: string[];
    readonly refreshRollingInterval: number;
    readonly refreshRollingIntervalTimeUnit: string;
    readonly refreshTokenLength: number;
    readonly refreshTokenRollingGracePeriod: number;
    readonly registeredAuthorizationPath: string;
    readonly requireOfflineAccessScopeToIssueRefreshTokens: boolean;
    readonly rollRefreshTokenValues: boolean;
    readonly scopeForOauthGrantManagement: string;
    readonly scopeGroups: outputs.GetOauthServerSettingsScopeGroup[];
    readonly scopes: outputs.GetOauthServerSettingsScope[];
    readonly tokenEndpointBaseUrl: string;
    readonly trackUserSessionsForLogout: boolean;
    readonly userAuthorizationConsentAdapter: string;
    readonly userAuthorizationConsentPageSetting: string;
    readonly userAuthorizationUrl: string;
}
export function getOauthServerSettingsOutput(opts?: pulumi.InvokeOptions): pulumi.Output<GetOauthServerSettingsResult> {
    return pulumi.output(getOauthServerSettings(opts))
}
