// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class KeypairsOauthOpenidConnect extends pulumi.CustomResource {
    /**
     * Get an existing KeypairsOauthOpenidConnect resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairsOauthOpenidConnectState, opts?: pulumi.CustomResourceOptions): KeypairsOauthOpenidConnect {
        return new KeypairsOauthOpenidConnect(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/keypairsOauthOpenidConnect:KeypairsOauthOpenidConnect';

    /**
     * Returns true if the given object is an instance of KeypairsOauthOpenidConnect.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeypairsOauthOpenidConnect {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeypairsOauthOpenidConnect.__pulumiType;
    }

    /**
     * Reference to the P-256 key currently active.
     */
    public readonly p256ActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP256ActiveCertRef | undefined>;
    /**
     * Reference to the P-256 decryption key currently active.
     */
    public readonly p256DecryptionActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP256DecryptionActiveCertRef | undefined>;
    /**
     * Reference to the P-256 decryption key previously active.
     */
    public readonly p256DecryptionPreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP256DecryptionPreviousCertRef | undefined>;
    /**
     * Enable publishing of the P-256 certificate chain associated with the active key.
     */
    public readonly p256DecryptionPublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Reference to the P-256 key previously active.
     */
    public readonly p256PreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP256PreviousCertRef | undefined>;
    /**
     * Enable publishing of the P-256 certificate chain associated with the active key.
     */
    public readonly p256PublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Reference to the P-384 key currently active.
     */
    public readonly p384ActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP384ActiveCertRef | undefined>;
    /**
     * Reference to the P-384 decryption key currently active.
     */
    public readonly p384DecryptionActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP384DecryptionActiveCertRef | undefined>;
    /**
     * Reference to the P-384 decryption key previously active.
     */
    public readonly p384DecryptionPreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP384DecryptionPreviousCertRef | undefined>;
    /**
     * Enable publishing of the P-384 certificate chain associated with the active key.
     */
    public readonly p384DecryptionPublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Reference to the P-384 key previously active.
     */
    public readonly p384PreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP384PreviousCertRef | undefined>;
    /**
     * Enable publishing of the P-384 certificate chain associated with the active key.
     */
    public readonly p384PublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Reference to the P-521 key currently active.
     */
    public readonly p521ActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP521ActiveCertRef | undefined>;
    /**
     * Reference to the P-521 decryption key currently active.
     */
    public readonly p521DecryptionActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP521DecryptionActiveCertRef | undefined>;
    /**
     * Reference to the P-521 decryption key previously active.
     */
    public readonly p521DecryptionPreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP521DecryptionPreviousCertRef | undefined>;
    /**
     * Enable publishing of the P-521 certificate chain associated with the active key.
     */
    public readonly p521DecryptionPublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Reference to the P-521 key previously active.
     */
    public readonly p521PreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectP521PreviousCertRef | undefined>;
    /**
     * Enable publishing of the P-521 certificate chain associated with the active key.
     */
    public readonly p521PublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Reference to the RSA key currently active.
     */
    public readonly rsaActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectRsaActiveCertRef>;
    /**
     * Reference to the RSA decryption key currently active.
     */
    public readonly rsaDecryptionActiveCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectRsaDecryptionActiveCertRef | undefined>;
    /**
     * Reference to the RSA decryption key previously active.
     */
    public readonly rsaDecryptionPreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectRsaDecryptionPreviousCertRef | undefined>;
    /**
     * Enable publishing of the RSA certificate chain associated with the active key.
     */
    public readonly rsaDecryptionPublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Reference to the RSA key previously active.
     */
    public readonly rsaPreviousCertRef!: pulumi.Output<outputs.KeypairsOauthOpenidConnectRsaPreviousCertRef | undefined>;
    /**
     * Enable publishing of the RSA certificate chain associated with the active key.
     */
    public readonly rsaPublishX5cParameter!: pulumi.Output<boolean | undefined>;
    /**
     * Enable static keys.
     */
    public readonly staticJwksEnabled!: pulumi.Output<boolean>;

    /**
     * Create a KeypairsOauthOpenidConnect resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeypairsOauthOpenidConnectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeypairsOauthOpenidConnectArgs | KeypairsOauthOpenidConnectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeypairsOauthOpenidConnectState | undefined;
            resourceInputs["p256ActiveCertRef"] = state ? state.p256ActiveCertRef : undefined;
            resourceInputs["p256DecryptionActiveCertRef"] = state ? state.p256DecryptionActiveCertRef : undefined;
            resourceInputs["p256DecryptionPreviousCertRef"] = state ? state.p256DecryptionPreviousCertRef : undefined;
            resourceInputs["p256DecryptionPublishX5cParameter"] = state ? state.p256DecryptionPublishX5cParameter : undefined;
            resourceInputs["p256PreviousCertRef"] = state ? state.p256PreviousCertRef : undefined;
            resourceInputs["p256PublishX5cParameter"] = state ? state.p256PublishX5cParameter : undefined;
            resourceInputs["p384ActiveCertRef"] = state ? state.p384ActiveCertRef : undefined;
            resourceInputs["p384DecryptionActiveCertRef"] = state ? state.p384DecryptionActiveCertRef : undefined;
            resourceInputs["p384DecryptionPreviousCertRef"] = state ? state.p384DecryptionPreviousCertRef : undefined;
            resourceInputs["p384DecryptionPublishX5cParameter"] = state ? state.p384DecryptionPublishX5cParameter : undefined;
            resourceInputs["p384PreviousCertRef"] = state ? state.p384PreviousCertRef : undefined;
            resourceInputs["p384PublishX5cParameter"] = state ? state.p384PublishX5cParameter : undefined;
            resourceInputs["p521ActiveCertRef"] = state ? state.p521ActiveCertRef : undefined;
            resourceInputs["p521DecryptionActiveCertRef"] = state ? state.p521DecryptionActiveCertRef : undefined;
            resourceInputs["p521DecryptionPreviousCertRef"] = state ? state.p521DecryptionPreviousCertRef : undefined;
            resourceInputs["p521DecryptionPublishX5cParameter"] = state ? state.p521DecryptionPublishX5cParameter : undefined;
            resourceInputs["p521PreviousCertRef"] = state ? state.p521PreviousCertRef : undefined;
            resourceInputs["p521PublishX5cParameter"] = state ? state.p521PublishX5cParameter : undefined;
            resourceInputs["rsaActiveCertRef"] = state ? state.rsaActiveCertRef : undefined;
            resourceInputs["rsaDecryptionActiveCertRef"] = state ? state.rsaDecryptionActiveCertRef : undefined;
            resourceInputs["rsaDecryptionPreviousCertRef"] = state ? state.rsaDecryptionPreviousCertRef : undefined;
            resourceInputs["rsaDecryptionPublishX5cParameter"] = state ? state.rsaDecryptionPublishX5cParameter : undefined;
            resourceInputs["rsaPreviousCertRef"] = state ? state.rsaPreviousCertRef : undefined;
            resourceInputs["rsaPublishX5cParameter"] = state ? state.rsaPublishX5cParameter : undefined;
            resourceInputs["staticJwksEnabled"] = state ? state.staticJwksEnabled : undefined;
        } else {
            const args = argsOrState as KeypairsOauthOpenidConnectArgs | undefined;
            if ((!args || args.rsaActiveCertRef === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rsaActiveCertRef'");
            }
            if ((!args || args.staticJwksEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'staticJwksEnabled'");
            }
            resourceInputs["p256ActiveCertRef"] = args ? args.p256ActiveCertRef : undefined;
            resourceInputs["p256DecryptionActiveCertRef"] = args ? args.p256DecryptionActiveCertRef : undefined;
            resourceInputs["p256DecryptionPreviousCertRef"] = args ? args.p256DecryptionPreviousCertRef : undefined;
            resourceInputs["p256DecryptionPublishX5cParameter"] = args ? args.p256DecryptionPublishX5cParameter : undefined;
            resourceInputs["p256PreviousCertRef"] = args ? args.p256PreviousCertRef : undefined;
            resourceInputs["p256PublishX5cParameter"] = args ? args.p256PublishX5cParameter : undefined;
            resourceInputs["p384ActiveCertRef"] = args ? args.p384ActiveCertRef : undefined;
            resourceInputs["p384DecryptionActiveCertRef"] = args ? args.p384DecryptionActiveCertRef : undefined;
            resourceInputs["p384DecryptionPreviousCertRef"] = args ? args.p384DecryptionPreviousCertRef : undefined;
            resourceInputs["p384DecryptionPublishX5cParameter"] = args ? args.p384DecryptionPublishX5cParameter : undefined;
            resourceInputs["p384PreviousCertRef"] = args ? args.p384PreviousCertRef : undefined;
            resourceInputs["p384PublishX5cParameter"] = args ? args.p384PublishX5cParameter : undefined;
            resourceInputs["p521ActiveCertRef"] = args ? args.p521ActiveCertRef : undefined;
            resourceInputs["p521DecryptionActiveCertRef"] = args ? args.p521DecryptionActiveCertRef : undefined;
            resourceInputs["p521DecryptionPreviousCertRef"] = args ? args.p521DecryptionPreviousCertRef : undefined;
            resourceInputs["p521DecryptionPublishX5cParameter"] = args ? args.p521DecryptionPublishX5cParameter : undefined;
            resourceInputs["p521PreviousCertRef"] = args ? args.p521PreviousCertRef : undefined;
            resourceInputs["p521PublishX5cParameter"] = args ? args.p521PublishX5cParameter : undefined;
            resourceInputs["rsaActiveCertRef"] = args ? args.rsaActiveCertRef : undefined;
            resourceInputs["rsaDecryptionActiveCertRef"] = args ? args.rsaDecryptionActiveCertRef : undefined;
            resourceInputs["rsaDecryptionPreviousCertRef"] = args ? args.rsaDecryptionPreviousCertRef : undefined;
            resourceInputs["rsaDecryptionPublishX5cParameter"] = args ? args.rsaDecryptionPublishX5cParameter : undefined;
            resourceInputs["rsaPreviousCertRef"] = args ? args.rsaPreviousCertRef : undefined;
            resourceInputs["rsaPublishX5cParameter"] = args ? args.rsaPublishX5cParameter : undefined;
            resourceInputs["staticJwksEnabled"] = args ? args.staticJwksEnabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeypairsOauthOpenidConnect.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeypairsOauthOpenidConnect resources.
 */
export interface KeypairsOauthOpenidConnectState {
    /**
     * Reference to the P-256 key currently active.
     */
    p256ActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256ActiveCertRef>;
    /**
     * Reference to the P-256 decryption key currently active.
     */
    p256DecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256DecryptionActiveCertRef>;
    /**
     * Reference to the P-256 decryption key previously active.
     */
    p256DecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256DecryptionPreviousCertRef>;
    /**
     * Enable publishing of the P-256 certificate chain associated with the active key.
     */
    p256DecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-256 key previously active.
     */
    p256PreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256PreviousCertRef>;
    /**
     * Enable publishing of the P-256 certificate chain associated with the active key.
     */
    p256PublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-384 key currently active.
     */
    p384ActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384ActiveCertRef>;
    /**
     * Reference to the P-384 decryption key currently active.
     */
    p384DecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384DecryptionActiveCertRef>;
    /**
     * Reference to the P-384 decryption key previously active.
     */
    p384DecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384DecryptionPreviousCertRef>;
    /**
     * Enable publishing of the P-384 certificate chain associated with the active key.
     */
    p384DecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-384 key previously active.
     */
    p384PreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384PreviousCertRef>;
    /**
     * Enable publishing of the P-384 certificate chain associated with the active key.
     */
    p384PublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-521 key currently active.
     */
    p521ActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521ActiveCertRef>;
    /**
     * Reference to the P-521 decryption key currently active.
     */
    p521DecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521DecryptionActiveCertRef>;
    /**
     * Reference to the P-521 decryption key previously active.
     */
    p521DecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521DecryptionPreviousCertRef>;
    /**
     * Enable publishing of the P-521 certificate chain associated with the active key.
     */
    p521DecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-521 key previously active.
     */
    p521PreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521PreviousCertRef>;
    /**
     * Enable publishing of the P-521 certificate chain associated with the active key.
     */
    p521PublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the RSA key currently active.
     */
    rsaActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaActiveCertRef>;
    /**
     * Reference to the RSA decryption key currently active.
     */
    rsaDecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaDecryptionActiveCertRef>;
    /**
     * Reference to the RSA decryption key previously active.
     */
    rsaDecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaDecryptionPreviousCertRef>;
    /**
     * Enable publishing of the RSA certificate chain associated with the active key.
     */
    rsaDecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the RSA key previously active.
     */
    rsaPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaPreviousCertRef>;
    /**
     * Enable publishing of the RSA certificate chain associated with the active key.
     */
    rsaPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Enable static keys.
     */
    staticJwksEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a KeypairsOauthOpenidConnect resource.
 */
export interface KeypairsOauthOpenidConnectArgs {
    /**
     * Reference to the P-256 key currently active.
     */
    p256ActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256ActiveCertRef>;
    /**
     * Reference to the P-256 decryption key currently active.
     */
    p256DecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256DecryptionActiveCertRef>;
    /**
     * Reference to the P-256 decryption key previously active.
     */
    p256DecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256DecryptionPreviousCertRef>;
    /**
     * Enable publishing of the P-256 certificate chain associated with the active key.
     */
    p256DecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-256 key previously active.
     */
    p256PreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP256PreviousCertRef>;
    /**
     * Enable publishing of the P-256 certificate chain associated with the active key.
     */
    p256PublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-384 key currently active.
     */
    p384ActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384ActiveCertRef>;
    /**
     * Reference to the P-384 decryption key currently active.
     */
    p384DecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384DecryptionActiveCertRef>;
    /**
     * Reference to the P-384 decryption key previously active.
     */
    p384DecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384DecryptionPreviousCertRef>;
    /**
     * Enable publishing of the P-384 certificate chain associated with the active key.
     */
    p384DecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-384 key previously active.
     */
    p384PreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP384PreviousCertRef>;
    /**
     * Enable publishing of the P-384 certificate chain associated with the active key.
     */
    p384PublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-521 key currently active.
     */
    p521ActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521ActiveCertRef>;
    /**
     * Reference to the P-521 decryption key currently active.
     */
    p521DecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521DecryptionActiveCertRef>;
    /**
     * Reference to the P-521 decryption key previously active.
     */
    p521DecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521DecryptionPreviousCertRef>;
    /**
     * Enable publishing of the P-521 certificate chain associated with the active key.
     */
    p521DecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the P-521 key previously active.
     */
    p521PreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectP521PreviousCertRef>;
    /**
     * Enable publishing of the P-521 certificate chain associated with the active key.
     */
    p521PublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the RSA key currently active.
     */
    rsaActiveCertRef: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaActiveCertRef>;
    /**
     * Reference to the RSA decryption key currently active.
     */
    rsaDecryptionActiveCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaDecryptionActiveCertRef>;
    /**
     * Reference to the RSA decryption key previously active.
     */
    rsaDecryptionPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaDecryptionPreviousCertRef>;
    /**
     * Enable publishing of the RSA certificate chain associated with the active key.
     */
    rsaDecryptionPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Reference to the RSA key previously active.
     */
    rsaPreviousCertRef?: pulumi.Input<inputs.KeypairsOauthOpenidConnectRsaPreviousCertRef>;
    /**
     * Enable publishing of the RSA certificate chain associated with the active key.
     */
    rsaPublishX5cParameter?: pulumi.Input<boolean>;
    /**
     * Enable static keys.
     */
    staticJwksEnabled: pulumi.Input<boolean>;
}
