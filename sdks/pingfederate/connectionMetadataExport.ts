// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ConnectionMetadataExport extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionMetadataExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionMetadataExportState, opts?: pulumi.CustomResourceOptions): ConnectionMetadataExport {
        return new ConnectionMetadataExport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/connectionMetadataExport:ConnectionMetadataExport';

    /**
     * Returns true if the given object is an instance of ConnectionMetadataExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionMetadataExport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionMetadataExport.__pulumiType;
    }

    /**
     * The ID of the connection to export.
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * The type of connection to export. Options are `IDP` or `SP`.
     */
    public readonly connectionType!: pulumi.Output<string>;
    /**
     * The exported SAML metadata.
     */
    public /*out*/ readonly exportedConnectionMetadata!: pulumi.Output<string>;
    /**
     * The signing settings to sign the metadata with. If `null`, the metadata will not be signed
     */
    public readonly signingSettings!: pulumi.Output<outputs.ConnectionMetadataExportSigningSettings | undefined>;
    /**
     * If PingFederate's secondary SSL port is configured and you want to use it for the SOAP channel, set to `true`. If
     * client-certificate authentication is configured for the SOAP channel, the secondary port is required and this must be
     * set to `true`.
     */
    public readonly useSecondaryPortForSoap!: pulumi.Output<boolean | undefined>;
    /**
     * The virtual host name to be used as the base url.
     */
    public readonly virtualHostName!: pulumi.Output<string | undefined>;
    /**
     * The virtual server ID to export the metadata with. If `null`, the connection's default will be used.
     */
    public readonly virtualServerId!: pulumi.Output<string | undefined>;

    /**
     * Create a ConnectionMetadataExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionMetadataExportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionMetadataExportArgs | ConnectionMetadataExportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionMetadataExportState | undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["exportedConnectionMetadata"] = state ? state.exportedConnectionMetadata : undefined;
            resourceInputs["signingSettings"] = state ? state.signingSettings : undefined;
            resourceInputs["useSecondaryPortForSoap"] = state ? state.useSecondaryPortForSoap : undefined;
            resourceInputs["virtualHostName"] = state ? state.virtualHostName : undefined;
            resourceInputs["virtualServerId"] = state ? state.virtualServerId : undefined;
        } else {
            const args = argsOrState as ConnectionMetadataExportArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["signingSettings"] = args ? args.signingSettings : undefined;
            resourceInputs["useSecondaryPortForSoap"] = args ? args.useSecondaryPortForSoap : undefined;
            resourceInputs["virtualHostName"] = args ? args.virtualHostName : undefined;
            resourceInputs["virtualServerId"] = args ? args.virtualServerId : undefined;
            resourceInputs["exportedConnectionMetadata"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConnectionMetadataExport.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ConnectionMetadataExport resources.
 */
export interface ConnectionMetadataExportState {
    /**
     * The ID of the connection to export.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * The type of connection to export. Options are `IDP` or `SP`.
     */
    connectionType?: pulumi.Input<string>;
    /**
     * The exported SAML metadata.
     */
    exportedConnectionMetadata?: pulumi.Input<string>;
    /**
     * The signing settings to sign the metadata with. If `null`, the metadata will not be signed
     */
    signingSettings?: pulumi.Input<inputs.ConnectionMetadataExportSigningSettings>;
    /**
     * If PingFederate's secondary SSL port is configured and you want to use it for the SOAP channel, set to `true`. If
     * client-certificate authentication is configured for the SOAP channel, the secondary port is required and this must be
     * set to `true`.
     */
    useSecondaryPortForSoap?: pulumi.Input<boolean>;
    /**
     * The virtual host name to be used as the base url.
     */
    virtualHostName?: pulumi.Input<string>;
    /**
     * The virtual server ID to export the metadata with. If `null`, the connection's default will be used.
     */
    virtualServerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectionMetadataExport resource.
 */
export interface ConnectionMetadataExportArgs {
    /**
     * The ID of the connection to export.
     */
    connectionId: pulumi.Input<string>;
    /**
     * The type of connection to export. Options are `IDP` or `SP`.
     */
    connectionType: pulumi.Input<string>;
    /**
     * The signing settings to sign the metadata with. If `null`, the metadata will not be signed
     */
    signingSettings?: pulumi.Input<inputs.ConnectionMetadataExportSigningSettings>;
    /**
     * If PingFederate's secondary SSL port is configured and you want to use it for the SOAP channel, set to `true`. If
     * client-certificate authentication is configured for the SOAP channel, the secondary port is required and this must be
     * set to `true`.
     */
    useSecondaryPortForSoap?: pulumi.Input<boolean>;
    /**
     * The virtual host name to be used as the base url.
     */
    virtualHostName?: pulumi.Input<string>;
    /**
     * The virtual server ID to export the metadata with. If `null`, the connection's default will be used.
     */
    virtualServerId?: pulumi.Input<string>;
}
