// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getKeyPairSslServerImport(args: GetKeyPairSslServerImportArgs, opts?: pulumi.InvokeOptions): Promise<GetKeyPairSslServerImportResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("pingfederate:index/getKeyPairSslServerImport:getKeyPairSslServerImport", {
        "importId": args.importId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getKeyPairSslServerImport.
 */
export interface GetKeyPairSslServerImportArgs {
    importId: string;
}

/**
 * A collection of values returned by getKeyPairSslServerImport.
 */
export interface GetKeyPairSslServerImportResult {
    readonly cryptoProvider: string;
    readonly expires: string;
    readonly id: string;
    readonly importId: string;
    readonly issuerDn: string;
    readonly keyAlgorithm: string;
    readonly keySize: number;
    readonly rotationSettings: outputs.GetKeyPairSslServerImportRotationSettings;
    readonly serialNumber: string;
    readonly sha1Fingerprint: string;
    readonly sha256Fingerprint: string;
    readonly signatureAlgorithm: string;
    readonly status: string;
    readonly subjectAlternativeNames: string[];
    readonly subjectDn: string;
    readonly validFrom: string;
    readonly version: number;
}
export function getKeyPairSslServerImportOutput(args: GetKeyPairSslServerImportOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKeyPairSslServerImportResult> {
    return pulumi.output(args).apply((a: any) => getKeyPairSslServerImport(a, opts))
}

/**
 * A collection of arguments for invoking getKeyPairSslServerImport.
 */
export interface GetKeyPairSslServerImportOutputArgs {
    importId: pulumi.Input<string>;
}
