// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SpAuthenticationPolicyContractMapping extends pulumi.CustomResource {
    /**
     * Get an existing SpAuthenticationPolicyContractMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpAuthenticationPolicyContractMappingState, opts?: pulumi.CustomResourceOptions): SpAuthenticationPolicyContractMapping {
        return new SpAuthenticationPolicyContractMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/spAuthenticationPolicyContractMapping:SpAuthenticationPolicyContractMapping';

    /**
     * Returns true if the given object is an instance of SpAuthenticationPolicyContractMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpAuthenticationPolicyContractMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpAuthenticationPolicyContractMapping.__pulumiType;
    }

    /**
     * Defines how an attribute in an attribute contract should be populated.
     */
    public readonly attributeContractFulfillment!: pulumi.Output<{[key: string]: outputs.SpAuthenticationPolicyContractMappingAttributeContractFulfillment}>;
    /**
     * A list of configured data stores to look up attributes from.
     */
    public readonly attributeSources!: pulumi.Output<outputs.SpAuthenticationPolicyContractMappingAttributeSource[]>;
    /**
     * Default target URL for this APC-to-adapter mapping configuration.
     */
    public readonly defaultTargetResource!: pulumi.Output<string | undefined>;
    /**
     * The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.
     */
    public readonly issuanceCriteria!: pulumi.Output<outputs.SpAuthenticationPolicyContractMappingIssuanceCriteria>;
    /**
     * The license connection group
     */
    public readonly licenseConnectionGroupAssignment!: pulumi.Output<string | undefined>;
    /**
     * The id of the APC-to-SP Adapter mapping.
     */
    public /*out*/ readonly mappingId!: pulumi.Output<string>;
    /**
     * The id of the Authentication Policy Contract.
     */
    public readonly sourceId!: pulumi.Output<string>;
    /**
     * The id of the SP Adapter.
     */
    public readonly targetId!: pulumi.Output<string>;

    /**
     * Create a SpAuthenticationPolicyContractMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpAuthenticationPolicyContractMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpAuthenticationPolicyContractMappingArgs | SpAuthenticationPolicyContractMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpAuthenticationPolicyContractMappingState | undefined;
            resourceInputs["attributeContractFulfillment"] = state ? state.attributeContractFulfillment : undefined;
            resourceInputs["attributeSources"] = state ? state.attributeSources : undefined;
            resourceInputs["defaultTargetResource"] = state ? state.defaultTargetResource : undefined;
            resourceInputs["issuanceCriteria"] = state ? state.issuanceCriteria : undefined;
            resourceInputs["licenseConnectionGroupAssignment"] = state ? state.licenseConnectionGroupAssignment : undefined;
            resourceInputs["mappingId"] = state ? state.mappingId : undefined;
            resourceInputs["sourceId"] = state ? state.sourceId : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
        } else {
            const args = argsOrState as SpAuthenticationPolicyContractMappingArgs | undefined;
            if ((!args || args.attributeContractFulfillment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'attributeContractFulfillment'");
            }
            if ((!args || args.sourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceId'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            resourceInputs["attributeContractFulfillment"] = args ? args.attributeContractFulfillment : undefined;
            resourceInputs["attributeSources"] = args ? args.attributeSources : undefined;
            resourceInputs["defaultTargetResource"] = args ? args.defaultTargetResource : undefined;
            resourceInputs["issuanceCriteria"] = args ? args.issuanceCriteria : undefined;
            resourceInputs["licenseConnectionGroupAssignment"] = args ? args.licenseConnectionGroupAssignment : undefined;
            resourceInputs["sourceId"] = args ? args.sourceId : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["mappingId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpAuthenticationPolicyContractMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SpAuthenticationPolicyContractMapping resources.
 */
export interface SpAuthenticationPolicyContractMappingState {
    /**
     * Defines how an attribute in an attribute contract should be populated.
     */
    attributeContractFulfillment?: pulumi.Input<{[key: string]: pulumi.Input<inputs.SpAuthenticationPolicyContractMappingAttributeContractFulfillment>}>;
    /**
     * A list of configured data stores to look up attributes from.
     */
    attributeSources?: pulumi.Input<pulumi.Input<inputs.SpAuthenticationPolicyContractMappingAttributeSource>[]>;
    /**
     * Default target URL for this APC-to-adapter mapping configuration.
     */
    defaultTargetResource?: pulumi.Input<string>;
    /**
     * The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.
     */
    issuanceCriteria?: pulumi.Input<inputs.SpAuthenticationPolicyContractMappingIssuanceCriteria>;
    /**
     * The license connection group
     */
    licenseConnectionGroupAssignment?: pulumi.Input<string>;
    /**
     * The id of the APC-to-SP Adapter mapping.
     */
    mappingId?: pulumi.Input<string>;
    /**
     * The id of the Authentication Policy Contract.
     */
    sourceId?: pulumi.Input<string>;
    /**
     * The id of the SP Adapter.
     */
    targetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpAuthenticationPolicyContractMapping resource.
 */
export interface SpAuthenticationPolicyContractMappingArgs {
    /**
     * Defines how an attribute in an attribute contract should be populated.
     */
    attributeContractFulfillment: pulumi.Input<{[key: string]: pulumi.Input<inputs.SpAuthenticationPolicyContractMappingAttributeContractFulfillment>}>;
    /**
     * A list of configured data stores to look up attributes from.
     */
    attributeSources?: pulumi.Input<pulumi.Input<inputs.SpAuthenticationPolicyContractMappingAttributeSource>[]>;
    /**
     * Default target URL for this APC-to-adapter mapping configuration.
     */
    defaultTargetResource?: pulumi.Input<string>;
    /**
     * The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.
     */
    issuanceCriteria?: pulumi.Input<inputs.SpAuthenticationPolicyContractMappingIssuanceCriteria>;
    /**
     * The license connection group
     */
    licenseConnectionGroupAssignment?: pulumi.Input<string>;
    /**
     * The id of the Authentication Policy Contract.
     */
    sourceId: pulumi.Input<string>;
    /**
     * The id of the SP Adapter.
     */
    targetId: pulumi.Input<string>;
}
