// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class AuthenticationPolicyFragment extends pulumi.CustomResource {
    /**
     * Get an existing AuthenticationPolicyFragment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthenticationPolicyFragmentState, opts?: pulumi.CustomResourceOptions): AuthenticationPolicyFragment {
        return new AuthenticationPolicyFragment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/authenticationPolicyFragment:AuthenticationPolicyFragment';

    /**
     * Returns true if the given object is an instance of AuthenticationPolicyFragment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthenticationPolicyFragment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthenticationPolicyFragment.__pulumiType;
    }

    /**
     * A description for the authentication policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The reference to the authentication policy contract to use as the attribute inputs for this authentication policy
     * fragment.
     */
    public readonly inputs!: pulumi.Output<outputs.AuthenticationPolicyFragmentInputs>;
    /**
     * The authentication policy fragment name. Name is unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The reference to the authentication policy contract to use as the attribute outputs for this authentication policy
     * fragment.
     */
    public readonly outputs!: pulumi.Output<outputs.AuthenticationPolicyFragmentOutputs>;
    /**
     * The authentication policy fragment ID. ID is unique.
     */
    public readonly policyFragmentId!: pulumi.Output<string>;
    /**
     * A node inside the authentication policy tree.
     */
    public readonly rootNode!: pulumi.Output<outputs.AuthenticationPolicyFragmentRootNode>;

    /**
     * Create a AuthenticationPolicyFragment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthenticationPolicyFragmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthenticationPolicyFragmentArgs | AuthenticationPolicyFragmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthenticationPolicyFragmentState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["outputs"] = state ? state.outputs : undefined;
            resourceInputs["policyFragmentId"] = state ? state.policyFragmentId : undefined;
            resourceInputs["rootNode"] = state ? state.rootNode : undefined;
        } else {
            const args = argsOrState as AuthenticationPolicyFragmentArgs | undefined;
            if ((!args || args.inputs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputs'");
            }
            if ((!args || args.outputs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outputs'");
            }
            if ((!args || args.rootNode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootNode'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["outputs"] = args ? args.outputs : undefined;
            resourceInputs["policyFragmentId"] = args ? args.policyFragmentId : undefined;
            resourceInputs["rootNode"] = args ? args.rootNode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthenticationPolicyFragment.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthenticationPolicyFragment resources.
 */
export interface AuthenticationPolicyFragmentState {
    /**
     * A description for the authentication policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The reference to the authentication policy contract to use as the attribute inputs for this authentication policy
     * fragment.
     */
    inputs?: pulumi.Input<inputs.AuthenticationPolicyFragmentInputs>;
    /**
     * The authentication policy fragment name. Name is unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The reference to the authentication policy contract to use as the attribute outputs for this authentication policy
     * fragment.
     */
    outputs?: pulumi.Input<inputs.AuthenticationPolicyFragmentOutputs>;
    /**
     * The authentication policy fragment ID. ID is unique.
     */
    policyFragmentId?: pulumi.Input<string>;
    /**
     * A node inside the authentication policy tree.
     */
    rootNode?: pulumi.Input<inputs.AuthenticationPolicyFragmentRootNode>;
}

/**
 * The set of arguments for constructing a AuthenticationPolicyFragment resource.
 */
export interface AuthenticationPolicyFragmentArgs {
    /**
     * A description for the authentication policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The reference to the authentication policy contract to use as the attribute inputs for this authentication policy
     * fragment.
     */
    inputs: pulumi.Input<inputs.AuthenticationPolicyFragmentInputs>;
    /**
     * The authentication policy fragment name. Name is unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The reference to the authentication policy contract to use as the attribute outputs for this authentication policy
     * fragment.
     */
    outputs: pulumi.Input<inputs.AuthenticationPolicyFragmentOutputs>;
    /**
     * The authentication policy fragment ID. ID is unique.
     */
    policyFragmentId?: pulumi.Input<string>;
    /**
     * A node inside the authentication policy tree.
     */
    rootNode: pulumi.Input<inputs.AuthenticationPolicyFragmentRootNode>;
}
