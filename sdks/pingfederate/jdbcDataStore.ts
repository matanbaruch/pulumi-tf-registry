// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class JdbcDataStore extends pulumi.CustomResource {
    /**
     * Get an existing JdbcDataStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JdbcDataStoreState, opts?: pulumi.CustomResourceOptions): JdbcDataStore {
        return new JdbcDataStore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/jdbcDataStore:JdbcDataStore';

    /**
     * Returns true if the given object is an instance of JdbcDataStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JdbcDataStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JdbcDataStore.__pulumiType;
    }

    /**
     * Indicates that this data store can select more than one record from a column and return the results as a multi-value
     * attribute.
     */
    public readonly allowMultiValueAttributes!: pulumi.Output<boolean | undefined>;
    /**
     * The amount of time in milliseconds a request waits to get a connection from the connection pool before it fails.
     * Omitting this attribute will set the value to the connection pool default.
     */
    public readonly blockingTimeout!: pulumi.Output<number | undefined>;
    /**
     * The default location of the JDBC database. This field is required if no mapping for JDBC database location and tags are
     * specified.
     */
    public readonly connectionUrl!: pulumi.Output<string>;
    /**
     * The set of connection URLs and associated tags for this JDBC data store.
     */
    public readonly connectionUrlTags!: pulumi.Output<outputs.JdbcDataStoreConnectionUrlTag[] | undefined>;
    /**
     * The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is
     * system-assigned if not specified.
     */
    public readonly dataStoreId!: pulumi.Output<string>;
    /**
     * The name of the driver class used to communicate with the source database.
     */
    public readonly driverClass!: pulumi.Output<string>;
    /**
     * The encrypted password needed to access the database. If you do not want to update the stored value, this attribute
     * should be passed back unchanged.
     */
    public readonly encryptedPassword!: pulumi.Output<string>;
    /**
     * The length of time in minutes the connection can be idle in the pool before it is closed. Omitting this attribute will
     * set the value to the connection pool default.
     */
    public readonly idleTimeout!: pulumi.Output<number | undefined>;
    /**
     * Whether attribute values should be masked in the log.
     */
    public readonly maskAttributeValues!: pulumi.Output<boolean | undefined>;
    /**
     * The largest number of database connections in the connection pool for the given data store. Omitting this attribute will
     * set the value to the connection pool default.
     */
    public readonly maxPoolSize!: pulumi.Output<number | undefined>;
    /**
     * The smallest number of database connections in the connection pool for the given data store. Omitting this attribute
     * will set the value to the connection pool default.
     */
    public readonly minPoolSize!: pulumi.Output<number | undefined>;
    /**
     * The data store name with a unique value across all data sources. Omitting this attribute will set the value to a
     * combination of the connection url and the username.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password needed to access the database. GETs will not return this attribute. To update this field, specify the new
     * value in this attribute.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The name that identifies the user when connecting to the database.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * A simple SQL statement used by PingFederate at runtime to verify that the database connection is still active and to
     * reconnect if needed.
     */
    public readonly validateConnectionSql!: pulumi.Output<string | undefined>;

    /**
     * Create a JdbcDataStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JdbcDataStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JdbcDataStoreArgs | JdbcDataStoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JdbcDataStoreState | undefined;
            resourceInputs["allowMultiValueAttributes"] = state ? state.allowMultiValueAttributes : undefined;
            resourceInputs["blockingTimeout"] = state ? state.blockingTimeout : undefined;
            resourceInputs["connectionUrl"] = state ? state.connectionUrl : undefined;
            resourceInputs["connectionUrlTags"] = state ? state.connectionUrlTags : undefined;
            resourceInputs["dataStoreId"] = state ? state.dataStoreId : undefined;
            resourceInputs["driverClass"] = state ? state.driverClass : undefined;
            resourceInputs["encryptedPassword"] = state ? state.encryptedPassword : undefined;
            resourceInputs["idleTimeout"] = state ? state.idleTimeout : undefined;
            resourceInputs["maskAttributeValues"] = state ? state.maskAttributeValues : undefined;
            resourceInputs["maxPoolSize"] = state ? state.maxPoolSize : undefined;
            resourceInputs["minPoolSize"] = state ? state.minPoolSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["validateConnectionSql"] = state ? state.validateConnectionSql : undefined;
        } else {
            const args = argsOrState as JdbcDataStoreArgs | undefined;
            if ((!args || args.connectionUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionUrl'");
            }
            if ((!args || args.driverClass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'driverClass'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["allowMultiValueAttributes"] = args ? args.allowMultiValueAttributes : undefined;
            resourceInputs["blockingTimeout"] = args ? args.blockingTimeout : undefined;
            resourceInputs["connectionUrl"] = args ? args.connectionUrl : undefined;
            resourceInputs["connectionUrlTags"] = args ? args.connectionUrlTags : undefined;
            resourceInputs["dataStoreId"] = args ? args.dataStoreId : undefined;
            resourceInputs["driverClass"] = args ? args.driverClass : undefined;
            resourceInputs["encryptedPassword"] = args ? args.encryptedPassword : undefined;
            resourceInputs["idleTimeout"] = args ? args.idleTimeout : undefined;
            resourceInputs["maskAttributeValues"] = args ? args.maskAttributeValues : undefined;
            resourceInputs["maxPoolSize"] = args ? args.maxPoolSize : undefined;
            resourceInputs["minPoolSize"] = args ? args.minPoolSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["validateConnectionSql"] = args ? args.validateConnectionSql : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(JdbcDataStore.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JdbcDataStore resources.
 */
export interface JdbcDataStoreState {
    /**
     * Indicates that this data store can select more than one record from a column and return the results as a multi-value
     * attribute.
     */
    allowMultiValueAttributes?: pulumi.Input<boolean>;
    /**
     * The amount of time in milliseconds a request waits to get a connection from the connection pool before it fails.
     * Omitting this attribute will set the value to the connection pool default.
     */
    blockingTimeout?: pulumi.Input<number>;
    /**
     * The default location of the JDBC database. This field is required if no mapping for JDBC database location and tags are
     * specified.
     */
    connectionUrl?: pulumi.Input<string>;
    /**
     * The set of connection URLs and associated tags for this JDBC data store.
     */
    connectionUrlTags?: pulumi.Input<pulumi.Input<inputs.JdbcDataStoreConnectionUrlTag>[]>;
    /**
     * The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is
     * system-assigned if not specified.
     */
    dataStoreId?: pulumi.Input<string>;
    /**
     * The name of the driver class used to communicate with the source database.
     */
    driverClass?: pulumi.Input<string>;
    /**
     * The encrypted password needed to access the database. If you do not want to update the stored value, this attribute
     * should be passed back unchanged.
     */
    encryptedPassword?: pulumi.Input<string>;
    /**
     * The length of time in minutes the connection can be idle in the pool before it is closed. Omitting this attribute will
     * set the value to the connection pool default.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Whether attribute values should be masked in the log.
     */
    maskAttributeValues?: pulumi.Input<boolean>;
    /**
     * The largest number of database connections in the connection pool for the given data store. Omitting this attribute will
     * set the value to the connection pool default.
     */
    maxPoolSize?: pulumi.Input<number>;
    /**
     * The smallest number of database connections in the connection pool for the given data store. Omitting this attribute
     * will set the value to the connection pool default.
     */
    minPoolSize?: pulumi.Input<number>;
    /**
     * The data store name with a unique value across all data sources. Omitting this attribute will set the value to a
     * combination of the connection url and the username.
     */
    name?: pulumi.Input<string>;
    /**
     * The password needed to access the database. GETs will not return this attribute. To update this field, specify the new
     * value in this attribute.
     */
    password?: pulumi.Input<string>;
    /**
     * The name that identifies the user when connecting to the database.
     */
    userName?: pulumi.Input<string>;
    /**
     * A simple SQL statement used by PingFederate at runtime to verify that the database connection is still active and to
     * reconnect if needed.
     */
    validateConnectionSql?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JdbcDataStore resource.
 */
export interface JdbcDataStoreArgs {
    /**
     * Indicates that this data store can select more than one record from a column and return the results as a multi-value
     * attribute.
     */
    allowMultiValueAttributes?: pulumi.Input<boolean>;
    /**
     * The amount of time in milliseconds a request waits to get a connection from the connection pool before it fails.
     * Omitting this attribute will set the value to the connection pool default.
     */
    blockingTimeout?: pulumi.Input<number>;
    /**
     * The default location of the JDBC database. This field is required if no mapping for JDBC database location and tags are
     * specified.
     */
    connectionUrl: pulumi.Input<string>;
    /**
     * The set of connection URLs and associated tags for this JDBC data store.
     */
    connectionUrlTags?: pulumi.Input<pulumi.Input<inputs.JdbcDataStoreConnectionUrlTag>[]>;
    /**
     * The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is
     * system-assigned if not specified.
     */
    dataStoreId?: pulumi.Input<string>;
    /**
     * The name of the driver class used to communicate with the source database.
     */
    driverClass: pulumi.Input<string>;
    /**
     * The encrypted password needed to access the database. If you do not want to update the stored value, this attribute
     * should be passed back unchanged.
     */
    encryptedPassword?: pulumi.Input<string>;
    /**
     * The length of time in minutes the connection can be idle in the pool before it is closed. Omitting this attribute will
     * set the value to the connection pool default.
     */
    idleTimeout?: pulumi.Input<number>;
    /**
     * Whether attribute values should be masked in the log.
     */
    maskAttributeValues?: pulumi.Input<boolean>;
    /**
     * The largest number of database connections in the connection pool for the given data store. Omitting this attribute will
     * set the value to the connection pool default.
     */
    maxPoolSize?: pulumi.Input<number>;
    /**
     * The smallest number of database connections in the connection pool for the given data store. Omitting this attribute
     * will set the value to the connection pool default.
     */
    minPoolSize?: pulumi.Input<number>;
    /**
     * The data store name with a unique value across all data sources. Omitting this attribute will set the value to a
     * combination of the connection url and the username.
     */
    name?: pulumi.Input<string>;
    /**
     * The password needed to access the database. GETs will not return this attribute. To update this field, specify the new
     * value in this attribute.
     */
    password?: pulumi.Input<string>;
    /**
     * The name that identifies the user when connecting to the database.
     */
    userName: pulumi.Input<string>;
    /**
     * A simple SQL statement used by PingFederate at runtime to verify that the database connection is still active and to
     * reconnect if needed.
     */
    validateConnectionSql?: pulumi.Input<string>;
}
