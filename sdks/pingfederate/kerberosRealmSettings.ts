// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KerberosRealmSettings extends pulumi.CustomResource {
    /**
     * Get an existing KerberosRealmSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KerberosRealmSettingsState, opts?: pulumi.CustomResourceOptions): KerberosRealmSettings {
        return new KerberosRealmSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/kerberosRealmSettings:KerberosRealmSettings';

    /**
     * Returns true if the given object is an instance of KerberosRealmSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KerberosRealmSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KerberosRealmSettings.__pulumiType;
    }

    /**
     * Reference to the default logging. Default value is `false`
     */
    public readonly debugLogOutput!: pulumi.Output<boolean>;
    /**
     * Reference to the default security. Default value is `false`
     */
    public readonly forceTcp!: pulumi.Output<boolean>;
    /**
     * Reference to the default Key Distribution Center Retries.
     */
    public readonly kdcRetries!: pulumi.Output<number>;
    /**
     * Reference to the default Key Distribution Center Timeout (in seconds).
     */
    public readonly kdcTimeout!: pulumi.Output<number>;
    /**
     * The key set retention period in minutes. When 'retain_previous_keys_on_password_change' is set to `true` for a realm,
     * this setting determines how long keys will be retained after a password change occurs. Default value is `610`
     */
    public readonly keySetRetentionPeriodMins!: pulumi.Output<number>;

    /**
     * Create a KerberosRealmSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KerberosRealmSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KerberosRealmSettingsArgs | KerberosRealmSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KerberosRealmSettingsState | undefined;
            resourceInputs["debugLogOutput"] = state ? state.debugLogOutput : undefined;
            resourceInputs["forceTcp"] = state ? state.forceTcp : undefined;
            resourceInputs["kdcRetries"] = state ? state.kdcRetries : undefined;
            resourceInputs["kdcTimeout"] = state ? state.kdcTimeout : undefined;
            resourceInputs["keySetRetentionPeriodMins"] = state ? state.keySetRetentionPeriodMins : undefined;
        } else {
            const args = argsOrState as KerberosRealmSettingsArgs | undefined;
            if ((!args || args.kdcRetries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kdcRetries'");
            }
            if ((!args || args.kdcTimeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kdcTimeout'");
            }
            resourceInputs["debugLogOutput"] = args ? args.debugLogOutput : undefined;
            resourceInputs["forceTcp"] = args ? args.forceTcp : undefined;
            resourceInputs["kdcRetries"] = args ? args.kdcRetries : undefined;
            resourceInputs["kdcTimeout"] = args ? args.kdcTimeout : undefined;
            resourceInputs["keySetRetentionPeriodMins"] = args ? args.keySetRetentionPeriodMins : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KerberosRealmSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KerberosRealmSettings resources.
 */
export interface KerberosRealmSettingsState {
    /**
     * Reference to the default logging. Default value is `false`
     */
    debugLogOutput?: pulumi.Input<boolean>;
    /**
     * Reference to the default security. Default value is `false`
     */
    forceTcp?: pulumi.Input<boolean>;
    /**
     * Reference to the default Key Distribution Center Retries.
     */
    kdcRetries?: pulumi.Input<number>;
    /**
     * Reference to the default Key Distribution Center Timeout (in seconds).
     */
    kdcTimeout?: pulumi.Input<number>;
    /**
     * The key set retention period in minutes. When 'retain_previous_keys_on_password_change' is set to `true` for a realm,
     * this setting determines how long keys will be retained after a password change occurs. Default value is `610`
     */
    keySetRetentionPeriodMins?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a KerberosRealmSettings resource.
 */
export interface KerberosRealmSettingsArgs {
    /**
     * Reference to the default logging. Default value is `false`
     */
    debugLogOutput?: pulumi.Input<boolean>;
    /**
     * Reference to the default security. Default value is `false`
     */
    forceTcp?: pulumi.Input<boolean>;
    /**
     * Reference to the default Key Distribution Center Retries.
     */
    kdcRetries: pulumi.Input<number>;
    /**
     * Reference to the default Key Distribution Center Timeout (in seconds).
     */
    kdcTimeout: pulumi.Input<number>;
    /**
     * The key set retention period in minutes. When 'retain_previous_keys_on_password_change' is set to `true` for a realm,
     * this setting determines how long keys will be retained after a password change occurs. Default value is `610`
     */
    keySetRetentionPeriodMins?: pulumi.Input<number>;
}
