// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SessionSettings extends pulumi.CustomResource {
    /**
     * Get an existing SessionSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SessionSettingsState, opts?: pulumi.CustomResourceOptions): SessionSettings {
        return new SessionSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/sessionSettings:SessionSettings';

    /**
     * Returns true if the given object is an instance of SessionSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SessionSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SessionSettings.__pulumiType;
    }

    /**
     * Determines whether the user's session is revoked on logout. If this property is not provided on a PUT, the setting is
     * left unchanged.
     */
    public readonly revokeUserSessionOnLogout!: pulumi.Output<boolean | undefined>;
    /**
     * How long a session revocation is tracked and stored, in minutes. If this property is not provided on a PUT, the setting
     * is left unchanged.
     */
    public readonly sessionRevocationLifetime!: pulumi.Output<number | undefined>;
    /**
     * Determines whether adapter sessions are tracked for cleanup during single logout. The default is false.
     */
    public readonly trackAdapterSessionsForLogout!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SessionSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SessionSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SessionSettingsArgs | SessionSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SessionSettingsState | undefined;
            resourceInputs["revokeUserSessionOnLogout"] = state ? state.revokeUserSessionOnLogout : undefined;
            resourceInputs["sessionRevocationLifetime"] = state ? state.sessionRevocationLifetime : undefined;
            resourceInputs["trackAdapterSessionsForLogout"] = state ? state.trackAdapterSessionsForLogout : undefined;
        } else {
            const args = argsOrState as SessionSettingsArgs | undefined;
            resourceInputs["revokeUserSessionOnLogout"] = args ? args.revokeUserSessionOnLogout : undefined;
            resourceInputs["sessionRevocationLifetime"] = args ? args.sessionRevocationLifetime : undefined;
            resourceInputs["trackAdapterSessionsForLogout"] = args ? args.trackAdapterSessionsForLogout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SessionSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SessionSettings resources.
 */
export interface SessionSettingsState {
    /**
     * Determines whether the user's session is revoked on logout. If this property is not provided on a PUT, the setting is
     * left unchanged.
     */
    revokeUserSessionOnLogout?: pulumi.Input<boolean>;
    /**
     * How long a session revocation is tracked and stored, in minutes. If this property is not provided on a PUT, the setting
     * is left unchanged.
     */
    sessionRevocationLifetime?: pulumi.Input<number>;
    /**
     * Determines whether adapter sessions are tracked for cleanup during single logout. The default is false.
     */
    trackAdapterSessionsForLogout?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SessionSettings resource.
 */
export interface SessionSettingsArgs {
    /**
     * Determines whether the user's session is revoked on logout. If this property is not provided on a PUT, the setting is
     * left unchanged.
     */
    revokeUserSessionOnLogout?: pulumi.Input<boolean>;
    /**
     * How long a session revocation is tracked and stored, in minutes. If this property is not provided on a PUT, the setting
     * is left unchanged.
     */
    sessionRevocationLifetime?: pulumi.Input<number>;
    /**
     * Determines whether adapter sessions are tracked for cleanup during single logout. The default is false.
     */
    trackAdapterSessionsForLogout?: pulumi.Input<boolean>;
}
