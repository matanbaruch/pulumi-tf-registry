// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KeypairSslServerSettings extends pulumi.CustomResource {
    /**
     * Get an existing KeypairSslServerSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairSslServerSettingsState, opts?: pulumi.CustomResourceOptions): KeypairSslServerSettings {
        return new KeypairSslServerSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/keypairSslServerSettings:KeypairSslServerSettings';

    /**
     * Returns true if the given object is an instance of KeypairSslServerSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeypairSslServerSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeypairSslServerSettings.__pulumiType;
    }

    /**
     * The active SSL Server Certificate Key pairs for PF Administrator Console.
     */
    public readonly activeAdminServerCerts!: pulumi.Output<string[]>;
    /**
     * The active SSL Server Certificate Key pairs for Runtime Server.
     */
    public readonly activeRuntimeServerCerts!: pulumi.Output<string[]>;
    /**
     * Reference to the default SSL Server Certificate Key pair active for PF Administrator Console.
     */
    public readonly adminServerCert!: pulumi.Output<string>;
    /**
     * Reference to the default SSL Server Certificate Key pair active for Runtime Server.
     */
    public readonly runtimeServerCert!: pulumi.Output<string>;

    /**
     * Create a KeypairSslServerSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeypairSslServerSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeypairSslServerSettingsArgs | KeypairSslServerSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeypairSslServerSettingsState | undefined;
            resourceInputs["activeAdminServerCerts"] = state ? state.activeAdminServerCerts : undefined;
            resourceInputs["activeRuntimeServerCerts"] = state ? state.activeRuntimeServerCerts : undefined;
            resourceInputs["adminServerCert"] = state ? state.adminServerCert : undefined;
            resourceInputs["runtimeServerCert"] = state ? state.runtimeServerCert : undefined;
        } else {
            const args = argsOrState as KeypairSslServerSettingsArgs | undefined;
            if ((!args || args.activeAdminServerCerts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'activeAdminServerCerts'");
            }
            if ((!args || args.activeRuntimeServerCerts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'activeRuntimeServerCerts'");
            }
            if ((!args || args.adminServerCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'adminServerCert'");
            }
            if ((!args || args.runtimeServerCert === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtimeServerCert'");
            }
            resourceInputs["activeAdminServerCerts"] = args ? args.activeAdminServerCerts : undefined;
            resourceInputs["activeRuntimeServerCerts"] = args ? args.activeRuntimeServerCerts : undefined;
            resourceInputs["adminServerCert"] = args ? args.adminServerCert : undefined;
            resourceInputs["runtimeServerCert"] = args ? args.runtimeServerCert : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeypairSslServerSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering KeypairSslServerSettings resources.
 */
export interface KeypairSslServerSettingsState {
    /**
     * The active SSL Server Certificate Key pairs for PF Administrator Console.
     */
    activeAdminServerCerts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The active SSL Server Certificate Key pairs for Runtime Server.
     */
    activeRuntimeServerCerts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reference to the default SSL Server Certificate Key pair active for PF Administrator Console.
     */
    adminServerCert?: pulumi.Input<string>;
    /**
     * Reference to the default SSL Server Certificate Key pair active for Runtime Server.
     */
    runtimeServerCert?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeypairSslServerSettings resource.
 */
export interface KeypairSslServerSettingsArgs {
    /**
     * The active SSL Server Certificate Key pairs for PF Administrator Console.
     */
    activeAdminServerCerts: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The active SSL Server Certificate Key pairs for Runtime Server.
     */
    activeRuntimeServerCerts: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reference to the default SSL Server Certificate Key pair active for PF Administrator Console.
     */
    adminServerCert: pulumi.Input<string>;
    /**
     * Reference to the default SSL Server Certificate Key pair active for Runtime Server.
     */
    runtimeServerCert: pulumi.Input<string>;
}
