// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class License extends pulumi.CustomResource {
    /**
     * Get an existing License resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LicenseState, opts?: pulumi.CustomResourceOptions): License {
        return new License(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/license:License';

    /**
     * Returns true if the given object is an instance of License.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is License {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === License.__pulumiType;
    }

    /**
     * Indicates whether this license is a bridge license or not.
     */
    public /*out*/ readonly bridgeMode!: pulumi.Output<boolean>;
    /**
     * The enforcement type is a 3-bit binary value, expressed as a decimal digit. The bits from left to right are: 1: Shutdown
     * on expire. 2: Notify on expire. 4: Enforce minor version. if all three enforcements are active, the enforcement type
     * will be 7 (1 + 2 + 4); if only the first two are active, you have an enforcement type of 3 (1 + 2).
     */
    public /*out*/ readonly enforcementType!: pulumi.Output<string>;
    /**
     * The expiration date value from the license file (if applicable).
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * Other licence features, if applicable.
     */
    public /*out*/ readonly features!: pulumi.Output<outputs.LicenseFeature[]>;
    public readonly fileData!: pulumi.Output<string>;
    /**
     * Number of days provided as grace period, past the expiration date (if applicable).
     */
    public /*out*/ readonly gracePeriod!: pulumi.Output<number>;
    /**
     * The issue date value from the license file.
     */
    public /*out*/ readonly issueDate!: pulumi.Output<string>;
    /**
     * License connection groups, if applicable.
     */
    public /*out*/ readonly licenseGroups!: pulumi.Output<outputs.LicenseLicenseGroup[]>;
    /**
     * Maximum number of connections that can be created under this license (if applicable).
     */
    public /*out*/ readonly maxConnections!: pulumi.Output<number>;
    /**
     * Name of the person the license was issued to.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Maximum number of clustered nodes allowed under this license (if applicable).
     */
    public /*out*/ readonly nodeLimit!: pulumi.Output<number>;
    /**
     * Indicates whether OAuth role is enabled for this license.
     */
    public /*out*/ readonly oauthEnabled!: pulumi.Output<boolean>;
    /**
     * The organization value from the license file.
     */
    public /*out*/ readonly organization!: pulumi.Output<string>;
    /**
     * The Ping Identity product value from the license file.
     */
    public /*out*/ readonly product!: pulumi.Output<string>;
    /**
     * Indicates whether Provisioning role is enabled for this license.
     */
    public /*out*/ readonly provisioningEnabled!: pulumi.Output<boolean>;
    /**
     * The tier value from the license file. The possible values are FREE, PERPETUAL or SUBSCRIPTION.
     */
    public /*out*/ readonly tier!: pulumi.Output<string>;
    /**
     * Number of used connections under this license.
     */
    public /*out*/ readonly usedConnections!: pulumi.Output<number>;
    /**
     * The Ping Identity product version from the license file.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;
    /**
     * Indicates whether WS-Trust role is enabled for this license.
     */
    public /*out*/ readonly wsTrustEnabled!: pulumi.Output<boolean>;

    /**
     * Create a License resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LicenseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LicenseArgs | LicenseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LicenseState | undefined;
            resourceInputs["bridgeMode"] = state ? state.bridgeMode : undefined;
            resourceInputs["enforcementType"] = state ? state.enforcementType : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["fileData"] = state ? state.fileData : undefined;
            resourceInputs["gracePeriod"] = state ? state.gracePeriod : undefined;
            resourceInputs["issueDate"] = state ? state.issueDate : undefined;
            resourceInputs["licenseGroups"] = state ? state.licenseGroups : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeLimit"] = state ? state.nodeLimit : undefined;
            resourceInputs["oauthEnabled"] = state ? state.oauthEnabled : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["product"] = state ? state.product : undefined;
            resourceInputs["provisioningEnabled"] = state ? state.provisioningEnabled : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["usedConnections"] = state ? state.usedConnections : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["wsTrustEnabled"] = state ? state.wsTrustEnabled : undefined;
        } else {
            const args = argsOrState as LicenseArgs | undefined;
            if ((!args || args.fileData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileData'");
            }
            resourceInputs["fileData"] = args ? args.fileData : undefined;
            resourceInputs["bridgeMode"] = undefined /*out*/;
            resourceInputs["enforcementType"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["features"] = undefined /*out*/;
            resourceInputs["gracePeriod"] = undefined /*out*/;
            resourceInputs["issueDate"] = undefined /*out*/;
            resourceInputs["licenseGroups"] = undefined /*out*/;
            resourceInputs["maxConnections"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["nodeLimit"] = undefined /*out*/;
            resourceInputs["oauthEnabled"] = undefined /*out*/;
            resourceInputs["organization"] = undefined /*out*/;
            resourceInputs["product"] = undefined /*out*/;
            resourceInputs["provisioningEnabled"] = undefined /*out*/;
            resourceInputs["tier"] = undefined /*out*/;
            resourceInputs["usedConnections"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
            resourceInputs["wsTrustEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(License.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering License resources.
 */
export interface LicenseState {
    /**
     * Indicates whether this license is a bridge license or not.
     */
    bridgeMode?: pulumi.Input<boolean>;
    /**
     * The enforcement type is a 3-bit binary value, expressed as a decimal digit. The bits from left to right are: 1: Shutdown
     * on expire. 2: Notify on expire. 4: Enforce minor version. if all three enforcements are active, the enforcement type
     * will be 7 (1 + 2 + 4); if only the first two are active, you have an enforcement type of 3 (1 + 2).
     */
    enforcementType?: pulumi.Input<string>;
    /**
     * The expiration date value from the license file (if applicable).
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * Other licence features, if applicable.
     */
    features?: pulumi.Input<pulumi.Input<inputs.LicenseFeature>[]>;
    fileData?: pulumi.Input<string>;
    /**
     * Number of days provided as grace period, past the expiration date (if applicable).
     */
    gracePeriod?: pulumi.Input<number>;
    /**
     * The issue date value from the license file.
     */
    issueDate?: pulumi.Input<string>;
    /**
     * License connection groups, if applicable.
     */
    licenseGroups?: pulumi.Input<pulumi.Input<inputs.LicenseLicenseGroup>[]>;
    /**
     * Maximum number of connections that can be created under this license (if applicable).
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * Name of the person the license was issued to.
     */
    name?: pulumi.Input<string>;
    /**
     * Maximum number of clustered nodes allowed under this license (if applicable).
     */
    nodeLimit?: pulumi.Input<number>;
    /**
     * Indicates whether OAuth role is enabled for this license.
     */
    oauthEnabled?: pulumi.Input<boolean>;
    /**
     * The organization value from the license file.
     */
    organization?: pulumi.Input<string>;
    /**
     * The Ping Identity product value from the license file.
     */
    product?: pulumi.Input<string>;
    /**
     * Indicates whether Provisioning role is enabled for this license.
     */
    provisioningEnabled?: pulumi.Input<boolean>;
    /**
     * The tier value from the license file. The possible values are FREE, PERPETUAL or SUBSCRIPTION.
     */
    tier?: pulumi.Input<string>;
    /**
     * Number of used connections under this license.
     */
    usedConnections?: pulumi.Input<number>;
    /**
     * The Ping Identity product version from the license file.
     */
    version?: pulumi.Input<string>;
    /**
     * Indicates whether WS-Trust role is enabled for this license.
     */
    wsTrustEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a License resource.
 */
export interface LicenseArgs {
    fileData: pulumi.Input<string>;
}
