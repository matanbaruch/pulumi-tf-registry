// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class IncomingProxySettings extends pulumi.CustomResource {
    /**
     * Get an existing IncomingProxySettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IncomingProxySettingsState, opts?: pulumi.CustomResourceOptions): IncomingProxySettings {
        return new IncomingProxySettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'pingfederate:index/incomingProxySettings:IncomingProxySettings';

    /**
     * Returns true if the given object is an instance of IncomingProxySettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IncomingProxySettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IncomingProxySettings.__pulumiType;
    }

    /**
     * While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name
     * here.
     */
    public readonly clientCertChainSslheaderName!: pulumi.Output<string | undefined>;
    /**
     * While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here.
     */
    public readonly clientCertSslheaderName!: pulumi.Output<string | undefined>;
    /**
     * PingFederate combines multiple comma-separated header values into the same order that they are received. Define which
     * hostname you want to use. Default is to use the last hostname.
     */
    public readonly forwardedHostHeaderIndex!: pulumi.Output<string | undefined>;
    /**
     * Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the
     * hostname and port in all HTTP requests.
     */
    public readonly forwardedHostHeaderName!: pulumi.Output<string | undefined>;
    /**
     * PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP
     * address you want to use. Default is to use the last address.
     */
    public readonly forwardedIpAddressHeaderIndex!: pulumi.Output<string | undefined>;
    /**
     * Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client
     * IP address in all HTTP requests.
     */
    public readonly forwardedIpAddressHeaderName!: pulumi.Output<string | undefined>;
    /**
     * Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between
     * the reverse proxy and PingFederate.
     */
    public readonly proxyTerminatesHttpsConns!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IncomingProxySettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IncomingProxySettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IncomingProxySettingsArgs | IncomingProxySettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IncomingProxySettingsState | undefined;
            resourceInputs["clientCertChainSslheaderName"] = state ? state.clientCertChainSslheaderName : undefined;
            resourceInputs["clientCertSslheaderName"] = state ? state.clientCertSslheaderName : undefined;
            resourceInputs["forwardedHostHeaderIndex"] = state ? state.forwardedHostHeaderIndex : undefined;
            resourceInputs["forwardedHostHeaderName"] = state ? state.forwardedHostHeaderName : undefined;
            resourceInputs["forwardedIpAddressHeaderIndex"] = state ? state.forwardedIpAddressHeaderIndex : undefined;
            resourceInputs["forwardedIpAddressHeaderName"] = state ? state.forwardedIpAddressHeaderName : undefined;
            resourceInputs["proxyTerminatesHttpsConns"] = state ? state.proxyTerminatesHttpsConns : undefined;
        } else {
            const args = argsOrState as IncomingProxySettingsArgs | undefined;
            resourceInputs["clientCertChainSslheaderName"] = args ? args.clientCertChainSslheaderName : undefined;
            resourceInputs["clientCertSslheaderName"] = args ? args.clientCertSslheaderName : undefined;
            resourceInputs["forwardedHostHeaderIndex"] = args ? args.forwardedHostHeaderIndex : undefined;
            resourceInputs["forwardedHostHeaderName"] = args ? args.forwardedHostHeaderName : undefined;
            resourceInputs["forwardedIpAddressHeaderIndex"] = args ? args.forwardedIpAddressHeaderIndex : undefined;
            resourceInputs["forwardedIpAddressHeaderName"] = args ? args.forwardedIpAddressHeaderName : undefined;
            resourceInputs["proxyTerminatesHttpsConns"] = args ? args.proxyTerminatesHttpsConns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IncomingProxySettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IncomingProxySettings resources.
 */
export interface IncomingProxySettingsState {
    /**
     * While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name
     * here.
     */
    clientCertChainSslheaderName?: pulumi.Input<string>;
    /**
     * While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here.
     */
    clientCertSslheaderName?: pulumi.Input<string>;
    /**
     * PingFederate combines multiple comma-separated header values into the same order that they are received. Define which
     * hostname you want to use. Default is to use the last hostname.
     */
    forwardedHostHeaderIndex?: pulumi.Input<string>;
    /**
     * Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the
     * hostname and port in all HTTP requests.
     */
    forwardedHostHeaderName?: pulumi.Input<string>;
    /**
     * PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP
     * address you want to use. Default is to use the last address.
     */
    forwardedIpAddressHeaderIndex?: pulumi.Input<string>;
    /**
     * Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client
     * IP address in all HTTP requests.
     */
    forwardedIpAddressHeaderName?: pulumi.Input<string>;
    /**
     * Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between
     * the reverse proxy and PingFederate.
     */
    proxyTerminatesHttpsConns?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IncomingProxySettings resource.
 */
export interface IncomingProxySettingsArgs {
    /**
     * While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name
     * here.
     */
    clientCertChainSslheaderName?: pulumi.Input<string>;
    /**
     * While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here.
     */
    clientCertSslheaderName?: pulumi.Input<string>;
    /**
     * PingFederate combines multiple comma-separated header values into the same order that they are received. Define which
     * hostname you want to use. Default is to use the last hostname.
     */
    forwardedHostHeaderIndex?: pulumi.Input<string>;
    /**
     * Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the
     * hostname and port in all HTTP requests.
     */
    forwardedHostHeaderName?: pulumi.Input<string>;
    /**
     * PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP
     * address you want to use. Default is to use the last address.
     */
    forwardedIpAddressHeaderIndex?: pulumi.Input<string>;
    /**
     * Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client
     * IP address in all HTTP requests.
     */
    forwardedIpAddressHeaderName?: pulumi.Input<string>;
    /**
     * Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between
     * the reverse proxy and PingFederate.
     */
    proxyTerminatesHttpsConns?: pulumi.Input<boolean>;
}
