// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Blueprint extends pulumi.CustomResource {
    /**
     * Get an existing Blueprint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlueprintState, opts?: pulumi.CustomResourceOptions): Blueprint {
        return new Blueprint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/blueprint:Blueprint';

    /**
     * Returns true if the given object is an instance of Blueprint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Blueprint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Blueprint.__pulumiType;
    }

    public readonly content!: pulumi.Output<string | undefined>;
    public /*out*/ readonly contentSourceId!: pulumi.Output<string>;
    public /*out*/ readonly contentSourcePath!: pulumi.Output<string>;
    public /*out*/ readonly contentSourceSyncAt!: pulumi.Output<string>;
    public /*out*/ readonly contentSourceSyncMessages!: pulumi.Output<string[]>;
    public /*out*/ readonly contentSourceSyncStatus!: pulumi.Output<string>;
    public /*out*/ readonly contentSourceType!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly projectName!: pulumi.Output<string>;
    /**
     * Flag to indicate blueprint can be requested from any project in org
     */
    public readonly requestScopeOrg!: pulumi.Output<boolean>;
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly totalReleasedVersions!: pulumi.Output<number>;
    public /*out*/ readonly totalVersions!: pulumi.Output<number>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public /*out*/ readonly updatedBy!: pulumi.Output<string>;
    public /*out*/ readonly valid!: pulumi.Output<boolean>;
    public /*out*/ readonly validationMessages!: pulumi.Output<outputs.BlueprintValidationMessage[]>;

    /**
     * Create a Blueprint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlueprintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlueprintArgs | BlueprintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlueprintState | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentSourceId"] = state ? state.contentSourceId : undefined;
            resourceInputs["contentSourcePath"] = state ? state.contentSourcePath : undefined;
            resourceInputs["contentSourceSyncAt"] = state ? state.contentSourceSyncAt : undefined;
            resourceInputs["contentSourceSyncMessages"] = state ? state.contentSourceSyncMessages : undefined;
            resourceInputs["contentSourceSyncStatus"] = state ? state.contentSourceSyncStatus : undefined;
            resourceInputs["contentSourceType"] = state ? state.contentSourceType : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["requestScopeOrg"] = state ? state.requestScopeOrg : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["totalReleasedVersions"] = state ? state.totalReleasedVersions : undefined;
            resourceInputs["totalVersions"] = state ? state.totalVersions : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["updatedBy"] = state ? state.updatedBy : undefined;
            resourceInputs["valid"] = state ? state.valid : undefined;
            resourceInputs["validationMessages"] = state ? state.validationMessages : undefined;
        } else {
            const args = argsOrState as BlueprintArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["requestScopeOrg"] = args ? args.requestScopeOrg : undefined;
            resourceInputs["contentSourceId"] = undefined /*out*/;
            resourceInputs["contentSourcePath"] = undefined /*out*/;
            resourceInputs["contentSourceSyncAt"] = undefined /*out*/;
            resourceInputs["contentSourceSyncMessages"] = undefined /*out*/;
            resourceInputs["contentSourceSyncStatus"] = undefined /*out*/;
            resourceInputs["contentSourceType"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["projectName"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalReleasedVersions"] = undefined /*out*/;
            resourceInputs["totalVersions"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["updatedBy"] = undefined /*out*/;
            resourceInputs["valid"] = undefined /*out*/;
            resourceInputs["validationMessages"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Blueprint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Blueprint resources.
 */
export interface BlueprintState {
    content?: pulumi.Input<string>;
    contentSourceId?: pulumi.Input<string>;
    contentSourcePath?: pulumi.Input<string>;
    contentSourceSyncAt?: pulumi.Input<string>;
    contentSourceSyncMessages?: pulumi.Input<pulumi.Input<string>[]>;
    contentSourceSyncStatus?: pulumi.Input<string>;
    contentSourceType?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    projectName?: pulumi.Input<string>;
    /**
     * Flag to indicate blueprint can be requested from any project in org
     */
    requestScopeOrg?: pulumi.Input<boolean>;
    selfLink?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    totalReleasedVersions?: pulumi.Input<number>;
    totalVersions?: pulumi.Input<number>;
    updatedAt?: pulumi.Input<string>;
    updatedBy?: pulumi.Input<string>;
    valid?: pulumi.Input<boolean>;
    validationMessages?: pulumi.Input<pulumi.Input<inputs.BlueprintValidationMessage>[]>;
}

/**
 * The set of arguments for constructing a Blueprint resource.
 */
export interface BlueprintArgs {
    content?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    /**
     * Flag to indicate blueprint can be requested from any project in org
     */
    requestScopeOrg?: pulumi.Input<boolean>;
}
