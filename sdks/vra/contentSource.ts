// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContentSource extends pulumi.CustomResource {
    /**
     * Get an existing ContentSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentSourceState, opts?: pulumi.CustomResourceOptions): ContentSource {
        return new ContentSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/contentSource:ContentSource';

    /**
     * Returns true if the given object is an instance of ContentSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContentSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContentSource.__pulumiType;
    }

    public readonly config!: pulumi.Output<outputs.ContentSourceConfig>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastUpdatedAt!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly syncEnabled!: pulumi.Output<boolean>;
    public readonly typeId!: pulumi.Output<string>;

    /**
     * Create a ContentSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentSourceArgs | ContentSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentSourceState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdatedAt"] = state ? state.lastUpdatedAt : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["syncEnabled"] = state ? state.syncEnabled : undefined;
            resourceInputs["typeId"] = state ? state.typeId : undefined;
        } else {
            const args = argsOrState as ContentSourceArgs | undefined;
            if ((!args || args.config === undefined) && !opts.urn) {
                throw new Error("Missing required property 'config'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.syncEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncEnabled'");
            }
            if ((!args || args.typeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'typeId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["syncEnabled"] = args ? args.syncEnabled : undefined;
            resourceInputs["typeId"] = args ? args.typeId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContentSource.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContentSource resources.
 */
export interface ContentSourceState {
    config?: pulumi.Input<inputs.ContentSourceConfig>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    lastUpdatedAt?: pulumi.Input<string>;
    lastUpdatedBy?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    syncEnabled?: pulumi.Input<boolean>;
    typeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContentSource resource.
 */
export interface ContentSourceArgs {
    config: pulumi.Input<inputs.ContentSourceConfig>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    syncEnabled: pulumi.Input<boolean>;
    typeId: pulumi.Input<string>;
}
