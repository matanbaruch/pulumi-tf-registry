// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BlockDeviceArgs, BlockDeviceState } from "./blockDevice";
export type BlockDevice = import("./blockDevice").BlockDevice;
export const BlockDevice: typeof import("./blockDevice").BlockDevice = null as any;
utilities.lazyLoad(exports, ["BlockDevice"], () => require("./blockDevice"));

export { BlockDeviceSnapshotArgs, BlockDeviceSnapshotState } from "./blockDeviceSnapshot";
export type BlockDeviceSnapshot = import("./blockDeviceSnapshot").BlockDeviceSnapshot;
export const BlockDeviceSnapshot: typeof import("./blockDeviceSnapshot").BlockDeviceSnapshot = null as any;
utilities.lazyLoad(exports, ["BlockDeviceSnapshot"], () => require("./blockDeviceSnapshot"));

export { BlueprintArgs, BlueprintState } from "./blueprint";
export type Blueprint = import("./blueprint").Blueprint;
export const Blueprint: typeof import("./blueprint").Blueprint = null as any;
utilities.lazyLoad(exports, ["Blueprint"], () => require("./blueprint"));

export { BlueprintVersionArgs, BlueprintVersionState } from "./blueprintVersion";
export type BlueprintVersion = import("./blueprintVersion").BlueprintVersion;
export const BlueprintVersion: typeof import("./blueprintVersion").BlueprintVersion = null as any;
utilities.lazyLoad(exports, ["BlueprintVersion"], () => require("./blueprintVersion"));

export { CatalogItemEntitlementArgs, CatalogItemEntitlementState } from "./catalogItemEntitlement";
export type CatalogItemEntitlement = import("./catalogItemEntitlement").CatalogItemEntitlement;
export const CatalogItemEntitlement: typeof import("./catalogItemEntitlement").CatalogItemEntitlement = null as any;
utilities.lazyLoad(exports, ["CatalogItemEntitlement"], () => require("./catalogItemEntitlement"));

export { CatalogSourceBlueprintArgs, CatalogSourceBlueprintState } from "./catalogSourceBlueprint";
export type CatalogSourceBlueprint = import("./catalogSourceBlueprint").CatalogSourceBlueprint;
export const CatalogSourceBlueprint: typeof import("./catalogSourceBlueprint").CatalogSourceBlueprint = null as any;
utilities.lazyLoad(exports, ["CatalogSourceBlueprint"], () => require("./catalogSourceBlueprint"));

export { CatalogSourceEntitlementArgs, CatalogSourceEntitlementState } from "./catalogSourceEntitlement";
export type CatalogSourceEntitlement = import("./catalogSourceEntitlement").CatalogSourceEntitlement;
export const CatalogSourceEntitlement: typeof import("./catalogSourceEntitlement").CatalogSourceEntitlement = null as any;
utilities.lazyLoad(exports, ["CatalogSourceEntitlement"], () => require("./catalogSourceEntitlement"));

export { CloudAccountAwsArgs, CloudAccountAwsState } from "./cloudAccountAws";
export type CloudAccountAws = import("./cloudAccountAws").CloudAccountAws;
export const CloudAccountAws: typeof import("./cloudAccountAws").CloudAccountAws = null as any;
utilities.lazyLoad(exports, ["CloudAccountAws"], () => require("./cloudAccountAws"));

export { CloudAccountAzureArgs, CloudAccountAzureState } from "./cloudAccountAzure";
export type CloudAccountAzure = import("./cloudAccountAzure").CloudAccountAzure;
export const CloudAccountAzure: typeof import("./cloudAccountAzure").CloudAccountAzure = null as any;
utilities.lazyLoad(exports, ["CloudAccountAzure"], () => require("./cloudAccountAzure"));

export { CloudAccountGcpArgs, CloudAccountGcpState } from "./cloudAccountGcp";
export type CloudAccountGcp = import("./cloudAccountGcp").CloudAccountGcp;
export const CloudAccountGcp: typeof import("./cloudAccountGcp").CloudAccountGcp = null as any;
utilities.lazyLoad(exports, ["CloudAccountGcp"], () => require("./cloudAccountGcp"));

export { CloudAccountNsxtArgs, CloudAccountNsxtState } from "./cloudAccountNsxt";
export type CloudAccountNsxt = import("./cloudAccountNsxt").CloudAccountNsxt;
export const CloudAccountNsxt: typeof import("./cloudAccountNsxt").CloudAccountNsxt = null as any;
utilities.lazyLoad(exports, ["CloudAccountNsxt"], () => require("./cloudAccountNsxt"));

export { CloudAccountNsxvArgs, CloudAccountNsxvState } from "./cloudAccountNsxv";
export type CloudAccountNsxv = import("./cloudAccountNsxv").CloudAccountNsxv;
export const CloudAccountNsxv: typeof import("./cloudAccountNsxv").CloudAccountNsxv = null as any;
utilities.lazyLoad(exports, ["CloudAccountNsxv"], () => require("./cloudAccountNsxv"));

export { CloudAccountVmcArgs, CloudAccountVmcState } from "./cloudAccountVmc";
export type CloudAccountVmc = import("./cloudAccountVmc").CloudAccountVmc;
export const CloudAccountVmc: typeof import("./cloudAccountVmc").CloudAccountVmc = null as any;
utilities.lazyLoad(exports, ["CloudAccountVmc"], () => require("./cloudAccountVmc"));

export { CloudAccountVsphereArgs, CloudAccountVsphereState } from "./cloudAccountVsphere";
export type CloudAccountVsphere = import("./cloudAccountVsphere").CloudAccountVsphere;
export const CloudAccountVsphere: typeof import("./cloudAccountVsphere").CloudAccountVsphere = null as any;
utilities.lazyLoad(exports, ["CloudAccountVsphere"], () => require("./cloudAccountVsphere"));

export { ContentSharingPolicyArgs, ContentSharingPolicyState } from "./contentSharingPolicy";
export type ContentSharingPolicy = import("./contentSharingPolicy").ContentSharingPolicy;
export const ContentSharingPolicy: typeof import("./contentSharingPolicy").ContentSharingPolicy = null as any;
utilities.lazyLoad(exports, ["ContentSharingPolicy"], () => require("./contentSharingPolicy"));

export { ContentSourceArgs, ContentSourceState } from "./contentSource";
export type ContentSource = import("./contentSource").ContentSource;
export const ContentSource: typeof import("./contentSource").ContentSource = null as any;
utilities.lazyLoad(exports, ["ContentSource"], () => require("./contentSource"));

export { DeploymentArgs, DeploymentState } from "./deployment";
export type Deployment = import("./deployment").Deployment;
export const Deployment: typeof import("./deployment").Deployment = null as any;
utilities.lazyLoad(exports, ["Deployment"], () => require("./deployment"));

export { FabricComputeArgs, FabricComputeState } from "./fabricCompute";
export type FabricCompute = import("./fabricCompute").FabricCompute;
export const FabricCompute: typeof import("./fabricCompute").FabricCompute = null as any;
utilities.lazyLoad(exports, ["FabricCompute"], () => require("./fabricCompute"));

export { FabricDatastoreVsphereArgs, FabricDatastoreVsphereState } from "./fabricDatastoreVsphere";
export type FabricDatastoreVsphere = import("./fabricDatastoreVsphere").FabricDatastoreVsphere;
export const FabricDatastoreVsphere: typeof import("./fabricDatastoreVsphere").FabricDatastoreVsphere = null as any;
utilities.lazyLoad(exports, ["FabricDatastoreVsphere"], () => require("./fabricDatastoreVsphere"));

export { FabricNetworkVsphereArgs, FabricNetworkVsphereState } from "./fabricNetworkVsphere";
export type FabricNetworkVsphere = import("./fabricNetworkVsphere").FabricNetworkVsphere;
export const FabricNetworkVsphere: typeof import("./fabricNetworkVsphere").FabricNetworkVsphere = null as any;
utilities.lazyLoad(exports, ["FabricNetworkVsphere"], () => require("./fabricNetworkVsphere"));

export { FlavorProfileArgs, FlavorProfileState } from "./flavorProfile";
export type FlavorProfile = import("./flavorProfile").FlavorProfile;
export const FlavorProfile: typeof import("./flavorProfile").FlavorProfile = null as any;
utilities.lazyLoad(exports, ["FlavorProfile"], () => require("./flavorProfile"));

export { GetBlockDeviceArgs, GetBlockDeviceResult, GetBlockDeviceOutputArgs } from "./getBlockDevice";
export const getBlockDevice: typeof import("./getBlockDevice").getBlockDevice = null as any;
export const getBlockDeviceOutput: typeof import("./getBlockDevice").getBlockDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getBlockDevice","getBlockDeviceOutput"], () => require("./getBlockDevice"));

export { GetBlockDeviceSnapshotsArgs, GetBlockDeviceSnapshotsResult, GetBlockDeviceSnapshotsOutputArgs } from "./getBlockDeviceSnapshots";
export const getBlockDeviceSnapshots: typeof import("./getBlockDeviceSnapshots").getBlockDeviceSnapshots = null as any;
export const getBlockDeviceSnapshotsOutput: typeof import("./getBlockDeviceSnapshots").getBlockDeviceSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getBlockDeviceSnapshots","getBlockDeviceSnapshotsOutput"], () => require("./getBlockDeviceSnapshots"));

export { GetBlueprintArgs, GetBlueprintResult, GetBlueprintOutputArgs } from "./getBlueprint";
export const getBlueprint: typeof import("./getBlueprint").getBlueprint = null as any;
export const getBlueprintOutput: typeof import("./getBlueprint").getBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprint","getBlueprintOutput"], () => require("./getBlueprint"));

export { GetBlueprintVersionArgs, GetBlueprintVersionResult, GetBlueprintVersionOutputArgs } from "./getBlueprintVersion";
export const getBlueprintVersion: typeof import("./getBlueprintVersion").getBlueprintVersion = null as any;
export const getBlueprintVersionOutput: typeof import("./getBlueprintVersion").getBlueprintVersionOutput = null as any;
utilities.lazyLoad(exports, ["getBlueprintVersion","getBlueprintVersionOutput"], () => require("./getBlueprintVersion"));

export { GetCatalogItemArgs, GetCatalogItemResult, GetCatalogItemOutputArgs } from "./getCatalogItem";
export const getCatalogItem: typeof import("./getCatalogItem").getCatalogItem = null as any;
export const getCatalogItemOutput: typeof import("./getCatalogItem").getCatalogItemOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogItem","getCatalogItemOutput"], () => require("./getCatalogItem"));

export { GetCatalogItemEntitlementArgs, GetCatalogItemEntitlementResult, GetCatalogItemEntitlementOutputArgs } from "./getCatalogItemEntitlement";
export const getCatalogItemEntitlement: typeof import("./getCatalogItemEntitlement").getCatalogItemEntitlement = null as any;
export const getCatalogItemEntitlementOutput: typeof import("./getCatalogItemEntitlement").getCatalogItemEntitlementOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogItemEntitlement","getCatalogItemEntitlementOutput"], () => require("./getCatalogItemEntitlement"));

export { GetCatalogSourceBlueprintArgs, GetCatalogSourceBlueprintResult, GetCatalogSourceBlueprintOutputArgs } from "./getCatalogSourceBlueprint";
export const getCatalogSourceBlueprint: typeof import("./getCatalogSourceBlueprint").getCatalogSourceBlueprint = null as any;
export const getCatalogSourceBlueprintOutput: typeof import("./getCatalogSourceBlueprint").getCatalogSourceBlueprintOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogSourceBlueprint","getCatalogSourceBlueprintOutput"], () => require("./getCatalogSourceBlueprint"));

export { GetCatalogSourceEntitlementArgs, GetCatalogSourceEntitlementResult, GetCatalogSourceEntitlementOutputArgs } from "./getCatalogSourceEntitlement";
export const getCatalogSourceEntitlement: typeof import("./getCatalogSourceEntitlement").getCatalogSourceEntitlement = null as any;
export const getCatalogSourceEntitlementOutput: typeof import("./getCatalogSourceEntitlement").getCatalogSourceEntitlementOutput = null as any;
utilities.lazyLoad(exports, ["getCatalogSourceEntitlement","getCatalogSourceEntitlementOutput"], () => require("./getCatalogSourceEntitlement"));

export { GetCloudAccountAwsArgs, GetCloudAccountAwsResult, GetCloudAccountAwsOutputArgs } from "./getCloudAccountAws";
export const getCloudAccountAws: typeof import("./getCloudAccountAws").getCloudAccountAws = null as any;
export const getCloudAccountAwsOutput: typeof import("./getCloudAccountAws").getCloudAccountAwsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccountAws","getCloudAccountAwsOutput"], () => require("./getCloudAccountAws"));

export { GetCloudAccountAzureArgs, GetCloudAccountAzureResult, GetCloudAccountAzureOutputArgs } from "./getCloudAccountAzure";
export const getCloudAccountAzure: typeof import("./getCloudAccountAzure").getCloudAccountAzure = null as any;
export const getCloudAccountAzureOutput: typeof import("./getCloudAccountAzure").getCloudAccountAzureOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccountAzure","getCloudAccountAzureOutput"], () => require("./getCloudAccountAzure"));

export { GetCloudAccountGcpArgs, GetCloudAccountGcpResult, GetCloudAccountGcpOutputArgs } from "./getCloudAccountGcp";
export const getCloudAccountGcp: typeof import("./getCloudAccountGcp").getCloudAccountGcp = null as any;
export const getCloudAccountGcpOutput: typeof import("./getCloudAccountGcp").getCloudAccountGcpOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccountGcp","getCloudAccountGcpOutput"], () => require("./getCloudAccountGcp"));

export { GetCloudAccountNsxtArgs, GetCloudAccountNsxtResult, GetCloudAccountNsxtOutputArgs } from "./getCloudAccountNsxt";
export const getCloudAccountNsxt: typeof import("./getCloudAccountNsxt").getCloudAccountNsxt = null as any;
export const getCloudAccountNsxtOutput: typeof import("./getCloudAccountNsxt").getCloudAccountNsxtOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccountNsxt","getCloudAccountNsxtOutput"], () => require("./getCloudAccountNsxt"));

export { GetCloudAccountNsxvArgs, GetCloudAccountNsxvResult, GetCloudAccountNsxvOutputArgs } from "./getCloudAccountNsxv";
export const getCloudAccountNsxv: typeof import("./getCloudAccountNsxv").getCloudAccountNsxv = null as any;
export const getCloudAccountNsxvOutput: typeof import("./getCloudAccountNsxv").getCloudAccountNsxvOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccountNsxv","getCloudAccountNsxvOutput"], () => require("./getCloudAccountNsxv"));

export { GetCloudAccountVmcArgs, GetCloudAccountVmcResult, GetCloudAccountVmcOutputArgs } from "./getCloudAccountVmc";
export const getCloudAccountVmc: typeof import("./getCloudAccountVmc").getCloudAccountVmc = null as any;
export const getCloudAccountVmcOutput: typeof import("./getCloudAccountVmc").getCloudAccountVmcOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccountVmc","getCloudAccountVmcOutput"], () => require("./getCloudAccountVmc"));

export { GetCloudAccountVsphereArgs, GetCloudAccountVsphereResult, GetCloudAccountVsphereOutputArgs } from "./getCloudAccountVsphere";
export const getCloudAccountVsphere: typeof import("./getCloudAccountVsphere").getCloudAccountVsphere = null as any;
export const getCloudAccountVsphereOutput: typeof import("./getCloudAccountVsphere").getCloudAccountVsphereOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccountVsphere","getCloudAccountVsphereOutput"], () => require("./getCloudAccountVsphere"));

export { GetContentSharingPolicyArgs, GetContentSharingPolicyResult, GetContentSharingPolicyOutputArgs } from "./getContentSharingPolicy";
export const getContentSharingPolicy: typeof import("./getContentSharingPolicy").getContentSharingPolicy = null as any;
export const getContentSharingPolicyOutput: typeof import("./getContentSharingPolicy").getContentSharingPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getContentSharingPolicy","getContentSharingPolicyOutput"], () => require("./getContentSharingPolicy"));

export { GetDataCollectorArgs, GetDataCollectorResult, GetDataCollectorOutputArgs } from "./getDataCollector";
export const getDataCollector: typeof import("./getDataCollector").getDataCollector = null as any;
export const getDataCollectorOutput: typeof import("./getDataCollector").getDataCollectorOutput = null as any;
utilities.lazyLoad(exports, ["getDataCollector","getDataCollectorOutput"], () => require("./getDataCollector"));

export { GetDeploymentArgs, GetDeploymentResult, GetDeploymentOutputArgs } from "./getDeployment";
export const getDeployment: typeof import("./getDeployment").getDeployment = null as any;
export const getDeploymentOutput: typeof import("./getDeployment").getDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getDeployment","getDeploymentOutput"], () => require("./getDeployment"));

export { GetFabricComputeArgs, GetFabricComputeResult, GetFabricComputeOutputArgs } from "./getFabricCompute";
export const getFabricCompute: typeof import("./getFabricCompute").getFabricCompute = null as any;
export const getFabricComputeOutput: typeof import("./getFabricCompute").getFabricComputeOutput = null as any;
utilities.lazyLoad(exports, ["getFabricCompute","getFabricComputeOutput"], () => require("./getFabricCompute"));

export { GetFabricDatastoreVsphereArgs, GetFabricDatastoreVsphereResult, GetFabricDatastoreVsphereOutputArgs } from "./getFabricDatastoreVsphere";
export const getFabricDatastoreVsphere: typeof import("./getFabricDatastoreVsphere").getFabricDatastoreVsphere = null as any;
export const getFabricDatastoreVsphereOutput: typeof import("./getFabricDatastoreVsphere").getFabricDatastoreVsphereOutput = null as any;
utilities.lazyLoad(exports, ["getFabricDatastoreVsphere","getFabricDatastoreVsphereOutput"], () => require("./getFabricDatastoreVsphere"));

export { GetFabricNetworkArgs, GetFabricNetworkResult, GetFabricNetworkOutputArgs } from "./getFabricNetwork";
export const getFabricNetwork: typeof import("./getFabricNetwork").getFabricNetwork = null as any;
export const getFabricNetworkOutput: typeof import("./getFabricNetwork").getFabricNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getFabricNetwork","getFabricNetworkOutput"], () => require("./getFabricNetwork"));

export { GetFabricStorageAccountAzureArgs, GetFabricStorageAccountAzureResult, GetFabricStorageAccountAzureOutputArgs } from "./getFabricStorageAccountAzure";
export const getFabricStorageAccountAzure: typeof import("./getFabricStorageAccountAzure").getFabricStorageAccountAzure = null as any;
export const getFabricStorageAccountAzureOutput: typeof import("./getFabricStorageAccountAzure").getFabricStorageAccountAzureOutput = null as any;
utilities.lazyLoad(exports, ["getFabricStorageAccountAzure","getFabricStorageAccountAzureOutput"], () => require("./getFabricStorageAccountAzure"));

export { GetFabricStoragePolicyVsphereArgs, GetFabricStoragePolicyVsphereResult, GetFabricStoragePolicyVsphereOutputArgs } from "./getFabricStoragePolicyVsphere";
export const getFabricStoragePolicyVsphere: typeof import("./getFabricStoragePolicyVsphere").getFabricStoragePolicyVsphere = null as any;
export const getFabricStoragePolicyVsphereOutput: typeof import("./getFabricStoragePolicyVsphere").getFabricStoragePolicyVsphereOutput = null as any;
utilities.lazyLoad(exports, ["getFabricStoragePolicyVsphere","getFabricStoragePolicyVsphereOutput"], () => require("./getFabricStoragePolicyVsphere"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetImageProfileArgs, GetImageProfileResult, GetImageProfileOutputArgs } from "./getImageProfile";
export const getImageProfile: typeof import("./getImageProfile").getImageProfile = null as any;
export const getImageProfileOutput: typeof import("./getImageProfile").getImageProfileOutput = null as any;
utilities.lazyLoad(exports, ["getImageProfile","getImageProfileOutput"], () => require("./getImageProfile"));

export { GetMachineArgs, GetMachineResult, GetMachineOutputArgs } from "./getMachine";
export const getMachine: typeof import("./getMachine").getMachine = null as any;
export const getMachineOutput: typeof import("./getMachine").getMachineOutput = null as any;
utilities.lazyLoad(exports, ["getMachine","getMachineOutput"], () => require("./getMachine"));

export { GetNetworkArgs, GetNetworkResult, GetNetworkOutputArgs } from "./getNetwork";
export const getNetwork: typeof import("./getNetwork").getNetwork = null as any;
export const getNetworkOutput: typeof import("./getNetwork").getNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getNetwork","getNetworkOutput"], () => require("./getNetwork"));

export { GetNetworkDomainArgs, GetNetworkDomainResult, GetNetworkDomainOutputArgs } from "./getNetworkDomain";
export const getNetworkDomain: typeof import("./getNetworkDomain").getNetworkDomain = null as any;
export const getNetworkDomainOutput: typeof import("./getNetworkDomain").getNetworkDomainOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkDomain","getNetworkDomainOutput"], () => require("./getNetworkDomain"));

export { GetNetworkProfileArgs, GetNetworkProfileResult, GetNetworkProfileOutputArgs } from "./getNetworkProfile";
export const getNetworkProfile: typeof import("./getNetworkProfile").getNetworkProfile = null as any;
export const getNetworkProfileOutput: typeof import("./getNetworkProfile").getNetworkProfileOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkProfile","getNetworkProfileOutput"], () => require("./getNetworkProfile"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRegionEnumerationArgs, GetRegionEnumerationResult, GetRegionEnumerationOutputArgs } from "./getRegionEnumeration";
export const getRegionEnumeration: typeof import("./getRegionEnumeration").getRegionEnumeration = null as any;
export const getRegionEnumerationOutput: typeof import("./getRegionEnumeration").getRegionEnumerationOutput = null as any;
utilities.lazyLoad(exports, ["getRegionEnumeration","getRegionEnumerationOutput"], () => require("./getRegionEnumeration"));

export { GetRegionEnumerationAwsArgs, GetRegionEnumerationAwsResult, GetRegionEnumerationAwsOutputArgs } from "./getRegionEnumerationAws";
export const getRegionEnumerationAws: typeof import("./getRegionEnumerationAws").getRegionEnumerationAws = null as any;
export const getRegionEnumerationAwsOutput: typeof import("./getRegionEnumerationAws").getRegionEnumerationAwsOutput = null as any;
utilities.lazyLoad(exports, ["getRegionEnumerationAws","getRegionEnumerationAwsOutput"], () => require("./getRegionEnumerationAws"));

export { GetRegionEnumerationAzureArgs, GetRegionEnumerationAzureResult, GetRegionEnumerationAzureOutputArgs } from "./getRegionEnumerationAzure";
export const getRegionEnumerationAzure: typeof import("./getRegionEnumerationAzure").getRegionEnumerationAzure = null as any;
export const getRegionEnumerationAzureOutput: typeof import("./getRegionEnumerationAzure").getRegionEnumerationAzureOutput = null as any;
utilities.lazyLoad(exports, ["getRegionEnumerationAzure","getRegionEnumerationAzureOutput"], () => require("./getRegionEnumerationAzure"));

export { GetRegionEnumerationGcpArgs, GetRegionEnumerationGcpResult, GetRegionEnumerationGcpOutputArgs } from "./getRegionEnumerationGcp";
export const getRegionEnumerationGcp: typeof import("./getRegionEnumerationGcp").getRegionEnumerationGcp = null as any;
export const getRegionEnumerationGcpOutput: typeof import("./getRegionEnumerationGcp").getRegionEnumerationGcpOutput = null as any;
utilities.lazyLoad(exports, ["getRegionEnumerationGcp","getRegionEnumerationGcpOutput"], () => require("./getRegionEnumerationGcp"));

export { GetRegionEnumerationVmcArgs, GetRegionEnumerationVmcResult, GetRegionEnumerationVmcOutputArgs } from "./getRegionEnumerationVmc";
export const getRegionEnumerationVmc: typeof import("./getRegionEnumerationVmc").getRegionEnumerationVmc = null as any;
export const getRegionEnumerationVmcOutput: typeof import("./getRegionEnumerationVmc").getRegionEnumerationVmcOutput = null as any;
utilities.lazyLoad(exports, ["getRegionEnumerationVmc","getRegionEnumerationVmcOutput"], () => require("./getRegionEnumerationVmc"));

export { GetRegionEnumerationVsphereArgs, GetRegionEnumerationVsphereResult, GetRegionEnumerationVsphereOutputArgs } from "./getRegionEnumerationVsphere";
export const getRegionEnumerationVsphere: typeof import("./getRegionEnumerationVsphere").getRegionEnumerationVsphere = null as any;
export const getRegionEnumerationVsphereOutput: typeof import("./getRegionEnumerationVsphere").getRegionEnumerationVsphereOutput = null as any;
utilities.lazyLoad(exports, ["getRegionEnumerationVsphere","getRegionEnumerationVsphereOutput"], () => require("./getRegionEnumerationVsphere"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetStorageProfileArgs, GetStorageProfileResult, GetStorageProfileOutputArgs } from "./getStorageProfile";
export const getStorageProfile: typeof import("./getStorageProfile").getStorageProfile = null as any;
export const getStorageProfileOutput: typeof import("./getStorageProfile").getStorageProfileOutput = null as any;
utilities.lazyLoad(exports, ["getStorageProfile","getStorageProfileOutput"], () => require("./getStorageProfile"));

export { GetStorageProfileAwsArgs, GetStorageProfileAwsResult, GetStorageProfileAwsOutputArgs } from "./getStorageProfileAws";
export const getStorageProfileAws: typeof import("./getStorageProfileAws").getStorageProfileAws = null as any;
export const getStorageProfileAwsOutput: typeof import("./getStorageProfileAws").getStorageProfileAwsOutput = null as any;
utilities.lazyLoad(exports, ["getStorageProfileAws","getStorageProfileAwsOutput"], () => require("./getStorageProfileAws"));

export { GetStorageProfileAzureArgs, GetStorageProfileAzureResult, GetStorageProfileAzureOutputArgs } from "./getStorageProfileAzure";
export const getStorageProfileAzure: typeof import("./getStorageProfileAzure").getStorageProfileAzure = null as any;
export const getStorageProfileAzureOutput: typeof import("./getStorageProfileAzure").getStorageProfileAzureOutput = null as any;
utilities.lazyLoad(exports, ["getStorageProfileAzure","getStorageProfileAzureOutput"], () => require("./getStorageProfileAzure"));

export { GetStorageProfileVsphereArgs, GetStorageProfileVsphereResult, GetStorageProfileVsphereOutputArgs } from "./getStorageProfileVsphere";
export const getStorageProfileVsphere: typeof import("./getStorageProfileVsphere").getStorageProfileVsphere = null as any;
export const getStorageProfileVsphereOutput: typeof import("./getStorageProfileVsphere").getStorageProfileVsphereOutput = null as any;
utilities.lazyLoad(exports, ["getStorageProfileVsphere","getStorageProfileVsphereOutput"], () => require("./getStorageProfileVsphere"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { ImageProfileArgs, ImageProfileState } from "./imageProfile";
export type ImageProfile = import("./imageProfile").ImageProfile;
export const ImageProfile: typeof import("./imageProfile").ImageProfile = null as any;
utilities.lazyLoad(exports, ["ImageProfile"], () => require("./imageProfile"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { MachineArgs, MachineState } from "./machine";
export type Machine = import("./machine").Machine;
export const Machine: typeof import("./machine").Machine = null as any;
utilities.lazyLoad(exports, ["Machine"], () => require("./machine"));

export { NetworkArgs, NetworkState } from "./network";
export type Network = import("./network").Network;
export const Network: typeof import("./network").Network = null as any;
utilities.lazyLoad(exports, ["Network"], () => require("./network"));

export { NetworkIpRangeArgs, NetworkIpRangeState } from "./networkIpRange";
export type NetworkIpRange = import("./networkIpRange").NetworkIpRange;
export const NetworkIpRange: typeof import("./networkIpRange").NetworkIpRange = null as any;
utilities.lazyLoad(exports, ["NetworkIpRange"], () => require("./networkIpRange"));

export { NetworkProfileArgs, NetworkProfileState } from "./networkProfile";
export type NetworkProfile = import("./networkProfile").NetworkProfile;
export const NetworkProfile: typeof import("./networkProfile").NetworkProfile = null as any;
utilities.lazyLoad(exports, ["NetworkProfile"], () => require("./networkProfile"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StorageProfileArgs, StorageProfileState } from "./storageProfile";
export type StorageProfile = import("./storageProfile").StorageProfile;
export const StorageProfile: typeof import("./storageProfile").StorageProfile = null as any;
utilities.lazyLoad(exports, ["StorageProfile"], () => require("./storageProfile"));

export { StorageProfileAwsArgs, StorageProfileAwsState } from "./storageProfileAws";
export type StorageProfileAws = import("./storageProfileAws").StorageProfileAws;
export const StorageProfileAws: typeof import("./storageProfileAws").StorageProfileAws = null as any;
utilities.lazyLoad(exports, ["StorageProfileAws"], () => require("./storageProfileAws"));

export { StorageProfileAzureArgs, StorageProfileAzureState } from "./storageProfileAzure";
export type StorageProfileAzure = import("./storageProfileAzure").StorageProfileAzure;
export const StorageProfileAzure: typeof import("./storageProfileAzure").StorageProfileAzure = null as any;
utilities.lazyLoad(exports, ["StorageProfileAzure"], () => require("./storageProfileAzure"));

export { StorageProfileVsphereArgs, StorageProfileVsphereState } from "./storageProfileVsphere";
export type StorageProfileVsphere = import("./storageProfileVsphere").StorageProfileVsphere;
export const StorageProfileVsphere: typeof import("./storageProfileVsphere").StorageProfileVsphere = null as any;
utilities.lazyLoad(exports, ["StorageProfileVsphere"], () => require("./storageProfileVsphere"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "vra:index/blockDevice:BlockDevice":
                return new BlockDevice(name, <any>undefined, { urn })
            case "vra:index/blockDeviceSnapshot:BlockDeviceSnapshot":
                return new BlockDeviceSnapshot(name, <any>undefined, { urn })
            case "vra:index/blueprint:Blueprint":
                return new Blueprint(name, <any>undefined, { urn })
            case "vra:index/blueprintVersion:BlueprintVersion":
                return new BlueprintVersion(name, <any>undefined, { urn })
            case "vra:index/catalogItemEntitlement:CatalogItemEntitlement":
                return new CatalogItemEntitlement(name, <any>undefined, { urn })
            case "vra:index/catalogSourceBlueprint:CatalogSourceBlueprint":
                return new CatalogSourceBlueprint(name, <any>undefined, { urn })
            case "vra:index/catalogSourceEntitlement:CatalogSourceEntitlement":
                return new CatalogSourceEntitlement(name, <any>undefined, { urn })
            case "vra:index/cloudAccountAws:CloudAccountAws":
                return new CloudAccountAws(name, <any>undefined, { urn })
            case "vra:index/cloudAccountAzure:CloudAccountAzure":
                return new CloudAccountAzure(name, <any>undefined, { urn })
            case "vra:index/cloudAccountGcp:CloudAccountGcp":
                return new CloudAccountGcp(name, <any>undefined, { urn })
            case "vra:index/cloudAccountNsxt:CloudAccountNsxt":
                return new CloudAccountNsxt(name, <any>undefined, { urn })
            case "vra:index/cloudAccountNsxv:CloudAccountNsxv":
                return new CloudAccountNsxv(name, <any>undefined, { urn })
            case "vra:index/cloudAccountVmc:CloudAccountVmc":
                return new CloudAccountVmc(name, <any>undefined, { urn })
            case "vra:index/cloudAccountVsphere:CloudAccountVsphere":
                return new CloudAccountVsphere(name, <any>undefined, { urn })
            case "vra:index/contentSharingPolicy:ContentSharingPolicy":
                return new ContentSharingPolicy(name, <any>undefined, { urn })
            case "vra:index/contentSource:ContentSource":
                return new ContentSource(name, <any>undefined, { urn })
            case "vra:index/deployment:Deployment":
                return new Deployment(name, <any>undefined, { urn })
            case "vra:index/fabricCompute:FabricCompute":
                return new FabricCompute(name, <any>undefined, { urn })
            case "vra:index/fabricDatastoreVsphere:FabricDatastoreVsphere":
                return new FabricDatastoreVsphere(name, <any>undefined, { urn })
            case "vra:index/fabricNetworkVsphere:FabricNetworkVsphere":
                return new FabricNetworkVsphere(name, <any>undefined, { urn })
            case "vra:index/flavorProfile:FlavorProfile":
                return new FlavorProfile(name, <any>undefined, { urn })
            case "vra:index/imageProfile:ImageProfile":
                return new ImageProfile(name, <any>undefined, { urn })
            case "vra:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "vra:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "vra:index/machine:Machine":
                return new Machine(name, <any>undefined, { urn })
            case "vra:index/network:Network":
                return new Network(name, <any>undefined, { urn })
            case "vra:index/networkIpRange:NetworkIpRange":
                return new NetworkIpRange(name, <any>undefined, { urn })
            case "vra:index/networkProfile:NetworkProfile":
                return new NetworkProfile(name, <any>undefined, { urn })
            case "vra:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "vra:index/storageProfile:StorageProfile":
                return new StorageProfile(name, <any>undefined, { urn })
            case "vra:index/storageProfileAws:StorageProfileAws":
                return new StorageProfileAws(name, <any>undefined, { urn })
            case "vra:index/storageProfileAzure:StorageProfileAzure":
                return new StorageProfileAzure(name, <any>undefined, { urn })
            case "vra:index/storageProfileVsphere:StorageProfileVsphere":
                return new StorageProfileVsphere(name, <any>undefined, { urn })
            case "vra:index/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("vra", "index/blockDevice", _module)
pulumi.runtime.registerResourceModule("vra", "index/blockDeviceSnapshot", _module)
pulumi.runtime.registerResourceModule("vra", "index/blueprint", _module)
pulumi.runtime.registerResourceModule("vra", "index/blueprintVersion", _module)
pulumi.runtime.registerResourceModule("vra", "index/catalogItemEntitlement", _module)
pulumi.runtime.registerResourceModule("vra", "index/catalogSourceBlueprint", _module)
pulumi.runtime.registerResourceModule("vra", "index/catalogSourceEntitlement", _module)
pulumi.runtime.registerResourceModule("vra", "index/cloudAccountAws", _module)
pulumi.runtime.registerResourceModule("vra", "index/cloudAccountAzure", _module)
pulumi.runtime.registerResourceModule("vra", "index/cloudAccountGcp", _module)
pulumi.runtime.registerResourceModule("vra", "index/cloudAccountNsxt", _module)
pulumi.runtime.registerResourceModule("vra", "index/cloudAccountNsxv", _module)
pulumi.runtime.registerResourceModule("vra", "index/cloudAccountVmc", _module)
pulumi.runtime.registerResourceModule("vra", "index/cloudAccountVsphere", _module)
pulumi.runtime.registerResourceModule("vra", "index/contentSharingPolicy", _module)
pulumi.runtime.registerResourceModule("vra", "index/contentSource", _module)
pulumi.runtime.registerResourceModule("vra", "index/deployment", _module)
pulumi.runtime.registerResourceModule("vra", "index/fabricCompute", _module)
pulumi.runtime.registerResourceModule("vra", "index/fabricDatastoreVsphere", _module)
pulumi.runtime.registerResourceModule("vra", "index/fabricNetworkVsphere", _module)
pulumi.runtime.registerResourceModule("vra", "index/flavorProfile", _module)
pulumi.runtime.registerResourceModule("vra", "index/imageProfile", _module)
pulumi.runtime.registerResourceModule("vra", "index/integration", _module)
pulumi.runtime.registerResourceModule("vra", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("vra", "index/machine", _module)
pulumi.runtime.registerResourceModule("vra", "index/network", _module)
pulumi.runtime.registerResourceModule("vra", "index/networkIpRange", _module)
pulumi.runtime.registerResourceModule("vra", "index/networkProfile", _module)
pulumi.runtime.registerResourceModule("vra", "index/project", _module)
pulumi.runtime.registerResourceModule("vra", "index/storageProfile", _module)
pulumi.runtime.registerResourceModule("vra", "index/storageProfileAws", _module)
pulumi.runtime.registerResourceModule("vra", "index/storageProfileAzure", _module)
pulumi.runtime.registerResourceModule("vra", "index/storageProfileVsphere", _module)
pulumi.runtime.registerResourceModule("vra", "index/zone", _module)
pulumi.runtime.registerResourcePackage("vra", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:vra") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
