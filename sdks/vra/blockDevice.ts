// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockDevice extends pulumi.CustomResource {
    /**
     * Get an existing BlockDevice resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockDeviceState, opts?: pulumi.CustomResourceOptions): BlockDevice {
        return new BlockDevice(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/blockDevice:BlockDevice';

    /**
     * Returns true if the given object is an instance of BlockDevice.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockDevice {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockDevice.__pulumiType;
    }

    /**
     * Capacity of the block device in GB.
     */
    public readonly capacityInGb!: pulumi.Output<number>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    public readonly constraints!: pulumi.Output<outputs.BlockDeviceConstraint[] | undefined>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Additional custom properties that may be used to extend the block device. Following disk custom properties can be passed
     * while creating a block device: 1. dataStore: Defines name of the datastore in which the disk has to be provisioned. 2.
     * storagePolicy: Defines name of the storage policy in which the disk has to be provisioned. If name of the datastore is
     * specified in the custom properties then, datastore takes precedence. 3. provisioningType: Defines the type of
     * provisioning. For eg. thick/thin.
     */
    public readonly customProperties!: pulumi.Output<{[key: string]: string}>;
    /**
     * The id of the deployment that is associated with this resource.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Content of a disk, base64 encoded.
     */
    public readonly diskContentBase64!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the block device should be encrypted or not.
     */
    public readonly encrypted!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether the snapshots of the block-devices should be included in the resource state. Applicable only for first
     * class block devices.
     */
    public readonly expandSnapshots!: pulumi.Output<boolean | undefined>;
    /**
     * External entity id on the cloud provider side.
     */
    public /*out*/ readonly externalId!: pulumi.Output<string>;
    /**
     * The external regionId of the resource.
     */
    public /*out*/ readonly externalRegionId!: pulumi.Output<string>;
    /**
     * The external zoneId of the resource.
     */
    public /*out*/ readonly externalZoneId!: pulumi.Output<string>;
    public /*out*/ readonly links!: pulumi.Output<outputs.BlockDeviceLink[]>;
    /**
     * A human-friendly name for the block device.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the organization this block device belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Email of the user that owns this block device.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Indicates whether the block device survives a delete action.
     */
    public readonly persistent!: pulumi.Output<boolean | undefined>;
    /**
     * The id of the project this resource belongs to.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Indicates if the disk has to be completely destroyed or should be kept in the system. Valid only for block devices with
     * ‘persistent’ set to true, only used for destroy the resource
     */
    public readonly purge!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly snapshots!: pulumi.Output<outputs.BlockDeviceSnapshot[]>;
    /**
     * Reference to URI using which the block device has to be created. Example: ami-0d4cfd66
     */
    public readonly sourceReference!: pulumi.Output<string | undefined>;
    /**
     * Status of the block device.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.BlockDeviceTag[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BlockDeviceTimeouts | undefined>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a BlockDevice resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockDeviceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockDeviceArgs | BlockDeviceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockDeviceState | undefined;
            resourceInputs["capacityInGb"] = state ? state.capacityInGb : undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskContentBase64"] = state ? state.diskContentBase64 : undefined;
            resourceInputs["encrypted"] = state ? state.encrypted : undefined;
            resourceInputs["expandSnapshots"] = state ? state.expandSnapshots : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["externalRegionId"] = state ? state.externalRegionId : undefined;
            resourceInputs["externalZoneId"] = state ? state.externalZoneId : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["persistent"] = state ? state.persistent : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["purge"] = state ? state.purge : undefined;
            resourceInputs["snapshots"] = state ? state.snapshots : undefined;
            resourceInputs["sourceReference"] = state ? state.sourceReference : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as BlockDeviceArgs | undefined;
            if ((!args || args.capacityInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'capacityInGb'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["capacityInGb"] = args ? args.capacityInGb : undefined;
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskContentBase64"] = args ? args.diskContentBase64 : undefined;
            resourceInputs["encrypted"] = args ? args.encrypted : undefined;
            resourceInputs["expandSnapshots"] = args ? args.expandSnapshots : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["persistent"] = args ? args.persistent : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["purge"] = args ? args.purge : undefined;
            resourceInputs["sourceReference"] = args ? args.sourceReference : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["externalRegionId"] = undefined /*out*/;
            resourceInputs["externalZoneId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["snapshots"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockDevice.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockDevice resources.
 */
export interface BlockDeviceState {
    /**
     * Capacity of the block device in GB.
     */
    capacityInGb?: pulumi.Input<number>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    constraints?: pulumi.Input<pulumi.Input<inputs.BlockDeviceConstraint>[]>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Additional custom properties that may be used to extend the block device. Following disk custom properties can be passed
     * while creating a block device: 1. dataStore: Defines name of the datastore in which the disk has to be provisioned. 2.
     * storagePolicy: Defines name of the storage policy in which the disk has to be provisioned. If name of the datastore is
     * specified in the custom properties then, datastore takes precedence. 3. provisioningType: Defines the type of
     * provisioning. For eg. thick/thin.
     */
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the deployment that is associated with this resource.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Content of a disk, base64 encoded.
     */
    diskContentBase64?: pulumi.Input<string>;
    /**
     * Indicates whether the block device should be encrypted or not.
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Indicates whether the snapshots of the block-devices should be included in the resource state. Applicable only for first
     * class block devices.
     */
    expandSnapshots?: pulumi.Input<boolean>;
    /**
     * External entity id on the cloud provider side.
     */
    externalId?: pulumi.Input<string>;
    /**
     * The external regionId of the resource.
     */
    externalRegionId?: pulumi.Input<string>;
    /**
     * The external zoneId of the resource.
     */
    externalZoneId?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.BlockDeviceLink>[]>;
    /**
     * A human-friendly name for the block device.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the organization this block device belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Email of the user that owns this block device.
     */
    owner?: pulumi.Input<string>;
    /**
     * Indicates whether the block device survives a delete action.
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * The id of the project this resource belongs to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Indicates if the disk has to be completely destroyed or should be kept in the system. Valid only for block devices with
     * ‘persistent’ set to true, only used for destroy the resource
     */
    purge?: pulumi.Input<boolean>;
    snapshots?: pulumi.Input<pulumi.Input<inputs.BlockDeviceSnapshot>[]>;
    /**
     * Reference to URI using which the block device has to be created. Example: ami-0d4cfd66
     */
    sourceReference?: pulumi.Input<string>;
    /**
     * Status of the block device.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.BlockDeviceTag>[]>;
    timeouts?: pulumi.Input<inputs.BlockDeviceTimeouts>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockDevice resource.
 */
export interface BlockDeviceArgs {
    /**
     * Capacity of the block device in GB.
     */
    capacityInGb: pulumi.Input<number>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    constraints?: pulumi.Input<pulumi.Input<inputs.BlockDeviceConstraint>[]>;
    /**
     * Additional custom properties that may be used to extend the block device. Following disk custom properties can be passed
     * while creating a block device: 1. dataStore: Defines name of the datastore in which the disk has to be provisioned. 2.
     * storagePolicy: Defines name of the storage policy in which the disk has to be provisioned. If name of the datastore is
     * specified in the custom properties then, datastore takes precedence. 3. provisioningType: Defines the type of
     * provisioning. For eg. thick/thin.
     */
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the deployment that is associated with this resource.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Content of a disk, base64 encoded.
     */
    diskContentBase64?: pulumi.Input<string>;
    /**
     * Indicates whether the block device should be encrypted or not.
     */
    encrypted?: pulumi.Input<boolean>;
    /**
     * Indicates whether the snapshots of the block-devices should be included in the resource state. Applicable only for first
     * class block devices.
     */
    expandSnapshots?: pulumi.Input<boolean>;
    /**
     * A human-friendly name for the block device.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the block device survives a delete action.
     */
    persistent?: pulumi.Input<boolean>;
    /**
     * The id of the project this resource belongs to.
     */
    projectId: pulumi.Input<string>;
    /**
     * Indicates if the disk has to be completely destroyed or should be kept in the system. Valid only for block devices with
     * ‘persistent’ set to true, only used for destroy the resource
     */
    purge?: pulumi.Input<boolean>;
    /**
     * Reference to URI using which the block device has to be created. Example: ami-0d4cfd66
     */
    sourceReference?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.BlockDeviceTag>[]>;
    timeouts?: pulumi.Input<inputs.BlockDeviceTimeouts>;
}
