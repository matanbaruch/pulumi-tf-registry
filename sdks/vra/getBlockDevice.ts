// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getBlockDevice(args?: GetBlockDeviceArgs, opts?: pulumi.InvokeOptions): Promise<GetBlockDeviceResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vra:index/getBlockDevice:getBlockDevice", {
        "description": args.description,
        "expandSnapshots": args.expandSnapshots,
        "filter": args.filter,
        "id": args.id,
        "tags": args.tags,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getBlockDevice.
 */
export interface GetBlockDeviceArgs {
    description?: string;
    expandSnapshots?: boolean;
    filter?: string;
    id?: string;
    tags?: inputs.GetBlockDeviceTag[];
}

/**
 * A collection of values returned by getBlockDevice.
 */
export interface GetBlockDeviceResult {
    readonly capacityInGb: number;
    readonly cloudAccountIds: string[];
    readonly createdAt: string;
    readonly customProperties: {[key: string]: string};
    readonly deploymentId: string;
    readonly description?: string;
    readonly expandSnapshots?: boolean;
    readonly externalId: string;
    readonly externalRegionId: string;
    readonly externalZoneId: string;
    readonly filter?: string;
    readonly id: string;
    readonly links: outputs.GetBlockDeviceLink[];
    readonly name: string;
    readonly orgId: string;
    readonly owner: string;
    readonly persistent: boolean;
    readonly projectId: string;
    readonly snapshots: outputs.GetBlockDeviceSnapshot[];
    readonly status: string;
    readonly tags?: outputs.GetBlockDeviceTag[];
    readonly updatedAt: string;
}
export function getBlockDeviceOutput(args?: GetBlockDeviceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBlockDeviceResult> {
    return pulumi.output(args).apply((a: any) => getBlockDevice(a, opts))
}

/**
 * A collection of arguments for invoking getBlockDevice.
 */
export interface GetBlockDeviceOutputArgs {
    description?: pulumi.Input<string>;
    expandSnapshots?: pulumi.Input<boolean>;
    filter?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.GetBlockDeviceTagArgs>[]>;
}
