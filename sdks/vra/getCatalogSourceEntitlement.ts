// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getCatalogSourceEntitlement(args: GetCatalogSourceEntitlementArgs, opts?: pulumi.InvokeOptions): Promise<GetCatalogSourceEntitlementResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("vra:index/getCatalogSourceEntitlement:getCatalogSourceEntitlement", {
        "catalogSourceId": args.catalogSourceId,
        "id": args.id,
        "projectId": args.projectId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getCatalogSourceEntitlement.
 */
export interface GetCatalogSourceEntitlementArgs {
    catalogSourceId?: string;
    id?: string;
    projectId: string;
}

/**
 * A collection of values returned by getCatalogSourceEntitlement.
 */
export interface GetCatalogSourceEntitlementResult {
    readonly catalogSourceId?: string;
    readonly definitions: outputs.GetCatalogSourceEntitlementDefinition[];
    readonly id?: string;
    readonly projectId: string;
}
export function getCatalogSourceEntitlementOutput(args: GetCatalogSourceEntitlementOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCatalogSourceEntitlementResult> {
    return pulumi.output(args).apply((a: any) => getCatalogSourceEntitlement(a, opts))
}

/**
 * A collection of arguments for invoking getCatalogSourceEntitlement.
 */
export interface GetCatalogSourceEntitlementOutputArgs {
    catalogSourceId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
