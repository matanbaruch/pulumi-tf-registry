// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ImageProfile extends pulumi.CustomResource {
    /**
     * Get an existing ImageProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageProfileState, opts?: pulumi.CustomResourceOptions): ImageProfile {
        return new ImageProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/imageProfile:ImageProfile';

    /**
     * Returns true if the given object is an instance of ImageProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageProfile.__pulumiType;
    }

    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The id of the region for which this profile is defined as in the cloud provider.
     */
    public /*out*/ readonly externalRegionId!: pulumi.Output<string>;
    public readonly imageMappings!: pulumi.Output<outputs.ImageProfileImageMapping[] | undefined>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Email of the user that owns the entity.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * The if of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ImageProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageProfileArgs | ImageProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageProfileState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalRegionId"] = state ? state.externalRegionId : undefined;
            resourceInputs["imageMappings"] = state ? state.imageMappings : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ImageProfileArgs | undefined;
            if ((!args || args.regionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageMappings"] = args ? args.imageMappings : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["externalRegionId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageProfile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ImageProfile resources.
 */
export interface ImageProfileState {
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of the region for which this profile is defined as in the cloud provider.
     */
    externalRegionId?: pulumi.Input<string>;
    imageMappings?: pulumi.Input<pulumi.Input<inputs.ImageProfileImageMapping>[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * Email of the user that owns the entity.
     */
    owner?: pulumi.Input<string>;
    /**
     * The if of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    regionId?: pulumi.Input<string>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageProfile resource.
 */
export interface ImageProfileArgs {
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    imageMappings?: pulumi.Input<pulumi.Input<inputs.ImageProfileImageMapping>[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * The if of the region for which this profile is defined as in vRealize Automation(vRA).
     */
    regionId: pulumi.Input<string>;
}
