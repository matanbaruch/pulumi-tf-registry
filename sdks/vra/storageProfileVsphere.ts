// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class StorageProfileVsphere extends pulumi.CustomResource {
    /**
     * Get an existing StorageProfileVsphere resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageProfileVsphereState, opts?: pulumi.CustomResourceOptions): StorageProfileVsphere {
        return new StorageProfileVsphere(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/storageProfileVsphere:StorageProfileVsphere';

    /**
     * Returns true if the given object is an instance of StorageProfileVsphere.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageProfileVsphere {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageProfileVsphere.__pulumiType;
    }

    /**
     * Id of the cloud account this storage profile belongs to.
     */
    public /*out*/ readonly cloudAccountId!: pulumi.Output<string>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Id of the vSphere Datastore for placing disk and VM.
     */
    public readonly datastoreId!: pulumi.Output<string | undefined>;
    /**
     * Indicates if a storage profile acts as a default storage profile for a disk.
     */
    public readonly defaultItem!: pulumi.Output<boolean>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Type of mode for the disk. Omitting this value will set it to dependent. example: dependent / independent-persistent /
     * independent-nonpersistent.
     */
    public readonly diskMode!: pulumi.Output<string>;
    /**
     * Disk types are specified as standard or first class, empty value is considered as standard.
     */
    public readonly diskType!: pulumi.Output<string | undefined>;
    /**
     * The id of the region for which this profile is defined
     */
    public /*out*/ readonly externalRegionId!: pulumi.Output<string>;
    /**
     * The upper bound for the I/O operations per second allocated for each virtual disk.
     */
    public readonly limitIops!: pulumi.Output<string | undefined>;
    public /*out*/ readonly links!: pulumi.Output<outputs.StorageProfileVsphereLink[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Email of the user that owns the entity.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Type of provisioning policy for the disk.
     */
    public readonly provisioningType!: pulumi.Output<string | undefined>;
    /**
     * The Id of the region that is associated with the storage profile.
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * A specific number of shares assigned to each virtual machine.
     */
    public readonly shares!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    public readonly sharesLevel!: pulumi.Output<string | undefined>;
    /**
     * Id of the vSphere Storage Policy to be applied.
     */
    public readonly storagePolicyId!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    public readonly supportsEncryption!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<outputs.StorageProfileVsphereTag[] | undefined>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a StorageProfileVsphere resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageProfileVsphereArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageProfileVsphereArgs | StorageProfileVsphereState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageProfileVsphereState | undefined;
            resourceInputs["cloudAccountId"] = state ? state.cloudAccountId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["datastoreId"] = state ? state.datastoreId : undefined;
            resourceInputs["defaultItem"] = state ? state.defaultItem : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskMode"] = state ? state.diskMode : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["externalRegionId"] = state ? state.externalRegionId : undefined;
            resourceInputs["limitIops"] = state ? state.limitIops : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["provisioningType"] = state ? state.provisioningType : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["shares"] = state ? state.shares : undefined;
            resourceInputs["sharesLevel"] = state ? state.sharesLevel : undefined;
            resourceInputs["storagePolicyId"] = state ? state.storagePolicyId : undefined;
            resourceInputs["supportsEncryption"] = state ? state.supportsEncryption : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as StorageProfileVsphereArgs | undefined;
            if ((!args || args.defaultItem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultItem'");
            }
            if ((!args || args.regionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionId'");
            }
            resourceInputs["datastoreId"] = args ? args.datastoreId : undefined;
            resourceInputs["defaultItem"] = args ? args.defaultItem : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskMode"] = args ? args.diskMode : undefined;
            resourceInputs["diskType"] = args ? args.diskType : undefined;
            resourceInputs["limitIops"] = args ? args.limitIops : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["provisioningType"] = args ? args.provisioningType : undefined;
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["shares"] = args ? args.shares : undefined;
            resourceInputs["sharesLevel"] = args ? args.sharesLevel : undefined;
            resourceInputs["storagePolicyId"] = args ? args.storagePolicyId : undefined;
            resourceInputs["supportsEncryption"] = args ? args.supportsEncryption : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cloudAccountId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["externalRegionId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageProfileVsphere.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering StorageProfileVsphere resources.
 */
export interface StorageProfileVsphereState {
    /**
     * Id of the cloud account this storage profile belongs to.
     */
    cloudAccountId?: pulumi.Input<string>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Id of the vSphere Datastore for placing disk and VM.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * Indicates if a storage profile acts as a default storage profile for a disk.
     */
    defaultItem?: pulumi.Input<boolean>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Type of mode for the disk. Omitting this value will set it to dependent. example: dependent / independent-persistent /
     * independent-nonpersistent.
     */
    diskMode?: pulumi.Input<string>;
    /**
     * Disk types are specified as standard or first class, empty value is considered as standard.
     */
    diskType?: pulumi.Input<string>;
    /**
     * The id of the region for which this profile is defined
     */
    externalRegionId?: pulumi.Input<string>;
    /**
     * The upper bound for the I/O operations per second allocated for each virtual disk.
     */
    limitIops?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.StorageProfileVsphereLink>[]>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Email of the user that owns the entity.
     */
    owner?: pulumi.Input<string>;
    /**
     * Type of provisioning policy for the disk.
     */
    provisioningType?: pulumi.Input<string>;
    /**
     * The Id of the region that is associated with the storage profile.
     */
    regionId?: pulumi.Input<string>;
    /**
     * A specific number of shares assigned to each virtual machine.
     */
    shares?: pulumi.Input<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    sharesLevel?: pulumi.Input<string>;
    /**
     * Id of the vSphere Storage Policy to be applied.
     */
    storagePolicyId?: pulumi.Input<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    supportsEncryption?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.StorageProfileVsphereTag>[]>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageProfileVsphere resource.
 */
export interface StorageProfileVsphereArgs {
    /**
     * Id of the vSphere Datastore for placing disk and VM.
     */
    datastoreId?: pulumi.Input<string>;
    /**
     * Indicates if a storage profile acts as a default storage profile for a disk.
     */
    defaultItem: pulumi.Input<boolean>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Type of mode for the disk. Omitting this value will set it to dependent. example: dependent / independent-persistent /
     * independent-nonpersistent.
     */
    diskMode?: pulumi.Input<string>;
    /**
     * Disk types are specified as standard or first class, empty value is considered as standard.
     */
    diskType?: pulumi.Input<string>;
    /**
     * The upper bound for the I/O operations per second allocated for each virtual disk.
     */
    limitIops?: pulumi.Input<string>;
    /**
     * A human-friendly name used as an identifier in APIs that support this option.
     */
    name?: pulumi.Input<string>;
    /**
     * Type of provisioning policy for the disk.
     */
    provisioningType?: pulumi.Input<string>;
    /**
     * The Id of the region that is associated with the storage profile.
     */
    regionId: pulumi.Input<string>;
    /**
     * A specific number of shares assigned to each virtual machine.
     */
    shares?: pulumi.Input<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    sharesLevel?: pulumi.Input<string>;
    /**
     * Id of the vSphere Storage Policy to be applied.
     */
    storagePolicyId?: pulumi.Input<string>;
    /**
     * Indicates whether this storage profile supports encryption or not.
     */
    supportsEncryption?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.StorageProfileVsphereTag>[]>;
}
