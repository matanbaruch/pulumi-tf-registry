// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface BlockDeviceConstraint {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface BlockDeviceLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface BlockDeviceSnapshot {
    createdAt: string;
    description: string;
    id: string;
    isCurrent: boolean;
    links: outputs.BlockDeviceSnapshotLink[];
    name: string;
    orgId: string;
    owner: string;
    updatedAt: string;
}

export interface BlockDeviceSnapshotLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface BlockDeviceSnapshotTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BlockDeviceTag {
    key: string;
    value: string;
}

export interface BlockDeviceTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface BlueprintValidationMessage {
    message: string;
    metadata: {[key: string]: string};
    path: string;
    resourceName: string;
    type: string;
}

export interface CatalogItemEntitlementDefinition {
    description: string;
    iconId: string;
    id: string;
    name: string;
    numberOfItems: number;
    sourceName: string;
    sourceType: string;
    type: string;
}

export interface CatalogSourceEntitlementDefinition {
    description: string;
    iconId: string;
    id: string;
    name: string;
    numberOfItems: number;
    sourceName: string;
    sourceType: string;
    type: string;
}

export interface CloudAccountAwsLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface CloudAccountAwsTag {
    key: string;
    value: string;
}

export interface CloudAccountAzureLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface CloudAccountAzureTag {
    key: string;
    value: string;
}

export interface CloudAccountGcpLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface CloudAccountGcpTag {
    key: string;
    value: string;
}

export interface CloudAccountNsxtLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface CloudAccountNsxtTag {
    key: string;
    value: string;
}

export interface CloudAccountNsxvLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface CloudAccountNsxvTag {
    key: string;
    value: string;
}

export interface CloudAccountVmcLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface CloudAccountVmcTag {
    key: string;
    value: string;
}

export interface CloudAccountVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface CloudAccountVsphereTag {
    key: string;
    value: string;
}

export interface ContentSourceConfig {
    branch?: string;
    contentType?: string;
    integrationId: string;
    path: string;
    projectName: string;
    repository?: string;
}

export interface DeploymentExpense {
    additionalExpense: number;
    code: string;
    computeExpense: number;
    lastUpdateTime: string;
    message: string;
    networkExpense: number;
    storageExpense: number;
    totalExpense: number;
    unit: string;
}

export interface DeploymentLastRequest {
    actionId: string;
    approvedAt: string;
    blueprintId: string;
    cancelable: boolean;
    catalogItemId: string;
    completedAt: string;
    completedTasks: number;
    createdAt: string;
    details: string;
    dismissed: boolean;
    id: string;
    initializedAt: string;
    inputs: {[key: string]: string};
    name: string;
    outputs: {[key: string]: string};
    requestedBy: string;
    resourceIds: string[];
    status: string;
    totalTasks: number;
    updatedAt: string;
}

export interface DeploymentProject {
    description: string;
    id: string;
    name: string;
    version: string;
}

export interface DeploymentResource {
    createdAt: string;
    dependsOns: string[];
    description: string;
    expenses: outputs.DeploymentResourceExpense[];
    id: string;
    name: string;
    propertiesJson: string;
    state: string;
    syncStatus: string;
    type: string;
}

export interface DeploymentResourceExpense {
    additionalExpense: number;
    code: string;
    computeExpense: number;
    lastUpdateTime: string;
    message: string;
    networkExpense: number;
    storageExpense: number;
    totalExpense: number;
    unit: string;
}

export interface DeploymentTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface FabricComputeLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface FabricComputeTag {
    key: string;
    value: string;
}

export interface FabricDatastoreVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface FabricDatastoreVsphereTag {
    key: string;
    value: string;
}

export interface FabricNetworkVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface FabricNetworkVsphereTag {
    key: string;
    value: string;
}

export interface FlavorProfileFlavorMapping {
    /**
     * Number of CPU cores. Mandatory for private clouds such as vSphere. Only `instance_type` or `cpu_count`/`memory` must be specified.
     */
    cpuCount?: number;
    /**
     * The value of the instance type in the corresponding cloud. Mandatory for public clouds. Only `instance_type` or `cpu_count`/`memory` must be specified.
     */
    instanceType?: string;
    /**
     * Total amount of memory (in megabytes). Mandatory for private clouds such as vSphere. Only `instance_type` or `cpu_count`/`memory` must be specified.
     */
    memory?: number;
    /**
     * The name of the flavor mapping.
     */
    name: string;
}

export interface FlavorProfileLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetBlockDeviceLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetBlockDeviceSnapshot {
    createdAt: string;
    description: string;
    id: string;
    isCurrent: boolean;
    links: outputs.GetBlockDeviceSnapshotLink[];
    name: string;
    orgId: string;
    owner: string;
    updatedAt: string;
}

export interface GetBlockDeviceSnapshotLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetBlockDeviceSnapshotsSnapshot {
    createdAt: string;
    description: string;
    id: string;
    isCurrent: boolean;
    links: outputs.GetBlockDeviceSnapshotsSnapshotLink[];
    name: string;
    orgId: string;
    owner: string;
    updatedAt: string;
}

export interface GetBlockDeviceSnapshotsSnapshotLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetBlockDeviceTag {
    key: string;
    value: string;
}

export interface GetBlueprintValidationMessage {
    message: string;
    metadata: {[key: string]: string};
    path: string;
    resourceName: string;
    type: string;
}

export interface GetCatalogItemEntitlementDefinition {
    description: string;
    iconId: string;
    id: string;
    name: string;
    numberOfItems: number;
    sourceName: string;
    sourceType: string;
    type: string;
}

export interface GetCatalogItemProject {
    description: string;
    id: string;
    name: string;
    version: string;
}

export interface GetCatalogItemType {
    description: string;
    id: string;
    name: string;
    version: string;
}

export interface GetCatalogItemVersion {
    createdAt: string;
    description: string;
    id: string;
}

export interface GetCatalogSourceEntitlementDefinition {
    description: string;
    iconId: string;
    id: string;
    name: string;
    numberOfItems: number;
    sourceName: string;
    sourceType: string;
    type: string;
}

export interface GetCloudAccountAwsLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetCloudAccountAwsTag {
    key: string;
    value: string;
}

export interface GetCloudAccountAzureLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetCloudAccountAzureTag {
    key: string;
    value: string;
}

export interface GetCloudAccountGcpLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetCloudAccountGcpTag {
    key: string;
    value: string;
}

export interface GetCloudAccountNsxtLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetCloudAccountNsxtTag {
    key: string;
    value: string;
}

export interface GetCloudAccountNsxvLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetCloudAccountNsxvTag {
    key: string;
    value: string;
}

export interface GetCloudAccountVmcLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetCloudAccountVmcTag {
    key: string;
    value: string;
}

export interface GetCloudAccountVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetCloudAccountVsphereTag {
    key: string;
    value: string;
}

export interface GetDeploymentExpense {
    additionalExpense: number;
    code: string;
    computeExpense: number;
    lastUpdateTime: string;
    message: string;
    networkExpense: number;
    storageExpense: number;
    totalExpense: number;
    unit: string;
}

export interface GetDeploymentLastRequest {
    actionId: string;
    approvedAt: string;
    blueprintId: string;
    cancelable: boolean;
    catalogItemId: string;
    completedAt: string;
    completedTasks: number;
    createdAt: string;
    details: string;
    dismissed: boolean;
    id: string;
    initializedAt: string;
    inputs: {[key: string]: string};
    name: string;
    outputs: {[key: string]: string};
    requestedBy: string;
    resourceIds: string[];
    status: string;
    totalTasks: number;
    updatedAt: string;
}

export interface GetDeploymentProject {
    description: string;
    id: string;
    name: string;
    version: string;
}

export interface GetDeploymentResource {
    createdAt: string;
    dependsOns: string[];
    description: string;
    expenses: outputs.GetDeploymentResourceExpense[];
    id: string;
    name: string;
    propertiesJson: string;
    state: string;
    syncStatus: string;
    type: string;
}

export interface GetDeploymentResourceExpense {
    additionalExpense: number;
    code: string;
    computeExpense: number;
    lastUpdateTime: string;
    message: string;
    networkExpense: number;
    storageExpense: number;
    totalExpense: number;
    unit: string;
}

export interface GetFabricComputeLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetFabricComputeTag {
    key: string;
    value: string;
}

export interface GetFabricDatastoreVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetFabricDatastoreVsphereTag {
    key: string;
    value: string;
}

export interface GetFabricNetworkLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetFabricNetworkTag {
    key: string;
    value: string;
}

export interface GetFabricStorageAccountAzureLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetFabricStoragePolicyVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetImageLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetImageProfileImageMapping {
    /**
     * Cloud config for this image. This cloud config will be merged during provisioning with other cloud configurations such as the bootConfig provided in MachineSpecification or vRA cloud templates.
     */
    cloudConfig?: string;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    constraints?: outputs.GetImageProfileImageMappingConstraint[];
    /**
     * A human-friendly description.
     */
    description: string;
    /**
     * External entity id on the cloud provider side.
     */
    externalId: string;
    /**
     * External region id on the cloud provider side.
     */
    externalRegionId: string;
    /**
     * The id of this resource instance.
     */
    imageId?: string;
    /**
     * A human-friendly image name as seen on the cloud provider side.
     */
    imageName?: string;
    /**
     * A human-friendly name of the image mapping.
     */
    name: string;
    /**
     * A human-friendly description.
     */
    organization: string;
    /**
     * Operating system family of the image.
     */
    osFamily: string;
    /**
     * Email of the user that owns the entity.
     */
    owner: string;
    /**
     * Indicates whether this fabric image is private. For vSphere, private images are considered to be templates and snapshots and public are Content Library items.
     */
    private: boolean;
}

export interface GetImageProfileImageMappingConstraint {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface GetMachineLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetMachineTag {
    key: string;
    value: string;
}

export interface GetNetworkConstraint {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface GetNetworkDomainLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetNetworkDomainTag {
    key: string;
    value: string;
}

export interface GetNetworkLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetNetworkProfileLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetNetworkProfileTag {
    key: string;
    value: string;
}

export interface GetNetworkTag {
    key: string;
    value: string;
}

export interface GetProjectAdministratorRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface GetProjectConstraints {
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    extensibilities?: outputs.GetProjectConstraintsExtensibility[];
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    networks?: outputs.GetProjectConstraintsNetwork[];
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    storages?: outputs.GetProjectConstraintsStorage[];
}

export interface GetProjectConstraintsExtensibility {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface GetProjectConstraintsNetwork {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface GetProjectConstraintsStorage {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface GetProjectMemberRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface GetProjectSupervisorRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface GetProjectViewerRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface GetProjectZoneAssignment {
    /**
     * The maximum amount of cpus that can be used by this cloud zone. Default is 0 (unlimited cpu).
     */
    cpuLimit: number;
    /**
     * The maximum number of instances that can be provisioned in this cloud zone. Default is 0 (unlimited instances)
     */
    maxInstances: number;
    /**
     * The maximum amount of memory that can be used by this cloud zone. Default is 0 (unlimited memory).
     */
    memoryLimitMb: number;
    /**
     * The priority of this zone in the current project. Lower numbers mean higher priority. Default is 0 (highest)
     */
    priority: number;
    /**
     * Upper limit on storage that can be requested from a cloud zone which is part of this project. Default is 0 (unlimited storage). Supported only for vSphere cloud zones.
     */
    storageLimitGb: number;
    /**
     * The Cloud Zone Id
     */
    zoneId: string;
}

export interface GetSecurityGroupLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetSecurityGroupRule {
    access: string;
    direction: string;
    ipRangeCidr: number;
    name?: string;
    ports: string;
    protocol: string;
    service?: string;
}

export interface GetStorageProfileAwsLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetStorageProfileAwsTag {
    key: string;
    value: string;
}

export interface GetStorageProfileAzureLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetStorageProfileAzureTag {
    key: string;
    value: string;
}

export interface GetStorageProfileLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetStorageProfileTag {
    key: string;
    value: string;
}

export interface GetStorageProfileVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetStorageProfileVsphereTag {
    key: string;
    value: string;
}

export interface GetZoneLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface GetZoneTag {
    key: string;
    value: string;
}

export interface GetZoneTagsToMatch {
    key: string;
    value: string;
}

export interface ImageProfileImageMapping {
    /**
     * Cloud config for this image. This cloud config will be merged during provisioning with other cloud configurations such as the bootConfig provided in MachineSpecification or vRA cloud templates.
     */
    cloudConfig?: string;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    constraints?: outputs.ImageProfileImageMappingConstraint[];
    /**
     * A human-friendly description.
     */
    description: string;
    /**
     * External entity id on the cloud provider side.
     */
    externalId: string;
    /**
     * External region id on the cloud provider side.
     */
    externalRegionId: string;
    /**
     * The id of this resource instance.
     */
    imageId?: string;
    /**
     * A human-friendly image name as seen on the cloud provider side.
     */
    imageName?: string;
    /**
     * A human-friendly name of the image mapping.
     */
    name: string;
    /**
     * A human-friendly description.
     */
    organization: string;
    /**
     * Operating system family of the image.
     */
    osFamily: string;
    /**
     * Email of the user that owns the entity.
     */
    owner: string;
    /**
     * Indicates whether this fabric image is private. For vSphere, private images are considered to be templates and snapshots and public are Content Library items.
     */
    private: boolean;
}

export interface ImageProfileImageMappingConstraint {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface IntegrationLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface IntegrationTag {
    key: string;
    value: string;
}

export interface LoadBalancerLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface LoadBalancerNic {
    addresses?: string[];
    customProperties?: {[key: string]: string};
    description?: string;
    deviceIndex?: number;
    name?: string;
    networkId: string;
    securityGroupIds?: string[];
}

export interface LoadBalancerRoute {
    healthCheckConfigurations?: outputs.LoadBalancerRouteHealthCheckConfiguration[];
    memberPort: string;
    memberProtocol: string;
    port: string;
    protocol: string;
}

export interface LoadBalancerRouteHealthCheckConfiguration {
    healthyThreshold?: number;
    intervalSeconds?: number;
    port: string;
    protocol: string;
    timeoutSeconds?: number;
    unhealthyThreshold?: number;
    urlPath?: string;
}

export interface LoadBalancerTag {
    key: string;
    value: string;
}

export interface LoadBalancerTarget {
    machineId: string;
    networkInterfaceId?: string;
}

export interface MachineBootConfig {
    /**
     * A valid cloud config data in json-escaped yaml syntax.
     */
    content?: string;
}

export interface MachineConstraint {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface MachineDisk {
    /**
     * The id of the existing block device.
     */
    blockDeviceId: string;
    /**
     * A human-friendly description.
     */
    description?: string;
    /**
     * A human-friendly block-device name used as an identifier in APIs that support this option.
     */
    name?: string;
}

export interface MachineDisksList {
    blockDeviceId: string;
    description: string;
    name: string;
}

export interface MachineImageDiskConstraint {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface MachineLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface MachineNic {
    addresses?: string[];
    customProperties?: {[key: string]: string};
    description?: string;
    deviceIndex?: number;
    name?: string;
    networkId: string;
    securityGroupIds?: string[];
}

export interface MachineTag {
    key: string;
    value: string;
}

export interface MachineTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface NetworkConstraint {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface NetworkIpRangeLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface NetworkIpRangeTag {
    key: string;
    value: string;
}

export interface NetworkLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface NetworkProfileLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface NetworkProfileTag {
    key: string;
    value: string;
}

export interface NetworkTag {
    key: string;
    value: string;
}

export interface NetworkTimeouts {
    create?: string;
    delete?: string;
    update?: string;
}

export interface ProjectAdministratorRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface ProjectConstraints {
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    extensibilities?: outputs.ProjectConstraintsExtensibility[];
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    networks?: outputs.ProjectConstraintsNetwork[];
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint expressions are matched against tags on existing placement targets.
     */
    storages?: outputs.ProjectConstraintsStorage[];
}

export interface ProjectConstraintsExtensibility {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface ProjectConstraintsNetwork {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface ProjectConstraintsStorage {
    /**
     * An expression of the form "[!]tag-key[:[tag-value]]", used to indicate a constraint match on keys and values of tags.
     */
    expression: string;
    /**
     * Indicates whether this constraint should be strictly enforced or not.
     */
    mandatory: boolean;
}

export interface ProjectMemberRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface ProjectSupervisorRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface ProjectViewerRole {
    /**
     * The email of the user or name of the group.
     */
    email: string;
    /**
     * Type of the principal. Currently supported ‘user’ (default) and 'group’.
     */
    type?: string;
}

export interface ProjectZoneAssignment {
    /**
     * The maximum amount of cpus that can be used by this cloud zone. Default is 0 (unlimited cpu).
     */
    cpuLimit?: number;
    /**
     * The maximum number of instances that can be provisioned in this cloud zone. Default is 0 (unlimited instances)
     */
    maxInstances?: number;
    /**
     * The maximum amount of memory that can be used by this cloud zone. Default is 0 (unlimited memory).
     */
    memoryLimitMb?: number;
    /**
     * The priority of this zone in the current project. Lower numbers mean higher priority. Default is 0 (highest)
     */
    priority?: number;
    /**
     * Upper limit on storage that can be requested from a cloud zone which is part of this project. Default is 0 (unlimited storage). Supported only for vSphere cloud zones.
     */
    storageLimitGb?: number;
    /**
     * The Cloud Zone Id
     */
    zoneId: string;
}

export interface StorageProfileAwsLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface StorageProfileAwsTag {
    key: string;
    value: string;
}

export interface StorageProfileAzureLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface StorageProfileAzureTag {
    key: string;
    value: string;
}

export interface StorageProfileLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface StorageProfileTag {
    key: string;
    value: string;
}

export interface StorageProfileVsphereLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface StorageProfileVsphereTag {
    key: string;
    value: string;
}

export interface ZoneLink {
    href: string;
    hrefs: string[];
    rel: string;
}

export interface ZoneTag {
    key: string;
    value: string;
}

export interface ZoneTagsToMatch {
    key: string;
    value: string;
}

