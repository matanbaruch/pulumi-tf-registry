// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CloudAccountVmc extends pulumi.CustomResource {
    /**
     * Get an existing CloudAccountVmc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudAccountVmcState, opts?: pulumi.CustomResourceOptions): CloudAccountVmc {
        return new CloudAccountVmc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/cloudAccountVmc:CloudAccountVmc';

    /**
     * Returns true if the given object is an instance of CloudAccountVmc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudAccountVmc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudAccountVmc.__pulumiType;
    }

    /**
     * Whether to accept self signed certificate when connecting to the vCenter Server.
     */
    public readonly acceptSelfSignedCert!: pulumi.Output<boolean | undefined>;
    public readonly apiToken!: pulumi.Output<string>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Identifier of a data collector vm deployed in the on premise infrastructure.
     */
    public readonly dcId!: pulumi.Output<string | undefined>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly links!: pulumi.Output<outputs.CloudAccountVmcLink[]>;
    /**
     * The name of this resource instance.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly nsxHostname!: pulumi.Output<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Email of the user that owns the entity.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * The set of region ids that will be enabled for this cloud account.
     */
    public readonly regions!: pulumi.Output<string[]>;
    public readonly sddcName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.CloudAccountVmcTag[] | undefined>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly vcenterHostname!: pulumi.Output<string>;
    public readonly vcenterPassword!: pulumi.Output<string>;
    public readonly vcenterUsername!: pulumi.Output<string>;

    /**
     * Create a CloudAccountVmc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudAccountVmcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudAccountVmcArgs | CloudAccountVmcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudAccountVmcState | undefined;
            resourceInputs["acceptSelfSignedCert"] = state ? state.acceptSelfSignedCert : undefined;
            resourceInputs["apiToken"] = state ? state.apiToken : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dcId"] = state ? state.dcId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nsxHostname"] = state ? state.nsxHostname : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["sddcName"] = state ? state.sddcName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vcenterHostname"] = state ? state.vcenterHostname : undefined;
            resourceInputs["vcenterPassword"] = state ? state.vcenterPassword : undefined;
            resourceInputs["vcenterUsername"] = state ? state.vcenterUsername : undefined;
        } else {
            const args = argsOrState as CloudAccountVmcArgs | undefined;
            if ((!args || args.apiToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiToken'");
            }
            if ((!args || args.nsxHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nsxHostname'");
            }
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            if ((!args || args.sddcName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sddcName'");
            }
            if ((!args || args.vcenterHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterHostname'");
            }
            if ((!args || args.vcenterPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterPassword'");
            }
            if ((!args || args.vcenterUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vcenterUsername'");
            }
            resourceInputs["acceptSelfSignedCert"] = args ? args.acceptSelfSignedCert : undefined;
            resourceInputs["apiToken"] = args ? args.apiToken : undefined;
            resourceInputs["dcId"] = args ? args.dcId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nsxHostname"] = args ? args.nsxHostname : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["sddcName"] = args ? args.sddcName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vcenterHostname"] = args ? args.vcenterHostname : undefined;
            resourceInputs["vcenterPassword"] = args?.vcenterPassword ? pulumi.secret(args.vcenterPassword) : undefined;
            resourceInputs["vcenterUsername"] = args ? args.vcenterUsername : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["vcenterPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(CloudAccountVmc.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CloudAccountVmc resources.
 */
export interface CloudAccountVmcState {
    /**
     * Whether to accept self signed certificate when connecting to the vCenter Server.
     */
    acceptSelfSignedCert?: pulumi.Input<boolean>;
    apiToken?: pulumi.Input<string>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Identifier of a data collector vm deployed in the on premise infrastructure.
     */
    dcId?: pulumi.Input<string>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.CloudAccountVmcLink>[]>;
    /**
     * The name of this resource instance.
     */
    name?: pulumi.Input<string>;
    nsxHostname?: pulumi.Input<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Email of the user that owns the entity.
     */
    owner?: pulumi.Input<string>;
    /**
     * The set of region ids that will be enabled for this cloud account.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    sddcName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.CloudAccountVmcTag>[]>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
    vcenterHostname?: pulumi.Input<string>;
    vcenterPassword?: pulumi.Input<string>;
    vcenterUsername?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudAccountVmc resource.
 */
export interface CloudAccountVmcArgs {
    /**
     * Whether to accept self signed certificate when connecting to the vCenter Server.
     */
    acceptSelfSignedCert?: pulumi.Input<boolean>;
    apiToken: pulumi.Input<string>;
    /**
     * Identifier of a data collector vm deployed in the on premise infrastructure.
     */
    dcId?: pulumi.Input<string>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of this resource instance.
     */
    name?: pulumi.Input<string>;
    nsxHostname: pulumi.Input<string>;
    /**
     * The set of region ids that will be enabled for this cloud account.
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    sddcName: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.CloudAccountVmcTag>[]>;
    vcenterHostname: pulumi.Input<string>;
    vcenterPassword: pulumi.Input<string>;
    vcenterUsername: pulumi.Input<string>;
}
