// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ContentSharingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ContentSharingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContentSharingPolicyState, opts?: pulumi.CustomResourceOptions): ContentSharingPolicy {
        return new ContentSharingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/contentSharingPolicy:ContentSharingPolicy';

    /**
     * Returns true if the given object is an instance of ContentSharingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContentSharingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContentSharingPolicy.__pulumiType;
    }

    /**
     * List of catalog item ids to share.
     */
    public readonly catalogItemIds!: pulumi.Output<string[] | undefined>;
    /**
     * List of catalog source ids to share.
     */
    public readonly catalogSourceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Policy creation timestamp.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Policy author.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The policy description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Most recent policy update timestamp.
     */
    public /*out*/ readonly lastUpdatedAt!: pulumi.Output<string>;
    /**
     * Most recent policy editor..
     */
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    /**
     * The policy name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the organization to which the policy belongs.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * The ID of the project to which the policy belongs.
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a ContentSharingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContentSharingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContentSharingPolicyArgs | ContentSharingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContentSharingPolicyState | undefined;
            resourceInputs["catalogItemIds"] = state ? state.catalogItemIds : undefined;
            resourceInputs["catalogSourceIds"] = state ? state.catalogSourceIds : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lastUpdatedAt"] = state ? state.lastUpdatedAt : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as ContentSharingPolicyArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["catalogItemIds"] = args ? args.catalogItemIds : undefined;
            resourceInputs["catalogSourceIds"] = args ? args.catalogSourceIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["lastUpdatedAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContentSharingPolicy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContentSharingPolicy resources.
 */
export interface ContentSharingPolicyState {
    /**
     * List of catalog item ids to share.
     */
    catalogItemIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of catalog source ids to share.
     */
    catalogSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy creation timestamp.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Policy author.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The policy description.
     */
    description?: pulumi.Input<string>;
    /**
     * Most recent policy update timestamp.
     */
    lastUpdatedAt?: pulumi.Input<string>;
    /**
     * Most recent policy editor..
     */
    lastUpdatedBy?: pulumi.Input<string>;
    /**
     * The policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the organization to which the policy belongs.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The ID of the project to which the policy belongs.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContentSharingPolicy resource.
 */
export interface ContentSharingPolicyArgs {
    /**
     * List of catalog item ids to share.
     */
    catalogItemIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of catalog source ids to share.
     */
    catalogSourceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The policy description.
     */
    description?: pulumi.Input<string>;
    /**
     * The policy name.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the project to which the policy belongs.
     */
    projectId: pulumi.Input<string>;
}
