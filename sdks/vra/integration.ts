// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * Ids of the cloud accounts to associate with this integration.
     */
    public readonly associatedCloudAccountIds!: pulumi.Output<string[] | undefined>;
    /**
     * Certificate to be used to connect to the integration.
     */
    public readonly certificate!: pulumi.Output<string | undefined>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Additional custom properties that may be used to extend the Integration.
     */
    public readonly customProperties!: pulumi.Output<{[key: string]: string}>;
    /**
     * A human-friendly description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Integration specific properties supplied in as name value pairs.
     */
    public readonly integrationProperties!: pulumi.Output<{[key: string]: string}>;
    /**
     * Integration type.
     */
    public readonly integrationType!: pulumi.Output<string>;
    public /*out*/ readonly links!: pulumi.Output<outputs.IntegrationLink[]>;
    /**
     * The name of the integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * Email of the user that owns the entity.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Secret access key or password to be used to authenticate with the integration.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * Access key id or username to be used to authenticate with the integration.
     */
    public readonly privateKeyId!: pulumi.Output<string | undefined>;
    public readonly tags!: pulumi.Output<outputs.IntegrationTag[] | undefined>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["associatedCloudAccountIds"] = state ? state.associatedCloudAccountIds : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["integrationProperties"] = state ? state.integrationProperties : undefined;
            resourceInputs["integrationType"] = state ? state.integrationType : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyId"] = state ? state.privateKeyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.integrationProperties === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationProperties'");
            }
            if ((!args || args.integrationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationType'");
            }
            resourceInputs["associatedCloudAccountIds"] = args ? args.associatedCloudAccountIds : undefined;
            resourceInputs["certificate"] = args?.certificate ? pulumi.secret(args.certificate) : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["integrationProperties"] = args ? args.integrationProperties : undefined;
            resourceInputs["integrationType"] = args ? args.integrationType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["privateKeyId"] = args?.privateKeyId ? pulumi.secret(args.privateKeyId) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["certificate", "privateKey", "privateKeyId"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Integration.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * Ids of the cloud accounts to associate with this integration.
     */
    associatedCloudAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate to be used to connect to the integration.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Date when the entity was created. The date is in ISO 8601 and UTC.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Additional custom properties that may be used to extend the Integration.
     */
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Integration specific properties supplied in as name value pairs.
     */
    integrationProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Integration type.
     */
    integrationType?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.IntegrationLink>[]>;
    /**
     * The name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the organization this entity belongs to.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Email of the user that owns the entity.
     */
    owner?: pulumi.Input<string>;
    /**
     * Secret access key or password to be used to authenticate with the integration.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Access key id or username to be used to authenticate with the integration.
     */
    privateKeyId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IntegrationTag>[]>;
    /**
     * Date when the entity was last updated. The date is ISO 8601 and UTC.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * Ids of the cloud accounts to associate with this integration.
     */
    associatedCloudAccountIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate to be used to connect to the integration.
     */
    certificate?: pulumi.Input<string>;
    /**
     * Additional custom properties that may be used to extend the Integration.
     */
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A human-friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Integration specific properties supplied in as name value pairs.
     */
    integrationProperties: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Integration type.
     */
    integrationType: pulumi.Input<string>;
    /**
     * The name of the integration.
     */
    name?: pulumi.Input<string>;
    /**
     * Secret access key or password to be used to authenticate with the integration.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Access key id or username to be used to authenticate with the integration.
     */
    privateKeyId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.IntegrationTag>[]>;
}
