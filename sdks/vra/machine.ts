// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Machine extends pulumi.CustomResource {
    /**
     * Get an existing Machine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MachineState, opts?: pulumi.CustomResourceOptions): Machine {
        return new Machine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/machine:Machine';

    /**
     * Returns true if the given object is an instance of Machine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Machine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Machine.__pulumiType;
    }

    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * Machine boot config that will be passed to the instance that can be used to perform common automated configuration tasks
     * and even run scripts after the instance starts.
     */
    public readonly bootConfig!: pulumi.Output<outputs.MachineBootConfig | undefined>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    public readonly constraints!: pulumi.Output<outputs.MachineConstraint[] | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Additional custom properties that may be used to extend the machine.
     */
    public readonly customProperties!: pulumi.Output<{[key: string]: string}>;
    /**
     * The id of the deployment that is associated with this resource.
     */
    public readonly deploymentId!: pulumi.Output<string>;
    /**
     * Describes machine within the scope of your organization and is not propagated to the cloud.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specification for attaching/detaching disks to a machine.
     */
    public readonly disks!: pulumi.Output<outputs.MachineDisk[] | undefined>;
    /**
     * List of all disks attached to a machine including boot disk, and additional block devices attached using the disks
     * attribute.
     */
    public /*out*/ readonly disksLists!: pulumi.Output<outputs.MachineDisksList[]>;
    public /*out*/ readonly externalId!: pulumi.Output<string>;
    public /*out*/ readonly externalRegionId!: pulumi.Output<string>;
    public /*out*/ readonly externalZoneId!: pulumi.Output<string>;
    public readonly flavor!: pulumi.Output<string>;
    /**
     * Type of image used for this machine.
     */
    public readonly image!: pulumi.Output<string | undefined>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    public readonly imageDiskConstraints!: pulumi.Output<outputs.MachineImageDiskConstraint[] | undefined>;
    public readonly imageRef!: pulumi.Output<string | undefined>;
    public /*out*/ readonly links!: pulumi.Output<outputs.MachineLink[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly nics!: pulumi.Output<outputs.MachineNic[] | undefined>;
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.MachineTag[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.MachineTimeouts | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Machine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MachineArgs | MachineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MachineState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["bootConfig"] = state ? state.bootConfig : undefined;
            resourceInputs["constraints"] = state ? state.constraints : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disks"] = state ? state.disks : undefined;
            resourceInputs["disksLists"] = state ? state.disksLists : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["externalRegionId"] = state ? state.externalRegionId : undefined;
            resourceInputs["externalZoneId"] = state ? state.externalZoneId : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["imageDiskConstraints"] = state ? state.imageDiskConstraints : undefined;
            resourceInputs["imageRef"] = state ? state.imageRef : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nics"] = state ? state.nics : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as MachineArgs | undefined;
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["bootConfig"] = args ? args.bootConfig : undefined;
            resourceInputs["constraints"] = args ? args.constraints : undefined;
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disks"] = args ? args.disks : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["imageDiskConstraints"] = args ? args.imageDiskConstraints : undefined;
            resourceInputs["imageRef"] = args ? args.imageRef : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nics"] = args ? args.nics : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["disksLists"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["externalRegionId"] = undefined /*out*/;
            resourceInputs["externalZoneId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Machine.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Machine resources.
 */
export interface MachineState {
    address?: pulumi.Input<string>;
    /**
     * Machine boot config that will be passed to the instance that can be used to perform common automated configuration tasks
     * and even run scripts after the instance starts.
     */
    bootConfig?: pulumi.Input<inputs.MachineBootConfig>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    constraints?: pulumi.Input<pulumi.Input<inputs.MachineConstraint>[]>;
    createdAt?: pulumi.Input<string>;
    /**
     * Additional custom properties that may be used to extend the machine.
     */
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the deployment that is associated with this resource.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Describes machine within the scope of your organization and is not propagated to the cloud.
     */
    description?: pulumi.Input<string>;
    /**
     * Specification for attaching/detaching disks to a machine.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.MachineDisk>[]>;
    /**
     * List of all disks attached to a machine including boot disk, and additional block devices attached using the disks
     * attribute.
     */
    disksLists?: pulumi.Input<pulumi.Input<inputs.MachineDisksList>[]>;
    externalId?: pulumi.Input<string>;
    externalRegionId?: pulumi.Input<string>;
    externalZoneId?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    /**
     * Type of image used for this machine.
     */
    image?: pulumi.Input<string>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    imageDiskConstraints?: pulumi.Input<pulumi.Input<inputs.MachineImageDiskConstraint>[]>;
    imageRef?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.MachineLink>[]>;
    name?: pulumi.Input<string>;
    nics?: pulumi.Input<pulumi.Input<inputs.MachineNic>[]>;
    organizationId?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    powerState?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.MachineTag>[]>;
    timeouts?: pulumi.Input<inputs.MachineTimeouts>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Machine resource.
 */
export interface MachineArgs {
    /**
     * Machine boot config that will be passed to the instance that can be used to perform common automated configuration tasks
     * and even run scripts after the instance starts.
     */
    bootConfig?: pulumi.Input<inputs.MachineBootConfig>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    constraints?: pulumi.Input<pulumi.Input<inputs.MachineConstraint>[]>;
    /**
     * Additional custom properties that may be used to extend the machine.
     */
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the deployment that is associated with this resource.
     */
    deploymentId?: pulumi.Input<string>;
    /**
     * Describes machine within the scope of your organization and is not propagated to the cloud.
     */
    description?: pulumi.Input<string>;
    /**
     * Specification for attaching/detaching disks to a machine.
     */
    disks?: pulumi.Input<pulumi.Input<inputs.MachineDisk>[]>;
    flavor: pulumi.Input<string>;
    /**
     * Type of image used for this machine.
     */
    image?: pulumi.Input<string>;
    /**
     * Constraints that are used to drive placement policies for entities such as image, network, storage, etc. Constraint
     * expressions are matched against tags on existing placement targets.
     */
    imageDiskConstraints?: pulumi.Input<pulumi.Input<inputs.MachineImageDiskConstraint>[]>;
    imageRef?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    nics?: pulumi.Input<pulumi.Input<inputs.MachineNic>[]>;
    projectId: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.MachineTag>[]>;
    timeouts?: pulumi.Input<inputs.MachineTimeouts>;
}
