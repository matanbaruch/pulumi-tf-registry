// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    public /*out*/ readonly address!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly customProperties!: pulumi.Output<{[key: string]: string}>;
    public readonly deploymentId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly externalId!: pulumi.Output<string>;
    public /*out*/ readonly externalRegionId!: pulumi.Output<string>;
    public /*out*/ readonly externalZoneId!: pulumi.Output<string>;
    public readonly internetFacing!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly links!: pulumi.Output<outputs.LoadBalancerLink[]>;
    public readonly name!: pulumi.Output<string>;
    public readonly nics!: pulumi.Output<outputs.LoadBalancerNic[]>;
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public readonly routes!: pulumi.Output<outputs.LoadBalancerRoute[]>;
    public readonly tags!: pulumi.Output<outputs.LoadBalancerTag[] | undefined>;
    public readonly targets!: pulumi.Output<outputs.LoadBalancerTarget[] | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customProperties"] = state ? state.customProperties : undefined;
            resourceInputs["deploymentId"] = state ? state.deploymentId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["externalRegionId"] = state ? state.externalRegionId : undefined;
            resourceInputs["externalZoneId"] = state ? state.externalZoneId : undefined;
            resourceInputs["internetFacing"] = state ? state.internetFacing : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nics"] = state ? state.nics : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if ((!args || args.nics === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nics'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.routes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routes'");
            }
            resourceInputs["customProperties"] = args ? args.customProperties : undefined;
            resourceInputs["deploymentId"] = args ? args.deploymentId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["internetFacing"] = args ? args.internetFacing : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nics"] = args ? args.nics : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["routes"] = args ? args.routes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["externalId"] = undefined /*out*/;
            resourceInputs["externalRegionId"] = undefined /*out*/;
            resourceInputs["externalZoneId"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    address?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    externalRegionId?: pulumi.Input<string>;
    externalZoneId?: pulumi.Input<string>;
    internetFacing?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.LoadBalancerLink>[]>;
    name?: pulumi.Input<string>;
    nics?: pulumi.Input<pulumi.Input<inputs.LoadBalancerNic>[]>;
    organizationId?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.LoadBalancerRoute>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTag>[]>;
    targets?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTarget>[]>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    customProperties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deploymentId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    internetFacing?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    nics: pulumi.Input<pulumi.Input<inputs.LoadBalancerNic>[]>;
    projectId: pulumi.Input<string>;
    routes: pulumi.Input<pulumi.Input<inputs.LoadBalancerRoute>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTag>[]>;
    targets?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTarget>[]>;
}
