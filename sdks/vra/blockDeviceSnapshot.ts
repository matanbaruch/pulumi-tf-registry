// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockDeviceSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing BlockDeviceSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockDeviceSnapshotState, opts?: pulumi.CustomResourceOptions): BlockDeviceSnapshot {
        return new BlockDeviceSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/blockDeviceSnapshot:BlockDeviceSnapshot';

    /**
     * Returns true if the given object is an instance of BlockDeviceSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockDeviceSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockDeviceSnapshot.__pulumiType;
    }

    public readonly blockDeviceId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly isCurrent!: pulumi.Output<boolean>;
    public /*out*/ readonly links!: pulumi.Output<outputs.BlockDeviceSnapshotLink[]>;
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    public /*out*/ readonly owner!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.BlockDeviceSnapshotTimeouts | undefined>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a BlockDeviceSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockDeviceSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockDeviceSnapshotArgs | BlockDeviceSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockDeviceSnapshotState | undefined;
            resourceInputs["blockDeviceId"] = state ? state.blockDeviceId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isCurrent"] = state ? state.isCurrent : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as BlockDeviceSnapshotArgs | undefined;
            if ((!args || args.blockDeviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'blockDeviceId'");
            }
            resourceInputs["blockDeviceId"] = args ? args.blockDeviceId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isCurrent"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockDeviceSnapshot.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockDeviceSnapshot resources.
 */
export interface BlockDeviceSnapshotState {
    blockDeviceId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    isCurrent?: pulumi.Input<boolean>;
    links?: pulumi.Input<pulumi.Input<inputs.BlockDeviceSnapshotLink>[]>;
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockDeviceSnapshotTimeouts>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockDeviceSnapshot resource.
 */
export interface BlockDeviceSnapshotArgs {
    blockDeviceId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.BlockDeviceSnapshotTimeouts>;
}
