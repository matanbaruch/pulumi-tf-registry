// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CatalogSourceBlueprint extends pulumi.CustomResource {
    /**
     * Get an existing CatalogSourceBlueprint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogSourceBlueprintState, opts?: pulumi.CustomResourceOptions): CatalogSourceBlueprint {
        return new CatalogSourceBlueprint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'vra:index/catalogSourceBlueprint:CatalogSourceBlueprint';

    /**
     * Returns true if the given object is an instance of CatalogSourceBlueprint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogSourceBlueprint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogSourceBlueprint.__pulumiType;
    }

    public readonly config!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly global!: pulumi.Output<boolean>;
    public /*out*/ readonly itemsFound!: pulumi.Output<string>;
    public /*out*/ readonly itemsImported!: pulumi.Output<string>;
    public /*out*/ readonly lastImportCompletedAt!: pulumi.Output<string>;
    public /*out*/ readonly lastImportErrors!: pulumi.Output<string[]>;
    public /*out*/ readonly lastImportStartedAt!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdatedBy!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly typeId!: pulumi.Output<string>;

    /**
     * Create a CatalogSourceBlueprint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogSourceBlueprintArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogSourceBlueprintArgs | CatalogSourceBlueprintState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogSourceBlueprintState | undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["global"] = state ? state.global : undefined;
            resourceInputs["itemsFound"] = state ? state.itemsFound : undefined;
            resourceInputs["itemsImported"] = state ? state.itemsImported : undefined;
            resourceInputs["lastImportCompletedAt"] = state ? state.lastImportCompletedAt : undefined;
            resourceInputs["lastImportErrors"] = state ? state.lastImportErrors : undefined;
            resourceInputs["lastImportStartedAt"] = state ? state.lastImportStartedAt : undefined;
            resourceInputs["lastUpdatedBy"] = state ? state.lastUpdatedBy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["typeId"] = state ? state.typeId : undefined;
        } else {
            const args = argsOrState as CatalogSourceBlueprintArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["global"] = undefined /*out*/;
            resourceInputs["itemsFound"] = undefined /*out*/;
            resourceInputs["itemsImported"] = undefined /*out*/;
            resourceInputs["lastImportCompletedAt"] = undefined /*out*/;
            resourceInputs["lastImportErrors"] = undefined /*out*/;
            resourceInputs["lastImportStartedAt"] = undefined /*out*/;
            resourceInputs["lastUpdatedBy"] = undefined /*out*/;
            resourceInputs["typeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogSourceBlueprint.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CatalogSourceBlueprint resources.
 */
export interface CatalogSourceBlueprintState {
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    createdAt?: pulumi.Input<string>;
    createdBy?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    global?: pulumi.Input<boolean>;
    itemsFound?: pulumi.Input<string>;
    itemsImported?: pulumi.Input<string>;
    lastImportCompletedAt?: pulumi.Input<string>;
    lastImportErrors?: pulumi.Input<pulumi.Input<string>[]>;
    lastImportStartedAt?: pulumi.Input<string>;
    lastUpdatedBy?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    typeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogSourceBlueprint resource.
 */
export interface CatalogSourceBlueprintArgs {
    config?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
}
