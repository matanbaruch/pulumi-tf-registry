// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getUser(args: GetUserArgs, opts?: pulumi.InvokeOptions): Promise<GetUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ad:index/getUser:getUser", {
        "id": args.id,
        "userId": args.userId,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserArgs {
    id?: string;
    userId: string;
}

/**
 * A collection of values returned by getUser.
 */
export interface GetUserResult {
    readonly city: string;
    readonly company: string;
    readonly country: string;
    readonly department: string;
    readonly description: string;
    readonly displayName: string;
    readonly division: string;
    readonly dn: string;
    readonly emailAddress: string;
    readonly employeeId: string;
    readonly employeeNumber: string;
    readonly fax: string;
    readonly givenName: string;
    readonly homeDirectory: string;
    readonly homeDrive: string;
    readonly homePage: string;
    readonly homePhone: string;
    readonly id: string;
    readonly initials: string;
    readonly mobilePhone: string;
    readonly office: string;
    readonly officePhone: string;
    readonly organization: string;
    readonly otherName: string;
    readonly poBox: string;
    readonly postalCode: string;
    readonly principalName: string;
    readonly samAccountName: string;
    readonly sid: string;
    readonly smartCardLogonRequired: boolean;
    readonly state: string;
    readonly streetAddress: string;
    readonly surname: string;
    readonly title: string;
    readonly trustedForDelegation: boolean;
    readonly userId: string;
}
export function getUserOutput(args: GetUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetUserResult> {
    return pulumi.output(args).apply((a: any) => getUser(a, opts))
}

/**
 * A collection of arguments for invoking getUser.
 */
export interface GetUserOutputArgs {
    id?: pulumi.Input<string>;
    userId: pulumi.Input<string>;
}
