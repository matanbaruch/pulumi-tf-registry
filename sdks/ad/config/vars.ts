// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("ad");

/**
 * Use a specific domain controller. (default: none, environment variable: AD_DC)
 */
export declare const domainController: string | undefined;
Object.defineProperty(exports, "domainController", {
    get() {
        return __config.get("domainController");
    },
    enumerable: true,
});

/**
 * Path to kerberos configuration file. (default: none, environment variable: AD_KRB_CONF)
 */
export declare const krbConf: string | undefined;
Object.defineProperty(exports, "krbConf", {
    get() {
        return __config.get("krbConf");
    },
    enumerable: true,
});

/**
 * Path to a keytab file to be used instead of a password
 */
export declare const krbKeytab: string | undefined;
Object.defineProperty(exports, "krbKeytab", {
    get() {
        return __config.get("krbKeytab");
    },
    enumerable: true,
});

/**
 * The name of the kerberos realm (domain) we will use for authentication. (default: "", environment variable:
 * AD_KRB_REALM)
 */
export declare const krbRealm: string | undefined;
Object.defineProperty(exports, "krbRealm", {
    get() {
        return __config.get("krbRealm");
    },
    enumerable: true,
});

/**
 * Alternative Service Principal Name. (default: none, environment variable: AD_KRB_SPN)
 */
export declare const krbSpn: string | undefined;
Object.defineProperty(exports, "krbSpn", {
    get() {
        return __config.get("krbSpn");
    },
    enumerable: true,
});

/**
 * The hostname of the server we will use to run powershell scripts over WinRM. (Environment variable: AD_HOSTNAME)
 */
export declare const winrmHostname: string | undefined;
Object.defineProperty(exports, "winrmHostname", {
    get() {
        return __config.get("winrmHostname");
    },
    enumerable: true,
});

/**
 * Trust unknown certificates. (default: false, environment variable: AD_WINRM_INSECURE)
 */
export declare const winrmInsecure: boolean | undefined;
Object.defineProperty(exports, "winrmInsecure", {
    get() {
        return __config.getObject<boolean>("winrmInsecure");
    },
    enumerable: true,
});

/**
 * Pass credentials in WinRM session to create a System.Management.Automation.PSCredential. (default: false, environment
 * variable: AD_WINRM_PASS_CREDENTIALS)
 */
export declare const winrmPassCredentials: boolean | undefined;
Object.defineProperty(exports, "winrmPassCredentials", {
    get() {
        return __config.getObject<boolean>("winrmPassCredentials");
    },
    enumerable: true,
});

/**
 * The password used to authenticate to the server's WinRM service. (Environment variable: AD_PASSWORD)
 */
export declare const winrmPassword: string | undefined;
Object.defineProperty(exports, "winrmPassword", {
    get() {
        return __config.get("winrmPassword");
    },
    enumerable: true,
});

/**
 * The port WinRM is listening for connections. (default: 5985, environment variable: AD_PORT)
 */
export declare const winrmPort: number | undefined;
Object.defineProperty(exports, "winrmPort", {
    get() {
        return __config.getObject<number>("winrmPort");
    },
    enumerable: true,
});

/**
 * The WinRM protocol we will use. (default: http, environment variable: AD_PROTO)
 */
export declare const winrmProto: string | undefined;
Object.defineProperty(exports, "winrmProto", {
    get() {
        return __config.get("winrmProto");
    },
    enumerable: true,
});

/**
 * Use NTLM authentication. (default: false, environment variable: AD_WINRM_USE_NTLM)
 */
export declare const winrmUseNtlm: boolean | undefined;
Object.defineProperty(exports, "winrmUseNtlm", {
    get() {
        return __config.getObject<boolean>("winrmUseNtlm");
    },
    enumerable: true,
});

/**
 * The username used to authenticate to the server's WinRM service. (Environment variable: AD_USER)
 */
export declare const winrmUsername: string | undefined;
Object.defineProperty(exports, "winrmUsername", {
    get() {
        return __config.get("winrmUsername");
    },
    enumerable: true,
});

