// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the ad package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'ad';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * Use a specific domain controller. (default: none, environment variable: AD_DC)
     */
    public readonly domainController!: pulumi.Output<string | undefined>;
    /**
     * Path to kerberos configuration file. (default: none, environment variable: AD_KRB_CONF)
     */
    public readonly krbConf!: pulumi.Output<string | undefined>;
    /**
     * Path to a keytab file to be used instead of a password
     */
    public readonly krbKeytab!: pulumi.Output<string | undefined>;
    /**
     * The name of the kerberos realm (domain) we will use for authentication. (default: "", environment variable:
     * AD_KRB_REALM)
     */
    public readonly krbRealm!: pulumi.Output<string | undefined>;
    /**
     * Alternative Service Principal Name. (default: none, environment variable: AD_KRB_SPN)
     */
    public readonly krbSpn!: pulumi.Output<string | undefined>;
    /**
     * The hostname of the server we will use to run powershell scripts over WinRM. (Environment variable: AD_HOSTNAME)
     */
    public readonly winrmHostname!: pulumi.Output<string>;
    /**
     * The password used to authenticate to the server's WinRM service. (Environment variable: AD_PASSWORD)
     */
    public readonly winrmPassword!: pulumi.Output<string>;
    /**
     * The WinRM protocol we will use. (default: http, environment variable: AD_PROTO)
     */
    public readonly winrmProto!: pulumi.Output<string | undefined>;
    /**
     * The username used to authenticate to the server's WinRM service. (Environment variable: AD_USER)
     */
    public readonly winrmUsername!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.winrmHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'winrmHostname'");
            }
            if ((!args || args.winrmPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'winrmPassword'");
            }
            if ((!args || args.winrmUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'winrmUsername'");
            }
            resourceInputs["domainController"] = args ? args.domainController : undefined;
            resourceInputs["krbConf"] = args ? args.krbConf : undefined;
            resourceInputs["krbKeytab"] = args ? args.krbKeytab : undefined;
            resourceInputs["krbRealm"] = args ? args.krbRealm : undefined;
            resourceInputs["krbSpn"] = args ? args.krbSpn : undefined;
            resourceInputs["winrmHostname"] = args ? args.winrmHostname : undefined;
            resourceInputs["winrmInsecure"] = pulumi.output(args ? args.winrmInsecure : undefined).apply(JSON.stringify);
            resourceInputs["winrmPassCredentials"] = pulumi.output(args ? args.winrmPassCredentials : undefined).apply(JSON.stringify);
            resourceInputs["winrmPassword"] = args ? args.winrmPassword : undefined;
            resourceInputs["winrmPort"] = pulumi.output(args ? args.winrmPort : undefined).apply(JSON.stringify);
            resourceInputs["winrmProto"] = args ? args.winrmProto : undefined;
            resourceInputs["winrmUseNtlm"] = pulumi.output(args ? args.winrmUseNtlm : undefined).apply(JSON.stringify);
            resourceInputs["winrmUsername"] = args ? args.winrmUsername : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Use a specific domain controller. (default: none, environment variable: AD_DC)
     */
    domainController?: pulumi.Input<string>;
    /**
     * Path to kerberos configuration file. (default: none, environment variable: AD_KRB_CONF)
     */
    krbConf?: pulumi.Input<string>;
    /**
     * Path to a keytab file to be used instead of a password
     */
    krbKeytab?: pulumi.Input<string>;
    /**
     * The name of the kerberos realm (domain) we will use for authentication. (default: "", environment variable:
     * AD_KRB_REALM)
     */
    krbRealm?: pulumi.Input<string>;
    /**
     * Alternative Service Principal Name. (default: none, environment variable: AD_KRB_SPN)
     */
    krbSpn?: pulumi.Input<string>;
    /**
     * The hostname of the server we will use to run powershell scripts over WinRM. (Environment variable: AD_HOSTNAME)
     */
    winrmHostname: pulumi.Input<string>;
    /**
     * Trust unknown certificates. (default: false, environment variable: AD_WINRM_INSECURE)
     */
    winrmInsecure?: pulumi.Input<boolean>;
    /**
     * Pass credentials in WinRM session to create a System.Management.Automation.PSCredential. (default: false, environment
     * variable: AD_WINRM_PASS_CREDENTIALS)
     */
    winrmPassCredentials?: pulumi.Input<boolean>;
    /**
     * The password used to authenticate to the server's WinRM service. (Environment variable: AD_PASSWORD)
     */
    winrmPassword: pulumi.Input<string>;
    /**
     * The port WinRM is listening for connections. (default: 5985, environment variable: AD_PORT)
     */
    winrmPort?: pulumi.Input<number>;
    /**
     * The WinRM protocol we will use. (default: http, environment variable: AD_PROTO)
     */
    winrmProto?: pulumi.Input<string>;
    /**
     * Use NTLM authentication. (default: false, environment variable: AD_WINRM_USE_NTLM)
     */
    winrmUseNtlm?: pulumi.Input<boolean>;
    /**
     * The username used to authenticate to the server's WinRM service. (Environment variable: AD_USER)
     */
    winrmUsername: pulumi.Input<string>;
}
