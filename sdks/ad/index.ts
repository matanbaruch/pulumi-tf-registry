// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ComputerArgs, ComputerState } from "./computer";
export type Computer = import("./computer").Computer;
export const Computer: typeof import("./computer").Computer = null as any;
utilities.lazyLoad(exports, ["Computer"], () => require("./computer"));

export { GetComputerArgs, GetComputerResult, GetComputerOutputArgs } from "./getComputer";
export const getComputer: typeof import("./getComputer").getComputer = null as any;
export const getComputerOutput: typeof import("./getComputer").getComputerOutput = null as any;
utilities.lazyLoad(exports, ["getComputer","getComputerOutput"], () => require("./getComputer"));

export { GetGpoArgs, GetGpoResult, GetGpoOutputArgs } from "./getGpo";
export const getGpo: typeof import("./getGpo").getGpo = null as any;
export const getGpoOutput: typeof import("./getGpo").getGpoOutput = null as any;
utilities.lazyLoad(exports, ["getGpo","getGpoOutput"], () => require("./getGpo"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetOuArgs, GetOuResult, GetOuOutputArgs } from "./getOu";
export const getOu: typeof import("./getOu").getOu = null as any;
export const getOuOutput: typeof import("./getOu").getOuOutput = null as any;
utilities.lazyLoad(exports, ["getOu","getOuOutput"], () => require("./getOu"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GplinkArgs, GplinkState } from "./gplink";
export type Gplink = import("./gplink").Gplink;
export const Gplink: typeof import("./gplink").Gplink = null as any;
utilities.lazyLoad(exports, ["Gplink"], () => require("./gplink"));

export { GpoArgs, GpoState } from "./gpo";
export type Gpo = import("./gpo").Gpo;
export const Gpo: typeof import("./gpo").Gpo = null as any;
utilities.lazyLoad(exports, ["Gpo"], () => require("./gpo"));

export { GpoSecurityArgs, GpoSecurityState } from "./gpoSecurity";
export type GpoSecurity = import("./gpoSecurity").GpoSecurity;
export const GpoSecurity: typeof import("./gpoSecurity").GpoSecurity = null as any;
utilities.lazyLoad(exports, ["GpoSecurity"], () => require("./gpoSecurity"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { OuArgs, OuState } from "./ou";
export type Ou = import("./ou").Ou;
export const Ou: typeof import("./ou").Ou = null as any;
utilities.lazyLoad(exports, ["Ou"], () => require("./ou"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ad:index/computer:Computer":
                return new Computer(name, <any>undefined, { urn })
            case "ad:index/gplink:Gplink":
                return new Gplink(name, <any>undefined, { urn })
            case "ad:index/gpo:Gpo":
                return new Gpo(name, <any>undefined, { urn })
            case "ad:index/gpoSecurity:GpoSecurity":
                return new GpoSecurity(name, <any>undefined, { urn })
            case "ad:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "ad:index/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "ad:index/ou:Ou":
                return new Ou(name, <any>undefined, { urn })
            case "ad:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ad", "index/computer", _module)
pulumi.runtime.registerResourceModule("ad", "index/gplink", _module)
pulumi.runtime.registerResourceModule("ad", "index/gpo", _module)
pulumi.runtime.registerResourceModule("ad", "index/gpoSecurity", _module)
pulumi.runtime.registerResourceModule("ad", "index/group", _module)
pulumi.runtime.registerResourceModule("ad", "index/groupMembership", _module)
pulumi.runtime.registerResourceModule("ad", "index/ou", _module)
pulumi.runtime.registerResourceModule("ad", "index/user", _module)
pulumi.runtime.registerResourcePackage("ad", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ad") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
