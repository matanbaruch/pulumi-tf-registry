// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class S3Source extends pulumi.CustomResource {
    /**
     * Get an existing S3Source resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: S3SourceState, opts?: pulumi.CustomResourceOptions): S3Source {
        return new S3Source(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'panther:index/s3Source:S3Source';

    /**
     * Returns true if the given object is an instance of S3Source.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is S3Source {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === S3Source.__pulumiType;
    }

    /**
     * The ID of the AWS Account where the S3 Bucket is located.
     */
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * The name of the S3 Bucket where logs will be ingested from.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The KMS key ARN used to access the S3 Bucket.
     */
    public readonly kmsKeyArn!: pulumi.Output<string>;
    /**
     * The AWS Role used to access the S3 Bucket.
     */
    public readonly logProcessingRoleArn!: pulumi.Output<string>;
    /**
     * The format of the log files being ingested.
     */
    public readonly logStreamType!: pulumi.Output<string>;
    /**
     * The display name of the S3 Log Source integration.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly pantherManagedBucketNotificationsEnabled!: pulumi.Output<boolean>;
    /**
     * The configured mapping of prefixes to log types.
     */
    public readonly prefixLogTypes!: pulumi.Output<outputs.S3SourcePrefixLogType[]>;

    /**
     * Create a S3Source resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: S3SourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: S3SourceArgs | S3SourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as S3SourceState | undefined;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["kmsKeyArn"] = state ? state.kmsKeyArn : undefined;
            resourceInputs["logProcessingRoleArn"] = state ? state.logProcessingRoleArn : undefined;
            resourceInputs["logStreamType"] = state ? state.logStreamType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pantherManagedBucketNotificationsEnabled"] = state ? state.pantherManagedBucketNotificationsEnabled : undefined;
            resourceInputs["prefixLogTypes"] = state ? state.prefixLogTypes : undefined;
        } else {
            const args = argsOrState as S3SourceArgs | undefined;
            if ((!args || args.awsAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'awsAccountId'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.logProcessingRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logProcessingRoleArn'");
            }
            if ((!args || args.logStreamType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logStreamType'");
            }
            if ((!args || args.prefixLogTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixLogTypes'");
            }
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["kmsKeyArn"] = args ? args.kmsKeyArn : undefined;
            resourceInputs["logProcessingRoleArn"] = args ? args.logProcessingRoleArn : undefined;
            resourceInputs["logStreamType"] = args ? args.logStreamType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pantherManagedBucketNotificationsEnabled"] = args ? args.pantherManagedBucketNotificationsEnabled : undefined;
            resourceInputs["prefixLogTypes"] = args ? args.prefixLogTypes : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(S3Source.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering S3Source resources.
 */
export interface S3SourceState {
    /**
     * The ID of the AWS Account where the S3 Bucket is located.
     */
    awsAccountId?: pulumi.Input<string>;
    /**
     * The name of the S3 Bucket where logs will be ingested from.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The KMS key ARN used to access the S3 Bucket.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * The AWS Role used to access the S3 Bucket.
     */
    logProcessingRoleArn?: pulumi.Input<string>;
    /**
     * The format of the log files being ingested.
     */
    logStreamType?: pulumi.Input<string>;
    /**
     * The display name of the S3 Log Source integration.
     */
    name?: pulumi.Input<string>;
    pantherManagedBucketNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * The configured mapping of prefixes to log types.
     */
    prefixLogTypes?: pulumi.Input<pulumi.Input<inputs.S3SourcePrefixLogType>[]>;
}

/**
 * The set of arguments for constructing a S3Source resource.
 */
export interface S3SourceArgs {
    /**
     * The ID of the AWS Account where the S3 Bucket is located.
     */
    awsAccountId: pulumi.Input<string>;
    /**
     * The name of the S3 Bucket where logs will be ingested from.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The KMS key ARN used to access the S3 Bucket.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * The AWS Role used to access the S3 Bucket.
     */
    logProcessingRoleArn: pulumi.Input<string>;
    /**
     * The format of the log files being ingested.
     */
    logStreamType: pulumi.Input<string>;
    /**
     * The display name of the S3 Log Source integration.
     */
    name?: pulumi.Input<string>;
    pantherManagedBucketNotificationsEnabled?: pulumi.Input<boolean>;
    /**
     * The configured mapping of prefixes to log types.
     */
    prefixLogTypes: pulumi.Input<pulumi.Input<inputs.S3SourcePrefixLogType>[]>;
}
