// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DefaultIngress extends pulumi.CustomResource {
    /**
     * Get an existing DefaultIngress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultIngressState, opts?: pulumi.CustomResourceOptions): DefaultIngress {
        return new DefaultIngress(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rhcs:index/defaultIngress:DefaultIngress';

    /**
     * Returns true if the given object is an instance of DefaultIngress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultIngress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultIngress.__pulumiType;
    }

    /**
     * Identifier of the cluster. After the creation of the resource, it is not possible to update the attribute value.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * Components route hostname for oauth, console, download.
     */
    public readonly clusterRoutesHostname!: pulumi.Output<string | undefined>;
    /**
     * Components route TLS secret reference for oauth, console, download.
     */
    public readonly clusterRoutesTlsSecretRef!: pulumi.Output<string | undefined>;
    /**
     * Component route parameters for oauth, console, downloads.
     */
    public readonly componentRoutes!: pulumi.Output<{[key: string]: outputs.DefaultIngressComponentRoutes} | undefined>;
    /**
     * Excluded namespaces for ingress. Format should be a comma-separated list 'value1, value2...'. If no values are
     * specified, all namespaces will be exposed.
     */
    public readonly excludedNamespaces!: pulumi.Output<string[] | undefined>;
    /**
     * Type of Load Balancer. Options are classic,nlb.
     */
    public readonly loadBalancerType!: pulumi.Output<string>;
    /**
     * Namespace Ownership Policy for ingress. Options are Strict,InterNamespaceAllowed. Default is 'Strict'.
     */
    public readonly routeNamespaceOwnershipPolicy!: pulumi.Output<string>;
    /**
     * Route Selectors for ingress. Format should be a comma-separated list of 'key=value'. If no label is specified, all
     * routes will be exposed on both routers.For legacy ingress support these are inclusion labels, otherwise they are treated
     * as exclusion label.
     */
    public readonly routeSelectors!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Wildcard Policy for ingress. Options are WildcardsDisallowed,WildcardsAllowed. Default is 'WildcardsDisallowed'.
     */
    public readonly routeWildcardPolicy!: pulumi.Output<string>;

    /**
     * Create a DefaultIngress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultIngressArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultIngressArgs | DefaultIngressState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultIngressState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["clusterRoutesHostname"] = state ? state.clusterRoutesHostname : undefined;
            resourceInputs["clusterRoutesTlsSecretRef"] = state ? state.clusterRoutesTlsSecretRef : undefined;
            resourceInputs["componentRoutes"] = state ? state.componentRoutes : undefined;
            resourceInputs["excludedNamespaces"] = state ? state.excludedNamespaces : undefined;
            resourceInputs["loadBalancerType"] = state ? state.loadBalancerType : undefined;
            resourceInputs["routeNamespaceOwnershipPolicy"] = state ? state.routeNamespaceOwnershipPolicy : undefined;
            resourceInputs["routeSelectors"] = state ? state.routeSelectors : undefined;
            resourceInputs["routeWildcardPolicy"] = state ? state.routeWildcardPolicy : undefined;
        } else {
            const args = argsOrState as DefaultIngressArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["clusterRoutesHostname"] = args ? args.clusterRoutesHostname : undefined;
            resourceInputs["clusterRoutesTlsSecretRef"] = args ? args.clusterRoutesTlsSecretRef : undefined;
            resourceInputs["componentRoutes"] = args ? args.componentRoutes : undefined;
            resourceInputs["excludedNamespaces"] = args ? args.excludedNamespaces : undefined;
            resourceInputs["loadBalancerType"] = args ? args.loadBalancerType : undefined;
            resourceInputs["routeNamespaceOwnershipPolicy"] = args ? args.routeNamespaceOwnershipPolicy : undefined;
            resourceInputs["routeSelectors"] = args ? args.routeSelectors : undefined;
            resourceInputs["routeWildcardPolicy"] = args ? args.routeWildcardPolicy : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultIngress.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering DefaultIngress resources.
 */
export interface DefaultIngressState {
    /**
     * Identifier of the cluster. After the creation of the resource, it is not possible to update the attribute value.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Components route hostname for oauth, console, download.
     */
    clusterRoutesHostname?: pulumi.Input<string>;
    /**
     * Components route TLS secret reference for oauth, console, download.
     */
    clusterRoutesTlsSecretRef?: pulumi.Input<string>;
    /**
     * Component route parameters for oauth, console, downloads.
     */
    componentRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DefaultIngressComponentRoutes>}>;
    /**
     * Excluded namespaces for ingress. Format should be a comma-separated list 'value1, value2...'. If no values are
     * specified, all namespaces will be exposed.
     */
    excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of Load Balancer. Options are classic,nlb.
     */
    loadBalancerType?: pulumi.Input<string>;
    /**
     * Namespace Ownership Policy for ingress. Options are Strict,InterNamespaceAllowed. Default is 'Strict'.
     */
    routeNamespaceOwnershipPolicy?: pulumi.Input<string>;
    /**
     * Route Selectors for ingress. Format should be a comma-separated list of 'key=value'. If no label is specified, all
     * routes will be exposed on both routers.For legacy ingress support these are inclusion labels, otherwise they are treated
     * as exclusion label.
     */
    routeSelectors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Wildcard Policy for ingress. Options are WildcardsDisallowed,WildcardsAllowed. Default is 'WildcardsDisallowed'.
     */
    routeWildcardPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DefaultIngress resource.
 */
export interface DefaultIngressArgs {
    /**
     * Identifier of the cluster. After the creation of the resource, it is not possible to update the attribute value.
     */
    cluster: pulumi.Input<string>;
    /**
     * Components route hostname for oauth, console, download.
     */
    clusterRoutesHostname?: pulumi.Input<string>;
    /**
     * Components route TLS secret reference for oauth, console, download.
     */
    clusterRoutesTlsSecretRef?: pulumi.Input<string>;
    /**
     * Component route parameters for oauth, console, downloads.
     */
    componentRoutes?: pulumi.Input<{[key: string]: pulumi.Input<inputs.DefaultIngressComponentRoutes>}>;
    /**
     * Excluded namespaces for ingress. Format should be a comma-separated list 'value1, value2...'. If no values are
     * specified, all namespaces will be exposed.
     */
    excludedNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of Load Balancer. Options are classic,nlb.
     */
    loadBalancerType?: pulumi.Input<string>;
    /**
     * Namespace Ownership Policy for ingress. Options are Strict,InterNamespaceAllowed. Default is 'Strict'.
     */
    routeNamespaceOwnershipPolicy?: pulumi.Input<string>;
    /**
     * Route Selectors for ingress. Format should be a comma-separated list of 'key=value'. If no label is specified, all
     * routes will be exposed on both routers.For legacy ingress support these are inclusion labels, otherwise they are treated
     * as exclusion label.
     */
    routeSelectors?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Wildcard Policy for ingress. Options are WildcardsDisallowed,WildcardsAllowed. Default is 'WildcardsDisallowed'.
     */
    routeWildcardPolicy?: pulumi.Input<string>;
}
