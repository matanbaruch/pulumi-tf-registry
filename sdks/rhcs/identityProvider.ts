// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing IdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityProviderState, opts?: pulumi.CustomResourceOptions): IdentityProvider {
        return new IdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rhcs:index/identityProvider:IdentityProvider';

    /**
     * Returns true if the given object is an instance of IdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityProvider.__pulumiType;
    }

    /**
     * Identifier of the cluster.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * Details of the Github identity provider.
     */
    public readonly github!: pulumi.Output<outputs.IdentityProviderGithub | undefined>;
    /**
     * Details of the Gitlab identity provider.
     */
    public readonly gitlab!: pulumi.Output<outputs.IdentityProviderGitlab | undefined>;
    /**
     * Details of the Google identity provider.
     */
    public readonly google!: pulumi.Output<outputs.IdentityProviderGoogle | undefined>;
    /**
     * Details of the 'htpasswd' identity provider.
     */
    public readonly htpasswd!: pulumi.Output<outputs.IdentityProviderHtpasswd | undefined>;
    /**
     * Details of the LDAP identity provider.
     */
    public readonly ldap!: pulumi.Output<outputs.IdentityProviderLdap | undefined>;
    /**
     * Specifies how new identities are mapped to users when they log in. Options are `add`, `claim`, `generate` and `lookup`.
     * (default is `claim`)
     */
    public readonly mappingMethod!: pulumi.Output<string>;
    /**
     * Name of the identity provider.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Details of the OpenID identity provider.
     */
    public readonly openid!: pulumi.Output<outputs.IdentityProviderOpenid | undefined>;

    /**
     * Create a IdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityProviderArgs | IdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityProviderState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["github"] = state ? state.github : undefined;
            resourceInputs["gitlab"] = state ? state.gitlab : undefined;
            resourceInputs["google"] = state ? state.google : undefined;
            resourceInputs["htpasswd"] = state ? state.htpasswd : undefined;
            resourceInputs["ldap"] = state ? state.ldap : undefined;
            resourceInputs["mappingMethod"] = state ? state.mappingMethod : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openid"] = state ? state.openid : undefined;
        } else {
            const args = argsOrState as IdentityProviderArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["github"] = args ? args.github : undefined;
            resourceInputs["gitlab"] = args ? args.gitlab : undefined;
            resourceInputs["google"] = args ? args.google : undefined;
            resourceInputs["htpasswd"] = args ? args.htpasswd : undefined;
            resourceInputs["ldap"] = args ? args.ldap : undefined;
            resourceInputs["mappingMethod"] = args ? args.mappingMethod : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openid"] = args ? args.openid : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IdentityProvider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IdentityProvider resources.
 */
export interface IdentityProviderState {
    /**
     * Identifier of the cluster.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Details of the Github identity provider.
     */
    github?: pulumi.Input<inputs.IdentityProviderGithub>;
    /**
     * Details of the Gitlab identity provider.
     */
    gitlab?: pulumi.Input<inputs.IdentityProviderGitlab>;
    /**
     * Details of the Google identity provider.
     */
    google?: pulumi.Input<inputs.IdentityProviderGoogle>;
    /**
     * Details of the 'htpasswd' identity provider.
     */
    htpasswd?: pulumi.Input<inputs.IdentityProviderHtpasswd>;
    /**
     * Details of the LDAP identity provider.
     */
    ldap?: pulumi.Input<inputs.IdentityProviderLdap>;
    /**
     * Specifies how new identities are mapped to users when they log in. Options are `add`, `claim`, `generate` and `lookup`.
     * (default is `claim`)
     */
    mappingMethod?: pulumi.Input<string>;
    /**
     * Name of the identity provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Details of the OpenID identity provider.
     */
    openid?: pulumi.Input<inputs.IdentityProviderOpenid>;
}

/**
 * The set of arguments for constructing a IdentityProvider resource.
 */
export interface IdentityProviderArgs {
    /**
     * Identifier of the cluster.
     */
    cluster: pulumi.Input<string>;
    /**
     * Details of the Github identity provider.
     */
    github?: pulumi.Input<inputs.IdentityProviderGithub>;
    /**
     * Details of the Gitlab identity provider.
     */
    gitlab?: pulumi.Input<inputs.IdentityProviderGitlab>;
    /**
     * Details of the Google identity provider.
     */
    google?: pulumi.Input<inputs.IdentityProviderGoogle>;
    /**
     * Details of the 'htpasswd' identity provider.
     */
    htpasswd?: pulumi.Input<inputs.IdentityProviderHtpasswd>;
    /**
     * Details of the LDAP identity provider.
     */
    ldap?: pulumi.Input<inputs.IdentityProviderLdap>;
    /**
     * Specifies how new identities are mapped to users when they log in. Options are `add`, `claim`, `generate` and `lookup`.
     * (default is `claim`)
     */
    mappingMethod?: pulumi.Input<string>;
    /**
     * Name of the identity provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Details of the OpenID identity provider.
     */
    openid?: pulumi.Input<inputs.IdentityProviderOpenid>;
}
