// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ClusterAutoscaler extends pulumi.CustomResource {
    /**
     * Get an existing ClusterAutoscaler resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterAutoscalerState, opts?: pulumi.CustomResourceOptions): ClusterAutoscaler {
        return new ClusterAutoscaler(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rhcs:index/clusterAutoscaler:ClusterAutoscaler';

    /**
     * Returns true if the given object is an instance of ClusterAutoscaler.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterAutoscaler {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterAutoscaler.__pulumiType;
    }

    /**
     * Automatically identify node groups with the same instance type and the same set of labels and try to keep the respective
     * sizes of those node groups balanced.
     */
    public readonly balanceSimilarNodeGroups!: pulumi.Output<boolean | undefined>;
    /**
     * This option specifies labels that cluster autoscaler should ignore when considering node group similarity. For example,
     * if you have nodes with 'topology.ebs.csi.aws.com/zone' label, you can add name of this label here to prevent cluster
     * autoscaler from splitting nodes into different node groups based on its value.
     */
    public readonly balancingIgnoredLabels!: pulumi.Output<string[] | undefined>;
    /**
     * Identifier of the cluster.After the creation of the resource, it is not possible to update the attribute value.
     */
    public readonly cluster!: pulumi.Output<string>;
    /**
     * Should cluster-autoscaler ignore DaemonSet pods when calculating resource utilization for scaling down. false by default
     */
    public readonly ignoreDaemonsetsUtilization!: pulumi.Output<boolean | undefined>;
    /**
     * Sets the autoscaler log level. Default value is 1, level 4 is recommended for DEBUGGING and level 6 will enable almost
     * everything.
     */
    public readonly logVerbosity!: pulumi.Output<number | undefined>;
    /**
     * Maximum time cluster-autoscaler waits for node to be provisioned.
     */
    public readonly maxNodeProvisionTime!: pulumi.Output<string | undefined>;
    /**
     * Gives pods graceful termination time before scaling down.
     */
    public readonly maxPodGracePeriod!: pulumi.Output<number | undefined>;
    /**
     * To allow users to schedule 'best-effort' pods, which shouldn't trigger Cluster Autoscaler actions, but only run when
     * there are spare resources available.
     */
    public readonly podPriorityThreshold!: pulumi.Output<number | undefined>;
    /**
     * Constraints of autoscaling resources.
     */
    public readonly resourceLimits!: pulumi.Output<outputs.ClusterAutoscalerResourceLimits | undefined>;
    /**
     * Configuration of scale down operation.
     */
    public readonly scaleDown!: pulumi.Output<outputs.ClusterAutoscalerScaleDown | undefined>;
    /**
     * If true cluster autoscaler will never delete nodes with pods with local storage, e.g. EmptyDir or HostPath. true by
     * default at autoscaler.
     */
    public readonly skipNodesWithLocalStorage!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ClusterAutoscaler resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterAutoscalerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterAutoscalerArgs | ClusterAutoscalerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterAutoscalerState | undefined;
            resourceInputs["balanceSimilarNodeGroups"] = state ? state.balanceSimilarNodeGroups : undefined;
            resourceInputs["balancingIgnoredLabels"] = state ? state.balancingIgnoredLabels : undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["ignoreDaemonsetsUtilization"] = state ? state.ignoreDaemonsetsUtilization : undefined;
            resourceInputs["logVerbosity"] = state ? state.logVerbosity : undefined;
            resourceInputs["maxNodeProvisionTime"] = state ? state.maxNodeProvisionTime : undefined;
            resourceInputs["maxPodGracePeriod"] = state ? state.maxPodGracePeriod : undefined;
            resourceInputs["podPriorityThreshold"] = state ? state.podPriorityThreshold : undefined;
            resourceInputs["resourceLimits"] = state ? state.resourceLimits : undefined;
            resourceInputs["scaleDown"] = state ? state.scaleDown : undefined;
            resourceInputs["skipNodesWithLocalStorage"] = state ? state.skipNodesWithLocalStorage : undefined;
        } else {
            const args = argsOrState as ClusterAutoscalerArgs | undefined;
            if ((!args || args.cluster === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cluster'");
            }
            resourceInputs["balanceSimilarNodeGroups"] = args ? args.balanceSimilarNodeGroups : undefined;
            resourceInputs["balancingIgnoredLabels"] = args ? args.balancingIgnoredLabels : undefined;
            resourceInputs["cluster"] = args ? args.cluster : undefined;
            resourceInputs["ignoreDaemonsetsUtilization"] = args ? args.ignoreDaemonsetsUtilization : undefined;
            resourceInputs["logVerbosity"] = args ? args.logVerbosity : undefined;
            resourceInputs["maxNodeProvisionTime"] = args ? args.maxNodeProvisionTime : undefined;
            resourceInputs["maxPodGracePeriod"] = args ? args.maxPodGracePeriod : undefined;
            resourceInputs["podPriorityThreshold"] = args ? args.podPriorityThreshold : undefined;
            resourceInputs["resourceLimits"] = args ? args.resourceLimits : undefined;
            resourceInputs["scaleDown"] = args ? args.scaleDown : undefined;
            resourceInputs["skipNodesWithLocalStorage"] = args ? args.skipNodesWithLocalStorage : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterAutoscaler.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ClusterAutoscaler resources.
 */
export interface ClusterAutoscalerState {
    /**
     * Automatically identify node groups with the same instance type and the same set of labels and try to keep the respective
     * sizes of those node groups balanced.
     */
    balanceSimilarNodeGroups?: pulumi.Input<boolean>;
    /**
     * This option specifies labels that cluster autoscaler should ignore when considering node group similarity. For example,
     * if you have nodes with 'topology.ebs.csi.aws.com/zone' label, you can add name of this label here to prevent cluster
     * autoscaler from splitting nodes into different node groups based on its value.
     */
    balancingIgnoredLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the cluster.After the creation of the resource, it is not possible to update the attribute value.
     */
    cluster?: pulumi.Input<string>;
    /**
     * Should cluster-autoscaler ignore DaemonSet pods when calculating resource utilization for scaling down. false by default
     */
    ignoreDaemonsetsUtilization?: pulumi.Input<boolean>;
    /**
     * Sets the autoscaler log level. Default value is 1, level 4 is recommended for DEBUGGING and level 6 will enable almost
     * everything.
     */
    logVerbosity?: pulumi.Input<number>;
    /**
     * Maximum time cluster-autoscaler waits for node to be provisioned.
     */
    maxNodeProvisionTime?: pulumi.Input<string>;
    /**
     * Gives pods graceful termination time before scaling down.
     */
    maxPodGracePeriod?: pulumi.Input<number>;
    /**
     * To allow users to schedule 'best-effort' pods, which shouldn't trigger Cluster Autoscaler actions, but only run when
     * there are spare resources available.
     */
    podPriorityThreshold?: pulumi.Input<number>;
    /**
     * Constraints of autoscaling resources.
     */
    resourceLimits?: pulumi.Input<inputs.ClusterAutoscalerResourceLimits>;
    /**
     * Configuration of scale down operation.
     */
    scaleDown?: pulumi.Input<inputs.ClusterAutoscalerScaleDown>;
    /**
     * If true cluster autoscaler will never delete nodes with pods with local storage, e.g. EmptyDir or HostPath. true by
     * default at autoscaler.
     */
    skipNodesWithLocalStorage?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ClusterAutoscaler resource.
 */
export interface ClusterAutoscalerArgs {
    /**
     * Automatically identify node groups with the same instance type and the same set of labels and try to keep the respective
     * sizes of those node groups balanced.
     */
    balanceSimilarNodeGroups?: pulumi.Input<boolean>;
    /**
     * This option specifies labels that cluster autoscaler should ignore when considering node group similarity. For example,
     * if you have nodes with 'topology.ebs.csi.aws.com/zone' label, you can add name of this label here to prevent cluster
     * autoscaler from splitting nodes into different node groups based on its value.
     */
    balancingIgnoredLabels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the cluster.After the creation of the resource, it is not possible to update the attribute value.
     */
    cluster: pulumi.Input<string>;
    /**
     * Should cluster-autoscaler ignore DaemonSet pods when calculating resource utilization for scaling down. false by default
     */
    ignoreDaemonsetsUtilization?: pulumi.Input<boolean>;
    /**
     * Sets the autoscaler log level. Default value is 1, level 4 is recommended for DEBUGGING and level 6 will enable almost
     * everything.
     */
    logVerbosity?: pulumi.Input<number>;
    /**
     * Maximum time cluster-autoscaler waits for node to be provisioned.
     */
    maxNodeProvisionTime?: pulumi.Input<string>;
    /**
     * Gives pods graceful termination time before scaling down.
     */
    maxPodGracePeriod?: pulumi.Input<number>;
    /**
     * To allow users to schedule 'best-effort' pods, which shouldn't trigger Cluster Autoscaler actions, but only run when
     * there are spare resources available.
     */
    podPriorityThreshold?: pulumi.Input<number>;
    /**
     * Constraints of autoscaling resources.
     */
    resourceLimits?: pulumi.Input<inputs.ClusterAutoscalerResourceLimits>;
    /**
     * Configuration of scale down operation.
     */
    scaleDown?: pulumi.Input<inputs.ClusterAutoscalerScaleDown>;
    /**
     * If true cluster autoscaler will never delete nodes with pods with local storage, e.g. EmptyDir or HostPath. true by
     * default at autoscaler.
     */
    skipNodesWithLocalStorage?: pulumi.Input<boolean>;
}
