// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RosaOidcConfigInput extends pulumi.CustomResource {
    /**
     * Get an existing RosaOidcConfigInput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RosaOidcConfigInputState, opts?: pulumi.CustomResourceOptions): RosaOidcConfigInput {
        return new RosaOidcConfigInput(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rhcs:index/rosaOidcConfigInput:RosaOidcConfigInput';

    /**
     * Returns true if the given object is an instance of RosaOidcConfigInput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RosaOidcConfigInput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RosaOidcConfigInput.__pulumiType;
    }

    /**
     * The S3 bucket name
     */
    public /*out*/ readonly bucketName!: pulumi.Output<string>;
    /**
     * The discovery document string file
     */
    public /*out*/ readonly discoveryDoc!: pulumi.Output<string>;
    /**
     * The issuer URL
     */
    public /*out*/ readonly issuerUrl!: pulumi.Output<string>;
    /**
     * JSON web key set string file
     */
    public /*out*/ readonly jwks!: pulumi.Output<string>;
    /**
     * RSA private key
     */
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    /**
     * The private key file name
     */
    public /*out*/ readonly privateKeyFileName!: pulumi.Output<string>;
    /**
     * The secret name that stores the private key
     */
    public /*out*/ readonly privateKeySecretName!: pulumi.Output<string>;
    /**
     * Unique identifier of the cluster.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a RosaOidcConfigInput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RosaOidcConfigInputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RosaOidcConfigInputArgs | RosaOidcConfigInputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RosaOidcConfigInputState | undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["discoveryDoc"] = state ? state.discoveryDoc : undefined;
            resourceInputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            resourceInputs["jwks"] = state ? state.jwks : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["privateKeyFileName"] = state ? state.privateKeyFileName : undefined;
            resourceInputs["privateKeySecretName"] = state ? state.privateKeySecretName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as RosaOidcConfigInputArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["bucketName"] = undefined /*out*/;
            resourceInputs["discoveryDoc"] = undefined /*out*/;
            resourceInputs["issuerUrl"] = undefined /*out*/;
            resourceInputs["jwks"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["privateKeyFileName"] = undefined /*out*/;
            resourceInputs["privateKeySecretName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RosaOidcConfigInput.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RosaOidcConfigInput resources.
 */
export interface RosaOidcConfigInputState {
    /**
     * The S3 bucket name
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The discovery document string file
     */
    discoveryDoc?: pulumi.Input<string>;
    /**
     * The issuer URL
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * JSON web key set string file
     */
    jwks?: pulumi.Input<string>;
    /**
     * RSA private key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The private key file name
     */
    privateKeyFileName?: pulumi.Input<string>;
    /**
     * The secret name that stores the private key
     */
    privateKeySecretName?: pulumi.Input<string>;
    /**
     * Unique identifier of the cluster.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RosaOidcConfigInput resource.
 */
export interface RosaOidcConfigInputArgs {
    /**
     * Unique identifier of the cluster.
     */
    region: pulumi.Input<string>;
}
