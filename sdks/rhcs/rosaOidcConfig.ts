// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RosaOidcConfig extends pulumi.CustomResource {
    /**
     * Get an existing RosaOidcConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RosaOidcConfigState, opts?: pulumi.CustomResourceOptions): RosaOidcConfig {
        return new RosaOidcConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rhcs:index/rosaOidcConfig:RosaOidcConfig';

    /**
     * Returns true if the given object is an instance of RosaOidcConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RosaOidcConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RosaOidcConfig.__pulumiType;
    }

    /**
     * AWS STS Role ARN for cluster install (with get-secrets permission in the attached policy)
     */
    public readonly installerRoleArn!: pulumi.Output<string | undefined>;
    /**
     * The bucket/issuer URL
     */
    public readonly issuerUrl!: pulumi.Output<string>;
    /**
     * Indicates whether it is a Red Hat managed or unmanaged (Customer hosted) OIDC configuration, for the cluster's OIDC
     * provider.
     */
    public readonly managed!: pulumi.Output<boolean>;
    /**
     * OIDC Endpoint URL
     */
    public /*out*/ readonly oidcEndpointUrl!: pulumi.Output<string>;
    /**
     * Indicates for unmanaged OIDC config, the secret ARN
     */
    public readonly secretArn!: pulumi.Output<string | undefined>;
    /**
     * SHA1-hash value of the root CA of the issuer URL
     */
    public /*out*/ readonly thumbprint!: pulumi.Output<string>;

    /**
     * Create a RosaOidcConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RosaOidcConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RosaOidcConfigArgs | RosaOidcConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RosaOidcConfigState | undefined;
            resourceInputs["installerRoleArn"] = state ? state.installerRoleArn : undefined;
            resourceInputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["oidcEndpointUrl"] = state ? state.oidcEndpointUrl : undefined;
            resourceInputs["secretArn"] = state ? state.secretArn : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
        } else {
            const args = argsOrState as RosaOidcConfigArgs | undefined;
            if ((!args || args.managed === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managed'");
            }
            resourceInputs["installerRoleArn"] = args ? args.installerRoleArn : undefined;
            resourceInputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["secretArn"] = args ? args.secretArn : undefined;
            resourceInputs["oidcEndpointUrl"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RosaOidcConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RosaOidcConfig resources.
 */
export interface RosaOidcConfigState {
    /**
     * AWS STS Role ARN for cluster install (with get-secrets permission in the attached policy)
     */
    installerRoleArn?: pulumi.Input<string>;
    /**
     * The bucket/issuer URL
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * Indicates whether it is a Red Hat managed or unmanaged (Customer hosted) OIDC configuration, for the cluster's OIDC
     * provider.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * OIDC Endpoint URL
     */
    oidcEndpointUrl?: pulumi.Input<string>;
    /**
     * Indicates for unmanaged OIDC config, the secret ARN
     */
    secretArn?: pulumi.Input<string>;
    /**
     * SHA1-hash value of the root CA of the issuer URL
     */
    thumbprint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RosaOidcConfig resource.
 */
export interface RosaOidcConfigArgs {
    /**
     * AWS STS Role ARN for cluster install (with get-secrets permission in the attached policy)
     */
    installerRoleArn?: pulumi.Input<string>;
    /**
     * The bucket/issuer URL
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * Indicates whether it is a Red Hat managed or unmanaged (Customer hosted) OIDC configuration, for the cluster's OIDC
     * provider.
     */
    managed: pulumi.Input<boolean>;
    /**
     * Indicates for unmanaged OIDC config, the secret ARN
     */
    secretArn?: pulumi.Input<string>;
}
