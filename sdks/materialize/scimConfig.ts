// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ScimConfig extends pulumi.CustomResource {
    /**
     * Get an existing ScimConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScimConfigState, opts?: pulumi.CustomResourceOptions): ScimConfig {
        return new ScimConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/scimConfig:ScimConfig';

    /**
     * Returns true if the given object is an instance of ScimConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScimConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScimConfig.__pulumiType;
    }

    /**
     * The name of the SCIM 2.0 connection. It must be unique.
     */
    public readonly connectionName!: pulumi.Output<string>;
    /**
     * The creation timestamp of the SCIM 2.0 configuration.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The provisioning URL of the SCIM 2.0 configuration.
     */
    public /*out*/ readonly provisioningUrl!: pulumi.Output<string>;
    /**
     * The source of the SCIM 2.0 configuration. Supported values are `okta`, `azure-ad`, and `other`.
     */
    public readonly source!: pulumi.Output<string>;
    /**
     * Indicates whether automatic synchronization of data with the IdP is enabled, ensuring that changes in details or status
     * in the IdP are updated accordingly.
     */
    public /*out*/ readonly syncToUserManagement!: pulumi.Output<boolean>;
    public /*out*/ readonly tenantId!: pulumi.Output<string>;
    /**
     * The token of the SCIM 2.0 configuration.
     */
    public /*out*/ readonly token!: pulumi.Output<string>;

    /**
     * Create a ScimConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScimConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScimConfigArgs | ScimConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScimConfigState | undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["provisioningUrl"] = state ? state.provisioningUrl : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["syncToUserManagement"] = state ? state.syncToUserManagement : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
        } else {
            const args = argsOrState as ScimConfigArgs | undefined;
            if ((!args || args.connectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionName'");
            }
            if ((!args || args.source === undefined) && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["connectionName"] = args ? args.connectionName : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["provisioningUrl"] = undefined /*out*/;
            resourceInputs["syncToUserManagement"] = undefined /*out*/;
            resourceInputs["tenantId"] = undefined /*out*/;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["provisioningUrl", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ScimConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ScimConfig resources.
 */
export interface ScimConfigState {
    /**
     * The name of the SCIM 2.0 connection. It must be unique.
     */
    connectionName?: pulumi.Input<string>;
    /**
     * The creation timestamp of the SCIM 2.0 configuration.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The provisioning URL of the SCIM 2.0 configuration.
     */
    provisioningUrl?: pulumi.Input<string>;
    /**
     * The source of the SCIM 2.0 configuration. Supported values are `okta`, `azure-ad`, and `other`.
     */
    source?: pulumi.Input<string>;
    /**
     * Indicates whether automatic synchronization of data with the IdP is enabled, ensuring that changes in details or status
     * in the IdP are updated accordingly.
     */
    syncToUserManagement?: pulumi.Input<boolean>;
    tenantId?: pulumi.Input<string>;
    /**
     * The token of the SCIM 2.0 configuration.
     */
    token?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScimConfig resource.
 */
export interface ScimConfigArgs {
    /**
     * The name of the SCIM 2.0 connection. It must be unique.
     */
    connectionName: pulumi.Input<string>;
    /**
     * The source of the SCIM 2.0 configuration. Supported values are `okta`, `azure-ad`, and `other`.
     */
    source: pulumi.Input<string>;
}
