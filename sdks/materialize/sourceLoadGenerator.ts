// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SourceLoadGenerator extends pulumi.CustomResource {
    /**
     * Get an existing SourceLoadGenerator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceLoadGeneratorState, opts?: pulumi.CustomResourceOptions): SourceLoadGenerator {
        return new SourceLoadGenerator(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/sourceLoadGenerator:SourceLoadGenerator';

    /**
     * Returns true if the given object is an instance of SourceLoadGenerator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceLoadGenerator {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceLoadGenerator.__pulumiType;
    }

    /**
     * Auction Options.
     */
    public readonly auctionOptions!: pulumi.Output<outputs.SourceLoadGeneratorAuctionOptions | undefined>;
    /**
     * The cluster to maintain this source.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * **Public Preview** Comment on an object in the database.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Counter Options.
     */
    public readonly counterOptions!: pulumi.Output<outputs.SourceLoadGeneratorCounterOptions | undefined>;
    /**
     * The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or
     * `materialize` if environment variable is not set.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * The name of the progress collection for the source. If this is not specified, the collection will be named
     * `<src_name>_progress`.
     */
    public readonly exposeProgress!: pulumi.Output<outputs.SourceLoadGeneratorExposeProgress | undefined>;
    /**
     * KEY VALUE Load Generator Options.
     */
    public readonly keyValueOptions!: pulumi.Output<outputs.SourceLoadGeneratorKeyValueOptions | undefined>;
    /**
     * The load generator types: [AUCTION MARKETING COUNTER TPCH KEY VALUE].
     */
    public readonly loadGeneratorType!: pulumi.Output<string>;
    /**
     * Marketing Options.
     */
    public readonly marketingOptions!: pulumi.Output<outputs.SourceLoadGeneratorMarketingOptions | undefined>;
    /**
     * The identifier for the source.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The owernship role of the object.
     */
    public readonly ownershipRole!: pulumi.Output<string>;
    /**
     * The fully qualified name of the source.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The identifier for the source schema in Materialize. Defaults to `public`.
     */
    public readonly schemaName!: pulumi.Output<string | undefined>;
    /**
     * The size of the cluster maintaining this source.
     */
    public /*out*/ readonly size!: pulumi.Output<string>;
    /**
     * TPCH Options.
     */
    public readonly tpchOptions!: pulumi.Output<outputs.SourceLoadGeneratorTpchOptions | undefined>;

    /**
     * Create a SourceLoadGenerator resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceLoadGeneratorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceLoadGeneratorArgs | SourceLoadGeneratorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceLoadGeneratorState | undefined;
            resourceInputs["auctionOptions"] = state ? state.auctionOptions : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["counterOptions"] = state ? state.counterOptions : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["exposeProgress"] = state ? state.exposeProgress : undefined;
            resourceInputs["keyValueOptions"] = state ? state.keyValueOptions : undefined;
            resourceInputs["loadGeneratorType"] = state ? state.loadGeneratorType : undefined;
            resourceInputs["marketingOptions"] = state ? state.marketingOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownershipRole"] = state ? state.ownershipRole : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["tpchOptions"] = state ? state.tpchOptions : undefined;
        } else {
            const args = argsOrState as SourceLoadGeneratorArgs | undefined;
            if ((!args || args.loadGeneratorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadGeneratorType'");
            }
            resourceInputs["auctionOptions"] = args ? args.auctionOptions : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["counterOptions"] = args ? args.counterOptions : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["exposeProgress"] = args ? args.exposeProgress : undefined;
            resourceInputs["keyValueOptions"] = args ? args.keyValueOptions : undefined;
            resourceInputs["loadGeneratorType"] = args ? args.loadGeneratorType : undefined;
            resourceInputs["marketingOptions"] = args ? args.marketingOptions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownershipRole"] = args ? args.ownershipRole : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["tpchOptions"] = args ? args.tpchOptions : undefined;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceLoadGenerator.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourceLoadGenerator resources.
 */
export interface SourceLoadGeneratorState {
    /**
     * Auction Options.
     */
    auctionOptions?: pulumi.Input<inputs.SourceLoadGeneratorAuctionOptions>;
    /**
     * The cluster to maintain this source.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * **Public Preview** Comment on an object in the database.
     */
    comment?: pulumi.Input<string>;
    /**
     * Counter Options.
     */
    counterOptions?: pulumi.Input<inputs.SourceLoadGeneratorCounterOptions>;
    /**
     * The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or
     * `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The name of the progress collection for the source. If this is not specified, the collection will be named
     * `<src_name>_progress`.
     */
    exposeProgress?: pulumi.Input<inputs.SourceLoadGeneratorExposeProgress>;
    /**
     * KEY VALUE Load Generator Options.
     */
    keyValueOptions?: pulumi.Input<inputs.SourceLoadGeneratorKeyValueOptions>;
    /**
     * The load generator types: [AUCTION MARKETING COUNTER TPCH KEY VALUE].
     */
    loadGeneratorType?: pulumi.Input<string>;
    /**
     * Marketing Options.
     */
    marketingOptions?: pulumi.Input<inputs.SourceLoadGeneratorMarketingOptions>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The owernship role of the object.
     */
    ownershipRole?: pulumi.Input<string>;
    /**
     * The fully qualified name of the source.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The identifier for the source schema in Materialize. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The size of the cluster maintaining this source.
     */
    size?: pulumi.Input<string>;
    /**
     * TPCH Options.
     */
    tpchOptions?: pulumi.Input<inputs.SourceLoadGeneratorTpchOptions>;
}

/**
 * The set of arguments for constructing a SourceLoadGenerator resource.
 */
export interface SourceLoadGeneratorArgs {
    /**
     * Auction Options.
     */
    auctionOptions?: pulumi.Input<inputs.SourceLoadGeneratorAuctionOptions>;
    /**
     * The cluster to maintain this source.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * **Public Preview** Comment on an object in the database.
     */
    comment?: pulumi.Input<string>;
    /**
     * Counter Options.
     */
    counterOptions?: pulumi.Input<inputs.SourceLoadGeneratorCounterOptions>;
    /**
     * The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or
     * `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The name of the progress collection for the source. If this is not specified, the collection will be named
     * `<src_name>_progress`.
     */
    exposeProgress?: pulumi.Input<inputs.SourceLoadGeneratorExposeProgress>;
    /**
     * KEY VALUE Load Generator Options.
     */
    keyValueOptions?: pulumi.Input<inputs.SourceLoadGeneratorKeyValueOptions>;
    /**
     * The load generator types: [AUCTION MARKETING COUNTER TPCH KEY VALUE].
     */
    loadGeneratorType: pulumi.Input<string>;
    /**
     * Marketing Options.
     */
    marketingOptions?: pulumi.Input<inputs.SourceLoadGeneratorMarketingOptions>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The owernship role of the object.
     */
    ownershipRole?: pulumi.Input<string>;
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The identifier for the source schema in Materialize. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * TPCH Options.
     */
    tpchOptions?: pulumi.Input<inputs.SourceLoadGeneratorTpchOptions>;
}
