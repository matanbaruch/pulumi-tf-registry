// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SourceKafka extends pulumi.CustomResource {
    /**
     * Get an existing SourceKafka resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SourceKafkaState, opts?: pulumi.CustomResourceOptions): SourceKafka {
        return new SourceKafka(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/sourceKafka:SourceKafka';

    /**
     * Returns true if the given object is an instance of SourceKafka.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SourceKafka {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceKafka.__pulumiType;
    }

    /**
     * The cluster to maintain this source.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * **Public Preview** Comment on an object in the database.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or
     * `materialize` if environment variable is not set.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * How Materialize should interpret records (e.g. append-only, upsert)..
     */
    public readonly envelope!: pulumi.Output<outputs.SourceKafkaEnvelope | undefined>;
    /**
     * The name of the progress collection for the source. If this is not specified, the collection will be named
     * `<src_name>_progress`.
     */
    public readonly exposeProgress!: pulumi.Output<outputs.SourceKafkaExposeProgress | undefined>;
    /**
     * How to decode raw bytes from different formats into data structures Materialize can understand at runtime.
     */
    public readonly format!: pulumi.Output<outputs.SourceKafkaFormat | undefined>;
    /**
     * Include message headers.
     */
    public readonly includeHeaders!: pulumi.Output<boolean | undefined>;
    /**
     * Provide an alias for the headers column.
     */
    public readonly includeHeadersAlias!: pulumi.Output<string | undefined>;
    /**
     * Include a column containing the Kafka message key.
     */
    public readonly includeKey!: pulumi.Output<boolean | undefined>;
    /**
     * Provide an alias for the key column.
     */
    public readonly includeKeyAlias!: pulumi.Output<string | undefined>;
    /**
     * Include an offset column containing the Kafka message offset.
     */
    public readonly includeOffset!: pulumi.Output<boolean | undefined>;
    /**
     * Provide an alias for the offset column.
     */
    public readonly includeOffsetAlias!: pulumi.Output<string | undefined>;
    /**
     * Include a partition column containing the Kafka message partition
     */
    public readonly includePartition!: pulumi.Output<boolean | undefined>;
    /**
     * Provide an alias for the partition column.
     */
    public readonly includePartitionAlias!: pulumi.Output<string | undefined>;
    /**
     * Include a timestamp column containing the Kafka message timestamp.
     */
    public readonly includeTimestamp!: pulumi.Output<boolean | undefined>;
    /**
     * Provide an alias for the timestamp column.
     */
    public readonly includeTimestampAlias!: pulumi.Output<string | undefined>;
    /**
     * The Kafka connection to use in the source.
     */
    public readonly kafkaConnection!: pulumi.Output<outputs.SourceKafkaKafkaConnection>;
    /**
     * Set the key format explicitly.
     */
    public readonly keyFormat!: pulumi.Output<outputs.SourceKafkaKeyFormat | undefined>;
    /**
     * The identifier for the source.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The owernship role of the object.
     */
    public readonly ownershipRole!: pulumi.Output<string>;
    /**
     * The fully qualified name of the source.
     */
    public /*out*/ readonly qualifiedSqlName!: pulumi.Output<string>;
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The identifier for the source schema in Materialize. Defaults to `public`.
     */
    public readonly schemaName!: pulumi.Output<string | undefined>;
    /**
     * The size of the cluster maintaining this source.
     */
    public /*out*/ readonly size!: pulumi.Output<string>;
    /**
     * Read partitions from the specified offset.
     */
    public readonly startOffsets!: pulumi.Output<number[] | undefined>;
    /**
     * Use the specified value to set `START OFFSET` based on the Kafka timestamp.
     */
    public readonly startTimestamp!: pulumi.Output<number | undefined>;
    /**
     * The Kafka topic you want to subscribe to.
     */
    public readonly topic!: pulumi.Output<string>;
    /**
     * Set the value format explicitly.
     */
    public readonly valueFormat!: pulumi.Output<outputs.SourceKafkaValueFormat | undefined>;

    /**
     * Create a SourceKafka resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SourceKafkaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SourceKafkaArgs | SourceKafkaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SourceKafkaState | undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["envelope"] = state ? state.envelope : undefined;
            resourceInputs["exposeProgress"] = state ? state.exposeProgress : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["includeHeaders"] = state ? state.includeHeaders : undefined;
            resourceInputs["includeHeadersAlias"] = state ? state.includeHeadersAlias : undefined;
            resourceInputs["includeKey"] = state ? state.includeKey : undefined;
            resourceInputs["includeKeyAlias"] = state ? state.includeKeyAlias : undefined;
            resourceInputs["includeOffset"] = state ? state.includeOffset : undefined;
            resourceInputs["includeOffsetAlias"] = state ? state.includeOffsetAlias : undefined;
            resourceInputs["includePartition"] = state ? state.includePartition : undefined;
            resourceInputs["includePartitionAlias"] = state ? state.includePartitionAlias : undefined;
            resourceInputs["includeTimestamp"] = state ? state.includeTimestamp : undefined;
            resourceInputs["includeTimestampAlias"] = state ? state.includeTimestampAlias : undefined;
            resourceInputs["kafkaConnection"] = state ? state.kafkaConnection : undefined;
            resourceInputs["keyFormat"] = state ? state.keyFormat : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ownershipRole"] = state ? state.ownershipRole : undefined;
            resourceInputs["qualifiedSqlName"] = state ? state.qualifiedSqlName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["startOffsets"] = state ? state.startOffsets : undefined;
            resourceInputs["startTimestamp"] = state ? state.startTimestamp : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
            resourceInputs["valueFormat"] = state ? state.valueFormat : undefined;
        } else {
            const args = argsOrState as SourceKafkaArgs | undefined;
            if ((!args || args.kafkaConnection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaConnection'");
            }
            if ((!args || args.topic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["envelope"] = args ? args.envelope : undefined;
            resourceInputs["exposeProgress"] = args ? args.exposeProgress : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["includeHeaders"] = args ? args.includeHeaders : undefined;
            resourceInputs["includeHeadersAlias"] = args ? args.includeHeadersAlias : undefined;
            resourceInputs["includeKey"] = args ? args.includeKey : undefined;
            resourceInputs["includeKeyAlias"] = args ? args.includeKeyAlias : undefined;
            resourceInputs["includeOffset"] = args ? args.includeOffset : undefined;
            resourceInputs["includeOffsetAlias"] = args ? args.includeOffsetAlias : undefined;
            resourceInputs["includePartition"] = args ? args.includePartition : undefined;
            resourceInputs["includePartitionAlias"] = args ? args.includePartitionAlias : undefined;
            resourceInputs["includeTimestamp"] = args ? args.includeTimestamp : undefined;
            resourceInputs["includeTimestampAlias"] = args ? args.includeTimestampAlias : undefined;
            resourceInputs["kafkaConnection"] = args ? args.kafkaConnection : undefined;
            resourceInputs["keyFormat"] = args ? args.keyFormat : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ownershipRole"] = args ? args.ownershipRole : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
            resourceInputs["startOffsets"] = args ? args.startOffsets : undefined;
            resourceInputs["startTimestamp"] = args ? args.startTimestamp : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
            resourceInputs["valueFormat"] = args ? args.valueFormat : undefined;
            resourceInputs["qualifiedSqlName"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceKafka.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SourceKafka resources.
 */
export interface SourceKafkaState {
    /**
     * The cluster to maintain this source.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * **Public Preview** Comment on an object in the database.
     */
    comment?: pulumi.Input<string>;
    /**
     * The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or
     * `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * How Materialize should interpret records (e.g. append-only, upsert)..
     */
    envelope?: pulumi.Input<inputs.SourceKafkaEnvelope>;
    /**
     * The name of the progress collection for the source. If this is not specified, the collection will be named
     * `<src_name>_progress`.
     */
    exposeProgress?: pulumi.Input<inputs.SourceKafkaExposeProgress>;
    /**
     * How to decode raw bytes from different formats into data structures Materialize can understand at runtime.
     */
    format?: pulumi.Input<inputs.SourceKafkaFormat>;
    /**
     * Include message headers.
     */
    includeHeaders?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the headers column.
     */
    includeHeadersAlias?: pulumi.Input<string>;
    /**
     * Include a column containing the Kafka message key.
     */
    includeKey?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the key column.
     */
    includeKeyAlias?: pulumi.Input<string>;
    /**
     * Include an offset column containing the Kafka message offset.
     */
    includeOffset?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the offset column.
     */
    includeOffsetAlias?: pulumi.Input<string>;
    /**
     * Include a partition column containing the Kafka message partition
     */
    includePartition?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the partition column.
     */
    includePartitionAlias?: pulumi.Input<string>;
    /**
     * Include a timestamp column containing the Kafka message timestamp.
     */
    includeTimestamp?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the timestamp column.
     */
    includeTimestampAlias?: pulumi.Input<string>;
    /**
     * The Kafka connection to use in the source.
     */
    kafkaConnection?: pulumi.Input<inputs.SourceKafkaKafkaConnection>;
    /**
     * Set the key format explicitly.
     */
    keyFormat?: pulumi.Input<inputs.SourceKafkaKeyFormat>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The owernship role of the object.
     */
    ownershipRole?: pulumi.Input<string>;
    /**
     * The fully qualified name of the source.
     */
    qualifiedSqlName?: pulumi.Input<string>;
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The identifier for the source schema in Materialize. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The size of the cluster maintaining this source.
     */
    size?: pulumi.Input<string>;
    /**
     * Read partitions from the specified offset.
     */
    startOffsets?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Use the specified value to set `START OFFSET` based on the Kafka timestamp.
     */
    startTimestamp?: pulumi.Input<number>;
    /**
     * The Kafka topic you want to subscribe to.
     */
    topic?: pulumi.Input<string>;
    /**
     * Set the value format explicitly.
     */
    valueFormat?: pulumi.Input<inputs.SourceKafkaValueFormat>;
}

/**
 * The set of arguments for constructing a SourceKafka resource.
 */
export interface SourceKafkaArgs {
    /**
     * The cluster to maintain this source.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * **Public Preview** Comment on an object in the database.
     */
    comment?: pulumi.Input<string>;
    /**
     * The identifier for the source database in Materialize. Defaults to `MZ_DATABASE` environment variable if set or
     * `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * How Materialize should interpret records (e.g. append-only, upsert)..
     */
    envelope?: pulumi.Input<inputs.SourceKafkaEnvelope>;
    /**
     * The name of the progress collection for the source. If this is not specified, the collection will be named
     * `<src_name>_progress`.
     */
    exposeProgress?: pulumi.Input<inputs.SourceKafkaExposeProgress>;
    /**
     * How to decode raw bytes from different formats into data structures Materialize can understand at runtime.
     */
    format?: pulumi.Input<inputs.SourceKafkaFormat>;
    /**
     * Include message headers.
     */
    includeHeaders?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the headers column.
     */
    includeHeadersAlias?: pulumi.Input<string>;
    /**
     * Include a column containing the Kafka message key.
     */
    includeKey?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the key column.
     */
    includeKeyAlias?: pulumi.Input<string>;
    /**
     * Include an offset column containing the Kafka message offset.
     */
    includeOffset?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the offset column.
     */
    includeOffsetAlias?: pulumi.Input<string>;
    /**
     * Include a partition column containing the Kafka message partition
     */
    includePartition?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the partition column.
     */
    includePartitionAlias?: pulumi.Input<string>;
    /**
     * Include a timestamp column containing the Kafka message timestamp.
     */
    includeTimestamp?: pulumi.Input<boolean>;
    /**
     * Provide an alias for the timestamp column.
     */
    includeTimestampAlias?: pulumi.Input<string>;
    /**
     * The Kafka connection to use in the source.
     */
    kafkaConnection: pulumi.Input<inputs.SourceKafkaKafkaConnection>;
    /**
     * Set the key format explicitly.
     */
    keyFormat?: pulumi.Input<inputs.SourceKafkaKeyFormat>;
    /**
     * The identifier for the source.
     */
    name?: pulumi.Input<string>;
    /**
     * The owernship role of the object.
     */
    ownershipRole?: pulumi.Input<string>;
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The identifier for the source schema in Materialize. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * Read partitions from the specified offset.
     */
    startOffsets?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Use the specified value to set `START OFFSET` based on the Kafka timestamp.
     */
    startTimestamp?: pulumi.Input<number>;
    /**
     * The Kafka topic you want to subscribe to.
     */
    topic: pulumi.Input<string>;
    /**
     * Set the value format explicitly.
     */
    valueFormat?: pulumi.Input<inputs.SourceKafkaValueFormat>;
}
