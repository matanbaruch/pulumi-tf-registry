// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppPasswordArgs, AppPasswordState } from "./appPassword";
export type AppPassword = import("./appPassword").AppPassword;
export const AppPassword: typeof import("./appPassword").AppPassword = null as any;
utilities.lazyLoad(exports, ["AppPassword"], () => require("./appPassword"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterGrantArgs, ClusterGrantState } from "./clusterGrant";
export type ClusterGrant = import("./clusterGrant").ClusterGrant;
export const ClusterGrant: typeof import("./clusterGrant").ClusterGrant = null as any;
utilities.lazyLoad(exports, ["ClusterGrant"], () => require("./clusterGrant"));

export { ClusterGrantDefaultPrivilegeArgs, ClusterGrantDefaultPrivilegeState } from "./clusterGrantDefaultPrivilege";
export type ClusterGrantDefaultPrivilege = import("./clusterGrantDefaultPrivilege").ClusterGrantDefaultPrivilege;
export const ClusterGrantDefaultPrivilege: typeof import("./clusterGrantDefaultPrivilege").ClusterGrantDefaultPrivilege = null as any;
utilities.lazyLoad(exports, ["ClusterGrantDefaultPrivilege"], () => require("./clusterGrantDefaultPrivilege"));

export { ClusterReplicaArgs, ClusterReplicaState } from "./clusterReplica";
export type ClusterReplica = import("./clusterReplica").ClusterReplica;
export const ClusterReplica: typeof import("./clusterReplica").ClusterReplica = null as any;
utilities.lazyLoad(exports, ["ClusterReplica"], () => require("./clusterReplica"));

export { ConnectionAwsArgs, ConnectionAwsState } from "./connectionAws";
export type ConnectionAws = import("./connectionAws").ConnectionAws;
export const ConnectionAws: typeof import("./connectionAws").ConnectionAws = null as any;
utilities.lazyLoad(exports, ["ConnectionAws"], () => require("./connectionAws"));

export { ConnectionAwsPrivatelinkArgs, ConnectionAwsPrivatelinkState } from "./connectionAwsPrivatelink";
export type ConnectionAwsPrivatelink = import("./connectionAwsPrivatelink").ConnectionAwsPrivatelink;
export const ConnectionAwsPrivatelink: typeof import("./connectionAwsPrivatelink").ConnectionAwsPrivatelink = null as any;
utilities.lazyLoad(exports, ["ConnectionAwsPrivatelink"], () => require("./connectionAwsPrivatelink"));

export { ConnectionConfluentSchemaRegistryArgs, ConnectionConfluentSchemaRegistryState } from "./connectionConfluentSchemaRegistry";
export type ConnectionConfluentSchemaRegistry = import("./connectionConfluentSchemaRegistry").ConnectionConfluentSchemaRegistry;
export const ConnectionConfluentSchemaRegistry: typeof import("./connectionConfluentSchemaRegistry").ConnectionConfluentSchemaRegistry = null as any;
utilities.lazyLoad(exports, ["ConnectionConfluentSchemaRegistry"], () => require("./connectionConfluentSchemaRegistry"));

export { ConnectionGrantArgs, ConnectionGrantState } from "./connectionGrant";
export type ConnectionGrant = import("./connectionGrant").ConnectionGrant;
export const ConnectionGrant: typeof import("./connectionGrant").ConnectionGrant = null as any;
utilities.lazyLoad(exports, ["ConnectionGrant"], () => require("./connectionGrant"));

export { ConnectionGrantDefaultPrivilegeArgs, ConnectionGrantDefaultPrivilegeState } from "./connectionGrantDefaultPrivilege";
export type ConnectionGrantDefaultPrivilege = import("./connectionGrantDefaultPrivilege").ConnectionGrantDefaultPrivilege;
export const ConnectionGrantDefaultPrivilege: typeof import("./connectionGrantDefaultPrivilege").ConnectionGrantDefaultPrivilege = null as any;
utilities.lazyLoad(exports, ["ConnectionGrantDefaultPrivilege"], () => require("./connectionGrantDefaultPrivilege"));

export { ConnectionKafkaArgs, ConnectionKafkaState } from "./connectionKafka";
export type ConnectionKafka = import("./connectionKafka").ConnectionKafka;
export const ConnectionKafka: typeof import("./connectionKafka").ConnectionKafka = null as any;
utilities.lazyLoad(exports, ["ConnectionKafka"], () => require("./connectionKafka"));

export { ConnectionMysqlArgs, ConnectionMysqlState } from "./connectionMysql";
export type ConnectionMysql = import("./connectionMysql").ConnectionMysql;
export const ConnectionMysql: typeof import("./connectionMysql").ConnectionMysql = null as any;
utilities.lazyLoad(exports, ["ConnectionMysql"], () => require("./connectionMysql"));

export { ConnectionPostgresArgs, ConnectionPostgresState } from "./connectionPostgres";
export type ConnectionPostgres = import("./connectionPostgres").ConnectionPostgres;
export const ConnectionPostgres: typeof import("./connectionPostgres").ConnectionPostgres = null as any;
utilities.lazyLoad(exports, ["ConnectionPostgres"], () => require("./connectionPostgres"));

export { ConnectionSshTunnelArgs, ConnectionSshTunnelState } from "./connectionSshTunnel";
export type ConnectionSshTunnel = import("./connectionSshTunnel").ConnectionSshTunnel;
export const ConnectionSshTunnel: typeof import("./connectionSshTunnel").ConnectionSshTunnel = null as any;
utilities.lazyLoad(exports, ["ConnectionSshTunnel"], () => require("./connectionSshTunnel"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabaseGrantArgs, DatabaseGrantState } from "./databaseGrant";
export type DatabaseGrant = import("./databaseGrant").DatabaseGrant;
export const DatabaseGrant: typeof import("./databaseGrant").DatabaseGrant = null as any;
utilities.lazyLoad(exports, ["DatabaseGrant"], () => require("./databaseGrant"));

export { DatabaseGrantDefaultPrivilegeArgs, DatabaseGrantDefaultPrivilegeState } from "./databaseGrantDefaultPrivilege";
export type DatabaseGrantDefaultPrivilege = import("./databaseGrantDefaultPrivilege").DatabaseGrantDefaultPrivilege;
export const DatabaseGrantDefaultPrivilege: typeof import("./databaseGrantDefaultPrivilege").DatabaseGrantDefaultPrivilege = null as any;
utilities.lazyLoad(exports, ["DatabaseGrantDefaultPrivilege"], () => require("./databaseGrantDefaultPrivilege"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterReplicaArgs, GetClusterReplicaResult, GetClusterReplicaOutputArgs } from "./getClusterReplica";
export const getClusterReplica: typeof import("./getClusterReplica").getClusterReplica = null as any;
export const getClusterReplicaOutput: typeof import("./getClusterReplica").getClusterReplicaOutput = null as any;
utilities.lazyLoad(exports, ["getClusterReplica","getClusterReplicaOutput"], () => require("./getClusterReplica"));

export { GetConnectionArgs, GetConnectionResult, GetConnectionOutputArgs } from "./getConnection";
export const getConnection: typeof import("./getConnection").getConnection = null as any;
export const getConnectionOutput: typeof import("./getConnection").getConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getConnection","getConnectionOutput"], () => require("./getConnection"));

export { GetCurrentClusterArgs, GetCurrentClusterResult, GetCurrentClusterOutputArgs } from "./getCurrentCluster";
export const getCurrentCluster: typeof import("./getCurrentCluster").getCurrentCluster = null as any;
export const getCurrentClusterOutput: typeof import("./getCurrentCluster").getCurrentClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentCluster","getCurrentClusterOutput"], () => require("./getCurrentCluster"));

export { GetCurrentDatabaseArgs, GetCurrentDatabaseResult, GetCurrentDatabaseOutputArgs } from "./getCurrentDatabase";
export const getCurrentDatabase: typeof import("./getCurrentDatabase").getCurrentDatabase = null as any;
export const getCurrentDatabaseOutput: typeof import("./getCurrentDatabase").getCurrentDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getCurrentDatabase","getCurrentDatabaseOutput"], () => require("./getCurrentDatabase"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetEgressIpsArgs, GetEgressIpsResult, GetEgressIpsOutputArgs } from "./getEgressIps";
export const getEgressIps: typeof import("./getEgressIps").getEgressIps = null as any;
export const getEgressIpsOutput: typeof import("./getEgressIps").getEgressIpsOutput = null as any;
utilities.lazyLoad(exports, ["getEgressIps","getEgressIpsOutput"], () => require("./getEgressIps"));

export { GetIndexArgs, GetIndexResult, GetIndexOutputArgs } from "./getIndex";
export const getIndex: typeof import("./getIndex").getIndex = null as any;
export const getIndexOutput: typeof import("./getIndex").getIndexOutput = null as any;
utilities.lazyLoad(exports, ["getIndex","getIndexOutput"], () => require("./getIndex"));

export { GetMaterializedViewArgs, GetMaterializedViewResult, GetMaterializedViewOutputArgs } from "./getMaterializedView";
export const getMaterializedView: typeof import("./getMaterializedView").getMaterializedView = null as any;
export const getMaterializedViewOutput: typeof import("./getMaterializedView").getMaterializedViewOutput = null as any;
utilities.lazyLoad(exports, ["getMaterializedView","getMaterializedViewOutput"], () => require("./getMaterializedView"));

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetSchemaArgs, GetSchemaResult, GetSchemaOutputArgs } from "./getSchema";
export const getSchema: typeof import("./getSchema").getSchema = null as any;
export const getSchemaOutput: typeof import("./getSchema").getSchemaOutput = null as any;
utilities.lazyLoad(exports, ["getSchema","getSchemaOutput"], () => require("./getSchema"));

export { GetScimConfigsArgs, GetScimConfigsResult, GetScimConfigsOutputArgs } from "./getScimConfigs";
export const getScimConfigs: typeof import("./getScimConfigs").getScimConfigs = null as any;
export const getScimConfigsOutput: typeof import("./getScimConfigs").getScimConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getScimConfigs","getScimConfigsOutput"], () => require("./getScimConfigs"));

export { GetScimGroupsArgs, GetScimGroupsResult, GetScimGroupsOutputArgs } from "./getScimGroups";
export const getScimGroups: typeof import("./getScimGroups").getScimGroups = null as any;
export const getScimGroupsOutput: typeof import("./getScimGroups").getScimGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getScimGroups","getScimGroupsOutput"], () => require("./getScimGroups"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSinkArgs, GetSinkResult, GetSinkOutputArgs } from "./getSink";
export const getSink: typeof import("./getSink").getSink = null as any;
export const getSinkOutput: typeof import("./getSink").getSinkOutput = null as any;
utilities.lazyLoad(exports, ["getSink","getSinkOutput"], () => require("./getSink"));

export { GetSourceArgs, GetSourceResult, GetSourceOutputArgs } from "./getSource";
export const getSource: typeof import("./getSource").getSource = null as any;
export const getSourceOutput: typeof import("./getSource").getSourceOutput = null as any;
utilities.lazyLoad(exports, ["getSource","getSourceOutput"], () => require("./getSource"));

export { GetSsoConfigArgs, GetSsoConfigResult, GetSsoConfigOutputArgs } from "./getSsoConfig";
export const getSsoConfig: typeof import("./getSsoConfig").getSsoConfig = null as any;
export const getSsoConfigOutput: typeof import("./getSsoConfig").getSsoConfigOutput = null as any;
utilities.lazyLoad(exports, ["getSsoConfig","getSsoConfigOutput"], () => require("./getSsoConfig"));

export { GetSystemParameterArgs, GetSystemParameterResult, GetSystemParameterOutputArgs } from "./getSystemParameter";
export const getSystemParameter: typeof import("./getSystemParameter").getSystemParameter = null as any;
export const getSystemParameterOutput: typeof import("./getSystemParameter").getSystemParameterOutput = null as any;
utilities.lazyLoad(exports, ["getSystemParameter","getSystemParameterOutput"], () => require("./getSystemParameter"));

export { GetTableArgs, GetTableResult, GetTableOutputArgs } from "./getTable";
export const getTable: typeof import("./getTable").getTable = null as any;
export const getTableOutput: typeof import("./getTable").getTableOutput = null as any;
utilities.lazyLoad(exports, ["getTable","getTableOutput"], () => require("./getTable"));

export { GetTypeArgs, GetTypeResult, GetTypeOutputArgs } from "./getType";
export const getType: typeof import("./getType").getType = null as any;
export const getTypeOutput: typeof import("./getType").getTypeOutput = null as any;
utilities.lazyLoad(exports, ["getType","getTypeOutput"], () => require("./getType"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetViewArgs, GetViewResult, GetViewOutputArgs } from "./getView";
export const getView: typeof import("./getView").getView = null as any;
export const getViewOutput: typeof import("./getView").getViewOutput = null as any;
utilities.lazyLoad(exports, ["getView","getViewOutput"], () => require("./getView"));

export { GrantSystemPrivilegeArgs, GrantSystemPrivilegeState } from "./grantSystemPrivilege";
export type GrantSystemPrivilege = import("./grantSystemPrivilege").GrantSystemPrivilege;
export const GrantSystemPrivilege: typeof import("./grantSystemPrivilege").GrantSystemPrivilege = null as any;
utilities.lazyLoad(exports, ["GrantSystemPrivilege"], () => require("./grantSystemPrivilege"));

export { IndexArgs, IndexState } from "./index_";
export type Index = import("./index_").Index;
export const Index: typeof import("./index_").Index = null as any;
utilities.lazyLoad(exports, ["Index"], () => require("./index_"));

export { MaterializedViewArgs, MaterializedViewState } from "./materializedView";
export type MaterializedView = import("./materializedView").MaterializedView;
export const MaterializedView: typeof import("./materializedView").MaterializedView = null as any;
utilities.lazyLoad(exports, ["MaterializedView"], () => require("./materializedView"));

export { MaterializedViewGrantArgs, MaterializedViewGrantState } from "./materializedViewGrant";
export type MaterializedViewGrant = import("./materializedViewGrant").MaterializedViewGrant;
export const MaterializedViewGrant: typeof import("./materializedViewGrant").MaterializedViewGrant = null as any;
utilities.lazyLoad(exports, ["MaterializedViewGrant"], () => require("./materializedViewGrant"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RegionArgs, RegionState } from "./region";
export type Region = import("./region").Region;
export const Region: typeof import("./region").Region = null as any;
utilities.lazyLoad(exports, ["Region"], () => require("./region"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleGrantArgs, RoleGrantState } from "./roleGrant";
export type RoleGrant = import("./roleGrant").RoleGrant;
export const RoleGrant: typeof import("./roleGrant").RoleGrant = null as any;
utilities.lazyLoad(exports, ["RoleGrant"], () => require("./roleGrant"));

export { RoleParameterArgs, RoleParameterState } from "./roleParameter";
export type RoleParameter = import("./roleParameter").RoleParameter;
export const RoleParameter: typeof import("./roleParameter").RoleParameter = null as any;
utilities.lazyLoad(exports, ["RoleParameter"], () => require("./roleParameter"));

export { SchemaArgs, SchemaState } from "./schema";
export type Schema = import("./schema").Schema;
export const Schema: typeof import("./schema").Schema = null as any;
utilities.lazyLoad(exports, ["Schema"], () => require("./schema"));

export { SchemaGrantArgs, SchemaGrantState } from "./schemaGrant";
export type SchemaGrant = import("./schemaGrant").SchemaGrant;
export const SchemaGrant: typeof import("./schemaGrant").SchemaGrant = null as any;
utilities.lazyLoad(exports, ["SchemaGrant"], () => require("./schemaGrant"));

export { SchemaGrantDefaultPrivilegeArgs, SchemaGrantDefaultPrivilegeState } from "./schemaGrantDefaultPrivilege";
export type SchemaGrantDefaultPrivilege = import("./schemaGrantDefaultPrivilege").SchemaGrantDefaultPrivilege;
export const SchemaGrantDefaultPrivilege: typeof import("./schemaGrantDefaultPrivilege").SchemaGrantDefaultPrivilege = null as any;
utilities.lazyLoad(exports, ["SchemaGrantDefaultPrivilege"], () => require("./schemaGrantDefaultPrivilege"));

export { ScimConfigArgs, ScimConfigState } from "./scimConfig";
export type ScimConfig = import("./scimConfig").ScimConfig;
export const ScimConfig: typeof import("./scimConfig").ScimConfig = null as any;
utilities.lazyLoad(exports, ["ScimConfig"], () => require("./scimConfig"));

export { ScimGroupArgs, ScimGroupState } from "./scimGroup";
export type ScimGroup = import("./scimGroup").ScimGroup;
export const ScimGroup: typeof import("./scimGroup").ScimGroup = null as any;
utilities.lazyLoad(exports, ["ScimGroup"], () => require("./scimGroup"));

export { ScimGroupRolesArgs, ScimGroupRolesState } from "./scimGroupRoles";
export type ScimGroupRoles = import("./scimGroupRoles").ScimGroupRoles;
export const ScimGroupRoles: typeof import("./scimGroupRoles").ScimGroupRoles = null as any;
utilities.lazyLoad(exports, ["ScimGroupRoles"], () => require("./scimGroupRoles"));

export { ScimGroupUsersArgs, ScimGroupUsersState } from "./scimGroupUsers";
export type ScimGroupUsers = import("./scimGroupUsers").ScimGroupUsers;
export const ScimGroupUsers: typeof import("./scimGroupUsers").ScimGroupUsers = null as any;
utilities.lazyLoad(exports, ["ScimGroupUsers"], () => require("./scimGroupUsers"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretGrantArgs, SecretGrantState } from "./secretGrant";
export type SecretGrant = import("./secretGrant").SecretGrant;
export const SecretGrant: typeof import("./secretGrant").SecretGrant = null as any;
utilities.lazyLoad(exports, ["SecretGrant"], () => require("./secretGrant"));

export { SecretGrantDefaultPrivilegeArgs, SecretGrantDefaultPrivilegeState } from "./secretGrantDefaultPrivilege";
export type SecretGrantDefaultPrivilege = import("./secretGrantDefaultPrivilege").SecretGrantDefaultPrivilege;
export const SecretGrantDefaultPrivilege: typeof import("./secretGrantDefaultPrivilege").SecretGrantDefaultPrivilege = null as any;
utilities.lazyLoad(exports, ["SecretGrantDefaultPrivilege"], () => require("./secretGrantDefaultPrivilege"));

export { SinkKafkaArgs, SinkKafkaState } from "./sinkKafka";
export type SinkKafka = import("./sinkKafka").SinkKafka;
export const SinkKafka: typeof import("./sinkKafka").SinkKafka = null as any;
utilities.lazyLoad(exports, ["SinkKafka"], () => require("./sinkKafka"));

export { SourceGrantArgs, SourceGrantState } from "./sourceGrant";
export type SourceGrant = import("./sourceGrant").SourceGrant;
export const SourceGrant: typeof import("./sourceGrant").SourceGrant = null as any;
utilities.lazyLoad(exports, ["SourceGrant"], () => require("./sourceGrant"));

export { SourceKafkaArgs, SourceKafkaState } from "./sourceKafka";
export type SourceKafka = import("./sourceKafka").SourceKafka;
export const SourceKafka: typeof import("./sourceKafka").SourceKafka = null as any;
utilities.lazyLoad(exports, ["SourceKafka"], () => require("./sourceKafka"));

export { SourceLoadGeneratorArgs, SourceLoadGeneratorState } from "./sourceLoadGenerator";
export type SourceLoadGenerator = import("./sourceLoadGenerator").SourceLoadGenerator;
export const SourceLoadGenerator: typeof import("./sourceLoadGenerator").SourceLoadGenerator = null as any;
utilities.lazyLoad(exports, ["SourceLoadGenerator"], () => require("./sourceLoadGenerator"));

export { SourceMysqlArgs, SourceMysqlState } from "./sourceMysql";
export type SourceMysql = import("./sourceMysql").SourceMysql;
export const SourceMysql: typeof import("./sourceMysql").SourceMysql = null as any;
utilities.lazyLoad(exports, ["SourceMysql"], () => require("./sourceMysql"));

export { SourcePostgresArgs, SourcePostgresState } from "./sourcePostgres";
export type SourcePostgres = import("./sourcePostgres").SourcePostgres;
export const SourcePostgres: typeof import("./sourcePostgres").SourcePostgres = null as any;
utilities.lazyLoad(exports, ["SourcePostgres"], () => require("./sourcePostgres"));

export { SourceWebhookArgs, SourceWebhookState } from "./sourceWebhook";
export type SourceWebhook = import("./sourceWebhook").SourceWebhook;
export const SourceWebhook: typeof import("./sourceWebhook").SourceWebhook = null as any;
utilities.lazyLoad(exports, ["SourceWebhook"], () => require("./sourceWebhook"));

export { SsoConfigArgs, SsoConfigState } from "./ssoConfig";
export type SsoConfig = import("./ssoConfig").SsoConfig;
export const SsoConfig: typeof import("./ssoConfig").SsoConfig = null as any;
utilities.lazyLoad(exports, ["SsoConfig"], () => require("./ssoConfig"));

export { SsoDefaultRolesArgs, SsoDefaultRolesState } from "./ssoDefaultRoles";
export type SsoDefaultRoles = import("./ssoDefaultRoles").SsoDefaultRoles;
export const SsoDefaultRoles: typeof import("./ssoDefaultRoles").SsoDefaultRoles = null as any;
utilities.lazyLoad(exports, ["SsoDefaultRoles"], () => require("./ssoDefaultRoles"));

export { SsoDomainArgs, SsoDomainState } from "./ssoDomain";
export type SsoDomain = import("./ssoDomain").SsoDomain;
export const SsoDomain: typeof import("./ssoDomain").SsoDomain = null as any;
utilities.lazyLoad(exports, ["SsoDomain"], () => require("./ssoDomain"));

export { SsoGroupMappingArgs, SsoGroupMappingState } from "./ssoGroupMapping";
export type SsoGroupMapping = import("./ssoGroupMapping").SsoGroupMapping;
export const SsoGroupMapping: typeof import("./ssoGroupMapping").SsoGroupMapping = null as any;
utilities.lazyLoad(exports, ["SsoGroupMapping"], () => require("./ssoGroupMapping"));

export { SystemParameterArgs, SystemParameterState } from "./systemParameter";
export type SystemParameter = import("./systemParameter").SystemParameter;
export const SystemParameter: typeof import("./systemParameter").SystemParameter = null as any;
utilities.lazyLoad(exports, ["SystemParameter"], () => require("./systemParameter"));

export { TableArgs, TableState } from "./table";
export type Table = import("./table").Table;
export const Table: typeof import("./table").Table = null as any;
utilities.lazyLoad(exports, ["Table"], () => require("./table"));

export { TableGrantArgs, TableGrantState } from "./tableGrant";
export type TableGrant = import("./tableGrant").TableGrant;
export const TableGrant: typeof import("./tableGrant").TableGrant = null as any;
utilities.lazyLoad(exports, ["TableGrant"], () => require("./tableGrant"));

export { TableGrantDefaultPrivilegeArgs, TableGrantDefaultPrivilegeState } from "./tableGrantDefaultPrivilege";
export type TableGrantDefaultPrivilege = import("./tableGrantDefaultPrivilege").TableGrantDefaultPrivilege;
export const TableGrantDefaultPrivilege: typeof import("./tableGrantDefaultPrivilege").TableGrantDefaultPrivilege = null as any;
utilities.lazyLoad(exports, ["TableGrantDefaultPrivilege"], () => require("./tableGrantDefaultPrivilege"));

export { TypeArgs, TypeState } from "./type";
export type Type = import("./type").Type;
export const Type: typeof import("./type").Type = null as any;
utilities.lazyLoad(exports, ["Type"], () => require("./type"));

export { TypeGrantArgs, TypeGrantState } from "./typeGrant";
export type TypeGrant = import("./typeGrant").TypeGrant;
export const TypeGrant: typeof import("./typeGrant").TypeGrant = null as any;
utilities.lazyLoad(exports, ["TypeGrant"], () => require("./typeGrant"));

export { TypeGrantDefaultPrivilegeArgs, TypeGrantDefaultPrivilegeState } from "./typeGrantDefaultPrivilege";
export type TypeGrantDefaultPrivilege = import("./typeGrantDefaultPrivilege").TypeGrantDefaultPrivilege;
export const TypeGrantDefaultPrivilege: typeof import("./typeGrantDefaultPrivilege").TypeGrantDefaultPrivilege = null as any;
utilities.lazyLoad(exports, ["TypeGrantDefaultPrivilege"], () => require("./typeGrantDefaultPrivilege"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { ViewArgs, ViewState } from "./view";
export type View = import("./view").View;
export const View: typeof import("./view").View = null as any;
utilities.lazyLoad(exports, ["View"], () => require("./view"));

export { ViewGrantArgs, ViewGrantState } from "./viewGrant";
export type ViewGrant = import("./viewGrant").ViewGrant;
export const ViewGrant: typeof import("./viewGrant").ViewGrant = null as any;
utilities.lazyLoad(exports, ["ViewGrant"], () => require("./viewGrant"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "materialize:index/appPassword:AppPassword":
                return new AppPassword(name, <any>undefined, { urn })
            case "materialize:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "materialize:index/clusterGrant:ClusterGrant":
                return new ClusterGrant(name, <any>undefined, { urn })
            case "materialize:index/clusterGrantDefaultPrivilege:ClusterGrantDefaultPrivilege":
                return new ClusterGrantDefaultPrivilege(name, <any>undefined, { urn })
            case "materialize:index/clusterReplica:ClusterReplica":
                return new ClusterReplica(name, <any>undefined, { urn })
            case "materialize:index/connectionAws:ConnectionAws":
                return new ConnectionAws(name, <any>undefined, { urn })
            case "materialize:index/connectionAwsPrivatelink:ConnectionAwsPrivatelink":
                return new ConnectionAwsPrivatelink(name, <any>undefined, { urn })
            case "materialize:index/connectionConfluentSchemaRegistry:ConnectionConfluentSchemaRegistry":
                return new ConnectionConfluentSchemaRegistry(name, <any>undefined, { urn })
            case "materialize:index/connectionGrant:ConnectionGrant":
                return new ConnectionGrant(name, <any>undefined, { urn })
            case "materialize:index/connectionGrantDefaultPrivilege:ConnectionGrantDefaultPrivilege":
                return new ConnectionGrantDefaultPrivilege(name, <any>undefined, { urn })
            case "materialize:index/connectionKafka:ConnectionKafka":
                return new ConnectionKafka(name, <any>undefined, { urn })
            case "materialize:index/connectionMysql:ConnectionMysql":
                return new ConnectionMysql(name, <any>undefined, { urn })
            case "materialize:index/connectionPostgres:ConnectionPostgres":
                return new ConnectionPostgres(name, <any>undefined, { urn })
            case "materialize:index/connectionSshTunnel:ConnectionSshTunnel":
                return new ConnectionSshTunnel(name, <any>undefined, { urn })
            case "materialize:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "materialize:index/databaseGrant:DatabaseGrant":
                return new DatabaseGrant(name, <any>undefined, { urn })
            case "materialize:index/databaseGrantDefaultPrivilege:DatabaseGrantDefaultPrivilege":
                return new DatabaseGrantDefaultPrivilege(name, <any>undefined, { urn })
            case "materialize:index/grantSystemPrivilege:GrantSystemPrivilege":
                return new GrantSystemPrivilege(name, <any>undefined, { urn })
            case "materialize:index/index:Index":
                return new Index(name, <any>undefined, { urn })
            case "materialize:index/materializedView:MaterializedView":
                return new MaterializedView(name, <any>undefined, { urn })
            case "materialize:index/materializedViewGrant:MaterializedViewGrant":
                return new MaterializedViewGrant(name, <any>undefined, { urn })
            case "materialize:index/region:Region":
                return new Region(name, <any>undefined, { urn })
            case "materialize:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "materialize:index/roleGrant:RoleGrant":
                return new RoleGrant(name, <any>undefined, { urn })
            case "materialize:index/roleParameter:RoleParameter":
                return new RoleParameter(name, <any>undefined, { urn })
            case "materialize:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "materialize:index/schemaGrant:SchemaGrant":
                return new SchemaGrant(name, <any>undefined, { urn })
            case "materialize:index/schemaGrantDefaultPrivilege:SchemaGrantDefaultPrivilege":
                return new SchemaGrantDefaultPrivilege(name, <any>undefined, { urn })
            case "materialize:index/scimConfig:ScimConfig":
                return new ScimConfig(name, <any>undefined, { urn })
            case "materialize:index/scimGroup:ScimGroup":
                return new ScimGroup(name, <any>undefined, { urn })
            case "materialize:index/scimGroupRoles:ScimGroupRoles":
                return new ScimGroupRoles(name, <any>undefined, { urn })
            case "materialize:index/scimGroupUsers:ScimGroupUsers":
                return new ScimGroupUsers(name, <any>undefined, { urn })
            case "materialize:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "materialize:index/secretGrant:SecretGrant":
                return new SecretGrant(name, <any>undefined, { urn })
            case "materialize:index/secretGrantDefaultPrivilege:SecretGrantDefaultPrivilege":
                return new SecretGrantDefaultPrivilege(name, <any>undefined, { urn })
            case "materialize:index/sinkKafka:SinkKafka":
                return new SinkKafka(name, <any>undefined, { urn })
            case "materialize:index/sourceGrant:SourceGrant":
                return new SourceGrant(name, <any>undefined, { urn })
            case "materialize:index/sourceKafka:SourceKafka":
                return new SourceKafka(name, <any>undefined, { urn })
            case "materialize:index/sourceLoadGenerator:SourceLoadGenerator":
                return new SourceLoadGenerator(name, <any>undefined, { urn })
            case "materialize:index/sourceMysql:SourceMysql":
                return new SourceMysql(name, <any>undefined, { urn })
            case "materialize:index/sourcePostgres:SourcePostgres":
                return new SourcePostgres(name, <any>undefined, { urn })
            case "materialize:index/sourceWebhook:SourceWebhook":
                return new SourceWebhook(name, <any>undefined, { urn })
            case "materialize:index/ssoConfig:SsoConfig":
                return new SsoConfig(name, <any>undefined, { urn })
            case "materialize:index/ssoDefaultRoles:SsoDefaultRoles":
                return new SsoDefaultRoles(name, <any>undefined, { urn })
            case "materialize:index/ssoDomain:SsoDomain":
                return new SsoDomain(name, <any>undefined, { urn })
            case "materialize:index/ssoGroupMapping:SsoGroupMapping":
                return new SsoGroupMapping(name, <any>undefined, { urn })
            case "materialize:index/systemParameter:SystemParameter":
                return new SystemParameter(name, <any>undefined, { urn })
            case "materialize:index/table:Table":
                return new Table(name, <any>undefined, { urn })
            case "materialize:index/tableGrant:TableGrant":
                return new TableGrant(name, <any>undefined, { urn })
            case "materialize:index/tableGrantDefaultPrivilege:TableGrantDefaultPrivilege":
                return new TableGrantDefaultPrivilege(name, <any>undefined, { urn })
            case "materialize:index/type:Type":
                return new Type(name, <any>undefined, { urn })
            case "materialize:index/typeGrant:TypeGrant":
                return new TypeGrant(name, <any>undefined, { urn })
            case "materialize:index/typeGrantDefaultPrivilege:TypeGrantDefaultPrivilege":
                return new TypeGrantDefaultPrivilege(name, <any>undefined, { urn })
            case "materialize:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "materialize:index/view:View":
                return new View(name, <any>undefined, { urn })
            case "materialize:index/viewGrant:ViewGrant":
                return new ViewGrant(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("materialize", "index/appPassword", _module)
pulumi.runtime.registerResourceModule("materialize", "index/cluster", _module)
pulumi.runtime.registerResourceModule("materialize", "index/clusterGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/clusterGrantDefaultPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/clusterReplica", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionAws", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionAwsPrivatelink", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionConfluentSchemaRegistry", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionGrantDefaultPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionKafka", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionMysql", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionPostgres", _module)
pulumi.runtime.registerResourceModule("materialize", "index/connectionSshTunnel", _module)
pulumi.runtime.registerResourceModule("materialize", "index/database", _module)
pulumi.runtime.registerResourceModule("materialize", "index/databaseGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/databaseGrantDefaultPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/grantSystemPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/index", _module)
pulumi.runtime.registerResourceModule("materialize", "index/materializedView", _module)
pulumi.runtime.registerResourceModule("materialize", "index/materializedViewGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/region", _module)
pulumi.runtime.registerResourceModule("materialize", "index/role", _module)
pulumi.runtime.registerResourceModule("materialize", "index/roleGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/roleParameter", _module)
pulumi.runtime.registerResourceModule("materialize", "index/schema", _module)
pulumi.runtime.registerResourceModule("materialize", "index/schemaGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/schemaGrantDefaultPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/scimConfig", _module)
pulumi.runtime.registerResourceModule("materialize", "index/scimGroup", _module)
pulumi.runtime.registerResourceModule("materialize", "index/scimGroupRoles", _module)
pulumi.runtime.registerResourceModule("materialize", "index/scimGroupUsers", _module)
pulumi.runtime.registerResourceModule("materialize", "index/secret", _module)
pulumi.runtime.registerResourceModule("materialize", "index/secretGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/secretGrantDefaultPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sinkKafka", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourceGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourceKafka", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourceLoadGenerator", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourceMysql", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourcePostgres", _module)
pulumi.runtime.registerResourceModule("materialize", "index/sourceWebhook", _module)
pulumi.runtime.registerResourceModule("materialize", "index/ssoConfig", _module)
pulumi.runtime.registerResourceModule("materialize", "index/ssoDefaultRoles", _module)
pulumi.runtime.registerResourceModule("materialize", "index/ssoDomain", _module)
pulumi.runtime.registerResourceModule("materialize", "index/ssoGroupMapping", _module)
pulumi.runtime.registerResourceModule("materialize", "index/systemParameter", _module)
pulumi.runtime.registerResourceModule("materialize", "index/table", _module)
pulumi.runtime.registerResourceModule("materialize", "index/tableGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/tableGrantDefaultPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/type", _module)
pulumi.runtime.registerResourceModule("materialize", "index/typeGrant", _module)
pulumi.runtime.registerResourceModule("materialize", "index/typeGrantDefaultPrivilege", _module)
pulumi.runtime.registerResourceModule("materialize", "index/user", _module)
pulumi.runtime.registerResourceModule("materialize", "index/view", _module)
pulumi.runtime.registerResourceModule("materialize", "index/viewGrant", _module)
pulumi.runtime.registerResourcePackage("materialize", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:materialize") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
