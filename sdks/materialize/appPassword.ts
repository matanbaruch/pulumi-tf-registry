// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AppPassword extends pulumi.CustomResource {
    /**
     * Get an existing AppPassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppPasswordState, opts?: pulumi.CustomResourceOptions): AppPassword {
        return new AppPassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/appPassword:AppPassword';

    /**
     * Returns true if the given object is an instance of AppPassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppPassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppPassword.__pulumiType;
    }

    /**
     * The time at which the app password was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A human-readable name for the app password.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The value of the app password.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * The roles to assign to the app password. Allowed values are 'Member' and 'Admin'. Only valid with service-type app
     * passwords.
     */
    public readonly roles!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly secret!: pulumi.Output<string>;
    /**
     * The type of the app password: personal or service.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The user to associate with the app password. Only valid with service-type app passwords.
     */
    public readonly user!: pulumi.Output<string | undefined>;

    /**
     * Create a AppPassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AppPasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppPasswordArgs | AppPasswordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppPasswordState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as AppPasswordArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "secret"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AppPassword.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AppPassword resources.
 */
export interface AppPasswordState {
    /**
     * The time at which the app password was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A human-readable name for the app password.
     */
    name?: pulumi.Input<string>;
    /**
     * The value of the app password.
     */
    password?: pulumi.Input<string>;
    /**
     * The roles to assign to the app password. Allowed values are 'Member' and 'Admin'. Only valid with service-type app
     * passwords.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    secret?: pulumi.Input<string>;
    /**
     * The type of the app password: personal or service.
     */
    type?: pulumi.Input<string>;
    /**
     * The user to associate with the app password. Only valid with service-type app passwords.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppPassword resource.
 */
export interface AppPasswordArgs {
    /**
     * A human-readable name for the app password.
     */
    name?: pulumi.Input<string>;
    /**
     * The roles to assign to the app password. Allowed values are 'Member' and 'Admin'. Only valid with service-type app
     * passwords.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the app password: personal or service.
     */
    type?: pulumi.Input<string>;
    /**
     * The user to associate with the app password. Only valid with service-type app passwords.
     */
    user?: pulumi.Input<string>;
}
