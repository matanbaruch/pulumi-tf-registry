// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterScheduling {
    /**
     * Configuration for refreshing the cluster.
     */
    onRefresh?: pulumi.Input<inputs.ClusterSchedulingOnRefresh>;
}

export interface ClusterSchedulingOnRefresh {
    /**
     * Enable scheduling to refresh the cluster.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Estimated time to hydrate the cluster during refresh.
     */
    hydrationTimeEstimate?: pulumi.Input<string>;
    /**
     * Estimated time to rehydrate the cluster during refresh. This field is deprecated and will be removed in a future release. Use `hydration_time_estimate` instead.
     *
     * @deprecated Deprecated
     */
    rehydrationTimeEstimate?: pulumi.Input<string>;
}

export interface ClusterWaitUntilReady {
    /**
     * Enable wait_until_ready.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Action to take on timeout: COMMIT|ROLLBACK
     */
    onTimeout?: pulumi.Input<string>;
    /**
     * Max duration to wait for the new replicas to be ready.
     */
    timeout?: pulumi.Input<string>;
}

export interface ConnectionAwsAccessKeyId {
    /**
     * The `access_key_id` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionAwsAccessKeyIdSecret>;
    /**
     * The `access_key_id` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionAwsAccessKeyIdSecret {
    /**
     * The access_key_id database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The access_key_id name.
     */
    name: pulumi.Input<string>;
    /**
     * The access_key_id schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionAwsSecretAccessKey {
    /**
     * The secret_access_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The secret_access_key name.
     */
    name: pulumi.Input<string>;
    /**
     * The secret_access_key schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionAwsSessionToken {
    /**
     * The `session_token` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionAwsSessionTokenSecret>;
    /**
     * The `session_token` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionAwsSessionTokenSecret {
    /**
     * The session_token database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The session_token name.
     */
    name: pulumi.Input<string>;
    /**
     * The session_token schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistryAwsPrivatelink {
    /**
     * The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The aws_privatelink name.
     */
    name: pulumi.Input<string>;
    /**
     * The aws_privatelink schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistryPassword {
    /**
     * The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The password name.
     */
    name: pulumi.Input<string>;
    /**
     * The password schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistrySshTunnel {
    /**
     * The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssh_tunnel name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssh_tunnel schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistrySslCertificate {
    /**
     * The `ssl_certificate` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionConfluentSchemaRegistrySslCertificateSecret>;
    /**
     * The `ssl_certificate` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistrySslCertificateAuthority {
    /**
     * The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret>;
    /**
     * The `ssl_certificate_authority` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistrySslCertificateAuthoritySecret {
    /**
     * The ssl_certificate_authority database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistrySslCertificateSecret {
    /**
     * The ssl_certificate database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistrySslKey {
    /**
     * The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_key name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_key schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistryUsername {
    /**
     * The `username` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionConfluentSchemaRegistryUsernameSecret>;
    /**
     * The `username` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionConfluentSchemaRegistryUsernameSecret {
    /**
     * The username database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The username name.
     */
    name: pulumi.Input<string>;
    /**
     * The username schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaAwsConnection {
    /**
     * The aws_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The aws_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The aws_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaAwsPrivatelink {
    /**
     * The AWS PrivateLink connection name in Materialize.
     */
    privatelinkConnection: pulumi.Input<inputs.ConnectionKafkaAwsPrivatelinkPrivatelinkConnection>;
    /**
     * The port of the AWS PrivateLink connection.
     */
    privatelinkConnectionPort: pulumi.Input<number>;
}

export interface ConnectionKafkaAwsPrivatelinkPrivatelinkConnection {
    /**
     * The privatelink_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The privatelink_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The privatelink_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaKafkaBroker {
    /**
     * The availability zone of the Kafka broker.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * The Kafka broker, in the form of `host:port`.
     */
    broker: pulumi.Input<string>;
    /**
     * The AWS PrivateLink connection name in Materialize.
     */
    privatelinkConnection?: pulumi.Input<inputs.ConnectionKafkaKafkaBrokerPrivatelinkConnection>;
    /**
     * The name of an SSH tunnel connection to route network traffic through by default.
     */
    sshTunnel?: pulumi.Input<inputs.ConnectionKafkaKafkaBrokerSshTunnel>;
    /**
     * The port of the target group associated with the Kafka broker.
     */
    targetGroupPort?: pulumi.Input<number>;
}

export interface ConnectionKafkaKafkaBrokerPrivatelinkConnection {
    /**
     * The privatelink_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The privatelink_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The privatelink_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaKafkaBrokerSshTunnel {
    /**
     * The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssh_tunnel name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssh_tunnel schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaSaslPassword {
    /**
     * The sasl_password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The sasl_password name.
     */
    name: pulumi.Input<string>;
    /**
     * The sasl_password schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaSaslUsername {
    /**
     * The `sasl_username` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionKafkaSaslUsernameSecret>;
    /**
     * The `sasl_username` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionKafkaSaslUsernameSecret {
    /**
     * The sasl_username database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The sasl_username name.
     */
    name: pulumi.Input<string>;
    /**
     * The sasl_username schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaSshTunnel {
    /**
     * The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssh_tunnel name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssh_tunnel schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaSslCertificate {
    /**
     * The `ssl_certificate` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionKafkaSslCertificateSecret>;
    /**
     * The `ssl_certificate` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionKafkaSslCertificateAuthority {
    /**
     * The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionKafkaSslCertificateAuthoritySecret>;
    /**
     * The `ssl_certificate_authority` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionKafkaSslCertificateAuthoritySecret {
    /**
     * The ssl_certificate_authority database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaSslCertificateSecret {
    /**
     * The ssl_certificate database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionKafkaSslKey {
    /**
     * The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_key name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_key schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionMysqlAwsPrivatelink {
    /**
     * The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The aws_privatelink name.
     */
    name: pulumi.Input<string>;
    /**
     * The aws_privatelink schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionMysqlPassword {
    /**
     * The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The password name.
     */
    name: pulumi.Input<string>;
    /**
     * The password schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionMysqlSshTunnel {
    /**
     * The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssh_tunnel name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssh_tunnel schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionMysqlSslCertificate {
    /**
     * The `ssl_certificate` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionMysqlSslCertificateSecret>;
    /**
     * The `ssl_certificate` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionMysqlSslCertificateAuthority {
    /**
     * The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionMysqlSslCertificateAuthoritySecret>;
    /**
     * The `ssl_certificate_authority` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionMysqlSslCertificateAuthoritySecret {
    /**
     * The ssl_certificate_authority database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionMysqlSslCertificateSecret {
    /**
     * The ssl_certificate database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionMysqlSslKey {
    /**
     * The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_key name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_key schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionMysqlUser {
    /**
     * The `user` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionMysqlUserSecret>;
    /**
     * The `user` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionMysqlUserSecret {
    /**
     * The user database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The user name.
     */
    name: pulumi.Input<string>;
    /**
     * The user schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionPostgresAwsPrivatelink {
    /**
     * The aws_privatelink database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The aws_privatelink name.
     */
    name: pulumi.Input<string>;
    /**
     * The aws_privatelink schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionPostgresPassword {
    /**
     * The password database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The password name.
     */
    name: pulumi.Input<string>;
    /**
     * The password schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionPostgresSshTunnel {
    /**
     * The ssh_tunnel database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssh_tunnel name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssh_tunnel schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionPostgresSslCertificate {
    /**
     * The `ssl_certificate` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionPostgresSslCertificateSecret>;
    /**
     * The `ssl_certificate` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionPostgresSslCertificateAuthority {
    /**
     * The `ssl_certificate_authority` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionPostgresSslCertificateAuthoritySecret>;
    /**
     * The `ssl_certificate_authority` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionPostgresSslCertificateAuthoritySecret {
    /**
     * The ssl_certificate_authority database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate_authority schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionPostgresSslCertificateSecret {
    /**
     * The ssl_certificate database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_certificate name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_certificate schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionPostgresSslKey {
    /**
     * The ssl_key database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The ssl_key name.
     */
    name: pulumi.Input<string>;
    /**
     * The ssl_key schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface ConnectionPostgresUser {
    /**
     * The `user` secret value. Conflicts with `text` within this block.
     */
    secret?: pulumi.Input<inputs.ConnectionPostgresUserSecret>;
    /**
     * The `user` text value. Conflicts with `secret` within this block
     */
    text?: pulumi.Input<string>;
}

export interface ConnectionPostgresUserSecret {
    /**
     * The user database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The user name.
     */
    name: pulumi.Input<string>;
    /**
     * The user schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface IndexColExpr {
    /**
     * The name of the option you want to set.
     */
    field: pulumi.Input<string>;
}

export interface IndexObjName {
    /**
     * The obj_name database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The obj_name name.
     */
    name: pulumi.Input<string>;
    /**
     * The obj_name schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SinkKafkaEnvelope {
    /**
     * The generated schemas have a Debezium-style diff envelope to capture changes in the input view or source.
     */
    debezium?: pulumi.Input<boolean>;
    /**
     * The sink emits data with upsert semantics: updates and inserts for the given key are expressed as a value, and deletes are expressed as a null value payload in Kafka.
     */
    upsert?: pulumi.Input<boolean>;
}

export interface SinkKafkaFormat {
    /**
     * Avro format.
     */
    avro?: pulumi.Input<inputs.SinkKafkaFormatAvro>;
    /**
     * JSON format.
     */
    json?: pulumi.Input<boolean>;
}

export interface SinkKafkaFormatAvro {
    /**
     * **Private Preview** Add column level documentation comment to the generated Avro schemas.
     */
    avroDocColumns?: pulumi.Input<pulumi.Input<inputs.SinkKafkaFormatAvroAvroDocColumn>[]>;
    /**
     * **Private Preview** Add top level documentation comment to the generated Avro schemas.
     */
    avroDocType?: pulumi.Input<inputs.SinkKafkaFormatAvroAvroDocType>;
    /**
     * The full name of the Avro key schema.
     */
    avroKeyFullname?: pulumi.Input<string>;
    /**
     * The full name of the Avro value schema.
     */
    avroValueFullname?: pulumi.Input<string>;
    /**
     * If specified, set the Compatibility Level for the generated key schema.
     */
    keyCompatibilityLevel?: pulumi.Input<string>;
    /**
     * The name of a schema registry connection.
     */
    schemaRegistryConnection: pulumi.Input<inputs.SinkKafkaFormatAvroSchemaRegistryConnection>;
    /**
     * If specified, set the Compatibility Level for the generated value schema.
     */
    valueCompatibilityLevel?: pulumi.Input<string>;
}

export interface SinkKafkaFormatAvroAvroDocColumn {
    /**
     * Name of the column in the Avro schema to apply to.
     */
    column: pulumi.Input<string>;
    /**
     * Documentation string.
     */
    doc: pulumi.Input<string>;
    /**
     * Applies to the key schema.
     */
    key?: pulumi.Input<boolean>;
    /**
     * The object to apply the Avro documentation.
     */
    object: pulumi.Input<inputs.SinkKafkaFormatAvroAvroDocColumnObject>;
    /**
     * Applies to the value schema.
     */
    value?: pulumi.Input<boolean>;
}

export interface SinkKafkaFormatAvroAvroDocColumnObject {
    /**
     * The object database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The object name.
     */
    name: pulumi.Input<string>;
    /**
     * The object schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SinkKafkaFormatAvroAvroDocType {
    /**
     * Documentation string.
     */
    doc: pulumi.Input<string>;
    /**
     * Applies to the key schema.
     */
    key?: pulumi.Input<boolean>;
    /**
     * The object to apply the Avro documentation.
     */
    object: pulumi.Input<inputs.SinkKafkaFormatAvroAvroDocTypeObject>;
    /**
     * Applies to the value schema.
     */
    value?: pulumi.Input<boolean>;
}

export interface SinkKafkaFormatAvroAvroDocTypeObject {
    /**
     * The object database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The object name.
     */
    name: pulumi.Input<string>;
    /**
     * The object schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SinkKafkaFormatAvroSchemaRegistryConnection {
    /**
     * The schema_registry_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The schema_registry_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The schema_registry_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SinkKafkaFrom {
    /**
     * The from database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The from name.
     */
    name: pulumi.Input<string>;
    /**
     * The from schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SinkKafkaKafkaConnection {
    /**
     * The kafka_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The kafka_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The kafka_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaEnvelope {
    /**
     * Use the Debezium envelope, which uses a diff envelope to handle CRUD operations.
     */
    debezium?: pulumi.Input<boolean>;
    /**
     * Use an append-only envelope. This means that records will only be appended and cannot be updated or deleted.
     */
    none?: pulumi.Input<boolean>;
    /**
     * Use the upsert envelope, which uses message keys to handle CRUD operations.
     */
    upsert?: pulumi.Input<boolean>;
    /**
     * Options for the upsert envelope.
     */
    upsertOptions?: pulumi.Input<inputs.SourceKafkaEnvelopeUpsertOptions>;
}

export interface SourceKafkaEnvelopeUpsertOptions {
    /**
     * Specify how to handle value decoding errors in the upsert envelope.
     */
    valueDecodingErrors?: pulumi.Input<inputs.SourceKafkaEnvelopeUpsertOptionsValueDecodingErrors>;
}

export interface SourceKafkaEnvelopeUpsertOptionsValueDecodingErrors {
    /**
     * Configuration for inline value decoding errors.
     */
    inline?: pulumi.Input<inputs.SourceKafkaEnvelopeUpsertOptionsValueDecodingErrorsInline>;
}

export interface SourceKafkaEnvelopeUpsertOptionsValueDecodingErrorsInline {
    /**
     * Specify an alias for the value decoding errors column, to use an alternative name for the error column. If not specified, the column name will be `error`.
     */
    alias?: pulumi.Input<string>;
    /**
     * Enable inline value decoding errors.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface SourceKafkaExposeProgress {
    /**
     * The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The expose_progress name.
     */
    name: pulumi.Input<string>;
    /**
     * The expose_progress schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaFormat {
    /**
     * Avro format.
     */
    avro?: pulumi.Input<inputs.SourceKafkaFormatAvro>;
    /**
     * BYTES format.
     */
    bytes?: pulumi.Input<boolean>;
    /**
     * CSV format.
     */
    csvs?: pulumi.Input<pulumi.Input<inputs.SourceKafkaFormatCsv>[]>;
    /**
     * JSON format.
     */
    json?: pulumi.Input<boolean>;
    /**
     * Protobuf format.
     */
    protobuf?: pulumi.Input<inputs.SourceKafkaFormatProtobuf>;
    /**
     * Text format.
     */
    text?: pulumi.Input<boolean>;
}

export interface SourceKafkaFormatAvro {
    /**
     * How Materialize will define the Avro schema reader key strategy.
     */
    keyStrategy?: pulumi.Input<string>;
    /**
     * The name of a schema registry connection.
     */
    schemaRegistryConnection: pulumi.Input<inputs.SourceKafkaFormatAvroSchemaRegistryConnection>;
    /**
     * How Materialize will define the Avro schema reader value strategy.
     */
    valueStrategy?: pulumi.Input<string>;
}

export interface SourceKafkaFormatAvroSchemaRegistryConnection {
    /**
     * The schema_registry_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The schema_registry_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The schema_registry_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaFormatCsv {
    /**
     * The columns to use for the source.
     */
    column?: pulumi.Input<number>;
    /**
     * The delimiter to use for the source.
     */
    delimitedBy?: pulumi.Input<string>;
    /**
     * The number of columns and the name of each column using the header row.
     */
    headers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SourceKafkaFormatProtobuf {
    /**
     * The name of the Protobuf message to use for the source.
     */
    message: pulumi.Input<string>;
    /**
     * The name of a schema registry connection.
     */
    schemaRegistryConnection: pulumi.Input<inputs.SourceKafkaFormatProtobufSchemaRegistryConnection>;
}

export interface SourceKafkaFormatProtobufSchemaRegistryConnection {
    /**
     * The schema_registry_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The schema_registry_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The schema_registry_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaKafkaConnection {
    /**
     * The kafka_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The kafka_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The kafka_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaKeyFormat {
    /**
     * Avro format.
     */
    avro?: pulumi.Input<inputs.SourceKafkaKeyFormatAvro>;
    /**
     * BYTES format.
     */
    bytes?: pulumi.Input<boolean>;
    /**
     * CSV format.
     */
    csvs?: pulumi.Input<pulumi.Input<inputs.SourceKafkaKeyFormatCsv>[]>;
    /**
     * JSON format.
     */
    json?: pulumi.Input<boolean>;
    /**
     * Protobuf format.
     */
    protobuf?: pulumi.Input<inputs.SourceKafkaKeyFormatProtobuf>;
    /**
     * Text format.
     */
    text?: pulumi.Input<boolean>;
}

export interface SourceKafkaKeyFormatAvro {
    /**
     * How Materialize will define the Avro schema reader key strategy.
     */
    keyStrategy?: pulumi.Input<string>;
    /**
     * The name of a schema registry connection.
     */
    schemaRegistryConnection: pulumi.Input<inputs.SourceKafkaKeyFormatAvroSchemaRegistryConnection>;
    /**
     * How Materialize will define the Avro schema reader value strategy.
     */
    valueStrategy?: pulumi.Input<string>;
}

export interface SourceKafkaKeyFormatAvroSchemaRegistryConnection {
    /**
     * The schema_registry_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The schema_registry_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The schema_registry_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaKeyFormatCsv {
    /**
     * The columns to use for the source.
     */
    column?: pulumi.Input<number>;
    /**
     * The delimiter to use for the source.
     */
    delimitedBy?: pulumi.Input<string>;
    /**
     * The number of columns and the name of each column using the header row.
     */
    headers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SourceKafkaKeyFormatProtobuf {
    /**
     * The name of the Protobuf message to use for the source.
     */
    message: pulumi.Input<string>;
    /**
     * The name of a schema registry connection.
     */
    schemaRegistryConnection: pulumi.Input<inputs.SourceKafkaKeyFormatProtobufSchemaRegistryConnection>;
}

export interface SourceKafkaKeyFormatProtobufSchemaRegistryConnection {
    /**
     * The schema_registry_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The schema_registry_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The schema_registry_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaValueFormat {
    /**
     * Avro format.
     */
    avro?: pulumi.Input<inputs.SourceKafkaValueFormatAvro>;
    /**
     * BYTES format.
     */
    bytes?: pulumi.Input<boolean>;
    /**
     * CSV format.
     */
    csvs?: pulumi.Input<pulumi.Input<inputs.SourceKafkaValueFormatCsv>[]>;
    /**
     * JSON format.
     */
    json?: pulumi.Input<boolean>;
    /**
     * Protobuf format.
     */
    protobuf?: pulumi.Input<inputs.SourceKafkaValueFormatProtobuf>;
    /**
     * Text format.
     */
    text?: pulumi.Input<boolean>;
}

export interface SourceKafkaValueFormatAvro {
    /**
     * How Materialize will define the Avro schema reader key strategy.
     */
    keyStrategy?: pulumi.Input<string>;
    /**
     * The name of a schema registry connection.
     */
    schemaRegistryConnection: pulumi.Input<inputs.SourceKafkaValueFormatAvroSchemaRegistryConnection>;
    /**
     * How Materialize will define the Avro schema reader value strategy.
     */
    valueStrategy?: pulumi.Input<string>;
}

export interface SourceKafkaValueFormatAvroSchemaRegistryConnection {
    /**
     * The schema_registry_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The schema_registry_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The schema_registry_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceKafkaValueFormatCsv {
    /**
     * The columns to use for the source.
     */
    column?: pulumi.Input<number>;
    /**
     * The delimiter to use for the source.
     */
    delimitedBy?: pulumi.Input<string>;
    /**
     * The number of columns and the name of each column using the header row.
     */
    headers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SourceKafkaValueFormatProtobuf {
    /**
     * The name of the Protobuf message to use for the source.
     */
    message: pulumi.Input<string>;
    /**
     * The name of a schema registry connection.
     */
    schemaRegistryConnection: pulumi.Input<inputs.SourceKafkaValueFormatProtobufSchemaRegistryConnection>;
}

export interface SourceKafkaValueFormatProtobufSchemaRegistryConnection {
    /**
     * The schema_registry_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The schema_registry_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The schema_registry_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceLoadGeneratorAuctionOptions {
    /**
     * (Deprecated) The scale factor for the generator. Defaults to 0.01 (~ 10MB).
     *
     * @deprecated Deprecated
     */
    scaleFactor?: pulumi.Input<number>;
    /**
     * The interval at which the next datum should be emitted. Defaults to one second.
     */
    tickInterval?: pulumi.Input<string>;
}

export interface SourceLoadGeneratorCounterOptions {
    /**
     * Causes the generator to delete old values to keep the collection at most a given size. Defaults to unlimited.
     */
    maxCardinality?: pulumi.Input<number>;
    /**
     * (Deprecated) The scale factor for the generator. Defaults to 0.01 (~ 10MB).
     *
     * @deprecated Deprecated
     */
    scaleFactor?: pulumi.Input<number>;
    /**
     * The interval at which the next datum should be emitted. Defaults to one second.
     */
    tickInterval?: pulumi.Input<string>;
}

export interface SourceLoadGeneratorExposeProgress {
    /**
     * The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The expose_progress name.
     */
    name: pulumi.Input<string>;
    /**
     * The expose_progress schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceLoadGeneratorKeyValueOptions {
    /**
     * The number of keys per partition to produce in each update.
     */
    batchSize?: pulumi.Input<number>;
    /**
     * The number of keys in the source. This must be divisible by the product of 'partitions' and 'batch_size'.
     */
    keys: pulumi.Input<number>;
    /**
     * The number of partitions to spread the keys across.
     */
    partitions?: pulumi.Input<number>;
    /**
     * A per-source seed for seeding the random data.
     */
    seed?: pulumi.Input<number>;
    /**
     * The number of rounds of data to produce as the source starts up.
     */
    snapshotRounds?: pulumi.Input<number>;
    /**
     * The interval at which the next datum should be emitted. Defaults to one second.
     */
    tickInterval?: pulumi.Input<string>;
    /**
     * Whether to emit the snapshot as a singular transaction.
     */
    transactionalSnapshot?: pulumi.Input<boolean>;
    /**
     * The number of bytes in each value.
     */
    valueSize?: pulumi.Input<number>;
}

export interface SourceLoadGeneratorMarketingOptions {
    /**
     * (Deprecated) The scale factor for the generator. Defaults to 0.01 (~ 10MB).
     *
     * @deprecated Deprecated
     */
    scaleFactor?: pulumi.Input<number>;
    /**
     * The interval at which the next datum should be emitted. Defaults to one second.
     */
    tickInterval?: pulumi.Input<string>;
}

export interface SourceLoadGeneratorTpchOptions {
    /**
     * The scale factor for the generator. Defaults to 0.01 (~ 10MB).
     */
    scaleFactor?: pulumi.Input<number>;
    /**
     * The interval at which the next datum should be emitted. Defaults to one second.
     */
    tickInterval?: pulumi.Input<string>;
}

export interface SourceMysqlExposeProgress {
    /**
     * The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The expose_progress name.
     */
    name: pulumi.Input<string>;
    /**
     * The expose_progress schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceMysqlMysqlConnection {
    /**
     * The mysql_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The mysql_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The mysql_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceMysqlTable {
    /**
     * The database of the table in Materialize.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The name for the table, used in Materialize.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema of the table in Materialize.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The name of the table in the upstream MySQL database.
     */
    upstreamName: pulumi.Input<string>;
    /**
     * The schema of the table in the upstream MySQL database.
     */
    upstreamSchemaName?: pulumi.Input<string>;
}

export interface SourcePostgresExposeProgress {
    /**
     * The expose_progress database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The expose_progress name.
     */
    name: pulumi.Input<string>;
    /**
     * The expose_progress schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourcePostgresPostgresConnection {
    /**
     * The postgres_connection database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The postgres_connection name.
     */
    name: pulumi.Input<string>;
    /**
     * The postgres_connection schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourcePostgresTable {
    /**
     * The database of the table in Materialize.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The name of the table in Materialize.
     */
    name?: pulumi.Input<string>;
    /**
     * The schema of the table in Materialize.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * The name of the table in the upstream Postgres database.
     */
    upstreamName: pulumi.Input<string>;
    /**
     * The schema of the table in the upstream Postgres database.
     */
    upstreamSchemaName?: pulumi.Input<string>;
}

export interface SourceWebhookCheckOption {
    /**
     * The alias for the check options.
     */
    alias?: pulumi.Input<string>;
    /**
     * Change type to `bytea`.
     */
    bytes?: pulumi.Input<boolean>;
    /**
     * The field for the check options.
     */
    field: pulumi.Input<inputs.SourceWebhookCheckOptionField>;
}

export interface SourceWebhookCheckOptionField {
    /**
     * The body for the check options.
     */
    body?: pulumi.Input<boolean>;
    /**
     * The headers for the check options.
     */
    headers?: pulumi.Input<boolean>;
    /**
     * The secret for the check options.
     */
    secret?: pulumi.Input<inputs.SourceWebhookCheckOptionFieldSecret>;
}

export interface SourceWebhookCheckOptionFieldSecret {
    /**
     * The secret database name. Defaults to `MZ_DATABASE` environment variable if set or `materialize` if environment variable is not set.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * The secret name.
     */
    name: pulumi.Input<string>;
    /**
     * The secret schema name. Defaults to `public`.
     */
    schemaName?: pulumi.Input<string>;
}

export interface SourceWebhookIncludeHeader {
    /**
     * The alias for the header.
     */
    alias?: pulumi.Input<string>;
    /**
     * Change type to `bytea`.
     */
    bytes?: pulumi.Input<boolean>;
    /**
     * The name for the header.
     */
    header: pulumi.Input<string>;
}

export interface SourceWebhookIncludeHeaders {
    /**
     * Include all headers.
     */
    all?: pulumi.Input<boolean>;
    /**
     * Headers that should be excluded.
     */
    nots?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Headers that should be included.
     */
    onlies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface TableColumn {
    /**
     * **Public Preview** Comment on an object in the database.
     */
    comment?: pulumi.Input<string>;
    /**
     * A default value to use for the column in an INSERT statement if an explicit value is not provided. If not specified, `NULL` is assumed..
     */
    default?: pulumi.Input<string>;
    /**
     * The name of the column to be created in the table.
     */
    name: pulumi.Input<string>;
    /**
     * Do not allow the column to contain `NULL` values. Columns without this constraint can contain `NULL` values.
     */
    nullable?: pulumi.Input<boolean>;
    /**
     * The data type of the column indicated by name.
     */
    type: pulumi.Input<string>;
}

export interface TypeListProperties {
    /**
     * Creates a custom list whose elements are of `ELEMENT TYPE`
     */
    elementType: pulumi.Input<string>;
}

export interface TypeMapProperties {
    /**
     * Creates a custom map whose keys are of `KEY TYPE`. `KEY TYPE` must resolve to text.
     */
    keyType: pulumi.Input<string>;
    /**
     * Creates a custom map whose values are of `VALUE TYPE`.
     */
    valueType: pulumi.Input<string>;
}

export interface TypeRowProperty {
    /**
     * The name of a field in a row type.
     */
    fieldName: pulumi.Input<string>;
    /**
     * The data type of a field indicated by `FIELD NAME`.
     */
    fieldType: pulumi.Input<string>;
}
