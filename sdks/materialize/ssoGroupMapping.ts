// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SsoGroupMapping extends pulumi.CustomResource {
    /**
     * Get an existing SsoGroupMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsoGroupMappingState, opts?: pulumi.CustomResourceOptions): SsoGroupMapping {
        return new SsoGroupMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/ssoGroupMapping:SsoGroupMapping';

    /**
     * Returns true if the given object is an instance of SsoGroupMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsoGroupMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsoGroupMapping.__pulumiType;
    }

    /**
     * Whether the group mapping is enabled.
     */
    public /*out*/ readonly enabled!: pulumi.Output<boolean>;
    /**
     * The name of the SSO group.
     */
    public readonly group!: pulumi.Output<string>;
    /**
     * List of role names associated with the group.
     */
    public readonly roles!: pulumi.Output<string[]>;
    /**
     * The ID of the associated SSO configuration.
     */
    public readonly ssoConfigId!: pulumi.Output<string>;

    /**
     * Create a SsoGroupMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsoGroupMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsoGroupMappingArgs | SsoGroupMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsoGroupMappingState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["ssoConfigId"] = state ? state.ssoConfigId : undefined;
        } else {
            const args = argsOrState as SsoGroupMappingArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.roles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            if ((!args || args.ssoConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssoConfigId'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["ssoConfigId"] = args ? args.ssoConfigId : undefined;
            resourceInputs["enabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsoGroupMapping.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsoGroupMapping resources.
 */
export interface SsoGroupMappingState {
    /**
     * Whether the group mapping is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The name of the SSO group.
     */
    group?: pulumi.Input<string>;
    /**
     * List of role names associated with the group.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the associated SSO configuration.
     */
    ssoConfigId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SsoGroupMapping resource.
 */
export interface SsoGroupMappingArgs {
    /**
     * The name of the SSO group.
     */
    group: pulumi.Input<string>;
    /**
     * List of role names associated with the group.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the associated SSO configuration.
     */
    ssoConfigId: pulumi.Input<string>;
}
