// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Region extends pulumi.CustomResource {
    /**
     * Get an existing Region resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionState, opts?: pulumi.CustomResourceOptions): Region {
        return new Region(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/region:Region';

    /**
     * Returns true if the given object is an instance of Region.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Region {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Region.__pulumiType;
    }

    /**
     * The timestamp when the region was enabled.
     */
    public /*out*/ readonly enabledAt!: pulumi.Output<string>;
    /**
     * The HTTP address of the region.
     */
    public /*out*/ readonly httpAddress!: pulumi.Output<string>;
    /**
     * The ID of the region to manage. Example: aws/us-west-2
     */
    public readonly regionId!: pulumi.Output<string>;
    /**
     * The state of the region. True if enabled, false otherwise.
     */
    public /*out*/ readonly regionState!: pulumi.Output<boolean>;
    /**
     * Indicates if the region is resolvable.
     */
    public /*out*/ readonly resolvable!: pulumi.Output<boolean>;
    /**
     * The SQL address of the region.
     */
    public /*out*/ readonly sqlAddress!: pulumi.Output<string>;

    /**
     * Create a Region resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionArgs | RegionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegionState | undefined;
            resourceInputs["enabledAt"] = state ? state.enabledAt : undefined;
            resourceInputs["httpAddress"] = state ? state.httpAddress : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["regionState"] = state ? state.regionState : undefined;
            resourceInputs["resolvable"] = state ? state.resolvable : undefined;
            resourceInputs["sqlAddress"] = state ? state.sqlAddress : undefined;
        } else {
            const args = argsOrState as RegionArgs | undefined;
            if ((!args || args.regionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionId'");
            }
            resourceInputs["regionId"] = args ? args.regionId : undefined;
            resourceInputs["enabledAt"] = undefined /*out*/;
            resourceInputs["httpAddress"] = undefined /*out*/;
            resourceInputs["regionState"] = undefined /*out*/;
            resourceInputs["resolvable"] = undefined /*out*/;
            resourceInputs["sqlAddress"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Region.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Region resources.
 */
export interface RegionState {
    /**
     * The timestamp when the region was enabled.
     */
    enabledAt?: pulumi.Input<string>;
    /**
     * The HTTP address of the region.
     */
    httpAddress?: pulumi.Input<string>;
    /**
     * The ID of the region to manage. Example: aws/us-west-2
     */
    regionId?: pulumi.Input<string>;
    /**
     * The state of the region. True if enabled, false otherwise.
     */
    regionState?: pulumi.Input<boolean>;
    /**
     * Indicates if the region is resolvable.
     */
    resolvable?: pulumi.Input<boolean>;
    /**
     * The SQL address of the region.
     */
    sqlAddress?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Region resource.
 */
export interface RegionArgs {
    /**
     * The ID of the region to manage. Example: aws/us-west-2
     */
    regionId: pulumi.Input<string>;
}
