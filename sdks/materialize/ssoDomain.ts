// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SsoDomain extends pulumi.CustomResource {
    /**
     * Get an existing SsoDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SsoDomainState, opts?: pulumi.CustomResourceOptions): SsoDomain {
        return new SsoDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/ssoDomain:SsoDomain';

    /**
     * Returns true if the given object is an instance of SsoDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SsoDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SsoDomain.__pulumiType;
    }

    /**
     * The domain name for the SSO domain configuration. This domain will be used to validate the SSO configuration and needs
     * to be unique across all SSO configurations.
     */
    public readonly domain!: pulumi.Output<string>;
    /**
     * The ID of the associated SSO configuration.
     */
    public readonly ssoConfigId!: pulumi.Output<string>;
    /**
     * Indicates whether the domain has been validated.
     */
    public /*out*/ readonly validated!: pulumi.Output<boolean>;

    /**
     * Create a SsoDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SsoDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SsoDomainArgs | SsoDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SsoDomainState | undefined;
            resourceInputs["domain"] = state ? state.domain : undefined;
            resourceInputs["ssoConfigId"] = state ? state.ssoConfigId : undefined;
            resourceInputs["validated"] = state ? state.validated : undefined;
        } else {
            const args = argsOrState as SsoDomainArgs | undefined;
            if ((!args || args.domain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domain'");
            }
            if ((!args || args.ssoConfigId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ssoConfigId'");
            }
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["ssoConfigId"] = args ? args.ssoConfigId : undefined;
            resourceInputs["validated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SsoDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SsoDomain resources.
 */
export interface SsoDomainState {
    /**
     * The domain name for the SSO domain configuration. This domain will be used to validate the SSO configuration and needs
     * to be unique across all SSO configurations.
     */
    domain?: pulumi.Input<string>;
    /**
     * The ID of the associated SSO configuration.
     */
    ssoConfigId?: pulumi.Input<string>;
    /**
     * Indicates whether the domain has been validated.
     */
    validated?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SsoDomain resource.
 */
export interface SsoDomainArgs {
    /**
     * The domain name for the SSO domain configuration. This domain will be used to validate the SSO configuration and needs
     * to be unique across all SSO configurations.
     */
    domain: pulumi.Input<string>;
    /**
     * The ID of the associated SSO configuration.
     */
    ssoConfigId: pulumi.Input<string>;
}
