// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RoleParameter extends pulumi.CustomResource {
    /**
     * Get an existing RoleParameter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleParameterState, opts?: pulumi.CustomResourceOptions): RoleParameter {
        return new RoleParameter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'materialize:index/roleParameter:RoleParameter';

    /**
     * Returns true if the given object is an instance of RoleParameter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleParameter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleParameter.__pulumiType;
    }

    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The name of the role to grant privilege to.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * The name of the session variable to modify.
     */
    public readonly variableName!: pulumi.Output<string>;
    /**
     * The value to assign to the session variable.
     */
    public readonly variableValue!: pulumi.Output<string>;

    /**
     * Create a RoleParameter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleParameterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleParameterArgs | RoleParameterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleParameterState | undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["variableName"] = state ? state.variableName : undefined;
            resourceInputs["variableValue"] = state ? state.variableValue : undefined;
        } else {
            const args = argsOrState as RoleParameterArgs | undefined;
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            if ((!args || args.variableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variableName'");
            }
            if ((!args || args.variableValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'variableValue'");
            }
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["variableName"] = args ? args.variableName : undefined;
            resourceInputs["variableValue"] = args ? args.variableValue : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleParameter.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RoleParameter resources.
 */
export interface RoleParameterState {
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the role to grant privilege to.
     */
    roleName?: pulumi.Input<string>;
    /**
     * The name of the session variable to modify.
     */
    variableName?: pulumi.Input<string>;
    /**
     * The value to assign to the session variable.
     */
    variableValue?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoleParameter resource.
 */
export interface RoleParameterArgs {
    /**
     * The region to use for the resource connection. If not set, the default region is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the role to grant privilege to.
     */
    roleName: pulumi.Input<string>;
    /**
     * The name of the session variable to modify.
     */
    variableName: pulumi.Input<string>;
    /**
     * The value to assign to the session variable.
     */
    variableValue: pulumi.Input<string>;
}
