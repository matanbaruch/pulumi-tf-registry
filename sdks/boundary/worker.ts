// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Worker extends pulumi.CustomResource {
    /**
     * Get an existing Worker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WorkerState, opts?: pulumi.CustomResourceOptions): Worker {
        return new Worker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'boundary:index/worker:Worker';

    /**
     * Returns true if the given object is an instance of Worker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Worker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Worker.__pulumiType;
    }

    /**
     * The accessible address of the self managed worker.
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * A list of actions that the worker is entitled to perform.
     */
    public /*out*/ readonly authorizedActions!: pulumi.Output<string[]>;
    /**
     * A single use token generated by the controller to be passed to the self-managed worker.
     */
    public /*out*/ readonly controllerGeneratedActivationToken!: pulumi.Output<string>;
    /**
     * The description for the worker.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name for the worker.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The version of the Boundary binary running on the self managed worker.
     */
    public /*out*/ readonly releaseVersion!: pulumi.Output<number>;
    /**
     * The scope for the worker. Defaults to `global`.
     */
    public readonly scopeId!: pulumi.Output<string | undefined>;
    /**
     * The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
     * blank will result in a controller generated token.
     */
    public readonly workerGeneratedAuthToken!: pulumi.Output<string | undefined>;

    /**
     * Create a Worker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: WorkerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WorkerArgs | WorkerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WorkerState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["authorizedActions"] = state ? state.authorizedActions : undefined;
            resourceInputs["controllerGeneratedActivationToken"] = state ? state.controllerGeneratedActivationToken : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["releaseVersion"] = state ? state.releaseVersion : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["workerGeneratedAuthToken"] = state ? state.workerGeneratedAuthToken : undefined;
        } else {
            const args = argsOrState as WorkerArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["workerGeneratedAuthToken"] = args ? args.workerGeneratedAuthToken : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["authorizedActions"] = undefined /*out*/;
            resourceInputs["controllerGeneratedActivationToken"] = undefined /*out*/;
            resourceInputs["releaseVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Worker.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Worker resources.
 */
export interface WorkerState {
    /**
     * The accessible address of the self managed worker.
     */
    address?: pulumi.Input<string>;
    /**
     * A list of actions that the worker is entitled to perform.
     */
    authorizedActions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A single use token generated by the controller to be passed to the self-managed worker.
     */
    controllerGeneratedActivationToken?: pulumi.Input<string>;
    /**
     * The description for the worker.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for the worker.
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the Boundary binary running on the self managed worker.
     */
    releaseVersion?: pulumi.Input<number>;
    /**
     * The scope for the worker. Defaults to `global`.
     */
    scopeId?: pulumi.Input<string>;
    /**
     * The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
     * blank will result in a controller generated token.
     */
    workerGeneratedAuthToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Worker resource.
 */
export interface WorkerArgs {
    /**
     * The description for the worker.
     */
    description?: pulumi.Input<string>;
    /**
     * The name for the worker.
     */
    name?: pulumi.Input<string>;
    /**
     * The scope for the worker. Defaults to `global`.
     */
    scopeId?: pulumi.Input<string>;
    /**
     * The worker authentication token required to register the worker for the worker-led authentication flow. Leaving this
     * blank will result in a controller generated token.
     */
    workerGeneratedAuthToken?: pulumi.Input<string>;
}
