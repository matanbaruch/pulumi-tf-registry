// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CredentialLibraryVaultSshCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CredentialLibraryVaultSshCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialLibraryVaultSshCertificateState, opts?: pulumi.CustomResourceOptions): CredentialLibraryVaultSshCertificate {
        return new CredentialLibraryVaultSshCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'boundary:index/credentialLibraryVaultSshCertificate:CredentialLibraryVaultSshCertificate';

    /**
     * Returns true if the given object is an instance of CredentialLibraryVaultSshCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CredentialLibraryVaultSshCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CredentialLibraryVaultSshCertificate.__pulumiType;
    }

    /**
     * Principals to be signed as "valid_principles" in addition to username.
     */
    public readonly additionalValidPrincipals!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the credential store that this library belongs to.
     */
    public readonly credentialStoreId!: pulumi.Output<string>;
    /**
     * Specifies a map of the critical options that the certificate should be signed for.
     */
    public readonly criticalOptions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The Vault credential library description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies a map of the extensions that the certificate should be signed for.
     */
    public readonly extensions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the number of bits to use for the generated keys.
     */
    public readonly keyBits!: pulumi.Output<number | undefined>;
    /**
     * Specifies the key id a certificate should have.
     */
    public readonly keyId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the desired key type; must be ed25519, ecdsa, or rsa.
     */
    public readonly keyType!: pulumi.Output<string | undefined>;
    /**
     * The Vault credential library name. Defaults to the resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The path in Vault to request credentials from.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Specifies the requested time to live for a certificate returned from the library.
     */
    public readonly ttl!: pulumi.Output<string | undefined>;
    /**
     * The username to use with the certificate returned by the library.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a CredentialLibraryVaultSshCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialLibraryVaultSshCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialLibraryVaultSshCertificateArgs | CredentialLibraryVaultSshCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialLibraryVaultSshCertificateState | undefined;
            resourceInputs["additionalValidPrincipals"] = state ? state.additionalValidPrincipals : undefined;
            resourceInputs["credentialStoreId"] = state ? state.credentialStoreId : undefined;
            resourceInputs["criticalOptions"] = state ? state.criticalOptions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["extensions"] = state ? state.extensions : undefined;
            resourceInputs["keyBits"] = state ? state.keyBits : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as CredentialLibraryVaultSshCertificateArgs | undefined;
            if ((!args || args.credentialStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'credentialStoreId'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["additionalValidPrincipals"] = args ? args.additionalValidPrincipals : undefined;
            resourceInputs["credentialStoreId"] = args ? args.credentialStoreId : undefined;
            resourceInputs["criticalOptions"] = args ? args.criticalOptions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["extensions"] = args ? args.extensions : undefined;
            resourceInputs["keyBits"] = args ? args.keyBits : undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CredentialLibraryVaultSshCertificate.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering CredentialLibraryVaultSshCertificate resources.
 */
export interface CredentialLibraryVaultSshCertificateState {
    /**
     * Principals to be signed as "valid_principles" in addition to username.
     */
    additionalValidPrincipals?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the credential store that this library belongs to.
     */
    credentialStoreId?: pulumi.Input<string>;
    /**
     * Specifies a map of the critical options that the certificate should be signed for.
     */
    criticalOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Vault credential library description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies a map of the extensions that the certificate should be signed for.
     */
    extensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the number of bits to use for the generated keys.
     */
    keyBits?: pulumi.Input<number>;
    /**
     * Specifies the key id a certificate should have.
     */
    keyId?: pulumi.Input<string>;
    /**
     * Specifies the desired key type; must be ed25519, ecdsa, or rsa.
     */
    keyType?: pulumi.Input<string>;
    /**
     * The Vault credential library name. Defaults to the resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The path in Vault to request credentials from.
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the requested time to live for a certificate returned from the library.
     */
    ttl?: pulumi.Input<string>;
    /**
     * The username to use with the certificate returned by the library.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CredentialLibraryVaultSshCertificate resource.
 */
export interface CredentialLibraryVaultSshCertificateArgs {
    /**
     * Principals to be signed as "valid_principles" in addition to username.
     */
    additionalValidPrincipals?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the credential store that this library belongs to.
     */
    credentialStoreId: pulumi.Input<string>;
    /**
     * Specifies a map of the critical options that the certificate should be signed for.
     */
    criticalOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The Vault credential library description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies a map of the extensions that the certificate should be signed for.
     */
    extensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the number of bits to use for the generated keys.
     */
    keyBits?: pulumi.Input<number>;
    /**
     * Specifies the key id a certificate should have.
     */
    keyId?: pulumi.Input<string>;
    /**
     * Specifies the desired key type; must be ed25519, ecdsa, or rsa.
     */
    keyType?: pulumi.Input<string>;
    /**
     * The Vault credential library name. Defaults to the resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The path in Vault to request credentials from.
     */
    path: pulumi.Input<string>;
    /**
     * Specifies the requested time to live for a certificate returned from the library.
     */
    ttl?: pulumi.Input<string>;
    /**
     * The username to use with the certificate returned by the library.
     */
    username: pulumi.Input<string>;
}
