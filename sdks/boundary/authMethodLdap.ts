// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AuthMethodLdap extends pulumi.CustomResource {
    /**
     * Get an existing AuthMethodLdap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthMethodLdapState, opts?: pulumi.CustomResourceOptions): AuthMethodLdap {
        return new AuthMethodLdap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'boundary:index/authMethodLdap:AuthMethodLdap';

    /**
     * Returns true if the given object is an instance of AuthMethodLdap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuthMethodLdap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthMethodLdap.__pulumiType;
    }

    /**
     * Account attribute maps fullname and email.
     */
    public readonly accountAttributeMaps!: pulumi.Output<string[] | undefined>;
    /**
     * Use anon bind when performing LDAP group searches (optional).
     */
    public readonly anonGroupSearch!: pulumi.Output<boolean | undefined>;
    /**
     * The distinguished name of entry to bind when performing user and group searches (optional).
     */
    public readonly bindDn!: pulumi.Output<string | undefined>;
    /**
     * The password to use along with bind-dn performing user and group searches (optional).
     */
    public readonly bindPassword!: pulumi.Output<string | undefined>;
    /**
     * The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of
     * the value.
     */
    public readonly bindPasswordHmac!: pulumi.Output<string>;
    /**
     * PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP
     * server(optional). This may be specified multiple times
     */
    public readonly certificates!: pulumi.Output<string[] | undefined>;
    /**
     * PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP
     * server(optional).
     */
    public readonly clientCertificate!: pulumi.Output<string | undefined>;
    /**
     * PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
     */
    public readonly clientCertificateKey!: pulumi.Output<string | undefined>;
    /**
     * The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial
     * setting of the value.
     */
    public readonly clientCertificateKeyHmac!: pulumi.Output<string>;
    /**
     * Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,
     * DerefFindingBaseObj, and DerefAlways (optional).
     */
    public readonly dereferenceAliases!: pulumi.Output<string>;
    /**
     * The auth method description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Use anon bind to discover the bind DN of a user (optional).
     */
    public readonly discoverDn!: pulumi.Output<boolean | undefined>;
    /**
     * Find the authenticated user's groups during authentication (optional).
     */
    public readonly enableGroups!: pulumi.Output<boolean | undefined>;
    /**
     * The attribute that enumerates a user's group membership from entries returned by a group search (optional).
     */
    public readonly groupAttr!: pulumi.Output<string | undefined>;
    /**
     * The base DN under which to perform group search.
     */
    public readonly groupDn!: pulumi.Output<string | undefined>;
    /**
     * A go template used to construct a LDAP group search filter (optional).
     */
    public readonly groupFilter!: pulumi.Output<string | undefined>;
    /**
     * Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
     */
    public readonly insecureTls!: pulumi.Output<boolean | undefined>;
    /**
     * When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
     * a scope means the the user will be automatically created when they login using an LDAP account.
     */
    public readonly isPrimaryForScope!: pulumi.Output<boolean | undefined>;
    /**
     * MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups
     * (optional).
     */
    public readonly maximumPageSize!: pulumi.Output<number | undefined>;
    /**
     * The auth method name. Defaults to the resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The scope ID.
     */
    public readonly scopeId!: pulumi.Output<string>;
    /**
     * Issue StartTLS command after connecting (optional).
     */
    public readonly startTls!: pulumi.Output<boolean | undefined>;
    /**
     * Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * The type of auth method; hardcoded.
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
     */
    public readonly upnDomain!: pulumi.Output<string | undefined>;
    /**
     * The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.
     */
    public readonly urls!: pulumi.Output<string[] | undefined>;
    /**
     * Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
     */
    public readonly useTokenGroups!: pulumi.Output<boolean | undefined>;
    /**
     * The attribute on user entry matching the username passed when authenticating (optional).
     */
    public readonly userAttr!: pulumi.Output<string | undefined>;
    /**
     * The base DN under which to perform user search (optional).
     */
    public readonly userDn!: pulumi.Output<string | undefined>;
    /**
     * A go template used to construct a LDAP user search filter (optional).
     */
    public readonly userFilter!: pulumi.Output<string | undefined>;

    /**
     * Create a AuthMethodLdap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthMethodLdapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthMethodLdapArgs | AuthMethodLdapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthMethodLdapState | undefined;
            resourceInputs["accountAttributeMaps"] = state ? state.accountAttributeMaps : undefined;
            resourceInputs["anonGroupSearch"] = state ? state.anonGroupSearch : undefined;
            resourceInputs["bindDn"] = state ? state.bindDn : undefined;
            resourceInputs["bindPassword"] = state ? state.bindPassword : undefined;
            resourceInputs["bindPasswordHmac"] = state ? state.bindPasswordHmac : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["clientCertificateKey"] = state ? state.clientCertificateKey : undefined;
            resourceInputs["clientCertificateKeyHmac"] = state ? state.clientCertificateKeyHmac : undefined;
            resourceInputs["dereferenceAliases"] = state ? state.dereferenceAliases : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["discoverDn"] = state ? state.discoverDn : undefined;
            resourceInputs["enableGroups"] = state ? state.enableGroups : undefined;
            resourceInputs["groupAttr"] = state ? state.groupAttr : undefined;
            resourceInputs["groupDn"] = state ? state.groupDn : undefined;
            resourceInputs["groupFilter"] = state ? state.groupFilter : undefined;
            resourceInputs["insecureTls"] = state ? state.insecureTls : undefined;
            resourceInputs["isPrimaryForScope"] = state ? state.isPrimaryForScope : undefined;
            resourceInputs["maximumPageSize"] = state ? state.maximumPageSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
            resourceInputs["startTls"] = state ? state.startTls : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["upnDomain"] = state ? state.upnDomain : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
            resourceInputs["useTokenGroups"] = state ? state.useTokenGroups : undefined;
            resourceInputs["userAttr"] = state ? state.userAttr : undefined;
            resourceInputs["userDn"] = state ? state.userDn : undefined;
            resourceInputs["userFilter"] = state ? state.userFilter : undefined;
        } else {
            const args = argsOrState as AuthMethodLdapArgs | undefined;
            if ((!args || args.scopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            resourceInputs["accountAttributeMaps"] = args ? args.accountAttributeMaps : undefined;
            resourceInputs["anonGroupSearch"] = args ? args.anonGroupSearch : undefined;
            resourceInputs["bindDn"] = args ? args.bindDn : undefined;
            resourceInputs["bindPassword"] = args ? args.bindPassword : undefined;
            resourceInputs["bindPasswordHmac"] = args ? args.bindPasswordHmac : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["clientCertificateKey"] = args ? args.clientCertificateKey : undefined;
            resourceInputs["clientCertificateKeyHmac"] = args ? args.clientCertificateKeyHmac : undefined;
            resourceInputs["dereferenceAliases"] = args ? args.dereferenceAliases : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["discoverDn"] = args ? args.discoverDn : undefined;
            resourceInputs["enableGroups"] = args ? args.enableGroups : undefined;
            resourceInputs["groupAttr"] = args ? args.groupAttr : undefined;
            resourceInputs["groupDn"] = args ? args.groupDn : undefined;
            resourceInputs["groupFilter"] = args ? args.groupFilter : undefined;
            resourceInputs["insecureTls"] = args ? args.insecureTls : undefined;
            resourceInputs["isPrimaryForScope"] = args ? args.isPrimaryForScope : undefined;
            resourceInputs["maximumPageSize"] = args ? args.maximumPageSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
            resourceInputs["startTls"] = args ? args.startTls : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["upnDomain"] = args ? args.upnDomain : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
            resourceInputs["useTokenGroups"] = args ? args.useTokenGroups : undefined;
            resourceInputs["userAttr"] = args ? args.userAttr : undefined;
            resourceInputs["userDn"] = args ? args.userDn : undefined;
            resourceInputs["userFilter"] = args ? args.userFilter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthMethodLdap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering AuthMethodLdap resources.
 */
export interface AuthMethodLdapState {
    /**
     * Account attribute maps fullname and email.
     */
    accountAttributeMaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use anon bind when performing LDAP group searches (optional).
     */
    anonGroupSearch?: pulumi.Input<boolean>;
    /**
     * The distinguished name of entry to bind when performing user and group searches (optional).
     */
    bindDn?: pulumi.Input<string>;
    /**
     * The password to use along with bind-dn performing user and group searches (optional).
     */
    bindPassword?: pulumi.Input<string>;
    /**
     * The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of
     * the value.
     */
    bindPasswordHmac?: pulumi.Input<string>;
    /**
     * PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP
     * server(optional). This may be specified multiple times
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP
     * server(optional).
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
     */
    clientCertificateKey?: pulumi.Input<string>;
    /**
     * The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial
     * setting of the value.
     */
    clientCertificateKeyHmac?: pulumi.Input<string>;
    /**
     * Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,
     * DerefFindingBaseObj, and DerefAlways (optional).
     */
    dereferenceAliases?: pulumi.Input<string>;
    /**
     * The auth method description.
     */
    description?: pulumi.Input<string>;
    /**
     * Use anon bind to discover the bind DN of a user (optional).
     */
    discoverDn?: pulumi.Input<boolean>;
    /**
     * Find the authenticated user's groups during authentication (optional).
     */
    enableGroups?: pulumi.Input<boolean>;
    /**
     * The attribute that enumerates a user's group membership from entries returned by a group search (optional).
     */
    groupAttr?: pulumi.Input<string>;
    /**
     * The base DN under which to perform group search.
     */
    groupDn?: pulumi.Input<string>;
    /**
     * A go template used to construct a LDAP group search filter (optional).
     */
    groupFilter?: pulumi.Input<string>;
    /**
     * Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
     */
    insecureTls?: pulumi.Input<boolean>;
    /**
     * When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
     * a scope means the the user will be automatically created when they login using an LDAP account.
     */
    isPrimaryForScope?: pulumi.Input<boolean>;
    /**
     * MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups
     * (optional).
     */
    maximumPageSize?: pulumi.Input<number>;
    /**
     * The auth method name. Defaults to the resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The scope ID.
     */
    scopeId?: pulumi.Input<string>;
    /**
     * Issue StartTLS command after connecting (optional).
     */
    startTls?: pulumi.Input<boolean>;
    /**
     * Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
     */
    state?: pulumi.Input<string>;
    /**
     * The type of auth method; hardcoded.
     */
    type?: pulumi.Input<string>;
    /**
     * The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
     */
    upnDomain?: pulumi.Input<string>;
    /**
     * The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
     */
    useTokenGroups?: pulumi.Input<boolean>;
    /**
     * The attribute on user entry matching the username passed when authenticating (optional).
     */
    userAttr?: pulumi.Input<string>;
    /**
     * The base DN under which to perform user search (optional).
     */
    userDn?: pulumi.Input<string>;
    /**
     * A go template used to construct a LDAP user search filter (optional).
     */
    userFilter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuthMethodLdap resource.
 */
export interface AuthMethodLdapArgs {
    /**
     * Account attribute maps fullname and email.
     */
    accountAttributeMaps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use anon bind when performing LDAP group searches (optional).
     */
    anonGroupSearch?: pulumi.Input<boolean>;
    /**
     * The distinguished name of entry to bind when performing user and group searches (optional).
     */
    bindDn?: pulumi.Input<string>;
    /**
     * The password to use along with bind-dn performing user and group searches (optional).
     */
    bindPassword?: pulumi.Input<string>;
    /**
     * The HMAC of the bind password returned by the Boundary controller, which is used for comparison after initial setting of
     * the value.
     */
    bindPasswordHmac?: pulumi.Input<string>;
    /**
     * PEM-encoded X.509 CA certificate in ASN.1 DER form that can be used as a trust anchor when connecting to an LDAP
     * server(optional). This may be specified multiple times
     */
    certificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * PEM-encoded X.509 client certificate in ASN.1 DER form that can be used to authenticate against an LDAP
     * server(optional).
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * PEM-encoded X.509 client certificate key in PKCS #8, ASN.1 DER form used with the client certificate (optional).
     */
    clientCertificateKey?: pulumi.Input<string>;
    /**
     * The HMAC of the client certificate key returned by the Boundary controller, which is used for comparison after initial
     * setting of the value.
     */
    clientCertificateKeyHmac?: pulumi.Input<string>;
    /**
     * Control how aliases are dereferenced when performing the search. Can be one of: NeverDerefAliases, DerefInSearching,
     * DerefFindingBaseObj, and DerefAlways (optional).
     */
    dereferenceAliases?: pulumi.Input<string>;
    /**
     * The auth method description.
     */
    description?: pulumi.Input<string>;
    /**
     * Use anon bind to discover the bind DN of a user (optional).
     */
    discoverDn?: pulumi.Input<boolean>;
    /**
     * Find the authenticated user's groups during authentication (optional).
     */
    enableGroups?: pulumi.Input<boolean>;
    /**
     * The attribute that enumerates a user's group membership from entries returned by a group search (optional).
     */
    groupAttr?: pulumi.Input<string>;
    /**
     * The base DN under which to perform group search.
     */
    groupDn?: pulumi.Input<string>;
    /**
     * A go template used to construct a LDAP group search filter (optional).
     */
    groupFilter?: pulumi.Input<string>;
    /**
     * Skip the LDAP server SSL certificate validation (optional) - insecure and use with caution.
     */
    insecureTls?: pulumi.Input<boolean>;
    /**
     * When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for
     * a scope means the the user will be automatically created when they login using an LDAP account.
     */
    isPrimaryForScope?: pulumi.Input<boolean>;
    /**
     * MaximumPageSize specifies a maximum search result size to use when retrieving the authenticated user's groups
     * (optional).
     */
    maximumPageSize?: pulumi.Input<number>;
    /**
     * The auth method name. Defaults to the resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The scope ID.
     */
    scopeId: pulumi.Input<string>;
    /**
     * Issue StartTLS command after connecting (optional).
     */
    startTls?: pulumi.Input<boolean>;
    /**
     * Can be one of 'inactive', 'active-private', or 'active-public'. Defaults to active-public.
     */
    state?: pulumi.Input<string>;
    /**
     * The type of auth method; hardcoded.
     */
    type?: pulumi.Input<string>;
    /**
     * The userPrincipalDomain used to construct the UPN string for the authenticating user (optional).
     */
    upnDomain?: pulumi.Input<string>;
    /**
     * The LDAP URLs that specify LDAP servers to connect to (required). May be specified multiple times.
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Use the Active Directory tokenGroups constructed attribute of the user to find the group memberships (optional).
     */
    useTokenGroups?: pulumi.Input<boolean>;
    /**
     * The attribute on user entry matching the username passed when authenticating (optional).
     */
    userAttr?: pulumi.Input<string>;
    /**
     * The base DN under which to perform user search (optional).
     */
    userDn?: pulumi.Input<string>;
    /**
     * A go template used to construct a LDAP user search filter (optional).
     */
    userFilter?: pulumi.Input<string>;
}
