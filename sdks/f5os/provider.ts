// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the f5os package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'f5os';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === "pulumi:providers:" + Provider.__pulumiType;
    }

    /**
     * URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
     */
    public readonly host!: pulumi.Output<string | undefined>;
    /**
     * Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
     * required permission as per
     * [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            resourceInputs["disableTlsVerify"] = pulumi.output(args ? args.disableTlsVerify : undefined).apply(JSON.stringify);
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = pulumi.output(args ? args.port : undefined).apply(JSON.stringify);
            resourceInputs["teemDisable"] = pulumi.output(args ? args.teemDisable : undefined).apply(JSON.stringify);
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Provider.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * `disable_tls_verify` controls whether a client verifies the server's certificate chain and host name. default it is set
     * to `true`. If `disable_tls_verify` is true, crypto/tls accepts any certificate presented by the server and any host name
     * in that certificate. In this mode, TLS is susceptible to machine-in-the-middle attacks unless custom verification is
     * used. can be provided by `DISABLE_TLS_VERIFY` environment variable. > **NOTE** If it is set to `false`, certificate/ca
     * certificates should be added to `trusted store` of host where we are running this provider.
     */
    disableTlsVerify?: pulumi.Input<boolean>;
    /**
     * URI/Host details for F5os Device,can be provided via `F5OS_HOST` environment variable.
     */
    host?: pulumi.Input<string>;
    /**
     * Password for F5os Device,can be provided via `F5OS_PASSWORD` environment variable.
     */
    password?: pulumi.Input<string>;
    /**
     * Port Number to be used to make API calls to HOST
     */
    port?: pulumi.Input<number>;
    /**
     * If this flag set to true,sending telemetry data to TEEM will be disabled,can be provided via `TEEM_DISABLE` environment
     * variable.
     */
    teemDisable?: pulumi.Input<boolean>;
    /**
     * Username for F5os Device,can be provided via `F5OS_USERNAME` environment variable.User provided here need to have
     * required permission as per
     * [UserManagement](https://techdocs.f5.com/en-us/f5os-a-1-4-0/f5-rseries-systems-administration-configuration/title-user-mgmt.html)
     */
    username?: pulumi.Input<string>;
}
