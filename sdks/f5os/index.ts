// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ConfigBackupArgs, ConfigBackupState } from "./configBackup";
export type ConfigBackup = import("./configBackup").ConfigBackup;
export const ConfigBackup: typeof import("./configBackup").ConfigBackup = null as any;
utilities.lazyLoad(exports, ["ConfigBackup"], () => require("./configBackup"));

export { GetTenantImageArgs, GetTenantImageResult, GetTenantImageOutputArgs } from "./getTenantImage";
export const getTenantImage: typeof import("./getTenantImage").getTenantImage = null as any;
export const getTenantImageOutput: typeof import("./getTenantImage").getTenantImageOutput = null as any;
utilities.lazyLoad(exports, ["getTenantImage","getTenantImageOutput"], () => require("./getTenantImage"));

export { InterfaceArgs, InterfaceState } from "./interface";
export type Interface = import("./interface").Interface;
export const Interface: typeof import("./interface").Interface = null as any;
utilities.lazyLoad(exports, ["Interface"], () => require("./interface"));

export { LagArgs, LagState } from "./lag";
export type Lag = import("./lag").Lag;
export const Lag: typeof import("./lag").Lag = null as any;
utilities.lazyLoad(exports, ["Lag"], () => require("./lag"));

export { PartitionArgs, PartitionState } from "./partition";
export type Partition = import("./partition").Partition;
export const Partition: typeof import("./partition").Partition = null as any;
utilities.lazyLoad(exports, ["Partition"], () => require("./partition"));

export { PartitionChangePasswordArgs, PartitionChangePasswordState } from "./partitionChangePassword";
export type PartitionChangePassword = import("./partitionChangePassword").PartitionChangePassword;
export const PartitionChangePassword: typeof import("./partitionChangePassword").PartitionChangePassword = null as any;
utilities.lazyLoad(exports, ["PartitionChangePassword"], () => require("./partitionChangePassword"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TenantArgs, TenantState } from "./tenant";
export type Tenant = import("./tenant").Tenant;
export const Tenant: typeof import("./tenant").Tenant = null as any;
utilities.lazyLoad(exports, ["Tenant"], () => require("./tenant"));

export { TenantImageArgs, TenantImageState } from "./tenantImage";
export type TenantImage = import("./tenantImage").TenantImage;
export const TenantImage: typeof import("./tenantImage").TenantImage = null as any;
utilities.lazyLoad(exports, ["TenantImage"], () => require("./tenantImage"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "f5os:index/configBackup:ConfigBackup":
                return new ConfigBackup(name, <any>undefined, { urn })
            case "f5os:index/interface:Interface":
                return new Interface(name, <any>undefined, { urn })
            case "f5os:index/lag:Lag":
                return new Lag(name, <any>undefined, { urn })
            case "f5os:index/partition:Partition":
                return new Partition(name, <any>undefined, { urn })
            case "f5os:index/partitionChangePassword:PartitionChangePassword":
                return new PartitionChangePassword(name, <any>undefined, { urn })
            case "f5os:index/tenant:Tenant":
                return new Tenant(name, <any>undefined, { urn })
            case "f5os:index/tenantImage:TenantImage":
                return new TenantImage(name, <any>undefined, { urn })
            case "f5os:index/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("f5os", "index/configBackup", _module)
pulumi.runtime.registerResourceModule("f5os", "index/interface", _module)
pulumi.runtime.registerResourceModule("f5os", "index/lag", _module)
pulumi.runtime.registerResourceModule("f5os", "index/partition", _module)
pulumi.runtime.registerResourceModule("f5os", "index/partitionChangePassword", _module)
pulumi.runtime.registerResourceModule("f5os", "index/tenant", _module)
pulumi.runtime.registerResourceModule("f5os", "index/tenantImage", _module)
pulumi.runtime.registerResourceModule("f5os", "index/vlan", _module)
pulumi.runtime.registerResourcePackage("f5os", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:f5os") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
