// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Name extends pulumi.CustomResource {
    /**
     * Get an existing Name resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NameState, opts?: pulumi.CustomResourceOptions): Name {
        return new Name(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurecaf:index/name:Name';

    /**
     * Returns true if the given object is an instance of Name.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Name {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Name.__pulumiType;
    }

    public readonly cleanInput!: pulumi.Output<boolean | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly passthrough!: pulumi.Output<boolean | undefined>;
    public readonly prefixes!: pulumi.Output<string[] | undefined>;
    public readonly randomLength!: pulumi.Output<number | undefined>;
    public readonly randomSeed!: pulumi.Output<number | undefined>;
    public readonly resourceType!: pulumi.Output<string | undefined>;
    public readonly resourceTypes!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly result!: pulumi.Output<string>;
    public /*out*/ readonly results!: pulumi.Output<{[key: string]: string}>;
    public readonly separator!: pulumi.Output<string | undefined>;
    public readonly suffixes!: pulumi.Output<string[] | undefined>;
    public readonly useSlug!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Name resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NameArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NameArgs | NameState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NameState | undefined;
            resourceInputs["cleanInput"] = state ? state.cleanInput : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["passthrough"] = state ? state.passthrough : undefined;
            resourceInputs["prefixes"] = state ? state.prefixes : undefined;
            resourceInputs["randomLength"] = state ? state.randomLength : undefined;
            resourceInputs["randomSeed"] = state ? state.randomSeed : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["resourceTypes"] = state ? state.resourceTypes : undefined;
            resourceInputs["result"] = state ? state.result : undefined;
            resourceInputs["results"] = state ? state.results : undefined;
            resourceInputs["separator"] = state ? state.separator : undefined;
            resourceInputs["suffixes"] = state ? state.suffixes : undefined;
            resourceInputs["useSlug"] = state ? state.useSlug : undefined;
        } else {
            const args = argsOrState as NameArgs | undefined;
            resourceInputs["cleanInput"] = args ? args.cleanInput : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["passthrough"] = args ? args.passthrough : undefined;
            resourceInputs["prefixes"] = args ? args.prefixes : undefined;
            resourceInputs["randomLength"] = args ? args.randomLength : undefined;
            resourceInputs["randomSeed"] = args ? args.randomSeed : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["resourceTypes"] = args ? args.resourceTypes : undefined;
            resourceInputs["separator"] = args ? args.separator : undefined;
            resourceInputs["suffixes"] = args ? args.suffixes : undefined;
            resourceInputs["useSlug"] = args ? args.useSlug : undefined;
            resourceInputs["result"] = undefined /*out*/;
            resourceInputs["results"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Name.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Name resources.
 */
export interface NameState {
    cleanInput?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    passthrough?: pulumi.Input<boolean>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    randomLength?: pulumi.Input<number>;
    randomSeed?: pulumi.Input<number>;
    resourceType?: pulumi.Input<string>;
    resourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    result?: pulumi.Input<string>;
    results?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    separator?: pulumi.Input<string>;
    suffixes?: pulumi.Input<pulumi.Input<string>[]>;
    useSlug?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Name resource.
 */
export interface NameArgs {
    cleanInput?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    passthrough?: pulumi.Input<boolean>;
    prefixes?: pulumi.Input<pulumi.Input<string>[]>;
    randomLength?: pulumi.Input<number>;
    randomSeed?: pulumi.Input<number>;
    resourceType?: pulumi.Input<string>;
    resourceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    separator?: pulumi.Input<string>;
    suffixes?: pulumi.Input<pulumi.Input<string>[]>;
    useSlug?: pulumi.Input<boolean>;
}
