// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Checkcommand extends pulumi.CustomResource {
    /**
     * Get an existing Checkcommand resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CheckcommandState, opts?: pulumi.CustomResourceOptions): Checkcommand {
        return new Checkcommand(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'icinga2:index/checkcommand:Checkcommand';

    /**
     * Returns true if the given object is an instance of Checkcommand.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Checkcommand {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Checkcommand.__pulumiType;
    }

    public readonly arguments!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly command!: pulumi.Output<string>;
    /**
     * Name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly templates!: pulumi.Output<string[]>;

    /**
     * Create a Checkcommand resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CheckcommandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CheckcommandArgs | CheckcommandState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CheckcommandState | undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
        } else {
            const args = argsOrState as CheckcommandArgs | undefined;
            if ((!args || args.command === undefined) && !opts.urn) {
                throw new Error("Missing required property 'command'");
            }
            if ((!args || args.templates === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templates'");
            }
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Checkcommand.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Checkcommand resources.
 */
export interface CheckcommandState {
    arguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    command?: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Checkcommand resource.
 */
export interface CheckcommandArgs {
    arguments?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    command: pulumi.Input<string>;
    /**
     * Name
     */
    name?: pulumi.Input<string>;
    templates: pulumi.Input<pulumi.Input<string>[]>;
}
