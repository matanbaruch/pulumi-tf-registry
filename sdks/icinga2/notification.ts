// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Notification extends pulumi.CustomResource {
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationState, opts?: pulumi.CustomResourceOptions): Notification {
        return new Notification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'icinga2:index/notification:Notification';

    /**
     * Returns true if the given object is an instance of Notification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notification.__pulumiType;
    }

    public readonly command!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<number | undefined>;
    public readonly servicename!: pulumi.Output<string | undefined>;
    public readonly templates!: pulumi.Output<string[] | undefined>;
    public readonly users!: pulumi.Output<string[] | undefined>;
    public readonly vars!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Notification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationArgs | NotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationState | undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["servicename"] = state ? state.servicename : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["vars"] = state ? state.vars : undefined;
        } else {
            const args = argsOrState as NotificationArgs | undefined;
            if ((!args || args.command === undefined) && !opts.urn) {
                throw new Error("Missing required property 'command'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["servicename"] = args ? args.servicename : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["vars"] = args ? args.vars : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notification.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Notification resources.
 */
export interface NotificationState {
    command?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    servicename?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Notification resource.
 */
export interface NotificationArgs {
    command: pulumi.Input<string>;
    hostname: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    servicename?: pulumi.Input<string>;
    templates?: pulumi.Input<pulumi.Input<string>[]>;
    users?: pulumi.Input<pulumi.Input<string>[]>;
    vars?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
