// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CheckcommandArgs, CheckcommandState } from "./checkcommand";
export type Checkcommand = import("./checkcommand").Checkcommand;
export const Checkcommand: typeof import("./checkcommand").Checkcommand = null as any;
utilities.lazyLoad(exports, ["Checkcommand"], () => require("./checkcommand"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostgroupArgs, HostgroupState } from "./hostgroup";
export type Hostgroup = import("./hostgroup").Hostgroup;
export const Hostgroup: typeof import("./hostgroup").Hostgroup = null as any;
utilities.lazyLoad(exports, ["Hostgroup"], () => require("./hostgroup"));

export { NotificationArgs, NotificationState } from "./notification";
export type Notification = import("./notification").Notification;
export const Notification: typeof import("./notification").Notification = null as any;
utilities.lazyLoad(exports, ["Notification"], () => require("./notification"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "icinga2:index/checkcommand:Checkcommand":
                return new Checkcommand(name, <any>undefined, { urn })
            case "icinga2:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "icinga2:index/hostgroup:Hostgroup":
                return new Hostgroup(name, <any>undefined, { urn })
            case "icinga2:index/notification:Notification":
                return new Notification(name, <any>undefined, { urn })
            case "icinga2:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "icinga2:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("icinga2", "index/checkcommand", _module)
pulumi.runtime.registerResourceModule("icinga2", "index/host", _module)
pulumi.runtime.registerResourceModule("icinga2", "index/hostgroup", _module)
pulumi.runtime.registerResourceModule("icinga2", "index/notification", _module)
pulumi.runtime.registerResourceModule("icinga2", "index/service", _module)
pulumi.runtime.registerResourceModule("icinga2", "index/user", _module)
pulumi.runtime.registerResourcePackage("icinga2", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:icinga2") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
