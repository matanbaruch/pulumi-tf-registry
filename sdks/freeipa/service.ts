// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'freeipa:index/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    /**
     * Force force principal name even if host not in DNS
     */
    public readonly force!: pulumi.Output<boolean | undefined>;
    /**
     * Principal name Service principal. Format: <service_type>/<hostname>
     */
    public readonly krbHostname!: pulumi.Output<string>;
    /**
     * Skip host check force service to be created even when host object does not exist to manage it
     */
    public readonly skipHostCheck!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["krbHostname"] = state ? state.krbHostname : undefined;
            resourceInputs["skipHostCheck"] = state ? state.skipHostCheck : undefined;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if ((!args || args.krbHostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'krbHostname'");
            }
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["krbHostname"] = args ? args.krbHostname : undefined;
            resourceInputs["skipHostCheck"] = args ? args.skipHostCheck : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    /**
     * Force force principal name even if host not in DNS
     */
    force?: pulumi.Input<boolean>;
    /**
     * Principal name Service principal. Format: <service_type>/<hostname>
     */
    krbHostname?: pulumi.Input<string>;
    /**
     * Skip host check force service to be created even when host object does not exist to manage it
     */
    skipHostCheck?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    /**
     * Force force principal name even if host not in DNS
     */
    force?: pulumi.Input<boolean>;
    /**
     * Principal name Service principal. Format: <service_type>/<hostname>
     */
    krbHostname: pulumi.Input<string>;
    /**
     * Skip host check force service to be created even when host object does not exist to manage it
     */
    skipHostCheck?: pulumi.Input<boolean>;
}
