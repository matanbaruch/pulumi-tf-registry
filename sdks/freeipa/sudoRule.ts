// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SudoRule extends pulumi.CustomResource {
    /**
     * Get an existing SudoRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SudoRuleState, opts?: pulumi.CustomResourceOptions): SudoRule {
        return new SudoRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'freeipa:index/sudoRule:SudoRule';

    /**
     * Returns true if the given object is an instance of SudoRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SudoRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SudoRule.__pulumiType;
    }

    /**
     * Command category the sudo rule is applied to (allowed value: all)
     */
    public readonly commandcategory!: pulumi.Output<string | undefined>;
    /**
     * Sudo rule description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable this sudo rule
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Host category the sudo rule is applied to (allowed value: all)
     */
    public readonly hostcategory!: pulumi.Output<string | undefined>;
    /**
     * Name of the sudo rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Sudo rule order (must be unique)
     */
    public readonly order!: pulumi.Output<number | undefined>;
    /**
     * Run as group category the sudo rule is applied to (allowed value: all)
     */
    public readonly runasgroupcategory!: pulumi.Output<string | undefined>;
    /**
     * Run as user category the sudo rule is applied to (allowed value: all)
     */
    public readonly runasusercategory!: pulumi.Output<string | undefined>;
    /**
     * User category the sudo rule is applied to (allowed value: all)
     */
    public readonly usercategory!: pulumi.Output<string | undefined>;

    /**
     * Create a SudoRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SudoRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SudoRuleArgs | SudoRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SudoRuleState | undefined;
            resourceInputs["commandcategory"] = state ? state.commandcategory : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["hostcategory"] = state ? state.hostcategory : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["runasgroupcategory"] = state ? state.runasgroupcategory : undefined;
            resourceInputs["runasusercategory"] = state ? state.runasusercategory : undefined;
            resourceInputs["usercategory"] = state ? state.usercategory : undefined;
        } else {
            const args = argsOrState as SudoRuleArgs | undefined;
            resourceInputs["commandcategory"] = args ? args.commandcategory : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["hostcategory"] = args ? args.hostcategory : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["runasgroupcategory"] = args ? args.runasgroupcategory : undefined;
            resourceInputs["runasusercategory"] = args ? args.runasusercategory : undefined;
            resourceInputs["usercategory"] = args ? args.usercategory : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SudoRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SudoRule resources.
 */
export interface SudoRuleState {
    /**
     * Command category the sudo rule is applied to (allowed value: all)
     */
    commandcategory?: pulumi.Input<string>;
    /**
     * Sudo rule description
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this sudo rule
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host category the sudo rule is applied to (allowed value: all)
     */
    hostcategory?: pulumi.Input<string>;
    /**
     * Name of the sudo rule
     */
    name?: pulumi.Input<string>;
    /**
     * Sudo rule order (must be unique)
     */
    order?: pulumi.Input<number>;
    /**
     * Run as group category the sudo rule is applied to (allowed value: all)
     */
    runasgroupcategory?: pulumi.Input<string>;
    /**
     * Run as user category the sudo rule is applied to (allowed value: all)
     */
    runasusercategory?: pulumi.Input<string>;
    /**
     * User category the sudo rule is applied to (allowed value: all)
     */
    usercategory?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SudoRule resource.
 */
export interface SudoRuleArgs {
    /**
     * Command category the sudo rule is applied to (allowed value: all)
     */
    commandcategory?: pulumi.Input<string>;
    /**
     * Sudo rule description
     */
    description?: pulumi.Input<string>;
    /**
     * Enable this sudo rule
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Host category the sudo rule is applied to (allowed value: all)
     */
    hostcategory?: pulumi.Input<string>;
    /**
     * Name of the sudo rule
     */
    name?: pulumi.Input<string>;
    /**
     * Sudo rule order (must be unique)
     */
    order?: pulumi.Input<number>;
    /**
     * Run as group category the sudo rule is applied to (allowed value: all)
     */
    runasgroupcategory?: pulumi.Input<string>;
    /**
     * Run as user category the sudo rule is applied to (allowed value: all)
     */
    runasusercategory?: pulumi.Input<string>;
    /**
     * User category the sudo rule is applied to (allowed value: all)
     */
    usercategory?: pulumi.Input<string>;
}
