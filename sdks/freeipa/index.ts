// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AutomemberaddArgs, AutomemberaddState } from "./automemberadd";
export type Automemberadd = import("./automemberadd").Automemberadd;
export const Automemberadd: typeof import("./automemberadd").Automemberadd = null as any;
utilities.lazyLoad(exports, ["Automemberadd"], () => require("./automemberadd"));

export { AutomemberaddConditionArgs, AutomemberaddConditionState } from "./automemberaddCondition";
export type AutomemberaddCondition = import("./automemberaddCondition").AutomemberaddCondition;
export const AutomemberaddCondition: typeof import("./automemberaddCondition").AutomemberaddCondition = null as any;
utilities.lazyLoad(exports, ["AutomemberaddCondition"], () => require("./automemberaddCondition"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { HbacPolicyArgs, HbacPolicyState } from "./hbacPolicy";
export type HbacPolicy = import("./hbacPolicy").HbacPolicy;
export const HbacPolicy: typeof import("./hbacPolicy").HbacPolicy = null as any;
utilities.lazyLoad(exports, ["HbacPolicy"], () => require("./hbacPolicy"));

export { HbacPolicyHostMembershipArgs, HbacPolicyHostMembershipState } from "./hbacPolicyHostMembership";
export type HbacPolicyHostMembership = import("./hbacPolicyHostMembership").HbacPolicyHostMembership;
export const HbacPolicyHostMembership: typeof import("./hbacPolicyHostMembership").HbacPolicyHostMembership = null as any;
utilities.lazyLoad(exports, ["HbacPolicyHostMembership"], () => require("./hbacPolicyHostMembership"));

export { HbacPolicyServiceMembershipArgs, HbacPolicyServiceMembershipState } from "./hbacPolicyServiceMembership";
export type HbacPolicyServiceMembership = import("./hbacPolicyServiceMembership").HbacPolicyServiceMembership;
export const HbacPolicyServiceMembership: typeof import("./hbacPolicyServiceMembership").HbacPolicyServiceMembership = null as any;
utilities.lazyLoad(exports, ["HbacPolicyServiceMembership"], () => require("./hbacPolicyServiceMembership"));

export { HbacPolicyUserMembershipArgs, HbacPolicyUserMembershipState } from "./hbacPolicyUserMembership";
export type HbacPolicyUserMembership = import("./hbacPolicyUserMembership").HbacPolicyUserMembership;
export const HbacPolicyUserMembership: typeof import("./hbacPolicyUserMembership").HbacPolicyUserMembership = null as any;
utilities.lazyLoad(exports, ["HbacPolicyUserMembership"], () => require("./hbacPolicyUserMembership"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostHostgroupMembershipArgs, HostHostgroupMembershipState } from "./hostHostgroupMembership";
export type HostHostgroupMembership = import("./hostHostgroupMembership").HostHostgroupMembership;
export const HostHostgroupMembership: typeof import("./hostHostgroupMembership").HostHostgroupMembership = null as any;
utilities.lazyLoad(exports, ["HostHostgroupMembership"], () => require("./hostHostgroupMembership"));

export { HostgroupArgs, HostgroupState } from "./hostgroup";
export type Hostgroup = import("./hostgroup").Hostgroup;
export const Hostgroup: typeof import("./hostgroup").Hostgroup = null as any;
utilities.lazyLoad(exports, ["Hostgroup"], () => require("./hostgroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { SudoCmdArgs, SudoCmdState } from "./sudoCmd";
export type SudoCmd = import("./sudoCmd").SudoCmd;
export const SudoCmd: typeof import("./sudoCmd").SudoCmd = null as any;
utilities.lazyLoad(exports, ["SudoCmd"], () => require("./sudoCmd"));

export { SudoCmdgroupArgs, SudoCmdgroupState } from "./sudoCmdgroup";
export type SudoCmdgroup = import("./sudoCmdgroup").SudoCmdgroup;
export const SudoCmdgroup: typeof import("./sudoCmdgroup").SudoCmdgroup = null as any;
utilities.lazyLoad(exports, ["SudoCmdgroup"], () => require("./sudoCmdgroup"));

export { SudoCmdgroupMembershipArgs, SudoCmdgroupMembershipState } from "./sudoCmdgroupMembership";
export type SudoCmdgroupMembership = import("./sudoCmdgroupMembership").SudoCmdgroupMembership;
export const SudoCmdgroupMembership: typeof import("./sudoCmdgroupMembership").SudoCmdgroupMembership = null as any;
utilities.lazyLoad(exports, ["SudoCmdgroupMembership"], () => require("./sudoCmdgroupMembership"));

export { SudoRuleArgs, SudoRuleState } from "./sudoRule";
export type SudoRule = import("./sudoRule").SudoRule;
export const SudoRule: typeof import("./sudoRule").SudoRule = null as any;
utilities.lazyLoad(exports, ["SudoRule"], () => require("./sudoRule"));

export { SudoRuleAllowcmdMembershipArgs, SudoRuleAllowcmdMembershipState } from "./sudoRuleAllowcmdMembership";
export type SudoRuleAllowcmdMembership = import("./sudoRuleAllowcmdMembership").SudoRuleAllowcmdMembership;
export const SudoRuleAllowcmdMembership: typeof import("./sudoRuleAllowcmdMembership").SudoRuleAllowcmdMembership = null as any;
utilities.lazyLoad(exports, ["SudoRuleAllowcmdMembership"], () => require("./sudoRuleAllowcmdMembership"));

export { SudoRuleDenycmdMembershipArgs, SudoRuleDenycmdMembershipState } from "./sudoRuleDenycmdMembership";
export type SudoRuleDenycmdMembership = import("./sudoRuleDenycmdMembership").SudoRuleDenycmdMembership;
export const SudoRuleDenycmdMembership: typeof import("./sudoRuleDenycmdMembership").SudoRuleDenycmdMembership = null as any;
utilities.lazyLoad(exports, ["SudoRuleDenycmdMembership"], () => require("./sudoRuleDenycmdMembership"));

export { SudoRuleHostMembershipArgs, SudoRuleHostMembershipState } from "./sudoRuleHostMembership";
export type SudoRuleHostMembership = import("./sudoRuleHostMembership").SudoRuleHostMembership;
export const SudoRuleHostMembership: typeof import("./sudoRuleHostMembership").SudoRuleHostMembership = null as any;
utilities.lazyLoad(exports, ["SudoRuleHostMembership"], () => require("./sudoRuleHostMembership"));

export { SudoRuleOptionArgs, SudoRuleOptionState } from "./sudoRuleOption";
export type SudoRuleOption = import("./sudoRuleOption").SudoRuleOption;
export const SudoRuleOption: typeof import("./sudoRuleOption").SudoRuleOption = null as any;
utilities.lazyLoad(exports, ["SudoRuleOption"], () => require("./sudoRuleOption"));

export { SudoRuleRunasgroupMembershipArgs, SudoRuleRunasgroupMembershipState } from "./sudoRuleRunasgroupMembership";
export type SudoRuleRunasgroupMembership = import("./sudoRuleRunasgroupMembership").SudoRuleRunasgroupMembership;
export const SudoRuleRunasgroupMembership: typeof import("./sudoRuleRunasgroupMembership").SudoRuleRunasgroupMembership = null as any;
utilities.lazyLoad(exports, ["SudoRuleRunasgroupMembership"], () => require("./sudoRuleRunasgroupMembership"));

export { SudoRuleRunasuserMembershipArgs, SudoRuleRunasuserMembershipState } from "./sudoRuleRunasuserMembership";
export type SudoRuleRunasuserMembership = import("./sudoRuleRunasuserMembership").SudoRuleRunasuserMembership;
export const SudoRuleRunasuserMembership: typeof import("./sudoRuleRunasuserMembership").SudoRuleRunasuserMembership = null as any;
utilities.lazyLoad(exports, ["SudoRuleRunasuserMembership"], () => require("./sudoRuleRunasuserMembership"));

export { SudoRuleUserMembershipArgs, SudoRuleUserMembershipState } from "./sudoRuleUserMembership";
export type SudoRuleUserMembership = import("./sudoRuleUserMembership").SudoRuleUserMembership;
export const SudoRuleUserMembership: typeof import("./sudoRuleUserMembership").SudoRuleUserMembership = null as any;
utilities.lazyLoad(exports, ["SudoRuleUserMembership"], () => require("./sudoRuleUserMembership"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserGroupMembershipArgs, UserGroupMembershipState } from "./userGroupMembership";
export type UserGroupMembership = import("./userGroupMembership").UserGroupMembership;
export const UserGroupMembership: typeof import("./userGroupMembership").UserGroupMembership = null as any;
utilities.lazyLoad(exports, ["UserGroupMembership"], () => require("./userGroupMembership"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "freeipa:index/automemberadd:Automemberadd":
                return new Automemberadd(name, <any>undefined, { urn })
            case "freeipa:index/automemberaddCondition:AutomemberaddCondition":
                return new AutomemberaddCondition(name, <any>undefined, { urn })
            case "freeipa:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "freeipa:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "freeipa:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "freeipa:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "freeipa:index/hbacPolicy:HbacPolicy":
                return new HbacPolicy(name, <any>undefined, { urn })
            case "freeipa:index/hbacPolicyHostMembership:HbacPolicyHostMembership":
                return new HbacPolicyHostMembership(name, <any>undefined, { urn })
            case "freeipa:index/hbacPolicyServiceMembership:HbacPolicyServiceMembership":
                return new HbacPolicyServiceMembership(name, <any>undefined, { urn })
            case "freeipa:index/hbacPolicyUserMembership:HbacPolicyUserMembership":
                return new HbacPolicyUserMembership(name, <any>undefined, { urn })
            case "freeipa:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "freeipa:index/hostHostgroupMembership:HostHostgroupMembership":
                return new HostHostgroupMembership(name, <any>undefined, { urn })
            case "freeipa:index/hostgroup:Hostgroup":
                return new Hostgroup(name, <any>undefined, { urn })
            case "freeipa:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "freeipa:index/sudoCmd:SudoCmd":
                return new SudoCmd(name, <any>undefined, { urn })
            case "freeipa:index/sudoCmdgroup:SudoCmdgroup":
                return new SudoCmdgroup(name, <any>undefined, { urn })
            case "freeipa:index/sudoCmdgroupMembership:SudoCmdgroupMembership":
                return new SudoCmdgroupMembership(name, <any>undefined, { urn })
            case "freeipa:index/sudoRule:SudoRule":
                return new SudoRule(name, <any>undefined, { urn })
            case "freeipa:index/sudoRuleAllowcmdMembership:SudoRuleAllowcmdMembership":
                return new SudoRuleAllowcmdMembership(name, <any>undefined, { urn })
            case "freeipa:index/sudoRuleDenycmdMembership:SudoRuleDenycmdMembership":
                return new SudoRuleDenycmdMembership(name, <any>undefined, { urn })
            case "freeipa:index/sudoRuleHostMembership:SudoRuleHostMembership":
                return new SudoRuleHostMembership(name, <any>undefined, { urn })
            case "freeipa:index/sudoRuleOption:SudoRuleOption":
                return new SudoRuleOption(name, <any>undefined, { urn })
            case "freeipa:index/sudoRuleRunasgroupMembership:SudoRuleRunasgroupMembership":
                return new SudoRuleRunasgroupMembership(name, <any>undefined, { urn })
            case "freeipa:index/sudoRuleRunasuserMembership:SudoRuleRunasuserMembership":
                return new SudoRuleRunasuserMembership(name, <any>undefined, { urn })
            case "freeipa:index/sudoRuleUserMembership:SudoRuleUserMembership":
                return new SudoRuleUserMembership(name, <any>undefined, { urn })
            case "freeipa:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "freeipa:index/userGroupMembership:UserGroupMembership":
                return new UserGroupMembership(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("freeipa", "index/automemberadd", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/automemberaddCondition", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/certificate", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/group", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/hbacPolicy", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/hbacPolicyHostMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/hbacPolicyServiceMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/hbacPolicyUserMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/host", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/hostHostgroupMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/hostgroup", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/service", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoCmd", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoCmdgroup", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoCmdgroupMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRule", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRuleAllowcmdMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRuleDenycmdMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRuleHostMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRuleOption", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRuleRunasgroupMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRuleRunasuserMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/sudoRuleUserMembership", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/user", _module)
pulumi.runtime.registerResourceModule("freeipa", "index/userGroupMembership", _module)
pulumi.runtime.registerResourcePackage("freeipa", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:freeipa") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
