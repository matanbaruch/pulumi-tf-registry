// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SdbSqlDatabase extends pulumi.CustomResource {
    /**
     * Get an existing SdbSqlDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SdbSqlDatabaseState, opts?: pulumi.CustomResourceOptions): SdbSqlDatabase {
        return new SdbSqlDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/sdbSqlDatabase:SdbSqlDatabase';

    /**
     * Returns true if the given object is an instance of SdbSqlDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SdbSqlDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SdbSqlDatabase.__pulumiType;
    }

    /**
     * endpoint of the database
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The maximum number of CPU units for your Serverless SQL Database
     */
    public readonly maxCpu!: pulumi.Output<number | undefined>;
    /**
     * The minimum number of CPU units for your Serverless SQL Database
     */
    public readonly minCpu!: pulumi.Output<number | undefined>;
    /**
     * The database name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.SdbSqlDatabaseTimeouts | undefined>;

    /**
     * Create a SdbSqlDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SdbSqlDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SdbSqlDatabaseArgs | SdbSqlDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SdbSqlDatabaseState | undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["maxCpu"] = state ? state.maxCpu : undefined;
            resourceInputs["minCpu"] = state ? state.minCpu : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as SdbSqlDatabaseArgs | undefined;
            resourceInputs["maxCpu"] = args ? args.maxCpu : undefined;
            resourceInputs["minCpu"] = args ? args.minCpu : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["endpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SdbSqlDatabase.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SdbSqlDatabase resources.
 */
export interface SdbSqlDatabaseState {
    /**
     * endpoint of the database
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The maximum number of CPU units for your Serverless SQL Database
     */
    maxCpu?: pulumi.Input<number>;
    /**
     * The minimum number of CPU units for your Serverless SQL Database
     */
    minCpu?: pulumi.Input<number>;
    /**
     * The database name
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SdbSqlDatabaseTimeouts>;
}

/**
 * The set of arguments for constructing a SdbSqlDatabase resource.
 */
export interface SdbSqlDatabaseArgs {
    /**
     * The maximum number of CPU units for your Serverless SQL Database
     */
    maxCpu?: pulumi.Input<number>;
    /**
     * The minimum number of CPU units for your Serverless SQL Database
     */
    minCpu?: pulumi.Input<number>;
    /**
     * The database name
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.SdbSqlDatabaseTimeouts>;
}
