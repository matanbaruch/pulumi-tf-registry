// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Object extends pulumi.CustomResource {
    /**
     * Get an existing Object resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectState, opts?: pulumi.CustomResourceOptions): Object {
        return new Object(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/object:Object';

    /**
     * Returns true if the given object is an instance of Object.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Object {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Object.__pulumiType;
    }

    /**
     * The bucket's name or regional ID.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Content of the file to upload
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * Content of the file to upload, should be base64 encoded
     */
    public readonly contentBase64!: pulumi.Output<string | undefined>;
    /**
     * Path of the file to upload, defaults to an empty file
     */
    public readonly file!: pulumi.Output<string | undefined>;
    /**
     * File hash to trigger upload
     */
    public readonly hash!: pulumi.Output<string | undefined>;
    /**
     * Key of the object
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Map of object's metadata, only lower case keys are allowed
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the Scaleway Object Storage class to which you want the object to transition
     */
    public readonly storageClass!: pulumi.Output<string | undefined>;
    /**
     * Map of object's tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.ObjectTimeouts | undefined>;
    /**
     * Visibility of the object, public-read or private
     */
    public readonly visibility!: pulumi.Output<string>;

    /**
     * Create a Object resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectArgs | ObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["contentBase64"] = state ? state.contentBase64 : undefined;
            resourceInputs["file"] = state ? state.file : undefined;
            resourceInputs["hash"] = state ? state.hash : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["storageClass"] = state ? state.storageClass : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as ObjectArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["contentBase64"] = args ? args.contentBase64 : undefined;
            resourceInputs["file"] = args ? args.file : undefined;
            resourceInputs["hash"] = args ? args.hash : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["storageClass"] = args ? args.storageClass : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["visibility"] = args ? args.visibility : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Object.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Object resources.
 */
export interface ObjectState {
    /**
     * The bucket's name or regional ID.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Content of the file to upload
     */
    content?: pulumi.Input<string>;
    /**
     * Content of the file to upload, should be base64 encoded
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * Path of the file to upload, defaults to an empty file
     */
    file?: pulumi.Input<string>;
    /**
     * File hash to trigger upload
     */
    hash?: pulumi.Input<string>;
    /**
     * Key of the object
     */
    key?: pulumi.Input<string>;
    /**
     * Map of object's metadata, only lower case keys are allowed
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the Scaleway Object Storage class to which you want the object to transition
     */
    storageClass?: pulumi.Input<string>;
    /**
     * Map of object's tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ObjectTimeouts>;
    /**
     * Visibility of the object, public-read or private
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Object resource.
 */
export interface ObjectArgs {
    /**
     * The bucket's name or regional ID.
     */
    bucket: pulumi.Input<string>;
    /**
     * Content of the file to upload
     */
    content?: pulumi.Input<string>;
    /**
     * Content of the file to upload, should be base64 encoded
     */
    contentBase64?: pulumi.Input<string>;
    /**
     * Path of the file to upload, defaults to an empty file
     */
    file?: pulumi.Input<string>;
    /**
     * File hash to trigger upload
     */
    hash?: pulumi.Input<string>;
    /**
     * Key of the object
     */
    key: pulumi.Input<string>;
    /**
     * Map of object's metadata, only lower case keys are allowed
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the Scaleway Object Storage class to which you want the object to transition
     */
    storageClass?: pulumi.Input<string>;
    /**
     * Map of object's tags
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.ObjectTimeouts>;
    /**
     * Visibility of the object, public-read or private
     */
    visibility?: pulumi.Input<string>;
}
