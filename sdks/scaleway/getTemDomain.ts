// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getTemDomain(args?: GetTemDomainArgs, opts?: pulumi.InvokeOptions): Promise<GetTemDomainResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getTemDomain:getTemDomain", {
        "domainId": args.domainId,
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
        "region": args.region,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getTemDomain.
 */
export interface GetTemDomainArgs {
    domainId?: string;
    id?: string;
    name?: string;
    projectId?: string;
    region?: string;
}

/**
 * A collection of values returned by getTemDomain.
 */
export interface GetTemDomainResult {
    readonly acceptTos: boolean;
    readonly createdAt: string;
    readonly dkimConfig: string;
    readonly dmarcConfig: string;
    readonly dmarcName: string;
    readonly domainId?: string;
    readonly id: string;
    readonly lastError: string;
    readonly lastValidAt: string;
    readonly mxBlackhole: string;
    readonly name?: string;
    readonly nextCheckAt: string;
    readonly projectId?: string;
    readonly region?: string;
    readonly reputations: outputs.GetTemDomainReputation[];
    readonly revokedAt: string;
    readonly smtpHost: string;
    readonly smtpPort: number;
    readonly smtpPortAlternative: number;
    readonly smtpPortUnsecure: number;
    readonly smtpsAuthUser: string;
    readonly smtpsPort: number;
    readonly smtpsPortAlternative: number;
    readonly spfConfig: string;
    readonly status: string;
}
export function getTemDomainOutput(args?: GetTemDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTemDomainResult> {
    return pulumi.output(args).apply((a: any) => getTemDomain(a, opts))
}

/**
 * A collection of arguments for invoking getTemDomain.
 */
export interface GetTemDomainOutputArgs {
    domainId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}
