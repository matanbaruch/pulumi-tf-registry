// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getLbBackend(args?: GetLbBackendArgs, opts?: pulumi.InvokeOptions): Promise<GetLbBackendResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getLbBackend:getLbBackend", {
        "backendId": args.backendId,
        "id": args.id,
        "lbId": args.lbId,
        "name": args.name,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getLbBackend.
 */
export interface GetLbBackendArgs {
    backendId?: string;
    id?: string;
    lbId?: string;
    name?: string;
}

/**
 * A collection of values returned by getLbBackend.
 */
export interface GetLbBackendResult {
    readonly backendId?: string;
    readonly failoverHost: string;
    readonly forwardPort: number;
    readonly forwardPortAlgorithm: string;
    readonly forwardProtocol: string;
    readonly healthCheckDelay: string;
    readonly healthCheckHttp: outputs.GetLbBackendHealthCheckHttp[];
    readonly healthCheckHttps: outputs.GetLbBackendHealthCheckHttp[];
    readonly healthCheckMaxRetries: number;
    readonly healthCheckPort: number;
    readonly healthCheckSendProxy: boolean;
    readonly healthCheckTcps: outputs.GetLbBackendHealthCheckTcp[];
    readonly healthCheckTimeout: string;
    readonly healthCheckTransientDelay: string;
    readonly id: string;
    readonly ignoreSslServerVerify: boolean;
    readonly lbId?: string;
    readonly maxConnections: number;
    readonly maxRetries: number;
    readonly name?: string;
    readonly onMarkedDownAction: string;
    readonly proxyProtocol: string;
    readonly redispatchAttemptCount: number;
    readonly sendProxyV2: boolean;
    readonly serverIps: string[];
    readonly sslBridging: boolean;
    readonly stickySessions: string;
    readonly stickySessionsCookieName: string;
    readonly timeoutConnect: string;
    readonly timeoutQueue: string;
    readonly timeoutServer: string;
    readonly timeoutTunnel: string;
}
export function getLbBackendOutput(args?: GetLbBackendOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLbBackendResult> {
    return pulumi.output(args).apply((a: any) => getLbBackend(a, opts))
}

/**
 * A collection of arguments for invoking getLbBackend.
 */
export interface GetLbBackendOutputArgs {
    backendId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    lbId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
