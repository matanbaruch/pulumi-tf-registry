// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getInstanceServer(args?: GetInstanceServerArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceServerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getInstanceServer:getInstanceServer", {
        "id": args.id,
        "name": args.name,
        "projectId": args.projectId,
        "serverId": args.serverId,
        "zone": args.zone,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getInstanceServer.
 */
export interface GetInstanceServerArgs {
    id?: string;
    name?: string;
    projectId?: string;
    serverId?: string;
    zone?: string;
}

/**
 * A collection of values returned by getInstanceServer.
 */
export interface GetInstanceServerResult {
    readonly additionalVolumeIds: string[];
    readonly bootType: string;
    readonly bootscriptId: string;
    readonly cloudInit: string;
    readonly enableDynamicIp: boolean;
    readonly enableIpv6: boolean;
    readonly id: string;
    readonly image: string;
    readonly ipId: string;
    readonly ipIds: string[];
    readonly ipv6Address: string;
    readonly ipv6Gateway: string;
    readonly ipv6PrefixLength: number;
    readonly name?: string;
    readonly organizationId: string;
    readonly placementGroupId: string;
    readonly placementGroupPolicyRespected: boolean;
    readonly privateIp: string;
    readonly privateNetworks: outputs.GetInstanceServerPrivateNetwork[];
    readonly projectId?: string;
    readonly publicIp: string;
    readonly publicIps: outputs.GetInstanceServerPublicIp[];
    readonly replaceOnTypeChange: boolean;
    readonly rootVolumes: outputs.GetInstanceServerRootVolume[];
    readonly routedIpEnabled: boolean;
    readonly securityGroupId: string;
    readonly serverId?: string;
    readonly state: string;
    readonly tags: string[];
    readonly type: string;
    readonly userData: {[key: string]: string};
    readonly zone?: string;
}
export function getInstanceServerOutput(args?: GetInstanceServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceServerResult> {
    return pulumi.output(args).apply((a: any) => getInstanceServer(a, opts))
}

/**
 * A collection of arguments for invoking getInstanceServer.
 */
export interface GetInstanceServerOutputArgs {
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}
