// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerDomain extends pulumi.CustomResource {
    /**
     * Get an existing ContainerDomain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerDomainState, opts?: pulumi.CustomResourceOptions): ContainerDomain {
        return new ContainerDomain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/containerDomain:ContainerDomain';

    /**
     * Returns true if the given object is an instance of ContainerDomain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerDomain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerDomain.__pulumiType;
    }

    /**
     * Container the domain will be bound to
     */
    public readonly containerId!: pulumi.Output<string>;
    /**
     * Domain's hostname
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerDomainTimeouts | undefined>;
    /**
     * URL used to query the container
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a ContainerDomain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerDomainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerDomainArgs | ContainerDomainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerDomainState | undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ContainerDomainArgs | undefined;
            if ((!args || args.containerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            resourceInputs["containerId"] = args ? args.containerId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerDomain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerDomain resources.
 */
export interface ContainerDomainState {
    /**
     * Container the domain will be bound to
     */
    containerId?: pulumi.Input<string>;
    /**
     * Domain's hostname
     */
    hostname?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerDomainTimeouts>;
    /**
     * URL used to query the container
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerDomain resource.
 */
export interface ContainerDomainArgs {
    /**
     * Container the domain will be bound to
     */
    containerId: pulumi.Input<string>;
    /**
     * Domain's hostname
     */
    hostname: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerDomainTimeouts>;
}
