// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getIpamIp(args?: GetIpamIpArgs, opts?: pulumi.InvokeOptions): Promise<GetIpamIpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getIpamIp:getIpamIp", {
        "attached": args.attached,
        "id": args.id,
        "ipamIpId": args.ipamIpId,
        "macAddress": args.macAddress,
        "privateNetworkId": args.privateNetworkId,
        "projectId": args.projectId,
        "region": args.region,
        "resource": args.resource,
        "tags": args.tags,
        "type": args.type,
        "zonal": args.zonal,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getIpamIp.
 */
export interface GetIpamIpArgs {
    attached?: boolean;
    id?: string;
    ipamIpId?: string;
    macAddress?: string;
    privateNetworkId?: string;
    projectId?: string;
    region?: string;
    resource?: inputs.GetIpamIpResource;
    tags?: string[];
    type?: string;
    zonal?: string;
}

/**
 * A collection of values returned by getIpamIp.
 */
export interface GetIpamIpResult {
    readonly address: string;
    readonly addressCidr: string;
    readonly attached?: boolean;
    readonly id: string;
    readonly ipamIpId?: string;
    readonly macAddress?: string;
    readonly organizationId: string;
    readonly privateNetworkId?: string;
    readonly projectId: string;
    readonly region: string;
    readonly resource?: outputs.GetIpamIpResource;
    readonly tags?: string[];
    readonly type?: string;
    readonly zonal: string;
}
export function getIpamIpOutput(args?: GetIpamIpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpamIpResult> {
    return pulumi.output(args).apply((a: any) => getIpamIp(a, opts))
}

/**
 * A collection of arguments for invoking getIpamIp.
 */
export interface GetIpamIpOutputArgs {
    attached?: pulumi.Input<boolean>;
    id?: pulumi.Input<string>;
    ipamIpId?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    privateNetworkId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resource?: pulumi.Input<inputs.GetIpamIpResourceArgs>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    type?: pulumi.Input<string>;
    zonal?: pulumi.Input<string>;
}
