// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class JobDefinition extends pulumi.CustomResource {
    /**
     * Get an existing JobDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobDefinitionState, opts?: pulumi.CustomResourceOptions): JobDefinition {
        return new JobDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/jobDefinition:JobDefinition';

    /**
     * Returns true if the given object is an instance of JobDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is JobDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === JobDefinition.__pulumiType;
    }

    public readonly command!: pulumi.Output<string | undefined>;
    public readonly cpuLimit!: pulumi.Output<number>;
    public readonly cron!: pulumi.Output<outputs.JobDefinitionCron | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly env!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly imageUri!: pulumi.Output<string | undefined>;
    public readonly memoryLimit!: pulumi.Output<number>;
    /**
     * The job name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<string>;

    /**
     * Create a JobDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobDefinitionArgs | JobDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobDefinitionState | undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["cron"] = state ? state.cron : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["env"] = state ? state.env : undefined;
            resourceInputs["imageUri"] = state ? state.imageUri : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as JobDefinitionArgs | undefined;
            if ((!args || args.cpuLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cpuLimit'");
            }
            if ((!args || args.memoryLimit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'memoryLimit'");
            }
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["cpuLimit"] = args ? args.cpuLimit : undefined;
            resourceInputs["cron"] = args ? args.cron : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["imageUri"] = args ? args.imageUri : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(JobDefinition.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering JobDefinition resources.
 */
export interface JobDefinitionState {
    command?: pulumi.Input<string>;
    cpuLimit?: pulumi.Input<number>;
    cron?: pulumi.Input<inputs.JobDefinitionCron>;
    description?: pulumi.Input<string>;
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imageUri?: pulumi.Input<string>;
    memoryLimit?: pulumi.Input<number>;
    /**
     * The job name
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a JobDefinition resource.
 */
export interface JobDefinitionArgs {
    command?: pulumi.Input<string>;
    cpuLimit: pulumi.Input<number>;
    cron?: pulumi.Input<inputs.JobDefinitionCron>;
    description?: pulumi.Input<string>;
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    imageUri?: pulumi.Input<string>;
    memoryLimit: pulumi.Input<number>;
    /**
     * The job name
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
}
