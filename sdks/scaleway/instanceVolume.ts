// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InstanceVolume extends pulumi.CustomResource {
    /**
     * Get an existing InstanceVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceVolumeState, opts?: pulumi.CustomResourceOptions): InstanceVolume {
        return new InstanceVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/instanceVolume:InstanceVolume';

    /**
     * Returns true if the given object is an instance of InstanceVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceVolume.__pulumiType;
    }

    /**
     * Create a volume based on a image
     */
    public readonly fromSnapshotId!: pulumi.Output<string | undefined>;
    /**
     * The name of the volume
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization_id you want to attach the resource to
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The server associated with this volume
     */
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    /**
     * The size of the volume in gigabyte
     */
    public readonly sizeInGb!: pulumi.Output<number | undefined>;
    /**
     * The tags associated with the volume
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceVolumeTimeouts | undefined>;
    /**
     * The volume type
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The zone you want to attach the resource to
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a InstanceVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceVolumeArgs | InstanceVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceVolumeState | undefined;
            resourceInputs["fromSnapshotId"] = state ? state.fromSnapshotId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["sizeInGb"] = state ? state.sizeInGb : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as InstanceVolumeArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["fromSnapshotId"] = args ? args.fromSnapshotId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sizeInGb"] = args ? args.sizeInGb : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InstanceVolume resources.
 */
export interface InstanceVolumeState {
    /**
     * Create a volume based on a image
     */
    fromSnapshotId?: pulumi.Input<string>;
    /**
     * The name of the volume
     */
    name?: pulumi.Input<string>;
    /**
     * The organization_id you want to attach the resource to
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The server associated with this volume
     */
    serverId?: pulumi.Input<string>;
    /**
     * The size of the volume in gigabyte
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * The tags associated with the volume
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceVolumeTimeouts>;
    /**
     * The volume type
     */
    type?: pulumi.Input<string>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceVolume resource.
 */
export interface InstanceVolumeArgs {
    /**
     * Create a volume based on a image
     */
    fromSnapshotId?: pulumi.Input<string>;
    /**
     * The name of the volume
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The size of the volume in gigabyte
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * The tags associated with the volume
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceVolumeTimeouts>;
    /**
     * The volume type
     */
    type: pulumi.Input<string>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}
