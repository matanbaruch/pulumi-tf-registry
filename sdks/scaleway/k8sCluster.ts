// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class K8sCluster extends pulumi.CustomResource {
    /**
     * Get an existing K8sCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: K8sClusterState, opts?: pulumi.CustomResourceOptions): K8sCluster {
        return new K8sCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/k8sCluster:K8sCluster';

    /**
     * Returns true if the given object is an instance of K8sCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is K8sCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === K8sCluster.__pulumiType;
    }

    /**
     * The list of admission plugins to enable on the cluster
     */
    public readonly admissionPlugins!: pulumi.Output<string[] | undefined>;
    /**
     * Additional Subject Alternative Names for the Kubernetes API server certificate
     */
    public readonly apiserverCertSans!: pulumi.Output<string[] | undefined>;
    /**
     * Kubernetes API server URL
     */
    public /*out*/ readonly apiserverUrl!: pulumi.Output<string>;
    /**
     * The auto upgrade configuration for the cluster
     */
    public readonly autoUpgrade!: pulumi.Output<outputs.K8sClusterAutoUpgrade | undefined>;
    /**
     * The autoscaler configuration for the cluster
     */
    public readonly autoscalerConfig!: pulumi.Output<outputs.K8sClusterAutoscalerConfig | undefined>;
    /**
     * The CNI plugin of the cluster
     */
    public readonly cni!: pulumi.Output<string>;
    /**
     * The date and time of the creation of the Kubernetes cluster
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Delete additional resources like block volumes, load-balancers and the private network (if empty) on cluster deletion
     */
    public readonly deleteAdditionalResources!: pulumi.Output<boolean>;
    /**
     * The description of the cluster
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The list of feature gates to enable on the cluster
     */
    public readonly featureGates!: pulumi.Output<string[] | undefined>;
    /**
     * The kubeconfig configuration file of the Kubernetes cluster
     */
    public /*out*/ readonly kubeconfigs!: pulumi.Output<outputs.K8sClusterKubeconfig[]>;
    /**
     * The name of the cluster
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The OpenID Connect configuration of the cluster
     */
    public readonly openIdConnectConfig!: pulumi.Output<outputs.K8sClusterOpenIdConnectConfig | undefined>;
    /**
     * The organization_id you want to attach the resource to
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The ID of the cluster's private network
     */
    public readonly privateNetworkId!: pulumi.Output<string | undefined>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The status of the cluster
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The tags associated with the cluster
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.K8sClusterTimeouts | undefined>;
    /**
     * The type of cluster
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The date and time of the last update of the Kubernetes cluster
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * True if an upgrade is available
     */
    public /*out*/ readonly upgradeAvailable!: pulumi.Output<boolean>;
    /**
     * The version of the cluster
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * Wildcard DNS pointing to all the ready nodes
     */
    public /*out*/ readonly wildcardDns!: pulumi.Output<string>;

    /**
     * Create a K8sCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: K8sClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: K8sClusterArgs | K8sClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as K8sClusterState | undefined;
            resourceInputs["admissionPlugins"] = state ? state.admissionPlugins : undefined;
            resourceInputs["apiserverCertSans"] = state ? state.apiserverCertSans : undefined;
            resourceInputs["apiserverUrl"] = state ? state.apiserverUrl : undefined;
            resourceInputs["autoUpgrade"] = state ? state.autoUpgrade : undefined;
            resourceInputs["autoscalerConfig"] = state ? state.autoscalerConfig : undefined;
            resourceInputs["cni"] = state ? state.cni : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deleteAdditionalResources"] = state ? state.deleteAdditionalResources : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["featureGates"] = state ? state.featureGates : undefined;
            resourceInputs["kubeconfigs"] = state ? state.kubeconfigs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openIdConnectConfig"] = state ? state.openIdConnectConfig : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["privateNetworkId"] = state ? state.privateNetworkId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["upgradeAvailable"] = state ? state.upgradeAvailable : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["wildcardDns"] = state ? state.wildcardDns : undefined;
        } else {
            const args = argsOrState as K8sClusterArgs | undefined;
            if ((!args || args.cni === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cni'");
            }
            if ((!args || args.deleteAdditionalResources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deleteAdditionalResources'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["admissionPlugins"] = args ? args.admissionPlugins : undefined;
            resourceInputs["apiserverCertSans"] = args ? args.apiserverCertSans : undefined;
            resourceInputs["autoUpgrade"] = args ? args.autoUpgrade : undefined;
            resourceInputs["autoscalerConfig"] = args ? args.autoscalerConfig : undefined;
            resourceInputs["cni"] = args ? args.cni : undefined;
            resourceInputs["deleteAdditionalResources"] = args ? args.deleteAdditionalResources : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureGates"] = args ? args.featureGates : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openIdConnectConfig"] = args ? args.openIdConnectConfig : undefined;
            resourceInputs["privateNetworkId"] = args ? args.privateNetworkId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["apiserverUrl"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["kubeconfigs"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["upgradeAvailable"] = undefined /*out*/;
            resourceInputs["wildcardDns"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfigs"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(K8sCluster.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering K8sCluster resources.
 */
export interface K8sClusterState {
    /**
     * The list of admission plugins to enable on the cluster
     */
    admissionPlugins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Additional Subject Alternative Names for the Kubernetes API server certificate
     */
    apiserverCertSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kubernetes API server URL
     */
    apiserverUrl?: pulumi.Input<string>;
    /**
     * The auto upgrade configuration for the cluster
     */
    autoUpgrade?: pulumi.Input<inputs.K8sClusterAutoUpgrade>;
    /**
     * The autoscaler configuration for the cluster
     */
    autoscalerConfig?: pulumi.Input<inputs.K8sClusterAutoscalerConfig>;
    /**
     * The CNI plugin of the cluster
     */
    cni?: pulumi.Input<string>;
    /**
     * The date and time of the creation of the Kubernetes cluster
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Delete additional resources like block volumes, load-balancers and the private network (if empty) on cluster deletion
     */
    deleteAdditionalResources?: pulumi.Input<boolean>;
    /**
     * The description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * The list of feature gates to enable on the cluster
     */
    featureGates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The kubeconfig configuration file of the Kubernetes cluster
     */
    kubeconfigs?: pulumi.Input<pulumi.Input<inputs.K8sClusterKubeconfig>[]>;
    /**
     * The name of the cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The OpenID Connect configuration of the cluster
     */
    openIdConnectConfig?: pulumi.Input<inputs.K8sClusterOpenIdConnectConfig>;
    /**
     * The organization_id you want to attach the resource to
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The ID of the cluster's private network
     */
    privateNetworkId?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * The status of the cluster
     */
    status?: pulumi.Input<string>;
    /**
     * The tags associated with the cluster
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.K8sClusterTimeouts>;
    /**
     * The type of cluster
     */
    type?: pulumi.Input<string>;
    /**
     * The date and time of the last update of the Kubernetes cluster
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * True if an upgrade is available
     */
    upgradeAvailable?: pulumi.Input<boolean>;
    /**
     * The version of the cluster
     */
    version?: pulumi.Input<string>;
    /**
     * Wildcard DNS pointing to all the ready nodes
     */
    wildcardDns?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a K8sCluster resource.
 */
export interface K8sClusterArgs {
    /**
     * The list of admission plugins to enable on the cluster
     */
    admissionPlugins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Additional Subject Alternative Names for the Kubernetes API server certificate
     */
    apiserverCertSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The auto upgrade configuration for the cluster
     */
    autoUpgrade?: pulumi.Input<inputs.K8sClusterAutoUpgrade>;
    /**
     * The autoscaler configuration for the cluster
     */
    autoscalerConfig?: pulumi.Input<inputs.K8sClusterAutoscalerConfig>;
    /**
     * The CNI plugin of the cluster
     */
    cni: pulumi.Input<string>;
    /**
     * Delete additional resources like block volumes, load-balancers and the private network (if empty) on cluster deletion
     */
    deleteAdditionalResources: pulumi.Input<boolean>;
    /**
     * The description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * The list of feature gates to enable on the cluster
     */
    featureGates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cluster
     */
    name?: pulumi.Input<string>;
    /**
     * The OpenID Connect configuration of the cluster
     */
    openIdConnectConfig?: pulumi.Input<inputs.K8sClusterOpenIdConnectConfig>;
    /**
     * The ID of the cluster's private network
     */
    privateNetworkId?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * The tags associated with the cluster
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.K8sClusterTimeouts>;
    /**
     * The type of cluster
     */
    type?: pulumi.Input<string>;
    /**
     * The version of the cluster
     */
    version: pulumi.Input<string>;
}
