// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getK8sPool(args?: GetK8sPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetK8sPoolResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("scaleway:index/getK8sPool:getK8sPool", {
        "clusterId": args.clusterId,
        "id": args.id,
        "name": args.name,
        "poolId": args.poolId,
        "region": args.region,
        "size": args.size,
    }, opts, utilities.getPackage());
}

/**
 * A collection of arguments for invoking getK8sPool.
 */
export interface GetK8sPoolArgs {
    clusterId?: string;
    id?: string;
    name?: string;
    poolId?: string;
    region?: string;
    size?: number;
}

/**
 * A collection of values returned by getK8sPool.
 */
export interface GetK8sPoolResult {
    readonly autohealing: boolean;
    readonly autoscaling: boolean;
    readonly clusterId?: string;
    readonly containerRuntime: string;
    readonly createdAt: string;
    readonly currentSize: number;
    readonly id: string;
    readonly kubeletArgs: {[key: string]: string};
    readonly maxSize: number;
    readonly minSize: number;
    readonly name?: string;
    readonly nodeType: string;
    readonly nodes: outputs.GetK8sPoolNode[];
    readonly placementGroupId: string;
    readonly poolId?: string;
    readonly publicIpDisabled: boolean;
    readonly region?: string;
    readonly rootVolumeSizeInGb: number;
    readonly rootVolumeType: string;
    readonly size?: number;
    readonly status: string;
    readonly tags: string[];
    readonly updatedAt: string;
    readonly upgradePolicies: outputs.GetK8sPoolUpgradePolicy[];
    readonly version: string;
    readonly waitForPoolReady: boolean;
    readonly zone: string;
}
export function getK8sPoolOutput(args?: GetK8sPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetK8sPoolResult> {
    return pulumi.output(args).apply((a: any) => getK8sPool(a, opts))
}

/**
 * A collection of arguments for invoking getK8sPool.
 */
export interface GetK8sPoolOutputArgs {
    clusterId?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    poolId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
}
