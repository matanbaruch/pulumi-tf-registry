// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    /**
     * CPU limit in mCPU for your function
     */
    public /*out*/ readonly cpuLimit!: pulumi.Output<number>;
    public readonly deploy!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the function
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The native function domain name.
     */
    public /*out*/ readonly domainName!: pulumi.Output<string>;
    /**
     * The environment variables of the function
     */
    public readonly environmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Handler of the function. Depends on the runtime
     * https://developers.scaleway.com/en/products/functions/api/#create-a-function
     */
    public readonly handler!: pulumi.Output<string>;
    /**
     * HTTP traffic configuration
     */
    public readonly httpOption!: pulumi.Output<string | undefined>;
    /**
     * Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on
     * incoming workload, but will never scale the number of replicas above the configured max_scale.
     */
    public readonly maxScale!: pulumi.Output<number | undefined>;
    /**
     * Memory limit in MB for your function, defaults to 256MB
     */
    public readonly memoryLimit!: pulumi.Output<number | undefined>;
    /**
     * Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a
     * min_scale greater than 0 will cause your function to run all the time.
     */
    public readonly minScale!: pulumi.Output<number | undefined>;
    /**
     * The name of the function
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The namespace ID associated with this function
     */
    public readonly namespaceId!: pulumi.Output<string>;
    /**
     * The organization_id you want to attach the resource to
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * Privacy of the function. Can be either `private` or `public`
     */
    public readonly privacy!: pulumi.Output<string>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Runtime of the function
     */
    public readonly runtime!: pulumi.Output<string>;
    /**
     * Execution environment of the function.
     */
    public readonly sandbox!: pulumi.Output<string>;
    /**
     * The secret environment variables to be injected into your function at runtime.
     */
    public readonly secretEnvironmentVariables!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Holds the max duration (in seconds) the function is allowed for responding to a request
     */
    public readonly timeout!: pulumi.Output<number>;
    public readonly timeouts!: pulumi.Output<outputs.FunctionTimeouts | undefined>;
    /**
     * Location of the zip file to upload containing your function sources
     */
    public readonly zipFile!: pulumi.Output<string | undefined>;
    /**
     * The hash of your source zip file, changing it will re-apply function. Can be any string
     */
    public readonly zipHash!: pulumi.Output<string | undefined>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionState | undefined;
            resourceInputs["cpuLimit"] = state ? state.cpuLimit : undefined;
            resourceInputs["deploy"] = state ? state.deploy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["environmentVariables"] = state ? state.environmentVariables : undefined;
            resourceInputs["handler"] = state ? state.handler : undefined;
            resourceInputs["httpOption"] = state ? state.httpOption : undefined;
            resourceInputs["maxScale"] = state ? state.maxScale : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["minScale"] = state ? state.minScale : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespaceId"] = state ? state.namespaceId : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["privacy"] = state ? state.privacy : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["sandbox"] = state ? state.sandbox : undefined;
            resourceInputs["secretEnvironmentVariables"] = state ? state.secretEnvironmentVariables : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zipFile"] = state ? state.zipFile : undefined;
            resourceInputs["zipHash"] = state ? state.zipHash : undefined;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if ((!args || args.handler === undefined) && !opts.urn) {
                throw new Error("Missing required property 'handler'");
            }
            if ((!args || args.namespaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceId'");
            }
            if ((!args || args.privacy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privacy'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            resourceInputs["deploy"] = args ? args.deploy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentVariables"] = args ? args.environmentVariables : undefined;
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["httpOption"] = args ? args.httpOption : undefined;
            resourceInputs["maxScale"] = args ? args.maxScale : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["minScale"] = args ? args.minScale : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespaceId"] = args ? args.namespaceId : undefined;
            resourceInputs["privacy"] = args ? args.privacy : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["sandbox"] = args ? args.sandbox : undefined;
            resourceInputs["secretEnvironmentVariables"] = args?.secretEnvironmentVariables ? pulumi.secret(args.secretEnvironmentVariables) : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zipFile"] = args ? args.zipFile : undefined;
            resourceInputs["zipHash"] = args ? args.zipHash : undefined;
            resourceInputs["cpuLimit"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretEnvironmentVariables"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Function.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    /**
     * CPU limit in mCPU for your function
     */
    cpuLimit?: pulumi.Input<number>;
    deploy?: pulumi.Input<boolean>;
    /**
     * The description of the function
     */
    description?: pulumi.Input<string>;
    /**
     * The native function domain name.
     */
    domainName?: pulumi.Input<string>;
    /**
     * The environment variables of the function
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Handler of the function. Depends on the runtime
     * https://developers.scaleway.com/en/products/functions/api/#create-a-function
     */
    handler?: pulumi.Input<string>;
    /**
     * HTTP traffic configuration
     */
    httpOption?: pulumi.Input<string>;
    /**
     * Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on
     * incoming workload, but will never scale the number of replicas above the configured max_scale.
     */
    maxScale?: pulumi.Input<number>;
    /**
     * Memory limit in MB for your function, defaults to 256MB
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a
     * min_scale greater than 0 will cause your function to run all the time.
     */
    minScale?: pulumi.Input<number>;
    /**
     * The name of the function
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace ID associated with this function
     */
    namespaceId?: pulumi.Input<string>;
    /**
     * The organization_id you want to attach the resource to
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Privacy of the function. Can be either `private` or `public`
     */
    privacy?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Runtime of the function
     */
    runtime?: pulumi.Input<string>;
    /**
     * Execution environment of the function.
     */
    sandbox?: pulumi.Input<string>;
    /**
     * The secret environment variables to be injected into your function at runtime.
     */
    secretEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Holds the max duration (in seconds) the function is allowed for responding to a request
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.FunctionTimeouts>;
    /**
     * Location of the zip file to upload containing your function sources
     */
    zipFile?: pulumi.Input<string>;
    /**
     * The hash of your source zip file, changing it will re-apply function. Can be any string
     */
    zipHash?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    deploy?: pulumi.Input<boolean>;
    /**
     * The description of the function
     */
    description?: pulumi.Input<string>;
    /**
     * The environment variables of the function
     */
    environmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Handler of the function. Depends on the runtime
     * https://developers.scaleway.com/en/products/functions/api/#create-a-function
     */
    handler: pulumi.Input<string>;
    /**
     * HTTP traffic configuration
     */
    httpOption?: pulumi.Input<string>;
    /**
     * Maximum replicas for your function (defaults to 20), our system will scale your functions automatically based on
     * incoming workload, but will never scale the number of replicas above the configured max_scale.
     */
    maxScale?: pulumi.Input<number>;
    /**
     * Memory limit in MB for your function, defaults to 256MB
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Minimum replicas for your function, defaults to 0, Note that a function is billed when it gets executed, and using a
     * min_scale greater than 0 will cause your function to run all the time.
     */
    minScale?: pulumi.Input<number>;
    /**
     * The name of the function
     */
    name?: pulumi.Input<string>;
    /**
     * The namespace ID associated with this function
     */
    namespaceId: pulumi.Input<string>;
    /**
     * Privacy of the function. Can be either `private` or `public`
     */
    privacy: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Runtime of the function
     */
    runtime: pulumi.Input<string>;
    /**
     * Execution environment of the function.
     */
    sandbox?: pulumi.Input<string>;
    /**
     * The secret environment variables to be injected into your function at runtime.
     */
    secretEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Holds the max duration (in seconds) the function is allowed for responding to a request
     */
    timeout?: pulumi.Input<number>;
    timeouts?: pulumi.Input<inputs.FunctionTimeouts>;
    /**
     * Location of the zip file to upload containing your function sources
     */
    zipFile?: pulumi.Input<string>;
    /**
     * The hash of your source zip file, changing it will re-apply function. Can be any string
     */
    zipHash?: pulumi.Input<string>;
}
