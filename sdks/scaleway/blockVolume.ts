// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlockVolume extends pulumi.CustomResource {
    /**
     * Get an existing BlockVolume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlockVolumeState, opts?: pulumi.CustomResourceOptions): BlockVolume {
        return new BlockVolume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/blockVolume:BlockVolume';

    /**
     * Returns true if the given object is an instance of BlockVolume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlockVolume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlockVolume.__pulumiType;
    }

    /**
     * The maximum IO/s expected, must match available options
     */
    public readonly iops!: pulumi.Output<number>;
    /**
     * The volume name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The volume size in GB
     */
    public readonly sizeInGb!: pulumi.Output<number>;
    /**
     * The snapshot to create the volume from
     */
    public readonly snapshotId!: pulumi.Output<string | undefined>;
    /**
     * The tags associated with the volume
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.BlockVolumeTimeouts | undefined>;
    /**
     * The zone you want to attach the resource to
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a BlockVolume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlockVolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlockVolumeArgs | BlockVolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlockVolumeState | undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sizeInGb"] = state ? state.sizeInGb : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as BlockVolumeArgs | undefined;
            if ((!args || args.iops === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iops'");
            }
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sizeInGb"] = args ? args.sizeInGb : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlockVolume.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlockVolume resources.
 */
export interface BlockVolumeState {
    /**
     * The maximum IO/s expected, must match available options
     */
    iops?: pulumi.Input<number>;
    /**
     * The volume name
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The volume size in GB
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * The snapshot to create the volume from
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The tags associated with the volume
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.BlockVolumeTimeouts>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BlockVolume resource.
 */
export interface BlockVolumeArgs {
    /**
     * The maximum IO/s expected, must match available options
     */
    iops: pulumi.Input<number>;
    /**
     * The volume name
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * The volume size in GB
     */
    sizeInGb?: pulumi.Input<number>;
    /**
     * The snapshot to create the volume from
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The tags associated with the volume
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.BlockVolumeTimeouts>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}
