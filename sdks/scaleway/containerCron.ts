// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ContainerCron extends pulumi.CustomResource {
    /**
     * Get an existing ContainerCron resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerCronState, opts?: pulumi.CustomResourceOptions): ContainerCron {
        return new ContainerCron(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/containerCron:ContainerCron';

    /**
     * Returns true if the given object is an instance of ContainerCron.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerCron {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerCron.__pulumiType;
    }

    /**
     * Cron arguments as json object to pass through during execution.
     */
    public readonly args!: pulumi.Output<string>;
    /**
     * The Container ID to link with your trigger.
     */
    public readonly containerId!: pulumi.Output<string>;
    /**
     * Cron job name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region you want to attach the resource to
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
     */
    public readonly schedule!: pulumi.Output<string>;
    /**
     * Cron job status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.ContainerCronTimeouts | undefined>;

    /**
     * Create a ContainerCron resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerCronArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerCronArgs | ContainerCronState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerCronState | undefined;
            resourceInputs["args"] = state ? state.args : undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ContainerCronArgs | undefined;
            if ((!args || args.args === undefined) && !opts.urn) {
                throw new Error("Missing required property 'args'");
            }
            if ((!args || args.containerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerId'");
            }
            if ((!args || args.schedule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedule'");
            }
            resourceInputs["args"] = args ? args.args : undefined;
            resourceInputs["containerId"] = args ? args.containerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerCron.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering ContainerCron resources.
 */
export interface ContainerCronState {
    /**
     * Cron arguments as json object to pass through during execution.
     */
    args?: pulumi.Input<string>;
    /**
     * The Container ID to link with your trigger.
     */
    containerId?: pulumi.Input<string>;
    /**
     * Cron job name
     */
    name?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
     */
    schedule?: pulumi.Input<string>;
    /**
     * Cron job status.
     */
    status?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerCronTimeouts>;
}

/**
 * The set of arguments for constructing a ContainerCron resource.
 */
export interface ContainerCronArgs {
    /**
     * Cron arguments as json object to pass through during execution.
     */
    args: pulumi.Input<string>;
    /**
     * The Container ID to link with your trigger.
     */
    containerId: pulumi.Input<string>;
    /**
     * Cron job name
     */
    name?: pulumi.Input<string>;
    /**
     * The region you want to attach the resource to
     */
    region?: pulumi.Input<string>;
    /**
     * Cron format string, e.g. 0 * * * * or @hourly, as schedule time of its jobs to be created and executed.
     */
    schedule: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.ContainerCronTimeouts>;
}
