// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class InstanceImage extends pulumi.CustomResource {
    /**
     * Get an existing InstanceImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceImageState, opts?: pulumi.CustomResourceOptions): InstanceImage {
        return new InstanceImage(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'scaleway:index/instanceImage:InstanceImage';

    /**
     * Returns true if the given object is an instance of InstanceImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceImage {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceImage.__pulumiType;
    }

    /**
     * The IDs of the additional volumes attached to the image
     */
    public readonly additionalVolumeIds!: pulumi.Output<string[] | undefined>;
    /**
     * Specs of the additional volumes attached to the image
     */
    public /*out*/ readonly additionalVolumes!: pulumi.Output<outputs.InstanceImageAdditionalVolume[]>;
    /**
     * Architecture of the image (default = x86_64)
     */
    public readonly architecture!: pulumi.Output<string | undefined>;
    /**
     * The date and time of the creation of the image
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * The ID of the backed-up server from which the snapshot was taken
     */
    public /*out*/ readonly fromServerId!: pulumi.Output<string>;
    /**
     * The date and time of the last modification of the Redis cluster
     */
    public /*out*/ readonly modificationDate!: pulumi.Output<string>;
    /**
     * The name of the image
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization_id you want to attach the resource to
     */
    public /*out*/ readonly organizationId!: pulumi.Output<string>;
    /**
     * The project_id you want to attach the resource to
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * If true, the image will be public
     */
    public readonly public!: pulumi.Output<boolean | undefined>;
    /**
     * UUID of the snapshot from which the image is to be created
     */
    public readonly rootVolumeId!: pulumi.Output<string>;
    /**
     * The state of the image [ available | creating | error ]
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * List of tags ["tag1", "tag2", ...] attached to the image
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.InstanceImageTimeouts | undefined>;
    /**
     * The zone you want to attach the resource to
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a InstanceImage resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceImageArgs | InstanceImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceImageState | undefined;
            resourceInputs["additionalVolumeIds"] = state ? state.additionalVolumeIds : undefined;
            resourceInputs["additionalVolumes"] = state ? state.additionalVolumes : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["fromServerId"] = state ? state.fromServerId : undefined;
            resourceInputs["modificationDate"] = state ? state.modificationDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["rootVolumeId"] = state ? state.rootVolumeId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as InstanceImageArgs | undefined;
            if ((!args || args.rootVolumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootVolumeId'");
            }
            resourceInputs["additionalVolumeIds"] = args ? args.additionalVolumeIds : undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["rootVolumeId"] = args ? args.rootVolumeId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["additionalVolumes"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["fromServerId"] = undefined /*out*/;
            resourceInputs["modificationDate"] = undefined /*out*/;
            resourceInputs["organizationId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceImage.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering InstanceImage resources.
 */
export interface InstanceImageState {
    /**
     * The IDs of the additional volumes attached to the image
     */
    additionalVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specs of the additional volumes attached to the image
     */
    additionalVolumes?: pulumi.Input<pulumi.Input<inputs.InstanceImageAdditionalVolume>[]>;
    /**
     * Architecture of the image (default = x86_64)
     */
    architecture?: pulumi.Input<string>;
    /**
     * The date and time of the creation of the image
     */
    creationDate?: pulumi.Input<string>;
    /**
     * The ID of the backed-up server from which the snapshot was taken
     */
    fromServerId?: pulumi.Input<string>;
    /**
     * The date and time of the last modification of the Redis cluster
     */
    modificationDate?: pulumi.Input<string>;
    /**
     * The name of the image
     */
    name?: pulumi.Input<string>;
    /**
     * The organization_id you want to attach the resource to
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * If true, the image will be public
     */
    public?: pulumi.Input<boolean>;
    /**
     * UUID of the snapshot from which the image is to be created
     */
    rootVolumeId?: pulumi.Input<string>;
    /**
     * The state of the image [ available | creating | error ]
     */
    state?: pulumi.Input<string>;
    /**
     * List of tags ["tag1", "tag2", ...] attached to the image
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceImageTimeouts>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceImage resource.
 */
export interface InstanceImageArgs {
    /**
     * The IDs of the additional volumes attached to the image
     */
    additionalVolumeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Architecture of the image (default = x86_64)
     */
    architecture?: pulumi.Input<string>;
    /**
     * The name of the image
     */
    name?: pulumi.Input<string>;
    /**
     * The project_id you want to attach the resource to
     */
    projectId?: pulumi.Input<string>;
    /**
     * If true, the image will be public
     */
    public?: pulumi.Input<boolean>;
    /**
     * UUID of the snapshot from which the image is to be created
     */
    rootVolumeId: pulumi.Input<string>;
    /**
     * List of tags ["tag1", "tag2", ...] attached to the image
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    timeouts?: pulumi.Input<inputs.InstanceImageTimeouts>;
    /**
     * The zone you want to attach the resource to
     */
    zone?: pulumi.Input<string>;
}
